sure
Get over the syntax hurdle quickly. There is some weirdness here and there but the reality is really learning a language is understanding how to best use the abstractions that the language gives you. Which is why everyone has the same advice of: disregard syntax, acquire frameworks. Typically for me and a new framework it's 1-3 months before I feel like I don't have to turn to a reference every second and I stop second guessing myself. Half a year and it's pretty comfortable. Couple years in and I'm confident in what can and can't be done (and can research if something cannot really be done). 
I'm also in the middle of learning to code for iOS. I decided about a month and a half ago (OK, it was right after WWDC!) that I wanted to write an app for an idea I had. After a little research I figured Swift wasn't ready yet and I started with Python for the reasons others have said (easy, object oriented). I took the class at codecademy which I enjoyed. From there I jumped to the Objective-C class at codeschool, which is similar to the codecademy style but not as good. Currently I'm following the iOS path at teamtreehouse, which I like a lot. It's more like an actual class that you follow along with videos of an instructor walking you through the concepts and the code (it really helps to have a biggish 2nd screen for the video while you work on your computer). I just finished the first working app, and I'm feeling a bit more confident but at the same time very aware of how much I don't know. I think the python class helped a lot to ease me into object oriented programming concepts with relatively simple syntax. Although if you asked me about the specifics of Python today I doubt I would be able to answer.
Variadic parameters are useful when you want your function to be able to handle an unknown number of variables. For example, if you know you will want to multiply several integers together, but you don't know *how many* integers, variadic parameters make sense. For that example, this function comes in handy: func multiply(first: Int, _ others: Int...) -&gt; Int { var result = first for number in others { result *= number } return result } let result = multiply(1, 2, 3, 4, 5) Variadic parameters are also convenient to use when you might normally need to process several things at once. Consider this function: func printWithPrefix(prefix: String, str: String) { println(prefix + str) } printWithPrefix("print: ", str: "first") printWithPrefix("print: ", str: "second") printWithPrefix("print: ", str: "third") Instead of calling prefix for every string you want to prefix, you could use variadic parameters to process them all at once, like this: func printWithPrefix(prefix: String, strs: String...) { for str in strs { // call the non-variadic version of this function printWithPrefix(prefix, str: str) } } printWithPrefix("print: ", strs: "first", "second", "third")
Couldn't have been better! Thank you very much! w/ the sketch given in the book I could completely understand it.
That's interesting. The counter argument is that it would be weird if the compiler did not warn you that you did not implement all of the required methods, regardless of argument overloading. What if you mark them as optional protocol methods? Clear documentation that at least one is required might be sufficient for the consumer. You might even be able to assert that the conforming implements at least one of them. @objc protocol P { optional func f(a: String) -&gt; String optional func f(a: String, b: String) -&gt; String } class C: P { func f(a: String, b: String = "baz") -&gt; String { return (a+b) } } What I really find strange is that you need `@objc` to declare anything optional in the protocol. This causes it so that only classes can conform to the protocol, no enums or structs.
Marking the funcs as optional is not what I want - anyone who uses an object that conforms to protocol P should know that they can call both versions of f. I'm not asking the user to implement a protocol; instead, I use the protocols to hide implementation details in my framework (ie. I give the user an object of type P, the class C is my private implementation). I might reconsider this, though, the benefits of hiding my implementation may not big enough to justify the headache it's causing. Swift's protocols don't have optional methods anymore - the whole concept of optional methods in protocols is a bit strange. I don't know any other language that supports optional methods in interfaces; while they are put to good use in Objective-C, I understand why they were removed in Swift. It just goes against the whole static typing approach; the user shouldn't have to check at runtime which methods are implemented by a class.
Don't tell us to not upvote. 
So, why does it matter? The article really doesn't say...
Alright that's it. This is the last useless terrible article I read on /r/swift. It's a great language for a great platform but this sub is covered with shit. Writers seem to think that they can write introductory pieces for people who have never seen the Swift language and post them on /r/swift to get traffic. Anyone on this sub is not the target audience for such articles, as this sub is for people who already know the basics of Swift. Moderators really need to do something about this. Until then, unsubbed.
It's like Swift in that until iOS 8 is public you can only test on development devices, not submit apps using it to the AppStore.
This is very cool! If you've seen the advanced Swift WWDC video where they added "an ~ numberOfObjects" syntax to the language (basically making '~' a special language syntax like ? and !). Then you know you can grab values right &amp; left of a special character. As Apple have said lots of Swift has actually been written in itself I'd imagine this is almost exactly how Optionals work! (I hadn't considered everything the new enum type can do until I sort this!) Enum has had quite an upgrade from the named int values it effectively was with C/ObjC!
The post was submitted by a 'credible' redditor, so I'll delete the post rather than mark as spam. I'll try and stay on top of other neg posts. 
What are the skills of your team? Is this a project with strong commercial imperatives or is it an exercise in learning Swift? Are you starting a new codebase that is expected to have a long lifetime? Are there features unique to Swift that will help solve particular problems in your project? What third-party libraries will you be using and are they Objective-C or Swift?
You mean NSLog("Hi %@", name); No fancy things like using + for string concatenation in Objective C.
Don't blame you, and good luck!
That's the plan! Thanks a lot!
Wow a tutorial from the future!!.... (Seems to be dated August 29 2014) Nice Tut though!
The syntax of objective-c isn't hard to learn. You should at least be able to read objective-c because a lot of libraries were written in it. The majority of time spent is on the Apple's framework, such as UITableView/CollectionView, delegates, protocols, the controller patterns, CoreData, etc. I would recommend starting with objective-c now, if you start working on projects right now. You can also use both language at the same time, if you are a polygot programmer who loves learning programming languages.
&gt;Consider this function: func multiply(first: Int, _ others: Int...) -&gt; Int { var result = first for number in others { result *= number } return result } let result = multiply(1, 2, 3, 4, 5) -&gt; func multiply(first: Int, _ others: Int...) -&gt; Int { return reduce(others, first, *) } Variadic parameter lists implement the Generate / Sequence protocols and can therefore be used with the generic collections algorithms. :)
Developers will move to Swift regardless, there are too many advantages. It has the air of inevitability about it. Nobody is going to risk staying with Objective-C when the perception is that everybody is going to switch and it is all just a matter of time. 
That is partly my point. The beauty of Objective-C compared to any other semi high level language is that it makes it trivial to wrap C libraries. If you got some low level code mostly written in C which you want to expose to Swift. What simpler way is there than to wrap it up in some Objective-C class and expose that to Swift?
Swift isn't even finalised yet, things will change. Plus you will need to learn the frameworks anyway, which often require an understanding of C and Objective-C to use well. You should learn Objective-C, and Swift afterwards.
That indeed looks like a solid plan. You can also check out r/learnpython. They have a very active community as well. Have fun! And once you've gotten to the point that you want to actually start making useful software, remember that most internet sites have a python wrapper (reddit's is called PRAW.) So don't feel like you have to print "Hello World"s forever. I, for example, made a script that dumps tumblr blogs looking for content the original blogger uploaded. That one is called No-Repost-Tumblr, and you can find it on github. Reading through other people's code is a good way to test your understanding, and since you can reach me through this thread, you can feel free to ask questions. 
I've used both languages in Xcode 6, and I can tell you all of Apple's framework work seamlessly with Swift. Cocoa (like UIViewControllers), things like Sprite Kit, and everything else is Swift-ready. So you can definitely jump into it. But it is always good to know some form of C because much of Swift works under the hood, like how you can't use pointers yourself but things are automatically declared as pointers by the language.
250kb daily database limit looks kind of small.
That's exactly what I thought, everything else seems quite fair, but DB transfer seems ultra low. I've never really looked into how much data is transferred on DB calls though.
Send me PM after you contact this guy. I will give you a better quote and higher quality.
That feedback sound in the video is annoying..
Since the iPhone 4S, Apple has released the iPhone on Sept. 20th or 21st. So using that as a guide it is safe to say that Swift will be out of beta by end of September. All of the Cocoa API's work with Swift and I think if your team were to get started with Swift today any changes that come along can more than likely be retro-fitted back into your source within 2 days tops. Moving from Java to Obj-C would be a nightmare for your team and they will hate it. That's no judgement against Obj-C its just that the syntax and paradigms of Obj-C are wildly different from any language you guys have used before. Learning the in's and out's of the Cocoa framework is going to be daunting enough and the last thing you need is having to learn the vastly different Obj-C syntax on top of it. Swift is the future and I just can't see deciding against it simply because there is 7 weeks of beta time remaining. Btw, have you guys considered Xamarin as a cross-platform alternative? It uses C# and allows you to write native apps and a shared source code base for your business logic. Your UI logic can't be shared though. Just thought I would throw that out there. Good luck!
Agreed, the entire post could be a tweet along the lines of "Don't think that your iOS App using Core Data is immune to sql-injection like attacks."
Thank you for your commnt. I will have a look at Xamarin. Your comment actually convinced me to rely on Swift. I hope it will come out of Beta with the release of iOS8. 
Apple has already stated that the beta period will end upon the release of iOS 8 so no worries there. Xamarin is awesome for teams that need to provide native apps for both iOS and Android. You have to be very disciplined though in keeping your business logic separate from your UI logic. Your UI logic is still coded in C# but you use different UI frameworks that are specific to each platform. Most teams see about 85% code re-use where the remaining 15% is the UI logic that can't be shared across platforms. They also have a great track record in releasing support for new versions on the same day that the new OS is released i.e. you'll get new Xamarin frameworks on the same day that iOS 8/Android L is officially released. So you're never out of step with OS releases.
Then PM me, I'll beat them both.
Misleading advice. Currently - and likely by 1.0 as well - there are things you can't do in Swift, but works in ObjC. Conversely, ObjC code will not play nice with certain Swift constructs. Quite simply it's a minefield when you jump to serious development (I ported an entire commersial game to Swift, upgrading another project to Swift). Right now you need to know ObjC if you want to go beyond simple samples. **This will change** but right now recommending Swift-only is irresponsible to say the least. (Plus: every 3rd party library will be ObjC)
Exactly
Shouldn't the rule be "no imports" instead of "import Cocoa" if the challenge is meant to be "pure Swift"? Otherwise people might bring in parts of Cocoa such as Foundation, Darwin, etc. :-)
Man, tough crowd here =). How about "Cool, I like the idea of stepping away from the API's and focusing on the language" or, something =P
Ditto
Please for the love of god, make it stop. Say something new and original. Don't just paraphrase the Swift book poorly.
love it, thx for the link!
Because Swift uses protocols with associated types instead of templated protocols. F-bounded quantification is needed when protocols specified in right side of the template parameter constraints need to match the template parameter on the left. The standard use case for F-bounded quantification is usually this type of function: func maxElement&lt;T where T: Comparable&lt;T&gt;&gt;(c: Sequence&lt;T&gt;) -&gt; T where you need the element type for the Sequence to adhere to a protocol that returns the element type, in this case, Comparable. In Swift though, protocols rely on typealiases instead of templating so we get the same effect by applying constraints to the typealias instead of the template parameter. This has the advantage that it avoids the need for recursive types. So in Swift, you use: func maxElement&lt;R: Sequence where R.GeneratorType.Element: Comparable&gt;(range: R) -&gt; R.GeneratorType.Element and the typealiases ensure the exact same type safety that F-bounded quantification ensured in the previous example (this is the actual definition used for maxElement in the Swift standard library). No recursion necessary. Which is a good thing because it avoids large categories of problems when resolving recursive types in the compiler. Note the one quirk: the template parameter R has to be the Sequence type, not the element type. This is required so the typealias (specifically GeneratorType which is defined on Sequence) can be resolved.
Yeah, the whole way through, I'm thinking what it's basically saying is: &gt; You know that incredibly common security issue that you can screw up with all other languages? Well you can screw it up with Swift too! In exactly the same way! As clifyt said, a real *no shit* situation. I'm sure there are plenty of people who will still make this mistake though.
And this, folks, is how apps became 99c :(
The best software revenue model is subscriptions.
Well I think of an iOS app as being one front-end for a software service. So the app is not an end to itself.
So really what you're saying is, apps should be a free add-on to some other business model, and that they have no value as products in their own right.
I'm deeply saddened by this, but I also can't deny it. For whatever reason, people don't want to pay for phone/tablet apps.
Swift is a gift from the gods to mediocre bloggers. 
I'm skeptical seeing that there are two posts today in this subreddit to the same site. 
I'd love to read it, but I don't have 50 to drop on it. 
Love the site, love the design. Best of luck with it all
"3600 people are learning with Design+Code" Neat - Anyone here with feedback? Is it worth $50? I'm interested in learning, but I'm already in an online class that's over my head.. 
I bought it a few weeks ago. All the chapters have been amazing, and very informative. I know objective-c pretty well so I mostly focused on the design chapters, which are outstanding. I had been looking forward to the Swift section, but admittedly it isn't that great. It focuses on designing the UI with Swift, and doesn't cover programming the model or controller with it.
Disclaimer: I'm the author of the book. Not sure if it's unethical to comment here when it's about your work. I apologize if that's the case. :) I was surprised to see double posts to the link as well. Not my work, I promise.
AFAIK, it is the only file that allows "top-level expressions." This makes sense -- other files are able to define classes, functions, protocols, enums, constants and/or variables, what have you. But the main file is the only one actually allowed to execute those.
I've had the exact same issue. Makes me want to put together my own tutorials for those of us who are interested in the Wild Wild West that is the Mac App Store. 
If you're really interested in getting some good design tips and in learning Sketch then I would say yes its worth it. The author does go into great detail with how to use sketch and in design decisions such as explaining the color wheel and how colors are paired together etc. I haven't read chapter 4 which is suppose to cover Swift because he just released it this week. So don't come into it thinking you're going to learn the in's and out's of app development but rather the in's and out's of app design and a really good intro in how to use Sketch.
Start with something easy that can be built upon. I'd like something that calculates pi to the 20th digit, or an irc client or something like that.
Thanks for the suggestions! Love to keep it going regularly (weekly?) with sorts of challenges to think "Swiftly!"
When it come to limiting the use of import statements, I like a middle ground, and suggest that we draw the line at Darwin. The Swift standard library is sparse, and there are only 2 choices for implementing much of what is missing. Either rely on the the high level frameworks from Apple like the NS* classes, or use the C and Posix APIs available through the Darwin module. In my opinion, the impedance mismatch between objc and swift results in code which is simple, but does not truly leverage the strength of the Swift type system. Auto-unwrapped optionals, and AnyObject make for easy objc integration, but result in code which strikes me as just objc wearing a suit of new syntax. I would prefer to really dive into the differences between Swift and other languages rather then rely on the compatibility with existing Objc infrastructure. Take basic IO. There is no readln() function in the standard library yet. Without Darwin, there is no access to the read() and write() system calls, or to the FILE streams of stdio. It is trivial to implement a clean and safe wrapper for read() or fgets() to produce a readln() function. Of course readln() just adds that one piece. Stopping there, merely lets one write Unixy code in swift rather than C. For more Swiftishness, take a structure containing a file descriptor or file handle and use the Sequence and Generator protocols to map the IO onto a strongly typed sequence of Lines or Strings. Now you are cooking with gas. From a practical standpoint I also think this will map very well to a future dividing line between Apple and non-Apple distributions of Swift. I think it is very likely that the Swift compiler will become part of the open source LLVM toolchain. In that event only the objective-C classes bridged to the open-source CF components are sure to be included. The crown jewels of Apple's higher level Application frameworks will not be present. An open source release would certainly support a module like; Unix, Posix, or System. That is a rich enough base on which to build services for an entire operating systems. So, what do other people think about limiting code to that supported by the Swift and Darwin modules? 
Okay, thats exactly what i was thinking but i wasn't sure. Thanks!
Interesting idea, but I strongly recommend against doing this. First and foremost, hardcoding the update URL while forcing updates means that if Apple *ever* changes the address structure, your users will either (1) be stuck in an update loop or (2) will have to manually update just in order to use an app they've already downloaded. Further, I wouldn't ping my own server, no matter how small the traffic. Just query the App Store. The update checking traffic could be expensive to your server depending on user base and how often your app checks for updates. 
Quick is the first on the scene, but at its core, it's basically a port of Obj-C code to Swift, and therefore has a lot of trouble taking advantage of a lot of Swift's nice features due to its deep coupling to Obj-C. Whether that actually matters in practice or not is another story.. but I wouldn't hold it up as a good example of Swift code.
Yeah, I agree. I learned it because it was the first one of the scene. I think I'll actually just make use of XCTest for the time being until some others mature. Regardless it still allows me to give the general idea of TDD. Any suggestions on a testing framework you like? 
Looks really nice. The first seen I imagined when discover Swift was something like that. This language looks so well suited for web programming, just like go, but better designed.
Well... full disclosure, I'm writing one. https://github.com/Swiftest/Swiftest There's also Sleipnir https://github.com/railsware/Sleipnir Both are using a more pure-Swift implementation that relies less on NSObject and XCTest. The differences are relatively minor - but Sleipnir does "should" style expectation (2.should(equal(2))) (or wants to) and Swiftest sticks with "expect" style. I personally don't like monkey-patching the core data types. My todo list is nearly done -- but now I'm looking at putting an Obj-C wrapper for Swiftest in place so that it can test both Swift and Obj-C. Either way, I'd love to get some feedback :)
We are doing our app as Swift-only as possible. Some collections are surprisingly hard to write. But that's more "the compiler keeps segfaulting over these generics" difficulty than actual difficulty. 
Definitely some rough areas, but its a beta so we can hide behind that for NOW! I also think it would to be fun to do some challenges to port some specific mechanisms in other languages over into Swift. e.g. "Implement "Inject" from Ruby in Swift". "Implement "With" from Groovy, in Swift"
Nevermind. Just found the [link](http://goo.gl/b12WXF). 
Thanks! You can find the slides at http://goo.gl/b12WXF . I agree they are quite hard to see. Hopefully I can work with the guys who recorded to make sure this doesn't happen next time.
Does this count? https://github.com/jkolb/Lilliput
I'd read it. I've been learning Swift and Cocoa (and Xcode) by translating the Objective-C examples in my Mac OS X programming textbooks into Swift, but a new set of tutorials would definitely be worth having.
Beta rant. 
Because Swift is such a new language, and isn't quite resolute yet, you are going to have a hard time finding good tutorials on it. These will probably be the best you'll find at the moment. [swift learntris](https://www.bloc.io/swiftris-build-your-first-ios-game-with-swift) [raywenderlich](http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start)
The common use for this is having a lazy variable that is set by the closure. This is also the only way you can initialize an instance variable that uses self. For example init { someVar = MyClass(self) } is forbidden, but lazy var someVar = { return MyClass(self) }() is ok, since the latter case has MyClass(self) guaranteed to run after init
I personally love it! I feel the writer does a great job at getting you on your feet and up to speed quickly as well as supply resources for growth. Still working on the swift section but it alone is already worth the money
https://github.com/RyanCopley/node-drive-share/blob/master/MainViewController.m#L99-L109 Should translate to Swift very easily.
Something fun for the community akin to a Ruby Quiz or other mechanism to give people problems to use Swift to solve. Perhaps this particular challenge doesn't appeal to you, but more will be arriving and perhaps one will seem fun to you to participate in! I am also working on providing commentary &amp; analysis for peoples submissions to talk about interesting choices they made, or possible pitfalls with implementations. In short, its "sticked" to help grow the community. 
It does have its draw backs. If you looked at the submissions for the last contest that was started but didn't seem to have a conclusion, the large majority of them were just calls into Cocoa that may as well have been written in Obj-C. Swift was simply a side effect, it wasn't a focus. Several of us felt like there should be something to help bring the focus towards Swift as a language. I think there are plenty of ways to explore Swift within the confines of Cocoa, interacting with all of UIKit and AppKit. I don't think there are as many outlets to do whats being proposed here. It would also be pretty cool and helpful if Swift were made open source in some way, I doubt we'd get Cocoa with it =)
Cool! I just took a look at it, it was interesting how different your solution was compared to Erica's! I'd love to have some post mortems on submissions to do some analysis on peoples approaches!
Nice summary! One nitpick: in your custom implementation of successor(), you have: return MyForwardIndex(index:_index++) which should probably be return MyForwardIndex(index:_index + 1) instead. Calling successor() should return a new index without modifying the one it's called on. I'm really impressed at how the Swift designers adopted the C++ model of iterators in their notion of indexes, which are much more powerful than iterators in other mainstream modern languages (like Java). Java's model is broken because it tries to blend sequence generation with mutation (remove), but IndexingGenerator is a nice general way of bridging these two fundamental concepts in Swift. Very thoughtful design.
I think if you went through and added the choice to see a Swift version of your "Build the app" section it would cater to everyone who is trying to learn Swift. Everything still applies the same, yes, but for beginners it's counter-productive to first learn Objective-C when their main goal is to learn Swift.
Add more unit tests. Currently there is 1 file containing 1 test method. Add a demo project. 
Lol wow - I missed that in my fast review. 
Great! Will try out on next swift night!
Agreed, would love to see some great HQ videos explaining the XCode storyboard interface.
I have gone thru a few tutorials explaining storyboards but unfortunately I have done so many tutorials since swift's release that i don't remember which ones they were. From what I remember you basically want to do the following: --add properties onto the destination ViewController that you are navigating to that will store the info you want --in the prepareForSegue of the calling ViewController evaluate the id of the segue to determine if its the segue you are expecting. There is a destinationViewController property on the segue. Cast it and set the properties with the data you want to pass to it. class MasterVC { override func prepareForSegue(segue: UIStoryboardSegue!, sender: AnyObject!) { if (segue.identifier == "segueToCustomerDetail") { let detailsVC = segue!.destinationViewController as CustomerDetailVC detailsVC.CouponCode = "50%OFF" } } } Google is your friend in scenarios like this - there is bound to be someone who has run into the same scenario as you and shared a solution. Hope this gets you on the right track. Good luck!
'let' makes your variable a constant. Optional allows your value to possibly be nil. The combination means that your method CLLocationManager() could produce a real value, or it may return nil. I think you could then implement design patterns similar to those in Obj-C that pass messages to nil. *Side note: I may be entirely wrong*
hmm?
Thank you for the example... I've seen some examples similar to this, and I tried to implement it myself but I was having trouble with it... Problem is most of the tutorials are Objective-C and I have a strange fear of that language. My brain just falls apart when I look at it. A really great tutorial regarding storyboards, view controllers (and embedding them in other controllers, etc), segues... that would rock. I found a mention of checking out the Master/Detail template, but I tried to follow it and it doesn't seem similar at all to the material I've looked at so far with storyboards/controllers/segues.
Top of my head, should be self.myMap.mapType = MKMapTypeSatellite Obviously after you instantiate a MapView Object. 
Ahh cool, that cause MKMapType is an enum in Swift but was a constant in ObjC?
See [Interacting with C APIs](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_13) in the "Using Swift with Cocoa and Objective-C" book, particularly the part about enumerations. For learning Swift, the [resources that Apple provides](https://developer.apple.com/swift/resources/) are a great start. But Swift and Cocoa are two different things. If you're already familiar with Cocoa and Objective-C, Swift is a pretty easy learn. If not, tackling both Swift and Cocoa at the same time may be a difficult way to learn the platform, at least while Swift and its compiler are still in Beta.
Thanks! If you, or anyone, has feedback so I can make it better, don't hesitate to let me know.
Its a boundary issue with your scene size. You should add a line in your gameviewcontroller, where you declare the game scene, before the apect fit: scene.size = skView.bounds.size 
you should go watch Paul Hegarty's iOS 7 classes on iTunesU - it's free. I was the same way with Obj-C before watching his courses but now I understand Obj-C well enough to make sense of the tutorials and code references that I need. Trust me, it'll help you tremendously. Good luck! https://itunes.apple.com/us/course/developing-ios-7-apps-for/id733644550
It's the same as "this" in other languages. It refers to the object the method is defined in so you can access its members (variables and constants). 
it's only 4300 lines of swift. One can be highly productive on a good day when the architecture is just right and the task is well specified and there are no obstacles. At the moment I'm doing research and refactoring so development is slow. 
Apple is probably going to take the closure route, [UIAlertAction already has an initializer that will take a closure as handler](https://developer.apple.com/library/prerelease/iOS/documentation/UIKit/Reference/UIAlertAction_Class/index.html#//apple_ref/occ/clm/UIAlertAction/actionWithTitle:style:handler:)
I submitted a link to this right after the author has announced about it on Twitter. I'm sure there are other people who wanted to submit it because it is helpful and informative.
Does anything happen when you double click on one of the outline items?
It focuses that view, but the item doesn't become clickable. I can actually drag from the outline back into the view, but It's not a huge deal. Just thought I might have done something dumb. For now I'm willing to chalk it up to "beta issue"
The problem with closures is memory leaks. Giving a closure to an object you own can create a retain cycle if you're not careful.
Fantastic!
I don't really think that @UIApplicationMain is something that should be baked into the language. It combines far too much "special case" and "information hiding" for my liking. Especially since the standard Xcode templates automatically generate the main.swift code anyway. I think it would have been better to use the same main.swift into the ApplicationMain approach that the Mac uses.
Nice stuff! Submitted a pull request for a minor minor tweak :-)
Note that Swift is build on top of the ObjC runtime. This is unlikely to change. What probably will happen is that the features we're currently forced to rely on NSObject for, will get counterparts in native Swift - even though the underlying code is unified. 
I'm getting an error from the line @IBOutlet scrollView :UIScrollView; It's saying it needs either a ! or ? at the end. I cloned your code from github and tried to run it, but it looks like the error is in your repo too. I'm using Xcode 6 beta 4. Can you help? 
Same goes for giving a reference to an object as a delegate. 
Emulates the looks that I think Clear made popular. Very nice, good work :)
Delegates generally are weak references.
Hmm interesting, I am not seeing any error in the repo, but I am using 6 beta 3. I will download beta 4 and test. Thanks for the report.
This has been fixed (thanks to @th0114nd on github). 
Yep, certainly drew my inspiration from Clear, despite not being a user of their product. 
Totally understand. I'm in the same position -- I was just hoping to push some work off to someone else. Ha ha ha! I think we're lacking in Swift examples for Yosemite style desktop apps, so this is good. The value of some newer things, like metal, are a bit difficult to gauge. I expect to see people develop frameworks that will make it more useful to the broader developer community.
It's definitely a bug. You should file a bug report.
im still in newb status, but as i find i use the APIs with objective C or swift, im getting a better hold on what to expect. Really i started coding ruby on rails apps over 5 years ago, and there's stuff i still dont quite remember. It just comes down to repetition.
No. Simply learn the frameworks and classes as need arises. When encountering some necessary functionality, assume it exists. That's all.
I am sure that Apple will not take either route fully. Some APIs will use closures while others will use the delegate pattern.
I've been a professional programmer for around 20 years now. This division of difficulty is always the case - with every language and in every environment. The only reasonable way to learn the APIs is to use them. Write code and do the initial lookup into the docs to find out how the API works - and then keep writing more code. It could help to browse through the API docs once at the highest level so that you're familiar with the class names, the kinds of global functions and macros that exist in each module, and the overall feature set of the system you get for free, but trying to read it all in depth or memorize it all will be absolutely overwhelming. Apple is very good about using certain patterns of design consistently. Yeah, they also use Design Patterns, but I mean the naming schemes and division of responsibilities in their classes. I think it's much more important to become familiar with the ideas behind how they designed the APIs than to memorize every particular thing. If there is any part of the overall API that might be worth memorizing in the manner you suggest it's the Foundation module. That has the definitions of the basic types, the collection types, and all of the other standard library bits that will be useful to every project.
Thanks everyone! I needed a command-line tool in another project I was working on, and it was fun to write this while sticking to pure Swift. I didn't intentionally copy another library, but I have written a fair amount of Python, so it's not surprising that the API turned out to be similar.
Thanks for all your feedback guys. I main reason why think I'll stick to Closures, is because of: &gt; ...optional methods on protocols is kind of painful in Swift because it only works with protocols that are marked as @objc, can only be adopted by classes, etc.
Memorization feels like a waste of time, and I haven't put much effort into doing it over the last several years of iOS development. The documentation is great, so I usually just start at the top when I need a new thing and work down the doc. Once you do enough of this stuff, you'll start to see the patterns that Apple follows when writing APIs. Nearly every action that the SDK takes has hooks before (somethingWillDoSomething) or after (somethingDidSomething), for example, so it's better to pick up on these, and you can start guessing with greater success. The only downside with this approach that I've found is that Swift monkeys it all up, because it's syntax isn't conducive to the current API's ObjC origins. To me, it feels really unnatural to have named parameters in the parens, but I assume I'll come around. 
This looks pretty cool but I would never use something like an auth framework that has no test coverage.. Great work though and props for putting it out there :)
Don't memorise. In most cases, Xcode's built-in documentation viewer and Google will do the job really well. Instead of spending time memorising, you could spend the time actually solving a problem (while reading documentation of course).
I failed to mention that tests are likely going to be the stage after next (the next stage being that the PIN is stored in the keychain) Since Swift is still in beta I was hoping some people might play around/integrate it and by the time Swift is out of beta/being accepted on the App Store any bumps will have been ironed out :) Keep an eye on it though, if you think it might be useful, as I can assure you more updates will be coming!
While I can't give you a specific answer, I can guess to the reason why that wouldn't work. Swift is extremely type-strict on the compilers end, it wants to assume the type of everything so that you don't have crashes/problems during run-time. This of course makes things a little more difficult to do, especially since we're so used to C. Anyways, at compile, it will look at what you assign it and then infer the type from that. So an array with just strings is inferred as `[String]`, and the one with just integers is inferred as `[Int]`. However, the one with both gets inferred as an `NSArray` (an array of any objects). You can see this in the autocomplete list in a Swift playground. Once its inferred as an `NSArray` and not a type-strict array the generics fall apart when trying to convert because "Cat" is inferred as `String`, so array in the finder method is defined with type `[String]` and that type isn't the same as `NSArray`. That's just my educated guess at least.
The error seems like a bad error, but you cannot do this because `Any` is not equatable. As you guessed, the type of your last `testArray` is inferred to be of type `[Any]` and because `Any` is not equatable, the method cannot take it as a valid parameter.
The type is inferred to be [Any] not NSArray. If you import Foundation, [Any] can be implicitly cast to NSArray but that is an [entirely different topic](http://www.drewag.me/posts/swift-s-weird-handling-of-basic-value-types-and-anyobject). Also, the type for the `finder` call is inferred to be type `Any` because that is what `testArray` is storing and `"Cat"` can be upcast to it. The real issue is that `Any` is not `Equatable` like the `finder` requires
I haven't cracked open Xcode for a little while but I believe that your storyboard is set for the larger screen size of iPhone 5s and the simulator your running is the 4s which is a smaller screen so it cuts the bottom off. You can add constraints to your buttons to have them adjust automatically based on the sized phone your running. Again, haven't opened Xcode much in about 2 months so this may be wrong. Take it with a grain of salt. 
You can write objective-c in several different IDE's. Xcode is just apple's IDE that I'm sure they prefer you use. As far as swift, since it's not officially released yet I'm not sure if it's supported by other IDE's or not. 
I'd recommend getting to know Xcode a little better before trying to jump to another platform. Specifically, you should learn how AutoLayout and Constraints work. AutoLayout is the best way for you to lay out that grid.
Yeah I was going to point out that part of the problem with the tutorials from most folks is the heavy reliance on IB hooks and storyboard construction. My preference is to avoid that. So I'm right there with you on the severity of these types of bugs. I think a follow up post on the swift discussion forums helps. They've been doing a pretty good job of responding to people who find those issues. I'm sure it's not necessary, but everyone feels better when an an engineer says "Oh yes that's terrible, we know about it!" rather than the deafening silence of radar. ;)
I've seen a bunch of people post theirs without getting in trouble, so I'd say go ahead :)
At the bottom of the Storyboard window does it say "wRegular hAny"? If so, click on it and change the size to whatever you designed your app to run in and all the views in storyboard should populate. Or I just misunderstood your problem.. edit: Can you post a screenshot?
Hey buddy, you da real mvp. It was the "width any, height any" thing. Thanks so much 
Here you go: http://swiftlang.eu/
Ok so I think I figured out the issue. It's a terrible compiler error that you get from the method call, but it makes more sense when you explicitly type the array. var testArray:[Equatable] = ["Dog", "Cat", "Mouse", "Tiger", 2] You could type the array as [Any], but then the elements aren't Equatables and you'll get an error when you try to pass it. But with this type declaration, you get the error: Protocol 'Equatable' can only be used as a generic constraint because it has Self or associated type requirements Basically you can't have an array of equatables because the values in there might not be the same type (which happens to be true with your array). So if you could have an Equatable array, what would stop you from doing testArray[0] == testArray[4] ? Well you can't equate to dissimilar types, and testArray[0] (String) and testArray[4] (Int) aren't the same type. The compiler needs a way to throw an error for that and prevent that possibility. The potential issue actually shows up in your code. If you could pass that array in, and you could pass 2 in as the value to find, it would be comparing 2 to a bunch of strings, which you can't do. There is something concerning though. The following line compiles, and even runs fine finder(["Dog", "Cat", "Mouse", "Tiger", 2], 2) When it gets to if(value == valueToFind) { it should compare a String to an Int and have undefined behavior. I guess that undefined behavior either just returns false or has bad stuff with comparing the Int to the first bytes in the struct that represents the string, which would normally return false. That's just a guess though. Point is, that line scares me. Either there's some type that Int and String share that the compiler is figuring out how to use to pass this array properly (yay inference!), or there's a concerning bug.
Except for Javascript, where `this` may reference a global or local `this` depending on scope, and how a function is called.
https://en.wikipedia.org/wiki/This_(computer_programming)
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**This (computer programming)**](https://en.wikipedia.org/wiki/This%20(computer%20programming\)): [](#sfw) --- &gt;__this__, __self__, and __Me__ are [keywords](https://en.wikipedia.org/wiki/Reserved_word) used in some computer [programming languages](https://en.wikipedia.org/wiki/Programming_language) to refer to the object, class, or other entity that the currently-running code is part of. The entity referred to by these keywords thus depends on the execution context (such as which object is having its method called). Different programming languages use these keywords in slightly different ways. In languages where a keyword like "this" is mandatory, the keyword is the only way to access data and methods stored in the current object. Where optional, they can disambiguate variables and functions with the same name. &gt; --- ^Interesting: [^Computer ^programming](https://en.wikipedia.org/wiki/Computer_programming) ^| [^Java ^\(programming ^language)](https://en.wikipedia.org/wiki/Java_\(programming_language\)) ^| [^Method ^\(computer ^programming)](https://en.wikipedia.org/wiki/Method_\(computer_programming\)) ^| [^High-level ^programming ^language](https://en.wikipedia.org/wiki/High-level_programming_language) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjgew8o) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjgew8o)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
guys, stop using "self". that is not needed just say: myMap.mapType = .Satellite and please for the love of god stop using semicolons. They are not needed.
To me, this is another example of the elegant design of Swift. I honestly don't know too much about the implementation of other languages, but this seems quite elegant to me. It is similar to how Optionals are really just made up from other base language features (with some extra syntactic sugar). Also, I think this is why Swift is able to handle nested classes and functions I haven't thought of too many ways this is that useful yet, but it has at least inspired me to think about using curried functions to create objects from JSON dictionaries and other things that curried functions can do.
This is some very interesting information. However, the target/action mechanism example isn't the best, there's no real need to use this currying functionality. In the example in the post, you could simply do button.setAction(self.buttonPress, controlEvent: .TouchUpInside) instead of button.setTarget(self, action: MyViewController.onButtonTap, controlEvent: .TouchUpInside) and the control simply calls that closure in the corresponding event. Even simpler, and no currying required! Currying, in general, is helpful when working with functional-style methods (map, reduce, etc.). Unfortunately, the order in which parameters are taken is not ideal for that. For example, if the class BankAccount has the method func getBalance(atDate date: NSDate) -&gt; Double { ... } // returns the balance of the account at a certain date then Account.getBalance has type (Account)-&gt;(NSDate)-&gt;Double. If it were (NSDate)-&gt;(Account)-&gt;Double, we could do awesome stuff like: let accounts: [Account] = ... // a list of accounts let date: NSDate = ... // some date let totalBalance = accounts.map(Account.getBalance(atDate: date)).reduce(0, +) // The sum of all balances of the accounts at the date Which would be pretty awesome. Unfortunately, right now, one would have to use a flip function that switches the parameter order to get this to work. I'm also kinda disappointed that properties don't work the same way (eg., with BankAccount's balance property, BankAccount.balance is not a function of type (BankAccount) -&gt; Double or something similar, it just doesn't work). 
Note that finder(["Dog", "Cat", "Mouse", "Tiger", 2], 2) only works if you import Foundation. The type that is being inferred here is NSObject (which is only possible because Foundation is imported). NSObject implements `==` using `isEqual:` which is supported by both `NSString` and `NSNumber`. The strings are being implicitly converted to NSString and the integers are being converted to NSNumber. isEqual works fine between NSString and NSNumber (will ignore types that don't match and correctly compare the types that do match). You can even see this with an even simpler example. This compiles and runs fine: import Foundation "2" == 2 // false var first: NSObject = 2 var second: NSObject = "Hello" first == second // false But this does not compile "2" == 2 // compile error I actually filed a bug with Apple asking them to remove the implicit casting between Objective-C and Swift types because I think it causes a lot of confusion. Most of all, we have struct types like String and Array being implicitly cast to class types NSString and NSArray. This is another example of how the casting can cause strange, hard to understand behavior.
Oh wow that's annoying. I think you're right that there's a lot of danger in these implicit types, but it is pretty important to be able to pass swift literals to ObjC code I think.
D'oh. Only just downloaded Beta 4 after being away for 2 weeks. I hadn't even got round to running it.
Does anyone know if recursive enums are now supported? I can't open OP's link. 
What do you mean you don't know how to access the invitation handler? It's right there? Can't you just store in in a var? Eg. var invitationHandler: (Bool, MCSession!) -&gt; Void)? func theAdvertiserDelegateThing(... invitationHandler...) { self.invitationHandler = invitationHandler showAlertSomehow() } fund methodCalledOnAlertAction() { if whatever { self.invitationHandler( someBoolean, yourSession) } self.invitationHandler = nil } You might want to refactor this a bit, but shouldn't this work for you?
There was no mention of it in the notes
Thanks :). I will try when I get home then.
Known issues in Xcode 6 beta 5: &gt; Location functionality may not work in the Simulator. (17858614)! From the recently published release notes. I assume the same bug existed in beta 4. I recommend using a device for testing your app, even if it's annoying.
Really hoping this is the case. Lack of dynamic features is pretty much the only thing preventing Swift from becoming my favorite language. I hope they adopt a model similar to C# or scala. Also really encouraged by the progress they are making, every new beta seems to be bringing positive changes the community has been asking for.
Alright. I didn't check the known issues, but for some reason I assumed a nil result just wouldn't likely be normal even in the simulator. I'll just had to get my hands on a device and test this. Thank you.
It also seems that `performSelector:` and related methods were deprecated
Thanks, but unfortunately it didn't work. It was a good try to get it working. but still no luck :( It is just doing nothing when i do call the function self.invitationHandler( someBoolean, yourSession); 
Updated with another challenge. Still noodling on how to best post updates. 
The instance that the method is associated with. For example, if you have an object `foo` with the method `bar()`, then when you call `foo.bar()`, inside `bar()`, `self` is `foo`. 
I've known about the ternary operator for years but this is the first time I've ever heard of the [Elvis or binary operator](http://en.wikipedia.org/wiki/Elvis_operator). Thanks! Now I need to go and dig through my code and refactor nearly all my ternary operator usage...
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Elvis operator**](https://en.wikipedia.org/wiki/Elvis%20operator): [](#sfw) --- &gt; &gt;In [computer programming](https://en.wikipedia.org/wiki/Computer_programming), the [binary operator](https://en.wikipedia.org/wiki/Binary_operator) __?:__ colloquially referred to as the __[Elvis](https://en.wikipedia.org/wiki/Elvis) [operator](https://en.wikipedia.org/wiki/Operator_(programming\))__ due to its resemblance to an [emoticon](https://en.wikipedia.org/wiki/Emoticon), is a [null-coalescing variant](https://en.wikipedia.org/wiki/Null_coalescing_operator) of the ternary [conditional operator](https://en.wikipedia.org/wiki/Conditional_operator) in languages such as [PHP](https://en.wikipedia.org/wiki/PHP) , [Groovy](https://en.wikipedia.org/wiki/Groovy_(programming_language\)) , [Kotlin](https://en.wikipedia.org/wiki/Kotlin_(programming_language\)) . It is used by several other languages that use the ? : [operator](https://en.wikipedia.org/wiki/%3F:), which is the most common [ternary operator](https://en.wikipedia.org/wiki/Ternary_operation). &gt;Binary ?:, used as an [operator](https://en.wikipedia.org/wiki/Operator_(programming\)) with two arguments around it and no characters in between, is used to obtain a value that is specified in the second argument if the first argument evaluates to __[null](https://en.wikipedia.org/wiki/Null_pointer)__ or __[false](https://en.wikipedia.org/wiki/Boolean_expression)__, and to return the value of the first argument otherwise. &gt;An Elvis operation can be understood to represent a [?: ternary operation](https://en.wikipedia.org/wiki/%3F:) with the second argument omitted and assumed to equal the first. &gt; --- ^Interesting: [^Null ^coalescing ^operator](https://en.wikipedia.org/wiki/Null_coalescing_operator) ^| [^?:](https://en.wikipedia.org/wiki/%3F:) ^| [^Kotlin ^\(programming ^language)](https://en.wikipedia.org/wiki/Kotlin_\(programming_language\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjh6k08) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjh6k08)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
see if this helps in xcode, go to your menu bar &gt;&gt; window &gt;&gt; devices (shift+cmd+2) a new window will pop up, and on the bottom left, add a new simulator, specifically one running on iOS 8.0 to the existing list edit: you might need to restart xcode
Use `setTitle()` on the button rather than trying to manually set the button label's title. In general, you shouldn't attempt to walk through a system view's view hierarchy unless it's been documented that you can do it that way. Use the higher-level API. Also, your naming needs improvement. Are you trying to copy another platform's conventions? Code on Apple platforms doesn't look like that. Don't abbreviate `button` to `btn` and don't abbreviate `label` to `lbl`. Read [Coding Guidelines for Cocoa](https://developer.apple.com/library/prerelease/ios/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html) for details. If you've got something that can be in two states – percent or amount – don't mangle it into a boolean variable, use an enumeration. Boolean values are for things that are true or false, not anything where you've got two distinct values. 
But… but the fun thing about code is it can be done multiple ways… thanks for the setTitle thing
This is not the prettiest, but it gets the job done, and gives somebody a place to start from. Basically, you set or read the text property of your UITextField. IN my case, I iterated over the array and did a case insensitive compare between the acceptable answers, and the user's guess. I then replaced the text in the UITextField with Correct or Incorrect as you requested. @IBOutlet weak var answerTextField: UITextField! @IBOutlet weak var questionLabel: UILabel! var planetsInSolarSystemAnswers = ["Earth", "Mars", "Jupiter", "Neptune", "Saturn"] var planetsInSolarSystemQuestion = "Name one of the planets in the Solar System?" @IBAction func submitGuess(sender: UIButton) { var guessedCorrectly = false var guess = answerTextField.text for acceptableAnswer in planetsInSolarSystemAnswers { if (acceptableAnswer.compare(guess, options: .CaseInsensitiveSearch) == NSComparisonResult.OrderedSame) { guessedCorrectly = true } } if (guessedCorrectly) { answerTextField.text = "Correct!" } else { answerTextField.text = "Incorrect!" } } override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. questionLabel.text = planetsInSolarSystemQuestion }
To address your concerns about my naming: I use abbreviated btn, lbl, and txt because when I need to do something with a button I can just type "btn" to get a list of all available buttons in that file (or labels, or text fields). I'm not coding for apple, I'm coding for me. I need to be able to read this later and this is what works for me. Before saying "Don't do something" when it comes to code, make sure the reasoning that someone is doing it DOES NOT make sense. I reiterate: there's not one correct way to do things when coding. As far as the boolean thing I was trying to see if a bool would fix the issue (which it didn't which is why I came here to ask
&gt; I need to be able to read this later and this is what works for me. You really think that reading code that uses two different code conventions – Apple's and yours – is easier than reading code that is consistent throughout? So long as you never plan on working with anybody else, it's your prerogative, I guess. But if you ever want to work with other people, you'd better get in the habit of doing things according to platform conventions, or you're going to get on people's nerves. 
In general, this look pretty nice. I'm not a huge fan of this style that uses methods that return the object that the method was called on (ie. func doSomething() -&gt; Self). Seems like abuse of return values. This is, of course, what allows you to do this chaining: Alamofire.request(url, method).authenticate(user, password).progress({...}).response({...}) It seems to me that these mimic the thing that optional parameters do. Why not this (or something similar, it's just the first thing that came to my mind)? Alamofire.request((url, method), authenticate: (user, password), progress: {...}, response: {...}) 
You don't store the answers in the text field. The ViewController that manages the view should have access to the questions/answers, and react to user input via the text field's delegate method. The controller can then check the answer and modify the views however you want in response (eg. display a green checkmark or show "correct" in a label)
Thank you! I started using your code this morning and have been very happy with it. The API reminds me of jQuery's promise objects. 
how do you know the instance it's associated with? And what determines which instance is associated with which method?
&gt; how do you know the instance it's associated with? If you call `foo.bar()`, then that's calling the instance method `bar()` which is bound to the instance `foo`. &gt; And what determines which instance is associated with which method? An object is an instance of a class. The class defines methods that can be called on its instances. 
Oh, got it! Now, the only question is what is the object that is being passed in self? How would I know *which* object the method is being called on 
Again. I'm not working with other people on this project. I know how to code in a group and code for myself. This one is just for me. Stop getting pissy that I'm not doing it your way. There is no one solution. That's literally one of the most beautiful things about programming and code. 
Unless you're doing this in a loop or have a particularly massive dictionary, the speed difference will be imperceptible. I'd make the decision based on the clarity of the code.
&gt; Now, the only question is what is the object that is being passed in self? This was your original question. It's the object that the instance method is bound to. In my example, `foo`. &gt; How would I know *which* object the method is being called on You're the one writing the code. When you write the code `foo.bar()` you are saying *"call the instance method `bar()` associated with the object `foo`"*. You know which object the method is being called on because you're the one doing it. 
Thanks for this! Seems like the kind of material I have been waiting for before trying to sink my teeth into swift. Will give it a look this evening, hopefully.
right, but when I write it in overriden functions in the iOS app
I'm not sure what you mean. Could you give an example?
if I'm using something like self.frame.size.width to retrieve a value in the didMoveToView() method in iPhone programming iOS,what is self
`didMoveToView()` is an instance method of the `SKScene` class that is called when a scene has just been presented. `self`, within that method, would be the instance of your `SKScene` subclass which was just presented. 
oh that makes sense. Thank you a lot! I appreciate it
Hi, anybody else experienced that @IBOutlet storage vars are always nil independent of setting it to weak or strong. I have a few views relying on storyboards. The controller can't access the views (IBOutlets) anymore because they are always nil.
Have you tried Clean &amp; Clean Build Folder (Product &gt; Clean, and for Clean Build Folder hold Alt/Opt). Usually a combination of those two, plus restarting Xcode, fixes these weird problems.
This happens to me sometimes. So far, making another change and running again has always been enough to fix it. :\ I've never seen the priority error.
The compiler does exactly that. From the post: let name = trackName ?? collectionName ?? "Untitled"
The two variables trackName and collectionName are already defined in that case -- I'm referring to accessing the result variable without using as?
Oh I see what you're saying. Yes, that's correct, but then still there is this line: &gt; let name = (result["trackName"] as? String) ?? (result["collectionName"] as? String) ?? "Untitled"
Try deleting the outlets all together and then re-adding them by dragging+dropping from the storyboard view to the class files.
yeah, that'll have to do for now. Maybe one day it'll get prettified. Still better than Obj-C :P
ooh, yeah! that'll do.
Never sleep the main thread, use NSTimer.
can you give me an example please?
Here you are, timer that fires once after 2 seconds, and calls the method update... override func viewDidLoad() { super.viewDidLoad() var timer = NSTimer.scheduledTimerWithTimeInterval(2.0, target: self, selector: Selector("update"), userInfo: nil, repeats: no) } func update() { // Something cool }
Hi everyone, I've been doing iOS development for while now (in my spare time) and have always missed the control over logging that I had in other environments. Swell is my attempt to provide some of this control to iOS (and Mac) apps. If you've ever found yourself debugging one class and want to silence the debugging statements from other classes, or keep the high level logging statements but not the ones running inside each loop, or send all logs to a text file, or even just turn them off completely as you build for the App Store, take a look at Swell. Feedback would be welcome!
A great resource for beginners is Swiftris, a free ebook created by Bloc. Its hella easy. http://bit.ly/1qO2oKp
You shouldn't be using a timer to do this, instead, implement the `scrollViewDidScroll:` delegate (see `UIScrollViewDelegate`) method to receive notifications when the contentOffset changes. Edit: Make sure to remember to set the delegate on `mainUIScrollView` like so: `mainUIScrollView.delegate = self`, and to add `UIScrollViewDelegate` to the list of protocols your view controller inherits
Ray Wenderlich's website is always a good resource. http://www.raywenderlich.com/79115/xcode6-beta5-swift-tutorial-updates 
First example is not new in Beta 5. This is called optional chaining. Also note that your parens in your if statement are unnecessary. Can just do: if animals?.count != nil { ... } Minor pedantic point: the type of animals after the call to removeAtIndex is {["cats", "dogs", "moose"]} -- the braces indicate optionality.
A great resource for beginners is Swiftris, a free ebook created by Bloc. Its hella easy. http://bit.ly/1qO2oKp
Thanks so much for this reply. I'm new to this... I've seen that answer before but I can't figure out how to implement that function in my ViewController... Can you provide an example? 
In addition to the suggestions here, you may also benefit from resetting the simulator environment. Go to "iOS Simulator" -&gt; "Reset Content and Settings" to restore the simulator environment to a pristine state.
Okay piece by piece, first off you have to let the class know it can implement these specific protocol methods. In Swift its a little confusing because the syntax blends protocol and inheritance definitions. `class ViewController: UIViewController, UIScrollViewDelegate` It makes more sense in Objective-C: `@interface ViewController : UIViewController &lt;UIScrollViewDelegate&gt;` The greater-than and less-than symbols in an interface definition tell the class which protocols it is inheriting. Protocols are like blueprints, they outline a bunch of methods that someone inheriting can implement (or if they're required, have to implement). After adding that part to your interface definition, hold CMD and click on `UIScrollViewDelegate`, it'll show you the header its defined in and what methods it has to offer. Anyways, the next part is telling the scroll view itself that you want your ViewController to handle getting delegate method calls. This means that `UIScrollView` will attempt to see if you implement the method (like `scrollViewDidScroll`, `scrollViewDidZoom`, etc.) and if it exists in your class then it will call them. override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. mainUIScrollView.delegate = self } And finally you implement the methods you want your class to get. func scrollViewDidScroll(scrollView: UIScrollView!) { // This will be called every time the user scrolls the scroll view with their finger // so each time this is called, contentOffset should be different. var offset = scrollView.contentOffset.y blackOverlayUiView.alpha = offset / 568 println(blackOverlayUiView.alpha) } Hopefully this clears some things up! 
Yes! Thanks so much. I'm learning Swift right now and coming from a Web Development background, I don't get these things exactly. But you cleared it up completely! Thanks so much! Loving the Reddit community! Thanks again Lurky036! Liam
Hi, I used: var context = LAContext() if context.canEvaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, error: nil) { context.evaluatePolicy(LAPolicy.DeviceOwnerAuthenticationWithBiometrics, localizedReason: "Place your finger on the home button to unlock.", reply: { (success, error) in if success { //YAY! } else { //Boo :( } }) } else { var alert = UIAlertView(title: "Biometrics Error", message: "It seems you have not set up a fingerprint yet. Please go to Settings and do so before opening the application.", delegate: self, cancelButtonTitle: "OK") alert.show() } for fingerprint auth. Worked like a charm! Only issue I'm having now is I haven't figured out how to get the passcode authentication working.
It might have something to do with your device... I'd check it's profile settings in xcode...
I do wish they'd stuck to the C ?: style though.
&gt; What's even cooler is that you can wrap it in an If statement and effectively emulate ObjC's messaging of null... &gt; if ((myObj?.someProperty = someValue) != nil) &gt; { &gt; //successfully assigned, further code. &gt; } While you *can* do that, it's not particularly clear. The following code is more readable: if myObj != nil { myObj!.someProperty = someValue // further code } …or: if let definiteMyObj = myObj { definiteMyObj.someProperty = someValue // further code } …depending on whether or not you're going to make continued use of `myObj` within the block. Additionally, isn't there a bug in your code where the block doesn't execute if `someValue` is `nil`?
&gt; First off, I get it started by writing this, correct? &gt; var generatesDeviceOrientationNotifications: Bool { return true } No. What you're doing there is declaring a boolean variable and trying to assign a block to it. That makes no sense. Did you just copy the declaration from the documentation and try to alter it? The declaration isn't sample code you can just paste into your application. `UIDevice` is a class that represents a device. It has a class method, `currentDevice()` that returns an instance representing the device the application is running on. Instances of the `UIDevice` class have a property, `generatesDeviceOrientationNotifications`. This is `true` or `false` depending on whether the device is currently generating notifications when the device's orientation changes. What you want to do is tell the current device that you want it to generate notifications. You can't do that with the property, as it's read only. However `UIDevice` also provides a method, `beginGeneratingDeviceOrientationNotifications()` that you can use. So in summary, to make the device start generating notifications, you just call: UIDevice.currentDevice().beginGeneratingDeviceOrientationNotifications() &gt; It's quite simple in Objective-C, I just don't know how it works in Swift... All you're doing is accessing the exact same class from a different language. What you are doing doesn't change, only the syntax. It's the equivalent of the following code: [[UIDevice currentDevice] beginGeneratingDeviceOrientationNotifications]; The only thing different here is that you're using dots and parentheses instead of spaces and square brackets. If you can do it in Objective-C, you shouldn't have any problem doing it in Swift. The system frameworks don't change just because you're accessing them from a different language. 
would that be UIDevice.currentDevice().orientation
I wrote a blog post [Getting Started With Swift](http://www.drewag.me/posts/getting-started-with-swift) that lists important concepts to learn with helpful links and also a pretty long list of podcasts discussing Swift.
Assignment using ? Is new in beta 5. Look at this http://stackoverflow.com/questions/24651402/swift-optionals-inconsistency/24652296#24652296
I've been experimenting with Swift, UIBezierPath, and CAShapeLayers. Just to get a feel for them, I thought I'd make an animated alphabet. Next step is redoing the code a little mode robustly, and set it to display complete words etc. Edit: looks like a few of the letters for cut off in the clip, oh well. 
Bug fix
&gt; self.window?.backgroundColor = UIColor.redColor() Are you saying that the above was valid Swift in earlier betas?
I have been writing several posts on my blog about learning many of the basics of Swift at: [The Coding Explorer Blog](http://www.codingexplorer.com/). I also shared a few other links to good Swift learning resources on the Reddit post: [Is Swift a good place to start for someone with zero programming experience?](http://www.reddit.com/r/swift/comments/2bytmc/is_swift_a_good_place_to_start_for_someone_with/cjaedfi)
Maybe I wasn't clear, In this example, only if myObj's property (someProperty) was successfully assigned a value will the block execute. I actually don't want the block to execute if the attempt to set someProperty equal to someValue fails. That is what this will compile to right? As in, if someValue was nil and thus someProperty wasn't assigned, the block won't execute. if ((myObj?.someProperty = someValue) != nil) { //successfully assigned, further code. }
&gt; if someValue was nil and thus someProperty wasn't assigned No, this is wrong. Just because `someValue` is `nil`, it doesn't mean that there wasn't an assignment. You're just assigning `nil`. So long as `myObj` is not `nil`, the assignment occurs. 
ahhh ok, so my understanding there was a bit off. So this: ((myObj?.someProperty = someValue) != nil) Effectively only checks if myObj isn't nil? If so how can I check what I intended to, which is if the assignment of someProperty was completed successfully? (i.e. assigned a value and not nil) 
Ok I think I get it! So it doesn't execute the block because someProperty is nil?
Yep. 
Its not in swift but: https://github.com/0xced/XCDYouTubeKit btw cocoacontrols is great for when you want something pre-made to plugin
For one, what you're trying to do with for object:PFObject! in objects means that you're trying to say object is an implicitly unwrapped optional, when objects is actually an array of non-optionals, but the whole array is an optional. But that still isn't the problem. ie: [AnyObject!] is not the same as [AnyObject]! Try doing this: for object in objects { self.timelineData.addObject(object as PFObject) //I guess timeLineData is a [PFObject] } Inserting the 'as' cast in the for .. in line with 'for object in objects as PFObject' tries to cast objects to a PFObject, which is wrong of course because it's an array of those. Hope this helps :)
I read Apple's iBooks on the language, then worked my way through the tutorial projects in "Cocoa Programming for Max OS X for Dummies" (ISBN 0470432896), translating all the Objective-C code into Swift, for a start. Now I'm reading through "Learning Cocoa with Objective-C, 4th Edition" (ISBN 9781491901397) and doing the same. Once that's done, I'll probably do the same with "Cocoa Programming for Max OS X, Fourth Edition" (ISBN 9780321774088). Then I'll probably try writing a few clones of simple applications, and then maybe see if I can make some kind of contribution to an actual project. Even if I can't, the learning experience has been very engaging, but then again, I'm a bit of a nut for learning new programming languages. Also, if you already know Cocoa and Xcode, my process is probably less helpful for you than it was for me.
Ya, looking to do it in Swift. By chance would you know?
I'm a beginner with zero programming experience. Unfortunately not the best language for me to start with. For those of you with experience and familiarity with Java, JS and Python, this seems like something you would want to check out: https://www.bloc.io/swiftris-build-your-first-ios-game-with-swift
Once I clean it up a little, it's not very pretty right now. 
You can solve this by cleaning your Xcode Derived Data: rm -Rf ~/Library/Developer/Xcode/DerivedData/*
I can do it for you, just need to clarify the requirements around the youtube piece, embed the site or a single video?
Just play a single video. I send you a PM. Respond to it and we'll get going :)
I think I like [SwiftyJSON](https://github.com/lingoer/SwiftyJSON) a little better. It uses an enum type to do everything and it just seems like a stronger design.
Thanks :)
TIL of the .json interface to reddit... neat
Pedant note: In the first table, the differences isn't "-85.7x" (or whatever). Would be quite an impressive feat if Swift managed to sort something in negative time. The factor is 85.7^-1 x.
I kinda surprised you didn't use UITableViewController
Thanks for this. Saved to pocket to read a little later.
Obj-C first or learn them both at the same time. Particularly if you have some C experience and will pick up Obj-C very quickly anyway. All of the frameworks are still implemented Obj-C and don't really follow what would be good style for a pure Swift program. Swift feels a lot like two languages in one. You can write in Obj-C style or in Swift style. If you want to get going quickly though, I would stick with Obj-C at this point. You will find a lot more examples and it is much better documented. If you have been playing around with Mozilla Rust or Scala you may find Swift pretty natural, but there is very little documentation and it seems to be changing significantly every couple weeks. It is also pretty easy to port Obj-C code to Swift later. The hard part is learning the APIs. Using the Playground features in Swift may make it easier to learn some of the APIs.
To go further how I have it setup I have a bridged header file so the library works. Then I have created two separate view controllers that have a webview each and set them up like so. https://imgur.com/DjQ7h5H The top segue is labeled sw_rear and the bottom segue is sw_front and those correspond with the front view and the rear view. This has worked. However with the prepareforsegue method I don't think that will work since aren't both controllers active? If I remember correctly prepareforsegue would be called if I was loading a new controller but all I'm trying to do is tell the webview in the other controller to load a request.
nice approach kyle i too will try it :)
I've had the same idea a month ago: https://github.com/ndavidsson/NDdit Nice to see a complete tutorial, though!
A great little exercise for someone who is learning Swift, like me! It wasn't showing any results, though. Maybe I missed something. Any ideas? I copied your code word for word.
Apple seems to go with what you have. I haven't seen any of the _ prepending on any of the official APIs.
Its tough to say without being there. You may want to add some println() statements to ensure its actually pulling the json data to begin with. Between lines 19 and 20 try putting println(theJSON)
That's a very good way to do it. You could also do init(age _age:Int) { self.age = _age } That would be called with `Person(age: 22)` as well.
UITableViewController is UIViewController with TableView-related functions. under UITableViewController, you can access UITableView by self.tableView
I found this function on stackoverflow, it's worked amazingly for me: func delay(delayInSeconds:Double, closure:()-&gt;()) { dispatch_after( dispatch_time( DISPATCH_TIME_NOW, Int64(delayInSeconds * Double(NSEC_PER_SEC)) ), dispatch_get_main_queue(), closure) } After you copy this function into your project, all you have to do is this: delay(0.2) { //code to be executed after 0.2 seconds } 
Try reseting xcode + simulator. The simulator can be reset like this http://stackoverflow.com/questions/2763733/how-to-reset-iphone-simulator Xcode can be reset within the Organizer window and tapping "removing derived data". Afterwards quit simulator and quit Xcode. Then check if the problem is still there.
nice. That should work well
Conventionally, you have an NSError inout parameter and you set it if some went wrong in the function. But the swift language is capable of better conventions so unless objective c compatibility matters I wouldn't go this route. Anyway I think the enum path is nicer. I don't like the idea of sending a tuple of optional values when you could just send off one non-optional.
The downside of the enum route is obvious, you introduce a new type each type you want to return something. Which adds up to be a lot of burden in the interface.
Really cool. Would be nice if there was a comment/ranking system in place.
Nice work getting @IBDesignable to work with nib backed views. Having to constantly check if you are proxying through another view, however, seems like it's over complicating things a lot. A simpler approach would be to just make your nib's root view a UIView, then assign outlets through file's owner, and finally initialize the nib with bundle.loadNibNamed(self.nibName(), owner: self, options: nil)[0] as NibDesignable Is there some reason that wouldn't work?
**:/**^:/
Alamofire doesn't seem to be up there. http://nshipster.com/alamofire/
What previous knowledge should attendees have? I have a lot of experience scripting with PHP and programming in C#, but limited experience with Objective-C.
Maybe someone could enlighten me, but how does one import or use one of these 3rd party libraries/frameworks?
I'm AMAZED the insertion sort goes from 500 seconds un-optimised down to 0.27 seconds optimised!
I tried but it was a couple of betas ago and was just getting errors both from Interface Builder and when running the app. I agree the proxy view is sad and will try again this afternoon.
Makes you wonder what they are doing in the debug build that is so egregious? Probably mallocs galore
&gt; indicates that it probably won't be done in time for Swift 1.0. This is what he said: &gt; We would certainly like that example to work and have many bugs tracking it. How on earth does that imply it won't be done for 1.0?
The error in question there has to do with enums nested in generic classes. Nothing to do with generic enums
I'm probably stupidly wrong because I drank a bit too much just now so please be kind on me but --- is it crashing or is execution just stopping because of the breakpoint you set on that function? Disable break points and run your code again!
I know this isn't quite on topic, but ever since Beta 5 it has been impossible for me to run Swift apps on physical devices. What kind of checklist should I follow to get back to normal? I've tried Clean+build and deleting derived data to no avail. This is the kind of stuff that isn't taught in the documentation or books.
Did that and it shows all the data from the JSON page. It could be something stopping the table from being populated..
I write code for a living and can't tell you how many times I've done this. What tha....., why did this just quit? Why is there no stack trace? Where did that continue button come from?
As /u/Legolas-the-elf said, this is not a crash, but a breakpoint. Breakpoints are very helpful, so maybe you want to try what the debugger can do? It basically allows you to go through your code step by step and watch the execution. You create a new breakpoint by clicking somewhere in that small area between the project navigator and your code; that creates one of those blue arrows. When you run your program, it will pause when it reaches that line. Below your code, you have a bar with a few buttons. Those are pretty important to control the debugger; when you hover them Xcode will give you some tooltips. Basically, with those, you can continue execution, step to the next line, and step into or out of functions. It's pretty neat. Below that bar still, you the variables that are currently in scope and their value (on the left) as well as your programs debug output (on the right, but you probably know that).
The window reference gets generated like that by default. I'd love if you could explain the difference between strong and weak references. I simply am not familiar with the concept.
You can add tableView as outlet to regular view controller and still access it by self.tableView. UITableviewController has major drawbacks. For example its self.view is tableView, so if you want to have anything static and independent of the table, you will have to remake it all into regular ViewController. This makes UITableviewController unusable in real development.
I've been trying to start on swift with beta 5 but I constantly get sourcekit terminated errors if I try to type anything in my appdelegate file. This only happens if I check use coredata when creating the project. Frustrating.
Yeah, all you have to do is left click once in the margin, it's pretty easy to do accidentally. It's a useful feature though, you should definitely check out the debugger next time you're unsure of what's happening in your code.
Go to storyboard, highlight the view controller that you're working on. Go to Editor -&gt; Resolve Auto Layout Issues -&gt; Add Missing Constraints or if you've moved something: Go to Editor -&gt; Resolve Auto Layout Issues -&gt; Update Constraints 
Brian Advent's tutorials on YouTube are fantastic. After following along with his Swift videos I finally reached that "Aha!" moment and can now work on simple apps. I still have a lot to learn still but I've been learning at a fast pace because of his videos. 
1. Feedback button that takes one to the swifttoolbox github issues page. 2. Screenshot/image/gif showing short code snippet of how to use. 3. Link to video, where the author can describe in more length how to use. 4. Paid curation. Where a person checks: does the project compile for iOS8, does the demo project work, is it sufficiently unit tested, are there warnings, is documentation ok. 5. Twitter feed where one can see the latest additions.
I had the similar issue. I'm a beginner with zero programming experience and was told it probably wasn't the best language to start with. Learn JS and Python first. I was recommended to learn Swift after becoming proficient in JS and Python with this fun e-book http://goo.gl/GiClYe
&gt; I don't think swift would let me do something like this. At least try it? It works just like in Objective-C. Eg. let data = NSMutableData() var goesIn: Int32 = 42 data.appendBytes(&amp;goesIn, length: sizeof(Int32)) println(data) // &lt;2a000000] var comesOut: Int32 = 0 data.getBytes(&amp;comesOut, range: NSMakeRange(0, sizeof(Int32))) println(comesOut) // 42 
Check out my library I wrote specifically for this: [Lilliput](https://github.com/jkolb/Lilliput)
Holy shit, I didn't think Swift's type system would allow this
That looks pretty much exactly like what I was planning on writing as an extension on NSData. Thanks!
Agreed!
I found these two tutorials very easy to follow, and the first one was really easy to port to swift. http://www.raywenderlich.com/934/core-data-tutorial-for-ios-getting-started http://www.appcoda.com/core-data-tutorial-update-delete/
*slow clap*
Without watching the video, I would take note that it's from June 2, and there have been several changes to Swift and updates to the Xcode 6 beta since then. That's the one caveat of learning Swift pre-release: everything is subject to change. You might check out the tutorials at [raywenderlich.com](http://www.raywenderlich.com). They have been incredibly quick about updating their tutorials with each new beta release.
Strong and Weak are ways to manage the ownership and lifetime of objects. A Strong reference indicates that you want to own the object and do not want it deallocated unless all references (including that one) are set to nil. Thus you are signaling that you wish that object to "stay alive" Weak references, on the other hand, indicate that you do not wish to force the object to stay alive and are willing to let it be deallocated if all other referenced are nilled out. Weak references are useful when you have a parent-child relationship where the parent has a strong (and thus owns) the child object, but you still want the child to have a reference to the parent. If you were to make the child-to-parent relationship strong, you would create a strong reference cycle as both objects strong reference one another and will never be deallocated (naturally any way). By making the reference from child-to-parent weak, you can create the link up the hierarchy but avoid strong reference cycles.
I dont think thats it. IM going to have a label with 1:00 min timer that counts down and every question you get right it adds 10 sec to the timer. Once the timer hits 0 the game is over. 
Without seeing your code, I can't answer (but would happily do so if you put it up on github). There are lots of things that would cause a blank white screen 
StackOverflow is a better place to ask this kind of question, but your problem is that `superview` is now declared as an optional. You probably can just use optional chaining with the new `??` operator: public func snapCenterX() -&gt; UIView { snapCenterX(superview?.height.half ?? 0); return self } (I'm not sure what you would want the default center X to be in the case that there is no superview.) 
can you show me an example of a code that uses NSTimer? Thank you. 
http://stackoverflow.com/questions/24007518/how-can-i-use-nstimer-in-swift
Sketch 3 is fantastic, http://bohemiancoding.com/sketch/
Never mind. You did what I said.
Thats completely awesome! Thanks for sharing this.
Hello, I made you an example in Xcode (beta 5) - here is a tiny app that has a timer label counting down using NSTimer and written in Swift, you can also add to the time left. Let me know if you need further help. https://drive.google.com/file/d/0B0_CziRYhp8IY0dBV0tXXzdOdzg/edit?usp=sharing
+1 for Sketch 3, it's basically designed for iOS apps.
That's not exactly a vector drawing program. :) It's how I start every design too, though.
I agree with the semicolons. They're not necessary and add nothing. But. I still vote heavily for using self. Self explicitly defines scope, so I know when looking at a line of code whether the variable I am editing lies at class level or function level.
Is there any way you can pull that 2.23694 into a constant? Or at least comment what it is? I have no idea upon inspection what that magic number does to the speed value.
I use Photoshop. People keep telling me I should switch to Sketch but I can't get used to it. 
Oh sorry, it's converting meters per second into miles per hour. 
I didn't see that.
I'm having similar issues. Source Kit Terminations have quadrupled since beta 4 (for me at least). In really strange places, too - like within switch statements. 
Thanks for going the extra mile, john_alan. I learned a couple things reading thru the source. I do have a question that I hope you can answer (or throw me in a direction to answer myself) I'm a somewhat noob, and have been teaching myself mostly by looking at API class references, etc. And while I (mostly) understand what optionals are, I'm curious how you knew to unwrap masterTimer before calling invalidate(), as I'm not sure I can figure how to deduce that requirement from the NSTimer docs. Thanks!
Thanks for this..........but I get an error when I try to run the simulator in xcode. 2014-08-09 15:19:08.573 Example CountDown[35450:1664686] SetAppThreadPriority: setpriority failed with error 45 2014-08-09 15:19:08.576 Example CountDown[35450:1664686] SetAppThreadPriority: setpriority failed with error 45 2014-08-09 15:19:08.843 Example CountDown[35450:1664686] *** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[&lt;UIApplication 0x10bf18270&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key addTimeButton.' *** First throw call stack: ( 0 CoreFoundation 0x0000000100466e35 __exceptionPreprocess + 165 1 libobjc.A.dylib 0x0000000101f129a0 objc_exception_throw + 45 2 CoreFoundation 0x0000000100466a79 -[NSException raise] + 9 3 Foundation 0x0000000100878f43 -[NSObject(NSKeyValueCoding) setValue:forKey:] + 259 4 CoreFoundation 0x00000001003b2350 -[NSArray makeObjectsPerformSelector:] + 224 5 UIKit 0x0000000100f8bbad -[UINib instantiateWithOwner:options:] + 1506 6 UIKit 0x0000000100f8d9fe -[NSBundle(UINSBundleAdditions) loadNibNamed:owner:options:] + 160 7 UIKit 0x0000000100ce0321 -[UIApplication _loadMainNibFileNamed:bundle:] + 46 8 UIKit 0x0000000100cdf40f -[UIApplication _runWithMainScene:transitionContext:completion:] + 940 9 UIKit 0x0000000100cde510 -[UIApplication workspaceDidEndTransaction:] + 19 10 CoreFoundation 0x000000010039dbbc __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ + 12 11 CoreFoundation 0x0000000100393095 __CFRunLoopDoBlocks + 341 12 CoreFoundation 0x000000010039284c __CFRunLoopRun + 844 13 CoreFoundation 0x0000000100392296 CFRunLoopRunSpecific + 470 14 UIKit 0x0000000100cddf26 -[UIApplication _run] + 413 15 UIKit 0x0000000100ce1308 UIApplicationMain + 2994 16 Example CountDown 0x000000010000573d top_level_code + 77 17 Example CountDown 0x000000010000577a main + 42 18 libdyld.dylib 0x0000000102470145 start + 1 ) libc++abi.dylib: terminating with uncaught exception of type NSException
I changed the download link, try it again - the original I uploaded had an issue where I deleted an IBOutlet and it gave the (quite frankly) disgusting error you showed.
If you don't feel like redownloading add this line of code to the CountDownViewController.swift: @IBOutlet var addTimeButton: UIButton! 
An app like Yelp is so far beyond the scope of a tutorial it's obscene.
hey, not working for me either on beta5/Mavericks. - same error. ps I would think that in reality we're just missing a file rather than Yoesmite being the solution.
Yes, working fine with Yosemite
Thanks again, John! Even though I didn't fully understand why, I had noticed that setting variables within masterTimer didn't require unwrapping, and almost included in my previous post "Is it because it's calling a method?" So, it has to be unwrapped because you defined masterTimer as an optional at the beginning of the class declaration: var masterTimer: NSTimer? = nil And you declared it as an optional precisely *so* you could set it to nil, and therefore save it's initialization for a method, which in this case is in viewDidLoad, but *could* be put inside an IBAction or custom method that may or may not ever be called. Which I assume is better than doing something like this: var masterTimer = NSTimer() which though it creates an 'empty' instance of NSTimer, would still take up (relatively) way more space and cpu cycles than a simple nil? Especially considering that *masterTimer* may never be initialized by the user in the first place?
I guess that pretty much settles it. Thanks all.
You're probably right, but I think it may take more energy to figure out which files those are than to just install the Yosemite beta. I was thinking it could be a rendering thing too that is perhaps slightly different in Yosemite. I might still wait, I only have 128 SSD.
Exactly :) and whenever an object is an Optional (for whatever reason, like for example, because I want to save it's initialisation for a custom method) it must be unwrapped before being accessed. Sounds like you get it to me!
yeah defo missing a file damn swift apple docs crap again :( 
&gt;"This will reduce the number of surprises we will." We will what?!?!
Requirements from the blog: This playground uses new features of SpriteKit and requires the latest beta versions of Xcode 6 and OS X Yosemite.
Yeah :( I didn't want to believe it was true.
Just separate the question mark from the conditional: var a = isPositive ? 5 : -5
The operator you're talking about is called a ternary operator. There's unary operators (i++), binary operators (1 + 1), and ternary operators (a?x:y). Ternary operators operate on three targets. Swift only has one operator considered to be a ternary operator (as most languages). I mainly bring this up so you're familiar with the term. It might have been easier to find what you were looking for if you were familiar with the term 'ternary operator.' I hope this helps.
Or eliminate the space on the right: var a = isPositive?5 : -5 To clarify: a single question mark could be: * the conditional unwrap operator (a unary postfix operator) * or it could be the ternary conditional operator (a ternary operator along with the colon character). When there is ambiguity like this, Swift assumes that if the punctuation block touches an identifier on the left but doesn't touch an identifier on the right, it is a unary postfix operator. Punctuation surrounded by whitespace or touching identifiers on both sides is assumed to be a binary operator.
Thanks for the post. I wasn't even aware of ternary operators, and was able to clean up a minor nest of if/else statements.
Thanks, that's useful to know!
Each module is implicitly a namespace. If you make a function called sort, for example, you can get to the built-in sort as "Swift.sort"
This link has more data now that you mentioned about modules. http://railsware.com/blog/2014/06/26/creation-of-pure-swift-module/
As /u/Catfish_Man said, each module is a namespace. You can also use [nested types](https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/NestedTypes.html#//apple_ref/doc/uid/TP40014097-CH23-XID_309) as namespaces.
That's not really possible; a firewall is a feature of an IP stack. At most, you'd just be building a GUI interface for the interface your operating system's existing IP stack provides.
I agree that's most likely an unobtainable goal
Do you know how to access the firewall interface that the operating system provides? 
If you don't know how to do something like that, your first steps are to look at the documentation and search the web, not to ask somebody to fetch the information for you. 
Im sorry, was just looking for a step in the right direction. Anyway, thanks for the insight, I appreciate it.
You might want to start with this: [Beej's guide to network programming](http://www.beej.us/guide/bgnet/). Regardless of what language/runtime you intend to write a firewall in, understanding sockets is absolutely required.
Application windows are expected to have a root view controller at the end of application launch I got this error also when running the ios simulator. 
Are you on beta 5? it worked for /u/dpjames. Just read the source, that's all you need to know - it its the functionality you want.
Im actually on beta 6. Is that why its not working? Thanks.
Initial commit: typo: roatatedStrings
I just looked over it real quick, there are a few things that are more verbose than necessary. For example: var builtStrings: [String] = [] for i in 0..&lt;n { builtStrings.append("") } does the same as: var builtStrings = Array(count: n, repeatedValue: "") This: let a = stringToArray("abc") func stringToArray(string: String) -&gt; [String] { var array: [String] = [] for char in string { array.append(String(char)) } return array } does the same as Array's constructor (except you get a [Character] array): let a = Array("abc") Your rotate function seems quite inefficient, you have a loop and concatenate and create new arrays with each iteration. This might be a more efficient implementation: func rotate(string: String, count: Int) -&gt; String { let array = Array(string) let splitIndex = array.count - count return (array[splitIndex..&lt;array.count] + array[0..&lt;splitIndex]) .reduce("", combine: +) } And while we're at it: array.reduce(x, combine: { $0 + $1 }) does the same thing as: array.reduce(x, combine: +) { $0 + $1 } represents a function that takes two parameters and adds them, but that is exactly what + does: add two things. Eg.: let r = (+)(1,2) // r is 3 You have to put parentheses around the + if you want to call it like a function, otherwise the compiler is confused. You can pass it to functions like reduce without the parentheses though. There might be a more functional way to write your other loops, but I'm too lazy to look into that right now ;-)
This is great for your first program written in Swift. Reading through it, I noticed a couple things which might be worth changing though. Firstly, you should omit "init" when initializing a class, so you can replace "BWT.init()" with just "BWT()". Secondly, in my opinion a nicer way of rewriting of writing your string to array function would be: func stringToArray(string: String) -&gt; [String] { return map(string) { String($0) } } or even just: Array(string) I wrote my own slightly more idiomatic implementation which you can check out here if you want: https://gist.github.com/mattdonnelly/bc10e47ca495e68abac8 This was my first time implementing BWT so I might be overlooking some things, but I think it's a bit more Swift-y
The latest beta is 5, are you on an internal unreleased beta?
I've fixed it. Thanks for the spot.
Thanks so much for having a look and for all of your examples. I didn't know about the Array constructor or that you can pass operators to reduce like that. I've changed some things, still working on the improvements to `stringToArray` and `rotate` functions that you suggested.
Thanks! I've updated the `BWT.init` line and I'm still looking at that `stringToArray` function now. I wonder if I'm making more work for myself by returning `[String]` rather than `[Char]`. I think this could be from writing too much Ruby (which only has `Strings`). I've learnt a couple of things from reading your implementation too- I didn't know you could use Optional values as a return value, or that you can use public/private modifiers (I think I was reading older documentation that said it wasn't implemented yet).
I think the dispatch_queue_t problem is a mistake on Apple's part: a dispatch_queue_t is not the same thing as an NSObject, you can't just allocate an NSObject and pass it to a function requiring a dispatch_queue_t. I think they need to fix how dispatch_queue_t is declared in the library – it should *not* be a typealias for NSObject. If Apple want the type to be abstract With NSTimeInterval though, I don't understand your objection. You can pass a double into any function requiring an NSTimeInterval without problems. They are literally the same thing. When a function uses NSTimeInterval, it's not saying "I need an NSTimeInterval", it's saying "I'm going to interpret your double as representing a number of seconds".
It's called the [Builder Pattern](http://en.wikipedia.org/wiki/Builder_pattern), and one of it's uses is to solve the "constructor that takes a billion params" problem!
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Builder pattern**](https://en.wikipedia.org/wiki/Builder%20pattern): [](#sfw) --- &gt;The __builder pattern__ is an [object creation](https://en.wikipedia.org/wiki/Creational_pattern) software [design pattern](https://en.wikipedia.org/wiki/Design_pattern_(computer_science\)). Unlike the [abstract factory pattern](https://en.wikipedia.org/wiki/Abstract_factory_pattern) and the [factory method pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) whose intention is to enable [polymorphism](https://en.wikipedia.org/wiki/Polymorphism_(computer_science\)), the intention of the builder pattern is to find a solution to the telescoping constructor [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern). The telescoping constructor anti-pattern occurs when the increase of object constructor parameter combination leads to an exponential list of constructors. Instead of using numerous constructors, the builder pattern uses another object, a builder, that receives each initialization parameter step by step and then returns the resulting constructed object at once. &gt;==== &gt;[**Image**](https://i.imgur.com/HqIBCJg.png) [^(i)](https://commons.wikimedia.org/wiki/File:Builder_UML_class_diagram.svg) --- ^Interesting: [^Creational ^pattern](https://en.wikipedia.org/wiki/Creational_pattern) ^| [^Factory ^method ^pattern](https://en.wikipedia.org/wiki/Factory_method_pattern) ^| [^North ^Side ^Fargo ^Builder's ^Residential ^Historic ^District](https://en.wikipedia.org/wiki/North_Side_Fargo_Builder%27s_Residential_Historic_District) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjmpqsz) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjmpqsz)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
My bad i am on beta 5..............i thought xcode 6 meant beta 6. Is there any other problem with the code because I keep getting that error I mentioned? I went on stackoverflow and found this. Thanks for the help. http://stackoverflow.com/questions/24812192/cant-load-viewcontroller-when-add-local-notification-scripts-to-didfinishlaunch
Here's what I'd write, using [Chris Eidhof's match extension to Array](http://chris.eidhof.nl/posts/swift-tricks.html): func biggest(xs : [Int]) -&gt; Int? { if let (head,tail) = xs.match { return tail.reduce(head,max) } else{ return nil } } 
The problems there are that it requires the class to be a subclass of this F class, which means I can't use an extension to make Array a Functor. Also the return type of fmap isn't guaranteed to be the same type as the original functor.
I would watch the videos from WWDC about Swift where they start with a more verbose syntax and then they rewrite it to the simpler form you mention in your post. You could also look into more pure funtional languages like Haskell or ML to really understand what functional programming is.
There was a lot of discussion about this question when Swift was first announced. The TL;DR is that both Swift and Rust are both in the same boat here: they both lack support for higher kinded types, making it impossible to create a complete Functor abstraction at this time. https://news.ycombinator.com/item?id=7895504 That said, the following subthread describes the caveats around Functor in the Swiftz library: https://news.ycombinator.com/item?id=7896592
Those type of functions are called Higher-Order Functions and originally come from functional style programming languages. If you'd like to learn a bit more about them you'd probably be better off looking at something like Haskell before working with them in Swift. Learn You a Haskell for Great Good is one of the best resources for reading about it and they've got a great chapter on Higher-Order Functions here: [http://learnyouahaskell.com/higher-order-functions](http://learnyouahaskell.com/higher-order-functions). Haskell can be difficult to get your head around at first though, so if you're finding it tough you could try reading about some of the functional aspects of Python instead
endIndex being 1 greater isn't a bug -- it's based on the C++ model of iteration where beginIndex represents the first element and endIndex represents a "phantom position" just after the last element. This lets you compare it in a for-loop by writing your condition as "index &lt; endIndex" (or even "index != endIndex" if you're always increasing by 1) and hit all the elements. 
Thanks for posting this, interesting pattern... However, I read the article and... - one of the things that the builder pattern attempts to solve is that you have a billion *different* constructors because there's a lot of different combinations of parameters - you don't have that problem in Swift with default values. If you need a ton of parameters to construct an object, you have to pass them somehow, builder pattern or not. I don't see how the builder pattern is that much superior. It doesn't (and can't) solve the "constructor that takes a billion params" problem. - This pattern doesn't include the "return self" part. You can have a builder perfectly fine without doing the chaining (some renaming might be necessary). Eg. let builder = Builder(); builder.authenticate(...); builder.progress(...); builder.request(...); - Finally, I would argue that you aren't even using the Builder Pattern (not that that's necessarily bad though), because there's no Product. In the builder pattern, there's always a Builder that creates some kind of product in the end. I didn't find a Product class in your case. So you're not using the Builder Pattern, but you've written a [Fluent Interface](http://en.wikipedia.org/wiki/Fluent_interface). Seems like a legit choice after all and not as wrong as my intuition tries to tell me. (I just wouldn't expect that a method called authenticate returns something that you can call progress on, for example; I like methods that do one thing, and by returning this you're doing two things, doing the setter stuff but then also returning self). Also, I can't deny, once written, the code is pretty readable and just looks nice.
I can't add much to /u/Catfish_Man 's explanation, but I can give a simple example of map in action from a game I'm just starting on. I need to create an array of textures, all named "image-0", "image-1" etc. It's not exactly hard to write that procedurally, but it's going to be a bit verbose. It's going to look a bit like var textures=Array() for i=1 to 8 { textures.append(SKTexture(imageNamed:"image-\(i)")) } The "map" version is let textures = (1...8).map { SKTexture(imageNamed:"image-\($0)" )} 
I've spent like 15 minutes now to find an awesome website that was on hacker news recently, that explained those functions really well by allowing you to unfold calls... It's impossible to find! My google-foo failed me. Maybe anyone of you guys knows? It was about haskell, and you could click, for example, map function calls in the browser and look at the execution...
Wouter, Thank you very much for the link to the match extension code, and your very nice example which is very much what I was looking for. Following the link trail I found the book that you are involved with (http://www.objc.io/books/), that looks like it covers the topics I am interested in. Doing the pre-order thing now. Will
Thanks, for the explanation as I have not done any C++, should have occurred to me that using the half open range would result in easy use of the endIndex.
It is not very well known, but Swift actually has a built-in function for exactly this: maxElement([2, 5, 3, 6, 1, 7]) I understand that the goal here is to learn how to implement the function, but thought it might be worth mentioning :-) 
I manually unelegantly convert json data to model, like [this swift file on github](https://github.com/neoneye/GraphToy/blob/master/client_ios/Helium/Model/NodeModel/HELNodeModelJSONBuilder.swift). I'm interested in approaches for converting json to a readonly model. SwiftyJSON and Crust looks promising.
&gt; Filter takes an array and returns an array of all the elements that match a condition. So: &gt; let evens = [1, 2, 3, 4].filter { $0 % 2 == 0 } &gt; //evens is now [2, 4] I assume this only works with numbers? Could I, for instance, *filter* out strings in an array that end with the letter T? 
Thanks!
What about something like: protocol Functor { typealias A typealias FB func fmap&lt;B&gt;(f: A -&gt; B) -&gt; FB } extension Array: Functor { func fmap&lt;B&gt;(f: T -&gt; B) -&gt; [B] { return self.map(f) } } It's not ideal because the type of FB isn't guaranteed to be the same as B, but it works for your example
I'd implement it like this: // Simple binary maximum func maximum&lt;T: Comparable&gt;(a: T, b: T) -&gt; T { return a &gt; b ? a : b } // Maximum on array func maximum&lt;T: Comparable&gt;(array: [T]) -&gt; T? { if array.isEmpty { return nil } else { return array[1..&lt;array.count].reduce(array[0], combine: maximum) } }
Surprised to hear that dispatch_queue_t is type aliased to NSObject, but I think it makes sense for extensions on type aliases to extend the original type, because they're the same thing. You aren't creating a new type, you're just creating an alias for an existing one. But to get around your problem, you could try creating you're own wrapper class around dispatch_queue_t
The `popen` API wants a C string. Swift's strings are equatable to an `NSString` object. In order to send data via `popen` in Objective C, you have to call `UTF8String` on an `NSString` object. I assume you have to do the same thing in Swift, so it would look like: //Swift strings are bridged to NSStrings, so NSString methods are available to Swift strings popen("echo hello world &gt;/dev/cu.usbmodem1421".UTF8String, "r".UTF8String) What is being sent is probably the address to the "echo hello world..." string.
There is a way to extend current classes (and structs). For instance, I have made the old `typedef OSType` (a 32-bit signed integer that contains up to four `char`s) accept a `String` value. This was done by the `extension` keyword and the correct However, if a value must be subclassed, as opposed to conforming to a protocol, I don't think this method would work.
Because people in this thread might be interested in functional madness in swift, here's a more "interesting" version, mostly for the lulz: // curried maximum functions that take a comparison block first. This way we can get maximums of things that are not comparable, by supplying our own comparator. func maximum&lt;T&gt;(comparisonBlock: (T,T)-&gt;Bool)(a: T, b: T) -&gt; T { return comparisonBlock(a,b) ? a : b } func maximum&lt;T&gt;(comparisonBlock: (T,T)-&gt;Bool)(list: [T]) -&gt; T? { if list.isEmpty { return nil } else { return list[1..&lt;list.count].reduce(list[0], combine: maximum(comparisonBlock)) } } let integerMaximum: ([Int]) -&gt; Int? = maximum(&gt;) let stringMaximum: ([String]) -&gt; String? = maximum({ $0.caseInsensitiveCompare($1) == NSComparisonResult.OrderedDescending }) // Sometimes I wish this worked... would be so cool with currying // func maximum(a: Int, b: Int) -&gt; Int = maximum(&gt;) integerMaximum([1,2,3,0,10]) // 10 stringMaximum(["abc","def","aaz"]) // "def" /* // Should work in theory, makes the playground compiler crash - does anyone see what the problem is? I guess it's a swift bug though func maximum&lt;T: Comparable&gt;(a: T, b: T) -&gt; T { return maximum(&gt;)(a: a,b: b) } func maximum&lt;T: Comparable&gt;(array: [T]) { return maximum(&gt;)(array) } */ 
That's not true. Quoting the Swift book: &gt; A Swift String can be used as a const char* pointer, which will pass the function a pointer to a null-terminated, UTF–8-encoded representation of the string. As for OP: did you test if it works when you use C? I it does, your code should work in Swift, too...
I haven't yet but I'll give it a go now.
Good stuff. Love everyone blogging about what they created with Swift so far. I am working on a few simple games to get a feel for it, and I will definitely be looking at this again. Enjoyed some of your other posts as well.
Edit: Compiled. when I swipe, it is not printing to console what I want it to. here is my code override func touchesBegan(touches: NSSet, withEvent event: UIEvent) { /* Called when a touch begins */ for touch: AnyObject in touches { let gvc: GameViewController = GameViewController() let location = touch.locationInNode(self) if gvc.isRightSwiped { println("right swipe detected")} } } A few questions It's not displaying anything because isRightSwiped is always false: why is this? is it because I am creating a new object with initial values? How do I grab the one edited by the 'self.isRightSwiped = true' statement? 
Okay, so just to verify that there are no problems on the arduino end. Would the popen() function likely pass on a newline and carriage return? Because it seems to be required for the code to respond as I'm hoping.
I don't have a lot of experience with this, but I'm pretty sure it does. 
Wut. You should only have one GameViewController in the lifetime of your app (at least usually). You create a new one every time you loop with the let gvc: GameViewController = GameViewController() line. Of course, when you create a new GameViewController, it's isRightSwiped property is false, as we set it to be false as an initial value. You don't want to create a new GameViewController every time, but access the one you have from the start. I have no idea which class the touchesBegan method from above is in, so no idea how you're gonna access it. I guess it's in a view or a UIGestureRecognizer subclass though; but I simply don't know what you're trying to accomplish there.
In that case it doesn't work then. I double checked, and the using the arduino serial monitor I can send the right commands and everything works when I have it automatically pass a newline and carriage return every time but the cocoa solution doesn't seem to cut it yet, hmm...
That makes sense as to why it is not printing what I want. What I am trying to do is make it so that whenever the screen is swiped, I am able to immediately know that in my main file, GameScene.swift. I am already able to keep track of when the screen is swiped within the respondToSwipeGesture method in GameViewController, but not outside of that method. I have tried doing this by making class variables in GameViewController that are boolean that are true for a particular direction when the direction was swiped, and then trying to access these class variables in my main GameScene.swift. The touchesBegan method is in my main method, GameScene.swift. The reason I wanted to try to access the variables in touchesBegan (a premade method in in the main GameScene.swift whenever you make a game app project in swift) is because I figured I could check the values of the class variables every time the screen was touched, and when a swipe was detected, a touch would obviously be detected. Sorry if any of this is extraneous, or if there are areas that need clarification. I forget that what makes sense in my head can be confusing without context.
There is no way to create your own namespaces in Swift. Each module of Swift code is implicitly name-spaced as others have mentioned. The closest you are going to get to namespaces is nesting your types in a class or struct as [/u/klngarthur] mentioned. You will run into bug nesting types in the beta for some things though.
 let whoami = String(format: "agent %03d", arguments: [7]) whoami // agent 007 
You can modify a class's properties in swift but the pointer to the UITableViewCells never changes, so unless you're swapping out classes, let is great.
Off the top of my head... &gt; override func preferredStatusBarStyle() -&gt; UIStatusBarStyle { &gt; return UIStatusBarStyle.LightContent &gt; //return UIStatusBarStyle.default &gt; //return UIStatusBarStyle.BlackOpaque &gt; }
The status bar as of iOS7 is quite dynamic, what are you specifically looking to do ? Likely it will automatically adjust for you.
Set "View controller-based status bar appearance" (UIViewControllerBasedStatusBarAppearance) to No in your Info.plist.- in addition to what's already been said. 
I would also recommend _LYAH,_ and in fact I'll say that the first few chapters are at the same difficulty level as a beginner Python book. Haskell really does have very simple syntax, at least the core language.
Sorry I have a beginner's question... What do the question marks mean after the labels (I think that's what they are called). Like for example on line 7, what is the question mark for? Thanks for taking the time to read my question.
It is a concept of Swift called "optionals". It's the only way you can assign a nil value to a variable. from the [Swift book](https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html) : &gt; nil cannot be used with non-optional constants and variables. If a constant or variable in your code needs to be able to cope with the absence of a value under certain conditions, always declare it as an optional value of the appropriate type.
It's unclear if Apple will open up Cloudkit for a web service. Right now it's just for iOS applications to talk to and store their data (database service), as well as use Apple's credential system to log in. It ties into Core Data.
The latest version of that course isn't on youtube anymore. But you can still get it for free from iTunesU
pkhbdb summed it up nicely. I did not want to initialize my variables at the top of the file because I was planning on building that initializeValues function. So I basically had to make them optionals. Otherwise you could leave out all of the ?'s and !'s you saw in the code.
Sure, but I thought a lot of UIKit needed to be var? (like ViewControllers) so it's hard to know when to use let!
There's no such thing as overcommented. This is really useful. Good stuff, OP!
Cool man! I see you gave the cubes a collider you add gravity to all of them. I didn't see where and if you gave the cubes weight. How would you make some cubes not respond to collisions as much as the other ones?
For classes, let and var only determine the mutability of the pointer. So you can still access and update properties of a tab bar controller declared with let but just wont be able to reassign it to another instance, unless you declare it as a variable. Generally, you'll only have one instance of a tab bar controller in your app which you wont reassign, so you should declare it using the let keyword
This is really fun! It's really awesome when you can create little things to play with with so little code. Some criticism though: Why didn't you use gesture recognisers? Manual touch handling is so iOS 3.1 ;-) I played around with adding gesture recognisers, it's pretty nice (less code! multitouch support!). I can send you a pull request if you want.
They're in the Character Viewer, which you can put on your menu bar by opening System Preferences -&gt; Keyboard -&gt; "Show Keyboard &amp; Character Viewers in menu bar"
 You can also press Ctrl+Command+Spacebar to bring up an emoji list (this works system wide afaik) 💎🐺
Vote for seeing this implemented with gesture recognizers.
Here's my fork: https://github.com/julasamer/SwiftyCubes I also submitted a pull request :-)
I didn't use gesture recognizers because I wanted to demonstrated the touchesMoved methods. EDIT: I'm not even talking about the same project actually &gt;.&gt; Just merged your pull request. Well done :)
It seems to have some errors on beta 5 :/
hmm... ok an easy to fix error is to replace these "AVCaptureDevice[]" with "[AVCaptureDevice]". still doesn't work unfortunately as there are no devices being populated. might be because im on Yosemite now, definitely worked on Mavericks. hmm... edit: looks like there is a device being populated, but it's just my microphone not the camera. No clue why. 
Cool! I hardly ever use outlets :)
Thanks 
Nice work. 
There is another property you can use for that! density – when combined with size, this will give the overall mass of an item. The greater the mass, the harder it is to accelerate or decelerate an object.
Doesn't String.join already exist?...
It depends on what you want to do. If you want to learn swift for fun and the future, then do it! If you're thinking of getting a job programming in swift you might be waiting a bit longer. 
I would like a job as a Swift programmer. But, not just yet. I work from home, my income is a bit short of what an average iOS developer earns. But, if it matures I wouldn't mind seeking work. I guess I have at least a year to get to grips with this language before jobs start popping up. At the moment though I'd like to just develop my own iOS apps and try to generate some revenue from my ideas.
Go for it then! 
depends if you want better or not, if you want to know better and to have a good base in swift, you should learn Objective-C first. (but its not necessary). good luck.
So long as you don't intend to release an app for another couple months, I think you're fine with swift. You'll probably need to get an understanding of objective-c at some point, but i think for now just focusing on swift and building something with it is a fine idea. I have to admit, i haven't gone through any objective c language books, but I've managed to put things together. Probably not the best of code, but I have a reasonable understanding of the syntax. With the iOS docs and stack overflow, i've made due on building a bit of a small app.
Unfortunately, Swift's built-in class does not have a join() method. You could use NSArray's componentsJoinedByString, if you don't mind the explicit bridge to ObjC.
&gt; People saying that even if you learn Swift you need to learn Objective-C. This is true. But swift is the future, so that just means that everyone will need to know both in the future.
Definitely looks interesting. I can't believe how much work is being put in to simply parse a JSON object. SwiftyJSON provides a lot of that functionality with a much lighter mental load.
Correct: join(",", ["1", "2", "3"]) yields "1,2,3". FYI, join(",", [1,2,3]) yields an error that Int doesn't conform to the ExtensibleCollectionType protocol. 
A little pedantic, but Array and String are not classes in Swift, they are structs.
Did not know that!😄😄
I haven't had a chance to play with framework targets in iOS 8, but if they work like on OS X, you need to have a *Copy Files* build phase that copies it over to the app bundle's `Frameworks` destination. Have you tried that?
I've had to refactor code based on beta version changes. There is a cost, but the dev teams I work with are OK with it (small teams). YMMV
My experience with frameworks and xcode is this: I never use them. It is a true nightmare... and apple says it is very simple... piece of cake... from hell. If xcode could be classified with negative stars I would give it minus infinity.
No problem, man! Glad you enjoyed it :)
Is there entrance fee or is it free of charge?
Hi, thanks for your reply. Its a bug related to view controllers using xib views. I just had to do MyController(nibName: "MyController", bundle: nil) instead of MyController(). Found the answer on [stackoverflow](http://stackoverflow.com/questions/25150992/all-iboutlets-become-nil-after-switching-to-xcode-6-beta-5).
So far I want to cast my vote for Swift. I'm probably in the minority, but I consider myself somewhat of a polyglot and my impression on Objective-C is that the person who wrote it was on very powerful LSD.
That worked. I don't know why I felt the need to make a GameViewController object in the main, and not a GameScene object in GameViewController, but this way makes more sense conceptually. And I'm in college for computer science, third year...a little embarrassing. Thanks.
Awesome, this works perfect, thanks!
The easiest way is to take a screenshot and then crop the image I guess?
I could try that. I just found this a minute ago: http://stackoverflow.com/questions/12687909/ios-screenshot-part-of-the-screen
Command-Shift-4, then draw a rectangle with the mouse.
Derp, you said programmatically. Sorry. I have the dumb.
It's cool. I found guide that looks like it'll work but I have no idea what it or I are doing. 
I've pushed up the Twitter posting. What do you guys think the language should look like. Right now it's #Swift Library Added Name - tag1, tag2,e tc
Twitter account is [@swifttoolbox](https://twitter.com/swifttoolbox) 
140 character limit is not much. Perhaps have a tiny twitter summary. Like this realm-cocoa Replacement for Core Data &amp; SQLite http://link.to/item
There is no swift code in the project that you are linking to. Try post to [/r/iOSProgramming](http://www.reddit.com/r/iOSProgramming/)
Tried this out and indent seems a little buggy! Are other people not experiencing this? I reported https://github.com/Keithbsmiley/swift.vim/issues/16
The way I think you're supposed to do it is the following: initialize your class's members -&gt; call super's init -&gt; do other initialization stuff. This is because before you call super.init() all of your non-optional member variables must be initialized. This is because you might need to do some things with your init that rely on the NSObject init stuff, like KVO (I am guessing here). That's why you should call super.init() after your own members are initialized, but before you do stuff like KVO or any real initialization. Also in the case you gave, I think you could mark init() as a convenience constructor and call your constructor with more arguments on self, so the convenience constructors all funnel to the designated initializer. someProperty could actually be a non-optional in this case. eg: class derp : NSObject { var someProperty: NSString! convenience override init() { self.init(fromString: "John") } init(fromString string: NSString) { self.someProperty = string super.init() } } 
Good man! - looks good makes sense.
I disagree with the points about enums. Enums in swift are meant to be more like algebraic data types than regular objects with instance variables and such. You can't have the features this article requests because each case isn't a single object, it's sort of a type of its own... Sort of.
The highlighted line is at the correct location. The error you're seeing is a "General Protection Fault". It occurs when a pointer is accessed that points to an unreadable/unwriteable memory segment (either because the pointer was never valid or because the memory location has been deleted). In this case, it is occurring because "classesToMatch" is already deleted when it reaches the end of its scope and tries to deference itself. To see why, you need to follow its lifetime. It starts when IOServiceMatching returns a Unmanaged&lt;CFMutableDictionary&gt; with a retain count of 1. When you call "takeRetainedValue" you're telling "classesToMatch" to leave the retain count unchanged but reduce the retain count when "classesToMatch" falls out of scope. However... the call to IOServiceGetMatchingServices also decrements the retain count for its second parameter (see the documentation for this function). This causes the retain count to reach zero and the underlying CFDictionary is deleted during this call. Swift doesn't realize that "classesToMatch" has its reference count lowered during the call to IOServiceGetMatchingServices. When Swift deletes the "classesToMatch" variable at the end of the scope, "classesToMatch" is dereferenced to access and lower its retain count. Since the CFDictionary is already deleted, the memory location may or may not still be mapped to a valid location in memory. In this case, the memory location is *not* valid and the dereference causes the "General Protection Fault". It would also be possible to see other kinds of error based on the state memory and the malloc heap. Change "takeRetainedValue" to "takeUnretainedValue" and "classesToMatch" will add an additional retain count when it is initialised (retain count will be 2) and it will remain alive past the call to IOServiceGetMatchingServices (which will drop the retain count to 1 not zero) until the end of the scope (when it will be properly decremented to zero). **Edit** I think Apple need to fix the IOServiceGetMatchingServices to have its second attribute decorated with "__attribute((ns_consumed))" or whatever the Swift equivalent would be. That would allow you to keep your code as originally written and not have the crash and make the behaviour of the IOServiceGetMatchingServices function idiomatic according to ARC rules. The reason this parameter was not already decorated is that C and Objective-C don't treat CF types as ARC types – so the decoration wouldn't be valid in those languages. Swift *does* treat CF types as ARC types so it requires this additional decoration to work sensibly with the behavior of this function. Assuming the IOServiceGetMatchingServices declaration gets fixed in future, the workaround I suggested will actually result in the CFDictionary being leaked at the end of the scope. Better to get the declaration fixed as soon as possible and not have worry about any of this.
There's a long thread with several posts from the lead Swift engineer about this topic on the Apple dev forums here: https://devforums.apple.com/thread/230567 As I understand it, the TL;DR is that because arrays are value types, calling a function with an inout that refers to a property containing an array results in (semantically if not actually) making a copy of the array, running the function, then issuing a writeback into the property. The compiler is complaining because you're trying to do this process twice on the same property simultaneously. Not on a machine with Xcode at the moment, but I'm curious if this would work: var heap = self.heap swap(&amp;heap[largest], &amp;heap[node]) self.heap = heap
You are correct, and I agree that enum and union should be different.
There's no need to limit yourself to AVFoundation and CoreMedia. I'd use the MediaPlayer API. Even though the docs are in Obj-C, it should be pretty simple to use this from Swift. https://developer.apple.com/library/ios/documentation/MediaPlayer/Reference/MPMoviePlayerController_Class/Reference/Reference.html#//apple_ref/doc/uid/TP40006953 
I asked the same question on StackOverflow and got a super helpful answer from some anonymous, wonderful soul. Here's the link for anyone who stumbles across this post: http://stackoverflow.com/questions/25348877/swift-how-to-play-a-local-video
Thank you so much for the reply, I appreciate all of the information. It sure provided plenty of insight and has pushed me a little bit closer to my final program!
The classes you mentioned there are all from the [SpriteKit](https://developer.apple.com/library/ios/documentation/GraphicsAnimation/Conceptual/SpriteKit_PG/Introduction/Introduction.html) library, which is commonly used to make games. When you have something like "X.Y", it usually means that the object X has a property Y, which itself can be an object and have its own properties. `physicsBody` is a property of `person`, which is an instance of [`SKSpriteNode`](https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKSpriteNode_Ref/Reference/Reference.html), which is basically the basic sprite object in SpriteKit. A [`SKPhysicsBody`](https://developer.apple.com/Library/ios/documentation/SpriteKit/Reference/SKPhysicsBody_Ref/Reference/Reference.html) object is a simulated physical object that works with the physics engine inside of SpriteKit. In this case, this simulated physical body is the one that corresponds with the `person` sprite. [`dynamic`](https://developer.apple.com/Library/ios/documentation/SpriteKit/Reference/SKPhysicsBody_Ref/Reference/Reference.html#//apple_ref/occ/instp/SKPhysicsBody/dynamic) is one of the properties of a `SKPhysicsBody`, and that determines whether or not it's affected by forces in the environment. Generally if you set it to `false`, you would be using it for objects that shouldn't be affected by the physics engine if you were making a game, like walls and floors.
What do you mean ? What do you want to do ?
I'm still catching up on all of the iOS 8 changes (not a ton of time to do that when your day job is also coding), but it looks like what you want to do here is get a fairly coarse location only when this view controller is shown. I think the only thing I'd change is to have a listener on viewDidDisappear to stop the location manager, and while you're at it, start watching on viewDidAppear. Personally, I like to have a third-party location manager that lives elsewhere and have it start and stop when needed. If you're going to want location on more than one view, this is a good plan so you're not duplicating code. Either a singleton or something living on the app delegate would do. 
Could it be that spawnEnemy is being called more than once. It looks like spawnEnemy could add fallSprite as a child of more than one enemy. This is forbidden. It would need to be removed from any existing parent node, before being added to the new enemy. just a guess...
These two are really annoying for me. Want the decimal part of a float/double? var xf = x - Double(Int(x)) Also, this fails: bab = p[p[p[inc(xi)]+ yi ]+inc(zi)]; but remove the whitespace and it works. Why?
Ah yes, whitespace. It may be a consequence of the lack of brackets but that's caught me out a few times as well.
Sounds good, how would you get a CLLocationManager declared in the Application Delegate to call the delegate methods on the ViewController? Pass a reference to the LocationManager through to the viewController with a custom init?
 class Object1 { var someProperty:Object2 }
I can't override convenience initializers in a superclass. And the mentioned frustration of implicit type conversions for numerics.
Strange, it worked in Playgrounds, but just for kicks I tested it in an empty Single View and it worked there as well. Are you running Beta 5? EDIT: Aha!! I had the function in it's own swift file, but when I moved it under ViewController it sprang the same error you were getting. So as long as you call the function outside the file it's defined in you don't have to be explicit? Bug? Feature? The plot thickens.
Certainly could be a bug - from a quick scan of the documentation it seems to suggest it should work the way you'd indicated. I might report it.
Scratch that. Can you post more code? I tried to recreate the error you're getting and haven't been able to in Beta 5.
Doubt its a bug. Swift treats methods and functions differently. 
Operators are interpreted differently based on whitespace. I think a+ b means that the + is a postfix unary operator, a+b or a + b means the binary operator.
Oh ok. So what is it exactly that I should remove? Thanks for the reply and for taking your time to think about it :)!
My biggest annoyance is generic protocols. I want to use generic protocols as types, darn it.
Ah, I should have considered that distinction on my own. Why then do methods require implicitly named parameters and not functions? Is it for readability? Very often it seems that methods read almost like sentences, which is perhaps why the first parameter name is not required, as the method name itself tends to imply it, etc.
I guess you want to change enemy.addChild(fallSprite) to enemy.addChild(SKSpriteNode(imageNamed: "fireObj1")) You can't reuse the same fallSprite for every enemy, you need to create one for each.
I'm pretty sure it's because of ObjC. For example, an obj-C method would look something like this: - (void) doSomething: (Foo*) foo bar: (Bar*) bar { ... } Note that this is kinda like Swift methods: the first parameter isn't really named, the naming thing only starts with the second parameter. You might say, but, usually methods are written something like this: - (void) doSomethingWithFoo: (Foo*) foo bar: (Bar*) bar { ... } That's true, but there is no automatic way to know that the part after the "With" is the parameters name, as, instead of "With", other words can be used, e.g. "From" or whatever. Initializers have a stronger naming convention. The first part is always initWith, eg. - (id) initWithFoo: (Foo*) bar: (Bar*) { ... } So here it's possible to get the full parameter names, also for the first parameter, because it's always the part after the "initWith". The default naming behaviour of functions is the same as with C functions. So, to summarize: - Methods don't have a named first parameter by default, because that how Obj-C classes need to be accessed - there's no way to get the first parameter name from those. - Initializers have named parameters, because those can be extracted from Obj-C initialisers due to the naming conventions. - Functions don't have named parameters by default so calling a Swift function looks like calling a C function. Basically, it's all about making the old stuff "fit". I'm not a huge fan of doing that, but whatever. 
Thanks! So, now it doesn't crash which is awesome, but the falling object is nowhere to be seen :(
You could use NSNotificationCenter to invoke a method on a view controller. Just add the observer to the view controller and post the notification where/when you would want the delegate method to happen. Possibly locationManager:didUpdateLocations:.
The thought process behind the first parameter in method calls not being named by default comes from Objective C. In ObjC, method names are just a combination of all the parameter segments, so the first segment usually includes the main part of the name plus the first parameter. This makes it so that the call site for that method is fairly descriptive in what it's doing. Migrating that to swift, the method name is the first parameter segment (which describes the first parameter), and the names for the other parameters are the other segments. As for annoyances with swift, I wish we had a functor protocol instead of the complicated hierarchy for sequences and collections. Also wish we had default method implementations in protocols. Also wish that most of the handy dandy functions like map and reduce that exist both globally with a bunch of overloads and as methods in some classes would have just been protocols. Map, for example should be in the functor protocol that should exist. (btw, the functor protocol can't be properly defined in the current version). **EDIT:** So I've been thinking more and more about the Functor type. It seems to be very hard to implement even if they changed certain things about the language. Note the type of fmap in haskell: fmap :: (a -&gt; b) -&gt; f a -&gt; f b The hard part about this in swift is ensuring that f a and f b have the same f. Currently it's hard because of a lack of language features in swift. But even with the missing pieces added, we run into the problem of inheritance. As a protocol with an fmap instance method, how can you be sure that your return type is the correct f? What if the method is being called on a subclass of your class? Then you can't return an instance of your own class, you have to return an instance of the subclass. In fact, I think I just hate the way Self types work in general right now. Consider this simple protocol: protocol Test { func testFunc() -&gt; Self } What happens when A implements Test, and B extends A? Well this is considered a valid A implementation. class A: Test { func testFunc() -&gt; A { return A() } } Notice that it doesn't return Self. Just A. class B: A { override func testFunc() -&gt; B { return B() } } func takesATest&lt;T: Test&gt;(t: T) -&gt; T { return t.testFunc() } let b = B() let c = takesATest(b) Believe it or not, Swift will think c's type is A, not B. This is not ideal when the protocol says to use Self. **EDIT 2:** Apparently you *can* return Self in a class. This gets messy but here's what it looks like. protocol Test { func testFunc() -&gt; Self } class A: Test { let a: Int required init(a: Int) { self.a = a } func testFunc() -&gt; Self { return self.dynamicType(a: 1) } } func takesATest&lt;T: Test&gt;(t: T) -&gt; T { return t.testFunc() } class B: A { let b: Int init(a: Int, b: Int) { self.b = b super.init(a: a) } required convenience init(a: Int) { self.init(a: a, b: 1) } } let b = B(a: 1) let c = takesATest(b) By making a required initializer, you ensure that self.dynamicType can be instantiated, allowing you to properly return Self. It's annoying that testFunc is allowed to return A instead of Self though. I guess it works, sort of. But it kind of ruins the point of a protocol asking for Self. However this still doesn't solve the functor problem. We still need a way to return Self with a differing type parameter. And I still can't figure that one out.
Lack of metaprogramming functionality, and bugs and lack of documentation where there is a little support for that. I get that it's not something that a large number of developers use, but it cripples those of us working on frameworks that a large number of developers *would* use. Lack of documentation in general. There's lots of things that are only mentioned in passing or aren't documented at all. Cross platform support. There's a bunch of things I'd like to use it for on the server-side, but not many people use OS X for servers and the hosting market for OS X is underdeveloped. Targeting browsers by compiling to asm.js would enable a lot of useful things too, but I'm not holding my breath on that one. Lack of acceptance in the App Store. I know it's bleeding edge, but we've got applications that are a good fit for Swift and we can't wait for iOS 8 to hit. 
I haven't run your code, but possible now you are creating a new "falling sprite" for each enemy, you need to manage them individually. I see you are attaching the physics to your static fallSprite object, you would need to attach to each new falling sprite you create wouldn't you?
&gt; Lack of metaprogramming functionality What do you mean by that?
For instance, we have a framework where we load a bunch of plugins dynamically by iterating over all the classes in the application and pulling out the ones that conform to a particular protocol, then instantiating them. We can't do that natively with Swift. First of all we have to drop to C to iterate over the classes, then we have to deal with a severe lack of documentation regarding pointer management, then we have to drop to C again to work around bugs in stuff that *is* supposed to work in Swift, and after all that, it only works if the protocol and classes bring in `NSObject` baggage that we don't actually need. We're still stuck hard-coding a bunch of things and using horrible casting tricks because generics in this area just completely fall apart and it's not obvious from the documentation whether it's intended to work or just something that isn't supported. 
Ah ok. Swift classes can't be found by name or enumerated over though?
They can be found and enumerated over, but only by using the Objective-C runtime's C API, and some of the things you need to do regarding that are buggy and undocumented. You can find pure Swift classes using that API, but instantiating anything seems to require `NSObject`, where I would have expected the opposite to be the case. For a modern programming language, its metaprogramming capabilities are remarkably poor. It seems they've not made any effort beyond what is necessary to interoperate with Objective-C or to support playgrounds.
Cool!
Most languages (including Objective C) manage to cope int a=2; double b=1.2; double c=b*a; works absolutely fine. Those functions look quite useful though. Thanks. 
That may be the reason, but it's still a bit of a pain. It's also worth bearing in mind that the Objective C struction is significantly different Take - (int) calcPosWithX:(int)x andY:(int)y { return x*y; } When you call it - [self calcPosWithX:10 andY:20]; You are specifying both the X and the Y, and you specify both of them the same way - with a bit of the method name followed by a colon and then the value. You also aren't specifying the variable names (x and y). Technically, in Swift you could take a similar naming convention and create a function called func calcPosWithX(x: Int, y:Int) -&gt; Int { ... and then call it with calcPosWithX(10, y:10) But I don't think that's particularly sensible. From other comments, it seems that there's ways to override the default behaviour when it comes to parameter naming, but it still seems an odd default.
This is standard practice for programming languages. For instance, [here's Python's](https://docs.python.org/3/reference/), [here's JavaScript's](http://www.ecma-international.org/ecma-262/5.1/#sec-A.1), and [here's a whole lot more](http://slps.github.io/zoo/). You can usually find the grammar for a programming language in its documentation, or if it's standardised, in the standard.
Thanks. That's useful, but I still think the combination of different defaults is a bit odd (and it doesn't help when Apple refer to them as methods but they are still declared as "func").
/u/wswatson is right. Your spawnEnemy code gets called every 2 seconds, and each enemy is trying to use the same sprite as its child. A child can only have one parent so naturally that doesn't work. Side note, I think you can rewrite this line a bit more concisely: let spawn = SKAction.runBlock({() in self.spawnEnemy()}) as let spawn = SKAction.runBlock(self.spawnEnemy) Since in swift something that takes a block can take a method or a function if you want. Anyway. You're basically going to have to move all your fallSprite code into your spawnEnemy method so that fallSprite is no longer an instance variable and it looks more like this. func spawnEnemy() { let fallSprite = SKSpriteNode() // texture stuff ... fallSprite.position = CGPointMake(400, 600) fallSprite.physicsBody = SKPhysicsBody(rectangleOfSize: fallSprite.size) fallSprite.physicsBody.dynamic = true // Move this line to the didMoveToView method. Shouldn't be run multiple times. //self.physicsWorld.gravity = CGVectorMake(0.0, -0.50) // Note: You don't need the enemy node. Just use fallSprite for those purposes. self.addChild(fallSprite) fallSprite.runAction(moveAndRemove) } Basically, you need a new fallSprite instance for every enemy.
&gt; Lack of acceptance in the App Store. I know it's bleeding edge, but we've got applications that are a good fit for Swift and we can't wait for iOS 8 to hit. Are you FUCKING KIDDING ME?
As a novice you really shouldn't be looking at language grammar, just like reading the C standard specification won't make much sense.
ITT: epic whining by people confusing their lack of understanding for language failings.
Could you give some examples? I've not noticed any "epic whining", and in none of the cases (including my own) where there's been clarification of language features have I seen it fully address the original issue. Sure I now understand how to make variable naming optional/mandatory. But it doesn't make the default behaviour (or the lack of consistency between default behaviours depending on what type of call it is) any less annoying, at least to me.
Liked the else form of let. That should seriously be considered.
I am a self-taught ios dev myself (with expert PHP experience and some C++) and I just did the following to ship my first app: 1. https://www.udemy.com/iosdevelopment/ - it is a FREE course by AppDojo and is compact but powerful. Although it is based on iOS6 but I shipped my first app on iOS7 after learning witht this video. Since you are a seasoned C++ dev, it wont be a problem for you following this tutorial 2. Search google for Ray Wenderlich iOS tutorials - go through these after you are done with the video course 3. Most important, have your xcode open when you go through these tuts and try all the examples, sample codes out. Trust me, you will be able to ship your first app in no less than a month. I did :-) 
I support strict numeric rules in languages like GLSL where it *matters* - but C/ObjC/C++ have gracefully handled multiplying a double by an int for decades without disaster. The simple rule "it's OK so long as no precision is lost" is a good rule. I understand why Swift chooses not to allow implicit numeric conversions, but I think the consequences are painful and result in noisy code.
That's pretty hard core. Usually, you need to know a language to learn another language. Like, "The C Programming Language", you learn C by reading a book in a language you know (English). Learning it from the spec is like learning another language by using another language that you don't know (unless you're a linguist). If you're a linguist, it's probably a good way to learn a programming language. 
Tagged you as "Angry Swifter"...
Even more awesome is that [this page essentially gives you a ChangeLog for the past couple of months.](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/RevisionHistory.html#//apple_ref/doc/uid/TP40014097-CH40-XID_1636). Things keep getting better.
I am what I am...
So strange, I got the download, too, but it doesn't seem to work. And now it's been removed from the developer portal.
The Swift Language Guide has just been updated with the new Beta 6 changes. 
I'm not always sure my iBooks app has gotten the updates. Stupid question, but any way you know we can check we have the most recent update or force it to update if we don't? edit: Obvious answer to my stupid question: read the version in the developer center rather than the iBooks store version. The page in the iBooks store is "temporarily unavailable". One can go to the Document Revision History on the web or iBooks version (at the end of the book, not the beginning) and see the last updates. There are revisions listed for today on the web version, while iBooks "Check for Available Downloads" says all is up to date.
Can't you just make a new operator overload like this: func * (lhs: Double, rhs: Int) -&gt; Double { return lhs * Double(rhs) }
&gt; my impression on Objective-C is that the person who wrote it was on very powerful LSD. Obviously you never learned Smalltalk. 
I managed to install Beta 6 before it was pulled. It didn't go through the usual "Install Additional Components" step on first launch, and building a Swift app fails with [a bunch of linker errors](http://i.imgur.com/6bD9QEc.png). In other news, `NS_OPTIONS` and `RawOptionSetType` no longer evaluate to `bool`, which is a drag. So instead of this: if theEvent.modifierFlags &amp; .CommandKeyMask { // Command key is pressed } you have to do this: if (theEvent.modifierFlags &amp; .CommandKeyMask).toRaw() != 0 { // Command key is pressed } 
Its in the iBook too. 
Guys, I just checked the Developer page, it seems that Xcode 6 Beta 6 is BACK for download!
Right, you can do it however you wish in Swift. But the Cocoa calls have to be the same as before :-/
Is there an entire sheet of those anywhere? I could use that.
I figured that out this morning. Would have saved me 4 days if I remembered I posted this. REDDIT IS SO USEFUL. 
Very nice program, and it helps me glean some of the fundamentals of GPS use with swift. So add my thanks to the list.
Has anyone tried this out, is it worth it?
Wait, what? IE11 is actually pretty good! Does that mean Xcode is getting better with age, because I'd agree with that sentiment. Xcode 6 might be unstable and crashy, but it's definitely the best development experience I've had on Apple platforms so far.
Does it support Swift? All the examples look like Objective-C.
&gt; It crashes if you remove a file using finder No it doesn't &gt; it loses provisional profiles all the time If you add new devices or change the cert then it needs to be reattached, doesn't loose anything. &gt; it produces error messages that means nothing at all and don't help you fix the problem This is not an Xcode thing. You just need to learn how to debug Objective-C code. The others seems to be related to your hardware. Xcode is lacking a few features but overall it's a solid IDE. Runs perfectly on my iMac. I work with RubyMine, Visual Studio, and Xcode on a daily basis and have no qualms. 
I will keep an eye on this. Looks very promising. Would love to hear what others think as well.
You can, and I'll be doing this. But it still seems an odd omission from the core language, unless it's something that they just haven't got round to yet.
Somehow autocorrect + coding seems like an idea straight from hell to me, lol. I suppose with a bluetooth keyboard it could be interesting though.
Is this XCode 6 beta? This version is certainly flaky (at least on my laptop) although strangely it seems to have become better in the past couple of days. But it's worth bearing in mind that it's only a beta - not intended for serious work.
I too have a "top of the notch?" iMac and it runs fine. I'm not a "newbie". Have been writing code for many years and many of those have been in ObjC and Xcode. I feel you have read a few Xcode bashing blog posts and have been jaded by others experiences and opinions, or did Xcode kill your family pet or something? Yes the Beta crashed during WWDC. It's Beta, it happens. If you are having trouble with your development environment you can ask for help. Post your crash logs. If it happens as frequently as you say then I'm sure there is a root cause. 
The concept of a generic class is pretty similar to that of a generic function: A generic function uses some type (as a parameter usually) that the caller can choose by putting it in the &lt;&gt; brackets. A generic class is the same: it also uses some type that the user of the class can choose. When using a generic type with a class, the class can have properties of that generic type, methods that take that type as parameters or return that type. An example you know for sure is the Array - you can specify what type of elements it has. All the methods of Array that append an element or retrieve one, for example, use that type as parameter or return types in those methods. Btw, structs and enums can use generics too (Array is actually a struct).
Not everyone has a MacBook Air. 
great - thanks! 
Right, but if you're someone who is likely to dev on the move then you are probably going to have a Macbook of some variety. Resorting to using an iPad for development can only be the result of poor planning. I do not see the point in this system at all. It's filling a gap that doesn't need to be filled. iPads are content consumption devices
I'm certainly not arguing that for development the iPad is even in the same league as a MacBook, Air or otherwise. But there is a group of people out there such as hobbyists and students that don't have access to such things. In my nephew's class, for example, he has access to abundant iPads, but no MacBooks. I agree with your points, overall. 
Sometimes when traveling super-light on vacation I only have room for an iPad mini. If there's an emergency bug fix to be made, this could save my butt and pay for itself in a matter of minutes. Bonus: never have to worry about finding wifi in a lame airport with a cellular iPad. That said, I think a Macbook Air is a much, much better environment for just about every other situation. I got an 11" Air as a travel machine and it's pretty great most of the time (just wish it were faster and had 10x more storage).
This is my favorite Swift blog. Thanks for being awesome!
Last time I criticized this some dickweed "senior programmer" called me a moron and created dozens of issues on my personal GitHub Projects to establish dominance or something. It is however a horrible idea and has an even worse name.
Swift support is coming [if you believe their twitter](https://twitter.com/dringendapp/status/497445512912855041). I could bite once they have that added in. 
I just got the same message, has IRC really been down for a whole month?
The Sliceable protocol is a bit of a toxic hellstew IMHO. The fact that SubSlice is _Sliceable rather than Sliceable means, like you've found, lots of attempts to use it generically, that feel at first thought like they ought to work, turn out to be way harder or impossible. Slice might define SubSlice as a Slice but that doesn't help you when writing a generic function that takes a Sliceable. I expect there are good reasons for this (Swift doesn't yet like a lot of recursive definitions, maybe its a workaround) but it's still very limiting. Here's an iterative solution, though it kind of feels like cheating :-) Since you are returning an Array anyway, and that Array will start with the full sequence you need subsequent subsequences of, you can just use the Array within your generic function to generate the rest of the results. This means you'll be dealing with Slice not SliceType and all the problems go away: func combinedSublist&lt;S: SequenceType&gt;(source: S) -&gt; [S.Generator.Element] { // could optimize this to reserve (n(n+1))/2 space in result... var result = Array(source) var subslice = dropFirst(result) while subslice.startIndex != subslice.endIndex { result.extend(subslice) subslice = dropFirst(subslice) } return result } let a = [1,2,3,4] combinedSublist(a) // returns [1, 2, 3, 4, 2, 3, 4, 3, 4, 4] I _believe_, though I could be wrong, that all those slices in the while loop will just be views onto the same storage, assuming a Slice of an Array behaves like a copy of an Array i.e. it is copy-on-write.* Even if so, the array will be copied once though, when you extend result, again assuming Slice behaves like an Array, because the subslice pointing at it needs at that point to remain unchanged. The alternative is hand-rolling the copy multiple times without using Slice and dropFirst. *edit: yup, a bit of playing with withUnsafeBufferPointer suggests that is indeed how they work. If you're determined to write a recursive solution, you could use the SubrangeCollectionView that I wrote about in [this post](http://airspeedvelocity.net/2014/07/30/randomly-lazy/) to do it instead: // Generic view class that takes a collection and simulates a collection of a subrange struct SubrangeCollectionView&lt;Base: CollectionType&gt;: CollectionType { private let _base: Base private let _range: Range&lt;Base.Index&gt; init(_ base: Base, subrange: Range&lt;Base.Index&gt;) { _base = base _range = subrange } var startIndex: Base.Index { return _range.startIndex } var endIndex: Base.Index { return _range.endIndex } subscript(idx: Base.Index) -&gt; Base.Generator.Element { return _base[idx] } typealias GeneratorType = IndexingGenerator&lt;SubrangeCollectionView&gt; func generate() -&gt; GeneratorType { return IndexingGenerator(self) } } // version of dropFirst that returns a SubrangeCollectionView // The Sliceable version of dropFirst will still be picked over this one // if a collection is known to be sliceable, since Sliceable is more // specific than CollectionType (i.e. it inherits from CollectionType) func dropFirst&lt;Col: CollectionType&gt;(c: Col) -&gt; SubrangeCollectionView&lt;Col&gt; { // lets use this fancy new-fangled precondition function from beta6 precondition(c.startIndex != c.endIndex, "Collections passed to dropFirst must have at least one element") return SubrangeCollectionView(c, subrange: c.startIndex.successor()..&lt;c.endIndex) } // Now you can use that to achieve the result you were looking for from sliceable func combinedSublist&lt;C: CollectionType&gt;(source: C) -&gt; [C.Generator.Element] { if source.startIndex == source.endIndex { return [] } else { // this dropFirst will use the one defined above, because this // generic function only knows source as a CollectionView // (even though it might also be sliceable in real life) return Array(source) + combinedSublist(dropFirst(source)) } } I would say though that you would probably be better with the iterative version, since the recursive version is probably not very performant (maybe it could be made to be). Fun further exercise: writing a SublistCollectionView that could be returned from a LazyRandomAccessCollection.combinedSublist method, and that calculated the value of subscript on the fly. 
As someone who is quite comfortable with the keybindings and "physical keyboard" provided by a real full-on laptop or desktop editing environment, this seems like it wouldn't work for me. However, I recognize there are likely tons of people for whom a $1000+ laptop is not a feasible purchase, and maybe this could help them out?
Read the page again. You need a Mac to act as a build server. It does not include a compiler.
Ah, point taken. 
Delete any folder inside ~/Library/Developer/Xcode/DerivedData/ that matches the name of your app. So I had an Swift app called HypnoNerd and ran rm -r ~/Library/Developer/Xcode/DerivedData/HypnoNerd-* to remove four folders that I had. After that I could get past the Mach-O Linker error. 
You can also do a build clean (this worked for me. ⌥+Shift+⌘+K)
Real solid argument you posed there.
You could use something like Parallels Access. Yes I realize it's a different beast, but, in the end, you'll always have all of Xcode proper at your disposal (plus the compilation and execution in sims on your iMac, viewed remotely)
First thing I'd try is to store col is some property of your class to make sure it isn't deallocated when the animator tries to use it (maybe it doesn't have a strong reference to the color, and the color is deallocated when your method returns). Also, I'd recommend looking into zombies and malloc-debug (these allow you to debug these errors much easier, you can access the settings when you edit your scheme, under Run/Diagnostics). What these do is to "just pretend" to deallocate objects; they aren't actually deallocated and trigger an error when accessed, giving you more useful information than just a EXC_BAD_ACCESS. There could be other reasons for your problem though...
"What have you tried?" Also, check out [this tutorial]( http://mathewsanders.com/prototyping-iOS-iPhone-iPad-animations-in-swift/).
The danger with implementing control-like structures with closures is that return statements don't work from within them (they return for the closure instead of the containing function / method.
The repl is simple enough a concept that it doesn't really need an introduction. Nor is this really an introduction. The article pretty much just says "type repl to get a repl. Cool"
I should have pointed this out days ago but I'm only just now getting to it. Swift's String **does** already have join. Found in the same place Xcode takes you when you command click the String type. extension String { func join&lt;S : SequenceType where String == String&gt;(elements: S) -&gt; String }
I tried the flappy bird tutorial on youtube but it didnt have what i was looking for. Thanks for the link...........ill try it out tomorrow. 
Apple representatives in the developer forums said that if you want changes to the language, file them as bugs.
The correct place to suggest changes is http://bugreport.apple.com You're too late to affect Swift 1.0. Apple have indicated that they're basically feature complete for 1.0 and only fixing bugs at this stage. The best you can do is make suggestions for the next update (timeline not announced but probably 6 months away).
Wow good point, I didn't really consider that too much. Fortunately the compiler will not let you use anything other than a simple return without a value because of the action type being `() -&gt; ()`. Is it possible to disallow returns completely in some way?
Hi, thanks a lot for the response! You have some interesting ideas. It's unfortunate that there is nothing (seems like it at least) that I can put in the type constraints to make my original function work (that was only an example obviously, I actually wanted to slice stuff, so using dropFirst doesn't really help in that regard). The subrange collection view is a nice idea, it's quite awesome how there are no unnecessary assumptions about index types, so it can be used for anything indexable (recently, I was about to implement a linked list - it's pretty easy to make it indexable, even though there's no random access of course). About recursion and performance: I wouldn't make too many assumptions about recursive stuff not being performant. I actually tried to improve performance in one or two cases by replacing a recursive algorithm by an iterative one, and it was just a bad idea, the performance improvements were negligible, if even measurable. The overhead of running a loop vs. calling a function is pretty small, as long as at least a litte bit of stuff happen in the loop/function body. 
Yeah, you're right... this is pretty strange. I don't see anything obvious wrong here. I'd file a bug report, maybe NSProxies have troubles with swift classes? If you want to investigate this further, I'd try to test if any NSProxy objects work with Swift classes...
I just found the reason why it crashed ! You must use the `dynamic` keyword when you declare property you want to animate. I don't know if it is intentional or must be considered a workaround since it worked prior to beta 5. Do you think it's still a bug ? 
Interesting! I would definitely file a bug report; it might be intentional (ie. dynamic is required for properties accessed via a proxy), but it really shouldn't cause an EXC_BAD_ACCESS. I'd tell them in the bug report that you'd a) expect not to have to use dynamic or b) expect a compiler error (or at least a runtime error) that tells you that properties accessed via a proxy need to be dynamic. 
Actually, this makes sense: &gt; dynamic &gt; &gt; Apply this modifier to any member of a class that can be represented by Objective-C. When you mark a member declaration with the dynamic modifier, access to that member is always dynamically dispatched using the Objective-C runtime. Access to that member is never inlined or devirtualized by the compiler. &gt; &gt; Because declarations marked with the dynamic modifier are dispatched using the Objective-C runtime, they’re implicitly marked with the objc attribute. Proxies use the dynamic dispatch stuff in the obj-c runtime. However, this doesn't change that you code shouldn't crash like this.
It seems you need to completely delete it and re-download. After you delete it from iBooks it remains in iCloud. To delete it from there go to your Purchases from the main page of iBooks store, click the X in the upper left corner of the Swift book. Then re-download.
CoreData and SQLite are your choices of DBMSs. If you're looking for something simpler you could probably just use XML or JSON
&gt; Getting xcode6 to work with core data is a pain in the ass (I attempted and failed). All you have to do is tick a box when you create the project and it sets it up for you. What's the problem you had?
Ha, that's is a bit of a hot topic. Lots of blog posts about the best way of doing it. In the meantime, you should check out: https://github.com/lingoer/SwiftyJSON
Take a look at realm. It's high level like coredata, dealing in objects not SQL but it is significantly less complicated to use. It does not give you access to great coredata features like iCloud sync though. Also, core data is not as difficult as people make out if your app and data access model is simple.
Thanks! Will do.
Cool, I'm pretty sure that tutorial will hook you up. 
Yes that works. But I suspect that the first line "creates a copy" of the array. 
It's not bad until you get into multi-threading and multiple contexts. Then it can get tricky/annoying. But that comes with the territory of multi-threading and anything. I am very interested in Realm however. 
I'm a fan of Chris Eidhof's Parsing JSON in Swift: http://chris.eidhof.nl/posts/json-parsing-in-swift.html
Xcode6 does not provide the box when creating the project for me. So I had to link the binaries and other stuff which was a pain and it just broke my build. If there is an easy way to do it please let me know. Because that little box doesn't pop up for me. 
Probably just an oversight. It's easy enough to copy over the code from the others. Linking Core Data shouldn't ever break a build. what error message did you get? 
That's interesting because if I remember correctly I got the initial idea from the swift book. I do agree with you mostly, there are some issue with it, but I think there are still use cases where it works well too.
The link doesn't do much to try to explain STM or why it's useful, so I'll try to do a tl;dr right here as to what it can do. Databases offer "transactions" - you can stage several queries, and then execute them all at once. If there is an error in any particular part of any particular query, the entire transaction is rolled back safely, so that your database state is unharmed. Further, transactions offer "atomic" interaction with the database - this means nothing you're reading can be modified until the entire transaction is completed, which gives even more safety guarantees. STM is applying that transactional concept to system memory. Basically, global state + concurrency == horrible - but by adding STM to the mix, we can use shared state without fear of the major downfalls that exist in most languages. Swift's support for immutability makes STM like this a great fit. If we can get [transducers](http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming), and the ability to run (non-Cocoa) Swift cross-platform, Swift will be the language of my dreams.
I got it to work. I must have copy pasted the chunk of code into AppDelegate improperly or something stupid. I checked with Xcode5 and it is the same they don't provide the Core Data option with most templates. This is a bit annoying considering all it is just a bit of code and linking a library.
Even though I've had issues launching the project to my phone using Yosemite Beta 6 &amp; Xcode Beta 6 I really like [Realm](http://realm.io). I have used CoreData in the past. It gets the job done but it's cumbersome. Realm seems to feel more at home to me than CoreData does when developing in Swift.
Yes, but it would be a disservice to your learning to tell you how. Everything you need to know is right there in front of you, coding requires *a lot* of problem solving, and you need to get yr chops up. This one's about as easy as it's gonna get. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cartesian coordinate system**](https://en.wikipedia.org/wiki/Cartesian%20coordinate%20system): [](#sfw) --- &gt;A __Cartesian coordinate system__ is a [coordinate system](https://en.wikipedia.org/wiki/Coordinate_system) that specifies each [point](https://en.wikipedia.org/wiki/Point_(geometry\)) uniquely in a [plane](https://en.wikipedia.org/wiki/Plane_(geometry\)) by a pair of [numerical](https://en.wikipedia.org/wiki/Number) __coordinates__, which are the [signed](https://en.wikipedia.org/wiki/Positive_and_negative_numbers) distances from the point to two fixed [perpendicular](https://en.wikipedia.org/wiki/Perpendicular) directed lines, measured in the same [unit of length](https://en.wikipedia.org/wiki/Unit_length). Each reference line is called a *coordinate axis* or just *axis* of the system, and the point where they meet is its *[origin](https://en.wikipedia.org/wiki/Origin_(mathematics\))*, usually at ordered pair (0, 0). The coordinates can also be defined as the positions of the [perpendicular projections](https://en.wikipedia.org/wiki/Orthogonal_projection) of the point onto the two axes, expressed as signed distances from the origin. &gt;==== &gt;[**Image**](https://i.imgur.com/eKAeAFO.png) [^(i)](https://commons.wikimedia.org/wiki/File:Cartesian-coordinate-system.svg) - *Illustration of a Cartesian coordinate plane. Four points are marked and labeled with their coordinates: \(2, 3\) in green, \(−3, 1\) in red, \(−1.5, −2.5\) in blue, and the origin \(0, 0\) in purple.* --- ^Interesting: [^Coordinate ^system](https://en.wikipedia.org/wiki/Coordinate_system) ^| [^Perpendicular](https://en.wikipedia.org/wiki/Perpendicular) ^| [^Quadrant ^\(plane ^geometry)](https://en.wikipedia.org/wiki/Quadrant_\(plane_geometry\)) ^| [^René ^Descartes](https://en.wikipedia.org/wiki/Ren%C3%A9_Descartes) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cjw4vwm) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cjw4vwm)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Going to be adding the ability to add a gist of code to show an example of using the library. That should be available sometime next week. The curation would be cool, not sure about paid though.
Pretty sure the reason is just that Apple created a few project templates, eg. "Master-Detail Application for iPhone in Swift that uses Core Data", etc., and they offer these. I guess the checkbox for "Core Data" is kind of misleading, as it's doesn't just add some stuff to any template, but chooses a specific template that has core data included. So I think they just didn't make a "Page Based Application for iPhone in Swift that uses Core Data" template, so they can't offer you the check box. They could add more templates that offer core data in other application types, but it's not the biggest of deals that they don't (imho). That's all just theory crafting, I don't actually know what I'm talking about. There is really no reason not to use core data in the other application types, you just have to add it yourself (or copy the relevant stuff from a template that does offer core data).
Ya it would be very similar to the home screen. I'm looking to have a timer on one view with a couple buttons and labels, then I want to be able to swipe over to the second "page" and have a table view. So I'm not sure if a scroll view would work the best since I would want to be paging between two separate view controllers. 
Thanks for the info. I'll have to look into UIScrollview. I'm curious about why you can add a UIPageviewcontroller in a storyboard then? You must be able to implement it some how this way otherwise why would it be there?
What I have been doing is watch a bunch of tutorials. I haven't found one complete tutorial that covers everything one will need to create their own original app, just bits and pieces. Use documentation,stack over flow, and google!
This is exactly what I'm doing. This is just on small piece to my puzzle. I'm just having trouble sorting through the flood of tutorials. Just wondering if anyone has come across any good tutorials on how to implement the UIPageviewcontroller, or an alternative way to accomplish my desired result ie. UIScrollview. There is definitely a lot of good information out there, just looking for push in the right direction. 
make sure the images are copied to the bundle on compile otherwise the app will have no way of locating the images. 
Use the sprite atlas if you can. Here is very well detailed. http://www.gamefromscratch.com/post/2014/06/16/Game-development-tutorial-Swift-and-SpriteKit-Part-3-Texture-Atlases.aspx
Is that the same as putting the images in the supporting files? If not how would I copy to the bundle? thanks 
UIPageViewController's in the storyboard editor so you can transition to and from it like you would any other view controller. You provide it content by implementing its data source and delegate in code.
yeah this chap is also right usually we don't put .png they just work without. 
 let x = 42 let s = "life" println("The answer to \(s) is \(x)!") This is by far the cleanest way to print variables i've seen on a language. Very cool.
From the website: "(Mac to act as build server &amp; Dropbox account required)". Sounds like you still need Mac.
You missed the escape character but yeah it's nice.
Hi, sorry to reply so late! When I move fallSprite into spawnEnemy(), it can't be referenced elsewhere in the code. How would I solve for this? TYSM For your reply! EDIT: Got it working. You are the BEST! Just to understand, what did you mean each enemy is trying to use the same sprite as its child? The child was SKSpriteNode and it took an image. Could you go into detail on that?
Well fallsprite can't be used in other places because you need to have several of them. You can't have just one, and they need to be declared on the fly instead of in predefined instance variables. What do you need to reference it elsewhere for?
 println("The Answer to \(s) is \(x)!")
ACtually, I edited the text and it striped of the escape character :) I'll reedit :)
Thanks for sharing, but this article took a couple hundred words to basically say "try using Swift". I didn't get anything practical out of it, or any sense of enlightenment. However, I do enjoy swift and think that it's a very cool language.
Okay. 
&gt; self.nameLabel.text = self.user.name.fullName; self.nameLabel.text = self.user?.name?.fullname and if the text property isn't optional and you know what you want the default to be, self.nameLabel.text = self.user?.name?.fullname ?? "Default"
Yea in the first one, it will return nil, which is ok if the property you're setting is optional. In the second one, the same expression is used, except a special operator is used that takes an optional of some type and a non-optional of the same type, returning the first if it's non-nil.
Thanks for the simple explanation :)
First of all, it's possible to drop down to objc. They're almost equivalent languages -- when I want to do something, I google for objc results then translate those. But Swift is incredibly powerful compared to objc. Since objc was a strict superclass of C, it inherited all of the limitations. While C is very fast, it's also very inconvenient. But with Swift, I've developed a [tool] that allows for almost one-to-one line conversion between Python/Matlab and Swift -- unheard of for C. Plus, with the included [Accelerate framework], you can get [speed results] much faster than interpreted languages! [tool]:http://scottsievert.github.io/swix/ [Accelerate framework]:https://developer.apple.com/library/ios/documentation/Accelerate/Reference/AccelerateFWRef/_index.html [speed results]:http://scottsievert.github.io/swix/speed.html But with Swift, you can overload operators. You can define +-*/ etc *however* you want. That's huge for defining your own classes. Perhaps one of the biggest ease in Swift is optional function arguments. `func f(x:Float, y:Float, how:String:"addition")`. Oh god so much easier. I don't deal much with the GUI but it sure seems easier -- it seems like Apple tailored it for that use case (but not exclusively that use case).
Looks like you're initializing your image view with an empty frame. You defined the text variable but you're not using the init(frame: rect) method when you're instant imaging your image view. 
I'm assuming that the picture of your storyboard is showing the game view controller with the segue back. In that case your game view controller, not your rootViewController has the segue 'main map'. Try: self.performSegueWithIdentifier('mainmap', sender: nil) As an aside, it looks like you're using simple push and pop. You may want to consider using a standard UINavigationController (hiding the navbar) to make it a little simpler. 
I think it's a big improvement for the average case right now, and a big improvement for almost every case once it's more mature. The semantics are much more restrictive, which is a good thing. Far more mistakes can be caught at compile time and the toolchain can reason about the codebase a lot more, which leads to more powerful tools and more efficient code. And they've managed to do this while making the language more concise and readable. Apple couldn't stay on Objective-C forever and there isn't really any way to modernise Objective-C. Swift seems to be the best possible way for Apple to transition to a modern language. The method call/parameter approach can be a little odd in places, but it's the best approach I've seen to marrying the more conventional dots and parentheses to Objective-C method and parameter naming. Other language bridges have tried to tackle this and haven't done as good a job in my opinion. &gt; And I want Objective-C level reflection. Agreed. This is the major glaring deficiency in my eyes, however it's also something that won't affect most developers directly. I can understand why it's not a priority for Apple, but I doubt it will stay like this forever as Apple undoubtedly need this functionality themselves. 
Thank you for the reply. I am actually trying to segue from within the SKScene class, not from the GameViewController so it does not have the function performSegueWithIdentifier. I was trying to do the segue by getting the view controller that contains the skscene by accessing the rootViewController. Thanks also for the aside, I might consider that as well.
&gt; a lot of the furor around having to type more (for example the ?. optional chaining) is not even really on my radar. What I want is fewer bugs, better performance, and direct *explicit* expression of what I'm doing And that's why the extra typing in places is so valuable. In Objective-C, this code: foo.bar = baz …could be written with the knowledge that `foo` is never `nil`. It could be written with the knowledge that if `foo` is `nil`, then this code works fine. It could be written with the mistaken assumption that it will never be `nil` when it might be. And of course when code *elsewhere* in the application changes, which one of these is true could change. With Swift, it's explicit: foo.bar = baz `foo` is never `nil`. foo?.bar = baz `foo` may be `nil`, but that's okay. foo!.bar = baz We are making the assumption that `.foo` is `nil`, so pay close attention and make sure that this is right! Unlike Objective-C, the intent of the code is both visible and enforced, making mistakes much harder to make and bugs much less likely. 
To make it mandatory, use a # func someMethod(#a: Int, #b: Int) To make it optional, use a _ func update(_ x: Int, _ y: Int) 
Hey that is some really cool work you are doing. I've been fascinated by Julia myself for scientific computing. I thought from the start that Swift could theoretically do this almost as well, except the standard library is extremely sparse in this area unlike Julia. Great to see somebody put in some effort. Having a great app development language as well scientific computing and great possibilities for visualisations seems like a killer combination.
&gt; This is by far the cleanest way to print variables i've seen on a language. Very cool. Really? http://en.wikipedia.org/wiki/String_interpolation
About reflection, you have to be aware that having everything as reflectable as in Obj-C kills off a ton of compiler optimisations. It's a bit of a tradeoff: do you want the compiler to optimise like crazy, or do you want to do metaprogramming? In swift, you can choose. For example, by adding "dynamic" to a property, it will always be set using a dynamically dispatched message like in obj-c, so you can be sure there will be a method called "setSomething", you can swizzle the method, whatever. The reflection APIs might not be exposed through a Swift API yet (for the most part), but that doesn't mean you can't reflect on a Swift class in Obj-C.
In the first example, the text property is an optional, and fullname is an optional too. Ie., it's variableWithOptionalValue = optionalValue. Kinda makes sense that you don't do variableWithOptionalValue = unwrap(optionalValue), right?
&gt; a lot of the furor around having to type more I have never heard anyone complain about that in the case Swift vs. ObjC. Average ObjC code is so much more verbose. I strongly agree with the general sentiment, though.
Can you give me an example of what you would use reflection for in "real life"? And with "deficiency", do you mean that there's no API to access reflection directly in Swift? Because, by being compatible with the ObjC runtime, and by having the dynamic keyword, Swift really should offer reflection like ObjC in case you need it. But I haven't really tested this, so maybe it just doesn't work...
&gt; They're almost equivalent languages &gt; Swift is incredibly powerful compared to objc Wut. I'd simply say that swift is more powerful. Converting from Swift to ObjC is easy, but converting from Swift to ObjC can be extremely hard due to language features missing in ObjC. &gt; Since objc was a strict superclass of C, it inherited all of the limitations. This sounds very misleading. I'd argue that ObjC, by the mere fact that it adds stuff to the language, it doesn't inherit all the limitations. Eg. closures - can't use them in C, work fine in ObjC.
Nah, it's just NSImageView(frame: rect) You don't need to call alloc and init explicitly; I've actually never seen anyone do that in Swift. Edit: You can see an initialiser used correctly a few lines below: NSImage(imageNamed: "...")
I believe Core Data uses reflection for the models. 
Also, a new step-by-step guide to building a Tetris app in Swift. [Swiftris](https://www.bloc.io/tutorials/swiftris-build-your-first-ios-game-with-swift#!/chapters/675)
Ahhhh. Ok gotcha
K, interesting. I just miss being able to do things like... idk, have a category method that prints out every variable of an object, (its type, name, and current value). ^ For debugging of course, but also for neat ways to convert JSON into models and models into JSON :D
Yes. And CoreData works fine with Swift. I was looking for an example of reflection use that doesn't work in Swift, as you guys seem unhappy with reflection support. Although, I guess, if you wanted to implement something core-data like on your own in pure Swift, you'd be out of luck.
I will be looking into dynamic properties then. I want to port what I did here: https://github.com/jpmcglone/JPKit/tree/master/src/JPKit/JPModels to Swift. Not sure if it's very clear what's going on in that, but the interface is super easy. look at the test named 'testNestedArray' https://github.com/jpmcglone/JPKit/blob/master/src/JPKit/JPModels/Tests/Tests_JPModels.m Because of reflection, I'm able to easily create new models, feed them json, and have all the properties set from the JSON. With VERY minimal code to the new model (look at Person.h/m here): https://github.com/jpmcglone/JPKit/tree/master/src/JPKit/JPModels/Tests In Person.h, everything below 'parents' exists just to test another thing I've built in obj-c using reflection, so ignore those for now :P But in Person.m, you'll notice a lot of commented out code. All I did was override a method called: "specs" (which I think I should rename to blueprint or something else). This method ONLY needs to be around if there are indeed overrides (not a 1-&gt;1 mapping of JSON names to your model's names). A good example of this is "id" since id is a keyword in Obj-C, so I made "id" from the JSON map to "personID" of the Person class. so anyway, since 'parents' is an array, it automatically detects that it "isPlural", and will treat it as such. the only thing I had to tell it, since NSArray doesn't have a way to define what type it holds, is that the the "class" is "Person". I designed this library to interface with any JSON API out there, without removing the flexibility the developer might need in defining their (raw) models. That said, Swift came out and rendered it pretty useless. I wonder if I can port it over with this dynamic stuff you're talking about. :) Thanks for the info, and for reading this (if you did). Any feedback would be great. 
&gt; Converting from *ObjC to Swift* is easy, but converting from Swift to ObjC can be extremely hard due to language features missing in ObjC. My bad. That's exactly what I meant. &gt; This sounds very misleading. I would agree. You can pass an object to a function; I was primarily dealing with the C side of ObjC. I really only dealt with `double *`; to me, C and ObjC were about the same.
TIL thanks!
Unnecessary solution to a non-existent problem invented only in reaction to a terrible idea (10.times).
28 usd shipped to UK, ouch.
Comment saving
Is this a runtime or compile error?
The error is clearly a clang linker error
&gt; Objective-C without the C Chris Lattner has clearly stated in the forums that Swift isn't Objective-C without the C, that's a misquote. The correct quote is that they wondered "what it would be like to have Objective-C, but without the baggage of C". Lattner says: in particular, the baggage of being a strict superset of C. Lattner goes on to say that there's a lot of C in Swift in different ways – native C function calling, a lot of C-style names, etc. Certainly, Swift hasn't taken away C in some subtractive sense. Here's one of his comments on the topic: https://devforums.apple.com/message/1025680#1025680
I have this problem before. Delete the DerivedData folder
That's good to know. Thanks. I'll try it. So to use that I have to make every model I make, even in Swift, @dynamic. That's a little tedious, but understandable I suppose. I wonder if I can do some wrapping to make the @dynamic implied..
Hey! That sounds like the perfect use for an object hierarchy!
If someone wants to get "protected" added, they need to show a representative example where "protected" is clearly the best solution to a common problem. I haven't seen anyone provide an example yet.
What is the Max requirement about? Does it utilize Jitter?
Are you using any third party libraries? 
It obviously already works like this in Ruby, so the opposition to this in terms of it being "impossible" is a bit odd. In Ruby it's also possible to create these pseudo closures (Procs) separately. I don't propose that since it probably would necessitate making iterators into special constructs. If you look at the code examples, it's important to understand that the block() call isn't to be interpreted as the compiler emitting a normal function pointer here. This is simply syntactic sugar for what's actually a macro expansion location. The reason for making it look like a closure invocation is so that it can feel like "a special kind of closure", even though behind scenes it works completely differently.
; ) 
Hi! That looks pretty nice. I wrote something similar a while ago. A few more hints: I posted somewhere here how you can get the names of the properties the class has somewhere here. With the property names, you can set and read the values very easily if the model class subclasses NSObject, with the KeyValue coding stuff (i.e. setValue(v, forKey: "key") and valueForKey("key")). That being said, I don't think you even need to port your code to Swift. All you need to do is to make sure that the model classes support key value coding (e.g. by subclassing NSObject) and have dynamic writable properties. You should still be able to use your ObjC code for JSON serialisation from Swift code, with Swift classes.
This seems like an interesting idea; it's important to note that there are huge semantic differences to closures. It's misleading to even call it "pseudo closure". Some problems I see: It has to be ensured that the "pseudo closure" (I'm still calling it that for a lack of a better word) only lives as long as the inner function call (eg. the times method). So it cannot be possible to store the pseudo closure in some variable - if that were possible, you'd be able to call the pseudo closure after the outer function has returned, hence it'd be undefined what a "return" in the pseudo closure does. This concept of a value that can't be stored exists nowhere in Swift, as far as I know. Furthermore, the capturing semantics of pseudo closures are different. Because the lifetime of the pseudo closure has to be limited, it's not necessary (and not expected) to capture anything. Basically, what you are proposing is a pretty massive change to the language that introduces quite a few new concepts. I'm not convinced it's worth it, it can be confusing for programmers to have to semantically very different things (closures and pseudo closures) that have the same syntax. So, at least a syntax that makes it obvious what is a pseudo closure and what isn't would be necessary. 
I added a very short one... The swift compiler seems to have huge issues with self-referencing types in general. It's kind of surprising - this shouldn't be that terribly hard to avoid.
The link seems to be broken... I also can't find a working link via Google. Did you take it down?
An alternative would be to define using a keyword like "yield" or similar (instead of the closure syntax), but in the current form it's theoretically to extend the proposed syntax creating multiple slots, for functions like func try(#tryBlock: @localclosure ()-&gt;(Error), catchBlock: @localclosure(Error)-&gt;()) I'm imagining that when encountering the @localclosure annotation, the function actually is transformed into a macro that will expand at the calling location, so this would be limited to functions that would be possible to inline no matter what (final methods, global functions, methods for structs/enums. It's possible to allow this function to be stored, but its @localclosure functionality would disappear in those cases. 
It's taken down. Here is [cached version](https://webcache.googleusercontent.com/search?q=cache:tZ6qdxWUvjEJ:https://github.com/Max-XNU/PhyXGraf128+&amp;cd=1&amp;hl=en&amp;ct=clnk&amp;gl=sk). And here is [GitHub account](https://github.com/Eli-Hutton) of the developer.
With "functionality would disappear" I assume you mean that return, break and continue would all simply mean return (when used in a normal closure)? Might work, but might be confusing in some cases... not sure how this would work in real life. (I guess it should work ok if Ruby uses this successfully). In general though, Swift has opted to use external iteration, which is why there is no .each function on arrays or similar stuff (like Oracle added in Java 8 with the streams stuff), and I think I read somewhere that Apple explicitly noted that internal iteration shouldn't be used (might be wrong though, I can't find where I read this). I like the idea of internal iteration, as do you it seems: your proposal (mostly) aims at improving syntax for internal iteration (break and continue really only make sense for iteration). But because Apple isn't going that direction (at least right now), I think it's very unlikely that we will see any form of pseudo closures. 
Nothing, quite simply and short project. Almost at start.
Why is imageview optional? You can just initialize it above the super call to make it not so
Yea I think when I first linked it to the Obj-c library, I tried it on a Swift-made property, and didn't KNOW about dynamic. I will try again with dynamic. Thanks for the heads up :D
Whoa. I'm not sure whether I should be unhappy or impressed that it's even possible for a website to override this command... (Oh Jesus I just hope it's not possible to do the same with Cmd+W, what if people creating annoying popups figured that out).
The location is in ~/Library/Developer/Xcode
I am almost certain that this was pointed out during the core data wwdc presentation, although I am sure a lot of people would appreciate knowing this. They better fix before final version. ; )
We would be reduced to manually clicking the close button! Noooo!! Haha But I agree, I would be annoyed if people followed this footstep. I wouldn't be able to minimize anything completely removing the purpose of commd+M. 
Not tested (so it's possible this might not actually compile as-is), but it should be something along the lines of: request.GET("/api/users/123", parameters: nil, success: {(response: HTTPResponse) -&gt; Void in [do some processing here] dispatch_async(dispatch_get_main_queue(), { self.performSegueWithIdentifier("segueHome") }) }) This executes whatever's in the block you pass to dispatch_async on the main (UI) thread.
Reddit Enhancement Suite
Building secure code should be every good programmer's mantra. No one should rely on what a language specification promises to assure without verifying the outcome at least once.
You are right, but having a language guard in place reduces the amount of effort considerably. For example, Java guards you from buffer overflow bugs, and I relieves a lot of programming effort. 
You can call C from Swift! So if you try really hard, you'll have all of C's vulnerabilities. Use a unsafe mutable pointer for your arrays so you can have buffer overflows! Use format strings and printf instead of println so you can have format string attacks! Swift allows you to shoot yourself in your foot, but it makes it quite hard, and in some cases impossible if you stick with pure swift. And about those other security issues listed, those are all programming language agnostic. No programming language can ever helps against social engineering. All in all, this list is extremely short. If those are all the security issues Swift has, it's doing extremely well. Calling a vulnerability of C a vulnerability of Swift because it's possible to call C functions(i.e. printf) in Swift because of compatibility reasons is technically true but kind of a weird argument. Edit: Actually, wtf. printf isn't even available by default. You have to use NSString(format: "%i", 1) to get get formatting strings. Who does that? How is the likelihood of exploitation "very high"? 
&gt; Edit: Actually, wtf. printf isn't even available by default. You have to use NSString(format: "%i", 1) to get get formatting strings. Who does that? How is the likelihood of exploitation "very high"? Yeah, I actually opened XCode and double checked this when I saw they were using printf. I mean all of the things in this article are ~possible~ but you really have to go out of your way and use unsafe stuff like raw pointers. The Swift team even says they've avoiding doing anything to make this seem not-gross, as to discourage insecure use.
Swift's features can be attributed to many programming languages; Scala, Groovy, Rust, Objective C, Haskell, etc... Even though the syntax is very similar, I don't think it makes sense to say that Swift is a dialect of Scala or "inherited" Scala's features. They just copied a lot of good stuff from various other programming languages, and that's pretty awesome imho.
I'm in the same boat. I think it essentially boils down to where you stand on the dynamic vs. static typing divide which is a product of what your projects are. I think that for relatively stable and slow moving projects with many team members of varying capabilities, static typing can be a boon just like its proponents say. For cutting edge and rapidly changing exploratory projects it's a hindrance. The irony is that an exploratory project that becomes successful morphs into a stable project due to its success. Perhaps, this means you should start exploratory projects in Obj-C and then slowly migrate to Swift as a project matures. In the projects I find myself working on (in startup environments) I personally view static typing as a hindrance to what I'm trying to achieve and I'm responsible enough with my coding that I don't hang myself with the rope given me by Obj-C's dynamic typing. Obj-C's duck typing also lets you elegantly and quickly solve real world problems that would be very difficult to solve in a statically typed system. For me, personally, anywhere I need to annotate my code for the benefit of the compiler's sanity checking is a productivity loss and mental distraction from the task at hand. I don't want to be a language lawyer. For me, the nicest thing about Swift is the easy Core Foundation interoperability. Though, it is obvious that much of it (namely the ARC handling) could be back ported to Obj-C without a problem. That Apple didn't back port it is a discouraging sign for Obj-C's future with Apple. Obj-C's slow deprecation may have already started. Edit: It appears we are not alone with the language lawyer gripe. There is quite a discussion about it in the [dev forums](https://devforums.apple.com/thread/241781?start=0&amp;tstart=0) 
can i add swift support to xcode 5 or do I need to re-install xcode? I'm looking to up skill asap
You need Xcode 6 to use Swift.
You can have multiple installs of Xcode at once.
man that is really annoying. why could apple not just release a patch instead of a full IDE update?
that doesn't help the fact that I need to install xcode6
Eh can you code for swift in sublime and compile in the terminal.... I am literally looking for any work around. :)
Installing Xcode 6 is not the end of the world. They need to keep the sdks separate and bundled with the dev tools so that's why you have to have Xcode 6. Download the dmg, and drag Xcode to applications. You can still use the old installation and deleting the beta is as simple as deleting the application.
What's the problem with using a newer IDE?
I authored the post. No compiler optimizations were used for the Swift or Objective-C app. Maybe I'll do a follow-up post in the future with some tinkering.
Yea optimizations bring swift to very comparable to ObjC.
Thanks for the tip. Any in particular? The point of the post was to compare the two "as is" without any specific optimizations.
I think just using -O turns on everything except -unsafe (which you don't want on).
Enabling -O made a huge difference, but there's still a gap. I've updated the post with the new results, thanks!
The people want protected in order to give a clean public interface, so that methods only intended for subclassing overrides isn't exposed in the public interface. For example, let's say you have the class Foo with a single public method: func sendRequest(url: NSURL) -&gt; Bool This performs some validation in some manner. For subclasses of Foo, Foo might allow for some customization of URL post arguments. Something like: class TwitterFoo : Foo { func getAdditionalPostArguments() -&gt; Dictionary&lt;String, String&gt; /* ... */ } The function overridden by TwitterFoo should only really be used by the inner machinery of Foo, and is not the concern of an external user of Foo or any of its subclasses. In this case, it would be somewhat confusing for an external user to see the "getAdditionalPostArguments" method, as it should not be used. It is in this situation that protected has a value - in that it can hide such methods from the public interface. There are workarounds, but in some cases "protected" is the most straightforward solution.
New features come with new software versions. What does it change that the Xcode version is 6.0 instead of 5.1 or whatever? Also, assuming they actually would release a patch, it wouldn't be released yet since all things Swift are still beta, so there's no way they could create a final version patch for Xcode 5. You could just pretend that Xcode 6 is a big patch for Xcode 5 that adds Swift support, would you be happy then?
People assume that you don't want to install Xcode 6 for a reason, and the most probable is that you need to use Xcode 5 as well and don't know that you can install both.
You could set your application's window to fullscreen when it launches (eg. application didFinishLaunching). Just call window.toggleFullscreen().
Just so you have something to reference: let words = ["apple", "violent", "table", "patiently", "and"] let tags = ["noun", "adjective", "noun", "adverb", "article"] if contains(words, "apple") &amp;&amp; !contains(tags, "pronoun") { println("It works!") } But, like gilgoomesh implied: Python and Swift are two different languages, and the official Swift documentation is your friend.
Great stuff! Consuming tag markers (&lt;, /&gt;) inside asserts is not a good idea though. asserts will be removed when optimized. There is a new function called "precondition" in Beta 6 which is a stronger version of assert: it won't be compiled out. I personally wouldn't use assert/precondition style to consume mandatory characters, they communicate a different thing for the reader of the code. But YMMV. 
soz man I didnt mean to sound as though I am making a meal out of downloading a new version. I am in a bad internet location at the moment and the DL on this net connection would take forever. That is the real reason I was hoping that another method was available.
That's pretty hard to tell without any source code. Post your project somewhere and I could have a short look.
Thank you for confirming my suspicion about `assert`. I wanted to try that experiment before posting but I ran out of steam. I'm pretty sure this is an area where Rust does something different: their `assert!` macro is always present, and will always result in `fail!`, but with their task-level failure isolation you've got a way of having your assertions not tank your whole program. I hope Swift gets something like that next year. Thank you also for letting me know about `precondition`. I had not seen that yet.
This worked for me. Mine is not a Core Data app, so it may just be an issue with upgrading beta versions.
Read, read, then re-read those docs. Then apply apply apply, then read, read, re-read again! 
The empty application template, if I remember correctly, will create a NSWindow in the application delegate's application:didFinishLaunchingWithOptions: method. I think this is what that's probably hiding your other windows. Just delete all the code in this method and return true.
It depends on the layout changes you expect. If you're just resizing components then there is absolutely no reason why you should use different controllers. It all depends on the screen really.
Since the language was born to make writing mac/ios apps easier, it makes sense for them to go straight into swift. Learning obj-c is easy enough, but who wants to worry about pointers and memory management? 
The stuff about required on protocol methods makes no sense. Required is a keyword used to imply that all subclasses need to implement an initializer of the same signature. That way obj.dynamicType can be instantiated. The way OP suggests using it makes absolutely no sense.
So if I had all the same components how do I resize them to adapt to portrait and landscape. I am having trouble finding relevant resources on this for IOS 8 and swift. Do you know of any good tutorials or articles?
It seems that a significant contributor to the performance gap are unnecessary retain/release calls against the ViewController in the swift version from this line: self.isCardanoTriplet(triplet) { … inside the closure. If you implement isCardanoTriplet outside of the ViewController definition, say in its own class as a class method, the performance gap between Swift and ObjC gets narrower (5.81 vs 6.03 seconds in my own setup).
If you use autolayout, components will resize themselves automatically. For more complicated layout changes you can either adjust the constants on your constraints or just keep an entirely separate second set of constraints that you swap out based on initial orientation and orientation changes. Apple still officially recommends keeping two view controllers (see [here](https://developer.apple.com/library/ios/featuredarticles/viewcontrollerpgforiphoneos/RespondingtoDeviceOrientationChanges/RespondingtoDeviceOrientationChanges.html#//apple_ref/doc/uid/TP40007457-CH7-SW1)), but frankly I agree with /u/ElvishJerricco that this is overkill for most situations. You shouldn't limit your search for resources to swift/ios 8. You're very unlikely to find anything specific yet. The language and OS aren't even released yet, so you can't expect the community to have transitioned for many months, even years. Almost all examples that use Obj-C with iOS 6 or iOS 7 should translate fairly easily to Swift.
Very nice catch, thanks. I guess this would fall under future Swift language optimizations.
Here is a useful Core Data tutorial https://www.youtube.com/watch?v=3IDfgATVqHw And here is a search bar tutorial http://www.raywenderlich.com/76519/add-table-view-search-swift. NOTE: the search function is case sensitive. 
If you've never used Xcode before, you're gonna want to learn how to use the environment first, it's really a core part of iOS development and knowing the workflow - be it with Swift or Obj-C - is going to make learning the language easier. Every iOS developer I know would also suggest learning Obj-C first - as it's going to be around for a while and still a core part of iOS development for a while, it won't hurt to know it. There was a code for bitfountains iOS 7 course floating around a while ago -- http://bitfountain.io/course/the-complete-ios-7-course-learn-by-building-14-apps/?couponCode=COUPON111677 -- it gives you what was a $499 course for free (apologies if it's expired) -- I payed for the course a while back to learn me some Obj-C over a weekend and found it super helpful when diving into Swift -- all because you kind of get to know how the XCode workflow works. Swift is certainly worth looking into, but if you're looking to seriously get into iOS app development, I think that foundations in Obj-C should be done first. Also look at CodeSchools iOS/Obj C courses, I think that Try ObjC is Free. 
After lengthy discussions on the apple devforum, the consensus was pretty much that using "required" for this (as opposed to - for example - override, like Java does), was the best compromise. The "required" keyword is currently only valid for init. To reuse it for func declarations are hardly a stretch. You would need to elaborate on why this overloaded meaning is problematic and what you would replace it with. Esp in light of the Swift compiler team stating that a goal for them was to keep the # of keywords as few as possible.
As an example: 10 % 2 = 0 because 2 divides into 10 five times and leaves a (zero) remainder. The Mod operator returns the remainder of the two numbers ( 10, 2 ) it is working on. In this case it returns zero 11 % 2 returns 1 
Probably something to do with AutoLayout and Size Classes. I've got Auto Layout more or less figured out, but I still have to disable Size Classes until I have a chance to investigate them further.
It is really weird though because it even happens with a brand new project. I can't seem to figure it out. 
I was using that code as an example... I'm unclear as to what break and continue mean... I get fallThrough and I'm pretty sure I get break now, I just don't get continue and what it would be used for
I think auto layout and size classes are now both turned on by default in a new project. With main.storyboard selected, you can turn on/off one or both via the File Inspector.
Too true
Once a class implements a protocol's methods, its subclasses need not implement those. The required keyword for methods would be meant to say that every subclass must implement the same method. Maybe I'm just reading what OP has to say wrong, but isn't he suggesting that required be used just to indicate that a method is implemented from a protocol? Not only does that seem unnecessary, it's misusing a keyword in a confusing way. Edit: also, having required for methods in the way i described is unnecessary since methods are inherited and initializers aren't. Requiring subclasses to implement a method might just lead to a lot of method stubs that delegate to super.
Cool! 
Break will stop execution of the for loop - i.e. if you add "break" where your comment is on the example above, that for statement will only run for 1 iteration (as 1 is an odd number) and you would only get a single "odd" in your playground output. In other words, even though the for loop was supposed to run for 100 iterations, you're stopping execution early on the first iteration, skipping all the remaining ones. Continue, on the other hand, will stop execution of the current iteration but will carry on the for loop with the next value in the range. In your example, if you add "continue" where the comment is, the whole 100 iterations will happen, but you'll not run the checks for multiples of 5 and 10. In this case, you would only care to detect multiples of 5 and 10 for even numbers, skipping that entirely for odds. In short: - break will stop executing the whole loop and continue execution on the line following the closing bracket of your "for" - continue will stop executing the particular iteration you're in at the point you call it, incrementing your loop count by one and immediately executing whatever comes after the opening bracket of your "for". Edit: corrected my brain fart when it comes to odd numbers not being multiples of 5 :P
Obviously, BREAK will exit the statement if the condition(s) are met., and CONTINUE will go to the next statement even if it's condition is met. Sometimes you need to continue on instead of exiting. I don't know what else to say. In your example a number could be both Even and a Mulitple of Ten; Odd and a Muliple of Five. 
so what is the difference between fallThrough and continue then? will continue only go to the next section if the requirements are met, as compared to fallThrough where it will move on no matter what?
i got the course for free while it was free :p 
Use Fallthrough is a Switch statement Use Continue in a For statement Unlike C, Swift's Switch ..Case will exit once the Case conditions are met (C requires a Break; for each case to prevent Fallthrough) 
Size classes represent all display types (iphone, ipad, etc), thus their storyboard elements are represented using a generic size. Apple is trying to encourage developers to persue single viewcontrollers that can adjust to all devices rather than a viewcontroller for every device type or display size. Edit: to change this, just create a new storyboard file and a dropdown list will indicate iphone or ipad.
It's important to realise that while swift is important and a big step forward, the biggest part of the knowledge you need to acquire is more general. The frameworks, the tools (Xcode 5 and 6 aren't all that different), the basic understanding of how programming works. Swift is pretty straightforward if you have some programming experience. So my recommendation: Go with Xcode 5 and ObjC for now, as there are way more examples for ObjC and the development environment is stable. It shouldn't be too hard to switch to Swift once it's final, if you know your way around programming in general and got accustomed to Apple's frameworks/APIs.
Here are two examples. First, continue. Continue returns from the loop body and continues with the next iteration of the loop. For example, let's say we only want to do some computation with even numbers in an array: for number in [1,2,5,6,8,9] { if number % 2 == 1 { continue } // if the number is odd, we stop the execution of the loop body and continue with the next number doSomeComuptation(number) } This will call doSomeComputation with 2, 6 and 8, because, if the number is odd, continue will skip the rest of the loop body, and continue with the next iteration. Break, on the other hand, stops the loop completely. Let's say we want to find the first even number: for number in [1,3,5,8,2] { if number % 2 == 0 { println("Found: \(number)") break } } This will only print "Found: 8", but not "Found: 2", because break will cause the whole loop to stop once it's called (which is after 8 is found).
Thanks a lot! 
Just started out on the Swift Journey and these are pretty damn handy. Thanks.
Java use @override in order to annotate both interface implementations and actual overrides. I would say this is more confusing. That a keyword means two different things depending on situation is hardly new, and the "required" word exactly describes what is going on. Currently "required" is a keyword of very narrow usage. I still feel it is ideal. Your arguments don't make sense when we have things like "enum" can mean either unions or c style enum. This overloaded usage is so much smaller.
Hey, fair enough. Figured out how to use Git, hope this works: https://bitbucket.org/CallumNZ/tutorialcode/overview
Why should I use instead of bridging to Swift FMDB library ? FMDB wrapper https://github.com/ccgus/fmdb I mean, what's the point of making new wrapper ?
Swift has the concept of literal convertibles. I'll take integers as an example, but it applies to floats, arrays, etc. too. When a class is IntegerLiteralConvertible, it means that that type can be created from an integer literal, such as "20". Based on the type of the parameter of a method or of a variable, the corresponding class is used. So the literal "20" can mean a lot of things, it's converted to whatever you need based on context. You can implement your own literal convertibles too, so this isn't magic. This explains why self.testOfImplicitNSNumberConversion(20); and var my2NSNumber : NSNumber = 20; work. Something that is magic, however, is that this works: var myInt : Int = 20; var myNSNumber : NSNumber = myInt; An Int isn't a NSNumber, and as far as I know, there's no way to define "implicitly convertible" things in Swift. So Apple decided they need the magic here because of compatibility with ObjC. I also think it wouldn't hurt if the Int -&gt; NSNumber conversion would be explicit, but Apple decided to make it magically work. They also did this for arrays and dictionaries by the way; swift arrays and dictionaries are implicitly cast to NSArray and NSDictionary as well. 
Sorry for delay, your solution helped. Thanks!
Uff. So many problems. I don't intend this to be rude, please don't take it that way. So you have an App, that defines two view controllers with xibs. The App delegate sets the window's colour to green (?!). How would this app possibly display ViewController1 after launching? Xcode has no way to know which of the controllers you want to show. It also doesn't just magically create a ViewController, how could it? It's your job to create a ViewController and display it. This isn't too hard, it's done in the application didFinishLaunching method. func application(application: UIApplication!, didFinishLaunchingWithOptions launchOptions: NSDictionary!) -&gt; Bool { self.window = UIWindow(frame: UIScreen.mainScreen().bounds) // Create your controller. It's important to pass the nib name - Xcode doesn't know that the ViewController1 class uses a xib/nib by itself, you have to name it. Otherwise, nothing of the stuff you put in the xib will be displayed. let controller = ViewController1(nibName: "ViewController1", bundle: nil) // Set the window's root view controller to your controller so it actually gets displayed in the window. self.window?.rootViewController = controller self.window!.makeKeyAndVisible() return true } In ViewController1, goToVC2(), you have var vc2 = ViewController2() This will create a ViewController that uses ViewController2 as the class. But that's it. The view will be black and empty, because it isn't loaded from anywhere. Instead, do var vc2 = ViewController2(nibName: "ViewController2", bundle: nil) This loads the View from the ViewController2 xib, which is what you want.
Nah, he just does't create any of his controllers at all, he just wrote the classes but never initialises them.
Press ⌘3 to shrink the simulator a little.
You should be able to find a lot about Scala's generics and what problem the contra/covariance solves (e.g. https://blogs.atlassian.com/2013/01/covariance-and-contravariance-in-scala/) Since Swift doesn't have this **yet**, generics can be a bit annoying to work with.
So is this a hack or is my problem solved? It looks fine now!
http://www.raywenderlich.com/tutorials This website has a lot of useful stuff for swift. Also has other ios dev stuff and objective c.
Sweet! Thanks :)
It's 100% solved. You really didn't have a problem. Your computer screen just has fewer pixels than an iPad, so the iPad Simulator had to scroll up and down to display everything. Your app wasn't scrolling, the iPad simulator was.
It's great for primitives.. but if I had to choose between unwrapping a string optional or having a string = nil like objective-c, I feel like I want the latter.. idk
Apple's "Preview" app has some kind of signature functionality, but whether any of those APIs are exposed, not sure.
Yes programming languages aren't things that can be learned on intuition. To start with anything you must start at the docs.
Here's a [possible solution](http://stackoverflow.com/questions/24023029/error-opening-ios-simulator-with-ios-8-beta-version-unable-to-boot-the-ios-sim). Also, it can't hurt to [delete your Derived Data folder](http://stackoverflow.com/questions/25388444/xcode-6-beta-6-apple-mach-o-linker-error).
Thanks for the quick reply! Unfortunately it didn't help. The search continues!
There are gems in there, but I wouldn't be posting about anything you read in there. Since Swift is Pre-Release it's considered confidential information and you agree in two places not to disclose any of that (Developer Forums UA and your Paid Developer UA).
This isn't true since the last update to the developer agreement: See here: https://developer.apple.com/programs/terms/ios/standard/ios_program_standard_agreement_20140602.pdf &gt; Further, Apple agrees that You will not be bound by the foregoing confidentiality terms with regard to technical information about pre-release Apple Software and services disclosed by Apple at WWDC (Apple's Worldwide Developers Conference), except that You may not post screen shots, write public reviews, or redistribute any pre-release Apple Software or services. Basically, provided you keep your discussion to technical points (not screen shots of Apple software or reviews) then you can write anything you like about Apple's upcoming iOS 8, Yosemite, Xcode 6 and Swift since these were all disclosed at WWDC.
This is probably the only sane way to use NSNotificationCenter with blocks.
Try uninstalling with AppCleaner to make sure it and all of it's related files are fully removed 
Haven't tried emptying the trash, that hadn't even occurred to me. I will try using AppCleaner mentioned by /u/VampireCampfire and emptying the trash as well. Hopefully that will do the trick.
This is correct and we're allowed to talk about these things to the public. However, I tend to err on the side of caution when my Apple Developer Account may be on the line. There's no mention of the forums or the discussions that are happening there. That's the only difference I see. Apple is opening up their NDA so we can talk about the new stuff announced at WWDC, but I personally wouldn't be quoting anything in the forums since they are still private forums (unless that changed over the past few years).
Just check if the optional == nil var d: [String:[String:Int]]? = nil if (d?["x"]?["y"] == nil) { //do whatever you want to do if there wasn't a value there } 
Yea optional == nil is a way to do this. But Swift really does need an official JSON library that's more swift-like. Functors and Monads would also be nice...
If I were a user of your API, I'd wish that HarmonicModel was a protocol so I could inherit from my own classes and so I could be sure my class wasn't filled with instance variables of another framework's class. Also the parse method should instead just be an initializer, so that the implementing class is capable of initializing data with the json data. It'd look something like protocol HarmonicModel { init(json: JSONObject) } All the other fluff in that class should either be elsewhere or not at all. For example the _json property is useless. Literally only used when you assign it in the parse method (which might not even get called if they don't call super.parse()). The HarmonicModel.create method is unnecessary if in its place I could just do MyClass(json: obj). Also worth noting that this kind of thing is possible: func create&lt;T: HarmonicModel&gt;(json: JSONObject) { return T(json: json) } Yes, you can use generic types like concrete types if they have things like required initializers (which protocol enforced initializers are). Just stuff like that. I want my classes to subclass my classes. Whenever possible, don't force users to inherit your classes. (this is why I wish Swift had multiple inheritance...)
Hey, I'm trying to use your library and am getting the error: fatal error: can't unsafeBitCast between types of different sizes When running the following queries: let (resultSet, err) = SD.executeQuery("SELECT * FROM Addresses WHERE Name = ?", withArgs: [name]) and if let err = SD.executeChange("INSERT INTO Addresses (Name, Key) VALUES (?, ?)", withArgs: [name, keyHex]) { In both cases the args are Strings. Any pointers?
There's not really anything that's very well implemented in Swift, but you can make Model be a protocol with a required initializer for taking JSON. Ensures that any function that generically takes a Model can instantiate the generic class with JSON data. protocol Model { init(json: JSONType) // whatever you're using for the JSON type. } func makeModel&lt;T: Model&gt;(url: NSURL) -&gt; T { let json = ... // get JSON from the url return T(json: json) } class A: Model { ... } let obj: A = makeModel(someURL) As you can see, makeModel doesn't care what type the model is. Just where the JSON comes from.
Thanks for all the feedback! Really appreciate it as I know zero other Swift developers in real life right now :) I definitely agree with you on the multiple inheritance part as I wouldn't want this to get in the way of other developer's existing architecture. I will look into how I can move away from subclassing. Also, I honestly don't remember why I still have the _json in there. I think I may have created that while I was playing with lazy instantiation in the early days but it is definitely not needed anymore. I definitely learned a lot about Swift while making what I have so far and hopefully I will learn some more from integrating in your feedback. Thanks again for your time!
I am on the same path, though I'm getting back into development after a LONG time away from it. My advice is to pick ONE path - either start with Swift or start with Obj-C - and stick to that. If you start with Obj-C, learn that and the basics and the foundation before moving to Swift. Trying to do both can be confusing and frustrating. Regarding learning Swift first, realize that the language is still in BETA so things change. Learning how to do something in XCode 6 BETA 5 may change in XCode 6 BETA 6. Now, some would say that the "fun" in this is figuring out what's changed and how to correct it, but it can still be confusing. As for myself, I find it helpful to start with Obj-C and learn (or, in my case, re-learn) the basic foundation of the language and programming in general, then I'll take the time to dive into Swift once it's actually released, knowing full well that while things may still change, those changes shouldn't be as frequent. 
You could just make a simple class that wraps an array variable. Call it ReferenceArray&lt;T&gt; or something. Generally, though, the issue you are having indicates code smell to me as you seem to be violating the encapsulation of your controller. 
I agree with the code smell, hence the bonus question. Someone on stack replied with a similar solution to yours, since classes are passed by reference. It makes a lot of sense, and is also very undesirable after 30 seconds of thought. I'm going to play around with moving the `dataSource` to my `viewModel`, or even the individual `tableSection`'s and see if that improves anything. Thanks for the reply.
Unless I'm missing something, that's still two separate lines - one for the assignment and one for the check for nil. If you check for *not* nil, you can do both on the same line.
That Rob Napier article is killer. Thanks for sharing.
It's not two lines, you need to declare whatever variable you are checking somewhere. To use your code as the example: if json["width"].integer() == nil { ... perform error handling } 
It is two lines - that one's just checking the value, not the assignment For the positive test, you can do if let width=json["width"].integer() { Which is both assignment and value checking on the same line. Doing if let width=json["width"].integer() == nil { gives a compiler error 
If the value is nil, why do you need assignment? You know what the value is, it's nil.
Because I don't know if it's going to be nil or not. I want to assign the value to a variable and do error handling if it's nil.
Great articles. My head hurts now though.
That was exactly what I put in my original question. I'm assigning a bunch of variables, any one of which could fail. The only thing I want to do if the assignment works is go to the next assignment. I could create a whole bunch of nested if's, but that seems messy. I could also do a bunch of if let... calls with empty success blocks. But that seems messy as well. Just being able to do if ! let x=y or something similar would seem a lot tidier. But it doesn't work.
I don't really understand how your purposed if ! let x = y { // do stuff } is any different from if y == nil { // do stuff } In your purposed version, the value of 'x' would always be nil, and once you exit the if 'x' goes out of scope and is no longer accessible.
You should use optional chaining, as in my example. Look it up. And if you are checking for multiple sibling values, then you're going to nest if's, that's what you'll get to do so you may as well get over it and move on.
I think I'm understanding now why this is so confusing to you. First thing you need to do is go read the Swift book now. You're obviously missing key knowledge about how optionals can be used. You do not have to use optional binding to access the value. The next thing you need to do is ask a question where you pose what you are trying to accomplish with what you have available rather than a question where you assume you're on the right track half way through the solution and then ask how to finish that wrong solution. There are numerous ways to write code in Swift for every situation. If your problem is that you only want to do something if a handful of values exist in a dictionary then say that, don't ask how to use optional binding to look for missing values.
I'm on mobile, so I can't try this for myself, but IIRC drawRect() is called whenever something in the view changes. You should never call drawRect() directly, but it will be called if you call setNeedsDisplay() on the view in question. So you can try this: scrollView.documentView = myView scrollView.documentView.setNeedsDisplay() Hopefully it'll call drawRect() at an appropriate time.
So I've just read the docs about [setDocumentView](https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSClipView_Class/Reference/Reference.html#//apple_ref/occ/instm/NSClipView/setDocumentView:), and it seems to me that you're supposed to call setNeedsDisplay on your view on your own when you receive those notifications. I might be wrong though, as I'm not that experienced with Mac development, I'm more of an iOS expert or something.
I really don't think you want multiple inheritance. It's mostly annoying. You want protocols, maybe with default implementations, and class extensions. You'll get everything you want with those. I very much agree with your point to not force the users of your framework to subclass a certain class though. The solution just isn't multiple inheritance imho.
What problems arise from multiple inheritance? I think default methods are just barely shy of it anyway so why are those acceptable? Ultimately I just think that the ability to inherit from multiple places is wildly useful *if used appropriately*. And by that, I mean the same as using single inheritance appropriately, which isn't done as easily as you might think.
You da man 
It hasn't even been public for three months. Anything written outside of Apple will be written by newcomers to the language. Even Apple's documentation needs a lot of work. The language itself hasn't reached a stable release. Of course it's too new.
Apple released a book with it for free. https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11
What's the point of writing articles like these when Apple's material covers them? If you're going to learn Swift, at the very least you should read Apple's introduction to Swift rather than picking things up piecemeal from blog entries like this.
It seems to be a problem with Swift that will hopefully be resolved in a future beta. In the meantime, I've pushed out the fix. Thanks!
Yeah . Very few people have iPhones. Mobile is a fad
Simple minded blog.
Find out about prepare for segue
Xcode still loses half the editor's functionality when you do something the swift compiler doesn't like, and the swift compiler still crashes for weird things. It's so stupidly early for a course on it.
too new I'm affraid
Touching on Swift as part of a "language sampler" course in the same segment as Rust, F#, etc... would make some sense. Focusing on it specifically... eh, I'm skeptical of focusing on *any* language specifically as the point of a course rather than an implementation detail of teaching something else.
Cheap content to generate pageviews
Yeah. I'd got all that, and largely covered it in the original question My mistake was an idiotic one about the scope of x in the "if let x=y {". For some reason I hadn't clicked that the x was a new x, not the one already declared outside the scope.
The SI generic isn't needed if you want it to be identical to the type. Just use the Self type
That has little or nothing to do with CS as an academic discipline. UI/UX design and software development courses should change with mobile; CS should not.
How are you initializing your subclass? I'm pretty sure the problem is the UIButton being a system button as the auto-animation is enabled only on those particular buttons. As for setting the title without animation: [UIView setAnimationsEnabled:NO]; [self.customButton setTitle:@"This is a new title" forControlState:UIControlStateNormal]; [UIView setAnimationsEnabled:YES];
I'm not quite sure where you're going with the recursive Unit type. Not sure how you plan to break the recursion... This class should do your recursive unit type though, basically. It's just impossible to instantiate as the type has infinite length. Maybe you could clarify what you intend to do? public class Dimension { let value: Int init(value: Int) { self.value = value } } public class Unit&lt;D, SI where D: Dimension&gt; { let dimension: Dimension let unit: Unit&lt;D, SI&gt; init(dimension: Dimension, unit: Unit) { self.dimension = dimension self.unit = unit } } let x = Unit( dimension: Dimension(value: 5), unit: Unit( dimension: Dimension(value: 5), unit: Unit&lt;Dimension, Unit&lt;Dimension, /*... ?*/&gt;&gt;() ) ) As for the no inheritance with specific generic, I don't really see where this is necessary. People are not used to it (coming from Java/C#), but it works fine. For example (I assume you're trying to do something like this): public class Dimension { let value: Int init(value: Int) { self.value = value } } public class Unit&lt;D, T where D: Dimension&gt; { let dimension: Dimension let value: T init(dimension: Dimension, value: T) { self.dimension = dimension self.value = value } } public class Length: Dimension {} public class Meter&lt;D: Length, T: IntegerType&gt;: Unit&lt;D, T&gt; { init(_ value: T) { super.init(dimension: Length(value: 1), value: value) } } public class Millimeter&lt;D: Length, T: IntegerType&gt;: Unit&lt;D, T&gt; { init(_ value: T) { super.init(dimension: Length(value: 1000), value: value) } } let m = Meter(5) let mm = Millimeter(5) The usage of classes looks just like you had bound the type parameter to a specific type. But this is even better: Because the value is just constrained to IntegerType, you could use this class, for example, with signed integers, without needing to convert stuff or loosing type information. It seems very strange at first that subclasses of generic classes can only add constraints to type parameters, but I think thats sufficient in pretty much all cases. Especially since you don't need to explicitly specify the generic's types in general anyway.
You can pre-order books on Amazon but they are not due out until December. Apple has good documentation, and there are a few good on-line tutorials, but its still pretty thin. 
Send your findings to https://github.com/practicalswift/swift-compiler-crashes
and file a Radar with Apple so it will get fixed
http://designcode.io As a designer new to coding I would suggest anyone in a similar position to check out the above link. Really helped me when I was over whelmed with all the different aspects. Though it has only one chapter on swift, I still find it invaluable as it got me started. 
Dan Steinberg's _A Swift Kickstart_ - https://itunes.apple.com/us/book/a-swift-kickstart/id891801923?mt=11 . His "Developing iOS7 apps is the stanford CS 193P textbook for their free online course. Great guy, and it's a fun read. There's a community college in Madison WI that is doing a swift course. Apparently storybards are The Bomb - you can have mixtures of html and swift code, making for some really cool self-paced exercises. There's an open source tool that'll help make large storyboards. If you're interested I can ask my contacts there for the tooling. Also keep an eye on Erica Sadun's blog. http://ericasadun.com - I know she's very active in the Swift community, and has a lot of blog postings driven by folks over in #swift-lang on irc.freenode.net.
As an aside, [BitFountain has an iOS 8 course](http://bitfountain.io/course/complete-ios8/?couponCode=presale) for Swift that's on sale for $79. If it's anything like their iOS 7 course - the one I'm taking now - it should be very good. BTW - the sale ends on 8/31/2014 
It's really significantly better now in b6, assuming you don't use `lazy` or `extension`
Extensions are too useful to avoid, and lazy is just really nice...
maybe reinstall?
I'm not sure I see the place quite yet - as others have said, the language is still fairly new / unstable for use in a fundamentals course. Really, the most interesting option for a Swift class that I could imagine would have been over the past summer term. As an undergrad, I think I would have learned quite a lot from following through the last few months of breaking/evolving language, tools that fault in strange ways, a web environment where everyone else was still figuring it out, etc. By the time a course could be authorized/implemented in most depts, this will have largely passed however. Does anyone know of an instructor that took a path like this with a summer seminar? 
I wrote this post because I had had several team members asking me to explain these concepts. Naturally, you can get any of this information in the docs, but often it is helpful to have a condensed and easily digestible format to cut down on some of the noise in the docs. Obviously, people who would be reading through Apple's docs are not the intended audience for this post. Additionally, there is no incentives to generating page views on medium, there is no ad revenue. I was merely writing a post to share with my team and hoped others might benefit from it. If it saves someone the time it takes to read through and parse the docs, I believe it is helpful. 
I found a example in another source. It is most like you post but just in one line of code. **var name = NSString(data:NSFileHandle.fileHandleWithStandardInput().availableData, encoding:NSUTF8StringEncoding)** But only work with strings, I don't found yet how to hold intergers or float numbers. Do you know how ? Sorry , I am really noob . Thanks again
&gt; Naturally, you can get any of this information in the docs, but often it is helpful to have a condensed and easily digestible format to cut down on some of the noise in the docs. But the documentation isn't noisy at all. If anything, it's spartan. &gt; Obviously, people who would be reading through Apple's docs are not the intended audience for this post. To put it a bit more precisely: people who don't even know the basics of Swift, would like to know the basics, but are completely uninterested in what Apple have to say about the basics. I think anybody who would stand to learn something from reading this article has a *severe* problem with not reading the documentation. Articles like this act as a crutch to avoid fixing this problem. The best way of helping people like this is to stop enabling them. If they want to know the basics of Swift, point them to the documentation, instead of spoon-feeding them bits and pieces. 
This don't work here :) 
You may have figured this out already but in case anyone else is looking for same answer... So for examples sake lets pretend you want to pass the CustomerID from FirstViewController to SecondViewController. And CustomerID is being stored in a class level variable named _customerID. -- create a "CustomerID" property on the SecondViewController class -- in the related storyboard highlight the segue that transitions from the FirstViewController related form to the SecondViewController related form. -- ensuring that the segue is still highlighted, in the attributes inspector give a meaningful name for the segue's identifier property such as "SegueToSecondViewController" -- In FirstViewController.prepareForSegue method, place in below code if segue.identifier == "SegueToSecondViewController" { let secondVC = segue.destinationViewController as SecondViewController secondVC.CustomerID = _customerID } Be aware that if you are working with a master detail scenario you may need to do the following when performing the cast... let secondVC = (segue.destinationViewController as UINavigationViewController).topViewController as SecondViewController
The reason you don't merge the lines is it's cleaner if you intend to grab more then one line of data. Otherwise they do the same thing, yes. In Swift, use `.toInt()` or `.toFloat()` I believe to convert a string. In this case let intValue = inputString.toInt()
Mine still hurts from reading those a while ago... :)
You bet - I really enjoyed Rob's, too.
all of the advice given so far is good, I would just add to be sure and account for your own patience and tolerance level in dealing with obj-c. I know and understand obj-c but working with it frustrates the hell out of me simply because my brain has 14 years of C# hard-wired into it. If I had to do obj-c development I would use AppCode over XCode since it helps cut down on the obj-c typing and has more of a Visual Studio type feel to it. Again this boils down to your own preferences and you know you better than anyone. I'm sticking with Swift :-) Best of luck! EDIT: And Apple just set Sept 9th to announce, what is presumed, the iPhone 6 and the release date for iOS 8. Which is generally a couple weeks after the announcement. So its looking like Swift will come out of beta before end of September.
Try restarting the computer. Simple, I know, but it worked for me.
Have you checked to make sure that the simulator is not frozen? Pull up the Force Quit window and check to make sure that the simulator is not there. I've had this happen on occasion and it can't start a new simulator if the old one is frozen.
And all of the functional bits which are absent in C/C++ and Java (until java 8) 
Your first problem is that scant(3) is not accessible from swift at all. However, the more general vscanf(3) is available. So we will use that one. We need to call vscanf(3). And we want equivalent functionality to the following C usage: scant("%d", &amp;age). Given just that example, and from reading the man page we know that this function call takes a reference to a readonly string, and the address of a C int variable in which to write the scanned value. From this we know two important facts. Since we will be passing a pointer to a mutable value, we will need to use an UnsafeMutablePointer, and since we will need to call a C function which uses valist style argument parsing, we will need to construct a valist. In Swift, when I am exploring how to do something but do not know what types to use, I sometimes find it easiest to work backwards from the types of the end result. So, lets start at the end and work backwards. Here is the type of the function the want to run func vscanf(_: UnsafePointer&lt;Int8&gt;, _: CVaListPointer) -&gt; Int32 // we can see that we will need something of type CVaListPointer, searching for this type leads to getVaList func getVaList(args: [CVarArgType]) -&gt; CVaListPointer Looking for CVarArgType reveals that this is a protocol. The only Pointer type implementing it seems to be extension COpaquePointer : CVarArgType { func encode() -&gt; [Word] } Finally, we know that the result we passed as a C Vararg will be an NSMutablePointer to a C Integer. reversing our steps give a list of the types we need to traverse to call the function UnsafeMutablePointer&lt;CInt&gt; -&gt; COpaquerPointer -&gt; CVarArgType -&gt; Array&lt;CVarArgType&gt; -&gt; CVaListPointer Given that map to guide our way we can start working on the code itself. let numPointer = UnsafeMutablePointer&lt;CInt&gt;.alloc(1) // Create a pointer and allocate storage for 1 element . let valist = getVaList([COpaquePointer(numPointer)]) // We use an opaque wrapper to get a CVarArgType let err = scanf("%d", valist) iet age = numPointer.memory numPointer.dealloc(1) // Don't forget to clean up by calling dealloc with the same arg we used for the alloc This is crying out for a function to encapsulate the complexity and ensure proper memory management. A C flavored function might be done like this, and have POSIX calling convention. func scanInt(inout number: Int) -&gt; CInt { let tmpNumPointer = UnsafeMutablePointer&lt;CInt&gt;.alloc(1) let valist = getVaList([COpaquePointer(tmpNumPointer)]) let rtn = vscanf("%d", valist) if rtn &gt; 0 { number = Int(tmpNumPointer.memory) } tmpNumPointer.dealloc(1) return rtn } For a swift flavored function you could encapsulate the posix error handling and return an Optional. func scanInt() -&gt; Int? { let tmpNumPointer = UnsafeMutablePointer&lt;CInt&gt;.alloc(1) let valist = getVaList([COpaquePointer(tmpNumPointer)]) let rtn = vscanf("%d", valist) if rtn == -1 { // examine the errno global variable to get the error as defined in errno.h // if you want to handle or report the error return nil } let returnVal = Int(tmpNumPointer.memory) tmpNumPointer.dealloc(1) return returnVal } 
The diamond problem, for example. You're right, tough, that one might face similar problems with default implementations... I personally don't use subclassing all that frequently, I find that just using composition works very well in many cases.
Hmm... That is tricky...
I need a resource that not only teaches the language but how to put everything together. Now I understand how some things work, but at first it was like... "Okay great. Variables, Constants, Functions... How the fuck do I make an app with this shit?!" I wish there was one big resource to help me learn Swift all together AND how it's all relevant. So far I've just had to teach myself from many different resources around the web. Tutorials, Walk throughs, etc.
Do you have an overview of what advantages this will have over using XCode?
If you're working on JSON parsers, you may be interested in these articles that someone highlighted to me a couple of days ago * [Parsing JSON in Swift](http://chris.eidhof.nl/posts/json-parsing-in-swift.html) * [Functional Wish Fulfillment](http://robnapier.net/functional-wish-fulfillment) They both present different, and quite interesting, ways of tackling the problem. 
When I was new to Cocoa (coming from Delphi and VS.NET) I used to wish for a tool like this. I even considered making one. But now that I've come around to the Cocoa way of doing things, I find it much more elegant and wouldn't change a thing. 
Yes, that's exactly the goal.
Totally agree. And the framework provides wrappers over the Cocoa elements, so if you want or need to do something more advanced, you can do it.
That's awesome. I still don't get why Apple didn't make any JSON parsing API to begin with.
I love tutorials and walkthroughs, but that's shouldn't be part of a university curriculum. Granted, a lot of universities put their iOS courses online because it's helps their reputation. But a good curriculum should be a general purpose language so you can learn the meat of computer science, not how to use IB and UIKit. Swift would actually be a decent language for that (although the university wouldn't make money off the book sales), but it's Apple-only. 
Thanks for mentioning these. Admittedly, the language is still fresh with me so when I read these there was a lot of "syntax magic". I love the compactness
This is a prototype demonstrating how might be best to do this: https://github.com/jspahrsummers/Crust Written by one of the Mantle maintainers (now that Mantle is unusable in Swift).
Reading them made my head hurt, but it's worth persevering. They both do (at least form me) a great job of explaining a bunch of the "magic" I've seen and struggled with in other articles.
Brand new to reddit. Posted a link to a StackOverflow question before, to give it more attention (it worked!). Figured I should compensate by providing something useful in return (this snippet). If these aren't welcome, please let me know.
Not the poster of the parent, but I'd like something like class Person { let name: String // &lt;-- non-optional implies that this is mandatory and json parsing should fail if this is not present let favoriteNumber: Int? // &lt;-- optional implies that this is actually optional and does not need to be contained in json // ... let nickNames: [String]? } let jsonData = NSData(contentsOfURL: NSURL(string: url)) if let nickNames = Person.parseJson(data)?.nickNames { println("Some folks call me \(nickName[0])") } parseJson could be an extension method on AnyObject, this can obviously only work with certain classes and proper reflection support, and creates a Person if parsing succeeds. Returns nil, for example, if "name" is missing in the Json data. Optional properties are only set if available. nickNames is an optional, so we need to use let nickNames = ... Maybe some way of mapping properties would be required, if the Json properties are spelled differently than the model properties. This would be pretty close to the perfect Json API imho.
Whoops, I left out the "= 0" at the end of the "var age: Int" line. Without that, it will give a "variable age passed by reference before being initialised" error.
I think this is great. Both people like me coming from Objective-C and newcomers to Swift can benefit from helpful hints like this. Plus, being a huge advocate of TDD with iOS, I'm glad to see more and more people being enthusiastic about Unit Testing. Thanks for sharing!
Recursive generics is not supported indeed. Just consider building a linked list: class LinkedList&lt;T&gt; { var value: T? = nil var previous: LinkedList&lt;T&gt;? = nil var next: LinkedList&lt;T&gt;? = nil } var list = LinkedList&lt;Int&gt;() That code compiles fine, but the thread hangs at runtime when creating LinkedList (the stack frame stops at a pthread_cond_wait). As you can see, the way to break recursion is making optional values with `?`. As a note, you can not use the Self type in classes, only protocols. Does any of you have an alternative that works?
https://www.parse.com/plans Free plan is enough for me now, as my app is still in development. If it exceeds the free limit, I will gladly pay.
These assumptions aren't ones I would be making after my experiences with Java Collections. I'd blame the programmer, not the protocols
Methods in swift are kinda secretly prefixed by your module name so it should be safe to not prefix.
I agree. My comment was aimed at Andy saying the iBook is the best resource for Swift learning. For someone like me it isn't thought. The iBooks is aimed at people with previous programming experience.
What's going on here exactly? I've tried parsing it several times and my mind just won't latch on.
I'm not sure that applies to NSObject subclasess. Also, if it's secret or undocumented, then we can't really rely on it, can we?
I mean it's the way the language works. At this point, to stay binary compatible (which they said they would), this can never change. I'd say it's reliable. Also yea I'm not sure how it works with objc classes, or how Objective-C itself handles it.
Reflection like that kind of violates the principles of Swift's initializers. You shouldn't be able to create an instance without calling an initializer. IMO the best way to make this kind of thing is to have a protocol (let's call it JSONModel) that enforces an init(json:JSONObject). Then you can make functions that look like this. func makeModel&lt;M: JSONModel&gt;(url: NSURL) { let json = ... // get JSON from url return M(json: json) } let model: MyModel = makeModel(url) Your class has to define a JSON based initializer but it keeps the swiftitude of initializers and generics very pure. And being able to make functions that construct models of any type is really handy.
They have one in Foundation. Their top priority wasn't building a whole new one just to be nicer with swift when they've got an entire compiler to debug.
Not sure why you'd say that, though I'm not a Java programmer so maybe I'm misinterpreting something. From the documentation for the [Java List](http://docs.oracle.com/javase/7/docs/api/java/util/List.html) interface: &gt; E remove(int index) &gt; &gt; Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list. &gt; &gt; IndexOutOfBoundsException - if the index is out of range (index &lt; 0 || index &gt;= size()) Seems like the List interface remove is a zero-based integer offset from the start, and explicitly does guarantee the “remaining elements after removal shuffle down” behaviour. The difference being, Java has explicitly documented this behaviour is guaranteed, whereas the Swift std lib is yet to be documented to this level of detail (presumably because it's still rapidly evolving and this kind of thing could be changing day by day, so they don't want people relying on things that could change). Note this is about functional behaviour not performance – depending on the actual collection implementation, either using integer indices or frequent removal might perform abominably even if the behaviour were functionally correct. 
It's not an initialiser though, as it can fail. Class functions for those purposes seem fine to me. How would the initialiser that you propose deal with invalid Json? Edit: I guess you could get away with that initialiser, if you also have a checkJson method on the model classes. That way, you can verify the Json and only then pass it to the initialiser. In that case, it would be fine if the initialiser simply crashes the app if it receives invalid json, as there's an alternative way to check it's validity. I still think my "ideal" API is nicer to use though. Edit 2: I guess Apple actually uses the "crash when invalid data" approach now, too. Example: [UIImage's imageNamed](https://developer.apple.com/library/prerelease/iOS/documentation/UIKit/Reference/UIImage_Class/index.html#//apple_ref/occ/clm/UIImage/imageNamed:). In ObjC, this used to be a class method that returns nil when no image can be found at that path. The docs even explicitly specify this! The swift equivalent can't return nil obviously, so it has to crash when the image can't be found. I'm not sure that's a good idea though, especially with Json input. Someone could change some detail on the server, and your app starts to crash instead of just not displaying something...
We had this discussion here a bit ago. Swift has all necessary features, but to use them, you need to declare all reflectable properties as dynamic. See my comment here: http://www.reddit.com/r/swift/comments/2e8mtu/ive_been_doing_ios_development_since_the_sdk_was/cjxn6zh (there is other relevant stuff in the comments). My "ideal" API might not work for other reasons though, because the parseJson method need a ridiculous amount of magic (eg. construct an object while not knowing the constructors (could be fixed by requiring one, but not very nicely), setting variables declared as immutable.) Edit: I guess you're right in so far as it's not "easy" to extract that information, but it is available.
I don't see a reasonable difference between using an initializer and a class method. You can fail in an initializer just fine with assert. Unless you mean you want the class method to be able to return an NSError or something. In which case yea that's the better design, and not hard to implement. Your "ideal" API is bad swiftitude though. Initializing with any chance of an initializer not being called is a bad plan.
Yeah, but if they built a whole new language from scratch and a lot of developers use JSON you'd think they'd do something better for JSON parsing. But the compiler might be the bigger issue atm. :)
With iOS 8, apple released [CloudKit](https://developer.apple.com/icloud/documentation/cloudkit-storage/), which makes what you're trying to do incredibly easy!
I saw the wwdc talk and liked what I saw although the iOS8 exclusivity bothers me. Also this would require a user account system just like parse if I am not mistaken. Thanks for the helpful response.
Well, Swift is only compatible with &gt;= iOS 7, and iOS users generally update really quickly. I don't think you have to worry about backwards compatibility.
But all of those iPhone 4 users stuck on iOS 7! : ) This is understandable, I just wish there was an alternative that fit more specifically with what I am looking for.
This would be nice.
I wish we had an optional type for failables. Where nil can be associated with an error, and we get all the nice syntax of optionals.
I haven't seen one with storyboard. It isn't too hard to do it programmatically. It's late and Saturday and I'm not at home but here's the gist one method, certainly not the best method, to make it happen. Basically; You have two views. The mainView and the sideView. The main view has a button. When pressed, the sideView slides in. The sideView has a button, when pressed the sideView slides away. So, setup your sideView. Set its initial frame to be offscreen. When the showSideView button is pressed, add the sideView to to the mainViews subviews, and animate it in to an onscreen frame. When the hideSideView button is pressed, animate the sideView out, and when the animation completes remove it from the sub views. Oh yeah, these are called hamburger menus and apple and lots of others hate them and specifically recommend not to use them. But whatever, if you get it working its a good exercise in logic and animations. 
Yeah. I would love to see a tutorial about " CloudKit " :/ 
Yeah. I would love to see a tutorial about " CloudKit " :/
I would suggest posting in larger programming subs like /r/learnprogramming or /r/programming itself... just for visibility.
Hmm... I'll do that right now!
Thank you for your encouragememt :D
If you have a twitter account, please mention me(@scientist_sh) and I'll tell you the application procedure!
I'm 19 and a co-founder with 4 other people, we're just about to launch our product and have some very promising looking investment opportunities. I've got too much on to really get involved with anything you're doing (and I'm &gt;18) but if you want any mentoring or advice from someone who's probably just been through it then feel free to get in touch with me. I'm the senior developer (alongside another dev) and the only sysadmin, so I can help with technical advice in that area or general stuff with running a company, especially at a young age. Best of luck with everything and just have fun with it! (and hopefully you'll make some cash while you do so)
This is an issue of style and readability, not functionality. I see your point, but have a hard time accepting it as valid justification for such poor style and decreased readability. Alas, this is subjective, and as long as I am not reading your code, do as you will.
Does it work with other projects?
Thanks to the folks that gave me some feedback. I decided to go with Parse + CoreData although I will definitely consider Cloudkit for the next project (great price plan). Realm also looks handy, so I will play with that!
it's "iOS Simulator"
WOW. Thank you so much!
Maybe you're not waiting long enough. Mine takes forever.
Sounds like the compile isn't finishing; may be an Xcode issue rather than a simulator issue. File a bug report: http://bugreport.apple.com 
no its the same thing for every project 
-__-
I tried that it still doesnt work...
It's bad, because, you have added complexity in the form of a new non-native bit of syntax load with no actual value whatsoever. You save nothing but a cursor adjustment due to your lack of forethought. You even require one additional character (as if such a thing mattered) in the form of the period. These sorts of things are tempting, but, in the long run they only offer additional cognitive load and serve to further bloat your code base's technical debt, even if only a little bit at a time.
And what if the element in myNSSetObject at some point is not type compatible with mySpecificObject? Maybe YOU just want to skip it, but, that's not a generally applicable decision. Ultimately, you should probably be casting with optional syntax and end up with something like: for (myAnyObject in myNSSetObject) { if let specificObj = myAnyObject as? mySpecificClass { specificObj.foo() } } You can apply this same concept with filter/map if you're trying to do a conversion of sorts, but, in the end, you'll be making the same sorts of calls. 
It was here from the first beta with funny comment: /// Haskell's fmap, which was mis-named
Because an Array is not a Set. 1. An array is ordered, a set is not 2. A set either contains or does not contain an object, but an array can contain objects multiple times 3. Arrays have random access and are optimised for that and iterating quickly, while sets are designed to test membership of an object quickly (O(1) while this takes O(n) in an array). Removing an element is also faster on a set than on an array (O(1) vs. O(n)). All in all, sets are conceptually very different from arrays. I'm quite unhappy that the standard library does not contain a set class. Array, dictionary and set are quite fundamental and important data structures, and I like to use them all (sets are appropriate quite frequently). I use this class (with some modifications) when I need a Set, it works quite well in general: https://gist.github.com/andelf/156ae406790a8de4fa3d Note that you need to fix the == operator... You could add your own constructor to that class that uses a NSSet for initialisation; then you could do for yourSpecificObject in HashSet&lt;YourSpecificType&gt;(yourNSSet) { ... } Edit: Usage looks like this: let set = NSMutableSet() set.addObject(1) set.addObject(2) set.addObject(4) for number in HashSet&lt;Int&gt;(set) { // &lt;- number has type Int here println("Number + 1: \(number + 1)") } // prints "Number + 1: " followed by 2,3,5 in some order The constructor looks like this: init(_ nsset: NSSet) { for value in nsset { _map[value as T] = () } } This crashes when the NSSet contains a value with invalid type, which is what you want in most cases. Edit 2: Thanks to type inference, you can write the loop like this, too (kinda like /u/airspeedswift's idea): for number: Int in HashSet(set) { println("Number + 2: \(number + 2)") }
I don't know, I was writing flatMap functions lol.
If you want a quick ad-hoc solution, you can do this: for yourSpecificObject in yourNSSetObject.allObjects as [YourSpecificType] { yourSpecificObject.foo() } Also crashes if the set contains elements that are not of YourSpecificType. I'd consider adding some Set class to your project though, like in my other comment.
I kinda think you've set a background colour for the "angular" views. Make sure the background colour is set to the clear colour. You might also have added a border to the view's layer, but I'm pretty sure you'd have noticed that, since that's only possible by writing the code explicitly. Edit: after looking at the buttons, it can't really be the background colour. Wut. Does it look like this in the iPhone Simulator, too?
In the storyboard, hold the control key, click and drag from the source view controller to the destination view controller. When presented with the option to select the segue type, select modal. BTW, you said that there wasn't anything on YouTube, but I typed in "iOS Modal Segue" and the first video was a tutorial on modal segues. If you're struggling with Swift, I suggest you start with Objective-C, then transition to Swift. The hardest part of learning iOS programming is not the language, it's the framework. There's a lot more literature in Objective-C at the moment. Transitioning to Swift is simply a change in syntax. Everything else: segueing, target-action, view controller lifecycle, delegate protocols, storyboarding, ..., is the same.
Control drag from the ui element you want to trigger the action to the view controller you want to segue to. Options for different types of segues should appear. Hope this helps!
Sorry, I already had the modal segue. It's the closing of the view controller back to the original view part that I am having trouble with.
If you want to dismiss the modal view controller programatically, use this method. [self dismissViewControllerAnimated:YES completion:nil]; If you want to do it from the IB using unwind segues, I suggest check out this SO [post](http://stackoverflow.com/a/15839298/1077789).
Though that'll make a full copy of the set as an array, which is a bit extreme for the sake of avoiding writing a separate line for the as...
Thank you so much
I would recommend [design+code](https://designcode.io) as a source of lots design and basic and yet great for beginners Swift coding. Also, the website has a [resources](https://designcode.io/learn) section that you can find various sources for each category that related to iOS development.
That is true. There should just be a proper default set class, I have no idea why they omitted that...
I'm learning swift with these tutorials: * http://www.raywenderlich.com/tutorials * http://www.learnswift.io * https://www.youtube.com/playlist?list=PL_4rJ_acBNMHa_RGZigG2nQI3aL1kTa4r * http://airspeedvelocity.net
I know its in early alpha but it would be great to see a quick youtube video of the IDE in action just to get a better sense of what the IDE offers over XCode.
I see now... I will need to convert NSSet to array (in order to sort it with descriptor), so I will need to see what to do. 
You could also use the undocumented __conversion function allowing you to use myInt alone: extension Int { func __conversion() -&gt; Double { return Double(self) } More here: http://kmikael.com/2014/06/22/swift-type-conversions/ 
soon...
Not a tutorial, but the apple developer documentation really helped me quite a bit. You can read that [here](https://developer.apple.com/library/prerelease/ios/documentation/General/Conceptual/iCloudDesignGuide/DesigningforCloudKit/DesigningforCloudKit.html)
Once iOS8 is released to the general public.
Initializers no being able to return nil is actually a "known issue": &gt; • Swift does not support object initializers that fail by returning null. &gt; Workaround: If there is a factory method, use it instead. If initialisers can return nil at some point, I'd opt for using an initialiser, too, of course.
This is fun: &gt; The relational operator == may not work on enum values if the enum is declared in another &gt; file. (18073705) &gt; Workaround: Use !(x != .Value) instead of (x == .Value).
How did you download xcode before? The link is just 1 click from the developer home page.
you should re-download the whole thing ! 
Seems a lot like [Ruby's "tap" method](http://seejohncode.com/2012/01/02/ruby-tap-that/). I'd rather see this implemented as an Extension or something generic rather than as a custom operator.
From the release notes: &gt; code like the following should now work: &gt; class BinaryTree&lt;T&gt; { init(value: T) { self.value = value } var value: T var left: BinaryTree&lt;T&gt;? var right: BinaryTree&lt;T&gt;? } _Finally!_
Something that seems contrary, but isn't: If you've never written a line of code, and take the right class, you can build and release an iPhone game on the store in just a few months. This is a meaningful accomplishment. But, don't fool yourself into believing that you've now accomplished the feat of learning how to program.
I saw that too, could you explain what's happening here? I understand that &lt;T&gt; is a placeholder for any-type, but confused why it's called after the class name. In fact, I didn't think you could assign a class a type? Shouldn't the &lt;T&gt; be after the init, or a method within the class? What's the significance of the optionals *left* and *right* of the same class type?
&gt; I saw that too, could you explain what's happening here? I understand that &lt;T&gt; is a placeholder for any-type, but confused why it's called after the class name. In fact, I didn't think you could assign a class a type? Shouldn't the &lt;T&gt; be after the init, or a method within the class? What's the significance of the optionals left and right of the same class type? It's a [generic class](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html). Generics allow you to define type-safe classes without compromising type safety, performance, or productivity. You implement the server only once as a generic server, while at the same time you can declare and use it with any type. Think of it as you can have a binary tree with integer values, a binary tree with string values, etc. and you don't need to create a new binary tree type class with each type. So no BinaryTreeString and BinaryTreeInt
And then there will still be occasional fixes of small bugs. The language will be pretty much set though.
Not sure. I think it depends on learning style. Also, most of those online resources didn't exist in their current forms when I was learning 10-15 years ago, so I don't really know what's out there. Basically you're looking for something that's compatible with your learning style, and made by someone who actually knows what they're teaching about. For me, that's finding an open source project written using whatever it is, and messing with it while reading the docs and a few books (Aaron Hillegass and Steve Kochan have both written good ones for Objective-C + Cocoa programming, I'm less familiar with Python). For other people it could be videos, or classes.
http://i.imgur.com/PfgiLdx.png
Search my post "A collection of swift walkthroughs"
Is this a good course for beginners to programming as well? I know very basic Xcode 6 and Swift from tutorials and walk throughs I have been following. Thanks EDIT: Nvm. Found this in the FAQ "What is the target audience? Complete beginners (no coding experience necessary) and programmers coming from other language/frameworks." Awesome!
haha same here. Installed beta 6 only yesterday. 
I see a lot of changes on UITableView-related methods such as override func tableView(tableView: UITableView!, numberOfRowsInSection section: Int) -&gt; Int to override func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int UITableViewCell for textLabel and detailTextLabel are now UILabel?
Post the objc code, and we can probably help you translate it to swift.
There's a session on good and bad UI practices from WWDC, you can watch it from the iOS WWDC app if you want good ideas on UI. They specifically call out the hamburger menu as being lazy design, and more often than not just a place to dump too much stuff that's not actually helping the customer.
And even more fun if x is an optional - !(x! != .Value)...
I'm just hoping that they've fixed most of the "SourceKit has crashed" issues. I've got one project that literally has a SourceKit crash every single time I typed a character. I've opened that one up in Beta 7 and it now seems to be OK, so that's a promising sign.
This is an example i found in obj-c which is probably usable for all kinds of transitions (and this one includes the tabBarController). - (IBAction)test:(id)sender { // switch back int controllerIndex = 1; UITabBarController *tabBarController = self.tabBarController; UIView * fromView = tabBarController.selectedViewController.view; UIView * toView = [[tabBarController.viewControllers objectAtIndex:controllerIndex] view]; // Transition using a page curl. [UIView transitionFromView:fromView toView:toView duration:0.5 options:(controllerIndex &gt; tabBarController.selectedIndex ? UIViewAnimationOptionTransitionCurlUp : UIViewAnimationOptionTransitionCurlDown) completion:^(BOOL finished) { if (finished) { tabBarController.selectedIndex = controllerIndex; } }]; }
Here is simple code I tried to do. It says it cannot convert to T. I have specifically said that T is type of Command. class func fromSFSObject &lt;T : Command&gt; (o : SFSObject) -&gt; T { let commandType : String = o.getUtfString("command") switch commandType { case "CommandError": return CommandError() case "CommandVital": return CommandVital() case "CommandPlaySkill": return CommandPlaySkill() case "CommandPlayerWon": return CommandPlayerWon() default: println("Unknown command being parsed!" + commandType) return Command() } }
_apprentice_ thank you for the advice! I am with you, I am going to stick with Swift and keep plugging along. I found a program on Udemy which is helps set up Xcode and provides a nice introduction to the language: https://www.udemy.com/hands-on-swift-language-visual-way-with-light-programming-ios8/?utm_source=adwords&amp;utm_medium=udemyads&amp;utm_campaign=Swift-Search-SN&amp;utm_term=learn%20swift&amp;matchtype=p&amp;utm_content=Learn&amp;gclid=CjwKEAjw-JqgBRCAyqjoic27nlQSJABBTpFE_BDnMD_RSIPMRBpbfLJ48t10HxZkgdjm_bOQ_8UUrBoChNjw_wcB Lets keep in touch and keep motivating each other. I have a start up and have gone through three developers already. I decided enough is enough and its best if I can learn to code myself, also who is more motivated to build the technology than me! Good luck and keep at it.
Thank you Catfish_man you have been super helpful! I appreciate you sharing your knowledge/experience! 
I thought it was funny, same thing happened to me. 
There's a handy delegate method for adding custom animation when switching tabs. Check out the this method, for example, in UITabBarControllerDelegate. I haven't tried it in Swift, but I've used it in objective-C: -tabBarController:animationControllerForTransitionFromViewController:toViewController: Declaration SWIFT optional func tabBarController(_ tabBarController: UITabBarController, animationControllerForTransitionFromViewController fromVC: UIViewController, toViewController toVC: UIViewController) -&gt; UIViewControllerAnimatedTransitioning? OBJECTIVE-C - (id&lt;UIViewControllerAnimatedTransitioning&gt;)tabBarController:(UITabBarController *)tabBarController animationControllerForTransitionFromViewController:(UIViewController *)fromVC toViewController:(UIViewController *)toVC
1/ You can create several instenses of your node. Either dynamically using an Array, or by hard coding the nodes. 2/You need to create a start screen SKView (Different from your gamescene view), then manage to switch from one to the other. Check Skip Wilson's youtube chanel (can't link here, youtube is blocked at work !) there's a pretty neat tutorial for a simple game (the first game tutorial) that could help you solve both issues if i remember correctly. 
thanks, worked! It was the thing with Locations page inside Preferences. (more learned of Xcode now with this betas than ever before)
&gt; if I submit some work to Grand Central Dispatch, is it guaranteed to see the latest version of all the data the block captures? You submit some closure, the closure sees exactly what it captures when it's created. You could get into threading issues by capturing a reference to an object that is modified from multiple threads, but you really shouldn't do that (ie. modify an object from multiple threads). I'm not sure what you mean with "last version of all the data". Don't use objects from multiple threads at the same time, and that is a non-issue. If it's unclear how that's supposed to work, imagine multiple download threads, that add data to some single "data" object that combines all the data from the "downloaders". The downloaders don't add the data from their own thread (then the data object would have to be able to handle stuff from multiple threads), instead they dispatch a closure on the data object's thread, and add the data there. So all the data that is added is always added from the same thread. No threading issues, even though you have multiple downloading threads. &gt; Say I have a view with some controls that manipulate instance variables and I want to just read (not write, so no locks) these values from another thread, am I always guaranteed to get the latest data? I remember volatile being used for these cases in Java. You dispatch a closure on that other thread that reads the variables, and then dispatch a second closure on the main queue that contains the data you wanted to read. The problem with this is, that you can't get a result while the "other thread" is working, because the closure you dispatched on it won't be executed. But that's necessary in a way, because it's very possible that it's unsafe to read data while some operation is working. If you really want to read the unsafe way, I guess you can just read stuff from the main thread, but it doesn't seem like a good idea. Because you're coming from java, this approach may seem very weird, because Java uses blocking stuff all over the place, while that's very unusual in Obj-C/Swift. For example, downloading a file might be one long blocking operation in Java that occupies a whole thread. In swift, a queue might be used, and the queue is only active when there's actual new data to process. That means that it's possible to get the progress of a download, for example, by dispatching a closure to the downloading queue, that reads the progress (which is safe since it's on the same thread and no additional data processing can happen at the same time), and then dispatches another closure back on the main queue that updates the UI. In fact, because so many operations are non-blocking, it is often not even necessary to use a separate queue, which makes everything easier (this might be applicable for downloading data if the downloaded data is small and can be processed fast enough that there's no hiccup in the UI responsiveness). The whole approach to concurrency and threading is very different in Java and Swift, so it might take some time to get used to. In Swift, the one central synchronisation tool are dispatch queues that you dispatch closures to. Pretty much all of the other concurrency tools Java offers are missing in Swift (or quite hard to access), and there's not really a concept of a thread-safe class, because you're not supposed to rely on that. That would be like opening pandora's box. 
In the iOS Simulator everything looks " normal " ( round ) 
Yeah, it's the same thing... the reference itself is ok, but you can't use properties of x safely if it's used from multiple threads. I'm afraid there's not really any Swift-specific documentation on concurrency that I know of (yet). What I wrote is based on knowledge about GCD and ObjC concurrency features, and a few quick searches. You might be interested in reading this, it still applies in Swift of course: https://developer.apple.com/library/ios/documentation/general/conceptual/concurrencyprogrammingguide/Introduction/Introduction.html If you have some specific problem you're trying to solve, maybe I can give some tips.
Yeah, i know that. But i still need a tutorial :/ 
You're going to be hard pressed to find a tutorial around CloudKit as it is pretty new. Take this website for example: [cloudkittutorials](http://cloudkittutorials.com/) I just used the documentation to create a CloudKit app. What is your experience level? I would be willing to help you figure out some stuff, but I am not going to type up an entire tutorial, as it's not my job ;)
The website has no tutorials, and was meant to show you that it will be tough to find tutorials at this stage. Have you started trying to use CloudKit in an app?
Does it work with enums yet? Can we do enum Result&lt;T&gt; { case .Ok(T) case .Fail(NSError) } Because this is necessary
You're welcome. I'm glad to help. I find passing along knowledge and becoming involved in the Swift community helps to learn and stay motivated. They also say teaching something helps you learn it even more. Thanks for the great link. Great timing. I was just about to find something else to try. Check out this iOS course as well. Seems like a good idea. http://www.reddit.com/r/swift/comments/2fabxl/the_complete_ios_8_course_with_swift_79_more_info/ Yes, let's keep in touch. I am in the Silicon Valley. Where are you located? Cool. I had a start up too and I'm in the same boat. Everyone sort of went their own way after my CEO turned out to be a neglomaniac. (Also, are you sure that's a good course? Seems to have bad reviews!)
We're one step closer though! That's good.
Oh, never mind. The signature for application:openURL:sourceApplication:annotation: changed with this release, so mine wasn't being called and I wasn't getting any sort of notice from the compiler.
I've seen longer waiting times on older Mac devices, anywhere between 2 - 10 minutes. Just wait it out.
Actually, the Result enum didn't make a syntax error in playground, but it won't build in a project, and a playground with that enum in it won't run. Still unimplemented IR -_-
if your main motivation is to make apps: start with swift if your main motivation is to learn programming: start with python (though while learning python it is worth using the swift playground to get concepts down)
http://furbo.org/2014/09/03/xcode-vs-gatekeeper/
like catfish_man said, osx comes with python. you don't need to download or set up any frameworks. (osx also comes with ruby)
Yeah, but if he wants to make apps he might as well learn Xcode. Besides, you open up Xcode and boom you're ready to make apps. Ruby and Python there's a bunch of other steps and stuff. Like different frameworks you have to choose. As a new programmer I don't want to deal with that kind of stuff.
I can't find any documentation describing this, but it kinda makes sense that Swift calls the default superclass initialiser if it's the only superclass initialiser and not called explicitly in the subclass initialiser. It's the only valid line of code anyway, so why force the programmer to write it?
Takes a while.... Let it work
there normally aren't any other steps. you write: print "hello world" That's it. Your first "app" 
Your in the heart of the action! I am in Princeton, New Jersey. My last developer was a princeton grad but a real air head. I paid $10,000 his work and it needs a few bugs worked out and I need to add several functions. I have been trying to find a developer on elance and it has been a nightmare. In regards to the course, I didnt pay for it. I just zoomed in and I watch the previews. It has been helpful thus far but I havent gotten to the actual coding screens yet. I found other classes but there expensive ($500/month). Keep me posted on progress. 
I haven't actually used it but I recently listened to a podcast where Realm was discussed in depth and it was pretty interesting. http://carpeaqua.com/cocoaradio/14-alexander-stigsen-realm/
Yeah, I want to have nice things. (Nice things that were around in functional programming languages forty years ago!)
Justin's CocoaRadio podcast is great. Theres a few other good episodes: MVVM with Danny Greg (of github); an episode about syncing with Brent Simmons; and an episode with one of the guys from Parse.
... and __conversion() is killed off in beta 7. What timing.
40 years ago is before my time. 30 years ago...yeah, most of this existed and was even covered in SICP...but there were reasons why Scheme or Standard ML or Haskell or [insert language name here] did not sweep the field. My hope now comes from having a few hundred thousand programmers actually getting far enough along with Swift or other more modern languages (and making money along the way) actually tips the balance in favor of the nicer things.
Well, I overreached a little. It's just shy of 40 years. And my knowledge of early FP history is not from personal experience, just reading stuff on the Internet. FWIW, [Hope](https://en.wikipedia.org/wiki/Hope_\(programming_language\)), (original paper [here](http://homepages.inf.ed.ac.uk/dts/pub/hope.pdf)) was an influential and familiar looking language from the late 1970s, based on NPL which was earlier in the 1970s. This Hope code should look pretty familiar dec fact : num -&gt; num; --- fact 0 &lt;= 1; --- fact n &lt;= n*fact(n-1); and data numtree == empty ++ tip (num) ++ node (numtree # numtree) We had lambda-calculus-based languages with type inference, parametric polymorphism, algebraic data types and pattern matching in the 1970s. Laziness appeared in the mid 1970s, and was adopted by [SASL](https://en.wikipedia.org/wiki/SASL_\(programming_language\)) in 1976. [NPL](https://en.wikipedia.org/wiki/NPL_programming_language) (1977) provided list comprehensions. By 1981 we had [KRC](https://en.wikipedia.org/wiki/Kent_Recursive_Calculator) collected a lot of these ideas together, and added guards. See also [_A History of Haskell: Being Lazy with Class_](http://research.microsoft.com/en-us/um/people/simonpj/papers/history-of-haskell/history.pdf). 
Yes, I'm using it. Going into production in a month or so. I like the simple api and model definition in code.
It's a multi-paradigm language, so all of the above.
Here's the way I see it: Object oriented programming is basically a set of approaches for reducing coupling in imperative languages: late binding, attaching behavior that operates on state to the state, opaque types. Object oriented *languages* are just imperative languages with conveniences for doing object oriented programming (Apple's CoreFoundation is an example of doing OO without language affordances). Functional programming, on the other hand, is more about what it doesn't have than what it does. The primary factor (to my mind) is referential transparency, which is the property that any operation can be replaced with its result. This denies mutability entirely, since if you have mutable state, then you can pass the same mutable thing to the same function twice and get different results. The rest of functional programming (closures, recursion, etc...) are all natural consequences of requiring referential transparency. It's very difficult to program without either mutability or functional-language niceties. Looking at Swift it has: * mutable state, and language constructs for operating on it (loops, for example) * affordances for Object Oriented programming (built-in dynamic dispatch, inheritance, object types) * affordances for Functional programming (immutable types, closures, stdlib has useful higher order functions like map, reduce, etc...) it does *not* have, however: * Recursively constructed types (lists, trees) in the stdlib, instead it has arrays and dictionaries * Tail-call optimization So I think it'd be most accurate to describe Swift as an object oriented imperative language with some tools for programming functionally. It would be difficult to use it as a pure functional language at this point, due to the lack of tail-call optimization, and lack of stdlib and compiler support for recursive structures. (edit: yes, I realize I'm throwing Common Lisp style OO under the bus here. I don't know it well enough to comment on)
well said sir.
Did you set the controller as delegate to tableView?
Swift does have TCO as pointed out in this [SO post](http://stackoverflow.com/questions/24023580/does-swift-implement-tail-call-optimization-and-in-mutual-recursion-case). *edit: it doesn't always perform TCO however*
Many APIs have been Swiftified a bit better. You have to take out all the ! from the protocol method parameters. I think. Easiest way, delete and re-enter the method names and let Autocomplete give you them correctly.
Interesting, I'll have to check it out. The more I look into these menus I'm noticing they are actually pretty common; there must be something good about them. There's even one in the reddit app.
This seems strange: class UserViewModel&lt;U: User&gt;: ObjectViewModel&lt;User&gt; Shouldn't this be class UserViewModel&lt;U: User&gt;: ObjectViewModel&lt;U&gt; Your version is very strange. It says that UserViewModel has a type variable U of type user that is never used, and subclasses ObjectViewModel with it's type parameter instantiated with User. I don't really think this should compile, so it's quite the generics fail. If this was allowed, there would really be no point at all in requiring subclasses of generic classes to be generic. And still, this actually works, at least in Playgrounds. Argh! ... So, here's how you do "non-generic" subclasses of generic classes: class GenericClass&lt;T&gt; { let x: T init(x: T) { self.x = x } } class Subclass&lt;_UNUSED_: NSObject&gt; : GenericClass&lt;String&gt; { init(s: String) { super.init(x: s) } } let obj = Subclass(s: "ABC") _UNUSED_ is to NSObject so you never have to specify a type for it, but it could be constrained to any specific type. Obviously, you should never use it. I am horrified that this is possible, get your shit together Apple.
I'm glad I wasn't the only one who felt crazy for having to implement a generic subclass in a non-generic way. I'll some of what you suggested.
Your initial suggestion of utilizing the generic type U for my super class worked. THANK YOU!
I will be using it next time I have a project calling for CoreData.
Surprising that it worked in beta 6
Ah, yes, that's more precise. What I was trying to say was that you can't *rely* on TCO for correctness in Swift, it's just an optimization.
They are common because they are lazy design, and no one wants to hire designers or do the work. Look at Apple's apps, none of them have it. Apple spends more money on design than engineering.
Haha that's what they say! Wow, that's crazy. Hopefully you didn't pay him up front! There's also odesk. Check out the link I gave you. It's usually $500 but it's on sale for like 80$ right now.
That app won't work on iPhone
Of course everyone has heard the buzz, its been out since June, there are a ton of resources on the web already...sounds like you are late to the party....
This post confuses me.
Thanks man! I signed up, I couldnt say no becuase of the discount. THANK YOU!!! How many hours a day are you spending on this? I am averaging about four. Most people say it takes a year to get conformable but I wonder how many hours a day (average) that takes... Also, if you havent found this yet check out the code lady on you tube.. she rocks https://www.youtube.com/user/thecodelady 
How are you handling keeping realm sync'd up with Parse? 
I thought he meant "ActiveRecord"
Okay, I tried getting this to work but I failed. The problem is: I made a class extending UITabBarController and assigned it to my TabBarController. Then I added the 'animationControllerForTransitionFromViewController ' function. Also made a custom animation class extending UIViewControllerAnimatedTransitioning which is returned by the animation function. But when I run this, nothing happens. I checked if the animation function is even reached when switching tabs - but this is not the case. So i'm clearly adding this in the wrong location. Search for tutorials/examples/forum posts etc (there all in obj-c) but they do (almost all) the same as I did. Sometimes tho they only create a delegate class and add this somehow to the UITabBarontroller - but I can't wrap my mind around this in Swift, but i wonder if this will change anything, since I pointed the whole UITabBarController already to a class extending the delegate. Maybe you have any tips or pointers? 
Hey folks! It's still very early in the process, but I'm putting together a series of beginner-friendly books on Swift + iOS Development and would love to find some beginners to take under my wing to help make the best books possible. These books will not be computer science + incredibly technical until far later in the process. They are very much practical, focused, and tailored to the builders out there (designers, entrepreneurs, students, new coders). If you're interested in helping out toss me a PM with your programming background (zero, some, intermediate) &amp; what you are expecting to build with this newly discovered knowledge!
Thanks for pointing that out dpjames! I've updated the tutorial to include this.
Not easily. You kind of have to hack it by using two operators. You can't just make a plain ternary operator. If we wanted a ternary conditional operator like the one built in (condition ? a : b), we could do something like this infix operator &lt;&lt;&lt;&lt; { // let's use this as our ? because sure precedence 100 associativity right } infix operator &gt;&gt;&gt;&gt; { // and this as our : because sure precedence 110 } func &lt;&lt;&lt;&lt; &lt;T&gt;(cond: Bool, conditionals: Bool-&gt;T) -&gt; T { return conditionals(cond) } func &gt;&gt;&gt;&gt; &lt;T&gt;(lhs: @autoclosure ()-&gt;T, rhs: @autoclosure()-&gt;T)(cond: Bool) -&gt; T { if cond { return lhs() } else { return rhs() } } let a = false &lt;&lt;&lt;&lt; 3 &gt;&gt;&gt;&gt; 2 Not sure what the proper precedences would be. But this works. Note that my &gt;&gt;&gt;&gt; function uses Swift's built in currying syntax, so using &gt;&gt;&gt;&gt; actually returns a Bool-&gt;T, not T. That's why &lt;&lt;&lt;&lt; can take it as its second argument.
It's not an error. When you're assigning those member variables with values, you're in the class context, and trying to read from the instance context. The error is hinting at that -- it's looking for those members in `TimelineView.Type`, but they live in `TimelineView` Declare those types if you want them public, but don't assign them -- you'll have to set those variables inside of an initializer when the other variables are populated.
Yeah.. It's not the most intuitive limitation -OR- error message :)
i would think that this could have some sort of violation with laracasts?