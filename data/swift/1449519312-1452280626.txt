So preoccupied with whether or not they could that they didn't stop to think if they should. 
Because XCode and AppCode are OS X only. For other platforms there are free: [Visual Studio Code](https://code.visualstudio.com/), [Swift.Vim](https://github.com/keith/swift.vim), [Swift mode for Emacs](https://github.com/chrisbarrett/swift-mode), [Swift for Atom](https://atom.io/packages/language-swift), [Swift for Sublime Text](https://packagecontrol.io/packages/Swift).
I took a rather different approach to logging. I just extended String so that it can write itself to any file handle, and defined log() to write to stdout and logError() to write to stderr.
TestFlight has issues with Jailbroken phones. 
Sweet! Congrats. Once you understand the structure of the payload, you can do whatever you want with it. 
&gt; If it was an outlet you can call becomeFirstResponder but it doesn't seem like that works for Actions. It *is* an outlet. You said so yourself: @IBOutlet weak var location: UITextView! And since it is, you can do within `-viewDidLoad` exactly what you're thinking: location.becomeFirstResponder() Your `roomNumberTextField` method is what your text view is going to have the view controller invoke when needed. It isn't the text view itself. So, it's probably a good idea to rename that @IBAction to something reflective of what it actually does, not what it is associated with. As an aside, `s/function/method`. Functions associated with a class, struct or enum are called methods.
Thanks for your response! Location is a different field however. How do I determine the text field associated with the roomNumberTextField method? 
Have you even tried it before criticizing? LiClipse is fast and lighweight, it is not the original Eclipse IDE.
What's so bad about LiClipse? Remember, it's not full blown Eclipse. And Xcode is Mac only.
Wow this was simple. I tried to do this before and I'm not sure why it didn't work but that fixed it. Thank you!
If you check the Optional definition edit: Image: http://i.imgur.com/R1QhaIQ.png ``` public enum Optional&lt;Wrapped&gt; : _Reflectable, NilLiteralConvertible { case None case Some(Wrapped) /// Construct a `nil` instance. public init() /// Construct a non-`nil` instance that stores `some`. public init(_ some: Wrapped) /// If `self == nil`, returns `nil`. Otherwise, returns `f(self!)`. @warn_unused_result public func map&lt;U&gt;(@noescape f: (Wrapped) throws -&gt; U) rethrows -&gt; U? /// Returns `nil` if `self` is nil, `f(self!)` otherwise. @warn_unused_result public func flatMap&lt;U&gt;(@noescape f: (Wrapped) throws -&gt; U?) rethrows -&gt; U? /// Create an instance initialized with `nil`. public init(nilLiteral: ()) } ``` It's the generic that the Optional enum has defined `Optional&lt;Wrapped&gt;` edit: No idea how to do code blocks :(
What would you recommend doing to get the most optimal completion suggestions? I have a very simple setup for atom. It currently just requests completions when autocomplete+ asks for them. After making the requests (with the correct offset and stuff) it takes like a good 5-7 seconds and returns a lot of completions, but not relevant completions. Except for in project methods and classes. For example, I have a Logger class with a log method. It completes that perfectly. Is there a way to limit the amount of completions returned? I looked into source kitten and didn't see anything like that, but maybe you have more insight on that. The emacs plugin looks to work beautifully. I would dig in to the plugin source, but my experience with lisp is zilch. Thanks for making this!
Sprite Kit sounds like a good start. Metal is a lot lower level. Requires you to write more code and understand more details. But to be fair Sprite Kit is also quite sophisticated and has a number of concepts. So I am not entirely sure how easy it is to jump into. Do you understand things like vectors and matrix multiplications already? I would just try to do it though. If you don't get it jump to other tutorials. If you still don't get it consider using something simpler first, like Codea on iPad, GameMaker, Scratch or whatever.
What does LiClipse have to do with Swift? You've alluded to Swift support in the title but there's absolutely no mention of it on the website. LiClipse may be good, but without more info this just looks like a premature or downright misleading cross-promotion. EDIT: I missed the one mention in the release notes
I also ask the blog/people/podcast question. And agree that it does say something about the person.
I haven't no. But these attributes describe the exact opposite of what eclipse is, so pardon my assumption. I'll give it a go, but I do wonder why anyone would want to be associated with eclipse ;)
Point taken niutech, and my comment edited. But I promise you I'm not trying to be difficult; you're promoting this here as a Swift IDE, but beyond this mention... what is actually there? I certainly don't see any Swift project options in LiClipse. Help us out! I'd really like to try this.
Actually, this statement &gt;In fact, in its current incarnation it can’t be used for any code that has any system dependencies is not correct! [Here](https://github.com/apple/swift-package-manager/blob/master/Documentation/SystemModules.md) is the documentation for using system modules. Basically, you just create a separate repository with a modulemap and you're set! It's super easy.
Default UITableViewCell s already have a UILabel property named textLabel 
7.1.1 no beta for me
Well ok, horses for courses I guess, AppCodes UI is less responsive, no doubt, but I'm definitely more productive in it due to the richness of its functions. In particular, the fact that one still has to go through a wizard-style dialog just to do a symbol rename refactoring in Xcode just seems unnecessary faff. Synchronised Git repo functions across multiple project modules and 'Find Usages' are also huge time-savers. If you still have it installed, it may be worth verifying that you're using the Oracle JDK and not OpenJDK as that would still worsen performance.
Oh I'm utterly dependent on it now, and could never give up its features. The IDE features are fantastic. I'm just pissed off that it's got progressively slower over the years, and calls for optimisation have never achieved anything. It could and should be a lot faster than it is, but they don't prioritise that at all, nor any other feature that users are voting for on their bug tracker. They spent an entire year building a replacement for Interface Builder, when no one was asking for it. Then it became outdated a month later when a massively updated IB came out in a new Xcode version. They ended up dropping their IB replacement within the year. Meanwhile, the highest voted features and improvements on the bug tracker have sat unstarted for years.
From where should i have better knowledge of functions that are used or classes like NSStimer , NSUserdefault and all that.. 
I've seen a lot of buzz on here about PerfectLib. Does anyone have a working example using it as a module? 
What's wrong with SwiftyJSON?
Why based on the worst IDE ever? Why you haven't choosed IntelliJ instead, as a plugin ?
I would agree, but I tried adding non issue code and that runs just fine after the first run. It's only after introducing the first compiler error that xcode acts weird
Hey guys, I finally found the bugs in the port of this benchmark code. I explain some of the difficulties I found when porting it to Swift as I was learning Swift. I'm happy that it's done now so that I can move on.
Giving off the cuff presentations while being heavily judged is not something developers do everyday. 
Especially annoying for the people submitting actual new features and bug fixes.
What speed is your computer? It builds on my i7 8GB in native Linux in &lt;1.5hrs from a clean build and &lt;20 minutes with tests on a rebuild. Suggestions: * Give the VM all of your CPUs. The build process is multi-threaaded and uses all the CPU it can get. If you have a quad core CPU, but only give the VM 1 core, it's going to take 4X the time to compile. * Give more ram to the VM. I created: https://hub.docker.com/r/eosrei/swift-dev-buildbot/ ~~which currently only targets 14.04 (15.10 coming soon),~~ which should simplify the build process for you with Docker and Docker Machine. As above, make sure to give the Boot2Docker machine all of your CPUs. Edit: 14.04 and 15.10 supported now.
Most of these tutorials aren't updated for Swift 2, and in my opinion, should not be considered "Best". Also surprised you didn't mention any RayWenderlich tutorials, which are being constantly maintained to comply with the latest Swift updates. 
agreed, I think a lot of us forget about the fact that the person is being interviewed and is more than likely nervous as hell. Interviewed a guy like that once, I could tell he knew his stuff but he was just really nervous. We called him back in and gave him a second in person (not the usual route) and he was a bit more calm. We did hire him and he turned out to be more than capable of doing the job.
Thanks for the response! It was actually a really dumb mistake on my part. I was saving a temp file, but was still using the original file and didn't notice. Since I was testing it with *sorta* the same code it seemed like it sometimes worked. Thanks again for building this, awesome stuff!
Nice to see people advocating decoupling from frameworks and discussing how proper architecture facilitates better, faster testing loops. Cheers!
Because there is no Swift plugin for IntelliJ? And I am not affiliated with LiClipse.
Previous attempts: - [RemObjects Silver](http://www.elementscompiler.com/elements/silver/) - [Running Swift Code on Android](http://romain.goyet.com/articles/running_swift_code_on_android/)
It's slow (it's a Windows tablet, dual-core i5 at 1.50Ghz/1.90Ghz in turbo boost, 4GB of RAM; virtual machine gets 4 CPUs (1 per thread) and 5GB of RAM (faster to let host swap since the VM's own swap partition sits on the external hard drive)) so I'm just happy that it's able to build LLVM and Swift at all. It's mostly the linking part that is slow because of IO. I might try moving the VM to my SSD and see whether that speeds things up.
I'm aware of both of them (esp. the 2nd one: that one was impressive), but as far as I know this is the first attempt with the open-source Swift reference toolchain and stdlib
I've checked iotop; it's not reading./writing much on my machine. Only ~8GB in ~2hrs on the initial build. The build is severely CPU bound in my case. You may be better off locating a separate build machine. You could buy a VPS or Docker host if you plan on doing many builds.
That's pretty cool, congrats on a promising start
I guess privacy is not something you take into account when you choose a crash reporting system. As long as the website looks stylish... 
Excellent start! Keep it up.
Hopefully RemObjects will adopt 2.2 based off of the new source. Don't see why they wouldn't.
There are difference between Swift and Silver though : https://www.reddit.com/r/swift/comments/3vfj36/heres_why_an_open_source_swift_doesnt_support/ Has a post by Danappelxx (https://www.reddit.com/user/Danappelxx) explaining some of them "It has the same syntax, but it has a few big differences ex: String/Array/Dictionary are reference types, not value types. This could seriously FU your existing code base if you're used to stuff being passed by value."
Love it!
If you are asking for a resource to choose time frames from a vendor, I doubt there is such a thing, because that is very specific to both your subject area and your interface requirements. I think most app developers, when needing to have the user choose from a list of something (in your case vendors), would use a UITableView and create a data source and possible a delegate for that table view to supply the data and react when the user selects an item. It would probably also be necessary to create a custom UITableViewCell to customise the appearance of the data on the screen. Choosing a time period would really require the same things, but customised for that type of data. I'm assuming you are going to be downloading the vendor/time data from a server, and for that you should first look at NSURLSession, NSURLRequest and associated classes. There are higher-level libraries/frameworks that people have put together based on those, but you still need to understand those classes to a certain extent both to use the higher-level libraries and to decide if you actually _need_ a higher-level library, or if NSURLSession will do the job. Just as a rough guideline, I think it would take an experienced iOS developer about a day to put together something which displays 2 table views and allows the user to select something from each and retrieves the data from a server. That-s without any fancy UI trimmings and doing nothing else with the data other than knowing it was selected. 
Bravo. Hopefully this is the start of something!
A bit offtopic, but: PLEASE TEACH ME! I wanted to do the same thing, now that swift is open-surce. I tried to search on reddit, sure that some genius had already attempted in this adventure, and I found you! I would like to be your disciple! Please teach me what you know!
Sorry, it seems that what I am looking for is in the Foundation module: import Foundation let f : NSFileManager = NSFileManager() f.currentDirectoryPath
The C function declarations: char *getcwd(char *buf, size_t size); char *getwd(char *buf); So first of all, `getcwd` requires 2 parameters. The `size` parameter is the size, in bytes, of the array pointed to by `buf`. If `buf` is is `NULL`, `getcwd` will allocate the buffer dynamically using `malloc`. Using a `size` of `0` will allow it to allocate as big as necessary (on OS X when `buf` is NULL it simply ignores `size`). let buf = getcwd(nil, 0) let cd = String.fromCString(buf) free(buf) // for some reason I couldn't find strlen, so I didn't try buf.dealloc(strlen(buf))
Cool!, this is very useful. I hope free() is enough to prevent memory leaks, if I have to deal with C strings in the future. Thanks a lot for your comment. 
First look at the patches at https://github.com/SwiftAndroid/swift/commits/master - if you have any questions on what they do, ask me. If you have any other questions, since I'm also very new to this, try asking the Swift developers on the [swift-dev mailing list](https://lists.swift.org/pipermail/swift-dev/) who might be better at answering questions
Thank you for the answer, I'll take a look to the things. But I mean, how do I do a project like this from the beginning? for example porting or writing a compiler from nothing for a new hardware and a new OS. What should I learn? I know C and I know Linux (I've built Linux from scratch once, it was a constructive adventure ;) ), I've compiled various kernels and some android ROM's. I know Java, but I've never written android apps. What else should I know in order to do big things? (I know that it's not a normal question, but I just love this kind of things and I'm ready to learn and to try and to learn again!)
You probably know more than I do, actually. I didn't port/write anything from scratch for this - Swift's compiler already supported compiling for armv7 and Linux, and Android's close enough to actual Linux that my patches are mostly for getting the stdlib to build.
This may just be a solution to the specific example you gave, rather than to the general problem, but `switch` is really good for complex multi-case `if`s: func textFieldDidEndEditing(field: UITextField) { switch (MeasurementType(rawValue: field.tag), field.text.flatMap {Int($0)}) { case let (.Height?, val?): myObject.height = val case let (.Weight?, val?): myObject.weight = val default: return } } Alternatively, you can refactor out the updating logic: func updateObject(type: MeasurementType, newValue: Int) { switch type { case .Height: myObject.height = newValue case .Weight: myObject.weight = newValue } } Which may give you some more reusability, and then handle the optionals elsewhere: func textFieldDidEndEditing(field: UITextField) { if let type = MeasurementType(rawValue: field.tag), val = field.text.flatMap({Int($0)}) { updateObject(type, newValue: val) } }
Like so many things in life the answer is - it depends! It depends on what style of learning fits you best. Some people can go thru a course similar to what you are doing and immediately start building their own apps. Others can go thru the course and have a desire to build their own app but are still confused on how to move forward. Given your situation (i.e. this is not for a job or an app you're trying to make but you are prepping for a coding school), I would keep going thru tutorial after tutorial until it "clicks" and everything starts coming natural to you. BitFountain and Ray Wenderlich provide lots of good video tutorials and there are plenty on udemy as well. Even if it doesn't click before your school starts that's fine. Just keep imprinting it into your brain and building up those neuron paths. It will start making sense eventually. That will make the learning curve easier once your coding school starts. Many of us arrive at that magical aha moment at different points in the learning curve. Just keep working thru various tutorials cause you will learn different things from each one. At some point it will start clicking and making sense to you. Persistence my friend, just keep at it!
Thanks!
You need to be working on simple projects as you go along until you feel comfortable working on harder ones. If you are just watching videos but work on nothing then you more than likely won't retain any of it, it is basically the same way with everything. I mean my first programming class at a university had simple things but they were there to teach you syntax and the basics of the language. I recreated a lot of these into apps when I was first learning swift just because it is different than any previous language I had used. Here is the list of projects we did if you are interested, they are all decent projects to learn on and you can make all of them more complicated if you want. http://pastebin.com/9wYTbffA
I don't follow your example code, but maybe what you want are enum associated values? You can store different kinds of values with different cases of the same enum: struct ScalarStorage { var value: Int var secondary: Int } struct AreaStorage { var side: Float var desc: String } enum MeasurementType { case Height(ScalarStorage) case Weight(ScalarStorage) case Hectares(AreaStorage) } func showContents(x: MeasurementType) { switch x { case .Height(let x): print("Got height \(x.value) with secondary \(x.secondary)") case .Weight(let x): print("Got weight \(x.value) with secondary \(x.secondary)") case .Hectares(let x): print("Got area \(x.side)x\(x.side) with desc \(x.desc)") } } showContents(MeasurementType.Height(ScalarStorage(value: 3, secondary: 5))) showContents(MeasurementType.Weight(ScalarStorage(value: 2, secondary: 10))) showContents(MeasurementType.Hectares(AreaStorage(side:100, desc: "m2"))) You have other examples in Apple's swift programming language guide, look for enumeration associated values.
You can use a UIStackView inside of your scrollview, the height will adjust automatically. However, it sounds like you are trying to do what a standard UITableView does, and you don't have to specify the height. Any reason you're using a Scrollview?
anyway you did a great work, that I don't know even where to begin hahaha :D congrats! :)
Where can I find info on compiling for armv7? I thought it was only x86/64 right now, and I wanna run some Swift on my Raspberry Pi :) Edit: Sorry, it's late and wasn't thinking :)
There is also this one from [/r/iosprogramming](http://reddit-ios.0x.no/) 
Hey I wouldn't concern yourself with core data right now. It's basically an interface for storing data long term on the device. The suggested way is to do something similar to how they told you to do it on Android. There's the added benefit of Swift automatically creating the get/set methods for you, similar to Kotlin if have tried that language. For example just do "var x = 7" that will make a public int field initialized to 7. If latter you need to implement some special get or set field you can easily add it by going private var _privateX = 7 var x : Int { get { return _privateX } set(value) { _privateX = value } } This wont change the way you would access the x field anywhere else in your code while still allowing you to add some special logic to setting or getting it. I hope this helps and is simple enough to not be confusing.
I completed the Treehouse track, but I found that http://www.raywenderlich.com/store/ios-apprentice was much better (at least for my style of learning). I think you can get part 1 for free somewhere on the website. 
Lynda.com has some decent courses. My local library actually pays for an account for all card holders. Enter the card # and pin and it's free. Not sure if that's an option in your area but I feel like it's worth investigating. 
Do you want to generate the tool or just the document?
Another Swift channel is [LearnSwift](http://slack.letslearnswift.io/)
&gt; Core Data is a wrapper around SQLite Oh man, it is so much more than that. SQLite is just the default option as its persistent storage. In fact, OP's question is very legitimate, just better suited for higher-level projects. Core Data's object graphing (modeling, fetching, faulting, merge conflicts, etcetera etcetera) make it a good option for complex applications' internal representation, especially with a persistent store type of `NSInMemoryStoreType` and not `NSSQLiteStoreType`.
That'd be great! I'll send you a link when I upload it to github.
I was hoping you'd follow up with some more information about how LiClipse supports Swift, by now. How exactly does it support Swift; or are we forced to conclude that you just making it up?
Like others have suggested here, the best way for you to learn is to do. Your goal shouldn't be to memorize, it should be to learn how to find solutions when you're stuck. Start by making a simple project, and by simple I mean very simple. For example, create an app that launches one view and has a button that brings you to another. Or if that's too simple, choose any popular public API and populate a UITableView with the results from its JSON response. From there, try to make something you yourself would find useful. When I started out it took me a very long time to lose the "tutorial training wheels." I had created countless sample projects by following tutorials and understood a lot of the concepts, but without directions to follow I was completely lost. By creating your own project, you'll run into problems and have to search for the solution yourself instead of just re-trying "Step 2."
Thank you for your reply!
I think I have it now thank you!
As I understand - you can build libraries but you will need to distribute with source code. Binary library distributions will become possible with Swift 3.0 (stable ABI) in Fall 2016.
X-Post referenced from /r/iosprogramming by /u/MrD3V [Top 10 iOS Swift libraries every iOS developer should know about](https://www.reddit.com/r/iOSProgramming/comments/3w7d6m/top_10_ios_swift_libraries_every_ios_developer/) ***** ^^I ^^am ^^a ^^bot ^^made ^^for ^^your ^^convenience ^^\(Especially ^^for ^^mobile ^^users). ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher)
Even though it's got nothing to do with testing, I made a project trying out the MVVM design pattern. Generally, it advocates the same arguments in the article (redefining responsibilities). Since it relies heavily on bindings I used a package called Swiftbond (bond, swift bond) Take a look at my repo [here](https://github.com/JeroenBe/QuestionApp-iOS)
You should check out https://ios-developers.io The slack group there has around 4k-5k active users &amp; dedicated channels for help / learning and advanced discussion. Don't let the name of the group worry you, there is channels and discussion for all Apple platforms.
I find extensions so underrated. I love them!! I have a few files that are just extensions that I just implement in all my projects. Like custom colours and whatnot :)
You might want to instead take a look at CFTree from CoreFoundation. You may be able to use it to design your trie data structure without touching dictionaries at all. 
Can somebody explain why everyone is so quick to put their open communities onto a closed platform like Slack? I know IRC isn't the new shiny, but it's open and a closed platform like slack doesn't really fit with an open project like Swift. That's my opinion anyways.
That a company *allows* new *users* to use *their* platform does not make it an open platform.
Basically you can set the height of the cell of the row and then multiply that by the number of objects in your array for the ScrollViewer.content.size.height func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -&gt; CGFloat { return //your height of cell here } Followed by: func setScrollViewHeight() { yourScrollView.content.size.height = (yourHeight)*(array.count) } Edit: Would also recommend tableView.scrollEnabled to false
I definitely agree. They save so much time :) 
Has anyone ever tried Eureka here ? Any thought on how useful it is compared to UITableView. Also I cannot find good documentation on it and the sample project seems to use lots of custom cells that can make things complicated. 
Crash reporting systems generally don’t ask the user for permission to upload crash logs, but it’s not really the responsibility of the tool, it's the responsibility of the app developer.
I'm turned off of it just because of the meaningless +++, +++=, &lt;&lt;&lt; operators. I'd much rather have meaningful method names.
I'm curious what your site exis.io is written in. I tried checking your HTTP headers but that doesn't reveal much. Is it Swift?
When I start learning any new language I start work on a small project using the language - even something at simple as tic-tac-toe. Read a little bit, then code, then read some more and you may have to tear down what you coded and write it afresh, but that is fine. Repeat till you have the basics of the language done. For Swift this would mean (in my opinion) 1. Syntax, basic types, optionals 2. Properties (including computed properties), operators 3. functions and closures 4. enums, structs, classes (including inheritance) 5. control flow (all ways to control it), type casting 6. protocols Whatever you read about these topics take time to apply to your toy project. That has helped me. Of course programming for iOS is also about familiarising yourself with the APIs and that is a longer term task
This looks like Perfect...looks like both of you are pitching server-side swift...What are you doing better? Will this work with enterprise? Also wondering what your site is written in.
This is how I would do it too. var listArray = [24,17,12,399,26,48] var randomNumber: Int = random() % listArray.count print ("\(listArray[randomNumber-1])") Edit: This also works var listArray = [24,17,12,399,26,48] print ("\(listArray[random() % listArray.count])")
Ahh the war of Swift backends has begun and I'm very excited about it. I'm already set to write some tutorials about Perfect. Might as well try to tackle Exis. Also, pedantic detail but you have a typo on your site: &gt; Why bother writing it in a *seperate* language? (Italics mine)
Whoops! Thanks!
You want [jazzy](https://github.com/Realm/jazzy)
&gt; random() % \*Cringe\* :P arc4random_uniform(UInt32(listArray.count))
You are awesome! A hint about cleaning up: you can do `which ndk-build` to find the installed ndk/bin path. The build script you use for libicu has these three lines in it which can be put to good use: NDK=`which ndk-build` NDK=`dirname $NDK` NDK=`readlink -f $NDK` You can use that in build-script to set the other paths relative to that. The absence of this path should also let you cut off the compilation process early with a user-friendly error message. Keep up the good work! This will obviously only work if the user has put the NDK/bin directory in their PATH. Google instructs you to do this when you install the NDK. We can symlink `ld` after that as per your instructions, I read somewhere that the toolchain won't look outside of /usr/bin without changing how it fundamentally works (edit: it was here, wasn't directly related but probably close enough for our purposes http://btorpey.github.io/blog/2015/01/02/building-clang/) I'm motivated to get this build repeatable today, so if you're busy and have anything left unpushed, go for it and I would be happy to do a bit of clean up (with the paths etc. as described above)
Rails is fun to learn if you want to do backend stuff (or full stack I guess) now, today. It will be a while before there will be anything as good or mature in Swift—if you need something that heavy. It probably won't be long until there is a good, reliable, production-ready Sinatra in Swift tho. 
It is definitely something which you should tell Apple about. If it is possible to include your project in the bug report, that should be a big help in getting them to see what is going wrong. But, even if you filed a bug immediately, it would take Apple a while to get to it, and they may or may not wish to solve it, and the may or may not be able to solve it and even if they did solve it, they'd have to schedule it for a release and QA it and etc etc so you are unlikely to get a fix in the near future. So, you may have to find a workaround. I realise that is hard when the thing takes over your system and causes it to crash. But, what I would try is the slash-and-burn technique. Make sure you are using source code control because this involves a lot of delete stuff and restore it. If this were code, we could 'delete' it by commenting it out, but there is no such thing as commenting out stuff in interface builder. So what I would do is rip out the bindings. Why do I pick on bindings? Because it is a not very frequently used thing and hasn't been improved in years and isn't used on ios, watches or tvs, so that is the piece i would suspect first. So, if ripping out the bindings causes the nonsense to stop, you can decide what to do. I think your courses of action are: do lots of diddling around to figure out _which_ binding or set of bindings is problematic. Or (the option i would choose), don't use bindings. As I mentioned, they don't exist on iOS which means all those millions of apps in the app store for ios are written without bindings, so it may mean a bit more code, but at least it is code you can fix when it goes wrong. If it turns out not to be bindings, then put the bindings back (restore from your source code control system) and try ripping out something else, until you figure out what it is. At that point, you can decide how to work around it. Like suppose it is the setting of a particular control's attributes, well, you could try doing that in code instead. Or if it was the mere existence of a particular view, again, do it in code.
It is better to know one language really good - than to know 5 languages just by the way. I would go full swift.
I usually code for iOS. This is a small personal project to do something really minor for convenience. I just found out about bindings and they seem really useful but yeah, with this problem I think I'll just skip them and do it the traditional way. The binding that causes the issue is the one that binds the NSTextField with the Array Controller. If I remove this (or change it to bind to the Table Cell View as I saw on a tutorial, which doesn't work though) the project builds and runs with no problem. I'll submit a bug to Apple but I think this is the end of my journey with bindings...
This is because NSTextField's `value` has to be bound to `selection` `not arrangedObjects`... You'll also have to bind NSTableView's `selectedIndexes` to NSArrayController's `selectionIndexes`. If think it still is a bug but since it's not intended to be bound like that it shouldn't be something one worry about...
The interesting point of Rails right now is the huge collection of already written code you can reuse in the form of packages named "gems". And it's mature too. It will take a while until (if it ever) Swift reaches that point.
Playgrounds are Sandboxed. [In case you're not familiar.](https://developer.apple.com/app-sandboxing)
Thank DressTheMonkey. Your suggestion works. i need to add the following to make it work. do { try managedContext.save() } catch let error as NSError { print("\(error)") } 
Thanks for the clarification. I'm very much with you -- that circular dependency has a code smell. I love that Clean Architecture is picking up steam now -- I've been using using it under the guise of [the Onion Architecture](http://jeffreypalermo.com/blog/onion-architecture-part-4-after-four-years/) for years now in my .NET work and I'm still trying to work out how it best works in the mobile context (specifically iOS' MVC). 
The line: ln -s /home/whatever/ndk/toolchains/arm-linux-androideabi-4.8/prebuilts/linux-x86_64/bin/arm-linux-androideabi-ld.bfd /usr/bin/armv7-none-linux-androideabi-ld. should read: ln -s /home/whatever/ndk/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin/arm-linux-androideabi-ld.bfd /usr/bin/armv7-none-linux-androideabi-ld Spot the difference :) Ok I'll just tell you.. there's an "s" in the word `prebuilt` in the first one. I think this was the cause of the linker errors I was having. To anyone else following along, you'll also have to set the paths to the libicu source code you downloaded, see `cmake/modules/FindICU.cmake` I'm building now. With the libicu and linker errors gone this should work now (fingers crossed). After that I'll be focusing on an integration with JNI.
the `??` operator will do basically the same thing. It will be a the value of the optional or a fallback value example: let test:Int? = 2 print(test) //Optional(2) print(test ?? 1) // 2
You can write an extension for `String` to automatically not use "Optional" when you create a string by interpolation: extension String { public init&lt;T&gt;(stringInterpolationSegment expr: T?) { self = expr.map{ "\($0)" } ?? "nil" } } Now this works: let x : Int? = 3 print("\(x)") // prints "3"
Check out this beautiful shirt: https://tspr.ng/pBvzNfst
https://teespring.com/swift-developers-2
Thats a good point, and why we wanted to put this in front of the Reddit community - we are looking for feedback :). By network code we are referring to the "glue code" that everyone has to write to deal with frontend to backend communication - security, authentication, authorization, validation of arguments, etc.. We aren't looking to displace Perfect (its a great idea) but merely show that we have an alternative approach that many developers we have shown our code to really like.
The advantages of Parse are a hosted cloud database with minimal setup and maintenance. The PFTableViewController is a little sugar sprinkled on top. It's often useful enough on its own, but its perfectly normal to use a standard UITableViewController instead. In your case, since you are not co-mingling the objects, you could use two separate controllers and look into [view controller containment](https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html).
Ruby on Rails is just one possible backend solution so the idea that you would have to learn it is ridiculous. RoR might be the right solution for you but honestly you need to investigate the options. As for a Swift backend I don't see that as a near term possibility unless you go your own way. There are interesting developments afoot but I'm not sure they will be production ready in 2016. 
Can you post a sample project somewhere for us to test ? It seems to be a really common setup which doesn't fail usually. It's strange.
Wait. So now we have a forum for the forum? Why, exactly?
All works as far as I know. If you find a problem, let me know.
Perhaps I'm using incorrect terminology, but my app continues to scan and pickup BLE signals as intended when I exit out of it and go to the home screen. However, this functionality ceases when iOS shuts it down -- it does its job in the background, but not after it's been shutdown or if the users turns the phone on and then off. The scanning after app shutdown or power on/off is what I'm trying to get to work (I believe it's possible, but I keep getting conflicting information on this).
We use this tool on our production apps - it's very useful and easy
I only wear v-necks, sorry!
I have very little context, but I'll throw out, are you getting the monsters current position but not where it will be when the bullet or whatever gets there?
[Here it is](http://dropcanvas.com/56o2s). Be careful though. Open Activity Monitor before you try to build and be on the lookout for ibtoold. Kill it as soon as you realize that the build hangs. There is no other indication that something is wrong until you have no memory left and you have to force restart the system.
Apply for internships.
Um. I think theres still tons more to be done for compiling Swift to Android before considering adding a UI Framework. That said if your goal is to write one app that will work on both iOS and Android, there are already great solutions. I have had great success with PhoneGap, especially now that iOS gives you access to a decent WebView. If you want to use a pretty language like Swift, theres Kotlin compiled with RoboVM. I have used both, it works great! Although you will still need to write native views, which isn't a bad idea anyways.
Embed your TableViewController in a Navigation Controller, and then add the "+" button to your new navigation bar.
I am also learning SpriteKit. Could you apply a `SKAction.moveTo` action to the projectile in the same block of code where it was added to the node hierarchy?
You're setting an array of NSManagedObjects as the recipients. What you want to do is set an array of phone number Strings as the recipients. You can do this using the map function on the items array. Try something like this: messageVC.recipients = items.map { return $0.phoneNumber } Here, $0 is your NSManagedObject, and it's assuming that the property is named phoneNumber and is a String.
If you change your items array initialization to this, what I suggested should work. var items = [Contact]() This is because it thinks the items array only contains regular NSManagedObjects, not your custom Contacts. 
Thank jwutke. It works. The following code works messageVC.recipients = items.map{ return $0.valueForKey("phonenumber") as! String} Thank jwutke very much. I appreciate all your help.Thanks again. 
Sounds ambitious, to say the least. I'll believe it when I see it. Too many moving targets. 
You are why people hate techies. Grow up.
&gt; I really don't see a point for it. This is the point of it. It manages changes. You've got this unintended change that crept into your application and you don't know why (it probably wasn't Xcode; Xcode doesn't do stuff like that). This would tell you when it happened, it would tell you what you were doing when it happened, it would tell you what else changed at the same time, and it would let you undo the change. All responsible developers use some form of version control, even when working alone, because it's stupid not to. &gt; I don't want to pay $7 to have it private. Git is free. Are you confusing it with GitHub? 
I re-read your original question and can see this is what you originally meant. The app being "suspended" and "in the background" after pressing the Home button are basically the same thing. You can't run code when your app isn't running / when iOS has shut it down, except for maybe some very restricted background updating services (to download and update app content for the next time the user opens the app – to be honest I'm not sure this even works if the app has been terminated). I'm not sure you can use Bluetooth connections from within a background updating task, I would be very surprised if you could. As far as I understand you can set a background task to run for about 10 minutes after pressing the Home button but it'll be stopped after that.
I don't think you understood what I first said. I tested the game several times from beginning to end before submitting to the App Store. Worked perfect. As soon as I submitted the build to Apple, I made 2 copies of the project. I then did NOT touch the project at all until a week later. Nobody has access to my laptop, and it was locked in my closet (and nobody in my family even knows how to code). A week later, I update Xcode and open one of the copies. Halfway through the game, the other half is completely wrong. This isn't just 2 errors, it's over 20 errors, and ALL of them are the same. The negative has been removed, and the plus sign was now a minus sign. I open the 2nd copy I made from my flash drive... same errors. I check the game from the App Store and the bug is not there, and the game file used to submit the game has not been changed at all. I open the original file and sure enough, it contains the same errors. Negative sign gone, and the plus sign changed to minus. I did NOT touch the project at all after submitting the build to Apple, which means the original file did in fact work (as I've played the game directly from the App Store), but when opening it in Xcode 7.2, the original file has the errors. There is no way all 3 copies could have the same errors unless the original file had the errors, but it didn't since the build works 100% that was last used to submit to Apple. If the original file did have the errors and I did copy files with errors, then the app in the App Store should have the errors, but it doesn't. 
what JimDabell mentioned - is that if you use git you could easily see if xcode had touched your files at all.. ps: wrong xcode Version in your title.
I'd look into Realm. Would be super simple for something like this and it's not nearly as complicated as CoreData
Ask their devs then.
I'm doing it to learn the language, I don't have an OS X device for Xcode.
There is already http://nickel.rs which is a kind of Sinatra in Rust. The point is: will Swift succede in non-ios/osx environments as Go, Rust competitor? Currently, cargo the Rust package manager is very nice and Go concurrency primitives are very easy to use.. 
There was a bug in the first code sample I posted (when passing a closure as an argument). I fixed it by using ` valueptr.initialize(value)` instead of `valueptr.memory = value`. I'd really appreciate it if someone could explain the difference between the two :) 
My best bet, would be building atop Cocos2D - PureSwift. The main developer of Cocos2D just launched a kickstarter. https://www.kickstarter.com/projects/1455832115/cocos2d-pureswift When he implements Cocos2D for Pure Swift, I plan to write a framework similar to UIKit, and Cocos2D would be the backing animation library like Core Animation is right now. Check out my other Pure Swift projects: https://github.com/PureSwift
it's a lot simpler now that i figured out how to input text. she just wants to be able to input text into a field (that's figured out) and hten send that info through a message or an email or to a text file.
I found that I needed to use applyImpulse using a CGVector because applyAngularImpulse just applies spin to the sprite
Since you haven't done any iOS development, I'd put your project on the back burner for a few weeks and worth through a book or two on the iOS development so you can learn the fundamentals. Once you have a base, then you can attack your project. I think this will save you time long-term and you will learn proper iOS development with fewer bad habits.
Yeah when I first saw it I didn't get it too. When a string gets interpolated, it calls an initialiser from `StringInterpolationConvertible`. Because functions (including initialisers) can be overloaded, you can create as many as you want and Swift will choose the most specialized one. Here, `Optional&lt;T&gt;` is more specialized than just `T`, so the optional one gets chosen.
Unfortunately I have no advice to help your current situation but I highly suggest using git immediately and for the rest of your career. I use git for every single work and personal project--aka even when it is just me and no one else will ever work on it. The fact is, if you had been using git, you would be able to revert these unwanted code changes with a single command. You don't need to pay for a git repo, you can create it locally in a folder and it will just keep track of the changes in that folder without it ever going to the internet. You can start here: https://try.github.io/levels/1/challenges/1
I'm not sure how to integrate it into the build system (currently it doesn't even build JNI libraries yet; I've only tested command line executables) - do you have any suggestions?
I agree Swift is easier, but Rust package manager and concurrency seems better. This is why I'd like to know why would you pick Swift in non-ios/osx scenarios.
For me, my only reasoning is that I don't know Rust and it has a steep learning curve. BTW, have you read the swift-evolution mailing list? Tons of interesting things being discussed there that make me hopeful of Swift's future. I feel like Swift might even have more potential than rust now.
Why would that bother you? Enable fabric only in release builds, you don't need crash reporting in debug builds while developing because you are actually there poking from the IDE.
Thanks I think this has helped me make some forward progress. I still don't have the timing just right (flashing buttons overlap), but I am playing around with it and I think I should be able to figure it out now. I am not sure if it will be an elegant or particularly swifty approach but I as this is my first stab at a my own project and not something I copied from a tutorial I am ok with that for now. There is plenty of time to learn better ways. The funny thing is almost every other part of this project has been pretty simple. I have spent more time fiddling with changing a buttons background color than I have the rest of the project. Once I can get the timing of the buttons down I can finally move onto making this so it is at least kind of playable.
Are you putting a second animateWithDuration into the completion block of the first animateWithDuration()?
The idea of Rust seems pretty cool, but man there is a lot of mental overhead using that language. I picked up both Go and Swift relatively quickly but Rust reminds me a lot about my old C++ programming. Like you got to know you are going to be serious about Rust before investing time in it. This makes me slightly skeptical of using Rust over Swift unless there is a very clear benefit for said project. Swift has much better tools, IDE etc available so I think I would probably prefer it, at least for application development. Perhaps for making highly multithreaded server side code, crypto library or something I'd rather use Rust.
No it is a single call to the function. Essentially I iterate over an array of buttons. I take that button and pass it to a function that uses it to call the animateWithDuration function. One solution I have found is to play with the duration and delay. If I start out with a duration of one and a delay of zero, then increment the delay by two each time I call the function, the animations don't overlap. It seems a little inelegant but if it works I am ok with it for now. I won't really know how well it will work out until I can play it though. Right now I am really more concerned with creating an app that isn't part of a tutorial to kind of see if I can do it than I am with writing perfect, well structured, and efficient code. Once I prove it to myself I have plenty of time to improve. After all it isn't like this is something anyone but me will see. 
I don't use the "(fileNamed:)" initialization for my scene objects. Are you getting the "Argument labels '(fileNamed:)' do not match any available overloads" error? Do you have anything in your *override init* that overrides the "(fileNamed:)"? Do you know how classes work? *override init* is used to override the initialization that the SKScene class has. Since your MyScene class inherits from the SKScene class, you are not required to have *override init* unless you want to have your own initializer for your objects that are made from the MyScene class. **So by you using "(fileNamed:)" you're using the initializer from the SKScene class. If you put *override init*, you're basically saying, "ignore the fileNamed initialization from the SKScene class, and follow my initialization that I declared in my class", which you do not have, so which is why you're getting the error.** This is a class issue/initializing an object and not understanding how classes work in Swift. I suggest you learn about classes from the Apple documentation. It helped me out. Here's why it works on mine. I use the following code to initialize a scene object. let scene = GameScene(size: CGSize(width: 2048, height: 1536)) Notice that the initializer for my code is this: override init(size: CGSize) { //Code to prepare the scene... super.init(size: size) } That means when I create an object, the init function is called. The only argument in my init is "size" that accepts a CGSize argument. When I create the object, I pass a CGSize value to the scene object when I create it. That's why my code works. Notice at the end I have the *super.init(size: size)*? *super* allows me to use the variable *size* from the SKScene class, and I assign my size to their size variable.
But Xcode DID change my file as soon as I opened it, I already know Xcode changed it. As I've said, the last thing I did was upload the game into the App Store. Then I closed the file and saved 2 copies. Works fine from the App Store. Reopen the file after not touching it for a week, and errors are present, but are not present in the App Store, meaning the original file was fine before opening it in Xcode.
Create a subclass of UITableViewCell and give it a UILabel with your own custom layout and constraints.
Sorry, but I disagree. I'm huge fan on Swift and I do it a lot. I don't encourage to use swizliizling and dynamic-rutile in Swift and I agree it's not the best choice. But there is situation when you can do it another way around :( Here is an example: - " I want to override and provide customer description for UIColor" https://github.com/kostiakoval/SpeedLog/blob/master/Source/UIKit/UIColor%2BLog.swift If you know a way to solve it in a pure Swift static typed way I would love to see it. I just didn't found it yet :) It's all about being pragmatic and knowing tools that are available in our disposal 
Yep. obj-c intro will be with us for long-long, very long time. I still try to write pure swift without objc because it has its benefits, but sometimes it's just impossible. Sometimes you just need to make it work. And if objc fits better for that problem, why not to use it? You don't write your iOS apps in C, because it's not indented for that purpose. Same with Objc/Swift. Need static type safety use Swift. Need dynamic runtime - use obj-c interop :)
No, it's not.
I agree. I've thought that Apple would make Swift more static and remove runtime with time, but from I see now its not going to happened in near future. Now Swift is open-sourced and we can see the directions it's mowing. My point for that article was to show that: - Swizzling is dangerous, and it's not Swift style to swizzle. But, wen you hit the wall, and you can't do it in a static swift way, it's very easy to use Swizzling. Although it's dangerous :) &gt; And of course, it's entirely impossible if your class is not exposed to the Objective-C runtime. And I've mentioned that in the article:)
100% of the time you have a serious syntax error. Like not even 99%, it's 100%. 
You need to unselect the "relative to margin"-option for the leading constraint.
Woo! I can finally put my example in the same repo!
So did Swift just make it to android before Xcode made it to iOS?
I think this is what you're looking for: https://swifteducation.github.io
[Autolayout.](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/AutolayoutPG/)
Thanks! Yeah, the pieces are returned as an array of SKSpriteNodes, so you can manipulate them however you want. I also just updated with a destroy option that adds a bit of a boom at a given point. 
tldr: You should use the newer api method which doesn't return an optional tableView.dequeueReusableCellWithIdentifier("cell", forIndexPath: indexPath) The longer version is there are two different methods because of legacy apis. The first methods that you are using (without the indexPath argument) is the older one and returns an optional. In iOS 6 the method with an additional indexPath argument was introduced which "guarantees a cell is returned and resized properly, assuming identifier is registered", so you don't get an optional. You can use the first method, but you'll have to allocate cells manually if the method returns nil. let cell = tableView.dequeueReusableCellWithIdentifier("cell") ?? UITableViewCell(style:UITableViewCellStyle.Subtitle, reuseIdentifier:"cell") .... return cell
You've got incorrect constraints, but you don't show the constraints in your screenshot, so it's unlikely people are going to be able to help you. Chance are though, Xcode has already tried telling you about the incorrect constraints – your screenshot shows you've got ten warnings. Start by looking at the places Xcode is warning you about. 
Honestly, Swiftbond would likely suffice, but it appears the creator of Swiftbond decided to move Swiftbond to reactivekit and develop it further over there in stead of in the GitHub repo. So for future projects, to me, it seems to be a good idea to start working with reactivekit, at least until Apple decides to support bindings (and other reactive tools) themselves. 
The warning i have are about the icon sizes, and some unused variables ( that i have used so idk why it's telling me i haven't) here is a screen shoot about the constraints. [Constraints](http://imgur.com/fzPzAo5) I'm sorry if these questions seem so stupid and noobish but I'm new to swift and am self taught. Also quick follow up question is it good to use auto constraint or is better to do it manually?
Nice comment, thanks! I believe Swiftbond was a reaction on reactivecocoa, although I'm not sure why that was. Probably got something to do with the age of reactivecocoa. As for RxSwift, I heard a lot of great stuff about that! I guess there's no reason whatsoever for me to not check out the repo :). Reactivekit is developed by the same guy who developed Swiftbond, in fact he moved all the functionality of Swiftbond to reactivekit to develop it further over there. Reactivekit is just a combination of a lot of reactive functions, more than the bindings Swiftbond offered us. I'm pretty excited to find out what reactivekit can offer us. I guess it's between reactivekit and RxSwift now :)
On the constrains: Auto layout offers you a good way to start, but rarely are they good the way they come out, some manual alterations are probably necessary. 
Search for projects that interest you. Try setting them up. Then as a first step, contribute back to their documentation (almost all of them have incomplete ones). Once you did that you can figure out if you can contribute to bugfixes or feature development. The only way to contribute is to submit a PR, no matter how small it is.
Don't apologise – there's nothing stupid about these questions, it's a complex topic! It's a bit tricky to understand your constraints, because both labels are just called "Label", so it's not clear which label each constraint refers to. But if I'm interpreting it correctly, you are positioning your right-hand label by saying its leading edge (its left edge for languages that read from left to right) should be 350 pixels away from the leading edge of some other view. That sounds quite fragile. Generally speaking, auto-layout works best if you think about what your intent is behind positioning a view and then you try to express your intent with the constraints. So when you're positioning your right-hand label, you aren't really trying to make it a certain distance away from something over on the left-hand side – you're trying to make it stick to the right hand side. So set up your constraints to do that. If I wanted two labels with one hugging the left-hand side (LeftLabel) and one hugging the right-hand side (RightLabel), I'd set the following constraints: * LeftLabel's leading space to container margin. This anchors it to the left. * RightLabel's trailing space to container margin. This anchors it to the right. Since labels can figure out their width for themselves, you don't need to set any more horizontal constraints unless you think you'll be in a situation where they might overlap. If you're doing this with views that don't have an intrinsic width, then you'll have to set widths for them as well (or constraints in the other direction). And of course you'll need constraints to define the vertical position. &gt; is it good to use auto constraint or is better to do it manually? In almost all cases, I'd say use auto layout. It gets very tiresome very quickly juggling frames and gets progressively harder when you want to support other devices or other display contexts (e.g. split-screen iPad Pro). Once you get the hang of auto layout, it's very powerful. The link PAKKO_JUODA_VIINAA posted is a good place to learn more, or if you prefer video, the WWDC video where they introduced auto layout is also a good place to start. 
Stick a print statement above the line where you call these functions, to show what the vectors being passed to them look like. Certainly neither of those function would return an array longer than 3. By the way, those functions can be simplified a little: func vecC(vector: [Double], constant: Double) -&gt; [Double] { return vector.prefix(3).map { n in n*constant } } func vecA(vector1: [Double], vector2: [Double]) -&gt; [Double] { return zip(vector1, vector2).prefix(3).map(+) }
You can preallocate your array using [`init(count:repeatedValue:)`](https://developer.apple.com/library/ios/documentation/Swift/Reference/Swift_Array_Structure/index.html#//apple_ref/swift/structctr/Array/s:FSacurFMGSaq__FT5countSi13repeatedValueq__GSaq__). Try checking the size of the incoming `Array` and see if there's anything going on there. I think your solution is fundamentally flawed. From what I can tell, you're trying to use `Array`s of 3 consecutive `Double`s as a way to store an `X`, `Y`, and `Z` coordinates. This is a very primitive way of doing this, and I suggest strongly against it. Instead, you should have a `Vector` Struct, with an `x`, `y` and `z` property. You can overload the `*`and `+` operators to allow `Vectors` scaling by a constant (`vecC`) and addition (`vega`), with with an intuitive syntax like `scaledVec = vec * 0.5` and `vecSum = vec1 + vec2`. See the "Operator Functions" section of the page on [Advanced Operators](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html). Their example is particularly relevant to your problem. They implement an overloaded `+` operator for 2 dimensional vectors. Add a `z` variable, and you're off to the races.
It's the sandboxing issue. However, there are multiple easy-to-use options to get around this. The first three are good if you are just experimenting. They put the files in locations that are slightly hard to access from the Finder, but if your purpose is just to see if your code is working, you can do so by reading the file back in. The last option, apparently not so well known, puts the file in a very Finder-accessible location and is best for it you want to actually do something with the file. * Put the file in a system temporary directory. This puts the file somewhere like `/var/folders/vq/_d2jy1yd68db23wy6s_4pxl80000gn/T/com.apple.dt.playground.stu...`. ``` let destinationPath = NSTemporaryDirectory() + "my_file.txt" ``` * Reference a file in the bundle. This creates a file in the bundle itself, in the *Resources* folder of the page. Either of these work, depending how pedantic you want to be. ``` let url: NSURL! = NSBundle.mainBundle().URLForResource("testForSwift", withExtension: "txt") let url2 = NSBundle.mainBundle().bundlePath.stringByAppendingPathComponent("weather.json") ``` * Just use a file name without a path. This creates a file in a location like `test.log -- file:///Users/ghoetker/Library/Containers/com.apple.dt.playground.stub....` ``` let url3 = NSURL(fileURLWithPath: "test.log") ``` * Take advantage of `XCPlaygroundSharedDataDirectoryURL`. The contents of `~/Documents/Shared Playground Data` are available to any Playground you create. Access the shared folder via the XCPSharedDataDirectoryPath constant. Remember that you have to `import XCPlayground`. You also have to create that folder within Finder before you can use it. XCode will report that it is in an obscure `tmp` directory, but that maps to the Shared Playground Data folder. ``` let fileToWrite = XCPlaygroundSharedDataDirectoryURL.URLByAppendingPathComponent("test.log") let textToWrite = "Some text" try textToWrite.writeToURL(fileToWrite, atomically: false, encoding: NSUTF8StringEncoding) ``` 
For reference, here are other Swift web frameworks: - https://github.com/PerfectlySoft/Perfect - https://github.com/glock45/swifter - https://github.com/izqui/Taylor - https://github.com/brownleej/tailor
Check this JSON library (Linux friendly): https://github.com/Zewo/JSON Add it to your Package.json file, and check Sources/JSON.swift to see how you can obtain the different types of values (Optionals). One problem I had was a segfault when parsing an empty object {} in an array. I fixed it editing the .json document and removing the empty value. No more issues so far.
Great technical comparison of programming languages by Chris Lattner!
This does sound like a good option. This particle class is the first I've ever written, so it didn't occur to me to use a struct. Thanks!
LiClipse supports Swift syntax highlighting, code snippets, integrated Terminal panel and easy building/launching the project by pressing F9.
Or SSH into your Mac.
Thanks! Also, the way of declaring vector + vector as a function has made my code so much cleaner...
Potentially, this could instantiate UIKit objects though.
Is it possible for two modules to share one file between them?
Interesting. I think nope. But you can link (include) a module(in the documentation it's called a Target) into another target. Example: Package has 3 targets: A, B, C. A, and B could include C. This way you can reuse code (targets) but not files directly. The docs is here https://github.com/apple/swift-package-manager/blob/master/Documentation/Package.swift.md Example: let package = Package( targets: [ Target( name: "A", dependencies: [.Target(name: "C")]), Target(name: "C") ]) 
 &gt;I'm only just beginning so NSUserDefaults sound like a much more feasible step, for now. Yes, this is fine for how you described, if your app is reliant on the initial auth succeeding. &gt;I'm also unsure what you mean by saying "fetch"...? This is only relevant when using Core Data, you perform database fetches with a predicate(form of database filter) to get specific data. So you make your root view controller an empty controller, then add to it your launch image., this means when it appears it still looks like its launching, I would add a spinner as to let the user know your performing something else they may think its frozen? To get the info I wouldnt save a Bool in NSUD instead save the username: if let NSUserDefaults.standardUserDefaults.objectForKey('LooggedInUsername") as String? { //Go To Main App } else { //Go To Login } Then on logout delete it from NSUD.
Thanks a lot! Where would this if statement go though? How many ViewControllers do I have in total? Let me see if I understand your idea: - Create ViewController - OK And then: (unsure from here) - Add two subviews — one is the login screen, other is the app functionality (it will also have different views, but we'll ignore that for now) - do the check in ViewDidLoad()? If the if statement evaluates to True, set the login screen alpha to 1, if false set it to 0. I'm pretty sure the way I'm describing it is not the best way to do. But is that even remotely close to where you were going?
Thank you! Always amazed by people's willingness to help! I think I get it now. didn't even think of `presentViewController` as an option. So in `//Go Top Main App` I basically do the same as `goToLogin()`, but set that one to the View Controller that contains my main app stuff? Something like this? func goToApp() { let storyBoard = UIStoryboard(name: "AppStoryBoard", bundle: nil) let appStory = storyBoard.instantiateViewControllerWithIdentifier("App") presentViewController(appStory, animated: true, completion: nil) I don't need to set any relationships, right? The root Controller is basically the app's starting point and it either goes to login, or to app.
I dont believe so, ive just always used present as it comes with a completion handler, but i think if your also targeting Ipad there are additional params to make it work.
Wonderful thanks!
Ok. One last question: why do we need a different Storyboard? Can't I do this in the same one? 
Yeah you can do from any number of storyboards, but in large projects the bigger the storyboard the longer it takes to load and issues with merge conflicts but yes if 2 VCs are in the same storyboard you dont need the storyboard line either you can just do let appStory = storyBoard.instantiateViewControllerWithIdentifier("App") As this targets self.storyboard by default IIRC ://
Ok the warning should go when you give them unique IDs they both need to have unique IDs and the box below ticked that is like use storyboard ID The ID you give it on the storyboard is the ID you use as a string to instatiate it with: let vc = storyboard?.instantiateViewControllerWithIdentifier(&lt;#T##identifier: String##String#&gt;) 
A. Put on line numbers in preferences. B. You're missing a closing bracket around the fourth red line.
Funny that you mention that, because that's one of the examples that I looked at that didn't make much sense to me. My project is for OSX, not iOS, and for some reason that code does not create a smooth animation between the defined steps for me. But I did figure out how to do what I wanted shortly after posting the question, so problem solved. thanks anyway!
You need to get those images and cache it on user device. Alamofire can help you here. You can use HankeSwift to asynchronous load the image into your UIScrollView, UITableView or UIcollectionView. Now how to get this done? Start by searching any keywords that are not familiar to you and practice. It is a simple app and using online resources you can get it done pretty quick. Good luck 
There are many reasons why your image may not be showing up, which depend on exactly how you are using it. As one example, if you are loading this image view from some type of nib (such as a xib or storyboard file), then it will be calling the init(coder) method, and you have not specified that correctly. You should call super.init(coder) so the super class has a chance to decode itself. As there is more than one possible way for this to be going wrong, rather than trying to guess how you are using it and then make a further guess on why it isn't working, let me give you some debugging advice. First, comment out everything but the init and the call to super.init inside of it. Now check that it works. If it doesn't work, well comment out that as well, and see if that works. If not, you've stumped me. If it does work, then uncomment a line and try it. And keep doing that until you find the offending code; then fix that code. Or, as u/auntyblackchild suggests, you could instead use composition. Or, you could have some other component just set the cornerRadius and backgroundColor on this image view. Or, if you are using a nib/storyboard, you could set them in the inspector. 
Your `TrieKey` protocol seems very similar to `SequenceType`: public protocol TrieKey: Equatable { typealias PrefixType: Hashable func generatePrefixes() -&gt; AnyGenerator&lt;PrefixType&gt; } public protocol SequenceType { typealias Generator: GeneratorType func generate() -&gt; Generator } Why not replace: `Key: TrieKey` with `Key: SequenceType where Key.Generator.Element: Hashable`? Or, to avoid tying it to a particular `SequenceType`, why not have the key be the *elements* of the sequences (`Key: Hashable`), and have all of your functions accept sequences: `find&lt;S: SequenceType where S.Generator.Element == Key&gt;(key: Key)`
Yea, looking through your code a bit more a `SequenceType` key wouldn't make much sense. (Especially seeing as `Int` conforms) Having the generic being a collection feels strange, though. Anyway, cool code!
&gt; Having the generic being a collection feels strange, though I couldn't quite parse that, care to elaborate? Thanks for the comments! This started out to see how crazy a generic key would look for a trie in Swift, but I ended up spending the majority of the time figuring out how to make this conform to `CollectionType`. Making trees indexable is tricky.
Call srand48(time(0)) before drand48(). Also, in my opinion arc4random_uniform() is a better solution. This method allows to choose range of random selection.
That TrieKey is delicious :) My only feeling is that that should be the implementation detail. The protocol extension seems like it should be the default, and that you should maybe have provided a bit of a more elegant example than by dealing with `Int`s on a digit by digit basis. Also, this feels a bit more elegant anyway: func digitsOfInt(int: Int) -&gt; [Int] { var int = int var stack = [Int]() while int != 0 { stack.append(int % 10) int /= 10 } return stack.reverse() } EDIT: Also, when I wrote my own Trie implementation about 9 months ago, I actually went along the route in your second edit, with generic functions, and it turned out fine, and arguably better, as it's more generic. e.g. What if you have two sources of inputs, say arrays and lists of strings, and you want to add from them both?
I see. I think [my reply to superlopuh](https://www.reddit.com/r/swift/comments/3wufhv/generic_trie_in_swift/cxzba51) addresses why I went with parameterizing on the whole key instead of just the part that's relevant for the trie. In short: I wanted an interface that resembled `Dictionary` and considered the prefix an implementation detail that was captured by `TrieIndex` (in the same way `Hashable` capture the implementation detail for dictionary keys). Not saying this is the "right" way, I've never actually seen a trie implemented like this. Also thanks for the note about Swift 3. I did not see that before.
Core Data has a lot of overheard and can be difficult for new programmers. If you don't need to persist the data you could just just create a class with those variables and pass it whenever you transition. class user { var username: String var password: String var sessionID: String var image: UIImage }
Very cool. Is there a way to run a specific test or spec using command line args?
It is created and destroyed each time. The variable is declared within the loop, so on each iteration of the loop, a new coordinatePoint variable is created.
It is created and destroyed each time. The variable is declared within the loop, so on each iteration of the loop, a new coordinatePoint variable is created.
It is created and destroyed each time. The variable is declared within the loop, so on each iteration of the loop, a new coordinatePoint variable is created.
&gt; or is it created and destroyed each time This. The scope of coordinatePoint is limited to a single iteration of the for loop. When that iteration of the loop ends, it's also the end of the life of any variables or constants that were declared inside of that loop. If you declared coordinatePoint outside of that inner for loop, then you could make it a var. 
Neat! How would you say this compares to [spectre](https://github.com/kylef/spectre)?
I believe you need to put your coin image views inside of a container view. Check out: http://stackoverflow.com/questions/3602434/transition-behavior-using-transitionfromview-and-transitionwithview
for future reference: to get information on functions such as drand48 or srand48 or arc4random, bring up a terminal and either type man drand48 or, just type drand48 then ctrl-click (right-click) it and choose "Open man page" 
Thank hobgoblins and pointed ears for the 2x button.
And did you make any progress? It doesn't seem like /u/greensamuelm will reply 😕
I know apple doesn't allow this functionality, which is why you can't find any apps on the app store which do this. Try building a project yourself. I haven't tried it, but [here](https://github.com/alskipp/ASScreenRecorder) is a project on GitHub you could try. There are others if this doesn't work. I just googled "ios screen recorder project github". Good luck!
Coordinate grid sounds better to me since it's in a coordinate grid.
thanks, I'll have a look. well the app will get session data, store json data from server (based around Drupal) so my examples are few compared to what will actually load, but they are just small strings (many) Where would you go from NSuserDefaults to use Core Data instead ? (I have one relations table, where two sets of JSON data are matched to generate parent relations between taxonomy and categorization) 
Link to transcript: http://daringfireball.net/thetalkshow/139/federighi-gruber-transcript *Allegedly
This here is why this site rocks. Excellent information, thank you very much for providing this.
You want PonyDebugger
How important is it that you retain the data. You could always delete the database and start again. Another way would be to create a model to transition from the old database tothe new. It is not ideal but doing large changes like this often cannot be migrated easily
Thanks for your advice. Every bit from more exprienced programmers does help! I have no exprience with relationships though, but yeah I guess it's worth it I guess. How would I go about bundling Core Data into an app that I haven't checked "Use Core Data" for when I first created it? BTW: Any chance you have the link for that YouTube video? Thanks!
Can you explain what problem you have with that logic?
A relationship is super easy, it's just a pointer to a row, or set of rows, in another table. In some instances you could have a "one to many" relationship. This is probably what you would use. You would have one user, and the user has many sites (or in your case a couple). As for bundling, I believe you just have to create a .momd (or managed object model). It is basically an XML file that lays out all of your property names and associated types, and different relationships. And when you're adding all of the other stuff in, the easiest way to do it is to create a new project and just copy and paste the code from the new project in to the app delegate (or wherever you want to manage core data) of the existing project. http://www.raywenderlich.com/115695/getting-started-with-core-data-tutorial this isn't the tutorial that i used (mainly because the one i used was like 3 years ago), but this one uses swift 2.0 syntax, and Ray Wenderlich's tutorials are always really well done. It's my go to for iOS concepts that can't be explained in a stack overflow answer.
I did not build my own binaries either. Though I don't fully grasp why this is needed, it allowed REPL to work in my case.
I dunno. I could listen to Federighi talk all day
[You can still use for, just with a more "swifty" syntax.](https://www.reddit.com/r/iOSProgramming/comments/3wvwwa/swift_has_accepted_its_first_external_evolution/cxzp1y7)
I think the reference to switching to while was because of performance of for-in loops in some cases: &gt; Performance of the for-in loop lags behind that of the C-style for loop in some cases. The core team feels that optimizer improvements can close this performance gap, and that ‘while’ loops are an acceptable substitute for performance-critical code where the optimizer isn’t yet eliminating the abstractions used in the for-in loop.
I deleted the official snapshots and installed from the apt-get repository someone posted here recently. Worked like a charm.
Can you elaborate why?
Hmmm, its really difficult for me. Should i make the NSUserDefaults in the Segue function on the FirstViewController? I don't really get it. Thanks for your help
Last week I spoke on the Concepts in Code podcast. The cohosts, Hank Turowski and BJ Miller, were kind enough to let me ramble about testing. We also got into some ideas for pair programming. If you have a few minutes go have a listen. And make sure to check out their other episodes. They are building a Package Tracker app from scratch and documenting their progress, live!
And how many students created infinite while loops because they forgot (or never knew) to put i++ anywhere in the body? Also removing feature that bunch of people know and use for decades just because some school kids have problems understanding? Give them dumbed down version, but leave advanced stuff for the rest of us.
&gt; Swift is a language for kids who are not yet programmers and do not yet have solid understandings of basic programming logic. ... What? That's not true at all. Swift is general purpose, and it happens to be a reasonable language for teaching high school / college students.
So, try it! try putting it in the segue function. If it works, then yes that is where you should put it. If it doesn't work, then no, you need to put it somewhere else! btw, I'm not saying 'try it' just because I want you to figure it out for yourself; I'm saying it because I truly don't know where it should go. It isn't possible for me to think like, 'hmmm well, the last time I wrote to user defaults I did it from viewDidLoad, so therefore that is what jonaskristensen should do! It entirely depends on everything else that is going on in your app and what your needs and requirements are. That is why programmers get paid **loads of money** ;-). The one definite piece of advice I can give is this: BE METHODICAL. When you make an experiment, really think about the ONE THING you are going to change (if you change more than one thing, you'll never know what caused the effect you observe), and how you will change it, and what effect you expect it to have and what effect it really does have, If it is different, really investigate why you didn't predict it correctly. And either remember or write down everything you try and the result because there is nothing more annoying than thinking a result is useless and throwing it away, only to realise later that it was actually half of what you need and now you need to re-create it. Source code control can be your friend here, because you can create tons of branches with tiny experiments and then when you succeed, you can wipe them all out. 
I think u/mxcl is the code owner of the official swift package manager and the creator of Homebrew so save your snarky comment. 
 for it in start.stride(through: end, by: delta) { body(it) } 
Ironically, the `for loop` was an improvement over the `while loop` as the *initialization*, *conditional* and *afterthought* were condensed in a single line.
Listen, I hate to be the one to say this but you learned *wrong*. 1) if you're writing swift you shouldn't be using c-style for loops anyways. There are better, more expressive ways of writing the same code, and if you don't understand programming well enough (or are so new to programming as to complain about having to learn while loops) you *especially* shouldn't be using c-style loops. Suffice to say you're doing it wrong, and I have little to no sympathy for the fact you are complaining about having to learn to be a better programmer. And to drive that point home - I just looked through the last year and a half of production swift code and cannot find any single use of a c-style for loop. There are better ways of writing the same code. 2) if you expect a stable language whose syntax doesn't change you shouldn't be using swift. Period, dot, end of story. Every version of swift has broken previously working code. Every. Single. One. This isn't new, and the Swift team *explicitly* states that they make no claims about it being forward compatible. I *especially* have no sympathy for you since this isn't new. If you don't like it, find a different language. 3) you're also complaining about something that will likely be a non-issue. Every time they change syntax in swift they typically support automated code migration from old versions to new, when it's possible. And since a c-style for loop *is* a while loop - its literally shorthand syntax for a while loop - I fully expect this to be the case here. I mean, we are literally talking about a difference of three lines per loop. It's trivial to move back and forth between the two. I could write a code migration tool myself. 
&gt; Why one need justification to keep this feature? Does it cost anything? Yes. It makes the language more complex.
The only one I can think of is that it's shorter to type.
Thanks for making me regret making a comment.
Thanks for making me regret participating here. I forgot reddit is not civilized.
Is the fact that it didn't require significant language support or keywords really a bad thing? I recall one of the selling points of Objective-C was how few keywords it added to C as compared to C++. Of course, by that argument, one less language construct polluting Swift is a good thing too.
&gt; Swift is a language for kids &gt; I didn't say it was for kids ಠ_ಠ ...but ok, I agree with what you say now, at least :).
That's one way to define improvement, but readability is also important. It's a balance.
You may want to look at the Nimble test framework. I think it would make it easier for you to test "failures". http://github.com/Quick/Nimble#Exceptions
Why not just use [Realm](https://realm.io/docs/swift/latest/)? Same functionality as CoreData but much easier and nicer to work with.
Thanks, I needed a new podcast for my week.
I don't really understand how stating a fact, rendering an opinion, or asking questions is uncivilized. The conversations on this sub are generally pleasant. The only time I've seen somebody be intentionally spiteful, the offender was downvoted into oblivion.
/r/titlegore
I see Swift as a lot more than an educational language. Currently, maturity is the only thing holding it back, and that just comes with time. In terms of the language itself, it's a serious contender, with modern features and great type safety. The language is better than Java, C++, or various other high profile production languages. In part that's because a lot of production languages are awful, but it's also because Swift is a well designed language. It's missing maturity and libraries. If it had a good web framework, I think it'd be great for server-side web development. Certainly better than Java, JavaScript, or PHP. Again, it just needs maturity. With time and community effort, it could eventually be among the best options.
Yea correct me if am wrong but according to the post the **for in** loop incurs some over head because it has to initialize an iterator object. So if you are like me and like to keep your code minimal especially on a mobile platform you will be forced to use the more verbose **while** loop, right? I don't like this
I can understand why they're doing this, but they really should have done this before 1.0. Some of this makes _sense_, but if it was a C-ism and a bad idea, why was it in there in the first place? When Apple releases a new Xcode, with a new Swift version, submitting to the App Store means having to change a program's code, whether the time is opportune for such changes, or not, and regardless of the risks (new bugs!). I've been programming professionally for a long time, and in many languages, and this is the first situation where I could be in a forced march through incompatible syntax changes. I was kind of hoping that Swift 2.x was the "whew, the language is settling down" release, but the ongoing philosophy seems to be "damn the users and their source code, full changes ahead!" It really means that if I want a stable language for iOS programming, that's Objective-C. Which is too bad, because the _idea_ of Swift is a good thing that I've been waiting a long time for.
number of keyboard presses, and i guess a little bit of semantics. IMO, i += 1 is a pretty clear indicator that an increment is happening, where i = i+1 is not as clear because the second 'i' could be replaced with anything, and it would just be an assignment, rather than an increment.
i think the reasoning is that the ++ and -- are almost never used on their own line, but used inline, typically to index into an array. However, sometimes this code can become really messy and unclear when you pass it off to another developer. As a dev who originated learning C and c++ first, this originally frustrated me, but it makes sense. the ++i and i++ can become confusing concepts for people who aren't familiar with C or its derivatives. And it's one extra line, so it isn't really the end of the world.
&gt; Period, end of story. The arrogance is too damn high. Also I don't need your fucking sympathy.
I thought the same thing, until I did a search in all the Swift code I've written in the last year and I haven't used a single C-style for loop, and that's with writing nothing but Swift since last January.
Ugh right. Edit: Oh my god, my title. It was before I had coffee!
This right here is why you want to remove them, you messed up the order in your second example, it should be let obj = arr[idx] idx +=1
You should try fastlane. It is really good. https://fastlane.tools/#
That overhead is probably negligible. If you're _that_ worried about performance, why aren't you mixing in objective-C or even C?
If you're "talented enough with the language to know which rare cases to use it in", use a fucking while loop.
https://www.reddit.com/r/swift/comments/3wyxai/c_for_loops_are_dead/cy03q2e
In some scenarios sure the overhead would be minimal. Its still more RAM for something I don't think is worth it. Also take for example you are iterating thru an array of an array. You want to do this every frame for an animation. Your **for in** loop could massively decrease performance and increase RAM usage. We have this issue with traditional Server-side Java programmers coding for Android. Who come to the platform and use ForIn loops during animation and cause UI jank. Kotlin is moving away from the traditional C For loop as well, but they still let you use it in a manor which does not incur any extra overhead. The point is minor of course because you can still use a **while** loop, its just more verbose...
I'm interested in your comment about the app gap on desktop platforms! Since this is the Internet I wanted to say that I'm not disputing your claim, just curious. Apart from games, what must have apps are on Windows and not the Mac? I am quite ignorant about the state of things. 
&gt; I'm writing software professionally for more than 25 years. IOW: "Get off my lawn!"
How's that boging it down? Nobody is forcing you to use that feature. You can totally forget it exist and be happy.
The iterator object optimizes to a loop counter. Initializing it is no higher overhead than "i = 0".
The very essence of what Swift is trying to do by removing C-style "for" loops is to *prevent* you using loop counters in such an unorthodox way. Using a C-style "for" loop with something that *isn't* a normal index very far from idiomatic. If your loop index really can't conform easily to SignedNumberType then you should be implementing a normal GeneratorType (or possibly an IndexType) instead of your custom LoopType. This would have the advantage that you wouldn't need to implement forEach at all.
I think they're aiming for Swift 3.0 to be the "no more big breaking syntax changes" release. Which I agree is rather late in the version numbers. Though you could argue that the numbers are rather arbitrary, and 3.0 could (and probably should) be considered something more like version 1.3. 
Check the res in preview for my low fi method. Its time consuming but passes for me.
Yes, but it's also a fair point. I've been programming for 30 years, and maybe 20 professionally, and C style for loops are simply part of my life. They are instantly recognisable and understandable, and they do clearly what they say. Conversely, the Swift style replacement is incredibly unfamiliar, and I have to consciously stop and read it carefully when I see it. I'm sure it'll become familiar eventually, but for now it's measurably worse for me, and I'm an experienced programmer. 
How is "For thing in another thing" hard to read? You don't have to keep track of the meaning of a single abstract value.
Apple will win 90% of the time but IMO this is justified because * They contribute &gt;90% of the code * The creator of the language works for Apple * The whole core team works for Apple When more of the code will be contributed by the community and the core team will be more diversified the community will probably have more to say.
I think OP is asking if it's worth the headache of managing two separate languages in one large project, not the merits of swift. OP, if you have a massive obj-c project with a large number of CocoaPods and haven't migrated to dynamic frameworks yet, you're going to have a bad time adding swift code to your project. My project took nearly two full days to build successfully when I tried to compile both objc-c and swift. ReactiveCocoa and RestKit were the worst. But that said, it's worth it. 
Are you sure on that? The post and requiring the iterating class on the collection doesn't seem to suggest that.
you can still write c style loops and use that code in swift xD
I totally agree that Apple is of course working in their own self interest. All I am saying is that at this stage it is justified and probably always will be since they contribute the most resources and they employ people who created the language. Nevertheless the community has something to say and can propose changes to the language. If the change is aligned with the core team vision for the language it will probably get implemented. Recent example is the proposal of [removing C style loops](https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md) by an external developer.
&gt; I certainly wouldn't use it anywhere but to write native apps for their products. How come?
I had a decent size project I gradually rewrote to use Swift. It was a bit time wasted originally figuring out the bridging headers, how you make stuff visible to Objective-C and visa versa. But once you got the initial stuff setup and working it really works rather painless. The great thing about Swift and Objective-C is that because of extensions you don't have to rewrite e.g. whole files at a time. You can separate out some methods into extensions and just rewrite the extension to Swift. If you want to influence your project as little as possible you could just put the swift code in a framework because your objective-c code can't tell the difference between a swift framework and and objective-c framework. Anyway this isn't a big deal, you aren't burning any bridges if you decide this isn't for you after all. There are minimal changes to your exist project you need to do. Stuff that is very easy to remove later.
Fair point.
I was defining complexity as how many different language constructs there are and how many ways to do the same thing there are. In that sense, it makes it more complex.
&gt; Conversely, the Swift style replacement is incredibly unfamiliar What? So are you saying that C#, Pythonm, Java and many other languages' for-each or for-in are "incredibly unfamiliar"? If that's the case, I guess you'll just have to accept change and innovation. I don't think anyone would design a *new* language (which didn't aim to borrow from C) with the old loop syntax.
&gt; Is the fact that it didn't require significant language support or keywords really a bad thing? In this case it means that you have little change of guessing what the language construct does. It's not hard to guess what `if x &gt; 0` does.
&gt; I don't know how applicable this is in Swift It's not, in Swift you'd have an iterator so you should already be writing for p in list { … } &gt; Probably people don't use linked lists much when better collections are available, but that's an example of what goes beyond the "counting an integer" for-loop. Most of these uses are already subsumed by "proper" iterators
I can see how this particular syntax is terrible for picking it up. In languages like Python you'll see for index in 1 to 5 &amp;nbsp; for index in 1 until 5 And coming from that, I was able to pick up Swift fairly easily. I don't think Apple chose the best syntax for ranges.
Using `to` and `until` does read a lot better. When I first saw the `...` syntax it took me a short while to grasp what they were on about. 
I don't think I have used the for loop in Swift more than twice. And I've been writing Swift since it was released. I use for in loops a lot though.
Your screenshots need to be Retina display ready @2x. 
Should we really be outright guessing about language constructs? I get your point that we shouldn't have to do so and that seems reasonable enough to me. That said I do think comparing the 'for' and 'if' statements a bit of a stretch given the degree of difference in functionality. Not arguing with the greater point; just interested in understanding others thoughts on these matters. Thanks for taking the time to explain your perspective!
I've been taught to use for-loops specifically over while loops in every single class and resource I've come across. Seems pointless to go against that.
The problem is that in general, the debt can be divvied up in an infinite number of ways. You need to define how exactly you want to divvy up the money (e.g. think of an example with three users, one expense each for 100$, 10$ and 1$ - how would you split up the remaining debts?) It's possible that, once you know what you're actually trying to do, the solution is quite obvious. It's also possible, of course, that you know exactly what you want to do, in that case tell me and I'll try to help out.
&gt; something You have three choices: ObjC, C++, or Swift. I'm not sure what point your are trying to make. Want to talk about the merits Lisp next? Maybe Haskell? Swift takes a day or so to get used to if you know ObjC. Nerds love running into the weeds. "Stay on topic" ... "Stay on topic" 
Swift still uses clang to compile into C code. I understand Apple wants to remove everything about C in Swift, but simply the structure and how things behave in Swift is going to mimic C and Objective-C no matter what.
Yeah, that's why I find it so impressive how well the team has done making it not look like C. It's still a little staggering to me that it's all the same thing under the hood. 
Some people say it bogs language down and developers have to spend way too much time maintaining it, others say that re-adding it would be trivial... go figure.
Well in the example you gave I would go from lowest to high and have the person who owes one dollar match with the person who owes 10 and then math him with the 100 but the issue I'm running into is making it exhaustive to go through each user dictionary and their "sub" dictionaries to make sure I'm pulling the right values, I tried doing that in the last for loop with a "tempUp" and "tempUser" but ran into issues making it exhaustive enough to make sure all values are being hit and how to make sure the values are all synced between the 2 parent user dictionaries 
&gt; You have three choices: ObjC, C++, or Swift There are a few Javascript frameworks along with C# and many other less-mainstream languages as well. Your hate for Objective-C doesn't automatically make Swift the best language choice. 
Yes. I do all my development on a 13 inch screen, and the 6 Plus's size doesn't come anywhere even close to fitting at 100%, and Apple accepted my screenshots.
Less typing for a common operator *and* they're not expressions. `--` and `++` are redundant. They were only in C because in the early days, `i--` and `i++` would compile to different machine instructions than `i -= 1` and `i += 1`, and because they are expressions. However, the use of `--` and `++` can often be confusing and tough to reason about quickly. For example, this code is not easy to read at first glance: let x = 1 var y = 2 let z = x - ++y let z2 = x + y-- print(x) print(y) print(z) print(z2) Swift's type system at least prohibits insanity like this: var x = 1 var y = 2 let z = --x++ + ++y--; But part of the goal of Swift is to make programs easier to express and prevent programmers from making dumb mistakes. It seems like the removal of `--` and `++` are well within the scope of that goal.
Do you plan to submit this as a PR back to the original project?
Three docker containers will build/test Swift packages for Ubuntu 14.04, Ubuntu 15.10 and I just got Fedora 23 working. The Fedora version should work for CentOS and Redhat too, but I haven't tested yet. Let me know if you have any questions. 
Super helpful. Thanks!
I am curious to what extend Swift can really become used in core computer science curriculum. Java is so widely used that schools will likely say that that makes most sense to use. On the other hand Java is a pretty shitty language to teach programming in. From the very first lecture you got to throw a lot of stuff at students, while swift will allow you to write hello world with just one line of code, and people can play around in a REPL environment. With Java students are exposed to classes, methods, public, static etc right away. With Swift you can teach a lot without ever talking about classes, access modifiers etc. But then there is the issue that pretty much anything from Apple will always be controversial. It will probably be seen as a lot more diplomatic to pick say Python as an intro language.
The school I study at teaches Python for all introduction to programming and algorithms courses, then Java for Software Engineering papers. I think the verbosity (ie `string.characters.count` vs `len(string)`)of Swift's standard library makes it less approachable than Python, even though it could replace both Python and Java (on an infinite timescale).
The only thing I thought that the Tunebook class might not be the best place to put this is that the JSON contains data for multiple Tunebooks which are then imported into the Tunebook entity in coredata. In your solution how would I call the class method in Tunebook without creating an instance? Would it be creating a convenience init for the class? Sorry I'm still learning and obviously haven't worked everything out yet.
This was a fun challenge :-D I implemented a solution, but it doesn't look too similar to yours: In my solution, I "balance" the books, i.e. I compute a balance for each user, that is the amount they spent minus the amount they consumed. The total of the balances is always 0. From that, it's a little easier to compute the money transfers needed between the participants to get even. My approach is this: Take the person who owes most and the person who paid most. The debtor pays the lower of the two amounts to the payer. (Eg. if the payer is owed 100$, but the debtor only ows $50, the debtor pays the $50 to the payer. He now has a balance of 0 and is done (The payer is still owed $50). The other way round, if the payer is owed 50$, and the debtor owes 100$ total, he pays $50 to the payer. The payer now has a balance of 0 and is done, while the debtor has a balance of -50$). We repeat this (compute highest debtor and payer) as long as there are people with a balance that is not 0$. At some point, all debts are paid. In fact, this number of payments required to get even is at most the number of users (easy to see since in every iteration, at least one of the users' balances becomes 0), and at least 0.5 * the number of users (which happens if the payers and debtors pair up perfectly, e.g. the highest debtor owes as much as the highest payer paid, and so on). Both are optimal best and worst case performances, which isn't to hard to see and prove. It doesn't always compute the lowest number of payments possible, though. In my tests with some numbers, the results also seemed very reasonable, so I'm happy with the solution :-) (It's just a bit inefficient, but I don't think you'll have that many users sharing a single expense). I made added quite a few comments, since I figured you might have problems with my a little functional-ish style. I posted a gist here: https://gist.github.com/julasamer/0aad71d560b8e8b70057
Thanks for that, I must have read it at some point but not really understood I could call a method without creating an instance. That looks ideal and has shortened the code to let result = Tunebook.importJSONTunebookFile(jsonSeedDataUrl!, coreDataStack: coreDataStack) Thanks for your help. its been a long while (15 odd years) since I've done any serious object orientated coding. I've forgotten a lot and a lot has changed but I'm enjoying getting back into it.
&gt; I think they're aiming for Swift 3.0 to be the "no more big breaking syntax changes" release. I think they are going for binary compatibility, not syntax compatibility. 
&gt; I don't know how applicable this is in Swift, but in C I think part of the point of cleaning up cruft like this is that they want to push people to write idiomatic Swift instead of thinking in other languages and trying to ape the way they work in Swift. If you want to write C, write C. If you want to write Swift, write Swift. You aren't going to get good results by trying to write C-style code in Swift and they are discouraging you from trying. 
Yea I realized that in scope once I was reading your replies, hopefully someone down the line will have a similar money exchanging problem and tried to do it with dictionaries like I did and finds this post
Please share your comments re. 8Wonders, especially any ideas/recommendations to enhance the app UI, design and/or user-friendliness. I have just launched my startup company, 8Apps, in Sydney Australia. I am passionate about high-quality Swift apps and already published 4 on the AppStore: 8Calc, 8Alarm, 8Timer and 8Wonders. As a startup, I am open minded to listen to all conductive suggestions re. building and promoting Swift apps. Thank you in advance.
Swift doesn't have garbage collection. If it doesn't behave as you expect, you don't understand how it works. ARC has been used for maybe 4/5 years now (even in Obj-C); it's a compiler feature and is in basically every iOS app. I would be very surprised if you found a problem with it. Not saying it couldn't happen, but you should double-check your expectations before blaming ARC.
This might be a case where its simpler to just not use Auto-layout. Since you are going to need to manually calculate and layout each button anyways.
Not to spam you with replies or anything, but I added the ability to run only the specified spec files with the latest patch release, 0.1.4. `./.build/Specs/Specs Sources/Specs/WhateverSpec.swift` now works as you'd expect.
Seems like https://github.com/ReactiveKit/ReactiveKit is what you would start a new project with, though I would probably still use [RxSwift](https://github.com/ReactiveX/RxSwift) for its community &amp; maturity.
I haven't tried using this with swift yet, and I haven't touched in in several months, but have a look at https://github.com/armcknight/MaVec if Accelerate/simd isn't enough for what you need. I reeeally want to rewrite it in Swift. One day...
Because you can make your own custom operators in swift. See this source file from their library: https://github.com/Hearst-DD/ObjectMapper/blob/master/ObjectMapper/Core/Operators.swift infix operator &lt;- along with the global public functions defining its use scroll down in the apple docs to Operator Functions: https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html
FlatMap is pretty simple on a type like Optional. Essentially, you're taking an optional, and if it's value is present, returning a particular optional of your choice. Otherwise getting nil. So you get to get the value out of an optional, and chain it into a new optional, where you get to decide if the result is nil or not, with the exception that if the input optional is nil, the output is nil. Map is even simpler. If the optional isn't nil, you get to transform it into another non-nil value. This concept comes from the much broader category "Monad". Monads are infamously hard to understand, but if I were you, I'd look into understanding them. It's really insightful. [This guy has a relatively easy to understand explanation of category theory](http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/), albeit long-winded. I absolutely recommend learning Monads from the perspective of category theory instead of the perspective of "what is a Monad in programming?" It provides such a clearer understanding if you approach it from its roots. Once you have it down, applying it to programming will be a breeze.
 func forEach&lt;T: LoopType&gt;(start: T,end: T, delta: T, body: (T) -&gt; Void) { var it = start while it &lt; end { body(it) it += delta } }
I think you need to read up more on what the real issues of programming language designers are. Their main problem isn't that their language doesn't have enough features. Most of them struggle with defining a minimum set of features which are as independent from each other and which can be mixed and used in powerful ways so you don't need to have lots of special cases. Just dumping in lots of features is the easiest thing to do. Good language design is all about keeping the feature set to a minimum. C++ is a great example of what you get if all you care about is adding features. It requires extensive training to be good at it, because there are so many things to keep in mind and be aware of. Compare that to Go, Scheme, Lua and Smalltalk e.g. which can be picked up very quickly. 
Well, I didn't make the library itself, I just used on my las project and its awesome :) But I'm totally with you on that :)
I too would like to know. Downloading my app (it passed review) gets an 18mb file. That didn't seem too big to me.
Why didn't you buy the damned consonant? Would it really have been that much more work to do "last project" instead of "las project" seriously it's one more character and removes any ambiguity.
Open the app called Preview on the mac. One of the menus allows you to view and change image size (one of the menus to the right side, I'm not at my Mac sorry!). Set image sizes to be as per below link. However if you run the simulator from xcode and take a screenshot (by going to the menu in simulator and choosing the option of taking screenshot, NOT by going cmd-shift-4 or similar) it will take a screenshot at the res of the simulator. Ie if you chose to run simulator as a 6+ you will get a screenshot at the correct size for AppStore submission for a 6+. http://stackoverflow.com/questions/25783705/app-store-screenshots-sizes-for-all-devices Reply if still stuck.
protip: try adding '-taylor' sans quotes in any Swift searches on Google. Much more helpful! =]
Agree you got totally valid objections. It is definitely limits to how far you can pull this for the reasons you give. I was more concerned with advocating the possibility of using plain C and probably downplayed very real issues. It is just that so many Objective-C developers treat C as if it doesn't exist at all and never even consider whether a given problem can be solved better in C or not. Of course as Objective-C has evolved structs have become more cumbersome to use. You can't stick NSString objects in them e.g. Anyway I don't see much point in either Objective-C or C anymore as we got Swift. 
I assume that you would need some kind of iteration over what the user types, and then parse the keywords and implement them using NSFontAttributes maybe? ...just an idea.
I've only worked on iPhone apps so not the best person here to help but as noone else has chipped in yet... The two approaches you've outlined are: 1. If brightnessSlider is clicked, do something 2. If timer fires, do something What you **need** is: If keyboardBrightnessButton is pressed, do something Your app needs to 'listen' for events from the keyboard, in Swift you listen for events by specifying a delegate for the thing you want to listen to. This is pseudocode but I guess you want to do something like: class MyClass:UIView,keyBoardDelegate{ var myKeyboard:UIKeyboard override func viewDidLoad(){ myKeyboard.delegete = self } @IBAction func keyboardButtonPressed(sender:UIKeyboard){ if(sender.buttonPressed == brightnessButton){ getBrightNessLevel() } } } **NOTE** This isn't meant to be a solution but might point you in the right direction. You might want to look for 'how to listen for keyboard events' or 'how to set a keyboard delegate for a physical keyboard'
[removed]
Around 7 days currently. There may be a rush of people trying to be reviewed before the christmas break.. in which case they probably won't get to your app until after christmas. Edit: yes, this is normal and yes, it is bad :)
&gt; multiplier to increase / decrease size or position But my method is easier and faster. I only need 1 line of code. My game called [Chomp'd](https://itunes.apple.com/us/app/chompd-how-long-can-you-last/id1023110939?ls=1&amp;mt=8) is exactly implemented with scene sizes of 2048x1536 and aspect filled and works well and good across all devices from 4S, 5, 6, and iPads. Adding a multiplier would take a lot of work because I would have to implement it for each object being added to the scene and scale them, as opposed to 1 line of code. Depending on the background of the game, the 2048x1536 ensures that the background fills the entire screen nicely and scales somewhat down on smaller devices but not completely.
Yeah I figured this might be the case, but the syntax is so different from what I'm used to, that I get lost in the no completion zone very easily.
You're a wizard. Thank you so much.
Quick follow up question, how would I go about properly implementing the PromiseGenerator protocol? I've tried... class TestPromiseGenerator: PromiseGenerator { func next() -&gt; Promise&lt;String&gt;? { return Promise("Hello There!") } } ...thinking it might be able to infer PromiseType, but it's telling me I'm not conforming to protocol 'PromiseGenerator'. EDIT: Turns out it can't infer the type, but if I change it to: class TestPromiseGenerator: PromiseGenerator { typealias PromiseType = String func next() -&gt; Promise&lt;String&gt;? { return Promise("Hello") } } It works fine!
They were whizzing through approvals as of last week. The App Review Times site ways saying 7 days and I got mine approved in 2. Now that they are up against their holiday shutdown, that's likely gotten longer.
http://appreviewtimes.com/ says 6 days currently, but it seems to be speeding up a touch. We had our iOS/tvOS app bumped on a bug last Friday (after a 7 day wait) and I resubmitted late Saturday, getting the review back this afternoon (5 days)
I think Apple's "The Swift Programming Language," the upcoming 2.2 Edition, should be considered added to the Free Books list now that's available DRM-Free from Swift.org.
map is a great construct. It takes every element of a collection and transforms it to something else while still returning an array. for-in loops are great when you want to do something with side effects and when you don't want to have an array at the end. you could do a map().reduce() to make it into one value at the end but really just know that map is a tool to use when you think it might be better than the other tools. coming from ruby map/inject(reduce) are tools that I used often because they were easy to use. the functional programming style that swift exposes is a bit more cumbersome but is pretty good and is useful. 
Use map to transform collections of things. Use for loops to "do something" for each thing in a collection.
&gt;for-in loops are great when you want to do something with side effects and when you don't want to have an array at the end. Could you give me a basic example of a for-in loop causing a side effect in the specific realm of iOS dev?
Awesome, thanks for the example :)
You can use the `GLKit` module: import GLKit which features stuff like this: GLKMatrix4MakePerspective(GLKMathDegreesToRadians(85), 4/3, 0.01, 10.0) GLKMatrix4Rotate(matrix, GLKMathDegreesToRadians(45), x, y, z) GLKProjection(...) and more. Check it all out by CMD-clicking `GLKit` As @MaddTheSane already mentioned there's also `simd`, which has some of these methods as well. You can actually use both `simd` and `GLKit`, because the matrix types `matrix_float4x4` from `simd` and `GLKMatrix4` have the same memory layout. Bridge them like this: func toSimdMatrix(m: GLKMatrix4) -&gt; matrix_float4x4 { return unsafeBitCast(m, matrix_float4x4.self) } func toGLKMatrix(m: matrix_float4x4) -&gt; GLKMatrix4 { return unsafeBitCast(m, GLKMatrix4.self) }
Depending on how much you need to do, the matrix class in [Swift AI](https://github.com/collinhundley/Swift-AI) might do the trick. It supports basic matrix operations right now, but it will be updated soon with a lot more advanced features. It's native Swift and uses SIMD for a nice performance boost.
It's nothing to worry about - in fact I've never seen an app that DOESN'T produce this warning. Basically, when you archive your app it produces an "API Analysis File" which is a breakdown of every call your app makes to any of Apple's frameworks. This allows them to see which services you're using, and if you're using any private APIs that are considered off-limits. If your app is big enough (which doesn't take much), this file gets "too large" to send to Apple. So instead, they just run same analysis on their servers after the upload finishes.
I'm new to this myself, but my understanding is that the closure can't break out of the loop, so those constructs aren't suitable (over a for loop) in those scenarios. I want to believe that forEach() is a preferred option over a simple iterating non-breaking loop. 
dispatch_apply would execute it in parallel, which would cause the chunks to be appended to the file out of order.
Good call there, I did re-read dispatch_apply. 
Just my two cents but the traditional c-style for loop is being removed on swift 3.0
There's an obvious functional difference, also a semantic one. You're mapping elements of a collection to something else. In a loop, you just traverse through the collection, no result returned. Btw, there's also .forEach which is closer to for-loop than .map
`map` transforms a whole array (or other sequence) into a new array. You should not use it for any other pattern but when this is what you need to do, use `map` unless there's a strong reason not to. Situations where you'd clearly use `for` instead: * Side effects (you want to change variables outside the array) * Mutate the array in-place instead of creating a new array * You are not traversing in-order And sometimes: * You don't want to transform the whole sequence (skip some or early exits) (sometimes you can do this with lazy filtering instead, sometimes a `for` loop is more appropriate)
Remember for in loops are being removed. https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md
Wow, useful info. And I had just nearly completed writing a native swift matrix and vector class! Does GLKit use the GPU for Matrix operations? Any performance benefit for doing the matrix math in GLKit and then casting to a simd struct for passing to OpenGL?
That's also a lot less efficient since it will be looping over the array twice instead of once.
It's slightly less efficient, but both grow at O(n)
This: `grid = Array(count: rows * columns, repeatedValue: [0])` doesn't make much sense to me. Did you mean something like `grid = Array(count: rows, repeatedValue: Array(count: columns, repeatedValue: 0))`?
Wondering the same thing. I used to use Cocos2D. But have not even touched it since SpriteKit/SceneKit
We just took a look at error 132 on the backend, and that is indeed an "Index out of range" error you're getting. Our next update to the Sandbox should give a better error message. (I left the same comment on the SO question.)
&gt;to "do something" for each thing in a collection funny that you use those exact words... collection.forEach { $0.doSomething() } 
If you care about efficiency, you could use does a forEach instead of a filter collection.forEach { if $0.selected { $0.doSomething() } } though that kind of defeats the whole point.
I maintain that if you're gonna do imperative stuff like that, you may as well use a loop. Just as clear, and supports break/continue/return/etc...
I agree; take a look at [this](https://www.reddit.com/r/swift/comments/3xanxa/when_to_use_map_vs_for_loop/cy3v1ov).
heh, nice. FWIW for that example, I would probably just do: [1, 2, 3, 4, 5].prefix(3).reduce(0, combine: +)
The solution is that you use `possibilityMatrix` to check for if numbers exist in a row, column, or box, even though you're constantly updating it with new possibilities. This messes with your results. I left a more detailed answer on Stack Overflow.
If it has C bindings can you use an obj-c bridging header? http://spin.atomicobject.com/2015/02/23/c-libraries-swift/
I haven't used sprite kit, but my other apps resize things to the view programatically to solve XIB issues where its just too hard in IB. I would definitely make sure the view is limited to screen size. The below is used by me on a pop up dialogue. But modified it may be similar to what you need boxView = UIView(frame: CGRect(x: view.frame.midX - 90, y: view.frame.midY - 100, width: 180, height: 50)) Edit: Somewhat closer to the mark may be this. Create a view (myView) in IB then apply content to it programatically would be the way I'd do it. myView.frame = CGRectMake(0, 0, self.view.frame.width, self.view.frame.width)
I may be able to, but SpriteKit doesn't use a lot of UI. Ill test it out when I get a chance(:
In my opinion this is not confusing. There are two reasons for that: 1. If class inherits from some superclass and conforms to some protocol, then a superclass must be listed first. Swift doesn't allow putting protocol before the superclass. 2. Naming conventions for protocols. Look at all protocols available in Swift. Almost all have names which end with word Type or suffix 'able'/'ible' (there are very few exceptions like Any and AnyObject but you don't ever explicitly conform to those protocols in your own code). The same thing is with protocols available in iOS SDK. Most of them end with Delegate, DataSource etc., so it's easy to distinguish them.
That's why protocols should be named distinctively :) Also, there's always 1 superclass tops. Of course, there can be a class with with a protocol, but no superclass at all.. I never run into any readability issues to be honest. I try to follow Apple naming pattern as much as possible and use *Delegate or *Protocol.
You may use `extension`, and keep only the superclass or the most important protocol conformance there.
This was actually the Cocoa naming convention. The draft API design guidelines of Swift 3.0 instead encourages nouns for protocols which model a matter, and adjectives ending with `-ing`, `-ible` and `-able` for protocols which describe capabilities. https://swift.org/documentation/api-design-guidelines.html
Regardless of whether it's a superclass or a protocol, it's an inheritance relation. So it makes sense for them to be declared the same way. And anyway, there are two mechanisms to distinguish the two. 1) The super**class** has to be declared first (as others here have said). 2) It is typical that protocols are implemented in separate extensions, thus not appearing next to the superclass. This should be the preferred style.
Thank you very much. How does this know what size device I'm on? (different sized iPhones, not iPad)
The switch statement won't work for you then. But `self.scene?.scaleMode = SKSceneScaleMode.xxx` should work Edit: [Here is the Stack Overflow ](http://stackoverflow.com/questions/25205882/dealing-with-different-ios-device-resolutions-in-spritekit) post that explains what each one does. 
the first example is right but it sounds like OP needs a `UILongPressGestureRecognizer`. Also don't forget `userInteractionEnabled` is false by default on a `UIImageView`
[This post](http://appventure.me/2015/12/08/swift-ubuntu-x11-window-app/) walks through the process of creating a module map and using it with the swift package manager. I believe it should work in your case as well (you said it has c bindings).
I doubt Xcode is necessary, would just need to figure out the compiler flag it's using
Anything is possible. It would likely be a third party solution though. As for cross platform unless somebody comes up with a framework or cross platform GgUI port I don't see much happening here. Beyond that Windows is in its dark ages, I'm not sure when it will reemerge as something cool. 
Swift is open source now, anyone can write a compiler for it. It's only a matter of time.
Microsoft has officially stated that they are writing a swift compiler. A bigger issue will be getting gui work cross platform imo. 
Microsoft has already demonstrated that they're willing to devote significant resources into bringing iOS developers to Windows, including adding Objective-C support to Visual Studio and implementing a UIKit compatibility shim. That effort apparently also includes a Swift compiler, but they haven't released anything yet. What form it will take, and when, is anybody's guess. If and how they plan to interoperate with the CLR and the existing Windows SDKs is the big question.
Is it really? C#, Java, Python, Ruby etc would be more cross platform wouldn't it? Go even would be more cross platform. C++ often require a number of ifdefs. One has to deal with different definitions for integers etc which can cause problems.
That would be neat. Give me a native way of making a command line Swift project that can compile and run on Mac, Windows and Linux.
This is called a Computed* Property. You can find other examples here. Basically this variable doesn't directly store a value -- when you reference it, it runs that code to determine what value to return. https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html#//apple_ref/doc/uid/TP40014097-CH14-ID259 *fixed typo
Thank you! I was having a hard time finding out what to research in order to learn about this. I really appreciate the help.
&gt; Computer Property It's a computed property 
&gt; https://github.com/ewmailing/IupCocoa That looks really cool. I never even heard of IUP.
Gonna need a bit more information than this. Either you're unwrapping the `Int?` when `text` wasn't a properly formatted number (empty string and leading / trailing spaces are ill formatted). Or `text` is nil (I'm not sure if text is set to nil or empty string when the field is empty). We need to know where your code is crashing, what the state of the text field is when it's crashing, and what triggered the crashing code to run.
Read this. It is very well done. The Swift Programming Language (Swift 2.1) by Apple Inc. https://itun.es/us/jEUH0.l
I'll try to answer these... &gt;What are variable types in Swift such as target, selector etc? These are essentially functions for interoperability with objective-c. You should read up on target-action to understand what this is for. But really, don't worry about that - its basically just saying "call this method (select) in this class (target)" &gt;Why doesnt it use something similar to Java like data type? Not sure what you mean by that - "data type" is a super general term. &gt;Why are the method names so long/weird? Two reasons: 1) Labels in arguments make your code _very_ understandable - its basically documentation without any work 2) Xcode's autocomplete is excellent and completely removes the pain of writing long method names &gt;What are protocols and delegations and the equivalence in Java? Protocols are just another term for interfaces, traits, etc. Delegations are basically to do organized callbacks - you do the same thing in java (i.e. subscribing to events by implementing an event listener interface). Keep in mind my experience in Java is very limited. I would like to note that although Swift can technically do everything that Java can do, writing Swift like you write Java will lead to bad code and you wouldn't be taking advantage of a _lot_ of features. The book that Mateo linked is most definitely worth reading.
Microsoft is also already working on that for [objc](https://github.com/Microsoft/WinObjC). 
It makes sense when you consider this bit later in the Matrix definition subscript... -&gt; [Int] { ... return grid[(row * columns) + column] ... } But your solution seems smarter. I must say, I didn't write that part, I just copied it from the Swift documentation on the apple website and then slightly modified it. 
I've actually been working on one. Foundation doesn't even have an HTTP parser though so I've had to write my own, since the available C http parsers are not swift idiomatic at all. The whole project does depend on Grand Central Dispatch getting ported to Linux, so it doesn't compile there yet. But that's only a matter of time. I'll share my progress on GitHub when I finish the request / response relationship so that the community can help me decide where to go from there.
Your force unwrapping the text property, I'm the case of an empty text field this would be nil 
Really bad name and weird website, they should work on these to get more visibility imo
I wasn't actually aware of CFHTTPMessage. I thought I had seen everything Apple had on networking. I stand corrected! Thanks! Makes my job a lot easier. EDIT: Actually, the `CFNetwork` module doesn't appear to be one of those that Apple is making cross platform. So this won't be available in Swift on Linux. EDIT2: That said, you're still probably right. I'd probably be better off making a Swift binding for [this](https://github.com/nodejs/http-parser) than letting me shoot myself in the foot.
Yea I'll be putting it up before long. I'll post on this sub with it when I have request → response working.
Not the prettiest implementation in the world, but this will give you a nice `join()` method for any `CollectionType`: extension CollectionType { func join(separator: String) -&gt; String { if count == 0 { return "" } return self[startIndex.successor()..&lt;endIndex].reduce(String(first!)) { $0 + separator + String($1) } } } Example usage: [1, 2, 3].join(", ") This could be modified for `GeneratorType` and `SequenceType` as well, but I'm lazy so I'll leave those as exercises for the reader.
The code you provided would read data from a file at the give URL from disk. Is that the intention? If so be sure you use 'fileURLWithPath()' when constructing your URL. If you're trying to fetch from a remote server, you'll need to handle the network transaction with a class like NSURLSession. 
Wouldn't this project do most of what you would need? https://www.perfect.org/about.html
We would have posted something about our recent Linux release, but Reddit admins have asked us not to post "spam". We released a Linux version mere days ago! (Perfect is an enterprise grade framework for web dev - https://github.com/PerfectlySoft/Perfect)
Yea basically. The server receives requests as a stream of bytes on a TCP connection formatted to the HTTP protocol. The HTTP parser's job is to read that TCP stream and parse the HTTP message that's coming in on it.
Cool. I'll take a look.
Yeah unfortunately that's probably a bit too old. You could still use it on Linux though (with the debugger).
Oh, swift most definitely has data types! It's strongly typed and the types need to be stated in a function. You can also call that function without using selectors- those are purely for interpolating with objective-c code (i.e. Uikit, unfortunately).
&gt; It seems like in Swift, the target, selector etc are used in place of the data types of other methods which kinda throws me off a little bit. You must have misunderstood something here, and you also seem to mix up a lot of different things in that sentence. The object model of Swift is pretty close to the one in Java, .NET and C++ on a high level. &gt; (I guess I don't quite understand the need to specify the target, selector etc when Java can seemingly accomplish the same thing without needing to specify those things) This... makes very little sense, but I guess you're talking about some aspects of the Objective C model. This is Swift, though.
If `something` has type `Int?`, how are you doing `something + 1`? Wouldn't that need to be `something! + 1`? If it's crashing at `(something! + 1)`, that means `something` is nil. So that means `Int(numberofsuccesses.text!)` is returning nil. The Int constructor used there returns nil if the string you gave it wasn't a properly formatted number. So at some point, `numberofsuccesses.text` isn't a valid number. If it's a blank string, or if there are any other characters besides digits, it will return nil. So there can't be spaces or unit characters or anything. Regardless, it's a bad idea to use a text field as your method of remembering a number value (because stuff like this happens). You should just have an Int value storing the tracked number of successes, and update the text field whenever you update the Int value.
If you're feeling really bold, and want to read something really complicated, read into category theory so you can learn about Functors and Monads. That's where `map` traditionally comes from. [Here's](http://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/) a good resource on category theory.
I just started an app in Swift 6 weeks ago and a lot of frameworks from companies like Facebook, Amazon, LookBack.io all have their libraries written in Objective C. Sure a bridging header is all that's required for importing their headers but they don't always tell you how to use their SDKs in Swift and you have to either figure it out, Google a bunch or have a hybrid app. 
I programmed a decent amount in C++ for school, but never used any libraries
I won't argue that it's helpful to know objective-c. But making apps with only knowing swift is absolutely no problem. Haven't touched any actual objective-c code since I've started using Swift when it came out. 
Is there any difference in time between accessing a class or struct's data members? I ask because you seem to be knowledgable on the subject, while I am not. 
Thanks champ.
You cannot simply load a remote URL with NSData.contentsOfURL:. You need to use something like NSURLSession or Alamofire first to actually get JSON data from the remote server
It depends on inlining, devirtualization, and ARC optimization. As I understand it, the influencing factors are: • If final/private/whole-module-optimization can prove that it's a specific type and not a subclass, then dynamic dispatch can be avoided • If in the same file, or whole-module-optimization is on, static dispatch can be inlined into the caller • If the type can't be proven, then partial devirtualization can happen where the compiler inserts a type-check, then the inline code, and a dynamic call for if the type-check fails to match the guess • If the call is through a protocol-constrained generic rather than a known type, then it may have to dispatch through the protocol's witness table (the compiler can produce specialized versions of generic functions to avoid this) • (Swift 2.2) If a class allocation can be proven to not escape the function, it can be moved on the stack, and refcounting removed • (Swift 1.x only) Accesses to class members may need to retain self, which takes time structs are always final and usually stack allocated, so basically get the best-case-scenario behavior of classes. However, you may end up paying more in copying costs than you save in other costs; it's very situational. Copy-on-write structs like Array are implemented by having a class instance inside, so pay some of the costs that classes do, like refcounting.
Don't you need a Mac with Xcode to compile iOS apps no matter what, as of now?
I would take a look at [Zewo](https://github.com/Zewo) - its very composable, modular, and fast. [Here's](https://github.com/Zewo/Examples) the example repository, though its a little bit dense at the moment (it'll be separated into multiple steps soon).
Getting a bit far afield, but a while back I saw a great paper from some IBM researchers showing deep equivalences between referencing counting and tracing garbage collection for automatic memory management. It's still probably best to not muddy the waters though, like you say.
NSDates are immutable. You can't change it, but you can do date math to make a new one. Generally you do date math with respect to a specific calendar and time zone. Don't be confused by how the debugger displays an NSDate. Under the hood, it's really just a double-floating-point number of seconds since the reference date, and has no time zone (that is, Universal time)
Internally, what would be the extra functionality of a class that is redundant in a situation like this? Both can hold functions, variables, destructors,... sorry for the noob question, but that part still isn't clear to me.
&gt; * To be able to mutate the struct's property, instances of it must be declared with var. This does in fact aide the compiler in performing optimizations based on whether the data may or may not be mutated in its lifetime. That's actually quite interesting. In case of structs, what would be more performant? using var or let? &gt; * When instances of a struct are assigned to multiple variables, mutations are not shared amongst those variables (that is, "deep" copies are made as needed). Which is more optimal depends on your intent for the data. To me, this seems to be less performant? This of course depends on the implementation of structs, could it be that fields of a struct only get copied when an instance of this struct gets changed? thanks for the response! 
In the sizeThatFits method, I was passing CGFloat.max as the height value. Why would that not be sufficiently large to allow the method to perform properly? Also, a UITextView is not required. A UILabel would be fine if it works. I did try using a UILabel, but I had the same issue. The cell did not fully expand to display all of the text. 
Also that you can make changes to the source code, and have control over when you update the engine
I don't really know if this is why you asked but I'll give my two cents about C/C++ in Swift anyways. You can access both C and C++ code from Swift but you need to use bringing header. Since Objective-C is a super set of C you can just add C code to your project and then make a bridging header and call if from your Swift code. C++ is a little trickier. You can add some C++ code and then wrap it in Objective-C++ and then use a bridging header to call the Objective-C++.
I went full Swift when it came out, and that culminated in a full-Swift app at the end of last year. Here's a link about it: http://making.duolingo.com/real-world-swift That said, I also know Objective-C, and I've been doing this for a bunch of years.
Hi, I think that one of the problems that copying of data with structs helps with is when people have to do defensive copying of objects when passing them to external APIs in order to ensure that those external APIs won't tamper with their data in unforeseen ways. Ever heard the term "defensive copying of data"? It's even a best practice in some Java circles. The copied data can also help with creating an aspect of immutable data that may play well with features like concurrency and threads, otherwise you'd have to be more careful with restricting the mutating accesses to the data via mutexes and such. For example, I have [some code](https://github.com/jpedrosa/sua_swift/blob/master/Sources/codeunitstream.swift) in a recent class that was responsible for duplicating the object for a sort of pool of objects. It was not used often though. Now that I have converted that class to a struct, I may revisit that cloning code and use the struct's own feature for duplicating the object instead. My code was originally a class in its version for another language. Now that I've brought it into Swift and turned it into a struct, I will have to change how the struct is used in the other classes when I have them converted to Swift as well, because in the old class I was passing it around via method parameters, which would now copy it unless we set the "inout" flag on the parameter declaration. But since there would be many of such parameters in the old code, that would be too many lines of code using the "inout" stuff. For the new code, I think I will try to avoid using the parameters and use a class field instead to hold the new object, ensuring that only one version of it is in use, avoiding duplicating the data too much or using too many "inout" parameters. Notice that Arrays in Swift are structs and already behave like that, so we may need to use "inout" when modifying the array when passed via parameters. I'm not too happy about having the separation of structs and classes. But the declaration of structs resemble classes a lot. When should you use struct rather than class? Using structs all the time would be a premature optimization. We could choose to use structs only when the performance gains would be significant and be considered critical to an interface. Structs could be used for holding onto some data and for operating on the data with some core methods. If you predict that you are going to use it many times from different kinds of classes, programs and libraries, it could be worth it. The performance gains from using structs over classes could be just 2x or 3x depending on the case at hand. It's in part because the implementation of classes in Swift may not yet be hyper-optimized like it is in other languages. Swift has features like "extensions" that other languages may not even have, though. Other languages may also use JIT to better optimize their method calls during runtime. Structs are perhaps an important aspect to Swift performance. They may even look like classes. But they are not classes. Class objects are passed by reference. Struct instances are passed by value or are copied around, unless we use stuff like "inout". Languages like Go also have differences for data that is passed by value and reference. Maybe the Swift compiler can help more than the Go compiler in aiding us to get the code right while taking those differences into account. The Swift syntax is also very handy and neat, so that the declaration of code in either classes or structs is comparatively well-supported. 
Apple has a better explanation at the differences and provides examples on when you would use one [here](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html) at the very end. Are you talking about the example code or the example from my code?
It's my first time hearing about this. I'll try to find out more in the documentation. Any suggestions on how to implement it?
That's an interesting way to think about it. Thanks for the tip. 
The information on the usage of SIMD in Swift can be found here: http://www.russbishop.net/swift-2-simd
You should also use [NSNumberFormatter](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSNumberFormatter_Class/) to properly convert string to number as it takes into account required locale. 
NSNumberFormatters are expensive, and not necessary by the looks of it in this case.
Xcode is just IDE but it supports Core Data http://www.raywenderlich.com/934/core-data-tutorial-for-ios-getting-started, because it is apple's framework for storing data. Lately I have been using Realm https://realm.io/docs/swift/latest/ and to be honest I find it faster and simpler. There is less to do to make it work. In the URL that I gave you , you will find everything that you need to start.
Create an NSCalendar instance using the calendar you want (probably gregorian) and then call this function on that instance passing in your NSDate object.
On top of using NSURLSession as suggested by /u/jagreenwood, you might also want to be careful about casting with the `as!` operator, since it'll cause your app to crash if the cast fails. You might try making a failable `init?` method instead, and have it return `nil` if the `id`, `item`, `description`, or `quantityOnHand` can't be cast with `as?`. And finally, instead of using `NSDictionary`, I'd suggest using Swift's built-in dictionary instead - you can use `[String: AnyObject]`. The rest of the code looks great! And just in case you need it, here's a tutorial for [parsing JSON in Swift](http://roadfiresoftware.com/2015/10/how-to-parse-json-with-swift-2/) that works with 2.1.
I've looked at that resource, but it's very incomplete. It explains how it works, and shows one operation where a vector and matrix are multiplied, but it doesn't give any idea how one might pass it to OpenGL as a flat array. Can this be done natively within the simd module? Looking at the Apple Developer documentation, which is also sparse, I don't see many choices for accessing the members of a float4x4 struct. Do you know the answer to my original question?
If you have an array in your JSON, you can usually cast to a Swift array of dictionaries (`[[String: AnyObject]]`). This is preferred over casting to NSArray, which doesn't specify type information about what's *in* the array, meaning you have to do more casting later. If you just have a JSON object, you can cast that directly to a Swift dictionary (`[String: AnyObject]`). Here's an example of how to cast a JSON array to a Swift array: http://roadfiresoftware.com/2015/12/reducing-clutter-in-your-json-parser-through-proper-typing/ Hope that helps - and remember, Swift arrays are better than NSArray since they give you more type information.
These are great questions, but unfortunately I can only speculate as to their answers, as to my knowledge such details are not part of the specification. Perhaps if /u/clattner or someone else more familiar with the compiler see this, they can give us an answer as far as the current implementation. &gt; To me, this seems to be less performant? The copying behavior is more about preventing accidental sharing; when assigning the same `CGRect` to two objects' frames, for example, it would be problematic if changes to it affected both of those objects. (If you haven't yet watched that WWDC talk, it really is awesome!) &gt; could it be that fields of a struct only get copied when an instance of this struct gets changed? I can say for sure that this is at least the case with the standard library's collection types (`String`, `Array`, `Dictionary`, `Set`, etcetera). However, in those cases it's achieved by making copies of those collections' dynamic storage: struct SomeDynamicStruct { class SomeBufferClass: NonObjectiveCBase { // Manage a dynamically-sized buffer of objects. deinit { // Deallocate buffer. } } // Instance of buffer specific to this struct and any copies made of it. var bufferInstance = SomeBufferClass() mutating func methodAffectingBuffer() { if isUniquelyReferenced(&amp;bufferInstance) { // Duplicate the buffer, so that changing it does not affect copies of this struct. } // Change the buffer. } } Whether or not the compiler also produces copy-on-write behavior with structs themselves – and whether it does so based on instances being declared using `var` or using `let` – again, I cannot say. My assumption would be "yes when appropriate," but take that with a grain of salt.
use this: init(fireDate date: NSDate, interval ti: NSTimeInterval, target t: AnyObject, selector s: Selector, userInfo ui: AnyObject?, repeats rep: Bool) Get the date when the scene loads, add .75 sec to it and make that the fireDate; make 1.5 the interval. The other stuff is the same as your example. Note that this is not creating a *scheduled* timer, so you must schedule it yourself (unlike `scheduledTimerWithTimeInterval(...)`. Alternatively, have an initial timer for .75 sec with no repeat, and all it does is starts the 1.5s repeating timer.
Semi-related, if you're familiar with JS SetTimeout and SetInterval, here's how to make similar convenient functions for Swift: http://peatiscoding.me/geek-stuff/javascript-settimeout-in-swift-2-0/
Thank you, but I am not.
Why is this better than just returning an `Either` that supports Functor and Monad operations? I know Swift doesn't have an `Either` type built into the standard library, but it's not hard to make, and it's a lot cleaner than passing continuations everywhere. Continuation passing is the kind of thing that results in Node.js's infamous "Callback hell"
WTH. You guys were far from spamming. Swift is moving quickly in some exciting directions and I come here for my news for that. I thought you guys were dropping the project or getting lazy. If the admins are censoring what gets posted I'm just going to go somewhere else. 
So, it's the UILabel's self.frame.width (after layout) minus any margins. You can inspect the view hierarchy in the debugger.
Thanks for your answer! This is something I'm truly interested in, I think I should really have a look at the *deeper* implementation details of Swift now that it's open source :)
&gt; Besides documentation, a lot of tutorials are also written in Swift, that might be annoying to some. Did you mean ObjC? 
They actually _were_ spamming, by reddit's definition. Nearly every single post/comment was a link to the perfect website/GitHub repository.
Not much help, I know, but can confirm that we too have not been able to find anything useful outside of the swift.org resources in the past month either. And we've been looking really hard. Things like the Fire IDE (http://elementscompiler.com/elements/fire/) and server-side Swift (perfect.org) certainly feel like they're heading in the right direction - but it appears as if these developers are building their own libraries outside of the Apple world as you're proposing to do. I'm pretty certain that in the months ahead we'll start to see more non-iOS/OSX activity for Swift on GitHub. I'd encourage you to build some yourself too.
[removed]
They aren't unless one uses @convention(objc)
 Oh, I'm sorry. I'm extremely new to iOS Development. Just been posting what I thought was interesting..
I ended up doing something like this. // code start let userDate = NSDate() var finalDate: NSDate! func resetTime(forDate: NSDate) { let dC = NSCalendar.dateComponents() let cC = NSCalendar.currentCalendar() let year = Int(cC.component(NSCalendarUnit.Year, fromDate: forDate)) let month = Int(cC.component(NSCalendarUnit.Month, fromDate: forDate)) let day = Int(cC.component(NSCalendarUnit.Day, fromDate: forDate)) dC.year = year dC.month = month dC.day = day dC.hour = 0 dC.minute = 0 dC.second = 0 finalDate = cC.dateFromComponents(dC) } // code end Thanks again for all the help. 
Is it just me or do the code examples not match their descriptions? I think this article needs an editing pass.
Not sure. In my library I tried to overload the "&lt;&lt;" operator, but the associative preference was neutral and apparently I needed it to be to be set to left but I wasn't able to change it. I could come up with another unique operator like "+++" that seemed to work, but due to ugliness and not being so standard I dropped the idea for now. I quite like the "&lt;&lt;" operator. I used it in Ruby and in Dart I could overload it for my File class there. Then again, in Swift we can just swallow any pride and use the string interpolation and concatenation features to get about the same effects. Using the string interpolation seems to be important in Swift because it enjoys a lot of the implicit conversions that Swift is able to do to get any type converted to a string representation. So that using something like &lt;&lt; "hey" &lt;&lt; 10 &lt;&lt; object would perhaps not be the greatest of the ideas either.
Sort of? It doesn't have the instant update and line-by-line printing of an Xcode playground. We compared it much more to an online REPL in its functionality.
I did :)
First example: &gt; let myFirstArray : Array &gt; In this example I’ve declared a new constant array that will hold values of type Int. I don't see anything declaring that the Array holds Ints. Second example: &gt; let firstEmptyArray = Array() &gt; Here we again use the Array keyword followed by the type of values that will be held in the array between a pair of angled brackets. I don't see any angled brackets.
/u/TaviRider - Should be fixed. It was my blog platform trying to correct Swift code for me! Thanks for pointing it out.
This is a hard problem. And it is not just applicable to Swift and 'functional', but occurs in any programming language and the use of certain features of that language. For example, even in C, which s (by design) a simple language, it was possible to write code (usually involving some combination of boolean logic, pointer dereferencing and auto[inc|dec]rementing, which was really difficult to fathom. Other languages, such as PL/1 have famously had so many features that it was possible to use obscure features in a straightforward and legal way which nevertheless was confusing to some not insignificant proportion of programmers. But then, exactly the same problem exists in writing English (and I assume other languages for writers of those languages): what words are appropriate to use for the audience I'm addressing? And moving up from the level of words, what sentence structures, metaphors, allusions, quotations etc will serve to strengthen my argument insofar as the 'average' member of the intended audience is concerned? And, by avoiding certain words or other constructions, am I being considerate or condescending? That last question has been my personal greatest bugbear in writing both English and computer programs. I feel as though I bounce from being witheringly condescending (by over-commenting or explaining or defining) to being pretentious and pompous (by using high-falutin' terms when ordinary ones would do; or, in code, cramming as much 'activity' into as few symbols as possible). Fortunately, in programming, we do have a check on this: code review. This is the opportunity for my colleague[s] to look over my code and point out to me where he/she/they have trouble understanding what I have written. And, equally, I have the chance either to agree and negotiate a reasonable alternative, or the chance to point out that I am using a common idiom in the language (which I would hope to provide evidence for by citing usage in other peoples open source projects or blog posts). So the code review can be (should be) a possible learning experience both for the reviewed and the reviewer, rather than a tiring round of sneering criticism and wounded defence. So, if it is a real team which exists to work together to create solid software and is not just a bunch of individuals out to show each other up, the members can learn together in mutual consideration and understanding. Edited to make some nonsense less so; also punctuation.
Oh, well as long as we have the author around, I should point out the "int he" typo as well.
CodePlex? Now that's a site I haven't been to in years.
yes but be careful as some things can reduce performance quite a bit 
Your problem has nothing to do with whether it is applicable or not. The second sentence [here](https://swift.org/documentation/api-design-guidelines.html) is “code is read far more than it is written”: if your coworkers can't read it, don't write it. Gradually educate them and explain what's good about that style. You should not start to use it just because it's cool and you are excited about it, you need to show *why* it is better that way. Someone a year ago wrote big chunk of code and then left the company, now you inherit their code and have to maintain it and fix bugs. How would you feel if that code was in Prolog of Visual Basic because that was what they liked?
Yes In general, I would say that it feels natural in places where non-trivial data manipulation involving containers is needed. FYI, example from [real app](https://itunes.apple.com/us/app/companion-cube/id1047146095?mt=8) (this piece of code prepares list of currency pairs for 3rd party API): // let currencies = ["USD", "EUR", "BGP", ...] let currencyPairs = currencies.filter({ $0 != "USD" }).map({ "USD" + $0 }) let pairsString = currencyPairs.map({"\"" + $0 + "\""}).joinWithSeparator(",") Note that using "joinWithSeparator" method is also can be treated as a functional pattern, since it's form of *reduce* (or *fold* as it called in Scala). I also think, that functional side of Swift would shine even more when it's used to develop server-side applications (and its use in this capacity will increase rapidly since Linux support is already here).
How does this compare with the Clang Static Analyzer? Also, isn't the Clang front-end not equipped to parse Swift code? I am just thinking out loud if folding `Swift` checks in Clang SA would be the right thing to do?
Off the topic of the article, but anyone notice how slow arrays are in Swift? I've been trying various nerdy exercises to FINALLY wrap my head around the language, and one of the exercises I've been working on is figuring out how to optimize calculations of primes within Swift (the basic alg is simple, but there are quite a few tweaks one can do to this before getting into higher level math, I'm focusing on the basics and seeing how it works in Swift). Pretty much, printing out the values as I find them to a terminal window? Pretty quick. The minute I append them to an array it is almost a 10x increase in speed...even trying to use NSMutableArray is slow as hell compared to other languages. var findPrimesArr:Array=[2] let findPrimeNSMut:NSMutableArray = [2] ...code goes here findPrimeNSMut.addObject(i) findPrimesArr.append(i) Anyone have suggestions on how to speed up array creation? *MOST* of my work these days is as a researcher and I'd love to be able to use swift to offset what I've created in other languages. Within the NSMutable I see there is a batch add feature (which I'm assuming it is like how SQL can que up several inserts if you let it so that there is only one write needed...with the danger that there MIGHT be a power outage in the next 30ms). So suggestions on array speeds?
Neat! I'm a little surprised that so many applications were started in objective-c _this_ year, but I suppose it makes sense.
Thank you for your response. I have attempted to pass from GLKit to OpenGL in Swift without success. It worked fine in Obj-C. Maybe I'm doing something wrong. Here is my approach: var mvMatrix:GLKMatrix4 = GLKMatrix4Identity mvMatrix = GLKMatrix4RotateY(mvMatrix, self.rotation) glUniformMatrix4fv(self.uModel, 1, GLboolean(GL_FALSE), mvMatrix.m) The last line isn't possible. The error I get is: Cannot convert value of type '(Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float, Float)' to expected argument type 'UnsafePointer&lt;GLfloat&gt;' (aka 'UnsafePointer&lt;Float&gt;') What do you recommend? 
Use reserveCapacity() to ensure the array doesn't have to keep allocating when you add items, and make sure you're testing an optimized build and not judging by the debug build. 
I'm a new to Swift, but I think you're effectively allocating a small array and repeatedly resizing it. Use the reserveCapacity method to set its initial size. It's also possible to use C style arrays, which are more dangerous but probably faster.
You need to read [What Every Computer Scientist Should Know About Floating-Point Arithmetic](https://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html). Imagine what happens if you try to subtract 1 from CGFloat.max.
You could define `&lt;-`
Calling it a ref counted garbage collector isn't that unusual, though. 
That's great and all, but it won't really help you code better, in my experience. Map and filter are easy to grasp. No need to abstract it into oblivion. 
Disagree. Once you know about category theory, it's easy to recognize data types that fit different kinds of categories. This gives you composition rules and idioms for free, making it a lot easier to figure out how to design and use your data type.
I'm also seeing the same issue. NSForegroundColorAttributeName works for normal state but not the selected state. Did you find a solution? 
That is *very* different from saying “any math relative to it is inaccurate”. Using `CGFLOAT_MAX` in `sizeThatFits:` is what everyone does and it works just fine. The fact that `CGFloat.max - 1` is not representable has no effect whatsoever in this case. CALayer truncates the height long before it gets to that point anyway.
I implemented MVVM in the last project I worked on, but I was not very good at explaining why it was a better approach. It took a month or two for the other contributors to the project to appreciate this approach. I definitely learned that communication is important. But also allowing one's teammates to learn on their own has its place, too.
A C array is a single buffer of contiguous values. Because of this, accessing an array element is nearly instant. Increasing the capacity of the array requires copying all the values to a new larger buffer, so you want to do it infrequently. Swift is arguably a layer on top of Objective-C, and Objective-C is just extensions to C. Because of this history, Swift still requires some support for C style arrays. Depending on how that support was implemented, they may be the fastest (and most dangerous) choice for storing values.
Communication is absolutely important in a team and another cool thing is that by explaining things to others you learn them better yourself.
Yep, totally agree with you there.
Yeah I tried implementing that and using it. I tested it with a print statement and even though I can see the collisions nothing is happening. It's really strange.
I am guessing you are looking to record and merge the videos together. Try this http://www.raywenderlich.com/94404/play-record-merge-videos-ios-swift
Did you set your scene as the SKPhysicsContactDelegate and create its SKPhysicsWorld properly? class GameScene: SKScene, SKPhysicsContactDelegate and... override func didMoveToView(view: SKView) { self.physicsWorld.contactDelegate = self // other code } If you've already done that, you could see if you properly set the bit masks of the sprites. node1.physicsBody!.categoryBitMask = 0x1 &lt;&lt; 0 node2.physicsBody!.categoryBitMask = 0x1 &lt;&lt; 1 node2.physicsBody!.contactTestBitMask = 0x1 &lt;&lt; 0 In case you aren't aware (my apologies if you are), the category bit mask is an identifier of sorts the physics body uses. Since node1's category bit mask is 0 and node2's contact test bit mask is also 0, if node2 contacts node1 then it will call the contactDidBegin method. 
How about start by posting the link to your app in your post? 
I'll give it a read. Thanks for the reply
You could use Realm for persistent data for large data or NSUserDefaults if the number of settings is small enough. From what I know user settings are usually stored with NSUserDefaults. For server side global settings, you can use BAAS (Backend as a service), have a look here http://www.developereconomics.com/finding-right-baas/
I'm not sure developing for the oculus can be dumbed down to 5 year old levels. 1. You will need to understand how to talk in the swift language 2. You will need to be good with numbers 3. You will have to understand what the oculus likes. 
Check out NSTimer and dispatch_after.
Using `NSTimer` (example usage: http://makeapppie.com/2015/04/24/swift-swift-using-nstimer-to-make-a-timer-or-alarm/ )
Take a sniff at the very promising http://perfect.org for Swift server side too. 
Interesting; If I might ask, when you say 'small JSON' approximately how big are we talking? Tens of bytes? Hundreds? 
Oh - and congratulations on your first app being published!
You'll want to review the [NSFileManager class reference](https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSFileManager_Class/), in most cases that's what you want to use when dealing with files. You could probably use the `replaceItemAtURL` method for the example you gave in your post. However, take a look at `copyItemAtURL` and `removeItemAtURL` methods (or their path equivalents) as well, they may prove useful if you need slightly different behavior than what `replaceItemAtURL` gives you. 
Thank you :)
One more thing... Don't know if this'll be of any use to you but one the embedded device side we're using a wonderful minimalist JSON parser called jsmn (http://zserge.com/jsmn.html) which is easy to use, surprisingly fast (even with large streams of data) and well documented.
Are you sure about Protocol Buffers behavior? I think you parse the entire message once into objects and then access those objects all you want.
Unfortunately yeah :/ One of the side-effects of having a distributed backend.
I recently implemented a realtime chat system. Go backend, Swift iOS frontend, with a bidirectional Protobuf based RPC system over websockets. In practice, network latency is going to dwarf serialisation, so I wouldn't factor it in unless the serialisation layer is spectacularly slow. More important IMO is how good the support is for your language of choice, how widely used it is, how responsive the developers are, and how flexible the tooling is.
Well, it's taking about 1K of stack space as is. Also, does your patch actually catch all traps in the standard library, or just when a "message" is specified? I've done precondition(i == 0) and the entire ASM is just a "ud2" instruction - nothing prints to stderr. So I was thinking one would have to patch the code that emits that, in order to always capture backtraces.
It's definitely one solution, though not without overhead either. Ideally I'd want something akin to flatbuffers where some metadata about the message can be stored on the message along with the payload. I'll be going with the embedded message route though, if I don't find another way.
No problem! It's a pretty confusing topic and lacks great documentation.
This is correct, `UnsafeMutablePointer`s themselves are never nil, but the underlying value they represent can be, and that's the way to check for that. i.e.: var value = 10 var pointer: UnsafeMutablePointer&lt;Int&gt; = UnsafeMutablePointer&lt;Int&gt;.alloc(1) pointer[0] = value print("Pointer is nil: \(pointer == nil)") print("Value of pointer: \(pointer[0])") pointer = nil print("Pointer is nil: \(pointer == nil)") pointer.dealloc(1) // Always remember to dealloc Prints: Pointer is nil: false Value of pointer: 10 Pointer is nil: true
 Anything with a "mac" tag will be for OS X: http://www.h4labs.com/dev/ios/swift.html?age=10000&amp;q=mac There are probably a few more that were not tagged. 
From Swift you can use any framework available to Objective-C. If you can create a window resizer in Objective-C you can in Swift. I've written command line tools in swift that use frameworks like EventKit just as you would in regular AppKit based apps.
 let numbers = [0, 1, 2, 3, 4] numbers.reduce("") { $0 == "" ? "\($1)" : "\($0), \($1)" } // 0, 1, 2, 3, 4 // and an example for array of strings which is a bit cleaner let cities = ["London", "Paris", "Berlin", "Amsterdam"] cities.reduce("") { $0 == "" ? $1 : $0 + ", " + $1 } // London, Paris, Berlin, Amsterdam
Thanks! We think that Swift needs one or two more years to replace it completely as there are still many libraries written specially for Objective-C.
Does that dealloc make any sense? You've already assigned nil to it, it should not be referencing any memory any longer. The `pointer = nil` should have already either dealloced or leaked, no?
&gt; This is correct, UnsafeMutablePointers themselves are never nil I may just be misinterpreting your wording here, but `UnsafeMutablePointer` (and the other three pointer types) can definitely themselves be null. After all, they're just 64-bit integers until the CPU hits a MOV instruction. See: print( unsafeBitCast(UnsafePointer&lt;Void&gt;(), Int.self) ) 
Yes, I really hope Apple will add more details to their Swift docs.
That's a good point. Unfortunately it doesn't catch all traps. Swift doesn't have an exception mechanism in place for handling interrupts or anything, so that really just ends up trapping the C++. `precondition`, though, should really cause the fatalError handler to get called...
Converting between integers and `String.Index`s is still O(n), which is why the extensions you rote aren't built into the language. If you can manage to use *only* `String.Index`s in your algorithms, that will usually give you the fastest code. Something like this, for instance, might be faster: extension String.CharacterView { func splitOnce(at: String.CharacterView) -&gt; (String.CharacterView, String.CharacterView)? { for i in indices { var g = at.generate() for j in i..&lt;endIndex { guard let c = g.next() else { return (prefixUpTo(i), suffixFrom(j)) } if self[j] != c { break } } } return nil } } extension String { func splitOnce(at: String) -&gt; (String, String)? { return self .characters .splitOnce(at.characters) .map { (a,b) in (String(a), String(b)) } } } "abcddcdeefg".splitOnce("cde") // ("abcdd", "efg")
The intelligence of some people.
try this link, it has a LOT. https://github.com/hsavit1/Awesome-Swift-Education 
You're right. At the point where he called `pointer.dealloc(1)`, the memory had already leaked. It should have been placed before reassigning to nil.
Sounds like an access problem. Is `SomeDelegate` declared public? If it's declared internal, is `SomeViewController` in the same compilation target? Or is `SomeDelegate` contained by some scope that has an private access level?
Sure, if you want to be pedantic, it is possible to make null values in Swift, which will cause crashes. Maybe I should have worded better. But that's completely tangential to the point of my comment.
Oh, huh. I guess then I'm mostly interested in what you meant by this part: &gt; That code assigns x to a non-nil value of type UnsafeMutablePointer&lt;Int&gt;, where that value happens to represent the NULL pointer. So x isn't technically nil, but the value that it contains is the NULL pointer.
I think you must be thinking of something else. `let x: UnsafeMutablePointer&lt;Int&gt; = nil` produces 64 sequential zeros; nothing more, nothing less. No worries though.. Regards!
Thanks for posting this. I started a port to Pi-Zero and the Intel Edison as soon as the code dropped but got stalled on some of the internal build steps and ran out of time. Have been casually following the swift dev mailing lists for signs of progress. Will take another look during the holidays.
Also, double triple quadruple check that you spelled it absolutely correctly. Best way is to locate the definition of SomeDelegate and copy the name then paste it into the file where you want to use it. But, I don't quite understand what you mean when you say, 'I get the following compile error...' then later you say, 'when I build my project everything seems fine.' Is building not compiling? What does compiling do or not do that causes the error whilst building succeeds? This all sounds very suspicious, so I'd also do my favourite trick of Product-&gt;Clean Build Folder... (hold down alt) just to make sure all gremlins scurry back into their dark corners for at least a few edit-compile-run cycles. You could even try the equivalent of giving Xcode a very stern grimace by quitting and restarting it; sometimes it helps.
That's cool. I will give it a try too. But your code has 2 things that I noticed to be slightly slower in my benchmark. 1. You're using the characters view. Somehow that was slower in my benchmark that I linked to from the article. 2. You're using "map". I also found it to be a little slower in my benchmark when converting from one type to another. In Dart they find codeUnitAt to be faster. It is true that my implementation of it might not be as competitive as the Dart one in Dart, since it's using higher level Swift features rather being linked from closer to actual array indices. Your implementation using a more functional style is something that bends my mind a bit. I'm used to using methods like "map" from Ruby. And generators like the "yield" in Ruby don't scare me too much. But using iterators like "next()" I last recall them from Java. That's not something that I used too much of. :-)
Well, that is the strange part. When my project isn't built yet, XCode gives the error. Only to get resolved when I actually build the project (using Command+b). Everything works though, I just thought it'd be some strange bug :) 
&gt; Is that actual zeros in memory Yep. Quick-and-dirty way to see it firsthand: /// 100 null pointers, with some easy to spot stuff at each end. var array = ContiguousArray.init(count: 100, repeatedValue: UnsafeMutablePointer&lt;Void&gt;()) array.insert(UnsafeMutablePointer&lt;Void&gt;(bitPattern: 0xF2F2F2F2F2F2F2F), atIndex: 0) array.append(UnsafeMutablePointer&lt;Void&gt;(bitPattern: 0xF2F2F2F2F2F2F2F)) array.withUnsafeBufferPointer { // Print the array's start location, then pause for the debugger. print($0.baseAddress) raise(SIGSTOP) } When you find the ContiguousArray in the debug area, right click on its `_nativeBuffer` child and select "View Memory of \*_nativeBuffer." (Selecting the asterisk one is key; otherwise we dereference one of those null pointers again!) In any case, I can understand why one might think of UnsafeMutablePointer as being "wrapped"; one thing I love about the Protocol-Oriented nature of Swift is its ability to build extraordinarily rich interfaces through purely external code. UnsafeMutablePointer is a good example in that methods and protocols it adopts are much more pertinent than the one's and zero's at its "center".
Fascinating! Regardless, this is all semantics and hardly matters =P thanks for the info.
I know about the death of `++` - I'm a sucker for a golfy-looking loop, though. What exactly is the splitOnce method trying to achieve? I'm not sure I understand what it's doing.
The environment variables on Linux have these masks: A=SOMETHING B= C=COLOR1=BLUE;COLOR2=RED Sometimes they are empty like in B. Have no value. One of them has many "=" in the value part. But they are all very regular by always having the "KEY=" part. For other kinds of strings though, the pattern could be found in the very first character. Like this: =VALUE_HERE And if the splitOnce method could be used to not only split it, but also detect when the key is not present, it would be good. In this case, my method would return an empty key: "" Now, if the pattern is not found at all in the string, not in the middle, beginning or end, the key will be "nil" and we can use it for information on whether the pattern existed in the string at all. I compared my routine to Ruby and Ruby returns the results in about the same way as mine, only Ruby returns an array and in Swift we can return a tuple. And in Ruby I'm not sure it is splitting only once by default. Sometimes languages have an extra parameter when we want the pattern to be be used to split a string only once or multiple times. I chose to make mine specific for just splitting once. One of the differences between mine and Ruby is that if Ruby cannot find the pattern in the String, it would return the string with a single value containing the whole string: irb(main):001:0&gt; "abcdef".split("xy") =&gt; ["abcdef"] irb(main):002:0&gt; "abcdef".split("ab") =&gt; ["", "cdef"] irb(main):003:0&gt; "abcdef".split("ef") =&gt; ["abcd"] irb(main):004:0&gt; "abcdef".split("cd") =&gt; ["ab", "ef"] I actually prefer the output of the splitOnce method in Swift. I explained it in the documentation part of the method: print("abcdef".splitOnce("cd")) // Prints (Optional("ab"), Optional("ef")) print("abcdef".splitOnce("xy")) // Prints (nil, nil) print("abcdef".splitOnce("ab")) // Prints (Optional(""), Optional("cdef")) print("abcdef".splitOnce("ef")) // (Optional("abcd"), nil) 
It certainly is, and you can see its viability by the amount of open source projects that have made Swift based server applications that run on linux. 
Yeah i thought that was the case. Xcode doesn't seem to be showing this that's all. For some reason Xcode shows min and max only have 5 in them (which is the first item in the array) and nothing else :/ Even though both min and max are an array of Int's. 
&gt; Even though both min and max are an array of Int's. I'm not sure what you mean by this. min is an Int, as is max. Neither are arrays.
No, there are no pointers inside the struct, since its members are value types as well. There might be a pointer *to*'the struct, depending on circumstances.
There actually aren't any pointers involved in your example; with members that are value types (structs, enums, tuples), each is laid out contiguously within the struct... "End to end," if you will, apart from being aligned to word boundaries within the struct. You'll be glad to know the standard library actually provides functions for determining the contiguous size of value types: struct SomeStruct { /* … */ } sizeof(SomeStruct) var someValue = SomeStruct() sizeofValue(someValue) 
Thanks, 5HT-2a! This is really useful. So does that mean that in my example there are no pointers being allocated at all? If that's the case then how does Swift know where to extract the value of 's' when I pass it to a function?
Do you have a way to detect the viewable size of the screen? If you do, just do an if statement that if the objects y point is passed the viewable max height, then position it at the bottom with CGPoint. If you need help detecting the viewable size of the screen the user sees, I have submitted a solution in my comment or post before. I'm on mobile so I can't see right now. 
I'll add that "ambitious" is ambiguous. Ambitious for who? For some people, implementing (and contributing back) the NSUnimplemented portions would be part of development their development cycle. Maybe the release matches when the open source bits falling into place. What's your time frame? Is it "don't hold your breath"?
I have the viewable size, but could you give me an example of the if statement? Ive tried several.
I've been working with Swift on Linux since day 1 (okay, maybe day 2), and even though it's not yet a month old a lot of additional functionality has been added to Foundation. Combine that with the number of libraries and frameworks that are cropping up, such as the work folks at Zewo are doing (https://github.com/zewo), or Perfect (https://github.com/PerfectlySoft/Perfect), and Swift on Linux is becoming more and more "viable" with every passing day. As an example of what you can really do with Swift on Linux, see http://dev.iachieved.it/iachievedit/building-rest-apis-with-zewo/, which is a full implementation of a REST web service with PostgreSQL backend (disclaimer: my article).
Not sure about framework, but ParseUI is a separate download from the Parse core.
I did not ask but I will gladly remove my Post. I see them in here all the time and though it was ok. I tried to search for rules and could not find any. 
Oh my god you're so right. Imagine trying to use its name in typical sentences. "Oh, my backend uses the Perfect framework..." *rolls eyes*
&gt; I did not ask but I will gladly remove my Post. No need, already done. &gt; I did not ask I know. &gt; I see them in here all the time and though it was ok. Not sure how, since we filter them, and your account is 8 hours old. &gt; I tried to search for rules and could not find any. https://www.reddit.com/wiki/selfpromotion
Was not self promotion. I was genuinely asking for help. 
I think you might be confusing types with *named parameters*. 
In Swift, this: var x:Int and this: struct Wrapper { var x:Int } have exactly the same memory layout. In fact Int itself is a struct defined basically like Wrapper, except around a Builtin.
Change var itemLevel[0] = itemLevel[0]++ To itemLevel[0]++ Shouldn't need to redefine the var. and incrementing like that you shouldn't need to reassign it to the same variable. 
Worked for me, itemLevel[0] is now 11 http://swiftstub.com/214110356
remember that `++` will be deprecated so might as well write it as `itemLevel[0] += 1` now
A nice framework and all MIT licensed too! Does a Zewo app compile to a static binary? Or does it have dependencies on C .so files?
AGPL license may be problematic for some users.
I actually come from Objective-C and its blocks and am trying to get a better understanding of closures, so I read a bit about the theoretical foundations, from lambda-calculus to Haskell. As far as I understood it the "official" academic definition is that a lambda is "an anonymous function - a function defined with no name" whereas a closure is "a function which closes over the environment in which it was defined. This means that it can access variables not in its parameter list". It seems that the Swift creators are taking a more pragmatic approach :-)
At the moment, out of the box, the Swift Package Manager builds binaries that utilize shared objects. As Zewo relies on Swift Package Manager (and trust me, you would not want it any other way), the binaries are linked against shared libraries. See https://bugs.swift.org/ and run a filter for Package Manager component (`component = "Package Manager"`) to get an idea of current features and issues with Swift Package Manager.
In fact, all functions are a type of closure with varying capture rules. 
When Apple introduced blocks in Objective-C, they combined two things in one: Anonymous functions (lambdas) and closures. With Swift, the two concepts are separate, and any function (named or not) can have a closure. Of course at global scope, functions can only capture globals, which are already in scope anyway. I actually dislike the decision to call anonymous functions "closures" in Swift, because it's conflating the two concepts, despite them actually being distinct in Swift.
Possibly a typo? "to a" should be "the". Should read What if we don't want the line to end after print?
Thank appilee. My app is a smile app about location and sms. Basically it has several functions: get the current location, remember the location, get direction from the current location to the remembered location, send sms messages to the contacts of the current location or remembered location. I think everyone can use it. It is good for the people coming to a new place. It is easy and simple. The users don't need to go to several apps, such as maps, contacts, sms. These functions are integrated in one simple app and it is at your finger tips, in some emergency or time-limited situation, it is helpful, for example, in the flood, earthquake. ... My friends like the function and want to have a better design or more beautiful interface. So I think I will review some user-interface design online courses. :) Happy Holidays to all.
&gt; despite them actually being distinct in Swift At the moment I don't see a method to create an anonymous functions in Swift. In my example I think I actually created a true anonymous function but it worked exactly like a closure. Can you give an example of an anonymous function that isn't also a closure?
I just pushed the url encoded form parsing middleware to the Middleware module. You can parse bodies by applying the middleware like the JSON one: route.post("/devices", parseURLEncodedForm &gt;&gt;&gt; deviceController.create) I also have multipart form parsing ready, but I haven't moved it to the Middleware module. Will do once I have some time. So much stuff to do man! (:
or maybe even "What if we don't want to add a line to the end after print?"
Jeez just because op doesn't understand how incrementing operators work doesn't mean that you should downvote him. You learn from your mistakes, but only if you know how to fix them.
I took it to mean that, if he wants [10,20,30,11] , then the code is much different 
Well from the initial question it seems just incrementing the first value, but his follow up comments seems like he might want to append t to the array. 
&gt;I am new to coding and creating apps, anyways I am creating an app for my schools website. is like writing, "I am new to cooking and making meals, anyways I am creating a cafeteria for my school." This is why you need a mentor. You don't even know what you need to know or what questions to ask. We were all there in the past. Try to start with a less ambitious project or find someone to guide you along. I don't want you to get frustrated and give up because you bit off more than you can chew.
Fortunately, NSXMLDocument et. al. function the same regardless as to whether you access them using Swift or Objective-C. [The full documentation for NSXMLDocument and NSXMLNode] does include Swift's syntax, but those Objective-C guides actually outline how to use the APIs as you were describing. And just in case you were holding out for some samples that you could copy and paste, again I should stress that this particular project is a bit too niche, and a lot too elaborate. If it were me, and I really wanted to accomplish this one project, I would email the site's admins and see what they think. For all you know, the data may already exist as JSON, and you just need the URL.
You may want to reread to section on [closures](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Closures.html#//apple_ref/doc/uid/TP40014097-CH11-ID94) from *The Swift Programming Language*. In particular the section on closure expression syntax: { (parameters) -&gt; return_type in statements } Types can be inferred from context and returns are implicit in single-expression closures, so the following is shorthand for your original example: func add_x(a:Int) -&gt; (Int -&gt; Int) { return { b in a+b } }
Make a single function that takes arguments for the file to move and such, and do your error checking in there.
"Can anyone show me how me how to learn about automotive design in a way that won't confuse what I already know about steering wheels?" Not to be glib about it, but CS is an expansive and never-ending path of learning. Just start with the things that seem relevant and that you can grasp, and more will come with time. Probably the most useful to you in the beginning would be to explore the subject of data structures. And don't be afraid to temporarily dip into the context of a language you don't understand and try to figure out what's going on with a particular example.
If the source you're learning Swift from isn't made for beginners, you're gonna have a bad time. You have two options as I see it. 1. Find a Swift resource for beginners that goes over these topics (if they are out there yet). 2. Take a break from Swift and learn the basics using something like Python, then jump back to Swift. All the basic concepts of programming are the same. Once you know those things, programming in different languages is mainly an issue of syntax. Here is a For loop in a ton of different languages. All of these do the same thing. So one you know what a For loop is and how it work, if you're in a language you just look up how to write a For loop when you need one, rather than having to learn about the whole idea in each language. https://en.wikipedia.org/wiki/For_loop#Timeline_of_the_for-loop_syntax_in_various_programming_languages Building on a solid foundation is the most important thing, and that foundation can be in any language. Most people will know more than one language, and after you know the basics, picking up new ones doesn't take too long.
I strongly recommend Rob Percival's The Complete iOS9 Developer Course on udemy.com - mostly because it's where I successfully learned the most about the fundamentals of programming for a mobile environment using Swift. It's well worth the time investment to work through this well paced course. Oh, and don't pay full price... There are always plenty of coupons and discounts around that'll make it $25 or less.
I actually learned coding because I wanted to scrap a website. It isn't a big deal if you have "basic understanding". If you send me the website I might can deliver you a snippet with comments (:
Thank you again for this info. A couple of questions since I couldn't find anything via Google. 1.) Are GLKit operations done on the GPU, or do they have any sort of hardware acceleration like Simd? 2.) If they are merely convenience functions, is there any detriment to creating my own Matrix and Vector classes which work with flat arrays so they can be natively passed in to OpenGL functions without recasting with UnsafePointer?
I have taken both Rob percival's course and Mark Price. I believe that Mark Price's course are better in terms of his methods since he teaches app development with MVC and Rob doesn't. Mark is actually a teacher for a boot camp and has experience in teaching. Look for coupons on these courses and bring it down to $10 - 15. Good luck. 
I am up for the challenge! I already know how to add a UIWebView to display the website. So if it is to difficult I can always do that. 
Coupon code that works right now: STARTNOW0015
It depends on the situation. If you're working with ui, more often than not passing an empty "something" will just show a blank screen, which is probably (not always) what you're looking for. On all other levels, though, you should probably use nil values to represent stuff that doesn't exist.
That will probably be so simple that Apple will not approve it. An app that is simply a wrapper for a website does not add any value over the user simply using Safari. I'm not trying to be Captain Buzzkill here. Just passing on my experience. The Apple App Store is pretty strict. If your app doesn't do anything "new" or "better" it will probably not get approved. For example, I could make a flashlight app in an hour and submit it for approval and it would promptly be rejected. 
No it has other things that it does like list courses, and notify users for school events but just to capture the news portion of the website I could use a UIWebView to show the website.
I'm having the same exact problem as you are. Did you end up finding a solution to this?
Big Nerd Ranch stuff has generally been pretty good quality in the past; their reputation indicates that the book would be good, but I can't speak to the book itself.
Could you just make a boolean flag, maybe? I'm not too adept with error handling in Swift nor do I particularly understand what you're asking, so my apologies if this is dumb. func replace() { var errorFlag = false let username = NSUserName() do { try // whatever } catch let error as NSError { errorFlag = true } // repeat for all other things if errorFlag { // display error message } } 
I always declare arrays like this: var array: [String] = [] Because checking empty or count == 0 is quite easy. For Strings that eill not have a value until timeframe x I always use optionals.. like this: var text: String? Sometimes if I'm sure I will not run into any problems and would otherwise have to unwrap it too often I simply write: var text: String! I'm not 100% if thats the best way to do it, but I'm used to it and didnt ran into any problems :)
Can I have multiple try in a single do { } ? 
I intend to use the values as arguments in fuction. Something like `loadWithTitle(title: String, leftBarItems: [UIBarButtonItem], rightBarItems: [UIBarButtonItem])` vs `loadWithTitle(title: String?, leftBarItems: [UIBarButtonItem]?, rightBarItems: [UIBarButtonItem]?)` is what I'm comparing. I'm unsure if it's better for the compiler to take nil or an empty string/array. 
If something can truly be "empty" or optional then you should be using an optional since that's how the language is designed. The whole point of optionals is to avoid the arbitrary "empty" values you're describing and it'll make it easier to take advantage of language features like if lets, guards and chaining that way. 
1. No, GLKit operations aren't done on the GPU, any framework works with the CPU that's how it works. If you want to use the GPU, you'd have to use Metal or OpenGL Shaders. SIMD stands for Single Instruction Multiple Data, which means a single operation on an array of data, GLKit doesn't work with arrays though. 2. Yes performance: The probability is high that you loose a lot of performance and may even introduce bugs by creating your own Matrix/Vector types. Using UnsafePointer is the natural way of passing an array of data to a C library (OpenGL in your case).
you should use the .isEmpty function of Array instead of checking for count == 0. :)
I'm going to be honest: I don't understand this question. I mean, a seasoned programmer can "learn" Swift in 5 hours. Read the book and mess around and you're all set. But to actually *learn* a language—to truly learn it, and not just learn the syntax—can take years. Many would say a programming language can never truly be mastered. Everyone comes in here and answers this question like there is some hard date at which you official know it. Like, 4-5 weeks, and then suddenly, you know Swift! It's just not how things work. You will know something at 1 week, more at 2 weeks, more still at 1 month, and still more at 1 year. So, going into this telling your boss "I can learn Swift in 4 weeks!" is useless, and it is stupid, and it is setting yourself up for failure. 
Read the last sentence of the question, specifically &amp;gt;...enough to code a simple app He isn't looking to master anything - just wants to ship an app.
There are really no official definitions for these things. Different languages call them different things. But if you wish, both inner functions (named) and unnamed ("lambdas") are closures in Swift. 
&gt; currently for OS X only, due to limitations of Swift What's the limitation?
Unless there's a semantic difference between non-existent and empty, I prefer to use empty collections over nil. Only because I normally don't have to handle the empty case, as `for … in` will just work with empty collections. For numbers and other value types, using nil makes more sense, as there often is a difference between 0 and non-existent. 
The semantic is copy-in, copy-out, though it is optimised to be shared storage. https://developer.apple.com/library/mac/documentation/Swift/Conceptual/Swift_Programming_Language/Declarations.html#//apple_ref/doc/uid/TP40014097-CH34-ID545
Perhaps, but /u/BenevolentCheese's main point -- that each of us learns at different rates and to pronounce a hard-and-fast number of weeks in which one can learn a language/framework is foolhardy and setting oneself up for failure -- is true.
I'm probably going to pick them up later today, and I'll report back.
This is helpful. Thanks.
Found it! The file in particular was targeted at both my tests and the project itself, but I believe that adding the test target to your files is no longer necessary in Swift 2
You can assign a view to the `inputAccessoryView` property on any `UIResponder` or subclass instance (e.g. `UITextView`) which will be displayed immediately above the keyboard. [Apple has sample code here](https://developer.apple.com/library/ios/samplecode/KeyboardAccessory/Introduction/Intro.html) – it's in Objective-C, but it should be straightforward enough to follow. 
There is literally no answer to that question, and the numbers people are throwing around are meaningless. Maybe you should reread and attempt to understand my post. You could start working on that app *today*, having never touched swift, and complete it in reasonable time, if you so desired. 
Ah. Ok. That's technically not an issue with Swift then. But yes, Swift will be immensely more useful on other platforms once Foundation is ported. However, it should work in iOS though. 
Please do, although I'm not really looking for a Swift book perse (would much rather have a book on the Apple frameworks themselves).
Looks pretty good. The code is cleanly written, which I always appreciate. It looks like you've gotten the hang of the language so far. One thing I would suggest is looking at the ***Recursive Enumerations*** section of the Swift 2.1 manual (page 168). You might consider trying a rewrite using that approach. I suspect the code would be much cleaner, and would be a good exercise in trying an recursive approach rather than a stack-oriented one. 
I don't know but let's say you wanna go by 2, you could multiply the value of the slider by 2
[This is the most control you have for now. ](https://developer.apple.com/library//ios/documentation/MapKit/Reference/MKMapView_Class/index.html#//apple_ref/occ/instp/MKMapView/showsUserLocation). You can also set the tintColor property on the mapView and see the effect it has. Alternatively you can add your own annotation for the user's location.
If its your first time to run it, "hasRunOnce" doesn't exist yet. You should check for false or nil. if hasRunOnce == true { do something } else { setBoolForKey(false, key: "hasRunOnce") launch tutorialVC } You should then change the vale to false once the tutorial is skipped or completed. Now that I think about it, the check should probably be done with a guard statement. But either way would work. 
I have done that and it looks promising just need to know how to get data from the website for the app.
Wait so is this working and ready? Is there anyway I could contribute? Sounds like a really cool project. 
Yeah if you could, upload the files as gist to http://gist.github.com Edit: Fixed URL
I've used Packt books on Drupal, and they've been OK for me, so I guess this is a classic case of YMMV.
Maybe it because Apple don't look this as a problem.
// // mainCell.swift // CaastRun // // Created by Computer on 5/23/15. // Copyright (c) 2015 Caast. All rights reserved. // import UIKit class mainCell: UITableViewCell { @IBOutlet weak var locationTxt: UITextView! @IBOutlet weak var imgView: UIImageView! @IBOutlet weak var profileLbl: UILabel! @IBOutlet weak var messageTxt: UITextView! @IBOutlet weak var tweetImg: UIImageView! @IBOutlet weak var datetextfield: UITextView! override func awakeFromNib() { super.awakeFromNib() _ = UIScreen.mainScreen().bounds.height let theWidth = UIScreen.mainScreen().bounds.width contentView.frame = CGRectMake(0, 0, theWidth, 120) imgView.center = CGPointMake(55, 35) imgView.frame = CGRectMake(25, 5, 40, 40) imgView.layer.cornerRadius = imgView.frame.size.width / 2 imgView.clipsToBounds = true profileLbl.frame = CGRectMake(80, 10, theWidth-75, 20) messageTxt.frame = CGRectMake(10, 300, theWidth-20, 60) locationTxt.frame = CGRectMake(10, 270, theWidth-20, 40) datetextfield.frame = CGRectMake(0, 270, theWidth-20, 40) } override func setSelected(selected: Bool, animated: Bool) { super.setSelected(selected, animated: animated) // Configure the view for the selected state } } 
I wouldn't say that they don't think it's a problem. Larger apps = less space for other things. Also, larger apps = higher bandwidth when downloading apps.
Chris Lattner has stated a few times that one of the goals in swift 3.0 is ABI stability, which (I believe) will mean that they will no longer include the runtime (and assume it is 3.0).
I went into instruments, and let cell:mainCell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath) as! mainCell was using 5.4MB of data. WHAT THE HECK! Is this my problem?
And I was talking about physical pixels, if you render into a scaled Grafport, and you are on a 3x device, like a 6+, then you have to multiply by 9 to get the actual number of physical pixels. 
And larger apps lead to more pages of executable being faulted in on process launch.
A UIImage is inherently uncompressed. The only compression the GPU in the phone can handle is only available at the OpenGL level, and you don't want to go there. [source](https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/TechniquesForWorkingWithTextureData/TechniquesForWorkingWithTextureData.html)
Yes - Save the UIImages in a Dictionary, with the index as the key. Try to predict in advance which ones to fetch. Just do a simple assignment from the dictionary to the imgeview in cellForRowAtIndexPath. If you don't have the image, then do as I suggested before: start it fetching in background, and let the viewcontroller know on the main thread when you've got it, so the viewController can add it to the dictionary, and potentially update a visible cell. and everything else I've been telling you to do.
&lt;script src="https://gist.github.com/Anteloper/c4c6f6d51d5d533bcef0.js"&gt;&lt;/script&gt; Thanks man let me know if this works.
You setBoolForKey but get stringForKey. You also don't need to redeclare defaults in else. 
https://gist.github.com/Anteloper/c4c6f6d51d5d533bcef0 Corrected link.
Thanks for the reply. Adding an accessory view with a done button, that calls view.endEditing(), Worked well.
RemindMe! 7 days
Int in swift is a typealias for Int64
Hi, check out my GitHub: https://github.com/SebastianOsinski/Stanford/tree/master/Smashtag/Smashtag/Twitter. I assume those are the files you have problem with. I updated them to Swift 2.0.
Try with PFImageView instead of UIImageView in Cell class. http://stackoverflow.com/a/21847726
Actually, I was wrong. Yes on the 4s, 5 it is Int32. 5s+ it's Int64.
Since Int is an typealias for Int32/Int64 depending on the platform. I would suggest using a custom computed property in your NSManagedObject subclass as following : var myVal : Int { get { return Int(myNsManagedVar) } set { myNsManagedVar = Int32(newValue) } }
Thank you! Still active. 
RemindMe! 7 days
Man, this is great news, and I'll tell you why; as *short* as that PHP function was, regular expressions are by far the least performant method of scanning simple strings like `/users/501`. The best option here is NSScanner (or the `vscanf` family of functions it is built on): let scanner = NSScanner(string: routeToParse) // Skip the leading slash character. scanner.scanLocation++ // Create a variable, and scan the string into it until hitting another slash. var routeType: String? scanner.scanUpToString("/", intoString: withUnsafeMutablePointer(&amp;routeType) { .init($0) } ) There are then `scanInteger()` and related methods as well.
1. Yeah, i was also thinking on trying to add something so that the user knows that the bottom button displays a history, 'cause actually its not clear. 2. Didn't noticed that bug, i'll fix it asap. 3. The fact that i change the sign instead of adding it is because having 2+-3 its a bit confusing, but maybe i can add parenthesis so its a bit more clear. 4. Nice idea. Thanks for your reply
You should definitely follow /u/5HT-2a 's advice above and use NSScanner! However, it's worth noting that while NSRegularExpression is a bit clunky to use, Swift actually makes it possible to make it much more natural. Check out [Swift extension for Native String class to support Regex match and Regex replace](https://gist.github.com/ningsuhen/dc6e589be7f5a41e7794) (not sure if it's updated for Swift2, though)
When is changeColor called?
Sorry, newbie here. I'm trying to call this function bad I can't. I don't know what parameters I need to use. Edited: I'm getting this error message: use of unresolved identifier
Go is probably just compiles into faster code. If you're concerned, I wouldn't worry about it. They are both fast enough, that the speed of the compiled app should not be an issue. If you're curious you could get a decompiler and check out the differences of the compiled code.
The tintColor property you're trying to use is not for tinting the image in the traditional sense. Some images can be described as "template" images. That is to say, iOS will treat them as an alpha mask and use tintColor to paint over it. That's how you can have an icon for a button be made whatever colour you want, because it is generated on the spot using tintColor. What you need to do is, using your RGB sliders, configure a CoreImage filter and apply it to your UIImage, then display that image in a UIImageView. 
Is that 1.0% just a header?
did you get this resolved? I'm wondering too...
it is ;)
Thank you! Went from $199 to $15.
1.0*
Thank you, I've rewritten it using the NSScanner and it works like a charm now. :-)
Your subscript can't return an optional, because that's the subscript that lets your struct conform to `MutableCollectionType`. [This version should work.](https://gist.github.com/oisdk/8ddc694d33ef45869418) 
Oops, sorry, that was from another edit which I thought might fix it. So the `LazyMapGenerator` is more efficient than the `AnyGenerator`, but your `IndexingGenerator` is more efficient again, and it's more idiomatic.
unchecked is not an optimization, I wouldn't suggest it this lightly and without explaining what it is.
I get inspiration from design sites. Designers, in general, love sharing what they do, so there's a ton of content out there. I most commonly look at dribbble, but also search sites like Pinterest (search for iOS 9 app design, or something along those lines) https://dribbble.com 
Swift currently has poor implementations for the benchmark programs. For example GCD or threads are not used so it is running single-threaded. If you are printing heavily, you will want to use a more optimal algorithm. Such as fill a buffer and send the output in batches using GCD. If you are logging, a framework like CocoaLumberjack can handle much higher log volume levels without slowing the application down.
You have to learn the controls that UIKit gives you and how you can alter their appearance to what you want. You can have a UIButton that is just text, text and a border, text with a background color, or just an image. You won't know how other people have implemented things until you learn what is possible and deduce how they did it.
For first time, when the App is loaded, the Tutorial View Controller should appear but it doesn't as you see up there. 
It's the same (essentially) for the compiler. Code for future human readers of your code. In this case I would say non-optional arrays, optional strings, because the semantic you're describing is "here is a list of zero left bar items" rather than "here is no list of left bar items".
I used to do that but then I came to a agreement with my self that my skills are so shitty that I'll never be able to make something like [this](https://dribbble.com)
I feel your pain...
Okay, yeah you're right. Unchecked will make it faster, but it changes behavior in an unsafe way. For those unaware, -Ounchecked means that Swift won't do any bounds-checking when you perform arithmetic, which means numbers will silently be able to over and underflow. However it can make some code orders of magnitude faster, because there's no bounds checking.
FWIW, I'm about 90% certain that you can just delete that. I believe there's a protocol extension on MutableCollectionType that provides generate() with IndexingGenerator&lt;Self&gt;.
&gt; cocoa-controls.com It is https://www.cocoacontrols.com/ :)
You are correct, thanks for letting me know. I'm still figuring this stuff out. :-)
Thank you. I was going for a walk while typing. Sorry for not looking it up by myself. ;)
Googled PrettyUIKit expecting some 3rd party library. 
The results are weird. The code is probably badly written.
No. The only interaction is detecting low power mode and reacting to it. 
Well you can see the code there. Its fairly simple. I'm sure you can help to optimize it. I imagine the Go code there needs some optimization as well. But what specific results are weird? -edit- It just seemed like the most reasonble result for when I googled the question.
And Autocompletion is broken in LLDB when debugging swift code -.- 
I actually really like Xcode, but the stability issues are getting on my nerves... Let's hope this will improve as Swift becomes a more mature language.
An app or a widget would make it so much easier to switch low power mode on/off or cellular data on/off. Since they're not available in the Control Center - and are quite a few taps away in the Settings. 
Most projects I make do depend on a few libraries, some of them being written in ObjC. I guess it will take time before all libraries are completely rewritten in Swift.
Hit up Youtube for specific things that you want to do with your UI. There are a lot of great tutorials that teach you how to finesse little things that make a big difference.
If you would give apps the rights to change those settings and thus possibly disabling communication on a device, you could just take over that device. If I had any mobile phone with that kind of functionality, I certainly would change my phone immediately.
Unfortunately, no. (As it happens, there's a proposal right now to add this behaviour) You can get around it (kind of) with an extension that turns Area into a CollectionType, though: enum Area: Int { case TopLeft = 0, Top, TopRight, Left, Center, Right, BottomLeft, Bottom, BottomRight } extension Area: CollectionType { var startIndex: Int { return rawValue } var endIndex: Int { return 9 } subscript(i: Int) -&gt; Area { return Area(rawValue: i)! } } for i in Area.TopLeft { print(i) } //TopLeft //Top //TopRight //Left //Center //Right //BottomLeft //Bottom //BottomRight for i in Area.Bottom { print(i) } //Bottom //BottomRight Which will give you the cases beginning with the one you call the iteration on.
Yes -- look at [MKAnnotationView](https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKAnnotationView_Class/) and [MKMapViewDelegate](https://developer.apple.com/library/ios/documentation/MapKit/Reference/MKMapViewDelegate_Protocol/). [Here's a stackoverflow response](http://stackoverflow.com/a/7145835) to address your exact question.
This seems really cool! But I'm not sure exatly what you could use it for. I've just started learning about neural networks and have been thinking it would be cool to try something with Swift. Any thoughts on what it could be used for? Like a good idea for a trial app?
What's up with that website design?
You may need to update the UI code, and make use of asset management if your app is over 200 MB, but as far as I know the frameworks are similar enough that you don't need to worry.
Didn't mean to judge the website, I was just surprised a website containing such relevant information wasn't styled, at all. Thanks for explaining!
I didn't ask for an answer. I asked for a guesstimate. This is the 3rd time I've had to reiterate that point.
I had thought of something less obtuse e.g. `p.toPredicate()` but I figured it got in the way of someone quickly putting together a PredicatePal expression in place of an NSPredicate. I figured `*` was OK since it's connotes a C/C++-style dereference. Thanks for the praise!
Yes. If you know how to make and host a database, then do that. You can also use parse.com to host data that can be updated without updating the app code. You could also just throw it in an excel file and host/parse that. Or a text file. The big thing is that it needs to be hosted someone. 
Yes, that would have been my first choice. Unfortunately, the `NSPredicate` is a class cluster and I couldn't just declare an initializer that swapped out `self` for something else. In particular, I generate some of the predicates with `NSCompoundPredicate` and `NSComparisonPredicate`. Also I needed to declare the conversion func as part of the `Predicate` protocol, so that it knows how to recursively convert subpredicates in an expression. Not sure if it's possible to declare an initializer of another class/struct in an unrelated protocol. You're welcome to try it in a pull request. I'm all for adopting more Swiftish syntax.
It doesn't even have to be hosted anywhere - you can just include a text file with the app as a resource.
Doing these sorts of image manipulations is expensive. You'll need to use a bunch of different techniques to get the best performance. This includes things like: - Use the GPU as much as possible. I can't remember if Core Image runs on the CPU or GPU... look into [GPUImage](https://github.com/BradLarson/GPUImage) for very fast filters. - Check to make sure you're not regenerating the image if the slider values haven't actually changed since the last time - Throttle your renders: use a timer to ensure you only actually perform the rendering once every X seconds. There's no point trying to render again for every little slider change. For example, you make be wildly swinging the slider from left to right, but the image will only render every 200ms. - Render on a background queue: this means you won't block the main thread (where your sliders live)
At the moment, IMHO, the official documents, i.e. the Swift Programming Language and Using Swift with Cocoa and Objective-C, are highly recommended. In fact, detailed revision histories are included in these books to highlight the changes made so far.
The biggest blocker for me so far hasn't been Swift - it's the bloody layout constraints! As soon as I figured out how to declare fields in code using @IBOutlet and then to attach them to views in the interface builder I had everything I needed to update views with images and text returned with Alamofire - but making the app look nice... that's where the challenge is gong to be. Just like on Android where the first thing you do is add Retrofit, Gson, Butterknife etc on iOS I'm adding Alamofire, Alamofireimage, and SwiftyJSON to make life easy (well, easier anyway)
Ezswiftextensions has a easier time usage imo
Which is probably the better option of the two if you don't care about adding content without updating the app.
Ok. I got it: if let array = json[("main2")] as? NSArray { if let main2 = array[0] as? NSDictionary { let ref2 = main2[(ref2")] as? String localMain.text = ref2 } }
The swift compiler will improve greatly in terms of crashes in the next update. Here is a [significant commit](https://github.com/apple/swift/commit/c258f991f64a431da57fc79b66e879e5062fba3b). It fixes 91% of the crashes. 
Maybe, but the impressive part about this is that it only uses C api's (no foundation).
I like to use an type alias : typealias JSON = AnyObject typealias JSONDictionary = [String:JSON] so I cast my JSONS to either: myJSON as! JSONDictionary // when my JSON is an object or myJSON as! [JSONDictionary] // when my JSON is an array
https://github.com/apple/swift/blob/3877d04a735e72aa1be3f8ab21c9902f7ac7b0ff/stdlib/public/core/Optional.swift
Oh shit of course, swift is open source now. I had forgotten about that.
Sweet endeavor. One quick note just to save you the time of looking into it: You will be able to reproduce everything except for implicit unwrapping. The compiler generates inserts pseudo-invocations of `ImplicitlyUnwrappedOptional`'s accessors wherever you omit them from your code, and there's currently no syntax for implementing this anywhere else.
Not a lot of style designers in open source, apparently :p. At least you know it's serious.
Actually we want to remove all leading consonants, not just 1. This is maybe overengineered but hey, I'm procrastinating: import Foundation extension String { var banana : String { let trimmedString = lowercaseString.trimLeadingConsonants return "\(self) \(self) Bo B\(trimmedString) Banana Fana Fo F\(trimmedString)" } private static let vowels = NSCharacterSet(charactersInString: "aeiouAEIOU") var trimLeadingConsonants: String { if let vowelIndex = rangeOfCharacterFromSet(String.vowels)?.startIndex { return substringFromIndex(vowelIndex) } else { return "" } } } "Brandon".banana // Brandon Brandon Bo Bandon Banana Fana Fo Fandon "Aaron".banana // Aaron Aaron Bo Baaron Banana Fana Fo Faaron "Eric".banana // Eric Eric Bo Beric Banana Fana Fo Feric
Thank you so much, I did this and it really helped point me in the right direction.
I'm curious where you are seeing these APIs...can you give a specific example or two? ta.
if my memory serves me right, this was the old nomenclature for Swift methods. however, the force-unwrapped return signatures were replaced with their non-optional counterpart signatures as the language has evolved. this makes sense when you think about it because if you force unwrap an optional you are guaranteeing the underlying value is there and accessible at which point you return that value. I'm also interested in knowing where you are still seeing these signatures. perhaps you are looking at older Swift API docs? 
Normally model classes would not affect the implementation of the UI. In fact, that is why people invented the Model-View-Controller (MVC) paradigm: to keep them separate (so that you could easily change one without messing with or messing up, the other). Before MVC, people just slapped any old code in any old place and everything depended on everything else. I would highly recommend following the MVC paradigm because that is what will allow you to write the non-UI portions of your code and then do the experimenting required to the UI, which is, rightly, the main question you are asking. As far as how to implement it: I'm assuming you've had a look around at what possibilities there are; you mention about changing images, for example. There is also UIAppearance and related classes. And there are companies which sell add-ons, such as the ability to adjust appearance in a kind of similar way to the way CSS works for HTML. And there's loads of open source frameworks/toolkits/classes to try to help with this. The fact that there are hundreds of different ways, and the fact that no two projects I have worked on have ever done things the same way, indicates to me that either Apple have never got it right, or developers/designers will always choose to do something different out of ignorance, or because they like to see the world burn, or they really truly believe their interface is that special snowflake...or, maybe, indeed they truly are implementing their interface in the best possible way. So, unfortunately, no one can tell you what the 'right' way is. And, I'm sure you've already seen, or can easily Google, loads of different people's opinions. You'll just have to kind of try to figure out the different possible ways and try writing some apps with each way, or talk to people who have done so, and figure out what works best for you.
Yea ObjC isn't going anywhere any time soon. It's not actually a terrible language. Swift is just a really great language, but they need to stop changing it. Like they are removing standard for loops and incrementors, their reasoning being only experienced people used them. This makes me wary of its future.
&gt; I wonder if there is still a practical reason to use implicit unwrapping in a function parameter. Not one I can think of. When you're creating a function, you know whether you want to require a value or use an optional, so you don't need implicit unwrapping. When Swift was new it was commonplace to see this kind of thing because Objective-C didn't have any way of expressing that a parameter was non-null, and it would have been extremely clumsy to have everything imported from Objective-C treated as optionals. Apple added the nullability annotations to Objective-C, then went through all their Objective-C APIs to annotate them. This took a long time, so every version of Xcode that came out removed more and more implicit unwrapping. These days, any Objective-C API you're likely to use has been annotated by Apple, so things don't show up as implicitly unwrapped any more. It's best to keep up to date with the official documentation rather than rely on third-party tutorials and old Stack Overflow answers. The level of quality from third party tutorials has been quite poor, and Swift moves quickly enough to make it outdated regularly as well. 
For your controller, I would define a protocol that outlines the show method requirement. Then the type that your method would accept is that protocol. For the arguments you could have an optional controller argument and an optional closure or completion argument that both default to nil and call the right one appropriately. 
/r/startups might be a better place to pose your question 
Thanks
Don't worry, at first I was fairly concerned about their removal as well. But after reading the e-mail + rethinking their use, it made sense. I really like the idea that it's a community suggestion, it makes the language and Apple very approachable. When the more serious pull requests start to come in and their creators start joining the Core team, I think the language will only benefit. Swift is meant to be very lightweight and easy to read, perfect for new developers or the more experienced ones trying to build huge apps that need to be maintainable. In comparison to ObjC (being limited in my knowledge), Swift succeeds better in those aspects than ObjC. I'm looking forward to Swift 3.0 :)
Why does it make sense? Their reasoning being that only experienced developer used those features. You could say that for a lot of other features of Swift as well. Luckily its over a minor thing, but it does make the language more verbose. It just doesn't sit well with me. I guess it being a community suggestion is neat even if I think its a bad idea, but no offense a community suggestion to an open source language is not exactly a novel idea. It's novel in Apple's case, but its 2015. There are tons of companies who are founded on having great open source software and programming languages. Look I'm an Apple fan. I've used their products my entire life. They don't exactly come off as an approachable company to me. People quoting to me that it's great because its a "community suggestion", makes me cringe a bit man. Why can't it just be another open source programming language like the other ones?
Any way you like! You can store it in JSON, YAML, or even line-separated plaintext. The only important thing is that you can parse it. I'm unfamiliar with what your fitness is structured like, but for example (JSON): [ { "name":"macho", "steps": [ { "name": "push-ups", "count": 15 } ] } ... ] And then you could parse it into an array of dictionaries (using SwiftyJSON or NSJSONSerialization or something) and get the data from it fairly trivially.
It gives the variable you're creating a larger scope than an 'if let' would. In an 'if let' the new variable can only be used within the statement's curly braces. With a guard, the new variable is within the same scope as the guard statement and can be used anytime after the statement. Guard statements are well-suited for error handling since all the the error handling logic can exist on its own within the scope of the guard's else block. And if the guard statement is successful, you don't have to worry about dealing with a smaller scope for your new variable; unlike an 'if let' where the statement's success confines you to its braces until you're done using the new variable 
I've tried all of your suggestions and more (reflection and all kinds of things), but they all lead to ugly syntax. In the end I just went with calling the UserController from the closure...
Hi guys! I've recently shared iPromise to this subreddit. Since then, I've updated the lib and added two more components to it: iService and iModel. This whole bundle is something I'm developing for my Bachelor's Degree. I'd appreciate any feedback. Here are the links: * [iModel](https://github.com/theddnc/iModel) * [iService](https://github.com/theddnc/iService) * [iPromise](https://github.com/theddnc/iPromise) All modules are available separately through cocoapods. Docs should be available at cocoadocs soon. Thanks!
Hey there -- this is really great work! I've been working on some similar stuff with my ViewModels and this is a nice sanity check that I was on the right track! One question -- in your implementation, your validations will be blocking calls even if they contain an async operation (like validating a username against an API) right? 
Nice!
you can use the PFQuery class to send requests to Parse to grab data. https://parse.com/docs/ios/guide#queries
Have you ever used PFQueryCollectionUI? I have a hard time making it work.
I don't think they are the future in the sense that you will see tons of apps which are purely webview based. However, I do think that webviews offer a very unique tool to leverage in some apps. These days there are several UI A/B testing frameworks which are based on using web views. This is a great tool to use for your apps registration flow which is often something that requires frequent testing/tweaking. The rest of your app could then be regular ole storyboards. Webviews are also a cheap way to app-spam/whitelabel to get a larger number of apps out quickly. So to me, it's like any other tool. It alone won't change the world, but it does offer some limited value to apps in some contexts. 
So it's easy enough to do with overloading. Whatever the data type of `app` is, I'm just going to call it `WebApp` for now. public extension WebApp { public func get(handler: Hander) { ... } public func get&lt;Ctrl: Controller&gt;(handler: Ctrl -&gt; (String) -&gt; ()) { ... } } Remember, since `Controller` has a required initializer, you can invoke the handler with `handler(Ctrl(request: req, response: res))(str)` Regardless, I recommend you simplify greatly. Rather than making something instantiate `UserController` for every request, I recommend either just using the original function handler system, or having one controller that gets called repeatedly. Further, I would recommend you choose one of these systems rather than trying to work with many of them. EDIT: Fixed a type signature mistake that I made
Cancel actions should go on the left for iOS, don't try and subvert the standards please. 
It depends on the action, in your case it is correct for cancel button to be on the left &gt; When the most likely button performs a nondestructive action, it should be on the right in a two-button alert. The button that cancels this action should be on the left. [- iOS Human Interface Guidelines](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/Alerts.html#//apple_ref/doc/uid/TP40006556-CH14-SW1)
Delete is the most common one.
I'll offer my words of encouragement as a "successful" (read: happily employed) iOS developer: Of all the time I've ever spent tinkering, reading or working on unsuccessful and unshipped app ideas, none of it was a waste. That time I put in always pays off in one form or another. I personally LOVED the "Beginner's iOS" book from Big Nerd Ranch (about 5 years ago).. I just went through chapter for chapter, even when I was confused. When I was done, I knew just enough to cobble an app together. My biggest advice if you're following along with a book: don't make it a leisurely reading activity. Sit down with the book in front of the computer and follow every step of every chapter. The benefits of actually typing each line of code, even ones that don't make sense, cannot be overstated (particularly when *brand new* to a language or platform). Good luck!
My team had used Cordova and Xamarin extensively, and I'm very negative toward them for most purposes. If you're very comfortable with its language (JavaScript it C#), you don't know the platform's native language (Ohabjective-C, Swift, Java), your quality bar isn't very high (perhaps you have a small population of friendly users that will work around issues), and you need to support more than one platform, they can be a very good tool. Otherwise I find that they cause more problems than they solve. They tend to solve the easy problems very well, but they make the hard problems harder.
r/shitidiotturtle is right. Note that starting with iOS 9, you have to list the schemes you might open in your Info.plist. Search for LSApplicationQueriesSchemes in the [Info.plist reference](https://developer.apple.com/library/mac/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html)
NSUserDefaults is for storing user preferences, not arbitrary data files. Store them on disk or use Core Data. Loop through the array and do the same thing to store each image you would for an individual image.
Big Nerd Ranch just released their [Swift book](http://www.amazon.com/Swift-Programming-Ranch-Guide-Guides/dp/0134398017/ref=sr_1_1?ie=UTF8&amp;qid=1451543298&amp;sr=8-1&amp;keywords=swift) and it's excellent. I'd work through that as well as read and follow along with the Swift documentation (you can find it on the iBook store).
&gt; iOS apprentice series Do you have a link for this? Are you suggesting a book (pdf) or videos? The pdf is a little pricey. 
1) For me, Swift has been the most rewarding programming language that I have dived into. Understanding protocol-oriented programming, for example, was difficult at first but now feels really great. 2) Yes! Swift already runs on most Linux distributions, and lots of people are working hard to get it everywhere else. 3) Lyft's app, for example, is 100% Swift.
The UIAlertController will be dismissed upon hitting the button. Cocoa (not Swift) does that for you. What they mean by "destructive action" is an action that does something dangerous and maybe can't be undone. "Are you sure you want to delete your profile?" --- something that would be make a user sad if they did accidentally. i highly suggest reading the iOS human interface guidelines at the link CleverError provided. 
Why do you call "listen" in the loop? It should be placed outside.
Forking should be OK. In the Fletch runtime for Dart they were experimenting with forking and message passing and in my tests with it, it was OK. With threads it can be easier, the problem is that we cannot guarantee that all the code that we use will be thread safe. I think that the projects that go with threads tend to be very paranoid about it. The idea of even being able to have shared memory with threads can be tempting, but the guarantees are fewer with them. Forking may be the most stable way to serve multiple clients without having to go with Async. Async is cool, but the algorithms change and there is still the possibility that if an algorithm gets stuck for too long it could slow down the others. I don't like the Async style so much. What is good on the GUI may not be as good on the server and vice-versa.
You misunderstand what threads are for. Anyways, for the server the best solution is epoll (or an alternative library but I assume you're on Linux as you're using Glibc). Forking is the worst solution. Generally threads are very efficient if used appropriately (e.g. via Apple's libdispatch which is also available on Linux).
Looks like X11 forwarding over SSH. The compilation happens on a different machine that runs Ubuntu.
Thanks for the advice. 
Are you attempting to make money from the app?
Did you offer him the option of a cut of the app revenues instead of money up front? 
Down the line, that is a possibility, but the app isn't in a revenue making market, at least not right away. It will take time to build up a user base, and then there may be a way to monetize the application - but this is all reliant on the fact that it builds a user base.
http://www.raywenderlich.com/store/ios-apprentice There is the link. I just have the PDF. It is a little pricey but each app tutorial is about 200-300 pages so its a good bit of info. I never knew what type of projects to create so these helped give me some guidance and a chance to touch a few different ideas I probably never would have tried otherwise.
Awesome. Thank you.
that's where I'm stuck!
I would appreciate that, they just seem too simple, they don't stand out like I feel they should. They're just don't wow me when I look at them like I think they should.
&gt; Do you think that $800.00 is a fair asking price for this type of work? It really depends on what you are asking of your designer. You could ask the designer for a theme. Basically, just some fonts and a color palate with maybe 1 or two example mockups and you just take it from there and implement the fonts and colors as you see fit. Or you could ask the designer to meticulously lay out every screen in the app (login, home menu, area A, area B, area C, notifications, errors, etc...). This obviously would entail more time and money. But, there is less thinking for you to do. Those are two extremes. You can also say, "I have $500 in my budget, I know it's not a lot, what can I get for that?" and see what (s)he says.
Then wasting money on a designer is out of the question. I completely understand the difficulty in doing a good design, but to pay somebody out of pocket for this service when there is no income from the app is just plain crazy. The other thing to consider is that app design is a learned skill just like anything else. That is the more effort you put into it and the more designs you attempt the better you get at it. Finally a good design is so much what you think of it but rather what your users think of it. Does it meet there needs and is it fluid for the way they actually use the app? In the end a good app design has to evolve to meet user needs so sometimes a third party in the loop just adds resistance to change. In a nut shell it is silly to waste money on a designer if there isn't a possibility of earning money of the app. 
Then worry about it in a major release some years down the road when income is actually coming in. In the mean time work on your own design skills. You can improve and realistically every bodies first app looks like crap. Take what you have now and address each point you see as objectionable one at a time until you get to the point of something that pleases you. Frankly you should expect your first design too ""get it right"" and in all likely hood neither will a third party designer. A good interface just doesn't happen with a snap of the fingers. There is a very good chance that the first design from the designer won't be that much better unless he can read your mind and has a good feel for what the app is attempting to do. 
Hey hey, designer/past college student here. Maybe I can help. $800 is pretty inexpensive for experience and interface treatments, especially if the designer is offering revision rounds. On the other hand, I understand that those 800 could come in handy elsewhere. If you're not in a particular rush to publish the app - I have a recommendation: study [Apple's HIG](https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/) and buy a copy of [Sketch](https://www.sketchapp.com). Sketch's learning curve isn't very steep (much easier to learn than Photoshop or Illustrator). Plus it's quickly becoming the industry standard for UI designers because it allows you to push out assets in 1x, 2x, 3x, and PDF. This route is much less expensive than the 800 and as an added bonus you'll develop a foundational understanding for the design side of things which I personally believe is invaluable.
Here is the problem. Let's say you are interviewing for a corporate job, developing software for internal use, In such a situation getting support from a designer will never happen, you will be expected to roll your own. So how will you handle questions about your user interface and general design skills. In such a job interview people want to see your own work. If you aren't clear about a designer helping to create the app then you leave yourself open to being fired for being dishonest in the interview. In a nut shell for an interview you need to be able to demonstrate at least one app that is all you own, something you can explain in detail throughly. Think I'm nuts! I've seen many internally developed apps that are just crap user interface wise, many corporate structures simply don't allow for the expense of a designer. So you really need to be able to demonstrate at least one app that you are 100% responsible for. In general in the corporate world you will be expected to generate usable software without a lot of frills and without the help of specialists. What bothers me more than anything is that you are getting all wrapped up in what you claim to be your first app. Sorry but nobody achieves perfection with their first app. In fact you may find the code in your first app to be so appalling three years from now that you will want to scrap the whole thing. So getting hung up on the user interface is really hilarious if you ask me. Others can probably support this but most people find their first few attempts at professional software to be embarrassing after they have a few years experience under their belt. 
 &gt;Im wondering, when would you use this? Im new to swift but I always thought swift was for apps that have a GUI, so this kind of progress bar wouldnt be used much would it? Where did this idea come from? Apple has been very upfront about having a very wide vision for Swift. Initially it is targeting GUI apps on their platform as a replacement for Objective C. However they see it as a fully capable systems programming language which could long term replace C, C++ and Java. Considering the very positive response they are getting with Swift I'm expecting it to expand out side the GUI world very rapidly. 
Very Nice. Now all we need is a generic GUI solution. That is a variant that hides the cruft of whatever GUI platform the code is running on. 
Your friend doesn't know what he is talking about. Either that or he has a very low standard for what a an app is capable of. About the only thing a web view app is good for is porting a browser based solution to a platform so that you can call it an app. The problem here is that web browsers are vastly improved on mobile devices so there is little incentive to do an app for what is largely a web based solution anyways. Once you need even one little native API you will find out how stupid an app built entirely around a web view is. Honestly don't make decisions based upon your friends opinions. There is an extremely small set of solutions where his approach would be correct. Further modern languages like Swift are far better coding environments than JavaScript. If he believes that JavaScript is the reason to go in this direction then he is simply out of touch with what is happening with native apps and code. 
They are wired like this: @IBOutlet var tipControl: UISegmentedControl! @IBOutlet var advancedTipField: UITextField! @IBOutlet var advancedTipLabel: UILabel! which I thought was correct since it lets me do things with them in other places in the code
What I mean is, have you connected them in Interface Builder? You have outlets which are force unwrapped. But if they aren't connected to anything, you are unwrapping nil.
Seeing as how I'm not sure what you mean by interface builder probably not. I connected them from the storyboard to my code by dragging and they show a filled circle in the code which I take to mean it understands the outlet I've created or is this not what you meant?
Small note- there are many GUI frameworks for Linux- how do you think Linux applications are made? Ex: gtk+
but do they work with swift?
I never used Swift for development but I guess you need to override not the touchesBegan (since it's only fired on the first touch) but also touchesMoved.
Yup! There was a post about it here a couple days ago, along with a post on appventure.me, and I assume several others.
&gt; probably badly written "Well you can see the code there. Its fairly simple. [I'm sure you can help to optimize it.](http://benchmarksgame.alioth.debian.org/u64q/play.html)" 
&gt; poor implementations The Go programs that were included with the Go distribution were based on the naive C benchmarks game programs, not the highly optimized programs. &gt; For example GCD or threads are not used… [Is GCD available on Linux?](https://lists.swift.org/pipermail/swift-users/Week-of-Mon-20151221/000604.html) (Presumably GCD programs would be more idiomatic Swift than thread programs?) Meanwhile look at **cpu** time rather than elapsed **secs**.
What didn't you like about it? Along with Stephen Kochan's book on Objective-C I have yet to find a book that covers the topic better. I thought it was very readable, clearly written, and covered some fairly deep topics.
I see where you are coming from but to be fair it was a book on a programming language, not the concepts of Object Oriented Programming. Sounds like iOS Programming might have been a better choice for you. 
Try this guard let playerName = gameScore["playerName] as? String else { print("could not convert playerName to String") return } 
Thank you for this! Easy to understand and follow
I pretty much always go to stack overflow first, find out the class or methods I might want use or might be a good solution, then go to docs if necessary to truly understand what is going on.
~~assert calls abort which terminates the program immediately. It cannot be caught (except by a SIGABRT signal handler, and even then the program will still exit).~~ One solution would be to define your own assertion method which throws an exception when running tests and calls assert otherwise. See this question about [Testing assertion in Swift](http://stackoverflow.com/questions/25529625/testing-assertion-in-swift) on StackOverflow.
Doesn't objective-c have the same behavior (calling abort() in c)? How is it that XCTAssertThrows in Objective-c can "catch" asserts?
That's interesting. I deduced that assert calls abort in Swift from [this post](https://developer.apple.com/swift/blog/?id=4) on the Apple Swift blog. However, it appears this is not the true behavior of the function, and it does in fact throw an exception. I apologize for misleading you.
Could you show some code?
That means they're correctly wired up. For future reference: * Go to your interface builder * Select the UIView you want wired up (In your case the segmented control) * On the right side of XCode (the 'utilities' pane), click on the arrow pointing tot he right (connection inspector) * you should see a reference (in your case a 'Referencing Outlet') towards your variable name (tipControl)
Stack Overflow for sure. Although I really wouldn't mind knowing how to understand Apple's tvOS manual. However, I simply don't comprehend how it is supposed to be understood by someone who doesn't comprehend Objective C or the way Apple thinks a manual is supposed to look.
Use view.layer.mask and set a CAShapeLayer. You can use a UIBezierPath to generate the path for the layer. Once you have done that just enable the masking to bounds on the layer view.layer.maskToBounds = false
Why wouldn't you use UIImageView? If I wanted to start using Silo everywhere I would need to change the base class everywhere - this wouldn't work easily in the xib files.
Xcode refuses to link the framework when you're making a command line application, mostly due to the fact that there's no way to bundle it with the binary. Swiftc, on the other hand, is just the compiler and doesn't stop you from doing anything.
you could do either. I was leaning towards an extension though 
Well for me, I started studying the syntax and as soon as I got the 'hang' of it I created an app. I guess as soon as you learn swift's syntax you should be able to create an app while simultaneously understanding the docs.
I just started doing it. To make an app you need to do a long list of things. You pick a thing that needs to be done, you google around to find the answer for how to do it, you do it. Next thing. Repeat until all the things are done. Eventually you've done enough things and found enough answers that you start knowing the answers without having to go look, and it just flows from there. 
I already have a fair amount experience with C-like programming languages (C, Objective-C, Java, PHP etc.), so I just started writing it. Needed a bit of reading to learn about wtf `!` and `?` meant but generally it's been pretty easy to pick up. I know I'm writing terribly unidiomatic Swift (is there even such a thing as idiomatic Swift yet?), but I've been reading things like [Erica Sadun](http://ericasadun.com/)'s blog and refactoring as I learn about new things. This week it was the fact that extensions can conform to protocols and `guard` 
&gt; In terms of picking a thing to do, wouldn't I also need to keep in mind future compatibility with the current task I am doing? No. Basically, don't write it until you need it. Solve the problem at hand, and only that problem. If the next task requires rewriting some portion of the previous one, that's fine. Constant refactoring should be a normal part of life. One of the biggest mistakes junior (and even sometimes intermediate) programmers make is thinking they know what the later requirements will be, and wasting time writing things in expectation of those later requirements. Unless you have architected the entire project down to the tiniest detail before writing a single line of code, you are going to be wrong, and you will have wasted time building things that will need to be thrown out before they get a single use. Keep each "thing" small, focus only on what's required for that thing, finish it, then move on to the next one. Expect to have to do minor refactors of previous things along the way. Constant refactoring is a good programmer habit to have. Meanwhile, writing code that you don't need yet is a bad programmer habit to have. 
Trial and error. It's ok the crash and burn and have to restart your project. Honestly it's even fun doing that plus you learn it a lot better 
I work developing apps for a living and this is on point - the idea is well known and is also an acronym = YAGNI 
Thanks for your advice! I do think to much of the future and spend alot of time writing stuff that I currently do not need. I will let go of doing that and try to write for the present. Thanks guys.
Just did a quick google on it. Thanks a bunch guys!
I have a plane journey tomorrow and I will definitely give this a read. Thank you!
Swift is the easy part. If you know any programming language that's C like and don't mind reading the book (read with speed, and then come back when you need the parts). The "hard" part is the UIKit and how Apple Apps work. Go to Lynda.com I followed their tutorials on Objective C, but doesn't really matter, they should have their tutorials on Swift by now. Really quality material, worth the price. There are always good YouTubers and a full course on iTunes U by Stanford University. 
&gt;Replace continue keyword with synonyms from other scripting languages (e.g. next, skip, advance, etc): Swift is designed to feel like a member of the C family of languages. Switching keywords away from C precedent without strong motivation is a non-goal. So then what's up with "typealias" and "repeat-while"?
Well I was in different spot then yourself. I wanted to learn swift to build any app idea I had rather than a specific app. The reason that is different is because you know what you need for your app. If I was in your position I would first learn the basics by picking up raywenderlich's swift apprentice book which gives you the ground work and then you can build on top of that the things you need specific to your app. I would advise that you map out your into app versions rather than trying to make the whole thing at once. For example your first version of the app does something basic and then you launch that. Then you start building version 2 where you add more features and keep doing this until it is complete (well a good app is never complete ;)). If you like watching video tutorials then sign up for Mark Price on udemy with coupon to reduce the price to $10 - $15. (He will teach you the ground work as well as necessary things for your app + MVC). How I learned swift was through books by Simon NG, Ray Wenderlich, Mobile bootcamp, Udemy (Mark Price and Rob Percival), also tried out a bit of Stanford University course. Good luck 
Instead of a label you could use an image that you made in something like Photoshop. 
Good advice. 
I run a blog and a slack group for Swift beginners. You can register here and you can post any questions in the slack: http://helpmecodeswift.com/join-slack-team
Hi there. No error per se, I'm just attempting to execute the .app from within /Applications and nothing happens. It executes from within my namespace though (eg. /Users/[ME]/Applications). Is there an interface within xcode which configures the permissions of the app? maybe that could be a solution?
Sorry new to swift and programming kinda. Do i download these then import them, or do i just import and it works?
Books from raywenderlich.com I work in the app development industry and I can tell you with confidence the books would get you properly grounded for any junior position. 
I second this so much. I have self taught understanding and knowledge of front end web stuff, but no hands on experience with anything "bigger" than that tech. I've completed about 10% of the course in 5ish hours or so (including downloading, configuration time etc). The first "app" you build is an age calculator, [here's mine](http://i.imgur.com/N7VFgqZ.jpg). The instructor says you will build some clones of popular apps (uber, instagram etc) and it also comes with a bunch of additional graphic assets and his how to make 10k while learning to be a developer pdf which is pretty generic but if you're just starting out, couldn't hurt to read it : ) Given the reviews, the price cut and my general desire to know more - using this course as a starting point was a no brainer. It already has unlocked a new way of thinking for me as well as sprouted some ideas for my first "big boy" app. 
try [StreamScanner](https://github.com/shoumikhin/StreamScanner)
Hey, I maintain the organization for three of these! (Swiftz, Tyro, Focus). I'd like to nominate [SwiftCheck](https://github.com/typelift/SwiftCheck) for a runner-up here. We use it to test everything under the org because it's so damn useful.
Check also the [Hello World forking socket server snippet](https://github.com/jpedrosa/sua/blob/master/examples/snippets/hello_world_forking_server.swift). Although the algorithm might look small in number of lines, the mapping required to get the Swift code to work cleanly with the C code it is calling can be a little difficult to master.
For projects like Apache and Nginx, using threads and/or epoll may be useful. But then for the dynamic parts they tend to go with proxies that delegate the work to languages like PHP, Python, Ruby, JavaScript and so on. With Swift we have a chance to not have to delegate the dynamic parts to other languages. Developing with Swift feels quite speedy at times, in part because the compiler is not as annoying as it could be. For example, the compiler will not always complain about us using "var" when we could be using "let" for outer scope code. The compiler will not always complain about unused functions and such. In Go the compiler can be more annoying as it complains about unused functions much more by default. Even though they could disable it at times. With Swift we also get the interpreter and REPL. One of the advantages of loading a process to handle a connection and then promptly removing it when it is done is that the state is reset for a new connection. Without guarantees that the state would remain in a good state between connections, starting it over is a good way to go about it. With PHP, PHP libraries are vetted so that their state does not leak between connections. So that Apache can use a more optimized version of PHP. We have the compounded effects that Apache uses code that is vetted to work in a multithreaded environment. And the PHP libraries that Apache makes available by default are also vetted to work in a multithreaded environment. And ultimately when PHP code is executed in a connection, the state it is started with tends to be reset or at least the boundaries are clearly understood when state is maintained. With Swift, if the code that we want to run in a server has not been properly vetted for decades like PHP code has, it is a bit harder to make assumptions that it will work OK. With Swift we already have advantages of having good performance by default. Swift code could be introduced slowly like running as a proxy in an Nginx installation, resembling an installation of a scripting language at times. Rather than to try to compete with Apache and Nginx themselves while trying to do the job of the scripting languages at the same time. That gives me an idea. :-)
Wondering this myself
Hey i don't mind to give you some pointer. Pm me with what you need help with. Cheers
What's wrong with Swift being similar to C++? Why do people propose to drop familiar syntax like: &amp;&amp;, ||, ++, --, continue, default, for loops, semicolons, curly braces, etc.? It's much easier for anybody coming from C-style world (which is a majority) to learn Swift when it has these well-known keywords.
you can just include both libraries. the only issue you might have is if they both have functions with the same name In that case you might need to tell the compiler which one you mean by calling e.g. `Module.function()` rather than `function()`
1. The size of the runtime is irrelevant as forking doesn't entail copying. 2. Google's App Engine creates more instances on different machines. On one machine, forking would only create problems. If you want a fast sever just use libevent or something similar, unless you don't care about resources and performance. There's an open source wrapper for Swift.
At this point, any company maintaining a production iOS app is writing mostly Objective C. Even if they have started integrating Swift into their apps, there is still going to be a lot of Objective C code out there. If that type of company is hiring, knowing Swift only is probably not enough, since you will be dealing with mostly Objective C code. This will change as more and more projects are written in Swift. For now though, you need to know how to write both if you are looking for an iOS job.
I actually recommend the use of Carthage to install them.
No. Visual Basic. So, I'm neutral.
New apps are probably going to be written in Swift. Existing products will most likely written in Objective-C (possibly with some Swift in them). If you want more opportunities, I'd learn both. In my opinion though, the languages of iOS development (Objective-C / Swift) isn't really the time consuming part. Learning how to use the frameworks and tools (Xcode, Cocoapods, Carthage) is. Luckily, the frameworks and tools are used the same with both languages. So I'd say learn the language that seems the most fun to you now and the other should come pretty quickly after that. Good luck :)
I think your problem is the use of a modal segue to show register view. These don't use the navigation controller, instead the modal view appears on top, and is outside of the navigation controller. If you want to get anywhere from RegisterPageViewController I feel you'd need to close this modal view first, then transition from view that opened the modal, this view is part of the navigation controller. Note: without the navigation controller your segues won't slide left and right, they will always appear from the bottom, like a modal. So going from register to wall views doesn't really make sense to me. Take take that all with a grain of salt, I'm still pretty new to all of this. 
custom operators should be optional - I try not to implement them as it requires a steeper learning curve for developers new to the code base
I'm writing swift on linux today. even if it's not stable, but it's being worked on, there was a release on the 31st. The libraries seem to need work but you can always use c libraries
I've recently done up to tutorial 13 of Hacking with Swift and had no issues. I'm not knocking your reading comprehension but are you sure you were following it completely and not skipping anything? If there are mistakes let the author know. If you're struggling with where to place some code and you can't figure it out, check the completed project on GitHub or ask in the comments/dedicated sub-reddit. I've seen a fair few tutorials on Swift and the Hacking with Swift series has to be one of the better ones out there, especially highlighting how the projects build on past tutorials. 
OSX
and what do you need help with
A month or 2 ago. Can you identify a couple of the errors in lesson 5, it'd be worth looking at what's wrong or how it could be presented better. 
In Swift, you can't type cast between types just because they have the same contents. Type casting only works with inheritance relations. `meter` and `kilometer` don't inherit from `Int` (because that's not possible), so you can't cast from one to the other. Your `m` and `km` overloads are trying to change the type of the properties from `meter` and `kilometer` respectively, to `Int`. You can't do that.
/u/twostraws
Theres still no xcode right? And dont you need xcode to make ios and osx apps? I tried teaching myself swift but xcode runs so slow on my 6 year old macbook pro. Is there any word of xcode coming to windows/linux?
I don't think so. But that would not be good for readability. You would leave readers wondering "how on earth is he sub typing Int??"
Libraries often provide easy-to-use wrappers for low-level system functionality. For example, you could write a Swift library to provide a high-level FileHandle object that saves a file to disk using the write() function on Unix systems. If you wanted to make it usable on Windows, you might provide a version that uses the Windows WriteFile() function.
Don't hold your breath. AppCode is a great alternative to Xcode but I doubt it will run any better on your old mac as it's a Java app.
Yea I'll go back and look at it tonight when I get a chance and let you know. Thanks. 
Ray himself is not (usually) on the podcast, rather it's hosted by other members of the team. It's a great podcast, though.
Honestly, I think you're going about it wrong. I think `Distance` ought to be an opaque data type, with properties to convert it to `Int`s representing `meter`s and `kilometer`s. public struct Distance { private let canonicalDistance: Double // choose some canonical representation, I'm using meters public init(meters: Double) { self.canonicalDistance = meters } public init(kilometers: Double) { self.canonicalDistance = kilometers * 1000.0 } public var meters: Double { return canonicalDistance } public var kilometers: Double { return canonicalDistance / 1000.0 } } I don't see why `meters` and `kilometers` need to be types.
The accidental tech podcast is pretty good and occasionally goes in to a bit detail on app development for iOS. 
I'm going to say go with Swift, here's why: 1. Companies will be quickly starting to convert code to Swift 2. Examples in the future will be written in swift, and many old stack overflow questions that were answered in Objective-C have been translated for you. 3. Of course, there will be legacy code in Obj-C you will need to maintain, but I think you can pick it up pretty quickly as needed. (or you should be able to anyway. Same APIs, just syntax) 4. I would care more about your problem solving skills and general skill more than what language you write in. Now if you have an interview somewhere, I may look at the basic syntax of objective-c...but I wouldn't focus on it. 
I see huge potential for swift to be the more expressive alternative to Go on Linux servers. 
Try tableview.reloadData() after filling the array!
Thanks, it worked! I've been trying to get this to work all day and now I feel dumb. Just one of those things I didn't even think about doing.
You made those awesome tutorials? Just wanted to thank you big time for putting in all that effort to help other people! I love your tutorials.
I'd start with this site $19/month: http://www.raywenderlich.com/116963/video-tutorial-ios-101-series-introduction There's an incredible amount of material. If you want free then start with the Stanford class: http://itunes.apple.com/us/course/developing-ios-8-apps-swift/id961180099
`repeat-while` was originally `do-while` in Swift 1.0. the `do` keyword was appropriated for error handling. Edit: also, there is an [ongoing discussion](https://github.com/apple/swift-evolution/blob/master/proposals/0011-replace-typealias-associated.md) about replacing `typealias` with another keyword.
Knowing only Swift right now is going to make it tough for you to get jobs. Even if people are moving to Swift, many/most of them still have a whole lot of legacy Obj C code that you'd be expected to maintain. But then, learning a language that is rapidly dying is also not the best move, because in a couple years that knowledge will be mostly useless. It's a tough market to enter right now. 
An hour? Seriously I'd look for work elsewhere. I did the long commute once in my life and won't do it again. It wastes far too much time and after awhile you will begin to realize that even listening to podcasts everyday wastes a tremendous amount of your personal time. If I understand you correctly that is two hours a day out of your life that you will never get back. Now given that you can't jump ship immediately, I might suggest a few podcasts that aren't programming related. You know something to break up the monotony and expand your horizons. I like the Astronomy pod casts, there is a series of TED talks, robotics related and even a few related to the fine art of barbecue. Why things not programming related - to prevent burn out. Even someone deeply into the business needs a distraction or two from time to time. 
I start a Swift OSX project tomorrow. In another 6 months I'll probably have an iOS project as well.
Makes sense, thanks. :)
&gt; I originally wanted to check if either of these were nil: &gt; `if !overlapWidth || !overlapHeight { ...` This is always one of the first things people coming from other languages need to adapt to. With Swift's emphasis on type safety, only types that conform to the `BooleanType` protocol can be used with boolean operators (i.e. `!` and `||`); there is no implicit conversion the way there is with, say, Objective-C or JavaScript. You must perform an operation that actually returns a `BooleanType`: if someInt == 0 { /* Valid, because `==` with two `Int`'s returns a Bool. */ } &gt; Should I rewrite this to use "if let"? It's good to be wary of forced-unwrapping. In this case however, since you know – without any doubt – that the values will be non-nil, you can use it: if overlapWidth! == 0 || overlapHeight! == 0 { /* … */ } In other instances where you need to test for the actual presence of a value, Optional Binding (`if let` and `guard let`) are definitely how to do it. Note, however, that even though Optional Binding uses the word `if`, it's a separate construct from booleans: if let overlapWidth = overlapDictionary["width"] &amp;&amp; overlapWidth == 0 { /* Invalid */ } Instead, you can use a `where` clause to add boolean logic to the same conditional block: if let overlapWidth = overlapDictionary["width"] where overlapWidth == 0 { /* Valid! */ } &gt; I appreciate any other feedback on my code Looks pretty good for a first-timer. I get the strong impression you're coming from Objective-C, given that you've explicitly typed everything! Not a bad practice, but you can relax a little bit and let Swift's type inferencing take over (no need to use the `:Int` every time you write `let foo:Int = 5`). Finally, you were likely just using this as an example, but things like `overlapRectangle` are better represented with their own types instead of using `Dictionary` for everything: struct Rectangle { let x, y: Int let width, height: Int func findIntersection(second: Rectangle) { /* … */ You'll find there's quite a bit more power that way!
What I was suggesting would be working with storyboard. It seemed to that the arrangement in storyboard was problematic. The navigation controller comes first, followed by the login, then register, and the wall views. Since register is displayed with a model segue it is not really part of the navigation controller flow. This means that using segues from the register view to get to the wall views is not going to use the navigation controller either, at least not in storyboard. The problem of why the transition is not working is caused by the use of a modal here. Without a navigation controller you won't see the transition slide left or right. Instead the modal just slides up from the bottom or is replaced by the new view. Better, in my opinion anyway, Would be to connect all of the main app views with segues starting with a navigation controller. Use some logic on the first view to show login/register as a modal.
If you want to return an empty dictionary if either `overlapWidth` or `overlapHeight` is `nil` or `0`, you can do that like this: guard let overlapWidth = overlapWidth where overlapWidth != 0, let overlapHeight = overlapHeight where overlapHeight != 0 else { return [String:Int]() } Mainly, though, the problem is that a dictionary isn't a good tool to use in this situation. It's error-prone, and you have to unwrap each value every time, and sometimes it doesn't make sense. For instance, what does `[String:Int]()` mean as a rectangle? It seems like you intend it to mean an empty rectangle, but that's kind of strange. A struct would work a lot better: struct Rectangle { let x, y: Int // Coords of top-left corner let width, height: Int } extension Rectangle { var xr: Int { return x + width } // rightmost x coord var yt: Int { return y + height } // lowest y coord } // Returns the rectangle overlap of a and b, or nil if // there is no overlap func overlap(a: Rectangle, _ b: Rectangle) -&gt; Rectangle? { let (x ,y ) = (max(a.x , b.x ), max(a.y , b.y )) let (xr,yt) = (min(a.xr, b.xr), min(a.yt, b.yt)) if x &gt; xr || y &gt; yt { return nil } return Rectangle(x: x, y: y, width: xr-x, height: yt-y) } You can even have it conform to `CustomPlaygroundQuickLookable` to give a nice output: extension Rectangle: CustomPlaygroundQuickLookable { func customPlaygroundQuickLook() -&gt; PlaygroundQuickLook { return .Rectangle(Float64(x), Float64(y), Float64(width), Float64(height)) } }
Is this a homework question or something you are building? Which platform is it for? What you have is essentially a `CGRect` in dictionary format, so depending on the circumstances, I'd suggest title casing the dictionary keys, then running them though `CGRectMakeWithDictionaryRepresentation()` to get a `CGRect`, then using `CGRectIntersection()`, then using `CGRectCreateDictionaryRepresentation()` to get a dictionary back. But that's no good if this is for homework or for a platform that doesn't have `CGRect`. Looking at the code you have, there's a few areas I'd choose to do differently. First of all – if there's no intersection, it's unwise to return a dictionary. This is exactly what optionals are for. Sentinel values are error-prone because all it takes is a developer to be distracted for a moment to create a bug. Optionals are better because the type system differentiates between the two different types of result and forces the developer to deal with them both. &gt; I'm setting the parameters in the findRangeOverlap definition as optionals (with the expectation that values retrieved through dictionary subscript will be passed in), and force-unwrapping for max() and min(). Is this the right way to approach this? Generally speaking, you end up with higher-quality code if you push optionals out as far as possible so that your inner code knows for sure that it has values. So I'd do this the opposite way – let `findRangeOverlap()` focus on finding the range overlap, while the code calling it has the responsibility to pass in correct values. If a function/method doesn't ever need to know about the lack of a value, then it shouldn't receive an optional. Generally speaking, try to avoid force unwrapping even if you think you are sure it won't ever be nil – it's easy to be mistaken and it makes things more difficult for people reading the code. If you're sure it won't be nil, then it shouldn't be optional in the first place. Stop doing the compiler's work for it – your code is littered with unnecessary types. If the compiler can work out what type something is for itself, you don't have to write it in explicitly. 
Same way I learned C 30 years ago. I read the book, and then I wrote a bunch of code. 
So here is a sample project illustrating the idea that I was describing. https://github.com/soggybag/Login-Logic-With-Views Notice the main app, "Home" and tableview, all live in the navigation controller. The login and register views live outside. These views are not used for navigation! Instead, when ViewController (Home) is loaded it checks the login status. If you are not logged in, this view presents login as a modal. It's important to understand this is outside of the navigation controller's purview. The login in and register juggle between themselves, by dismissing one then showing the other. Maybe I'll make a video later, and explain it. This is just one possible scheme. I chose this because it made sense to me. I'm just a beginner with Xcode Swift. 
Not a swift question. See if you can find a support forum for this quark thing you're using. 
probably mine :) 
Thank you for the response! A lot of the responses seem to be aimed at people who want to go on to be iOS developers in the next year or so but I am just working on iPhone apps for fun whilst working as a web developer. I am gonna stick with Swift for now!
What about if you are someone looking to apply for iOS developer jobs maybe two or three years down the line in a junior position?
Well, there's not going to be any real way to dynamically set these things in Swift, nothing like &gt; for each key and value in the `teamData` dictionary, set the property on `self` with the name of `key` with the value of `value` Two other thoughts: You might be able to get better results by breaking some of these larger objects into smaller ones. A `Match` might have a `Team` member for `homeTeam` and `awayTeam`. I also think the use of `AnyObject` is usually something I want to avoid as much as possible. One suggestion I have would be to use some sort of functional-ish version of the Builder pattern we know and love from those older OO languages: // in Match class static func build(buildFn: Match -&gt; Void) -&gt; Match { var match = Match() buildFn(match) return match } // elsewhere let match = Match.build { match in match.id = someData['id'] match.homeTeam = "whatever" } ```
Frankly it's useful to know both. I'd focus on Swift, it's clearly the future programming language for the Apple world - and possibly beyond. It's still useful to know the basics of Objective-C in the same way that you certainly should know C. You don't have to be an expert in either, but be able to read them and make basic changes to code written in them.
Aside from breaking up your models to be smaller, go with the long initializer. It's much safer code, even though it isn't as pretty. I suppose you could also pass the dictionary into the init and use a fail able initializer if the right objects aren't there, but don't force unwrap things. 
At this point it's probably better to focus on Swift. It's been around for long enough and has a solid community with a large array of examples and third-party libraries. Most Apple developers have more experience with Objective-C but Apple has made it clear that Swift is the future and they usually get their way on these things. It wouldn't surprise me if a year or two from now they made it mandatory that any app using the latest SDK be built in Swift. They've done it before in other areas.
Update: I've just gone through project 5 and fixed the mistakes. Please accept my apologies – the last thing I want to do is discourage you from learning Swift! I added an extra screenshot and a few other clarifications while I was there, so I hope you're now able to follow the project fully.
Thanks I appreciate it. 
You're most welcome! I'm glad they are useful. Occasional errors do creep in because I'm trying to juggle an awful lot, but I do try my best :)
I've never really liked Objective C. The square brackets remind me of Lisp and frankly I sucks for readability. So I highly biased against Objective C. As for Swift, it and support for it in the various SDKs is ongoing. Use Swift if all or most of the support you need is there. Especially for new projects I wouldn't even consider Objective C. Do realize though that you need to learn a new language. 
Why not just init the variable to defaults in place? It's still cumbersome but not AS cumbersome. var matchID = NSNumber(int: 0) var matchDate = NSDate() var matchDateString = "" var homeTeamID = NSNumber(int: 10) var homeTeamName = "" ... Also consider using struct instead of class for plain ol' data -- will remove a big swath of complexity from your code. You can simplify your constructors as follows (works on structs): struct Match { var matchID = NSNumber(int: 0) var matchDate = NSDate() // ...etc... init(teamData: [String : AnyObject]) { matchID = teamData.valueIf("match-id", defaultValue: 0) matchDate = teamData.valueIf("date", defaultValue: NSDate()) // ...etc... } init() { } } I added an extension to Dictionary which provides the valueIf() method: extension Dictionary where Key: Hashable, Value: Any { func valueIf&lt;T: Any&gt;(key: Key, defaultValue: T) -&gt; T { if let actualValue = self[key] as? T { return actualValue } return defaultValue } } 
It would be joyous if Apple would open the Multi Peer Connectivity Framework. I find its uses limited as they are.
&gt; So I silenced the warnings by putting ! after each property. Don't do this. All you are doing here is creating a property that crashes your application if you try to access it when it's nil. Since the compiler was already warning you that you aren't assigning values to everything, there's at least one property there that is liable to crash your application if you access it. For each property, ask yourself this question: Does the object work if this property is nil? If the answer is yes, then make it optional. If the answer is no, make it non-optional. The original developer will have created the factory method to isolate the checking of incoming variables so the code can fail out if any data is missing from the initialisation. It's a fairly common pattern that works quite well. Ideally it would be a failable initialiser but there's a bug in the Swift runtime that prevents this from working. &gt; I have some models with two dozen of properties. It just seems ugly to write an `init` method with 24 arguments, but I want to do whatever is the proper industry approach. 24 arguments sounds like there's something you could do to improve things, but without knowing the details, it's impossible to say. Can you give an example? If you don't have to maintain compatibility with Objective-C and they would work as value types, have you considered using structs? As it stands, it sounds like the original developer had it right and you've started to go down a dangerous path. Implicitly unwrapping everything because you don't want to initialise them properly is sloppy. Any time you use `!` you should think about whether there's a better way, because usually there is. 
I think this is what the Perfect project is all about.
Upvote for Stanford!
At least they're not overselling it...
I rather like [Zewo](https://github.com/Zewo) EDIT: Regardless, the question isn't about whether web frameworks exist. OP is looking for discussion on the actual experience of using Swift for web development. What's it like *using* these frameworks? How does it compare to other languages?
I have a little under a year of Swift Learning under my Programmer belt =) *Was also my first language That got me into wanting to learn to code again* I started with tutorials on the web (Udemy.com has awesome offordable tutorials! Watch the sales, and you can get a course for 15$ or even free some times) When watching these tutorials, keep in the back of your mind "How... Can I apply what Im learning to my Game/App". And it will piece itself together eventually =) The key, is never give up, always try and google is your best friend!
Swift for sure. Any dev who can use Swift *is* using Swift. - If classes are new or being overhauled, that is happening in Swift. - Old, stable Obj-C classes aren't touched and are just being used as-is. No need to mess with them anyways. 
It would be useful if you could click the read exclamation mark so we can see what the error says.
Red Exclamation "Contextual type for closure argument list expects 1 argument, but 2 were specified"
I see it as a soft transition, similar to Fortran. Obj-C will be around but without active updates and no one will write it (like Fortran). Swift will be the replacement *for new apps*.
I agree!
no, but we have this: https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/index.html#//apple_ref/doc/uid/TP40016308
Cool, thanks.
Like the others pointed out, since you don't have a monetization plan it seems silly to spend money on a designer. Even with a great monetization strategy, the biggest hurdle is still marketing (you can't make any money if no one knows about your app!). 
I used to develop web apps in Go but with Swift being available on Linux now I'm going to use this in an app: http://swiftserver.codeplex.com (it's a wrapper around libevent) I also developed an experimental epoll-based HTTP server in Swift which seems to be way faster than both Go's built-in server and libevent so I think this is the way to go.
there are several data persistence techniques to use in iOS. the most robust will be Core Data - however given your experience that is probably overkill and would take you some time to really understand how to use it. my suggestion is to just create a JSON file and include it in your project/app bundle. inside the file you can structure your data however you like, with questions containing answers, categories, etc. by using a JSON file with your data, you can just read in the file contents and iterate through your data, turning them into usable objects or structures or whatever you decide is appropriate. this method has a couple advantages. first your data is structured and thus easy to manage. second, it's easily extensible so if you want to update the questions/answers/etc you can just hop into the file and edit what you want. third, if you did move to a more advanced and true persistence layer you could just as easily use this data again to prepopulate it. this method wouldn't necessarily be considered persistence I guess but it's a good place to start if you're beginning of course there are disadvantages just like anything in programming. most notably, if this is an app that will be released on the App Store, you'd have to push an update everyone you edit the JSON file. Core Data does in fact use a SQLite database as its underlying data store, but there's no easier way to interact with that file and it's highly inadvisable to attempt doing so. there are also third party solution that allow you to manage a SQL store in more traditional ways. . 
For persistence: * NSUserDefaults: This would be the 'starter' way of persisting data on your app. The downside is, the data is only stored local. With some extra tinkering you could introduce iCloud with NSUserDefaults. It's easy to use/implement, but doesn't directly support a database on a remote host (I don't know of any libraries) * CoreData: this is a very powerful tool for not only persisting data, but also for maintaining it. I've used several libraries which connect a remote data source with CoreData, allowing you to add data (in your case questions and answers) without the need of updating the app. NSUserDefaults, generally speaking, is for storing data, specific to the user, whereas CoreData is used for 'actual' data. SQL: I have no clue about SQL. Chances are you're going to have to connect the database with CoreData anyway, most libraries are just written that way... I've used Meteor-iOS before, connecting a MongoDB (default in any MeteorJS project) with CoreData. Sadly it's not really supported anymore. 
Swift 4 is slated to have an actual concurrency model. This will probably deprecate any serious web back-end effort that you make before mid-2017. (Doesn't mean that you can't do it for fun.)
Also, if using a JSON file an additional advantage would be the ease of supporting multiple languages. I'd suggest learning Core Data though, because its very powerful and sooner or later you'll have to use it.
I'm the author. Please let me me know if you have any questions or suggestions. Thanks!
You've forgotten the closing parenthesis: private func performOperation(operation: (Double, Double) -&gt; Double) { 
I will have to write a backend for a project soon and it would be nice if I could do it in swift, so I am very interested in this, but there doesn't seem to be much from people who have actually already tried this in one way or another and their experience. Perfect seems the most advanced yet, but it's too recent, so zero user feedback - how does it scale? How stable the API is, how stable the server stack is? So many questions...
Thanks! Yep, Objective-C is my main programming language.
Ahh thanks, I really like the approach with structs that you and 5HT-2a posted. I'll be using them when appropriate from now on. That extension is really cool too.
I used it to get automatic deallocation. If you set yourself as an associated object on an NSObject you get deallocated automatically when it deallocates. I don't know how to do this in pure swift. It's not really a big deal of a feature just a convenience. You're right on the Foundation thing. I'll fix it.
Subtitle: 1000 not very well informed excuses to not use Swift
Whether you use an optional or a default property depends heavily on your use case. Basically, you should use a default value when there's a sane default value, and use an optional when there's not. For instance, if you're trying to model a person, a sane default for "numberOfLegs" is two; unless you explicitly tell an object differently, every person will have two legs, and if nothing ever makes an explicit declaration, you have sane data anyway. But there's no sane default for "lastName". There's no "default name" people have. So that should probably be an optional set to nil so that you don't accidentally move forward with insane data. Every time a person object is used, something should explicitly set the name before the name property is used. &gt; Optionals seem cleaner to me within the class, but then I got to unwrap them when accessing them in the project. The "best practice" I've found so far is to, instead of unwrapping optionals with a bang, *guard let* them into scope as non-optionals. I've found that this not only forces me to sanity-check everything, but it also saves me from the "tried to unwrap a nil value" error you get if you get a little ahead of yourself: var testValue : Int? func checkTestValue() { guard let testValue = testValue else { print("Not an int!"); return } let a = 3 + testValue print( "\(a)") } In fact, I'm personally going to stop using the bang operator to unwrap optionals (except perhaps for declarations of implicitly unwrapped vars). It's too easy to tell yourself, "Yeah, that should be verified as non-nil at this point", and either be wrong, or go back later and edit the code in such a way that it is no longer true. The approach above is eminently safer (because the compiler can warn you when you've mucked it up), and prompts you to explicitly think about the nil case, which can keep you out of structural trouble. (Alternatively, you can *if let* them into a new scope if you are not doing a lot of work with something, or only want to do something if something is non-nil. The point is that the bang operator is dangerous, because it lets you proceed without knowing whether something is nil or not. If you use structures like *guard let* and *if let*, you eliminate an entire class of potential problems from your code.) 
&gt; But there's no sane default for "lastName". There's no "default name" people have. So that should probably be an optional set to nil so that you don't accidentally move forward with insane data. Every time a person object is used, something should explicitly set the name before the name property is used. If your application relies on you having a value for that property, then it shouldn't be optional. Instead of having it be optional and then trying to handle the error case wherever you access that property, have it be non-optional and handle the error case when you are trying to instantiate the object with missing information. 
Adding annotations to MapView is pretty easy and straight forward Google brought back [this](http://martianwabbit.com/2014/07/29/using-mapkit-with-swift.html) You need to get your current location also, which can be done with CLLocation Hope this helps 
Agreed, but that of course assumes that you can always instantiate your Person objects from existing, complete data. Sadly, that's not always the case; it might be that you just don't know the name of the person *yet*, such as when you're asking someone to fill out a form with personal information. Or perhaps data comes in intermittently, such as when you're reading in JSON data from a web service (i.e., you have a user object already, and now you're fetching the personal details like name, high score, etc. from a central server). Or maybe your system needs to be able to support "John Doe"s. In that case, it really should be an optional, because "No name has been supplied" is a valid state for the object, and the compiler can keep you from proceeding with data that may not have been supplied yet. The point is that optionals are for indicating *absence* of data, whereas default values are for *default* data. The ability of Swift to naturally differentiate the two without the programmer having to resort to clumsy "sentinel" values is one of its strengths (if you take the time to use that feature). 
I am assuming you are using SpriteKit, however I can't help you much until I see a bit more code. I just released part 3 of a SpriteKit tutorial and I have examples on both Apples Contact delegate and on creating a custom one. You can check it out here: http://helpmecodeswift.com/sprite-kit/spritekit-game-from-scratch-swift-2-0-part-3 Also if you want to join our Swift slack group you can get help there as well: http://helpmecodeswift.com/join-slack-team
Oh wow, you guys have a slack group? I'm definitely joining, sounds most helpful. I also edited the original post with all relevant code snippets.
Make a println() command after removing the power up from its parent to see if it's still detecting touch with the object. Move the player back and forth where the power up is if it's detecting anything. Also my guess is that didEvaluateActions() and update() are being called simultaneously and calls checkCollisions multiple times which calls spawnShield functions. Try removing one of the calls to checkCollisions and see if the problem persists. 
 I need to somehow add a calendar to the app. I want a page where users can see a calendar that will have all the events coming up. I have a iCal calendar feed. I think the best way is to use google calendar and somehow add that calendar into the app, but I have no clue where to start. If you can think of another way please feel free to suggest it! 
I tried [Epoch](https://github.com/Zewo/Epoch) by Zewo and liked how it turned out. It is split into multiple projects with really readable source code. Under the covers it uses channels for concurrency like Go. It uses the Nodejs HTTP parser and the Nginx URI parser, which are pretty solid choices.
That's a great pattern to keep in mind. Thank you!
Thanks, it's nice to see clean barebones server code written just for Swift.
You're welcome. :-) Thanks.
Hi, i am pretty new to this aswell, but i think i found your problem: You have your hEigth set as a Double value, and not as an Int, so you cant multiply those with each other, if you use the following it should work: let hight = 12 let width = 10 let area = hight * width //1 sq. meter = 1 sq. foot / 10.764 let areaInMeters = Double(area) / 10.764 let chairWidth = 3 let spaceRemaining = width % chairWidth let chairs = width / chairWidth print(spaceRemaining) print(chairs) I just removed the ".0" from your hEigth and width value, so it automaticly is stored as an Int() value instead of a Double(). Someone can correct me if i am wrong.
*Everyone selects their favorite language this month* Also why is Node.js or Android a language ROFL
... if open sourcing all your code is fine with you: https://github.com/PerfectlySoft/Perfect/blob/master/LICENSE
Why do you need my email? 
This is Joe Armstrong, the creator of the Erlang language.
My 2nd guess is to move the position of the powerup as soon as it is also removed. Move it somewhere else where the player can't touch it, like out of the screen and see if that does anything. Is there any other piece of code related to the powerup? Like, what makes the powerup appear? Perhaps several are appearing at once.
interesting, your story sounds a lot like mine, enjoyed the read and the links
Swift for Linux is still fairly new. Right now, it's more of an enthusiast thing, but I wouldn't be surprised when wrappers for Qt/GTK become available (In fact, someone has made a GTK wrapper, as seen on this sub). You can create command-line programs, but that's about it right now. For developing solely with Swift on iOS/OS X: Possible, but you'd still need to learn the frameworks used by each OS (there are some overlaps with lower level APIs, (Foundation), as well as lower level graphics (CoreGraphics)). True, those APIs are Objective C, but the bridging done by Swift is sufficient that you won't notice. Edit: Also, don't be surprised if other languages look at Swift and take some design patterns from it (Rust has already done so with `if let`).
If you want to use a calendar view from google you can embed the web version of it into your app. It isnt very clean, but it works... Google also has a calendar API that you can you in your app: https://developers.google.com/google-apps/calendar/quickstart/ios I would suggest digging into the native ios APIs or using a calendar library.. this looks cool: https://github.com/Mozharovsky/CVCalendar
Swift enforces type safety to a ridiculous degree. In C, you could do math with a `float`, a `double`, a `char`, and a `long long` with impunity. In Swift, you have to make sure all number types, be they floating point or integer, are of the same type before doing math. Also, make sure that the numbers don't overflow: That's a runtime error instead of undefined behavior. Also, you can't cast 1000 to a `UInt8` unless you use `UInt8(truncatingBitPattern: 1000)`.
I'm a little confused as to why you did it like this. Why does a timer need an owner? If you're just calling a closure every _ seconds, you don't need that. The whole associated object thing (I read what you said about it in another comment) is unnecessary if you're using standard ARC lifetimes. [Here](https://gist.github.com/Danappelxx/db909736e651667111ad)'s what I came up with that I think is a cleaner solution.
It won't be multithreaded if you use join. You have to use detach. Anyways, it's a bad idea to use pthreads in this case, use GCD or something similar. Also all the threads share the same buffer which is a grave error.
I think Apple's Swift tutorial is a good start. You should add some tuts from youtube or udemy.
 #3 could be improved a little: let words = ["Swift","iOS","cocoa","OSX","tvOS"] let tweet = "This is an example tweet larking about Swift" words.contains(tweet.containsString) Or, a version that's a little faster: tweet .characters .split(" ") .lazy .map(String.init) .contains(Set(words).contains) Also, in #6, you've got to bear in mind that building an array in `reduce` is quadratic, so the final version: var part3 = [82, 58, 76, 49, 88, 90].reduce( ([],[]), combine: { (a:([Int],[Int]),n:Int) -&gt; ([Int],[Int]) in (n&lt;60) ? (a.0+[n],a.1) : (a.0,a.1+[n]) }) Is actually *slower* than: extension SequenceType{ func anotherPartitionBy(fu: (Self.Generator.Element)-&gt;Bool)-&gt;([Self.Generator.Element],[Self.Generator.Element]){ return (self.filter(fu),self.filter({!fu($0)})) } } And also slower than the first version, which used two mutable arrays. Finally, in #10, that's not a true sieve of Eratosthenes (I think), because it repeats multiplication unnecessarily (you should only do the cancelling beginning with a number that is already known to be prime, not on every number). Also, since the `flatMap` being used isn't lazy, there's going to be a lot of unnecessary allocation of arrays. This is in the same vein, but maybe a little faster: func primes(n: Int) -&gt; [Int] { guard n &gt; 1 else { return [] } var seive = Array(count: n, repeatedValue: true) (seive[0], seive[1]) = (false,false) return seive.indices.filter { i in let prime = seive[i] if prime { (i*i).stride(to: seive.endIndex, by: i).forEach { seive[$0] = false } } return prime } }
I noticed the buffer sharing later on. But in the benchmark code I moved it inside the callback so that each thread would create its own buffer. Thanks for the suggestion about detach. I will look it up. I ruled out early on using libraries like Foundation. I noticed that using it seemed to slow down the compilation process by a bit. I will try again to be sure. Regarding GCD, it seems that some of the code that they have is similar to mine. I was checking out their examples of pthread usage. Swift has a lot of baggage that serve as an anchor to it in the Apple platforms. I'm not sure that bringing all of that with Swift wherever Swift goes will be a good idea. One of the things that always concern me in programming languages is unnecessary verbosity in the APIs. Many users are not comfortable in an environment like an IDE or Xcode, and as a matter of fact many users don't have one of those to begin with. More so on Linux now. I recall it dearly in my time using the Delphi IDE what it was like. Creating a library was a big deal in an IDE. A lot of code ended up in program code and in event handling code instead.
+1 for Design+Code by Meng To It teaches the basics of coding an app with Swift, while simultaneously teaching the basics of modern UI design using programs like Sketch. I'm still working through it myself but I would highly recommend it to anyone who aspires to become a developer who can design and program their own apps, rather than pay a designer to do the UI.
Have you considered making some of your github repo public? I'd love to take a look at some of the projects, in particular the loading Twitter animation. Great job man! Looks dope! 
Wrong. Swift is a 2 year old language. No one is trusting their multi-million dollar applications to a 2 year old. That being said, there aren't that many mulit-million dollar applications out there. But if you decide to only learn Swift I believe you will have a bad time in the future, Obj-C isn't going anywhere for along time and there will always be legacy code that needs to be maintained. But if you only learn Obj-C and not Swift I think you'll be in trouble in the future also. For right now I'd recommend everyone get a solid understanding of Objective-C before going Swift, you'll have to interface with Objective-C libraries for awhile still so it'd be nice to understand them.
Error variable 'friends' does not exist
Ha! Sorry for not getting the joke 😞 ...and I've been programming since I was 10 and professionally for almost 20 years. We'll be to two old guys in the balcony from The Muppets. 
I wonder what the benefits are to swift taking this approach
I guess it's just a question of what seems less overwhelming to you. I'm currently debating whether innumerable VCs or countless if statements is more offensive to the eye!
Source of the patched Swift compiler and stdlib: https://github.com/SwiftAndroid/swift Source of the proof-of-concept Gradle plugin: https://github.com/SwiftAndroid/swift-android-gradle Sample code: https://github.com/SwiftAndroid/swift-android-samples/tree/master/swifthello (which calls a Swift method that returns 42 from Java) [Previous discussion](https://www.reddit.com/r/swift/comments/3wjzkm/first_release_of_patched_swift_compiler_for/)
I really hope this moves forward. With the whole cluster mess with Oracle and Java, Swift could become the ideal common language for mobile development. 
Agreed, considering that it's not working on data but executing instructions.
You know a Swift JVM Byte code compiler would open the language up immensely. It would represent a extremely solid server solution and allow for Android apps to be written!
I'm not so sure this is true, I've worked on a [big swift projects](https://github.com/artsy/eidolon) for about a year, and shipped a few smaller 3-4 month ones. You really don't have to dive in to this level of depth unless you really need to. I feel very comfortable [shipping apps](https://github.com/artsy/emergence/) in Swift that barely even use generics. You don't have to use every tool the Swift team offers.
Thanks for your comment. We appreciate every feedback in our survey helping us to make it better next time. We want to send you final result, and therefore we need your e-mail. If you don't want to leave your e-mail, you could fill "abc@abc.com" in instead. Thanks for your cooperation and participation.
Thanks for your comment. We appreciate every feedback helping us to make it better.
I realise this doesn't answer your question, but there are several free tutorials available online. My own is called [Hacking with Swift](https://www.hackingwithswift.com) and has a large amount of material teaching Swift and iOS with a smooth learning curve.
I'll attend to the conference if anyone wanna meet feel free to PM me :)
agreed. always start with your model first and everything else is easy to learn and understand. you'd do yourself a great service by learning core data sooner rather than later. 
Only if your friends haven't actually done software engineering on large projects. This is about as good as perl one liners - not helpful for maintainability. Any time you remove a loop, you remove a potential debugging / tracing hook, for instance.
It's generics... Now I see why Go is gaining popularity. It's the new PHP - everyone can be a developer!!1
That's awesome! Thank you!
Doesn't work for me. I am still able to mutate the property from outside the class. Am I missing something?
In an ideal world, yes. But, as the saying goes, "Ain't nobody got time for that!" But, seriously, it takes a lot of time to gain experience *using* (not just learning) a language. 
Got it. Thanks.
Sorry it took me such a long time to write this new project – I was busy writing www.hackingwithreact.com and it took quite a while! If you enjoy Hacking with Swift, it would be helpful if you could [fill out this short survey](https://docs.google.com/forms/d/1Jpq_0MnvFsoUiKwUvLv8Ev6RQyatE6Bkbj_8Q7ts48Y/viewform) letting me know what you think and what tutorials you'd like to see in the future. Core Data is winning by a substantial margin right now, so if you disagree please let me know :) Have fun with the new project! Don't be too mean to your friends! ;)
Why can't I subscribe to your site in feedly?
Probably because I don't have an RSS feed, sorry. I generally announce new things on Twitter @twostraws, but I could look into an RSS feed perhaps.
Do it, homie. Won't take but a few minutes for a lifetime of subscribers, yo.
Good spot... thanks for the heads up.
I really appreciate your help. Im working on it, but its really tough! I think i made it within a week, lets see. Haha
Using Swift, I would recommend FMDB and SQLite. 
Do you have your project on github or somewhere that I can access? maybe I can get a simple one working for you. 
My guess is that you created the controller, created the storyboard (scene), and forgot to point the scene to the class, maybe? That would give you a blank screen and no errors I think... 
No i haven't. Its not a app idea im working on, its just to learn how to do it, cause then i actually have an app idea. So if you want to, you can make a project where you have made an annotation from the users location. I can't really judge how difficult it is. 
I ended up figuring it out, but i don't remember what the problem was. I did that though, checked that like 10 times
This: names.sort({ (s1: String, s2: String) -&gt; Bool in return s1 &gt; s2}) Can be written as: names.sort(&gt;)
Why it would open up Swift to numerous high quality and mature web frameworks. Something it's severely lacking and I don't see being solved for several years. Also I imagine the JVM out performs most Swift compiled code while also reducing it's memory leak.
I was taught generics in my first year of undergrad CS, what is this PhD talk.
I did with no changes. I also tried changing "self" to the scrollview and it didn't like that either. 
Good course but needs some updating with Swift 2 and Xcode 7 in places Guess searching for the answers adds to the learning 
Spam. DO NOT CLICK.
What doesn't Preview do for you?
If you don't have a Mac, then learning Swift could be difficult. I'd recommend learning another modern programming language (maybe [Kotlin](https://kotlinlang.org/)). They are very similar in a lot of regards. Kotlin is being developed by JetBrains, a leader in the IDE world.
Just use the filter method on array. NSPredicate was designed over 10 years ago to solve problems in Obj-C. It's not really a swift friendly API, as is demonstrated by the frequent casting to/from NSObject derived classes.
C# and Java are both similar, they both need a VM
People are working on ports to Android and FreeBSD. I've yet to see any attempt at all of a Windows port.
When I made the videos for Hacking with Swift (and, in retrospect, I rather wish I had not), I used ScreenFlow for recording the screen, a Blue Yeti for recording the audio, and a regular pair of earphones for monitoring. I had a relatively simple set up on my desk for avoiding echo and vibration – even just putting a towel down under your laptop will make a difference. Total cost was maybe $300, but it was money well spent in terms of quality.
action.timingMode = SKActionTimingEaseInEaseOut
I have tried both Rob Percival and Mark Price. Mark price provides a better intro to Swift just because it is what you will be doing in a workplace compared to writing everything in the viewcontroller for Rob Percival. His code works, but I don't think you will find work if you cant adhere to mvc. Edit: Btw if you search coupons for Udemy their courses are usually $10 - 15.
 import UIKit import MapKit import CoreLocation class ViewController: UIViewController, CLLocationManagerDelegate { @IBOutlet weak var Map: MKMapView! var locationManager : CLLocationManager? override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. self.Map.showsUserLocation = true self.locationManager = CLLocationManager() self.locationManager?.requestWhenInUseAuthorization() self.locationManager?.delegate = self self.locationManager?.startUpdatingLocation() let myLocation = CLLocationCoordinate2D(latitude: (locationManager?.location?.coordinate.latitude)!, longitude: (locationManager?.location?.coordinate.longitude)!) let addPin = MKPointAnnotation() addPin.coordinate = myLocation addPin.title = "Hello world" addPin.subtitle = "Finally!!!" self.Map.addAnnotation(addPin) } }
Yea as soon as i posted this I knew i shouldve just googled it sorry i wassn't rly thinking. Long night.
Being so cheap, get both! Although you may end up with more courses than time :)