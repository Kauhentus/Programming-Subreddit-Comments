Yet another framework to learn. It may be helpful for you, or it may not.
Apple is perfectly happy to cut off old versions (in fact, that's practically the definition of a new OS version), and they have the most highly *seasoned* Swift and SwiftUI developers anywhere. Are they using it for anything in Catalina yet?
Clean and rebuild, delete the app and reinstall, close and reopen Xcode, restart mac, buy new mac, give up. Try each sequentially until one works
Most likely not, since it was literally just introduced. None of the other teams within Apple had a chance to use it much before now, and from what I've heard, it only barely made the cutoff for WWDC release.
I have tried every but buy a new Mac. No luck
I‚Äôve had this happen a few times. Try to move on to something else and wait until it decides to fix itself
Is this good practice? I never thought to do this
genius
Thanks, I got it to work but now I can‚Äôt get a image view to show up, Do you know why? All other elements work but the image.
thanks, but I get Use of unresolved identifier 'optionalVariable' as error.
Use of unresolved identifier 'optionalVar'
Are you replacing \`optionalVar\` with an existing optional property name?
Seriously?
Isn‚Äôt it better in this case to use the application‚Äôs documents directly?
My advice would be to avoid the use of "!" as much as possible. u/Rudy69 solution is usually how I go about it, you can use *if let* but this can get messy real quick when you have multiple optional variables that can be nil. For example using if let : if let firstname = optionalFirstname { if let middlename = optionalMiddlename { if let lastname = optionalLastname { // do stuff with all the names } else { // display alert that last name is nil } } else { // display alert that middle name is nil } } else { // display alert that first name is nil } A better way to do this is to use the "fail early and return" pattern, it check optional variables one by one to ensure its not nil, and then only proceed to perform stuff if all the checks are passed : guard let firstname = optionalFirstname else { // display alert that first name is nil } guard let middlename = optionalMiddlename else { // display alert that middle name is nil } guard let lastname = optionalLastname else { // display alert that last name is nil } // at this point, all names are not nil // do your stuff here
Optional variable is just an example that he used. In your code you would replace it with whatever optional you're unwrapping that might end up being nil.
I don't see any obvious loop here. What's calling it, each time?
I see, thanks.
I look at it as a great advancement for many developers. If there is anything worth cloning by the open source world it would be SwiftUI. There is really nothing like it running on Linux for mainstream apps.
It‚Äôs exactly the same as `if x == nil`, as `nil` is just shorthand for `Optional.none`
Yes. This is what you should always have been doing! If by ‚Äúthis‚Äù you mean unwrapping optionals? If you‚Äôre talking about showing an alert it really depends on the context!
This is the reason Void is an actual type, and not a weird pseudo type like in C++. Although, this is mostly only done in generic functions that take a closure that usually return something, but might be passed a closure that returns ‚ÄôVoid‚Äô it works quite nicely here too.
That's an odd and potentially unsafe way to go about it. What if the property could be an enum value of \`.none\`? Unnecessary and misleading at best, dysfunctional at worst.
That works too! By checking the 'allows external storage' on core data, the image is saved in ApplicationSupport folder and Core Data handles the unique naming of the file.
ü§Ø
Are you triggering off the . editingChanged event?
Awesome. I think I‚Äôm going to do this. I wish there was a way to do a one line guard statements that display an alert. No idea what syntax it would have but it would be kinda neat if I could do something like alertAndReturnIfNull(variable_name)
I bet over those 8 years of Python programming you got much better at it. The same will happen with Swift which as a new language is far easier to start with than many. You will get hung up or struggle a bit as will happen with any suitable advanced language but that is just part of the learning experience. As for learning Swift, the web is your friend, search for well respected sites. However I wonder how you learned Python in the first place. It may pay to take more generic computer science courses to fill in missing knowledge. In any event start with small apps that focus on the mechanics of Swift and then allows you to work over new concepts. SwiftUI is a different issue though. Here you will need to focus on what Apple provides for the moment. This mainly because being so new there is little in the way of solid material out there. It is important to understand the difference between Swift the language and SwiftUI an SDK for Apples platforms. Swift the language is independent of any windowing SDK used with it while SwiftUI is fully dependent upon Swift.
I am now. Thank you!
this. for me, im mostly interested in games and don't really require the uikits
Let's say your isPalindrome() method is in another file called Utils.swift. In there you could have a class with a shared instance of itself. Class Utils { static let shared = Utils() func isPalindrome(word: String) -&gt; Bool { // code you have above. } } Then in your other file: Utils.shared.isPalindrome(word: "racecar")
I edited the post to show print statements. But when it runs, the console prints out the statements like this: **1. Pressed save button** **3. End of action** **2. Check username** **Username is the same**
&gt;editingChanged event No I am not. As a test, I kept the username the same and did not modify the text or tap the textfield.
Thanks! It works, only issue is I don't want to return to the previous page. I want to stay and add the 'image' that was missing.
Thanks! Good call on the return issue. It happens in the guard and if let case. I don't want to return to the previous page. I want to stay and add the 'image' that was missing.
No worries! If let doesn‚Äôt require a return, so oftentimes I‚Äôll flip flop between those three. PS if you ever have a default value you want to use in the case it‚Äôs nil, you can add ?? to immediately take care of what the app should resolve to. For example: var username: String? ...elsewhere in the project... myLabel.text = username ?? ‚ÄúJohnny Noname‚Äù
Are there any opportunities in the world for Swift coders that don't involve app development?
Surely. Searching jobs websites yields a few that mention swift for backend. You could also do framework/library/low-level stuff if i/macOS is still ok with you.
Lol oh man... wonder how he does when he finds code in stackoverflow
!= nil is standard.
They can only clash if you store that enum inside an optional. In which case, as of Swift 5.1, the compiler will emit a.warning if you compare that property to ‚Äô.none` without specifying the type of `.none`, as by default it will refer to the enclosing optional. There‚Äôs an example [here](https://www.whatsnewinswift.com/?from=5.0&amp;to=5.1), but there‚Äôs no Swift Evolution proposal for it, because it‚Äôs literally a bug fix.
Of course, I'm getting ahead of myself seeing as I haven't even finished the first Learn to Code Playground. But I suppose it's good that I spend my summer learning these concepts so that, come the fall semester, I'm able to have a better understanding of what I want to pursue before I transfer to university.
True that. Good luck!
&gt; I edited the post to show print statements. Don't care. Doesn't help. *What is calling it?* &gt; I just excluded the function because I thought the problem was with this piece of code. 99% of problems I see online are with the code that people didn't include because they thought it wasn't relevant. Either give a [complete example](https://stackoverflow.com/help/minimal-reproducible-example), or tell us what the debugger says. Otherwise we're just guessing random shit.
After 30 years, Python is up to [35 reserved words](https://docs.python.org/3/reference/grammar.html). After 5 years, Swift has [over 100 (depending on what lexical context you're in)](https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html). These are *not* both similarly 'huge' languages. One is drastically more complex than the other. Python doesn't even have a value/reference distinction, much less protocols, generics, associated types, type inference, guards, switches, pattern matching, defers, access levels, or a mutability model. I believe that anyone who can drive a Honda Civic can learn to fly a Boeing 767, but it should be obvious to anyone that they're not equally complex.
Lots of questions here. Find one track and stay on it until you've mastered. There are lots of resources for learning. Try [HackingWithSwift](https://www.hackingwithswift.com/100)'s 100Days program, I did and it was a major boost. I also recommend you take a look at LetsBuildThatApp and maybe purchase the Instagram program. It connects to Firebase as you mentioned an interest in. It walks you through recreating the entire Instagram app which is extremely educational, I did that, too.
Wow i never knew this! Thanks :D
Okay, but is that also still up-to-date? I really don't want to miss out on any concepts or best-practices. But cheers for your recommendations!
You do need a developer account yes.
Nothing stays up-to-date. You have to go go go or keep searching for real-time tutorials. Good luck with that. =) The Instagram course is in Swift 5, but the video portion is Swift 4.2. He gives you all of the Swift 5 code, though. This is a real-world problem, though. You'll experience versions problems in the work-place, so it's not something you should avoid as if it were the plague. The 100DaysOfSwift is Swift 5.1 compatible I believe. So it's already in the future!
&gt; The same will happen with Swift which as a new language is far easier to start with than many. Why do you say this? What are these "many" which are harder? Has anyone done any research to back up this claim? All the PL research I've seen indicates that the languages which are easiest to learn made completely different choices than Swift.
The ability to preview the UI means faster iterations and the ability to test in different device setups.
Never said they were similar, I said they‚Äôre both huge, so OP is not the only one who made the transition, and those who did may have some insight to share
&gt; SwiftUI and Combine will lead to much more rapid development for seasoned developers. As long as it‚Äôs ok to cut off old versions, it would be the logical choice. I kind of wish they had shipped both with 12.4. Would have significantly sped up adoption
That‚Äôs a very specific issue, I‚Äôd be happy to help if you could provide more info
Thanks. It is fixed now. I figured it out. I had a **self**.performSegue upstream in the IBOutlet function that caused the navigation.
Update: Thanks everyone. It works with either the guard or if let approaches.
Yeah I know it was a dumb question; I was distracted. I do fine with stackoverflow and make the necessary changes.
Actually Paul Hudson is amazing he keeps it all up to date. The Stanford ios course is great too. It's all on youtube.
This was one of my complains to Apple, filled as feature requests. Programming today is a very complex task, not because it is complex per se but because those who create the APIs do not have the vision to simplify. Example: if you want to create an app that is a camera and shoots video. You need to add a boiler plate with 500 or more lines of code just to do that. Building a camera app should be a matter of dragging an object in interface builder, from the library to your code and connecting it to the parts you need. Need a camera with a filter, a filter should be an object, dragged to the project and connected to the camera object. Programmers should focus on creating stuff that would differentiate their programs from the others, not creating 500 lines of code to make the app capture image. Apple has to simplify everything. Image capture has to be an draggable object, accelerometer/gyroscope another, capturing sound, another one, telephony SIP another and so one. That simplified approach would reduce bugs practically to zero.
Which Apple‚Äôs book did you try? Because I‚Äôm learning Swift, and with the ‚ÄúApp Development With Swift‚Äù book I‚Äôm learning lots of things. Then you can expand using the Swift Documentation on Apple Developer site to understand how the specific frameworks are used
There‚Äôs a trade off. Complex and robust APIs are harder to learn but much more efficient. Simple boilerplate code is verbose, but trivial to write. Much of the success of iOS is that the barrier to entry is very low.
You're welcome!
15% of an app earning 100K a year is $15,000. It's nothing compared to salaries. 15% of an Instagram-scaled app is gigantic. It's probably worth the labour put in. Plus, remember that you're at the stage where you have an existing code base. Usually it makes sense to keep doing what's working.
Basically iOS playgrounds
Exactly iOS Playgrounds. But by using a UIHostingController you can run SwiftUI code there, while you'd need Catalina for a full iOS project.
Honestly? Not much. It changes how you write the UI, but that's about it. It's not going to change working on the AppStore, responding to clients, advertising/marketing, all of the things that, I would say, are more relevant to a small, independent developer.
Flutter? React Native? Both have the same idea of declarative UI.
Super great tips, thanks!
Will try, thanks!
It‚Äôs ugly code though. I considered it once when I wrote assertionfailures in esle.
Slight note, a `return` isn't the only way to get out of a `guard`. You can also `throw` or `fatalError()`
Great point, I just knew it needed some "exiting" call but didn't know about those options. Thanks!
There is also [Azul](https://azul.rs/) if you actually want to *target* Linux and not just develop there.
Can you give more information and context? It‚Äôs hard to confirm what the issue is without more info and/or example code and screen shots.
I‚Äôve seen this on a pull request for the first time in my life today. I thought it was unecessary at first, but I kinda like it now.
If you want something simple, just use UIImagePickerController to capture video. If you're going to build a camera filter app, you need access to all the details in 500 lines of code. It may read like boilerplate to you, but every time someone tries to abstract away details in these frameworks the abstractions leak the moment you get beyond a trivial app. &gt; That simplified approach would reduce bugs practically to zero and accelerate development to light speed. These are famous last words.
You should also look at Optional chaining in Swift as it is appropriate in certain situations: [https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html](https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html) &amp;#x200B; Optional chaining is a process for querying and calling properties, methods, and subscripts on an optional that might currently be nil. If the optional contains a value, the property, method, or subscript call succeeds; if the optional is nil, the property, method, or subscript call returns nil. Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is nil.
Can you elaborate why you think it‚Äôs ugly? I personally don‚Äôt agree that it‚Äôs ugly per se, but the intent of the code feels slightly more ambiguous since it implies that you‚Äôre returning something of value rather than just Void, though I realise that it‚Äôs entirely correct and marginally more elegant.
This one actually seems odd to me. The Swift docs state: &gt; When you call a memberwise initializer, you can omit values for any properties that have default values. &amp;#x200B; Which seems to be what the second image is doing. I'd have to test it out myself, but I'm on my PC right now. Definitely seems odd to me though that one of these would work while the other doesn't, since they're essentially doing the same thing of omitting a private var that has a default value.
You probably need to learn how to create IBOutlet's and IBAction's. You can learn more about how to do this here: [https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html](https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html)
Also if you are using an implicitly unwrapped optional, ie a variable declared with an !, you can still use if-let and guard-let-else to unwrap and safely handle if an optional is empty ` var foo:String! If let bar = foo { print(bar) } `
guard let test = optionalVariable else { return displayMessage("expected variable") } Should work as long as you don't have a linter with rules that disallow this.
I can see where you're coming from, but think it's a matter of taste, for a team the team to decide what's right here. All I know is that it saves me a lot of keystrokes each day üôÇ.
He/she lost me at draggable. Yeah. No. Go "build" a wordpress "website".
Does this imply that there's nothing technical stopping SwiftUI from being included in Xcode on Mojave?
This is roughly what I do but I always feel dirt keeping the return on the same line as the guard, so it end up being 3 lines if I just return or 4 lines if I alert (which, now it will always be 3 learning this trick with the return)
Do you know which talk they demonstrated this?
I didn't walk through that one yet, I'll give it a shot
Yeah, I've noticed a couple times the code they walk through in their demos doesn't function in beta yet.
The Xcode beta on Mojave can use SwiftUI. It‚Äôs just the previewer that only works in Catalina
It can be rendered and interacted with just fine. The big part that's missing is the interactive graphical interface.
Thank you so much for replying, regardless of the time! It now works, but with some issues... I get this error every time I try to open something that doesn't have a ".txt" extension: `Thread 1: Fatal error: 'try!' expression unexpectedly raised an error: Error Domain=NSCocoaErrorDomain Code=261 "The file ‚ÄúConceited.doc.pdf‚Äù couldn‚Äôt be opened using text encoding Unicode (UTF-8)." UserInfo={NSFilePath=/var/mobile/Containers/Data/Application/B69DED5E-ADEC-401B-8157-CCA07AEB954F/Documents/Conceited.doc.pdf, NSStringEncoding=4}`
Thanks! I certainly try :)
I think that‚Äôs what he means. If this works, why can‚Äôt the previewer?
I've deleted the repo, you'll have to push your code to your repo again so I can see it. Maybe try using a try/catch instead of an implicit try! as we see above.
This surprised us as well. We can't deploy until the current OS is no longer supported (using the Current version -1 approach)??
Because it's not a useful feature to provide support for for the development team. Apple tier engineers are expensive.
Ah, I‚Äôm guessing because Mojave‚Äôs macOS doesn‚Äôt have the SwiftUI framework (what the previewer is built in).
Don‚Äôt loop. Just let it fail if the input doesn‚Äôt match / isn‚Äôt validated. At that point you want the user to retry with different input and tap the button again, right? That will execute a new check on the new input. In the case where it doesn‚Äôt match you could set the user up to retry by selecting all existing text in the text field so that any new user input automatically deletes what was there. You‚Äôll also want to add some visual indication that the field contents are invalid. That could be an Alert, or a label with an error message, etc. If I‚Äôm not understanding your intention correctly, please clarify.
You need to set a UNUserNotificationCenter delegate. You may also need to requestAuthorization. Also, in the Targets Capabilities tab enable notifications. This tutorial may help. [https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started](https://www.raywenderlich.com/8164-push-notifications-tutorial-getting-started)
Where do I do the things you mentioned? Also thank you for the tutorial
you can set the delegate in viewdidload. If you want the user to register for notifications when the app loads you can request authorization in the appdelegate.
It doesn‚Äôt give me the option to select notifications, do you know why?
xcode 11? go to signing/capabilities and hit the +Capability
I‚Äôm on 10.2.1 do you know where to look for that version?
[https://twitter.com/FlipCarlino/status/1138638029231415297](https://twitter.com/FlipCarlino/status/1138638029231415297)
it says I need to be an apple developer program member to access that feature. [https://developer.apple.com/support/app-capabilities/](https://developer.apple.com/support/app-capabilities/)
yes unfortunately you have to have an apple dev account for that.
Does it cost money?
$100 for the year
Okay, thanks for all your help anyway. Sorry for wasting your time
no worries. if you need help with anything just @ me on that twitter. Happy Graduation!
Thank you so much. Have a great day
It greatly increases the cost (in time and/or money) to create highly custom user interactions/interfaces. Not because it will be harder to create the custom stuff, but because it will be so much easier to go with the standard stuff. This is especially pronounced for indie developers since it is much harder to justify the extra cost.
Agreed. If your doing Instagram-scale apps, it makes sense.
This is still a year or so from a production ready. I wouldn‚Äôt advice this until iOS is in v15. We just dropped support for v9 late last year. What I do see happening with this is rapid UI coding for apps that run on all Apple platforms (iOS, Mac OS, iPad OS). And with the Combine framework, better hybrid app accuracy with fewer native code tweaks.
Lilypad would do it. Maybe there's a C interface. There's likely a way to do it with the command line.
In 3 years everyone will be using them. It may speed dev for new programmers. I think it may just be different. Likely most greenfield apps 2020 on will be in it.
It‚Äôs not very readable. In the end it could cost you more time. Some examples: The return foo() method is changed to return value with @discardableResult. Now one small change that should be a single commit with a local change could potentially make changes all across your app. Code review - you change return line to return foo(). The person reviewing the change doesn‚Äôt necessarily understand the change. He may think that perhaps the mehod should be returning and you split your commits wrong. Same thing is with reverting commits. I hope what I wrote is clear cause I literally just woke up and typed it from my phone. These are just some examples that came up to me now related to version control. But I could probably think of others.
See my response to other comment about some of my issues with it.
Use a guard let statement. Post the alert in the failure case.
Yeah, but who cares about saving a line? I care more about clear code, rather than trying to cram one more statement into less space.
No. It's visually a little bit muddier. You shouldn't care if displayAlert() returns void or not. Call the method to display the alert. On the next line return. It's clearly understood by anyone.
Storing **an*** image in* CoreData or Storing image**s*** in* CoreData English is a pain in the ass, but both of those are the correct way to phrase what you're trying to say. What this article doesn't do is show how to wrap the CoreData object in a transformable so that you're saving the data as encrypted and it's protected so that no one can look at it while in a CoreData store. When stored this way, it will be stored encrypted, but still decrypt and display normally for the user when fetched.
I downloaded Xcode 11 beta and the command line tools on Mojave and got the preview working in a playground
Yep, playgrounds will work. Just the fancy previewer thing they showed at WWDC won‚Äôt.
Except, AFAIK, when the images are loaded, you get the whole image from disk if you use core data. Most apps can‚Äôt and shouldn‚Äôt handle that to decrease memory usage.
Just found it. The talk is "SwiftUI Essentials" at 54:12. I would recommend the video in general, was a pretty nice explanation of a lot of the stuff.
Are you using the storyboard to create the UI elements? &amp;#x200B; If you want to learn it yourself instead of getting the solution handed you should search for the terms IBOutlet and IBAction. I n XCode you need to connect your UI elements to your classes (code) which is done by creating the IBOutlets. IBActions are used to handle events like a button being pressed/touched.
Is one of your tools including the pods project in its report and one excluding it?
You can still run an app without Catalina, see your views in the simulator. Only the preview windows don‚Äôt work. You can make a full app just fine,
I thought that too, I could build the app just fine, but Simulator didn't work. Probably some early beta issues. But at the very least, Playground Live Views give you faster faster feedback than a full app build.
Weird, i did have some runtime errors that crashed the app but it was bad code on my part. The debugger is not setup fully and got some weird errors. I guess we can just wait for beta 2.
I've written a brief overview of the pros and cons based on my limited experience with it here: http://appventure.me/guides/swiftui/preface.html I'll start using it today for private projects, but at work we will have to wait until we drop iOS 12 support, so probably somepoint late next year before we can start using it.
You will find that you can do a lot with Swift as a beginner, and that it does not take a long time to reach intermediate level. Of course to master a language takes exponentially more time, but this is true for all languages. If your intention is to build apps for iOS and perhaps also for other platforms, I highly suggest picking up swift as a first language. It is beginner friendly and provides you with plenty of learnings you can easily transfer to any additional language you might want to learn after.
Question on EnvironmentObject: The way it is passed into the sub view in the example, how is it any different than passing binding in the init? What are the pros for using EO vs just a parameter in the init: Question on the Environment: Can you roll out your own app wide Environment properties? For example, I want every view to know about certain properties.
I‚Äôm a total beginner too, I think it‚Äôs overriding the `&lt;` and `==` operators to compare nodes in a linked listed (?).
Firstly, Swift is not based on Objective-C although both (like many languages) can trace their roots back to C. That includes JavaScript. You should be able to learn a programming language and transfer skills to a new one. So the big differences in JS and other C type languages is that JS uses a very different object model and is dynamically typed. Dynamic typing is easier to pick up for most people (Objective C is dynamic BTW). SwiftUI is still Swift but uses some very cool new language features to make UI development declarative with an instant preview in Xcode. Apple published a pretty good tutorial for SwiftUI so have a look at that. And there will be dozens of tutorials being published in the coming months so stick with it. Don‚Äôt lose heart as you are in the same boat as everyone else in that we didn‚Äôt know about this a week ago either. If what you want to do is design UI for iOS apps this is the future.
The biggest con is iOS 13 only... that puts a pretty hard stop on adoption for my personal projects and team. I have some smaller unreleased apps that I use myself, and I‚Äôll be exploring SwiftUI with them, but it‚Äôs really just not feasible to start investing too much time into for me. We still support iOS 10...
In case when you have more than 1-2 child views which should use your BindableObject it is better to use EnvironmentObject rather than passing it via init again and again,, it makes code more clean. &amp;#x200B; Yes, exactly. You can set environment object on your RootView and every View will get this object.
Thank you, this helps. I don't want to design UI for iOS apps though, I want to create iOS apps with little programming skills. I known it sounds bad and lazy but this would be the plan.
In your EnvironmentObject example, aren‚Äôt you explicitly passing the EO to the episodes subview? How do you make it so you don‚Äôt have to pass that over and over to the subviews? Edit: I think I understand. In your example, you should add a subview of episodes and show it also had access to the EO. I was confusing the scene with the parent view.
If you mean Cocoapods by "pods project", it shouldn't because we are using Carthage.
Just want to underline that the State variable is meant to be owned by a View token by design, and it can be helpful to remember this by always marking it as private for good practice as recommended by Apple. Thanks for this and keep the SwiftUI stuff coming!
Given a `LinkedList` class or struct, this block of code extends that class for those variants of it that conform to the `Collection` protocol. What this extension does it adds the nested struct `Index` to it inside this struct is some value that holds an optional class `Node` defined elsewhere and a couple of operators that allow the Indices conform to the `Comparable` protocol, `==` and `&lt;`. For `==`, they take the two indices and if both have nil nodes returns true, if one is nil and the other isn't returns false, and if they are both non-nil, then they are unwrapped and the method returns whether or not their respective `next` values are both the same object (as in they point to the same hunk of memory). For `&lt;`, it works by first verifying that the indices are not equal. Then it creates a (lazy) sequence of nodes from the index on the left-hand side of the `&lt;` operator by starting at its `node` value and fetching the next item in the sequence by retrieving the current node's `next` value. It then checks to see if the `node` value of the `Index` on the right-hand side of the `&lt;` appears somewhere in that sequence. So basically, if the node on the right appears somewhere downstream of the node on the left in the liked list starting at the left's node.
Next 3 months? Sure, it's going to be great for writing software for all those operating systems that don't exist yet.
It's inside a `struct Index`. It's comparing indices.
You are already smarter than 99% of the "I want to learn Swift" first-posts here.
Even after OP "tried many times but always failed" at it, why do you "highly suggest picking up swift as a first language"? How can you still claim that "it is beginner friendly"? This is absurd. It's amazing how Apple's marketing for Swift is so effective that it's repeated even as a response to direct evidence to the contrary. ("This isn't working." "Then keep doing it!")
&gt; I've tried Googling both tools and haven't been able to figure out how they calculate code coverage. Hmm, that's not exactly an inspiring fact to learn about these tools, regardless of whether they happen to give the same result today or not. What are you going to do when they break? Slather has over 100 open bugs. Xcov doesn't seem to have a bug tracker at all. Despite implying that code coverage improves code quality, neither of these projects report their own test coverage. Xcov doesn't seem to have any tests at all. At this early stage of the game, it appears that using these tools is going to mean also helping to test and develop and document them.
Nope, you don't need to pass it via init. It uses dynamicMemberLookup and injects it automatically. You can see it also in SceneDelegate, that I'm not passing PodcastPlayer via init.
This is really great, for my feeling Swift is reaching adulthood now. There are so many ways where Swift had leaky abstractions or simply tons of boilerplate or force unwrapping because it lacked custom attributes. Codable is one example of how they needed to hack into the compiler functionality that could have been handled by custom attributes instead: @jsonField(name="snake\_case", type=String.self) let snakeCase: Int That one field the PHP based API returns a String that is always an Int with a weird field name.
This is more of a service locator pattern is it not?
It looks similar.
Missing an NSTableView equivalent is going to really hurt when trying to build certain types mac/ipad apps.
Thanks everybody for the input. To the kids downvoting the post for no reason: Go fuck yourself.
The same one, but there you wont learn to make http requests for example. How am i supposed to search their huge documentations if i dont even know the name of the class that provides functionality?
One more question: other than requesting a TSI through the developer portal, is there any way I can get some assistance with optimizing my code and making it run more efficiently?
Amazing write up dude
Good article. Thanks.
You will need to know Uikit to be able to understand how to convert those views to swift UI, as almost anywhere you work will have UIkit in production if you are building Swift apps. Also, once you start looking for answers to specific problems you encounter, the information you find will be based on UIkit. I‚Äôd go through the big nerd ranch IOS book, to at the minimum get an idea of how UIkit works, especially for table views and navigation controllers. 2 or so hours a day and you could probably do the book in 2 weeks. Will the place you work want UIkit code? Who knows...they might not even want you to code in swift at all, so your best bet is to equip yourself with the proper foundation, which would include UIkit. No reason not to also learn SwiftUI as well though.
No. You should learn the current kits as well as SwiftUI. You need to understand how *every* current application and library works. It will be a couple of years before SwiftUI is the primary way of building apps. Probably longer tbh as it takes a long time for devs to change what they are comfortable working with.
I would think of it as either/or but rather and. Start with one but try and translate to the other as you work through it. SwiftUI is different and I suspect we‚Äôre going to see a lot more, esp. on creating higher order components like we see in React....
yes, it's making it conform to Comparable protocol
Make an evolution proposal!
Hey there any other fellow SwiftUI-ers. I've been messing around with some stuff in SwiftUI and am trying to think of how to make a view transition in a certain way. I want the view to slide out to the left offscreen and a new instance of the view to slide in from the right to replace it. Think about the calendar app when you swipe left or right on the numbers of the days at the top of the screen. Does anyone have any ideas of how you might accomplish this?
What do you mean? It already exists: https://www.avanderlee.com/swift/property-wrappers/
I meant for the Codable property wrapper : )
It feels like for presenters to work, you‚Äôd need to be able to inject into the view hierarchy, which I haven‚Äôt seen yet. Maybe the paradigm changes where your presenters are wrappers to state that control presentation() nodes on the the view hierarchy as opposed to performing view transitions??
It seems to be possible to just pass it as a parameter when calling SwiftUI view from a UIKit based app.
Did you manage to figure this out?
Hmm. There are things like glide (https://www.glideapps.com/) but if you want to make an app that does not fit an existing template then I think you have to learn to code. It‚Äôs the difference between flat-pack and bespoke furniture. You can‚Äôt make a bespoke cabinet without learning how to use the tools proficiently but flat pack is going to give you exactly the same thing every time. So it all depends on what you want to make.
I‚Äôll throw a +1 on this statement. It‚Äôs almost verbatim what I would have posted.
It has List but is missing a collectionview equivalent
That would depend upon when you expect to release the software. If we are talking early 2020 then yeah the move to SwiftUI right away would make sense. I say early 2020 because you would expect that a good percentage of the user base would be on the latest OS by that time. If you have software to release even earlier then you would need to think much harder.
A single person struggling to learn a language does not mean that language is not beginner-friendly, especially since it seems like the OP is having trouble learning any programming language. Programming is hard. No language can make it easy, but I'm hard-pressed to think of a language that would be easier than Swift to start off with.
I have this feeling that iOS will be adopted really quickly by the user base. I‚Äôm just getting this vibe that it will be a sought after upgrade thus iOS13 only apps will not be a huge problem for many developers. On the flip side I do appreciate apps that run well on legacy hardware and iOS versions. This issue of old hard and operating systems may actually become far more important as users hold onto iOS devices far longer. The days of upgrades every two years have passed by for most users.
This is why questions like these have little value to me. If you are a developer targeting unreleased operating systems then the next 3 months may mean nothing.
What kind of numbers do you see justifying maintaining support for iOS 10.x? Two versions back seems fine now, since not many big, widespread features were added in 11 or 12. A year from now, supporting iOS 11 for what I assume is about 3% of users would certainly be handicapping developers and allowing more complexity and bugs into the code.
You can download some free Books from the Apple Books Store. Several books about Swift. Also hackingwithswift.com is a good start
I personally enjoy the Ray wenderlich articles. That‚Äôs what I used when I learned a few years ago. Once you get a good feel for things, let‚Äôs build that app on YouTube does a great job but Brian moves quick so you‚Äôll have to be at a point where you can grasp the concept quickly. Of course you can also use the provided Apple documentation or even Swift playgrounds on iPad if you are truly seeking the basics. Then for more particular questions stack overflow or even this sub and r/iOSProgramming can be really helpful.
In addition to the free books from Apple in their book store, if you have an iPad, you may want to check out [Swift Playgrounds](https://itunes.apple.com/us/app/swift-playgrounds/id908519492?mt=8).
At the very least, I can‚Äôt see a lot of iPad users skipping it unless they have a model too old to run it.
Hi, I have an iPad but I think it's very old and won't run that app. I'm a total beginner - never coded before in my life. What apple documentation can I use? Thanks
Hi, Thanks for giving me some ideas and responding so quickly.
Hi, Thanks for giving me some ideas and responding so quickly.
What happens when you forget to set an environment object? Runtime crash?
Check out hackingwithswift.com. Tons of free content. He also has a free iPhone app called Unwrap for learning Swift
In my case the x2 or x3 instances were not taken into account. x1 was missing so as soon as I added it the image appeared. Make sure the 'Target membership' of your assets are enabled for your current target.
I‚Äôm a little behind on my WWDC reading /viewing but yeah what I‚Äôve seen so far indicates a huge release of features users will want. IPad Pro‚Äôs will likely get a huge upgrade to go along with the OS release. I just see a very high upgrade rate this go around with iOS and iPad OS.
JavaScript is not any easy language by any measure, beyond that it is just too weird so I can‚Äôt suggest it to anybody as a place to learn programming. As for your comment about trying many times I really don‚Äôt know what that means. In fact it tells us little about the effort you put in nor if you pursued formal training. I‚Äôm largely of the opinion that the vast majority of self taught programmers are very poor programmers. There are exceptions to the rule of course but I really believe that you are far better off enrolling in a suitable computer science program. This is required to get an understanding of the basics down that are applicable to all computer languages. The other reality here is that NOT EVERYBODY can program. Just like not everybody can become a great artist or a great singer or a mathematician. Each of us are blessed with attributes that are unique. Sometimes that means technologies or avenues of employment are out of reach. Essentially what this means is that you need to dig down deep and understand what the bullshit about trying many times is all about. In the end you have either tried and the tech isn‚Äôt for you or you really haven‚Äôt put the effort in.
We have no idea what programming language the original poster tried to learn. Frankly Swift is a good place to learn programming, for that matter so is C++ for the basics. No reasonable person starts out learning to program by engaging by the most complex portions of a language first. Then if you consider some of the tools that Apple has to teach Swift, you can see it is accessible to people at any level. That is if they are capable of learning to program at all. But here is the catch that many don‚Äôt want to accept, not everyone can program. It doesn‚Äôt matter how much effort you put into teaching them they just don‚Äôt grasp the technology. That doesn‚Äôt make them bad in any way it just highlights that brains don‚Äôt all work alike.
This statement makes no sense at all. You can‚Äôt make an iOS app without considering the UI. In reality you can‚Äôt even create a command line app for Linux without considering the user interface. Frankly if you don‚Äôt want to put in the effort to develop the proper skills you really need to consider something different.
I work for a bank. Our app has million of users and it‚Äôs about their money. Even 1% of our user base means more than 10k people and companies. We dropped support for iOS 8 just last month. Finally I can use stack views and anchors. Sometimes a new feature does not justify hurting your users for something that you can achieve in a different approach.
I meant, I don't want to build only the UI because I'm a designer, but the all thing.
Yeap...
Thanks.
The bank use case for sure makes sense. Used to be in the same situation, and we kept supporting iOS 3.0 way too long because a single large customer didn't upgrade his phone. You know, all the fun of supporting older versions instead of sending the guy a new iPhone. I wonder which qas the cheaper option...
At work we won't be able to write a single line of SwiftUI for probably another 2 or 3 years because it only works on iOS13. We still have to support iOS10. So for a day job you'll likely need both. If it's just for personal projects, then definitely do swiftUI and forget the older stuff.
Good point raised. And why I don't use injection libraries.
Thanks, I know how to do it now.
Thanks for the pointer. I was able to learn how to do it. Now I just need to connect the ViewController code to the other file. I guess the proper way to say it is to have the ViewController code call the other files function.
Who do you know that doesn‚Äôt consider something real scientific computing until it‚Äôs running on a million cores and what‚Äôs their thoughts behind that?
Sorry for the stupid question, but do I need to have a class to enclose everything so that I can call it or can I just call the function?
I‚Äôm in the same boat as you. I started Apple‚Äôs book it‚Äôs a good start I feel. Feel free to reach out to me if you wanted to do projects or share material. I recently posted on this subreddit and realized it‚Äôs not a very friendly place towards new learners lol
list
I have mixed feelings. I like all the new features that they're adding to swift (property wrappers, dsl support), but I don't like how reliant they are on annotations. It seems like a very knee jerk reaction.
I thought that too but I think it's actually the other way around. SwiftUI will be easier to learn.
You got down voted but I think it's the smart move. If you're not desperate for a job right now then you could be an expert and leap ahead of all the devs stuck on the old stack. Apple is committed to it so now is the perfect time to start learning
A personal iOS app about downloading maps to your device
Even if it's quickly, this year adoption of iOS 12 was still at 85%. Most businesses wouldn't be able to afford to just ignore that 15%. Usually teams support the current version and the previous one.
JS could not be philosophically more different. Swift is strongly typed, JS is loosely typed. In JS you get nothing done without many libraries, in Swift you often just include Foundation or UIKit depending on platform. Swift has a lot less historical baggage and you use it as it comes, with JS you need to choose what features you will support and what framework you like - meteor, angular, react, or so many other choices? If you want to learn Swift start with Swift. Learning something else first won‚Äôt help much. Swift is as easy as any other. Thinking that loosely typed means easier (for just one example) is wrong, it just means your errors shift from compile time to runtime. Full disclosure - I‚Äôm good with C, C++, Objective C and Swift, competent in others - but JS confuses me!
If you want to get a job, you absolutely will have to know UIKit, even for the next several years.
I agree with you, but you could be a bit more polite in how you phrase things. That being said, /u/nextnextstep is right. This block of code contains no loop and is unlikely to be the problem. Whatever is calling this is where you want to look.
I agree that it looks easier to learn at this point, but if you intend to work in a professional setting, or support version of IOS that the majority of customers have installed, or understand how Swift/Object Oriented programming works as a whole, I think spending 2 weeks getting somewhat familiar with UIkit is valuable. If you don't plan on entering the workforce for a few years, or only want to write apps for yourself, then going fully SwiftUI right now might make sense, but its very unlikely, in my opinion anyway, that this technology supplants UIkit in a short amount of time. The money skill, in my opinion, will be being able to take a UIkit view and convert it successfully to SwiftUI. The original question seems to be from a beginners prospective, and asking "Should I learn A or B?" It's a good question, but I also feel that it is in some ways also the wrong question to ask...UIKit will be around for years before enough phones are up to date enough to make coding exclusively in SwiftUI practical, and another 10 years after that there will be a lot of legacy code based on storyboards, .xib files, and UIkit. From an employment prospective, and general programming competence perspective, OP should learn A, and also B, because if you walk into an interview with no idea how Swift spawns an instance of a class to make a view with UIKit, how a UIKit tableview works, and how a UIKit navigation view works, you'll very likely walk out without a job. My $0.02...
good stuff!
There is no syntax to do that.
Really??!!! So you can only ever allow one type..?! Also, happy cake day.
you can get close to what you‚Äôd like to do here with something like this: https://www.mokacoding.com/blog/swift-either/
Thanks didn't even realize it was lol, but yeah I have had this problem in the past getting a mix of either a string or an int through the same field from a server response. Albeit, not a good design on backend's part, but I had to check on init with json to handle conversion from string to to int and it felt messy. Not sure if Swift 5 introduced any work arounds, but really there should have been a schema in place.
Swift is a really strongly-typed language. In short, yes.
ok!! Thanks!
Awesome was exactly what I was looking for!!! Thanks!
 protocol X { } extension String: X { } extension Int: X { } var x: X Of course, you'd use a more descriptive name than "X", and you'd give it relevant properties and methods. Otherwise, there's not much point in not knowing the type of the thing.
Ahh that makes since. Thanks!
Well you said the function has to be in a separate file, so it needs to be in a class.
Disclaimer: I‚Äôm a self-taught amateur with no experience with any language but swift and I‚Äôm still trying to finish my first app. Swift is a strongly typed language. I don‚Äôt know the exact problem you are trying to solve but an [enum](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html) with associated values might be fit your needs. Also, [generics](https://www.swiftbysundell.com/basics/generics) might fit your needs. Swift by Sundell is a phenomenal resource, btw.
Thank you! Just trying to figure out stuff.
iOS 12 supporting the 5s and 6 is a big part of that 85%. I think iOS 13 will be have slower adoption since it‚Äôs dropping support for those devices.
`String | Int` is also strongly typed, and it comes from languages with better type systems than Swift (for now).
For what you want, you‚Äôll be better off with an Either enum.
So basically that syntax doesn‚Äôt exist in Swift yet but `String | Int` is the anonymous version of an enum with two cases, with associated values of `String` and `Int` respectively. But since it‚Äôs just two values, you‚Äôll be best off using an `Either` enum.
The strength of the type system is not relevant here, nor is the fact that it's static (instead of dynamic, like Python). It honestly just isn't designed to be expressive in this way. Which is a real shame, because if Swift had a more expressive type system I think it would see much wider adoption.
&gt; it comes from languages with better type systems than Swift What languages do you believe have "better" type systems than Swift? And what, to you, constitutes a "better" type system? (I do research in type systems and am specifically interested in type systems that combine expressiveness with ease of use, so these are genuine questions.)
Ok!! Thanks!!!
From Swift's perspective, I think the problem is that you're looking at types the wrong way. *Why* are you trying to declare a variable that can be either an integer or a string? To make use of this value, at some point you'd have to perform a test at runtime to differentiate the types, which kind of defeats a lot of the neat stuff built into static type systems. So what're you really trying to accomplish? As other people have said, you can use an Either or an enum. You could even build a custom class or protocol to describe the shape of the data. But in my experience, I usually find that a need for untagged unions means I haven't written my code very well. (Sometimes it's unavoidable, like when calling external libraries, but usually it can be refactored to be nicer.)
You can declare a variable as type `Any` or `Any&lt;Protocol&gt;`, but usually using an enum is safer.
Well Swift lacks higher-kinded types and dependent types, as well as variadic generics. In my personal opinion, since you asked, better type systems are type systems that can statically make guarantees about the correctness of your code. The more guarantees, the better the type system.
UserDefaults [https://developer.apple.com/documentation/foundation/userdefaults](https://developer.apple.com/documentation/foundation/userdefaults) &amp;#x200B; if the id needs to be protected then Keychain services
Somewhat new myself, but, in addition to the previously mentioned Swift Playgrounds for iPad, I‚Äôve been going through a series by a channel called [Code with Chris](https://www.youtube.com/user/CodeWithChris/videos) who also has a subreddit r/codewithchris
what level of ‚Äúprotected‚Äù are we talking about?
It‚Äôs pretty effective but not very secure to hold sensitive data so I would recommend not using it.
It is pretty effective. It‚Äôs a bad idea to use userDefaults for user sensitive information like passwords and etc. however for user ids I guess you can use that
Ok, I haven‚Äôt learned that yet. I guess I‚Äôll just keep watching the tutorials.
which one‚Äôs easier in your opinion?
Keychain is much more secure but in my opinion with working with userDefaults, it‚Äôs pretty easy however you should do some research on both and come with an conclusion
I will. Thank you very much!
No problem and good luck with your app
Yeah unfortunately there isn‚Äôt such framework and would probably take years to develop
I am quite confused at your question
Oof
Wait, what? Literally every example used a List object, which is basically a tableview replacement.
The biggest problem is that MIDI doesn't recognize enharmonics for music. Basically, MIDI says this is a certain key on the keyboard and doesn't care that you can spell it different ways. So there is always going to need to be some user input. You should see how different notation programs (lilypad, Finale, Sibelius, etc) do it. Bigger question: why do you want to do this?
Combine has Cancellabes instead of Disposables. Instead of having a CancellabeBag you need to keep track each subscription by yourselve.
Basics. It's for an OS that isn't out yet that won't have 90+% of the market for a year or two.
I think you‚Äôre 90% there. But the first bit is not quite right. the code is extending LinkedList to conform to the Collection protocol. A conditional conformance is what you described. That would use a generic where not an ‚Äúimplements‚Äù aka ‚Äú:‚Äù symbol.
Thanks so much for your comment
Those are called `Union Types` They have been marked as a "Won't Do" for the language: https://bugs.swift.org/browse/SR-5294 https://github.com/apple/swift-evolution/blob/master/commonly_proposed.md#miscellaneous https://lists.swift.org/pipermail/swift-evolution-announce/2016-June/000182.html
I guess you have your own ViewController class that is connected to the storyboard view? personally I would just add the palindrome function as method to that class because it uses attributes of this class. &amp;#x200B; If you insist on having it in another file (as library) you need to make a new class. the new class could have the function as a static method.
&gt;`String | Int` is also strongly typed, and it comes from languages with better type systems than Swift (for now). This form of type declaration has already been proposed, discussed and rejected. See [this comment](https://www.reddit.com/r/swift/comments/bzyn18/swift_types/eqzsz7d) for details.
I retract my ‚Äú(for now)‚Äù, apparently the type system just can‚Äôt do it according to Lattner. probably has something to do with how type inference is undecidable due to subtyping.
This site has some great beginner exercises. https://exercism.io/tracks/swift The Stanford ios course on youtube shows how to make apps. https://www.hackingwithswift.com/ is great for detailed info at a higher level
Yeah, the mailing list post doesn't seem to give more detail on the underlying discussion that lead to the decision, but I'd guess that it was internal to the swift team.
You‚Äôre only getting the size of the first text rect, so if the text is long enough to be split on to multiple lines you‚Äôre not taking into account additional texts rects. For example picture a paragraph with the first line indented and then the a few full lines of text and then a line that doesn‚Äôt go all the way to the end. There‚Äôs three text rects: the first goes from the indent to the end of the first line, the second is all of the body lines full width, and then the final is from the start of the last line to where it ends. (Auto correct liked to change ‚Äòrects‚Äô to ‚Äòtexts‚Äô when I was typing this post - I think I fixed them all)
Yep, so in my photos above that is a single paragraph. How then can I make that get the size of the whole paragraph? It's not just getting the first line because if I have three lines it shows the height of 2. It seem then it's just skipping the second line? Is there a function that I could use that behaves correctly?
In your frame of text function you‚Äôre only using the first text rect, you‚Äôll need to iterate through them all and and union the rects. Basically as long as you have more than one line of text you‚Äôll have at least two rects (unless you happen to have exactly two full lines)
Are you saying the function counts lines of full-width only. So that's why if I have more than 2 lines it grows?
No, I‚Äôm saying the function you wrote/included in the bottom of your post doesn‚Äôt take into a pint when there are multiple text texts (which will be a common occurrence when you have more than one line of text) For example if you look at the paragraph I just wrote (as I see it in my mobile app) there would be two text rects - the first would be full width and the height of four lines, and then the other rect is the height of one line and is from the left edge to where the text stops (which isn‚Äôt a full line, hence why it needs its own rect)
Okay, owwww. I thought that because it had the range it would automatically work that out! How would I go about fixing that? Should I not use this function and somehow count the lines?
I like how there a picture of kakashi
You have first rect for text range function, change that to one that enumerates the text rects and then does a union on them (you‚Äôd probably be fine adding the heights if it‚Äôs just simple text, but if there‚Äôs stuff that causes the text to have to jump horizontally than there maybe be multiple rects for a single horizontal line of text)
Okay. I'm sorry I don't fully understand what you mean by enumerate the text rects and unite them. Can you please give me an example? I am new to all this and still learning! :)
I‚Äôll try to remember in a bit when I‚Äôm at a computer (on mobile now and it‚Äôs hard to do stuff from memory)
That's okay. MVVM is the industry standard now, with a good few companies looking at other architectures such as VIPER which don't know much about myself.
I had a button on my app that when pressed was intended to open up a facebook business page in the facebook app, but instead it would open up the page in safari. I figured it out though
I would be so grateful. Thank you so much for helping me so far, I'll await your expertise!! :)
So Tableview can do columnar data? That would be great.
list does columnar data like NSTableView?
You should learn what you need to solve the problems you have right now. Learning random stuff up front isn't a generally good idea.
if it helps... [https://www.dcordero.me/posts/swiftui\_personal\_thoughts\_and\_mvp.html](https://www.dcordero.me/posts/swiftui_personal_thoughts_and_mvp.html)
Idk if this is a proper answer but have you thought about buying a old Mac mini and updating the parts. Or getting a new Mac mini then updating over time ? Just a suggestion no one likes slow computers.
How incremental do you all fee regarding WatchOS getting a separate play store ? How do you see it changing development? Is it worth it to create ONLY watchOS apps. Thanks !
Carthage?
I suppose you are right if you are only talking about macOS, but since you threw in iPad, I just assumed you meant UITableView and mistyped. Yeah, you're probably going to miss the NSTableView functionality, but you miss all that anyway if you're expecting to write a combined app with Catalyst. It seems there are a ton of people who are pretty much just bringing the iOS TableView design pattern over to macOS and ignoring the columns anyway. But you're right that the column functionality seems to be missing in this early stage.
Whoops! Good catch and correction. Thanks.
We don't have enough information to say that. OP didn't say what they're doing, so we really have no idea what might be the best solution.
To clarify, the "Won't Do" here is specifically for *anonymous constraints*. Swift (like many Algol-family languages) allows many language features only at the top-level, and when given a name. In this case, a protocol or enum could be used to similar effect. There's simply no anonymous generic constraint allowed. You can't declare a Swift enum type anonymously inline, as you can with a tuple or function. There are places in Swift where language features can either be declared at the top-level with a name, or specified anonymously inline. This just isn't one of them.
Carthage and SPM will be supported soon. So far, didn't find the time to do it. However, feel free to open a PR :)
If you want an alternative, [https://github.com/huri000/SwiftEntryKit](https://github.com/huri000/SwiftEntryKit) is much more robust.
Oh, awesome! What was the problem?
It is easy to ignore 15% of the market for new products or upgrades that deliver significant improvements. The potential market, that is the number of iPhones that will be on the latest OS will likely be over 250 million devices. That is a lot of money. By the way I‚Äôm one of those guys that runs hardware for a long time, I literally upgraded from an iPhone 4 to an XS!!! So I know the value in backwards support. But that backwards support shouldn‚Äôt be at the expense of new products or significant advancements in existing products. Sometimes you just have to upgrade.
Here's your problem: frame.size.width The effective space for content in an item of a collectionView is reduced by the layout's `sectionInset`, `minimumLineSpacing`, and `minimumInteritemSpacing` - so at the least, you'll need to assign zeros to those fields of the layout - You forgot sectionInset also, use floor() to round down to an integer width.
hi i am not getting yourr question can you share youre code? assuming SVC = Swift VIEW Controller is that correct?
Basically URL i was using started as http://facebook instead of http://fb
Thank you, thats solved the problem! I never even considered it to be a rounding issue with the width calculation!
Oh ok haha
API would be changing from now to Fall.
Sorry, I don‚Äôt really know what that means lol. As I said, I‚Äôm new and in the process of learning Swift.
Ambitious project heh...
404 on your example link
http://lmgtfy.com/?q=uitableview+in+%22swiftui%22
What does this line do? `public static let \`\`default\`\` = Toast()` a\`\`\`b\`c\`\`\`d
Quick answer is Yes. SwiftUI does some great and amazing things in respect to quickly getting things done but, it doesn't do all the work for you. In the apple tutorials you still have to make an external swift file for all your functions and that is really at the core of most tutorials. Understanding whats happening under the hood so to speak will allow you to adopt SwiftUI faster.
It depends what your plans are and your timeframe. If you intend to be looking for a swift based job in the near future, then you still need to know how to use UIKit. If you are just doing this as a hobby, for your own personal goals, or don't plan to look for a job anytime soon (ie, years) then you could probably get by with just SwiftUI. Just be aware, because SwiftUI was just announced, you'll have a harder time finding help and resources. SwiftUI looks very cool and promising, but it's still very new. This means 4 things: It's immature, it's probably going to change dramatically, it lacks adoption by the user base, and it will require large scale rewrites. In a year or two these things will be much less of a problem (or not problems at all), but right now they're serious blockers for any 'real' work. Also realize that the UI is not the entire picture when it comes to writing Swift. The frameworks for iOS, macOS, watchOS, and now iPadOS are massive and you'll need to know at least some of the other libraries they contain as well. There are also just standard language features and commonly used techniques that you'll need to master as well regardless.
Swift may not like the "+" in your filename. Try an underscore just to test.
The back ticks allow you to use a reserved word as a name. So it creates a static constant called default that is a Toast.
Better yet, check out [this](https://forums.developer.apple.com/thread/96067) post.
Okay, that‚Äôs what I figured would be the case. SwiftUI is just the sexy muscle car you see. Swift UIkit is what‚Äôs inside and makes actually go lol. Thanks! I‚Äôll keep chugging with the tutorials then
Lots of good points. Thanks for your advice! I‚Äôm not really looking into getting a job out of this. Mostly just want to attempt making apps that could generate some side income in addition to my current job.
Have we gotten to the point where people cant even read one sentence? ***NS***TableView &amp;#x200B; columns. I want columns in a grid.
I'd make a case that columnar data works well on iPads too. Can be very useful in some instances and i've had to roll my own with UITableView.
Right, but you don't get it for "free" like you do in AppKit, so you have to implement it, which is likely what you will do with List. Now, I said "free" because you have to jump through a bunch of (minor) hoops to format the data in a way that the columns understand. But that, in turn, buys you in for a bunch of free stuff that you wouldn't have gotten with single-view/cell based rows.
If you're doing these apps from scratch on your own, then you can probably get away with just SwiftUI. Also, fwiw, knowing UIKit wouldn't be a total waste. Many code examples, even for unrelated things, will have UIKit code in them. It'll also give you a leg up if you need to integrate a 3rd party library or some apple control that relies on UIKit.
I would say that the answer to this is "no" mostly because you specified "easily." See the answer /u/AssBoon92 gave regarding enharmonic notes and the way that MIDI works. I expressed some frustration about this to a friend. His (sarcastic) response: &gt; Oh yeah, you just have to teach a computer the entirety of western music theory.
&gt; upgrades that deliver significant improvements. I think, for all users, it would be extremely difficult to consider SwiftUI to be a significant improvement. And you'd be hard pressed to come up with something that is that couldn't just as well be done in UIKit, and not exclude a significant portion of the market.
Did anyone manage to find a way around this?
Yeah, if there‚Äôs still going to be UIKit coding being used here and there, i think I should just continue to learn it. I feel like that‚Äôs good base knowledge to learn and will make things easier to understand in a general sense. I haven‚Äôt looked at SwiftUI documents yet, because I don‚Äôt currently have a full developer account. But some of the apps I want to make would require things like webviews, storing images (still haven‚Äôt figured the best way to do that),
Yes, but, is it?
Screenshots would be helpful.
Hi! Here is a link to download the code for that specific file: https://gofile.io/?c=rIFcbj I'm probably doing something really stupid, but this is only the second time I've worked with SVC, and I'm unsure how to get it working this time round. &gt;assuming SVC = Swift VIEW Controller is that correct? Yep, that's correct.
 Yes, you should probably learn it. No, you shouldn't give up on existing stuff. No, it won't run on anything lower than iOS 13 or macOS 10.15.
What you learn with SwiftUI today will likely change and keep changing. Maybe a good thing to do is follow along with the updates.
Thanks! Fixed now
i'll work on that tommorow for sure.
I watched the first app video from WWDC. Got a good idea of how things are organized, although hardly a deep knowledge. Still more to know. In a nutshell, it's an Apple flavored React Native without JSX templates, but with a lot of baked in IDE features to make your life easier as well. It does a lot of things well, IMO, and I think I'll like it better than React. So, yes, it's worth learning, *especially* if you haven't done reactive UIs before. Everyone should learn reactive UI programming, and SwiftUI looks like a decent approach to it. That said, Combine, which powers the reactiveness of SwiftUI, did *not* need to deliberately rename everything just to be different. It's basically RxSwift, but with different names.
If somebody wants to be an iOS developer, he/she should learn all new things presented by Apple.
This post has nothing to do with whether you should or should not learn it. This post is addressing the dozens of copycat posts that would be answered with a simple search.
hi, take a look at this tutorial if u have not preveously seen it https://developer.apple.com/tutorials/swiftui/interfacing-with-uikit hope that might help
"Is it worth learning how to use a computer" - type writing person "Is it worth learning how to drive a car" - horse rider "Is it worth learning learning how to use a riffle" - Archer in an army Actually boils down to what the person asking the question means with "worth".
Ah brilliant, thank you, I will give that a read.
No. There used to be a hacky way to do it, that hasn‚Äôt worked for a long time. There‚Äôs no public API for doing it. If the user has a hardware keyboard connected, they can choose to bring up the soft keyboard, though. Why do you need to do that, out of interest?
When a user first tries my app, i show a guide/tour. It involves showing the keyboard, like this is where you type kind of thing.
I'm brand new to computers and I want to make cool apps for my Iphone, how do I learn this SWIFT?
üòÇ
Worth do WWDC?
in what way is it react without jsx, other than they're both declarative.
And Yes you should fuck off with supporting iOS &lt; 13
Even if you only work on new projects, there‚Äôs just no avoiding UIKit for now. If you want things like text views or attributed strings or any reusable layout that‚Äôs not a table, you‚Äôre out of luck with SwiftUI. Though I imagine it‚Äôll quickly catch up in the years to come.
But why male models?
But what am I going to do with all these Xgrid, Carbon, PowerPC, and Java books? I'm going to post some angry comments on my Ping account.
OK Google it yourself then
Just animate an image of the keyboard up into place. Actually I wouldn‚Äôt include how to use the keyboard in your tour. They already know how to use it, after logging into the App Store and downloading your App. I think even Apple would discourage this.
lol no tons of working iphone 6 and 6 plus in the market. it was discontinued 3 years ago.
Meanwhile, I‚Äôm still trying to get AppAuth from google to work in my app üò≠
JSX is an HTML-ish template language embedded in the javascript language when using the React transpiler. You can read more about it here: https://reactjs.org/docs/introducing-jsx.html For example, with JSX if you wanted to declare a template that returned, say, a header title, you might do something like this: function render() { return &lt;h1&gt;Hello world&lt;/h1&gt;; } The compiler translates that into something like this: function render() { return React.createElement('h1', 'Hello, world!'); } SwiftUI resembles the bottom with some syntactic sugar coming from the new version of Swift to make it less constructorish. SwiftUI does not have anything like the top, at least not so far as I have seen. Regarding the IDE, of course that's not part of the actual compiler features and library, but I guarantee that you will not get the same refactoring and live-preview features that XCode has from any Atom-based editor, or Sublime for that matter. Maybe Jetbrains will update AppCode to do something similar, but it wont be for months if not a year or two until that happens.
You serious? I just... I just told you that.
‚ÄúIs it worth it being an iOS developer ‚Äú
shul i learnt duh süÖ±Ô∏èift UI?
A little birdy told me that Combine has been in development for a looooong time. Like well before RxSwift. I doubt they would change their implementation just to match a 3rd party framework
Hi thanks for your help - I tried that earlier and no difference a I will try removing the + though and see if that made a difference
Rx has a fairly well defined API that transcends language. Every implementation I‚Äôve seen uses the same concepts and names. And I guarantee *that* predates Combine by some time. People have been talking about object/event streams since before *swift* existed. My point is only that Combine is basically a Swift version of Rx, just like SwiftRx. It probably should have continued to expose the same Rx API. That said I have no issue with the library so far *other* than the unnecessary name changes. The switch will be harder because of the name changes, but the concepts are the same.
Like how we all learned the soon to be deprecated 3D Touch? üòõ
They don‚Äôt *need* to, though. There are lots of ways to make iOS apps in other languages and UI frameworks. People should always weigh the pros and cons of each option. That said, there appear to be a *lot* of pros with SwiftUI and not a lot of cons other than platform lock-in.
But Combine isn‚Äôt really a swift version of reactive X. It originally started in Objective C. The idea I‚Äôm sure started happening around the same time, and I‚Äôm not arguing about reactive X. In fact I wasn‚Äôt arguing anything. Just dropped an interesting tidbit that it‚Äôs not modelled after anything. Combine is it‚Äôs own thing. It just so happens to closely resemble Rx. In fact there are a lot of cool language features that add quite a bit of interesting functionality
Is it worth buying a Betamax machine?
Ok I‚Äôll accept your word on that‚Äî I certainly have no reason to doubt it. If that‚Äôs the case, sure, there‚Äôs no need to switch just to conform to an industry standard.
Plus I‚Äôm sure it doesn‚Äôt help that ReactiveX is Microsoft
You might be interested in this: [https://github.com/ReactiveX/RxSwift/issues/1999#issuecomment-498613734](https://github.com/ReactiveX/RxSwift/issues/1999#issuecomment-498613734)
But is my apple computer powerful enough to run it?
But is my apple computer powerful enough to run it?
Small clarification: professional developers **don't need to use it**, but they **have to know how it works**. Feel the difference.
Nobody said technologies are eternal. If you want to be a professional developer, you have to learn everything that is on demand today.
Honestly, I don't care whether the answer is yes or no right now. I'm just tired of seeing the same exact question over and over and over.
Some developers at your job will use it and you might not. As a PR reviewer, it is important to know how to read it and how it works. Also in case youre moved to another team and have to look at someone‚Äôs SwiftUI code.
Im down. DM me if u want
My approach for this (which may not be the best, I‚Äôm not sure) is to save a value to UserDefaults in the first VC, and then read it in the last VC.
SwiftUI allows to make apps that look and feel actually native. React Native doesn't (or maybe it's the developers that use it in a wrong way, I don't know). I can detect that the app was made with React Native after interacting with it for ten seconds. There's always a feeling that something is off while using these apps.
Hah, of course somebody is mapping it.
They don't *have to*. Professional developers can work on other frameworks and make a long and comfortable career of it. My point was only that when it comes to deciding what framework to use or to learn, there's no requirement to learn any framework -- what matters is the context surrounding the decision. Nobody can learn every framework; you have to pick and choose what you invest your time into. That having been said *I* will be learning SwiftUI, as I quite like the approach they took with reactive UI, enough at least to want to learn more.
Carbon FTW!
That's news to me, but I can't say I'm surprised -- Microsoft has a very large research team, and they put out a lot of great ideas.
yes, SwiftUI is native code
As long as all the posts are from actual people and not bots then it's great. Swift is an awesome language. We should be an awesome community and help new people learn it and join us.
Hey mate, did you have a chance to have a look at it? Thanks in advance
None of those posts are contributing a single new thing, though. After the first one, everyone else could have gotten their answer simply by searching. Allowing all those duplicate posts, especially in the span of a week, is not being an "awesome community". It's just adding noise.
I‚Äôm as annoyed as you are! I keep seeing stupid click bait titles like, ‚ÄúThe end of storyboards‚Äù or ‚ÄúWhy you should stop using storyboards now!‚Äù üòë
You posted here.
Or maybe snarky little twerps ought to read the message before responding with silly one word responses and then following it up with a video showing me how to google for the wrong term. it's a simple question anyone who has evaluated swiftui could answer. i cannot install the beta and I actually did google it and didn't get any results.
Save yourself the trouble and learn about the coordinator pattern. Segues are the gateway drug to spaghetti code and coupled view controllers. Paul Hudson has a really great tutorial with a simple implementation. Highly recommend it https://www.hackingwithswift.com/articles/71/how-to-use-the-coordinator-pattern-in-ios-apps
Not a good approach. Segues would be better, but even then I usually recommend people use the coordinator pattern.
I don't know what you mean, sorry.
Oh, haha, I get it. Yeah, I can post, but I need moderator help. Peace
You said &gt; Hey guys, I can't seem to post anywhere
Did you set the delegate??? Please a break in the table delegate methods and if they don‚Äôt get called, more than likely you just forgot to set the delegate.
If it just says ‚ÄúApple‚Äù and not ‚ÄúMac‚Äù, then definitely not.
Did you delete the override functions that come with the tableviewcontroller file
Is it worth it to learn Swift UI?
But is it worth it to learn Swift UI?
Are you asking if it is worth it to learn Swift UI?
By writing your own compiler, of course!
This universal binary thing will never catch on.
Should I stop using storyboards now?
‚ÄúIt is definitely worth learning how to use a riffle.‚Äù - card player
Uh‚Ä¶instead of a note at the top saying ‚ÄúTLDR at the bottom‚Äù why not just do it the right way and put the TLDR at the top?
You are not doing anything with the response other than printing it
Swift will eventually support coroutines via the async &amp; await keywords, but it's still a good ways off: [https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619](https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619)
You need a mac. [Start here](https://books.apple.com/gb/book/intro-to-app-development-with-swift/id1118575552).
My personal approach is to save the value in the model. Then recover it on the viewWillAppear method when I need to get it
I see, thanks!
Perhaps it would be easier if you would give us a concrete problem in Swift that would be handled gracefully in Swift. We obviously don't have coroutines (or currying :( ) but generally we are able to ship stable and maintainable applications without it.
Check your privilege
Because somebody might read it unknowingly and story is spoiled for them. This is to give them a choice.
Maybe the sidebar should be updated but I'm still getting value out of the conversations
Your object businesses is never replaced by the call of your API. So it‚Äôs always empty...and your table view is empty. It makes sense..
There's a way to format code in reddit. https://www.reddit.com/r/web_design/comments/neukr/posting_code_snippets_properly_on_reddit/?utm_source=share&amp;utm_medium=ios_app
VMWare + macOS
Try posting on the less aggressive subs. Like the cat picture ones. Good luck
You only have -18 karma. That will be easy to fix. Just post lots of comments on different subs.
macOS is free so...
This is part of the Visual Studio Code release 1.35.0, the GIF is part of the official release notes. Either I still haven't found most of the convenience features in Xcode or it severly lacks some of them. At least general refactor/rename could be a lot faster there.
Answer to myself, I have opted for compilation directives (#if DEBUG ... #endif) See these pages for some explanations: [https://kitefaster.com/2016/01/23/how-to-specify-debug-and-release-flags-in-xcode-with-swift/](https://kitefaster.com/2016/01/23/how-to-specify-debug-and-release-flags-in-xcode-with-swift/) [https://stackoverflow.com/questions/28059697/how-do-i-toggle-between-debug-and-release-builds-in-xcode-6-7-8](https://stackoverflow.com/questions/28059697/how-do-i-toggle-between-debug-and-release-builds-in-xcode-6-7-8)
I made it to the finishing line with my 5S.
So make a suggestion then...
Hey there, did you have a chance to have a look at it? Thanks in advance :)
Even though some part of the community still likes working with XIBs, a large part doesn't. With features like declarative syntax and live previews, SwiftUI will make building user interfaces for iOS more comfortable. They can reduce time needed for iterations. In the longer run, the framework seems like Apple's another attempt to make coding easier for everyone. Still, it will require time to fully recognize the impact of SwiftUI. &amp;#x200B; A friend of mine, who writes code in Swift on the daily basis has recently written this article which gives a proper intro to SwiftUI: [Getting started with SwiftUI](https://prograils.com/posts/how-to-get-started-with-swiftui?utm_source=reddit&amp;utm_medium=referral&amp;utm_campaign=how-to-get-started-with-swiftui-1) &amp;#x200B; Enjoy!
Well, you can't legally purchase macOS (it's a free download but the license requires Mac hardware to run), so since you're technically pirating when using a Virtual Machine on PC I'd rather try to run it natively ("Hackintosh"). I'm not sure if/how well it would run on your PC, especially since you have a bad combo (AMD CPU and Nvida GPU), but you can try. All the info you need you can get it on here [tonymacx86.com](https://tonymacx86.com). If hackintosh doesn't work out for you, you can try the VM route, but be prepared to limited performance (and SwiftUI / live compiling &amp; preview is very demanding). If that doesn't work out either I'd try a Mac in the cloud service as a last resort.
How can I quickly modify a large string, 7k + characters? Should I divide it, for example, into 4 threads and inside each changing substring, and after completing all threads, merge substrings into one string again? I want to hear any ideas.
Yes, this source [code in this page](https://developer.apple.com/documentation/swiftui/drawing_and_animation/building_custom_views_in_swiftui) is running on MacOs using AppKit.
Anyone here using apocode? Is it as good as IntelliJ?
Thanks, don‚Äôt know how I missed that!
Thank fuck for that. Worst iPhone generation ever. It ran slow, had way too little memory, and was prone to touch disease.
I was in your same shoes in 2013, the best thing you can do is get a Mac, obviously, there‚Äôs some cheap ones on EBay day under $500 that can get you going The second best thing is a Virtual Machine however when I tried to do this myself, it was super slow, laggy buggy and honestly the worst thing ever. Renting a Mac is expensive, I‚Äôd only do that if I needed a Mac to publish an app but to develop is gonna cost you a lot. I‚Äôd say trying our React Native, or Expo. It‚Äôs cross platform so you won‚Äôt need a Mac until you want to publish.
I knew I was forgetting something yesterday. Can you post the code in your firstRect(for: txtRange) function please
I believe it depends on intent. If it‚Äôs user communication that is encrypted, it needs to be in compliance. If you are just checking to see that your customers are actually your customers, then it‚Äôs exempt. Although I don‚Äôt remember where or how I arrived at this conclusion so you might want to ignore it.
All good! This is everything I have so far. I changed my previous code by just taking out the extension and storing UITextRanges instead of Range&lt;String.Index&gt;. If there's anything else I can give you please ask! &amp;#x200B; **func** textViewDidChange(**\_** textField: UITextView) { *// Get Paragraphs and UIText Ranges* **struct** ParagraphModel: Hashable { **let** text: String **let** range: UITextRange **init**(withText text: String, range: UITextRange) { **self**.text = text **self**.range = range } } **let** components = textView.text.components(separatedBy: "\\n") **let** models = components.compactMap { component -&gt; ParagraphModel? **in** **if** **let** range = textView.text.range(of: component) { **let** length = range.upperBound.utf16Offset(in: textView.text)-range.lowerBound.utf16Offset(in: noteContents.text) **guard** **let** start = textView.position(from: noteContents.beginningOfDocument, offset: range.lowerBound.utf16Offset(in: noteContents.text)), **let** end = textView.position(from: start, offset: length), **let** txtRange = textView.textRange(from: start, to: end) **else** { **return** **nil** } **return** ParagraphModel(withText: component, range: txtRange) } **return** **nil** } *// Create CGRect from Range* **func** createRect() { **let** test = textView.firstRect(for: models.first!.range) *// Use CGRect Y and height to create View - with button inside* **let** testView = UIView() testView.backgroundColor = UIColor(red:1.00, green:0.83, blue:0.00, alpha:1.0) testView.frame = CGRect(x: test.minX, y: test.minY, width: textViewColumn.frame.width, height: test.height) textViewColumn.addSubview(testView) } createRect() }
So my fortran buddy that pulls down $$$ isn't a professional developer?
Running Mac OS natively on a hackintosh is not any less illegal than using a VM. VMs are slower but they're infinitely easier to set up, I'd recommend at least trying this route first. Also pirating MacOS to run in a VM so you can learn Swift isn't going to get you in any trouble with the law, or your creator. Ultimately though, if you're new to programming and you're on windows, there's little reason to start with Swift. There are more beginner resources for Java and Python which will work without any hassle, and they'll teach you the same skills.
I wasn't saying that a hackintosh is legal, lol, my message was "if you're doing the hacky way, go all the way down and run it natively". I personally had very little luck with running macOS in a VM, and I have a Mac, where it's natively supported. I was just saying to OP that a hackintosh, if he's willing to go that way, will definitely have better performance vs a VM on the same hardware.
So all the Mac developers who didn't learn Xgrid were just amateurs?
All I have is this Sony VAIO from 2006. Should I get a new MAC PRO? I want to make an app where people can upload pictures of their cats. I'm not sure if the 580X will be good enough or if I'll need the VEGA II.
That source code looks pretty confusing. Your print statement says "URL", and the variable is called `voiceFileURL`, but you're passing it to a path-based method, so it's actually a `String`, right?
wow, I can't believe Xcode has so many ardent defenders that such a reasonable comment would be downvoted like this. He's not shitting on anyone, just saying the Xcode editing engine has very few features (which has been realistically true for a decade). "MaKe a SuGgeStiOn tHeN..." you think nobody has thought to ask for better refactoring tools? VSCode and JetBrains both have better featuresets on-hand than Xcode in terms of just text-editing and refactoring and it's not particularly close. That being said, I'm hopeful that the extension engine will help Xcode catch up to the competition here, and maybe even make a rename refactor that doesn't have folding animations (facepalm). Here's a few interesting Xcode extensions: [https://github.com/theswiftdev/awesome-xcode-extensions](https://github.com/theswiftdev/awesome-xcode-extensions)
Hope that's enough! If there's anything else I can give you please ask! I have been so stuck losing my mind trying to work this out haha
Just purchase a second hand MacBook or even Mac Mini on eBay, you can find second hand Mac Minis for like $400 if you get lucky.
Okay, so where you're using textView.firstRect(for: models.first!.range) - if you look at the [documentation](https://developer.apple.com/documentation/uikit/uitextinput/1614570-firstrect) for that function it states: "Return Value The first rectangle in a range of text. You might use this rectangle to draw a correction rectangle. **The ‚Äúfirst‚Äù in the name refers the rectangle enclosing the first line when the range encompasses multiple lines of text.**" - notice how its talking about the first line of multiple lines of text. You'll want to switch over to using [func selectionRects\(for: UITextRange\) -&gt; \[UITextSelectionRect\]](https://developer.apple.com/documentation/uikit/uitextinput/1614458-selectionrects) - loop through the array and do a [union](https://developer.apple.com/documentation/coregraphics/cgrect/1455837-union) on the rects.
hello, screenshots have been added. thanx for suggestion.
The refactoring engine is open source. If you file a bug about it on bugs.swift.org, someone might actually add it. I‚Äôd wager this would even be a good contribution for an open source contributor who wants to try their hand at contributing to the compiler. Maybe that person could be you üòÅ
Okay, what array am I looping through? For example in the photos I posted it‚Äôs three lines but a single range. How do I loop through each line?
So the selection rects function will return an array instead of a single entry like the first rect function; loop through those
Okay to confirm. I need to use that func with the current UITextRanges I have and then unite what the function returns?
Correct (though technically you‚Äôll be unioning the rect property of what‚Äôs returned from that func as it returns a structure with additional data that you don‚Äôt care about in this instance)
Okay! I‚Äôll try this tomoz. Thank you so much for the advice üëç
DM me if you want someone with 11 years of experience in iOS and other mac platforms.
I am genuinely curious about why you think this would help. I've made maybe 50 suggestions and/or bug reports on xcode improvements, but I've never even gotten a response when it comes to my improvements. Bug reports are normally closed as duplicates.
[removed]
As far as stuff that is "needed" in XCode goes, this is at the bottom of the barrel lol
Yeah I'm interested DM me
Don‚Äôt take that as a bad sign! They count number of duplicates and use that to help determine product strategy. And with 700,000+ developers, your radars probably are duplicates. Do generating duplicates is a very effective strategy for showing need to address something.
Hello! I have a question. I have basic knowledge of Swift (types/conditions e.t.c) and SwiftUI (by Apple WWDC tutorials). I want to build basic SwiftUI/Firebase application with maps for iPhone. What documentation, tutorials i should learn? I need knowledge about basic app architecture to build my app properly.
Read up on how UITableView, UITableViewDelegate and UITableViewDataSource works.
Maybe try setting the accessibilityLabel on the image itself? Not sure.
It's the same conversation over and over and over again.
Already tried that... üòë Thanks for your comment, though! üòéüëçüèª
CoreLocation
Yep. It was covered in multiple WWDC sessions last week, and they demoed it with both iOS and watchOS apps.
Two posts that aren't on the topic of Swift but are all about you aren't going to create much good will.
What a tease that tutorial was lol
I understand, thanks for pointing it out. Still, I've created a lot of bad will already; I have to do something, or just stop coming here, which I don't want to do.
Wait, good will? Are you suggesting that the downvotes I've gotten have been due to bad will toward me, rather than because they're actually inappropriate in some way? That would explain a lot.
If you have specific questions about Swift that can't be solved by searching, create a post and ask them. Many posts get downvoted even though they contain legitimate questions, that seems to be the nature of this sub. If you don't like that it's probably best to keep away.
Xcode is a pretty terrible IDE and I'm not sure why anyone defends it. Also, the extension engine is garbage compared to the plugin system they had before (ignoring its security flaws). AppCode is a better coding experience but it still relies on Xcode and it can't help you with storyboards. I wish you could just use VSCode for everything.
i have no idea what this post or the other one has to do with swift.
How about a simple Refactor-&gt;Rename that doesn't take 3 seconds just to get started.
Hmm, "If you don't like that"? I don't understand where you're coming from. I'm not talking about what I don't like. I'm talking about why I got absolutely pummeled before, and why I'm getting downvoted on this one. If it's because I'm creating bad will by talking about myself, well, that's easily solved, as I didn't intend to continue. I just am trying to figure it out. Peace
I'm sorry about that. Are they inappropriate for not being about Swift? I mean, I know it's a Swift forum, but people talk to each other, don't they? Not complaining, just trying to understand. I'll look to see whether there's a meta for the sub. Peace
Thanks for the backup, Donnie. I‚Äôm using Xcode almost every day and I certainly don‚Äôt dislike it. Sometimes I feel as if I was the last person even developing native Mac applications ‚Äî working with the arguably least maintained framework, Cocoa, on Apple‚Äôs least favourite platform, the Mac, really lets you enjoy their current blind spots in great detail. If there‚Äôs only one all-in-one IDE for all of these platforms, it should be industry-leading more than anything else.
Well, my favourite improvement suggestion that I've made is that xcode should clear warnings/errors when a build is started, instead of showing errors from the last build while building. This has to be annoying to everyone, right? But it seems not enough people are suggesting it?
I've asked what, to me, were perfectly legit questions here and got downvoted. It is what it is. You don't need to create posts trying to find out why, you'll never find out. Just accept it as the cost of getting help here.
Thanks. I plan to do that along with other formal learning. But for now, is there a quick easy fix to make the image and labels to show up?
i don't think not appropriate, just not to anyone's interest. the upvoting and downvoting is not boost or deflate your ego. it is to make topics that interest the community rise to the top and those that not sink to the bottom.
Depending on what you want to do. TableViews are mainly for displaying similar views (called dynamic prototypes) with a size that can be way larger than your display's size. You have to use a static TableView or other type of views to be able to display stuff just by putting it in the interface builder.
Mac apps.
tvos
watchOS
In backend (check out Vapor or Perfect), for server-side apps There‚Äôs also a project called ‚ÄúSwift for Arduino‚Äù
You were pummeled before because your posts were just whining about how bad Xcode and Swift are, and how bad the community is because we didn't care. If you're not going to whine and moan, then you're fine.
The app sends data periodically to our server. We are a startup. So I think a good idea would be to submit the document.
I think a lot of the binding and state concepts from JS frameworks are basically the same in SwiftUI. I'm coming from ruby/go and Vuejs and I find swift and swiftUI much nicer in everyway. If you want to build a game there is a library called gamekit I think that let's you do scrolling games. I'm really impressed by how well everything is designed for ios development. Even xcode's autocomplete is awesome. I think you'll really like it.
Learning Swift and dealing with Xcode is tough enough without having to deal with a VM or cloud-based solution. You need a Mac. Look out for an older quad-core mini for the best bang for your buck.
Don't worry about it. Just move on and stay on topic of swift. You can get karma by commenting too.
I made a couple of simple swift tutorials on youtube. The first one is how to make a weather app in swift. Another is doing the same for the apple watch. &amp;#x200B; [https://youtu.be/vBmaXp49sLg](https://youtu.be/vBmaXp49sLg)
http://hackingwithswift.com
As far as I know that is not possible. iOS 13 adds a ton of features for the NFC chip in the iPhone, but for that task, other devices would have to read information that you put on the iPhones chip and Apple doesn‚Äôt allow that. That‚Äôs also why you don‚Äôt see alternatives to Apple Pay on iOS.
Could I somehow add their card to the already existing Apple Pay app?
That‚Äôs not how this works sadly. Cards in the Wallet can‚Äôt be read by anything other than terminals for Apple Pay. The stuff you see with plane tickets etc. is mostly QR code based so if you don‚Äôt plan to utilise optical scanners for every door, I don‚Äôt see an option.
Any luck with this? Running into the same issue.
I second Hacking with Swift. It's how I got started and owe a lot to Paul and his books.
I checked out your post history I noticed one thing. Your posts are about nothing. U asked question if checking for force unwrap is similar to dividing per 0. Yet u wrote two paragraph that was completely unnecessary. I another one you wanted to know where to learn lldb, and why did you use shitty title like ‚ÄúNo, really, where did you learn LLDB‚Äù, instead of ‚ÄúWhere can I find LLDB tutorial‚Äù. I know that writing type can be annoying for people, hence downvoted. And lastly, you create second post where you whine that people give you downvoted. Second post that is not connected to Swift at all. If you want to talk about life, check out other subreddits and not specific ones. And because you are so karma whorish, checkout subreddits that can give you karma just for posting, maybe then your life will be fulfilled.
Don't suppose you figured this out?
If your HID card is one of the newer iClass cards you'll probably have trouble communicating with the reader since the protocol is proprietary.
I'll second this. I started with his 100 days thing, but it wasn't advanced enough for me, but I am having fun doing his sample projects. They're nice and simple, so far they have all been under an hour or so (I've done the first three), and they're pretty satisfying to do.
This feels more like an advertisement than anything...
Any chance you can tell from this lol? &amp;#x200B; [https://imgur.com/a/bwGRcZ9](https://imgur.com/a/bwGRcZ9)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/lECiYm6.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20er6perr)
SwiftUI is still in a pretty early beta. There are rough edges (tab bars don‚Äôt support icons, occasional bugs) that will be fixed in future betas. So if you do decide to go this route, be aware that you‚Äôll be dealing with the usual caveats with a beta.
No more to deal with Cocoapods?
Did it actually make a difference? One of the points of the log system was to NOT have to do `#if DEBUG`; it was intended to be fast enough to leave those type of ‚Äúdebug‚Äù-level log statements in the app. I‚Äôm genuinely curious what measure this is. Also: there‚Äôs observer effects: by choosing to look at debug level log statements the system can become slower than if you were only looking at ‚Äúdefault‚Äù or higher log levels. So a good test would be to keep the `os_log` statements in a Release build, but keeping the log level for the app at default. Then compare to stripping them out with `#if DEBUG`.
Make School has a bunch of great tutorials. https://www.makeschool.com/academy
I remember now. There is this from [Apple](https://developer.apple.com/documentation/security/complying_with_encryption_export_regulations). And mine was in the forms of encryption that are exempt.
And then misses 10% of the uses, and mistakenly renames a handful of completely unrelated uses of the same var name in other classes.
Let‚Äôs Build That App has a great course on core data.
this is not working for me
Thanks I‚Äôll check it out!
[https://medium.com/@rorogadget/swiftui-for-react-native-developers-2072a21c22fb](https://medium.com/@rorogadget/swiftui-for-react-native-developers-2072a21c22fb) is a great article comparing the syntax between React Native and SwiftUI. Personally, I used to find apps written in Swift kinda cumbersome to write. I preferred writing in React Native or Flutter. I'm working on a small project now using SwiftUI, and love it so far. It's intuitive and straightforward. I love that everything is reflected in the code. That said, it is still early beta, and some of the stuff from their talks still aren't actually working. So if you jump in right now, anticipate some jank. Regardless, I'd highly recommend you check it out.
Stanford University's CS193P course is one of the best ways to start with.
For now, just using a PresentationButton to launch a modal and waiting for the next beta to roll out.
"Culture"? It's a subreddit about a programming language. Here's how it works. People submit posts, hopefully about Swift. When I see posts about Swift, I upvote them. When I see posts not about Swift, I downvote them. It's pretty simple. This post, BTW, is not about Swift. Your account just says "[deleted]" now so I have no idea what your original post was, either, but I assume if it was heavily downvoted it probably wasn't about Swift. I have no memory for specific users. Come back, don't come back, nobody cares. We don't care about your "karma", either. It's just a useless number. Submit posts (and comments) about Swift, and you'll get upvotes. It really is that simple.
&gt; you'll get upvotes In Soviet Russia, upvotes'll get **you**! ^(this post was made by a highly intelligent bot using the advanced yakov-smirnoff algorithm... okay, thats not a real algorithm. learn more on my profile.)
&gt; Are they inappropriate for not being about Swift? I mean, I know it's a Swift forum What we've got here is ... a failure to communicate.
1. Raywenderlich's video course on Core Data 2. [Objc.io](https://Objc.io)'s book on Core Data
Those are all fair points! I agree that I like more expressive type systems. More expressiveness = more precision in the types = tighter bounds on the domain of values an expression might have. It's good stuff. But there's also a pragmatic side to things. While *I* enjoy having as much expressive power as possible... it seems that not everybody else does. Some people just want the type system to get out of their way. So the design of a language like Swift is inherently different from, say, Haskell. Swift needed to be usable by a community already used to type systems that worked a particular way, whereas Haskell was (at first) pretty experimental and expected its users to be willing to read papers to understand things.
Yeah a big problem with Swift, and the thing I like the least about it is the need for it to be C-like and accessible to people who don‚Äôt or can‚Äôt understand complex types.
Also a strong rec. He has GREAT free material, and all of his paid stuff is worth it. I've only gotten through a portion of what my work bought for me, but it's phenomenal. He also has free resources on the SwiftUI framework that was only released a week and a half ago (and all of his book purchases will get free SwiftUI edition updates moving forward). But a book once, also get free normal swift updates.
In terms of speed, it did not changed anyting and I have many many logs but that was not the goal. In my application I'm logging the exchanges between my app and a Bluetooth Low Energy device but my customer found there was too many logs and it was too difficult for him to see his own logs.
Raspberry Pi Zero with Camera is very cheap.
There is also android and windows support in mid-development. There are working sample projects for both, each tying into the platform specific UI libraries
You probably want to try [joined](https://developer.apple.com/documentation/swift/sequence/2431985-joined) method.
I'd change the segmented control to a tab bar controller. This is what the human interface guidelines recommend. (I didn't run your code)
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [Releasing my first framework!](https://www.reddit.com/r/iOSProgramming/comments/c0vfx3/releasing_my_first_framework/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
yes you are right. i reading about how to add tab bar with swipe gestures. not good article yet. plz suggest if u found any. thnx
`let listcontent2:[ListContent] = allTests.reduce([]) { (result, test) -&gt; [ListContent] in` `return result + test.methods.map { method in ListContent(test: test, method: method) }` `}` Let me know if you have difficulty understanding this code.
Nice. The name might be a problem with future Apple frameworks, though. They do like their xKit names :p
Congrats on your first framework. It looks great. &amp;#x200B; Just tried out your nice example app, that shows how it works. I have created an [issue](https://github.com/Pondorasti/PickerKit/issues/1).
hopefully, both cocapods and carthage are pain to use comparrd to nuget (dotnet package manager) or even npm
I have high hopes. I think one of the best things about spm is that it can be used right away, unlike SwiftUI or Combine which need iOS 13.
SPM take the best of both. As many other things in swift by the way. So It‚Äôs just a matter of time until SPM become the most use package manager. Clock is ticking for Cocoapods and Carthage
Hey! &amp;#x200B; I would use a UICollectionView for displaying chat messages. I did not run your code, too. :)
Yeah, that's what I'm super excited about. It's just a matter of getting new Xcode and we can adopt SPM right away even for legacy projects :)
i have used List of swiftUI which is equivalent of collectionView and tableview. also y nobody running my code? did i said it anywhere?
I suggest using the Decimal type in Swift for doing subtraction / addition, check the 3rd section of the accepted answer in this StackOverflow question : https://stackoverflow.com/questions/32747174/getting-weird-value-in-double
Oh, thank you very much
Looks like you might be okay. I think that is one of the older HID proxmark cards, not iClass. You should be able to find some stuff online, but I've only played with iClass cards.
I really hope so, I had an introduction to package manager using Swift Vapor. I hope the implementation for iOS is just as simple.
God I fucking hope so
Sorry for the late response, I didn‚Äôt get a notification for some weird reason..! There might an issue with ‚Äúencoding: .utf8‚Äù though, because the main purpose of the app is to load .Doc files and they use a different type of encryption, that‚Äôs why I was trying to load them as an URL directly, not sure...
Very nicely written
It just seems like unnecessary boilerplate. If you make a change in one entity you‚Äôve got to update the corresponding view model. Apple even recommend using Core Data model objects as a data source to table and collection views, so personally, I wouldn‚Äôt bother. Spend your valuable time on something else.
It would help if you posted your code.
‚ÄúOP learns about floating point arithmetic‚Äù
And quite interesting, too. My takeaway is that if I really start learning SwiftUI now, then in a few years I'll easily be writing macOS apps. Which personally for me is great. I've got an app in mind that is honestly better suited to an iPad than an iPhone. And when I really think about it, it should also come in a desktop version. So, it seems I can begin working on it right now, trying as much as possible to use swiftUI and eventually it will be really easy to port to macOS. Does that jive with what you got out of the article?
Handlers are ideal for async tasks no matter their size. Your filter function is probably running on a different thread so it completes independently of the calling function.
I think that eventually pretty much all Swift-dominant projects will migrate to SwiftPM, leaving Objective-C dominant projects as the remaining users of Cocoapods and Carthage. At the very least, for the projects I work on I‚Äôve been figuring out a path for weeding out dependencies that are unlikely to make the jump so I can be SwiftPM-exclusive ASAP.
Totally a minor nit, but the correct spelling is ‚ÄúDeceleration‚Äù
For me one of the biggest tells of RN apps are: 1. They practically never make use of UINavigationControllers, instead opting for some custom thing, resulting in absent swipe-to-go-back gestures among other things 2. Tableview functionality is often wonky 3. View controllers often aren‚Äôt fully loaded when they appear on screen These things can be worked around, but they‚Äôre usually not, which produces a weird uncanny valley app that feels like a semi-native web page or something.
Thank you kind redditor
Even the platform lock-in aspect may not be an issue in the future‚Ä¶ it‚Äôs plenty feasible for non-Apple SwiftUI implementations to be created. I think there‚Äôs a very real possibility that we‚Äôll be targeted Android, Windows, Linux, etc with our SwiftUI codebase day some point in the future.
I‚Äôm learning how to write Swift by watching videos and I‚Äôve found the #CodeWithChris video on making a ‚Äúwar‚Äù style game (https://codewithchris.com/how-to-make-iphone-apps-with-no-programming-experience/). The issue I need help with is how would you stop randomizing numbers once the ‚Äúdeck‚Äù is empty. In addition how would you prevent the same two ‚Äúcards‚Äù from being pulled from the deck.
I think this does what you want: allTests.flatMap { test in test.methods.flatMap { ListContent( test: test, method: $0 ) } } Produces something like this: test.ListContent(test: "Density", method: "Density test 1"), test.ListContent(test: "Density", method: "Density test 2"), test.ListContent(test: "Density", method: "Density test 3"), test.ListContent(test: "Density", method: "Density test 4"), test.ListContent(test: "Vanadium", method: "Vanadium test A"), test.ListContent(test: "Vanadium", method: "Vanadium test B"), test.ListContent(test: "Vanadium", method: "Vanadium test C"), test.ListContent(test: "Vanadium", method: "Vanadium test D"), test.ListContent(test: "Viscosity", method: "Viscosity test A1"), test.ListContent(test: "Viscosity", method: "Viscosity test A2"), test.ListContent(test: "Viscosity", method: "Viscosity test A3"), test.ListContent(test: "Viscosity", method: "Viscosity test A4")]
Cocoapods has pros over Carthage?
I do exactly the same :) Just today I posted 1 pull request on GitHub to one project that I need in my commercial projects to support Swift Package Manager.
\`!expert.isBlocked\`
Check out some of the codepath YouTube tutorials. They go over how to create clones of twitter, Instagram, etc. They use a parse backend.
Best thing to do is: Use what you learnt and start trying to do things yourself. If you have any question, search on stackoverflow. Chances are somebody sometime also had the very same question. I watched a lot of tutorials, still do on more advanced topics but I find that the best way of learning is making things yourself, doing everything wrong, improving and finally doing it better. And at least you‚Äôll now why ‚ÄòA‚Äô didn‚Äôt work out as well and why ‚ÄòB‚Äò is a simpler and better approach, etc.
I wrote [something like this](https://imgur.com/a/YV2ww7n) back when I was building the app for Burberry. (Video capture from current build of the app‚ÄîI haven‚Äôt touched this codebase since 2017, as I moved to a new company, and there have been lots of changes to the app since then).
Hey, I hope it‚Äôs going well man! I would love some advice for this too. I‚Äôm just starting out and worried about the jump from tutorial following to ‚Äúfree building‚Äù already. Have you tried learning the specifics of what you need for your app and then trying to put them together? The again I don‚Äôt know what I‚Äôm talking about at the moment ^^ Good luck buddy!
Yeah, it‚Äôs for Jason Snell, who has a long history of Apple coverage. If you haven‚Äôt previously seen it, check out his site [Six Colors](https://sixcolors.com).
Yep, that's what I got too. Plus, I'm sure it'll take you way less time than a few years to get to that point. SwiftUI is so incredibly easy to use, its mind-boggling when you compare with what you used to have to do in UIKit.
I‚Äôm in the same boat. I was about 1 month into a project when WWDC happened, and I‚Äôve already started to move the app over to SwiftUI. I‚Äôm not relying on this project for income or anything, so I‚Äôm ok with the limitations it will have initially. It‚Äôs not simple, but it‚Äôs a lot of fun exploring the SwiftUI framework.
I can really recommend Stanford‚Äôs iOS 11 Course CS193p i believe it was. It‚Äôs not the newest version but it goes into great detail in a lot of topics and has a demo that shows how to use certain aspects like MVC, Notifications and many more. Also, you find the assignments and their solutions posted on github.
In general, it will require a fairly big change in mental model. The shift from an imperative to a declarative programming model will require some getting used to for those unfamiliar with it. That being said, I am extremely excited about it and the bit that I have toyed around with it already I see it as a great way to rapidly increase developer throughput (although most of that is thanks to Xcode Previews, which can be used with standard UIKit as well).
I've been down this road myself and, for me, Angela's course on Udemy knocked it out of the park. It is the most comprehensive online course I found and trust me, I've been through just about all of them.
I‚Äôm a SwiftUI convert. Everything else just seems so outdated. But that‚Äôs me.
Parse has been gone for a long time.
Download the code of some small open source app from the internet and try to figure out what each part is responsible for. Once you are more or less familiar with the code, try to modify it or even implement some small new features.
Not really, it has been killed off by Facebook, yes. But it lives on in projects, like an app I maintain, which now transitioned to parse-community. It‚Äôs a giant mess with pre and post db update hooks to update other tables, and it‚Äôs a relational db stored on Mongo (don‚Äôt ask me why). Our company is fighting tooth and nail to get the client to remake the app and backend, but they keep asking for ‚Äúsmall fixes‚Äù until they ‚Äúevaluate the economic viability of the upgrade‚Äù. I mean, I can see you getting 50k+ through in-app-purchases, what are you whining about? Oh, and the app is written in Objective-C, and uses notifications for EVERYTHING. Sorry, I‚Äôm bitter.
Core Data now syncs with iCloud. Would look at Firebase/Firestore. ObjC just looks ancient now. But it runs the deep iOS frameworks.
You watched and followed a couple videos. This is just the beginning. If this is your first time programming you need to keep watching the videos. I really suggest sticking with HackingWithSwift as it‚Äôs free. But the Stanford course is pretty good too. You have a long way to creating what you want to create. Stick with it but if this is your first attempt at development you‚Äôre going to need to stick with it for a lot longer. This is not something you pickup in a weekend. People goto college for 4 years to get a degree in software development. While that‚Äôs not necessary I just want to make it clear this is not going to a weekend thing. Good luck
Honestly you need to learn a lot more. I suggest sticking to the tutorials. HackingWithSwift basically teaches you the entirety of the basics and how to make full featured apps from the ground up. Once you‚Äôve done that you have a really good baseline and it‚Äôs your idea time. Stick with the learning. It‚Äôs a long road but there‚Äôs a ton to learn.
At some point, you should take on a larger project that is not covered by any single tutorial and finish the project. Doing a udemy course is great for them hand holding and teaching you how certain things work, but you need to be able to complete something like that WITHOUT going thru a course. That doesn't mean you can't find parts of the project in tutorials, it means that the whole project isn't from a tutorial. I did this years ago, I used maybe 4 tutorials that only covered about 1/2 what I was doing.
https://www.raywenderlich.com/5370-grand-central-dispatch-tutorial-for-swift-4-part-1-2
Made a youtube tutorial with beginners in mind. A bit longer than most tutorials but I go through and organically make a simple weather app from start to finish and leave the mistakes and troubleshooting in there. Check it out, hope it helps. &amp;#x200B; [https://www.youtube.com/watch?v=n9wVcT1sxR0&amp;list=PLQ4fhA8T4LcQuL6jnpJBa3QLRFhpU-9Yd](https://www.youtube.com/watch?v=n9wVcT1sxR0&amp;list=PLQ4fhA8T4LcQuL6jnpJBa3QLRFhpU-9Yd)
 Thank you so much. I was hoping someone who understood coding would be able to see through the Playgrounds part and to the code and see the mistake. &amp;#x200B; I don't know if they just never explained that or if I just missed it. &amp;#x200B; But thank you again.
Check out this site: [https://www.raywenderlich.com/](https://www.raywenderlich.com/) Ray has tutorials on almost every subject you can think of and a ton of them are free. Some are for subscribers only, but I've learned plenty for free from this site. You want to learn how to build a fancy UI Control that spins and draws charts? He's got that covered... You want to know how to fly in pieces of your log in form for your app to make it more interesting with animation? He's got that too. Here's one tutorial that teaches you how to create HTTP requests, as well as implement background downloads that can be both paused and resumed: [https://www.raywenderlich.com/567-urlsession-tutorial-getting-started](https://www.raywenderlich.com/567-urlsession-tutorial-getting-started). I also highly suggest his books like iOS Apprentice or iOS by Tutorials.
SwiftPM isn‚Äôt only limited to Swift: http://ankit.im/swift/2016/05/21/creating-objc-cpp-packages-with-swift-package-manager/
Yes, and I think the maintainers of both are probably okay with it.
I‚Äôm not sure how to get what would normally be the position, but in this particular case, you might want to consider using the modifier ‚Äúoffset‚Äù instead of position. Passing in a CGSize() with no arguments should leave it unchanged
Find a nice open-source app template on Github and play around with it. Read the code and challenge yourself to add features on top of it. This is a great way to learn programming if you already have some basic knowledge (which it seems you do).
You need to have back-end knowledge and be familiar with object-oriented programming. Start by building an object class that holds user-input, for example. Then you need a manager class which initialize an instance of this object. Then a [view controller ](https://developer.apple.com/documentation/uikit/view_controllers) class that you use to let the manager class interact with the user interface. The manager classes should have methods of sharing, retrieving and storing the object. Which can be done either locally or on a data-base. Also read[apple](https://developer.apple.com/documentation/appkit) documentation for swift appKit libraries to learn how iOS works.
Try a book. ‚ÄúiOS Programming: The Big Nerd Ranch Guide‚Äù would be an excellent choice.
Hi.
&gt; Use what you learnt learned*
Paul Hudson's 100 Days of Swift will challenge you to think for yourself. The best (and possibly bad) thing about it..there are no solutions so you have to go out yourself and solve these challenges. &amp;#x200B; [https://www.hackingwithswift.com/100/](https://www.hackingwithswift.com/100/) &amp;#x200B; As someone who was stuck in tutorial purgatory just mindlessly copying code..you really need to start writing out you own code. Yes, its painful..but in my opinion the only way to really learn.
Though your explanation for why you need it didn't make a lot of logical or grammatical sense, from my reading it seems to me a much more reasonable method for this would be to live stream on your phone and playback on the iPad, or use ditch all of that and use the iPad camera directly.
AVKit is used for Playing back videos. AVFoundation is used for recording videos. \`\`\` AVCaptureSession\`\`\` is the class you need to be interested. Doing some googling with that will provide you with a tutorial or two for how to make the app you're looking for. It's pretty easy for an experience developer; But I'm not sure where your skills are. So follow a tutorial and you should be golden.
I hope this helps little with your app, this is deprecated code, it is still valid tho, and for sure the warnings will guide you if you want to update, the reason is that the client of this app needs very old devices to run this app. well here it goes: &amp;#x200B; in your viewCOntroller, place a UIView named cameraView, then in the code: &amp;#x200B; `import AVFoundation` `import AVKit` `var captureSession = AVCaptureSession()` `var connection = AVCaptureConnection()` `var sessionOutput = AVCaptureStillImageOutput()` `var previewLayer = AVCaptureVideoPreviewLayer()` `var captureDevice: AVCaptureDevice?` &amp;#x200B; `let videoDevices = AVCaptureDevice.devices(for: AVMediaType(rawValue: convertFromAVMediaType(AVMediaType.video)))` `for device in videoDevices{` `let device = device` `// select your camera` `if device.position == AVCaptureDevice.Position.front {` `captureDevice = device` `break` `}` `}` `captureDevice?.unlockForConfiguration()` `captureDevice?.isWhiteBalanceModeSupported(.continuousAutoWhiteBalance)` &amp;#x200B; `override func viewDidLayoutSubviews() {` `previewLayer.frame = cameraView.frame` `}` &amp;#x200B; `do {` `try captureDevice?.lockForConfiguration()` `if let camera = captureDevice {` `let input = try AVCaptureDeviceInput(device: camera)` `if captureSession.canAddInput(input) {` `captureSession.addInput(input)` `captureSession.startRunning()` `captureSession.addOutput(sessionOutput)` `previewLayer = AVCaptureVideoPreviewLayer(session: captureSession)` `previewLayer.videoGravity = AVLayerVideoGravity(rawValue: convertFromAVLayerVideoGravity(AVLayerVideoGravity.resizeAspectFill))` `previewLayer.connection!.videoOrientation = AVCaptureVideoOrientation.portrait` `previewLayer.position = CGPoint(x: self.cameraView.frame.width / 2, y: self.cameraView.frame.height / 2)` `cameraView.layer.addSublayer(previewLayer)` `sessionOutput.connection(with: AVMediaType(rawValue: convertFromAVMediaType(AVMediaType.video)))` `}` `}` `}`
To answer your question about a failable initializer... A failable initializer means that it may not return a value. For example: `Double(string: "12.3") // Returns a double value 12.3` `Double(string: "abc") // What would a double value for "abc" be? That doesn't make sense, so this returns \`nil\`` &amp;#x200B; Further reading: [https://developer.apple.com/swift/blog/?id=17](https://developer.apple.com/swift/blog/?id=17)
Can‚Äôt you assign the text to a variable and then conditionally apply position if it‚Äôs not nil?
Interesting question. I would recommend just thinking of a simple idea like a photo upload app or just a text app where you can learn concepts like logins, table views and the like. Start simple and build up to a cool complex one. Don‚Äôt start with animations. Animations will do nothing if the rest of your app is clunky. Start with a very very basic layout and build from there. I Would recommend using firebase initially for storage. It‚Äôs almost plug and play so you don‚Äôt have to figure out backend development as well.
That‚Äôs exactly what I want to do too, since it‚Äôs a personal project I will use SwiftUI from the start. Sooner or later I would have to move to SwiftUI and personally I can accept neglecting user not yet on iOS 13 but getting the app ready for the future from the start
Yeah, I'm really looking forward to it. Haven't started yet, cuz I've got a new Mac Mini on the way (arrives Wednesday, yea!) and I'll wait for it before I get up and running in SwiftUI
Yeah but those are also some of the biggest selling points of it! Everything in language design is a trade-off haha.
I can't try it at the moment, but maybe something like: .position( position ?? CGPoint.zero )
What I did was to read the
The exact error at hand: expert.!isBlocked doesn't work because ... of what the error describes. What you're trying to do has not been defined before. .! is not lexically written to be understood. There's no way to describe what you want to do but if you want to look into a lot later, you'd like to learn about operator overloading, which is similar. The more complete idea: Basically the idea is that "expert" is a class/struct/object that you should reference. so the booleans isBlocked and such are part of the object that you are referencing. So isBlocked is no longer on its own and you should treat expert as containing the property isBlocked. What you are attempting to do is still modify isBlocking alone as if it were standalone, even though that is not longer valid idea. Some things that might help you get a better idea behind what you're trying to do: is the idea of dot syntax. I would suggest: https://docs.swift.org/swift-book/LanguageGuide/Methods.html.
Yes she is very good teacher. But I‚Äôm still searching stuff on more advanced topics like app life cycles (how to properly wake my app and/or do stuff in background without app getting terminated by system,...), and so on.
GCD is nice but it's nothing like coroutines
Which udemy course did you take? I‚Äôm currently working through Angela Yu‚Äôs course and it‚Äôs helping a lot.
[removed]
Seconded, it was a great course. Super clean code too, which is a nice reference to look to.
That did it, thanks!
That did it! I find it elegant that you *reduce* into an array, and then *map* does the transformation. Saving this into my snippets folder for later usage. I find this answer more elegant than the double flatMap, but I'm actually having a harder time reading it :)
Well what's important is how to structure an application for maximum correctness, scalability and maintainability. This is hard to find in tutorials but I think you should be applying general programming knowledge like the SOLID principle to your code. Especially making sure that a class or a function only does one thing is very important. My code is just a bunch of 50 lines files with some peaking at 200. Every class is pretty obvious to programmers of any skill level in what it does. If you want to understand how to chop up your application in such small units established patterns like VIPER\* can help you get an idea. But there are still many places where that pattern doesn't apply like AppDelegate. Regularly I find AppDelegates that are over 500 lines with all kinds of frameworks loading, push notifications set up and what not. The job of the AppDelegate is to DELEGATE what needs to be done on certain application events, not to do the actual work.
https://stackoverflow.com/a/41223642/1311272
I feel that it is with tasks like these that programming does feel like elegant art. The flatmap answer is fine as well, but I feel it is less descriptive of the intent in this case.
You should make apps yourself. I was in your situation a year ago, and I found that making apps you're passionate about is a great way to improve. Ideas for apps: * Recipe book * To do app * Tip calculator * Foto sharing app (Firebase?) * Chat app (Firebase?)
Second that 100%, best way to learn
Being able to give some specifications and metadata to a package through pod spec file is one of them
All that information can be found next to the sourcecode on github (Or wherever the code/prepackaged binary comes from). Never heard of anyone who looked at the podspec file unless Cocoapods failed to set up the project properly.
Fair enough. I won‚Äôt argue. Cocoapods is quite popular and might be for a reason. If Carthage is fine for your needs and usage that‚Äôs great.
You need to get a mac.
i finished a shitty turkish one because im from turkey. but after you guys' suggestions, I also started Angela Yu's course. It seems amazing so far
This will render the view at y = 0 and x = 0, I want it to be centered :(, thanks
Do you use git? If not, start. I prefer bitbucket, github is more popular, both are free for your needs. Then you can work with other devs and let them see/review your code. That‚Äôs the best power-up: not working alone. For actual things to learn: from what you say you want to do, I recommend checking out Firebase. They have a great CodeLab that walks through the process of building a pretty good yelp-type app and I think they support everything you mentioned you want to learn. It is opinionated with a bis towards their own service but it is a good way to learn a real world (ish) app without building your own servers.
What are you trying to achieve exactly? Are you primarily seeking ways to handle concurrency or are you more focused on mimicking kotlin coroutines? I could help with the former, but i‚Äôm not familiar with how kotlin coroutines work. In either case, a concrete example would help
You should check out James Allan Pure Swift channel on Youtube. That'll take you to the next level.
Good luck!
If those view controllers share a parent VC you can use it to transfer data among them by using delegates. Another option is to use a singleton to act as a link among your VCs. I would advice on adding a model layer to your app that strictly manages your values so working with your VCs can get a lot easier.
Take a look at delegates, this would be the best way to do this. Just remember the delegate properties should be declared as weak in the second VC. I‚Äôm on mobile now so I can‚Äôt help you with code, but that‚Äôs the way to go. You will need to set the delegate in the prepareForSegue method, so check that as well.
Thanks! I'll check into it.
Adding a model layer is the correct approach to the problem he described. But as you mentioned , there are many options to transfer data between controllers.
Speaking of adding a model layer, here's code for a problem very similar to yours. https://code.tutsplus.com/tutorials/the-right-way-to-share-state-between-swift-view-controllers--cms-28474 After this I would recommend you read on Singletons; because you need to understand them if you are to be a Swift developer.
No I did not delete them
Since I am using a table view controller, do I need to the delegate ? I did not delete.m the override function from the data source. I may be confuse.
So is a model controller a class that is used to manage other view controllers?
 This situation looks just like mine. I'll try it out. Thank you.
I have a MacBook Pro üôÇ
It's more like a central data provider. Your VCs must act independent of the model controller but they all fetch data from it. The link provided by lomelyo will give you a great insight on the options you have as every pattern has its pros and cons.
Please try to be right before you attempt to correct people. https://www.grammarly.com/blog/learned-learnt/
I see. Thanks
Dependency injection perhaps? [read](https://www.swiftbysundell.com/posts/different-flavors-of-dependency-injection-in-swift)
No need it sets it for you - but we did t know that based on the info. I would put a break in the network success block and make sure businesses is getting populated. Then a break in cellforrowat to see it get called.
Again and again I recommend the free and excellent podcasts from Stanford in iTunes U
You can literally type the title of your post into google and get hundreds of explanations. What result do you think would be more accurate than what you got?
I couldn't get the thumbnail pictures to show up on the left of each room but once you go into the details page of each room, it does zoom in and out. I can also delete and move a room on the list. The Add Room button does also add an extra room.
SPM has been around since 2015. It's supported macOS since the beginning, and Carthage is still dominant. More than half the dependencies of my main app don't support SPM, and I'm not inclined to fork them to add it. That'd be extra work for me, and no gain for any of my users. SPM is one of those technologies that I know I really should learn, so every year I go see how it's improved, and every year it's still not workable for my use cases. Carthage wasn't created out of any sense of antagonism with Apple. It was created because Apple didn't have anything usable for us. Maybe this is the SPM release that's finally good enough. Maybe next year, my favorite frameworks will start adding support for it. I would be delighted if that finally happens, but I'm not holding my breath.
Thanks a lot for your answer. How is your process now? I mean what kind of things you can do or can you make advanced kind of apps?
Not really sure what you mean, but in general when you have a backend: 1. Make sure your data structures (schema) doesn't change or if it does, that it's backwards compatible 2. Write unit tests on the front end to make sure your API don't break between updates or schema changes 3. Make sure your security settings are working properly
I‚Äôve just started Angela‚Äôs course and it seems great so far. Thanks a lot!
Hello! Thanks for following my tutorials! In the beginning it'll feel a lot like you're just copying because... that's actually what you're doing! It's ok that you don't know the keywords, syntax or methods that I'm showing you but what's the KEY THING is that you need to understand the reasoning and WHY you're doing the things (and i hope that i've done a good job of explaining that as i go along). What you need to do now is just follow more app tutorials.. soon you're going to build a pool of knowledge and experience that you can draw from to create your own project. Your first app where you don't follow any tutorial will count on your experiences and techniques that you learned from following tutorials up to that point. Try following my 28 day lesson plan here: [https://codewithchris.com/ios-app-development/](https://codewithchris.com/ios-app-development/) And if you ever have any questions or need help, we have a super helpful community where I can hangout and answer questions. You can find the link to the community at the footer of my site. Thanks and feel free to reach out for anything! My passion is brining non-coders into the app development world!
Something you can consider is the Hacking with Swift‚Äôs app for learning swift made by Paul Hudson himself is actually open source on Github! It‚Äôs called unwrapped perhaps pull that project down and play around with it and contribute to the app
Thanks a lot man. I‚Äôll check it out
True, but it does require frameworks to add a Swift package definition file to their project. Most of the Objective-C frameworks I use haven't done that. In comparison, Carthage doesn't require any Carthage-specific junk. If you can clone the repo and build with default settings and get a framework, it'll work with Carthage.
This weekend I have been preparing a [version2](https://github.com/radiantkit/radiantforms-ios) fork of [my old project](https://github.com/neoneye/SwiftyFORM) for making forms in iOS. I have been relearning all about deploying podspec. I have also been getting Travis CI working for the new project. And I have been experimenting with generating documentation using Jazzy. It's in a beta version. Please let me know about your feedback.
Curious, can you post a code snippet of the code in your cellForRowAt function, that you‚Äôre using to try and load thumbnails? Lets get it working.
If you want it to be centered then initialize the position so that it's centered in the view. The reason it's zero when you use what /u/chriswaco suggested is because position doesn't have a value so it defaults to .zero. So you gotta give position a value in the body *first* before using it or else it'll always default to .zero And I'm not all too familiar with SwiftUI outside of that tutorial they posted but it looks like your'e trying to bind the position to the view. So wouldn't you need to use `$position` instead of just `position` so that as the position of the view changes it'll update the position property you've created on the view?
Do you mean in SwiftUI? If so see Apple‚Äôs official tutorials on how to load and show thumbnails.
I'm not using cellForRowAt. The UI has been entirely implemented using SwiftUI. Are you familiar with SwiftUI? There is no main.storyboard anymore.
Not as familiar but familiar enough. Post it
Nice project you have there. Seems well organized.
You think I didn‚Äôt google it? Wow. I didn‚Äôt get any helpful info. Here the first comment told me exactly what I needed
Can you send me the link. I couldn't find it.
Cool. Are you going to share the source code?
Were you able to install Catalina and XCode 11? It won't work on Mojave.
It‚Äôll work on Mojave just not with the live preview. You still need Xcode 11.
Can you provide a link to the github repo? I will download the project and run it myself. I have Catalina and Xcode installed on my machine.
Can you provide a github link to your project. I can download your source code and run it. I have Catalina and XCode 11 installed on my machine.
Do you have a link to your github repo. I can download your source code and try to run it. I have Catalina and XCode 11 installed and I've had not problems so far.
Ok, here's a contrived example in Kotlin of calling one endpoint with a timeout and fallback back to another if there is an error. Try not to judge my creativity so hard. The thing that is nice about coroutines is being able to represent the async logic as though it were sync. ```kotlin suspend fun networkCall1(): String { } suspend fun networkCall2(): String { } suspend fun logic(): String { return try { withTimeout(2000) { networkCall1() } } catch (e: Exception) { networkCall2() } } ```
i tried to compile most of feature into a single app. hers link https://github.com/akashkahalkar/AttemptAtSwiftUI
So‚Ä¶ is that a question or just an FYI?
They released an update since then and it fixed the issue :)
Yea i got Xcode 11 working on Mojave with no preview.
I just ran your code and noticed a couple of issues. It seems to run fine in the simulator but you deleted all the code that lets you preview the SwiftUI code. Not sure why you did that. You also have a storyboard which doesn't seem to make sense.
hi, sorry i did not mentioned that anywhere. actually i'm still on mojave and the preview code was of no use so just for sake of keeping it clean i removed the preview code. i'll keep this note for next time. updating readme for now.
Here is another. I'm not sure how people are returning results from handlers in Swift. I see some stuff online suggesting you use a callback (which I really don't want to do). Look at this in Kotlin. typealias Handler = suspend (stuff: String) -&gt; String class Manager { val stuff: String = "..." suspend fun doWork(handler: Handler) { // If this was a callback instead, how should I wait for the response here? val result = handler(stuff) // other stuff... } } fun main() { val manager = Manager() launch { manager.doWork { stuff -&gt; myNetworkCall(stuff) } } } It isn't really about "can I do this at all in Swift", its about the abstractions I have access to. I could certainly "do" it in C as well.
Great answer
I think it best for you to install Catalina. I got a dual boot with Mojave and Catalina and XCode 11 on the Catalina and it is working really well for me. The preview feature is absolutely necessary as the app startup is instantaneous compared to the simulator. Also you don't need the storyboard in your code. Not sure why you have it.
You need to configure your computer for dual boot with Mojave and Catalina. SwiftUI is all about preview and not using the simulator. Running in preview mode is instantaneous with very little resource overhead from your computer.
The binding is working, the thing is, if I set a value like x= 200 y= 200 it won't be dynamic for every screen size, with this code I can drag the view using panGesture, and everytime the position value changes the view position changes, I'm just trying to initialize it in the middle of the screen, and .zero is not working. Thanks for the reply.
The video goes into detail about writing the preview code so it would be pointless just to run it on Mojave. The simulator won't be able to run the other UI views that are created using SwiftUI.
I would like to know how to initialize it with a value that keeps view in the center, or how to not call this function if the value is nil.
Question, I just wanted to know people‚Äôs experiences with it
I didn't see video 204 but do you mean they had an app which you recreated (and showed in your pictures?)
I didn't upload all the pictures but suffice it to say that the video goes into detail about using the preview mode and modifying the preview code so just running it on the simulator on Mojave totally misses the point!
Not sure if this is the type of abstraction you're looking for but: `class Manager {` `static func getData(from url: URL, completion: @escaping (Data?, URLResponse?, Error?) -&gt; ()) {` `URLSession.shared.dataTask(with: url, completionHandler: completion).resume()` `}` `}` `func main() {` `var resultData: Data?` `Manager.getData(from: URL(string: "https://apple.com")!) { (data, response, error) in` `resultData = data` `}` `}`
It‚Äôs not -all- about previewing. The declarative syntax and ease of boilerplate code (and there‚Äôs a whole lot of it) is what‚Äôs very nice about SwiftUI. The previewing is just the icing on the cake
The becomeFirstResponder method can do this for you.
Would be nice if I could call like .position(position) ?? .position()
yes it will. Simulator is perfectly happen to render a full Swift UI app using the 13.0 sdk. They only thing that doesn't work is the live preview in Xcode.
If running the simulator from Xcode 11, you should be able to use it with any view but you need to wire it up correctly just like with any app. I‚Äôm running Catalina, but I use the simulator to do more in-depth testing than the preview can give me.
if you've watched the video, you'll know that the developer writes code for 3 separate views that are only viewable on preview mode. You won't be able to see it on the simulator.
Modulus division for the index you are accessing is the simplest way
ups...I guess everyone tends to make mistakes from time to time üòÖ
sure i'll try that.
I have. And I disagree. It‚Äôs nice to see, but isn‚Äôt absolutely necessary either. I still need to check on actual hardware. Simulators, while getting better, can‚Äôt simulate everything.
Thanks for the feedback! I should have mentioned that PickerKit does not currently have support for landscape, but it‚Äôs coming soon. Yup, I have used [SwiftKit](https://github.com/SvenTiigi/SwiftKit), it was quite tedious to add everything by hand, so i have stumbled upon a few repos that generate everything.
Thanks!
I'm not sure what the definition of advanced is in this case but I think I can make almost any type of app if I got enough time (some larger apps would practically require teams). If you know how to structure projects and you are able to read documentation you can build anything you want. Structuring project is something you learn when working on apps, think about mvc, networking strategies, lay out views logically, etc. I learned to _use_ docs by avoiding tutorials/so for everything. Look at the documentation first and then go to the internet. Nearly everything can be found in the docs and they're written by people who build the frameworks and this is not necessarily true for tutorials and most not so certainly for stack overflow. Try it yourself.
https://developer.apple.com/tutorials/swiftui/
I'm not sure how i can use this with SwiftUI
Your code above won't work. The reason is that while `DispatchQueue.main.asyncAfter` will execute the closure in 10 seconds, it will return immediately. So what you'll have is that for the first 10 seconds, nothing will happen, and then you'll see them get executed super fast. In fact, that might not even happen, you will probably run out of memory before then. So I'd do something like this: func showNextImage(images: [UIImage], currentIndex: Int, after: Int) { DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(after), execute: { let nextIndex = (currentIndex + 1) % images.count let nextImage = images[nextIndex] let currentImage = images[currentIndex] let crossFade:CABasicAnimation = CABasicAnimation(keyPath: "contents"); crossFade.duration = 2.0; crossFade.fromValue = currentImage.cgImage; crossFade.toValue = nextImage.cgImage; messagesView.layer.add(crossFade, forKey:"animateContents"); //THIS HERE IS THE IMPORTANT PART showNextImage(images: images, currentIndex: nextIndex, after: after) }) } and then just call it with showNextImage(images: messagesImage, currentIndex: 0, after: 10) The important thing here is that you're now calling `showNextImage` recursively, and it gets called **after** the 10 second wait. Something to note here is that this is (as you asked) infinite. There's no escape condition here and this would (I think) run forever even after you leave the screen that shows this. Make sure you add an escape condition.
I think at the moment this isn't directly possible in SwiftUI... Basically you'll have to drop down to UIKit, encapsulate that in a SwiftUI coordinator and go from there... This answer on stack overflow may be useful: https://stackoverflow.com/questions/56507839/how-to-make-textfield-become-first-responder Using that code you can make it happen on the first updateUIView call (which is what the sample code does)... or you can set it up as a binding/state you can call in your .onAppear(perform: (() -&gt; Void)?) modifier. Hope this helps.
^ this is why it‚Äôs important to write UI in code. It‚Äôs not pointless, it‚Äôs code, and it works perfectly well without Catalina.
I agree with u/0hmyscience in that your code probably won't run because your while loop will schedule thousands if not more CoreAnimationAnimations before your device even gets the time to use them. Because you're only doing animations. I would suggest staying in CoreAnimation and using a CAAnimationGroup to execute and repeat your transitions. This allows you to cancel it like you would any normal core animation you would add to layers. Consider this (it's a little verbose with variable to help): private func startAnimations() { let imageNames = ["dog","cat","horse","parrot"] let images = imageNames.map { UIImage(named: $0)! } let imageDuration: TimeInterval = 2.0 var allAnimations = [CABasicAnimation]() for index in 0..&lt;images.count { let currentImage = images[index] let nextImage = images[(index + 1) % images.count] let startTime = imageDuration * TimeInterval(index) let animation = CABasicAnimation(keyPath: "contents") animation.duration = imageDuration animation.fromValue = currentImage.cgImage; animation.toValue = nextImage.cgImage; animation.beginTime = startTime allAnimations.append(animation) } let group = CAAnimationGroup() group.repeatCount = .infinity group.duration = imageDuration * TimeInterval(images.count) group.animations = allAnimations self.view.layer.add(group, forKey: "crossAnimation") }
Can you post a little more? Maybe your \`init\`?
There is no init. :) class MapViewController: UIViewController { let locationManager = CLLocationManager() var mapView: MKMapView! let bornLat: Float = 42.2506 let bornLong: Float = -72.0942 let bornCoordinate = CLLocationCoordinate2D(latitude: bornLat, longitude: bornLong) let bornRegion = MKCoordinateRegion(center: bornCoordinate, latitudinalMeters: 10000, longitudinalMeters: 10000) I did try making an init() but it said I needed init(coder:)... Even still, I don't see why I'd need an init...
I get a browser error saying your link is invalid. Just post the entire link without shortening it.
Keyboard handling and focus seem to be a big missing part with SwiftUI, so hopefully we'll see them in upcoming betas. Definitely an issue if we don't seem them soon.
https://stackoverflow.com/questions/27541145/how-to-generate-a-random-number-in-swift-without-repeating-the-previous-random-n I‚Äôd also use a loop to generate your strings instead of manually writing them all out.
You can‚Äôt use bornLat and bornLong in bornCoordinate, since they aren‚Äôt available at that time. You can just use float values in coordinate.
Wow. It seems like you should be able to do that. I don't think Java or Python would have any problem doing something like that. Thanks.
You are welcome. I think the issue here is that some properties are initialized faster, some later, so this is why you can‚Äôt rely that there will be real values in your coordinate, maybe its init will happen earlier then borlLat and bornLon.
understood.
I don't see anything about the thumbnails specifically.
The problem is that the `let` attributes on this instance are assigned during the initialization, so the object is not yet completely initialized. In your `bornCoordinate`, you‚Äôre accessing that other attributes through an implied `self`, so `CLLocationCoordinate2D(latitude: self.borLat, longitude: bornLong)`. Since you can‚Äôt access self until after initialization is complete, this won‚Äôt compile. There are two solutions I can thing of right away, depending on your intent. If you just want to use `bornLong` and `bornLat` as initial values, you can move them outside of the object, but in the same file. (I would usually mark these as `private`.) When you do that, they are no longer part of the object and can be used safely in the initialization of `bornCoordinate`. The other option is to make `bornCoordinate` a computed attribute, like this: `var bornCoordinate: CLLocationCoordinate2D { return CLLocationCoordinate2D(latitude: bornLat, longitude: bornLong) }` With this, `bornCoordinate` is read only and computed on the fly from `bornLat` and `bornLong` every time it‚Äôs accessed. With everything as a `let`, these accomplish the same thing. The real difference is when you need `bornLat` and `bornLong` to be mutable, in which case the second method should work.
So helpful. Thank you so much.
There's a lot of stuff that is missing from Beta 1. Hopefully the next beta that drops will have a solution to some of this.
Looks like \`bornRegion\` is being declared within the initializer definition, which means it is only available while execution is also inside that initializer. &amp;#x200B; If you want it to be available to other functions that are part of the same class you'll need to move its declaration to a higher scope, perhaps the below \`let bornLong = ....\` line. The problem however is that you are using other instance variables (bornLat, bornLong) to create 'bornRegion', which is why I presume you are declaring it in the initializer. These properties must be defined before 'bornRegion' can be created. A chicken and egg scenario. &amp;#x200B; Two concepts you should look into that will help you here: \- 'bornLat' and 'bornLong\` could be redefined as \`static\` properties since, as presently used, are intrinsic to what a \`MapViewController\` is and will never change. Making this change would then enable you to make 'bornCoordinate' a static property, which then opens up the door to make 'bornRegion' a static property, which would solve your problem. &amp;#x200B; \- Even if 'bornLat' &amp; 'bornLong' were not static, you could utilize the concept of "lazy initialization" to wait to create 'bornRegion' until it's used for the first time. The advantage here is that you can access other non-static instance properties as part of the creation of 'bornRegion' since we are guaranteed it won't happen until after your \`MapViewController\` instance is fully created. This would look like moving 'bornRegion' outside of the init and using 'lazy var' instead of 'let'. &amp;#x200B; Ultimately, the "right" solution IMO is to have your 'MapViewController' be flexible and variable. Maybe these coordinates represent your birthplace, but you'd want it to potentially represent any person's birthplace. If it were me, I'd have 'bornLat' &amp; 'bornLong' be variables, not let constants. Maybe the initializer, instead of taking no arguments, would instead require the caller include 'bornLat' &amp; 'bornLong'. Then I would have 'bornRegion' be a \`var\` that I fill in during initialization using these provided values. &amp;#x200B; Good luck.
The last option assumes you are not using interface builder, which may be the case. If you are, it definitely changes the ballgame since you can't provide the lat and long values up front (yet. I understand this may be changing in the next Xcode). This makes things harder in my opinion, which is one reason I try not to use interface builder. To keep your view controller variable with respect to the location, and use interface builder, you'll probably want to provide "dummy" values for lat and long. Make them 'var' and set them to 0.0 (or whatever really) initially and then change them to the right values as soon as possible.
Thank you, sir.
Not a dumb question! Random numbers are one of those abstract concepts that seem so simple to humans, but are surprisingly tricky to realize using computers. &amp;#x200B; Like, what is a random number? How can we use ones and zeros to make one on a machine that requires completely premeditated values? &amp;#x200B; The answer is that some people way smarter than me figured out some sort of mathematical formula where if you give it a number, say 1, or 2, or 3, and a range of values, say 1 through 100, 1 through 1000 etc, then you get radically different results, effectively giving us the illusion of randomness. &amp;#x200B; You could write this concept as a Swift function like this: &amp;#x200B; func randomNumber(seed: Int, min: Int, Max: Int) -&gt; Int {} &amp;#x200B; min and max are easy enough I hope. And the seed is just the number fed to the complex formula that guarantees us the result is "random". Ultimately though, this is a deterministic formula, and supplying the same parameters will yield the exact same results. Some algorithms get around this by pulling some hard to predict value like the exact millisecond you ask for the number. This appears to us as random, so we accept the "randomness" of the result, even though it's not random. If you could have guaranteed the exact millisecond you clicked the button, you could have predicted the exact result! &amp;#x200B; So that's the idea. I guess what you are looking for is a one more notch up in difficulty. You want to take an array of values, like episode numbers, and randomly select from them until they're all gone, meaning no repeats. &amp;#x200B; Cool idea: here's one way to do it: &amp;#x200B; \- Instead of a \`let\` make your "Ep" array a var. This means of course you can add/remove values as the program runs. \- Create a second "running" array called "randomizedEpisodeNumbers" or something like that and initialize it to \`\[\]\`, an empty array. \- Create a while loop that says "while the ep array is not empty, continue doing what I say". \- The "what I say" in the while loop is to figure out the count of "Ep", aka, how many values are left in it. Then you can do "arc4Random()" and feed it the count so that you get a random index representing your next episode to watch. \- Then using that index, remove the value at that index of "Ep" and add it to the "randomizedEpisodeNumbers" array. \- Continue until "Ep" is empty. &amp;#x200B; Then you're done! "randomizedEpisodeNumbers" is your randomized list. Note that this is a "destructive" way of doing this. Meaning, your ordered list of episode numbers is gone forever until you started the program again. If the order was important for you to maintain, then maybe you'd keep it a \`let\` and create a \`var\` copy of it each time you create the random version of the list. &amp;#x200B; Hope this helps! &amp;#x200B; \- Good luck.
Swift arrays have a shuffle() method. No need to implement your own.
You are describing a pretty bizarre order of events! I sure would like to see the code that allows for that to happen. &amp;#x200B; @leocnc is right in that if you put the two function calls on different threads, you would no longer be able to guarantee which one finished first. But, also, you would have to work pretty hard to make that set of circumstances a reality. &amp;#x200B; I'm imagining two line of code, like: let filteredDictionaries = arrayOfDictionaries.filter { /\* filter criteria \*/ } let dictionariesWithAppendage = filteredDictionaries.append(newDictionary) &amp;#x200B; To achieve what you're describing there would have to be other things happening in between - or maybe you're calling some other filter method that is somehow asynchronous? &amp;#x200B; Bottom line, this is tough to answer without more context.
I believe no URL shorteners is one is the rules of the sub, as well.
Others have explained _why_ you can't do it, but there are a couple easy ways around it: 1. Declare `bornCoordinate` as a `lazy var`. 2. Make it a computed property, i.e. var bornCoordinate: CLLocationCoordinate2D { return CLLocationCoordinate2D(latitude: bornLat, longitude: bornLong) } Oh, and `bornLat` and `bornLong` have to be `CLLocationDegrees` (i.e. `Double`s), but you probably figured this out already.
I sure did. Is there a reason to make them CLLocationDegrees instead of doubles? I noticed some of the tutorials using that instead of Doubles and thought that maybe it was the more professional way to do it.
Can you be clear? I'm getting crashes when I present a new view with the @EnvironmentObject wrapper to the same object as my parent view. Yet when you past the environmentObject it works? &amp;#x200B; PresentationButton( Image(systemName: "line.horizontal.3.decrease.circle") .font(.title), destination: filterView().environmentObject(apiManager)),
I would make it a private(set) lazy var. Then it gets computer once the first time it‚Äôs needed, which will be sometime after the class is initialized, and then it‚Äôs stored forever. And from any outside scope, it‚Äôs treated as a let.
You could keep all three as let constants, but initialize them in an initializer. &amp;#x200B; `init() {` `let bornLat = #` `let bornLong = #` `self.bornLat = bornLat` `self.bornLong = bornLong` `self.bornCoordinate = calculationInvolving(bornLat, bornLong)` `}`
To u/jaylyerly sorry friend, I meant this to be top level.
BTW--I think the non-functional version is the most readable: var result = [(test:Test, method:Method)]() for test in allTests { for method in test { result.append( (test:test, method: method) ) } }
There are two reasons. Firstly, using CLLocationDegrees is more expressive in that it provides more information about the nature and use of the value (to assist human readers). Secondly, if Apple ever wanted to change the underlying type away from Double, they would just update the CLLocationDegrees type alias to point to the new type. So, code using CLLocationDegrees would update automatically when it was recompiled.
Perfect explanation. Much gratitude to you. :)
`let randomEp = eps.shuffled()[Int.random(in: 0 ..&lt; eps.count]`
As others have said, maybe not the way to do it. But, to answer your question: The conditional should go around the entire Text block (.position is just a chained property). You could use position != nil but I'd probably unwrap it with if let position = position.
Ivanka...?
Try using DecimalNumber (might still be NSDecimalNumber?) to avoid this.
Disallowing this was a deliberate decision in Swift. There's more info here: [https://docs.swift.org/swift-book/LanguageGuide/Initialization.html](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html) in the 'Two-Phase Initialization' section. In class hierarchies other initializers are going to get called after yours to form an initializer chain. If Swift allowed you to use properties too early then it would be difficult to reason about your code because you would have to take into account the effects of every initializer in the chain. In a complex code base this would become a rich source of human error, especially when people start changing stuff.
You definitely need a developer account to get the betas. But I don't think you need to pay to join the developer program as well.
??
That‚Äôs the medium app‚Äôs default way of sharing links. https://medium.com/swift2go/app-groups-as-an-alternative-to-deep-linking-between-your-apps-a8c214c6582a
Posting again with the right link
Haven't used it yet myself, but would the new [XCFramework](https://developer.apple.com/videos/play/wwdc2019/416/) help in this case?
Fabric is going to have to re-compile and re-distribute their framework built for macOS with UIKit. Definitely poke them and ask them to distribute an XCFramework.
https://0.30000000000000004.com/
Doing an element transformation plus an append is a fair indication that you should use flatMap, rather than reduce. See the other comment
Hi all I'm doing my daily work and they keep asking for information that I don't have on my phone and I want to create an app to hold all the data related the longest data is to be like 12... which database should I use??? I though realm should works but all 12 class and for each of them except the last one is the parent class??? Should I build the UI first or the data structure first... I'm learning from a video and the code they use is swift 4.2 and now its updating... but most part works here is like the type list \-&gt;order \-&gt;material \-&gt; description \-&gt;type \-&gt; lot# \-&gt; quantity \-&gt; date \-&gt;page \-&gt; people test \-&gt;before 50C \-&gt;match page# \-&gt;test page# after v \-&gt;result y/n \-&gt;y \-&gt;result \-&gt;n \-&gt;nil \-&gt;after 50C \-&gt;match page# \-&gt;test page# after v \-&gt;result y/n \-&gt;y \-&gt;result \-&gt;n \-&gt;nil &amp;#x200B; Ahhhh, coding is fun but really challenging... thx for any advise Mike
Not possible at the moment. See this post: https://www.reddit.com/r/apple/comments/c0gzf0/clearing_up_misunderstandings_and/
Yes but not sure SwiftUI part. It seemed more like react style building UI elements. ReactiveCocoa just an extension on top of the UIKit. SwiftUI apart from UIKit but you can still work with UIKit elements like MapView or UIViewControllers.
Yeah, PresentationButton didn't share environment with parent view, you have to pass it manually for new PresentationButton. I don't know is it a bug of current beta or not. We have to wait for next Xcode release to understand that.
No, because combine is not open source
Oh where's the fun in that?!?
Yeah but not until iOS 15
UIKit isn't open source as well.
The data dynamically loads into the table. All done in SwiftUI.
I'm not trying to be rude, but what's the point of these threads if you're not posting any code? That's great that you followed the videos, but just posting screenshots of the apps you made aren't helping anybody.
Yes, that's a great idea! That's certainly the most minimal change to the OP's code.
Does SwiftUI run on Linux yet?
I get what you are going after here but just because another language does it doesnt mean it is a great idea. There are different contexts that each language operates and is optimized for. What may be an acceptable pattern in one language might lead to bugs in another context.
That‚Äôs a really good point, especially given that ‚Äúnative‚Äù UI widgets don‚Äôt matter all that much anymore.
While yes, it‚Äôs missing a huge chunk with keyboard handling, there‚Äôs other huge chunks as well. Like collectionviews, swift native navigation, etc. there‚Äôs extreme amounts of stuff that‚Äôs going to change before it‚Äôs ‚Äúfully‚Äù ready if we are to be honest. And those are definitely not coming out at least with the initial ship of iOS 13. So... I mean yea but I wouldn‚Äôt expect all apps to ship it, even if iOS 13 wasn‚Äôt the limiting constraint.
Pagination is what you need. You need to show a few images at a time, instead of show all at once. Kinda like how fb feed, YouTube feed, and all other feeds work.
True but the open source community could clone the tech. It would actually be a good idea as the Linux community could use a well supported system like this. I‚Äôm expecting SwiftUI to eventually have a fairly massive number of coders and that is always a good thing.
I'd build a `showNextImage` method that just switches to the next image (eg., the contents of your `DipatchQueue.main.asyncAfter` block). Then, create a `Timer` that calls your method repeatedly, eg. `timer = Timer.scheduledTimer(withTimeInterval: 5, repeats: true, block: { [weak self] _ in self?.showNextImage() })`. Don't forget to invalidate the timer when you want the animation to stop.
freelancing / contracting is usually more of a senior thing to do I would say. You are better off with junior-mid positions
It looks initially like he‚Äôs trying to unwrap but that‚Äôs not the case here. He‚Äôs trying to apply the Boolean not to the property.
&gt; when a build is started I mean it should clear the pane but I‚Äôm not sure how Xcode will catch errors and warnings before a compilation of the project. (it does try its best to be proactive about any issues)
I tried out modifying a few packages on my device and it was extremely fun. So once you modify the package.swift, then Xcode will automatically download it and link it into your project. No extra work required.
Swift is open source...
I‚Äôm eager to learn why this is. Could you perhaps elaborate on this please?
I disagree. You‚Äôll have to charge less, but you can definitely be a junior freelancer
Except it‚Äôs not good value for money for the client when a junior get stuck on a problem for 3 weeks that a senior can do in half a day?
Start with Upwork and build a reputation there. You‚Äôll have to take on cheap projects at first though
Fair point. But some clients will go with juniors for the price and for the fact that most of the jobs out there are not really that complex.
for sure
And SwiftUI is not...
Hi Chris! You succeded your passion by bringing a non-coder to this great world. To be honest you are one of the best tutors for beginner-level developers I have seen so far. And thanks to your calm and explanatory narrative skill, it makes a lot easier for me to get used to coding and swift. I really appreciate you effort and please keep creating content for us! Kind regards.
Yeah it defiantly is gonna be based on the workload, I‚Äôve seen like 2 contracts in the lower end but very rarely do I see them
&gt;Reply ty sir
I went freelance after 3 years of iOS experience, this advice is based on my experience: \- As a freelancer you build your own street cred by having apps in the store, even if they have no downloads, you'll want your potential clients to see them and try them. In this case your apps are your resume. \- Your apps can be very small projects with key features to let clients know what you can do. Have one with a lot of animations, one with Geolocalization and maps, one with data management, etc. \- Most of the time your clients won't care about your technical abilities as long as you can deliver the product they paid for. So don't be afraid to experiment and try new wild things while developing (if you got the time). \- Pair up with two other guys, a designer and someone to find clients and manage payments. Otherwise you'll end up doing a lot of work unrelated to development which might diminish your work's quality. \- Stay always focused on you current or next project, when fully managing your own time it's very easy to fall off the track. \- As a freelancer you'll have very hard and low times but you'll learn a lot and have a real chance to improve your income. In my opinion every developer should experience this at least for one project.
But combine is
I tried that, I have 5 years of ios experience, they said there's too many people doing the same, so got the boot
Code has been edited, initially some optionals where force unwrapped, but maybe that was confusion from OP.
Missed your reply back then, just saving this here for future reference. I found the chat view had indeed custom DCD classes (I assume that‚Äôs Discord) https://i.imgur.com/fG9O2at.jpg But it‚Äôs only the custom view type I can find in the app. So the whole slide menu is react as far as I can tell, which is impressive I think because it doesn‚Äôt feel sluggish.
thanks. I appreciate it.
Have you tried putting the button like ```swift NavigationView { ... }.navigationBarItems(trailing: NavigationButton(destination: DetailView()) { Text("Show Detail") }) ```
Your struct idea looks good. &amp;#x200B; About your last sentence, I wouldn't store the CGRect. Maybe you can store your paragraph with their respective timestamp. The CGRect is not really part of your "comment | timestamp" relation and it's better if leave that calculation to your View or ViewController at the time of drawing your UI.
Thanks for the reply. It looks like Apple removed navigationView in the new beta. Curses.
I really hate to be this guy, but why exactly are you putting all your buttons manually on a page? Your grid display just calls out for a UICollection view to me. Trying to build individual AutoLayout constraints for all screen sizes is just going to lead to headaches, and heartbreak when a new screen size is released. &amp;#x200B; If you still want to go down the AutoLayout style and you want to have 3 columns of buttons I'd do something like set the center of each button to be 1/3rd of the screens width. Here I've added each button with a centerHorizontally constraint with 0.33, 0, and 1.66 multipliers for the 3 columns. [Imgur Album of examples](https://imgur.com/a/iNqMGW1)
Well I‚Äôve done some digging and found out that [this app](http://timeglassapp.io/) full fills my needs.
Hey, just change the line *people = people\[indexPath.row\]* to *people = self.people\[indexPath.row\]*
You didnt link your so question
Perfect. Thanks. That fixed it. I now get an App Delegate error (Type 'AppDelegate' does not conform to protocol 'UITableViewDataSource'). I assume that's something else that's wrong.
My bad, just fixed it. Thanks for letting me know
He did answer your question tho, you firebase db is just a place you store your images. You need to fetch them with a network call (preferably url session) and then decode the raw data to some array of Structs you want to loop over in your collection view.
So just look at fetching data, decoding data by using codable. This is stuff you need to learn eventually to become a iOS dev.
A single element of "people" should be called a "person" . If you renamed it, you would quickly see the error: your trying to subscript the local variable `person: UserX` instead of the instance property `people: [UserX] `
aah Thanks. I used **let** person: Userx = people\[indexPath.row\] and now it works. Still get an App Delegate does not conform to protocol 'UITableViewDataSource error though.
Why would you buy an outdated guide? Always go for the updated versions :)
You‚Äôre confusing two very different things. Your images are uploaded to Cloud Storage, yet you‚Äôre trying to access them through Firestore, which is a database, not a storage service. Go look at the actual Cloud Storage‚Äôs docs here: https://firebase.google.com/docs/storage/
Beyond the bickering of what libraries/languages are open source, my question is: Why does that matter? And if you're the type of person who thinks it matters: Why are you writing iOS apps? Apple's store restrictions are a much larger concern morally (if you're a Free software adherent) than the fact that particular frameworks are not open source. And if you think that a framework being open source is a guarantor of quality‚Ä¶ well, I don't know what I can say to you about that.
Yeah, that's something else. It sounds like you haven't implemented all of the methods UITableViewDataSource expects to have implemented (I can't see all your code so I don't know what all has been implemented.) XCode can populate those for you if you click the code hint thingy.
or one big sexy stack view ;)
I just didn't understand how I would change his version from static titles, into images. Im pretty novice at this, I get this vernacular but implementation is alluding me. So I was hoping someone had something they could cut and paste me or like a video link. If i used his snippet how would I change it to reference my firebase location and decode all the images? It seems he has the array set but not Im not sure how I would format for images.
Hi! I‚Äôm quite new in swift development. I want to learn about networking(CRUD concept) and json data. Is there any good tutorials with an existing API?
Do you have a good video you could recommend?
I'm still pretty new to Swift. But my initial thought would be to store the Timestamp/Paragraph as an object and build the UI using these objects. Maybe write a private function that takes in a timestamp/paragraph and constructs the UIView object to display on the screen.
Probably. Im not sure, but that is where they are uploaded. Im not trying to have a real time database keeping a bunch of pictures for people, it's just one folder of images thats needs to be displayed in the collectionView when clicked. And they will be changing every week or so via server side app, so I didn't want to have to hard code all the image names in every time I updated the images folder. I prob still am doing this a very backwards way. But like I can upload them fine and my dataReference is where they land. So I was just trying to grab them all from there and display them in my collection view which is currently just a bunch of grey squares for holding purposes. The firebase docs explain how to grab a hardcoded image. &amp;#x200B; How could I make this give me an array instead? &amp;#x200B; // Create a reference to the file you want to download let islandRef = storageRef.child("images/island.jpg") // Download in memory with a maximum allowed size of 1MB (1 \* 1024 \* 1024 bytes) islandRef.getData(maxSize: 1 \* 1024 \* 1024) { data, error in if let error = error { // Uh-oh, an error occurred! } else { // Data for "images/island.jpg" is returned let image = UIImage(data: data!) } }
[https://www.raywenderlich.com/567-urlsession-tutorial-getting-started](https://www.raywenderlich.com/567-urlsession-tutorial-getting-started)
You can fix that by extending your AppDelegte with UITableViewDataSource and setting Tableviewdarasource.delegate = self Although i would not encourage doing these fUnctions in your AppDelegate.
Both are great, no matter which you choose. However Hacking with Swift has a lot more free material online (videos, written tutorials, etc), and Paul updates the content very quickly when new Swift updates come out. The paid books are worth it too, although you should subscribe to his mailing list and maybe wait for them to be discounted, if you like.
I agree 100%. u/twostraws is great at updating all his content in a timely manner. The tutorials and topic discussions are both in depth and concise. Overall, I think hacking with swift is a great resource. That being said, I am an advocate from learning through multiple sources. I don‚Äôt think you can truly form an opinion on the best practice without knowing multiple perspectives. This is why I would still recommend learning form Ray W. Or even something on YouTube like let‚Äôs build that app.
Also, aren‚Äôt those articles all available for free? Why would you pay for it?
There are tons of threads asking the same thing. The content hasn't changed so the advice is pretty much the same: Both are good. Pick the one that fits your learning style the best.
Their courses are great, but if you really want to learn 5.0 then go for your other options.
It's responsibility is to manage how data is stored and accessed. Adding extra responsibilities to it, could make your code more difficult to understand, reuse or have it to be reworked in the future.
I am running iPad pro 2nd gen 12 inch and I‚Äôm running on iOS 13 dev beta 2. Im trying to use learn to code 1 the first one as I‚Äôm just starting to mess with swift. I have restarted iPad and force closed and reopened app but it still does this ant ideas?
 Free &amp; Almost always up-to-date: [https://www.hackingwithswift.com/](https://www.hackingwithswift.com/)
\^ This.
I never get tired of telling people in your shoes to check out Udemy's course by Angela Yu. It is the single most comprehensive course for beginner-iOS-Swift I have found. I have no affiliation at all. It cost between $10 to $20 USD and by the time you are finished, you will feel guilty for not paying more. Good luck!
I would guess it‚Äôs because you‚Äôre running iOS 13 beta and the app likely hasn‚Äôt been updated for 13 yet. That stinks. I hope it gets updated soon, or you downgrade back to 12.3. The learning modules are a lot of fun.
I mean... why are you nesting scroll views?
Trying to achieve a list of vertically scrollable horizontal scroll views, like in the App Store layout etc.
Yep agreed. I used both for the past \~5 months (just started learning Swift too). They're both great resources but Paul has more free stuff and updates his content fast.
r/apple has a great policy of "No posts about bugs in beta software" which I think we should adopt. As Jerry Seinfeld would say, you *found* the bug, but you didn't *report* the bug, and that really is the important half. Being a beta tester isn't about getting cool things early. The point is you're undertaking the task of finding and reporting issues to the appropriate department -- and r/swift is not that place.
That‚Äôs why I was asking if it was something else before I reported it as a bug. I have never used the program before so I had no idea if I was doing something wrong or not.
I‚Äôve had the same issue, while trying to write my own list. To be honest, you don‚Äôt really need the VStack. You can use a ForEach to lay out the cell views and if you want to size them then you can wrap the whole thing in a GeometryReader and use that to apply a width or height to the cell views (only width would be fine in most cases).
Interesting, hadn‚Äôt heard of GeometryReader. Any link to docs?
The [documentation](https://developer.apple.com/documentation/swiftui/geometryreader) is very basic and doesn‚Äôt actually tell you how to use it. I had to figure that out myself.
`GeometryReader` Is barely mentioned in the Landmarks tutorial docs, and it‚Äôs a shame, because it should be used in every view that deals with sizes and dimensions‚Äîin other words, most of them. All it does is take a block that gets passed a `GeometryProxy` object, and all that proxy does is provide the dimensions of the view, but that‚Äôs enough.
Then do a List of HStacks
I‚Äôm more concerned with why the Swift rendering graph is crashing than implementing this specific view. I‚Äôll try that though, thanks!
Yeah I‚Äôm guessing it‚Äôs because scroll views are a bit finicky with the graph. Lists and stacks are scroll views under the hood with some extra funkiness I‚Äôm sure
Maybe the carousel list style is enough for you. Alternatively: Have both instances of the view in the hierarchy and then use a DragGesture and a GeometryReader to manually compute the frames. When the gesture ends, animate to the final position.
The syntax more clearly expresses your intent. Reduce is powerful, but there's a trade off. Because `reduce` can be used to do so many things, simply reading that "oh this code uses `reduce`", doesn't communicate much, just like "oh this code uses a loop". In fact, `reduce` can be used to implement: * `map(_:)` * `flatMap(_:)` * `filter(_:)` * `sorted(_:)` * `reversed()` * `prefix(while:)` / `suffix(while:)`, * `first`/ `first(where:)` * `last` * `count` / `count(where:)` Each of those operations is individually much weaker, but that specificity makes your code instantly recognizable without detailed reading. Compare: let a = [1, 2, 15, 23, 35] let mysteryValue = a.reduce(nil as Int?) { accumulator, element in if 10 &lt; element { return accumulator ?? element } return accumulator } Versus just: let a = [1, 2, 15, 23, 35] let mysteryValue = a.first(where: { 10 &lt; $0 }) Note: the distinction in code length isn't the point. Even if the `first(where:)` code was longer, it would be the better choice, because the written words directly communicate your intent, rather than leaving it up to your readers to *infer* your intent, by playing interpreter in their head. Here's an example of the longer example being better: func countElementsIn&lt;T&gt;(_ nestedArrays: [[T]]) -&gt; Int { return nestedArrays.reduce(0) { $0 + $1.count } } vesus: func countElementsIn&lt;T&gt;(_ nestedArrays: [[T]]) -&gt; Int { return nestedArrays.lazy .map { $0.count } .reduce(0, +) } The first reduce statement was doing a map operation "internally", but the code overall was less recognizable. On the other hand, `.reduce(0, +)` is a much more instantly recognizable idom for summing elements. In this case, you've hit a perfect case for `flatMap`, so just use that: let listcontent2 = allTests.flatMap { test in test.methods.map { ListContent(test: test, method: $0) } }
Yep, I don't think I can store it together as the paragraphs aren't separated (they're in a single UITextView). I think I need to use some sort of ID? This would work if it's in a tableView but as I just dynamically separate the paragraphs I'm not sure how I could link them?
Thank you! I certainly try my best to keep things updated, because I want folks to know that Hacking with Swift links are good to click on ‚Äì they aren't out of date.
Yes, I do have quite a bit on SwiftUI already ‚Äì [six YouTube videos now](https://www.youtube.com/watch?v=VGJBLlfSN-Y), plus the [Swift By Example book online](https://www.hackingwithswift.com/quick-start/swiftui/).
Hello! I write Hacking with Swift, so obviously I think it's rather good :) Some things you might not be aware of: 1. My [100 Days of Swift](https://www.hackingwithswift.com/100) program guides you through Swift and UIKit day by day for free. 2. I have a free iOS app called [Unwrap](https://www.hackingwithswift.com/unwrap) that lets you learn right on your iPhone and iPad. 3. I have over 600 searchable answers in my [Swift Knowledge Base](https://www.hackingwithswift.com/example-code/) 4. I already have lots of [sample code for SwiftUI](https://www.hackingwithswift.com/quick-start/swiftui/) All that content is free online, and all updated for Swift 5.0 ‚Äì enjoy!
Then I think that the character count is your way to go. timestamp02 starts at 120 characters and so on.
Interesting! Thanks :) Didn't think about that. My only concern is because it's editable if someone wrote something in between the paragraphs all the character counts would be out... Any thoughts?
Sure! You can count the characters added or subtracted between two timestamps. Of course you'll need to take some other special rules into consideration but that's the general idea. Keep in mind that you'll always have control over the user input so they can't do stuff without you knowing.
Okay, So I guess I've now narrowed it down to 2 options thanks to your help. &amp;#x200B; 1.Save Timestamp button + Character count ID \- This might make it hard to redraw all CGrect's on open as I would have to calculate based on Character count ID and if a paragraph moves I would have to update every single object...(just worried with a-lot of paragraphs how long this would take). 2. Save Timestamp button + Character count ID + CGRect \- I can use the CGRect to draw every object without re-calculating on open THEN \- When text is edited I would just need a way to check if it's a new paragraph or not and if it is then create a timestamp if not then leave it. **EDIT: AHHHHHH! Just realised this also wouldn't work as when I update the views I would still need someway to hold the buttons as the array is replaced on every new action. I added the code I use for all of this in the post if that helps in any way!** &amp;#x200B; I feel like the second option is wrong as it uses the object to make the UI but am not sure how the first option would work! haha. What do you think? Am I just understanding this wrong lol
Do you have any samples for a direct authorization and call to google sheets API?
Is there a video though for images, not songs? I cant seem to find a good one
Store only view models for visible cells.
&gt; r/apple has a great policy of "No posts about bugs in beta software" which I think we should adopt. No. Apple itself *used to* have this as a policy. I just tried to change a font in a button in Xcode 11 and wasted an hour of my life looking for docs that explain how to select an already installed font for a UI item in the storyboard. No docs. No change listed in the Xcode release notes. Nothing. A fucking font. An already installed font. The font menu states that no fonts are installed and is disabled in the storyboard once you select custom for an item's font. And if you care to display the installed fonts by code, it lists all 300+. We had BETTER allow questions about beta software or otherwise it's a waste of people's time and Apple no longer has a policy that it is against the rules.
If the number of buttons doesn‚Äôt change, which it looks like, a vertical stack view with 4 horizontals in it would be perfect.
Mastering swift is a good book also check out hacking with swift there are some good ebooks. Lastly buy some courses on udemy.
Haven't thought about Objective-C but I'd let it to live only inside UIKit or other Apple platforms. Software should be rewritten to use Swift or die slowly with Objective-C. I worked on corporate legacy projects being 100% Objective-C still in 2016-2017. Never.Again.
Could you tell me which are those dependencies without SPM support?
In my opinion, complete the projects from CS193p (Stanford). All the materials are available for free. The course length is far less than 6 months. The only prerequisite is CS106 which is object oriented programming. So before you can even start, you need to complete one course in object oriented programming: [http://web.stanford.edu/class/cs106b/lectures.shtml](http://web.stanford.edu/class/cs106b/lectures.shtml) Everything is free. Good luck!
This is a great comment and thank you for it. I especially liked the countElementsIn example. In your post you say that reduce indicates a loop. What would you say a flatmap indicates? I ask this because I learned previously that flatmap indicates a transformation in a context (functor transformation), but I tried avoiding it because I did not see a functor in this example. Thank you in advance.
What? For iOS as well? How are we supposed to do navigation?
4.2 is seriously outdated, don't waste your time
Definitely not if you need to support iOS versions below 13. Also, RxSwift provides an uniform way of dealing with GCD/NSOperation/KVO/Delegates/DataSources, which is convenient on its own. Plus, there are plenty of RxSwift wrappers for Apple and 3rd party libraries out there.
I agree, discussing issues helps people find workarounds. This might be less important in an OS update where you can downgrade, but for a lot of us we are trying to get up to speed in our profession or area of study. Telling people not to discuss beta issues - when there might be available workarounds and knowledgeable beta users here - is a terrible idea.
Z/-as rf grv r.
I would recommend 100 days of swift ([https://www.hackingwithswift.com/100/](https://www.hackingwithswift.com/100/)) by u/twostraws
Hey, I dont think your gonna get any help by posting a link to your app, this isnt a place for apps this is a place for code. If you want help adding a search functionality, I would suggest describing your model, and maybe showing some code you have attempted to use to search through your model.
Thanks, but then I get error Redundant conformance of 'homepage' to protocol 'UITableViewDataSource' with the extension.
Thanks. The hint thingy wants to make the below in AppDelegate: func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { &lt;#code#&gt; } and func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { &lt;#code#&gt; } I don't think that is right.
Thank you!
&gt; And how do you recommend I go about a daily schedule to ensure at the 6 month mark I know enough to code my ideas, at least to the prototype stage? 1. https://azeria-labs.com/paradox-of-choice/ 2. https://azeria-labs.com/the-importance-of-deep-work-the-30-hour-method-for-learning-a-new-skill/ 3. https://azeria-labs.com/the-process-of-mastering-a-skill/ There's a bit of woo in there, but it's mostly very sound advice.
Can we see some code please? Much easier to help that way!
Just MacOS.
I've had the ray wenderlich when just learning and imo his beginner videos aren't very good. The more intermediate stuff is fine but a lot of it is outdated and the instructor is always different so the teaching style is always different too. This was more annoying than bad but still I digress and think for the money hacking with swift will be better. Just my two cents anyway
How would Apple identify the developers who broke their policy by posting bugs?
Thank you so much. I will aim to get a few on the store and follow this advice!
Hacking is updated more often after Swift chances.
Ok this is super important to me. I can‚Äôt tell you how frustrating it is for classes like C++ where the first semester it‚Äôs one professor teaching a specific way. Then the second is a whole different one with his/her own style. This alone steers me away from Ray Wen
You can purchase a Udemy class for less than 20$. The Angela Yu class on iOS development is one of the best I‚Äôve taken! She always updates her content as well.
Third! On this well structured and she makes learning fun.
I found that if you download the playground, then open the playground file from the Files app, it will execute correctly. Opening playground file from Playgrounds doesn't work for me either.
I‚Äôll try that thanks
I am working on a really interesting social media app. I just graduated college and while waiting to get a job, I decided to start to learn Swift and build this app I thought of. I truly believe the app could be big if built right and marketed right. The problem I am running into is I would consider myself a beginner in Swift and some of the functions I need to create would need an expert. Any suggestions on how I can find someone to help me with my app and launch it onto the App Store as quickly as possible?
So go and be part of a team with seniors.
The code looks ok, keep working out your ideas because I think you'll get it right after some trial and error.
It's possible you don't need those. I just assumed you'd set the AppDelegate as the data source of some table. Not being able to see your full code makes it a little difficult to diagnose. Could you put it up on github or something? It sounds like you have set AppDelegate as the datasource of your table and you probably want homepage to be the datasource. Remove those methods from AppDelegate (that were inserted by the XCode helper thing) and add this to your homepage class' viewDidLoad: table.datasource = self
Start with something a little more simple, like a weather app. That‚Äôs where I would recommend you start tbh
Oh I didn't know you were a mod of this sub! Thanks for all your hard work. Bought a few of your books and they've been really helpful : )
Hey there. Cool app! At a basic level, it sounds like you're trying to do a simple string search, perhaps check out [this](https://stackoverflow.com/questions/24034043/how-do-i-check-if-a-string-contains-another-string-in-swift) SO post. At a simple level you can iterate through all the navigationController's children or create a separate dictionary with all the view controller titles as keys and their storyboard ids as corresponding values.
I'd also recommend you give swift playgrounds a chance on the iPad when you have some free time. Has some nice introductory steps especially if you have never coded before.
Is that apart of the Apple Dev kit for $100?
Definitely will look at some more basic stuff first. Thank you
No it‚Äôs a free app Swift Playgrounds by Apple https://apps.apple.com/us/app/swift-playgrounds/id908519492
You do realize that Google Earth is built by a large team of experienced professionals, don't you? You're describing one of the most complex systems there is. I'm interested in trying my hand at filmmaking. As a goal I'd like to create something like the Marvel Cinematic Universe.
You seem to have forgotten to include your program.
Rather than search through all the VC children, I really think I would just instantiate the view controller programmatically. (If OP needs help, id google that last sentence) Wouldn‚Äôt you think? This actually seems fairly easy to me. Search list of data that contains the titles, (they must come from somewhere, or can be created) and then instantiate the selected one from the filtered list.
Yeah or use storyboard segues
It‚Äôs hard taking a pre made earth model and implementing it in the app? Wouldn‚Äôt GitHub or something like that help me...?
GitHub is a git hosting platform. Not a drag-and-drop-this-earth-into-my-app platform.
Nice. What would one do to work with sensitive data in a similar approach?
Encrypt the data before writing, and decrypt on the other end might be the right idea here
I can drag and drop the code... no?
No because you need to be able to take it apart and make it work the way you want it.
At what age do you become too old to learn?
FYI you‚Äôll need to spend at least 2 years learning to be able to build that.
Yes you're locked in. Porting would be a complete re-write.
But that has nothing to do at all with Swift, it would be the same issue with Objective-C.
3rd paragraph kind of lost me. Use google maps with google places autocomplete for the map and search. Not sure why you would want to search for things such as pens on a map but I believe Google Places can show businesses
That confirms what I was afraid of. I just released a video 10 minutes ago expressing how I feel about the whole app review process but I fear releasing it in this particular sub-reddit's main thread would probably be downvoted to oblivion or even get blocked: https://www.youtube.com/watch?v=4TSlLO0YYos So...why would anyone voluntarily handcuff themselves like this ? ALL your time...ALL your effort...and then only to submit and pray... And if they say no...tears...that only you would feel... Learning a programming languages takes so much time and effort, I personally have learned more than 11 programming languages and so many of them have became obsolete.... The last thing I want to do is to learn a locked in language... Why would anyone do this to themselves ? I am in so much sympathetic pain just asking this question.
Yeah can you post a github link so we can actually help you? This is borderline advertising. IMO. Would love to help!
That‚Äôs a bit melodramatic. If your app gets rejected, update it to conform with the guidelines and try again.
&gt; So...why would anyone voluntarily handcuff themselves like this ? Because Apple has sold 700 million iPhones, and has 47% of the smartphone market share in the US, and there‚Äôs money to be made off of those users. Also because developers enjoy the iPhone UX, and want to build applications for something they use everyday. The review process is easily my least favorite part about apple, but it‚Äôs a necessary evil in my professional life.
It has nothing to do with Swift. It has to do with the platform-specific frameworks like SwiftUI or UIKit. Frameworks are building blocks‚Ä¶ They give you the basics of an app like text fields and buttons. UIKit and SwiftUI can both run on iOS and the Mac. You can also write Mac apps in Swift using the Mac‚Äôs AppKit framework. You can write apps using cross-platform frameworks like React Native, which many developers do. You can also use Swift to build your app completely from scratch using your own frameworks, but not many choose that path.
Thank you for sharing this...it helps me understand your perspective, it helps really, thanks.
Indeed it would seem wise that not many took that route.
It's why people sometimes opt for Unity or Unreal. I love Swift but like with Native Android (Java) you are stuck in the platform. The benefit is deeper access to the family of devices with minimized bulk added to the code base. For example, you can run a very slim Metal-powered app in Swift while even making a default "barebones" Unity app for ios will be no smaller than \~40-50MB. You can have Metal power a Unity or Unreal app but Swift can make better use of the latest Metal APIs. All depends on what the end goal is. I came into my role at the startup as an iOS developer, but have been living more in Unreal and Unity since clients want both Android and iOS at the same time...and most startups don't have resources to make essentially 2 apps.
I don't have a GitHub link unfortunately. The app has almost no actual code right now, it was made mostly with Storyboard. (I promise I don't mean to advertise, I have no interest in people outside of my niche field downloading the app! I only shared the link so you could get a sense of what I'm trying to accomplish.)
Pretty much. That's why I'm not an iOS developer. If Apple rejects my Mac app, I'll just sell it directly to my users. It'll be a little more work for me but I'll make a little more money per sale. Writing any application and hoping for widespread adoption is a crapshoot, but mobile especially so. I think you're nuts if you start with iOS without a revenue stream.
What matters is that you are using foundation classes targeted at a specific platform.
Some of the apps I wrote use a set of what we call ‚Äúcore‚Äù classes, that handle everything concerning network, database and business logic. Those can be easily converted to any other Swift platform, given that the libraries used for network and database are the same, or easily replaceable But that‚Äôs only part of the picture. Everything concerning data flow in the app, UI, animations, screens and the like will have to be rewritten. Some of our apps do business logic in the viewcontroller, and those will have to be extracted or rewritten.
Noob here so expect a noobish answer. It seems a lot of the VC functionality, eg managing state and data sources has been rolled into SwiftUI. There are also methods like .onAppear that can help when you need to execute setup code like you would in viewDidLoad. You can always use your VC as usual and still work with SwiftUI, it doesn't have to be an either/or proposition.
Your attitude here isn‚Äôt realistic. Consider these points: 1. If you follow the rules your app will most likely get approved. 2. If it doesn‚Äôt get approved you should think of it as saving you and Apple from embarrassment. Further it protects your potential customer. 3. The vast majority of the people getting rejects have either not followed the rules on purpose or have code so bad it doesn‚Äôt belong in a store. 4. It is impossible to avoid platform specific code if you want a native feeling app. Smart developers break out UI code from the more generic logic so that they can achieve reuse on other platforms. 5. Swift is available on other platforms to some extent or another. In fact it has better implementations than Objective C. 6. C++ still works fine in XCode as does Objective C and C. 7. Using objective C on Windows is an act of stupidity especially for banking. However you could use Swift on Windows and probably be better off. That is with a Windows Swift that just isn‚Äôt there yet. You could also do Swift on Linux and be further ahead. Frankly there is most interest in Swift on these alternative platforms than Objective C ever saw. 8. I really don‚Äôt get your whining about being freed from Apple. Your no more tied to Apple with Swift than any other language. What ties you to a platform is using SDK‚Äôs not available on other platforms. This especially in the case of GUIs, write a Windows program with the latest Windows only SDK‚Äôs and your code is tied to that platform. Your alternative is platform independent SDK‚Äôs which for the most part suck. 9. Swift is no more locked in than any other language. It is in fact open source and is supported by open sourced packages like despatch. On Linux this has gone far to make Swift the most interesting new software on that platform. So you are not locked in you just need to learn to use it. 10. There is a future and a past, if you want to be stuck in the past you stick with the tried and true. If you want to develop skills for the future look towards Swift and other modern languages. 11. Modern technology like Swift and SwiftUI make for rapid development!!!! This means revenue in hand far faster than at any time in the past. This can make the difference between staying in business or being an App Store drop out.
Melodramatic is a bit soft here!!! It smacks of total ignorance.
Think of it this way it is the difference between using a shotgun and a rifle!!! If you want to target iOS you shoot for precision if you want your code to run every where you take the messy approach and hope you hit your target. Frankly it is pretty easy to tell the difference between an app developed to be cross platform and one developed to be iOS native. Customer preference is for the high quality iOS native app. It is easier to accept non native apps on Mac OS but even there users have a strong preference. There are other issues with cross platform development that make such apps less desirable. The executables are often much larger for one. Speed is another one of the many issues. Beyond all of that, if a developer takes the time design wise, apps can be made native on multiple platforms fairly easily. It all depends upon the app of course but once you have one done half of the hard work is done. Also consider this; many developers focus on one or two platforms. This makes life far easier for support and the developers own life. Let‚Äôs face it if you want to get really good you need to focus and keep up. You can‚Äôt do this well targeting every cell phone ever made. Your skills and code quality can progress far faster focused on a minimal number of platforms.
Agreed. I just replied to their question thought, never said it was only an issue with Swift.
Thanks for the help. I did remove those from AppDelegate and am pretty sure the DataSource is homepage (I checked again in storyboard and added table.datasource = self). I'll try to put it on GitHub, but I think I know what's wrong. (no idea how to fix though). I think it has to do with how the firebase Database is structured. It is structured like this: [https://imgur.com/a/CLknEWu](https://imgur.com/a/CLknEWu) . I think my code is written so that the children would be where the user keys are in the database at the moment. Do you agree?
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/JK1veBQ.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20eri26tz)
I agree with your second paragraph but not the first. Apple rejects for a lot of reasons, but 99% of them can be resolved. If they can't, it *probably* means your app shouldn't be on mobile.
Got it working! Thanks!
Brillant
That's a bit simplistic. My app has been rejected a dozen times, over the years, and in no case was it because it didn't "conform with the guidelines".
&gt; Learning a programming languages takes so much time and effort, I personally have learned more than 11 programming languages and so many of them have became obsolete.... &gt; The last thing I want to do is to learn a locked in language... &gt; Why would anybody do this to themselves ? If you don't want to learn something that may be obsolete, then you've picked the wrong field. You definitely don't want to learn anything recent, because [the younger something is, the less likely it is to survive](https://en.wikipedia.org/wiki/Lindy_effect). I suggest sticking to languages long past their prime like Ada, Fortran, or Cobol, which are not going to die out in our lifetime, and don't tend to have many updates. &gt; Hello SpaceHonk, actually Objective-C is useful even in Windows ! Yes there are compilers for it ! Isn't that wonderful ?! :D &gt; I know that because I used Objective C on windows for some bank programs somewhere so your skills in that area could be freed from Apple if need be though unconventional. You're not writing Windows applications using AppKit, though. OpenStep is long dead. You can't just compile Photoshop for Mac with a Windows Obj-C compiler and get Photoshop for Windows. Whatever your app is, you'll still need to port it to the Windows API, and almost none of your original code will be the same.
To be fair, that's true of 80% of the posts on r/swift these days.
My point was that it‚Äôs not all doom and gloom like OP claims it to be
If you use SwiftUI it‚Äôs likely an open source project will add support for Linux or windows, maybe android.
&gt; So...why would anyone voluntarily handcuff themselves like this Cause iOS is where the money is.
You would need to provide the specs really and from initial looking, neither have any tests?
I would like to provide the problem statements but usually these companies re-use these problems and I do not want to get in trouble for that. Also both companies did ask for tests and that might be a reason why I got rejected.
A quick scan of your code makes me think you don‚Äôt organise it very well and it‚Äôs formatted quite badly which feels messy. Try and find a formatting style that looks clean and follow that, as well as try to split functionality up into separate functions, rather than having 1 function do 30 lines of code.
That makes sense thanks for the input.
&gt;In your post you say that reduce indicates a loop. Ehhh, not quite. It happens to use a loop, but that isn't really necessary. I like the haskell visualization of it, where `foldr` (fold right, their name for reduce) replaces `:` (the "cons" operator, the operator which denotes adjacency of elements in a list) with `f` (the joining function you provide). See [https://wiki.haskell.org/Fold#List\_folds\_as\_structural\_transformations](https://wiki.haskell.org/Fold#List_folds_as_structural_transformations) &gt;What would you say a flatmap indicates? Although I've learned (admittedly, to only a pretty basic level) the correct terminology for this, I don't really remember it. I would describe flatMap as "transform each wrapped element of the input into new wrapped elements, but flattening it to prevent nesting of the wrappers". &gt;I did not see a functor in this example There is a functor here, but that's not sufficient. A *functor* is a type (that among other things) implements `map`. But in this case, we need an *applicative*, which is a type (that among other things) implements `flatMap`. `Array&lt;T&gt;` is the applicative in this case. `Array&lt;T&gt;` acts like a box that wraps a value. How exactly it wraps it doesn't matter, but it wraps it in a way that given `fn: (T) -&gt; R`, we can't `fn` apply to our elements, because they're not directly accessible. Quite a few of Swift's types are functors: `Optional`, `Result`, all `Sequence`s, etc. `Array&lt;T&gt;` is a functor because it defines `map`, which can take `fn` and applies it to all of its contents to produce an `Array&lt;R&gt;`. `Array&lt;T&gt;` is an applicative because it defines `flatMap`, which can take a function of type `(T) -&gt; Array&lt;R&gt;`, to produce an `Array&lt;R&gt;` (key point: it doesn't add a new layer of wrapping, so the result *isn't* `Array&lt;Array&lt;R&gt;&gt;`)
You know about @IBDesignable and its workflow, right? And that Interfsve Builder has had partially-live previews, and support for size class and localization previews for some time now, without having to write code to display them?
Still, this builds on top of that by actually running the app, making the network calls you have and showing you the actual state your view is going to represent. It‚Äôs the futureeeeeee
32 years, 17 days
I miss the escape key and have next to no use for the touchbar
lol all good man!
&gt; separate play store? App Store. &gt; how do you see it changing development? The App Store itself won't change development. The bigger breakthrough is that one can now make watchOS-only apps, no longer needing an iOS companion app. For a certain class of app, especially ones that make heavy use of the sensors or just provide complications, that's the more interesting news. &gt; Is it worth it to create ONLY watchOS apps? Not really. Where possible and applicable, you should strive to make an iOS companion to the watch app (and a macOS app or web app if it makes sense, such as if user data is stored on your servers). This allows people to access the data from the app in whatever way they prefer ‚Äî again, *if* it is applicable. For example, think about the Health and Activity apps on iPhone. They provide different, more efficient ways to consume the information (you can see much more at once, you can browse it more effectively, etc.) from their equivalent watchOS apps. If this applies to the sorts of apps you want to make, it makes sense to create a companion app. This is especially true for Apple Watch buyers who do not have the cellular version, either out of choice or because they cannot use the cellular service (different telco, or unsupported in their country, etc.).
I don't have any resources to which to point you, but you will want to look into the documentation for URLSession and URLSessionTask, as well as Codable and JSONDecoder/JSONEncoder. If you don't mind bringing in external dependencies, there are Swift Packages out there that make network requests simpler than URLSession, things like Alamofire, and make JSON handling fairly easy, like SwiftyJSON. However, I think URLSessionTask and making Codable-conformant structs is usually sufficient as the basis for networking with JSON data.
Both projects use RxSwift and Anchorage. Did the employers state that you should use them or did you ask if you can use them? The point of the exercise(s) is to demonstrate your understanding and ability with the platform frameworks and common patterns, not what tools you can utilize to help.
This is a question of your approach. Some people don't want to be locked into one ecosystem, so they use cross-platform frameworks such as React Native and Electron. In my opinion, these make unpleasant, non-native apps that only have the pretense of belonging to the system on which they run ‚Äî in most instances, they lack proper native support for new features in each iOS update or require extra work to get this functionality. It's a viable strategy, but I consider it a dead-end unless you have the specific need of making your application logic available on the web. If possible, contain the application's business logic either in a cross-platform library, which could be written in any compilable language (and some interpreted ones are allowed on iOS, with certain restrictions applied) that runs on iOS and Android (and other systems). Then, you create platform-specific user interfaces for each operating system using their native toolkits that simply call functions from the cross-platform library. In many cases, you can store the business logic as stored procedures in a database on your servers (if applicable), simplifying the cross-platform library even further. If you follow MVC principles (and there are many different interpretations, but the basic idea is the key thing), the core logic of your app will be portable. As a side note, I believe Swift can execute on Android, so the cross-platform library could be written in Swift.
I agree with this comment 100%. I review small coding projects that my company asks candidates to write and if someone used RxSwift without being asked they probably wouldn‚Äôt make it to the next interview.
- You have two changesets, with descriptions "Initial Commit" and "test". - Your email address has a typo. - There are a huge number of files, but almost no comments, no documentation, and not even a README which might tell me what this is, how it works, how to build it, what systems it runs on, or how to use it. At this point, I don't think I even need to look at the code. Clearly, not much care was taken with these projects. But let's try anyway: - The first Swift file I opened has: catch { print(error) // TODO: Handle error correctly } Every sign points to someone who doesn't really care about the people who will have to read or use these programs.
Any company that can‚Äôt be bothered to provide you with feedback on a coding exercise that they‚Äôve ask you to write probably isn‚Äôt worth working for.
I've tried both, the Ray Wenderlich courses initially, which introduced a lot of concepts and were very useful. I don't remember when I started using Hacking with Swift, but they've been exceptionally good. The Unwrap App already mentioned is excellent and the speed at which /u/twostraws got a whole slew of examples out for SwiftUI was (and is) amazing - highly recommended. But really, try out both and see which one suits your learning method.
Valid points thank you
&gt; without having to write code to display them? The benefit of this is that you can write your UI in code, and live preview it. The goal is to get the best of both worlds: UI built with code, so that it can be properly maintained, merged, commented, structured, etc. And live previews of the UI as you're building it. Apple seem to agree that nibs and storyboards are a bad UI storage format, given their inability to be hand edited, and all the various other deficiencies. So SwiftUI is a declarative UI building system that works alongside live previews, to ultimately replace nibs and storyboards.
Actually this is a title of my blog post :) But what you said is what I thought. Thanks for the input.
I recently went through the same decision making process, and decided the 13in Pro non-Touchbar was the better buy. While it is from 2017, it has a significantly better processor, cooling, and screen, while lacking the gen 3 keyboard, TouchID, and weighing .25lbs more.
I meant that you don‚Äôt have to write a section of code separately and forEach a bunch of permutations specifically for previews that you want to see. As for nibs. Well, six of one. Swift couldn‚Äôt do any of this stuff without needing s major addition and change of mode: DSL. Set aside the conditionals in SwiftUI and it‚Äôs a simple transformation of JSON or XML to SwiftUI. Hell, there‚Äôs even celebration of how simple it is to serialize SwiftUI to and from JSON for storing view hierarchies server-side. Sound familiar? Yes, I know nibs are on their way out. But don‚Äôt act like SwiftUI is a totally new concept if you weren‚Äôt a mainline user of IB previous to SwiftUI‚Äôs introduction.
I used this on Travis CI. Should work on regular machines too: https://github.com/kylef/swiftenv/
Who‚Äôs acting like it‚Äôs a totally new concept? Declarative UI has been around for decades. If anything, it‚Äôs a direct swipe at React Native. And a very good swipe, at that. I think they‚Äôve really outdone themselves with this one. It not only solves a bunch of long standing complaints, and catches up with the competition, it also surpasses much of the competition too. Though time will tell. Won‚Äôt get to properly use it in the wild for a few more months yet.
Apparently you haven‚Äôt been paying attention to Swift devs‚Äô reactions. Especially those who had been insisting that building views in code was the superior method.
SwiftUI eliminates constraints
Drive-by suggestion: you can simplify this a bit by conforming to UIViewControllerRepresentable instead.
Direct swipe at Flutter IMO
At all of them, really. SwiftUI positions Apple extremely well.
If only swift was cross to android, we would rule the world
It's a very informative post for every UI UX designer &amp; iOS app developer. We recommended every developer to read one time this Article.
Explain please
Completely agree. Unfortunately it might be standard practice to not foster the community.
One of reasons that SwiftUI was introduced is because Storyboards suck. With previews we could use third party programmatic frameworks and see previews. It may be even possible to write clone of SwiftUI that works on older iOSes.
Did you try it the other way around? Dragging the image to the cell or even to the code directly?
/u/8412risk Did you try to reduce boilerplate by making custom protocol that conforms to PreviewProvider only on iOS 13? I'm wondering if this would be possible: #if DEBUG struct SwiftLeeViewController_Preview: MagicPreviewProvider { static func makeUIView() -&gt; UIView { return UIView() } } #endif The `MagicPreviewProvider` would maybe handle the rest.
It sometimes fails on my side too. So what I do is write the @IBOutlet in the code and link the code to the interface builder. And this never failed for me.
No idea, still need to dual boot catalina. Not my article, Still trying to figure out stuff as well.
Try cleaning your project
Trying using code üò¨üò¨üò¨
Starting to go through your course to clear up my basic understanding of things, and the question that hangs over in my mind as I move onto the later stages is... What's the difference between Tuples and Dictionaries?
Can confirm, this always works for me too.
Yes yes I guess it‚Äôs a bug in Xcode 10 where you can‚Äôt link an image which is inside the content view if you write manually, so what I did was opened the assistant editor, clicked on the image and ‚ÄúControl + Drag‚Äù to the categoriescell.swift and luckily I was able to create IBOutlet.
Noob question I was able to solve the problem by dragging the image directly to the my swift file but can you please tell me how do you clean the project ?
Community aside, it‚Äôs just unprofessional. I really hate how interviewing works in the programming industry. I‚Äôd say that throughout my career about 90% of the companies I‚Äôve interviewed with had no idea what they were doing. Written tests, irrelevant algorithm questions, ridiculous questions about obscure apis. If you‚Äôre asking me a question that I can find the answer for on Google in 5 seconds then you‚Äôre wasting my time.
shift + command + k or shift + alt + command + k
Cool write up! You should take a look at [this blog post on property wrappers (not mine)](https://www.avanderlee.com/swift/property-wrappers/) for using property wrappers to store your properties with UserDefaults. Thought it was neat and could reduce some boilerplate you have there for each property. &amp;#x200B; Would change this: `var sleepGoal: Int {` `set { defaults.set(newValue, forKey: Keys.sleepGoal) }` `get { defaults.integer(forKey: Keys.sleepGoal) }` `}` Into this: `@UserDefaults("sleep_goal", defaultValue: 8)` `var sleepGoal: Int` &amp;#x200B; As well as preventing the extra registration step (already done) and having the extra enum of keys that mirror your properties.
Your existing wrapper uses UIViewRepresentable, makes a UIViewController, then returns its inner view. UIViewControllerRepresentable is exactly the same, except for controllers.
The whole seperated lat/long thing is an anti-pattern, in every context besides the initial serialization/deserialization of data, and the final presentation in a UI. A lat is meaningless without a long. They're pretty much always going to be mutated together. That's what structs are for, for packaging related data and making them undividable, and by giving a good spot to group the behavior of that data. (e.g. distance(to:)). Just omit the seperated lat/longs entirely, and only work in terms of CLCordinate2D.
Yeah, I thought about it, but decide to have separated blog post for Property Wrappers. The main idea of the current post was usage of Form component. That's why I decide to simplify.
Cool, makes sense. Thanks for the reply and write-up!
I second @twostraws on this - really excellent content.
You‚Äôre welcome!
Try using a predicate with a where clause so you can specify which recipe to retrieve
They are... completely unrelated types. Like asking what‚Äôs the different between String and Array.
Good, burn them with fire! ViewControllers were (A) a bad idea from day one, and (B) commonly misused and misunderstood. The fact that UIKit broke the view layer up into second-class-views, and non-view-view-containers has always been a source of aggravation and unnecessary complexity. And for anyone who reflexively argues that VCs are Controller layer because they have Controller in the name, (A) they also have View in the name, and (B) consider carefully whether your app is really a ModelView architecture(with massive VCs that mix presentation and business logic). UIKit and SwiftUI are view layers, just look at the names. Apple didn't give us a Controller layer because the's the most custom part of the app, a big bag of business logic. Swapping out View frameworks doesn't change that. Apple is pushing MVVM now, but that's basically just another flavor of MVC(as is MVP) . That said, it's my preferred flavor of MVC, and the fact that they've given us a modern, native binding option to replace KVO is amazeballs. Now I've just gotta wait 2 years till we can drop iOS12 support and use this stuff at work :|
Yes, ViewController is very misleading name, that's why there are so many article about Massive View Controller. Remove it completely in SwiftUI would make us think more about where to put our business logic, but I afraid we would end up putting that in View anyway lol.
Where do you think I should put the where clause? I wrote a predicate for the filter but I'm not sure I am using it right... Sorry I'm a noob at this. let filter = "Test Name" func retrieveData(){ guard let appDelegate = UIApplication.shared.delegate as? AppDelegate else {return} let managedContext = appDelegate.persistentContainer.viewContext let recipesRequest = NSFetchRequest&lt;NSFetchRequestResult&gt;(entityName: "Recipes") let fermRequest = NSFetchRequest&lt;NSFetchRequestResult&gt;(entityName: "Fermentable") do{ let recipeResult = try managedContext.fetch(recipesRequest) let fermResult = try managedContext.fetch(fermRequest) for data in recipeResult as! [NSManagedObject]{ recipesRequest.predicate = NSPredicate(format: "recipeName == %@", filter) recipeNameLabel.text = (data.value(forKey: "recipeName") as? String) } for data in fermResult as! [NSManagedObject]{ fermRequest.predicate = NSPredicate(format: "recipeName == %@", filter) //print ((fermResult.last as! Fermentable).recipes as Any) let fermName = (data.value(forKey: "fermName")as! String) let fermAmountValue = (data.value(forKey: "fermAmount") as! Double) let fermUnit = (data.value(forKey: "fermUnit") as! String) let new_fermItem = "\(fermAmountValue)" + " " + "\(fermUnit)" + "." + " " + "\(fermName)" fermItem.append(new_fermItem) let indexPath = IndexPath(row: fermItem.count - 1, section: 0) fermTableView.beginUpdates() fermTableView.insertRows(at: [indexPath], with: .automatic) fermTableView.endUpdates() }
I'm sure it won't totally fix the issue, but it should help. Fingers crossed.
Assuming you have set the one-to-many properties correctly, would this work? for recipe in recipeResult as! [NSManagedObject]{ recipeNameLabel.text = (recipe.value(forKey: "recipeName") as? String) // ferments is a set containing all fermentables belonging to the recipe // set is like an array but unordered and each element is unique ferments = recipe.value(forKey: "fermentables") as? Set for ferment in ferments { // do your stuff with ferment here } }
The predicates must be set before you execute your fetch request: let recipesRequest = NSFetchRequest&lt;NSFetchRequestResult&gt;(entityName: "Recipes") recipesRequest.predicate = NSPredicate(format: "recipeName == %@", filter) let recipeResult = try managedContext.fetch(recipesRequest) This way recipeResult will be your filtered results. &amp;#x200B; Here you can learn more about [CD fetching basics](https://medium.com/xcblog/core-data-with-swift-4-for-beginners-1fc067cca707) and [predicates](https://nshipster.com/nspredicate/)
Do you mean an animation where you have a bunch of sequential pngs?
Exactly. I can pull it off on android pretty easily but not xcode.
Sorry i just edited.
Thanks I'll give it a look!
You don‚Äôt need a Mac to run Swift! Second why not install your distros equivalent of an RPM. This is what I do on my Fedora based machine. Third that path you printed is just weird, you should never install apps in the downloads directory. Maybe you did or didn‚Äôt, but some piece of software is using a path to a subdirectory in your downloads directory. Your further attempts at installs indicate path handling errors so I suspect you are doing something wrong. &gt;I don't know whether to give up on Swift until December or figure something else out if this isn't working. Talk about giving up before even trying. Seriously you need to step back a minute and take a deep breath. First off I‚Äôm not even sure why you are starting off with an IDE install to get Swift running. You don‚Äôt need an IDE to get started, in fact I‚Äôd strongly suggest against it. Install Swift from a distro repo or from Swift.org. Get to the point where you can run the REPL from the command line before trying anything else. After you have done that much find a tutorial on setting up a build directory for a Swift application that will be built with the compiler. It isn‚Äôt that hard but you need to go through the setup process so that the tools find everything they are expecting. You should be at the point where you can now compile (make a project) from the command line. Editor support is highly mixed at this point. In fact it‚Äôs safe to say that anything I think might be true is already outdated. That being said it is fairly easy to get editors like Geany to build Swift apps for you. Deeper editor or IDE integration is coming but the language server is a works in progress. Note you can and probably should, learn to build and run Swift programs like shell scripts. In this case you don‚Äôt compile and build an app but rather run it as an interpreted program. There are advantages to this approach or learning Swift basics. This especially when IDE support is in such a state of flux. In a nut shel take the easier approach to installing Swift that is possible with your distro. Do not get distracted by the perceived need for an IDE, you don‚Äôt need it and I‚Äôd suggest that reliance upon them is why you are having trouble now. To put it another way it is absolutely asinine to install Swift via a supposed tutorial to get Atom up and running with it. You shouldn‚Äôt even be thinking about an IDE at this point, Swift is totally independent of -ANY- IDE, get Swift running correctly first. My usage of Swift is on Fedora Linux. The install came directly from Fedoras repos and frankly I haven‚Äôt had any trouble so far that wasn‚Äôt my own fault. If your distro doesn‚Äôt supply a working Swift it is probably a good time to move to Fedora. If not Fedora another distro that properly supports Swift.
Awesome thank you!
What‚Äôs the difference between this and Alamofire? Ahhhh...Asking for a friend
ah yes i need Swift. Sorry im a newbie :( thanks for all of the help!
I started freelancing knowing only the base and it worked, all depends on your ability to leran, to promote yourself and desire to work. Start with something low competitive so you can earn WHILE learning. For example, [Beesy.pro](https://Beesy.pro) (I also prefer it because of teamworking conditions, so some senior can be your teamlead+mentor+project searcher) Good luck!
Just init an UIImageView like normal and set .animatedImages = [list of images ] and set the animation duration and repeat count on the image view and then call start animating
Why?
thank you! i"ll give that a try.
If you live under a rock like me, there is an app for browse SF Symbols. Took me a while to find out.
Or cryo and an informative answer.
I'm as addicted to Reddit as everyone else :)
I managed to reduce the amount of boilerplate to just this import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() view.backgroundColor = UIColor.blue } } #if DEBUG import SwiftUI struct ViewController_Preview: PreviewProvider { static var previews: some View { return ViewController.asView() } } #endif
The question we all have.
Docs are lacking a bit no.