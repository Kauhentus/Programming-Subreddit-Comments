Complaining code is a one way process. You can't jut take an executable and revert it back to cpp files. If the devs publish source code or a project is open source, then you can view it that way. 
Why oh why couldn't they call it const. 
I'm intrigued, where can I read more about doing something like this?
I have after retrieve the data contains double optional and in it is a JSON `Optional(Optional("{"apple", "abc"}"))` in `[String: Any]?` type but in the future it may contains more keys into JSON, so I like to just get the value from "apple".
I tried without `Array[]` and it display LazyMapCollection&lt;Dictionary&lt;String, String&gt;, String&gt;(_base: ["apple": "abc"], _transform: (Function)) My original data has JSON syntax `Optional(Optional("{"apple", "abc"}"))` in `[String: Any]?` type
Can you point me in the right direction? Where can I learn about using the debugger?
Thank you.
Figured as much, but thought I'd check. Understood and agree on the use of code, but comparing it to official apps from AppStore vs very simple demo apps from YouTube/Udemy is very different. But it's all helpful nonetheless. 
Yep, that's true what you have just said. I though that we're talking about resources for beginner in iOS development not programming in general.
Thanks, this is cool and very useful for me. I too have been doing the Udemy courses and building their apps, but seeing open source apps like Kickstarter is a nice added bonus!
What happened was instead of right clicking and dragging from the UIlabel I clicked and dragged from the UIview by accident. I think it was only a couple pixels different when I dragged. I should have noticed it though when I made the connection...but I didn't. I will notice in the future though.
Ohhhh! Ok. That worked! Maybe I missed the difference in the tutorial. So what would be and example of code you'd put in "viewDidLoad"? Also, can you explain why the if statement has to be assigned as code for the button press? [For instance it works here.](http://imgur.com/7UMXZvb) [But doesn't even recognize the labels or the if statements outside the button press.](http://imgur.com/pVLqFgL) Do you know why that would be the case? Seems like you should be able to have an if statement just on its own.
You can place some initialization like tableviewrowheigth, set a delegate or change the colour of navigationbar. Those sort of things. You don't want some heavy object initialization there. Edit to respond to your question. Code that can be executed must be placed in code blocks (closures, functions). All other code in a class file are properties or subclasses/enum/datastructs Your first example is a function that is called when you click a button (i presume, change AnyObject to UIButton). This is the function (a code block) that is executed when the event (i guess) touch-inside is triggered. This code block has accesss to all propertues in the class or super classes. Your second example is code that is not in a code block and thus will not compile. 
Swift is already broken enough as it is (tooling wise), I dont even want to imagine how completely fucked Sourcekit and XCode become as more and mote of the objc is ported to Swift lol. I'm sure the guys from this article thought migrating was a good idea at first but realistically, based on my experience, I would bet it was probably a shitshow and a waste of time.
The screen issue is what is making me lean towards a 13" 2013 Macbook Pro. I definitely want something portable, but I'd also like plenty of pixels. I don't mind having a bit of smaller text, and I just love the aesthetics of retina screens. 
Thanks! I understand the first part about what runs on view did load. I think I understand the second part too, although it seems strange. What if you just want to run an if statement by itself? Suppose I had no button? Suppose I wanted to keep this same code but indicate that "if the contents of label1 == the contents of numLabel then do X" I'd have to write a function to do it and nest it in there? Seems like one extra step that just isn't needed.
Have to postpone this in order to make the code break in Swift 17.0
There's a thing called deprecation. Apple should read about it. 
I think there's two things you're missing here which are preventing you from being able to do what you want. First of all is mixing up the `Any` type with generics. Generally speaking, lots of use of `Any` is bad code smell: what you (probably) want to be using instead is a generic type parameter. Take, for instance, a function which takes in a value of any type, and prints it out: func myPrintGeneric&lt;A&gt;(x: A) { print(x) } func myPrintNonGeneric(x: Any) { print(x) } The first function here takes in something of *any* type, whereas the second takes in something with the type `Any`. The `Any` type is a type which everything in Swift can be cast to. The former function is more general, and can be used everywhere the latter is used. The second is that subscripting will actually let you call mutating functions on the values of a dictionary as-is: var dict: [String:[Int]] = ["abc": [1,2,3]] dict["abc"]?.append(4) print(dict) // ["abc": [1, 2, 3, 4]] The trouble is that the above won't work if the key isn't present in the dictionary. The usual way to solve that is with this extension: extension Dictionary { subscript(key: Key, or def: Value) -&gt; Value { get { return self[key] ?? def } set { return self[key] = newValue } } } And then you can use it like this: var dict: [String:[Int]] = ["abc": [1,2,3]] dict["def", or: []].append(1) print(dict) // ["abc": [1, 2, 3], "def": [1]] It's worth noting that there's an efficiency issue with this solution: Swift (currently, it may be optimised away in future) will copy the array on every append. One way to avoid this slowdown is by using a reference type rather than a value type (arrays are value types in swift) as the values in the dictionary. (see [this](https://www.reddit.com/r/swift/comments/4q2rgh/appending_arrays_in_swift_and_avoiding_on/)) One way to achieve that would be by using a box: class Box&lt;A&gt; { var value: A init(_ val: A) { self.value = val } } var dict: [String:Box&lt;[Int]&gt;] = ["abc": Box([1,2,3])] dict["def", or: Box([])].value.append(1)
Source code counts as intellectual property and is kinda hard to get patented for a lot of developers so not releasing it is the easiest way to protect your work. If I were to release the code for my research project I'd be out a lot of money and time. 
Hi ihatetoregister! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/5vivsn/free_disk_space_monitor_promo_codes_to_celebrate/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
100% agree. Combines leaning swift + building simplistic/interesting apps.
That is where reactiveSwift and property observers come into play ;) For example instead of directly adjusting the label create a string property called labelText. Add a propery observer didSet and in that observer change the label.text to newValue. Now everytime you update the property the frame will update. You can add conditions to the didSet part to customize it. I can add a code example if you like
You don't need a Pro. I have an Air and works fine with Xcode.
Thank you, it's not what I wanted, but still is a nice category.
You got it easy http://imgur.com/a/cVr0I
[removed]
I guess I just haven't gotten that far in my course yet. Sure! If it wouldn't be too much trouble I'd be interested to see what that code would look like. Thanks!
&gt; C itself is a bit of a mess too (not even close to C++ obviously but still). I'd say nearly all of C++'s additions are improvements, while nearly all its warts are inherited from or required for compatibility with C (from most to least serious, dangling pointers/iterators/references, language-level arrays/strings decaying to pointers, undefined behavior, null pointers, null-terminated language-level strings, textual includes/preprocessor, implicit narrowing conversions, lack of standardized/sane packaging and build systems, default copy/assignment constructors and destructors improperly handle dynamically-allocated fields, `const` not a runtime guarantee, broken unsigned-signed comparisons, header/source split, confusing language-level function pointer syntax, statements aren't expressions). The only thing I can think of right now that C++ does *worse* than C, besides support for C99/11 features, are the verbose/thread-unsafe/slow iostreams, and even those are at least a lot harder to use in an incorrect, memory-unsafe way than C-style I/O.
I would use [UICollectionView](https://developer.apple.com/reference/uikit/uicollectionview) for what you are trying to do!
Don't agree at all. C++ is a hot mess while Objective-C much much less so. C++ changes things in C while Objective-C is a true super set. Just a simple example to falsify the thesis. 
thanks, perfect sense.
did you hook in a completion library?
short answer probably but not easily, you would would have to jump through some hoops like bypassing webkit, webkit is very bloated, look at programming your code in Metal, it is GPU accelerated, or OpenGL.
yes but if you're a noob they're beyond your capability. you need to understand how to use a hexedit then jump into a decompiler like softice, radare, remcom. for swift as a noob, you'll be able to pull out strings and get an idea but i don't know of any code that is going to walk an archtecture. in C there are tools that will map code but not swift.
To use Xcode you have to have a Mac as there is no Windows version. I suppose a VM would work in theory I think it might just be slow. I don't have any significant VM experience though.
use JSON instead
I work a lot with NSURLSession (networking in general too), UICollectionView, and creating a lot of custom views (programmtic, autolayout, xibs, and some storyboarding, but not segues). And when using classes like UITableViewController or UICollectionViewController, you should practice a more MVC or MVVM approach and separate your data/model from your controller and view. Helps with code readability and reusability. And I do also spend plenty of time writing unit tests (XCUnitTest and such) for any new code I write. 
GameplayKit has a [flocking behavior](https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/Agent.html). And a [video](https://developer.apple.com/videos/play/wwdc2015/608/) (19:40 in).
An honor. Let me know how you like it and if it needs improvements. I don't use it so really don't know where to enhance it.
Rephrase it please? I have no idea what that means. English is not my primary language.
Don't put your own tests or copied examples, they add nothing to your portfolio but noise. Start an app, any app, a simple image cropper, resizer or whatever and then post it on github and explain why it is different or cool. Always put enough screenshots to explain visually what it does, it is more attractive to visitors and recruiters. Most of the time you'll find a little trick, a new function, an extension, a library converted from another language and that would help a lot those who come after you looking for such knowledge. Remember, we're all standing on the shoulders of giants. It's giants all the way down!
Tables, buttons, images, labels and text are unavoidable. 90% of your UI is made of them. URLSession is definitely necessary for all internet stuff. Show view, dismiss view, actions and outlets. Forget about protocols and extensions for now, you may live without them tho they're good to know. And data, sooner or later it will byte you. From UserDefaults, Plists, Json, Yaml, all the way to SQL.
With everything you work on - codify it on a piece of paper. If you're always having to look at *how* to implement something without looking example code; you're missing a big step in really learning and understanding. On a paper draw what should the steps be in boxes and arrows and etc.
I put everything on Github because I use my contribution calendar as motivation to code every day. I can't miss a day. I've got a good streak going. I must code every day. Challenges from books that I'm reading, code I've typed out following some tutorial, etc.. To each their own though. I just like the [Seinfeld method](http://lifehacker.com/281626/jerry-seinfelds-productivity-secret). 
I prefer Gitlab. In Github you cannot have private repositories without paying. The reason I put everything in gitlab is to have version control off location.
What's a depreciation? Does it taste good?
Never used it. But I mostly write apps for my own use. Have run across a few cool things on it though. A math parser and a Delaunay mesh generator. So I guess I need to pay it forward sometime. 
Learn them, use them for projects with less than 10 views, they are very practical for what they do, UI design and flow. For more, start creating view controllers with xibs and learn how to join them.
I'm working on Uber clone in Swift 3. It's almost an animation challenge!
[removed]
Do you have a degree in a related area or are you self taught?
Actually, I just looked up the spec comparison between the most current 13' Macbook Air and and 2013 13' Macbook Pro, and they seem very similar. It sounds like the main difference between the two is the slightly better weight and battery life of the Air, and the much better screen of the Pro, correct?
Thanks a lot for that message. Totally what I'm looking for! Can I ask you what resources you used to teach yourself Swift? I find a lot of them don't do a great job of really explaining the code they are teaching. Hacking with Swift has been the only one that really explains the code well. 
It's launch and the tepid support Apple has given it. I think it will improve and I like the language and its more functional direction. 
Some of these warning or error do not make any sense at all. Xcode is a nightmare especially for newbies to the platform. Those SIGABRT on AppDelegate sends them into a tizzy without knowing what the issue is (especially when the problem is elsewhere like storyboard) I don't understand Apple's thinking here. They need dev's, they need apps for their sustenance but give us half baked tools to work with (I am looking at you, refactor for Swift) 
I recommend to avoid them if you can, you will get a better grasp of what is happening in the background if you do everything by code. Also, most professional companies don't use them at all. Its still nice to know how they function though.
It's funny that you bring this up. Many books today focus to much on explanation/theory, sometimes you just need to jump in the pool and learn to swim by taking action rather than spending the majority of your time reading a book on how to swim.
Great list! But on the section about the best courses you accidentally switched the names of the instructors...
That's awesome! Yes, I do try to keep all my books and videos as updated as I can, which is increasingly challenging as I add more books :) Regarding your progress view problem, here's some code that might help get you started: import UIKit class ViewController: UIViewController { var progressView: UIProgressView! override func viewDidLoad() { super.viewDidLoad() title = "Hello, world" setUpProgressView() // quick hack to demonstrate the progress view working for i in 0 ... 100 { DispatchQueue.main.asyncAfter(deadline: .now() + Double(i) / 10) { self.progressView.progress += 0.01 } } } func setUpProgressView() { guard let bar = navigationController?.navigationBar else { return } progressView = UIProgressView(progressViewStyle: .bar) progressView.translatesAutoresizingMaskIntoConstraints = false bar.addSubview(progressView) progressView.leadingAnchor.constraint(equalTo: bar.leadingAnchor).isActive = true progressView.trailingAnchor.constraint(equalTo: bar.trailingAnchor).isActive = true progressView.bottomAnchor.constraint(equalTo: bar.bottomAnchor).isActive = true } } To try that out, create a new single view controller template, then place its view controller inside a navigation controller. As for your questions: 1. No, I don't think that at all. In fact, I think most serious companies jumped to Swift with Swift 3, thinking ABI stability was just around the corner. Now that we're learning it isn't, and in fact we're seeing more breaking changes in Swift 4, I suspect there are some who regret moving when they did. 2. I don't think there's a difference whether you make it in Swift or Objective-C. Apple uses both, but primarily Objective-C.
Don't abandon storyboards. You never know what kind of project a company already has, and they might have used storyboards and xibs. And what are you gonna do when their project has storyboards and you know nothing?
Enums are best suited for options: enum sex: male, female enum state: on, off enum align: left, right, center While structs are used to hold complex data: struct person: first='Taylor', last='Swift', age=37, phone='555-SWIFT' There is more than that but good enough to understand the concepts.
I agree, and felt similarly as an Objective-C iOS Developer (I do have an MEng in ComSci, but don't ask me to write any C# or C++ again. Maybe ProLog, that was fun) Doesn't mean you can't learn the other important things that will make you valuable: * Security best practices * Project management methodologies (What is AGILE, what isn't it?) * Version control * Automated testing (ALL OF IT! Unit tests, integration tests, smoke tests, contract tests, behavioural tests) and when to use each * Continuous delivery and continuous integration * API architecture - you'll learn what a good API looks like if you need to consume a backend and it does / doesn't suck Hell, if your API sucks, changes/breaks frequently, or the API developers don't want to accommodate the fact you can't alter mappings on the fly, build your own Backend-For-Frontend to cover all their sins and make your iOS client simpler! You skill up nicely, things go easily. 
Server-side Swift isn't for everyone, just like Node isn't for everyone – there are always pros and cons. In answer to your questions: * Yes, you deploy somewhere. You can use your own personal server, or use something like Digital Ocean / Heroku. * If you're already a skilled Swift developer, using Swift on the server is relatively simple. Plus you can re-use all the business logic you've already written for iOS/macOS/wherever. * Server-side Swift just serves up raw content in whatever format you want. You can then consume that content in an iOS app, an Android app, or whatever. * The tutorial you saw includes the MySQL *library*, not MySQL itself. This is really small, and in fact probably(!) just uses the system's own MySQL library rather than a full Swift rewrite. In my [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift) book, I use MySQL sometimes and CouchDB other times so that readers can see how both options look.
UI Elements: label, button, text view, iamge view, table views, collection views, view controller Arrays: learn all the FP method...map, filter, etc Autolayout: https://github.com/jmfieldman/Mortar Pick a networking lib. I use AFNetworking, but whatever Optionals: eliminate them *wherever* possible &amp; use guard, if let, chaining, ?? default, map, flatMap etc to deal cleanly Also you really ought to look over UIView, UIControl and UIScrollView. You won't use then directly much but everything inherits from one or more of them and there's useful, non-obvious stuff there.
I felt exactly like you, and tried picking up server-side swift development with Vapor. Have learned so much about Web development that I feel like I learned a whole new language and ecosystem. 
Thanks! I will check them out.
I really appreciate your answer. This is my first programming language and I just started in February. I've started and stopped many tutorials because they all offered me a little of something but not the whole picture. I actually did start reading that book and found it way more helpful than any tutorial. Just gotta go right to the source I suppose. One thing all the random tutorials taught me was a little bit about each part about the basics. So where one tutorial would be missing an important part on classes or structures that would leave me with more questions, the next tutorial would have the answers. No one place had all the answers but I actively sought out other tutorials and filled in the blanks. Its only been about 3 weeks but I feel generally comfortable with the concepts of the basics (var, classes, methods and functions, strucs, enums, etc...) and have just discovered hacking with swift, which so far seems to be just perfect for putting that knowledge to use. One thing I struggled with in the first week or two was trying to understand what all those parts of the syntax really did in terms of their actual functionality inside a code for an actual ap. I think Hacking With Swift and the Swift Docs answers the concerns. Its really helpful and motivating to hear from you and to get more perspective on what awaits me in the future. It is exciting and I can't wait to start writing my own codes and putting my app ideas to fruition. Thanks again!
An enum is almost the *opposite* of a super array. It doesn't contain all that data, it specifically contains exactly one of those alternatives, and no more.
web development or server side? 
You said it - I am in the Udacity iOS nanodegree, almost complete. Swift is great (Xcode on the other hand...) but I feel limited. I don't even know HTML or CSS and it seems like everyone but me is doing JavaScript. I am going to spend some time honing my iOS skills and learning iOS design patterns but will definitely be doing another nanodegree; maybe the front end and then full stack. It would be great to be versatile and know how the whole system works rather than a single component. 
I'm not 100% sure of what exactly you're wanting to do, but have you looked at betfair's API? https://developer.betfair.com/ It might be more helpful for specifics. 
When I'm away from internet and computers I read The Swift Programming Language, each time trying to find something I don't understand well yet. Then (if I have Internet) I go to read code on github (mainly https://github.com/apple/swift)
This. Start working with a web framework like Vapor or Kitura - the enterprise/server-side application development arena is enormous and really rewarding. It's one thing to be able to build an iOS app, but it's another thing entirely to build a back-end it can talk to.
Why do you think this?
Props up to the website Also thanks for the open source code, it's a guide sometimes to make sure I'm doing things the right way
I am curious what you thought of your udacity experience. Bang for buck? I have picked up some great skills with courses on udemy. I'm getting to the point where I want to really challenge myself but don't want to sift through the internet for high quality tutorials and lessons. 
"Seriously? I always found it a great API to work with. " Might be the unpopular response but answers that start like this to posts like these just feel condescending and unnecessary 
I am really happy with Udacity and I would definitely recommend it. I did a few of the intro to computer science (with python) courses for free first. The quality of the material is top notch - they talk about design patterns, and algorithms as they apply. The instructors are either professionals or real life professors/PhDs. In terms of bang for your buck - worth it but I would say out your time in to finish before the one year because you get half your money back. I'm doing the Deep Learning nanodegree too and it's great. Like anything else - college or this you always have to do some reading and research on your own but Udacity has surpassed my expectations. Before I forget, the forums you can post to are excellent - I always get a fast response with answers to my questions with detailed explanations. The code reviews are solid too and give great feedback. They want you to write code that looks professional. 
That sort of introspection is what the Mirror type is for, I believe. https://developer.apple.com/reference/swift/mirror
Some screenshots in README.md would be nice
[removed]
Screenshots of…? There's a link to the wiki with example code
That was a good explanation, now can you explain the difference between a struct and a class?
I've tried Swift on heroku (using the vapor tool) but everytime I pushed a change it recompiled everything from scratch, any pointers on that? (Seeing that you're also using heroku)
For iOS or OS X? For a translator to work offline, you'd have to have a pretty huge database stored locally on the machine... and for iOS you're going to really run into storage limits.
Again, brilliantly done. I always believe a good programmer is someone who can explain programming concepts with a simple, crystal clear example. Lovely.
Enums can be a way to implement polymorphism. protocol Vehicle { var currentSpeed: Float { get } mutating func accelerate() } struct Car: Vehicle { ... } struct Motorcyle: Vehicle { ... } struct Boat: Vehicle { ... } // Now, using an enum... enum Vehicle { case car case motorcycle case boat var currentSpeed: Float { switch self { case .car: // Get speed from a car case .motorcycle: // Get speed from a motorcycle case .boat: // Get speed from a boat } } mutating func accelerate() { switch self { ... } } } Notice how both of the fields in the enum `Vehicle` share that `switch self` at the beginning of the implementation. If you have a `Vehicle`, you can use `switch &lt;vehicle&gt;` anywhere in your code to add specific behavior for each kind of `Vehicle`. struct Mechanic { func repair(_ vehicle: Vehicle) -&gt; Vehicle { switch vehicle { ... } } } Being able to add polymorphic behavior anywhere is super useful! But you lose the extensibility of a protocol. (If I imported the above code from a library and wanted to add a new `Vehicle` for bicycles, I would be able to add `struct Bicycle: Vehicle`; but I would not be able to add a `case bicycle` to the enum.)
Corebluetooth works well if you dont care whatsoever about reliability and what youre doing doesnt even need to work most of the time (that classic ble heart monitor sensor folk, its always that heart rate monitor) Meanwhile if youre doing something serious/mission critical like setting up wifi on some iot device through ble, well then top kek you gon have fun. 
This might be totally useless since it's more backend focused, but did you see this post on a using the OpenStreetMap Routing Machine? https://blog.maddevs.io/how-we-built-a-backend-system-for-uber-like-map-with-animated-cars-on-it-using-go-29d5dcd517a#.kh8v6syr8
Well I thought it was funny
Aw c'mon. Who doesn't like manually managing async buffer pointers? :-)
Even better. Android BLE stack with pairing/bonding. Nicer to jab one's eyes with knitting needles. OTOH, let's tell users to unpair a device on iOS: Home. Settings. Blueooth. Tap. Forget. Tap OK. Tap tap Home. Back to app. The dictionary definition of elegant UX. A pox on both their houses. 
That's like studying metallurgy to learn how to build a car. Doable, but good luck figuring it out in a lifetime. This book summarizes all the useful parts of the spec: https://www.safaribooksonline.com/library/view/bluetooth-low-energy/9780132888394/title.html Will likely be out-of-date by the end of the year, though. What with BLE 5 rolling out.
you mean 'swift package init'
You were right, I needed to use `swift package init`. 
or just a fanta sea?
Yes. Kudos to Google for going whole hog with their framework, though they bit off more than they could chew and it turned out a bit rough. That said at least you can adjust MTU size.
BLE isn't designed for reliability, it's designed for low power.
Even water tastes better than Jack Daniels.
Looks like this would be the answer unless I'm missing something obvious: let text = "12 34 56 78" let list = text.components(separatedBy: " ")
yes indeed! thanks a lot
And this: let text = " 123 " let trim = text.trimmingCharacters(in: .whitespacesAndNewlines) A little verbose but that's what we got. Once you learn extensions you may want to code convenient methods like text.split() and text.trim()
Have you done any work professionally yet? Do you think your experience with / skills you learned from Udacity have prepared you for a professional career? What do you think your weaknesses are at this point as a programmer? What would you do differently? 
Thanks, I'm subscribed and I sent an email to the list but I haven't seen it reflected in the archive, and it's been seven hours. As an aside, what's the best way to quote previous posts? And what should I put in the subject line? Thanks
If you follow the first link in my comment, can you login at all? If so, try to unsubscribe and re-subscribe. If not, you may need to repeat the sign-up process. &gt;As an aside, what's the best way to quote previous posts? In most email clients, replying to the thread will quote the previous response automatically. You can add your comments inline to respond to individual points. &gt;And what should I put in the subject line? Evolution doesn't really have that many formal rules about this, but really there are three things you do there so the community has tacitly settled on some meta-tags you can add to the start of your subject line: [Proposal]: For disseminating proposals and proposal drafts [Pitch]: For spitballing [Discussion]: For discussions of existing ideas/proposals Otherwise, just word the subject like you would the title of a blog post or research paper or whatever. Just summarize the main point of the discussion. There's really not that many rules - other than be polite.
[This thread](https://www.reddit.com/r/swift/comments/5v48yc/want_to_learn_swift_whats_the_best_tutorials/?st=IZJZ2V9U&amp;sh=c63c0eb3) has really good suggestions.
It's not just done for games. I was going through an API tutorial from Ray and they used an enum to parse the different types of things from the iTunes store. Something like this: enum Category { case music case software case ebook } So when they used it in the function for the API to make the proper search, they just use it in a function like this: func search(category: .ebooks) That's just a simple example. There are many other uses for enums that make code easier to read that isn't just for games.
That's great to know. I really appreciate you taking the time to explain 
Yes, I have a function call contentCreate, and it is loaded on scene load, in there I made the button SKShapeNode and I did give it a title using: button1.title = "buttonOne" Okay, I'll remove the parentheses. It's actually acting like node.name isn't a valid call too. I thought it was. 
Done. Enjoy!
[removed]
im going to do this. i started poking around with RoR. im looking into blockchain technology now, and DApps, and I think thats where the future is, so im going to pick up JS and get a handle on web development. I found myself asking the question for th first time yesterday "why am I developing native mobile app? what am I doing that cant be done as a web app? what am I doing that couldnt be done in a more universally adaptable manner?"
HTML and CSS are super easy to pick up compared to Swift, IMO. Treehouse has some great 8~ course that take you through building a webpage from scratch which gives you a great foundation which you can easily expand on since you already have experience. for bonus points, when testing your web page, host it on your on RoR local server. learn a little front-end/back-end at once. you wont be a master, but youll know enough to be able to really dive in right away if you ever need to
also we will became new with swift 4 😂😂
Well, I don't want to dissuade you from an adventure, but I wouldn't bet money on DApps being the future. Blockchain is a very niche area and I think you'll find a lot of what you learn there (aside from being _very_ complicated) isn't applicable in day-to-day application development. Native mobile apps often have better performance, first-class support for new technologies, and a better user experience. If you want to develop a responsive website that *acts like* an app that's certainly your prerogative - but in my experience, well, it's not a great experience. :-)
Yes
awesome just picked up hacking w/swift &amp; pro swift
I wasn't talking about BLE you dumb fuck, I was talking about CoreBluetooth. The fact that ble is designed for lower power doesn't mean the CoreBluetooth APIs can't be designed better with, among other things, timeouts for the various queries like discover services, etc. 
Thank you a lot for this. For the record. It has to be a class with data right? I am trying to figure out what it should include and don't really know. Can you help expand on this please a bit? :)
Happy cake day! I'll just it this day in the calendar and come back next year as well :)
In your defense, swift blurs the lines a lot. In most languages, enums are basically a set of constants with integer values. Nothing more. In swift, stuff like associated values allows you to use enums in a way that people might traditionally associate with other data structures. 
For anyone wondering if this is worth it, it definitely is. I bought it full price and it was the best $30 I've ever spent. :)
I did one of the demo webinar's you put on and it was great! I'm curious what the "license" for the Hacking with Swift code is?
Awesome! I was thinking of putting the examples in a private github repo, and pulling a snippet when I need it. That way I don't have to worry about rewriting an example or putting in a copyright/attribution comment (or trying to figure out what license a stack overflow answer is).
That's perfectly fine – go for it!
Working on updates for my iOS apps, Letterby and Puzzleby, both written entirely in Swift.... my next project is a set of review games for schools... I'm a high school teacher IRL, so its something I can use! 
I was playing around with it last year, you can copy this into a playground https://gist.github.com/RaghavMangrola/dda91aac0a3f7f1ef3d201261bbbccde I made it 8 months ago so you might have to update it to Swift 3
Storyboards and XIBs are basically just serialised versions of the UI classes. The app will deserialise each component you've added to your storyboard and instantiate it's classes and pass in the attributes you've set in IB. You can just as easily create all these components purely in code yourself. There's absolutely no need at all to connect them to your view controllers using IB. If you look at UIView, it has an init method that takes an NSCoder as an argument. This is the init method used to create instances from IB files; your IB attributes are read from the NSCoder. IB is a great tool for people who work well with visual tools. It's also great as a starting point as it does a good job enforcing the platform interface guidelines. That said, I'm probably going on 8 years now since I left IB behind and went with pure code. None of the apps I work on have storyboards or xibs at all. Ultimately it's whatever you're comfortable with. 
Try this in Playgrounds http://pastebin.com/AiqXAs6H To see the results open the Timeline in the assistant editor on the right 
/u/twostraws Is it maybe possible to add iDeal as a payment method? I know it is much more common in America to pay by CreditCard / PayPal but in the Netherlands we mostly use iDeal. edit: after attempting with PayPal i'm not allowed to until I add a CreditCard to my PayPal. Is there maybe another way to pay? 
Firstly: You don't need to set up the connections at all. Some views have no custom user interaction and does not change its properties. In which case you do not need to reference them in code. For example, a stack view may only exist to help layout other views. If you never change its properties or contents at run time you can add it to a storyboard and never hook it up to anything at all. Secondly: When you do need to access a view at runtime, to e.g. set its title or act to some user input or whatever, you need some way of referencing a view. You then have (at least) two options: A) You create the view in code and assign it to a variable. You access that variable whenever you need to. B) You create the view in IB and you hook it up to the code through the outlets. You can the access the variable that's backing the outlet whenever you need to. (There are also some options of "walking the view hierarchy" and accessing the view that way. Or using tags, or other fragile but dynamic runtime tricks you can use)
This is a very valid question and the first WTF we face when building apps coming from other platforms and languages. I am not saying interface builder, outlets and actions are not cool, they are indeed very useful, but there must be an easy and natural way of doing things without the need for training wheels at all times. Something like this: var myButton = Outlet('myButton') as! NSButton myButton.target = Action('onClick', for: .click) In Android it is as easy as: Button myButton = (Button) findViewById(R.id.myButton); myButton.setOnClickListener(new OnClickListener() { ... }); So yes, what we need in Swift is a "findView" method which could easily be called "Outlet" using enums instead of literals just like Android. Believe me, it would make our lives a lot easier. Control+drag is the lest intuitive of all the user interactions for a n00b.
Happy cake day! Thing is, the input is not coming from the command line, but from another application. I might be a bit over my head here.
Got 'Pro Swift' with help of friend, thanks for the discount!
I guess I'm not sure what you're asking: 1. "Why must Interace Builder rely on the programmer to make connections manually, rather than detecting them automatically?" 2. "Why must the programmer rely on Interface Builder connections to manipulate views loaded in a Storyboard?" To answer the second question: I suppose you could always locate the views loaded by the storyboard by traversing the view hierarchy in `viewDidLoad()`. I don't know why you would do this, though. Making the connections in interface builder seems much easier. You can also programmatically add or remove subviews to your heart's content, after the storyboard has been loaded. Before we had storyboards, you could initialize an Interface Builder .xib file and pass a pointer that would get populated with the document's top-level objects. (That API probably still exists, but I haven't had any reason to use it in a long time)
iOS requires compiled code otherwise you'd be embedding a whole runtime in your binary. Check out https://github.com/dropbox/pyston, if you have your heart set on Python. You should probably just use Swift and save yourself the headache though. 
&gt; iOS requires compiled code otherwise you'd be embedding a whole runtime in your binary. iOS does not require compiled code. There are a number of app frameworks that utilize dynamic languages then either bundle a runtime (eg Corona) or rely on JavaScriptCore (eg NativeScript). There is also at least one framework, RubyMotion, that compiles a dynamic language into native code as well. Bundling a runtime on your own, like OP wants, seems like it'd be a pretty big hassle, though and python isn't really designed to have a small runtime footprint like some other languages (specifically Lua).
Wut? No. 
Yes I know Swift and Python. I am trying to use Tensorflow within an IOS application, from the looks there is a community made Tensorflow library for Swift.
Okay, so where can I read about that? Are there any tutorials about it? I can't find any
What database are you hosting the pictures on? 
Okay well those are local storages. You can't know what's saved on a local storage without having access to that physical device. Also why does it matter what they post if they're the only people who can see it? 
I have read from your other comment that you have not even chosen a database. Why do you need to know how to do this right now? There's 1000 other hurdles first. Also, why does it matter what people post if the app isn't social? (judging from you mentioning CoreData, which is just for a single device).
What does serialized in this context mean?
Not OP but what kind of databases are good for non-local storage?
Yep. UIViewController will automatically look for a matching xib and deserialises it from XML into a view hierarchy for you. Nothing inherently special about a xib, it's just kind of writing the UI code for you using a higher abstraction. 
You need a backend, either your own or a backend as a service like Firebase. Apps read and write from the backend and share data that way 
Oh, I've heard about Firebase. Thanks for your help.
After a whole day I figured it out. My target is not a command line tool, so I couldn't use readLine(). Chrome sends the length of the message as the first 4 bytes, so I had to skip them. let standardInput = FileHandle.standardInput standardInput.readabilityHandler = { pipe in let message = String(data: pipe.availableData, encoding: .utf8)! let start = message.index(message.startIndex, offsetBy: 4) NSLog(message.substring(from: start)) } Swift is hard.
You can iterate through the views to find the pieces. There is a field called tag that people used to do that. I see no benefit there over outlets. 
You should be able to use ModelIO to load Wavefront files, see for instance http://iosdeveloperzone.com/2016/05/10/getting-started-with-modelio/ [I have no affiliation with this site and haven’t even read the link]
You can find it on kitura's website. In this case you go: `http://www.kitura.io/ -&gt; API reference -&gt; kitura -&gt; RouterResponse -&gt; redirect`. This if you know what you're looking for, otherwise you better of just searching on the web or asking in places like this :)
I don't really understand what you're trying to say, if the data is on the server side already, then can't you just render the other template with that data as its context?
If you have a pretty good grasp on swift and OOP then using UIKit should be fairly straightforward. Honestly it doesn't matter whether you're using swift or obj-c. Just start looking through the docs of UI elements you want to manipulate and learn their editable properties. Once you know how to manipulate UI elements to your liking, start working on learning CoreGraphics to take it a step further. Eventually you'll get to the point where you can create your own custom UIViews and/or UIControls. https://developer.apple.com/reference/uikit [edit: added uikit docs link]
I don't know if Apple has an official guide but here is Android's which may help you understand some basic concepts about colors, light, shades, text, etc. https://material.io/guidelines/ The best advice is to use Google Images, search for stuff you are interested in and copy/steal/improve everything you like. Also start bookmarking all designer sites you find in your wanderings on the web, whenever you see a good looking site file it under the "Pretty' category so you can go back for inspiration. Places like dribbble.com themeforest.net even deviantart.com can help you find inspiration. It's all about colors, space, size, light, shades, all finely put together in harmony. The more input from the pros you get, the more your eye will slowly get trained to detect even a pixel of separation or one more point in rgb to reach perfection. \* Ok, found these interesting links from Apple: https://developer.apple.com/design/ https://developer.apple.com/design/tips/ https://developer.apple.com/ios/human-interface-guidelines/overview/design-principles/ 
I prefer IBM's Sandbox: https://swift.sandbox.bluemix.net.
I wrote a whole book on server-side Swift using Kitura, called [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift). If you want to save a little money, you can download my free [Natural Swift](https://gumroad.com/l/natural-swift) video and you should automatically get a $5-off discount code emailed to you.
I don't think it's amateurish the design was made that way for a reason
You spelled beautiful wrong.
Just trying to give honest feedback :) As an iOS developer who is currently looking for an UI designer, I was put off by the fact that you only show one project even though you wrote about having 5 years of experience.
Yes I'm aware, currently working on adding case studies as we speak :)
I'd seriously be happy to do work with you on this :).
I have the same problem. :/
About pretty designs: follow this Nick Babich, his posts are amazing : https://uxplanet.org/@101 As for how to put all these complex views idk. I'm also searching for that in my question here: https://www.reddit.com/r/swift/comments/5vjo9i/guidelines_for_designing_complex_custom_views/
You have to turn on fuzzy autocomplete in Xcode settings.
I use AppCode.
What shortcuts do you miss?
I had the same problem but I forgot how I fixed it. I was eventually able to open the assignments in Preview. I'll update once I remember how. Edit: try clicking the cloud button then opening that
I'd be happy to help too. You can look me up on LinkedIn, and if you like what you see feel free to DM me.
I have "class DetailViewController: UIViewController {" in DetailViewController.Swift &amp; "class ViewController: UITableViewController {" in ViewController.Swift
This worked, Thank you!
Thank you. This is helpful (I already had the files but hadn't't even noticed he included his actual code in there). There are bits I understand, and bits I do not. Hopefully as I go with these projects and guide they become easier to understand. (:
Have you tried AppCode?
you're using the assignment operator in a while statement should start off like -&gt; while numberOfSwitches == 0 *edit -what your code is trying to do is store the value of 0 inside numberOfSwitches instead of checking to see if the value in numberOfSwitches is equal to 0
Great job mentoring is fantastic - pity you aren't on uk time 
It's part of Xcode and let's you debug your code as you run it. Alternatively, you can also start with a few `print(...)` statements in places to begin your detective work of finding your issue. I haven't done the HWS guides/tutorials but you should step through your code and see if you are getting the values you expect at each stage. ...It would also be helpful if you posted your code to an online repo for others to check out.
It's a big performance impairment for sure, even more so when you account for all the SourceKit crashes etc. But, I still feel slightly more productive because of Swift advantages over Objective-C (emphasis on feel, it's not empiracally backed). At the end of the day, if I was forced to go back to Objective-C because it really was that unproductive to work in Swift due to the bad tooling we have right now, I would be so pissed/demoralized to be back writing Objective-C that it would probably further impair my productivity.
What features of Swift do you feel make you more productive compared to Objective C?
Maybe you need a tool that helps you decide when to refactor vs. when to rewrite ;-)
Any recommended readings or tutorials? I'm curious to try this out, to at least get a better sense of what IB is doing behind the scenes. 
I think I got it! If I do While numberOFSwitches = 0 It's like when I initially set up the variable Var numberOFSwitches = 0 "like assigning it to 0" But I do not want to assign it again to zero I want to check and see if it is zero. So == Will say While numberOFSwitches "is equal to 0" as in comparing number of switches to 0 This sound right? 
Hmm I attempted a go at it, but I believe I have to stick within the override func draw for the hw. Im thinking that I can make a delay of each curve to show up in the screen, but I tried doing that just now and it doesn't even show up after the delay time. Any ideas? DispatchQueue.main.asyncAfter(deadline: .now() + .seconds(20), execute: { let curve2 = UIGraphicsGetCurrentContext() curve2?.setLineWidth(1.0) curve2?.setStrokeColor(UIColor.green.cgColor) curve2?.move(to: CGPoint(x: 31, y: 150)) curve2?.addQuadCurve(to: CGPoint(x: 280, y: 381), control: CGPoint(x: 270, y: 160)) curve2?.strokePath() }) 
Because I write great code from the beginning ;) But in all honesty, after using IntelliJ for work for a long time, I always feel Xcode is very lacking in many "magic" tools (stuff like flipping an IF, replacing multiple function calls for a variable, etc). However Xcode still does compilation analysis better, and you can use it to debug UI and memory graphs.
I like it. Since October or so it's been decent enough at Swift for me to start using it again. I guess it's not for everyone but Xcode is bad at refactoring and navigation in general for me. I use both Xcode and AppCode because they each have different strengths and weaknesses.
You are correct
I would be happy to help. I work on a pretty large iOS application and have always wanted to mentor. Send me a DM! 
Get the data and pass it to the template as context: let stats = ["january": 2150, "february": 3160] response.render("index", context: stats) Then in the template, use double curlies (mustache or handlebars): &lt;p&gt;January {{stats.january}}&lt;/p&gt; Ref: https://github.com/kylef/Stencil
This is exactly what I was looking for! Thank you so much
Yeah, I do have a concern. I am starting project 2 tomorrow (at work tonight), and I am typing all of the code. Some of it makes sense, some does not. I hope the majority of this isn't just writing down code without it making sense lol. 
I treat XCode as my iOS Project Manager and AppCode as my iOS IDE.
There's a Command+Shift+E shortcut for changing the variable name within the scope of a block or file--doesn't work across files, though. There's also Find and Replace within a file or the entire workspace. It's not as good as Xcode's ObjC refactoring but that's never stopped me from using Swift. Also, as the other guy suggested, practice good naming from the beginning.
Treat the sound file as any other file and send/receive it using URLSession upload and download tasks. Geolocation is a bit more complicated and for that I'll refer you to the amazing Ray Wenderlich tutorials: https://www.raywenderlich.com/136165/core-location-geofencing-tutorial Here is a nice guide about sound recording: https://www.hackingwithswift.com/example-code/media/how-to-record-audio-using-avaudiorecorder And here a link to the AVFoundation: https://developer.apple.com/av-foundation/
Sure you could use URLSession if it's not instant communication but if you need immediate notifications then web sockets would be an option. I really don't know if Apple has a messaging service, perhaps iMessage? Here is a multipeer demo from the AppCoda guys: http://www.appcoda.com/chat-app-swift-tutorial/
I'm working mostly with Javascript, and it does not have any suitable autocomplete or "refactor" tools at all… So, can't automatically rename a variable? ROFL!
You are using Xcode for JavaScript?
Well, there is quite a lot of explanation around the code, so you should hopefully be reading that and taking it in. I encourage you to complete the homework at the end of each project. If you bought the premium version, the guidebook gives you revision notes and further discussion of key points, and again I would encourage you to try the challenges I there to make sure your new knowledge has the best chance of sticking.
When you look in the project navigator, do you see the Content folder with images inside? Did you make sure it was yellow rather than blue? When you reached the step that had you print out the images array to Xcode's console, did you see anything? If you continue to have problems, you're welcome to email me your project files as a zip: paul@hackingwithswift.com. 
How'd your test go? Try Readdle's Calendars 5. It does what you're looking for. 
&gt; feel a little bad for you that you're working on a codebase that has to be refactored so much If you're doing it right, every codebase is evolving and improving with every change. The most beautiful codebase also needs major refactoring when adding/removing features, for example.
Try [WebStorm](https://www.jetbrains.com/webstorm/features/), very effective IDE for javascript.
See, I disagree. I like hyper intelligent autocomplete which not only saves me keystrokes, but also time spent looking at documentation or code. I like compiler errors shown inline with my code rather than in the console. Those are the features I look for in an IDE, as they actually have a significant impact on my productivity. Neither of them really save me keystrokes, but rather prevent me from wasting time by changing contexts since everything is already in one place. I don't think an IDE's job is to save you keystrokes.
So no. In your view did load, use the table view variable and do: tableView.dataSource = self 
UINavigationBar already supports this: https://developer.apple.com/reference/uikit/uinavigationitem/1624946-leftbarbuttonitems
Set a breakpoint. At the end of the viewdidload function, click on top of the line number. Clicking on a line number will set a breakpoint. At this point, the app will stop as soon as it hits the line number where you set the breakpoint. When it does that, it will show the debugger window that's on the bottom of Xcode. Type in po items. This will show you the values of the variables. Also, you probably forgot to connect the table view delegate and data source in storyboard. Right click drag from the table view and release it on the yellow circle that's on top of the view controller and select delegate and data source from the little window that pops up. 
I won't argue the features you list are useful, so I agree with you on that. But doesn't change the fact that automated refactoring saves you time, i.e. increases productivity. Whether you think it's an IDE's job to do so, or whether it's something you look for in an IDE, doesn't matter. &gt; I like hyper intelligent autocomplete which not only saves me keystrokes &gt; Neither of them really save me keystrokes You seem to disagree with yourself
Well it honestly looks like it was made by an iOS developer who just learned to make their first app. The icons are cheap, the gradients in the Join button looks out of place. It just looks like a terrible thing to put on a website that dedicates its business to UI/UX. I would remove it and be embarrassed about it. Saying you and your friend were rushed isn't an excuse, and if that's the case, make a new design. And you have grammar errors in that case study page too. 
Alright, I can come to the conclusion that it's useful for some, but not me. Re contradiction: bad wording, I meant that autocomplete's value is mostly in the lookup than the actual pasting.
It's easier to do with just `viewController` that has `navigationController` - like that class ViewController: UIViewController { var someButton = UIBarButtonItem() var colorButton = UIBarButtonItem() var hamburgerButton = UIBarButtonItem() override func viewDidLoad() { super.viewDidLoad() setupNavigationBar() } private func setupNavigationBar() { navigationItem?.setLeftBarButton(someButton, animated: true) navigationItem?.setRightBarButtonItems([colorButton, hamburgerButton], animated: true) } }
But I would like to apply this toolbar for every view I will create. Than I have to do this every time? Or what is the best way to do that? 
It should be set up on `navigationItem` of `ViewController`, not `navigationController`. So `navigationItem.setLeftBarButton(someButton, animated: true)` is enough.
I would say subclass `UIViewController` - then do it the way i previously wrote and subclass this `CustomViewController` in every `viewController` that you want that feature in. Like so class BaseViewController: UIViewController { var someButton = UIBarButtonItem() var colorButton = UIBarButtonItem() var hamburgerButton = UIBarButtonItem() override func viewDidLoad() { super.viewDidLoad() setupNavigationBar() } private func setupNavigationBar() { navigationItem?.setLeftBarButton(someButton, animated: true) navigationItem?.setRightBarButtonItems([colorButton, hamburgerButton], animated: true) } } class ViewController: BaseViewController { // here you will have 3 items in navigationbar } EDIT: Thank you /u/Sebaall for noticing that you can use `navigationItem` directly.
This only means, that you shouldn't use `navigationItem` if you don't embed your controller into `navigationController`. `UINavigationController` checks `navigationItem` of currently displayed controller and uses it to set up title, buttons etc. in navigation bar. This way each controller in navigation controller's stack has its own navigation bar buttons etc. `UINavigationController` only has `navigationItem` property because it subclasses `UIViewController`
Thank you very much! I will try it out! 
I'm sorry - you are correct, sir!
I like Sublime.
By the way, you can take screenshots by pressing the home button and the lock button at the same time.
Seeing there were no dedicated page for SSS, I have created Server Side Swift Community for newbies, professionals and experts to discuss, post fresh news and tutorials, share tips and tricks. https://www.facebook.com/ServerSideSwiftCommunity/ Let me know what you think.
[removed]
Change the variable name. Build app. Receive big long list of red issues. That's pretty much how I figure out what needs to be changed. Such an odd feature to not have. 
[removed]
[removed]
of course it's possible, but no one would go through such trouble when you have amazing game engines readily available everywhere 
The libraries supporting swift are for macOS or iOS. Anything is possible, but not too easy given the circumstances. 
So you mean like coding Pixelmator?
Hahahaha, the biggest fail ever 😂
Except that it gives you warning that you're not modifying variables you just typed and sourcekit crashes all the time :(
Well, it's pretty hard to do that one differently, maybe except only trigger those warnings once you hit compile. And, yeah, SourceKit does crash a lot.. I'm confident it will improve over time though.
You can code in swift even in Notepad.
&gt; Swift limits the scope of type inference to a single expression or statement... Besides the reasons mentioned in Apple's document, I think this also improves readability of code, because you're doing type inference while reading, too. It may have annoying consequences when writing code (like the ones in the article), but it makes reading code simpler. Take the example let x = 42 foo(x) If Swift were able to solve this, you'd always have to think of x's type as "any type that can be converted to from an integer literal", and once you get to the line `foo(x)`, you can backtrack and "resolve" x's type as whatever foo takes. With the way Swift currently works, you can just think about the first line: "there's no type information here, so it'll be the default, which is Int". The following `foo(x)` line might not work, but it's very easy to figure out why, the compile error is clear enough. Being able to resolve types easily in your head while reading is way more important when the code is longer and more complicated, obviously. Same is true for multiline closures: Because Swift forces you to write down the return type, it's way easier to process mentally when reading than if you'd have to infer the return type from the return-statement backwards. (At the same time, if the closure is just one expression, it's usually simple enough to infer the return type while reading). The type inference examples in the article were quite simple, but it's fun to think about what could happen with multi-statement type inference. For example: func foo(x: Int) -&gt; Int { return x } func foo(x: UInt) -&gt; Bool { return true } func bar(x: UInt) -&gt; String { return "yay" } let x = 42 let y = foo(x) let _ = bar(x) print(y) What does this print? Because `bar` only takes `UInt`, we can infer `x` to be an `UInt`. So we know that `foo(x)` uses the `UInt` overload, which produces a "Bool". So this will print "true". Now some more fun: What happens if we add the overload `func bar(x: Int) -&gt; String { return "wot" }`, without changing anything else? All of a sudden,`x` will be inferred as `Int` because that's the default, the `foo` call will use the other overload, and `y` will "magically" change it's type to `Int`! So it'll print "42" now, just because we added another overload. As another example, consider this: let x = 42 if someCondition { someFunctionTakingUInt(x) } else { someFunctionTakingInt(x) } This is unresolvable (at least if you don't allow x to have two types at once, which would be madness, or do implicit type conversions which swift doesn't do for other reasons). What would you expect the compiler's error message to be? "x can't be Int and UInt at the same time" or something like that... at which line though? Just a red x at the "let" line would be very strange, there's no error in that line! Maybe you'd have multi-line-errors :-D. Fun to be had for everyone, especially beginners! I think it's quite easy to see how type interference that's "too powerful" can lead to code that's super hard to read. (It's also easy to imagine why the types may take very long to compute, or may even become uninferable). 
Could you share a code sample? I'll see what I can help with.
Okay, so I tried this solution and I got this: class MainViewController: ToolbarViewController { etc... } import UIKit class ToolbarViewController : UIViewController{ var someButton = UIBarButtonItem() var colorButton = UIBarButtonItem() var hamburgerButton = UIBarButtonItem() override func viewDidLoad() { super.viewDidLoad() setupNavigationBar() } private func setupNavigationButtons(){ someButton.title = "S" colorButton.title = "C" hamburgerButton.title = "H" } private func setupNavigationBar() { setupNavigationButtons() self.navigationItem.setLeftBarButton(hamburgerButton, animated: true) self.navigationItem.setRightBarButtonItems([colorButton, someButton], animated: true) } } And I set the scenes's class to ` MainViewController` but when I run it I can't see the toolbar. Sorry I am a total noob int this. :/
I agree with you, more specifically: 1. I agree 2. That's what code reviews are for 3. That's what code reviews are for I don't want to be mean, but I benchmark my coding performance against coding with nano/notepad. Anything better than that is just a gift.
I reckon I'm about 1/3 as productive in swift as objective c owing to the dog slow compiler, the damn editor warnings overlaying the damn line I'm trying to fix and the helicopter parenting type checker. As for refactoring - you get good with search and replace.
Change your "Value Changed" action to this function: @IBAction func onSwitch(_ sender: AnyObject) { self.view.backgroundColor = self.backgroundSwitch.isOn ? UIColor.black : UIColor.white } self.view and self.backgroundSwitch can be changed to reflect your naming.
&gt; Readdle's Calendars 5 Thanks, that is a cool app to model off of. But, I'm not really looking for an app to do this, I'm trying to create one.
;) thatsthejoke.jpg
I definitely understand OP's frustration, but I think they're complaining exactly of the issue Swift proposes to fix by forcing you to use explicit types. I think of it this way: You are forced to use types, but just once. After that, the type inference will take the lead (until you need to cast types, of course). In my opinion Swift is behaving exactly as it should.
True. My thought would be clearing the outlet/action references from IB, and re-wiring them. And, in the original snippet, if/else would suffice.
Both ways are ok, a list can be split like a 2D array by N items which may allow your tiles to be saved in a db if the need arise, or you could save a 2D map in a text file in json, yaml or even your own format.
Backend-For-Frontend =&gt; you mean Middleware ;)
1. Shift lines: there is move lines shortcut 2. Duplicate lines: easy to add with Xcode extension. Use it everyday 3. Multiline column selection: I think this can be done with mouse + extension. A lot of advance editing features can be implemented with Xcode extensions. This WWDC will make extensions even better. 
ITs a typo I used UIcolor.white in the second statement 
I fix iT by using the rgb values 
Hey r/swift! I made a Swift version of [Yaroslav Zubko](https://dribbble.com/Yar_Z)'s Dribbble shot https://dribbble.com/shots/3217240--14-Sub-Level-Slider Check out the source code https://github.com/saoudrizwan/CardSlider And let me know what you think!
What a legend. Awesome!
I have been ardently waiting on this course. I started the iOS 9 version, but decided to wait for iOS 10 and Swift 3 update. I am going to write the lecture notes for the course with some added details. For anyone interested I have lecture 1 notes up already. Perhaps it can be useful to you. Any feedback would be much appreciated. Link https://medium.com/@seabjackson/cs193p-developing-ios-10-apps-with-swift-lecture-1-notes-250d93e5bf33#.3zwa43alf
I think I I like it. Good job 
Beautiful! Source?
Nice!
https://github.com/saoudrizwan/CardSlider Thanks!
Thanks for introducing me to extensions, I'll look into these!
Thank you man!
Thank you!
Download the project and test it out man! I promise it's not :)
I was speaking loosely because I wasn't at my computer. The method I'm referring to is presentViewController(vc, animated: true, completion: nil) I believe you should call this on the main thread using DispatchQueue.main.async {}
Ok, so question for you. I just finished my "swift for non-programmers" course. I learned some good stuff but I still feel like I'm missing a lot of the basics. I'm interested in taking this object oriented design course you recommended but I'm concerned I'll be confused. It looks like he uses java in this course to show examples of OOP but I fear after starting with Swift and jumping into java will make me confused. Don't you think?
AppCode is our friend.
The code in the tutorial is creating the buttons with a for loop. If you want to use unique images, create a index variable that can increment as the loop runs. Then make your images have the same name, but add a number on the end "imageName0", "imageName1". Then you can loop through them and add the index number to the name: var i = 0 for 0..X.count { btn.setImage("imageName \(i)", for: .normal) i += 1 } I'm skipping all the selected or not code, but this will hopefully get you started. Good luck!
I want a user to be able to input time slots into a schedule in the app where they can drag and drop time slots on a calendar, similar to the picture from the post.
It's a bit misleading that you posted the dribble shot instead of an actual recording of your app.
Currently Swift doesn't work on Windows, so not right now. Once the Swift compiler and standard library is ported to Windows than yes.
I'm specifically referring to the BFF pattern described here https://www.google.co.uk/amp/s/alexandreesl.com/2016/03/18/backend-for-frontends-a-microservices-pattern/amp/
Just because one guy did something you don't like doesn't mean native prototyping is a bad idea. We do it at my job with great success. 
Build one, or google for a built one you can use. Side menu is not a native UIKit component like UINavigationBar or UITabBar...... 
The code is a bit complicated since it deals with UIKit Dynamics. Do this: look up some tutorials over 1) UIKit Dynamics and 2) UIPanGestureRecognizer, to get a feel of what they are and how they work. And then try to go through my code and don't hesitate to pm me for help! 
Sorry I dont understand, can you elaborate please?
A demo of the actual project is on the github page and it's pretty much identical to the dribbble shot. I thought it would be a better idea to share the shot that inspired me to make this project in the first place. 
Most users would find swiping right or left much easier than Card Slider's interface, but for those few use cases where there just needs to be more than 2 options (like and dislike) then I think this is a good approach to that problem. In my example, I'm using "liked it" "loved it" "fine" etc, but I'm sure theres much more practical and useful options for other use cases. Thank you for the feedback!
Thank you! The designer of the shot that inspired me to code this is truly a genius of unique new interface designs. Check out his dribbble page: https://dribbble.com/Yar_Z
Your cards seem to tilt the wrong way, or is that based on whether you drag them from the top or from the bottom?
Yes, the cards just use an attachment behavior with an anchor to the center of the screen. So basically the way the card pivots depends on how the user interacts with the card.
Not only is it not native, Apple went up on stage and gave harsh commentary on them in a 2014 WWDC design presentation.
Hi! Just wanted to say I appreciate what you havr done, Im a complete beginner and learning from hackingwithswift loving it so far and wishing you all the best for your conferences.
That's a really good idea! I can see that working on a 6 plus or 7 plus device, but yeah like you mentioned other smaller devices don't have that real estate. Thank you for your input!
Make a public String property in your SecondViewController. When you insitantiate the second view controller in prepareForSegue, set that property to the text of the UILabel.
Yes, I saw that one. None of the solutions seem to fix the problem. It has some weird functionality when trying to setContentOffset everytime in the scrollViewDidScroll. Not sure why it is so incredibly hard. 
Internal things are "internal" to the module, so no, those won't be accessible to the user. You should make as many public classes as is needed to allow doing the thing your framework is intended for. There's no reason to limit yourself to one class, but if your framework is simple, one could be enough. You don't need to make anything privat, but you should use access control in your framework like in any other project. Eg., if some method in a class should only be used from within that class, and not from anywhere else in the framework, make it private. Access control isn't just for your users, but also for yourself as the developer of the framework. An SDK is not the same as a framework. SDK stands for "software development kit". The iOS SDK is the combination of software and frameworks that you get from Apple to develop for iOS. So unless you're rolling out your own set of hardware, you're probably not developing an SDK. As for best practices - look into Cocoa pods and/or Carthage if you're not sure how to best publish your framework. With code that's used by other people it is even more important to name your classes and methods well, and have good documentation. 
It's good to reiterate even for devs who are familiar with the listed crashes/problems. 
Looks like a list of reasons to use Swift and not to use Storyboards. 👀
In your example, your errorHandlingDelegate is unassigned, so the showAlert2 function won't fire. Is there any way you could share a little more code with us?
I'm new to programming entirely and just started doing some tutorial projects and this one looks neat!Hope to try it in the future! Any tips you have for me?
Don't let a big programming task scare you - break it down into smaller tasks so you don't get overwhelmed. Also don't be afraid to ask others for help!
If you use Xcode, there's a way to achieve the same goal in a different way, which you may not know about, without any print statements! It works like this: In the line you want to print something, create a breakpoint (by clicking the line number, you should get this blue arrow-type thing). Double-click the breakpoint (or right-click -&gt; edit). Check "Automatically continue after evaluating actions". Click "Add action", and add a `po whatever` statement; this'll print the whatever variable. You can add multiple, of course. That's it! When your code passes the breakpoint, it'll print whatever you need. Advantages over using print: - does not pollute your code - has absolutely zero effect on non-debug builds - you can disable and reenable with a single click Disadvantages: - slower - a little more complicated to create, but not by that much By the way, if you did not know that: in the same break point settings, you can add conditions for your breakpoint, which can be extremely nice. For example, if I have 100 "Person" objects on which some method is called, and I know a certain instance (let's call it "Max") causes issues, I'll do something like `name == "Max"` in the condition. No more problems with tons of breakpoints to step over :-) But, to answer your original question, about the debug condition. You can do that at compile time, too, see this Stack Overflow question: http://stackoverflow.com/questions/24003291/ifdef-replacement-in-swift-language Once you've added the compiler flag, you can implement your print function like this: func customPrint(string: String) { #if DEBUG print(string) #endif } If you use a compile time check like this, the compiler will optimise the custom print call away, from a performance perspective it's as if you never called it (in a release build). To answer your question about the "if debug = true, then print" - even if you don't do a compile time check, the time that comparison takes is absolutely negligible in comparison to how long the print takes. Having a lot of print statements can have a performance impact, but for you to notice the if checks, you'd need an absolutely ridiculous number of them (like, millions per second or something like that). 
If your project has grown to the point where debugging print statements are becoming a concern, then it's probably time to switch to a logging framework.
No argument there; in fairness this was a feature I was prototyping for myself away from the main development branch. Business priority changed and I was asked to integrate it sooner than expected. Yeah I could probably take something away from this, but also, shit happens.
...hmm, wouldn't be anything Apple aren't doing... ! Swift is evolving into a great language; those growing pains are a little hard to avoid aren't they? It'll be worth it though. Got it fixed up, in the end it just needed a bunch of ugly casting to get around some missing type inference :-)
I learned so much in one single comment. Thanks.
Thanks! A good place to learn swift is Apple's official guide: https://developer.apple.com/library/prerelease/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309
I don't understand, could you please elaborate. Thank you
The first JSON structure you have is 2 dictionaries. The curly braces separate put each "object" that use similar data layouts. You can see the have the same key. This would returned as an array of 2. So if you would need to access the first object, it would simply be the first set of curly braces you see. The other example shows nested data which is simply nested arrays or dictionary's. These can all contain the key as long as it's not in the same curly brace.
No, it has some somewhat complex code such as closures in animations, multiple classes, etc. I suggest learning the basics of Swift using Apple's free iBook first.
What?? You could just make a graphic follow the user touch position if you want to recreate the touch dot in code.
Have you tried reading "The Swift Programming Language" iBook? It's a great read with some helpful 'code' only examples but won't help with UI. 'Hacking with Swift' and the Ray Wenderlich 'iOS Apprentice' book will help you learn how to connect your code with UI design. Bonus: not sure where I found this website a while back but it was helpful trying to understand the fundamentals: http://brettbukowski.github.io/SwiftExamples/ Hope this helps.
Set intersection count &gt; 0. Or contains if its just a single character.
Hi you're probably looking to implement something similar to java's biginteger and storing and manipulating the numbers by storing them as strings or the like. A good link would be the following: https://beaunouvelle.com/large-numbers-with-swift-big-int/
Thanks 
Are you sure its this closure that is doing it? Are your delegate vars weak? Thats usually the other thing to check first.
no problem, that GPL license is pretty strict for commercial apps so i'm going with flac. opus is a decent codec if you want to go lossy compression, royalty free and bundle it with webm in a matroska container.
Yep, definitely made sure of that. I also verified that the function with the operation was the culprit by simply not calling it, and deallocation proceeded as normal. 
It's rare that I don't have [Stack Overflow ](http://stackoverflow.com) open in a browser when I'm working in any language.
4 of the 8 issues are gone if you don't use them.
Ok, this is cool. Would love to see an iOS slim sample client app though!
Do web sockets cost money to run?
Nice! Is websockets available in the free heroku plan or does it cost something to enable it? I'd like to make turn-based online games and would like to know. Thanks.
I know this is somewhat old (I ran across this while searching for something else here), but if you're still looking for help with this, you may want to try [SWXMLHash](https://github.com/drmohundro/swxmlhash). With that module, you could do something like: let indexer = SWXMLHash.parse(xmlData) for sitemap in indexer["sitemapindexer"]["sitemap"] { let loc = sitemap["loc"].element.text // do whatever with loc } It makes XML parsing pretty painless.
New month, new libs! These are all swift based libraries and we hope that you will find something interesting, not known library. We are constantly trying to bring you most interesting libraries for each month and we strongly encourage feedback and suggestions :]
The link's shot. Please give me another one. Attempting to shatter 4096 rsa. I don't care how long it will take. I just want to try.
 yes I know but, how do I update the value to print it outside?
Hi Jozemite_Apps! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/5wxa4q/critique_the_game_code_of_my_wall_of_trump_game/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
It is currently hosted on the free tier, so yes it is possible.
The first one could actually be 3, all Storyboard. Then you have the navigation one, that is probably possible to accomplish by in code as well. So maybe 3.5 out of 10. Still, if you dig into Storyboard-related avoidable problems, the list grows by a lot.
I'm glad you like it, thanks for reading! 
Really cool project! What are your opinions on different Swift web frameworks? I really like Vapour
Form Builder + Data Collection Framework Then I'll use that to build a character sheet generator.
Websockets are built on top of HTTP - you don't "enable" it via Heroku, you just add a an endpoint to your application which establishes a websocket connection. If you're curious about the implementation details (i.e. how the handshake works), [this](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/Writing_WebSocket_servers) might be a good read.
Why should the type always be declared? I thought it was preferable to let the compiler decide when possible. 
Thanks Dan, good to know because ten years ago not a single hosting provider had sockets enabled even before web sockets came to live. I've been living under a rock for a decade and catching up slowly having all the fun in the process. Gonna try some cool stuff like a poker game with this new toy I've found.
Use prepare(for Segue) in your View Controller. This prepares the next view controller if needed by passing certain data to it. //Put it in the first view controller override func prepare(for segue: UIStoryboardSegue, sender: Any?) { if segue.identifier == "SegueTo2ndView" { if let destinationVC = segue.destination as? 2ndViewControllerClass, let senderString = sender as? String { destinationVC.textValue = senderString } } } This is the function that is called when the segue is about to occur. Make sure you put the correct name of the segue identifier (which you can edit in storyboard by selecting the segue and looking in its inspector window). This is also safe as in it makes sure that the next view controller is the right class type and makes sure what you're sending is a string value. The 2nd destination view controller should have a variable called textValue (in my example) or give it some other name. This passes the string value to the 2nd view controller. In the first view controller, whatever triggers the segue, call this method. This sends the text of the UILabel and passes it to the 2nd view controller. performSegue(withIdentifier: "SegueTo2ndView", sender: theUILabel.text) So the way this works is that when the you're saying it to perform the segue, it sends the text of the UILabel, and iOS calls the prepare(for segue) itself and checks that the destination controller is the right class, and has the right variable, and that you're passing in a string.
Because Swift isn't like Javascript where the type will change whenever you change the value. If you declare a variable as var example = 0 //then example is and will always be a type 'int' example = 2.1 // this will throw an error // in order to make that work, you'd need to do the following: example = Int(2.1) // and this will just round out the 2.1 to 2 Swift is strongly typed and it's just good practice to keep to aware of your variable types. PLUS!! If you're looking into server side Swift then you don't have to deal with the majority of input sanitization from the web. Swift will stop your inputs from adding '} or ]'s when trying to hack your code. It's very useful.
I've created 2 games before in SpriteKit but now I've moved to non-game development, so that's what I'm learning right now. I've done 3/4 projects of Ray's iOS Apprentice and so now I'm doing the project I didn't do. Then I'm moving on to Ray's iOS 10 by Tutorials, and so forth the rest of the books since I have all of them.
I've also used Kitura. I'd say Kitura and Vapour are my two favorites. Perfect and Zewo seem kind of unswift-ish
Real-time matchmaking for games
Very interesting... thanks
THIS IS SO EXCITING
If you don't know what MVC is, where is a good starting point? 
What do you recommend for someone starting out?
As far as I know there is no Apple’s API to do any kind of charts, I have always used third party and I never came across anything.
Join Server Side Swift for topics on web frameworks, events and tutorials https://www.facebook.com/ServerSideSwiftCommunity/
boring bank application :(
Not really... most things you actually want to capture strongly. I'd only use `weak` to prevent reference cycles (as a rule of thumb). In general, you'll have this pattern with reference cycles: let closure = { useSomeObject() } someObject.methodStoringClosure(closure) // or: someObject.closureProperty = closure This leads to the someObject &lt;-&gt; closure reference cycle, and you resolve it by capturing `someObject` weakly using `[weak someObject]` in the closure. Usually, `someObject` will be `self`, which is why `[weak self]` is so common. Strange issue you're having there, maybe you can post some code of the method that creates the BlockOperation? 
Like 90% of all iOS tutorials. 
Great job 
Well I mean you could watch it. But this is a computer science course, and it's covering advanced topics no other course is. So you should probably have some knowledge and experience, OOP concept is one of them, and pass by reference/value, etc.
Site is down... Let me know when it is up :)
Where do you recommend a noob should start?
Use a library like https://github.com/lorentey/BigInt?
I'll try. But how do I install it into swift? 
You updated the count, but printed it before the closure completes. obsesrveSingleEvent's callback is asynchronous, meaning it will be called sometime in the future, and definitely not before the print statement is called. This playground should illustrate what's going on (using DispatchAsync to illustrate the concept). import Foundation import PlaygroundSupport PlaygroundPage.current.needsIndefiniteExecution var count = 0 DispatchQueue.main.async { count = 5 print("inside \(count)") PlaygroundPage.current.finishExecution() } print("outside \(count)") You can't print count synchronously outside the closure because it hasn't updated, yet. You'll need to use async programming techniques (such as PromiseKit) to make your asynchronous code *look* linear.
Working on a Data Editor, a simple tool to edit text based tables: https://github.com/kuyawa/DataText Also started researching about porting GIMP to Swift but haven't decided yet, if I go all in I'd create a simpler and more user friendly version. Also considering creating a Poker app with Kitura and Web Sockets. Too many things to do, too little time. Done: https://github.com/kuyawa/PokerDuel Oh, and I am looking for a job, if you need a prolific Swift developer please let me know, remote only, no resume so don't ask, only my github account, no phone calls for I am deaf, and no pics for I am a 50yro bald and fat bearded guy. Now, if you need a 15hrs/day coding machine, that's me, PM me.
I'm almost sure, there is one within Apple's internal framework. However, it's probably won't get released. I think what you are really looking for is a library that's going to be maintained from version A to version B of the operating system. `let work = framework.migrate(from:A, to:B)`, you are looking for someone to do the `work` either Apple or 3rd party developer. Since Apple is not in the business of maintaining complicated UI components(basic ones, yes). Your best bet is to look for a reputable Github user's project and well written code to minimize `work` if you decided to do it yourself. [Here](https://github.com/danielgindi/Charts) | [are](https://github.com/kevinzhow/PNChart) | [some](https://github.com/ArthurGuibert/FSLineChart) | [suggestions](https://github.com/Jawbone/JBChartView).
Starting off: try to just use async stuff as much as possible. But, to answer your question, I wrote some possibly pointless generic code for you: let queue = DispatchQueue(label: "queuename", attributes: .concurrent) func asyncCall(label: String, complete: @escaping (_ result: String)-&gt;()) { print("Started \(label)") queue.asyncAfter(deadline: .now() + 1.0) { print("Finished \(label)") complete("Something") } } func makeSync&lt;Parameter, Result&gt;(parameter: Parameter, asyncCall: (Parameter, @escaping ((Result)-&gt;Void))-&gt;Void) -&gt; Result { var result: Result? = nil let group = DispatchGroup() group.enter() asyncCall(parameter) { closureResult in print(closureResult) result = closureResult group.leave() } group.wait() return result! } let result = makeSync(parameter: "Sync", asyncCall: asyncCall) print("Sync done: \(result)") The `makeSync` function makes the `asyncCall` work synchronously. But the interesting part is the use of `DispatchGroup`. `group.wait()` will block until there are as many `leave` calls as there were `enter` calls. So it'll wait until, at some point, the `leave` call happens in the async call. You can use that to make your async call synchronous. And you can write a crazy generic `makeSync` function like I did when you're bored :-)
I actually think the professor did a good job explaining MVC. He explains it in greater detail in the second lecture. I think you can start there to be honest. 
I know I'm not answering your exact question but curious why you don't just use a dictionary. Can put and fetch from user defaults without any conversion that way. 
conform to NSCoding. you can then encode the object to NSData
In viewdidload add Field.delegate = self
The whole point is that the delegate is the other class.
What the poster is getting at is that you never set the delegate property. If you want foo to be the delegate of obj, you have to state obj.delegate = foo. How should the textField know that you want RangedNumberFieldDelegate to be its delegate? Magic? 
can you post your base struct?
I see. I had an error in my code. It's supposed to be self.textField.delegate = RangedNumberFieldDelegate(...) I tried it that way and setting it in the init of the class.
Glad I could help! Doing async calls with the standard APIs only can be a bit tedious. If you want to dive into it, I can strongly recommend PromiseKit; it gives you a toolbox to do all kinds of async stuff. First of all, your async method signatures change a little bit - instead of passing a completion closure, you return a "Promise", which represents some "future" result, for example (of the top of my head, don't nail me down on exact method names/syntax): func squareRoot(value: Double, completion: ((Result)-&gt;())) { ... } becomes enum SquareRootError: ErrorType { case negativeNumber } func squareRoot(value: Double) -&gt; Promise&lt;Double&gt; { return Promise { fulfill, reject in if number &lt; 0 { reject(SquareRootError.negativeNumber) } else { fulfill(sqrt(value)) } } } For a usage example, doing some operations serially works something like this: squareRoot(9) .then { result -&gt; Promise&lt;Double&gt; in if result &gt; 0 { return squareRoot(result) } else { return squareRoot(result*result) } } .then { result in print("Final result: \(result)") } .error { error in print("Failed with error \(error)") } An interesting part about this is that any error that might occur in the first line or in the first `then` is passed on to the `error` closure where you can handle id, but you don't need to forward anything manually. If the first `squareRoot` call fails, it will go straight to the `error` closure and not execute any `then`s. If you want to execute calls in parallel, you can do when(asyncCall1(parameters), asyncCall2(parameters)).then { result1, result2 in print(result1); print(result2) } These examples might look like a little bit much at first, but I think it's worth the effort.
Awesome. Thanks.
You're welcome!
I know lately that using `struct` is the "cool" thing to do, but according to Apple's docs, you should really default to using a `class` instead. It tends to complicate things like this for beginners, you shouldn't have to worry about efficiency when you're learning 😅 Just focus on writing code that works without lots of workarounds
 extension String { func hasCharacters(in set: CharacterSet) -&gt; Bool { return self.rangeOfCharacter(from: set) != nil } } ... let disallowed = CharacterSet(charactersIn: "0123456789.") func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool { return !string.hasCharacters(in: disallowed) } Or just let disallowed = CharacterSet(charactersIn: "0123456789.") func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool { return string.rangeOfCharacter(from: disallowed) == nil }
The one you want to create, or even a small portion of a project you want to create. You will be most motivated to problem solve it, and it's also practical.
Well, `shouldPerformSegue` should allow you to check if the VC you initially wanted has been initialised at some point, though that does seem annoying for an unwind segue since the point is to not actually care about the VCs in between. Anyway, the delegate pattern would a useful thing here. However, I'm interpreting your question in 2 ways: - you want to use a regular segue to move *forward* when your VC for unwinding is not initialised. This is the one I answered above. - you'd like to unwind to some other VC instead. In this case, you can just give that other VC the sane unwind function. 
Have you looked into Apple's [Core Location API](https://developer.apple.com/reference/corelocation)? There are a number of classes here that you might find useful. Specifically, [this](https://developer.apple.com/reference/corelocation/clcircularregion) one looks intriguing for what you want to do.
and also CLRegion, i'll look into them more, thank you. 
Programming a math quiz game based on an Android game I made.
That's not going to work. You can't learn to program just by reading about it. 
Oh yes, I've tried Vapor and liked it a lot, here is my first app in Vapor: http://swiftforums.herokuapp.com I started playing with Kitura to see how easy it was to deploy on Heroku and it is as easy as `git push heroku`. I instantly fell in love and coming from Python, Django and Jinja using Stencil as template engine feels like heavens. Kitura is my new server side framework in my toolbelt.
heres your interview: http://stackoverflow.com/questions/42581188/how-can-i-print-850-x-1100-in-swift-3-ios-please
[removed]
Surely it's ranked 4th out of newsletters, no?
Would love to learn from the source code!
Thanks! I think I remember reading that now.. knew it had to exist somehow
Here is the answer: Resize image: http://stackoverflow.com/questions/31966885/ios-swift-resize-image-to-200x200pt-px Print view: http://stackoverflow.com/questions/34206207/printing-the-view-in-ios-with-swift Of course there are many more answers for other issues like cropping, rotating and enhancing but at least for the premise of the SO question that'd be enough to code a solution.
This is the worst way to accomplish what OP is trying to do. You'd have to do this in a loop with each character from the string, and you don't need a loop here at all.
Ok, here is the repo: https://github.com/kuyawa/PokerDuel
As promised: https://github.com/kuyawa/PokerDuel
They are not immutable. 
Am I understanding it correcty that you're literally saying "print = reversedString" instead of "print(reversedString)"?
 //: Playground - noun: a place where people can play var sentence = "This is the sentence." // characters is of the type String.CharacterView which is not a pretty string you can print let characters = sentence.characters // Now you have a ReversedCollection&lt;String.CharacterView&gt;, which is ALSO not a pretty string you can print nicely let reversedCharactors = characters.reversed() // But in the swift String comments // You can convert a `String.CharacterView` instance back into a string // using the `String` type's `init(_:)` initializer. // So we can turn our it into a nice pretty string by doing let prettyString = String(reversedCharactors) print(prettyString) // Which you already knew, but now you know why!
How do you place a bet? I'm clicking everywhere but no luck. edit: never mind just re-read your post.
I guess that must be it. Thanks!
One way would be to give the VC that won't be skipped (VC2) a pproperty that is the VC that may be skipped (VC1) and set assign the property when moving to VC2 from VC1. I take it that it's not the 2nd unwind action I outlined that you're interested in?
Lets learn by example: var name = " Taylor Swift " var newName = name.trim() // non mutating, name stays the same and you need a new var holding the result For that to occur you have to declare the extension as mutating so the method is applied to the same object instead of returning a new instance extension String { mutating func trim() { self.trimmingCharacters(in: whiteSpace) } } now you can use name.trim() and change name itself without having to assign it to a new variable. name.trim() // name changes and it has a new value, no need for new vars 
Yes, it was the first way i was interested in. i have a struct with some static vars, which i use now. thank you for helping!
Dude. Your hacking with swift site is awesome. When I make it through the first round of tutorials I'll definitely be buying the others. Thanks for putting that together!
What are the first 3?
I'm curious how you figure to assert that OO is "the foundation of modern computer science." There is lots of research being done in other paradigms right now, and more and more aspects of functional programming are finding their way into more mainstream languages. Certainly OO is commonly-used in industry, but I dunno if I'd say it's the "foundation" of modern CS. Too many other parts, I think.
You should not be subclassing UITextField; observing and reacting to changes is what the [delegate](https://developer.apple.com/reference/uikit/uitextfielddelegate) is for. 
Ah well, thanks for your help. I actually modified the sorting process to use core data (a thing I've been putting off anyway) and did it all on the main thread (without closures just to verify) and it still happened. So I guess they were never the problem ¯\\\_(ツ)\_/¯ 
I have a friend who has recently taken the [Swift Course on Treehouse](https://teamtreehouse.com/learn-swift?utm_source=google&amp;campaign=105062766&amp;utm_term=&amp;cid=1027&amp;gclid=CL2nv-6ivNICFUUDvAodZZYMtg) It's pretty comprehensive and will give you a deep understanding of the language, along with a head start on iOS development in general.
There is also [RemObjects Silver](http://www.elementscompiler.com/elements/silver/). 
Agree. Simple example while keeping the current state on focus 
thank you very much!
Oh I don't disagree that it's everywhere! To me, "modern computer science" indicates the current status of the field from a more academic point of view. While OOP is widely used in practice, it just seems odd to say that it's the *foundation* of the current state of computer *science*. I dunno, maybe I'm just stuck on something pedantic. It's not a huge deal, haha. 
http://stackoverflow.com/questions/42599378/ios-swift-3-select-multiple-rows-in-tableview-initially-at-creation (i'll add the code to the question on reddit) Thank you!
var number = x ? 1 : 2
It's probably a bad idea to prematurely optimise you code like this. Pathological build times are (usually) caused by slow type inference, which won't ever occur in an example as simple as the one above. The ternary operator *itself* isn't a problem; it just has a multiplicative (or something) effect on the complexity of inferring the type of the two expressions following `?`. In the article you linked, `(1...5).map{type0ToString($0)}` is complex to infer to begin with, which is why the ternary makes such a difference. In practice, if your actual example is a little more complex, you can always help the type checker out with a signature: let number: Int = x ? 1 : 2 Finally, if you want to assign to number but not change its value, you don't actually need `var`: let number: Int if x { number = 1 } else { number = 2 }
2,975 unread emails????
I have a basic understanding of programming, and I do understand IBActions pretty thoroughly. I've been developing for a few months now. What I don't understand is the last part of your message: "HTH and AMA". What are they and how can they help me? Thanks for the previous help!
HTH: Hope That Helps and AMA: Ask Me Anything Once you connected your buttons, the next step was storage as I said. Lets simplify the info you want to present and save to just a date, a month and an event, nothing else for now. And let's say you want to save it all in a database but it could easily be saved in text files too as long as you name them using the date like 'events-2016-02.txt' that way you can go forward and backward whenever you press a button in your app. the same way, in your database you will "Select * from events Where month = mm and year = yy" in order to get only the events for that month. Have you done anything in the storage side yet?
Use the sender argument of performSegue to send your data, then assign it to the controller in the resulting prepareForSegue call. Also don't mean to be rude, but the interface you're describing doesn't sound very intuitive. Why not just push the controller you want onto the navigation stack of the search tab?
Funny and fucked up at the same time...
I sounds from your post like you've *not even tried* the ternary expression; and always avoided writing it because of the compile time optimisation article you'd read. If this is so, I suggest you **be more empirical.** Try things for yourself! Such articles are often very in-depth, clever and revealing; but can also end up being academic in their implications. I manage a large Swift project and we use ternary's everywhere; compile times aren't an issue; most of the time you're compiling incrementally anyway. How is this a real practical concern for you? Is your project that large? Are you 'cleaning' habitually every time you do a build? Have you compared the ternary vs. non-ternary version of your project for compile time? Writing the code like you showed above is harmful to your code-base: wherever possible you should use **idiomatic** code, which you can think of as micro-patterns that everyone adopts because they're the most succinct and readable form of a common unit of logic; which the ternary is. Of course, the most correct answer is the one /u/foBrowsing provided first: let number: Int = x ? 1 : 2 There are good reasons sometimes, to not use a ternary: Because it *is* so concise, that sometimes obfuscates the intent and breaking down into multiple lines benefits readability. Compile time, I'd suggest is rarely, if ever, a good reason.
Ok, step by step, first lets get the date components: import Foundation let date = Date() let calendar = Calendar.current let year = calendar.component(.year, from: date) let month = calendar.component(.month, from: date) let day = calendar.component(.day, from: date) print(year, month, day) Done.
i'd look into background modes and local notifications: https://developer.apple.com/library/content/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/BackgroundExecution/BackgroundExecution.html https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ tutorial: https://www.raywenderlich.com/143128/background-modes-tutorial-getting-started
You can set local notifications to appear at a specific time, and attach a sound of your choosing. It doesn't hook into the iOS alarm app, though. [See my tutorial here](https://www.hackingwithswift.com/read/21/overview).
Fair enough; sounds like you're well aware of the above then. Still sounds strange that ternary usage is killing your compile times to such a degree; are you specifying the type on the left-hand of the assignment? I guess that would help constrain and speed-up the inference. One last thing to suggest is try out the ternary again on the Swift bundled with Xcode 8.3 (currently still in Beta). I've found numerous improvements in the Swift compiler vs. the rather buggy 8.2.1; maybe your use case will be improved too.
Dude. Cmd + Shift + 3 creates a screenshot. With Cmd + Shift + 4 you can select an area to screenshot (press shift to select whole windows). No need to take a photo of your screen like 1980 ;-)
something fast assign the default value to the false condition and change of boolean. var number =2 if x.isTrue { number = 1 } 
A bit shorter: ```print("🕛🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚".characters.dropFirst(Calendar.current.dateComponents([.hour], from:Date()).hour! % 12).first!)```
Hey man, THANK YOU SO MUCH! This is invaluable. However, I ran into a bunch of problems but I solved most of them. I've been working in regard to your code for about an hour now. **Current month and year (DONE!)** I can now display the current month and year nicely in the top. [Here](http://prnt.sc/eg7wcf) is my code. It also includes my problem at the bottom. I managed to manually turn the Month integers into Strings of the different months, along with the year which I'm pretty happy about. **prevMonth** I tried both your solutions and none of them worked. I'm now trying to find an answer on Google. I want to use: date(byAdding: .month, value: -1, to: currentDate) currentDate was never declared so I assume you wrote let currentDate = Date() Do you have skype? I don't have a mic but if I could screenshare and you can show me what to do it would mean the world to me. Oh, and thank you so much for everything you've done so far. Your advice is extremely useful! Update: When I click on the button in the Simulator, it prints out a month before in the debugger. When I click again, it does not change. And it prints out this: 2017-02-05 09:53:37 +0000. 
Cool! This also should work at Swift 2 too, as the post's version is only for Swift 3 and higher.
All right! Everything is working! I added a bar button item entitled "Today" where I wrote currentDate = Date() Is there any way I can display this more nicely to the user? When I click on these buttons I want to show "2017 March" and if user presses the &lt;, I want to show "2017 February". Right now, I have the right month extracted but how can I display this to the user? I assume it would be something like (DateFormatting code) yearAndMonthLbl = currentDate After this, I can move over onto the next part! Thanks for all the help! Did you consider adding me on skype so I can show you live, and we can discuss? I feel like it would go a lot faster!
**Here's a sneak peek of [/r/SwiftTutor](https://np.reddit.com/r/SwiftTutor) using the [top posts](https://np.reddit.com/r/SwiftTutor/top/?sort=top&amp;t=all) of all time!** \#1: [Ask any question, no matter how easy it looks](https://np.reddit.com/r/SwiftTutor/comments/5xmh5p/ask_any_question_no_matter_how_easy_it_looks/) \#2: [Google is your best friend](https://np.reddit.com/r/SwiftTutor/comments/5xmghg/google_is_your_best_friend/) \#3: [Welcome Swift enthusiasts](https://np.reddit.com/r/SwiftTutor/comments/5xmfln/welcome_swift_enthusiasts/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
Core Graphics. It can look too "hardcore" for juniors and beginners, but in the end it's just simple 2D drawing. You can try tutorial like [this one](https://www.raywenderlich.com/90690/modern-core-graphics-with-swift-part-1).
yes. if you want one queue to be accessible to multiple users through different installs of the app, you need some sort of backend server to handle and synchronize network requests edit: spelling *
if you are just playing around you can use the built in iCould queue for about 10 users. It's throttled even for testing. A queue on AWS is a more real life scenario
This might be late, but I can confirm. I used 3.0.1 to build my App on Ubuntu 16.04 LTS 64-bit and got the above mentioned error. I just updated to 3.0.2 and it compiled with no errors without changing the source code. I am also using the method where I am passing the handlers as an explicit parameter for the .get() method. Hope this helps. Cheers
 Are you talking about CloudKit?
I kind of have to agree that for a multi-person poker game WebSockets would be a great idea. You should take a look a pair of blogs I wrote on Kitura and WebSockets: * [Working with WebSockets in a Kitura based server](https://developer.ibm.com/swift/2017/01/17/working-websockets-kitura-based-server/) * [Writing a WebSocket based chat server using Kitura](https://developer.ibm.com/swift/2017/01/17/writing-websocket-based-chat-server-using-kitura/)
Isn't there a Calendar.current.component(.hour, date: Date()) that you could use?
You get paintcode, or sketch and the paintcode addon to sketch. This will generate code you can then use. You can do it manually, but that will take forever comparatively.
That's a good point, how about UInt instead?
You would go on the [swift-evolution mailing list](https://lists.swift.org/mailman/listinfo/swift-evolution) and talk about it. I think that the topic of encoding more invariants has come up a few times in the past and you might have to have some pretty solid points, because it's a rather large undertaking on the type system. You can't really get away with it "locally" because all Swift operators are implemented as functions, so the annotations would have to survive function calls. How would you write generically that a parameter has a specific domain, for instance? `(i % 3) + 2` (with a UInt `i`) limits the domain of your values to 2, 3, 4. `(i % 3) * 3` limits the domain to 0, 3, 6. How complex should it be allowed to be?
I once made something really similar for a random post on reddit.. let me see if I can find it. Here it is. You'll have to make some changes, but its the same sorta thing, and changing the value of the chart animates the bar. https://www.reddit.com/r/iOSProgramming/comments/5aklsr/looking_for_a_circle_graph_library_for_swift_3/
wouldn't be perfect but you could use UBezierPath and CAShapeLayer. Set the CAShapeLayer's path to an arc and animate the progress via the strokeEnd property.
I'd cross post this to /r/iosprogramming if I were you
MVC is great and all, but you should look into MVC derivatives/alternatives like MVVM or MVP. MVC is just way to easy to become Massive View Controller. You could think about Feature handlers. For example, we have a attachments handler that handles image picking to upload images. 
Note that, using `let` in this case will not be allowed in a future version of swift.
Actually, you get to play with these frameworks the deepest while being junior, later you just say, f it, let's import that pod. :)
You should care how long it'll take, because even with all computing resources on earth, there isn't enough time left in the predicted life span of the universe to complete a naive brute force attack on RSA 512, let alone 4096 (which is 2^3584 times stronger). http://crypto.stackexchange.com/a/3044/11134
Hm actually, I remember it to be a filed bug that was marked to be fixed in a future version of swift 3. I can't find it now though. :(
Absolutely not. 
Senior with pragmatic thinking would never do that. Such a simple drawing and animation, even if it takes more time (and I dont think so in this case), it's good investment in you codebase.
thats with brute force, not factorization.
Using pods beyond junior (unless you have to, e.g. it's a pod only library) is just as improper as using storyboards. Or at least that's the impression I'm getting.
This just isn't true. Proper MVC will not result in massive view controllers, they only get that way with inexperienced devs. Property breaking up components will result in much smaller Controllers.
I used to do this, but then realized, what if I have a component or class that's needed in two sections?
I dont do this, but you could have multiple references to the same file
You need to implement `prepareForSegue` and handle setting the delegate there. Setting the delegate in `viewDidLoad` isn't going to do anything for a vc that doesn't exist yet. It worked before because you instantiated it when declaring it, so it existed by the time `viewDidLoad` occurred.
`" ... for a vc that doesn't exist yet."` ah thank you! 
[removed]
From mostly every senior iOS developer I come across and have a chance of discussing this topic. Carthage seems to be the preferred solution. I'm not trying to boast, I'm using Cocoapods in most of my projects, if only for tossing Alamofire in. I've noticed Cocoapods are considered "problematic" by advanced devs.
There are tons of very senior devs who use cocoapods. There are just *loud*, salty senior devs who are against it. I'd say more accurately senior devs are against dependencies in general.
Im not agains dependencies, but in this case? Common... this is CC dor few lines
Usually, you'll have some files/classes that you consider 'global' and you can organize them however you want. It's pretty rare that you'll have some component that you strictly identify as only being needed by a couple of features. You might want to just consider them 'global' or, if you have a lot of them, have your own system for organizing them.
Dunno why downvoted. This is true. But by swift version he means major swift version. Either way, this software is invaluable. And allows any Joe blow to make amazing animations. 
Why don't you just write an enum and have a function make it from an integer?
I'm not sure how to go about saving the current article being displayed in the webview where the button is located. The way I tried tackling the problem was creating an entity and adding attributes to save my article title, body paragraph, images and author name. I was thinking that after I press the addToFavorites button, that current articles relevant data would be saved and then I would have to go about displaying that in the favoritesTableView. I'm confused on how I would be able to save all the attributes of any article I chose and then pass that to another tableview to be displayed.
I didn't think of this. It sounds interesting. I might have to give it a try. Thanks!
 onMenuClick: fragment.addSubview(myCoolView)
Think this is what I'm looking for, only issue is that `companies` is of type `[InitsFromJSON]` rather than `Company`. 
So you're having trouble with implementing Core Data itself? If so, it's actually really straightforward to work with, and I recommend reading up on Apple's [Core Data Programming Guide](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreData/index.html). If you're having trouble using the objects you've saved with your TableView, then I refer you to a damn near infinite number of iOS/Swift tutorials online. If what you're looking for help for is neither of those things, I'm sorry, but I still need you to be specific. Not specific to the context of your app, mind, because to be perfectly honest, I'm not going to go through your code. I am more than happy to help you out, though, provided I know what you need help with.
Yes you are correct in I have the index for every element but lets use this example: [ 2: "First item" 4: "Second item" ] In android I can retrieve the keys of the selected items by passing a linkedhashmap to a dropdown. So it returns either 2 or 4 as selected item. Now in Swift I need to add another step because I only get a string back, so im comparing the strings to then pull the associated key from my dictionary. Just seems a bit overcomplicated. Thanks for the feedback will take the animations down a notch as soon as I find time.
[removed]
I have to add new viewcontrollers again and again? And it's not just a view but a view cobtroller
In the particular case of Rx observable chains I think it is safe to use an unowned reference in the closures. The observable chain (and the closure) lives as long as the dispose bag lives. If the dispose bag is a property on self, then it will be deallocated when self will be deallocated thus making unowned the right choice. The deallocation chain would look like self -&gt; dispose bag -&gt; closure
So you want to implement a container view controller. Apple provides good documentation on how to do so: https://developer.apple.com/library/content/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html It seems you want this container view controller to have an array of view controllers it manages, but only a single childViewController. That being the currently selected "fragment" view controller. If you use a collection view for the horizontal scroller, then whenever an item is selected you could trigger the code to change the child view controller that is displayed. You may also want to post non-swift specific questions like this in r/iOSProgramming Edit: fixed typo
This code works fine. extension Date { var age: Int { return Calendar.current.dateComponents([.year], from: self, to: Date()).year! } } let myDOB = Calendar.current.date(from: DateComponents(year: your value, month: your value, day: your value))! let myAge = myDOB.age // 46
Awesome. This is another case where Swift's great features are used to make OOP more meaningful.
Got it. Two useful tips. Thanks!
Sure, you can move those methods to an extension, and put that extension in another file. But keep in mind you may have to update your access control specifiers if you need to access methods or or properties that are fileprivate in the original implementation. But if your class is growing really large it might be a good idea to try to partition its responsibilities into multiple, smaller classes. That might make things easier to reason about and to test.
You could try this: return [subredditNode, authorNode, authorFlairNode].flatMap { $0 } With this the literal array that is created has optional elements, and the flatMap makes those non-optional, excluding nil elements.
Why do you think a simple UIView is enough? I came from android and this is why I try to "copy" how fragments work there. I have no idea witch one is better.
Then I think you would be fine using views instead of view controllers. To switch between views you can use addSubview and removeFromSuperView I believe. 
From my experience in scraping, most of the best tools and most of the projects you can learn from are in Python. If you know Python I would start by looking over some of those in /r/python /r/scrapinghub etc.. and then trying to apply those principles to Swift if that's what you really want to do. You will however have to work without the tools that make it so easy to do in the python ecosystem.
when would you use viewControllers?
Yes, shameless plug hehe
No offense to the OP but as a professional online player nobody should be playing for currency on an app that is not heavily regulated and audited (such as poker stars etc). OP should give up the idea of playing for cash, but it's still a good idea to carry on to play for fun. 
A closure is its own function, so any statement that leaves its scope will only exit the closure, not the scope of the code where it was defined. In fact, the closure may not be being called from the same scope in which it was defined. Consider the following example. It should be clear that that return statement in handler0 will only exit handler0 and not v0: let handler0 = { return true } func v0() { let value = handler0() doSomething(value) } Moving the definition of the handler inside the calling function doesn't change that: func v1() { let handler1 = { return true } let value = handler1() doSomething(value) }
just use a `UIView`. no need to embed a `UIViewController` inside another `UIViewController` with your example.
is didSet a closure?
I'm making a meme keyboard app
I'd probably change the date property of your article class to Date?, which are sortable. let formatter = DateFormatter() formatter.dateFormat = "MMMM d, yyyy" // this should match your date format article.date = formatter.date(from: "January 1, 2016") As a side note, I would probably move that logic, as well as the initialization of the rest of the properties, into the Article class. Then you can use something like [this](http://stackoverflow.com/questions/31220002/how-to-group-by-the-elements-of-an-array-in-swift) to group your articles by date into a dictionary, then sort the dictionary keys and use that order to create your tableview.
It definitely sounds like you need to refactor. You should virtually never have a "main" class. Classes should have one area of responsibility, you shouldn't be trying to do everything within a single class. Even putting all of your networking into a single class sounds like you're doing way too much in a single class.
It sounds like you need to revisit the MVC design pattern. The idea is that your models should only store information about your data, not the views that represent them. Essentially, you should be able to read a user profile and generate a new view on the fly to represent it. It sounds to me like your application is lacking a separation of concerns which, if implemented, will likely solve your memory issue. 
What a puff piece. Wrong wrong and more wrong.
Not sure why I didn't think of using self. Thanks for very much for taking your time to write this. Super helpful and just what I needed
You create a `struct` value type that contains any number of pure values and a `ManagedBuffer` type as the only reference that wraps anything else. You can then store whatever you want in the `ManagerBuffer` and the semantics of the entire type will behave like a pure value. This is known as a "Copy-on-Write" type. It's a little bit of work to use `ManagedBuffer` correctly though and there are some optimization quirks in Swift 3 that may need to be worked around if you're highly performance sensitive. There's an example here, if you're curious: https://www.cocoawithlove.com/blog/2016/09/22/deque.html
Ah, thanks for that! I never picked up Objective C either, but a quick search for "category objective c" explained it succinctly. Yes, that sounds pretty similar to a partial class. 
Trying to make a POS app for a bar - just for fun for now. Biggest obstacle is getting my old head to understand how this is best approached in Firebase,. 
I'm pretty sure the videos are failing to download all the way (sometimes at all) so they just stop during playback. I was checking it out yesterday and it kept happening. I tried at another time and it was fine. 
March is a busy month – so much Swift! I just launched my [lifetime free updates policy](https://www.hackingwithswift.com/update-policy), so that everyone who bought any of my books from Gumroad or iBooks will get free updates for Swift 4, Swift 5, Swift 10(!), and so on. I'm hoping that means I'll get fewer emails asking whether I'll be releasing free book updates – the answer is "yes" :) Pre-orders for my next book are now open: [Hacking with watchOS](https://www.hackingwithswift.com/store/hacking-with-watchos). It follows the same hands-on, project-based approach used in [Hacking with Swift](https://www.hackingwithswift.com/store/hacking-with-swift), [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos), [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift), and others. I also uploaded 24-page samples and full tables of contents for all my books, which was a common request from Redditors. Hopefully that gives everyone enough of a taste of all the books. Finally, at the end of the month I'm speaking at [iOSCon 2017 in London](https://skillsmatter.com/conferences/8180-ioscon-2017-the-conference-for-ios-and-swift-developers#program). Come and say hello!
Oh, that's interesting. Yea, `ManagedBuffer` will definitely be more cumbersome to use since one would be dealing with raw memory. This might be a case of optimizing too early. I might see what type of performance I get without using `ManagedBuffer` first and then optimize accordingly, if needed.
https://www.youtube.com/user/MichelDeiman
I've had no issues with any of the videos (I've watched the first five lectures).
Some tweaking you could get this to work [Cricle Progess](https://cocoapods.org/pods/CircleProgressBar)
Ah, I see what you mean. Some of the content will likely be cross-platform, but a number of the frameworks (like PushKit) are iOS-only. This is likely why. If your goal is to learn Swift, I imagine you could probably follow along in Xcode on your Mac? 
1) Implement `didRecieveMemoryWarning`, in it remove any images and heavy objects you are keeping around. 2) Consider doing the same on viewWillDisappear. 3) See if you memory footprint is still alarming or not. If it goes up a little bit, then I say you can keep it that way. Worst case scenario, the user will go 50 sceens deep and the app will OOM and crash. If you really want to handle this in some way, you can set the `viewControllers` property of the `UINavigationController` manually, and remove/reload views when going back and forth. But I don't think you need that kind of complexity and that will make the UX much worse since users will loose scroll position and other state in the screens when going back. Instagram and Facebook likely use React Native, AsyncDisplayKit or some other technologies for optimising their UI.
I like this idea a lot, only save the state of the view that's being interacted with on the view itself, right? 
You should pick up Smalltalk. Coming from there (despite a detour through Java) - I found Objective C light years better than Java and almost as good as Smalltalk. 
Just wanted to reach out and thank you to Ray Wenderlich and his team for their support and engagement recently. Ray in particular has been extraordinarily generous with his time in the Perfect Slack community (http://www.Perfect.ly) as well as providing our team with fantastic insights on how we can improve Perfect. A great group of talented developers, the Swift world is lucky to have them. Hope you all enjoy his video! Thanks Ray!
Working on the LuxuryRetreats app as iOS lead.
thanks. Yeh I wanted to go with carthage because it was easier. I honestly didnt expect it to be *that* easy, so I assumed I was missing something. Question 2 - what is the link to my framework going to look like?
actually i need help with this in general. ive added this to my plist in both the framework and the test project im testing it with and still cant get through App transport security ```` &lt;key&gt;NSAppTransportSecurity&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSAllowsArbitraryLoads&lt;/key&gt; &lt;false/&gt; &lt;key&gt;NSExceptionDomains&lt;/key&gt; &lt;dict&gt; &lt;key&gt;wizards.com&lt;/key&gt; &lt;dict&gt; &lt;key&gt;NSIncludesSubdomains&lt;/key&gt; &lt;true/&gt; &lt;key&gt;NSExceptionAllowInsecureHTTPLoads&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/dict&gt; ```` 2017-03-07 17:54:16.997 testFrameworkMTG[4896:100422] App Transport Security has blocked a cleartext HTTP (http://) resource load since it is insecure. Temporary exceptions can be configured via your app's Info.plist file. 
I am still not certain if I can use SSS in a production environment. I am not finding anything to make my decision easy. Currently we are using Ngnix+Python+PostgreSQL stack... 
High traffic, yes. Future proof reliability, no. 
It's usually: `github "&lt;your username or organization name&gt;/&lt;name of your repo&gt;"` usually you can get it from the url when you're seeing your repo on github or someplace similar
you create the data task but you never tell it to fire. add this line at the end of your code: task.resume()
Thank you sir I actually wrote an email to Stanford support, asking if they knew what was wrong (seeing as other courses on iTunes U works fine for me). Got a reply from mr Paul Hegarty (the CS193p instructor), that I should contact iTunes :p
Personally I would just present another View controller with a transparent background modally so you can see the presenting view controller behind it. But it's not clear what you mean by horizontal scroller menu; what class is it? If memory isn't an issue you can always do navController.view.addSubview(hScroller.view) or something like that but isn't recommended.
Yes, it's a consequence of `Double`'s `CustomIntLiteralConvertible` conformance.
The coercion is intended. Because you've told us `x` has the type `Double`, we search for an overload of `/` that satisfies the constraint and come up with `/ : (Double, Double) -&gt; Double`. When we go to apply the solution, we simply convert each argument to a `Double` with the special `Double(_builtinIntegerLiteral:)` constructor for you.
Just finished my 2nd game :) https://itunes.apple.com/us/app/color-pop-the-game/id1202606108?ls=1&amp;mt=8
This really depends on the pedantry/preferences of the audience of the code.
would like to know that, too.
Or just: return (year - 1) / 100 + 1
I'm on mobile so I can't add any details, but [this comment reply](https://www.reddit.com/r/swift/comments/5vhth1/how_to_start_coding_in_swift_any_good_guides/?st=J01MO9TW&amp;sh=17fe1725) by /u/twostraws details how to anchor a UIProgressView (a subclass of UIView - thus this is applicable to any other kind of UIView) to the navigation bar. Resizes and positions correctly for all rotations. Might be exactly what you need!
Oh wow, didn't know I had responses until I got to my desk. Will get to all the comments shortly. You guys are epic!
It depends on what you need to do. Are there 27 legitimately different outcomes? If so then there is no work around, there's only window dressing to make it look better. Is there redundancy? If so, figure out some way to embed associated types or variables in the enum that can be checked at the endpoint instead.
This is codefights.com's arcade course.
Damn. Great perspective. I've never considered that. 
Is anything future proof reliable?
Through iTunes U or somewhere else? How long ago?
I think you may want to look into using a single option set here. Without seeing your logic code, I can't be too specific, but I think I understand your problem. With an option set you could just check if certain options were contained in a given fruits options. 
Take a look at [this](http://swift.sandbox.bluemix.net/#/repl/58c12259eee5e115d955e232) and see if it is of any use. If I understood your question wrong, please explain further what you're trying to achieve, ideally with a more elaborate example.
The key difference over polymorphism (inheritance or protocols/interfaces) is that an enum is closed, so when we pattern match we can check for exhaustiveness. Add a case and you'll get a compiler errors in every place the enum is matched on (helping cut down on bugs). It also means you can add functionality with simple functions (that will pattern match internally) without having to graft it on to some OO heirarchy/interface. I don't recommend some of the later uses in the article, if you end up using "default" a bunch you're forfeiting a lot of the benefit of enums ... and it's probably time to rethink your enum.
Hey man, newbie here as well. Though, i might not be as far along as you are. How long you been coding?
Well, I did a bunch of codeacadeny classes on python. Beyond that...not long. I only know the most basic principles but im eager to learn. You?
Not to an engineer, but to people making business decisions, yes. 
but cant we save them in userdefaults? thats what Im currently doing now
Im fairly proficient. Im new(ish) to swift but have been programming with Objective C for a few years and programming in general for about 10.
Definitely cool. Well done!
Oh nice, been a while since I've looked at Swift, is it still locked to Apple devices or can you run it on Linux/Windows now?
I hope so – I'm delivering a 90-minute talk on Swift in Stockholm on May 16th-17th! [Link](http://codemeetup.se/CM2017)
On windows's bash it doesn't work properly yet (the REPL nor the package manager).
Oh wow! I didn't know. Awesome thank you! 
Thank you so much for this! It was very helpful! I love your content
gopher is beautiful :D if only we can use it for IOS :/
First, I did not know this IBM Sandbox existed. Thanks that's pretty useful. Additionally I don't think I knew an `enum` could have a `func`. In hindsight, it's Swift so why not? And yeah I think your model here will work for what I'm trying to do. 1) Give each fruit object properties so it can be determined to fit or not fit. 2) Give each Status type a `matches()` function and then 3) use `filter` to execute the "query" against the universal set. Previously my `fruits` did not have properties related to the conditions, so there was no way to really discern if each particular fruit object belonged or should be removed from a set. Since the fittingness was only in my head, no wonder I was having to map the ~27 outcomes by hand.
Seems to be a permission issue from the windows side, but don't know if its going to be dealt with.
Same here. I learned Obj-C a while back but never kept up on it. Swift is the first lang i've actually grasped. Codefights.com is great because it gives you mock interview questions. Which is dope. 
That's cool man. I'm grinding at it ever day. 
what about canada? :D
Haven't heard of it! I'll take a look. Have you seen any of the swift tutorials on Lynda.com? Tons of great stuff, if you have a library card I'm almost certain you could get free access.
Why do both of those enums conform to the same protocol (`FruitStatus`)? That seems like a misuse of protocols to me. What do you gain by having them both conform? Would a closure like this solve your problem? enum AgeStatus { case ripe case notRipe case either } enum CitrusStatus { case allowed case notAllowed case exclusive } struct Fruit { let age: AgeStatus let citrus: CitrusStatus } let arr: [Fruit] = [ Fruit(age: .ripe, citrus: .allowed) , Fruit(age: .notRipe, citrus: .allowed)] arr .filter { $0.age == .ripe &amp;&amp; $0.citrus == .allowed }
Your network service preferences? I assume you could, like I said in my answer there are reasons you wouldn't want to take the singleton approach, but the end result is you have to set those settings on every instance of your networking service. Where the settings values are stored doesn't really matter, NSUserDefaults works fine, but you still need to set them multiple times, rather than just once in a singleton.
I found in documentation three types which implement FlotingPoint protocol - Float, Float80 and Double - basically, they differ in precision. So we have 3 types which offer same interfaces - so it's good to strictly define this interface (protocol in Swift's nomenclature). That way you can create more generic functions which will take FloatingPoint as an argument and will work with all types which implement this protocol. 
Oh, I understand now. The enums are *conditions* (rather than properties). If you just treat each one as a function, i.e.: typealias FruitCondition = (Fruit) -&gt; Bool let ripe: FruitCondition = { $0.age &gt;= 10 } let citrus: FruitCondition = { $0.type == .lemon || $0.type == .orange } You can combine them, and use them in a filter: func ||&lt;A&gt; ( _ lhs: @escaping (A) -&gt; Bool , _ rhs: @escaping (A) -&gt; Bool ) -&gt; (A) -&gt; Bool { return { x in lhs(x) || rhs(x) } } let fruits = [ Fruit(age: 10, type: .lemon) , Fruit(age: 4, type: .apple)] fruits.filter(ripe || citrus) That said, the overloaded `||` is a little hairy. I think /u/wassup_b's solution is nicer.
thanks man. there was no job but your post actually helped!
Who owns the GitHub repository, you or the developer? If it's the developer, you should get him to assign ownership to you. Same goes for the Apple developer account, or if the developer is keeping the developer account, then register a new account yourself and get him to transfer the bundle ID to you. Was the developer also doing the design? Often there will be design files (e.g. PSD files) from which the graphical assets in the application are generated. If you don't have the design files, then making changes to the design may be difficult. Don't forget about other services, there are often many of these – things like Google Analytics, Crashlytics, etc. You'll either want them to hand over the account ownership or register your own account and change the keys / configuration. 
"Initially, it supports supports 7 languages including Java 8, Ruby, Go, Python 2/3, C#, PHP 5/7 and Node.js. But it also allows programmers to bring their own language runtimes, frameworks, and third party libraries and App Engine handles all the management for the developers giving them that flexibility to bring the tools they like to work with without having to deal with the management, the biggest advantage of using a cloud service in the first place." Seems viable to me. 
Still would need to get ported to be able to be built on that architecture, etc, etc. Which is what the hold up is for anything else besides Ubuntu pretty much.
could you please share ?
In addition to the other comments I would add, if the old developer has any uncommitted or local changes on their machine, have them push those to a branch on your repos. 
I can always send you my some of my code when I used firebase so you could use as reference Though the app was a social network so not as complex as a pos system 
Imagine the potential once we get a good ide.
You can already get support via [GAE flexible runtime](https://cloud.google.com/appengine/docs/flexible/), granted you set up a dockerfile with Swift
Maybe I am off but what about using constraints such as UIView1.constraint.bottomAnchor is equal to another anchor from the other view. Or add it using View.addsubview(other UIView)
To do this while making minimal changes to your the code you have now, you could just add a dict &amp; a function like this to your struct, then replace `words.language` with call to `words.forLanguage(language)`: lazy var indexDict = [ // lazy not needed maybe "English": English, ...] func forLanguage(language: String) -&gt; [String]? { return indexDict[language] } Or use a enum for the dict keys, like other replies suggest. Typed directly into reddit app, excuse my typos.
The second they do I'll be looking at it seriously for some projects
Using the dictionary method worked, thanks :)
A cache is just a generic term for (usually) short term storage. What underlying store for a cache you use is just an implementation detail. You can use user defaults, core data, an in memory dictionary etc. What you should use depends on your use case and what you are storing. It may not be a good idea to cache 4K images in memory on an iPhone for example. Tell us something more about your use case and maybe we can discuss more.
Good to hear! Also keep in mind that a storyboard is a collection of views and each view can have a corresponding view controller. 
Hey guys, here is my latest project, a Markdown Editor in Swift: https://github.com/kuyawa/MarkdownEditor Enjoy!
this is awesome! does anyone know android/java equivalent of this?
So I've discovered! You say "can have". But it appears there might be stuff you cannot do on that storyboard if you do not give it's own view controller? Is that right? For instance, I couldn't add that code you wrote above without creating a new viewcontroller otherwise it would hide all navigation bars.
Welp, self.automaticallyAdjustsScrollViewInsets = false is there. It just needs to be set in the UIViewController. And that actually does fix the problem. That only took four hours. 
That is correct! The app won't crash if a view doesn't have a view controller but that view would be pretty much useless without it. 
Not sure if this is what you want, but UIScrollView has a property called [isPagingEnabled](https://developer.apple.com/reference/uikit/uiscrollview/1619432-ispagingenabled) that will cause the UIScrollView to stop on multiples of its bounds. It's at least worth mentioning. 
i love you
Checked it out, thanks! /u/srgisme gave me another solution that works with UIScrollView
No problem!
Visual Studio Code is a nice free alternative. https://code.visualstudio.com Or one based on code specific for Swift: https://twitter.com/DBaker007/status/840063436436385792
I really like the videos! :D One small pet peeve of mine, it's spelled Xcode, not XCode. :)
There are classes that have a "print" method and NSDocument is one of them, so in cases like this we have to differentiate them using Swift.print or the compiler will complain.
Atom + nuclide-swift
From the error message I'm guessing that you can't write to the resources folder. instead you should be looking for something like the "documents directory". I don't know if this is possible in a playground, but it's worth a shot. I think you'll need to use a FileManager.
On mobile right now, so sorry for the short answer, but do you just want to open the maps application? Or do you want to open w/navigation to an address? Or show a location? You could do something like this: UIApplication.sharedApplication().openURL(NSURL(string: "http://maps.apple.com/?address=1600,PennsylvaniaAve.,20500")!)
Thank you! Would this apply to an NSDictionary or would I convert to a different type of object? Regarding the structure, this came from my website design; so now I am trying to match the iOS portion.
&gt; NSDictionaries are unordered and do not have the concept of numerical indexing... See, this explains a lot! I tried: let programsRef = rootRef.child(uid! + "/Programs") programsRef.observe(.value, with: { snapshot in for child in snapshot.children { let dictionary: Dictionary&lt;String,AnyObject?&gt; = [child] print(dictionary) } }) But I receive an error that the dictionary cannot be used with an array literal. I will keep trying but if you have any pointers, thatd be awesome! I am trying to access the nested days such as "Monday" etc so I can then access the exercises and display them in an UITableView
Awesome thank you! It worked great I used this code for (key, value) in dict { print("key ") print(key) print("value ") print(value) } Which results in key Monday value { "-KcdVfCJyvqBW-0bwdSG" = { day = Monday; exercise = "2 Handed Kettlebell Swing"; exerciseKey = "-KcdVfCJyvqBW-0bwdSG"; rest = ""; targetReps = ""; targetSets = ""; }; "-Kcdf1338RRmOQWrBAmw" = { day = Monday; exercise = "Bent Over Barbell Row"; exerciseKey = "-Kcdf1338RRmOQWrBAmw"; rest = ""; targetReps = ""; targetSets = ""; }; } Considering the value right after the the keyword "value" is a postkey "-KcdVfCJyvqBW-0bwdSG" how would I access that nested data? Thank you so much for your help, this is the farthest I have gotten
You do the same thing again! loop through the keys and values. The key will end up being the exercise key, and the values will be the dictionary for each workout. 
no reason to do brackets around [child] 
I have a question first, can you change the format of the JSON? (can't tell if you made that or not). It's possible to get all of this, but definitely not ideal
I can certainly change it! I made it so it would be compatible with my website but I can change the code there too
I think your guess is as good as mine – Apple published [detailed terms](https://developer.apple.com/wwdc/scholarships/terms/WWDC-2017-Scholarship-Terms.pdf) that contain a little more information, but it still leaves a lot of questions. In this case I doubt animation is that important – it just needs to be something they can actually *use*, that does something interesting.
Here's how I would suggest you structure your JSON: https://gist.github.com/ScottRobbins/f5a685c23671c7750e978d995dc86589 You could then see how things are structured almost like objects you would make in your code, such as: https://gist.github.com/ScottRobbins/421070513979fb0707dec6e8cd4ab6f8
Understood Ill work on that! I'm seeing firebase replaces the objects with a number, I presume this is the index? http://imgur.com/a/xCH5I
No problem, if you hack at it and after a while can't figure out where to go from there feel free to message me and I'll get back when I can. The way your JSON is currently structured just makes you do a lot of extra work. I think restructuring the JSON will make both your website and client code easier to understand and use.
 let user = ProcessInfo().environment["USER"] print("\(user)")
I wrote a complete Swift/iOS tutorial series that's a) free, b) project-based, and c) fully updated for Swift 3 and the latest Xcode. It's called [Hacking with Swift](https://www.hackingwithswift.com/read). You can buy a download version if you want (it has some bonus extras), but the free version is a great place to start. If you get stuck with particular problems, you might find my [Swift Knowledge Base](https://www.hackingwithswift.com/example-code/) useful – it contains lots of quick fix code samples for specific problems. If you have questions, you're welcome to post here on /r/swift, or on /r/hackingwithswift, and I'll do my best to help. Alternatively, you can tweet me [@twostraws](https://twitter.com/twostraws).
&gt; The problem I've had with the free tutorials I have explored thus far is that they seldom focus on current/relevant version of Swift, XCode, or iOS. I don't know if that is something I should be concerned with, but I figure it is. Does this matter as much as I think it does? Have you not checked out stanfords ios10 course? Even their ios9 course needs very little code updates to get it compatible with swift 3(and xcode will let you know and replace your code with those updates).
I would like to open the maps app with directions from current location to a custom point annotation. I have already written the code to find the current location of the user. I also have a list of about 30 custom point annotations of things to eat, drink, activities, and venues with latitude and longitude included. I would like to be able to click on these annotations and it open directions from their current location. Do I need to also add a right or left callout for this in addition to opening the map?
I just looked through a few of your tutorials very briefly, and they look great! I will definitely be using these to help me learn Swift and iOS development. Thank you! 
Now that you mention it, someone did tell me about this. However, I forgot to look into it. Is it available online, similar to the MIT open courseware system?
Awesome! Like I said, I'm happy to answer questions if you hit problems, and I know others are too – I look forward to seeing how you do!
Yep, iTunesU.
i offer a 15$ bounty for the one who makes it work. 
what is the type of snapshot.children? it's likely [Any] ... this means that the compiler knows it's an array of 'stuff' but not what kind of stuff. you as the programmer should have a general idea of what's in there and then cast it to the appropriate type in code: let myDictionary = child as! [String: Any] that said, the above code is dangerous... if the child item isn't actually a dictionary or keys in the dictionary are not strings then your program will crash. a safer way to do it is: if let myDictionary = child as? [String:Any] { // do stuff with 'myDictionary' } to be honest, i think this would be a decent time to take a step back and do some reading on Swift collection types: https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/CollectionTypes.html#//apple_ref/doc/uid/TP40014097-CH8-ID105
Hacking with Swift is really good for learning about the different parts iOS has to offer since their tutorials go from apps, games, Safari extensions, etc.
I completely agree with you. I prefer books over online resources any day, in just about everything I do. However, I don't want to invest $40 in a book and then realize it isn't for me. Don't get me wrong, I really want to get into iOS dev, but I'd like to get a feel for it first and then depending on whether or not I like it enough to continue, I'd choose to invest some money into it. That being said, since I've been pursuing this for some time, I wouldn't mind putting some money into it after trying out some of the suggestions made below. Do you have any suggestions as to which books, specifically? I can always look on Amazon, but I'd rather get a first-hand opinion, you know?
Hmm okay, thanks for the heads up. Would you recommend I explore Swift a bit and get acclimated with the language prior to trying the Stanford course? I have a pretty strong hold on functional programming, so Swift as a language doesn't seem too daunting to pick up. 
thanks alot!
++ used to add 1 to a number. Change it from: number++ to: number += 1
Other comments have answered your question. But I'd suggest getting an updated version of this book or look elsewhere. There are a lot of breaking changes in swift 3 and it makes sense to learn with the most up to date syntax possible. It will just confuse you more to study 2.x and then have to write in 3.x to get anything done.
It comes from C. ``++`` came in two forms, preincrement and postincrement. (And postincrement came from PDP-11 assembly, but that's history...). The difference was at what point the value of the variable was available to the larger expression. Anyway, it depends on where the ``++`` is, so, in C: int a = 2; int b = a++; /* b == 2, and now a == 3 */ int c = ++a; /* c == 4, and now a == 4 */ Without the ``++``, but still in C: int a = 2, b, c; b = a; /* b == 2 */ a += 1; /* this is the postincrement from be above */ a += 1; /* this is the preincrement for c above */ c = a; /* c == 4, a == 4 */ If that's confusing, that's why Swift took it out. In C, things got really _undefined_ if you used increment/decrement in a function call. void f (int x, int y, int z) { /* a function */ } int a = 2; f(++a, --a, a++); /* no idea what the arguments are, since the compiler can evaluate the argument expressions in any order it pleases */ Hope this helps.
[removed]
I own everything so I have full access to it all. This old developer is a real diva pain in the ass. So you're saying that the new developer can just take what's uploaded onto our Apple Developer account, and GitHub, and that will all plug right into his Xcode? This is assuming the old developer doesn't have any new builds that wasn't pushed to Test Flight or stuff like asset files on his HDD.
Poor piece of advice from a professional developer here: What worked the best for me, and hey might for you too, is to think of a project/app you wanna make, and just start cracking at it. The googling/problem solving you'll experience is like 90% of your future life as a dev. TL;DR just start dicking around in Xcode, and learn what you can as it comes up. Feel free to shoot me a PM if yas got questions!
Generally speaking, yes – the code on GitHub is the main thing, assuming of course that he's pushed the latest version of the code there. It's always better for the other developer to confirm he has all he needs before doing anything that might piss off the original developer though, just in case.
I'd highly recommend developes' iOS from beginner to paid professional course on udemy. Here is a Link: https://www.udemy.com/devslopes-ios10/ The course is currently only 15 Dollard. They also have an app with all of their content, they teach you everything from programming to graphical design. The instructor is very fun and has a great voice to listen too as well. 
Actually, I want to make sure that the user is *not* root. If they are, I want to exit. It's a safety precaution really.
Paul Hegarty's free course from Stanford, CS193P, on iTunesU.
got a question for you since you are familiar with perfect, is it possible to to use perfect to fetch JSON from a site every specific interval and update the users by sending remote notification ? I know nodeJS can do that, but I'm not sure about server-side swift
Im starting with Standford course. Every video is in youtube. It's reeeeaaally great. 
smart. thanks mate.
I'm going to test this out tonight. I'm in the same boat as OP, but I also love Atom. 
Possibly. I generally find Swift's type gymnastics distracting and annoying and the collections seem to take this to extremes for no particular reason. So here's one...perhaps you can tell me how this was supposed to work. On some social networking thing I'm doing for some client each post on the network also has a song. So I have [Post] and post.song is a song. But I want to extract a list of songs from posts. The easy way in Objective C would be to send NSArray posts.valueForKey("song") and I'd get an array of songs. In Smalltalk this would be songs := posts collect: [:post | post song]. I have categories on Objective C that also provide this. In php I'd use songs = array_map(function($p) {return $p-&gt;song),posts); In ruby it would be songs = posts.collect { | p | p song } According to the Swift compiler calling map on an array of post must return an array of post. Am I doing that wrong? I want to transform an array of post into an array of song and apparently map doesnt' work - so what does?
`map` should work fine: let songs = posts.map { $0.song }
Stability. I'm looking forward to stability.
They didn't seem super beginner friendly when I went through the first few, but that was a while back. 
It's impossible because I do not provide a way to do it. I do not want them going back by design. Edit: impossible as in I prevent it.
Neither fish nor flesh nor fowl.
answered: http://stackoverflow.com/questions/42739228/ios-swift3-move-a-textfield-and-a-containerview-with-the-keyboard/42755814#42755814
Well it seems reasonable, I was just thinking that maybe talking was faster but it's ok! So I would like to know a bit better how to do basic animation and use rightly the CGs, it seems a bit stupid as question but I can't get properly when use them. Thanks for the help :)
That's a pretty broad question. Maybe start with a tutorial on CoreAnimation. [Here's one that uses Swift.](http://jamesonquave.com/blog/core-animation-swift-tutorial-animatable-properties/)
Thanks a lot! If I have more question can I still ask you?
To tell you the truth, I'm not all that proficient in swift, so I'll probably just google the answers. You'll have better luck submitting new posts here with specific questions in the titles. That'll get you much better answers.
Alright! thanks for everything anyway :D
Since you said you're in college, does your college offer access to [Lynda](https://lynda.com)? I haven't been through any of their swift tutorials, but I've fallen in love with Lynda to learn about new JavaScript frameworks because their courses are comprehensive yet succinct. I'm a guy who typically likes learning from books, and I've found it to be the most book-like online resource (i.e. things are laid out in chapters, there is a logical structure, the videos are professionally done).
that is what i do at the moment, it does shrink down but the offset is the same as before.
I would be quite interested in such a group ;)
I've seen plenty in the past show up in the /r/Androiddev subreddit
If Xcode increased stability and speed, and added a few features that most other editors have (such as multiple cursor support a la Sublime Text), I'd adore it. As it stands now though Xcode crashes far more than I'd like, and things like autocomplete are not nearly fast enough.
And have you already tried to add a constraint of the bottom of tableView to the bottom of the ContainerView
Ok thanks for the feedback, gonna try this out. Fun stuff!
&gt; I have some question for which I couldn't find an answer It's much easier to just post your questions rather than making a post asking if someone will help you with your questions.
Tip: Make the description engaging and interesting. I've seen some apps from people around here who's description is terrible and doesn't provide much description as to what the app does. And make sure it's in proper English.
Yeah I figured, idk why I didn't considered that at all, anyway thanks for the reply! 
You want to create an instance of MKMapItem and then call openInMaps on that object. See [here](https://developer.apple.com/reference/mapkit/mkmapitem)
Sounds promising, but I am always very wary of these things, since if scade/xamarin/phonegap/etc ever go down, you have a huge problem on your hands. It's also a lot harder to find a scade developer than a native developer when you want to build your team. 
I've been toying with this idea lately about writing once and deploying everywhere using a universal format for UI (YAML based) and a universal language that would transpile to any platform, so it is good to know people is already working on this. Looks promising.
Have you even tried the example project on an actual device? It's surprisingly comfortable and easy to use..
how can you do that?
thank you for helping, but its not about the inset. It is that the offset that is not set correctly. http://stackoverflow.com/questions/42745783/ios-swift-3-keep-tableview-content-at-the-right-position-when-keyboard-is-shown i think i have to calculate the offset manually to figure out how much it needs to be scrolled.
I am myself pretty new to Xcode but isn't it possibke to "ctrl + click + drag" from the bottom of the tableView to the Bottom of the container and set either "bottom" or if that isn't an option try something like verticle spacing and manipulate this constraint in the "ruler-menu" in the sidebar.
This seems really cool. May use this on an upcoming project.
I do a lot of Phonegap / Cordova development and very minimal Xamarin development. This is very interesting to me, I would love a native solution that behaves seamlessly and I understand we're not there yet but its good to see things moving in the right direction.
Note that the Perfect Assistant plays nicely with Kitura and Vapor - we've made sure we support the other communities as well. They are good folks! :)
did you try 'SecRandomCopyBytes'?
This is my first tut:)
I think it'll take some sort of tutorial or explanation alert, but if it gets adopted by a few apps and users get the feel for it I think that'd be cool.
Actually didn't know that... thats pretty neat.
Thank you very much good sir
Thank you!!!
Down voted and yet every solution in here is wrong and doesn't answer his question. GG reddit.
Yeah noticed your comment in the readme :) Hardly ever need to use actual devices anymore to test
I'm thinking about how to design my keyboard better. [ISEmojiView](https://github.com/isaced/ISEmojiView) - Emoji Keyboard for iOS
Other than Google rumors, RemObjects provide a version of [swift for .NET, Java and Android](http://www.elementscompiler.com/elements/silver/default.aspx) with [some limitations](https://docs.elementscompiler.com/Silver/DifferencesAndLimitations/). Their cross platform library is called [sugar](https://github.com/remobjects/sugar).
In which way is it the ancestor?
haha! O.o i live in Dallas
As a functional programmer in Elixir and Elm when not writing Swift this blog reminds me why. If you can avoid accessing shared state from separate threads do it. Mutexes are death. 
I completely agree: use resource control access only when it's *absolutely* necessary. Semaphores (and the likes) are excellent concepts. However, if you can live without them, please do!
I definitely like the idea of creating UIs without IB and I've been playing with an idea to generate UIs from a simple format based on YAML like this: window: frame: 100, 100, 800, 400 title: UFO - Universal Format views: label: frame: 10, 10, 100, 25 title: Hello world! color: #880000 button: frame: 10, 20, 100, 25 title: Send Something like that would be easier and faster, I think. I guess there is nothing better than a working example so gonna have to work on that myself. Oh, and it could be easily ported to Android too.
Elixir is fantastic. The community is great and very noob friendly. Highly recommend learning it as it exposes you to an entirely different programming model. Concurrency is your friend and secret weapon. Join the Elixir-lang Slack channel and look at Elixir-Lang.org. The docs are excellent. /r/elixir is also a good resource. The web framework is both logical and lightweight. Once you learn the actor model for concurrent design you'll facepalm at the idea of threads, semaphores and mutexes. Swift is moving us toward FP while still maintaining classes and objects for compatibility. As we gain more cores in lieu of more GHz, concurrency is scale. Elixir dominates in that department. 
**Here's a sneak peek of [/r/elixir](https://np.reddit.com/r/elixir) using the [top posts](https://np.reddit.com/r/elixir/top/?sort=top&amp;t=year) of the year!** \#1: [Elixir v1.4 released](http://elixir-lang.org/blog/2017/01/05/elixir-v1-4-0-released/) | [11 comments](https://np.reddit.com/r/elixir/comments/5m397j/elixir_v14_released/) \#2: [How Discord handles push request bursts of over a million per minute with Elixir’s GenStage](https://discord.engineering/how-discord-handles-push-request-bursts-of-over-a-million-per-minute-with-elixirs-genstage-8f899f0221b4) | [11 comments](https://np.reddit.com/r/elixir/comments/5hz08s/how_discord_handles_push_request_bursts_of_over_a/) \#3: [Code School Free 'Try Elixir' Course Launches Today](https://www.codeschool.com/courses/try-elixir) | [7 comments](https://np.reddit.com/r/elixir/comments/5vjajh/code_school_free_try_elixir_course_launches_today/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
What do you mean "infinite scrolling"? A tableView is only as large as it needs to be. Do you mean scrolling and fetching new data so you can append it to the bottom of the tableView?
 func makeImageWithColor(_ color: UIColor, size: CGSize) -&gt; UIImage { let rect = CGRect(x: 0, y: 0, width: size.width, height: size.height) UIGraphicsBeginImageContextWithOptions(size, false, 0) color.setFill() UIRectFill(rect) let image: UIImage = UIGraphicsGetImageFromCurrentImageContext()! UIGraphicsEndImageContext() return image }
Than it is a playground thing not a swift thing. 
This recommendation needs more love. Mark Price's and Nick Walter's courses taught me everything I know. They cover everything and show good coding practices. 
So..... explain in detail what you're talking about. What have you tried? How does your UI look? You want them to add text fields anywhere on the screen? Because you give no direction as to how you want it implemented, I'll describe a half-ass attempt. Make a button on your UI that when tapped, creates a new UITextField on the screen. Then allow the user to be able to move it with the touchesEvent function to wherever they want. Please give more details for future questions.
That error means you tried to access the value of something that had no value. So to further expand, where does it exactly crash? Does it not show you the line the optional value comes from? What's the variable that's nil? Any code you can show us?
Back in Objective-C days couldn't all of this been done with an @Synchornized?
Nice!
Try [this](https://michiganlabs.com/ios/development/2016/11/10/ios-infinite-scrolling/) 
I don't really understand you but you could just make the text field hidden by default and then simply display it again on user demand via a button or something like that?
thanks 
Thanks, I am certainly still learning but have been learning for like a year now. I just want the right object to to implement my design. My familiarity with UICollectionView is like in the context of photos, like a bunch of thumbnails. What I want looks more like a table or a spreadsheet but I am not really in love with how the tables look. I have thought about using labels and drawing lines but that seems stupid. Also, if you know how to work with / handle scrolling, like if given constraints the table grows bigger than the screen. I know I will eventually have to solve that problem as well. 
By learning to make apps and making it
Nice....
Awesome! Tragically I'm on vacation at the moment so it'll be a couple weeks before I get home and try this on my old stacks. I can't wait to see how it goes. 
We've been working on a new app, [Koantify Checklists](https://itunes.apple.com/us/app/koantify-checklists/id1158001939?ls=1&amp;mt=8). It's a voice responsive app (i.e., Siri-like) for creating, maintaining, using, and sharing checklists. 
We use Crashlytics and localytics. Each had its own nitch.
We use Mixpanel for some event tracking, and it reports the device model.
 func handleButtonClick() { let newButton = UIButton(bla,bla,lba) Set the coordinates here self.view.addSubview(newButton) } 
Are you planning on releasing any tutorials on how you built this?
Awesome list! Thanks!
Can't tell much from that, you will need to add what the exception actually says.
&gt; failed to obtain a cell from its dataSource Is a bit of a giveaway... So it seams that you datasource could not provide the cell. So I would verify wether the datasource holds the correct data for all indexes of the cells and do some debugging in the cellForRow:AtIndex delegate function... And wether the amount of cells is correctly calculated in your datasource implementation. 
not enough information. what is the error code? where did you define the tags? in IB? or somewhere in the code? did you clearly define and intialize the button? did you wire up the outlets correctly? put a few assert or debug llines.
I'm doing the exact same thing, save for larger protocols, in which case I'll just create a separate file for the extension.
For the love of god! Please think about the problem before cry for help.
Ended up getting it to work. A few things weren't set up correctly. My table was static, and I didn't set up correctly identifier for the cells. Not I just have to implement UserDefaults to get persistence in saving the notes. 
[Ostrich Algorithm FTW](https://c1.staticflickr.com/9/8464/8087475145_cbf8c3deee_z.jpg) :D
Realm has a nice data browser if you want to access the data from outside the app: https://github.com/realm/realm-browser-osx I guess you can also create your own admin functions and access them via http but I haven't played with Realm. You can also use MySQL or PostgreSQL and their nice free admins tools phpMyAdmin and pgMyAdmin. And you can also use Cloudkit and Firebase, Apple and Google's options for remote DBs but I don't know about their admin tools. And if your data doesn't need to be shared among users you can always try SQLite locally for every client. I always go with Postgres for my own projects, but that's a personal choice.
 let value = Double(special_label) ?? 0.0 // use value for calculations
Two things which you should change immediately. * Stop using tags. If you have to use tags, in 99% you are doing something wrong. * Stop using "_" in variable names. I know it was widely used for constant vars, but it just isn't "Swfity" at all. One last thing.. why on earth do you check the tag of the button? If you have only one action for one button this isn't needed. 
It seems like you just have an error in the identifier of your ViewController. The first approach is right if you have a Storyboard named "Main" (default) with your ViewController. Are you certain that your Storyboard is named "Main" and you ViewController has the right identifier? The second approach you are mentioning works if you do all your setup code wise. This means if you have no UI elements or other stuff setup via Storyboard and adding everything via code like buttons, labels and so on. 
For each user fire an event in answers with the device name. Then you can compare the frequency of those events firing over a period. People will be counted multiple times but you kinda want that so you can get daily active user type percentages. You could restrict the event to firing no more than once a day if you want. It wouldn't be very hard to set that up. We do something similar. 
Yes you can use APIs in your apps... otherwise they wouldn't make them accessible to you.
What is with these recent bad questions with not enough information. Your question is confusing and we don't know what you're talking about. You want it to be accessible? What's "it"? Just declare a double on the top level of your class and set the variable equal to whatever you want it to be accessible. And you don't have to check the tag of the button because the button is connected to the @IBAction already.
I figured, thanks!
If you aren't keeping track of collisions, you pretty much have to re-insert every key on every removal. So, keep track: you can use an int, initialized to -1. If it is still -1, then 0 collisions have occurred. If it is N, there was a collision at index N from the hash of two values. if you try to insert a new element, and the tracker is already not -1, then set it to some other negative value. If removals and collisions are rare, then you will rarely have to re-insert every key on removal. Traditionally, if there will be removals, people put a linked list or a sorted array in each hash bucket, hash to get the hash bucket, then append to the secondary data structure. In a design like that removals are trivial.
Something like https://postgrest.com/en/v0.4/ may work for you if you want something done now but the ability to go to a backend hand-coded server later 
If you even read my message you will see that I actually did manage a way to solve it and the way i have done it works. However the logic is done in the controller and not the model. I also took the time to search up other possible solutions and every one that i have found was done in the controller. I am asking if there is a way to do it in the model so I can learn ways to optimize. Now instead of being a total d*** and complaining you can either read the full message and help with a solution or shut your mouth.
Hey its normal, feeling low for low growth rate. But the important part is to keep pushing yourself and keep moving fast no matter what. I was reading a news and it mentioned a woman who is my grandmother's age just launched her first app on app store so... its ok the learning part it can take time but dont give up on your dreams. And do everything with passion. "nothing is impossible to a willing heart".
If you have an art degree, maybe it's worth pursuing more "artistic" development paths, like web\UI design, front-end etc? I'm not saying you suck or anything, I just thought you could play to your strengths.
I'm surprised you didn't have the didSelectRow function in your code.
I assume you're looking for something cross platform? I've been following the development of Fiber2D, which looks promising. https://github.com/s1ddok/Fiber2D Looks mainly like proof of concept stuff at the moment, but I'm hoping that this (or something similar) will be production ready soon. It's based on Cocos2D too, which is extra brownie points. I'm sure that a good cross platform framework in Swift is going to gain some traction within the next year or so. I personally am less of a fan of Unity for 2D stuff, it always feels a bit heavy duty. I've done some C++ cross platform work, but I hate the language. I honestly think there's a good chance that game studios will move from C++ to Swift in the coming years. I think they'll find that they can write safer code and cut down on development time. That's what I'm hoping for anyway!
Thank you very much.
For me, when you start learning a new programming language, I create a calculator. I think it a good way to start as it shows you the basics and from there you can develop different ideas. Since with Swift you can make apps, ask your family or friends what app they would want to see from you and see if you can do it, thats what I did and it worked.
special_label.text
It's not exactly the same as AppleScript. Not even close.
Thank you very much for making this! It's wonderful to see people still think about HyperCard. I used HyperCard extensively through the late 80s and 90s and miss it every day.
Ah neat! Unfortunate that SDL is needed for Android &amp; Linux, but I get it :). Linking with C libs can be annoying. Have had some fun times trying to get that going with rust projects too.
You need to add button to tabbar view itself let frame = CGRect(x: 0.0, y: 0.0, width: tabBar.frame.width / 5, height: tabBar.frame.height) button = UIButton(frame: frame) button.setImage(buttonImage, for: UIControlState.normal) button.setImage(highlightImage, for: UIControlState.highlighted) button.center = CGPoint(x: self.tabBar.center.x, y: tabBar.frame.height / 2) button?.layer.zPosition = 2 button.addTarget(self, action: #selector(changeTabToMiddleTab), for: UIControlEvents.touchUpInside) self.tabBar.addSubview(button)
I can't seem to get that to work. I add the button as a subview of the tabBar but it doesn't seem to show on the screen anywhere, even when setting the zPosition of the button's layer and calling tabBar.bringSubview(toFront: button)
I'm working on a DnD app using Scene Kit and the new SKTileMap!
Won't by button frame be slightly out of the tabbar bounds if I want the button to be "raised up" a bit? I created a new project and was able to add the button to the tabbar and have it show by adding it as a subview to the tabbar, so that does work, thanks! Just need to try and figure out why it's not working in my app now..
If button will be out of the tabbar bounds it will not receive touch events. Instead you can add button to parent view - but it will raise much more problems. I think you can manually detect touches on screen and compare touches location with your button position
Thanks for your help. The issue's fixed now. I'd previously accidentally been setting my button's center to be equal to my tabbar's center which meant that the button was wayyyyy outside of my view Edit: code I used for ensuring the button's touches were detected is below, overriding my tabBar override open func hitTest(_ point: CGPoint, with event: UIEvent?) -&gt; UIView? { if (!self.clipsToBounds &amp;&amp; !self.isHidden &amp;&amp; self.alpha &gt; 0.0) { let subviews = self.subviews.reversed() for member in subviews { let subPoint = member.convert(point, from: self) if let result:UIView = member.hitTest(subPoint, with:event) { return result; } } } return super.hitTest(point, with: event) }
Swift is your first language, you've been doing it about a year, and you have 3 apps on the App Store? It sounds like you're on the right track. Obviously none of us can get inside your head and understand whatever frustration you are feeling, but it seems to me like you're doing just fine. Swift itself is a fairly "easy" (whatever that means) language to pick up as a first language, but when you add on the challenges of learning the iOS frameworks that makes for a fairly steep learning curve. I can't even imagine what reading some of those Cocoa Touch API function names must be like with dyslexia (at least once every UITableview I have to mix up "didSelectCell" and "didDeselectCell". Don't beat yourself up, confidence comes with practice (which kind of sucks, because if you lack confidence you don't feel like coding). The best way to stay motivated for me has been to ALWAYS have a project, even if it's just a calculator (as one user commented). A favorite of mine to use when I'm learning a new language is the game Hangman: it offers a lot of different problems to solve, different ways to solve each problem, and it's fun (you know, sort of, I mean it's just Hangman). To answer your other questions yes, this is probably a normal feeling for anyone to go through in any endeavor (look up imposter syndrome). As to how long it took me to learn... I'm still learning, every damn day I learn something new (sometimes it's fun, sometimes it's because I've struggled with a stupid problem for hours and wanted to throw my Mac out the window). If you HONESTLY enjoy it then keep it up. No one is grading you, pursue your passion. 
First you'll want to store a date when you want the timer to start. How you store it is up to you. let startDate = Date() Then when you want to show the elapsed time, you can use a `DateComponentsFormatter` to do the hard work for you. let endDate = Date() let formatter = DateComponentsFormatter() formatter.zeroFormattingBehavior = .pad formatter.allowedUnits = [.hour, .minute, .second] let elapsedTimeString = formatter.string(from: startDate, to: endDate) print(elapsedTimeString) // something like 0:01:43 Also, if your searching for solutions, using the term `timer` might be throwing you off. What you described sounds more like a stopwatch.
Been learning swift for a few months, however I do have a background as a web dev to start with. But I can totally relate to frustration and sometimes losing motivation. The first thing you have to do is find some fun projects to do. I saw you planned on making a game, that's a great one. It looked a bit ambitious so maybe try making a slightly dumbed down version of that to start, learn the most you can from the mistakes you will probably make, and then you'll have a much better idea of how to proceed for the big one. Also, if you get stuck on something for a while, take a break. Go for a walk, sit in a park, get some oxygen and move. I guarantee when you come back you'll have fresh ideas to solve the problem. And a final piece of advice, it might sound silly but build your apps directly on your phone if you don't already. The simulator is great and all, but for me having the app run on my phone, physically in my hand is a very satisfying feeling. It motivates me so much to keep going. Best of luck bud!
Keep working at it bro, I'm self taught too and I've been developing professionally as a junior dev for the past 7 months. Work work and work, whenever you feel down, try something else, read stack overflow, keep learning new things and stay interested, if you ever need someone to talk to just hit me up :D maybe we both can learn something from each other.
Should add Couchbase Mobile to the list. Similar to Firebase or Realm in that it offers an offline capable local database and a sync component that handles networking and conflicts with the remote backend. Like them it offers a number of authentication options (including using your own), a powerful REST api, and supports every major platform. The permission system is, imo, more elegant than those other two which is why I prefer it personally.
What about the dual windowed app?
Have you considered [AirTable](https://airtable.com/)?
I've met the guys behind Vapor yesterday, and their answer for this is that Kitura is only a low-level library similar to Express.js, while Vapor is more of a "batteries included" solution that offers you most of what you need to build a server software. Also, according to them, you can replace Vapor's server module for Kitura. So in short: they're different things, and you can use both.
Find something *you* are interested in making. Don't make another Notes clone just to follow a tutorial. Don't work on someone else's idea. Think of something you'd really like to see, and work at it. It will probably be slow going at first, but you'll be far more interested (and to be clear, tutorials are fine when you need help, but find ones specific to the task/feature you need help with. Want to use Core Data? Follow a Core Data tutorial but implement it inside your own app and not the tutorial's dummy app.) And if you want to propose, go for it. Use whatever ring you can afford. If it's not expensive enough for her then it's not you she's interested in. 
Of 3 are using Nodejs CHTTP (which is a battle tested) Zewo, Kitura and Perfect. Perfect did tried to implement HTTP in Swift and were replaced with CHTTP. Only Perfect has HTTP/2 which is still in development. Vapor implement HTTP in Swift but you may swap with Kitura if performance is needed with no code changes. Meanwhile, these low-level layers are still being discuss. They are evaluating on performance, I would think of coroutine are more important to have than framework as it is now a beta in LLVM and should deliver significant performance than GCD and any current implementation in HTTP.
Have you grasped the basics? Can you push, present view controllers with easy? Use objects and parse JSON? create table views, collection views, etc? If the above are met, just go ahead and try to build something, make a clone of something, my first app was a Pokedex I made, it had collectionViews, services with Alamofire and the basic concept of passing data through one VC to another.... if you feel like you haven't grasped the basics then yeah keep doing the app-tutorials
Oh okay I actually has Mark Prices couse. I'll check that out too. Thanks!
Clearly Watson
Showing two UIViewControllers at once is easy. Assuming you use storyboards for your UI, just use two container views and size them like you want them to be :)
Okay it's pretty hard to tell what's going on with this because you've given so much unnecessary code here, in the future can you only post the relevant stuff please. Anyway just some sanity checking, are you sure g1 is the correct button? I only ask because it's not really a sensible name for a button. Also have you made sure that the code is even getting inside the if statement (`if guessL == "F" { print("inside if"); g1.backgroundColor = .red}`)?
You should definitely change all those if/else's to a switch statement (although there are other ways to do what I think you're trying to do using filter). Switches have a performance gain (in most languages, someone please correct me if I'm wrong in Swift) when compared to an if/else that does more than three comparisons. 
You've hit one of the common problems with object oriented programming....janky class hierarchies. Buttons have backgroundColor because they inherit it from UIView but they don't actually use backgroundColor most of the time because the "correct" way to do this is to use setImage(_ image: UIImage?, for state: UIControlState) like 4 times, one for each UIControlState. Buttons are supposed to automatically change their styling(primarily color) in response to taps, disabling, etc. Back in the day, before the great iOS7 design flattening, buttons pretty much all had shading gradients and gloss lines so they appeared 3D, and you could basically only get that using images straight out of photoshop. You can apparently get backgroundColor to work by setting button type to custom, but it's generally better to make some utility methods that will generate a 1px by 1px image from a UIColor and then setImage for each control state. You can even wrap that up into a utility method that will set all of them given the normal color and a bit of math to calculate reasonable selected/highlighted colors. Also, fyi the big repetitive if else chain can be cleaned up by sticking your views in an array and using filter, like so: let views = [(aLabel1,firstL), .....] if let (aLabel, nthL) = views.filter{$0.0.text == " ").first { nthL.backgroundColor = UIColor(red: 0.8863, green: 0.8863, blue: 0.8863, alpha: 1) aLabel.text = guessL } else { // your else code } 
You're worrying about nothing. IBM is a huge open source contributor. Even in the not at all likely chance that IBM drops Kitura, it would likely be to for an independent committee to oversee the project. Unless it loses badly, Kitura is not going anywhere for the foreseeable future. 
You'd have to post your code so I could figure out what the problem is. Anything I say now would just be guessing.
 var startDate = Date() var minuteDate = Date() var endDate = Date() var formatter = DateComponentsFormatter() @IBAction func startButton(_ sender: UIButton) { formatter.zeroFormattingBehavior = .pad formatter.allowedUnits = [.hour, .minute, .second] let elapsedTimeString = formatter.string(from: startDate, to: endDate) startDate.addTimeInterval(1) print(elapsedTimeString!) } @IBAction func stopButton(_ sender: UIButton) { }
Thanks! This is what I was looking for. Its a shame it looks like it isn't being kept current :'( 
UserDefaults is a good place to store these kind of settings. You might also find it useful to create a class that manages the music, so that you don't spread all of the functionality across your app. An easy pattern for doing this is the singleton pattern. If you're not familiar with it, it basically means that you create a class where there can only be one instance. It's a common pattern in iOS development, so there will be loads of examples online. Then your api could look something like: MusicManager.shared.play("hood", type: ".mp3") MusicManager.shared.setMuted(true) The MusicManager class would manage the starting and stopping of the music, and store and load the current setting in UserDefaults. If you called play() when the music is muted, it could choose to not play the file.
http://www.dailymail.co.uk/sciencetech/article-4268978/81-year-old-Japanese-woman-releases-app.html
Thx 
[removed]
Class 'ViewController' has no initialisers :( 
I'm sure that there are, but I don't know it myself. There is a legal (not to mention moral) obligation to support this regardless.
so the question is how to elaborate the need to put accessibility features for commercial app, when the client is not really thinking about it. I totally agree about importance of accessibility for mobile, desktop or any physical product to every person. But sometimes business needs is above that (like faster deliver, cheaper). What's your opinion on that?
I wholeheartedly agree with this. I work on a handful of apps, most of which use IB. The company's flagship app doesn't and it's a pleasure to work on compared to the others. Given the choice I'll code UIs all day long before using IB. 
Great choice, Swift is awesome! I disagree that the Apple Swift reference is the best place to start. It's great, but I think you will find it a little too fast paced if this is you first time programming. Have a look at https://www.raywenderlich.com - they have a load of great tutorials for beginners.
Don't forget to edit that crap out of your plist! :D
**FileHandle** is your friend. Found this but there are plenty of results on Google: http://www.techotopia.com/index.php/Working_with_Files_in_Swift_on_iOS_8 
Does creating a filehandle object create a file? Or does a file have to already exist?... I've been on that page and I noticed there's no explicit functionality explaining creating a file. However the API seems to support it... but I can't find a proper example for the simple functionality I'm looking for. Honestly one of the answers I got is that swift isn't focused around this sort of thing, which is why it seems like I have to use multiple classes and methods to reproduce that sort of functionality. (File manager and file handler).. and why no proper tutorials cover it. basically you have to do it all by hand if you want that. Not sure if that's true or not. I just started swift today but I have plenty of experience in the C family
Is this actually controversial? I don't know any teams larger than one person that would use IB now.
What kind of trouble? Crashes? I'm just curious because I think it's the developer's fault for shipping an app that has unconnected IBOutlets.
I feel like Apple should just make IBOutlets non-optional, and make the IBOutlet keyword a compiler flag that allows an IBOutlet property to have no value initially, until `awakeFromNib`, that is.
I may be in the minority here but I like using XIBs, but just for declaring Autolayout constraints, which would be tedious to do in code. I don't like using third-party libraries that make this easier, though. I'm too afraid to depend on anything that can break source when Apple does something new in a future version of iOS. I inflate my VCs' views from XIB and transition from one VC to another programatically. I don't use storyboards and segues at all. That said, when the article mentioned that avoiding IB helped them rid of optionals and implicitly unwrapped optionals in their data models, I thought that this is a problem that you can avoid simply by pushing/popping/presenting VCs in code instead of using segues. Think of a usual push VC scenario: you init a data model with initial, non-optional values, you init the next VC and pass the data model as a parameter in the next VC's initializer, and push it in the navigation controller or present it modally. No optionals required. Moreover, if you are being forced to make your data models' properties to be optional because of IBOutlets--explain to me why there seems to be such tight coupling among your views and your models?
I haven't used it that much but here is the ref page: https://developer.apple.com/reference/foundation/filehandle You can do everything that can be done in C and yes you'll need FileManager too for copying, renaming, deleting and all that stuff. Don't get discouraged, it's pretty simple once you find a couple of good examples. Here I found two more from the Cookbook: https://iswift.org/cookbook/write-data-to-file https://iswift.org/cookbook/read-data-from-file And the one time I used it in my apps: https://github.com/kuyawa/Invoices/blob/master/Invoices/Utils/FileUtils.swift#L171 I usually read/write it all in one swoop but according to the ref you can use offsets and all that fun stuff. And for quicker read/write the String type has convenient initializers like: let text = String(contentsOfFile: 'sample.txt') // and text.write('sample.txt', atomically: false, encoding: .utf8)
It really depends on what your API is meant to do. I read an article few days back about this but I really cannot find the link. But the TL;DR of that article basically says: - If the error is something expected (e.g no content found in CMS), encapsulate in within the return value. In the case of Swift, one way would be to do it via enums (.success(let result) and .failure(let error). - If the error is something unexpected/cannot be predicted (e.g. Internal Server Error 500), throw an exception. I will put the link here if I come across this article again. If you can ask more specifically/post some code snippets I would be glad to give my suggestions/opinions.
Yes, crashes. And when did I say I shipped that way? The nil optionals weren't unconnected outlets, though.
Because if the crashes occurred in dev then it's most likely a dev error that needs to be resolved during development anyway, so the crash would be acceptable and is in fact a dev tool in this case. Moreover, if they aren't IBOutlets, what are they and *why are they implicitly unwrapped optionals?*
Thank you!... How do I format them? (Pretty new to programming!) 😁
I'm not at home atm, but in my case I have created a facade for scheduling local notifications. If the interval is smaller than 60, it's not "allowed". So the question is what I should do if the internal IS smaller than 60: silently skipping it feels too unclear and an exception feels too much, because then you need to wrap every notification scheduling with a try/catch which defeats the purpose of a facade in order to remove redundant code. 
You want to save elapsed time only once? Put elapsed time declaration outside func as optional and in stopButton set it's value only when it's not yet initialized. You can also set isEnabled properties for buttons so only one of them is active at time so you need to get new startDate before clicking stop again
Disk encryption is transparent to the user. If you have such issues, they come from elsewhere.
Thank you, problem is I get this error 'Cannot assign value of type 'Date' to type 'Int' 😒 Also, if elapsedTime == 0, what am I setting the elapsedTime to be? If elapsedTime == 0 { elapsedTime = what? } 
I'm using SnapKit and I dont want to back to the storyboard-days.
that looks super clean and beautiful!
I suppose an analogy could help. You can get to a destination faster by speeding, but you might also cause an accident or get a speeding ticket. If a company wants to save money by creating an app without supporting accessibility, it might work for them, but they might also get sued which could cost them much more in the end. For me personally, I don't like that sort of risk. If I can't do something properly I don't want to do it at all.
if the cpu supports the aes-ni extension the encryption layer is almost instant
Maybe try to sum up those intervals then? on pause you calculate interval and on resume you would change startDate
I wrote a Swiftlint rule a while back that checks whether `assert()` is called on implicitly unwrapped outlets in `viewDidLoad()` or an `assertOutlets()` method that is then called from `viewDidLoad()`. Makes certainty about this factor pretty easy. I think the long-term solution is for Apple to update/replace UIKit with something that suits Swift better. There's a lot of rough edges like this that are *okay-ish* if you just use Swift in an Objective-C way, but not as pleasant when you view it from a pure-Swift perspective. 
I can't stand the way the guys behind Perfect try to shoe-horn it into every conversation, no matter how unrelated. I won't use it on principle, it feels super-spammy.
You don't need a `scope` keyword! The entire featureset this post requests can be had by replacing `scope` with `enum` throughout the blog post.
You missed the part where he talks about the problems with the `enum` hack (it really is a hack) &gt; But this too is confusing because it’s not obvious that `Transformations` is meant to provide a namespace. It’s not really an enum. This is especially problematic in real-world examples where the functions and members of such a type are lengthy, making it impossible to tell at a glance whether there are any case declarations hidden somewhere in the file. It also does not prevent other developers from misunderstanding your intent and adding cases to the enum in the future.
The AES instructions involved with FileVault are hardware accelerated and add negligible overhead. The slowness you're seeing with Xcode is because Swift is slow to compile. Use it as an excuse to get up, stretch, walk around, grab some coffee. 
I have personally never written Swift that needed namespaces like this to create an organizational structure. However, given that the features requested are available today, the cost of burning a keyword to support a DSL is not justified here. I would implore the author to run their Swift through a preprocessor or wait until Swift has hygienic macros so this can be done with the aesthetics they desire.
Keep in mind that assert will not be compiled into release versions, only sanity checks. You can use precondition to force a crash in production. If your program can handle the state if &lt; 60 is passed in, perhaps assert is correct. If the application cannot reasonably work in that scenario, precondition could be a way to go. In the end, however, if you can change the code in your API to throw an error so that the application doesn't crash, that is probably still the best method. The code that calls the API can make a decision how to handle it. 
What you do is create a Cocoa Touch framework. All of your UI code, you should make a member of that target (and also your application target). Then, the playground you put in your application target imports that framework at the top to use the UI code. This isn't perfect, it means when you make a change in that UI code, you have to build to get the changes propagated to that .framework, so it can be reflected in the playground. edit: I think [this](https://medium.com/@LogMaestro/adding-playgrounds-to-your-xcode-project-79d5ea0c7087#.5a3hwz5rh) explains it 
A much bigger problem, IMO, is the conflation of frameworks and modules. If it were possible to make lightweight modules, and import them under a namespace if desired, it would solve this and a lot more problems. 
So, now you are saying "Macros are good enough cause keywords are much too valuable to waste on syntax?"
Making contraints are not that tedious to make any more. `NSLayoutConstraint`s suck but layout anchors have been introduced by Apple to make it much easier. To make syntax even more better, open source frameworks like `SnapKit` make coding constraints cake walk.
I'm saying this is an aesthetic issue that can be solved by source-to-source translation from whatever syntax the author so desires rather than a full-blown language feature. So yeah, pretty much that. But if you need to be reductionistic here, it's more accurate to say "macros are far and away the better answer here"!
I would suggest using a class extension conforming to UICollectionViewFlowDelegateLayout. For example, change your heading code to read: let sectionInset = UIEdgeInsets(top: -64, left: 0, bottom: 0, right: 0) then create a class extension: extension InsertYourClassNameHere : UICollectionViewFlowDelegateLayout { func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -&gt; UIEdgeInsets { return sectionInsets } }
blacklist derived data and cache folders for spotlight indexing.
https://www.bignerdranch.com/books/
not enough detail in this post, nor is there a sample piece of code we can look. not sure what you want us to do about it. have you tried looking at this? https://www.thorntech.com/2015/08/want-your-swift-app-to-scroll-in-two-directions-like-netflix-heres-how/
This could easily be solved declaring static a whole class or struct and we save declaring every function or variable static, or at least using the word 'module' instead of 'scope' so we could even declare public, private or static modules and easily allow namespacing too.
show what you got already and let's try to make it work
I would suggest taking a spindump when this happening, and analyzing the spindump to see what's going on. If you do see filesystem encryption being a significant bottleneck, that sounds like a great bug report.
Deleting the storyboard lol
TIL2
Why are you moving over to iOS development out of curiosity? Check out big nerd ranch and ray wenderlich. Also the stanford iOS dev class 193p class on YouTube is good as well. 
I have a complete Swift 3 / iOS 10 course online, free to read: [Hacking with Swift](https://www.hackingwithswift.com/read). It teaches you Swift + iOS using projects so you learn everything in a useful context, plus I'm happy to answer questions either here or on Twitter: [@twostraws](https://www.twitter.com/twostraws). Did I mention it was free? :) For more advanced Swift coding, I made a free video called [Natural Swift](https://gumroad.com/l/natural-swift), that teaches functional programming, value types vs reference types, and protocol-oriented programming in about 75 minutes. I have a variety of follow-on books that teach other things: [Pro Swift](https://www.hackingwithswift.com/store/pro-swift), [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos), [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift), [Hacking with watchOS](https://www.hackingwithswift.com/store/hacking-with-watchos), [Swift Coding Challenges](https://www.hackingwithswift.com/store/swift-coding-challenges), and others. Those are not free, I'm afraid, but obviously I hope you enjoyed Hacking with Swift enough that you're willing to consider buying some :) Enjoy!
Coming from a C++ background myself, namespacing there is ubiquitous, so I can't really see the idea as niche. The fact that there's a de-facto enum hack for this at least means that people want to have namespace support in some form or another.
Yes, that's essentially what happens when you create a Swift framework. If you look inside the framework bundle, there's a module map. That's why you can use Swift frameworks from ObjC code.
 let test = "test" test.contains("es") //true
And when I am looking for characters?
This! Thanks.
First you need a list of rows, where rows is a [String: Any]: var list = [Rows]() Then you use the two common overridable methods in a TableView: func numberOfRows(in tableView: NSTableView) -&gt; Int { return list.count } func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -&gt; NSView? { let record = list[row] // here you use the record, whether by index or by key : }
And by "copied" to you mean copied to the clipboard? Like cmd-c does if you have highlighted text?
Exactly!
Are you sure it wouldn't be NSPasteboard? Like I said in the original post, I am programming on macOS, not iOS. 
[removed]
Can you help with that? I am a newbie 
I dunno, trying to view the gif on my phone and it isn't clear when you are showing iPad. Can you just post a pair of screenshots?
[Here is the screenshot of what it should look like. It looks like this on an iphones 5-7plus. ](http://imgur.com/a/a6qpB) [on an ipad it looks like this. the blue/white icon pins are suppose to line up on top of the red numbers but as you can see they scatter off.](http://imgur.com/a/oLRXX)
Second tut
Are you saying that when you use your app on an iphone, the blue/white pins line up with the red numbers, and then when you zoom in and out they blue/white pins continue to line up with the numbers? And you have accomplished that with 'auto constraints and autosizing'? Maybe I don't know what you mean by 'auto constraints and autosizing', but it would seem to me to require some pretty cleverly defined constraints to position the pins correctly based on the zoom. And it works on _any_ size iphone? I would have thought getting it to work on an iPad would be a doddle if that were the case! From this point of view, really, an iPad can be considered just a different size of iPhone, can't it? I must be misunderstanding something because it isn't making sense. TBH, I wouldn't even try to use constraints for this, I would use olde-stylee positioning code: I would know the coordinates of the red numbers at a certain zoom. When the user zooms, I would calculate the zoom factor in both x and y and then calculate the new position for a pin by multiplying its location by the zoom factor.
It depends entirely on how you want it to look. Imagine if you have a 8x8 array, you could have 8 rows (cells) and place the 8 elements in each row in each cell. Or you could have 64 rows where the first row is cell [0,0], the second cell is [0,1] etc. or 16 rows of 4 or 32 rows of 2 or many another wacky combination. For more specific help, you need to make a more specific problem statement.
You have it right.. everything lines up using auto zooming (without and constraints). Just not on an iPad. The buttons move slightly off. I'm guessing because it's a different aspect ratio? I asked the question on stackoverflow and a guy with a respectable reputation said I didn't need constraints as long as the image size was the same on every device. I can't get the image size constraints to be valid in Xcode w/o getting red lines. Right now they are on auto on the right hand side view. I've gotten suggestions to do what your saying, doing it programmatically with the x and y values but before doing that I thought there was a very easy solution just locking down the image with the map then the buttons would naturally adjust. (At least that's what the guy on stackoverflow said. [here's the link to the stackoverflow page ](http://stackoverflow.com/questions/42602723/xcode-8-swift-3-how-can-i-lock-button-constraints-to-a-pinch-to-zoom-image-so) If you scroll down to the bottom comments his last comment said I didn't need any constraints... Thanks for the reply and time as well : )
With the Facebook account linked on the phone?
Oh I see. So your designer left the red numbers as a mark for where the buttons should go. Two options. 1) Use size classes and set the constraints different for iPad. See this SO question: http://stackoverflow.com/questions/38012284/how-to-set-up-different-auto-layout-constraints-for-different-screen-sizes 2) Set the constraints using a multiplier relative to the map's size. 
You can nearly achieve this completely by just using a DateFormatter. The problem has to do with the day. I assume you want days to have suffixes like "1st", "2nd", "3rd", etc. If all you needed was the number, you could create a DateFormatter like this: func formattedDateString(from date: Date) -&gt; String { let formatter = DateFormatter() formatter.dateFormat = "'You were born in 'y', on the 'd' day in 'MMMM'.'" return formatter.string(from: date) } Unfortunately, this returns something like: &gt; You were born in 1989, on the 25 day in September. I was able to get the suffixes by using a combination of DateComponents and DateFormatter + a special function for determining suffixes: func formattedDateString(from date: Date) -&gt; String { let formatter = DateFormatter() formatter.dateFormat = "MMMM" let components = Calendar.current.dateComponents([.year, .day], from: date) let dayString = wordFromNumber(components.day!) let monthString = formatter.string(from: date) return "You were born in \(components.year!), on the \(dayString) day in \(monthString)" } func wordFromNumber(_ num: Int) -&gt; String { let suffixes = ["th","st","nd","rd","th"] var idx = min(num % 10, suffixes.count-1) let tens = num % 100 if tens &gt; 10 &amp;&amp; tens &lt; 14 { idx = 0 } return "\(num)\(suffixes[idx])" } *A note on DateFormatter:* DateFormatters are computationally expensive to create, so it's really best to only create one, and reuse that one formatter. In both of my examples, I am creating a new instance of DateFormatter every time I need to format a date, but you would never want to do this in production. If you have some special circumstance that requires you to create a lot of DateFormatters, do it on a background thread.
Multiplier is just a value from 0-1. So if you constrain the width of one view to be equal to the width of another view with a multiplier of 0.5, it'll be half as wide. Same applies for constraining edges and such. Experiment with it. 
Why do you need to iterate over the stats? Saving state? Debugging? Do you only need to iterate over some stats? If it's just debugging, you can likely get by with some use of dump() to get the tree from a deeply nested struct. This feels a bit like someone trying to map JS on top of Swift, and I'm curious to hear more about why you need the approach so maybe a more Swift-compatable methodology can be found. There are ways to make a deeply nested struct iterable, but I'm not even sure a struct is a better answer than a class here: Reference semantics typically fit this type of mutable state better than value semantics if you're not intentionally using a "truth broker" like ReSwift to mediate state.
What different about it than uber?
Really well made tutorials ! Just started learning Swift as my first actualy programming language after html/css and I'm really loving the neat stuff you can do with it! Much appreciated :D
Thank you, that was it! 
Yes, that's what it uses. You have to specify it on the SDK by setting the loginBehaviour of the LoginManager to .systemAccount like /u/RavernKohDev pointed.
Treehouse is pretty decent. 
First the Apple Official "the swift programming language", then https://www.bignerdranch.com/books/ios-programming/ 
Heyo! I unused my ND about a month ago. It helped so much, now I can basically tackle any issues I have. Udacity +1
Hi VFK! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/60ak8i/ycreader_a_hacker_news_client_powered_by_official/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
1 Does not make sense do me. How could a black box be easier to debug than coded layouts? 2. Why not just use individual nib files?
I only problem I see is that it's saving the recorded audio to disk and not deleting it, which will just take up disk space and it isn't what the user was expecting. You should either delete the file when you're finish or (even better) write to `"/dev/null"` so the data is never saved.
I am using a struct as I want value copies, they will be set upon initialisation and never changed after instantiation (I will create a new instance anytime I want updated stats as they are being pulled externally). &amp;nbsp; My initial thinking was that I was going to iterate over them to create custom cells, so if I had 50+ stats I could just loop over an array that creates and appends custom cells. &amp;nbsp; The more I think about it though I should probably just use a dictionary, I wanted the name safety a tuple offers to make sure I had the correct stats when using them, but if the only way I am using them is to loop over them then that makes the naming of the tuples redundant anyway. &amp;nbsp; If I take the dictionary route, how can I have two values attached to one key? I could have a dictionary where the keys are the stat names and each of those keys contain a dictionary as their value. This nested dictionary would then have "asStat" and "count" as values. I know this would work but is it considered bad practice to have to write the keys string out to reference it? &amp;nbsp; As I was typing this I thought I would try the dictionary route, here is an example which hopefully demonstrates what I am trying to do. This feels a little "messy". [example](http://imgur.com/pDvxHzS). 
you mean this part? let file = try? AVAudioFile(forReading: url) I don't see how installTap is creating a file 
Holy cow, that's an amazing explanation! Thank you so much! I don't have my iPad with me just now, but I'll take a closer look at the code when I get home and see what I can learn from it. I do have the official Swift documentation from Apple in iBooks but the one I downloaded doesn't talk about operations related to dates. It is useful, though, and I've been reading it a lot.
I wrote a complete tutorial series teaching iOS and Swift. It's all updated for Swift 3 / Xcode 8, it's all project-based so you make interesting things while you learn, and – best of all – it's completely free to read online. Find it here: [Hacking with Swift](https://www.hackingwithswift.com/read). Let me know if you have any questions!
@ASnugglyBear @Jozemite_Apps Sorry for the late reply. Thank you so much, I'll definitely keep them in mind. :)
you can type there .actionSheet
[removed]
He mentioned Alamofire, so maybe his models are JSON-short-living-type. In that case CD and Realm might be an overkill. Serializing object from JSON with NSCoding might be the best solution out there.
I'm not sure what's on iBooks other than the language reference. This is useful in general but is not going to help you anywhere near as often as googling whatever class you might be dealing with from an apple framework with "class reference". This will give you the website with the description of everything related to your class, and usually the framework in general. In your specific case, googling "NSCalendar class reference" will point you to the page I had in mind.
That is true, for sure, nothing beats the community's experience. Thing is, that the language itself is totally new to me. It's been a long time since I wrote any code... I do realise I should have started with something simpler, like, from the beginning, property, but I like to test myself and find myself might more able to learn from challenges.
Thanks! All of that is good advice, getting feedback is why I love sharing my projects. This was more of a weekend-project which is why it doesn't necessarily follow vest practices.
@chutehappens, @luigi3 thank you for your help and evaluation! I create my models at the moment from JSON, every time I do a new request the old models get cleared. But i guess i have to change this anyway since i want to enable paging like twitter. Looks like a database will be necessary.
You could try this: https://github.com/Haneke/HanekeSwift Or maybe some other solution with caching. Keep it simple, I guess you don't need real database.
Just started learning Swift and Xcode. I've done C++, Java, in the past. I make a living in OOP ActionScript (if you can believe it) and I'm looking to add some new skills and move into some serious programming on the platforms I love using. I have a few ideas for future projects but for now I just want to get my "hands dirty."
Fswatch from Homebrew?
Got it! Thank you so much!
SAME. Really struggling with *UICollectionView's* unfortunately and I wish I wasn't right now. 
If I am understanding your statement, you need to add actions to the alertController. let yourAction = UIAlertAction(title:"YourTitle", style: UIAlertActionStyle.default){ Void in //Do Stuff } then finally add your action to the alert. yourAlert.addAction(yourAction)
Learned a ton, not only about the swift language but general programming knowledge as well. Absolutely fantastic.
Ray Wenderlich has some great tutorials. I really enjoy his structure.
Be sure to check out UICollectionViewLayout as well. If you want a carousel-like layout, you'll probably need to subclass UICollectionViewLayout. Collection views are definitely tricky, but they're super powerful!
Do you have a particular type of contribution in mind? It could be something as simple as engaging in conversation on swift-evolution, or as complex as contributing C++ code to the compiler. (I'm in the process of shoring up my compiler skills so that I can do the latter). 
Anything to just get my feet wet. GitHub.com/apple/swift is a giant box of question marks to me right now. I'd like to get to the point where I can navigate the code decently and understand what I'm looking at. TBH, I dont' know WHAT I want to do, I just want somewhere to start. I'm an iOS dev with an academic background (in physics, though, not CS), so diving into and learning new things fascinates the hell out of me. 
Oh well I've toyed with that. That's more akin to navigating a normal GitHub Swift framework. Navigating the Swift code isn't particularly hard. EXCEPT, that is, when you reach something that points to an implementation detail in apple/swift. IE Objective-C bridging just calls black magic functions that are part of apple/swift. This is where I become curious.
There are tickets marked as starter bugs at http://bugs.swift.org that may be a good place to dip your toes in. You may also want to ask on the official swift-dev mailing list for advice on getting started. Good luck!
My apologies, I misunderstood that the article was differentiating protocals from OOD. Protocals are actually a very important part of most modern programming languages and are a big step toward understanding how abstract objects interact with one another. To be honest, it's not necessary to describe it with a new three letter acronym, it still fits under the umbrella of OOD, it's just a pattern.
That's really interesting, thank you 😊 
Mark Price on Udemy.com Beginner to paid professional. Hands down the best. 
The Apple Developer Library.
I thought this was going to be about helping people addicted to buying board games keep it under control... There are so many these days it's an expensive habit!
Standford swift course on YouTube. Incredibly good lectures. 
Read the official Apple eBook; start to finish like a machine. Job done.
When a user taps and holds on the screen, I want a circle object to appear and increase in size as long as the user holds on the screen. 
No, I mean you need to give the background on this. Is this a game mechanism? A voting mechanism for a social media application? An interface for an audio creation tool? Something else? What UI libraries are you using? Somebody who's trying to draw something in SpriteKit or Cocos2d for a game needs a completely different approach to somebody who is trying to create a unique button mechanism for a generic UIKit-based application. Unless you tell people what you're actually doing, then you aren't going to get good advice. 
Sorry, I didn't understand. I'm trying to tie it into task management. I haven't started yet but for a school project I have to make a unique list app. I was thinking as the user taps and holds anywhere on the screen, it would "balloon" an object (each second hold, adds a minute to the task). As user lets go, a keyboard comes up so the user can add a description to the tasks. As user enters the description then the object would float around and "deflate" as time runs out. I'm new to Swift sorry. 
Assuming a UIKit-based application: UILongPressGestureRecognizer https://developer.apple.com/reference/uikit/uilongpressgesturerecognizer Might need to adjust the minimum​Press​Duration. It will notify you when the gesture starts (finger press down minimum​Press​Duration), changes (finger sliding), ends (finger lifted). You'll have to fill in the logic of ballooning when the gesture starts. 
PromiseKit. In the future I will look into RxSwift
If you're ok with iOS 9+ support check this out: https://github.com/Yalantis/Koloda I used it a year ago and was really pleased with it. 
&gt; init for BankManager should be private, due to nature of singleton. Wouldn't this make dependency injection / mocking impossible?
I've used BrightFutures the past year and a half in all my projects, it's been boring (in a good way) and I find it essential. I dislike RxSwift and find it an unfavourable set of tradeoffs, but that's a more complex issue. I see others recommending PromiseKit, the main difference is that BrightFutures parameterizes over an error type in addition to the main type, Future&lt;T, E&gt; instead of PromiseKit's Promise&lt;T&gt;. This gives you better restriction/handling of errors (I use my own enums). You can still use a Result within a PromiseKit Promise ... Promise&lt;Result&lt;T, E&gt;&gt;, but that's not really PromiseKit's intent ... as they have a bunch of failure handling functions that assume just assume "Error". I find https://github.com/antitypical/Result essential, BrightFutures assumes it/depends on it. That in addition to BF using the traditional FP style function names secures it for me. PromiseKit looks good enough though. 
would really like your thoughts on RX as it provides other features other than a more functional approach...this is why I am looking at RX...to be fair I don't know any one with RX in production at the moment but I know a good number of BF products live and kicking well...but am still interested in giving RX so any thoughts or experiences would be appreciated. 
do you feel the other RX features are what your interested in? 
yup, this is the correct solution. I'm assuming they punted on it to get swift out the door quickly, but they need to do it to make storyboards and swift actually work together without the whole thing feeling like a huge dirty hack.
BrightFutures's related repository is **[Result](http://github.oldjpg.com/repository/31188467)** &gt;Swift type modelling the success/failure of arbitrary operations.
You're absolutely correct! Thanks for pointing that out.
I use it to get data from an external API, and haven't had the need to "bend" it to suit my needs. The way it currently is is more than capable and is very stable. 
I've recently gone through these libraries, and this one is probably the "most complete", but there is one major hang up I found that I could not get around. Basically the issue is that the library is designed with a stack of cards, and adding any extra cards requires a reload of the dataset, which does not animate properly. My use case was essentially, swipe right to remove card, left to put it on the bottom, repeat until you were done. But the way in which they have implemented the dataprovider does not allow for easy modification of the stack on without it being redraw completely. If you can solve this issue smoothly I'd love to hear :) Basically what I did was flag cards as removed, and in their "out of cards" callback I filter my dataset and reload the data, but I could not find a way to make that seamless, the problem is that you can visually see that the stack has run out, and is being replaced. The library I ended up liking more is [DMSwipeCards](https://github.com/D-32/DMSwipeCards) Another really nice one is [ZLSwipeableViewSwift](https://github.com/zhxnlai/ZLSwipeableViewSwift) although I did not spend nearly as long looking at this one. One thing I did notice is that animations lag very badly on the simuator, although Im sure they probably run fine on a device. edit: I just went back and revisited the library, you can achieve what I was trying to do, but its not elegant. Basically, I create an array of views, and then if I want to add it to the back I add the same view to the back of the array, but do not remove it as to not change the index. Then i call "reloadData", so your collection will grow, but it wont be posible to traverse back. It may mess with the "revert" option but I wasnt concerned with that.
It's not a percentage, but so did it anyways for the sake of it :D
yea, I wrote a lot of VFL before the switch to swift and it was fairly OK for obj-c, but with swift and mortar you get full type safety, access to the full power of autolayout(there are constraints you can't write in VFL), and with about the same amount of code. The only thing it doesn't do that VFL does is linear layouts(yet...I've finally gotten around to submitting a PR for this a day or two ago)
this forwards me to something like "tg://resolve?domain=swiftlab" ... and fails
&gt; allStats You can use the allStats field to allow you to do stuff like let game = GameStatistics("myGameStats") let allWinners = game.allStats.flilter{ stat in let desiredPath = [.winners,.from] return stat.path.prefix(desiredPath.count) == desiredPath } dump(allWinners) ///prints out a list of draw.first, draw.second, competing.scores, competing.tinCansCollected But since you have the nice struct data now that's type safe, you can also go to stuff like: let game = GameStatistics("myGameStats") let secondPlace = game.winners.from.draw.second let percentageForScreen = 100.0 * Double(secondPlace.count) / Double(secondPlace.total) And it will be all type safe at runtime in the second app, and easy to maintain because the first app will let you quickly adapt to changes in file format. Good luck 
What a lot of people do is make folders in their Xcode project for each one. A folder for Models, Views, and Controllers. View controllers of any kind go inside the controller file. You can have separate folders in there for each view controller and it's segues controllers. Views (custom views or styling views) go in the View folder, and non-view related files such as classes that hold data for a view (or not) go in the Model folder. I also make folders called Utilities (for UIKit extensions, global functions/variables, etc.) and a folder called Supporting (for xcassets, launch image, AppDelegate).
I always recommend Apple's free [iBook](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/) found online and in their iBook app. This is how I learned Swift all by myself. I would make an Xcode playground project and then create a file for each section. This book teaches you the language Swift.
that's an interesting idea, thanks 
Supi. Kann man nicht "struktur" und "funktion" groß schreiben? 
1. Every object has an `isa` variable that points to its `Class` implementation. 2. `isa` is a 64-bit pointer, but it only needs 48 bits to store any valid memory address. 3. Those remaining 16 bits are used to store the reference count for an object. 4. If the reference count is too large to store in 16 bits, a hash table is used instead.
I have used ReSwift, ReactiveCocoa and RxSwift. The first is far easier to understand, but single threaded and less powerful.
Thank you! Very interesting.
enums and music code! two of my favorite things. I thought this was an interesting problem, so I took a crack at it. I decided to define a pitch a bit differently: my view was that the letter names of pitches are like syntactic sugar to the underlying note values. I felt like keeping things at, like, y'know, "Western notes" was a decent level of abstraction; so I used MIDI note numbers to encode pitches. This had the positive effect of allowing multiple expressions of the same note value to equal each other: C# is equal to Db, etc. On the negative side, the code is a bit more verbose, as octaves are now integral to a pitch's definition. typealias MIDIValue = Int struct Pitch { let midiValue: MIDIValue } extension Pitch { // A `Modifier` can be applied to a pitch. // (This allows C# to be equivalent with Db.) enum Modifier { case sharp case flat case natural var midiOffset: MIDIValue { switch self { case .sharp: return 1 case .flat: return -1 case .natural: return 0 } } } } extension Pitch { // The raw value of this enum matches with the MIDI value // of the corresponding note at the 0th octave. // // Pitch.NoteName.c.midiValue == the MIDI value of C0 enum NoteName: Int { case c = 0 case d = 2 case e = 4 case f = 5 case g = 7 case a = 9 case b = 11 var midiValue: MIDIValue { return self.rawValue } } } // Converting a named note to a `Pitch`. extension Pitch { static func note(_ noteName: NoteName, modifier: Pitch.Modifier = .natural, octave: Int = 4) -&gt; Pitch { let octaveOffset = octave * 12 let midiValue = noteName.midiValue + modifier.midiOffset + octaveOffset return Pitch(midiValue: midiValue) } } // Sugar! extension Pitch { static func c(_ octave: Int) -&gt; Pitch { return .c(.natural, octave) } static func c(_ modifier: Pitch.Modifier = .natural, _ octave: Int) -&gt; Pitch { return .note(.c, modifier: modifier, octave: octave) } // etc, if you want to have nice `.g(3)`, `.a(.sharp, 5)` syntax. } // now we can use these pretty constructors :) let middleC: Pitch = .c(4) let c3: Pitch = .c(3) let cSharp5: Pitch = .c(.sharp, 5) extension Pitch: Equatable { static func == (lhs: Pitch, rhs: Pitch) -&gt; Bool { return lhs.midiValue == rhs.midiValue } } // C#5 == Db5 let dFlat5: Pitch = .note(.d, modifier: .flat, octave: 5) assert(cSharp5 == dFlat5) extension Pitch { func semitones(to otherPitch: Pitch) -&gt; Int { return otherPitch.midiValue - self.midiValue } // Renamed `closest(_:)` to `semitones(toClosest:)`. func semitones(toClosest otherPitch: Pitch) -&gt; Int { let left = self.semitones(to: otherPitch) % 12 let right = (left &lt; 0) ? (left + 12) : (left - 12) return (abs(left) &lt; abs(right)) ? left : right } } let openG: [Pitch] = [.note(.g), .note(.b), .note(.g), .note(.d), .note(.b)] let doubleC: [Pitch] = [.note(.g), .note(.c), .note(.g), .note(.c), .note(.b)] let adjust = zip(openG, doubleC).map{ $0.semitones(toClosest: $1) } assert(adjust == [0, 1, 0, -2, 0]) let b1: Pitch = .note(.b) b1.semitones(toClosest: c3) == -c3.semitones(toClosest: b1)
You can use a UIPageViewController with page indicators to accomplish this.
When I first learned about this, it gave me flashbacks to the 32-bit-clean nightmare of Classic MacOS, where they originally had 24-bit addresses and used the high 8 bits for special flags, which application code improperly depended on and broke when they moved to true 32-bit addressing: https://en.wikipedia.org/wiki/Mac_OS_memory_management#32-bit_clean
I could swear that applescript was localizable to any language.
Yes they're pretty easy imo :) Feel free to ask questions if you want. 
Write a small library of something you did obj-c but in swift. Did that, been 100% comfortable since.
Nice article about garbage collection in swift. I am not finished yet on my way to work but I am eager to read on if I am back home, thx! Garbage collection is an interesting topic! 
That's a common response, but the difference here is that none of the pointer trickery is exposed in code that lives in apps. It's all behind opaque system framework calls, so can be turned on or off without modifying apps.
i too am learning the logic of code. Are you on code fights?
Yeah I figured. Just figured I'd get the discussion going in case anybody had an idea.
I went through the same hell. My app was too big for the built in converter to process, so I had to copy and fix each class but by bit. Now it's working like normal. 
Add a `_` before `sender` in all your actions.
No, the only languages you can use are Swift or Objective C. If you already have a good grasp on C++ and other languages, Swift shouldn't be too difficult to learn. Useful links: https://developer.apple.com/reference/appkit/nstouchbar I'd recommended that you read through this first to have an understanding on how the touch bar works and what not. https://littlebitesofcocoa.com/281-touch-bar-basics https://www.raywenderlich.com/147118/use-nstouchbar-macos If you look on Github you can also find some open source projects using NSTouchbar. Best of luck! 
Here, though, it's important to differentiate, since the Objective-C runtime did have a tracing garbage collector for a while, which is what Objective-C programmers mean when they refer to Objective-C's garbage collector.
Xcode is a piece of shit but I never saw some screwing at that scale. It is a shame that an indie company have AppCode, a kind of "competitor" for Xcode that is better than Xcode. Apple should be ashamed of giving developers a crappy tool like Xcode. Did I mention I hate Xcode? 
If you know Swift understanding obj-c won't be a big deal. Take the time read Apple's guide to obj-c and in a couple of hours you'll be able to decipher any source code written in it.
Perfect thank you so much! In stead of doing isEnabled I changed the buttons isHidden so they can't click on it anyway, thank you again
While you may very well define garbage collection in such a way that it includes ARC, it is unconventional to do so. And if you insist on it, you are bound to confuse people, especially since obj c also has had proper garbage collection support, which works in a completely different way. 
This isn't good advice, but it's the best way to learn. I totally agree that being in the working environment is hands down the best way to actually learn it. What was your previous experience?
No, what is that?
Not of mine, no. All of my iOS work is done during work hours for my company and is closed-source. I tend to do Python/security/less iOS outside of work. 
Oh I see, wasn't asking for your personal work. Just thought you may know of a blog or something that has a basic practical project. Can't seem to find one.
Ah okay thank you, how would I go about passing the double? Quite new to programming and Swift!
I covered passing data between view controllers in the very first Hacking with Swift project. You can try to jump into the middle of it [here](https://www.hackingwithswift.com/read/1/5/loading-images-with-uiimage).
look into "prepareforsegue". the system calls this method for you when a segue is triggered (this can be via a storyboard segue, or from an explicit call to "performsegue"). in this method you can grab the destinationviewcontroller from the segue object and then you can populate whatever field you'd like. you'll have to downcast the destinationviewcontroller to the actual type: if let myCustomVC = segue.destinationViewController as? MyCustomViewController { myCustomVC.someProperty = theDataIWantToPassOver } twostraws is right in thinking that you shouldn't be passing the label itself over. you should just pass over the relevant data and the new viewcontroller should populate its own label with that data in "viewdidload" or "viewwillappear".
It's useful to view ARC as compile-time garbage collection, as opposed to traditional run-time garbage collection. By having the compiler analyze ownership, it generates the reference-counting code needed for each object to manage its own lifetime in a simple, efficient way that removes the need for a separate garbage-collection process to analyze and manage object lifetimes while the app is running.
[removed]
https://medium.com/@skoli/using-realm-and-charts-with-swift-3-in-ios-10-40c42e3838c0#.fnk4vkxfa
By the nature of the platform, you have to follow MVC at least loosely. Your view will be separate from your controller if you are using storyboards/nibs. If you are programmatically building your view... you should strongly consider separating the view from your controller. Otherwise, you will add unnecessary bloat to your controller. Try and separate your data later from your controller and your controller from your view. It will help you in the long run and make your code base much more manageable. 
Lecture 3 notes added! https://medium.com/@seabjackson/cs193p-developing-applications-for-ios-with-swift-lecture-3-notes-699fe8c4e730 
None of those work because you're setting them equal to the class name (which doesn't make sense), and not an SKScene object. Also, the SKView is the entire application view, where the entire game takes place. You have to transition to an SKScene, not add one on top of SKView. Even the default template of SpriteKit transitions from the GameViewController to an SKScene already. Are you trying to transition from the GameViewController? Tell me exactly what you're trying to achieve. Because as far as I know, a SpriteKit game only has a single SKView, which is the GameViewController, and all SKScenes sit on top of it. 
The people driving are drunk.
I mean, that's just file organization, not really MVC-specific. I often write my views programmatically, so they live in the same group as the relevant view controller. That is, unless it's a shared view.
I would hardly call it incomplete. It can get out of hand if you're not careful about separation of duties, but it's worked just fine for years. That's true of any design pattern.
For MVVM check out RxSwift or ReactiveCocoa
You're welcome, hiding buttons is good idea as well.
Thank you, however, for some reason it's still not working, might it be because the Double I am trying to send over isn't pre set? The double is calculated by the distance of the user.. So stuck
Great answer thankyou!
You can leave out `options: []` in Swift 3.
distanceLabel2.text! = "\\(doublePassed)"
They ask to know the MVC pattern, but in my experience, people don't usually write MVC apps, at least not in the way Apple does in their examples. (For instance, making network calls from the view controller)
So you're saying you're trying to send a double variable that is nil? What's the point of that? Perform the segue when there is a value in the variable or after the distance is found. 
No the double is set, but not by me, it's value is automatically put in by the distance the user has travelled
Is the last thing supposed to be better or am I just not getting that meme? If anything it should use destructuring instead of force-unwrapping var a: Int? var b = 10 switch a { case .none: break case .some(let x): b = x } Or just, you know, the sensible way: var a: Int? var b = a ?? 10 
Nothing goes in there because you're declaring a function of the superclass and use the override keyword to implement it in your own way. Like I said, you need to have the prepareForSegue function outside the button action. The prepareForSegue should be inside nobody except the class. And because you're implementing your own version of the prepareForSegue, you need the `override` keyword before `func`. 
Change your viewWillAppear to viewDidAppear
I don't think you're getting the meme
Yeah, I suspect that. Would you be so kind to explain (google hasn't produced anything useful to me)?
If I'm not wrong, the last one is supposed to be the wrong and longer way possible for doing something really easy… but I might be wrong lol 
I don't blame you, nobody online ever seems to leave it out :)
Assuming you're using storyboards, in your main.storyboard, click on the segue between the two view controllers and under the attributes indicator make sure the segue has a unique identifier - a string which you can reference later through code Change "func prepare(:)" to "override func prepare(:)" And put an if statement in it saying if segue.identifier == "that unique identifier" { //call the code you were before with the SecondVC } Edit: also you should put distanceLabel2.text! = "\\(doublePassed)" In viewDidLoad and omit the viewDidAppear code. From my experience it makes more sense to put these things in viewDidLoad
That's the thing though, I thought this meme was used the other way around? 
Thanks for chiming in. I guess this is more widespread than I had imagined when I started learning. 
I came here to specifically ask if a solution had been found to this. Its very frustrating, im working on a large project and my productivity is absolutely slashed in half. wont show me errors, loses syntax highlighting and wot autocomplete which is extra frustrting because im upgrading to swift 3 and it doesnt throw errors for the new delegate signatures even though they dont work anymore. so I have to go outside of xcode to find the correct signature. so stupid
What's really annoying is when you're trying to call an initializer of some class/struct as a parameter in an auto completed line of code, so the initialization auto complete never happens. For example here: let button = JKButtonNode(texture: SKTexture(named: "asdf"), state: .pressed) You see that SKTexture declaration as a parameter? The initializers of SKTexture fail 100%, so its initializers never show up. Only if there is no code to the right of it will it work. That's really annoying because then you have to type out the entire initializer yourself.
I'm going to dupe this http://www.openradar.me/21505010, its the closest one I can see on open radar 
It's easy to start using a design pattern, architecture of framework without first understanding why it might be better or different. My advice is to do what makes sense to you. Once you do that, look at your code and how you might be able to do things differently. Don't follow trends and buzzwords for the sake of it. But also don't be like a lot of iOS developers who are never evolving and disregard new things. Do what makes sense. Do it better. Repeat. That's the best way to learn and keep improving. You'll find that you'll come to MVVM/Viper-like patterns on your own, not because you read a blog post on it, but because it's a natural evolution on the MVC architecture.
Can't you just use a regular closure? As far as I know, dispatch_block_t is just a `()-&gt; Void` closure. let closure: ()-&gt; Void = { // ... } Or if you're using it in GCD, DispatchQueue.main.async { //... } Pretty sure `dispatch_block_t` should be bridged over to a closure. Where do you need it?
This chart is literally backward. The best would just be: let b = a ?? 10 Also, the first example assigns b to 0, the others to 10 if a is nil.
Not to hijack the thread, but is there a version of Xcode that runs Swift 3 and doesn't have these issues? I've heard so many bad things about Xcode, that I'm scared to upgrade, but I want to do Swift 3.
Xcode never *not* had these problems.
On a bigger project I'm working on, Xcode always reports the Swift bridge file to be missing in the editor, so you always have a compiler error. When you press compile, it works, however.
Google GCD in Swift 3, there's a thousand guides on it. 
It's somewhat misleading to think of it as happening at compile time though. As the linked article shows, ARC overhead at runtime is significant enough that Apple has put lots of work into tricky optimizations for it. Generally speaking, reference counting memory management has lower throughput on multicore machines than a modern tracing garbage collector, but in exchange it gets deterministic destruction, much lower heap sizes, and more predictable latency. Swift also avoids both reference counting *and* garbage collection for many types, since structs and enums use neither (unless they contain an object, which all the copy-on-write structs do). 
They all do.
I feel you, it's frustrating. The biggest company on Wall Street can't make a syntax highlighter right while freaking Sublime Text does! How!?!?!? 
It's like coding on hard mode: keeps the skills sharp. Great fun /s
I really can't add any links better than what's already been added, but I'll give a reminder to be very careful of the date of the tutorials. I've seen many languages in my time and I've never seen any of them change as much or as quickly as Swift has. Pretty much dump anything &lt; the latest and hope the latest will be current for a while :D This added to the fact that mobile is changing just as quickly, one really needs to pay attention to how old a tutorial is. (that's not to say older tutorials don't have value)
hey, i asked this question! :D if you scroll down the answers a bit, user4261201 proposes a different solution. I would recommend trying that and seeing if it works, to be honest i think i still use the answer provided by him.
Technically this has nothing to do with type safety, which is about making sure you don't call a method on an object of the wrong type, such as if you tried to call sort on NotificationCenter. But great tip regardless. Extending NSNotification.Name rather than using a rawValue should prevent cases where your code runs at the wrong time or not at all due to a misspelling.
[removed]
Me?
[removed]
Like: I feel so much more efficient writing it. I like the safety aspect, chrashes went way down in comparison to Obj-C projects in the past. Dislike: the tools man, the tools. The compile times are a joke. Xcode makes me want to pull my hair out several times a day. Syntax highlighting is a game of chance. Despite this, I very much prefer Swift nowadays.
Exactly this. I switch between Java with Android Studio and Xcode with Swift pretty frequently, and despite Java being a pain, the tools really make the difference. Xcode is just so far behind in every way, comparatively.
I see what you did there you sneaky...
I feel like an idiot now. 🤦‍♂️ Thanks 
You don’t *have* to extend Notification.Name, you can just set up constants in your class, like: public class RoomViewController: UIViewController { public static let specialAreaEntered = NSNotification.Name("specialAreaEntered”) ... } Then when you use it you would say, e.g.: NotificationCenter.default.post(name: RoomViewController.specialAreaEntered) And it’s easy to read (you have class name to add context to the notification name) and you don’t get the name collisions of registering everything on Notification itself.
Pros: Modern, expressive OOP language. Statically typed. Not as weird to write as objc and its square brackets. Doesn't have some of the issues Java has from being such an old language and having to maintain backwards compatibility when implementing any new features like generics and lambds. Java has some weird things with autoboxing primitives, arrays being covariant, lambdas being implemented without functions being truly first class, etc. Cons: Like others have mentioned, the tools and compiler. Not very strong static analysis tools and formatters. No mocking framework for unit testing. Some bugs, there's nothing too serious that would cause code to crash, but they cause some annoyances when writing code. Some people don't like how strongly typed it is compared to a language like javascript or python. But, if you come from another statically typed language, you'll probably like swift.
My apologies, I tried it before and it didn't work, spent hours trying to fix it, and realised my problem was in my second view controller the whole time -_- absolute idiot Thanks a lot for your help!! :) 
Pros: Safe, explicit, clean syntax that's still C-style. I can safely say it has my favorite syntax. Cons: Using pointers is too encumbered (I know they're discouraged but they're still too much), no "extern C" option makes linking with other languages tedious, String processing is weak, hard to use and slow. 
Hey, mind reposting this here http://gitter.im/frictionlessdata/chat so the entire team can weigh in? 
I will look into it, thank you. Although I'm quite sceptical about my boss be willing to pay.
True-and I do but the above sample of just calling rawvalue everywhere is simply no better than using string literals 
you must be fun at parties
Thank you. I don't think my boss will pay for a course, especially if it takes 70+ hrs, but I just downloaded the book and will read it. To be honest I'm no fan of SO, as people there were pretty snobbish the last time I asked a question.
What was the actual problem?
I once saw a question here of someone asking "Why does the button color only change when I press the button?" The code to change the button color was inside the button action. When I questioned them, they thought that all the code executed at once when the app ran, so which I told them that makes no sense since that would make buttons useless.
&gt;Apple's FoodTracker-tutorial You need to learn Swift, not how to make an app first. Learning the language makes tutorials easier. Use Apple's free [iBook](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/).
That's cool too. I guess my main point is just NSNotification.Name(rawValue: "shitDidHappen") is just no better than "shitDidHappen" (and more stupid noisy typing). The compiler can't help you if you do this.
Every job interview I have been on for a position with a Swift team has emphasized the need for TDD and Unit Testing. It is true that Xcode was slow to integrate Unit Testing and not that long ago it was difficult to do before Apple included it. TDD as a development strategy has been around in the industry since the early 90s.
/u/cyancynic's use of a extension has two benefits over this implementation: * You don't have to know or refer to the parent class when referencing the notification name. * Declaration in an extension cleans up your main class. No mucking it up with unnecessary state declarations. Makes it more concise and readable. 
It's not that the code isn't valid, it's the the compiler just isn't quite production ready yet. There are a surprising amount of issues with the type-checker that you commonly have to work around. However, I would also say that a lot of the time, the work arounds produce much more readable code, so that's a plus.