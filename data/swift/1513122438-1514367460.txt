The signature of the `numberOfSections` method in your code is incorrect. Try using the autocomplete, prevents these kind of issues. It should read this: func numberOfSections(in tableView: UITableView) -&gt; Int { return 2 } 
Thank you very much, that solved the problem!
First things first my advice is to get onto to student services at your University and explain your predicament. Since it's before Christmas you might be eligible for partial/full refund. See what options you have there. I would say grinding through the law degree for a pass won't be much help to you. I did a law degree and find all the Udemy courses more motivating - it's high quality content and active learning. 
All programmers will be replaced by artificial intelligence in the next 5-20 years. Come to think of it, probably lawyers too.
For a multi section table view the cell is referenced in a 2d array of UITableViewCells so it is referenced as cell[section][index] this is why it resets to 0 in every section. Hope this helps. 
Perfect, thanks a lot!!
indexPathForCell. 
DM me if you need any direct assistance. You can GitHub me an example or something and I will do my best to assist and comment.
Thanks for your generous help! I’ve managed to get the task complete!
Google: floating point equality.
Thanks for the reply! Getting a refund and money in general is not an issue. Let’s say I don’t drop out, at the end of 4 years I’ll have a law degree and iOS dev skills. Isn’t that a better combo? I can work for tech law companies perhaps? 
Doomed 
Don’t you give the key value in quotes? “@attention” shouldn’t be effected by the symbol. Are you using Decodable? Can we see your parsing code? 
If you don’t feel like you’re ruining 3 more years of your life, then yes, that’s a better combo. 
I'm not sure what you mean by "laggy", since it looks like the animation starts immediately after the middle flag color changes (which I'm assuming is when you tapped the middle flag). But if you mean "why does the animation show of the original VC's view underneath the destination VC's view, that's likely because the background of the destination view controller's view has a translucent background color (e.g. red, with an alpha of 0.7 or something). 
If you look at the end of the animation you can see underneath it and then it finally finishes the animation and becomes the final Color. Oh that Mugabe why, yes! I’ll try change the alpha! Is this always the case when alpha values are not 100%?
Looked at your view controllers quickly. Here are some quick notes: 1. Comments, Comments, Comments https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID315 2. Spacing is not consistent through the controllers. This could be cleaned up. 3. You have properties, functions, constants, and iboutlets all over the place. Clean them up and separate then with MARKS. That’s all for now. Just a two second glance. 
if you are using Codable you can specify the CodingKeys enum to map fields to custom field names. https://developer.apple.com/documentation/foundation/archives_and_serialization/encoding_and_decoding_custom_types. look at "founding_date" example
Thank you for taking a look at it. I will work on those! Those can help improve the readability for sure. Any comment on utilizing MVC or the code itself? Thanks,
Yes that solved the problem! Thank you very much!
Yes, for the standard transitions. If you write your own transitions, you can deal with in other ways. 
Thanks a lot!
Common for Java too
Pretty good MVC separation. If you want to challenge yourself you might try to move the localisation manager in the model as well. The model will first get the location and then perform the request. In that way the controller would be only concern with requesting new data without knowing the details of the implementation.
It doesn't help that everyone on that list top posts and never snips.
The === check if values are the same but also check if the reference is the same. Since the property center is calculated and return a new Point() every time, every center Point you return will have a unique reference. Try with == to only check value or, after calculating the Point in the getter, assign the values to a private let _center: Point and then return that instance instead of a nee Point.
Careful with comments; IMHO only comment dirty hacks, or code that does something weird for a particular reason.
It will be a long way before it's adoption will be as good as Android... Unfortunately. That's if OEMs adopt Fuchsia in force... 
My take: * CityChangeViewController.swift line 28: I'd use a guard statement. Some observations and personal opinions: * CityChangeViewController.swift line 14: Personally, I'd move that didSet code to a viewDidLoad. But it's not wrong, and I never thought about using it like that. Pretty clever. * ViewController.swift line 87: I'd get rid of those exclamation marks somehow, but it's just style. For the rest, excellent code. Also, have a look and run Swiftlint on it, it's real nice.
Really cool!
"I don't need to write documentation my code documents itself" - /u/europeanwizard Jokes aside, comments are great. Write comments, export them to HTML put them online somewhere, then you at least have some sort of documentation. More information [here (NSHipster)](http://nshipster.com/swift-documentation/)
It's already a String, just backed by an NSString because we're using Foundation APIs.
Author here. Very good points. We've seen an even more dramatic speedup with large files. We're not doing random access, but processing the file linearly. I think to use this in production code, you would need to write a few benchmarks that verifies this keeps working over time. For now, it seems a safe bet.
Sure, it's useful when you write an API for others to consume. But I have never done that, always wrote self contained software. And besides, it's all fine and dandy to work like that if everybody on the team does this. Otherwise there's a risk that code and comments are different. All in all, I think this method is fairly limited in usage scope. 
What does this have to do with Swift?
I didn't read the whole thing, but the fact that Swift and Kotlin are close is good, however Swift is native and Kotlin is not. What I understand of MS's cross platform solution is that they have Android code, iOS code and general code. The advantage to Kotlin/Swift is that you can write general solutions for things that can be compiled on either platform. One disadvantage is that the code would have to generic. If you use a extensions, protocols, operator overrides in Swift that aren't in Kotlin, you lose the advantage. Having said that, the fact that Kotlin is so close to Swift is a good thing... I'd rather learn Kotlin from Swift than go back to Java, which I did a long time ago.
What?
Yes I am using Decodable. struct Candidate: Decodable{ let response:Cars } struct Cars: Decodable { let cars:Attention } struct Attention:Decodable{ let @attention:[Atris] } That last line is the one throwing the error. I’ve tried “@attention” but that didn’t work. I’m new at this. 
I got you, fam: In the ChangeCityVC: - I like to use //MARK: to divide my code into sections. Example: "//MARK: view lifecycle" for all viewDidLoad,viewDidAppear type methods. Hit Ctrl+6 and see nice headers to your methods - nice use of didSet. I'm usually against calling a variable something like GR. Call it "tapGesture" -- can never hurt to be more readable - var delegate: sendCity? &lt;&lt; delegates should be weak vars In the ViewController: - Take your locationManager code in viewDidLoad() and put it in a func called beginTrackingLocation(). Again -- readability is king - Seriously, break your code into helper functions more often. showErrorAlert(message:String?). If you plan on using this more often, extract this to a UIAlertController extension. - Agree with /u/ilgabbo -- move your location manager code to the model In your model: - It's a little confusing to have your sendCity protocol tucked away in the Constants.swift file. I know it seems weird, but make it its own file. - I like your CompletionHandler constant! - Give your WeatherModel a name like WeatherAPI to be more specific. Calling it a Model is not entirely accurate -- its more like middleware. - It's totally fair game to do it the way you've done it, but making the WeatherAPI a static singleton should be considered in the case where you added to your application -- so that any VC could have access to it. Hope this helps. Feel free to ask questions -- I'm pretty good at this shit but I make mistakes, too. 
I agree with both -- know who you are writing the code for first. - Writing for yourself: no comments - Writing with a few friends: maybe //me describing complex func or leaving a note - Writing open source: /* Comment that shit into the fucking ground */
No comments for writing for yourself? Don’t think so. Commenting your code allows you to go back in a year and completely understand your thoughts at that time. It also helps your peers better understand your thoughts as well. In the industry (which I’m in) you won’t pass code review if you have no comments in your code. I suggest possibly using linting software to help with these types of issues. https://github.com/realm/SwiftLint
I just took a quick look at it nothing more. If you get that stuff cleaned up it will help with the readability and I will for sure give you more feedback. 
Maybe you misunderstood, eh? You wrote "it also helps your peers" and "won't pass code review" which are group activities, and not writing a program for yourself. I'm in the industry, too! I've [written my own apps that have achieved over 1 million downloads](www.robcaraway.com). I also work with high tech startups to help them build better apps. I'm sure you don't actually care -- I'm just making sure you understand the context of where I'm coming from!
He’s not wrong. I, for one, welcome our robot overlords.
Try this one: ```swift self.name = name self.age = age ```
self.name = name self.age = age You are trying to assign unwrapped values.
You need to have high law grades for such a thing - you need to be extremely passionate for the degree to get in with top tech companies. Exam results are really important in law - in the US it's all about where you place within your class.... You could just finish the year and ask for a year out. Nothing wrong with that, lots of students do it. Then if you want to go back, go back.
Congrats on the app success! That’s amazing that you were able to achieve over a million downloads! Checkout my app as well! https://itunes.apple.com/us/app/style-squad/id1295457698?mt=8
updated the code and it's not working still
updated the code and it's not working still
Try Any instead of AnyObject
not working still :(
I think String and Int aren’t objects? Try making your dictionary String:Any ?
I did try that actually and it didn't work. 
What's the new error code? 
What’s the error message?
What are you actually trying to accomplish here? Why not pass the name and age as arguments rather than wrap them in a dictionary?
It’s impossible to cast `dict[“name”]` and `dict[“age”]` to String and Int. String and ain’t are not AnyObject values. 
I am not trying to do anything , just playing around 
I have included an img
I have included an img
https://iswift.org/playground?NOE9Kg&amp;v=3
Here's a working version: class Person { var name: String var age: Int init?(dict: [String: Any]) { guard let name = dict["name"] as? String, let age = dict["age"] as? Int else { return nil } self.name = name self.age = age } } Several issues with your attempt: - Always capitalize class names - You are trying to assign the dictionary value directly to your properties instead of the `guard let` values that you typecasted to the required type. - You are using `AnyObject` in your dictionary. Swift strings do not conform to AnyObject, so you should use `[String: Any]` 
Sorry so the top responses have you change your code so that you include self, which you’ve updated but I think you’re missing the point You created two variables in your guard statement Then you don’t use them, and instead try to use the dictionary again. Don’t do that So not: self.name = dict[“name”] //this is uncast But: self.name = name //this uses the guard unwrapped variable
 class person { var name: String var age: Int init?(dict: [String: Any]) { guard let name = dict["name"] as? String, let age = dict["age"] as? Int else { return nil } self.name = name self.age = age } } This works for me.
your image is old and doesn't reflect the suggestion. 
They post their replies before they quote the parts that they're replying too, and then they quote the entire original message that they're replying to. Like this, except the quoted text can be paragraphs upon paragraphs of text, including it's one quoted messages. &gt;What?
Oh sorry i will include another in a min
Done
I have changed it to `Any` still not working
There are abunch working version posted already, people already explain what was wrong with it. Please check those out 
sorry you had it correct I just didn't notice. 
I see the use of a lot of 3P libs, the fact that you’re asking for feedback on your code makes me think you’re just learning the concepts ( perhaps in school?). One thing I would recommend, especially if you’re grand goal is to get a job in industry, is to not use so many 3P libs, especially when you’re starting off. Why Alamofire or swift Json? If you’re doing a simple request from the server URL session should suffice. Same could be said about the other libs. Issue with relying on 3P libs when starting off is you’ll lose out on actually understanding the lower level concepts. Also makes interviewing a bit more difficult because many time they will not ask you about alamofire or other 3P libs, they’ll ask about Apple libs. 
how is `name` and `age` in scope after `guard let`
Oh, I see. Some people put in the effort of doing that though, but the problem is that emails put the email that is being replied to at the bottom by default. I expect this to become a lot better on Discourse. And thanks for the explanation!
You're neglecting time. I can't speak for anyone else, but my`self` is mutable. Me in a year is not me today. Future me *is* a peer, and I have to write for that peer no different than I'd write for a coworker or reviewer or anyone else. My brain runs its GC thread whether I want it to or not, and me-in-two-months is not going to remember half the details that are in there today.
I think you are misunderstanding the point of `guard let`, more specifically this part of the documentation: &gt; Any constants or variables assigned a value from an optional binding declaration in a guard statement condition can be used for the rest of the guard statement’s **enclosing** scope. One of the practical use of the `guard let` syntax (other than to provide an early return when conditions aren't met) is not to get too deep into nested `if let`s blocks.
Some good tips here already, I got a few more. - About the `sendCity` protocol... first, it should be uppercase. But there's more. In general, I'd call the delegate - very boring - `CityChangeViewControllerDelegate`. It's methods should pass the `CityChangeViewController` as a parameter first. For example `cityChangeViewController(..., didSelectCity:)`. The reason for this is that when someone reads the `ViewController` (btw, you should give that one a better name), when stumbling across the `cityChangeViewController(..., didSelectCity:)` function, it's immediately obvious that it's a delegate being called from somewhere. Another general rule is that controllers shouldn't dismiss themselves. In general, your life is easier when the logical parent is in control. That is also a reason why we pass the `CityChangeViewController` as the first parameter in the delegate method I described above! All in all, in code: IBAction func changeCityButton(_ sender: UIButton) { if let cityText = cityTextField.text { self.delegate?.cityChangeViewController(self, didSelectCity: cityText) } } Then, in `ViewController`: func cityChangeViewController(_ controller: CityChangeViewController, didSelectCity cityName: String) { controller.dismiss... ... Load your things } What's the advantage? Now, the `ViewController` is in control, and it probably knows best what to do next. Maybe dismissing the city change controller should happen without an animation for some reason. Maybe data should start loading before the animation starts. Maybe, for whatever reason, the city change controller should be kept around for a little while longer. Anyway, if you do it this way, you gain flexibility. One fairly specific thing about temperature: You have the parameter `tempNumber: Double`, which seems to be in Kelvin. You could call it `temperatureInKelvin` or something to make this a little clearer, but if you want to go all out, you can use Apple's `Measurement` class. It can do temperature conversions for you! And you can format it using a `MeasurementFormatter`, if you want to be super professional about internationalisation. Your error handling could also use some improvement. An `error` parameter should have the type `Error`. Then, either pass in the error you get from Alamofire, or create your own if an error happens. This way you have an easier time debugging your application, since you can see the error information while debugging in `ViewController`, and you can display better error messages for your users if you want (eg. separate messages for "you're not connected to the internet" and "the server is down"). One last thing: I'd name the class `WeatherData` something like `OpenWeatherMapService`, because it interfaces with that. (Theoretically, you could later create a `WeatherService` protocol later and have a bunch of different specific services to choose from. I'd use `WeatherData` for actual weather data, for example like this: struct WeatherData { let city: String let temperature: Measurement&lt;UnitTemperature&gt; let weatherType: String } With that, you now can simplify some stuff: wherever you used to pass three parameters for city, temperature, and weatherId, you now pass `WeatherData`. That means your completion handler would be `typealias CompletionHandler = (WeatherData?,Error) -&gt; Void` and in `ViewController` you'd have `func updateUI(with weatherData: WeatherData)`, for example.
Thank you! This was super helpful and informative. All dually noted. When trying to classify delegate as weak, error: 'weak' may only be applied to class and class-bound protocol types, not 'sendCity'. Care to clarify on why that error is coming up? You mentioned the singleton, I don't mind doing the singleton, however i tried using static functions instead. Doing this I cannot call the currentWeatherStatus unless its a static func as well. I thought unless specified a class method is internal which I should able to use it? It comes up with "Instance member 'currentWeatherStatus' cannot be used on type 'WeatherData'". Could you elaborate and why it won't allow it with out static? Thank you!
How would I end up implementing this? From my understanding during ViewDidLoad the delegate is set. How do I set it in the WeatherAPI? Also I would have to implement more callback funcs as well to alert the VC of the data right? 
Great, another forum I'll have to learn how to use. Email isn't pretty, but at least I know how to use email. Does anyone know how to disable all the fades and delayed animation? I just ate and it's literally making my stomach uneasy. Or is there a mail/usenet/... interface for this? 
Read up om guard let and how to use its values. Also check out codable for decoding dictionaries to objects.
You've probably hooked up an outlet before, there is a third option, Outlet Collection, then you can just loop though the collection items and do what you want with them.
labelArray.map { $0.text = "" }
for label in labelArray { label.text = “” } Is the direct answer. And as mentioned it would be best to set these labels into an outlet collection if they’re from a storyboard.
`map` requires a return value, you'd want a `forEach` labelArray.forEach { label in label.text = "" } 
I know, I'm an idiot. I realized my mistake and changed it.
Thanks, that makes sense. I assumed the calculated parameter made the difference, this explanation makes me understand why the references are different. Much appreciated!
will do, thanks!
Variable names have to begin with a letter or underscore. @ begins special compiler directives.
I'm sure there is a better solution but to move on you could always just replace "@" with nothing before parsing the json using: .replacingOccurrences(of: "@", with: " ") method
yeah it should work fine, assuming its the newest model.
Thanks I was worried it wouldn’t be powerful enough
If you get a model without an SSD, swapping out the hard drive for an SDD makes an incredible difference.
It's what I use and it works fine.
It's fine, but note that the "current" model is a 2014 model. Apple is due to issue updated Minis this spring, apparently. I have a 2014 model, and it works, but it's not ideal. If you bump up to the Fusion drive model, it's snappier (when I poked around with one), but at this point I would consider waiting a few months if possible.
Hopefully ssd also. Not really optimal but should do. In Xcode remember to turn the new build process on. Should speed up things a bit. I've got Mac mini at home. Sometimes use it with Xcode. Has 8gb, core i7 and fusion drive. 
I'm using late 2014 with ssd disk, its fine for begin and pro jobs. at least for me.
How is name and age in scope ? 
You explain my point much better than I could. Thanks for hitting the nail on the head! Especially with where I work today. Within a years time I would have worked on 7 or 8 other projects, if I need to go back... mine as well it been written by a different person. Thanks 🙏 
That just means `dict` can contain `Any` values... but doesn't change what is actually inserted into `dict`. You need to check the actual types of the values in your dictionary. 
That fixes one issue, but the values in `dict` are of the wrong type. (They are not `String` and `Int` castable types)
Show us the code where you call `Person(dict:)`
You can still use email. To quote from the announcement: &gt; You can choose to get email notifications for tracked categories tags, and can also choose to mute certain categories or topics within tracked categories. Replies via email to forum topics will be posted in the forums. In order to create new topics via email, there will be an email address corresponding to each category/subcategory (similar to a mailing list email address) that can be used.
Nice app dude! That's pretty funny, I made a VERY similar app to that years ago.
Great point, I love this -- I've referenced this in the comment above. My initial gut reaction is to tell add the caveat to not use commenting as an excuse for writiing unreadable code, and that I return to old projects often with little trouble because I wrote them well. But this is overall the best reason I've seen to write comments on your own projects.
You'd be wise to get a MacBook Air. The Mini is freaking old. Don't get it. 
Just put things into perspective. Computer programs have been written for years but today’s computers have only increased in power. Will it be better to have a better computer? In 90/100 cases yes, but most will do the job. I started on a decrepit pos and my programs run fine 
Thank you for your reply and for that information. You are definitely right! I made the changes regarding the protocol. The example that you provided for the cityChangeViewController(..., didSelectCity:), is it possible that you can make the edits and send it back so I can see it visually? This will help me understand what you are saying. I will process the rest that you suggested. Thank you!
For the weak issue define your protocol like: protocol sendCity: class { func sendCityData(cityName: String) } This will allow the variable declaration to be: weak var delegate: sendCity? Also, Swift protocols, classes, structs, and enums names are typically written in uppercase (at least as of, what, v3, I think.)
your delegate declaration "protocol sendCity" should read "protocol sendCity: class". I think this will clear your error up. I'm having trouble figuring out what you mean with singleton -- the singleton IS a static variable in most cases. "static let sharedAPI = WeatherAPI()" declared within the WeatherAPI class should do the trick. To reference it outside the class, "WeatherAPI.sharedAPI.currentWeatherStatus" 
Guard let puts it's into the function scope, because if they weren't valid bindings then the guard would have exited.
I bought the base model 2014 Mac Mini for iphone dev and when debugging the emulator runs incredibly slow. To the point where it would freeze or only show a black screen and I'd have to restart it. The app I was debugging was incredibly basic with only 1 view. If you decide to go with a Mac Mini stay away from the base model. 
I switched them to Any already. Whether they're actually castable is covered by the `as?`.
That doesn’t sound great tbh, did you end up buying a different mac / upgrading and did that improve performance?
Wait till spring, or if you can't, hackintosh it. Also, for dev work you probably want 16GB.
[removed]
The simulator is useless the second your app becomes anything more than extremely basic. I always have to run my apps on my phone for testing. 
I don't know if it's in scope for you, but I'd love to see non-iOS Swift jobs.
Thank you! That makes sense then. What I meant is below: let weatherID = currentWeatherStatus(weatherMain: data["weather"][0]["id"].intValue) In this line of code, an error is throw saying I cannot use it on this instance. func currentWeatherStatus(weatherMain: Int) -&gt; String { //check on the ID } The error goes away when I declare currentWeatherStatus as a static func static func currentWeatherStatus(weatherMain: Int) -&gt; String { //check on the ID } Even though it's in the same class Does that make sense?
Honestly I probably used the Mac Mini 4 or 5 times and got fed up. It sat there for a year until I finally sold it. My job is a Windows shop so I primarily develop in c# and couldn't justify paying 1k for a Mac. I ended up putting that money towards building a new pc where I can learn xamarin for iPhone dev. I had a coworker who paid 1k for a decked out Mac Mini and said it was amazing so don't write them off. Just stay away from the base model with the i5 1.4ghz and 4gb ram. I w ouldnt even use it to browse the web. 
Even shorter: labelArray.forEach({ $0.text = "" })
Even even shorter: labelArray.forEach { $0.text = "" }
Your VC should only be concerned with weather data. The location is essential to the model alone and shouldn’t be a VC responsibility. The location delegate can be any other object including the model, so when the request for weather data is started, the model can first request the location itself, capture the answer (setting itself as CLLocation delegate in its own initializer like the Vc currently does in its viewDidLoad) and when the location is updated begin the network request. The VC should be model’s delegate (by a custom protocol) so that it can receive communication and perform action like: func showAlert(withMessage:) in case an error occurs And func update(weather data) (I would go in more detail,but I only have access to my phone now) If you achieve this task the VC will only be doing what it should in the MVC pattern: listening/reacting to user input and setting up its views. Model instead would be the only one knowing how to recover and interact with data. It will receive requests from the VC but it will communicate back only indirectly via: functions callbacks, notification or delegation.
Even even even shorter: labelArray.forEach{$0.text = ""}
Thanks so much!! 
Even longer: let labelCount = labelArray.count for index in 0..&lt;labelCount { let label = labelArray[index] label.text = "" }
just looking at some doc im guessing might be because your json is {"Relationships":[{"relationship_id":1,"people_1_id":1,"relation_code_id":1,"related_to_people_id":2},{"relationship_id":2,"people_1_id":2,"relation_code_id":2,"related_to_people_id":1}]} you might need to grab the relationship array from the json["relationships"] then decode, either 1 by 1 or directly as array idk if it works from array. essentially i think the decode method is expecting just {"relationship_id":1,"people_1_id":1,"relation_code_id":1,"related_to_people_id":2 or array of this. 
Use Alamofire. It simplifies your code by a lot 
So is there an easy way to tell it to disregard the first part? Or do I need to work with what the API returns?
I see some force unwrapping that could be neater, structs that could be used, and swift 4 decodable would make your swifty obsolete. TypeAllias is good but define it in your model, so it is more readable to us guys. Lastly some double if’s that could be a single if or a guard. Plus you should really subclass Error so people get some meaningfull errors
I’m of the view that code should be self-documenting. If you’re writing an API to be consumed by others then definitely annotate the interface. But generally, I find less is more with commenting and good, well-written code can often be far easier to comprehend than someone’s comment. And that’s what I’m looking for when I’m reviewing other people’s code, not that they’ve explained their bad code with a comment. I’m not saying there’s never a place for comments, just that they should be used sparingly and instead self documenting code encouraged. That’s what future me looks for... oh and also comments explaining my weird and wonderful hacks obviously ;)
Thanks!
Well I usually do the basic layouting with the help of the simulator and then switch over to my iPhone when things get real.
I would say the easiest is to change the API If you have the ability and assuming there won't be any other field the same as 'relationshils'. otherwise you will have to get the array when you get the data. Depends on if you are the API developer and the what will the data look like. 
You have to work with the API. In your example postman response, there are two objects in the array, so you have to decode them as an array. The easiest way is to probably make a container struct of the data dictionary and pass that in for the decoding. Something like this: struct DataDictionaryArray: Codable { var Relationships: [DataDictionary]? }
Well, if you’re holding a reference to the delegate (your VC), and the variable is exposed, which I expect it is, you can change its value. I’m in bed, so this code won’t be perfect. Let delegate = self.delegate as! (your VC) Delegate.yourVariable = value That should trigger the didSet. There may be a better way of doing it that is more swifty, but that’s what I’ve been using. 
shorterer: labelArray.map{$0.text=""}
Shorter (and compiles): ``` labelArray.forEach{$0.text=""} ``` 
That’s gonna be a tough one, but look for Mac Developer roles. Mostly in Swift now for most companies
such a bed example...
Lmao why am I getting downvotes? Sure I’m not debugging OPs code but I’m giving an advise that will save him so much time in the future. Also, using a Swift pod/Library is a nice skill to have... and this seems like a great opportunity.
It would be interesting to see how many macOS jobs are in Swift. I have no clue how popular Swift is outside of iOS.
Some screenshot perhaps?
Nice work, but I'd run your readme through a spell checker to clean it up. After all, first impressions are everything!
Mine runs just fine in a Playground... Which version of Swift do you have?
map returns a value, so probably would at least be a warning about unused result outside of a playground 
Thank you! I will go through the readme file to clean it up:)
I put some code below? I guess you mean the protocol? That'd be protocol CityChangeViewControllerDelegate: class { func cityChangeViewController(_ controller: CityChangeViewController, didSelectCity: String) }
Finally finished my first iOS app built in swift, started learning Swift since janauary and been building it for 3 months. Sent it out to a couple of mates from my CS class and got great feedback. Planning to submit to the AppStore before New Years. App helps students and new developers find info on different books from different languages that have been published by different authors and where they can get them from. Pretty excited to submit to the AppStore hopefully gets accepted. 
You can assign and reference the button by its tag. Then it’s let editButton = self.view.viewWithTag(tag) as? UIButton
You can reference the button through tag or ctrl+drag from your storyboard into your view controller creating an IBOutlet. The you can change its image with the method buttonInstance.setImage(image: UIImage?, for: UIControlState) Where the control state is an enum expressing the state of the butto: normal, highlighted, disabled, and so on... You’ll probably want to use .normal Same thing for the small button action, you can ctrl+drag into your vc and create and Action this time, that is a function that is called when the button is triggered in some way (you want .touchUpInside). In that function you can change the image of the other button. You can assign an action function to a button trigger also with the method: buttonInstance.addTarget(target: Any?, action: Selector, for: UIControlState) But you might find it slightly more complicated 
taking a second look at it i think its also because you are not passing in a completion handler top get the data back. the datTask funcction is executing asynchronously and so it will immediately return, which means yoru return loadedData statement returns the inital empty dictionary. You should pass in a completion handler and call it at where you put the reddit note passing the decoded data. 
Ahh. Thank you! That makes sense. I will make the changes. Thank you for suggesting creating a Struct and passing that in with the completion handler. It definitively cleaned up the code. I appreciate your help. 
Yeah, I looked in to decodeable and it definitely does. I will be working on integrating that instead to use swift libs. Thanks for your suggestion!
Good analysis. There’s definitely a shift happening towards Swift. You have to also take into account new developers - given the choice to learn ObjC vs Swift I think they pick Swift 9 times out of 10. While businesses won’t feel a need to migrate existing projects to Swift it’s got to be a consideration for new projects if not solely for new talent prospects. 
you guys seriously downvoting this? 🙄
Right, I got that far, but is it possible to not include optional in the print statement?
Add! To the data. 
*** Terminating app due to uncaught exception 'NSUnknownKeyException', reason: '[&lt;FRESEvents.Events 0x6040001dcf20&gt; setValue:forUndefinedKey:]: this class is not key value coding-compliant for the key CC17183544.' This is the full error im receiving. Im trying to get data from Firebase to display in a tableview. 
I'll take a look, thank you! :)
In the [Properties documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html): &gt; For computed type properties for class types, you can use the `class` keyword instead to allow subclasses to override the superclass’s implementation. 
You don't say exactly what should happen if the args list isn't the right length, but here's one way. I wouldn't bother seeking around and replacing things in-line. Just chop it up and make the one you want directly: extension String { func replaceTokens(token: String, args: [String])-&gt;String{ return zip(components(separatedBy: token), args + [""]).flatMap({ [$0.0, $0.1] }).joined() } }
This is cover here: https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-ID35 In the "Selector" section: &gt;NOTE &gt; &gt;An Objective-C method reference can be parenthesized, and it can use the as operator to disambiguate between overloaded functions, such as #selector(((UIView.insert(subview:at:)) as (UIView) -&gt; (UIView, Int) -&gt; Void)). 
Understood, but what about non-computed type properties?
[Part 3 of this answer](https://stackoverflow.com/a/45495616) might be of interest.
Basically what it is saying is that your class, `SourceViewController` does not conform to Either the `NSTableViewDataSource` or `NSTableViewDelegate`. To fix this error, you need to add the appropriate functions so your class does conform. Without looking at my computer I won’t tell you the exact names but the delegate methods will control how the end user interacts with your `NSTableView`. Behaviors like what happens when a user clicks on a row will be in this delegate method. The data source methods will control things like how many rows are in a section and how many sections are in the table view. 
I'm going through this project for the second time and have similar feelings. Everybody learns in their own way, I need to understand exactly what I'm doing and why at every step. The "trust me, it'll make sense later" approach doesn't work for me at all. As I understand it, the text you posted means that you're creating a class and you need it to be able to take advantage of the methods other classes (or protocols) can offer. To do this, you just add their names when you declare your new class.
Sorry to say - but I still don't get it. You seem to, though, so may I ask where you learned this stuff? I get the programming part, I just don't get all these viewcontrollers and shit. I really gotta learn those.
Honestly, I am self taught but after doing it for so long you just begin to understand the ins and outs. It also helps that tableViews are extremely common so I have had my time dealing with them. Raywenderlich.com has some great tutorials of various levels. LetsBuildThatApp on YouTube also has some pretty clear videos but generally more advanced than where you sit ATM so just keep it in mind. I can do my best to explain it as well if you would like?
That's about where I'm at. I understand the basic logic of functions, classes, variables and all that stuff. I understand the idea of dragging UI elements onto a canvas. Getting the logic and the UI elements talking to each other is what I'm working on right now. I've read a bunch of tutorials and articles but I haven't found anything especially useful. I'd like something really simple just so I can get my head around the process, e.g.: Enter a string in a text field, hit a button and have that value write to a variable. Create an array, have the values listed in a drop down, have the user's selection written to a var. Just simple stuff like that, no extraneous info, just a step by step on how to do this with every step explained as if to a particularly stupid child.
I have not actually done this particular course. I really should since many people reference it on this sub and i would ultimately like to be able to help more. Since you mention you’ve done it once before could I ask you if they cover things like architecture in there? Things like VIPER, MVC and MVVM are what I’m referring to. I think that’s crucial to learn when someone really wants to understand why they are doing something. Too often with these quick tutorials everything is thrown in one viewController and that’s not practical in the real world. You will quickly become confused at that actual purpose of a viewController if you continue to do this. 
This is what shows in the dictionary.. Im not sure what I have to add to Events to make it work... ▿ 2 elements - key : "-L0ME3dO4xIKxicp5yzf" ▿ value : 1 element ▿ 0 : 2 elements - key : ParsedContent ▿ value : 1 element ▿ 0 : 7 elements ▿ 0 : 2 elements - key : AlarmLevel - value : 0 ▿ 1 : 2 elements - key : OriginatingAction - value : CadEventNew ▿ 2 : 2 elements - key : AgencyEventId - value : 17PD0008916 ▿ 3 : 2 elements - key : AgencyEventSubtypeCode - value : default ▿ 4 : 2 elements - key : DateTime - value : 2017-12-14T22:54:16Z ▿ 5 : 2 elements - key : Location - value : XXXXXXXXXXX ▿ 6 : 2 elements - key : AgencyId - value : PD-SCPD
Look at my comment below about app architecture. I think doing a little research on modern app architectures can be really beneficial to the learning process. Too commonly people are looking for the easy way out. Unfortunately, with most online tutorials they are too focused on teaching you the basics that they lose sight on the information that is crucial for a lot of people. I, like you, need to know how things work to actually understand how to use them. I , again like you, can become increasingly frustrated with myself when I don’t understand things immediately. Programming is also a hobby of mine, I am actually a chemical engineer by trade and found the programming to be enjoyable as a creative outlet as well as beneficial to my main job. What I’m trying to say is don’t give up. I can write up a small tutorial for you tomorrow sometime after work. Unfortunately, it is very late where I live and I am already in bed. DM me tomorrow sometime to remind me and I’ll be happy to answer any questions that you have or even walk through some examples with you. Best of luck, 
There's not much in terms of architecture so far but there are two view controllers in this project. This is on the first page, I thought it was interesting: “My teaching method skips out a lot of theory. It skips out the smart techniques that transform 20 lines of easy-to-understand code into 1 line of near-magic. It ignores coding conventions by the dozen. And perhaps later on, once you've finished, you'll want to go back and learn all the theory I so blithely walked past. But let me tell you this: the problem with learning theory by itself is that your brain doesn't really have any interest in remembering stuff just for the sake of it. You see, here you'll be learning to code on a Need To Know basis. Nearly everything you learn from me will have a direct, practical application to something we're working on. That way, your brain can see exactly why a certain technique is helpful and you can start using it straight away. This book has been written on the back of my personal motto: "Programming is an art. Don't spend all your time sharpening your pencil when you should be drawing[…]” I was hoping that going back and doing the project again would help, after taking a break to try some other approaches but no dice. I keep reading this code over, which appears a little later in the project, and I still can't figure out exactly what it's doing, those optionals make my head hurt: func tableView(_ tableView: NSTableView, viewFor tableColumn: NSTableColumn?, row: Int) -&gt; NSView? { guard let vw = tableView.make(withIdentifier: tableColumn!.identifier, owner: self) as? NSTableCellView else { return nil } vw.textField?.stringValue = "Hello, world!" return vw }
The first link in a completion handler, the func line, is way too complex for me to decode. I think that's what holding me up. Nothing here makes enough sense for me to actually implement.
Haha...retain...sounds like you have a .......... Memory leak?
You’re trying to tackle way too much stuff, all at once. Do yourself a favor and take it easy. Read the docs. Ask yourself what problem that particular thing is trying to solve. Also consider that not everyone learns the same way, and maybe HWS’s way is just not right for you. Personally, I’ve found zero success trying to learn iOS development with HWS, but I do use it nowadays for reference purposes. Give Stanford’s CS193P a try, it’s free on iTunes and YT. 
Cocoa + iOS has a steep learning curve unfortunately. You just have to dive in. Did you do the learning Swift program? Do you know other programming languages? You’ll have to know about OOP (with classes), learn the iOS APIs, and more. it’s a lot. 
I'm programming for macOS
Yup, I'd love the same thing.
The same basic principles apply to both iOS and macOS development. The professor of the course I mentioned frequently states when something is used purely for macOS development. Doing something the “hard way” — in this case, reading up on the theory of MVC and the official documentation — is actually a whole lot easier, IMO. That being said, best of luck to you :)
&gt; MVC What's that? hah
Okay, so one of the primary design patterns in Mac and iOS development is the `delegate` pattern. You will encounter it just about every day, especially when using UIKit/Cocoa. I'll do my best to explain it in the context described in this excerpt. `SourceViewController` is a standard NSViewController - this is the base ViewController class. By default it contains some boilerplate methods that get called automatically. `SourceViewController` now holds an instance of `NSTableView.`Simply being the owner of the `TableView` isn't enough to fill it with information. The `TableView` has two requirements to do so - that a `DataSource` and `Delegate` have been assigned to it. The `TableView` asks the `DataSource` for the information needed to populate itself (how many sections/cells to show, laying out the cells, etc) and the `Delegate` provides the more interaction specific information (cell height, what to do when a cell is tapped, etc.). In the purest sense, these technically both function as "delegates," but Apple has named them to be more descriptive. Sooo, what's a delegate? From the perspective of the `TableView`, it's the class that has been assigned the tasks required to populate and display it. `SourceViewController` will at some point call `tableView.dataSource = self` which says "Hey tableView, I'm gunna take over the dataSource tasks, so you should ask me for that information." Now, how does a class prepare itself to become a delegate? This is where `protocols` come into play. A protocol functions as an outline or blueprint of methods and delegates are nearly always created by writing a protocol. When you decide a class needs to conform to a protocol, that is - absorb its methods, you'll write `class SourceViewController: NSViewController, NSTableViewDataSource`. Everything after `NSViewController` are the protocols we want to adhere to - in this case `NSTableViewDataSource`. So now that we've assigned `SourceViewController` as the dataSource and established that it `wants` to conform to the `NSTableViewDataSource` protocol, we just have to add all of the required methods and implement them. The protocol method definitions will give the `SourceViewController` some information (an index to a given cell for instance) and ask you return something the `TableView` can use. Hope that helps and let me know if you want clarification - or even if your eyes glazed over at some point.
Shit, man. That you would type all that out for a stranger - I really appreciate it. Alright - so I'm getting stuck with your wording. I just don't understand the hierarchy. Let me ask it this way: `class SourceViewController: NSViewController, NSTableViewDataSource`. This means that SourceViewController, *which is a NSViewController*, is becoming the Data Source of the NSTableView?
This. Apple's Documentation is a revelation. Savor it--you will seldom come across documentation this clear and instructive again. Don't put this off. I spent months scouring forums, Slack channels, and YouTube/Udemy/iTunes U videos because I "wasn't ready" for official documentation. Apple's documentation would have saved me weeks (if not months) of headaches because it is frankly easier to understand and more thorough than virtually every other resource I've come across. Their examples are simple and fantastic. Take your time going through, even in those places you already feel comfortable. You'll come out the other side, after just a week or two of dedicated study, ON ANOTHER LEVEL. I really like the guy who does this Hacking With Swift stuff but, putting aside my knowledge of and experience with the subject matter, I find the excerpt you posted to be almost unintelligible.
Thanks. I'm looking to get into macOS programming though, but ty
The best advice I was ever given for learning programming was this: At several stages, especially early on, you WILL reach a point where you just don't get it--no matter how hard you try, no matter what you do, no matter how much time you commit to trying to understand, you just can't get it. Keep going. Everyone else did. 
Thanks - I will. But I fear that after barely explaining it in the first project, Hacking with Swift will just act from now on like I already understand it because we've 'been through it'. but, you never know. I'll continue.
**Model-View-Controller** You aren’t going to get far until you understand what that means, because all of Apple’s frameworks are built around that singular idea. 
Ahh, thanks. Yeah, it's been about a week since I read the book so I didn't retain everything. but I'm getting back into it now. Thanks.
No. That means that the class `SourceViewController` inherits from `NSViewController` but also conforms the the **protocol** `NSTableViewDataSource`. 
[Start here.](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html#//apple_ref/doc/uid/TP40008195-CH32-SW1) I *highly* recommend reading or at least skimming all the pages in that document because it will help you understand the explanations other people are giving you.
`NSTableView` uses the [Delegation design pattern](https://developer.apple.com/library/content/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html#//apple_ref/doc/uid/TP40008195-CH14-SW1) to populate the table cells. The mechanism used to do this is a feature of Swift called a [Protocol](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Protocols.html). 
Very nice concept but the implementation is a little clunky.
There's no big difference at all. Some of our internal tools are written and built against both platforms.
Newbie here. I have programmed in Python, Javascript and random other stuff and was interested in Swift. I don't understand this kind of cross compatibility between platforms, like would you be able to use the same code and obtain the same result or is it just the general syntax?
iOS uses a different UI framework than macOS does. iOS uses Cocoa Touch (UIKit) whereas macOS uses the far older Cocoa (AppKit). *Most* of the core libraries are identical between each platform, but the main application libraries are different. For the most part, any Swift code you write that doesn’t depend on platform specific functionality can be re-used between all platforms without any problems.
Hello OP, I tried to learn swift once with hacking from swift and felt the same frustrations as you did. Truth be told, that book is fairly terrible. I would _really_ recommend the Stanford iOS course, it makes you code along and it doesn't just throw things at you to be like "this is the way you do it". https://itunes.apple.com/us/course/developing-ios-10-apps-with-swift/id1198467120 Give it a try.
Are you sure you want to learn development for a platform you don't have access for? Are you already familiar with programming with other technologies or are you completely new to it?
That entails the use of xCode and development of an iOS app.
/u/twostraws 
Yes, it is called singleton.
Yeah, you could think of it like that. That's only one step of becoming the datasource, though. You also need to implement the NSTableViewDataSource methods and assign it to the tableview with `tableView.dataSource = self`. At that point the tableView knows to ask SourceViewController for the information and SourceViewController is prepared to provide it.
I recommend checking out /r/hackingwithswift? Ask for help there if you need it. If not, follow the author's recommendation and follow along, then do the homework, then move on, then come back to the lesson and try to implement what you learned in a future chapter in to this project. I did the [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift) from the same author and didn't feel like I was learning anything until almost the end. Then I started to get it a bit. Then by the last chapter I felt like Swift had clicked.
It's a bit hit and miss with the official documentation nowadays. It really used to be the gold standard some years ago, but now I have a feeling they are putting a lot less attention to it. Plenty of classes and whole areas are very lacking in documentation, most of the deprecations do not include guidelines as to what is the suggested replacement, etc. Yet, definitely dive in and read the docs. They will clear up a lot. This is specifically about the NSTableView stuff - https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/TableView/Introduction/Introduction.html#//apple_ref/doc/uid/10000026i And this is the homepage, that can be a bit hard to find starting from the developer.apple.com homepage - https://developer.apple.com/library/content/navigation/
Phew. Good thing I’m good at writing artificial intelligence 
Yeah sure, with limited practical utility since the only reason one would use Swift is for iOS/macOS dev. I know there is a project for web dev with Swift but why forse things before they are mature? If he is just learning to program he would be better off with a more ubiquitous language and move to Swift (and cocoa/cocoaTouch which is what makes it interesting) once he has a solid grasp of OOP and programming in general 
Hello! I'm sorry to hear you're having trouble with my book. I'm always keen to hear feedback and to improve things to make it as clear as possible, although generally it's easier if you just email me (paul@hackingwithswift.com) and I can explain anything you're having trouble with. &gt; All these SourceViewController, NSTableViewDataSource, NSTableViewDelegate, etc etc. I have no idea what they mean, and it's pretty weirdly explained. It's not really explained. It's just written that you do this and then this because this, but I just can't retain it. Learning Swift was a breeze, but every time I'm trying to read this I'm getting this sinking feeling that I'll never understand this and I seriously get these aggressive tendencies and seriously want to bash my head in. My brain just can't retain these viewcontrollers, delegates, datasource, I don't get it. Let's wind back to an earlier part of the book, where I said this: &gt; The project template Xcode made for you gives you two important files: ViewController.swift, and Main.storyboard. A “view controller” is Apple’s way of letting you control one piece of content on the screen. It might occupy all of a window or just part of it, and some types of view controller exist just to manage other view controllers. So, view controllers are there to control one piece of content in your app. In this program we have three, and the one you're facing in your post is `SourceViewController`. It's responsible for controlling a table of items, each showing the name of a picture used in the project. Here's how the book explains the need for a custom class: &gt; When we created the split view controller, it provided us with two new view controllers: the one on the top is used to fill the left pane of the split view, and the one of the bottom is used for the right pane. These view controllers are constructed using a class called `NSViewController`, which provides basic functionality such as notifying you when it’s shown or hidden, adjusting its layout when the user resizes the window, and so on. &gt; “Classes” are one of Swift’s ways of creating new data types, and they let you create complex functionality by attaching custom code to the data types you define. &gt; What we’re going to do is create two custom versions of `NSViewController`, one for each side of our split view. This customization is called subclassing, or *inheritance*, because the new class you define inherits all the functionality of `NSViewController` and adds its own tweaks. You've said you have no idea what the data source and delegates are, so again here's how they are explained in the book: &gt; Before we’re done with the table view, we’re going to make two further changes. Select “Table View” in the document outline, then Ctrl-drag from there to “Source View Controller”. When you release, choose “dataSource” from the menu that appears. Now do the same thing again, this time choosing “delegate” from the menu. &gt; If you’ve used `UITableView` on iOS before, this will all be very familiar: you just told IB that the `SourceViewController` class is responsible for telling the table view what it contains (its data source), and should also be notified when the user performs any actions (its delegate). We’ll be writing code for that soon, but first we have some more work in the storyboard. To expand on that a little, Apple splits the control of tables into two parts to help you keep your code organized. One part is "what's in this table?" and the other is "what should happen when users interact with this table?" – data source and delegate, respectively. I suspect the problem here is the disconnect between "data source" / "delegate" and `NSTableViewDataSource`/`NSTableViewDelegate`, and that's my mistake – something I can and will correct in the next update. Again, I'm sorry you're having a hard time. That project chapter was over 10,000 words even though it's a simple app – there's a lot to learn when you're just setting out, and although I try to cover all bases clearly I have more work to do!
Please feel free to email me with any questions you have; I get dozens every day and try to reply to them all. I'd also be keen to hear of any places you thought were poorly explained so that I can improve the book. Thank you!
I'm afraid architecture is *not* covered. The book teaches Cocoa fundamentals and Swift, plus some SpriteKit, and at 594 pages is already a pretty massive book before trying to add other things.
How so? What does "clunky" mean here?
I'm sorry you find it almost unintelligible – that certainly wasn't my plan. It is about 200 words from the middle of a 10,000 word chapter, so I'd like to think perhaps there is some extra detail that might help clarify what is going on.
I'm disappointed to hear you thought Hacking with Swift was terrible. If you have suggestions for improvement I'd be keen to hear them.
Zero success certainly wasn't what I was aiming for. Was there any particular thing that held you back?
Thanks for letting me know!
The man, the myth, the legend. You are the author, no? I can tell you are greatly appreciated amongst the community and lots of people love your work. I am actually considering going through it just so I can be more of use to the community when they run into specific problems throughout. Keep up the good work,
&gt; You are the author, no? I can tell you are greatly appreciated amongst the community and lots of people love your work. I am indeed the author. Thank you for your kind words! This wasn't a terribly easy thread for me to read, but I hope I can at least improve the book in the future to make things as clear as possible. Email me at paul@hackingwithswift.com and I'd be happy to send you a free copy, including free updates in the future – if you have any feedback to help improve the book I'd love to hear!
I’m sorry, I know you’re a regular on these subs, I should’ve been a bit more specific. The basic tutorials were very good when it came to learning project structure, breaking down problems, and generally getting to know the way of Swift. However, I felt like I was just banging my head against a wall trying to learn everything by “just doing it”. There’s many complicated aspects to iOS development that I had trouble understanding with that approach. Stuff like general MVC architecture, design patterns in Swift, and certain parts of Apple’s frameworks. If I were a beginner again, I think I would have found more success with your tutorials if you were to include a brief overview of theoretical stuff like that. I realize that may be something you don’t even want to do as it’s out of the scope and the idea of “learn by doing”, just my 2 cents. I really didn’t want to say they’re not good tutorials, just that they weren’t for me at that beginner-level time. I really appreciate all of the hard work you do, and want you to know that they have helped me out a lot :)
Hello there, Paul! You do excellent work. I have no idea where the book intends the student to be at this point, but I think my main criticism is that the excerpt seems to reference many, many things in such a short space—“short” both conceptually and in terms of the actual word count. If this is early on in the instruction, the passage above seems pretty overwhelming in terms of its breadth of concepts. If the student is already intended to well understand delegates and protocols, well then carry on. But I did assume this was fairly early in the book. 
It is early in the book insofar as it's project one, but by that point there has already been 6000 words of explanation. That's a *lot*, I know, but I do try to cover all bases. If you look at the [free sample of Hacking with macOS](https://www.hackingwithswift.com/files/hacking-with-macos-sample.pdf) you'll see it doesn't even reach that point even though it's 25 pages – it explains other things leading up to there, such as inheritance, storyboards, a little MVC, and so on.
I know a little bit of Python and JavaScript. At any rate, things are going more smoothly now. I was probably too sore (from note taking) and tired.
Since you can link to C code via Swift that's excellent for Linux use. C is a major lingua franca of Linux. ;)
When I used it a few years back when I was an undergrad, it felt like a tonne of "do this" rather than explaining why we should do this. At that point I only really knew Matlab and my CS knowledge was pretty grim to say the least, to be frank, Swift and Apple's frameworks have a fairly steep learning curve and so just a tonne of "oh write these classes and these functions" and "oh you need to know that you use this function" didn't really appeal to me. About 6 months ago I used the Stanford course for a couple of weeks (by this point I was a strong C++ programmer) and connected with it on a number of levels. For a start it gives you a basic outline and tries not to go in too fast and gets to "fun" stuff relatively early (wiring delegates into button presses) but then later explains MVC's and lifecycles and stuff. Dunno, I just found it very intuitive. I've taught programming a little bit: in general stuff that you find obvious is rarely so to others, and it's best to take a wide view on things before going in deeper because people aren't stupid and they often are dissatisfied and lose focus in answers that are like "just because" (although I fully admit this is a bit of an unfair exaggeration of HWS). I don't mean to come across as too critical, just thought that I would pen my thoughts. All the best if you are the creator :)
I'm fairly certain I never – in all of my books – write "just because", and if I had I would correct it in a heart beat. The Hacking with Swift book is 1300 pages, of which vast portions are explanation. To the best of my knowledge, every single piece of code is explained thoroughly at least once, often several times. That being said, I'll try to read through again and look for places where I can push heavier on the "why" aspects – I do try, but I can always do better.
In case you were curious, Chris Lattner scored 12/16, so if you beat that – no easy feat! – then you can consider yourself a true Swift triviahead.
Like [this](https://stackoverflow.com/questions/38023838/round-trip-swift-number-types-to-from-data)?
edited :)
Interesting, the implementation there is currently incorrect.
ty
I tend to be the same way, which made a lot of tutorials frustrating for me when I started out. Im now thinking of series tailored for folks like you and me. A lot of them are aimed at seeing results quickly, but this often results in 'progress' without a full understanding of the concepts. I dont think educators should be afraid of asides to explain concepts in detail, especially when they're the backbone of many of the patterns you'll see in the UIKit/Cocoa API - this (the delegate pattern) being a prime example. 
Hey Paul, appreciate your work very much. I still think the concept of delegates/protocols still feels a little opaque in your description. More specifically, how and why the connection between the tableview and controller happens. See my explanation elsewhere in this thread for what I mean. Keep on hacking!
Slowly learning via Swift Playgrounds and reading this sub.
like should i use json? idk what to do plz help 
yes.
I got it to come back exactly as I want it, but now my problem is that it is returned as a dictionary with one entry rather than several. I would also prefer it as an array, but one thing at a time I guess.
It's best to have it your old way and just grab the 'reltionship' out to decode. You will get an array doing that. 
Well before it was also coming as a dictionary and one entry as well. I only added json serialization to make it come out prettier, although pretty doesn't matter as much. I just need it to come out in a way that I can easily display it in a UITableView. At the moment I can only show the one entry...
Why did you set loaded data to [decodedData]? Decoded data should have been an array already.
All of those things in blue are well documented. Read the function descriptions and actual headers, this might help. Swift language is much more quickly learned than the nuances of UIKit. 
Programming is about problem solving, which requires you to break a problem down into smaller and smaller pieces. What is your thought process so far?
This is not a subject for stupid people. Children, sure, but not the dumb ones. Truth is it is impossible to properly explain how tables and view controllers work to a stupid person. 
I would read through this https://swift.org/documentation/api-design-guidelines/
# problems 1. "certainability" isn't a word.
&gt; Almost never use singleton, or you will do retain cycle at some point. "Don't use a hammer if you don't know how to use a hammer, or you will hit something you don't mean to"
Because the data received comes in a dictionary. Maybe my idea wasn't the best, but it certainly doesn't come as an array.
http://swift.sandbox.bluemix.net/#/repl/5a34673186db571109de83aa i just noticed your dictionary field name doesnt match exactly the keys in your json. for reference https://medium.com/@sarunw/codable-in-swift-4-0-1a12e38599d8
Honestly i follow online guides and breaking it down I can send you pms I don’t need an answer but some help would be appreciated 
Alright, I did my best to follow what he was saying and apply it to my code. Now the problem is that I can't get anything to show up. I had the data at least showing in the console. Now if I tell it to decode to an Array, it throws an error saying that it returned a dictionary. When I tell it to decode to a dictionary, it tells me that it returned an array.
This is the last time I'm replying. The first link I already had working code there. 
Okay, so you’ve created three drop downs in code or in interface builder. Next you need to populate the drop downs with values. What are you thoughts at this stage?
Alright. Thanks for the help...
Please don’t feel bad, Paul. We don’t all learn the same way - lots of people are happy to follow you along, trusting it’ll all become clear later on, and I’m sure it does. Other people like myself and a few others here get frustrated if we have to move on without knowing exactly why we were just asked to do something, and how we did it. 
"making my stomach uneasy" lol you can't be serious.
Should’ve kept oneof instead of enum. Enum is really one-of the value. 
Mobile check deposit app/credit card processing solution for companies that have field agents/multiple locations and terminals. About 90% done. Integrating with creditcall api for credit card transactions and A2iA for the ocr toolkit. Been pretty fun so far. 
Not sure. Alamofire is amazing. 
IMHO Matt Neuburg's books
Yes, on a macbook should be fine.
It's cool to learn Swift. Especially on Macbook.
No money to purchase a MacBook
Set numberOfLines on the label to 0 to make it multi-line. 
Given that swift 4 released 3 months ago that would be fast that physical books are already updated, printed and available. Could be wrong though i'm not a publisher. If you don't want to wait for your favorite book to update just buy the swift 3 book. Maybe thre is still some slightly old syntax in there that changed on swift 4 but xcode correct that with quick fix so not to much problems if you buy a swift 3 book.
I'm learning from the fall 2017 Stanford swift app course rn. Can I ask what resources you found useful after you completed that? Thanks!
I believe I had an iOS SDK book from APress or Wrox I believe. But aside from that I just coded and coded and coded some more. It helps if you know another language too. I had already worked with ObjectiveC and wrote some app with that. The other thing I like about Swift was the playground where you could sketch out your code in an interactive session. That really helped.
Make a vc that looks exactly like your launch screen make it your initial vc, put code in it to decide what vc to push from here
This drops at least one external dependency in one of my projects. God bless.
It doesn’t. You hve to include it in your dependencies like any other library. In addition, you really should be cautious in depending on this: &gt; This product consists of unsupported, unstable API. These APIs are implementation details of the package manager. Depend on it at your own risk I really don’t get why so many articles/medium posts/tweets present this as a thing Apple built for people outside of the package manager to rely on. It’s most certainly not.
RemindMe! 1 day
I will be messaging you on [**2017-12-17 15:29:28 UTC**](http://www.wolframalpha.com/input/?i=2017-12-17 15:29:28 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/7k7a0k/correct_way_to_capture_response_in_closure/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/7k7a0k/correct_way_to_capture_response_in_closure/]%0A%0ARemindMe! 1 day) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
You shouldn't have any issues, if you are really concerned just say self.someClassProp = JSON(responseData.result.value!). Then its really clear that your assigning a new object. It also though, depends on where this code is. If its in a view controller, you should be concerned about capturing a strong reference to an object when self could become nil.
What would it take to get Apple to just include more data structures in the standard library?
Use [weak self] before (reponseData) if you are worried about a reference cycle.
&gt; external they do need to make something like this that is stable and part of the standard library. using Swift for systems programming is already hard enough
Can you explain that? Is it that the Closure captures a reference to the viewcontroller?
On the screen
Sorry for the long message, I just kept typing in hopes that some information will help you: You are correct. When you call Alamofire.request("http://www.whatever/").responseJSON() { ... } you (implicitly) pass a reference of self in, which allows you to later say self.whatever = JSON(...). However what you always want to be aware of is, is it possible for self (a view controller) to become nil while the function that then calls the closure is off doing its thing. If the answer is ever yes, you should declare self as weak. What this mean is that A) self becomes optional, and B) self can become nil after it is captured, and you can then write respective code (such as a gaurd to cover your bases). Just remember that self is captured AS SOON AS you call the function, not within the closure code itself. So if the view controller is here now, it might not be later. (The user moved on, something deinited you, etc..)...That doesnt mean however that all closures should have weak self. But if you leave it strong in the context of a view controller, you could create a strong reference that up's the reference cycle count and prevents your view controller from be removed from memory even though its remove from the view hierarchy. (AKA allocating memory, but not releasing it via ARC). A good reason to use a strong reference, and later ensure you've done what you can do ensure you dont create a reference cycle is when you absolutely need self to stick around, say the operation is chained and without self a larger process would be in trouble if it stopped 1/3 of the way though. Then you could use a strong reference that holds on to self, but you just have to make sure you don't make a cycle out of it. (A -&gt; B, B -&gt; C is a cycle.)
okay...
This would be a very reasonable first step towards doing so.
Tried the case-sensitive remedy which didnt work. Trying to figure out how to do the dict within a dict part. I've been trying to figure out how to grab the UID and then use that to get to the parsedContent part of it. 
There's the Swift Evolution process. One would have to make a proposal and bring it up on the list. 
and add constraints left right top and bottom
The domain term for "one-of the value" is enumerated type. Almost every other programming language uses "enum" (or "enumeration" or "enumerator") as the keyword for defining them. It makes a lot more sense than *some* of the Swift keywords they chose...
I’m mostly just perplexed that Swift doesn’t already have default implementations of many basic data structures. 
This is SUPER helpful! Thank you so much. ❤️
Wat? Discourse is finally here!
&gt; Almost every other programming language uses “enum” It does make better sense: enum is “listing all the cases”. Language Keyword wise, enum is the right choice. But in actual use, a variable of some enum means its value is oneof the cases. So think of it as oneof in your head makes better sense. Kind of like function parameter label vs argument name: both make sense, depends on where it’s used. 
Like what?
&gt; I really don’t get why so many articles/medium posts/tweets present this as a thing Apple built for people outside of the package manager to rely on. It’s most certainly not. As the author of the blog post (hello!), I can tell you exactly why: because the Apple employee who (mainly) wrote it said to do so: ["if you write Swift scripts, add swiftpm as a dependency and try the new Utility product."](https://twitter.com/aciidb0mb3r/status/936386272318197760) Yes, those caveats are hugely important, which is why I put them into the article twice, but saying that this is "most certainly not… for people outside the package manager to rely on" is expressly the opposite of what Apple employees are saying. It's part of Swift PM, and it's not official Swift API, but they specifically declared it as a product because people were asking for it.
Right. I think this is an important first step, and it contains some really useful code even though it's so early. I realize Apple is the kind of company that like to do things big or not at all, but at the same time this kind of spontaneous release is helpful for trying things out, generating discussion, and hopefully building consensus towards what a bigger thing might look like.
I was selecting text from the book – t goes into a _lot_ more detail, and there's a limit on how much I can post in here. My reply didn't cover at all the connections in IB, which is all the stuff that comes immediately before the "Before we’re done with the table view…" part of my reply, even though it's a whole chapter in the book. Keep in mind that the first project is 10,000 words – 45 pages of US letter text – all of which is just to explain an app that's approximately 50 lines of code. There's a *huge* amount of explanation.
Ah, fair enough. No doubt, it's a challenge to find a balance that doesnt overwhelm the reader while still making progress. Keep it up!
There are three basic data structures: list, dict, set. Took them crazy long to add set but now it’s there. 
I was able to get multiline text without adding any constraints. I was using the regular text type cell. 
The problem to me is that you need to cover all the basics of variables and classes and functions etc etc etc but that’s boring. Teach it fast but teach it well. Move on to uikit and start showing them how they can use those things to build something. Start with a small program that you can just throw it in one viewController but progress quickly into showing app architecture and how you can break your problem into several much smaller problems and stay organized in the process. 
My favorite way to break this is to teach basics first (what are optionals, what are methods/functions and classes, and so on) then go straight into a hello world that exercises these (something that might or might not load a single picture from the internet).
Just use Xcode and build the projects from Apple's swift language book online. You could buy other resources to learn from, but Apple's is free and very good.
That's a good question, but generally, you'd go through an accessor method to get the thing you want or conform to a delegate or register for an event, rather than grabbing it from an object and making it what you want.
You know, like the data structures that everyone uses ^/s
`OrderedSet` for one given it's usage in `CoreData`. As a systems guy that has to eek our performance on occasion, some tree based structures would be nice. Although, i don't see myself ever switching to Swift for anything other than app development anyways.
I'd like to see a beginner's course that concentrates on stuff that isn't immediately obvious, stuff that is conceptual, how IB talks to the code and vice versa, MVC, OOP, POP, etc. There are dozens of courses and tutorials on the basics like functions, var/let, strings, ints, operators, etc. so there's no need to reinvent the wheel. I feel there's still a gap between having the knowledge of what these things are and having the ability to actually put them to use and make them work with a UI. 
The two things that I would love to see taught more are creating views programmatically, and MVC. I used to have a lot of trouble working on projects because of the lack of material on these subjects.
I think this question may best be Googled. Start with Apple’s materials and download Xcode.
&gt; But in actual use, a variable of some enum means its value is oneof the cases. So think of it as oneof in your head makes better sense. I'm not sure how it makes better sense (do you call struct "allof"?), but you're free to think of it however you want! &gt; We just have to be careful in naming enum type and variable: at least it should be plural for enum type and singular for variable? What’s the right way? I don't see why it would be plural. None of the Swift or AppKit enums that I see have plural names. Do you mean OptionSets? Those are usually plural.
"Crazy long"? It took only 10 months, from June 2014 to April 2015 (Swift 1.2). During that time, in every environment which Swift supported, Foundation's NSSet was available, so it's not as if the functionality was lacking. In comparison, it took Ruby 7 years to get a set type, Python 9 years, C# just under 6 years, and even Java took almost 3 years. Swift was by far the *quickest* modern language to get a set type!
If I had to guess I'd say it's probably a lifecycle issue. I think you might be able to programmatically set the text to bold and then set tint color and that'd take care of it. I could be wrong though.
Playgrounds are a good way to get confidence to the language.
&gt; for one given it's usage in given its* usage it's = it is Learn this.
For the closure: let variable1 = getVariable1() let variable2 = getVariable2() let closure = { (args: Closure1Args) -&gt; Closure1Returns in let cv1 = variable1 let cv2 = varaible2 doSomethingWithVariable(one: cv1, two: cv2) } The compiler will generate something like: class Closure_literal_1 { let size: size_t let flags: Int64 let implementation: (Closure1Args) -&gt; (Closure1Returns) var capturedVariable1: CV1Type var capturedVariable2: CV2Type } func Closure_literal_1_implementation(self: Closure_literal_1, args: Closure1Args) -&gt; Closure1Returns { doSomethingWithVariable(one: self.capturedVariable1, two: capturedVariable2) } So just imagine a closure as a class. Now just use the same rules for determining whether you have a retain cycle between two objects. Since `Alamofire` is not returning something that you'll be capturing and it doesn't hold onto that closure for longer than its usage you do not have a retain cycle.
Update : I think I’m giving up lol. I’ve been at this one issue for quite some time now and I just can’t get it to work. Thanks for your help. 
Just want to mention that Swift already initializes globals lazily so there should be no need to do their lazy-initialized singleton thing.
Apart from the answers already given I would like to add that you should consider using if let or guard statements instead of checking for nil and then force unwrapping (!). I would suggest the following for processing the response: `guard let value = responseData.result.value else { // value is nil, handle this case here return } self.someClassProp = JSON(value)` 
That’s a very weird list you’ve got. Python modern? Java? But not rust? Not D? Go?
I think the author has been banned in Google.
Hi down_with_the_toast! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/7kdsac/finally_made_my_first_app_it_may_be_simple_but_im/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
In my all I have subclass of UILabel I use all over with some custom bits. I do what you describe by checking the size when the content size changed notification comes in, and if it’s larger than what my max font size is, I handle it there. You could likely do the same using an extension.
Difference between what I’m doing and the tutorials are you get me, a seasoned professional walking from 0 to hero. Sure, I might show you the tutorials and stuff for you to explore on your own, but the point is this isn’t self learning. I’m here to help you learn this twice as fast and to NOT make the mistake someone who is self learning would. And not just be a other number if you went to a university or multi-campus boot camp.
I have that feeling too when I first read the book but now I’m doing Project 7 and things are clicking slowly but surely. The great thing is despite the numerous frustrations, when I see the app working, I think “How the hell did this work?” and review back the code to understand it further. Though, I do think that the book is not suitable for everyone and luckily I understood some of the concepts because of my rudimentary understanding of C fundamentals. I try to have more than one resources available because some resources excel at some things while others excel at another (I refer to Youtube, Apple docs, and StackOverflow when I’m lost when reading the book). From my experience, visualisation is definitely needed and you can understand Swift if you can see the hierarchies, relationships, and interactions between the various components. If you lose grasp of any concept and its interrelations, things will be very difficult. After completing everything, I plan to read the documentations because my frustration is now knowing what exactly ViewController and its ilks contain.
11/16, so close. 
MVC (and similar) might be something I’ll touch on aside from the main program. Reason being is because it gets boring real fast, and I just don’t have a good solution to jazzing it up. As for hard coding views, it’s something I would gladly do in an advanced course. Not exactly a basics friendly topic, but something I agree should be taught.
Started learning Swift and ios development just recently. Made a simple calculator https://github.com/Miretz/ios_SimpleCalculator
You're a bit late, it's 2017th already.
2018 soon!
I get the ePub version of books. They normally allow you to get the update versions as new swift versions come out. I have a ton from Ray Wenderlich, the hacking with swift serious, objc and big nerd ranch. Those, along with video courses on Udemy, has helped a lot. My downfall is I have been doing it alone and get bored of it. It really helps if someone else is going along with you. 
You can write a protocol and implement it in your 1st ViewController. Store a property of this protocol in your 2nd ViewController and trigger it when going back. Something like: protocol HandleMyListProtocol { func handleMyList(list: Array&lt;Type&gt;) } class FirstViewController: UIViewController, HandleMyListProtocol { .... .... .... func handleMyList(list: Array&lt;Type&gt;) { // do something with list } .... .... // set the handleListDelegate in prepareForSegue to self } class SecondViewController: UIViewController { .... var handleListDelegate: HandleMyListProtocol? = nil var myArray: Array&lt;Type&gt;? = nil .... // trigger in unwindSegue or where ever you want your handleListDelegate like: "handleListDelegate.handleMyList(list: myArray)" }
You’ll want to make the delegate a weak reference, to avoid retain cycles / memory leaks: ``` class SecondViewController: UIViewController { weak var handleListDelegate: HandleMyListProtocol? } ```
Worked like a charm, thanks!
Edited my answer thank u 
Sure, or you could just create a couple generic extension functions on UITableView so you don't even need to create/conform to a protocol: extension UITableView { func cell&lt;T: UITableViewCell&gt;(for cellType: T.Type, at indexPath: IndexPath) -&gt; T { guard let cell = self.dequeueReusableCell(withIdentifier: String(describing: cellType), for: indexPath) as? T else { fatalError("Could not find cell with reuseID \(String(describing: cellType))") } return cell } func register&lt;T: UITableViewCell&gt;(_ nibs: [T.Type]) { nibs.forEach { self.register(UINib(nibName: String(describing: $0), bundle: nil), forCellReuseIdentifier: String(describing: $0)) } } } Now when you register a cell you can just do: **tableView.register([MyCell.self])** and dequeue it in cellForRow with: **tableView.cell(for: MyCell.self, at: indexPath)** which will return you your UITableViewCell subclass rather than just the UITableViewCell superclass so you don't even need to force cast it to your type. 
Ok, I’m overthinking this. Let me take a couple of tranquilizers…:)
The alternatives they mention themselves are unfortunately not Swift 4 yet (and are also much crappier). On that note, what happened to swiftdoc.org? It was great but... no Swift 4, hasn’t been updated in a long time. 
Guy who ran SwiftDoc now works for Apple and can’t maintain it anymore. Also, the docs it generated are now what you see in Apple’s docs. 
Forgive me if I’m not understanding you correctly but when I try to scroll on a tableview Snapchat, and then swipe right to page over to the camera it immediately stops the table’s scrolling and then pages over.
Yes, sorry I may not have explained clearly. Usually you have to first bring the table view to a stop with your finger, then lift and pan over to the next page. But on Snapchat the pan can happen in one action while the table is still scrolling. Whether or not the table view is still vertically scrolling while the horizontal pan happens isn’t important to me. 
Ah, ok I see what you’re saying now. Unfortunately I don’t think I’ll be able to be much help I just learned Swift this year. Though, I wonder if they made that functionality with a separate UISwipeGestureRecognizer in the tableview cells, which only becomes enabled while the table is scrolling or something like that.
Glad I'm not the only one who will miss the IBM sandbox. Hopefully a good alternative will be posted here soon.
I feel so stupid. Thanks for the solution:) I really appreciate it.
i'm glad they hired him, his website is awesome
I would highly consider using a collection view for horizontal panning over a table view. It’s made to go horizontal or vertical 
Once I learn how, I'd like to turn this into a library that you could import into your own projects. Anyone know any good resources on learning how to do such a thing?
This isn't a sub for us to do your homework for you. If you're having trouble with some aspect of your task, such as writing a function in swift, then your best source of information would be the official swift programming language guide which you can find [here.](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-ID309) You can also do a google search or ask your teacher.
CocoaPods is probably the most widely used package management system out there, and it's also not hard to do: https://guides.cocoapods.org/making/index.html
So what exactly do you have trouble with?
I was having with last function, somehow it doesn't work with properties and subclasses I did. Or I m doing it totally wrong 
👏 bravo! Great documentation as well. A challenge? Make use of the Accelerate framework for your operations to make your library as fast as possible. https://developer.apple.com/documentation/accelerate Look at the basic linear algebra (BLAS)
The Swift Package Manager is the official one. https://github.com/apple/swift-package-manager
Cocoa Lubmerjack https://github.com/CocoaLumberjack/CocoaLumberjack
As a mathematician, I find this super confusing. It gives the impression of being a matrix, but does not behave like a matrix. In particular, the matrix multiplication is incorrect. See https://en.m.wikipedia.org/wiki/Matrix_multiplication for more info on a correct implementation. Also, it would be nice to have transpose, invert, an identity matrix initialized, etc. 
Non-Mobile link: https://en.wikipedia.org/wiki/Matrix_multiplication *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^129353
**Matrix multiplication** In mathematics, matrix multiplication or the matrix product is a binary operation that produces a matrix from two matrices. The definition is motivated by linear equations and linear transformations on vectors, which have numerous applications in applied mathematics, physics, and engineering. In more detail, if A is an n × m matrix and B is an m × p matrix, their matrix product AB is an n × p matrix, in which the m entries across a row of A are multiplied with the m entries down a column of B and summed to produce an entry of AB. When two linear transformations are represented by matrices, then the matrix product represents the composition of the two transformations. The matrix product is not commutative in general, although it is associative and is distributive over matrix addition. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^| [^Donate](https://www.reddit.com/r/WikiTextBot/wiki/donate) ^] ^Downvote ^to ^remove ^| ^v0.28
there is a channel on youtube called letsbuildthatapp. He is great.
I'll get to work then! Strange, not what I imagined matrix multiplication to be at all.
What is the traditional way of implementing a dynamic interface?
Thank you! I appreciate the feedback. I'm going to look into BLAS, but since I don't do any vector math, can I still use it to accelerate my datatype?
SwiftyBeaver here. 
Yes
This looks great. I did something similar a while ago. Here are my thoughts: - Is there any reason why `Matrix` is `BidirectionalCollection` and not `RandomAccessCollection`? - It makes more sense to use `let` than `var` in the example code snippets where you don't mutate the matrix. - Your `row(_:)` function returns an array – you could consider returning a custom `Row` collection that itself stores the matrix and the row/column you're looking into. It would turn `matrix.row(3)` from an O(n) operation into an O(1) operation. - Similarly, your `rows()` function returns an array as well. What I did was create a custom `Rows` collection that stores the matrix and has the rows of the matrix as its `Element`s. Just like before, this turns `matrix.rows()` from an O(n) operation into an O(1) operation. An additional benefit of this is that you could get rid of the `row(_:)` function because `matrix.rows[3]` would do the exact same thing as `matrix.row(3)`. - All the same things also apply to `column(_:)` and `columns()`. And finally, if you're looking for a way to make matrix multiplication type-safe, look into the concept called "phantom types". Don't hesitate to ask me to clarify anything :)
You need an empty line between a quote and your own text for it to be formatted correctly. :)
I assume there are plenty of tutorials out there as you’re asking for a recommendation. I have found that to really learn something it’s good to do 2 or 3 of them on the same topic. Not only does the repetition help you learn but it’s also useful to see the different ways people solve similar problems. 
To answer your questions in order: * I don't know, that's a good question. The quick answer is I forgot that RandomAccessCollection is the more capable protocol. * if you're talking about the examples in the README, under **Using your matrix**, it's because that statement is a part of a larger, staggered example where mutability is needed. If you're talking about the previous section, you're probably right. * Can I see your code? I love this idea, but I'm not sure how I'd implement it. Did you make Row a SubSequence of Matrix? Like a view into the matrix? How did you go about doing that? Thanks for your reply, it's much appreciated.
Same here , and their explanation for deprecating the sandbox is complete nonsense 
Well, If you don't let us see what you currently have written, no one will be able to help you out. Can you share the code that you've got so far?
Nothing. There are already 82 berjillionty resources available for beginning programming with Swift. The big market holes are in pretty much anything beyond that.
I offer more then beginning courses (everything from code review and advanced problem solving, to advanced courses, including hard cording apps), it’s just that beginners courses are always the hard part. 
This sounds cool, and yet this is the 1st I've heard of it :D
It's almost 2018. How is this relevant?
`Row` would look something like this: struct Row&lt;Element&gt;: Collection { private let matrix: Matrix&lt;Value&gt; private let row: Int var startIndex: Int { return row * matrix.height } var endIndex: Int { return (row + 1) * matrix.height } func index(after index: Int) -&gt; Int { return index + 1 } subscript(index: Int) -&gt; Element { return matrix[index] } } The problem with using `Sequence.SubSequence` is that it would only work for the rows of the matrix, not for the columns. So I'd use custom types for everything. Here's what `Rows` could look like: struct Rows&lt;Element&gt;: Collection { private let matrix: Matrix&lt;Value&gt; var startIndex: Int { return 0 } var endIndex: Int { return matrix.height } func index(after index: Int) -&gt; Int { return index + 1 } subscript(index: Int) -&gt; Row&lt;Element&gt; { return Row(matrix: matrix, row: index) } } As you can see, we're not creating arrays anywhere, so indeed thanks to CoW, this is super efficient. And it can easily be changed to work for columns as well.
Wrote my own. Here is a snippet. I also have Debug and Error calls. Each log 'type' has a separate emoji associated with it, that is to make scanning the log easier. class Log { private let name: String internal var enabled: Bool = true init(owner:AnyObject) { let typeName = NSStringFromClass(type(of: owner)) self.name = "\(typeName)" } init(name:String) { self.name = name } func info(_ msg: String) { if enabled { Log.info("\(self.name) -&gt; \(msg)") } } class func info(_ msg:String) { if ServerInfo.current.isLoggingEnabled { Localytics.tagEvent(msg) } console("🍀 INFO -- \(msg)") } } Finally, in my view controllers I have this line of code. private(set) lazy var log: Log = { [unowned self] in Log(owner:self) }() Now I can call: log.info('log this please') and in my console log I will seee 🍀 INFO -- MyApp.MyClassName -&gt; log this please 
Wow, that's exactly how I envisioned it. Just couldn't get to my laptop. Great job! I have one question though. I've never written a `SubSequence`, so bear with me here. I had a hunch that `SubSequence`s would need to be comprised of contiguous values, but can `SubSequence` not provide its own iterator to get around that? Is `SubSequence` a `Sequence` itself? Or does `SubSequence` not work like that at all, and I'm thinking about it all wrong?
My BS geiger-counter is starting to tick.
YES. I'm all for it! While code sharing situation needs to be resolved those wrapper platforms produce in general subpar quality apps and often have another tier of bugs due to abstraction. 
I would love to see this happen, but I highly doubt that they will. 
I’m up for it. Finally people would have to learn actually how to code or pay proper money for an app and not just buy / use their 3rd party template. Most the decent companies wouldn’t be affected by this anyways. 
Do you think this includes React Native?
I thought it is only for the apps which are templated. 
Yeah, this means war.
Wasn't this tried once before?
I can understand most of them....but isn't Xamarin just a .net interpreter for iOS? That sounds a bit silly
Thank god
Isnt the facebook app made in RN?
Great question!
Either do: class WeatherAPI: CLLocationManagerDelegate { lazy var locationManager: CLLocationManager = { let manager = CLLocationManager() manager.delegate = self return manager }() } Assuming the class where you put this conforms to CLLocationManagerDelegate. Or you can just create an init with no parameters and set it up there: class WeatherAPI: CLLocationManagerDelegate { let manager = CLLocationManager() init() { manager.delegate = self } }
Googling turns up NO other verification of this policy. I call shenanigans.
Yeah. Xamarin is a toolset around Mono, which is multi-platform .NET. PhoneGap is a commercial toolset built around Cordova - will Cordova applications also be banned? I'm hopeful that it's just the bare template apps that they'll be banning, but it smells like the Flash for iPhone ban back in the day.
I remember the first part of that mail. Second part not so much (third I suppose). Also on my phone seems like that there is a image quality difference. 
Yeah, I see multiple issues with the language used that I think would be edited out. 1. No “and” before comma in the list of frameworks. 2. Frankly, I wouldn’t see Apple specifically naming platforms, I would see them clarify it as “third party bindings” 3. Why on Earth would Apple ban such stacks when they clearly have an interest in providing web-view controllable apps, as shown by their focus on WKWebView providing web content for apps? If they wanted to ban non-native, they probably wouldn’t want apps utilizing WKWebView. 4. Xamarin is just a binding to Objective-C. I guess Forms exists but they mention only Xamarin. Why would they ban a binding? I agree with you, something is *definitely* up with this. Though on the off chance that it is true, that kind of sucks, I was considering learning Xamarin. 
I can’t speak to some of the listed frameworks, but since Xamarin is on there, I can assume that means bindings. Xamarin and React Native require that you code, and both of them can be used to create high quality apps if you put in the time. It’s a matter of improving the code sharing situation. (Not talking about Xamarin Forms, that’s garbage)
Also, "a software".
"itunes connect" was photoshopped, just look at the different sized small letters. the "e"s are higher then the rest.
I feel silly now. Those are super simple. I don't know why I didn't think of init(), probably because I'm use to seeing init with input parameters. Init is called when it is setting the properties of the call correct?
LOL I missed that. No way this is real. 
Yeah
Good, apps made using these technologies are slow af
Hell even Forms is just a library on top of Xamarin.iOS. It's not any more magical than any other library.
Definitely fake news
I’m aware, I’m just speaking to its nature of being cross-platform targeted and lower quality. 
You typically don't write your own iterators for collections, since `IndexingIterator` is usually what you want. Writing your own iterator here wouldn't really work either since then the count wouldn't match with `distance(from: startIndex, to: endIndex)`, unless you do away with the `Collection` conformance, but then you miss out on a lot of the benefits.
https://developer.apple.com/app-store/review/guidelines/ **4.2.6 Apps created from a commercialized template or app generation service will be rejected.** Lawdy
I completely agree with the removal of template apps but removing apps built using a different framework would be a terrible idea.
I remember years ago, Apple kicked Unity out or was going to. Unity came back and worked thing out with Apple. TBH, Apple should have done these things long ago. Unity is a great and popular product as best I can tell. IMO, we have far too many options. Think about someone just getting into iOS now. They see Swift/ObjC, Unity, RN, PhoneGap, Xarmin, template apps, and then you have all the sub things to learn, editors (Xcode and others). Then you have all the APIs, ARKit, ML, and many others. We could really use some house cleaning on the App Store. Imagine if 1/2 the apps were gone.
damn :( this is some sad news. 
&gt; 4.2.6 Apps created from a commercialized template or app generation service will be rejected. https://developer.apple.com/app-store/review/guidelines/#minimum-functionality 
"app generation service is also rejected"
So nothing specific to these technologies. Plus Apple would announce such a thing. This post is definitely fake news. 
Finally now ban them from macOS too especially that electron shit
Yeah when you initialise your class the relevant init method that matches the parameters you pass in gets called. So WeatherAPI() will call the init() with no parameters.
What difference does it make to you? Companies that can afford to get an app custom built usually do, because they stand to gain from the higher-quality UX anyway. It seems you're just being elitist.
To build off this, you could have 3 UICollectionViewCells with nested UITableViews. This would allow for the functionality you seek; however it might be a bit jerky due to it being sensitive to both horizontal and vertical scrolling. So you'll have to play around with it.
Facebook only uses RN in few area of the app. You can integrate RN to an existing ObjC/Swift app. 
If the attached App Store email is not faked, then I’m guessing we will see PWA support in iOS 12 and Apple will start asking those PhoneGap/Cordova/Ionic apps to just use PWA, and ban them in 2019. That email is strange in highlighting Xamarin since the tech is not webview wrapper. So the fate of tech similar to Xamarin such as React Native, NativeScript, Weex, Flutter is unknown. If Apple is banning Xamarin, means they would have to ban React Native. Kind of unthinkable since there are many apps using RN. 
Unity as in the game engine? Unity is not comparable to any of these other frameworks. Are you suggesting games should use SceneKit or raw OpenGL/Metal and iOS code? That would mean that games would have to be exclusively developed for iOS and nothing else... Most people jumping in will be able to find Xcode/Swift/UIKit. If they want to go cross platform, *then* they’ll find an alternative that works for them.
It's a little difficult to make a determination based on the information you gave. Conceptually, what is the purpose of this view? Or what kind of content will be displayed?
Well it's either item information, images or kinds of input.
I can see the reasoning for most of these but Xamarin? Apps get compiled to LLVM bitcode and use UIKit just like the ones written in Swift or ObjC.
The 9-to-5 isn’t dying. Jobs are dying. AI will replace us all. They’ll be better at our jobs. They’ll be more charming and better listeners. And Karen will prefer them too. I hope she’s happy with her perfect AI boyfriend. Fucking Karen.
You could always not use storyboards \*ducks\*
The ban was against Unity, but I don't think Apple ever enforced it before Unity talked them out of it. Yea, I know, games would be developed for iOS only. That's the way it was with some other engines (I don't remember the names). Even now, the ARKit stuff is going to be iOS only. I'm pretty sure the same things happen with AI. You have iOS specific vs things like Google Vision and others.
Xamarin isn't an app generation service -- not any more than any other compiler is, anyway.
Devil's advocate: yes, with Adobe Flash.
Fake. Person added the sentence and didn’t even word it to match the language of the rest of the message. Apple is banning apps created from purchased templates and website app builders. Basically an extension of the rule banning apps that are only wrappers for a website. 
Everybody is hating on PhoneGap, but a well made Ionic app paired with PhoneGap/ Cordova works magically. Hopefully this is fake. 
I was thinking phonegap as well.
Collection views are generally used to display an ordered collection of items. They are more flexible in how the content can be laid out than a table view. But if you know that the items will appear in a scrollable vertical column or section, I would go with a table view; it's pretty straightforward, and you can customize your cells to have just about anything in them.
Congratulations on a successful year!
Ah i found a place where i can learn it 100% accurate :D it's apple.com
Implementing CloudKit with help from IceCream to handle a local Realm database to CloudKit
Disallowing Flash was because Jobs saw online Flash games as a competitor to their App Store games.
Also, Trillian is an instant messaging app. You don't make apps with it.
Apple put "Applications must be originally written in Objective-C, C, C++, or JavaScript as executed by the iPhone OS WebKit engine" in the ToS, and Unity scripts can be written in C# or JavaScript compiled by .NET. [Apple eventually went back on the TOS change](https://blogs.unity3d.com/2010/09/10/unity-and-ios/)
Apple plays their cards close to the chest. No way I believe Apple is telling anyone what they're going to do in 2019 yet.
Disallowing Flash was because Flash is a blight on humanity
Ofc you are right, I should say "you may have a retain cycle at some point". Short saying, for me using singletons, in most cases was: a) Sign of laziness (“hey, let store this here, in singleton. It’s simple”) b) Bad architecture. If you need to pass something around the app all the time, sth gone wrong. If this resource must persist through whole live of app, use storage. But you are right, there are some cases when it is only reasonable solution, because other ways were just “over architectured” / waste of time. 
You should definitely look in to a higher spec macbook. Doesn’t have to be super high end but at least a i5 2,5ghz with 8gb of ram. Since xcode on it’s own is pretty heavy on ram and cpu and if you’re going to run a simulator next to it it will be to much for your current setup. Honestly I had the macbook pro with the 2,5 i5 and 8gb and it was still hogging. And had to upgrade to a 15” retina i7 quadcore with 16gb of ram to make the workflow profitable. Time spend vs money 
Thank you! :)
Thing is Apple can do it and afford to get away. If Steve Jobs was still here, he would have done it and then cursed you for even complaining about their decision, because that how it was, and still is to an extent. Headphone jack? No. Suitable I/O on macbook? No. There is a trend at Apple. They dont care what others think. But then again with $200 billion in cash who would?
Except nobody can afford to fight a company who has $200 billion war chest. They'll just steam roll everyone.
Monotouch apps were banned a long time ago. 
If at all possible, you should definitely upgrade to a newer machine. Xcode is a massive resource hog. 
Congratulations on your 2017. Wish I didn't have a mortgage to pay do I can do exactly what you did! Share the love if you have extra client work coming your way 😉
I can sort of believe them banning PhoneGap et. all because its quite easy to see and know that. Xamarin apps are basically native anyway, just bigger IPA sizes, how would they even know?
RoboVM was released by a company named Trillian Mobile. Strange way to refer to the product though. 
[removed]
If I had the money I'd buy 3 iMac 27" instead.
What is there to say? If you use a desktop machine, it's a crazy good computer. It needs to fit in your budget of course. As for myself, I work at multiple places. My own office, client's office and sometimes at home. So I don't want a desktop computer. 
It’s a good computer but you’ll probably never come close to using it properly so it’s worth the money you sunk in it. It has a market and honestly it’s not the average developer. Unless you’re developing some VR content or something
How big is this project? And what is the purpose? Is it going to be work for school? Or work for a client?
I'd say go ahead and buy one, but just to be safe you should probably send it to me and let me use it for a few years to make sure it's good enough
What would you do with 3 iMacs? 
Tbh I think you won’t need such a powerful machine to do iOS development! If you want a really really good desktop for those needs, the regular 5K iMac will be more than enough. It’s gorgeous and powerful enough
It seems like overkill for dev work to me. Plus the high price combined with non-upgradability gives me pause. One of the reasons I was ok with the high price of my 2010 Mac Pro was that I knew I could upgrade it over time and keep it useful for much longer.
And what would you upgrade?
I will never buy desktop computer again. 15” MacBookPro is all I need 90% of time and for the rest there is an external monitor. 
I've upgraded RAM, GPU, added USB3 and eSATA with a PCIe card, replaced the original HDD with a SSD and added additional drives, and replaced the DVD-RW drive with a BD-RW drive. Obviously all these things come standard in a new Mac (except the BD-RW and eSATA), but who knows what kind of technology will be around in 7 years from now that you wouldn't be able to upgrade to without buying a whole new computer? Theoretically you could stick a lot of those things in an external PCIe case but we've tried those with the 2013 Mac Pros at work to add a capture card and 10GbE port and they've been incredibly unreliable, plus they're quite noisy.
Looks like it's fake https://9to5mac.com/2017/12/19/apple-email-fake/
Ah, thanks for the correction.
It is like buying a cannon to get rid of some cockroaches, unless you are a sheik from the middle east, then you can buy the gold edition with diamonds encrusted. 
Too bad
Why not?! :(
Breakfast, lunch, and dinner. 
Just a thought: even though the iMac Pro uses battletested hardware (except vega) it is still a first gen product. First gen products age a lot faster imho as there'll always be little issues that most of the time get resolved in a second iteration or a successor.
This is such an odd sort of thing to fake. Unless you really wanted to freak out Microsoft for some reason.
It's not even about upgradeability, but for repairs. This thing will NOT work for 10+ years because you won't be able to switch out (for example) a dying ssd/hdd (which I'm pretty sure would be the first thing to die).
Shame.
If it's on the company why not!? if it's out of your own pocket... be as tight as you want to be?
Damnit, that would be a dream come true for users and developers alike
Genuinely curious why a lot of you want Xamarin banned.
All you need to do is enable large titles on the navigation bar and when you add your refresh control it will automatically be set there
The only real alternatives to the IBM Swift Sandbox right now are [glot.io](glot.io), [repl.it](repl.it), and the [iSwift playground](iswift.org/playground). Of these, only iSwift has updated to Swift 4. All of which have issues.
I assume it's due simply to the shared remembrance of generally crappy skinned and cross platform apps that were common in the past.
The coffeelake MacBook pro is imminent. Much better plan. I wish Apple allowed for things like striped SSDs. Bet that would make a huge difference. 
Overkill. Just get a 15" Macbook Pro with 2 nice ass monitors.
The iMac Pro isn’t HDD nor Fusion Drive based, and I’ll admit that I have yet to see an SSD die. I think this iMac will last quite a while honestly. 
So I don’t use a table view. I use a scroll view. So I need to add my refresh control as a sub view of my scroll view? Thanks for the answer I appreciate it
This iMac is a dream came true for iOS developers, who actually don’t need a lot of things, but among them : a big display (mainly for IB/Simulators), slowest possible compile times, and Retina which is quite a comfort for anyone looking at lines of code multiple hours a day. I know most developers use 13 or 15 inch MBPs, but they either lose the big surface or the Retina if they use an external display. As for myself, I couldn’t use something other than a Retina iMac. This model could look a bit like overkill, but if you make a living out of iOS development, you should consider investing in it. 
spoofed email confirmed: https://jzeferino.wordpress.com/2017/12/19/apple-spoofed-email-with-review-policy/
You can read the full statement by Jorge Zeferino: https://jzeferino.wordpress.com/2017/12/19/apple-spoofed-email-with-review-policy/
It’s not true of all cross platform iOS apps, but a good majority tend to be low effort, and it shows. They don’t feel right and often don’t look right. There are native stinkers too, but typically if someone bothers to write a truly native app they’re more likely to go the extra mile to make it decent. Native apps also don’t suffer from lowest common denominator syndrome.
yeah, I also have a thinking like that, but it is just a short-term project (around 2 months) so it would be quite waste, tbh, buying a new one will be my last option. My company provides Mac Mini to use, but I cannot bring it abroads so I want to upgrade and use the old one I have instead of paying too much for a machine which I only use for 2 months... 
thanks for your advice, I will note the solution down. Buying one will be my last option in case I cannot ask my company for it.
I'm working in UI Automation Testing, the project is not so big, my mission is not really coding, just review and verify test log. It is not a really big project tbh. My company does give me a Mac Mini to use, but going abroad for next 2 months will require a Macbook to traver along me. Once I came back after the business trip, probadly I will not use MacOS anymore but forcus on the other project, so buying a new one will be a waste for me, big waste of money. 
Yeah thats pretty logical.. but maybe you could check out a second hand or something and when you’re done sell it again. There’s always a market for secondhand macs! 
I'd make sure everything actually runs beforehand. It's an old laptop, you don't want to be caught surprised while traveling. Perhaps it's a food idea to set up the Mac Mini with TeamViewer so you can work remotely if the laptop somehow later doesn't work. (Yeah, macOS has remote login built-in but TeamViewer is better IMHO). Isn't there anyway you can get a more recent laptop from the IT dept.?
Have you used Xamarin? It really only struggles on low-end Android devices.
I can't think of a single example of a cross-platform app that adopts iOS user guidelines rather than Android. It's always Android and if you do not like that style - hamburger menu, floating action buttons with little context - you develop a negative bias when you hear the term cross-platform mobile app. Also, many have performance issues when they're simple apps that shouldn't have them.
That sounds awesome! I've been really starting to love Vapor 
Daytrading crypto.
Here's the deal, you have different levels of devs. Some of us are indie, some have jobs, contractors, some are just looking for a way to get their "million dollar app" out there. We have a number of ways to make apps other than Apple's path, from Xamarin, PhoneGap, Unity, etc... Even inside of Apple's path, we have ObjC and Swift. Tons of options and this makes it harder for us. If someone goes indie with Xamarin they might be giving up the option to get a good job if their indie plan fails. If a company sticks with ObjC, they can code lock their devs. If we were all on the same page or few pages, things would be so much better. Just like programming in general, look at all the options. Once you pick one, you start to become "skill locked". It's doubtful that Apple will ever fully embrace Xamarin or PhoneGap or RN, this splits the job market. Might be hard to understand, but it's kinda like Android having 10,000 different screen sizes, and so many different versions of the OS. Apple tries to keep it simple with 6 or so main sizes, most people being on the last 2 or 3 OS versions. 
It just means that it takes some parameter that it might be able to construct the type with, but might not, so it returns an optional. For instance, *Float* has an init that takes a *String*, so you can pass in the string "6.78" and get the number 6.78. You can't construct a Float if you pass in the String "bananas" though, so it returns an optional Float. Float("6.78") = 6.78 Float("bananas") = nil
Xamarin hurts the job market. When everyone does everything in C# it makes native iOS development salaries stagger. I used Xamarin in college when I was helping a Capstone team with their final project. I would much rather these items be taken off the market so native developers can be more in demand. 
Insecurity over their jobs as iOS developers?
You are ridiculous if you believe Apple's decision involves thinking about developers, after all, they created a world where half the world essentially works for them for no pay under the promise of 'potential' payout. They are only interested in control. Plain and simple.
Yes and using xamarin apps on my iPhone X is TERRIBLE. They are SO SLOW! Id rather use a well optimized mobile website.
Sadly, you have a good point. Apple's concern for devs has been limited to those on the top 200 list :D However, at some point, Apple is going to have to clean up the mess they call the App Store. Apple screwed up the App Store, maybe beyond repair, and they have to fix it. They might be best to shut it all down and start over.
A few points 1. Xamarin doesnt hurt the job market, xamarin hurts peoples views on apps because the apps look/feel terrible. 2. It reinforces the need for native, because its god awful for users to use 3. There is a huge demand for native devs, check glassdoor/preferred job listings.
That line of reasoning doesn't make sense to me. Usually when a skill becomes more niche the salaries improve, no? Because the demand is higher than the supply? Or are you saying companies prefer Xamarin and so aren't interested in IOS developers because of it? If that's the case don't you think that means the iOS development ecosystem lacks something these companies may want? Granted I'm not an iOS (or mobile) developer so I know very little about the ecosystem. These are genuine questions.
IDK how upgradable that machine is, but I would see how much ram it can handle. Most any machine can be upgraded to an SSD (assuming it doesn't have one already) but not all have the extra slots for more ram. The bottom line on any dev machine is going to be the SSD and RAM. Other things that are nice are the dual display and fast connection to a backup NAS type box.
Companies outside of the Valley prefer Xamarin because they already have devs that know C# and aren't willing to hire someone just to do native development. Xamarin jobs pay way less than native iOS developers (at least from what I have seen) and it seems that native jobs are starting to take the hit from it (unless you are senior with 4+ years of experience). I think the problem is more that upper management is in the mindset that they can get the app made, not the quality, until they get the finished product and then they settle. I have some friends that work at startups that are running Xamarin and the apps look "good enough" for their bosses.
I agree with all of your points, but I have seen more and more jobs going to Xamarin over the last couple of years. Even some startups are starting to push for Xamarin apps. I think the problem is that the management for these companies think the app is "good enough" or they haven't updated/used newer apps since iOS 6. Most of the native dev job postings are for seniors because a lot of companies are going to non-native development, or if you don't want to live in CA. Just look at the big companies that aren't using native now: http://blog.venturepact.com/8-high-performance-apps-you-never-knew-were-hybrid/ If the big guys are pushing for it then it won't be long until more and more companies want to follow the trend.
Before saying that, you first should know the difference between Xamarin.IOS vs Xamarin.forms. In xamarin,iOS you design the UI exactly as for a swift app. And you need to know the framework. Same for xamarin.andeoid. And it compiles to 100% native code. So, no, not all xamarin apps look bad. That’s only Xamarin.Forms and I have seen apps done with forms that look perfectly. Also you can insert native code inside xamarin for the cases where the look / UX didn’t match. I guess all the people here hating don’t even know what they are talking about. You can design ugly clunky apps with Xcode and swift as easily...
Ah I see where there coming from, but for me any completion for Xcode is great.
Funny, this sounds like the same argument that $15/hour McDonalds workers are making. Nobody cares that it "hurts the job market" when ultimately it increases profitability and throughput.
That's why I dislike all in ones. The screen might be fine but you have to get a new one when you want to get a new mobo + cpu.
Yeah I can see that my 4 year degree and the years of expertise I have built for being an iOS developer is equal to an entry level job that requires very little if any skill. If Apple pulled what has always pulled when it comes to their items this wouldn't be an issue in the first place. Apple has always pushed for everything to be theirs and not share the space with anything/anyone else. Their OS is only on their Machines (unless you work really hard at making a hackintosh with less driver/functionality than buying their product). Why should the development pattern be any different? Why should someone who spends years becoming a professional native developer have to compete against someone who doesn't have the same passion for iOS (granted you can have the same passion but it is less likely with someone doing non-native work at least from the non-native developers I have met anyway). Sure companies can be profitable and have good throughput in hiring a professional to do their app the correct and native way. I am a native snob and I accept my downvotes for posting how much I despise having to share market space with someone not willing to learn Obj-C or Swift to do the same job that I do.
Don’t know why you’re downvoted. I had discussed this with my dad when the tweet came out and he told me it would be good because of job security. Wouldn’t be surprised if a fair few people silently agree with that. 
My SSD died a couple years back. It can happen, and when it happens it's completely toast. You can't recover from it, as far as I'm aware.
Seems overkill. I have an iMac (mid 2013?) at home with 24Gigs of RAM and it still hums when developing, using Lightroom/CaptureOne, etc. Is the iMac Pro going to give you _that_ big of a boost for Xcode? I dunno, I doubt it.... but if you are developing a full stack and you have containers running all over the place sucking up resources then it might be worth it. But if you're just developing an iOS app? I don't think this is necessary.
Play my favourite games a second and third time.
Even though you got down voted, I can see how a growth in Xamarin could cause a decrease in demand for a native Swift app. This can have an impact if it's happening in your area. I disagree with your idea to get rid of them though because it seems you mostly believe that out of your own self-interest (not that you would be wrong for doing so).
Even 4GB of RAM won't cut it, and depending on your needs, 8GB will be sluggish if not down right frustrating. You'll wanna check out maybe spacing out a bigger machine with maxed ram.
I didn‘t realy use Swift yet. But I like the plain Syntax and would like to use it for Web-Apps. Surely, I don‘t expect system-calls or UX. Some system-functions will be needed. Theyer code shold be added, only if used. As anything (realy?) is open source, we should not need Apple to modify the build and get wasm binary generated.
It's the most powerful Mac ever made by a large margin. If your professional development work is held back by hardware, even on current Macs, then you should give it a try. You have an iMac that is nearly 10 years old (no longer supported), and an ultraportable which is almost 5 years old (among the slowest which is still supported), which suggests top performance isn't your priority, and financial constraints are also a concern. If you couldn't bring yourself to buy an iMac last month, why do you want to pay 2-4x more this month for an even faster one?
&gt; It’s hard to say why someone would go to the effort of spoofing this email No, it isn't. Technology companies have been using [this strategy](https://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt) for decades. You have a competitor who is using one of these technologies, and you [lay down cover fire](https://www.joelonsoftware.com/2002/01/06/fire-and-motion/), and they have to spend energy dealing with that, instead of making forward progress. &gt; Whilst we tend not to cover spoof content in general, this email was getting sufficient traction in the community that we felt it was worth debunking. No, it really wasn't.
Yeah I expected downvotes. People are going to find ways to rationalize it to themselves. My opinion is that cross platform development, while may not be achieved well yet, is a worthy enough goal that I wouldn’t want Apple to shut the door on it. Job security is great, but I wouldn’t want it to stand in the way of progress. I’ll move platforms when I need to. 
I bought a Mac Pro in November 2016. It worked perfectly until I bought my dual 4k monitors, then I started to get random crashes and Wifi problems. However, if I could swap with a iMac Pro I wouldn't. I would just get a Macbook Pro instead and use a single ultra-wide monitor. I've owned two iMacs before my Mac Pro and they both worked fine but they're hard to transport and you have to strain your neck or buy a stand just to see everything--but more importantly, XCode sucked on 8GB of RAM. But at least XCode works flawlessly on my Mac Pro which has 16GB of RAM.
True for some cross-plattform apps. If you use Xamarin.iOS and Xamarin.Android (not Forms) you have to write all the interface separately for both platforms, though. That makes it actually easier to implement native UI elements rather than implementing some sort of floating action button etc. I bet most users wouldn't notice the difference to a "real native" app. I agree when talking about stuff like Ionic though, which is basically a webview and therefore easily supports floating action buttons etc. on iOS as well. Since you write the UI for both platforms at the same time you tend to stick with one approach.
Wait until you see Vapor 3! It's a huge rewrite from 2, and dramatically simplifies almost everything.
[removed]
Hi! Are you expecting to target MacOS or iOS? Without knowing more, here is my 2 cents. The Swift runtime is not realtime, so it's rather difficult to safely intercept realtime IOKit data (IOKit is a C++ framework that handles device communication). I remember as of last year the CoreAudio team at Apple did all their setup code in Swift, but managed the data stream in C or C++. As far as your stream frequency, do you want your device to sample at 2.8MHz at 1 bit? Do you want a random USB audio device to sample 1bit DSD, or do you have a device that samples at 1bit DSD and want to know if you can handle the stream with Swift? I'm not sure how to answer the first question since I'm not really a device guy, but if you are on MacOS then you can quite easily write a user space USB driver, or with more effort, a kernel space IOKit driver that has the access you need to do the second. I do believe that iOS is a fair bit more strict on this point though. Short Answer: there are API's that can give you low level access to hardware on MacOS, but you will probably access them in C++. You can then move the data to Swift and do whatever you want with it there, but only if you do not need realtime performance or craft your code extremely carefully to not ever trigger blocking code in the Swift runtime.
You seem to feel that your degree and expertise entitle you to something. This is the world, this is the job market. Adapt or die. Sure there are some things that miraculously manage to stay around (like really niche COBOL programmers, but very few jobs remain static. &gt; I despise having to share market space with someone not willing to learn Obj-C or Swift to do the same job that I do. I'm sure COBOL and Fortran guys said the same thing about all of these young guys using PHP and Ruby.
Peoples hard work and dedication normally allow for them to feel some entitlement in their professions. Adapting or die could also be applied to people refusing to work in Swift and Obj-c so that point seems a bit moot. As for COBOL/Fortran in comparison to this situation I think you are mistaken. C#/Web apps would fall more into the category of the COBOL/Fortan team than learning Swift / native iOS development imo. These apps are made with old languages on new compilers to that work, so I really feel you just made the point for me in this situation.
This is where you are wrong. If I can afford something doesn’t mean I will buy it f I can find the same thing for less. It’s not elitism but this way if you buy or make an app you know it will be a decent product most of the time and eliminating the factor that I bought a template app what has a security flaw In a specific scenario or extra features what I don’t need but I’m paying for it. 
I want something that will last 10 years. Perhaps it’s a psychological problem with me, but I’m not into ‘designed obsolescence’. It’s the reason I drive a 25 year old Volvo and read r/BuyItForLife
I agree with this. I didn't like using Xamarin. Like you have basically said, cross platform development has a ways to go. I still don't think it should be hindered by Apple. If a developer can start out on a mac using Xcode to develop then more power to them. I love using the native IDE in stead of Xamarin or I guess Visual Studios now that Microsoft is working it in. However, I don't think it's fair to close off someone who maybe does their coding on a windows or linux system. Maybe they can't afford another device just for iOS development.
Hi, I find your reply really logical and insightful, thank you kindly for writing it. &gt;Are you expecting to target MacOS or iOS? I intend for iOS unless platform restrictions prevent it. &gt;The Swift runtime is not realtime Does the Swift language design prevent realtime applications and could a later version enable them? &gt;Do you want your device to sample at 2.8MHz at 1bit? I would want it if current iOS devices allowed it, usually native sampling at 2.8MHz at 1bit needs additional dedicated hardware support. &gt;Do you have a device that samples at 1bit DSD and want to know if you can handle the stream with Swift? I wanted to know whether a Swift app could create DSF files from a music production audio interface 1bit class compliant USB audio stream, eg. [RME ADI-2 Pro](http://www.rme-audio.de/en/products/adi_2-pro.php?form=uciast&amp;pname=shenma%27a=0%27a=0). All current iOS DAW apps can only capture PCM input. Short summary: I make music using only iOS gear. No current iOS app can process 1bit audio. I thought Swift might enable me to create a progressive streamlined iOS app to capture 1bit audio output from a USB audio interface and experiment with it.
I'm more worried about the indie or hobbiest developers. If you are employed as an iOS dev and have access to a mac then you are good to go. But, if maybe you are learning in high school or college, or if you already develop using C# or .NET for work and you are comfortable with it I don't see Xamarin or any of the other cross platform options as a problem.
Neither of your two current Macs (all-in-one; ultraportable) is what I would describe as something that would last 10 years, for dev work. If you're willing to use something well past when it can get software updates, then any machine will last that long.
Yes, adapt and die could be applied to Shift and Obj-c but that doesn't make it a moot point. That's actually exactly what has happened. Instead of busting out desktop apps in a work out language. People make shiny mobile apps. People adapted to mobile programming languages like Swift and Obj-c. People will continue to adaprt to what's next.
:(
I can see the down voters are out again. People want all these different dev options flooding market. I don't know what the job market is for Xamarin or PhoneGap but I really haven't seen many jobs asking for them. One zip in SF Bay Area has 9 jobs for Xamarin vs 73 swift and 1966 for 'ios dev'. I'm not sure I'd want to invest heavy into Xamarin unless you want to stay indie.
Check out [URLSessions](https://www.raywenderlich.com/158106/urlsession-tutorial-getting-started) and [SwiftSoup](https://github.com/scinfu/SwiftSoup) if you want to parse HTML. 
I understand your frustration, but learning to code the normal way is going to be something you have to do. Don't worry though, everyone struggles with this when they're first learning. Perhaps head over to /r/learnprogramming/ for some more beginner oriented content and resources, their sidebar is good. I wish you luck on your programming journey, don't get discouraged!
Yeah, I can see your point. Thanks for the discussion. :)
&gt;and etc. 
Out of warranty you will still be able to pay for repairs and service from apple and authorised service providers.
thank you for your response. It's very hard to learn. I feel unable to scaffold off anything else I've learned, so basically feel like a stupid fool. Grrr.
Matrix is already a very well defined type across programming languages, hence why you’re receiving a lot of downvotes here. I suggest you do a little research into what other libraries are doing to get a feel for what users expect. Good effort though. 
Like I said, it is more a practice at documentation. I can see your point though.
Of course. I was responding to the person saying they’ve never seen an SSD die. I just wanted to point out that they can die. 
Xcode doesn’t run smoothly for anyone. Anyone. You could give Xcode an iMac Pro, and it still won’t run smoothly. It’s never run smoothly. Ever. Ever, ever? Ever, ever.
I wasn’t trying to take anything away from your post. I’m sorry if it came off that way. I just meant that some teens are just trying to learn programming and those options may suit them better when they are learning object oriented programming by letting them code on a cheap laptop and have something to show off to their friends since a lot of people use iOS. The career part you mention makes sense. Developers are constantly having to shift to other languages in order to move around in the market and stay competitive. It’s a tough career.
Seriously, though. When I’m on the road, I run Xcode on a 2012 MacBook Air, and it’s fine. Anyone telling you otherwise is full of shit, or ignorant. Stop making excuses. Run Xcode. And learn.
I have had to clean my project, delete the derived data, close and reopen Xcode to fix that error before. I get that error and one that says my view controller doesn’t exist when I try to connect and outlet or action all the time. I don’t know why it’s been acting up so much.
yea, what i've been doing is taking an online course (a small one, definitely not college level or anything). and as i am learning about things, i'm incorporating them into this basic basic game that i'm creating. just to help me practice the concepts and have to integrate them in a new way outside the course. so once i learned about buttons, or labels, or tableviews, i just tried to throw those into my showcase app. So basic, but cool to see the integration of ideas.
Meh. I’ll never use the GPU to it’s full extent. He CPU, RAM and SSD will be taxed but it still isn’t value for the cost. 
Spammy son of a bitch 
I know there were a few courses on Udemy for free that did those exact games in that book they just changed the characters and title but the code was exactly the same. The instructor on udemy didn’t explain anything. And honestly the book in my opinion made things more complicated for me than they needed to be. But that’s just me and how I understand and write code so could probably benefit you. Wish I could help more. 
I manage a dev team. All my iOS devs do Obj-C, Swift, Xamarin, plus whatever they tinker with for personal projects like Go or JavaScript. I've got a web team too, and we've done some Cordova stuff, but not much because of usability issues. A good dev knows the platform and can use a plethora of tools on it. "Skill locked" is not a thing for a good dev. As for Apple, they want quality apps that enhance the user experience and show off what the phone can do. Produce a good binary with Xamarin or Kotlin and they'll happily put it in the store, maybe even feature it. It'll make them money.
You will need a Mac to build the app. While you can build an app using one of the cross-platform technologies, you can't do everything that you can in native. At least not as well. If you want slick UI, seamless animation, and great gestures you want native.
I don't want Xamarin banned, but I know the devs that work for me, sometimes in Xamarin, would rather write native. In Xamarin easy things are easy but sometimes hard things are impossible.
That makes sense. So you have to use a Mac as a build server?
Yeah, there are some services on the internet that will build for you, but it's really not practical to develop for iOS without a machine running MacOS.
In iOS 11 I believe sctollviewd now have a refresh control property. 
I mainly do the optional binding to be on the safe side. With that binding you can easily do other checks in the if, for example: if let constant = optional, constant &gt; 100 { ... } It's easier to read and understand. And it's good practice to never force unwrap a variable. (Except for maybe UI bindings with storyboard, where you have to it)
I haven’t read that one, I read the 3d one. They are not exactly on gaming in general, they are more about learning SpriteKit (2d) and SceneKit (3d), the frameworks powering their respective environments. I do agree that the price is a bit high, but it is also true that these books are for a restricted niche. Try and learn SpriteKit on your own and if in some time you’ll still need help to piece the puzzle together, then buy the book. 
The main benefit of If let const = opt { let example = const * 5 } Is that for the scope of the “if” you’ll have available an unwrapped value, so in that scope that optional value is not optional. In the other way you’ll have to force unwrap all the time and, although the final result is the same, the all point of optionals is to have the compiler reminding us or even stopping us from using a property that might not contain a value. Force unwrap escape this logic, so it should always be a rare exception. The norm should be trying to take out the value from an optional before using it and then use the non-optional value.
I wasn't pointing at you, it's the people that blindly down vote any view that's not their own. I've been in the business for decades and asking a person to have skills in a bunch of different areas is not productive. I was senior programmer analyst at Visa and we had VB, Access, SQL, a custom accounting system, remote control software and even maintained a Novell network. Hiring sucked because you had no chance of finding someone with all those skills. It's the age old "master of none" problem, you end up with a group of people for each area vs specialist. Long ago, you just had a "computer guy" that would be expected to unjam the printer, figure out what drivers to use, setup the new computer and program the custom internal apps. Now jobs ask for full stack and people want you to know all the APIs and then toss in a few languages that do the SAME THING. That's really the point. If someone were advanced in Swift or ObjC, why would they need Xamarin? Why not spend that time learning full stack? Why take the time to learn different skills that do the same thing vs learning a skill in depth and learning something that adds to your skill base? If someone applied for a job and listed 60 different languages, do you really think they would be advanced in all of them? Would someone go to a dentist that had 60 different jobs and 60 different degrees or would you want someone that is focused on certain things?
There was a company that moved from ObjC to Xamarin about a year ago. They ran ads over and over again, then just this year, they started running ads for Swift programmers. They hired 10 Swift programmers in one round. Finding someone to jump onto a little known, non-native dev platform is dangerous. I've been there, back in the day it was Xbase/FoxPro and Microsoft told us it was the business development platform of the future. Where is it now? How many jobs are in FoxPro now? This stuff has been going on for all of time. Even with Xamarin being C#, there's all kinds of work to know how to make the apps.
Remember, Apple and others were busted rigging the job market and the Gov went after them for illegal activities. https://www.forbes.com/sites/billsinger/2012/11/19/after-apple-google-adobe-pixar-google-and-intuit-antitrust-employment-charges-hit-ebay/#1e38705925bf 
I agree with ilgabbo, it’s “the swift way” don’t fight it. You get used to it eventually and it’s sort of nice to know you’re guaranteed safe within the if let / guard scope.
shoot, did not even know you can use multiple checks. thanks!
got it, thanks!
Learn Unity. You’ll be able to export your game for android devices, too. That’s what I ended up doing and it’s best from business perspective. Also, Udemy has 10$ courses so 55$ one is kind of expensive. 
I started coding for the first time in my life yesterday! I found a great tutorial (CodeWithChris) and finished the lessons to building a simple app. Now I want to learn more so that I one day can build a couple of app ideas that I have.
I understand this completely. I work at BCBS and we have specialists in a bunch of different areas so when they are off on vacation or unavailable for different reasons it’s always a scramble to get production back on track if their specific jobs abend. It becomes even a bigger problem when you get to the system programming level because most people today specialize in software development instead. I know that doesn’t necessarily fall under your argument because you will always need both software and systems people but if you could weed out the different languages and tools in each of those departments it would be a lot easier to work on different projects and have less compartmentalization.
alright. I will continue developing on my Macbook mid-2010.
This thread was really humbling- reminded me of the fact that I started developing on a 2010 device as well- An incredibly slow C2D Mac Mini with 2gb of ram and and a grinder of a 200gb hard drive. What I’ve found is that there is a common misconception when starting, and that is the assumption that you need a powerful machine for a basic beginners project. Ideally, yes, you’d want more power, however XCode generally needs more power as the project itself grows larger (and especially if you use storyboards). Generally, I would think that as your projects become more demanding, you would begin to get better hardware, hopefully at the same rate.
So init? Means it returns a potential nil. This syntax is because init doesn't have -&gt; So i can just do: func foo?() {}
I'd use that library you found. It doesn't look like the API would change much if it were written in Swift, so is there any reason other reason you care about the language it's written in?
There's a balance that most software devs don't see because they don't have to care, however, the people running a business do or should care. It's about getting something for your effort that the end user can see as value. Example, Amazon focuses on getting packages out quickly and accurately. The customer sees value in this. If you had a software product, say a poker game in iOS and Android and you converted your iOS from ObjC to Swift, would the customer see value in that? No. If you trained all your programmers in C#, C++, ObjC, Swift, would the customer know or care? No. This is more about the business of software development, it's about providing a software product to the customer. I've worked for companies that lost their business because of poor choices in the tools they use. Most programmers don't see this side of the business and that's why most programmers don't make good managers. Management is a profession not a promotion, but few see it that way and most don't like to hear it.
So this is Apple going the route Microsoft did with UWP?
That sounds great! Is there a release date for it yet? I saw the first beta just came out for it 
No release date for Vapor 3 yet – although it's shaping up really well, they are still working hard to improve.
Very cool idea! I'll try my best to be helpful: &gt; Does the Swift language design prevent realtime applications or could a later version add it? Technically no, you should be able to use Swift in some realtime manner, but the amount of prohibited operations and how exactly to do that is not yet well defined the last time I looked (maybe a year ago). If the CoreAudio team uses C/C++ in their examples then I'll process audio with C/C++ too. &gt; I looked at music production audio interfaces eg. RME ADI-2 Pro and wanted an app that can save the class compliant USB 1bit audio output in a DSF file. Ahhh, very nice! There are a bunch of settings like `kAudioDevicePropertyStreamConfiguration` and `AudioStreamBasicDescription` (https://developer.apple.com/documentation/coreaudio/audiostreambasicdescription), in CoreAudio on iOS. It looks like a device can support pretty much any kind of stream, PCM, non-PCM, variable or non-variable bit rate. If that device really does support 1bit DSD, then you should be able to use CoreAudio to get an format description with `mSampleDepth==1` or something like that, and away you go. The only real way to know however is to dig into Apple's horribly sparse documentation, do some tutorials and try it out. I'd say that if you are an experienced developer with some perseverance and google-skills you could probably have a proof of concept going relatively quickly. If you go this route, then Xcode with Swift is an appropriate choice of tools, I don't think you'd need to write any C code, at least not at first. Good luck! 
I learned in my own time, and I gave up three times before it really stuck for me. (I’ve been developing iOS apps as a living for about 4 years now) The main thing I found is that you need a learning resource to use as a ‘roadmap’. Ray Wenderlich is probably a good one, as it’ll cover everything you need to know. So in theory, if you do the whole course from start to finish, you should know enough to work on a real project. The important bit though, is not to stick just to that resource. If you’re stuck on optionals, for instance, find other articles that explain it, and you might find one that explains it in a way that makes it click for you. If you don’t understand, then just keep working to get that concept before you move on. I promise you that you will one day look back and wonder how you found it so difficult!
Yeah, so init?() is kind of like init() -&gt; Self? Whereas a normal init is like init() -&gt; Self That syntax is only valid for inits though, for a normal function you would just specify an optional as the return value
It appears to be a bug, but maybe not the bug you’re thinking. It shouldn’t work in either instance. `message` is a static member of `Foo`, but the functions `something` and `hello` are both instance members of `Bar`. As such, you should only be able to reference `messages` as `Foo.messages`.
Makes sense thank you
Anonymous sources, cited by Bloomberg? That's my favorite place to get my developer news!
The latter isn't thread-safe, for one thing. Another thread could wipe out `optional` between the test and the force.
https://www.twitch.tv/p/legal/developer-agreement/ Send them this?
It seems that you tried to add an outlet into UIViewController.h which is provided by UIKit and shall be kept intact. What you missed is to specify a subclass type for your view controller in storyboard inspector.
No you misinterpreted CONTENT. By CONTENT Apple means something like music or story that might lead to intellectual property lawsuits not some third party APIs.
This is also /r/Swift and not just /r/iOSProgramming It's definitely possible to learn Swift just by booting up Linux and trying stuff out after installation. Granted it's not exactly the same as using macOS Swift, but it's not terribly difficult to boot up and get started on the overall syntax. 
Ultimately, I think they'd like to replace macOS with iOS. Maybe this is a step in that direction.
I know I’m a bit late, just wanna put my $0.02 out there. If you want to develop games, don’t use Swift. It’s an amazing language, sure. SpriteKit is pretty cool, yep. Metal is nutty, yeah. However, you’re limited to Apple platforms, and for games that’s a pretty major limitation IMO. A large number of libraries, frameworks, and game engines exist that do not have this limitation, and also have a bunch of useful prefabs for building games. Check out stuff like Unity, UE4, Godot, HaxeFlixel, LWJGL, Love2D, etc. 
I’m just hoping that this means that some of the iOS specific types (UIImage etc) will be available for use in creating Mac apps. That would be a huge win for developers, especially those who have built iOS apps but not macOS apps. 
thank you for the feedback. Nice to know it's do-able!
Not sure if that is a good idea.
The private UXKit framework used by the Mac Photos app is essentially UIKit for Mac so this rumor is entirely plausible.
Your url is missing a scheme, should probably start with `http://` or `https://`.
Hmmm. Cocoa replacement? I imagine this has been in the pipeline for a long time: GCC —&gt; Obj-c —&gt; Cocoa LLVM —&gt; Swift —&gt; Marzipan. Cocoa (or at least UIKit, and especially AppKit) have been around a long time. I often feel as if Swift is fighting with Cocoa and its obj-c heritage. This is an opportunity to replace UIKit/AppKit and take a overall look at how modern apps can be architected in a much more ‘swifty’ way. Looking forward to seeing how Apple manage it.
Oh god I hope not.. I would NOT want iOS-esque UI/UX on macOS. Hellllll no.
Why not? I don't see how it could be bad, or am I missing something?
Woah, since when did an old messenger app become a third party mobile development framework?
Look at what microsoft did with UWP.
I am not much familiar with that case (except that it somewhat (?) failed) but I will do some googling. Thanks!
Despite the code for that library not being in Swift, you can still use it. Objective C is still used (and likely will be supported for quite a while), and Xcode will let you access objective c methods and classes within Swift. 
The Foo.Bar extension doesn't have access to the implementation of Foo. It wouldn't make any sense for a class to have access to the scope where it is defined in its own extensions.
What if there was a extension to Foo with Bar2 class. Should Bar2 be accessible from Bar, or I must say Foo.Bar2 ?
This should not surprise anyone. Most iOS/macOS devs I know have been talking about it for years. Seems the obvious direction Apple has been heading for a long time.
You're conflating two different things. UXKit is a collection of categories for AppKit to make it act more like UIKit for developers. That's neat, but: 1. In the past 3 years, since the 10.10/8.0 days when it was used, it's become increasingly less necessary, as AppKit becomes more UIKit-like (and much better), and 2. Every third-party iOS/Mac app pair already has their own such layer, anyway (and there are open-source implementations of UXKit floating around, if you want that, and almost nobody does) There are still inconsistencies between AppKit/UIKit that exist purely because of historical accident, but when Apple wants to solve that problem, the Apple way isn't to add a compatibility layer. It's to fix AppKit -- and that's what they've been doing, for the past 3+ years. Today's rumor isn't about UXKit, either by name or by description. It's about *universal apps*. That's certainly possible, and it would solve some real developer issues (like: do I charge for the Mac app, the iOS app, or both?), but it doesn't require UXKit. It's purely a bundling and distribution change. According to the descriptions in the rumor, it sounds just like [how tvOS works today](https://developer.apple.com/library/content/documentation/General/Conceptual/AppleTV_PG/): &gt; tvOS is derived from iOS but is a distinct OS, including some frameworks that are supported only on tvOS. &gt; ... &gt; Although iOS and tvOS apps are distinct entities (meaning there isn’t a single binary that runs on both platforms), you can create a universal purchase that bundles these apps. The user purchases an app once, and gets the iOS version for their iOS devices and a tvOS version for Apple TV. If we had universal apps for iOS+Mac, you'd buy it once, and get a bundle with both an iOS-specific app and a Mac-specific app (and maybe tvOS and watchOS). No UXKit involved.
A simple way is to set the cursor using `NSCursor`'s `set()` method. A better way would be to use `NSView`'s `addCursorRect(_:cursor:)` method.
Where would I get the first parameter to `addCursorRect(_:cursor:)`?
It handles 128GB of RAM, but, and this is a big catch, you can't install it yourself. So you have to take it to an Apple store and pay Apple RAM prices.
Rookie mistake. I fixed it, however now it's not receiving the API key properly for some reason. func getWeather(){ let session = URLSession(configuration: .default) var datatask : URLSessionDataTask? let url = "http://api.openweathermap.org/data/2.5/weather" let apiKey = "7465be2382c82a728bf78ed04fb3e1d0" let myURL = URL(string: url) var request = URLRequest(url: myURL!) request.allHTTPHeaderFields = ["q":"boise", "appid": apiKey] let task = session.dataTask(with: request, completionHandler: {data, response, error in if error == nil { let receivedData = try? JSONSerialization.jsonObject(with: data!, options: []) as? [String: Any] print(receivedData) } }) task.resume() }
I read that book and although it has so much valuable information the way they introduce the topics I wasn’t a big fan. That’s just my opinion 
So do you know of better alternatives?
I built a Hackintosh some 9 years ago and bought some nice parts for it. I saved a TON over the price of a Mac Pro. I just read a blog about a guy that took my board, upgraded to a xeon processor for about $100, over clocked it and bumped up the ram to some 16 or 24G and a new video card. He did some tests on it and it's a real screamer for pretty cheap. I think it's probably faster than most Macs sold today. It's sad the Apple has to do this crap with the ram. I can upgrade mine for a fraction of the price. Not to mention, I can add more video cards and monitors.
No. Bar and Bar2 would exist in the same scope. You’d have to use the parent a scope, Foo, to access it. I would strongly suggest opening a playground and testing this all out.
It's quite annoying to carry Foo. Throughout the same scope :/ So the question I now have, should I even bother with extensions to split a namespace struct into logic units?
You shouldn’t use a struct as a namespace. It’s a hack. Hack’s are dirty. And you’re better than that. Namespaces make us as programmers feel better but offer little (if any) functionality. “Do not try and bend the spoon. That’s impossible. Instead, only try to realise the truth. There is no spoon.”
I've been doing long named flat classes for years, thought I'd give it a try with a small project
I hope/think it's more about bringing UIKit and AppKit closer together.
Matrix quotes aside... Swift modules offer namespaces and they can be useful. However, right now, swift modules require separate projects / targets, which is grade-a, 100%, 24-carat bullshit. So no one bothers. Keep fighting the good fight / I wish you luck in the wars to come / feliz navidad.
You’re sending the query and api key as http headers, but they look like url query parameters. If it turns out I’m right, I’d appreciate if your people threw me some kind of parade.
You're not forming your request correctly. Those are query parameters, not HTTP header fields. The correct way to form your request would be. let query = "boise" let apiKey = "7465be2382c82a728bf78ed04fb3e1d0" let url =URL(string: http://api.openweathermap.org/data/2.5/weather/?q=\(query)&amp;appid=\(apiKey)) I didn't test, but try using that and removing the allHTTPHeaderFields array. 
This guy fucks.
NSImage isn’t so bad
They should bring back Yellow Box for UWP.
I didn’t mean to imply it was bad, just that I don’t know the Mac frameworks very well, and I hesitate to spend too much time learning and keeping up with them since I don’t currently have any work to do on macOS apps. I would be much more willing to modify some of my existing side projects to work/fit on Mac if I knew that they didn’t require too large of a commitment. I’m sure that a lot of folks would also be willing to do a little extra for Mac compatibility as well. This could really make the platform much more vital if implementation is good (which is likely with Apple)
I created a cocoapod from an ipad app to share code between mac and iOS and maybe 80% was shared. It was really surprising how easy it was. mac OS X has changed a lot and gotten closer. In the Openestep days all the screen drawing was postscript which was clever and useful and things didn’t gel until layer backing in 10.6 thereabouts. Also Storyboards on Mac don’t make any sense to me. I’d gladly be a Mac programmer if I could do it all the time. Panic hire me please!!!
It's a form of indirection. You may want to refer to the variable, not the value inside it. For example an API like "notify me when `view.frame` changes". In that case you'd need to pass a `keyPath` to your notification API.
One reason you might be confused is that the initial (Swift 4) implementation of KeyPaths is pretty minimal. Once there’s more runtime metadata available it becomes plausible to introduce stuff like “serialize/deserialize a keypath from a file”, which is useful for making tools like interface builder. If and when something like the Property Behaviors proposal (https://github.com/apple/swift-evolution/blob/master/proposals/0030-property-behavior-decls.md) arrives, then exposing additional behavior knobs on properties by putting them on the KeyPath for that property makes a lot of sense.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [apple/swift-evolution/.../**0030-property-behavior-decls.md** (master → 60a8980)](https://github.com/apple/swift-evolution/blob/60a8980a66a0a1341871ec323797c5547d0e0925/proposals/0030-property-behavior-decls.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drka2w2.)^.
[removed]
You can write a generic mapper of a serialization protocol using key paths rather than having to hard code everything a priori. You could also write active record implementation using a database schema as the source of record for what variables should look like. CoreData works almost entirely in KVC which relies on keypath. FWIW, I think Swift's "typed" keypaths are shit.
Well... kinda. UWP are mostly useful to make apps available on Windows 10 computers and Xbox One, there isn't many people with Windows 10 tablets or HoloLens. If Apple tries this it will do definitely better.
I don’t disagree, but since then reason to use Swift is to develop for iOS and Mac, and if one has already experience in another language the syntax can be picked up in half an hour, and past that Xcode would be necessary
Cross-platform apps is really great, I hope apple do it right 
Just finished working on my new free arcade app about a week ago - [Bouncy Ball](https://itunes.apple.com/au/app/bouncy-ball/id1316498344?mt=8) Please check it out, leave feedback and ask me anything about it.
Keypaths are a way of saying "use this property to read your value" rather than "read this property's current value." The best example I can give is from Vapor 3, which is currently in beta. Vapor has a database layer called Fluent that can save and load Swift classes using a database. Fluent needs to know which of your class's properties identify it uniquely in the database, and you specify it something like this: static var idKey { return \.id } That returns a keypath, not a value. It means "when you want to know my unique identifier, look in my `id` property." In comparison, a regular property – e.g. `myCategory.id` – means "read the current value of `id`." To give you a real-world analogy, think of something like DNS. When you want to visit a website you enter reddit.com, and that domain name gets converted into an IP address like 151.101.193.140 that your web browser can then connect to. While it's possible to enter that IP address by hand, it means when reddit.com changes address you won't get updated. Using the domain name – reddit.com – means your request will get looked up every time*, and converted to the IP address. This is similar to keypaths: you're not asking for the specific value that is stored right now, you're asking for where to look for a value, so that when the value changes you can just read whatever it became. (* Yes, pedants, I know it will be cached.)
I wrote a long, free, project-based tutorial series for Swift and iOS. It's called Hacking with Swift, and you can [read it here](https://www.hackingwithswift.com/read). Don't be afraid to ask questions – I come by here a lot!
Thanks! I’ll be sure to check it out soon! Is it okay to send direct messages with questions when the time comes?
Sure, but email is easier for me (paul@hackingwithswift.com) or even Twitter ([@twostraws](https://twitter.com/twostraws)).
Great! Thanks for the help!
Apple released a really long and in-depth [book](https://itunes.apple.com/us/book/app-development-with-swift/id1219117996?mt=11) which covers most of the basics of making an app. Once you notice just how complex Swift code can get, or are just curious and want to learn more, you might want to check out [the official documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/index.html) Once you get a bit more into it, I’d recommend picking up a few books from [objc.io](https://www.objc.io/), they’re really well written and you’ll probs learn a lot. There’s also the unofficial ios-developers [slack channel](https://ios-developers.io/) to help if (when ;)) you get stuck. GL,HF
Thanks for the help! I’ll be sure to check out some of the stuff you recommended!
Can we sticky this? Sounds like great advice to me.
The big improvement of UWP, even more so than the cross platform support, is the fact that it finally packages apps like OS X. Each application is self contained (except for settings files in %appdata%) and any changes it makes to the registry are localized to an internal copy.
Although UXKit, or something along those lines, would certainly help with Universal App support.
This is a really good point. Thanks. A follow up question, though, is why this is better than just passing a description?
Cool Hello World for modern computing.
Thanks for sharing your viewpoints. Only the fact that I no nothing about Objective C, and I'm still only a beginner and Swift, so it would some mental overhead to learn some Objective C just for this library. The alternative would be using [KaTeX](https://github.com/Khan/KaTeX) or [MathJax](https://github.com/mathjax/MathJax), but of which are probably more mature and compatible (especially MathJax), however is made for the web and written in JavaScript, so they would require web views. Any thoughts on this?
I’m more interested in how you made the skill! How long did it take? Was it a lot of code or is a lot of it provided by amazon? Start to finish how long is the process? How does testing work
Wenderlich tutorials are also a great resource...
It’s unlikely they’re replacing UIKit, judging by the user interface efforts they put in for iOS11 and iPhoneX. My guess is the major changes will be in macOS, possibly a revamp windowing system to accommodate UIKit. 
Hm, ok. I'd stay away from using web views if there's a native alternative - web views come with their own problems that can be very tricky to overcome. Anyway, I don't think you'd struggle a lot with Objective-C syntax in this case. Autocomplete and a little bit of guessing should get you there. For example, the first code snippet on the page would be in Swift: let label = MTMathUILabel() label.latex = "x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}" The enums should also work like you'd expect in Swift, for example `label.labelMode = .text`.
Yep, everything comes back to Apple's own documentation for me. I'm still learning but when a tutorial doesn't make sense I head to Apple's docs for clarification.
Thanks!
Note that these tips are not all applicable to regular apps: "The intended audience of this document is compiler and standard library developers.” For example it used to talk about the @_specialize attribute, which (as the underscore indicates) is supposed to be an internal detail of the stdlib.
True. The parts that are most applicable are the generics and array sections.
Yeah, I figured out how to create the URL correctly with URLQueryItems. I'll check out the video later tonight when I am home. Thanks!
I did exactly this – a card-based game where users had to flip cards with pictures and words to find matches – in my book [Hacking with tvOS](https://www.hackingwithswift.com/store/hacking-with-tvos). It's written using UIKit so works great on iOS too. I did it for English, French, German, Spanish, and Italian, but it was extendable to any other languages. If you don't want to buy the book (understandable!), feel free to email at paul@hackingwithswift.com and I'll send you the source code for that one project.
"a description"?
On top of the other great suggestions, you may want to look for meetups near you. Learn Swift City is a growing network of meetups intended to help people of all skill levels learn to code in swift. https://swiftcoders.org/2017/03/07/learn-swift-la/
Much appreciated Paul! I just emailed you.
&gt; Keep in mind that there is a trade-off between using large value types and using reference types. In certain cases, the overhead of copying and moving around large value types will outweigh the cost of removing the bridging and retain/release overhead. I'm curious where that trade-off lies with Swift and its RC. On .NET, even large structs are still worth it. 
Look at the documentation for UIColor.
Link to UIColor class reference: https://developer.apple.com/documentation/uikit/uicolor You probably want an intializer like this one: https://developer.apple.com/documentation/uikit/uicolor/1621925-init example: let color = UIColor(red: 0.5, green: 0.8, blue: 0.3, alpha: 1.0) Celebrate when you have to create your own extension to create a UIColor instance from a hex value - it's a bit of a rite of passage for iOS developers.
It has nothing todo with OOP. Code gets compiled to an executable. It does contain all information about class structure, it’s method and members. Simplified: whenever you create an instance of an class and call a method on it, it already knows what capability’s the object has. It’s not like the Programm is executed from the top to the bottom. 
You should take lesson via Udemy.
I checked out the code. Pretty cool app! But it's not quite what I'm trying to do. Appreciate your help!
From the original Bloomberg article: &gt; Codenamed “Marzipan,” the secret project is planned as a **multiyear effort** My guess is that they’re not only replacing UIKit, — they’re replacing Cocoa! With Swift now in place — and about to become ABI stable — Apple can modernise their frameworks to take advantage of features in Swift. Think about it: everything in Cocoa is currently a subclass of NSObject. Everything was designed around the limitations of obj-c, and for the meantime, has to be designed in a way that is also compatible with obj-c. It’s time to rethink the app frameworks with all the tools that Swift brings. My bets are on Marzipan being the swift based replacement for Cocoa.
I can read every word in the title, but I have absolutely no idea what you’re saying.
Thanks for the suggestion!
Thanks, ill check it out!
Every other sub has a little Reddit alien in the top bar that you can tap it will take you to home and Swift does not. That’s why it’s like a roach motel
Nice overview. There’s a lot of viable implementations o.O
&gt; assignment, initialization, and argument passing) the program will create a new copy of the value. Swift 4 do copy-on-write for large struct. So there no expensive copying any more until the copy is modified. See the WWDC 2017 video: https://developer.apple.com/videos/play/wwdc2017/402/ Fast forward to 15:15
Oh, okay. What is a roach motel?
You must not be a Native American speaker. A roach motel is a kind of a trap for cockroaches. The marketing slogan was roaches check in but they never check out. It’s American slang that symbolizes a trap for dead end
Copy-on-write is not automatic for structs, it’s something you have to implement yourself. When you implement it, you’re opting back in to the costs of reference types (CoW is implemented by wrapping a reference). So the tradeoff still applies.
Thanks, this was really helpful!
The first lesson in Stanford’s free iOS 11 development class on iTunes U creates a matching game where the user flips over cards. This isn’t exactly what you are referring to but it would help you get started on your app.
Another cool way to customize a color is to type Color_Literal and a little box will pop up that you can click and customize (allows you to use hex values as well)
Thank you! Just subscribed.
thanks!
Are references much more expensive in Swift than languages with tracing GC because of the overheads of reference counting?
Well, a selector, for example.
Looks quite helpful, even to me as a Swift beginner. I find the comment about preferring inout parameters (vs. returning an entirely new object) to be amusing, because proponents of functional programming seem to consider this to be anathema, and "difficult to reason with". I've never understood that perspective.
Hey, this is great! I've been wanting to do something like this, and here you are with a a tutorial.
Because those rely on the objective C runtime. Selectors are really just strings, which are used to look up function pointers in a class's method table (which is like a dictionary). They're not safe (they might not exist, or could be misspelt unless you wisely chose to use #selector in swift), they're slow, and can't pose a huge barrier to inclining (since this is all dynamic behaviour at runtime). Plus, the ObjC runtime isn't available on Linux
Just got my copy. Thanks!
Thank you for sharing!
Thanks
Thanks for telling us! Got my copy. 😃
Thanks. I tried SwiftSoup and it seems to work. I'm having a small issue, though. I have it print the HTML, but it's in a NSString. How do I make it scrape the webpage and turn the HTML in a string rather than an NSString?.
Thank you very much, I'll check it out :)
Generally no, but in some specific situations yes. There’s four main costs to reference types that I’m aware of, though only the first two are usually relevant. * Allocation and deallocation: Swift heap allocations use the system malloc() and free() functions from C, whereas structs/enums are stored on the stack (or inline in a containing object if they’re an instance variable) and effectively not allocated at all. A good tracing garbage collector can achieve higher allocation throughput than C by batching deallocation and handling it on another thread and using a simple per-thread bump pointer allocator for most allocations. On the flip side, however, the garbage collector will tend to require more memory both due to deferred deallocation and due to needing space to copy into, can interact extremely poorly with VM paging (there’s research to mitigate the paging problems, but I’m not aware of it being deployed in production in any language so far), and of course with a tracing GC you lose deterministic deallocation. * Sometimes the ARC optimizer fails to remove a retain-release in a hot code path. Usually it’s quite good about making sure that references are retained outside of a loop, to avoid repeatedly messing with the refcount each loop iteration, but sometimes it’s unable to prove that it’s safe to do so. This also accounts for a *lot* of why -Onone is slower than -O in Swift. This is an ongoing area of improvement in the compiler and standard library. * Atomic operations on references shared between many threads: If a reference is frequently retained and released from many threads at once, the atomic math used in reference counting becomes much more expensive (due to each increment or decrement of the refcount invalidating the cache entry for the refcount in each other CPU core). This can be mitigated by avoiding sharing objects between threads, but that’s sometimes difficult or undesirable for other reasons. Tracing GCs can often avoid this because liveness is computed “afterwards” by object graph traversal using read operations rather than at the moment of acquiring the reference using writes. In most “app”-like situations (rather than highly concurrent servers or computational kernels) this isn’t currently a big deal, due to the limited use of parallelism. * Pointer indirection: a struct or enum's contents can be stored directly on the stack, whereas with a reference, a pointer is stored, and must be dereferenced to access the contents. Modern CPUs are very good at this, but it’s not completely free. Languages with tracing GCs generally also have this cost. 
Thanks so much for the heads up!
 //Convert NSString to String let resultString = resultNSString as String
What boot camp did you go to?
Thanks for the share!
Thanks! Now I know what I'm gonna be reading during my vacation! :D
Thanks 
Thanks for sharing. Happy birthday Paul.
Got it. Thank you.
Is this US only? I get a "name your price" page, which is of course still a very good deal, but it's not free.
Name your price as 0 and your good to go!
Paul, greetings from Ukraine 🎉🎊🎈 Thank You for the awesome stuff !!!
Thank you!
You’re most welcome :)
Awesome find, seems to have gone now though!
I’m pretty sure that isn’t correct. (It’s my book.)
Ah, thank you! I feel a bit bad about doing that, though I've bought a couple of his other books already!
Thank you much!
I'm probably not looking in the right places, but no matter, I've already bought your Hacking with Swift so this pro book is way advanced for me yet! Thank you anyways and have a great bday mate!
Just got a copy. Thank you very much, Happy Birthday 🎂🎉🎁 and merry Christmas 🎄🎁 
Happy birthday, /u/twostraws.
&gt; the garbage collector will tend to require more memory both due to deferred deallocation and due to needing space to copy into Does Swift decrement reference counts according to liveness information or just at the end of scope? If the latter then it could be deferring deallocations for longer than a GC will. Also, tracing GCs don't require overhead to store reference counts. So which design consumes the most memory isn't so clear cut. I'm only aware of [one study covering memory consumption](https://medium.com/@harrycheung/cross-platform-mobile-performance-testing-d0454f5cd4e9) and it showed Swift consuming considerably more memory than Xamarin and RoboVM. Regarding the space needed to copy into, with a generational tracing GC objects reside in statically-allocated fixed-size nurseries until they are copied into the old generation. So the memory overhead is constant. In contrast reference counting can require a reference count for every object in the entire heap. &gt; with a tracing GC you lose deterministic deallocation Only in the single threaded case. In multithreaded code with reference counting threads race to decrement to zero so the thread burdened with deallocation is non-deterministic. &gt; In most “app”-like situations (rather than highly concurrent servers or computational kernels) this isn’t currently a big deal, due to the limited use of parallelism. Given that all mobile devices of interest are multicore now I'm surprised to hear that parallelism is uncommon. &gt; Languages with tracing GCs generally also have this cost. Yes. It is the single biggest advantage of .NET's value types IME. Also, have you had any trouble with stalls in Swift due to decrements avalanching when, for example, a tree falls out of scope? 
Happy birthday, man! Thanks for your dedication to the community and passion for development! 
Thank you!
Thank you sir
Nice, but I paid _something_ even though it was free.
Cheers and Happy Birthday!
Thank you – very kind!
I’m happy to help!
Dev Mountain 
Thanks!! Love your books!!
&gt; So which design consumes the most memory isn't so clear cut. Lattner [did the research](https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20160208/009422.html), and claims it's 3-4x higher for "good performance" GC. That matches my experience. &gt; I'm only aware of one study covering memory consumption and it showed Swift consuming considerably more memory than Xamarin Er... - It only looks at Swift 1.1 and 1.2. - It shows a factor of 9 improvement from 1.1 to 1.2. - For Swift 1.2 already, it shows total memory usage of 104.99 MB, while for Xamarin it's 147.49 MB. I don't think any conclusions can be drawn about refcount memory usage in general, and certainly not that Swift uses "considerably more memory". &gt; Regarding the space needed to copy into, with a generational tracing GC objects reside in statically-allocated fixed-size nurseries until they are copied into the old generation. So the memory overhead is constant. In contrast reference counting can require a reference count for every object in the entire heap. Apple's 64-bit systems use tagged pointers, with the first 19 bits of the refcount stored in spare bits of the `isa` pointer. So it only requires a separate refcount for objects with over half a million references. Depends on your workload, of course, but typically, that's not very many. All popular modern GCs are hybrid designs. Do you think all the other data structures they use are zero-cost? Do you think they're even deterministic?
Thanks Paul (/u/twostraws) 😁 Happy Birthday
I wouldn't call it good. It's got some nasty bugs that have been lurking there since (at least) 10.0.
You are wrong. It’s all managed by Swift and automatic. The video above explains this very clear. To be clear. What is a large struct? It’s anything larger than 3 words. It doesn’t fit inside the Existential Container. So its value is stored on the heap and a pointer to the heap memory is in the Existential Container. Before Swift 4, the heap storage is copied whenever the struct is copied. Swift 4 optimized to use reference counted COW buffer on the heap: no copying for read-only Access.
It took about two days. It is not a lot of code. Basic JavaScript. Start to finish was about a week due to several certification guidelines I missed, but I eventually got them sorted out and stuff.
Thank u so much!! 
Thank you Paul. Happy birthday!
Great! How much of swift do I need to know to start this? I am barely done playgrounds
I'm new, but i've been using extensions exactly as you described. i like to keep a ViewController.swift file and a separate ViewController_touch.swift file
Nice! I like the appending idea as well. 
&gt; Lattner did the research, and claims it's 3-4x higher for "good performance" GC. That matches my experience. In that message he writes: "GC’s use a lot more memory than ARC systems do" "GC also has several *huge* disadvantages that are usually glossed over: while it is true that modern GC's can provide high performance, they can only do that when they are granted *much* more memory than the process is actually using. Generally, unless you give the GC 3-4x more memory than is needed, you’ll get thrashing and incredibly poor performance. Additionally, since the sweep pass touches almost all RAM in the process, they tend to be very power inefficient (leading to reduced battery life)." Those are, at best, contentious hypotheses presented with no evidence to substantiate them. His last assertion is obviously only true if your heap is composed entirely of pointers. I'm not aware of Lattner ever having done any research in this area and certainly not anything to substantiate these beliefs. The only GC he mentions is Java's which is notoriously bad. My own experience is certainly the opposite. Hence my unwillingness to just accept these beliefs without any research to back them up. &gt; For Swift 1.2 already, it shows total memory usage of 104.99 MB, while for Xamarin it's 147.49 MB. RoboVM is smaller in all cases (30MB in that case vs 105MB for Swift). Xamarin is smaller in all cases except that one. As I said, that's the only actual data I have seen. &gt; Apple's 64-bit systems use tagged pointers, with the first 19 bits of the refcount stored in spare bits of the isa pointer I don't have any Macs here so if I run Swift benchmarks here will I see substantially different results because it doesn't use tagged pointers on Linux? &gt; Depends on your workload, of course, but typically, that's not very many. According to the GC research, most reference counts are usually one anyway. However, almost all GC research looks only at Java so I'd take it with a big pinch of salt. &gt; All popular modern GCs are hybrid designs. Do you think all the other data structures they use are zero-cost? That's a completely fair point, which is why I'd like to see this researched properly. &gt; Do you think they're even deterministic? Determinism is a red herring. The OS isn't deterministic. I wouldn't bank on `malloc` being deterministic. And what most people call determinism in this context isn't actually determinism. They just mean "predictable". In particular, they need cleanup code called before a specific point. That's easy to achieve whether you have a tracing GC or not: you just wrap your code in a `try..finally..` to ensure the cleanup code is executed at the end even if the return is exceptional. Besides, the success of garbage collected languages makes this a moot point. If there were a problem with determinism most of the software we run every day wouldn't work. 
I’d create a protocol and delegate for handling gestures, implement the delegate in a seperate file, and just instantiate it in the target VC, calling methods as needed. 
A tidbit: the convention for naming files containing only extensions for a particular type is named “(type)+(nameOfFuncion/Protocol/Whatever)”. E.g. “ViewController+touch.swift”, “Sequence+predicateFuncs.swift”, etc.
&gt; A Run Loop always needs an input event, otherwise, everything executed on it will immediately exit. So don’t forget about it. What does this mean? It sounds like it must be describing something important but I can't make out quite what. &gt; A mutex is like a lock. The difference is, it can be across processes and not only across threads. Sadly you will have to implement your own Mutex since Swift doesn’t have one. This can be done using C’s pthread_mutex. Sure it does: NSLock is literally a wrapper around pthread_mutex (which was discussed in a separate section a couple paragraphs up). 
Thank you &amp; Happy Birthday, Paul!
Extensions like that don’t really solve anything. Try to create another class that acts as delegate for the gesture recognizer. That let’s you reuse this code in other view controllers.
I’m actually doing something like this at the moment. I created a protocol with any properties the ViewController needs for the recognizer. Then extended the protocol and added a function to handle the recogniser logic. When you implement the protocol all you’ve left to is create the reconizer with a target:action. The action's selector can call the function you’ve defined in the protocol extension. It’s really tidy and you'll be able to use it wherever you like, no subclassing required :)
Happy birthday to Paul! Thank you 
Thank you Paul, looking forward to reading your Vapor book!
Thanks, although it didn't work. I then did "let resultString = resultNSString as! String", since Xcode recommended I "downcast" it. Could you explain why I had to use an exclamation mark and what that downcasting means exactly? 
Best to check out the [official Swift Documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TypeCasting.html)
I think you could find plenty of tutorial videos online and on YouTube 
Can you give more examples of ways they’re split? I get using the plus sign, but what do you use sequence+predicatefuncs for? I’m still clueless about tons of swift tips and patterns 
Let me start with a very simple real-world example. I've got a file named "Double+random.swift" with the following contents: extension Double { static func random(min low: Double, max high: Double) -&gt; Double { return Double(arc4random()) / Double(UINT32_MAX) * abs(low - high) + min(low, high) } } The actual func itself is from SO, of course. But the point is that the file contains only one function named "random" which is an extension of type Double. Simple. Now just to add a tiny bit more complexity: I've got a file named "Sequence+predicateFuncs.swift" with the following contents: extension Sequence { func every(_ predicate: (Element) -&gt; Bool) -&gt; Bool { for element in self where !predicate(element) { return false } return true } func reject(_ predicate: (Element) -&gt; Bool) -&gt; [Element] { return filter { !predicate($0) } } } These are essentially just implementations of common functions over sequences. Don't worry if you don't understand the code, what matters is that it's an extension of the protocol sequence containing functions that use predicates -- hence the name. Here's some more examples made by engineers far more experienced than me. For context, CoreStore is kind of a database for Swift. CoreStore+Logging, CoreStore+Querying, CoreStore+Setup, CoreStore+Transaction, etc.
I’m sorry, but just pay something. I think its rude to stumble over eachother because something is free. The author put time and effort in this good work. You cant even afford $5, $2, $1?? 
I did put a lot of time into the book, and will continue to put in time in the future because I provide free updates for the life of the book, but today really is my birthday and I’m happy to give it away for free – please pay what you want!
The book is a pretty good read, it has one error though. When you are reducing to a boolean and using the &amp;&amp; operator, you wrote that "Adele".count &gt; 4 will evaluate but since the left side of the operator is already false, it won't, as explained earlier in the book. (Although all of the ?: operators will evaluate without optimisation turned on. Didn't have time to check if it gets optimised the same way as doing it with forEach and break but it doesn't seem like a very complex optimisation rule to me.)
Idk how I feel about that. Seems very risky for security. 
Regarding RunLoops, this is an in-depth look into them: http://bou.io/RunRunLoopRun.html I will have a look into this, but as far as I know there are differences between nslock and pthread_mutex. :) Thanks for your input!
&gt; Regarding RunLoops, this is an in-depth look into them: http://bou.io/RunRunLoopRun.html Yes, I know how run loops work. I skimmed this article, and I'm still confused about the sentence above. The phrase "input event" doesn't appear in this link. The word "exit" occurs only 3 times: once for command line programs that have no run loop, and twice to talk about the exit conditions for run loops (none of which is "not having an input event"). What exactly am I supposed to do with the advice "So don't forget about it"? &gt; I will have a look into this, but as far as I know there are differences between nslock and pthread_mutex. :) Thanks for your input! The `lock()` method [literally just calls `pthread_mutex_lock()`](https://github.com/apple/swift-corelibs-foundation/blob/189403084bd769f9e03fda159a17ab42f88854c3/Foundation/NSLock.swift#L56-L58). The `unlock()` method (on Darwin) also wakes up other threads, but that's something you'll generally want to do when dealing with raw pthread mutexes, isn't it?
Sorry if I misunderstood your question. You are actually right it should be "input source" not event. Will change it. Without an input source (which there are different types of) you can not add events to a runloop. So nothing would happen. (I know there are also timer sources, they are in this description included). With a quick look there are speed differences between NSLock and pthread_mutex, since NSLock needs (at least in Obj-C times) the runtime. But I've stumbled often about this statement (Swift has no Mutexes), so I have to look in detail, what other differences there are. Though I've also seen it mentioned to be a wrapper for pthread_mutex.
I don't think there's an exhaustive list of key paths anywhere. The whole point of key paths is that you can just make them up as needed. CATransform3D's "scale" is documented [in Appendix C](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CoreAnimation_guide/Key-ValueCodingExtensions/Key-ValueCodingExtensions.html). 
Thaaank for sharing this is my third book from him. 2 buyed already.
This is awesome, happy birthday and thanks!
One approach would be to use a horizontal UICollectionView where each cell is a fixed-size UIImageView. Swiping is built in, so you wouldn't need to deal with UISwipeGestureRecognizer.
CS193P, a Stanford course available through iTunes U, taught me iOS development. The course does assume programming knowledge, so it might not work for you. Aside from Paul's book, consider Swift Apprentice by Ray Wenderlich. If you have an iPad, considering getting the Swift Playgrounds app.
Try to separate as much as you can, it makes navigation super easy and you won’t get lost. Every delegate in its own extension and the helper functions in its own extension as well. 
You are truly awesome. Happy birthday!
Thanks!
Existential containers are not used to store structs by default. They’re used to store values of protocol type, or values of unspecialized generic types. You can verify this with disassembly very easily.
Off the top of my head, you could have a method that kicks off a timer, which fires a request when the timer ends. pseudocode: func requestUpdatedData() { call the server if you get updated data, use a delegate to communicate it if you don't get updated data, call self.queueRequest() } private func queueRequest() { set a timer that calls the request method after 5 seconds } // elsewhere in the code... dataController.delegate = self dataController.requestUpdatedData() // kicks off the first request which should begin the cycle I hope that helps you get started. Others might have a better solution
Thanks Paul!
&gt; Does Swift decrement reference counts according to liveness information or just at the end of scope? Where Swift does reference counting operations is up to the ARC optimizer. It’s considerably more sophisticated than just “end of scope”, though there’s a stdlib function you can call to explicitly request an object live until end of scope. The one caveat I’m aware of is that one of the argument passing conventions Swift can choose to use will keep objects passed as arguments live until the called function returns. &gt; So the memory overhead is constant. The size of the constant overhead has to be tuned relative to the size of the working set in order to maintain good performance. One of the nice things about tracing GCs is that the space vs latency vs throughput tradeoffs are exposed as tunables, but that doesn’t mean they aren’t tradeoffs. &gt; the thread burdened with deallocation is non-deterministic. I’m mostly thinking of deterministic finalization here (i.e. RAII-style stuff) rather than “which thread eats the perf cost” questions. I’ve had issues in the past with leaking file descriptors/mach ports, which can cause an amazing amount of subtle havoc. I expect that a good tracing GC on iOS/macOS would need to somehow factor non-memory resources like those into deciding when to collect. [edit] Trying to do RAII in current Swift is also somewhat tricky, sadly. Once it gets Rust-style moveonly types, it’ll be *much* more practical and avoid all refcounting overhead. Single ownership ftw.[/edit] &gt; Given that all mobile devices of interest are multicore now I'm surprised to hear that parallelism is uncommon. 2-4 threads contending on a refcount is not a huge deal perf-wise. I’ve seen it really start mattering around 10 threads all banging on one refcount. Even that is very unusual because usually the threads will be doing nontrivial work once they have the reference, rather than just constantly retaining and releasing it. To be more concrete: in the 8 years I’ve spent at my current job doing concurrency-friendly libraries in C and ObjC, refcount contention has come up as a meaningful issue twice. One of those times it was with the pre-nonpointer-isa ObjC refcounting implementation, which takes locks, and was fixed by moving to something resembling the modern refcounting implementation. The other time required changing how the object was used. &gt; have you had any trouble with stalls in Swift due to decrements avalanching when, for example, a tree falls out of scope? I’ve occasionally run into this in C++ and ObjC, so I’d assume it applies in Swift as well. One of the more amusing suggestions I’ve heard for mitigating it in ObjC is to autorelease instance variables instead of releasing them, so you kinda “smear” deallocation of the tree across the next N runloop iterations. Still not sure how I feel about that idea 😅 More practically, I do try to make sure that I drop any locks I’m holding before I release objects. 
&gt; Where Swift does reference counting operations is up to the ARC optimizer. It’s considerably more sophisticated than just “end of scope”, though there’s a stdlib function you can call to explicitly request an object live until end of scope. The one caveat I’m aware of is that one of the argument passing conventions Swift can choose to use will keep objects passed as arguments live until the called function returns. Interesting. Does Swift guarantee tail call elimination? That messes with ownership across function boundaries, of course. &gt; The size of the constant overhead has to be tuned relative to the size of the working set in order to maintain good performance. One of the nice things about tracing GCs is that the space vs latency vs throughput tradeoffs are exposed as tunables, but that doesn’t mean they aren’t tradeoffs. The size of the constant overhead isn't usually tuned though because you get vastly better performance when it is just under the size of your CPU cache. So gen0 is usually the size of the L1 cache and gen1 (if any) is the size of the L2 cache. What is always tuned is the amount of effort put into traversing more of the old generation periodically. This is usually calculated as a function of the allocation rate to ensure it is traversed quickly enough. &gt; I’m mostly thinking of deterministic finalization here (i.e. RAII-style stuff) rather than “which thread eats the perf cost” questions. I’ve had issues in the past with leaking file descriptors/mach ports, which can cause an amazing amount of subtle havoc. I expect that a good tracing GC on iOS/macOS would need to somehow factor non-memory resources like those into deciding when to collect. Better to just say: only use the GC for memory and not for any non-memory resources like file handles. The only time I've ever had any success in using finalizers for a non-memory resource was OpenGL display lists where it did actually work really well. &gt; [edit] Trying to do RAII in current Swift is also somewhat tricky, sadly. Once it gets Rust-style moveonly types, it’ll be much more practical and avoid all refcounting overhead. Single ownership ftw.[/edit] Interesting. &gt; To be more concrete: in the 8 years I’ve spent at my current job doing concurrency-friendly libraries in C and ObjC, refcount contention has come up as a meaningful issue twice. One of those times it was with the pre-nonpointer-isa ObjC refcounting implementation, which takes locks, and was fixed by moving to something resembling the modern refcounting implementation. The other time required changing how the object was used. Good to know, thanks. &gt; More practically, I do try to make sure that I drop any locks I’m holding before I release objects. You're using locks? Does Swift have support for communicating sequential processes? Anything like Erlang? 
It says you’re not using it, why do you have it?
There’s nothing to fix; it will still build. Xcode is just suggesting barking at you because you’re defining something that was never used.
this is just swift telling you that you never used your variable 'meh' after initializing it. Basically swift doesn't want you to have variables stored in memory unless they are used by your application(e.g. setting the background color to 'meh'). This is also why the error is a yellow one because your app can still run, it's just not proper programming technique in swift to write code like this. If you are planning on using this variable later, you can ignore this error.
Use it. 
but will that work with an asych task? It might take a minute or two for the server to respond so I want it to be able to poll in the background.
I don't see why it wouldn't work asynchronously
Thanks Buddy!
Best Xmas gift ever! Thanks for sharing bro!
From what your'e saying my guess is that you should call .removeAll on your songs array in "viewDidDisappear"... 
Thank you and fondest birthday wishes Paul! I pledge to use this knowledge for good and not evil.
Thanks for this.
Please take screenshots instead of pictures of your screen.
No, that’s off-limits from the app sandbox. The closest approximation would be for the user to trigger and save a screen shot to the camera roll and you read it from there. That’s a pretty convoluted UX though.
He has macOS, learning to code, and can't bother googling how to take a screenshot. What's the excuse?? Uhhhh. CMD + SHIFT + 4 lets you select an area.
As someone who made 3 games in Swift and SpriteKit, I agree. DON'T use them if you want to make games to expose to people. I hated it that many of my friends couldn't play my games because they had Android phones.
I actually bought this book and RW writes some really good and informative books. I made my iOS games based off of that knowledge. That book is made to learn SpriteKit, the game framework. It's not written to learn the Swift programming language. However, I agree with /u/dinorinodino. I regretted it. It helped me improve on Swift making my 3 games, but I regretted it at the end because half of mobile users (Android) can't play them, and that includes many of my friends. less exposure also means less income.
I see. I’m still a sophomore in college so for me amazing income would be $1.5K+ a month from revenues. Are the skills you learn not transferable to Unity?
Great question, but that would go against some of apples main functionality principles.
Try pasting your nested JSON into this site http://swiftjson.com It will generate the structs needed and give you something to start with.
I’m mostly writing ObjC code still, usual large legacy codebase stuff. Some of the synchronization constructs there import into Swift pretty well (libdispatch), but some of the other parts (os_unfair_lock, for example) don’t due to how inout works. Move-only types and borrowing will fix that. Further out, Swift native concurrency is being discussed and looks extremely promising, but is going to have to wait until some other large projects (ABI stability, ownership model) settle down.
I also had this issue for quite awhile. Download postman, paste in the link to get a prettified version of the json which just means you can see exactly where the dictionaries,arrays, nesting happens. Helps alot when making the codable model. Are you by any chance getting a keys not found error?
Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite Dirty dog an!nam!mite sub-human creature. Your place is in crematorium. Your whole sickening own kind musts be hung and massacred en masse. An!nam!mite Dog!,.. an!nam!mite twat,.. an!nam!mite thief.., subhuman an!nam!mite,.. an!nam!mite cock suker,.. fuck your mom An!nam!mite 
nope. An app works inside a restricted area called "sandbox". All the app can see and deal is what is inside this area that is basically a bunch of directories where it can store and retrieve files. Just that. An app can, after being authorized by the user, access stuff outside that area, specifically the camera, camera roll, microphone, contacts and other stuff but in a very limited way.
This wasnt near "Pro" the name is highly misleading, I just wasted 1h watching through some interesting categories... and it was very easy level imo, this is not "Pro" this is pretty much Beginner level or at maximum intermediate.
I am working on towards releasing app which i use to track my daily workouts. I started going to the gym recently and wanted a simple app with clean UI to track my progress so i created one. I have been doing some bug fixes and adding some extra features in it. 
That's helpful, thank you.
That's unfortunate. I was considering a screenshot but you're right and I feel that takes away a lot of the appeal. Too bad..
Is there a list somewhere of all the other things I can access outside the area? Also, when you say access the contacts, could I access that information and recreate the contacts app display inside my app to use?
thanks
not that I am aware but there is no more than that: camera, mic, contacts, photos and geo location.
Do to the try block for JSONDecoder(). I end up receiving nil when I try to print everything out. 
I don't think this is allowed. Related to the fact I don't think you can enumerate the apps that are installed, although I think at one time you were allowed.
Thanks! The mortgage should not stop you from building a side-business. It took me ~15 years to finally get where I am today. I tried many things from book writing to app development. Eventually, my side-hustle brought the financial freedom I longed for.
Here's what I think your problem is. You need to have three separate structs instead of a struct nested inside a struct inside of a struct. Start at the lowest level of data you want to decode and each level you go up, use an array of the struct of the inside-level of data. I'm sorry if this doesn't make any sense. Here is your struct: struct Information: Decodable { var name: String struct WeatherDetail: Decodable { var main: [Temp] struct Temp: Decodable { var temp: String } } } Simply change it like this and it *should* work: struct Information: Decodable { var name: [WeatherDetail] } struct WeatherDetail: Decodable { var main: [Temp] } struct Temp: Decodable { var temp: String } If this doesn't help, please post an example of the JSON data so that I can take a look at it. Also any errors help a lot as well.
https://youtu.be/vMKtKNZw4Bo
Ok. I understand what you are saying. I should have use struct protocol type instead of just struct. Thanks!
It isn't working unfortunately. JSON is in the OG post, but I will post it here for readability. { base = stations; clouds = { all = 90; }; cod = 200; coord = { lat = "43.62"; lon = "-116.2"; }; dt = 1514056500; id = 5586437; main = { humidity = 96; pressure = 1026; temp = "273.17"; "temp_max" = "274.15"; "temp_min" = "272.15"; }; name = Boise; sys = { country = US; id = 931; message = "0.1651"; sunrise = 1514042185; sunset = 1514074362; type = 1; }; visibility = 16093; weather = ( { description = "overcast clouds"; icon = 04d; id = 804; main = Clouds; } ); wind = { deg = 290; speed = "4.6"; }; }
Try embedding the 0 line label inside a container view and constrain the label to the edges. 
[removed]
Honestly, most entry level positions care about fundamentals that you should have picked up in school. Data structures and algorithms are the most important, then any software engineering design patterns you might have picked up along the way. It’s also important to have an understanding of what it means to write clean code; code will be written once but read thousands of times so clear code is better than clever code, even if it’s longer. After that, if you know basic iOS stuff, you’re golden. The iOS stuff is easier to teach than any of that other stuff, so make yourself valuable fundamentally, and the iOS specific stuff will come with time and experience. 
Is it giving any error? Or returning anything at all when you print()?
Have you done any research before asking? On [the NSCollectionView documentation page](https://developer.apple.com/documentation/appkit/nscollectionview), I searched for the word "size", and the second occurrence says (in reference to flow layout attributes): &gt; "The collection view’s delegate can override the default size values and specify different values for each item." 
Ah, I had actually. I appreciate your reply. Thank you! 
It is because when you conform to codable, the property names must match the json keys EXACTLY like if the key is “main”, in the model it literally has to be called let main:String
You already have the CS foundation and software engineering skills to be an iOS developer. Read an iOS book and then come up with an app that you want to make and then make it and make it pretty. You'll get a job with just that. 
It returns nil due to the Try? statement
Making good coffee !
Okay I'll probably give it a go then. Thanks.
Well, you've got me interested enough that I just installed Swift on my Raspberry Pi and am learning it now... :-)
There’s a way to do it exclusively for apps you publish via app groups, but that’s about it.
We always quizzed on the app and view delegate methods. You should know them by heart, when they’re called, and what to use them for. Memory use, immutability, and threading options are the other common topic areas. You should also know table views and collection views. That should get you just enough to eek through the iOS specific portions of the interviews.
Of course! That’s a no brainer lol
I definitely need to sharpen my data structures skills, this is solid advice though 
What else do you guys quiz on? Also what company do you work for? 
I think it's best to look at the job market that you'll be going into. Different markets have different needs and also the market seems to be getting tighter as the mobile bubble doesn't seem to be shrinking and the economy is growing even faster. Mobile dev could be the highest demand job around and IMO, mobile enterprise is just getting started. I think DICE is a pretty good place to look, they list off what they are looking for, however, that doesn't mean that they're getting these skills.
Congratulations on graduating! If I were interviewing you for an iOS engineering role, I would look for the following things: - can explain the difference between structs and classes - can explain why you would use a struct vs why you would use a class - can explain clearly how a UITableView works, and how a UICollectionView works - can, given a screenshot of the iOS 11 App Store app, break down possible layouts where something is a UITableView, UITextView, etc - can explain the general differences between HTTP GET and POST, and using URLEncoding vs JSONEncoding Bonus points: - familiarity with Codable and newer Swift things - familiarity with the differences between using storyboards and not using storyboards - familiarity with cocoapods - familiarity with popular libraries like Alamofire and SnapKit - familiarity with any backend frameworks and languages - familiarity with things like Dynamic Type, Safe Area Layout Guides, etc - familiarity with Sketch In my experience, a lot of what I spend my time doing is hooking up views with tables/table cells and collections/collection cells, making data structures, and making requests. Good luck!
Learn tableview collectionviews, delegates and protocols, parsing JSON into objects, networking and making your own network controller, using cocoa pods when necessary along with how to change thier objects when needed.
Nice, enjoy! If you like the general direction of the language but feel like you need more control and a more tightly integrated concurrency system now rather than in a few years, Rust is also definitely worth checking out. It’s a fun time to be a low-ish level programmer :)
Alright, my bad for not seeing the JSON at the bottom. Thanks for posting it again. I just spent about two weeks trying to figure this out myself and while I did manage to get it, I am still very much a noob to it all. Here's a few notes just from comparing it to what I was doing: 1. Information doesn't seem to be a part of the JSON. Why do you need it? I don't think it should be included in receivedTemp's statement. Instead it should just be let receivedTemp = try? JSONDecoder().decode(WeatherDetail.self, from: data!) print(receivedTemp) 2. Are you sure that the way you are setting up the dataTask is correct? Again, I am no expert but this is how I did it and it worked: let defaultSession = URLSession(configuration: URLSessionConfiguration.default) defaultSession.dataTask(with: url) { (data, response, error) in // code } do { //here is where I put my JSON decoding code } } catch { //catch code for error } }.resume 3. I only had to use ".resume" instead of "dataTask?.resume" I am sorry my replies have been so far apart. Can't seem to get back around very quickly today. Hope this helps.
TDD, Unit Testing, Rx-Swift and 10/10 score at anu fancy code testing website. Sadly this will lead you into a job where nothing previously said will be used at all, just an envelope for being surrounded by crazy deadlines. Then use your free time to start pet projects that you really enjoy and where you embrance any new bit of learning with joy.
I've had a play with Rust. Very interesting idea but the borrow checker is hugely invasive and the costs easily outweigh the benefits for me. I put a lot of effort into trying to optimise the Rust and the performance was only ever mediocre. The scope-based memory management also meant huge pauses when things fell out of scope which I'm not a fan of (a pain in Mathematica which regularly hangs doing reference counting and I've had bad experiences in C++ too). I'm deeply skeptical of reference counting so I'm keen to see how Swift performs on something non-trivial. I'm going to write a benchmark that will let me measure the memory consumption properly... 
Your sectionn in databases is indeed quite controversial. It's not necessarily a bold claim as much as an unsupported claim. The reasons you named for using SQL are really reasons to use a database in general. Not SQL specifically. Documentation and communication are things I cannot stress enough.
That was mainly at a Big 4 in SV. I’m in a tangential company outside of SV now, but it’s similar in term of what we ask.
The offending line appears to be in the getSongName function where your tableview's datasource is being updated with: songs.append(mySong) A quick fix would be check if the datasource already contains mySong, and only append to it if it has not previously been added. if !songs.contains(mySong) { songs.append(mySong) } 
If you have a CS degree, you basically know the fundamentals (OOP, data structures, etc.). I’m a professional iOS engineer and the thing I didn’t work hard on was unit testing. Our job requires us to unit test everything. Other things you should know is what a sanity test is, user acceptance test, system integrated test, and multiple app environments. At least for us. Our work app has UAT and SIT environments for each month. That means test accounts only work on those environments when running the app. You can set the environment of an app in their settings. Those are like the things I’ve learned since being at my job; everything else I already knew. From my experience, don’t expect to know everything. Most companies have teams and a lot of them are assigned specific tasks. That means they won’t give you all the workload where you would require knowledge in many parts. 
Thank you for your reply. 1. Information is part of doing the JSON decodable for the city. Flat JSON data is easy to retrieve it's just nested data that I am having issues with. 2. Either way works. A Do Try Catch only helps with debugging. I could try using a catch, however I don't think it will really give me any debugging information. It's worth a shot though! 3. Either way works too. dataTask? is being set to the urlsession and it's initialized. Then dataTask.resume resumes the suspended request 
Thanks for the tips! I have an interview coming up this week and will study some of these for sure.
Excellent article. That said, there are plenty of things that can go wrong. I've had the team change during the project, for example. So I'd have a single junior developer left working for me. I've also had developers who can't handle version control. They'd simply walk past developer's workstations with an USB stick, then have another guy code-dump it on SVN. As soon as I worked on the repo, they'd panic because OMG merging?!?! The quality of the work depends on the developer who works on your project. Thus, it's essential that you interview him, and that he keeps working on your project. Specify that changing the team means that they broke the contract and thus you won't pay. Interviewing is a special skill, with open questions. So don't ask, "do you know git", but ask, "which git client do you use", "do you rebase or simply merge", that sort of stuff.
A key path and a selector aren't always the same thing. A key patch is specifically a list of properties to access, and those can be chained with `.` characters. A selector is just a method to call. For example, calling `valueForKey("lastName")` on an `NSArray` containing `People` objects, returns an array containing all the values of `lastName` in the array.
That looks really awesome man. Nice work!
Could you put this on to gist? Reddit formatting isn't quite as readable as it is on github
I’m coo coo for cocoapods Ok sorry if OT. This was a good list 
[Wish granted](https://gist.github.com/jdh30/e3c9cfe31dc311be20cc2984b3398545).
Thanks. I'll be honest, my understanding of derivatives is vague and rusty at best but I think I can answer your questions. &gt;1. Is this idiomatic or are there stylistic changes I should be making? This looks fairly readable to me. You use some conventions that aren't necessarily "swifty" but this looks like Playground material so it's no less readable. You may want to look at SwiftLint if you want to keep your style more conventional. &gt; 2. Can I coalesce some of the switch cases that have the same rhs, as you do in other languages using a "or pattern"? Do you mean single expression for multiple cases? If so, yes. You can comma separate cases &gt; 3. Am I doing anything stupid with regards to memory management? Are there any obvious ways to reduce the memory consumption, short of changing the algorithm? Nothing sticks out as wrong here. &gt; 4. Have I done anything obviously inefficient in terms of the language (rather than the algorithm)? Again, nothing that I can see. 
You could try the following: struct Coordinates: Decodable { let lon: Double let lat: Double } struct Weather: Decodable { let id: Int let main: String let description: String let icon: String } struct Main: Decodable { let temp: Double let pressure: Int let humidity: Int let temp_min: Double let temp_max: Double } struct WeatherData: Decodable { let id: Int let name: String let cod: Int let weather: [Weather] let main: Main let coord: Coordinates } Network: (Could be done much better btw) final class NetworkService { func get() { guard let url = URL(string: "http://api.openweathermap.org/data/2.5/weather?apiKey=7465be2382c82a728bf78ed04fb3e1d0&amp;q=boise") else { return } URLSession.shared.dataTask(with: url) { (data, _, _) in if let d = data { do { let data = try JSONDecoder().decode(WeatherData.self, from: d) print(data) } catch let error { print("\(error)") } } }.resume() } } ------------------------------------ If you want to embed the properties without extra nested structs you could do the following: import Foundation struct WeatherEmbedded { let id: Int let name: String let cod: Int // main let temperature: Double let pressure: Int let humidity: Int let temp_min: Double let temp_max: Double } extension WeatherEmbedded: Decodable { private enum CodingKeys: String, CodingKey { case id case name case cod case main } private enum EmbeddedCodingKeys: String, CodingKey { case temperature = "temp" case pressure case humidity case temp_min case temp_max } init(from decoder: Decoder) throws { let container = try decoder.container(keyedBy: CodingKeys.self) let embeddedContainer = try container.nestedContainer(keyedBy: EmbeddedCodingKeys.self, forKey: .main) id = try container.decode(Int.self, forKey: .id) name = try container.decode(String.self, forKey: .name) cod = try container.decode(Int.self, forKey: .cod) // embedded part temperature = try embeddedContainer.decode(Double.self, forKey: .temperature) pressure = try embeddedContainer.decode(Int.self, forKey: .pressure) humidity = try embeddedContainer.decode(Int.self, forKey: .humidity) temp_max = try embeddedContainer.decode(Double.self, forKey: .temp_max) temp_min = try embeddedContainer.decode(Double.self, forKey: .temp_min) } }
Model, view, view model, basically take away the heavy lifting you would usually do in the controller in MVC and make a view model, usually init or configured with a model file and inject that into controllers, which just holds views and passes view models to stuff, works well with a coordinator delegate pattern.
Basically you write a view model which holds the state and logic of a view. You then hook up a ‘dumb’ view controller to it. This is often done using some framework to bind properties of the vc to the view model. Also write some tests for your view model. 
[removed]
I'm really not sure what to tell you, then. I really think a big part is with how you've set up your structs. You don't need to be nesting your structs within other structs but instead make them how I showed them. Does that change anything? Would it be helpful if I posted all of my code so that you could compare it?
Do you have text in the label? It sounds like there’s something that is forcing the width to be smaller. Try changing the compression resistance priority to 752 and see if that helps 
Thanks, much appreciated. Is there any way to avoid having to write argument names every time you call a function, e.g. replace `add(f: f, g: g)` with `add(f, g)`? 
Yup, you put an underscore before the labels in the function definition. :) func foo(_ f: Bar, _ g: Bar) { ... }
Note: reddit Markdown screwed with your formatting, there should be an underscore in front of the now italic _f_ (which got canceled by the underscore in front of g).
It looks fine to me, are you using an app?
Oh wow, I am using the official Reddit iOS App. Sorry I didn’t know it could not handle code. Looked at your comment in a browser and you did it perfectly.
No worries, I'm honestly not really surprised that their official app messes it up. :)
Check the FAQ in the sidebar or the multiple posts asking the same thing. 
Sweet, thanks.
Udemy
Usually, when interviewing candidates: * I ask about when you would use various language constructs over others (e.g. struct vs. class vs. protocol) * I ask about Swift's error handling constructs, and how they differ from those of other languages (e.g. exceptions, error codes, NSError**) * I ask about how Swift varies from other languages (e.g. Objective-C, Java, etc.) and, more importantly *why* it differs, and what you think the involved tradeoffs are * I ask about various UIKit concepts and patterns (responder chain, delegation, data sources, notification) * Even if you won't be working in Objective-C, it's important to have, at least, a working knowledge of it, as it has influenced the Mac and iOS frameworks and philosophies for decades. * I present an existing iOS app, and ask "How would you implement this?" and ask them to explain why. If it's an app that I have access to the source of, I might also mention how it *was* implemented, and ask them why they think it might have been implemented that way, as opposed to the way they described. * I ask some (basic) data modelling questions (e.g. "Say you wanted to design a system to handle train fares and scheduling. What entities would be involved, and how would they be related?"). Even if you're only working on an app, it's important to have *some* understanding of the way the backend is structured, and most apps have a server-side component these days. * Beyond that, it's mostly basic CS stuff, algorithms, data structures, etc. Interviewers vary, but I tend to not harp too much on specifics (e.g. "List the big-O efficiencies for these half dozen operations when applied to these structures"), as long as it's clear the candidate has a general knowledge (e.g. when an array is better than a linked-list, or when a hash table is a batter solution, what a binary search is, etc.). The odds that you will actually be asked to *implement* these structures in an iOS app are pretty low, but you will surely make *use* of them, and it's important to pick the right tool for the job. * Sometimes, I'll ask CS questions with intentionally impossible or impractical answers to see the candidate's thought processes when solving a difficult problem And, if you have a particular skill listed on your resume, you should be prepared for questions specific to that skill. Even if I am not an expert in that particular skill, I will seek help from a colleague who *is* so that I can ask sensible questions; it can be very disappointing to find that someone claims to know *X*, only to find out that they have minimal exposure to *X* and were just padding their resume. But as long as you have the CS basics down (which you should as a recent graduate), and have a working knowledge of iOS development, you should be fine.
&gt; Lattner did the research, and claims it's 3-4x higher for "good performance" GC. That matches my experience. I just wrote a benchmark to test this theory: a program to compute the nth derivative of x^x symbolically. Here is [a solution in 123 lines of Swift](https://gist.github.com/jdh30/e3c9cfe31dc311be20cc2984b3398545) and [a solution in 91 lines of OCaml](https://gist.github.com/jdh30/f3d90a65a7abc7c9faf5c0299b002db3). On a Raspberry Pi 3 running Swift 3.1.1 and OCaml 4.02.3: * OCaml compiles over 3x faster than Swift with -O (1.7s vs 5.3s). * OCaml runs over 5x faster than Swift (1.469s vs 7.623s). * Swift requires over 3x more memory to run (104MB vs 29MB). 
Thank you so much for your reply. This did work! I know it could be better built, but this was just for testing and getting URLSession to work. The issue was with let main: Main I was putting in let main: [Main] Because I thought it returned an array of the results when decoding. I will read over your code a bit more so I understand it. Thank you for your help!
Which claim, exactly, is unsupported? That data integrity helps one sleep better at night? It's technically true that a good non-SQL database can do all those things. (Even Postgres didn't use SQL until 1995.) But in 2017, for all intents and purposes, "NoSQL" always means "non-relational", and that almost always means MongoDB or Redis. Neither of these have transactions (except within a single document, if that can be called such), and so you can't just (safely) modify a 'column'. That's 2 of the 3 claims. (MongoDB does offer aggregations.) There do exist good proprietary non-SQL object databases which offer the same data integrity features as any relational database, but they're all really expensive, so why would you bother? Cassandra is an up-and-coming open-source non-relational database which looks most likely to break this rule, but again, do you really want to? I want to innovate with my app, not how my data is stored on disk. To say that 90% of applications don't have the data storage needs of Google, Facebook, or Wikipedia is an understatement.
It’s just the default text that says “label” 
Something that got created because people don't understand and abuse MVC and because someone needed a new marketing term.
I’m quite willing to admit that I am a Swift/iOS noob and that I have already picked up bad habits. I’d like to learn how to not abuse MVC even in larger more complex apps. I’d also like to learn how to do unit testing in Swift iOS MVC applications. Any pointers you can give will be gratefully received!
You can still use MVC and use ViewModels. You can still use VIPER and use MVC. Think of them as a collection of design patterns you can apply where appropriate. For example, at Reddit, we recently created a new style of popup. The popups all follow the same form: title, image, text, a button or two at bottom. Instead of creating a VC for what was essentially the same thing, I decided we could inject the VC with a View Model. The View Model essentially contains the title text, image name, body text, and then the buttons are configured on how to respond to tap. It reduced a lot of code duplication and made the concept of a popup much more easier to understand and configure in the future.
Yup. This is about as succinct a description someone can give. It's an eponymous name. A model for the view: A view model. This has nothing to do with iOS or Swift or Cocoa. This is just a common design pattern for GUI applications. Use it where needed. If you don't think a view model doesn't make sense don't use it. If you do -- then do it. Try experimenting with it and see how it goes. I love me some view models.
Hahaha that made me laugh several times 
The completion block of a URLSession calls back on a background thread. You’re updating your UI from a background queue. You need dispatch your changes onto the main queue.
Have you tried googling? Read [this](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html), or [this](https://developer.apple.com/documentation/swift/optional), or [this](https://stackoverflow.com/questions/24003642/what-is-an-optional-value-in-swift), or ...
There might not be a matching object, so the function returns an optional index, Optional index 0. 
Are these other keys arrays or objects? Do you have separate models that will represent these structures?
Why are they all dictionaries? Can you not use an array to store members? Perhaps go a bit more in detail as to what you are representing 
Just nest the decodable structs and then decode the TopMostLevel.Self
I'm a bit confused. Isn't that what I'm already doing?
The Apple Watch is slow, and the simulator includes delays so you won't get a false idea of how fast the watch is. The first session.dataTask is particularly slow. Can you send less data? Are session.dataTask after the first one any faster? 
Is there any way to disable these delays? The amount of data is small - just a string with a length of under 100 characters that I'm pulling off my own server. Subsequent session.dataTask calls are not faster, unfortunately. Again, the same code runs lightning fast on the iPhone simulator, but the Watch simulator needs about 6 or 7 seconds to finish the task.
How fast does your app run when installed on an actual Apple Watch?
I haven't installed it on an actual Apple Watch - the only Apple device I have is my MacBook Pro.
towlch screen.
Ah, I’m on mobile and missed that you called DispatchQueue on the same line as the closure arguments. Usually I’d do this on a separate line. I’m not entirely sure what’s causing this issue then. You’ll need to check the documentation for URLSession and see if there’s behaviour difference between the two OS’s.
I did a bit of digging and found out this is an issue known by Apple, as people have already sent in tickets on the subject. I'm in the process of implementing a different technique, and will post an update if I get better results. Here's a link to the Apple dev forum where they talk about the issue: https://forums.developer.apple.com/thread/88205
No biggie :) In the meantime, I found a post on the Apple dev forum on this very issue - check out my other reply.
Easier to get to mars than compiling Swift on Windows. I’ll still try it though. 🤔
Very true, all you have to do to get to Mars is click the rocket ship in the Launchpad icon on macOS or the Games tab bar button icon on iOS. 
😝
Why aren't there precompiled binaries for Windows?
Interesting, had no idea that Swift was going to work on Windows. Being open source, I wonder of MS will do a cross platform version of Xarmin using Swift. Swift is close to Kotlin, Kotlin is close to C#, why not just blend them all together in one universal language?
Because Apple
Is word wrap set to full word? 
Kotlin, C#, and Swift all use different runtimes to execute their code. Kotlin runs on java, C# uses .NET, and Swift runs on top of the Objective C runtime. While these languages may have some similarities in features, they are *radically* different under the hood and it really isn’t possible to just compile to a different runtime. Edit: Seems Swift has its own runtime, and does not require the objective c runtime.
https://github.com/JetBrains/kotlin-native
It was built for The Apple ecosystem for the initial release and then quickly ported to Linux because the platforms are so similar. Windows is dramatically different from the other two so it hasn’t been officially ported yet, presumably because it’s a low priority and it is a lot of work
Worth noting that Swift only interfaces with the Objective-C runtime on macOS, and that the Linux and Windows builds of Swift only use the Swift runtime. Further, interoperability between .NET/JVM and Swift, though not easy, is totally doable.
There’s OpenEars, but I think that works better for “command dictation” instead of general purpose speech to text. There’s also Google Voice APIs. https://www.quora.com/What-are-the-best-speech-recognition-APIs-for-use-in-iOS-apps
OpenEars sounds nice, I'll check how well it will recognize the technical names. Thanks!
I was thinking of going the other way. Example, I used to write in a few different languages, I used to start by making a set of general routines that I needed. I could write those routines in various languages and call them the same thing. An old example would be a parser or string functions that search and replace substrings. I would write the same functions is different languages and then more of my code can be the same. I could then focus on writing the specific business logic. If the compiler has a strong pre-compiler / pre-processor it makes it all the easier. I have data saving routines that work exactly the same for Core Data vs the file system vs SQLite, the calls are the same, these would be the same with Kotlin as well. It doesn't matter what data store is selected, the calls are the same.
Since you're already familiar with the general idea of mobile development (IOS isn't terribly different from Android), you might as well start googling how to set up a view, how to set up a todo, how to set up a multi row collection (tableview or collectionview btw). Click Ray Welderlich links, they're the best by far
I would still read through those sections, because you’ll learn specific implementation and behavior details about those features in Swift, that might be unique to Swift. I was already familiar with most of the concepts of OOP, but I learned a lot of minor, but very good to know things by still reading through Apple’s Swift book on iBooks. They’ve made it pretty enjoyable, and it wasn’t that long of a read.
I’m writing some information on this for vapor 3. If you’re using vapor 3 I can upload it and update the rest of the content later. If you’re using vapor 2, 0xtim has a good tutorial on that (brokenhands.io)
FWIW, Swift can interact with the Objective-C runtime, and uses it for some of the more dynamic (Objc-like) features. But it works without it (e.g. on Linux)
I think you're underestimating the power of MongoDB for one. The lack of multi-query transactions is not important for me, it can be worked around. MongoDB wins my preference in accelerating development by allowing arrays and dictionary-like types (Documents), allowing more natural and nested models (using Codable for example). Most applications I've built didn't need transactions and benefited a lot from the accelerated development. Besides this, if you're thinking in terms of transactions and table joins you need to think again. MongoDB's nested keys and aggregates make you not need them mostly if you model correctly. I also don't think SQL can be called relational, since it's really slow at complex relations. Something MongoDB shines better at, and other NoSQL DBs even more. Finally, having implemented a MySQL and PostgreSQL driver for the Vapor project, MySQL is a straight up disaster in many ways on a technical level. MongoDB and PostgreSQL are a lot better, miles ahead in development. MySQL feels less mature than any other technology I've seen. PostgreSQL seems more modern but still falls behind in a few places. You don't need to be the size of google to use MongoDB. You're far too opinionated in your post, going into specific detail of SQL benefits and not the ones for NoSQL DBs. Finally, why is a good NoSQL DB "expensive"? I don't think SQL is bad, I do think it serves a place. EDIT: I submitted too soon. I do have a strong opinion for many NoSQL databases. Because they are more specialised, they achieve their goal better. But most (older) SQL databases are a straight up disaster in a technical way, losing my trust.
Anything at all would be awesome! :)
I'll upload it after dinner (ETA 1 hour)
right now I have struct People:Decodable{ let follow:Resp } struct Resp:Decodable{ let resp:Members } struct Members:Decodable{ let members:Characters } struct Characters: Decodable{ let characters:Character_Array } struct Character_Array:Decodable{ //all keys in the array } **** So far I've tried the options below but they all give errors struct Members:Decodable{ let members:Characters let members:Houses //etc } struct Members:Decodable{ let members:[Characters, Houses] } I am new at parsing jsons. 
English is close to French, French is close to Spanish, why not just blend them all together in one universal language?
(Is "It's a lot of work" not a good enough reason?) There are still some significant differences between Swift on Darwin and Linux. I'm sure they want to standardize the behavior before they start branching out onto other platforms.
&gt; Would it also be possible to instantiate a fake / virtual external monitor and get the output of that? For your first Swift project, you're wanting to play with kernel drivers? Maybe you should start with something simpler.
&gt; The View Model essentially contains the title text, image name, body text, and then the buttons are configured on how to respond to tap. It's always hard to talk about architecture in the abstract, because we're using 100 English words to describe 100,000 lines of source code, but this sounds exactly like a "view" to me.
This isn’t the view though. This is the model for the view. This does no drawing on the screen. You could use this same model to fill out a view in an Android app or a Mac app. 
You should read Apple's "The Swift Programming Language". It's actually a pretty good language book. As a programmer, you are probably already skilled at skimming, if you come across parts that are too obvious. &gt; I don't need to learn what a class is. Why, do you assume that "class" (and "struct", "enum", "throw", "public", "&amp;", etc.) mean the same thing as in other languages? &gt; Maybe I can even figure out the type system of Swift myself. You're welcome to learn any way you like, of course, but I don't recommend it. Swift has one of the most complex type systems I've seen in any language. It's not *Scala*-hard, but it's up there. &gt; I'm looking for courses or books on learning the "real" Swift Can't get much more "real" than Apple's official book! &gt; I understand that 90% of development is knowing the SDK and the ecosystem and the OS What are you trying to learn here? It sounds like you're asking to learn everything at the same time, which is not what I'd recommend. I'm sure as a "pro developer" you know that trying to lazily load many types of data structures at once (into your brain) is going to result in a terrible cache hit rate, and thrashing.
Im not doing the project to learn swift, I'm actually just trying to do the project. So I need to look into kernel drivers? Can you recommend anything else?
objc.io has a collection of advanced books on Swift. They’re platform agnostic so they won’t teach you much about UIKit and iOS development, but if you’re looking to learn “real Swift”, they’re as good as it gets. https://www.objc.io/books/
Cool! Can you show the app? :)
[An hour late, but here it is](https://github.com/vapor/documentation/blob/database-docs/3.0/docs/advanced/security.md)
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [vapor/documentation/.../**security.md** (database-docs → b65b1fa)](https://github.com/vapor/documentation/blob/b65b1fabfbd618d8c6d01359c7a4c5b946df6337/3.0/docs/advanced/security.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drr05tj.)^.
They aren't close enough, however, there are some international symbols that they are see the same and they all use English when in flight. What's under the hood doesn't matter as much, Swift is ObjC under the hood, so why use Swift? Doesn't it all break down to machine code in the end?
Not late at all. Appreciate it, cheers.
You might check out Pro Swift, by Paul Hudson, or Hacking Swift by the same author, if that seems too advanced.
I completely agree with this. The Advanced Swift book is well written and goes in depth on everything an experienced developer needs to know about the language. 
Are you [familiar with this?](https://www.raywenderlich.com/category/swift/swift-algorithm-club)
I just made an Xcode extension to help with issues like this. Would you mind trying it and letting me know if it works? https://github.com/quicktype/quicktype-xcode
This should work as you describe now.
Working on creating a swift utility that creates good Codable-conforming structs out of JSON payloads. It’s been an interesting learning experience in dealing with Swift Package Manager, creating an intelligible object hierarchy with proper separation-of-concerns, and an intuitive API. 
Once your constraints are correct, it will work. It's hard to be more specific without seeing them
Really awesome to hear. I use this for generating quite a bit. 
We also have an experimental Xcode extension if you'd like to try it: https://www.reddit.com/r/iOSProgramming/comments/7m3so2/xcode_extension_paste_json_as_swift_4_c_java_and/
When setting a horizontal/vertical constraint they are still not centered and actually messes it up on even more sims when i run 
Will give it a try
Well, what error do you get? Just saying “I get an error” isn’t very actionable.
Sorry! I meant to say that it defers to the catch block and prints the "problem" statement I made 
That was beautifully said lol
The issue here is that `api.reddit.com` does not return just this structure, it returns a LIST of structures, with some significant nesting. Even within a dictionary that maps to a single post there is a lot of nesting of various pieces of data. Since your representation is all flat you will have to write a custom `decode()` method.
Change that to: print(“Problem \(error)”) So that you can actually see what the error is.
Works like a charm. Thanks bud. Give this man a beer. 
Maybe I'm just being that guy, but shouldn't you just be learning the algorithms in a language independent way, and the implementation becomes an exercise? I'll probably be downvoted for being harsh, but I do believe that's the proper perspective. Perhaps it would be more productive to give an example of where you've hit a wall.
We need more upvotes Capn!
100% this.
Please share it! Glad it worked.
I appreciate you being that guy. This is what I need to hear. I didn’t think of doing it this way. 
Yes, completely forgot about it!
Add a collection view to your storyboard,change the scroll direction in the attribute inspector to horizontal,by default the scroll direction is vertical . If the images are coming from a server , use URLSession . To enhance better ux- try creating a carousel view with collection view and use NSTimer for auto scrolling (say 2.5 secs)..hope this gives you an insight...
Yeah me too 
Damn straight. Algorithms are hard, Syntax is easy.
Read a book. A career as a software engineer is the most privileged in the world. But you do have to put in some grunt work. Get an algorithms book and start studying and reading and cranking out problems.
Any recommended books?
It might be worth having a look at [Grokking Algorithms](https://www.amazon.com/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230/ref=sr_1_sc_1?ie=UTF8&amp;qid=1514282113&amp;sr=8-1-spell&amp;keywords=Grokking+Algoritms) by Aditya Y. Bhargava. The book is focused on teaching concepts in simple terms and has exercises for you to do. It’s python based but there’s very little code in it. I’d imagine you’d be able to read it no problem. Slight tangent, but I actually found the book through Daniel Shiffman’s [The Coding Train](https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw) youtube channel. While I don’t think he has a dedicated playlist for Algorithms and Data Structures, he does occasionally touch on them, and he is absolutely brilliant at explaining them.
Tackle more problems and try to solve them. Then ask other people how they solve it.
Adding paddings to a UILabel can be achieved in several ways: 1. By subclassing UILabel and overriding `intrinsicContentSize `. 2. Using UITextView instead of UILabel, which has an API `textview.contentEdgeInsets = UIEdgeInsets(top: 2, left: 10, bottom: 2, right: 10)` 3. Wrapping the UILabel by a UIView and adding leading, trailing, bottom, top constraints with appropriate constants. [Took a look at stackoverflow for more details](https://stackoverflow.com/questions/27459746/adding-space-padding-to-a-uilabel). 
I know this has already been answered, but I was wondering what it would take to change this from MVC to MVVC or Viper or some other model. Seems like all the push to use MVC isn't such a good idea, but I don't see any other model coming out as a clear leader.
I love Ray’s tutorials. Super detailed on tons on subjects and a variety of experience levels. I’m 3 years into iOS dev and I still use them from time to time.
The nice thing about iOS dev is that you don’t have to worry too much about differences in hardware. AFAIK iPhones 7 and 8 shouldn’t have any differences as far as coding is concerned. iOS versions are where the changes happen but it’s typically additional features being added not breaking changes (e.g. force touch, AR).
Surprised they didn’t mention BaaS such as Firebase and AWS. They don’t provide a lot of customization but for a lot of simple apps that aren’t expecting a large user base - they are a good option and very easy to configure/use for someone without backend knowledge. 
cant thank you enough for the response!
You should skim Apple's "The Swift Programming Language". Swift has some pretty significant differences to the 'Java way' of doing things. It's quite short so it should take you only a few days to go through the entire thing. 
&gt; as a pro developer I understand that 90% of development is knowing the SDK and the ecosystem and the OS. So, um yes, why not learn the language bit by bit as you learn to use the SDK?
These are great! Thank you!
Don’t tie it to the bottom of the super view. Instead set a height constraint on your imageView. 
But what would I set the height constraint to?
I would set the contentMode to scaleAspectFill
The beauty of AutoLayout is that you can set anything equal to anything. So from what I see in the diagram, you want even spacing from the top, left and right margin. And you want the image’s aspect ratio to be fixed so that you dont get extra padding. So (in pseudo Auto Layout): 1 - Top Padding = 20px 2 - Left Padding = Top Padding 3 - Right Padding = Top Padding 4 - Fix ImageView’s Aspect Ratio I think this is the cleanest way as this way all you need to do is just adjust the top constraint and the image will squeeze or stretch however much you’d like, while maintaining aspect ratio.
If you don’t know the intended aspect ratio, set a greater than ‘x’ from bottom constraint then it should be fine 
That doesn't appear to be one of the options.
Which constraints are you trying to use so far? I don't see why you can't constrain the top, left and right constraints on the image as well as its aspect ratio?
What do you mean? Not an option for what your client wants? Because if is a valid property
You’d want to use an `MTLTexture` that you pass in as an argument to the a compute kernel with it’s usage mode set to `write`. Then in the kernel just write to the texture and it’ll be ready to use in CPU code. At which point you can convert it to whatever you need to save to disk. I’m sure you can find ways online to convert MTLTextures to CGImage’s and then later save to disk. If you just need one frame and not a sequence of frames then there’s no need to do all the CPU side stuff. All you need to do is run a single frame capture, which shows you the actual texture as an image which you can then save to your disk.
Right now I have 20px on the top, 20px on the left, and 20px on the right. When I try to constrain its aspect ratio, it just sets it to whatever the current aspect ratio is, which is way too tall. https://i.imgur.com/Is8i1a1.png
How do I fix the aspect ratio to the actual proportions of the image, rather than the current proportions of the Image View (which includes the extra padding on the top and bottom)? Here's what I'm getting right now: https://i.imgur.com/Is8i1a1.png
The default value is probably wrong, but you can edit the constraint in the right hand panel to change the aspect ratio to a more appropriate value (3:2 or whatever you're hoping for).
Ah, that was the issue. I set the aspect ratio to the actual dimensions of the image and now it looks great! Thanks!
Easiest way is to manually fix the aspect ratio in the storyboard and then add a constraint to the image using the "Add New Constraints" button on the bottom right. [This should help](https://i.imgur.com/j9p1z0e.jpg)
Add a height constraint where the multiplier is the aspect ratio of the image.
I'm a little late to this thread but beautiful app!
I can’t speak on jobs available and where other grads stand. Not sure if any HR people read this sub or not but a recruiter would be able to answer those questions. I am a mobile developer myself and what I’ve learned is that language and platform don’t matter all that much. It’s ok to use iOS and swift to learn a lot of the best practices in programming. Design patterns and good coding practices apply across the board. So just keep that in mind as you’re learning. If you jumped ship to android, you’d probably have 80% of it down. Just gotta figure out some of the nuances like the android lifecycle. That last 20% is hard to get though, which is why I’ll say depth in a particular technology is important. If you want to master iOS/swift and just be ok at python, android, etc I think that’s ok. True masters of a particular tech can be hard to find. I also think your portfolio is great. Employers will love seeing that you can actually build something. And AI is the future so don’t give up on that either. I know I didn’t answer your immediate question of a job out of college but I hope I made you feel ok about focusing on iOS! 
External dependencies should be copied to a directory in the app bundle, so you can grok that. I’m more interested in how and where people are injecting stuff into your app.
I CTO a medium sized company and can assure you that if you have reasonably good soft skills (play well with others, etc.) with a CS degree, you will have no issue getting a job straight out of school if you head to any major city. The other commenter is correct in just about every way. In addition to your portfolio make sure you have well crafted (commented, unit tests, etc.) code published to GitHub or some place similar. Having some experience with some server side tech (Node.js, Ruby, Python, Java, Go, etc. will also help you stand out). But most of all, just be easy to work with and like to solve problems. My team passes on technically great candidates all the time mainly because they didn't like their attitude. Feel free to PM me if you have any follow up questions. 
You know the regular, editing the binary, adding extra dylibs etc. So i'm looking to get a count of those beforehand with my original built and if it exceeds ( libs have been injected ) it'll crash the app. I don't understand how to implement this -- https://developer.apple.com/documentation/foundation/bundle/1408056-allframeworks#declarations or maybe something else
What is self? Where is this code?
As well as any good books for me too
You might be thinking backwards. Uinavigationcontroller is a container controller that contains your uiviewcontroller/uiview. So you don’t add uinavigationcontroller to a view. You add a view and it’s controller to a uinavigationcontroller. 
Bump. Still stuck on this. 
Go to a cocoaconf or rw dev con conference and do tutorials from books. See if there are any user groups that meet in your city.
honestly just read the book hacking with swift. It'll teach u all the fundamentals and its pretty good at explaining stjff
Ugh, I think Swift is too big. Looking at the source, why is there a feature in Swift to add a switch statement to a simple type like this: var name: String { switch self { case .btc: return "Bitcoin" case .eth: return "Ethereum" case .ltc: return "Litecoin" case .xrp: return "Ripple" case .xmr: return "Monero" case .neo: return "Neo" } }
How does doing it programmatically make cleaner code?
There is: for m in dataModels { m.save() } 
For me personally, I write my UIs in Code as it offers the possibility to easily colaborate with my coworkers via git. Oh you changed the placement and order of those buttons. Code: 3 lines changed. Storyboard: Fck you. 789 lines changed and you don‘t see what has changed in the gitlog.
If you are mutating a value object (which by modeling with a struct you are) this would be the expected behavior. I would suspect modeling with a class (a reference type) the forEach would do what you want. To me a save method, indicates an entity that has an ID and therefore would be correctly modeled with a class over a struct.
I know, you just used it as an example for a bigger point but to me modeling that example with a struct feels wrong. This method implies side-effects and/or access to class objects which throw you out of value-type territory. (Besides, saving should probably be handled by the model owner not the model itself.) To go on a small rant here (not against you), the struct circlejerk in Swift has gotten to big. People try to do everything with structs and it’s often plain wrong. I see it every time i check out a project on GitHub. 
Do whatever is easier for you. I work for the app of 1 of the big 4 banks in the US. We use storyboards and some programmatic layouts too on some view controllers. There’s over 50 people that work on the app. I personally enjoy storyboards as it’s easier to see your design. Using storyboards is not an issue at all for Git. We use Source Tree at work and just discard any storyboard files that say we changed but didn’t.
As someone who was learning iOS development and doing a degree at the same time, DO NOT neglect your school work because you’d rather do iOS. I regretted it so much when working on my first game. I’ve done iOS since 2013 but recently got a job as an iOS developer. I had 6 apps in the App Store at the time. I’m still working on my CS degree. I’m from Texas, and the job prospects are high in my opinion. I had my resume on Monster.com and would get up to 10 iOS recruiter emails a day around the US. And many more iOS jobs locally if I search on Indeed. Now that I got a job, the only recruiters emailing me are through linked in but that’s about 1-2 a week.
This doesn’t make sense. You don’t add UINavigationController to UIViews.
What many tutorial videos do is make 3 folders: Models, Views, and Controllers. This isn’t manageable in huge apps. The Models folder is to contain logic that has nothing to do with the user interface. In other words, model files should never have “import UIKit.” Views are like custom views. Custom cells, Xibs, custom buttons, UIView subclasses, etc. Controllers folder should contain UIViewController classes. At my job, over 50 people work on the bank app. We use MVC but separated into their own UI folders. This means that we have MVC folders inside a Welcome folder, MVC folders inside login folder, etc. So we have MVC folders grouped in their own sections.
Can confirm I got all those questions (not counting bonus section) in my interview at my current job.
[my long iOS development post](https://www.reddit.com/r/learnprogramming/comments/6dz1pi/do_you_want_to_be_an_ios_developer_maybe_even/?st=JBOR35IW&amp;sh=0d6e3564) 
that is good advice, thanks for that, much appreciated!
Although is easier to use storyboards/xibs, when you collaborate with other people is more convenient the programmatic approach. A good approach to render a live preview of your view controller is using Playground (Live views). This way you can test your programmatic views easily.
As a beginner the best ability your gonna wanna learn is how to search, your gonna be doing it a lot. If you try it now you’ll see the 1000 threads on this exact subject.
Pretty much this. Swift doesn't want you to mutate in it's standard iteration functions.
This question is now asked so often it deserves its own sub
I personally use a mix of xib files and code. Certain objects are easier for me to create and place in code, while other cases storyboards will accomplish my task in lightening speed.
This is not the same behaviour and does not compile. `error: cannot use mutating member on immutable value: 'm' is a 'let' constant` Even doing the immediate fix is incorrect as the struct's state change does not propagate back into the array: ``` for var m in dataModels { m.save() } print(dataModels[0].saved) // prints false ``` In this case OPs provided example works correctly: ``` for index in dataModels.indices { dataModels[index].save() } print(dataModels[0].saved) // prints true ```