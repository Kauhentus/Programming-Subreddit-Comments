IMO the best is to have a singleton Settings class that loads the saved values from UserDefaults in it's init (or creates the default values if there is nothing saved yet) and then in your SettingsViewController, you update your Setting class's values (and implement a didSet method for all of the variables that you want to be saved to automatically save the new value in UserDefaults) You can update your Settings when the text fields end editing or have a save and a cancel button. And then of course from other ViewControllers, you access your Settings singleton. edit: Or if you only want to support local IP addresses then maybe you could poll everything that's connected to the local network to see if they are the droids you are looking for and then have a picker to choose from them.
Sorry sender.text and textDidEndEditing are for iOS not macOS. Delete lines 56 + 57 , and delete "static" from the beginning of line 58 and move IPAddress near the beginning of your class so its not a variable just floating around in the middle of your class. [This is how we can listen for a text field change in macOS](http://i.imgur.com/TcYyU5d.png) Notice the textfield delegate on line 11 and implementation on line 23, this allows us to listen on line 26. If you add more textfields you can just change the tags to find out which text field you are dealing with. Overall this is just something to "get your code going" but its very far from best practice. If every button just triggers the remote control, you should probably just create one function that all buttons connect to and switch on the sender. That way you can validate the IPAddress everytime you press a button before it fires off any requests. Edit*: If you still cant manage to get it working then you can PM me and send the files over to iron it out. 
I'm using Firebase, I just have Facebook authentication. At this point my app is done so it's gonna be a pain the the balls to go back and add email/password login and integrate it with the signup process.
Ok, looks like I'll definitely need to remove email permission - I don't ask for the user's DoB so I'm good there. It's pretty much just their first name, then I get their profile picture from a graph request (which gets it from the public URL using their Facebook ID)
You could go ahead and tell the company it's a bad idea and a waste of time, you know, if you had any balls. 
So how are apps like tinder allowed on?
You are not supposed to access elements in an ArraySlice directly as they keep the same index as in the original Array.
any opinions?
Pro tip: use `method_getImplementation()` and cast the result to a function pointer like `(AnyObject, SEL, T, U) -&gt; V` where `T, U` would be the types of the method arguments (if any) and where `V` is the return type. Then you can invoke it yourself like so: let result = imp(target, selector, arg1, arg2) Edit: if you don't know the method you're trying to call at compile time, then yeah you'd have to bridge to Objc and use `NSInvocation`
good question. At the time I had done some testing with GCD and decided the latency was too bad to use (I'm writing MIDI software). Subsequently I figured out what the new priority levels mean (no thanks to the crappy documentation) and if I had to do over I may have written it differently. 
Nothing jumps out at me immediately in the code you posted. So the first place I would look is in interface builder where you have the connection to TweetInspectorTableViewCell.tweetImageView. Sometimes these connections can either be duplicated by accident or even be broken due to editing the IBOutlet after the connection is initially made. This can be very easy to miss and very frustrating to debug unless you know what you're looking for. First thing I would suggest: Find the connection to tweetImageView in IB, delete it, and reconnect to tweetImageView and see if that gets you any further.
This is true. I have gone through this issue with Apple, and here is what they told me, on the phone: If you want to provide Facebook login, that's okay, as long as you also provide an optional email/password login so that users can "opt out" of sharing their real name. For Apple to approve an app with only Facebook login, the app developer must make the case that the app requires some significant bit of Facebook features and can't work well without it. For example, Tinder requires Facebook, but it uses the FB friend graph and Like list to show common friends and interests.
Fine, I updated my example. It still works fine.
Excellent article about the good, bad and ugly of rewriting Uber's app using Swift.
Ray to the rescue: https://www.raywenderlich.com/123463/nsoutlineview-macos-tutorial
Aside from the practices of Uber, there are too few articles discussing iOS development at scale. Let's not toss out the good with the bad by making comments that discourage engineers from writing good technical articles that we can all learn from.
&gt; Let's not toss out the good with the bad by making comments that discourage engineers from writing good technical articles that we can all learn from. If those engineers aren't discouraged by the fact that they are creating unethical products, then they shouldn't be discouraged by people commenting on those unethical practices. But you're right, we may get get lucky and have some articles posted by ransomware or botnet authors who used Swift to craft their works. I'd hate to miss out on those.
Um um um um .... gets annoying after the 5th time you say that. Video is not watchable for me.
This was really helpful, thank you for sharing
cs139p spring 2017 is on iTunes U for free
Yeah, lets talk about politics, instead of software engineering... /s
Eh, let's be fair, Uber's practices are worth discussing and criticizing, but this isn't the right place for it.
Politics side is too much for me to read or watch engineering related content from Uber.
Yeah, but no it won't. UIViewController won't know the method "foo()".
Which bits of Foundation were pain points?
You could start with my own free book, [Hacking with Swift](https://www.hackingwithswift.com/read). It contains 39 projects that teach you Swift 3 and iOS 10 from scratch, and by the end of the course you'll have made lots of real apps you can improve, adapt, or re-use as needed. Did I mention it's free? ;)
&gt; Can someone explain how they caught unconditional unwrapping. Did they override the ! op and check if it's status against optional? They're using Lint in their revision control so you can't commit unconditional unwrapping. It works via static code analysis, rather than anything at runtime.
Ah! thanks.
I could get in on this. I have no amazing app ideas but I certainly need to do more programming, especially in swift. HMU if you still need anyone 
Your contradicting yourself. First you say that all view controllers shouldn't respond to `foo()` now you are complaining because they don't. You are going to have to choose either one or the other.
What's the segue hooked up to? Is it triggered by tapping the table view cell or a button inside of it?
It's probably "IndexPath" instead of "NSIndexPath" but you shouldn't need to explicitly cast it: if let indexPath = self.tableView.indexPathForSelectedRow { var DestViewController = segue.destination as! DetailViewController var SecondTableArrayTwo = SecondArray[indexPath.row] DestViewController.SecondArray1 = SecondTableArrayTwo.SecondTitle }
If there is no selection while preparing for segue then it will crash. Guard for selection else don't segue.
It worked! Thanks. Can you explain what I was doing wrong there? As far as I have understood, I was promising that indexPath shouldn't be nil, but it turned out nil and therefore it was giving me the fatal error? Thanks a lot! 
The indexPath wasn't nil, it just wasn't the type that you expected. indexPathForSelectedRow returns an IndexPath, not an NSIndexPath. So this should work too: var indexPath : IndexPath = self.tableView.indexPathForSelectedRow! as IndexPath var DestViewController = segue.destination as! DetailViewController var SecondTableArrayTwo : SecondTable SecondTableArrayTwo = SecondArray[indexPath.row] DestViewController.SecondArray1 = SecondTableArrayTwo.SecondTitle Though the compiler will probably complain that "as IndexPath" in this line isn't doing anything: self.tableView.indexPathForSelectedRow! as IndexPath It's usually best to avoid force unwrapping with ! since it will crash if your assumptions are incorrect.
Well.. it's not like government is a bastion of good ethics nor are inexpensive and reasonable to argue with. Uber was/is dealing with local governments incentivized to harass their drivers on behalf of other commercial interests. Flagging and avoiding that is not automatically unethical. Arguably, these government operations and Uber deserve each other.
Even if you believe that the government's regulatory position is primarily unethical as a reason to ignore Uber's Greyball program, that doesn't excuse the Hell program they were running to target Lyft drivers or the fingerprinting and geofencing system they used to hide the fingerprinting of user's devices from Apple.
I just know that after dealing with various government agencies, if I could write software that would skip around some of their idiocy and virtual racketeering then I would. But I don't follow every controversy about Uber or even use the service.
Surprised at how much extra effort had to be put into their project to handle the issues with Swift and Xcode instead of being able to devote that time and effort towards application features.
This is not an accurate statement of the problem. The actual problem is limited-precision arithmetic, not floating-point. The problem is also not a base-two versus base-ten problem. For example, consider software that calculates the price of three items that are sold three for a dollar. Calculating this as `1 / 3 * 3` will have a rounding error even if decimal arithmetic is used. It will produce .99999…9 for some number of digits. And rounding errors like this will accumulate. Advising people to use decimal arithmetic will cover many simple cases, where they are only adding and subtracting numbers with a few decimal digits and doing a few multiplications with small numbers. But rounding errors will occur with repeated multiplications (e.g., calculating compound interest) or dividing by any number that is not a product of a power of two and a power of five. Additionally, for some complex financial calculations, floating-point is appropriate. For example, evaluating options and other stock market modeling may use logarithms, exponentiation, et cetera. Generally in these cases, one is going to accept that there are rounding errors but, hopefully, evaluate how big they can be and design the software to tolerate the errors. Working with numerical software, for money or otherwise, requires attention to the properties of numerical arithmetic. Simply using decimal is not a complete solution; the programmer needs to know how numerical arithmetic works (and how it differs from real-number arithmetic) and how to limit, correct, or workaround rounding errors.
It's varied I guess. I released 3 apps so far. No problems whatsoever. However, I do have Google authentication as well.
The general approach you described seems perfectly reasonable, and using firebase as the server part of the system is probably the easiest option. I assume by notifications you mean push notifications. You might want to reconsider that and use firebase's realtime database stuff. I've never really used firebase but I can tell you that push notifications are an unreliable PITA, and lots of users turn them off anyway. It's probably a lot easier and more reliable to bring up a realtime link for the ten or twenty seconds it will take do this sync, especially since I **think** firebase makes this pretty easy.
I don't think it is a bug with Xcode. I've trying printing out the bounds of the view in various functions like init, layoutSubviews, and awakeFromNib. I can see that the view's bounds are being recalculated by the time that layoutSubviews happens but I am trying to have the view loaded in init and then updated by my controller via another refresh method when players move pawns.
It's a bit more complicated than this. A lot of the UIStuff doesn't have a direct NSStuff counterpart, and if it does, they're bound to have much different implementations.
Anyone know if they ever open sourced that file inspection tool they're using? Would love to drop my apps into that
Personally, I've seen crashes / discrepancies when using dates (Date, DateFormatter, Calendar, etc), and `Scanner`. I'm sure there are plenty of other examples.
Sounds like your constraints are either not there or are wrong
This so much. I actually got my current job because out of all the mobile devs interviewed, I was the only one that knew native coding and the job was rewriting all the apps that were written using 3rd party tools. Not only did those apps just not work well, but they needed immediate support for the latest OS version and third party tools can't provide that. Native really is the way to go. As for the weird animations and view issues, the weirdest one I ever saw was the first app I rewrote (it was a Phonegap app). It had a tool bar at the bottom that would just randomly start scrolling with the page and stop in the middle and you'd have to scroll up or down to see around this bar. Users of this app (it was an in house app so I met with them) were pissed that they had to work like this for the past year since the apps release. 
You're asking which 500 mile journey you should take and you're saying you've already got 100 yards in on one particular direction. Do whichever will make you happy for then next 3 years and pivot if and when you feel the need to pivot. Senior web devs will pick up iOS development in a matter of months and vice versa. Become a great developer. The best way to get there is enjoying the journey. So pick whatever direction makes you happy and start moving.
So when app store first launched I had a quite OK app on the app store (developed by a company), and I saw the opportunities that gave and I have since then had an interest and a wish to code on ios as a hobby. However I have rather spent time on building sites, shops and also a few web applications using node.js. All in the interest of getting knowledge. My career path is not necessarily related to this but I believe there will be things I learn from "webapp" path that I can utilize in my daily work (Big data, Business intelligence and reporting). I wouldnt think that coding on IOS would give me that much extract for my job. Im programmed in a way that when I try something and dont finish I will think about it over and over. So developing for iOS just seems fun and would give me nicer looking apps, however the creating something for the web would at least get me started faster.
I do think it is a bump in the road having to pay 100$ for a license which I mostly will use for fun and if im able to get an app out there it wouldnt be great compared to the professional ones. I had a few apps in 2009 and I have been a part of the development for quite some time. Sucessing now is so much more challenging now
I might repeat some of my answers to other comments, however I had an app on the app store in 2009 until 2014. After that I have always been tempted to try to learn(even though I have given up a few times). On the web however I already have a domain, server and the skills to put things together. But then what is the fun of that :)
No UI technology is really going to transfer. It's very different from any platform (web is generally the worst type of UI technology, its incredibly sloppy). Your web knowledge could transfer to other web only platforms, but for any type of computer system or devices like an iPhone or iPad or Android device that isn't going to transfer. There isn't much to learn with interface builder, you'll see its vastly superior to web UI design methods. You literally just drag, drop, and add constraints quickly. Its very quick. 
&gt;Yes, all my programs are written for in-house use. Using Xcode and simulator is free but you still need to sign on as a developer and pay the $100 or so per year to use it to on a device. Even if it's your own. That doesn't involve the App Store. This is not true. You haven't needed a paid developer account to deploy to your own device since iOS 7. If you have a Mac and an iOS device, you can compile your own apps and deploy them to your device with a free account, and this has been the case for several years.
Basically, in Objective-C, you should never use atomic, because it does more work but not enough. If you're not accessing the value from multiple threads, it's useless, and if you are, then you need additional locks to ensure your logic is correct, generally rendering it pointless to use atomic. Hence, why it was dropped from Swift.
Combined with OOP, when you "get" something from an object, or spin it in some way that creates no side effects, that's "functional" From my (relatively inexperienced) point of view, we code at too high of a level to worry about attempting to be near pure. We want side effects. We want state change. We just ALSO want to control those changes and have a full understanding of what they are.
I'm really behind functional programming now for two reasons: 1. I can put a huge amount of work on one line. 2. Unit tests are a doddle to write. Recently I needed to take an array of objects, get only those that had one parameter that was true, from those get a String value, then do something with that String. I don't remember the exact code but it was something like: let _ = objectArray.filter{ $0.boolValue }.map{ $0.stringValue }.somethingElse Awesomes. Today I was helping a colleague do something in ObjC and trying to work out how to modify an array the normal way was a challenge for a moment. 
Hi goods_and_services! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/67yr3o/app_for_following_the_evolution_of_swift/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
They don't explain why ABI stability is a deal breaker for them, just that it is. Surely they could just ship a new precompiled framework for each Swift release?
Didn't notice that change. Although I always just renew it because I expect to eventually add some.
I don't know, some of the "pro" apps aren't that great. Guess it depends on your niche. Although it's certainly ever more difficult to find a niche that hasn't been populated. But according to the other reply, you don't even need to pay to use your own device anymore.
Today, the latest version of Swift is 3.1, so chances are if you ship an app tomorrow, your app bundle will contain the Swift dynamic libraries for 3.1, however, there are plenty of apps in the store right now which link 3.0, 2.3, and probably even some older apps that link 2.1 and earlier. Nothing is stopping me from downloading your app (on 3.1) and my app (on 2.3) and running them side-by-side on my iPhone with iOS 10.3, since both apps link against their own bundled version of Swift. It's exactly the same as you bundling Alamofire 4.4 and while I bundle 3.0. When a language is ABI-stable (Application Binary Interface), that means it is packaged and linked with the operating system itself, in this case: iOS. The Swift code you compile on your computer has a binary interface into the operating system itself rather than any dynamic library you bundle with your application. Because of this, Apple has to be able to guarantee that my Swift code, when compiled to machine code (bitcode, LLVM-IR, yada-yada), will be able to interface properly with the rest of the operating system, and (probably more importantly) will not break between versions of iOS / Swift. As it stands today, the Swift language specification and compiler are not in a state where the Swift team would feel comfortable making this promise of ABI-stability; changes to Swift are still too frequent and the roadmap is still too long. As soon as the Swift library is merged into iOS, it becomes much *much* harder to make big changes. &gt; Why does it matter? * Yes, the bundle size of your application will decrease because you will no longer have to include the Swift standard library in your Frameworks folder, which is nice. * Language changes will be smaller / less frequent, so you won't have to worry about events like migration from Swift 2 -&gt; 3 (I'm still scarred from that) * Developers will be able to create 3rd-party libraries written in Swift and distribute pre-compiled frameworks (binaries), because they no longer need to bundle the Swift standard library into their framework, and will instead be linking against the same version of Swift as your app (the one packaged with iOS). Edit: formatting
I use flatmap and optionals all the time to write conditional free code Reduce, map, filter, for-in and for each all have their uses with that. 
The latest Paul Hegarty Stanford course has rigorous and comprehensive lectures. Apple's Swift book serves as both a textbook and reference, emphasizing the language rather than an app's overall architecture. Apple also has a beginner's guide which walks you through creating a food reviewing app. Quora's Swift topic is great for general questions and seeing how concepts are explained from different perspectives, while Stack Overflow is best for specific problems.
&gt; two classes totalling 17000 lines *shudders* Good luck! We're rewriting an old Objective C app in Swift, because maintaining that mess is just impossible.
Never come across the zip function before, that could come in really handy. Thanks!
I should have added that all this code does is get json data from our API and store it in Core Data. Rather than refactor the API to return data that can be better sent to a client, my boss wants to keep all the logic in the app. That's why I'm looking for a new job. 
The general gist of this is correct, but the definition is a little off. ABI stability doesn't mean that it *is* packaged with the OS; it's just a necessary step to make that practical. Without a stable ABI, the OS would need to include a copy of every library compiled with every version of Swift, which would rapidly get out of hand. As an example of the sort of thing it covers: when you call a function, your code puts the arguments into particular registers, then calls the function, and it looks in those registers for the values. *Which* registers to use has to be agreed on between both functions, which is known as the "calling convention", and is part of the ABI. Another example is that Array used to be 24 bytes, and is now 8 bytes (data that used to be stored inline moved into the heap buffer it points to). If a new-style 8 byte Array was passed into code compiled assuming 24 byte Arrays, the older code would read uninitialized memory trying to get to bytes 9-24. Once the ABI is locked down, the Swift team will be unable to make any further changes like that (or at least will have to jump through a lot of hoops to guarantee compatibility).
Why?
Take a look at my own course, [Hacking with Swift](https://www.hackingwithswift.com/read). It's fully updated for Swift 3 and Xcode 8, it's project-based so you make real things while you learn, and it's completely free to read online. Plus, I come by /r/swift regularly, so you're welcome to ask questions.
&gt; .reduce("", +) Reducing stuff is often the wrong tool for languages which aren't functional, and this one's no exception: there's a `joined()` method which does exactly what you want and will likely be much faster than a reduction because for each reduction you are copying the current accumulator (to a new string) then appending the current item to it, and returning it. Also keep in mind that by default Swift sequences are eager. The `sorted` step is necessarily eager (it outputs an array) but `map` is allocating a new array only to throw it away, though not sure how well Swift optimises lazy sequences so here it may well be a wash. 
`inout` reduce got accepted into the language a couple days ago, so with Swift 4 you'll be able to reduce to mutable objects without any overhead of recreating intermediate objects for each iteration. 
Thank-you so much for your reply. It's pretty close now, but I seem thick with this stuff. Xcode doesn't seem to like the "!" to assert IPAddress within the url (on your line 17). It also doesn't like the line below that, which starts with "if let"; "Intitializer for conditional binding must have Optional type, not 'String'. :(((( 
no, im converting an older version to 2.3
`children?.map { Person(...) } ?? []` would yield the same result, and no need for two maps
&gt; As you can see, the code is almost the same. Yes, but not quite, and once again *this will not fix the behaviour of OP's code* for exactly the reason I stated. Why are you so intent on "improving" the wrong method to do something when the right one is already available?
Thanks for the ideas! I'm personally not a big fan of lectures for learning to code, I can only focus on someone talking about programming for ~10 minutes :). I do much better getting just enough information to start coding and then get my hands dirty. But haven't tried a lecture for a while, worth a shot!
&gt; Yes, but not quite, and once again this will not fix the behaviour of OP's code for exactly the reason I stated. The reason you stated: &gt; because for each reduction you are copying the current accumulator (to a new string) then appending the current item to it, and returning it. Which is rectified by reduce being allowed to have an inout parameter, which will be available in Swift 4, as in the example I posted above. In OP's special case it would've been better to use the builtin `joined` method, but you cannot substitute joined every time you would be able to use reduce in the general case. I was arguing against your blanket "Reducing stuff is often the wrong tool for languages which aren't functional, and this one's no exception" which is not true, especially when we are getting a reduce that won't produce useless intermediate copies in Swift 4. That's why I mentioned inout reduce in the first place. 
Thats awesome man! I wish I started as young as you! You can PM me and we can share emails or something.
&gt; It's "rectified" by using a different operator in a different manner, yay. And yet the one obvious way to do it which OP posted is still broken which you apparently can't bring yourself to understand. If you are a developer and you don't know the difference between `+` and `+=` or a Swift developer who doesn't know the difference between `.append` and `.appending`, no one can help you. You'll make the same mistake coding up a regular iterative solution as when using reduce, because if you don't know the difference, your loop body will be `value = value + currentElement` in both cases. What OP posted is not the "one obvious way" to do it, it is the *only way to do it right now*, so OP couldn't have posted anything else. Nobody is forcing you to use reduce, and if you'd rather stay away from using something because you're afraid it is the wrong tool for this language, that's your decision. 
It's less of a functional/imperative thing and more about the data structure, IMO. For instance, `reduce` is a perfectly respectable way to build up tree-like structures, like a [skew heap](https://en.wikipedia.org/wiki/Skew_heap): enum Heap&lt;Element&gt; { case leaf indirect case node(Element, Heap&lt;Element&gt;, Heap&lt;Element&gt;) } func insert&lt;Element: Comparable&gt; (_ tree: Heap&lt;Element&gt;, _ x: Element) -&gt; Heap&lt;Element&gt; { switch tree { case .leaf: return .node(x,.leaf,.leaf) case .node(let y,_,_) where x &lt;= y: return .node(x,tree,.leaf) case let .node(y,l,r): return .node(y,insert(r,x),l) } } func heapify &lt;Seq: Sequence&gt; (_ seq: Seq) -&gt; Heap&lt;Seq.Iterator.Element&gt; where Seq.Iterator.Element: Comparable { return seq.reduce(Heap.leaf, insert) } On the other hand, even in Haskell you wouldn't use reduce to build up an array.
Noted. Will upgrade my mid2010 MacBook pro with an ssd and get starting:)
Before you invest in any upgrade, double check if you will be able to run the latest Xcode and Swift 3.1 on your Mac. Personally, I've installed Xcode 8.3 and Swift 3.1 on a 2011 MacBook Pro (8 GB of RAM, no SSD though) and it was dog slow. 
If you can run macOS Sierra, yes it should work (probably slow, but it will work).
What is your end goal? Do what you want to do. Do you want to make iOS apps with Swift? Then go ahead. I'm not sure what you're really asking. &gt;Or would it make more sense to invest time in building web applications I mean... if you want to do that, go ahead. What's your end goal? &gt;or would I be able to utilize my knowledge of web design when building apps? I mean... you could if you're making custom UIWebViews to display information to the user. I'm making an ESL English app and I use UIWebViews to display the content, because it makes it easy to format headings and paragraphs, etc. with CSS.Basically, the UIWebView uses an HTML string and a CSS file to load the view. 
Don't know, on a 2013 Air (with 8GB RAM + 512 GB SSD) the performance is decent.
If I came here, I wouldn't ask whether I should learn it or do web development. What I would've asked is what are some good resources to learn it if I have a background in web design if it made a difference. 
I'm on my phone at the moment make sure you add the question mark on line 15 , it turns type String to an optional of type String that should fix those issues. 
maybe this helps: http://stackoverflow.com/questions/25726436/how-to-execute-external-program-from-swift#25729093
in code where performance does not matter
You could build the course's calculator app as he walks through it in the lecture, or your own simple app and apply the concepts to it. 
This happened April 15th?
A local variable with a struct or enum type is stored on the stack. Collections allocate their storage on the heap, although the compiler is able to optimize them to stack allocations in some cases. In general think of value types as having certain semantics (mutation is local and the value is unique) rather than how they are stored.
I think that reduce is quadratic. 
Cool. Was thinking on porting Night Driver from Atari to Swift.
Recommended order should these vids be watched in?
Are you talking about a macOS app or iOS. I dont' think Process is available on iOS, but I could be wrong. Here is a script I use to extract values from Info.plist. This script executes as part of the build process of an iOS project. It sounds like yours will be executed at runtime. Hopefully you can get some use out of it. class PlistExtractor { let plistBuddy = "/usr/libexec/PlistBuddy" func extract(_ value: String, plistPath: String) -&gt; String? { let readTask = Process() readTask.launchPath = plistBuddy readTask.arguments = ["-c", "Print " + value, plistPath] let readPipe = Pipe() readTask.standardOutput = readPipe readTask.launch() let output = readPipe.fileHandleForReading.availableData guard let extracted = String(data: output, encoding: String.Encoding.utf8) else { print("Error: \(scriptName) could not extract \(value) from \(plistPath)") return nil } return extracted.replacingOccurrences(of: "\n", with: "") } } If your script is bundled with your app, you can get the path to your script like so: let path = Bundle.main.path(forResource: "myscript", ofType: "sh") Also if you're going to block your thread, be sure to execute your code on a background queue. DispatchQueue.global().async { // your blocking code } 
I'm afraid I mostly do books – it's the only way I'm able to offer my [lifetime update policy](https://www.hackingwithswift.com/update-policy) without going crazy! Hacking with macOS was written specifically for macOS Sierra and Swift 3, and contains 18 projects that teach you a wide range of macOS APIs. It is, however, only a book. It will give you one credit towards my [Frequent Flyer Club](https://www.hackingwithswift.com/frequent-flyer), which contains quite a few videos. An alternative is to look into the work of Stephen DeStefano. He's a friend of mine, and with my permission makes videos of my books. You can find his full listing [here](https://www.udemy.com/user/stephendestefano/), and it includes the macOS course. 
I can second Hacking With MacOS. I had a lot of the same concerns as you did (being a Mac OS X Objective-C type guy), and ultimately /u/twostraws awesome responsiveness made me give it a go. In my case I already knew Cocoa, but from the examples in his book, I have an excellent feeling that you'll pick up the Cocoa stuff easily. _Great_ book. 
Awesome! I hope you tried the Frequent Flyer Club :)
I'm running into a similar issue and being tight on money it's extremely difficult to find any sources that are up to date and targeting macOS. Any resources(videos/guides/free ebooks) would be appreciated.
We could try to make the subreddit /r/macprogramming active.
https://github.com/apple/swift/blob/master/docs/ABIStabilityManifesto.md
First, thank you for the amazing answer! If I did want to add 'other' items to the bowl like rusty nails I can just create a variety of Protocols, but try to group them...right? Because I am thinking of trying to ..grade? or evaluate the bowl..so the user can set the parameters of what he/she thinks a bowl should consist of, and then score that against what the bowl actually has...so if it SHOULD have 2 red apples and 3 green apples and no rusty nails but ACTUALLY has 2 red apples, 1 green apples, and 1 rusty nail...that calculate into a score.. 
Thousands of files of C++ cryptic. &gt;The point of compiler and language optimisations is that users don't notice and don't have to care about it. Every language and compiler is like this. That's such a weird sentiment. Programming is the only scientific field that expresses anything like this. Nowhere else in the scientific world would somebody even begin to tell you "a superficial, surface level understanding is all you need and you shouldn't bother with understanding more." I'm an academic, so maybe I prefer the opposite too strongly. But it seems like there's a tangible resistance from the community to understanding how the compiler works unless you're an experienced, proficient C++ compiler engineer. Aside from that logic, Swift's dispatch system is fucking cryptic. Pick ten functions in a large program of yours and figure out what dispatch method will be used for each of them. I've learned the dispatch system and I work at my current job due to my relevant expertise in Swift and I'm still frequently wrong. Not to mention just how backwards using a `Protocol` as a type makes the `struct` vs `class` paradigm. They both become heap based, dynamically dispatched and `struct`s become incredibly redundant and cumbersome on the ARC system. Before I saw this video the first time, I was relying on an incredibly incorrect and misleading mental model of how my data structures were working. Hell, figure out the runtime of a standard algorithm using static dispatched structs then work in some PWT magic and see if it changed. A big issue here, in my opinion, is the fact that the Swift compiler de-optimizes to enable fancier mechanisms such as `[SomeProtocol]` with `struct`s. My stack based data structures disappear. I'm not saying this is a problem with Swift, I'm saying that the opaque "just understand the superficial language" is moronic when your language is this contrived in it's implementation. Apple needs to write a book on how to avoid these potential pitfalls and how to understand these complex subtleties. 
Consider making a new project and take it one step at a time and see where it doesn't work. You have multiple errors and you got some good advice from the other commenter
&gt; Since Swift array &amp; dictionary are value type They're not value types, they're COW types: a reference type inside a struct type with some extra magic sprinkled on top (to copy the inner reference type on modification). See [this short example of creating a COW type](http://stackoverflow.com/a/32984259). &gt; are they stored in stack instead of heap? The actual content of the array or dictionary is on the heap, referred to by a small struct on the stack. You can confirm that by calling `MemoryLayout.size(ofValue:)` on arrays of various sizes, `[]`, `[1, 2, 3, 4, 5]`, and `Array(0..&lt;100000)` have the exact same stack size (8 on my system) despite needing respectively 0, 40 and 800k bytes of "backend" storage.
Thanks a lot! I was hoping there was a away of doing my own filters without GLSL. I know in Java I used buffer image, got an array of the image pixel values and had a loop going through each pixel. I was kinda hoping there was something like that in swift. Kinda annoying there isn't one though! (I know they are two different languages) thanks anyway
the use of `do` for side effects seems pretty much in line with RxSwift standards to me 
So I read an article (which I strangely can't find now) that says POP is replacing OOP, and that using class's will no longer be practiced....did I read that wrong or is that really what the future holds *Edit* I found it, in it the author says, "It means we have to gradually forget about writing classes and starting writing protocols instead."
I would really highly recommend learning how to read Apple's documentation. It's a skill but once you have gotten used to it you have one of the best up to date sources available. [Apple's CoreLocation](https://developer.apple.com/reference/corelocation/cllocationmanager) For a direct one to one updated tutorial, I haven't been able to find one but you could use this one on geofence that is Swift 3 [Geofence](https://www.raywenderlich.com/136165/core-location-geofencing-tutorial) and compare it with Apple's and the old RunKeeper one here [RunKeeper Tutorial ](https://www.raywenderlich.com/97944/make-app-like-runkeeper-swift-part-1). Hope that helps some. 
X-Post referenced from [/r/iosprogramming](http://np.reddit.com/r/iosprogramming) by /u/Palleas [Synchronizing colours from an Xcode project to a Sketch document using Swift and Sourcery](http://np.reddit.com/r/iOSProgramming/comments/68i4cb/synchronizing_colours_from_an_xcode_project_to_a/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
That should work fine, UI wise. Usually the hardest part is the bottom up scrolling with proper animation, along with pull to refresh from the bottom as well. Table views aren't really designed for either of those things and can take some work to get right. Plus many of the libraries offer things like custom cell animations, like dynamic behavior when scrolling, like the messages app.
By "ease conflict" do you mean "force one person's opinion of how code should be formatted on everyone?" God, programmers can be anal but I don't see more anality as the solution to the problem. Down vote me into oblivion if you want.
[removed]
You have complete control over the rules you want to enforce. No one's opinion is forced on you - it's just a tool to make it easier to make your codebase's formatting consistent.
First think thru what you think should happen logically. A message starts with a person/group. As new messages come in the go to the bottom of the stack, and the most recent message is typically visible there when it comes in. There is an "automatic " animation pushes everything else up. That scrolling behavior is opposite how most scrolling works, but in this case it is expected. That is all fun and good...unless you are reading up the messages, say somewhere in the middle. So in this case that new message is NOT automatically shown. No animation is run. At least until the reader gets back to viewing the most recent message. 
I tried to turn your GitHub links into [permanent links](https://help.github.com/articles/getting-permanent-links-to-files/) ([press **"y"**](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) to do this yourself): * [apple/swift-evolution/.../**0147-move-unsafe-initialize-from.md** (master → e54e659)](https://github.com/apple/swift-evolution/blob/e54e65955e6d6d7074f2e9ea2bb36f50441a5064/proposals/0147-move-unsafe-initialize-from.md) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dgyx0p8.)^.
Swift Clean is another one that has an online voting system to enforce a community standard.
Y'know, I was just having a shot at updating to current prerelease Swift, and wondering that myself. I think you're right.
Thanks for the help!
Thank you very much for this. Just started reading the documentation last night, and as you said it's a skill in itself. 
Hey are you going to finish this tutorial… Maybe add a search bar and some other features?
Awesome. I think both of those are a must. I'd also like to see you add an image next to the text on the table view. It would be cool if the user could have the option to add an image. You could have a the image show up as a preview next to the text and then when you click on the image it enlarges. That would be great! Thanks for your work!
This is easily achieved with minimal work, 2 lines of code
&gt; A big issue here, in my opinion, is the fact that the Swift compiler de-optimizes to enable fancier mechanisms such as [SomeProtocol] with structs. My stack based data structures disappear. There's really no way around that for values of protocol type. The exact concrete type stored inside the container is not known until runtime, hence the heap allocation and dynamic dispatch. If you have a generic parameter 'T : SomeProtocol', then '[T]' will store the values inline, and a local variable of type 'T' will be stack-allocated, etc. I know that's not the same thing as a value of type 'SomeProtocol', but it's worth keeping in mind when you design your APIs and data structures. &gt; I'm not saying this is a problem with Swift, I'm saying that the opaque "just understand the superficial language" is moronic when your language is this contrived in it's implementation. I agree. &gt; Apple needs to write a book on how to avoid these potential pitfalls and how to understand these complex subtleties. The implementation is still changing rapidly as internal representations change and new optimizations are implemented. Once the language reaches ABI stability such a guide would become more feasible to write.
&gt; I was also talking about good language design. If the language is design in a way that optimises for you, without you having to think about it, that's good design. The goal is to not have to think about this stuff. A good language will optimize 90% of common cases without the developer having to think about things; for the last 10%, documenting internals is important. At the very least it will give an authoritative source for questions about memory layout and dispatch and prevent the spread of incorrect knowledge.
 I'm only a beginner in swift, but experienced in other languages so I can only answer the less languages specific questions. &gt; &gt;They told me to write clean code, so I removed all the comments I had because it made it look really ugly. Is that a good thing? It's definitely not what they meant. Clean code means your variables, classes and methods are well organised and clearly named. There is usually a discussion about commenting code: one says always comment, the other says comments shouldn't be necessary when your code is written clearly. I tend to go for the latter. &gt; &gt;Also, if you have multiple lines being assigned a value, do you indent to make them easier to read and keep their initialization aligned? &gt; Not sure what you mean here, but indentation is usually meant to represent different levels like nesting. Use Xcode's automatic indentation (CTRL+I). If it changes your indentation a lot, stick with Xcode's. If you mean a very long string that you broke up in lines.. I wouldn't know the preferred formatting either 😳 
I didn't force unwrap; I was just curious because for unwrapped lines can be indented and look cleaner haha but I wouldn't do that.
Ok got your point. But still to take SSL certificate from trusted CA, remains the best in place of the self-signed certificate because if any information will steal then you can claim warranty offered by certificate authority while in self-signed you can't.
Aligning like that is not uncommon, but there is a downside – it can cause problems with version control. Imagine you have this file: let someVariable = 0 let someOtherVariable = 0 Now you add a line and fix the alignment: let someVariable = 0 let someOtherVariable = 0 let yetAnotherVariable = 0 Now in terms of version control, rather than simply adding a line, you've added the last line and changed the first two. To start off with, that's less readable when reviewing the diff, it points `git blame` to you if any of those lines contain a bug that's discovered in the future, etc. It's just bad practice to muddy up version control that way. But then somebody else, at the same time, also adds a line: let someVariable = 0 let someOtherVariable = 0 let weHaveALotOfVariablesNow = 0 The same thing happens to them – rather than adding a single line, what they are actually doing is changing the first two lines and adding the third line. Now we get to the real problem – when we merge the two, Git sees that both you and the other person have modified the first two lines, and flags it as a merge conflict. You then have to solve that manually. Now imagine you didn't keep them aligned. Your change would be simply to add a line. The other person's change would be simply to add a line. Git can merge that automatically, no conflict, no manual resolution needed. Or if you're using something like GitHub, it can mean the difference between clicking a button to accept a pull request, and asking somebody to fix things up first then waiting around for them to have time to look at it again. 
&gt; They are still value types, just with CoW optimization. CoW is not an optimisation, it's an additional feature. Without CoW, they'd be outright reference types given (as far as I know) Swift does not have C++-style copy constructors. &gt; The use of reference type buffer is an implementation detail There is no way in hell you can stack-allocate an arbitrary-sized hashmap so it's either that or an unsafe pointer, which is semantically no different from a reference type.
I think that muddling safety in with style is a problem. The compiler should warn about safety, or failing that a static analyser. This is not the job of a linter nor should it be, for one thing not every coercion is born equal and really you need to parse the language properly to know. Correctness should not be down to the linter. And I think that whilst a fairly consistent style across a project is nice, it really is not as important as everyone says. What I think is far more important style wise is writing each piece of code, every expression, every line, as clearly and as simply as possible within the context it is in. Simple things like adding a couple of spaces to line up certain parts of code can really add to clarity, or grouping arithmetic expressions. Sometimes a statement all on one line is clearer than splitting it, sometimes not. Style is _not_ automatable, it requires thought and artistry and a linter cannot provide that. So it is best a crutch, and worse an active force for bad as it can either require you to make the code less clear or pollute it with rule disabling comments which themselves can really impact clarity. 
The advice by another comment on using Result&lt;Token&gt; (or Either monad) is solid. Observable error should be reserved for unexpected / fatal errors. 
Thank god someone else agrees with me on this, I was starting to feel quite alone. I have found that having a linter makes _more_ code reviews about style when they really should be concentrating on correctness, not the other way round. I hate the things. 
A closure with captures is a tuple of a context pointer and a function pointer. IOW a pointer to the heap allocated context and a function pointer is returned by `makeIncrementer`. `runningTotal` is a reference counted box on the heap, captured by the context of `incrementer`. In fact, all variables in Swift are initially a reference counted box. They are promoted to the stack as appropriate only after a mandatory optimisation pass. If you are interested in a deeper touch, [the first half of the Swift Intermediate Language talk from Groff and Lattner](https://www.youtube.com/watch?v=Ntj8ab-5cvE) has touched on this.
Because the reality is it is pretty hard to get the linter rules set up exactly as the reviewers want. So every code review becomes a linter rule review instead of a does-the-code-actually-do-the-right-thing review. 
**Solved!** I just had to read the value from my Firebase Database. I avoided errors using guard let. Any criticism regarding my code would be great! *** let FirebaseUID = FIRAuth.auth()?.currentUser?.uid let ref = FIRDatabase.database().reference(fromURL: "https://fitkeeper-af477.firebaseio.com/") ref.child("Users").child(FirebaseUID!).child("photoURL").observe(.value, with: { (snapshot) in guard let photoURLValue = snapshot.value else { return } let photoURLStr = String(describing: photoURLValue) guard let photoURL = URL(string: photoURLStr) else { return } DispatchQueue.global().async { let userImageData = try? Data(contentsOf: photoURL) DispatchQueue.main.async { self.userPhotoImgView.image = UIImage(data: userImageData!) } } print("User: \(photoURL)") }) }
You should definetely not force unwrap. The point of optionals is that you ideally should execute some other code ( e.g. call a completion handler with an error if parsing json) if the value is nil. Also, i'd take a careful look at the [ray wenderlich style guide](https://github.com/raywenderlich/swift-style-guide) on tips how to write "clean code"
True! If you can make sure an optional variable had a value, the !-s are okay. I'd still go with if lets and guards just to completely remove the possibility of crashes/remove the ugly exclamation marks ;)
I disagree, most of the examples out there are very simplistic and the syntax for them is not very indicative of what they're doing. The readability, unless you know them, is pretty bad. I'm actually not allowed to use them at work for this reason, since other devs have trouble reading through them. The biggest problem IMO is that the autocomplete suggestion doesn't match at all what the function itself expects. There's also too many different ways to write them. 
Right, I see where you're coming from. I don't really see that as being a problem with linters though. In fact, I see linters as helping with that – linters eliminate unnecessary discussion about style by reducing the number of style infractions that make it to code review. And if it's debatable? They will discuss it regardless of whether a linter is used or not. So you may as well use a linter to eliminate a large number of those discussions ahead of time. Every style infraction picked up by a linter is a style infraction that you don't have to discuss in code review.
This is roughly what I'm looking for in clean code: * Good names(accurate, descriptive, and where possible concise) * No big chunks of whitespace for no reason * Standardized comment blocks for every class &amp; method(preferably including @param and @return descriptions). * One line comments for member variables * No other comments unless necessary for particularly tricky code(especially no commented out code). * Methods grouped by type and marked with // MARK: (overridden, public, private, Whatever Delegate/DataSource, etc) * As few optionals and vars as reasonably possible...where possible pass into init &amp; use non optional let rather than just exposing optional vars that have to be set at a later date or stuff won't work. * As concise as possible without making it hard to read.(no copy paste, factor it out into a method, bonus points for using map, filter and friends rather than vars and loops) * No force unwrap, and no implicit unwrap(except IBOutlets). Lots of companies just 100% ban force unwrap from their codebase. Learn the other tools and write an extra line or two where needed to avoid the ! crash.
Do I have to add line comments for member variables? That would make it very messy when the variable name is already self explanatory. &gt; No implicit unwrap (except IBOutlets) I see it get done A LOT in tutorials for class properties. For example, I have the following: var title: String! var imageURL: String! Is this bad? So should I just not make them implicitly optional at all? All of these values are initialized when the object is made. So if no force uwnrap, then what about something like this: var urlStr: String = "ValidURL" var url = URL(string: urlStr)! If I remember; it is the URL struct.
Try casting to an array with specific data type like "as? [Any]". NSArray is a wrapper class that can hold basically any object class, whereas Swift Arrays are tied to a specific class type. btw: don't​ use NSArray - that's ~~Objective-C~~ Cocoa
Yup, I casted it as [String : AnyObject] which works but I didn't understand why Array wasn't working. Thanks!
Glad you solved it :) Some code review: You can combine guard statements into one. Be wary of the force unwrap you're implementing with the "!" on userImageData. Maybe you can unwrap it first, or replace the "try?" with a "try", which means you will have to deal with the error (which is a good thing!)
Totally different. Array is a value type, NSArray is a reference type. Array can hold value types. NSArray only holds other reference types.
Did you cast the JSON as `[String : AnyObject]` ? or just an array inside the JSON? 
Here's the code, it's a bit messy but I'll refactor it later... do { let jsonData = try JSONSerialization.jsonObject(with: data!, options: .mutableContainers) as! [String : AnyObject] guard let results = jsonData["results"] as? NSArray else { return } for movie in 0..&lt;results.count { guard let movieDictionary = results[movie] as? [String : AnyObject] else { return } let title = movieDictionary["original_title"] as! String let year = movieDictionary["release_date"] as! String let cover = movieDictionary["poster_path"] as! String let synopsis = movieDictionary["overview"] as! String let movie = Movie() movie.title = title movie.year = year movie.cover = "https://image.tmdb.org/t/p/w500" + cover movie.synopsis = synopsis movies.append(movie) print(movie.cover!) } DispatchQueue.main.async { completion(movies) } } catch { print(error) } 
Swift does a good job of bridging the two, i.e. making it so that you don't have to worry about which you choose, however sometimes it's just not possible so you need to specifically typecast your `Array` to be `NSArray`. I can't imagine many Swift developers would choose to use `NSArray` on a regular basis.
This is possible using the Objective-C runtime. See [this answer from StackOverflow](http://stackoverflow.com/a/4446914/2557145). However this seems quite risky, as it would be possible for an attacker to execute arbitrary code. I would instead use a dictionary to store possible functions: let functions: [String: () -&gt; ()] = [ "cabBus": self.cabBus, "cabTrain": self.cabTrain ] Then I would lookup the keys from the JSON data in the dictionary of functions and call the associated function: if let functionName = json["Economical"] as? String { functions[functionName]?() }
I'm using JSQ in an app right now and I'd be really interested to hear more about how you did that because you're right, the scrolling is pretty laggy sometimes.
Hey man, I just wanted to take a minute to say I'm sorry I was being such a dick during this conversation. I was going through a crazy time in my life and took some of that out on you and that ain't cool. I hope you didn't get discouraged from being a developer and working towards your goals. Keep coding and never lose that spark, even when people like me come in and try to crap on it.
Array and Dictionary are not the same as NSArray and NSDictionary, they just have a bridge for converting one to the other. `(NS)JSONSerialization` always returns either an NSArray or NSDictionary. If you want to use the swift type, you have to cast them appropriately, because Swift just sees them as `Any`
Would highly recommend the Udacity course on iOS. Personally found it more helpful than the Stanford course and any of the Udemy courses. You can enroll in the nanodegree program or just watch the videos and complete the exercises for free (I opted for the latter).
Hi Jozemite_Apps! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/68psta/my_first_apple_watch_app_a_yugioh_life_points/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Seems like you're breaking encapsulation and also manually replicating a dynamic runtime. Swift has such a runtime. If that doesn't suit, see the #selector decorator in Swift.
You know how you have a father? He might be more than just your father, IE he has a name "John Smith" and a career and other family relations. But for your purposes, he is your father. And the responsibilities he holds in relation to you are very specific to his fatherhood. He feeds you, he gives you money and he raises you. A delegation system isolates particular responsibilities to define a very specific interface between two objects. These objects could have various other purposes, but the purpose of the delegate system is to isolate the relationship and define a stagnant and predictable interface between the two things. You could model this with something like this protocol SonsDelegate { func sonIsHungry(son: Person) func sonNeedsMoney(son: Person) } class Person { let name: String init(name: String) { self.name = name } } class Father: Person, SonsDelegate { var sons: [Person] = [] func sonIsHungry(son: Person) { feed(person: son) } func sonNeedsMoney(son: Person) { tellPersonToGetJob(son: son) } } and so on and so forth. The Father class could have many other responsibilities (go to work, pay the bills, mow the lawn, feed the dogs, fix the car) etc, but that's irrelevant to the particular father-son relationship. So with a UITableView, for example, it needs a data source to feed it objects to show. It doesn't care who tells it what to do, it just knows that it's looking for a very particular set of information. We use delegation to minimize coupling between two objects and defining a very regular and convenient interface. 
1. I learned it in my room on my Mac. 2. I was 21 years old. 3. Swift Documentation, RayWenderlich.com, Udemy.com 4. I recommend going through the Swift Documentation first and to practice and practice writing. 5. Don't release an app just because you're in a hurry to release it. As in, don't make a shitty product. I've made apps and designs that I quickly got done only to hate the entire look near the end. If you're going to design an app, be proud of it and don't make it look cheap. Also, LEARN the language first before making an app at all. 6. I don't know what that is.
Ray Wenderlich is good if you already know some programming because I've started his tutorials knowing none and it's just not enough information for me. I can tell that the concepts and reasons he has for doing things are a very professional way to do things. But I find that I learn better making the most basic thing then adding to it. His first tutorial was good at that, but the second one I had to restart at least 3 times because it's too much at once, I feel like I'm not learning how to program, just copying and understanding his concepts.
The way I always think of it is. There is a method that I need, but I don't know how to do it. So I need to ask another class, or object to do it for me. So I assign a delegate = the class that does the work for me. Delegates can go both ways though. Like when you make a table view, you have to conform to the delegates, which means, the tableview system doesnt know how to populate it with data, so your class, should raise its hand and say "I know how to populate the table view" delegate = self. datasource = self. Best of luck!
Yea, I want to make it good. I am a perfectionist, and do photo retouching, but I mean I want to get to the level to be able to put out apps as quickly as I can.
Ah good to know, I guess I'll update. And for that I'll check it out, i want to know what they teach elementary school students, at 33 I need ELI5.
&gt; So it is best a crutch, and worse an active force for bad as it can either require you to make the code less clear or pollute it with rule disabling comments which themselves can really impact clarity. You can enable and disable rules in a dedicated config file, so there's no need to clutter the code base with comments. If you only use SwiftLint for the rules that you want to enforce no matter what, then I don't think you'd run into any of these problems.
Everything in alamofire now has a warning in it. 
Thanks!
 1: At work 2: 48 3: Apple's swift documentation, (with my many years of ObjC and other languages experience) 4: If you learn well from classes, take classes. If you learn well from books, read books. Personally, what works for me is to write lots of code, read lots about writing code. Rewrite all the code you wrote using what you learned. Repeat. Also, never use a library you don't understand how it works. Libraries are time shortcuts, but when you're first learning it's the time coding that you need. Don't be an assembler of code you don't understand. 5: Mac and iPhone development isn't cheap, and Swift is just one of many languages you may learn in a software engineering career. If you're just starting out, Windows and C# will be far cheaper and teach you basics about development that are core to any language. Focus on the lessons not the language. 6: I would be highly surprised if any elementary schools are teaching Swift. I have kids, and I live in a very high-tech area, but still Elementary school level programming is usually using drag &amp;amp;amp; drop components to learn logic, conditionals, and loops. Not much more. My son's high school AP computer science class used Java, but even then it was stripped down and not a standard IDE. If there are teachers teaching Swift to young kids it's probably something that teacher put together themselves.
Isn't that actually a tuple, you have to say Dictionary&lt;String,Any&gt; for dictionary although both will allow casting
no, a tuple would look like `(T, U)` `[T: U]` is shorthand for dictionary with keys of type T and values of type U (you're correct that its the same as `Dictionary&lt;T, U&gt;` though) `[T]` is shorthand for an array containing type T (same as `Array&lt;T&gt;`)
OK, thanks!
I made a blog post long time ago: https://learniosdevblog.com/recipe-become-valuable-swift-developer/ There are small changes though: there is a new version of the Stanford course, but considering that you are still in El Captain, this might not applies for you: https://learniosdevblog.com/stay-tuned-stanford-ios10-course-paul-hegarty-coming/. And there are updated versions of the Big Nerd Ranch books as well to Swift 3. Regarding to the 6th question: You might give a try to the Coding session the new Apple Today initiative: https://www.apple.com/newsroom/2017/04/today-at-apple-bringing-new-experiences-to-every-apple-store/. Don't expect a full iOS developer course, I think it would be similar to CS50.I would also try to change at least to an i5 Mac Mini (made after 2011, maybe from the craiglist) to have the latest macOS and Xcode. I hope this helps.
Hi nickklas! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/68ry60/software_for_game_design/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
A lot of us are iOS developers that were using Objetive-C and wanted to learn Swift as soon as it was announced, so we already knew everything we needed other than the actual language syntax, which is easy to pick up after reading through the official documentation. The rest comes from experience developing with it. If you're starting fresh without any iOS (or development) experience, then the books and online courses are the way to go. Regarding the school program, you might be thinking of the iPad app that Apple released last year. There's a programming teaching "game" thing that's aimed at kids. 
Thanks am checking them out today!
May I ask what type of apps they were? 
Udemy course self plug. Ugh. Stop it. 
&gt; will work as if it was without rotation. by this do you mean that the inserts will not interrupt the user if the most recent message isn't currently visible on the view? Or if the most recent message is visible, it will insert the new message &amp; then push the view up in order to have it presented on the view? 
Thank you :)
Working on a small library to provide UI controls to crop and trim videos: https://github.com/prynt/PryntTrimmerView First open source library, any feedback is welcome !
1. On my laptop. 2. 20-21 3. I completed some of the tutorials on www.hackingwithswift.com, and then started writing my own app. In the beginning that consisted of a lot of Googling, but after some time you'll get the feel for how things should be done. 4. I learn a lot by making stuff - e.g. defining a task I want to do and then using material (web, books) to complete that task. However, I think it's best to have a basic knowledge before you use this method (hackingWithSwift.com). 5. Have fun! Don't be too hard on yourself if something doesn't work - take breaks. Disclaimer: I was a 2nd year computer science student when I started, so I had a little coding experience.
I assume OP is just starting with programming. To get a solid understanding you need good few years. I've been programming for almost 4 years (2,5 in swift) and I still consider myself a beginner.
I do an "Intro to iOS" talk. I have an entry sample project on GitHub you're welcome to pull it down and play with it. https://github.com/karnett/CWIT Sometimes it's easier to get started in something that already exists and play around than it is to start from scratch. If you have any questions just reach out. I'm pretty full this week or I'd offer to screen share. :( 
Here's a playground that shows how you can pull this off. As others are suggesting this probably a bad idea, because anyone with a proxy or other data injection method could cause your application to execute code in a way you didn't intend. Here's a playground that shows how you can pull this off. As others are suggesting this probably a bad idea, because anyone with a proxy or other data injection method could cause your application to execute code in a way you didn't intend. //: Playground - noun: a place where people can play import Cocoa // You can create a type to wrap up the parsing of // the string that represents a function. enum JSONFunctionProvider: String { case car = "car()" case bus = "bus()" var makeFunction: ((Void) -&gt; Void) { switch self { case .car: return JSONFunctionProvider.carFunction case .bus: return JSONFunctionProvider.busFunction } } private static func carFunction() { print("Car function called") } private static func busFunction() { print("Bus function called") } } /* So this would be { "carKey": "car()", "busKey": "bus()" } */ let jsonString = "{ \"carKey\": \"car()\", \"busKey\": \"bus()\" }" guard let jsonData = jsonString.data(using: .utf8) else { fatalError("Failed to create data from jsonString") } guard let object = try? JSONSerialization.jsonObject(with: jsonData, options: []) as? [String: Any] else { fatalError("Failed to parse jsonData") } // So here we take the value for the key "carKey", and try to create a JSONFunctionProvider with it. // If it succeeds then we can make a function and do whatever we want with it if let provider = (object?["carKey"] as? String).flatMap({ JSONFunctionProvider(rawValue: $0) }) { let function = provider.makeFunction function() } // Same thing for "busKey" if let provider = (object?["busKey"] as? String).flatMap({ JSONFunctionProvider(rawValue: $0) }) { let function = provider.makeFunction function() }
shoot me a pm and we can discuss. i'd be down for providing some help along the way.
`uploadMedia` is an asynchronous operation, meaning that the action will happen and whenever the upload is finished the completion block is called. At the call site the function will continue executing so the state will be uploaded immediately. You should update the state in the completion block
Hi, do you have any resource to recommend in order to know the basics of the language? I come from Java and some concepts are similar but others are just kind of confusing (optionals for example). I'm working now on the demo provided by Apple to learn how to use xcode and swift, but as you say, it is needed to understand the language to really know what's going on with the code.
thanks a lot for the feedback, this definitely helped explain a few things!
You've created an infinite loop in the setter for `age` by writing: self.age = newAge That line should be: self._age = newAge which can also be written as: _age = newAge By the way, you probably want to make `_age` a private var so it cannot be directly changed by code outside of the class.
Thanks a lot! I had a suspicion I was infinitely looping somewhere in there, but wasn't sure why. 
Also, try keeping an eye out on Swift's pull requests over time, they usually feature incremental changes that give cool glimpses into the compiler's inner workings: http://github.com/apple/swift/pulls There's also this [docs directory](https://github.com/apple/swift/tree/master/docs) that has tons of details about implementation decisions. It's pretty tough to read sometimes, though, with many computer-sciency and compiler-designey terms.
Last question on the subject...how do I establish ownership? For example lets say I have 3 bowls. a small, medium, and large bowl...and I want to say that THIS particular fruit that I have created is owned by the medium AND large bowls. The only reason I want that relationship is because I dont just want to say in a simple string that THIS fruit is owned by bowl 2 and 3..I want the bowls being referenced to carry the weight of what makes that bowl...which is all the properties I created in the protocol...so its kind of a smart bowl
I'm not sure I completely understand. In any event, each food item should have its own weight if you're interested in tracking that. Each bowl has as a property a collection of food items. At any given point you can iterate through that collection and sum up the weights of each food item and know how much weight is currently being held by any given bowl. Do you want the food items to also know which bowl they belong to? If so, I would consider whether that's truly the best way to achieve what you want. My immediate reaction is that there probably isn't a great case to be made for each food item to have that knowledge. When you say, "... owned by the medium AND large bowls" are you saying you'd like for any given food item to be in multiple bowls simultaneously? If you can provide a more specific example of something you'd like to do I could help better.
I'd like to know as well
For podcasts I like swift coders and under the radar. I'm also looking for more. 
The extension is better for organization too - you don't have to worry about commenting and grouping like functions together in your constants file. You can make a blank extensions.swift file and start adding these sorts of things there. Constants is typically just for global vars afaik.
I bought the IOS 10 and Xcode 8 complete Swift 3 by Aron Caines. Also I bought the IOS and Core Data by Brian Advent. 
Thank you! Will check these out
 // alert("Hello world") extension UIViewController { func alert(_ message: String, title: String = "Alert") { // } }
Try extending CalendarVC instead
`self` is used to represent the object itself. it's a global function. Thus, there is no such object to reference. Just because the class calls the method doesn't mean it will assign self to that class that calls it; doesn't work like that. You can only use `self` inside the class, or on an extension of the class to refer to the view itself.
Thanks!
Thanks!
How to do let homeVC = HomeViewController.instantiate(foo: Bar()) rather than let homeVC = UIStoryboard(name: "Main", bundle: nil).instantiateViewController(withIdentifier: "HomeViewController") as! HomeViewController homeVC.foo = Bar()
FYI, the outlet is NOT being declared in the UIViewController class, so extending it does nothing.
That's right. I thought it worked because I saw it in a tutorial. I tried it, and it doesn't work. What do you suggest? How do you declare it?
/u/Shmaff already gave you the right answer. I would also like to see this tutorial you speak of.
I messed up bro. I had two extensions. extension CalendarVC: JTAppleCalendarDataSource { } extension CalendarVC: JTAppleCalendarDelegate } I forgot to change the second one to CalendarVC, it was UIViewController. Sorry about the misunderstanding. 
It looks like you are adding images to a global cache here, which would make sense as a source of memory usage. Are you clearing the cache on memory warnings?
You may be right but then I guess I'm kinda confused here. Some of the function names are different but they aren't necessarily Swift functions. They're UIKit functions or something. For example with UIColor. You now write UIColor.blue instead of UIColor.blueColor but UIColor isn't part of learning Swift. That's part of just learning UIKit. You could safely learn Swift without ever needing to touch up on UIKit Enums are the only case I find that is close to changes from Swift 2 to 3 but even then it really just comes down to conventions in UIKit. You can still write enums the old way but none of the old functions with UIKit will accept them. [But if you *do* use the old format for enums then Xcode will correct you](http://i.imgur.com/xuPoBIE.png) So if he's wanting to build a foundation on UIKit or any of the other frameworks then he may as well just get a newer book. But if he's only interested in learning Swift then it shouldn't really matter going from Swift 2 to Swift 3 as far as learning the foundations go but even then I guess it really depends on what he considers the "foundations" to be. 
It seems like you would need to scroll less than the full width of the screen, not sure if there's a way to make scroll view page at smaller intervals.
No it's not. 
Well... Seeing as how some of the language is written in C++? I wouldn't see why the LLVM compiler couldn't add a wrapper for Swift... Although I'm not sure why you'd want one.
While it's probably *possible* for Swift to one day be able to import C++ libraries directly, I very much doubt it would be any time soon. ObjC is a much simpler language, just features like namespaces in C++ are probably a barrier to being able to do this at the moment. 
I suspect there are C++ features (as well as the runtime being different) that would cause large problems with importing it into Swift. Why would the fact that it's written in C++ have anything to do with it's C++ compatibility? You could write a BASIC interpreter in C++, but I would very much doubt that would enable you to import C++ libraries into it.
C++, (unlike C, but like Swift), obfuscates symbols in its compiled output. The reason C++ libs worked with ObjC is that both are super sets of C, and therefore the ObjC compiler is able to just compile C++ code (sort of) just as it compiles C code. If you want to cut objC out of the equation, you could use "extern C" wrappers to more directly wrap the C++ to become visible to C (and therefore to Swift). It would be pretty complicated still to do C++ interop on the level of C and ObjC within Swift, I wouldn't hold my breath.
I ended up using materialize() to effectively do this. See the answer I provided in the link.
If you are a beginner, my advice is to buy the Swift 3 versions of the books. There are so many changes between Swift 2 and Swift 3 that you (as a beginner) will waste a lot of time fighting the compiler. 
It's entirely possible, but quite difficult in the general case. Doing so requires some level of support for translating types between the two languages. Say for instance you wanted to use a C++ function taking a `std::vector` with a Swift class `Foo`, the mechanism would need to: - Load and parse the C++ headers (or modules, once C++ has those), which means invoking Clang in C++ mode. - Translate the declarations and definitions found into something the Swift compiler can consume, so Swift knows what a `std::vector` even is. - Synthesize Swift types in Clang's C++ representation so that a `std::vector&lt;Foo&gt;` can be resolved. - Invoke Clang's codegen to generate all the symbols and function definitions for the specialization, including forwarding back into functions defined in Swift. - Synthesize the fully instantiated `vector&lt;Foo&gt;` in Swift's IR so that its can be used as a real type, used to construct values, and have its member functions invoked. That all ignores very important cases like resolving C++'s wildly different overloads, its name resolution rules (including ADL), and so on. Obj-C can pull this off since Obj-C is just implemented inside of Clang itself as a dialect of the C/C++/ObjC/CL family. Swift is an entirely different language which makes it harder. Not impossible. But way, way harder. That said, this is the kind of thing I feel that Clang is great for: letting languages like Swift, or Go, or Java, or Rust, or C#, or Nim, or whatever more easily consume C/C++ libraries without painstakingly hand-writing wrappers. It's unlikely to ever be 100% perfect for most languages, but covering the 50-80% gap is certainly reasonable for most, IMO.
Your new implementation is not a good idea either. In fact it has the same problem as the `do` function. In the `flatmap` function of the new implementation, the call to `login.presentAuthFailure(error)` triggers a side effect. This is effectively the same as the old implementation with `do` function. `flatmap` should only receive some inputs and then produce some outputs. Only the return value of a function could change the state of the outside world. Introducing side effect to `flatmap` contradicts the fundamental principle of functional programming. 
Thanks for the information, I will give the book a go and see how I get on with it, if things become too confusing or if I get errors that I can't remedy then I suppose I will stay away from it and either wait until the 4.0 update before getting another book or concentrating on Hacking With Swift.
Ditto. Some people don't do test at all, though 
A lot of the infrastructure you're proposing already exists. Clang has direct bindings to introspect modules once they've been loaded, and we implement a walker that traverses their AST to convert Clang declarations to Swift declarations. The C++ part of that walker has just been turned off because a reasonable mapping from the semantics of C++ to Swift is... difficult. For one, it would be a strictly surjective mapping and one has to wonder at what point supporting a fragment of C++ isn't just creating a "Swift safe dialect" that doesn't do anybody any good.
I worked on lots of apps with custom backends, and now I'm making a personal project with Firebase. I think it was the wrong decision. We have a bunch of logic in the app that should be on the backend, and a lot of hacks to get around Firebase's limitations. For instance, you can't easily do pagination or simple queries like sorting by a descending value or a simple string search. Personally, I would rather make a Swift backend than use Firebase now. But this is my own preference, yours might differ.
The two views you have must inherit from Responder, so you can use the methods that were mentioned.
Thank you. I will try that. **It worked**
What? Where? 
Also a beginner, looking into firebase for a small project this summer. How has picking up firebase been? 
No. Objective-C++ is a language built on top of C++ so it has bridgeless native support for anything that exists in C++. In fact Objective-C used to precompile to C code before compiling to the final binary in the beginning. Swift is not built on top of anything but it can access Objective-C classes and methods bridgeless. Pick Objective-C++ if you need tight interop with C++, even if you just want to create wrapper classes to use in Swift. I do this a lot while interfacing native code like drivers or encryption libraries written in C. It's really one of the things that makes the platform so great, that you can access fast native code without a penalty. The horrors of doing that in Java!
Hey! You can try http://weheartswift.com/. They have very good exercises
Awesome, that's good to hear. I'm not planning on storing much media maybe a profile image - still need to investigate about their subscriptions/scalability. Thanks for responding and good luck man! 
I'm just putting the finishing touches to my latest book, [Hacking with tvOS](https://www.hackingwithswift.com/store/hacking-with-tvos), which is due out on May 11th. As I've already written [Hacking with macOS](https://www.hackingwithswift.com/store/hacking-with-macos), [Hacking with watchOS](https://www.hackingwithswift.com/store/hacking-with-watchos), and [Server-Side Swift](https://www.hackingwithswift.com/store/server-side-swift) I think the tvOS book should complete my multi-platform line up quite nicely! As soon as that book is finished I need to record another installment in my [Swift Frequent Flyer Club](https://www.hackingwithswift.com/frequent-flyer), but that shouldn't take too long. After that, I have two weeks of breathing room before WWDC kicks off. My books come with a [lifetime Swift update policy](https://www.hackingwithswift.com/update-policy), which means as soon as iOS 11 and Swift 4 are announced I need to start going through all my books and updating them for existing readers – it takes quite a while now that I have so many Swift books!
What's the problem?
I just released [EasyGit](https://easygit.me/), a git server hosted on iCloud. It implements the Git protocol on the frontend and uses CloudKit for the backend. It also takes advantage of the new CloudKit sharing APIs to enable repository sharing with other people. Written in Swift of course. PM me for promo codes! 
I am getting this error when running the app. "fatal error: unexpectedly found nil while unwrapping an Optional value" This screenshot will help you: : http://imgur.com/a/p05f1 
Trying to finish my first Cocoa app called "Insomniac". It's a simple little sleep timer.
Use as? not as!
I am writing a Swift book of which the first chapters will be released soon. Including a nice discount for fellow Redditors of course! It's about helping non-beginners reach a high level of Swift. It will help fill knowledge gaps (even for pros) and be a great reference book. It actually is based on many common learnings from my many coworkers (around 20) and I and years of programming experience. So the contents will be based on real world application, written in an easy-to-digest style. Can't wait to release it!
I’m working on a cross-platform app using Bonjour across tvOS and iOS. It’s fun!
I enjoyed the article. The other guy just sucks. 
Nice!
Working on a reactive Swift project. It's in its infancy right now. Got big plans for it! [Check it out here](https://github.com/RedHandTech/Speedy)
I'm working on an app I'm calling Push Me. It's purpose is to notify you about stuff you care about. You just call my API with your token and your message and I'll forward that message to your iPhone. Push Me is already available on iOS and I'm currently working on a macOS app. I'm going to bed now, but will be live streaming my work on Push Me tomorrow around 10 GMT+1. Here is my YouTube account: https://www.youtube.com/channel/UCPOy8VqmOIUAMSFYPCY7Dmw Get Push Me for iOS here: https://itunes.apple.com/us/app/id1208277751?ls=1&amp;mt=8 If you wanna get in touch I'm available on twitter as @JagCesar
There are good and bad answers so far in here, but I don't think any of the answers adequately explain *why* ObjC++ works and why it's not applicable to Swift. First, we need to address why C++ isn't readily importable by *any* language. In order to support many language features (e.g. namespacing, function/method overriding), C++ mangles symbol names. However, the C++ standard does not mandate a particular format for that name mangling. This leaves every compiler to mangle however they see fit. When it comes to symbol resolution during linking, external packages can't find the symbol "foo" because it's been changed to "_ZNKfooI10" or something like that. C++ provides a potential opt-out feature with the `extern "C {...}"` declaration that allows the use of C linker (which is defined and predictable) naming. Okay, so I hope that establishes *why* C++ cannot *normally* interop with C, Swift, or other languages without some kind of escape mechanism (i.e. `extern "C"`). Objective-C, however, is special in a very particular way: everything in ObjC is a "message." That is, you can find classes *by their name*. You can find methods *by their name*. You can construct messages to classes and instances using these names. In fact, Objective-C is a dynamic language in which nearly every method invocation *is one of these named messages*. You don't actually call `-foo` directly. Instead, everything is routed through a C function called `objc_msgSend(...)` that looks up the location of the `-foo` method in a method table related to that instance and then calls that. Objective-C++ is still Objective-C, complete with all of that dynamism, but using the C++ compiler. Since Objective-C's runtime is implemented on top of standard C, all of those mechanisms remain in place. Objective-C++ doesn't attempt to mangle names of ObjC classes or methods. They just register them with the runtime. However, anything internal to ObjC++ *can call C++ code* because it uses the same compiler as other C++ code. It knows to mangle and *does* the mangling. Objective-C code can call into Objective-C++ since it's using the same runtime abstraction (`objc_msgSend`). C++ code can call Objective-C/C++ code since it's just basically calling a C method (again `objc_msgSend`). That interop is based on the dynamic nature of ObjC. So, why can't Swift do this? Because it doesn't abstract the runtime as dynamically. Unlike Objective-C, Swift is far less dynamic (with the obvious exception of `@objc` annotated or `NSObject`-derived classes). Rather than register all classes and methods with a runtime, Swift eschews such practices as less performant and employs direct invocation. Since Swift isn't a C-based language, it can't be built on top of the C++ compiler and understand those particular mangling rules. Since its runtime is not as abstracted as Objective-C++, it's not feasible to call Swift from C++ or provide cheap (in dev time) interop. Now, it may be theoretically possible for a given compiler to implement that type of interop support (similar to Microsoft's C++/C# interop using C++/CLI), but that's currently not a goal for Swift. Since Swift is built on top of LLVM, it may be technically possible to leverage LLVM's understanding of C++ to provide some interoperability. However, it shouldn't be a design goal of the language since it's not necessarily portable to other compilers (that's quite a burden for the compiler implementers) and there are other mechanisms that can solve the problem (`extern "C"`) or C++ code wrapper generators (that will, well, use `extern "C"` at some point, but the developer doesn't have to worry about it).
You're a damn monster man, your content is spectacular. 
Nothing obvious beyond the cache prefetch. Are you sure you need to do that? Rewrite most of that as a pure function/closure, with map, and then call the cache preloader on each result in the setter of the object property if you need to 
Maybe also look into Parse. If you don't want to pay for Parse as a service then you can always host it yourself.
I also installed swift 3.1.1 on lubuntu to run kitura web framework. When I used the app to upload an image to the pi server. It's very slow. So, I think for IoT it is ok. But not a proper server.
Please point to the documentation that shows how to do this without needing to make separate libraries for each namespace!
Maybe I'm just blowing air, but I suspect the Playground process is closed before the threads are finished. Try setting the playground on continuous execution. 
How do you do that?
 import PlaygroundSupport PlaygroundPage.current.needsIndefiniteExecution = true Insert this at the top of your playground. 
That did it, thanks a lot!
Cool, it surprises me I was right. 😄 Good luck!
I have been learning swift for 2.5 months now, have spent the same amount of time building the iOS app for Odiocast, An audio blog/story telling platform. I am looking for creator and testers for the App, signup for early access on the website: https://www.odiocast.com Here is a short demo video is available here: https://youtu.be/loQiBJsvXzY My most recent post: https://www.odiocast.com/ravivyas/-KhgwfqHwBykSWwdfXr1
1 + 1 = 2, buy my book!!
Thanks! I'm glad you enjoy my work :)
I've been working hard on including playlists for my [Audio Book Player](https://appsto.re/us/EV91db.i) it's open [source](https://github.com/GianniCarlo/Audiobook-Player) . Hope I can get a release ready for the end of this month
I would write a custom request function on provider, which would handle the common parts of the result, and run completion for situations the individual uses actually need to handle e.g. (code written in reddit so caveat implementor): func customRequest(token: Token, completion: (Response) -&gt; ()) { self.request(token) { result in case let .success(response): switch(response.statusCode): case 200: completion(response) case 403: //User is not authorized, let user know - same for every request //So on, so forth case let .failure(error): //Show error.errorDescription as a form of alert, same with every other request } } }
In your case it would be something like: func request(for action *ActionType*, onSuccess: @escaping () -&gt; Void) { provider.request(action) { result in switch result { case let .success(response): switch(response.statusCode): case 200: //The only part of the boilerplate that actually changes onSuccess() case 403: //User is not authorized, let user know - same for every request //So on, so forth case let .failure(error): //Show error.errorDescription as a form of alert, same with every other request } } } Edit: formatting is hard.
hit me up if you want a coding buddy! 
Not to hijack the question but as someone who has never had to do this before but would like to learn is there a guide everyone uses or anything? 
Now I really want to try this out! Wish the article also mentioned all hardware needed to start building..
Don't you get all your coding tips from there? It's the new thing
If you need generic approach, that could be Result&lt;Void&gt;. Otherwise you would have something like this: func like(post : Post, callback : @escaping (Error)-&gt;()) 
The hardware isn't that complicated, you can find schematics on the web depending on what you are connecting. I will try to get into more details when I write my next blog post.
I'm just getting started on Swift, and created a command-line utility in Swift that allows you to control iTunes from the terminal: pretty cool! [link to my Github repository](https://github.com/bmsimons/itunescli)
I'm going to go over all the syntax as quick as I can and then I'll begin with a real app. I'll try some kind of very minimal version first. Thank you.
&gt; Xcode is a fine tool too Oh well.
It is possible for sure. It had been mentioned in the early days of swift-evolution. We had a core guru personally declared interests in building it *someday*. But manpower is limited, and C++ interop is just not a priority before many Swift things. Moreover, most of the important libraries are written in C or offers C bindings, making C++ interop less an urgent matter.
Auto layout: http://stackoverflow.com/questions/25895311/uicollectionview-self-sizing-cells-with-auto-layout
I would upgrade everything that you need to in order to make sure you have the very latest version of Swift. I would then focus on the BASE language of Swift. I would not dig very deep into protocols, APIs and other things, just focus on the basics of Swift. That should be a "walk in the park". Then do a few more mid level project in just Swift without digging into extra stuff. The reason for this is that there are different opinions about the value of protocols, functional programming, to use or not to use IB/Storyboards or setup in pure code, etc... Knowing what is basic to Swift is one thing, knowing when/if to use various thing (Storyboards, 3rd party, etc...) that's another thing. That's my opinion, you should be able to master basic Swift and write mid-level apps without much trouble. ObjC hasn't changed all that much in the last few years, it's good to at least be able to read ObjC as most is still written in it.
I'm new to image analysis for sure, so I appreciate the very thorough answer!
I'm working on a project right now to reduce the size of video for the same reasons. You should be able to write a simple app or download a tutorial and run some tests. You should ask yourself why are you hosting the video, can they upload to YouTube or something else? Basically, video is very heavy, the higher the quality, the heavier it is and there is no easy solution to that. You have to look at how long the video needs to be and how much value you can extract out of the app. In my tests, there a curve, each video has min overhead, so two :30 videos aren't the same as one :60 as each has a header. I'm looking at ways around some of these problems to get a leaner and maybe even adjustable file size.
Happy to help! I'd also recommend https://firebase.google.com/ for a backend unless you're more comfortable making your own. It's been great for me and takes care of a lot of otherwise much more complicated tasks. 
I think Swift has reached a nice medium between not having names parameters and Obj-C's extreme verbosity. 
For me, the best way to learn a new programming language is simply to build something in it. I wanted to avoid getting bogged down in Cocoa, so I decided to build a scheme interpreter. It's fun this way, and it's something I've always wanted to do anyway.
It seems like you could do this much easier with a UICollectionView?
I also have an ambition of learning to code for ios. Been reading up on the swift book from apple as well as doing the Stanford course. Will start with tutorials once basic is in place. How are you approaching it?
right now Im in the middle of Stanfords course, doing some challenges from www.hackerrank.com + preparing myseflt to write an app in swift which will be my bachelor's thesis. I have few months to do it so right now im focusing on writing as much swift code as I can, and Im in love with it!
Maybe: func randomizeLettersEasy(_ quantity: Int) -&gt; [String] { let letters = ["A", "B", "C"] var lettersRandom = [String]() var lastIndex: Int? = nil repeat { let index = Int(arc4random_uniform(UInt32(letters.count))) guard index != lastIndex else { continue } lastIndex = index lettersRandom.append(letters[index]) } while lettersRandom.count &lt; quantity return lettersRandom } randomizeLettersEasy(8) Also, be careful of the behaviour of your function for randomizeLettersEasy(0)
At the beginning I was so lost using Xcode for the first time. What is an AppDelegate for? Where is the entry point? Who is instantiating the main view? What is this Assets.xcassets and how to use it? What is this info.plist for? Where is the executable stored? Swift was the easiest part of all, the complements were the hardest.
Could you post some code? You'll most likely need to use some advanced auto layout tricks to resize the collection view to fit the amount of cells and then pin the content view of the table view cell to the bottom of you collection view and the table view cell will adjust with the height of the collection view as it grows.
&gt; Swift Frequent Flyer Club How does your beginner course compare to the apple documentation? 
Oh, yes I see. I like the (letters.count - 1) idea. And because terseness is what separates us from the animals: func randomizeLettersEasy(_ quantity: Int) -&gt; [String] { let letters = ["A", "B", "C"] var index: Int = 0 return (0..&lt;quantity).map { let maxOffset = $0 &gt; 0 ? letters.count - 1 : letters.count index = ( index + 1 + Int(arc4random_uniform(UInt32(maxOffset))) ) % letters.count return letters[index] } }
I will be messaging you on [**2017-05-07 17:53:42 UTC**](http://www.wolframalpha.com/input/?i=2017-05-07 17:53:42 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/69q54f/is_swift_really_worth_learning_when_objectivec/dh8je64) [**2 OTHERS CLICKED THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/69q54f/is_swift_really_worth_learning_when_objectivec/dh8je64]%0A%0ARemindMe! 10 hours ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dh8jecu) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Swift is so much nicer to code in. They wanted to make apps easier to write, removing barriers. Objective-C is clunky and was limited by its heritage. 
Was in such a rush I bought the wrong ones! :(
I'm not sure. I understand people don't knowing C will prefer Swift to Obj-C but, as someone who already know Obj-C and studied Swift, I don't see any compelling reason to switch. Obj-C has is share of clunkiness but it's fast to compile, fast to execute and I really like its dinamicity... Switching (for me!) will mean use many hours that could be utilized to write programs without any compelling advantage... probably when the ABI will fix and the source compatibility between versions will improve I'll give it another spin... But, really: in _real programming life_ what you find in Swift that says "hey! This is a reason to switch from Objective-C!"? I mean: not to learn Swift to learn iOS programming instead of obj-C, this I understand it completely but to switch from obj-c already professionally used fo years... curious...
What I tend to like about Swift among other things is that it has a very solid, flexible type system. Obj-C is less strict with its typing, which might result in some unwanted behavior that it might be difficult to get to the bottom of (silent errors). One of my favorite features is baked-in optional typing. Any type can be declared in three different ways: let test1: String = "Test" // test1 must be of type String and cannot be nil let test2: String? = nil // test2 must be of type String and can be nil, but requires explicit unwrapping let test3: String! = nil // test3 must be of type String and can be nil, but does not require explicit unwrapping. This is the default behavior in languages like Java and C# If you were to see the variable *test1* somewhere in the code, you'd know that the compiler will guarantee that this type will never have the value nil. This type safety is very reassuring. Another interesting thing about Swift is the protocol oriented programming paradigm. I suggest that you watch a video about it or read an article.
I think they're taking a step backwards in developer experience (DX) to go several steps forward in the future, as programming gets more mainstream, Objective-C might not cut it as language for everybody. Right now, Swifts DX might seem inferior, but it will most likely catch up and overtake Objective-C in the long run. It's comparable to how states work, big reformations, like language often take many years until fruition, it's long term politics. 
The part you call most infuriating is simply not true, fwiw. Making Swift superficially look more like other popular languages over time is not at all a goal (see: many email threads on swift-evolution). A major reason to use Swift over ObjC, and in my opinion the biggest reason that Swift exists, is that it can reduce the rate at which bugs are created, especially security bugs and crashes. If you look at Apple's security release notes over the last few years, and search for buffer overruns (impossible in Swift without using Unsafe types), integer overflows (trapped at runtime in Swift instead of silently misbehaving), NULL pointer dereferences (prevented by Optionals), and so on, you'll see that the classes of bugs prevented by Swift are a huge percentage of the total, often 20-50%. This advantage will only increase as time goes on: In Swift 4, for example, a proposal is currently being considered that closes off one of the few remaining places where memory safety bugs can happen (inout aliasing). Once Swift gains a concurrency model, it's reasonable to expect that it will include preventing as many classes of multithreading mistakes as possible (see: Rust tasks + borrow checker preventing most race conditions for an example of one way this could be done). I tend to view most of the "make it nicer to code in" features as carrots to get people to write in the safer language. I realize that may be a controversial opinion, but with the truly dismal state of software quality and security across the entire industry, and every facet of our lives depending more and more on getting it right, I think it's terribly important.
Chris Lattner (who created Swift) made an interview a few months back, he explains it. Here's [the transcript](http://atp.fm/205-chris-lattner-interview-transcript/#swiftcreation), linking to the bit where he answers a bit your question. If you want to actually listen to it, [here](https://overcast.fm/+CdTE-_oY/18:44) is the bit where he talks about the creation of Swift though I recommend listening to the whole podcast.
Don't forget Swift is also a scripting language - just add #!/usr/bin/swift or whatever your path is. Works nicely in place of bash scripts, even when just doing stuff like automating curl requests. And it's a server-side language. I can make a web server with Kitura and run it locally on the Mac, then push it to an Ubuntu instance when it's ready to use. I can use Swift package manager to start a project on some other kind of unix and never see macOS at all. And it's an embedded language. OK, maybe more of a Raspberry Pi language right now but work is underway to have it become useful for ARM. It's got a great future everywhere. If you're at the end of your career and have mapped out what you'll do until retirement, maybe Objective C is all you need. Of course you won't get the nice type safety and optionals and all the other cool features that many of the languages you mention will never have, but you could get by. Otherwise you have nothing to lose, learn Swift.
i highly recommend [this guy](https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA), i learned a lot through his channel. check his playlists.
&gt; is it worth learning given that Obj-C already lets you program everything you want in iOS? I think yes. I think most iOS devs would agree. It's up to you to decide if it's worth it for you. &gt; Why is Obj-C to be abandoned? A lot of people (including me) think it suffers from awkward syntax and a very steep learning curve for beginners. It's a turn off for devs thinking about learning to write for Mac or iOS. &gt; What's wrong with it? Nothing? &gt; What does Swift give you that Obj-C doesn't? It's easier to get started, **its type system is better**, it has a bunch of nice features that allow for expressive coding. &gt; It's not like they lowered the curve and made it more accessible than Obj-C, so what's the point? Wrong. They did make it easier to learn and more accessible. [You can read (and contribute to!) the source code.](https://github.com/apple/swift). Don't have a Mac? Try it out [online] (https://swift.sandbox.bluemix.net/#/repl) &gt; Why not giving programmers what they want all at once? I challenge you to find one major mature language that hasn't evolved in it's lifetime. &gt; Why treat a programming language like a product? Because it is one. This one happens to be open source. 
Oh wow these look amazing. Thank you
Email me I'll get things fixed up: paul@hackingwithswift.com.
&gt; Type variableName = variableValue; &gt; Was that so hard? Instead, we got: &gt; let initialSquareCenter = square.center &gt; Where's the type? Where the safty? Swift has type inference (So does C# and a ton of other languages). That means the compiler and you can be certain of the type of `initialSquareCenter` based upon the context of its declaration. It'll be of whatever type `square.center` is and always will be. Also, since it was declared with `let` we know that the value of `initialSquareCenter` will not change. &gt;I'm saying that it's stupid to keep stuff from devs on purpose, which is definitely what they are doing. [You're out of your element](https://swift.org/blog/swift-evolution-status-page/) &gt;When the iPhone came out and they adopted Obj-C, Java and the concept of "automatic memory management" was well established, but they ignored the issue on purpose. [Are you asking why iOS didn't choose Java?](http://stackoverflow.com/questions/1202518/why-apple-uses-objective-c) [Or why iOS doesn't use garbage collection?](http://stackoverflow.com/questions/6385285/why-doesnt-ios-have-automatic-garbage-collection) 
This should be top comment.
Look into [DateComponentsFormatter](https://developer.apple.com/reference/foundation/datecomponentsformatter): let components = DateComponents(second: 10000) let formatter = DateComponentsFormatter() formatter.unitsStyle = .full // also try .abbreviated, .short, or the other options formatter.allowedUnits = [.second, .minute, .hour, .day] let string = formatter.string(from: components) // 2 hours, 46 minutes, 40 seconds If you leave out the allowed units, it'll assume you only want only seconds (since that's all you gave it) and output 10,000 seconds. Edit: if you just want to use a whole value of the largest unit (like 1-59 seconds and then 1-59 minutes and then 1-23 hours) you should be able to do that with just one switch statement to create the dateComponents with the right value (and leave the formatter's allowedUnits at the default)
My personal take: learning new things is the core of a programmer's life. You should be grateful if there's something worth learning available that might make you a better programmer. Just like Haskell, Swift is a language that makes you one in any language, because you're exposed to new concepts you can keep in mind when writing code. For example, I learned Rust a few weeks ago, just because I could. Now I have a completely different perspective on memory management and package managers. Concerning Swift, understanding the optionals concept made me think about how to handle nil/null values in other languages like C#, ObjC and JavaScript as well. Now my documentation always specifies when a parameter or return value can be nil/null, even when the language doesn't require it.
Yes, learning Swift shouldn't take longer than an evening for an experienced programmer.
I'm building web back ends and scripting with it already. Apple isn't saying "go do that", the open source project says "you can". So the choice is I could learn flavour-of-the-month-JS, or ask someone who learned that already to do it for me, or go ahead and do it in Swift myself. Works well!
Yeah, but an experienced programmer would also know that learning the language is not enough. What about the environment? the frameworks? the damn experience that you only get by practicing? I dunno, an experience programmer would know this...
Do you work man? As a programmer or software engineer, I mean.
I'm all for experimenting man, good for you.
I came from ObjC/ObjC++ and I kept telling myself I don't need swift, I thought it was all about syntactic sugar. I was wrong. That syntactic sugar is actually the cure to better workflow and flexibility in code. My code base is lot cleaner, shorter, easy to manage file as there is no more header file to think about, it offers room for cleaner code if you manage it properly. Although it did suffer from syntax evolution as old project needs to be migrated to newer version especially 2.x to 3. If you depend on other libraries, you will probably face nightmare. I would say it's possible but requires reasonable effort and time. Regard to support for other things like: native support for Unity, or even React native, you need to know ObjC still. So when switch to learn Swift don't cut loose your best friend ObjC. Another benefit is that if you need to transition yourself to Android ecosystem later, (as researched) you will take benefit from swift to use kotlin. Very similar, and Android devs love it. This is the benefit of transferable knowledge. At last, go try Swift and you will love it as much as I do. Force in learning be with you 👍🤓
&gt; A major reason to use Swift over ObjC, and in my opinion the biggest reason that Swift exists, is that it can reduce the rate at which bugs are created, especially security bugs and crashes. For the sake of argument, I tend to see this as lowering the bar for programmers. And the same effort into "cleaning up" Swift could be applied to Obj-c, instead of wasting 10 years optimizing it and then throwing it out of the window. I agree with everything you posted. I'm totally in for a new language that improves on an old one. I don't like the way it's being done at the moment, which is in the most commercial-convenient way for apple.
Pretty sure it was like that from 1.0.
&gt;I'm not averse to learning new things, mind you. However, I do try to manage my time and avoid learning new languages only because a company decided to switch gears out of a whim. You sort off with one asinine statement here. You do realize that major developers where driving Apple to adopt an Objective C replacement due to the huge suck that is Objective C. There is no whim here and frankly Swift was under development for years before it became Apple new go to language. This first line is so bad I'm actually thinking that you are trolling here. &gt;Granted, I'm not saying Swift doesn't have it's fair share of cool stuff and advantages. My question is: is it worth learning given that Obj-C already lets you program everything you want in iOS? I suspect tObjective C will end up dead a lot faster than many people think. The really answer is that Swift allows you to do many things Objective C will never do or do well. It is a language that moves forward and allows you to develop much m ore rapidly. It is a language that replaces Objective C out right but will have significant potential to replace languages like Python so the developer ends up with the advantages of both worlds. &gt;I'm not implying that Apple wants to extend it's grab on developers by switching languages and forcing people to, you know, stick around and learn it all over again, but there's certainly an argument to be made in that direction. One would have to be extremely ignorant as to what is going on in the world of language developments to say something like this. Beyond that nobody is forced to learn Swift. Your desire to support the language is the only thing that guides a person here. &gt;Why is Obj-C to be abandoned? Because it is a crap language!!!! Seriously it is poorly supported, the code is a horror to read, it is a slow language (likely related to the lack of support), there is almost no support at all of modern programming practices and techniques. Basically it is a dead language that only got a boost due to iPhone. &gt;What's wrong with it? What does Swift give you that Obj-C doesn't? Oh come on this is asinine, everything you need to know about Swift is online. The language has managed to borrow a huge number of concepts from other modern languages to make for a highly expressive programming playground. &gt;It's not like they lowered the curve and made it more accessible than Obj-C, so what's the point? Huh? Swift is far more accessible that Objective C. &gt;And the most infuriating part is that they kind of tried to standardized it's syntax and make it look like that of the other main stream languages (C++, Java, C#), so great for that. However, they didn't go all the way and left lots of quirky syntactic sugar in the language so now they basically have an excuse to make further releases where "Swift syntax has been optimized!". You really need to clear you head of all this crap thinking. I can't imagine going through life with such a view of everything new in life. To put it bluntly your post is reflecting pretty negatively upon you, leaving people to think that you are mentally challenged is some way. &gt;Why not giving programmers what they want all at once? Why treat a programming language like a product? It's a great strategy for marketing and business, but it's infuriating when they do this with this kind of tech... Have you ever bothered to follow the development of any language. It could be something mature like C++ or something new like Rust. Nothing happens instantly and things like C++ took a very long time to evolve to the point that it is at this moment in time (a language far different than when it started out). A language like Rust has a far shorter history but even there not everything happens at once and like all language development you got to get people to agree on features and how they work. I'm left with the impression that you have a big zero as far as a technical background goes. Your entire posts seems to be unaware of what it takes to roll out an entirely new language nor what is required to maintain an old one. &gt;NOTE: please avoid the issue of whether companies look for Obj-C vs Swift devs, I'm only referring to a tech point of view here. The "tech point". Why would you care, you obviously don't have a technical background as most of your questions do not make sense for you to post. Seriously look at the had wringing that went with the transition to Python3 and the belligerence of some that didn't want to move forward. Nothing is software development is instant and in the case of languages it is many times slower. With Swift Apple needs to make decisions about the structure of the language that will impact it for decades to come. The goal for most developer is to get he language right first and foremost, as mistakes now are very hard to correct a few years down the road. If I sound a bit pissed off you are probably right, as I can't possibly understand your line of question other than that of trolling.
I'm pretty sure that was before even 1.0. But just to elaborate on why this matters (for anyone not in the know), Swift was not open source then and swift-evolution didn't exist. If you browse the Swift GitHub repo you'll often find pre-1.0 documents explaining the rationale for this or that.
Regarding the commercial aspect of this, if apple wanted to maintain stability they'd stick to obj-c (which they've been optimizing for the last 10 years). In principle, moving to a new lang makes sense if what you want is to make it better. however, they released it before it's ready, they keep pushing for people to learn it, and they are not investing serious $ into backing it's development. Given the current state of affairs, they are setting the ground for a massive upgrade of dev paradigms and apps for the forseeable future. Once swift is stable, new features will likely be available for swift only, forcing devs to both learn it and update the apps. And all of this means more money for them. I'm not ignoring the technical aspects, I'm just underlying the economic ones. 
why does anything change? you can't make things better without change... the purpose of a language is to make communication easier and standardization is part of that...what are you really upset about because it's not tech or languages...
Is the language ready? No. Then why adopt it? Because it suits the company. More adoption, more sticking around = more money. Go tell the gurus of c++ that they should have dumped the language years ago...
Out of curiosity, do you work bulding apps? Is that your everyday job?
I do, and I was resistant to Swift at first due to breaking changes happening freauently. For the past year or so I've moved over to Swift full time. I really much prefer it. I'm one of the few that actually liked Objective-C, but I feel Swift is more pleasurable to write.
And what happens each time they break something? Do you skip updating that app? Is your business ok with that?
After making the transition, I can confirm that Swift is really a better language in almost every way. Safety, development speed, execution speed, stability. I don't see it being a money thing. I think the whole change is actually costing Apple a lot in terms of budget and resources. But it was a bold and positive move and I applaud it. Obj-c is a really archaic and bizarre language for people looking from the outside in, it scares people away from the whole ecosystem. There's so much weighing in favor of Swift that honestly I don't think any of us have a choice, the job market is already favoring Swift developers. (Though 'works with both' is still the most in demand, and will be for a long time after obj-c deprecated)
If they didnt do it for the looks then they would have kept the same crappy syntax objc had. They didnt do it *exclusively* for the looks, thats different. Back to the point, why do you need a wrapper? Oh yeah, because you are replacing the language... guess they should have thought that through...
My apps have been relatively quick to get updated... an hour or so of work max for each update. The cadence has calmed down now so it's not practically all that different from ObjC 
In professional terms, this is unacceptable. No enterprise or serious business would adopt something like this. I gree you can get by, but it doesnt matter, its still BS
No serious business would adopt a paradigm like this, it's a joke. Lose momey because the new iteration of swift broke the app... come on...
Firstly, if you are a half-way decent developer and already know Objective C, It's not going to take you very long to learn Swift. With iOS, understanding all the libraries like UIKit takes a lot longer than learning the language. Swift is more expressive than Objective C. You can get more done with less code. This is important not only for the initial writing, but for maintenance and refactoring, particularly when you are working on a team. Modern programming uses a lot of async. Swift's closures make this a lot easier to reason about. Once you get used to the trailing closure syntax, code is so much easier to read. Easier to read = Easier to debug + Easier to refactor. Learning Swift is short term pain for long term gain.
It's not about being hard, it's about being unnessesary. You also have closures in objc...
I'm in a few serious businesses. Updates break stuff. It happens with ObjC too. And enterprise Java, Ruby on Rails, Android, whatever. Older versions of apps built with Swift still work. Why did you ask if you're just going to disregard the answers you're getting?
No, serious business do not update the underlying tech without an impact assessment. If you can tolerate down time AND spending money on upgrading the code each time, cool for you.
How are they making more money out of it? My bet is they've invested more than they have made out of Swift.
There are several larger companies that have already made the decision to support Swift. On what basis do you deem it unacceptable? Look if you don't want to use Swift, you don't have to. Objective-C isn't going anywhere for the foreseeable future. 
The money will come later. How much time will it take for devs to update new apps? That time is a guarantee of app updates and dev programs. People will have to stick around or companies will have to hire people to migrate the apps. And all that time = people stay hooked into the ecosystem way more.
Except for the fact that companies like Facebook, Lyft, and Airbnb have Swift developers writing code for their apps...
I think you're grossly overstating the cost of these small updates.
I'm just saying that major enterprises *do* use Swift and have adapted to fixing broken code when things update. That doesn't make it "cool", but it certainly proves that saying "no enterprise or serious business would adopt something like this" is just false. Why ask for opinions if you're just going to shoot down everyone's points?
**ITT:** OP asks for answers, while defensively telling people they aren't real programmers and Swift is always wrong. EDIT: Can the mods just remove this post? It's essential just turned into a big circle-jerk at this point.
Is it really necessary to have Objective C? Technically you can write everything in Assembly if you'd like... But as developers we rarely want to do that. 99% of the time we want our language to provide good abstractions so that we can get on with expressing our application logic. Swift gets out of your way more and lets you express your ideas faster. How long are you thinking it will take you to learn Swift anyway? If you know Java, JavaScript, Go, or any other number of languages it won't take you very long. You'll be writing decent code in a few days. Mastery will take a while, but it's not needed. If Objc is the only language you know, then it's definitely worth learning because I've found that every new language I learn makes me a better developer (even in the languages I already know)
Yeah, becuase barring the 99% of apps not written by apple, it's the remaining 1% they own that will nullify the cash flow... please
So that's a hard **no** on the "continuous updates" front then? What happens when you need to implement new features in your apps or fix a small bug? Do you just not update the code in fear of breaking other things?
Apps? You don't seem to understand how much work goes into maintaining an SDK for 4 different ecosystems on 2 fundamentally different operating systems. Also, your attitude is rude as hell, and not just to me. This discussion is going nowhere, hope you are having fun at least.
I can't tell if you're being sarcastic or not... doesn't matter. Back to my question, If "wasting time" is your biggest concern, how much time do you think you'll take to switch?
A few reasons.. First, everything everyone else said in the comments you aren't accepting as valid points because your love for Obj-C is too strong. Second, it's faster to write something in Swift, typically. Third, why not take a step toward the future when you can afford to?
That *is* how the industry works.. When you have a bug or new feature, you implement new code. How else would you get anything done? 
New code, yes, but you dont update the underlying tech everytime, that's risky as hell.
For what I could conceive, couple of weeks full time, maybe three.
I hate objc, actually xD Then make the switch, but not until the language isnt ready, which means stop screwing around with iterations and put some serious money into developing it. But it's easier to go slowly and keep devs comstantly upgrading, so...
It sounds like you know Objc well. I think you'd actually get to 80% of what you need to know in a couple of days. You don't have to start using the newer stuff like tuples and Swift enums from day 1. Look into them when uses arise. It took me a while to get around to learning Generics. Once I did I was able to refactor a lot of stuff, halving my codebase in some projects, but you don't need to learn to use them at all if you don't want. Optionals are probably the biggest new thing you have to learn straight away. After a few days though they become second nature.
Samsung? Google? LG, Motorola, Nokia, Microsoft, Dell, Asus, Intel, AMD? They all release new hardware products on a 12- to 18-month cycle. Ruby, Java, PHP, .NET, Python, every programming language gets updates on a similar cycle to Swift, even ObjC. When a new Xcode version comes out things change. Newer languages like Swift have more churn but that is part of the standard lifecycle. Big changes happen when legacy code becomes too expensive to maintain. Perhaps the ObjC team has wanted to implement certain features (features that are now present in Swift to enable memory- or type-safety) but can't because of backwards compatibility or big ecosystems of dependent apps and libraries. ObjC exposes major parts of its runtime to devs to support dynamism and those implementation details can't be changed for free anymore. By making a new language that interops with the old one, they have a multi-year, multi-release transition plan, while easing the cost of learning about Cocoa or UIKit for people who have experience with iOS. And yes I'm a "real programmer" -- so now I think I have addressed all your standard counter-arguments. Swift isn't perfect. But there are valid reasons for its existence outside of a cash grab, and if you can't see that, it's not Swift's problem.
First, extended dev programs. More updates = more licenses are required. Second, collateral earnings by having thousands working on your platform. Third, new software can be easily used to justify new hardware, and ironically, they are partially stagnated on new hardware dev; just consider how easy it would be to say that the iphone 9 is optimized for running new gen apps. Fourth, whatever they manage to invent because of no 2. You see, in dev as is in marketing, you put together thousands or milions of people and you have a gold mine. Apple has just made sure they'll have thousands of people hooked to their platform by updating a langusge. No, they are not stupid but they arent on ur side either...
I've published three different apps made in objc three years ago. Not a single one got broken. Nothing failed, an that's because objc got to a point where it's stable, mature and production ready. Companies put forward changes only if they think they'll get a return on their investment. It's not different with swift, and yet people think apple is putting the new language forward to make things better. You really think nobody knew what a bunch of syntactic crap objc was back in the day? But who cares, they kept it and optimized the enviroment as much as they could. Now, in 2017, when it's becoming difficult to acutally make the same amount of money on selling hardware, they ironically push for software update/replacement of the same tech they wasted so many yeats optimizing. Yeah, they want to make things better, for sure ;)
That's a valid point.
I considered addressing these, frankly strange points, in detail. Instead, I'm just going to respond to the last one &gt;And all of this means more money for them This chain of reasoning only applies if there were absolutely no other way to make money off of a Swift program than by going through the walled garden. Thankfully, one of the benefits of an open-source language is that you're free to extend the reach of the compiler to cover platforms outside of that garden. The expectation is that Swift will support as many platforms as we can port it to (our fabulous contributors even got it working on PS4s a few summers ago, a Windows port is most of the way there, and we have preliminary support for more flavors of Linux than just Ubuntu). Plus, by open-sourcing Swift, Apple lost out on millions of dollars worth of patentable and patented tech. So, how exactly does it mean "more money for them"?
Swift gives you an easy way to write code that only crashes when you tell it to (or when a Objective-C lib fails). Reliabilty gains are huge. Code is also shorter in a good way and it is organized better, but that's not the main benefit.
&gt; So, how exactly does it mean "more money for them"? Yeah, I was vague about that one. I don't believe for a second the money comes from the language, mind you. What I do think though is that they are pushing for a new language *now* (actually, 1 year back? 2 years back?) to guarantee a strong base of devs. You see, stagnation is a killer in tech. Apple had a huge successes in hardware (iphone, ipads), in software (apps), and now it all came to a halt. There's only so much more they can improve each year with new devices, and there's so much money they can still make through the app store. However, by forcing a new language onto devs they are making sure that they'll keep the current base of devs (if not bigger) in the future. You have the option to use Obj-C or Swift at the moment, but in a couple of years when your cool retina reader will have libs only for Swift, you will have to port whichever app you are using from Obj-C to Swift. And that's what, in my opinion, they are counting on. I'm not saying they'll survive and make a huge amount of money with this move, but they will definitely maintain a strong base of devs because of this move in the near and not-so-near future.
The Swift standard library is small, and you already know the frameworks. That's not really an argument here.
&gt; Got a source for this one? Of course not, but if they did, things like ARC would have been incorporated way before they actually did. And the same thing goes for Swift: if they were investing serious money, the language would be way more mature. But that's the point... if you were Apple, would you release a programming language that is 99% stable and bug free which you would need to rarely touch or would you release a language that is 60% ready (invented figure here...), prompting devs to constantly update their apps, redeploy them into the stores, using your services, and so on? &gt; How? By paying engineers to develop a free and open source language with free compilers and a free IDE? Is there something I'm not thinking of? How does Apple make money directly off of Swift? They don't make money *directly* and *now*. However, by forcing a change on the underlying technology, they are all but guaranteeing that a huge amount of apps will have to be ported in the future, and that means they are making sure they'll have a huge amount of devs submitting apps and getting dev program licenses. It's an investment, and they'll get their return in due time...
Hello! I'll try and help out as much as I can, first of all lets go through some stuff to be clear of some doubts I have. When you do 'print(myJson)' what does it print out? A single json object or an array of json objects?. As for the JSON parsing. You are already parsing the JSON data, just not in the correct format. Instead of `let myJson = try JSONSerialization.jsonObject(with: mydata, options: JSONSerialization.ReadingOptions.mutableContainers) as AnyObject` try changing it to `let myJson = try JSONSerialization.jsonObject(with: mydata, options: JSONSerialization.ReadingOptions.mutableContainers) as [String:Any]`. So what you are doing here is that you are creating your JSON object and parsing it as a Dictionary. '[String:Any]' is just one of the way Swifts understands as 'Dictionary'. Now if the json object you are creating is an array of objects, you might want to do '... as [[String:Any]]' since you are parsing it to an array of dictionaries. Once you have it as a dictionary you can access the values by keys. From your given json object example you can get the Temperature by typing out `let temp = myJson["Temperature"] as! String`. Below would be an example of how, more or less, I would've done to achieve what you want. **First we get our data** override func viewDidLoad() { super.viewDidLoad() // Do any additional setup after loading the view, typically from a nib. let url = URL(string: "myipaddresshere") let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in if error != nil { print("Error") } else { if let mydata = data { do { // I use an if let so we can safely do the cast to dictionary, if the casting fails then my app wont crash. // Note that im casting to a simple Dictionary,[String:Any]. If the data is an array of JSON objects you want to cast it as [[String:Any]] if let myJson = try JSONSerialization.jsonObject(with: mydata, options: JSONSerialization.ReadingOptions.mutableContainers) as? [String:Any] { print(myJson) } } catch { // catches error if any } } } } task.resume() } **Creating the TableView** I will asume that you are using the interface builder (Storyboard) and you referenced your tableView via an @IBOutlet. In your ViewController there shoulde be a referencing outlet as such: @IBOutlet weak var tableView: UITableView! The ViewController must conform withe tableview protocols, its Delegate and DataSource. First we add the reference like so class MyViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { } Now that we have it referecne, you might receive an error that the view controller does not conform to the TableView Protocols. To remove these errors we add the required TableView DataSource/Delegate methods. In order for the tableView to receive its data we use two DataSource Methods func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int { // returns the amount of cells that will be displayed. In most cases, if not all, you will have an array or a variable which will define the amount of cells that will be presented. return 5 // Usually you want to return the count of an array like so; return myArray.count } func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell { // This method will be called for each cell that is being presented, and for the amount that it was indicated with the 'numberOfRowsInSection'. // You want to return the cell which is being created. You create a cell using the dequeResuableCell tableView method, like so: let cell = tableView.dequeResuableCell(withIdentifier: "Cell", for: indexPath) return cell // Since this method is called by the size of an array, you can access an array using the indexPath object. for example if i have an array called myArray, and it has 5 objects inside this method will be called 5 times, and you can access the array as such: myArray[indexPath.row] // First cell will have the data from myArray[0], second cell will be from myArray[1]... etc. } This is a very general idea of what you want to do, but I highly recommend you find some UITableView tutorials so you can have a better understanding of what is going on here. [This is a good stackoverflow example/tutorial of a tableview well explained, and updated for swift 3 as well. ](http://stackoverflow.com/questions/33234180/uitableview-example-for-swift). You can leave a message or a reply if any doubts or any other help needed.
You should start by following a tableview tutorial to learn how to populate the table from an array of data. What you're asking for in your question is an awful lot and it would be more efficient for you to learn the core concepts before trying to build your app. 
&gt; How much money has Apple invested in Swift? How many developers are working on it? Will the project benefit from more developers right now or would they mostly be sitting idle? Change for change's sake is stagnation. It's a company, they can justify it anyway they want, it's their product, but it doesn't mean it has to make sense for the consumer or the people working on their platform... &gt; Is accelerated development what we want for a programming language or would we rather understand the choices we're making since we'll have to live with them for a long time? Speed has nothing to do with it. In this case, speed is a byproduct of investment. Apple is making billions of $ each year. How much money does it cost to pay a fully qualified team of devs? 1mil a year? 10mil a year? Yeah, that's a loss... however, they would come up with solutions to many problems pretty quickly and make future intervention unnecessary. I'm not saying they are using "planned obsolesce" here, but they are definitely avoiding remaining in a stable status to go for new and unstable territory, and given it's a company, they are not doing it for the fun of it...
Node.js seem pretty stable to me. You think I may have to rewrite my JS application for the next release? exactly...
&gt; So, if Apple doesn't develop Swift then developers would stop paying for the developer program? Aren't you effectively arguing that Swift is necessary for the survival of the platform? That's apple's problem, it's not mine. It's like saying "shit, I have to buy a toyota or they'll close and no longer make cars". They put themselves in this position... I don't see any company going bankrupt because everyone stops using C++... &gt; Which they would earn with Obiective-C as well, presumably at less cost to Apple. The number of devs in any platform is bigger when new products roll out. Maintaining existing products require less manpower. This is also valid for apps. If it took me three devs to set up an app, it may take me only 1 to keep it functioning and up to date. However, I'll have to rewrite the damn thing because the tech has changed and I can no longer use the new features. Is 1 dev enough? probably not. You do the math... &gt; Is faster hardware/software a bad thing? Absolutely not. However, the same mind-fuck up philosophy that applies to windows applies here: right now my computer is using 2GB of RAM allocated to the OS, and 1.6 allocated to browsers. My computer is not particularly faster that the one I had 3 years ago that used less than half the RAM... so, faster? more resources? It's all relative... Same goes for apple. Sure, if you need faster hardware to run more demanding software, you could make a point about that. But if you bloat your software to make it "more demanding", then it's BS, apple or not... &gt; People were hooked to their platform when it was Objective-C only. Virtually nobody uses Objective-C outside of the Apple ecosystem. Swift at least stands a chance at wide-spread adoption. Then propose it as a separate language, not as a replacement of something that works and is matured. &gt; I'm sorry, but I don't find your arguments compelling at all. I know you don't.
[July 15, 2014](https://developer.apple.com/swift/blog/?id=3). It's more consistent, for one. There's never been a corresponding syntax for dictionaries, and I'm not sure how it'd make any sense to use accessor syntax for type declarations. `String[Int]` isn't accurate, because you don't subscript a String.
&gt; You do realize that major developers where driving Apple to adopt an Objective C replacement due to the huge suck that is Objective C. Yeah, the same devs who use to say that objc was an amazing language for what it allowed you to do? people can't make up their minds, do they? &gt; I suspect tObjective C will end up dead a lot faster than many people think. The really answer is that Swift allows you to do many things Objective C will never do or do well. It is a language that moves forward and allows you to develop much m ore rapidly. It is a language that replaces Objective C out right but will have significant potential to replace languages like Python so the developer ends up with the advantages of both worlds. Keep dreaming, it wont' become a standard of anything, in *my* opinion. But I find it so cool that other people managed to convinced you so fast of this... &gt; You really need to clear you head of all this crap thinking. I can't imagine going through life with such a view of everything new in life. Yeah, you have a point, programming language that follow well established standards should be ignored, good for you. In fact, we are all programming in LISP and ADA, we love those standards!!! &gt; To put it bluntly your post is reflecting pretty negatively upon you, leaving people to think that you are mentally challenged is some way. Uhhhh... bad reflection.... :'( &gt; The "tech point". Why would you care, you obviously don't have a technical background as most of your questions do not make sense for you to post. Seriously look at the had wringing that went with the transition to Python3 and the belligerence of some that didn't want to move forward. Nothing is software development is instant and in the case of languages it is many times slower. Yeah, I probably have way more tech background than you do. You see, when a company tells you you have to abandon an old language for a new one, you kind of have the ability to think for yourself. Critical thinking won't hurt you, don't just keep your head down and say "yes"... &gt; With Swift Apple needs to make decisions about the structure of the language that will impact it for decades to come. The goal for most developer is to get he language right first and foremost, as mistakes now are very hard to correct a few years down the road. This is what you don't get... they had the money to pull this off a long time ago and they are only "pushing" for it now because it suits them. So, they were either mocking you before, or mocking you know, you pick... By the way, do you even work in the field?
&gt; On point 1, aren't the developer programs the same regardless of language? Yes. But if I have to maintain an app, it will require less manpower than if I have to rewrite it from scratch. More manpower = more devs = more licenses. &gt; On point 2, how do these collateral earnings work? I don't really understand this. Are you saying that you think Swift will encourage more app developers and greater numbers of apps to be developed (and hence purchased). How would that not be positive for developers, users and Apple? I'm not familiar with every source of revenue available to apple but it's a staple in advertising that you need to put lots of people together to make money out of them. Otherwise, the spots for the super bowl would cost as much... &gt; Point 3, I'm not sure about this. The general app and device buying public have never heard of Swift or Objective C. It doesn't come up in marketing. People don't care about the language, but if you tell them that their iPhone 9 will be able to run smoothly the new generation of apps (written in who knows what - Swift), then they'll buy it.
&gt; Ok, then you're just speculating. Stop stating it as a fact. Read how much they make (sidebar on the right): https://en.wikipedia.org/wiki/Apple_Inc. Money is they key to implementing well established ideas, and these ideas have been around for decades. I don't have to see their team to know what's feasible with that amount of money... &gt; I agree that people will migrate from Objective-C to Swift, and that will be costly for the companies that have to do it. I don't think that backs up your point though. For one thing, Apple doesn't make money when other companies spend money. Apple makes money through the dev program and App Store sales. Jesus, they are making sure they'll have a community of thousands of devs working on their platform for years creating new stuff... that's gold for them. &gt; If sticking with Objective-C would have driven down dev program subscriptions, then you've demonstrated that Objective-C is harmful for the platform and Swift is a necessity. Powerful rationalization here. You are basically saying: "yeah, I'm willing to switch languages so that the platform can still exists". You are so dumb you don't even realize it... who gives a fuck about them, think about yourself jesus...
Using emoji to extend the syntax highlighter? Cute. Terrible, but cute. As for the problem discussed, I wonder if age has anything to do with it. To my eye, `foo!bar!baz` has about as much pop as `foo.bar.baz`, but I can totally believe that youngsters who got into email after `@` was introduced might not see it.
&gt; You seem to think that Apple isn't investing enough in Swift. I'm trying to get you to give me evidence to back up that assertion. I don't think you can. See how much they make each year (right sidebar): https://en.wikipedia.org/wiki/Apple_Inc. &gt; It's not change for change's sake though. Swift's type system helps programmers catch common errors. Its syntax is cleaner and easier to understand because it isn't the product of 30 years of accretion. You show me some evidence that the adoption of objc have increased the number of these types of errors. Also, I'd like some evidence regarding dev speed. And I want statistically valid proof, otherwise it's just BS that they told you and you ate it up. &gt; You're the one claiming Apple isn't investing enough If they were, we wouldn't be having multiple iterations of swift before a stable one and especially they wouldn't be pushing for it's adoption before it's even ready. Do you even work in this field? Or do you program as a hobby?
Yup
Cool, they'll be so happy when you drop on their laps some software that will need upgrading in a few months.
And are you any good at your job? Or do you routinely tell your boss you need to upgrade your software because you chose a piss-poor tech to develop it?
Mmm, people read that a certain feature is an optimization and defend it without even understanding what they're talking about. Not my fault they act like this.
&gt; "Let's see [21:00] what could be done. Let's see what a much simpler language that doesn't need a pre-processor, doesn't need trigraphs, doesn't need all the weird things that have accumulated into C and C++ over the years, let's see what we can do and try to build something nicer." Coming from a guy who worked for a company who thrived in proprietary software and proprietary hardware. And people think it's for the good of the language and not to make money, what a joke...
&gt;I don't know where all the stuff you wrote came from Allow me to cite your claims then: &gt;What I do think though is that they are pushing for a new language now (actually, 1 year back? 2 years back?) to guarantee a strong base of devs. &gt;However, by forcing a new language onto devs they are making sure that they'll keep the current base of devs (if not bigger) in the future. &gt;You have the option to use Obj-C or Swift at the moment, but in a couple of years when your cool retina reader will have libs only for Swift, you will have to port whichever app you are using from Obj-C to Swift. And that's what, in my opinion, they are counting on. &gt;I'm not saying they'll survive and make a huge amount of money with this move, but they will definitely maintain a strong base of devs because of this move in the near and not-so-near future. Reread my response given this context before judging it "useless".
And I'll have no issues switching from objc to swift once the language is ready. I don't care if they keep treating it as a first-class citizen, until it's mature and ready, others can waste time on it.
Do you actually now anything about the development process of programming languages? It just is not possible to get the language perfect without involving a lot of developers who will actually use it.
A few months? In what timescale do you think these things happen? Btw, my customers don't care what language their software is written in. Most don't even know.
same went for me :) I'm a very experienced programmer and in the last year i've become a very experienced iOS programmer :) a lot thanks to this guy's video's and self diving into it. i totally see where you are coming from.
&gt; Pick one please. Already did, sorry. &gt; That Swift is a way for them to keep their developers moving ever-onwards towards what Apple sees as "the next big thing" instead of what you imagine is the "current big thing" in Objective-C. No, it's just another way for them to keep control. Sorry if you can't see it, but the underlying OS won't change, so they are not pushing you towards the "next big thing", don't delude yourself. All they did was made even more consumer-oriented the whole dev aspect of things.
&gt; A few months? In what timescale do you think these things happen? It doesn't matter, it's not even up to you. If their pissed-poor decisions regarding swift come back to bite them in the ass, they'll update and break your app, and you'll have to run back to fix it like a good boy. Hardly the behavior of a professional. You should offer your client a product build on stable tech. Don't be an amateur...
ObjC was a fine language 18 years ago when I learned it, but it hasn't gotten on with the times due to backwards compatibility. It's very easy to create security issues in a growingly hostile environment. The memory management is tacked on. The syntax is unwieldy when you've dealing with multiple levels of message nesting, etc etc etc. The time was more than ripe to switch to another language.
Thinking in abstractions is also a very important trait for programmers. Switching from 9 to X was expensive for Apple and all of the developers and it was a very risky move, but if they wouldn't have done it, Macs would no longer exist and Apple would only sell what's now called the classic iPod. Sometimes, progress is not a purely linear process.
As someone learning I have occasionally missed ! when skimming over code but its not that big of a deal or inconvenience, although the code you suggested reads naturally having to constantly create extensions for your bools to counter this inconvenience would lead to alot of extra code in larger projects for no real gains?
&gt; Alright, so we've moved from economics to control. One can argue they are related - you have not done so. Really? The fact that apple wants to keep control of it's property in order to squeeze every cent out of it is... news for you? &gt; I know this can't be a technologically-oriented comment, so it must be a business-oriented one. Yes, Swift is not going to make macOS FOSS. Just like Go isn't going to make Google's PageRank FOSS and C#, F#, VC++, etc. isn't going to make Windows FOSS. Where are you going with this? My point is that they can candy coat it all they want by stating it's both necessary and "the future", while in reality, it's the same old tech that gives them an extension on it's life-cycle and it's grab on consumers. &gt; Wonderful. I, for one, welcome our new consumer-oriented devtools. It's been a lot better for the world than the company/government-oriented tools of the past. Yeah, so many old languages have gone extinct because of this. We just don't know what to do with all the new ones :P
lol it's ready though... any hip new company will tell you they don't even want you on board if you don't know swift. Companies such as IBM, LinkedIn, Coursera, and Lyft (off the top of my head) all switched completely to swift. 
Then why, when I open the APIs, the first thing selected are the Swift docs? It's obviously pushing for a replacement. University courses teaching objc less and less in favor of swift, which is fundamentally not ready. So... I hear what they say, and then I see what they do.
Yeah, for years I did iOS apps in Obj-C and then we started building them in Swift.
LOL ^^
I'm guessing you work for a company, but correct me if I'm wrong. But about your company's policy regarding this? I mean, don't they have any issues on the fact the team is building apps using tech may not be production-ready yet?
I had to close with a bang :P Anyway, I enjoyed this. That being said, I was being a pain in the ass on purpose, I'll have to jump soon and I wanna see objc in my life way less than you, trust me on that. For example, I have a big project for a big company that will have to run on iPhone and iPad and will start next month. I could go all in with swfit in the next 30 days, but it doesn't give me enough confidence to adopt it yet in the time-frame available. I have to be production-ready by then, so I'll probably skip adopting it for the next project. Which is also a pain in the ass because something tells me I'll end up using both techs for different projects, but I guess I deserve that :p
Yes, they want you to learn Swift, that's not really a secret.
&gt;Really? The fact that apple wants to keep control of it's property in order to squeeze every cent out of it is... news for you? That's what I was waiting for. Is your problem with Swift or with the walled garden? And why does that criticism not extend to Objective-C, which is one of the most closed languages on the planet considering its entire specification post-NeXT has always been "whatever Apple deems valid to put through its compiler toolchain". &gt;while in reality, it's the same old tech that gives them an extension on it's life-cycle and it's grab on consumers. So, you see Swift as Objective-C (5.0?) instead of as a new development? What justifies that opinion? Have you read our language specification? Used the toolchain for a significant project? Published an app or three in it (given the prevalence of the "true scotsman" questions in this comment tree). How would this be any different if Apple had actually done as you wished and "continued to optimize Objective-C" and put out an actual Objective-C 5.0 instead?
Thanks! I've been doing iOS the last 5 years
Scraping should, in my opinion, be done server-side. The results are then passed as JSON to your app. Serverside, you can very quickly fix things if the scraping fails. Besides, there are good libraries for webscraping, like Beautiful Soup (Python): http://crummy.com/software/BeautifulSoup
how many navigation controllers are you using? You probably shouldn't be using multiple.
If you're avoiding reCaptcha's then this may be against the website's Terms of Use...
more interested in the benchmarks comparing different stacks i honestly expected IBM's to be the best but guess you can't judge a book by its cover. or author, in this case
Hey, try out Firebase. They have a nice anonymous auth option that's pretty easy to use. https://firebase.google.com/docs/auth/ios/anonymous-auth
Reading the terms and conditions the captchas probably wouldnt be an issue but I will check again just to be sure. If the captcha is not an issue, in it's current form (which needs to be massively improved) would this be an acceptable resolution to ensure reliability and not having to resubmit changes to the app store: let departures = html.stripLeftandRight(left: serverData.departure.left, right: serverData.departure.right) &amp;nbsp; I can have the server store the data that should be stripped away, the app grabs it anytime it makes a request and it will always be up to date. 
You may as well do all the processing server side and then just consume JSON in the client App. 
The JSON string you have posted looks invalid to me, so its a little tricky to know what to expect If you have a type of `[String: Any]` then accessing the element with key `g` you can try `json["g"]` or `json["g"] as? String` if you want to get an optional of an expected type If the JSON string is wrong and what you have is `[[String: Any]]` (an array of dictionaries), you can do something like `let imageURLs = JSONArray.flatMap { $0["g"] as? String }` (mapping over each JSON object, and including the value at key `g` if it is a string)
`images[0]` should give you the first (or crash if the array is empty). What if you log some other info like `images.count` ? edit: maybe it is the for loop, since `for items in json` will iterate on key value pairs, but I think you should be able to just access the value directly 
I started out with a Firebase backed recipe app for my first app 😁 It is nice because you can get the app up and running without worrying too much about having a large amount of recipes ready to go. I don't think you'd have much trouble adding Firebase to your project with your background. It's pretty simple and well documented on their site. Just keep things simple and you should have no problems. 
Looks good. However I would just point out that .v()/.d() etc. functions are not very swifty. If you have used logging libraries in the past, it is highly likely that those letters refer to the different types of logs, but to a newbie they are not. Plus this can make code difficult to read code in the future. I would highly suggest using the full names of the log types. In many IDE's the auto-completion means you are not wasting much time in typing and it is a lot more readable. Just my 2 cents.
I highly doubt that the `CLLocation`'s identity would change when the user's position is updated. Thus the two coordinates in `theCoordinates` would be identical. Instead of having an array of `CLLocation`s, try keeping an array of `CLLocationCoordinate2D`s, which are structs with value semantics.
I'm entirely biased, but I rather like the book I wrote. It's also free, which is nice. You can read it here: [Hacking with Swift](https://www.hackingwithswift.com/read).
The difference is just ease. You could have an add or remove button in your app to remove recipes you don't want, which would load from the .txt file / DB. Using a .txt file is just for ease so that you can focus on the Swift development, and not have to worry too much about making sure it works with a DB. However, if you're feeling up for it, then obviously go for it, and try to have an app that uses a DB to store information. Again if you choose to use a DB, I would recommend Firebase, due to its in-depth explanation for its API. To answer your question about async that's not a big problem. It's similar to JS where you would need a callback function, so that you just wait until your data from your DB / an API loads and then when it is done you finish loading the app by calling the callback, with the information you've retrieved.
Do you URL to the tutorial? Sounds awesome!
I think so. I just checked [this](https://developer.apple.com/downloads/) and it looks like their is a version newer than the one on the App Store. I'll find out if it works it a second. Thanks!
so your viewModel creates the cell ? that doesn't seem right. the viewModel is not supposed to know anything about the view nor the type of view the data will be load into.
Can you please share a good source to better understand MVVM? Thanks.
BTW is there any reason why I would want firebase instead of a regular db hosted on a digitalocean 5$ droplet?
In fact I wouldnt want users to add recipies, this I have experience before and it is just a mess. So it should be added by me/admins. But then I guess I would rather rely on some web script to load the recipies to the db rather than using the app solely
A storyboard with a tab view and 2 buttons, and about 4 lines of code?
https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52
It depends. There's usually suggestions at the end of each project, giving you ways to take it further. If you bought the download edition of the book, you should also follow the guidebook – it has regular challenges set that ask you to build new apps based on what you know. Broadly speaking, I would not recommend more than one project a day – I know it's tempting to keep plowing through, but it's so easy to forget what you learned!
Thank you!
If you know your way around db programming and server admin you can obviously skip Firebase. IMHO, Firebase is useful when you don't want to do server side programming. It is easy to use and convenient, the drawback is of course that you depend on a third party provider. 
damn that sounds awesome
They weigh those risks against the costs of using a language that they perceive as requiring more work and maintenance.
ObjC takes longer to write and requires more maintenance (way more lines of code), it takes money. There's your reason. 
:/ Is there a way to get that without any apple hardware? Is it uploaded elsewhere? (I'm developing on a VM)
Game development please! There's already enough app dev tuts in comparison!!
Is the CloudKit a viable answer? I've been looking into this myself but donno if I should use firebase or explore into the CloudKit.
Check out let's build that app on YouTube. 
Something in between, like drawing by code, using some gamedev stuff while writing an app, or doing ui while using a game framework like spritekit
Keychain is the way to go, check out https://github.com/jrendel/SwiftKeychainWrapper
The swift guy on YouTube. 
If you're using auto-layout, the concepts behind designing a UI programatically and via interface builder are exactly the same.
I'm going to go ahead and pimp [Hacking with Swift](https://www.hackingwithswift.com/) by [Paul](https://www.reddit.com/user/twostraws)
This is perfect, thanks.
That's actually something I love to do! Thanks for the suggestion!
CloudKit is not a viable answer. Passwords are too sensitive to store unencrypted, and CloudKit is not encrypted storage. You could encrypt them before putting them in CloudKit, but you'd then need to decrypt them so you'd need to store the key _somewhere_. If you're looking to store passwords on iOS you should use the keychain. If you're looking to use cryptographic functions use CommonCrypto.
Oooh you know I'd actually like to jump more into Core Location. Thanks for the feedback!
Well, I still need to persist the credentials, which is what half of the question is for. Besides, the connection is secured by SSL.
Yeah, even if it's secured by SSL you don't want to be sending passwords across the line. There are ways around SSL, more potential flaws in SSL (insecure key gen and things like Heartbleed have led to issues in the past, and new issues will crop up), and there's no need for the server to ever see or store unmangled passwords. I make my living finding security holes in products. Solutions like the ones you proposed make my job *a lot* easier. 
Keychain can be read with jailbroken phones and hacking tools, just something to be aware of.
Your best bet is to use GTK+ which is a pure C library that can be directly used from Swift. 
If jailbroken you can do EVERYTHING. :)
There's already a lot of tutorial explaining simple spritekit animations, but there's a lack of tutorial explaining more advance stuff like how to save/load game, making menu or config screen in spritekit.
Fantastic ideas! There is definitely a gap for intermediate to advanced tutorials. I appreciate your feedback!
i don't think there is a "good" way to do that, but you should test this anyway right? so there is no point on doing that, too much work for no reason. And besides, every controller you test, will run its business logic when it loads. Code coverage doesn't need to be 100% on point on what your tests are actually testing (like private methods, for instance), you just need to be testing what needs to be tested.
Secured by SSL is a poor excuse in 2017 when you have things like OAUTH. How will you deal with password changes? What about device management? 
iOS Keychain. Square also has a wrapper for it called Valet. It moght ease the development: https://github.com/square/Valet
The instruction are only valid if you are running a new installation of Bash on Windows ( That uses Ubuntu 16.04 ). Anybody running a older install needs to use the Swift Ubuntu 14 image or upgrade windows Bash to 16.04. While one can compile the code, there are issues because any IDE/Editor can not access the swift compiler so extended IDE functionality is limited. And while color syntax works in Visual Studio Code, with the swift extension, just about everything else does not work or exist for the above mentioned situation. Debugging, linting, etc ... Most of the Swift plugins on none OSX platforms are not very actively supported. Maybe Clion on Linux being the exception. But for Windows development, ... there is not much out there in regards to IDE support. And with windows support for the compiler being non-existing and not any priority. Even Linux support was a non-priority and more or less fell on IBM to fix most of the issues.
Interesting! I think I could write up a good amount about social integrations. I'll see if I can cover this soon! Thank you for the feedback!
Actually the most recent example that annoyed me was this site. This is the code I had the biggest issue with. Seems there are casting issues with the for loop (also I couldn't figure out why case let was necessary in this loop). But seems the json["results"] needs to be casted to [Any] and that has to be done outside the for loop. The biggest reason this sucked for me is that it made a 1-2 line command take like 3-4 with an additional optional binding. I find that since everything and everyone uses optionals everywhere that binding/casting becomes a nightmare. I hope I learn more and this becomes better. https://developer.apple.com/swift/blog/?id=37 let json = try? JSONSerialization.jsonObject(with: data, options: []) as? [String: Any] { for case let result in json["results"] { if let restaurant = Restaurant(json: result) { restaurants.append(restaurant) } } }
No thank you! If you would be able to make a tutorial about that I would be forever grateful. (Have been struggling with that for quite some time) :) please let me know if you do. 
If you're already implementing some localization and have the structure in place, it could be a pretty quick change. Constraints would definitely be an issue so it really depends a lot on how things are laid out. As a solo dev, I'd give my self 2-4 weeks. I've only localized with Spanish and I had most everything prepared for a new language. That took me about 2 weeks.
Are you using NSLocalizedString, and while making the app, were you considering the idea of another language when setting constraints?
SSL is not secured against mitm attacks
Look for Big Nerd Ranch iOS 10 
hmm, the level of optimization could affect it (whole module optimization vs none vs some other level). I would play around with build settings. The other option is splitting a very large project into seperate pods/frameworks and that way each compile shouldnt redo the dependencies and only the framework you changed.
You always need a vertical and a horizontal constraint. If you tried adding those constraints via interface builder, it would show you an error about missing constraints. It is just how it is :p
Alright, thanks again :D
Realm is good for a prototype. Local server.
Not.
We had zero planning or consideration for localization. Pretty much will need to do the entire app setup for it.
It is completely irrelevant. No-one who wants to play your game has any interest in what you coded it in unless they're a developer themselves, and even then it probably doesn't concern them much.
I was recently looking into Realm and I believe you only have to do it once per thread.
No, and No. The developer that worked on it before I started had no idea this was something the client wanted or would ever want. So everything would have to be changed.
Sounds like you may want to start with a UICollectionView but with a custom flow layout manager. This article offers some tips: https://www.objc.io/issues/3-views/collection-view-layouts/ You could also have 'blank' background tiles for unoccupied grid positions if you want to use a regular flow manager. Depends on how you want to implement your drag and drop interactions. Or you could start from scratch with a UIScrollView but implementing all the interactions you're describing will take a lot longer. Also, if the grid is going to be much larger than the screen you'll want to implement it using a datasource/provider model so you don't store too much off-screen data. But that's what UICollectionView already does.
If you use this approach, I recommend using a diff library, e.g. https://github.com/wokalski/Diff.swift. This specific library can also handle UITableView animations for you - it's a pretty cool library! 
Broadly speaking, in an MVC architecture you might want the Model to have a delegate, the ViewController, which gets notified on updates. The ViewController can then decide whether to reload the TableView or not. The TableView handles the visual aspects of the change. There are missing pieces though: - do you want animations for insertions/moves/deletions or a plain reload? - who is responsible for being the tableView's delegate? - how frequently is data being changed? - many more that are specific to your case Depending on how you answer those questions your implementation might be different, significantly more complicated, and/or difficult to not tightly couple. My 2¢ 
As important as telling them what design architecture you used. 
OH jeez, another goddamn introduction to functional programming in swift. Just what we need
Any wise conclusions on the matter?
Gotcha. Well give yourself a good amount of time then. You never want to underestimate a deadline. To help get you started I'd take a look at this framework that makes switching localization and getting the phones language settings SUPER easy: https://github.com/marmelroy/Localize-Swift My workflow was take all the strings I had and put them in a Google Sheet. One column was machine readable, so with no spaces and not starting with numbers. The other was human readable in English. Then below that, or on another sheet, or another column, however you want to separate languages, I put the translations for all my strings. ***As an example:*** We'll use **"Delivery Preference"** So the machine readable is "Delivery_Preference" Human readable is "Delivery Preference" In Spanish it's "Preferencia de entrega" With that, I wrote a script that put those strings in this format: **"Delivery_Preference" = "Delivery Preference";** **"Delivery_Preference" = "Preferencia de entrega";** Now in Xcode got to your Project &gt; Info &gt; Localizations &gt; Add any languages you'd like to localize for. Then you need to make a strings file called (whatever).strings and on the right menu of Xcode there is a section called "Localization". Click "Localize..." and choose the languages you'd like this specific file to be localized for (The ones you just chose in Xcode). Now you'll have your (whatever).strings file with a little drop down button on the left of the file name. Click that and you'll have child files that will contain your strings in the format we just made. So have whatever.strings with these 2 child files: whatever.strings(English) and whatever.string(Spanish(Mexico)) \*Mexico is because I am localizing for Mexico and not Spain. It's important to know sometimes if there are a few different options for the language you're localizing.\* Now "Delivery_Preference" = "Delivery Preference"; goes into my English file and "Delivery_Preference" = "Preferencia de entrega"; goes into the Spanish file. OKAY now we can actually USE the strings in our app. GREAT! But whoops, it's kind of crappy the way we have to use it. To use our strings we have to do this: label.text = NSLocalizedString("Delivery_Preference", comment: "") and ugh ***gross***. We would have to do that everywhere. So let's clean that up. If we use the Localize-Swift framework, they have an extension that cleans that up. You can write your own but they got one already so yea. It looks like this: import Localize_Swift ... label.text = "Delivery_Preference".localized() Cool. More swift-like but if we need to change something we'd have to find everywhere that we used this string and change it. That's p dumb so let's go ahead and throw this in an enum: enum LocalizedStrings { // Delivery Preference static let deliveryPreference = "Delivery_Preference" } and finally we get this: label.text = LocalizedStrings.deliveryPreference.localized() That's pretty much everything. In the Localize Swift framework there are ways to check the device settings and way to switch the settings just for the app in question. So go checkout their docs. You'll have to go make sure all your labels look right which is just a whole different post for making labels fit everywhere you need them. If you have any more questions let me know!
Are you using core data? Nsfetchedresultscontroller can handle this
Which version of Xcode / Swift are you using? Incremental compiling was really really bad in earlier versions. It's still not great but it's a lot better with newer versions. Also, you may find that there's a couple of functions that take up a majority of the compile time. Google around for these types of articles https://thatthinginswift.com/debug-long-compile-times-swift/ and you can find lots of tricks to get things running smoother.
I think your app gets a boost from the App Store automatically by being 100% Swift, so it might be worth looking into for any bonuses/submission optimizations. And as a developer, you can use it to market yourself/your skills for more work. As a consumer I couldn't care less how apps are coded as long as they work - it'd take a really niche market to make advertising it worthwhile. Good luck!
Hey! The initial data load in the background thread is an issue I have on my radar, If I remember my initial tests correctly the callbacks were being executed on the main thread, So even though it looked like it was all wrapped in an async background block when the calls returned and the processing began it was all on the main thread.
Can you please explain the value over laying out UI in code using UIStackViews or just some simple wrapper for AutoLayout such as [PureLayout](https://github.com/PureLayout/PureLayout) ?
Sorry buddy ... there is a reason Apple did not take their API's this far ...
Trying to make my app check an API while the app isn't currently running, then notify me. If ethereum price rising above 100, I want to be notified.
Thanks!!
I'm already using SnapKit and still it's hard to see what view is a child of what other view. I guess it lacks high-level overview
I'm really wondering what the reason would be. Since Apple APIs are generally overly verbose (reason why we have PureLayout, SnapKit etc...)
Yeah and that reason has a lot to do with Apple wanting to lock developers into their eco-system...
So is it easier to, to copy the photo and than create a new image the same as the first and than edit the metedata, or is it the same thing?
How well does it do dynamic layouts? I'm talking about animating changes in constraints. 
Haven't been able to spent much time to look into it yet. I may have some other things calling back to update the main UI. 
Just curious, before writing this and at the point where your storyboards were "hard to reuse and almost impossible to merge" were you creating reusable views in .xibs? Refactoring your storyboards so that they define very specific flows? Locking your storyboard files and only unlocking them one at a time when you need to change something in them? I'm curious because my team follows these practices at work and is it extremely rare that we encounter merge conflicts on our storyboards.
Yes. We've been isolating into .xibs. We didn't do storyboard locking though, but rather checked a slack thread or discussed who was editing what file. We didn't have any merge conflicts, but that behaviour had to be enforced outside of code. When somebody changed a part of storyboard or .xib, and I had to review it - I had absolutely no idea what they wrote or was it any good (were the constraints set up properly? who knows...) With Kandinsky, every change to layout is visible in the git diff and easy to comment on. It really makes contributing on layout in Swift a lot easier.
&gt; When somebody changed a part of storyboard or .xib, and I had to review it - I had absolutely no idea what they wrote or was it any good (were the constraints set up properly? who knows...) I mean... that's why code reviews exist... you can pull down their changes and verify
Essentially it’s the same thing. In my code (which I updated): - set up a reference to the source and the destination - modify the metadata - add the image from the source to the destination and have it apply the new metadata - finalize the changes to save the changed file
Literally no one cares. Devs are interested, but the people playing your game do not. Apple is a multi billion dollar company that sells phones for nearly a grand, and the people buying these phones, don't even know what Swift is.
Hey Mislav, don't get discouraged by the bad rap, I find your lib interesting as I was coincidentally looking to port the awesome Kotlin lib [Anko](https://github.com/Kotlin/anko) for UI design. Kudos!
[removed]
Thanks for this little snippit, needed a way to animate my textfield constraints with SnapKit and wasn't sure! I built a similar layout engine with SnapKit and you're right it covers everything, no need to mess with autolayout's confusing syntax. I added https://github.com/lkzhao/Hero into the mix and now I've got a pretty sweet reusable component/animation engine. 
Still looking?
Thanks for the reply, I've pointed the delegate to my ViewController, but whenever I call AVPlayer.play() in didBecomeActive the app crashes. Any ideas? 
Hi KingGman12! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6ann58/sophmore_in_hs_and_just_created_my_first_app_any/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
There's really 3 autolayout APIs these days (raw, visual format language, and anchors), and they're vastly different. It's entirely possible to like one and hate the others.
This is very clever, and pretty neat in a "look what can be done" kind of way, but I'm not sure I see the utility. I can write plain old extension methods for common tasks like `centerInParent()`, and I'm sure every project has a few of these for the types of layout it commonly does. I don't need to add a third-party library, or make my collaborators learn a new DSL. Autolayout isn't perfect, but I must admit I've never considered it a flaw that it didn't have enough operator overloading and deeply-nested closures. :-)
Yeah I haven't had a chance to look into it more than that.. lots of things could be going on unfortunately
I disagree, many of the tuts out there are pretty crappy.
I personally recommend: https://code.tutsplus.com/courses/up-and-running-with-swift-2 It's not free, but you can take the 10 days free trial. From there, you can make the jump to swift 3 yourself.
Thanks for the feedback! I can understand the sentiment. But this kind of framework is not without presedant in production code. People in this thread mentioned Anko for Kotlin. My own inspiration was from Lisp HTML macros. Maybe Swift isn't the best platform for this, maybe it is... I'll give this a shot and see how it pans out, but I think it's gonna work fine. The framework is stress tested and behaves fine. I know it *looks* like "look what can be done", but I do honestly think it has real-life utility
HI GreenGlider, thanks for the feedback :) Didn't get discouraged, still rolling it out in production. I think the landing page on git doesn't do the framework justice, because it doesn't show how well it plays with RxSwift.
Heres some sites: https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA - advanced but an amazing teacher, and free. Learnt more from him than anywhere else. http://referrals.trhou.se/lukejones5 - Where I began. Good for newbies. Free trial too. https://www.codecademy.com/ - Not used myself but heard good things. https://www.raywenderlich.com/ - Covers pretty much everything. Also, make use of the swift 3 docs. Best way to learn is too simply build what you want to make. If you try to learn too much of a variety of stuff, it often doesn't sink in enough (for me at least). 
Sorry, this might be a long shot, but do you know what the readings assignments are? I can't find them and every time I try to open them on iTunes U it just opens a video I've been watching.
Just pick two or three and do them all. There's no magic way to learn Swift. Just expect that reading one resource one time through won't teach you it all. BNR books, Hacking With Swift books, Stanford lectures, the many Udemy courses etc. Just do a few of them, whichever sparks your interest the strongest. 
I can confirm that /u/Lanza21 is correct. I haven't found a 'go to' resource for everything. The listed resources are all very good. I would also suggest apple's swift language guide. It's super comprehensive. It is mostly going to come down to what is the most appealing and easy for you, as a programmer, to understand/learn from. 
Optionals aren't special, they're just generic enums. The language has lots of sugar to handle them. What's so hard?
Swift refactoring is coming to Xcode, calling it right now.
I have a sneaking suspicion that they don't have it on purpose... However, if you're right, my life would be more than a bajillion times easier.🤞 
thanks for the reply. We're using 8.2 I profiled the app and a few function are very long, like 0.3 seconds each, but 98% of the build time is just recompiling so many, many swift files. I change one line and 10,000 files need to recompiled.
They are a generic enum. They are declared like this: enum Optional&lt;Type&gt; { case some(Type) case none } Exclamation points and question marks are just syntax sugar.
Thanks for establishing you're a better programmer than everybody else that reads r/swift. Kindly just ignore the post next time. 
Interesting! Is that how they're actually implemented behind the scenes, or are you just making an example? (Again, an honest question.)
Yes, that's essentially verbatum from the standard library source code.
I think it should be reasonbly helpful. It's well written. Besides, you've included the most consise beginner's guide to monads that I've ever read.
[Here is the actual source code](https://github.com/apple/swift/blob/master/stdlib/public/core/Optional.swift)
Hey, that's pretty neat! Thanks for finding that! :)
Apple urgently needs a stripped down Xcode Editor while keeping its 5GB behemoth for those who like big butts.
Is there any way you could switch to 8.3?
nah. It's really not my project. I'm a contractor helping a client of mine; there's probably 20+ iOS devs there and I'm just the new guy learning my way around. 
I don't have a quote on-hand, but I seem to recall reading either in Realm documentation or in a Realm GitHub issue that a Realm instance is cached per-thread. Thus you can freely _instantiate_ a Realm as many times as you please. As a sidenote, odds are that you probably wouldn't make do with a single instance of a Realm anyway, as all Realms and Realm objects are thread-bound. They can't cross thread boundaries. ~~_Since I can't point to a source, and I am only speaking from memory – take this with a grain of salt. Hopefully someone wiser can chime in._~~ --- Edit: I got curious. Between the [Realm initializer](https://github.com/realm/realm-cocoa/blob/master/Realm/RLMRealm.mm#L340) and the relevant utility functions [#1](https://github.com/realm/realm-cocoa/blob/4570de61636152d76bdff98f492ae657bf04e096/Realm/RLMRealmUtil.mm#L57) and [#2](https://github.com/realm/realm-cocoa/blob/4570de61636152d76bdff98f492ae657bf04e096/Realm/RLMRealmUtil.mm#L42), I am reasonably confident that my claim is true. Thanks for the question!
TBH, I don't remember how to do this in neither GCD or NSOperations, but I find that the more complicated an asynchronous process is the more likely you're going to want to just use `Operation`s.
Swap to NSLog and it likely already is. Printing is not an accurate depiction of thread state due to a lack of sync on print buffers. Instead of printing in each, store the values in a threadsafe product type. struct CalcResult{ var res1Finished:Date? var res2Finished:Date? var res3Finished:Date? var res4Finished:Date? var res5Finished:Date? var res6Finished:Date? var res7Finished:Date? } Store the results in there and call dump/nslog after you are notified of finish 
I think there will be minor software changes and a heavy focus on hardware. A lot of the product line needs updating badly. 
Interesting! I didn't realize.
dispatch groups https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW25
You can use the Swift Package Manager. It can generate Xcode Project files using `swift package generate-xcodeproj` You can then code in Xcode and when you want to run it on Linux, just use `swift build` to build your project instead of Xcode. 
https://forums.developer.apple.com/thread/74872 There is a problem in the newest version of xcode :(
What's the purpose of creating instance of AnchorKit? Also most of view-related frameworks tend to be implemented as extensions, so it's easier and more natural to use them. 
It was just a test because I was encountering a bug using extensions, I changed it to this now: square.addAnchors(anchors: [.centerY, .centerX], relativeTo: self.view)
https://github.com/aromajoin/material-showcase-ios Last week, I have just created a new small library when working with company apps. It is not perfect at the moment, but it is helpful. :))) 
I've been writing some database drivers in swift for Linux and, at least from that respect, Foundation is pretty close. Some of the CF functions aren't there though. That's causing a little grief. Also, various releases have been breaking Foundation -&gt; Data in different ways that is always breaking tests and is annoying. 
Holy shit, you learn something new every day. Like the content was stolen from here: https://medium.com/9to5/how-to-implement-network-requests-to-a-rest-api-in-swift-3-with-alamofire-4-in-minutes-c825951cb199 just to push this site of cancer.
To clarify: This is more of an administrative change to make sure we don't miscompile code between mixed object file versions. Don't count on the version numbers to indicate anything other than "we made a breaking change".
What kind of app were you looking for?
The problem here is that `concurrent` does work, but doesn't send any sort of notification when it's done. So there's no way to track it to do something after it finishes. Are you sure you can't change `concurrent`? Are you sure that `concurrent` doesn't do something that can be monitored for completion?
My entire book, [Hacking with Swift](https://www.hackingwithswift.com/read), is about building real apps. It's also a) free to read online, b) fully updated for Swift 3 and Xcode 8, and c) supported by someone who comes by Reddit regularly and answers questions – me :)
Oh you are the man! Just checked out your entire store and could see myself working through some of these! Thanks!
I really like the way www.raywenderlich.com handles their tutorials. They are typically phrased in ways that beginners can get a lot out of but in depth enough even advanced users can learn from. If you go to the iOS section and scroll toward the bottom to the "how-to" section you can find a couple app tutorials I believe. Most of their stuff is dedicated to piece by piece stuff though. Bob the developer is another good source for really learning some tips and tricks for certain areas. Medium.com has a pretty good compilation of his work. If it is ui related stuff you are interested in, I find mark moeykens on YouTube to be a great hit. He has some total app stuff as well so you may want to check that out. Finally, I find the "lets build that app" channel on YouTube incredibly helpful but sometimes requires a moderate understanding and a bit of experience to follow at his pace. 
Thanks for the feedback on his stuff, Definetly going to be getting started on the free sets and go form there :)
Thank you – I'm glad to hear you're enjoying the books! :)
If they're increasing the version number of the ABI then it isn't a stable ABI
Nobody is talking about the concept. It's like me saying "if you know iOSs, you can also make Android apps because the concept of using a language to make an app is the same thing."
I will be messaging you on [**2017-05-14 15:51:53 UTC**](http://www.wolframalpha.com/input/?i=2017-05-14 15:51:53 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/swift/comments/6azp36/any_beginner_friendly_code_along_tutorials/dhj5y4i) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/swift/comments/6azp36/any_beginner_friendly_code_along_tutorials/dhj5y4i]%0A%0ARemindMe! 12 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! dhj5yoo) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
[small screenshot](https://i.imgur.com/Je7qmxt.png) Nobody like my colors though except me 
Highly recommend Ray Wenderlich https://www.raywenderlich.com lots of great follow along tutorials for real world stuff. 
I appreciate the work that went into making this work, but as an iOS engineer myself, I feel like it would be just as easy to do it the normal way and not have the added over head and/or completely of a library doing the same thing for me. I also don't see this shrinking the number of lines I would have to write by more than a few % if at all. 
Thanks! That's a good synopsis of why.
It takes a certain skill to teach, not everyone can do it. Regurgitating the swift docs and teaching Swift to others are two separate things. There are two types of people he need to learn about Swift classes. Ones who are familiar with CS and classes and just need the syntax, ones who are new to CS and have no idea what a class is. Unfortunately many tutorials cover the syntax only as if someone that already understands what classes are would need an entire article to figure it out.
The Swift example has a warning (`var` isn't mutated - use `let` instead) and an error (type of parameter isn't specified). Also, it defines a function that returns void versus the Python example which returns a string. let name = "/u/I_AM_ALWAYS_ANGRY" func sayHello(to name: String) -&gt; String { return "Hello, \(name)" } print(sayHello(to: name)) 
u/CallMeShiibbyy Can you share the link to the "video tutorial to build a basic game” you mentioned in your original post?
That makes complete sense! Thanks for the detailed description I'll be sure to pick up hacking with swift soon!
Hey! I'm new to development and new to swift too! This is how I remember without having code yell at me. Just take it that, if swift can't infer the type of data at compile time, you have to tell it what sort of data it is receiving (aka if you didn't init it, you have to let it know what to expect) It's the same policy for calculated variables and in this case, arguments for a function.
It's only awesome to other iOS developers. The average user probably wouldn't care and would be more concerned about content and delivery. Not saying advertising it is wrong, telling your users you made your game in Swift only targets a small percentage of your users (maybe). I guess the better question would be, what is your target demographic for this game? And would they be enthused about the specs of it? It doesn't mean leave Swift out of it, it just means that the message you convey by advertising the game as "made in Swift" has to have some relevance or significance to your product. If your intent is to make a mobile game and keep it in the iOS platform then yeah, it could certainly be attractive to those who know enough about Apple products to know that Swift is a Cocoa programming language. Otherwise, it's just another small insignificant tid bit that may not be of any relevance to your consumers. Open-source wise though? It's valuable, important and attractive to other iOS developers. 
This is amazing! Will definitely use this library in my apps!
There wind up being other differences between the BSD subsystems of Darwin and what's available on Linux, such as arc4random not existing on Linux.
Very cool, thanks for sharing! I noticed you used CAGradientLayer. Do you know whether this type of animation is possible/works well with CGGradient. For static images with subtle gradations, CGGradient is smoother since it has dithering. I'm curious how they compare in an animated context.
As a lover of Ruby this framework looks really great! I miss those Date convenience methods but I do agree with /u/donnaclus that the title of the post didn't give any explanation of what the framework does which made me almost pass it by.
You can indeed just store videos in your bundle if you want. How are you specifying the video location in your code? You should probably be using `Bundle.main.url()` to look for something like "video.mp4", then play that.
Yeah it's in the bundle but I'm not referencing it like you suggested, it's got the full path specified! I tried the "bundle.main" etc as I found a tutorial suggesting it, but got an error - I can't remember which now. But now you've confirmed that's the way to do it, I'll pursue it. Thanks a lot!
is there a way to display content of a page WP sites into iOS webview, but don't take all info (would like to exclude : navigation, widgets, footer etc)
Does it work well now? Was not a wonderful experience before.
Hi franklin2k! Unfortunately, the link to the App Store you submitted has been automatically removed from /r/Swift. This is because – generally speaking – compiled products are not relevant to /r/Swift (even if the app was originally written in Swift). If this is an app you have written, congrats on your acceptance to the App Store! A great way to promote it would be [Reddit advertising](https://www.reddit.com/advertising). If you would like to release its Swift source code, we would gladly accept a link to that. If the content you were submitting *was* in fact related to the subject of Swift programming, please [message the moderation team](https://www.reddit.com/message/compose?to=%2Fr%2Fswift&amp;subject=Please%20review%20my%20removed%20App%20Store%20submission&amp;message=https://www.reddit.com/r/swift/comments/6b74cj/check_out_my_app_topic_master_tool_used_to_help/) to have it reviewed. Regards, The /r/Swift Moderation Team *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/swift) if you have any questions or concerns.*
Apps that simply wrap a website usually won't be accepted into the app store
It does, works great for me
WordPress now have the [REST API](https://developer.wordpress.org/rest-api/) in-built. For example, if you want a list of posts, you could make a request to `https://[yoursite]/wp-json/wp/v2/posts` and to get a specific post, you'd then need to query `https:/[yoursite]/wp-json/wp/v2/posts/[postID]`. You can also add [custom endpoints](https://developer.wordpress.org/rest-api/extending-the-rest-api/adding-custom-endpoints/) easily. 
Use the [Singleton Pattern](https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/AdoptingCocoaDesignPatterns.html#//apple_ref/doc/uid/TP40014216-CH7-ID177) class SingleAlertView: UIAlertController { static let sharedInstance = SingleAlertView(title: "Error", message: "Retrying", preferredStyle: .alert) } Then just call this whenever you want to display the alert: SingleAlertView.sharedInstance.show(someViewController, sender: someSender) (`someViewController` and `someSender` are just placeholders, replace with your actual view controller and object sending the alert)
Promises are a good way of handling this sort of thing. I assume you're kicking off the requests concurrently? Look into using PromiseKit's `when()`.
The yearFounded property is an integer (a number) which has a different type from company and str, which are strings (text). You can't use the + operator on different types. Your attempt at string interpolation is close, but you need to wrap it all in quotes. You have two options: 1. print("\\(company)\\(str)\\(yearFounded)") 2. print(company + str + "\\(yearFounded)") In the first one, you use string interpolation. Each of the \(propertyName) will be replaced with the contents of that property inside the new string (represented by everything in the quotes). In the second option, you're using interpolation to "convert" the number into a string, and now that everything is the same type, you can just add them. Edit: escaping the backslashes 
Couldn't you do something like "yearFounded as String" ?
No, since they are different types. You could use `yearFounded.description` though, since `Int` implements `CustomStringConvertible`.
Hey thank you! Which one should I start using more often to better prepare me for future Swift use?
print(company + str + "\(yearFounded)") Personally I would do like this, as only the yearFounded type is the odd one.
Both options are perfectly viable. You just have to understand that string interpolation can be used to help you change your basic types (strings, ints, doubles, etc) into strings so you can easily put them together.
&gt;I assume you're kicking off the requests concurrently? Yes, that is correct. Thanks. I'll look it up. 
Sounds like you want to use [GameKit](https://developer.apple.com/reference/gamekit). You'll want to start with [GKGameSession](https://developer.apple.com/reference/gamekit/gkgamesession) to create, manage, and save a turn based multiplayer game.
Thank you!
Since you have some experiences in programming, I am recommending you to start with Stanford IOS 10 course.
so I will import Foundation and than use your code ?
`Foundation` is already imported in my code, you need to remove the `import PlaygroundSupport` and get the urls for your files in a different way.
I just wanted to add that the way I'd personally structure this would be, for readability: var company = "Apple" let yearFounded = 1976 var str = " was founded in " print(company + str + String(yearFounded)) All the interpolation just throws me off and seems unnecessary.
I'm having trouble following what you mean when you say, "i feel like i am to understand that just because i've typed that name into xcode as the associated class that they are linked somehow , but nowhere in swift 3 coding classes did i see any examples where we write code to modify something unique directly inside of a class that way". Perhaps you could give an actual bit of code which demonstrates this?
Solved! Criticism is welcome. func averageOf(_ times: [String], _ averageOf: Int) -&gt; String { let lastFiveString = times[times.count - averageOf..&lt;times.count] let lastFiveDouble = lastFiveString.map { NSString(string: $0).doubleValue } let lastFiveSum = lastFiveDouble.reduce(0, +) let resultDouble = lastFiveSum / Double(averageOf) var resultString = String(resultDouble) if resultString.characters.count &gt; 5 { let resultStringShort = resultString.substring(to: resultString.index(before: resultString.endIndex)) resultString = resultStringShort } return resultString }
when you first start a single view application in xcode 8 , there is a class declaration for a view controller that subclasses UIViewController. anytime you want to modify a graphical element like a label or button you drag in , you have to link it to the code within this custom view controller class. i understand that this needs to be done , but it confuses me to why we are doing all of our coding inside of a class declaration , when everything i've learned has taught me that a class declaration is just a blueprint for instances.
Jesus, there is a lot that goes into that kind of transition. I can't look for everything but try to break it into smaller achievable steps and consider Google your friend. Once you've gotten smaller problems, it's much easier to help.
I'd change a few things: - the array subscript will crash if averageOf is greater than the times array count, use `.suffix` instead - I wouldn't use NSString: `doubleValue` returns 0 for invalid strings so there isn't any validation, you can map to Double using the failable initialiser which can tell you if the string value wasn't a valid number - the variable names are specific to an average of 5, so you could rename them to be clearer - finally the rounding of the string is just truncating, not actually rounding. You could use a `NumberFormatter` to get rounding behaviour as part of converting the double to a string 
Unless your name is Microsoft, or Pixelmator, or Affinity, or Twitter, or Autodesk, or ... -- then you get an Apple Design Award for it!
Yeah I will use the framework I posted and then just something like a table view 
Apple doesn't want you to modify autolayout on anything other than the main thread. Find the code that is modifying autolayout properties from a background thread and force them on the main thread.
Thank you very much. Your solution works very well.
Works perfect on Debian testing in my case
If you have to ask if you can break the design guidelines, then the answer is "no, you don't have the design chops for it". 
The interface you're working with in Xcode's Interface Builder is an instance of the ViewController/View classes you're working on. These instances get saved into an .xib file. When that .xib file is loaded when the app runs you get your instance. So when you're typing code into the ViewController, you're modifying the class itself. When you're doing user interface layout in "Interface Builder", you're modifying instances of the classes.
I'm not a fan of them. It just creates unnecessary ambiguity in my opinion. 
Thank you so much! I've tried to implement these changes but I run into some syntax errors since I'm not sure how to properly write it - could you consider re-writing my function with your changes? It would mean so much!
the right way to do this is with [array.reduce\(\)](https://developer.apple.com/reference/swift/array/2298686-reduce) let times = [1, 2, 3, 4] let average = times.reduce(0, { x, y in x + y }) / times.count
Blog post [series on data structures](https://medium.com/journey-of-one-thousand-apps) and [Music streaming app](https://github.com/chriswebb09/Musicly)
They are all variables. The first 2 variables are Strings and the last is an Integer which is the reason for the last being interpolated. 
Apple keychain. even though you removed the app, your login information is still in the system. 
Keychain isn't stored on app deletion 
Yes it is
No. I tested it this morning 
 ///makes average of last 5 if no other number given and resulting array is at least 5, otherwise, tries to not do stupid things func suffixAverage( vals:[String], numItems:Int = 5) -&gt; String { let valSuffix = vals.suffix(numItems) guard valSuffix.count &gt; 0 else { return "NaN" } let numerator = valSuffix.reduce(0.0){ $0 + Double($1) } return "\(numerator / valSuffix.count)" } Edit: forgot it was floats, silly mobile app
I didn't run this, just typed it in Reddit, but this is about it
iOS 10.3 may have removed it. It used to though. 
Put assert statements in front of everything that modifies your layout that you are on the main thread. Recklessly slap your app around like you are 3/a monkey, then do a DispatchAsync.main.async{} wrapper around where it crashes.
Or as the HIG puts it, branding (which custom app themes largely amount to) should be secondary, light accents on the native controls rather than a a full on skin. Under macOS, aesthetics are intended to serve and enhance functionality. I tend to agree. Custom UI/UX are fine on mobile where the device basically becomes the app it's currently running. On the desktop your app is part of a neighborhood of other apps and is expected to be a well-behaved citizen. Apps that insist on radically custom UI without sufficient cause are kinda like that weird neighbor who painted his house bright purple and has a thing for grilling fish in his back yard every Tuesday at 2AM — they jump and beg for the user's attention at what are often totally inappropriate times. Given the huge array of things that the desktop platform is capable of, there's a very good chance that your app does not constitute the first, second, or even third most important task that the user is carrying out at any given point in time. Because of this, it's important that apps sink into the background and blend in when not needed, and sticking to the stock UI theme does this quite nicely. Of course, crafting a smooth, memorable user experience with stock UI is more of a challenge sometimes, but it is possible nonetheless and if you can accomplish it, your app will stand out in a good way. It's a hallmark of thoughtfulness and good craftsmanship.
typealiases don't have the protection you'd think they do at first glance. I suggest structs with literal convertable initializers for many things. They are fine for more complex things that are unlikely to be messed up (function prototypes, etc)z
I think a little of all of those is good, but don't spend so much time on process that you never develop. User stories can be useful for UX, quick UI mockups give you something to work against. MVC is good for keeping everything logical and easy to work through, and milestones (especially deciding what you want to have in your minimum viable product, and what can wait until later in the life of the app). Finally, do some testing as you implement features. Try to fix bugs that break the app by intentionally breaking the app through those new features. The larger your app, the more process it will need, but you can relax on the process if it's just you.
OK, I see. I'd suggest doing two things: 1. If you are _successfully_ using interface builder to create interfaces and Xcode to write classes as you describe, and the only problem is that you feel uncomfortable that you don't completely and thoroughly understand exactly how it all works, then I'd say just 'go with it' and eventually you will understand. In fact, I adopt this tactic for everything; for example, many things in Git I don't understand, but I can perform certain steps to accomplish, and eventually either I will understand them (if I wish), or, I can keep performing the steps without complete understanding if I just want to get the job done. 2. try building a _small_ project without interface builder (ie without storyboards, nibs, xibs). Because I think what is confusing is the combination of interface builder and code, and by eliminating interface building and using code to create the UI, you will get the full picture of what is happening. N.B. I do not advocate building entire apps without interface builder in general, because it is just too tedious. In this case, I'm suggesting doing it (again, for a very small app - say 2 or 3 view controllers) for pedagogical reasons. Having said that, there are times when it is appropriate to create a UI component, or small set of UI components in code, so doing a small app without IB would be good practice for those occasions. 
Using SFSafariViewController apps can check if you are logged in on safari and communicate API keys and other information back. That's why I asked. Seems unlikely they would have stored API key information on the device in a place that it would have stayed. 
It really depends on the scale of the project. Things like User Stories and UI mock-ups are powerful communication tools, so when you are working on a team, or need to get feedback from people they are a good place to start. If your first project is something that you are working on yourself, then they are less critical. They will become really valuable if you see your project growing and you need to work with others in future. If I'm working on something just for me, in iOS i just start using the story boards in Xcode to lay out the basic nav structure of the app - That's a good enough 'UI Mockup' for me. I'll mock up a model, and focus on getting the user interactions and structure where I want it next.
There was something that Uber did to circumvent Apple's policy to not track stuff. I think Daring Fireball acknowledged it.
This is not that. Uber was tagging device IDs, not manipulating devices. This is almost definitely the shared keychain cause that u/Raygun77 wrote about. 
False. Applications run in their own sandbox and that sandbox is deleted upon uninstall. All that is retained is what was stored on iCloud Drive and anything that was stored in a shared keychain that has another remaining app dependency. Username checks out tho. 
The aliens maaaaaaaaaan!
It's funny because probablyreasonable's username is very applicable to their comment. ^^*beep* ^^*bop* ^^if ^^you ^^hate ^^me, ^^reply ^^with ^^"stop". ^^If ^^you ^^just ^^got ^^smart, ^^reply ^^with ^^"start".
10.3 did remove this "feature". Non-shared keychains are now removed when the app is deleted 
You could even leave out the closure and just pass the operator as a function: let times = ["1", "2", "3", "4"] let average = times.flatMap { Double($0) }.reduce(0, +) / times.count As OP wanted just the last 5 elements: let last5 = times.suffix(5) Putting it all together: let avg = times.flatMap { Double($0) }.suffix(5).reduce(0,+) / 5
Works! Now, I want the result to have a maximum of 5 characters. func suffixAverage(times: [String], items: Int = 5) -&gt; String { let valSuffix = times.suffix(items) guard valSuffix.count &gt; 0 else { return "NaN" } let numerator = valSuffix.reduce(0.0){ $0 + Double($1)! } let result = String(numerator / Double(valSuffix.count)) if result.characters.count &gt; 5 { print("Wrong.") } return result } I was thinking something like this: while result.characters.count &gt; 5 { //Remove the last character }
For reddit formatting :) I typed \\\\( so that you see \\(
The alert says all you need to know. When you use the + sign with spaces on both sides, it's taken as an addition (or concatenation, in case of strings) operator. If however it's a part of the declaration, e.g. is directly before or after the string, the compiler treats it as a unary operator, as below: let n = 1 print(-n) // prints -1 The unary + operator however is only a prefix operator, so the compiler will throw an error when you'll try to use it as a postfix (as you did). TLDR: use spaces between operators.
Unless something changed in the past year or so, the only way this works is if on tap you copy the image into UIPasteboard and the user then manually pastes it in the text/input field.
I might add the way you named your variables is what's been called "Systems Hungarian notation". It's generally accepted that it doesn't give you any benefit over shorter names. The type system built into the language should handle those cases, while you should be trying to convey *why* you're doing something to other programmers (including future you). What is "result" supposed to be? Maybe call the numeric one `average` and the formatted one `formattedAverage`. This helps reveal your intent. ("Why do I want the result as a string?" "The kind of average I'm looking for is formatted a certain way")
Wenderlich has a ton of great tutorials on his website, and if you want to invest some money the 2D Apple Games and 3D Apple Games books are exactly what you need.
Do you want to expand on your question?
That guy is insanely good. I learned a ton from his youtube channel. a TON!
Hey your MVVM is not clear. its very messy, You can use ViewModel for getting/setting data to iterate view.
You're never supposed to touch the UI from any thread except main. Doing so can cause very strange behavior that's hard to debug. For example, the app may lock up for 30 seconds, or the change you made may execute but not actually appear on the screen for some time, or ever, or it may crash. They're a real pain to debug, especially if you've never seen it before. 
The library's documentation did a better job of explaining than the blog post. Either way kudos 
Store all user's gps in remote server. Ask for location before login. If location matches a user, ask if you are that user. Its a reinstall.
That would be it. There's also an identifier for vendor id they can use if they are both Uber apps. Also annoying you got downvoted above because if you're on 10.3 the keychain trick doesn't work. 
Well I'm not right. Haha
I really really want to have the time to delve into this. There are a very limited number of applications that utilize this type of connectivity. I'd like to play around with having a jukebox application (apple music, iTunes, youtube, etc) that sits on tvOS and anyone at party can add to playlist. We also wanted to build an app for our garage gym that we could see previous workouts for everyone in the gym on the tv displays (sometimes 3 of us) and track our reps, previous workout, competing via phone/siri while we work out, etc.Right now we are using a giant whiteboard. Everything seemed to point to reliability unless using a server backend ala Jackbox on tvOS. Not sure what Popsong Party uses. http://spaceteamadmirals.club/blog/the-spaceteam-networking-post/ 
great examples in those projects!
Here is the screenshot: http://imgur.com/a/54kFh 
Great post!
All welcome additions with one little proposal instead of: let groupedCities = Dictionary(grouping: cities.keys) { $0.characters.first! } print(groupedCities) how about using a functional method like map and filter passing the key/value tuple? let groupedCities = cities.group { $0.key.characters.first! } print(groupedCities)
Jesus everyone here is wrong, they keep your UDID on their server, you're still a user on their server after the app is deleted, then you reinstall the app it checks your udid against their database of users and re-authenticates the device. 
Ignore the downvotes you're correct. 
Hi, sorry I could not understand your question. If you could provide more details that would be fantastic..:) Other than that, the best advice I can give you is to divide your problem into as little parts as you can, think logically, and Google/ask everything. I'm not sure if this is a big task but do your best to break it down into smaller chunks. Here are some questions to get you started: Were you trying to build the thing linked in the description? What have you done so far? Do you want to create this Programmatically or using Storyboard? Feel free to ask this community anything, they are incredibly friendly but with this description, I cannot personally help you but I hope that someone else can. Take care, and good luck. 
Yeah, I highly doubt this is right. Besides the facts that multiple people can live at one address, people aren't in the same place all the time, and that people can move houses. This would be a terrible idea in regards to privacy, because all you would need to do to get into someone else's account would be to reinstall at someone else's house. 
JSON encoder?
Hi and thanks for the response! I'm sorry if it doesn't make much sense. I was actually fearing so. Let me try again :) Here's another screen shot: http://imgur.com/a/MQuM0 And here's the current state of the view controller for this scene (sorry for any embarrasingly newbie faults in the code): https://pastebin.com/D2xUEXgz I want to be able to repeat this section – preferably in code – x number of times. So x times sliders, switches and labels. The idea is for the user to press a + button or something to add a new section consisting of the exactly same things as in this box: A slider, a switch and the two labels. Right now it's just set up as seperate objects in a scene in a navigation controller but I'd love to be able to programmatically create the actions and outlets depending on how many of these sections the user wants. I hope this makes a bit more sense ? What I'm looking for is basically just the right concept or word to google for. I've found stackoverflow, apple and hackingwithswift etc. to be great resources but with this I'm simply not sure where to start. Thanks everyone!
^(Hi, I'm a bot for linking direct images of albums with only 1 image) http://i.imgur.com/CMrmdg0.png ^[Source](https://github.com/AUTplayed/imguralbumbot)
Oh I didn't realize it was an article attached. I just came straight to the comments. That's pretty sweet! 
...maybe... JK I thought it was a question based on the way the title was written, I didn't notice the link next to it or who posted it. 
Agreed, also, op indicated having barely any programming experience and working with Swift for 6 months. Changing now to C# or JavaScript might be an unnecessary barrier. Using Swift to understand the basics of programming and game development is a good way to grow as a developer. Switching to Unity will be pretty easy once you have a solid foundation, at which point you'll be able to enjoy the advantages of Unity (cross-platform, huge community, great game framework, etc).
That's pretty great. I don't miss json by hand in an old Swift project.
This feels wrong to me, but I don't know why. Objective-C and Swift both disallow stored properties in extensions. I think they have good reasons for doing so, I'm just not sure what they are.
This does feel more swifty. One note: the [API design doc](https://swift.org/documentation/api-design-guidelines/#strive-for-fluent-usage) indicates that `group` implies a mutating function. You'd probably want `grouped` for a non-mutating version that returns a new dictionary. I haven't really looked at the SE group's patterns, but they may actually want both a non-mutating and a mutating version defined.
&gt; I haven't really looked at the SE group's patterns, but they may actually want both a non-mutating and a mutating version defined. You can't have a mutate-in-place version, because the output is of a different type from the input; it takes an array and produces a dictionary.
The remarkable thing is that this was only proposed within the past few weeks, and approved like last week or something.
It may feel swiftier, but it's not very obvious that an array method will return a dictionary. Making it a constructor makes it very obvious what is happening.
No need to do that, really, if you're creating a framework. If you're developing 1.0.0, and you implement `func foo`, just mark it as deprecated when you develop 2.0.0: ``` @available(*, deprecated) func myFunc() { ... } ``` I get what you're trying to do, but as you said, unfortunately `@available` only works for OS versions. As a side note, `@available` includes `iOS, iOSApplicationExtension, macOS, watchOS, tvOS`... too. Just develop your framework and mark functions as deprecated using the `*` wildcard as you go. I wouldn't rely on framework versions.
Even today, *most* software projects fail. Do you really want to do what *most* people do? At the very least, you should look at what the successful projects do. Linux started out as a program that printed "ABABAB" to the console. Facebook is written in PHP, and that was too slow so they wrote their own PHP compiler. Google built their first rack out of Lego. I could spend all day talking about what Amazon screwed up. It's not just the runaway successes. I can't name a single successful software project that followed best practices from day one. Projects simply don't succeed or fail based on how many User Stories you write. I think the major reason people care about what everyone else in the industry is doing is because they're a manager and they want to have an excuse ready when their project fails.
if you want most powerful, you need to go with [metal](https://developer.apple.com/metal/). i've been exploring it recently and holy shit is it insane. just to give you a scoop of why it's a big deal, on a gpu you can sort an array in log^2 (n) time (https://en.wikipedia.org/wiki/Bitonic_sorter). sorting 1000000 numbers on a cpu would be 20,000,000 operations. On a gpu it's 400 (!!!). I think that GPUImage might also fit your bill. Instead of metal it uses opengl (it came out before apple announced metal). https://github.com/BradLarson/GPUImage That being said metal is a really really nice api (SO MUCH NICER THAN OPENGL) but you need to rethink how to program it. If you need power its definitely the way to go. It's definitely a good investment cause everyone's gonna be doing it soon so the earlier you learn it the better. EDIT: Seems like the author has been busy porting it to swift but it's still running on opengl https://github.com/BradLarson/GPUImage2 note that the above repo has 15k stars so i'm guessing it might be more stable? 
Little fix it's actually DispatchQueue.main.async{}
Thanks for the reply, I never studied metal because I thought it was for gaming only but I'll look into that.
I understand what it enables you to do, but there's never been a situation where there wasn't a better way. 
Keypaths are used heavily by controllers to create bindings between views and models. They're also needed for implementing the observer pattern.
Yes.
You only need FFMPEG if you are dealing with codecs and containers that AVFoundation can't deal with. On iOS, I'm not sure how that would be an issue really. For editing, etc, AVFoundation is really the only way to go. /u/adamnemecek doesn't know what he's talking about. GPUImage is the old way of doing things. You can use CIFilters with AVCompositions via AVVideoCompositing on both iOS and macOS. Source: I write video editing software for both platforms (https://vimeo.com/121663242 https://vimeo.com/110889552 https://vimeo.com/91556826) 
Thanks! Those are very impressive links. I'm going to dig into AVFoundation and see how far I can get. Can I extract frames, analyze/modify frames and put them back in and alter the frame rate on the fly? What book/site did you use to learn to do that?
Propose it; it fits better as it's similar to map and filter as you said. It feels more natural/swift-y to me as well. Good thinking.
Besides that those two are from Apple, there are exceptions. Dark is part of UI (check "HUD Window" in Xcode) and is traditional for photo and video windows, used by many apps. Calculators and Messengers are another example. Games are universally excused for pretty much anything. It's not very strict.
What ever happened to the rust inspired ownership model? Is that still making it into this release?
I think it's being planned and some work is being done but it's too big of a feature to get into the Swift 4 release.
Awesome post! I went a similar route in the past but used PubNub
One that I know of is [Swift Programming from Scratch](https://www.weheartswift.com/swift-programming-scratch-100-exercises/). It's not from the point of app development, as that's rather silly when the pupil can't code at all yet. But once you have a grasp on programming from that book, you can follow it up with something like [Hacking With Swift](https://www.hackingwithswift.com/read).
There is no better time to be a dual Android/iOS mobile developer. Kotlin and Swift, beautiful twin sisters that will rule the world for the next decades. Java, we barely knew you. I for one welcome our new mobile overlords.
Pretty awesome! I got to work with some of the guys who worked on the first iPhone (iOS, UIKit etc.) &amp; other cool products / hardware (e.g. TouchID) and learned soooo much stuff.
It's frustrating that there are going to be two languages that are this similar that do basically the same exact thing. Imagine being able to write both Android and iOS apps in Swift.
/u/SwiftApple why is this hidden from the new section?
Swift enums can implement protocols.
how else am i supposed to ask work related questions on reddit without my team members seeing it and finding out my username :P
&gt; import UIKit &gt; import PlaygroundSupport &gt; &gt; let containerView = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 375.0, height: 667.0)) &gt; PlaygroundPage.current.liveView = containerView &gt; &gt; // First create three views acting as the hands of the watch &gt; // Be sure to set the anchor point to their corner, as that is the anchor point of our rotation. &gt; &gt; let hourHand = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 6.0, height: 60.0)) &gt; hourHand.center = containerView.center &gt; hourHand.layer.cornerRadius = 4.0 &gt; hourHand.backgroundColor = UIColor.white &gt; hourHand.layer.anchorPoint = CGPoint(x: 0.5, y: 1.0) &gt; &gt; containerView.addSubview(hourHand) &gt; &gt; let minuteHand = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 6.0, height: 95.0)) &gt; minuteHand.center = containerView.center &gt; minuteHand.layer.cornerRadius = 4.0 &gt; minuteHand.backgroundColor = UIColor.white &gt; minuteHand.layer.anchorPoint = CGPoint(x: 0.5, y: 1.0) &gt; &gt; containerView.addSubview(minuteHand) &gt; &gt; let secondHand = UIView(frame: CGRect(x: 0.0, y: 0.0, width: 2.0, height: 100.0)) &gt; secondHand.center = containerView.center &gt; secondHand.layer.cornerRadius = 4.0 &gt; secondHand.backgroundColor = UIColor.white &gt; secondHand.layer.anchorPoint = CGPoint(x: 0.5, y: 1.0) &gt; &gt; containerView.addSubview(secondHand) &gt; &gt; // Helper function &gt; let Degrees2Radians: (CGFloat) -&gt; CGFloat = { $0 * .pi / 180 } &gt; &gt; // Get current time &gt; let dateComponents = NSCalendar.current.dateComponents([.hour, .minute, .second], from: Date()) &gt; let hours = CGFloat(dateComponents.hour!) &gt; let minutes = CGFloat(dateComponents.minute!) &gt; let seconds = CGFloat(dateComponents.second!) &gt; // Convert the time to an angle &gt; let secAngle = Degrees2Radians(seconds/60.0 * 360.0) &gt; let minAngle = Degrees2Radians(minutes/60.0 * 360.0) &gt; let hourAngle = Degrees2Radians(hours/12.0 * 360.0) + minAngle/12.0 &gt; &gt; // Start the rotation with the current time (fromValue) &gt; // Have it increase with `byValue` over `duration` seconds. &gt; var animateHours = CABasicAnimation(keyPath: "transform.rotation") &gt; animateHours.fromValue = hourAngle &gt; animateHours.byValue = CGFloat.pi * 2.0 &gt; animateHours.duration = 60.0 * 60.0 * 24.0 &gt; animateHours.repeatCount = .infinity &gt; hourHand.layer.add(animateHours, forKey: "fullRotation") &gt; &gt; var animateMinutes = CABasicAnimation(keyPath: "transform.rotation") &gt; animateMinutes.fromValue = minAngle &gt; animateMinutes.byValue = CGFloat.pi * 2.0 &gt; animateMinutes.duration = 60.0 * 60.0 &gt; animateMinutes.repeatCount = .infinity &gt; minuteHand.layer.add(animateMinutes, forKey: "fullRotation") &gt; &gt; var animateSeconds = CABasicAnimation(keyPath: "transform.rotation") &gt; animateSeconds.fromValue = secAngle &gt; animateSeconds.byValue = CGFloat.pi * 2.0 &gt; animateSeconds.duration = 60.0 &gt; animateSeconds.repeatCount = .infinity &gt; secondHand.layer.add(animateSeconds, forKey: "fullRotation") im trying to add this to my code and i keep getting an error at the let animateMinutes = CABaseAnimation(keyPath: "transform.rotation") "Use of unresolved Identifier 'CABasicAnimation'" do you know how to fix that?
But everyone is moving to ReactNative to spare themselves the horrors of waiting for the compiler.
bookmarked, have some Java experience but wanted to learn- have Xcode, Apple's The Swift Programming Language, and this. Excited to learn.
What is the purpose of this thread?
You aren't initializing x and y properly: you're declaring them using `let` and also not setting a value. To get the code to work, you need to make 2 changes: using `var` because you're changing the values later, and setting an initial value. Replacing the first line of the handCoordinate(_:) func with this makes it compile: var x: CGFloat = 0, y: CGFloat = 0 Also not sure if you realize this, but heads up. You're declaring the handCoordinate(_:) func within the awake(withContext:) func.
I'm not sure what your level is, but if you are a beginner, this should be of good help https://www.udemy.com/the-complete-ios-10-developer-course/
Thanks that fixed it, I was also not aware that's probably what was causing other issues 
Yep . Earlier I didn't liked programming but xcode auto fix &amp; auto completion made me like swift more &amp; more. Hopefully we can see swift IDEs on other platforms too.
I've never used core data, but if i'm understanding your question correctly it sounds like you need an interactor and a datastore. network calls happen in the datastore. interactor is what you call from your view controller, which then calls the data store (which would make the network call and where you would use your model). that data is passed back to the interactor where you should handle any data manipulation, if needed, before passing back to the view controller. sorry if this doesn't make much sense, it's late!
if/guard let can also be handled by the compiler in Kotlin, in most cases Instead of writing guard let foo = foo else { return } // use the newly assigned foo here you can just write foo ?: return // use foo as a non-nullable value here The compiler will know that from then on, foo can't be null, no assignment necessary. Not really related, but just wanted to mention it. :D I'm super stoked to have Kotlin, as I really like Swift, but can't stand Xcode.
I'll look into it! Thank you!
Let me know if you have any questions!
Guess he forgot to link https://medium.com/@qutheory/vapor-2-less-code-more-power-af1e1ec5affa Same title, posted today. Haven't read it. 
Don't forget your toolset: http://i.imgur.com/eYZ9iXB.jpg 
Am I the only one that thinks Kotlin is a really stupid language name? "Oh I know Kotlin." The fuck? "I'm a Kotlin developer." Ehhh...
Call it hello kitty for all I care 
I'm from Poland and Kotlin is name of popular brand of ketchup here.
I like Argo very much. If it weren't for its speed (which affects only some projects), compile time issues and killing sourcekit I would gladly use it on all projects. 
Hey just to let you know, I wrote up a part 3 with ability to update and search. 
This a 100 times. Now there's more than one way Kotlin can be in my fridge.
Sorry for the delay, I got pretty busy last week. 
This is definitely the preferred approach, /u/BallisticDiamond. 
You can use Swift just fine without Xcode.
Alternatively, check out https://github.com/sberrevoets/SDCAlertView which looks and behaves almost exactly like UIAlertController, but offers a lot more customization options.
Maybe if you ignore Interface builder, but I have yet to find a replacement for that.
I use swift for data analysis and machine learning. Currently I'm working on a project where I use Kohonen Self-Organizing Maps to build a recommendation system for movies. The accelerate framework provides some incredibly fast vector and matrix functions, which is nice if you work with high dimensional data. 
Every programming language has a dumb name, but "Kotlin" is still far better than "Swift", which has the anti-distinction of being both an English word and the name of an existing programming language.
Swift is way better than Kotlin. Sounds like some industrial poison. 
&gt; Type Coercion I feel like the Swift example is directly indicative of how Swift *lacks* basically any type coercion.
what is exactly Vapor? There is no explanation on the page.
You can split the expression into smaller bits and it works quite well. But you are right, the issue was big enough to force a switch to marshal at our company. Though if I need something for a small side project I still use Argo, hoping sourcekit and type inference improve in time. 
I like the Swift way, because it is explicit. What is widthLabel in the Kotlin example? Is it a String? Is it a Double? Why either, when you do not specify? What if I you try to assign the sum of an Int and a Double?
That would assume a person's location remained the exact same from the time they last accessed the app to the time they reinstalled it. How could that even be a viable option?
Yep, agreed. It's a meaningless operation to add a string to a double, and there are at least two equally valid outcomes (it could easily mean parse the string as a double and add those together).
Holy shit that syntax is so much nicer than Swift's. Less clear but damn sexy
"But everyone who actually knows how to program and understands the implications of using a massive app-wide-encroaching third-party framework with limitations knows to never use ReactNative in the first place!" Also Javascript is horrific. There you go. :)
Kotlin is like a poor man's version of Swift, such a bad mistake by Google to go with Kotlin instead of Swift.
Haven't worked with Kotlin in about a year and a half but from what I remember generics are defined before the function name. Is it possible to define them before and after the function name now? //from the article fun f&lt;T: Nameable&gt;(x: T) //how I remember fun &lt;T: Nameable&gt; f(x: T) I think the article trivializes the differences between the 2 languages also. For instance, protocol and interface syntax are similar but Kotlin is no where near as restrictive as Swift's protocols are when it comes to how you can and can't use them. Also property syntax/usage is different i.e. delegated properties, defining properties at the class signature, inline functions, co-routines, etc. So the basic syntax is similar but there are some major differences in other aspects. 
In what way do you think Kotlin is inferior?
Meh, it's a cheap knockoff at best
So a closure?
With regards to cell registry, yes. It requires nib names and cell names to match. 
"unexpectedly found nil while unwrapping an Optional value" is the important part here. There is an optional missing somewhere and it is crashing at run time. More on [optionals](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html#//apple_ref/doc/uid/TP40014097-CH21-ID245). If you give me a GitHub repo I can try and take a look. 
&gt;what is exactly Vapor? It's way faster &gt;Same title, posted today. Haven't read it. I hadn't read the article, just linked it.I honestly don't know what it is. 
A server-side swift framework for building web apps.
Seems strange to cut out a big feature like that?
you are smoking too much from the bad stuff... 😃
ahhh, thanks. I think they should write that on the page. 😃
How can I extend a class to do that?
And it was a design choice. Which I like a lot. 
You could have said the same thing about swift being a knockoff of scala when it was created: https://leverich.github.io/swiftislikescala/ It's beneficial for all of us for new languages to emulate older ones.
Since iOS 10.3 you can use [SKStoreReviewViewController](https://developer.apple.com/reference/storekit/skstorereviewcontroller). Users can directly leave a review without leaving the app. Call following method in a view controller where you want the alert to come up. SKStoreReviewController.requestReview() 
Ok thx
So I did everything you said and there are the following problems: 1) import Foundation // througs error 2) XCPlaygroundSharedDataDirectoryURL doesnt work, because it is for playground I think I am sorry for the long time it took to come back to you bad I have university and this is a side project of mine. Thank you non the less .
Yea the optional force unwrap is crashing the app. When you run the app, it doesn't show the line where it crashes? If it does you'll know where to fix it. Otherwise, try to set breakpoints in code that runs as the app launches and keep going forward until it crashes.
They have similar syntax, but they are essentially different. First, Swift protocols are like type classes. E. g. in protocol `Num` you can have a "static" function `zero`, and you can't do that in Kotlin. Second, Swift generics can be parameterized by values (by primitive types or by structs). In Kotlin traits can only be parameterized by reference types. So in Kotlin (as in Java) you cannot write efficient generics algorithms (e. g. implementation of `sort` which will work for both 32-bit and 64-bit integers).
&gt; They're trying to bring Kotlin to iOS. Aa I said, there's a huge different between "trying to bring" and "ready for production". &gt; The GC rarely becomes an issue these days unless you do something stupid like allocating in a draw method. Unless you something simple like simple application with 5 forms.
Do you have benchmarks to back up that claim? Because I can't remember the last time my Android app dropped a frame due to the GC.
Well, I'm not a phone developer, I encountered huge problems with GC on servers. GC is not a problem unless your application allocate *a lot*. Also GC is less battery efficient than refcounting. Just because it requires more CPU. And I know that Apple had GC implementation for Objective-C on Macs, they didn't put it on iPhone, and even deprecated it on Macs. For the reason I described. If there were no problems with GC, Google wouldn't write [this guide](https://source.android.com/devices/tech/dalvik/gc-debug).
its certainly possible, but the hardware needs to support it. does the hardware on your camera support it? if not, are you willing to figure out the firmware to add the feature?
No, how can I extend a class to include a delegate?
Can't really see anything wrong with the code… Did you make sure you set an identifier for the unwind segue in the vc your unwinding from?
I would like to point out this is relevant to the runtime rather than the language. Because Swift compiles to iPhone binaries, it can use ARC in the variables. Kotlin compiles to the JVM (or Dalvik), which is designed to use the heap. Agree with you on having to be careful on how you allocate resources when programming do Android, though. 
Almost all the examples in the link were shorter in the Kotlin version. 
Based on all your comments below, i'm just going to point out that you don't understand ref counting and tracing GCs, which are both types of garbage collection. ARC is only deterministic in trivial cases where a deallocation will occur unconditionally in the same function. In all other cases, it must keep a tally of how many strong refs exist, incrementing and decrementing, then conditionally deallocating. It is even possible to leak memory with ARC if you create a reference cycle, where a tracing GC does not allow that. ARC may not ever stop the whole world, but it does have tangible overhead, and it is constantly stopping for brief moments to check what to do, stuttering, if you want to get poetic. it is garbage collection by any normal use of the word. iOS tends to have a lightweight, fast, and smooth as butter GUI, but that's a separate component from Swift. I like Swift better than Kotlin in some ways, but you're not being objective, and you need to do more research. I would even point out that the geometric mean of Java's performance in a series of benchmarks ranked it better than Swift: http://benchmarksgame.alioth.debian.org/u64q/which-programs-are-fastest.html But, all benchmarks should be taken with a big grain of salt. Kotlin compiles to the same JVM bytecode as Java, of course. Like I said, Swift is great. Just be objective.
That's completely different, although both articles have word "memory" in them. 
they're both about optimizing memory usage and performance, nothing more.
Kotlin predates Swift.
Do the methods have similar signatures? Sometimes the way the way method calls resolve can be counterintuitive. Otherwise there should not be some random method getting called like that.
My point is that in both Kotlin and Swift you need to optimize memory usage, but only in Kotlin you additionally need to optimize GC for pauses, GC overhead etc. 
Who the hell thought `val` and `var` were good ways to differentiate const?
"the community"
How can a company know who you are, if you dont even know yourself? Sometimes prompts are only blockages in our paths but you need to push through and you will get through them. Is your actual name, Will Lastname
generally speaking a callback is when you pass executable code to a function to be called later. I've never heard a delegate referred to as a type of callback. They're not calling *back*, they're just calling the delegate. 
Nothing happens, and yeah it's definitely being called! So I just deleted and recreated the segue and it's working again? Must've just been a weird bug, thanks for the help!
Ok, but this sounds like pretty much all I found online. First, why is that a preferred way? Second, my main concern is updating UI elements with closures, because this way it feels like VC2 is updating VC1's UI.
Hmm yeah the IB connections can be fickle sometimes but they usually force an error at runtime... Oh well, nice to know that you got it working!
Yeah this didn't have any errors at buildtime or runtime at all! Yeah, thanks for your help! :)
Wanna mess up your brain? Switch back and forth between Swift and ES6/Typescript where `let` is for variables.
abCount
You are correct from the perspective of types. When I said Swift protocols are more restrictive, I was referring to those usage errors that Xcode reports when attempting to use protocols i.e. "protocols can't be used here because of blah blah blah". I never ran into those situations with Kotlin. Kotlin allowed me to use interfaces in the usual OO design manner that I'm accustomed to whereas with Swift I usually find myself having to create work arounds because of the protocol restrictions.
And this makes me want to pick up iOS dev for the first time :)
And you can keep making mediocre apps while the rest of can make some $$
Why am I getting down voted for this? The names you use for variables don't matter, and I'm encouraging good commenting practices. 
elementCount. Because if the requirements change to include C as well your variable would still make sense. Granted, this is a limited example and context matters but if you are too specific in variable name then changes to the requirements would force changing the variable name.
If you have to explain a variable name in a comment then that variable name is bad. You should always use self explanatory variable and function names.
Just name it "count". You want to separate implementation from presentation. If you need to change which characters are being counted, you want to have the variable name still apply (unless you're doing something really weird). This is why the append method is called "append" and not "bringUpTheArraysHeapMemoryAndCopyIfNecessaryAlsoAllocateMoreMemoryIfNecessaryFinallyAddElementToEndOfMemory".
Yes, a "clean" would have fixed it. For all Xcode's faults of inexplicably recompiling the world (including dependencies that never change), it sometimes *doesn't* recompile *enough* of the things! Either the source file of the calling code, or of the mis-called function, needs to be recompiled. Somebody needs to make an editor extension that adds a "Touch" menu item. Until then, type something into the file then delete it, and save. That will make it get recompiled next time.
**Here's a sneak peek of [/r/coaxedintoasnafu](https://np.reddit.com/r/coaxedintoasnafu) using the [top posts](https://np.reddit.com/r/coaxedintoasnafu/top/?sort=top&amp;t=year) of the year!** \#1: [image ILLEGAL](https://i.redd.it/3h02hev6wbqy.png) | [107 comments](https://np.reddit.com/r/coaxedintoasnafu/comments/646xmn/image_illegal/) \#2: [current](https://i.reddituploads.com/b3e8cead27534acd9b2e43b717712963?fit=max&amp;h=1536&amp;w=1536&amp;s=556bb9a8c7550d43df81a38b368360f1) | [67 comments](https://np.reddit.com/r/coaxedintoasnafu/comments/5pj4z6/current/) \#3: [Parwan Providence, Afghanistan: Asked a native pedlar if he had any Gadsden flags, got this instead. He was completely serious, and I couldn't stop laughing.](https://i.redd.it/nqig6yomm39y.jpg) | [166 comments](https://np.reddit.com/r/coaxedintoasnafu/comments/5ncppb/parwan_providence_afghanistan_asked_a_native/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
Use truncatingRemainder instead. 
Perfect. I would pick this one
I understand your explanation and it makes sense. Thanks.
No problem!
Well done sir, I concede to you.
That is not how it should work at all. Looked over the documentation and thats not how it is supposed to work.
This has happened to me on two separate occasions over the last year. Swapping the positions of methods did indeed work for me also. http://stackoverflow.com/questions/36009725/swift-sometimes-calls-wrong-method
Because the android dev of my app is using google maps and we originally planned to both use google maps to lessen complication and for the app to look the same on both devices (ios and android)
CountOfLetters would be generic. CountOfAB would be specific. However context is a big issue here, if you are in a loop counting characters with the function eventually returning the data to something else then something as simple as "count" would do. My fear is that by creating a variable in the form described, that you are creating some sort of global variable. This might be a bad thing. Maybe an extended explanation of what you are doing is in order.
one l can ruin countless hours 
Can someone please explain this syntax, the closure looks so weird to me... Dictionary(grouping: cities.keys) { $0.characters.first! } 
What else do you suggest?
Why not native apple maps?
The behavior in the Kotlin example is defined in the [standard library](https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus.html), since operators are just syntactic sugar for regular ol' member functions.
the compiler will tell you as soon as it becomes a problem
Follow what other fellows said. Also go to Breakpoints, use the +, add Exception Breakpoint so Xcode will stop where the unwrap says, Oh the Nothing (Neverend Story)®
IME, using Javascript at all is enough to mess up your brain.
Uber does a lit of crazy things, don't use them as your guide
What they did might seem crazy, but it did get the job done. I was actually very impressed when they came up with a solution to the app size. It's not every company that can put 100 professional devs on a job like that and find a workaround to reduce the compile time and app size. Not to mention, I think they open source their work.
Yep, virtual machine is the way to go. Here's a great tutorial I used to get a Mac VMWare VM: https://gist.github.com/julianxhokaxhiu/6c9a1994dd9bc57ab6d9. Note: you'll need to download the "Install macOS &lt;version here&gt;" App from the app store on a real Mac, then copy it from /Applications to a usb stick.
Pauses in malloc are much shorter than stw pauses in gc, and contention is not an issue in any modern malloc impl. 
&gt; Imagine being able to write both Android and iOS apps in Swift. It's not swift. But with kotlin native there is something coming that lets you develop for android and iOS.
It's a very common expression to use in Kotlin, it's even listed in the documentation under [Idioms](https://kotlinlang.org/docs/reference/idioms.html). It's pretty easy to get used to it.
and what about if it is mixed content : some part of apps are native, but some parts of apps are showing pages ?
thank you ! indeed it works, i will dig deeper into it ;)
Use a tuple like `(MKCoordinate, CLLocationCoordinate2D)` (or a dictionary if you want) as the sender and cast it where you need it. Segueing twice will definitely not result in what you want. 
OK, so, what have you done so far to try find out what the problem is? 
Break out the debugger; set some break points; print some values; step through line by line if you must. You may possibly receive an answer from someone and that will solve your problem this one time. What good will that do for the next time it happens? Get good at solving problem, not at requesting help.
When searching, limit your searches to the last year or six months. That'll filter out a lot of the old stuff. 
yeh NS is a good indicator. except when they seemingly arbitrarily ignored huge things like the abomination of NSAttributedStrings in Swift. im still flabbergasted after working with them that thats something that hasnt been addressed. 
Good questions, utterly useless post.
That only happens when you have a protocol with an associated type. I don't know if Kotlin has an equivalent of a "generic interface" or not.
Use the "1 year" threshold. After the stsrt of june, swift four will become prominent in the tutorial space too
you can't sit back and wait for the debugger to tell you there's a problem, it will only do that for _exception_al kinds of problems like accessing memory you're not allowed to access or illegal arithmetic. You need to set breakpoints and step through the execution to make sure the lines you think should execute in a particular order really _are_ executing in that order. And, most importantly, you need to use debug commands such as "print" and "po" to look at the contents of variables in order to determine if they contain what you think they should contain. I find the best way to debug is to before doing any command, predict to yourself what it _should_ do, what you _expect_ it to do. For example, if I step to a line where I've got 'a = x + y', I think now, x should have 42 in it and y should have 17 and therefore a is going to be 59'. Then I step once more and do the three llvm commands 'print x', 'print y', 'print a' and see that I was right. This forces me to think about how x and y got their values and why and sometimes I even realise that the steps I went through in my head for them to get the values they should have, don't match the steps which I programmed, so I not only discovered the logic error, but I've thought of the correct logic to put in its place. When you are just starting with a debugger you only need to know three things: 1. how to set a breakpoint, so you can skip to the place your problem is at, 2. how to step line by line so you can see that the lines execute in the order you think they should, 3. how to print out values. You should read enough of Apple's docs to find out how to do those three things, and then dive in. 
I would try saving the result of `coords + newCoords` into an instance variable in the `FirstViewController` and then passing it in the segue instead of `MKPolyline`. And then use it in `SecondViewController` to create its own instance of `MKPolyline` for that coordinate array.
This is what I've tried (which I think is what you're on about) FirstViewController thirdCoords = coords + newCoords Then segueing 'thirdCoords' and then in the SecondViewController polyline = MKPolyline(coordinates: &amp;thirdCoords, count: thirdCoords.count) mapView.add(polyline) and this hasn't worked either?
Did you try sending only the coordinates and then on that second view controller create the mapview and polyline?
Yeah I've tried that and it's still 'as the crow flies) start to finish?! So confused, thanks though! :)
Did you try playing with the transport types? Transit etc? I beliwve transit makes the polyline a straight line
Avoid force-unwrapping (using !) with optionals, at all costs. Causes crashes and leads to unstable code even on small scale use. Use if let and guard let extensively as an alternative.
It's not an issue in practice, the tooling helps differentiate even more.
Not something the SDK provides natively, you essentially have to observe the `myLocation` property of the map view using KVO and then tell the map to recenter on that position. I suggest you implement some throttling along with that.
The question is about the `remainder` method, not the remainder operator `%`.
There are many answers to your question; there are probably an infinite number of ways to present this view. But, if I say one of those ways, it will almost certainly not match the design you have in mind (because 1/∞ is a very, very tiny number). At the risk of telling you stuff you already know, I'm going to make sure we both have the same understanding of certain terms. There are two ways to have a view controller 'appear' on the screen: 1) **present** it; caused by calling the present function. On an iphone, by default, this presents it modally by sliding it up from the bottom over the top and completely covering the presenter. To get back to the old view controller, the new view controller usually has some action (such as 'Done' or 'Login') which will dismiss the modal. 2) **show** it; caused by calling the show method. What happens here depends on the kind of container the view controller is in. For example, in a navigation controller, showing a new view controller will do a push, which causes the new view to slide in from right to left, covering the old view controller. To get back to the old view controller, the user taps the back button. So, sometimes to accomplish login, devs do these steps (assume there is already some view controller already visible to the user): 1. **present** the login view controller. This will present the login modally. Frequently this view controller is wrapped in a navigation controller (so it is really the nav controller which is presented with the view controller inside it). 2. the user enters information and taps a button (usually 'login'), the app does whatever work it needs to do to figure out if the login is good or not. If not, some error is displayed, and the user can try again. If successful, the login view controller could send a message to its delegate (which is usually the view controller which presented it). The delegate usually dismisses the login view controller, and we are back to the initial view controller, but we are now logged in. In your case, you want to display a protected view. Is that view the view of a view controller? If so you either need to **present** or **show** it. Which one you use depends on the UX you are trying to achieve. If it is just a plain old view, then you can use addSubview to add it to the login view controller's view, again it depends on your UX. If I were you, I'd 'step away from the keyboard' and draw out exactly how you want the UI/UX to appear *to the user*. Then, (still not coding!) write some high-level statements about how you could accomplish this. Then, finally, write the code to accomplish this. A further wrinkle to all this is whether or not you are using storyboards (I highly recommend using storyboards). Using storyboards, where I have said **present** or **show**, can be accomplished with segues.
Ah amazing, thank you so much!
([when fixing single `r` typo](https://en.wiktionary.org/wiki/occurence): `occurrencesOfAandB`)
Looks good man, did you learn RxSwift from the RayWenderlich book?
Here is an open-source library: https://www.cocoacontrols.com/controls/scsafaripagecontroller
Thank you for the explanation. I'm a novice and only looked through Xcode's built-in documentation and API reference and it only gave me the function definition, rather than the explanation of how it was implemented. If I knew there was more detailed documentation it would've prevented this post. But at least I learned I should look at the API reference on the dev portal.
https://www.udemy.com/complete-ios-10-developer-course/learn/v4/content is a great video course. I prefer video courses because you can actually see things happen and it's easier too understand, in my opinion. The price is quite high so I'd recommend to wait for a special offer. On udemy there are often great special offers. This video course is easy to understand although it gives you a really deep dive into swift. 
No worries, I'm happy to help!
Yes indeed, you want to: - Create Table View Controller from the Storyboard. - Create a custom UITableViewController file. - Override functions: numberOfRows //Array with user inferred amount of cells. Default 1 cellForRow numberOfSections // 1
I would suggest implementing your custom `TimeInterval` type (or something similar), which holds the times in a numeric format, where a `String` representation is available _only for presentational purpose_, whereas all calculations on the times will use the backing numeric storage (e.g. milliseconds in an unsigned integer type).
You can use a property list for that, this is a concept that been showcased in Stanford's playlist over the years, its basically a dictionary of type. let property_list = [String: AnyObject]() Just add whatever you need like in a regular dictionary, then pass to the sender and extract the values in the prepare function.
Wow dude, this is super awesome! Downloaded it, I really needed a tool dedicated for http for a mac, wireshark is too general and burpsuite is so much over than what I need, thanks alot!
Starred it, going to look into the code in hopes to learn something new :) Looks awesome man!
Cool, it can be very useful, I might give it a try ;-)
Looking very good for a first app! Good work man.
^(Hi, I'm a bot for linking direct images of albums with only 1 image) https://i.imgur.com/h4XKMrE.png ^[Source](https://github.com/AUTplayed/imguralbumbot) ^| ^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^| ^[Creator](https://np.reddit.com/user/AUTplayed/) ^| ^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^| ^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dhut2tk) 
First one is in Swift, second one is in Objective C, you can use both depends on the type of the file/projects responsively.
**Here's a sneak peek of [/r/iOSProgramming](https://np.reddit.com/r/iOSProgramming) using the [top posts](https://np.reddit.com/r/iOSProgramming/top/?sort=top&amp;t=year) of the year!** \#1: [Looking back at me 4 years ago](https://i.redd.it/026ms4az8axy.jpg) | [25 comments](https://np.reddit.com/r/iOSProgramming/comments/6ay9uc/looking_back_at_me_4_years_ago/) \#2: [Tinder cards with a twist, written entirely in Swift.](https://i.redd.it/35mqk3bx1hiy.gif) | [27 comments](https://np.reddit.com/r/iOSProgramming/comments/5wjqac/tinder_cards_with_a_twist_written_entirely_in/) \#3: [Finally got round to getting business cards printed](http://i.imgur.com/DdvI6Yu.jpg) | [80 comments](https://np.reddit.com/r/iOSProgramming/comments/5g9che/finally_got_round_to_getting_business_cards/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
Ah, of course. Good to hear that you solved it.
You should be storing all of the times as a common type and then formatting them in a view model to display. This would make the code trivial. `let times: [Double] = [1.0,34.0,32.0]` `func average(of values: [Double]) -&gt; Double {` `return (times.reduce(0) { $0 + $1 }) / Double(times.count)` `}` `// Average of 12` `average(of: times[0..&lt;12])` `// Average of 5` `average(of: times[0..&lt;5])` It makes zero sense to store the time in varying formats and is just plain bad code.
The times array is generated from another tab (a stopwatch). If the stopwatch is at 1:38.21, then it is added to that array. It has to be in multiple formats.
Best answer. To expand a little, it is best to consider a few cases which exist in UIKit. Even though closures did not exist in the early days of AppKit, nevertheless, some objects use what amounts to callbacks; consider target/action. You don't create a delegate for that, you set (or add, in UIKit) a target/action for a particular object's event. You just have to specify the message to be sent (the action) and the object to which to send it (the target). It would be very onerous to have to set up a delegate with one method and then set it on the object for this. On the other hand, some UI objects do have delegates and for good reason. Consider the table view (which didn't actually exist in the earliest AppKit, but some UI objects did have delegates even back then): It would be ridiculously tedious to say, set this closure to call to get the number of sections and set this other closure to call to get the number of rows and this other one for cells and yet another one for the height of the cells and still another for... I think you get the picture. Makes much more sense just to set the one delegate. In addition to the number of methods involved, there's also some element of what I guess could be called 'causality'. For example, the modern view animations take closures both for the stuff to be animated and the completion. And those closures are called _as a result of_ you calling the animate method. Whereas, again in table view, the table view just kind of decides to call the various methods depending on the state of the table view; IOW, there's not a one-to-one correspondence between you making one call to a table view and it wanting to call you back.
Well, if your intention is to learn Swift, then don't also try to learn all of the intricacies of UIKit at the same time. Just do some typical computer science-y type stuff with good old pure Swift (playgrounds make this an absolute doddle). Try defining your own collection (such as a queue or a stack or, that favourite of all computer science courses and seldom needed in real jobs: balanced binary trees!). Try doing noughts and crosses (tic-tac-toe) with just a good old terminal interface. Or do a small version (again, terminal orientated) of that good ol' Adventure game (you are in a maze of twisty little passages...). I believe there are websites that have programming challenges and they are almost always algorithm orientated rather than being UI masterworks. Once you feel confident in Swift, and you want to do some UI, you don't have to have something with complex storyboards and so on, you could try making a SpriteKit game or two. Or if you have a particular computer-y thing you especially enjoy like networking or music or cryptography or artificial intelligence you could expand into trying to do some of that in Swift.
I think what you are looking for is to go to: CloudKit Dashboard &gt; Left Sidebar &gt; Deployment &gt; Deploy to Production... to clarify, once in the CloudKit dashboard you can look under the admin tab for Deployment in the sidebar on the left. Once that has loaded there is a blue button on the right hand side of the screen that reads "Deploy to Production..."
Those are some great words. I really appreciate it. Something if also have in mind is to learn image processing. I hace seen people asking stuff about counting the pixels on a image and manipulating it. I thinks that is very interesting.
 import FacebookCore class AppDelegate: UIResponder, UIApplicationDelegate { func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -&gt; Bool { SDKApplicationDelegate.shared.application(application, didFinishLaunchingWithOptions: launchOptions) } func application(_ app: UIApplication, open url: URL, options: [UIApplicationOpenURLOptionsKey : Any] = [:]) -&gt; Bool { return SDKApplicationDelegate.shared.application(app, open: url, options: options) } } class LoginViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let loginButton = LoginButton(readPermissions: [ .publicProfile, .email, .userFriends ]) loginButton.delegate = self let frame = loginButton.frame let x = (UIScreen.main.bounds.width - frame.width) / 2 //let point = CGPoint(x: x, y: UIScreen.main.bounds.height - 80) let point = CGPoint(x: x, y: view.frame.size.height - 100) loginButton.frame = CGRect(origin: point, size: frame.size) loginButtonPoint = loginButton.frame.origin view.addSubview(loginButton) } override func viewDidAppear(_ animated: Bool) { super.viewDidAppear(true) if let _ = AccessToken.current{ fetchProfile() } } func fetchProfile(){ let connection = GraphRequestConnection() connection.add(GraphRequest(graphPath: "/me",parameters: ["fields": "email, first_name, last_name, gender, picture.type(large)"])){ httpResponse, result in switch result { case .failed(let error): print("Graph Request Failed: \(error)") case .success(let response): print("Graph Request Succeeded: \(response)") let path: String if let dict = response.dictionaryValue?["picture"] as? [String:Any], let dataDict = dict["data"] as? [String:Any], let urlStr = dataDict["url"] as? String{ path = urlStr // url is the link of profile's photo } if let email = response.dictionaryValue?["email"] as? String, !email.isEmpty{ // ... fb's login email. } // segue to the view controller. as you said, protected view controller. performSegue(withIdentifier: "xxx", sender: nil) } } connection.start() } } extension LoginViewController: LoginButtonDelegate { func loginButtonDidCompleteLogin(_ loginButton: LoginButton, result: LoginResult) { fetchProfile() } func loginButtonDidLogOut(_ loginButton: LoginButton) { } } if you want to logout, you can use this line of code inside any viewcontroller: LoginManager().logOut()
this should work. i wrote that code a week ago. facebook SDK for swift has changed a lot. the tutorials on internet most are not up to date. mine is still very new and tested many times.
X is a property of CGPoint. Using the brackets is calling a method. You cant call a method on a property
 correct. I copied from my app and removed some of the code
Yeah I can see how entangled my code may be. It just sucks try to guess on what could possibly be wrong. I have spent at least 2 weeks in this part of the app, and I don't seem to get it work. I tried the code you posted, but now I can't even pass the part of appDelegate.switf, since it shows some nonsense errors. idk. I give up. Thanks for the help and good luck with your app. P.S.: Seriously, how difficult can it be to look one window to another? smh
I hope you like it! Good luck
Looks cool will give it a try
How do you recommend storing them? I have a stopwatch that takes the time from the IBOutlet timeLbl then I do this: timesGlobal.append(timeLbl.text) This saves a string. I guess I could convert it to something else like this: let timeInAnotherFormat = Double(timeLbl.text) timesGlobal.append(timeInAnotherFormat) Should I save it as a TimeInterval? Or is there a more convenient way? Feel free to check out my [repository](https://github.com/erkyy/Cube-Timer) and give me advice. I'm still relatively new to coding, so any advice is appreciated.
I recommend that on every call back on the Timer you've created, you update the physical time in seconds as Double (store that) and then convert it to text for display on the UI. Then when you want to store the values of the stop watch, store the Double's not the strings. Try to think about distinguishing between view logic and model logic. Model being the time being stored and view logic being how you display that time in a user friendly way.
All right, thanks. I'm guessing I would say: UserDefaults.standard.set(timesGlobal, forKey: Key.timesKey) in willTerminate and didEnterBackground And then, in my StatisticsTableVC, in viewDidLoad I call guard let timesKey = UserDefaults.standard.stringArray(forKey: Key.timesKey) This is my Keys.swift file. struct Key { static let timesKey = "timesKey" } Will that work? I can't test at this time..
I hope you like it. Please tell me if you have any suggestions.
Try building a production vapor app though. It can as fast as the speed of light but it doesn't mean anything if you can't actually use it. I support it all the way but let's not get all excited before all the piece are working. 
What haven't worked in your experience? I just built a small api with JWT token authentication, user levels and CRUD operations on several entities and am rather happy with the result. I used the Vapor 2 beta, just before they released the final. I think I will use it for the next project that needs a backend. 
Why aren't you using one if the many extensions that turn failed access indices to nil returns?
I've used this method multiple times, works amazing. Works better if you also have labels on them. (first: Double, second: Double, coordinates: MKCoordinate)
I fully support the Vapor team and know the amount of work they're doing, as I'm constantly following the Slack conversation etc. What I mean is that many things break on each version upgrade, very crucial pieces such as PostgreSQL support. 
Nice! TIL that CMD + SHF + DOT can show/hide hidden files in Finder.
Thanks! Always happy to hear from users. Reach out to me on Twitter or through the support link in the app and let me know if you have any issues or suggestions. PS. if you use an iPhone, PM me for a promo code for the iOS version :)
Have you looked into [SnapLayout](https://github.com/sp71/SnapLayout)? There API may be more intuitive for you. ``` blueView.snap(top: 25, leading: 20, bottom: 20, trailing: 20) ```
What CMS are you using so the users can do updates? What has their experience been like? Any feedback?
No need for attributions, just add it. The article is a solid piece of information, I learned a lot.
I'm glad you like it, thank you. Anyway, I think it's fair adding your name. If it's a problem for you then I avoid it, otherwise I'll edit this evening. Thanks
This. Underrated comment. There are moments where using ! is ok. But it won't happen very often. 
I know it looks like it is, but this is not a reasonable test: the print statement and string processing time is drastically dominating the process Store all the times in an array, then print out at the end, or use a profiler. Also, what are your optimizer settings? Also, get the timekeeping out and also run the profiler with the optimizer on
Disassemble them and see. Calling a closure is a pretty different kind of task than code in a built-in loop structure. I envy anyone whose program is optimized enough everywhere else for this to matter.
Might be a stupid question, but how did you add an ad roll to the bottom of your app? Does apple just do that automatically? Or do you have to code it in? I'm very new to this! 
Look back at the first bit of your error message. Your app is crashing because your View Controller is being asked to set a value for an undefined key called staticDatasource. These key-value coding compliance errors are often related to an outlet which you've at some point deleted from your VC code but left in interface builder. Not exactly sure what your specific issue is here without more code but it relates to the staticDatasource key. 
 UIApplication.shared.keyWindow covers everything (tab bar, status bar) I'm not sure where you'd apply it but it's somewhere in the UIGraphicsBeginImageContextWithOptions. &amp;nbsp; *** &amp;nbsp; func captureScreen() -&gt; UIImage? { if let window = UIApplication.shared.keyWindow { UIGraphicsBeginImageContextWithOptions(window.frame, false, UIScreen.main.scale) view.layer.render(in: UIGraphicsGetCurrentContext()!) let theScreenshot = UIGraphicsGetImageFromCurrentImageContext() UIGraphicsEndImageContext() UIImageWriteToSavedPhotosAlbum(theScreenshot!, nil, nil, nil) return theScreenshot } }
In a very high level approach I'd recommend you randomize which of the colors should be 0. Then you can set the others with a random value from 0 to 255. For that you can use an array instead of separate variables. This way you can randomize a number from 0 to 2, which is the index of the color that should be 0. 
I solved it like this: let random = CGFloat(arc4random_uniform(255)) var colors: [CGFloat] = [0, 255, random] colors.shuffle() let r = colors[0] / 255 let g = colors[1] / 255 let b = colors[2] / 255 let randomColor = UIColor(red: r, green: g, blue: b, alpha: 1) However when using it, I get a flash of a wrong color. You can easily check out [the project](https://github.com/erkyy/Cube-Timer) and see for yourself...
Just wondering: Where did you get that iPhone picture from (for the preview images on the App Store page of the iOS app)? Straight from the Apple website? I've been thinking about mocking up my app showing the iPhone for context, but I don't want to run into permissions problems for the images. Yours seems to have passed review, so whatever you're doing must be endorsed.
Cute. 🐷
For any beginner that would like to quickly see the difference in syntax between programming languages. They could also search for a specific keyword in one language and see the equivalent in another language. The reason I created this (for myself) was that some small things were different between languages that I would transition between very often, and it helps visualize everything like this
Verbose. 
Just use the name of the arrays
To solve this problem, go to your storyboard for this class, right click on the view controller on the list on the left and click the x next to the one with the yellow warning. You probably renamed something in your class.
This is a very painful path. Apple does change how this works from time to time, but last time I was sent down this path, the answer was "toggle these values in the root view controller before pushing the new controller". Not the one pushing, the *root*. That was like iOS 6 though...
Is there a good way to use the items without that use itself affecting runtime? E.g. does printing them to stderr and then redirecting stderr to /dev/null do the trick?
ok guys , i figured out what i was doing incorrectly. the array was not inside of a class or struct , so i could not use it anywhere else. i simply wrapped the array in a struct declaration and was able to create an instance of it to use within the view controller.
Clearly this post has been raided by droidtards who don't even know how to code. Android is the worst religion ever!
You could initialize a shared instance within the class so you don't need to unit one before accessing the array. Or you could make the array static
"it"? **Swift** almost certainly was. *Code completion* may not have been, but Xcode code completion is very very very untrustworthy. Gotta get over the addiction to that to survive in Xcode. 
If you want a type that can be one of several things, you want an enum. Without doing something too clever, I don't think you can use an operator, since operators need type info and you're defining the type based on the operator placement. Using an enum, your code would look something like: import Foundation enum Numeric { case double(Double) case int(Int) } let someInt = Numeric.int(7) let someDbl = Numeric.double(9.8) let values = [someInt, someDbl] for val in values { switch val { case let .int(intVal): print("\(intVal) is an int") case let .double(dblVal): print("\(dblVal) is a double") } } You could also throw an init on Numeric that would switch on the input type and create the correct numeric if you don't want to have the .int/.double syntax.
It makes it already exist within the class in a way you don't have to initialize a class in order to access it You can make a function static too 
CAShapeLayer
thank you! also I recommend check this repo https://github.com/yuzushioh/RxIGListKit it will be help you :D
Well, my issue is that for my project I need a variable to be one of two different enums that I've created, and at runtime the app wont know which one it will be. Not until the struct the variable's in is initialized. 
I tried examining the generated SIL of a similar test case that defeats the dead code analysis pass (otherwise known as printing the value) at the default level of optimization (only mandatory passes) and in `-Ounchecked`. The results were that at the least level of optimization the for-in loop will generally be faster than the closure because of the extra indirection needed to invoke the closure and the fact that `forEach` expects its body to throw so we have to pessimistically emit an error handler. But at `-Ounchecked` the optimizer kicks in ([specifically Closure Specialization](https://github.com/apple/swift/blob/master/lib/SILOptimizer/IPO/ClosureSpecializer.cpp)) and inlines the body of the closure into the function and creates roughly equivalent (or even slightly faster because there's a cleaner CFG) code with the `forEach`. Note that this applies because the closure body is non-escaping and doesn't capture anything, which means the ClosureSpecializer has the easiest time inlining it. 
If generics won't fit your need, it sounds like it's time to rethink the design.
UIBezierPath
You should search for "onboarding", "user onboarding" or "app onboarding".
In general, the number one way to deal with errors in SPM projects is to go through the following steps. (Especially when the word `DerivedData` is in the file as it is here) 1. Delete Derived Data 2. Run a clean **in** Xcode `cmd + opt + shift + k` 3. Run `vapor clean` 4. Run `vapor xcode -y` and try again If none of these work, we can take another look, also wanted to mention, when getting obscure errors, it's great to have the environment. 1. CLI or Xcode 2. Linux or macOS Version 3. Package.swift if possible Good luck on your project, let me know if you're still having issues. edit: formatting
Tnx arbel03
Do you mean something like Netflix app ? In my case what i did, is to make a custom cell with a collection view inside. and then register it to a table view. https://github.com/ashfurrow/Collection-View-in-a-Table-View-Cell
Thanks, I have gotten further given your suggestions. I'm now stuck on a fluent issue (but I'll try and resolve it myself) that I believe is part of the migration from 1 to 2. It looks like there are more columns added to the fluent tables that track database preparations and migrations, and those columns are not automatically added. Thanks so much for your help!
I cleared out derived data and that has gotten me further. I replied to a comment below. Thanks!
And if you want to see it in action (and watch a very interesting talk about typography) then you can watch his UIKonf talk: https://www.youtube.com/watch?v=YM2Nj691PMo
cool! I didn't know about this talk. Thank you!
Nice list, but keeping the storyboard or nib open for no reason is not a good idea: 1. It lags xcode. 2. It changes "stuff", which you then need to checkout
That's reasonable. Maybe I should I add some clarification like, "when you're working with a storyboard..."
I actually have storyboard open on my 2nd monitor but my Mac has 12 GB of RAM so it seems to run just fine. It really does make working easier when you have 2 screens.
13" macbook pro with 16GB, and it still lags after a while with just a single nib in tab. No idea why. But from what you're describing, you're not keep it open in a tab, but a separate window.
Oh well I don't want it in another tab because it takes a bit to load whereas having a window of storyboard open (simply by double clicking the file) keeps it static until I start touching it. No reloading required. Although I usually run AppCode along side Xcode but I don't notice any lag. my Mac is also from 2010.
There are no Type operators in swift. But you can combine types with generics. For example: enum Either&lt;Left, Right&gt; { case left(Left) case right(Right) } let someNum: Either&lt;Int, Double&gt; = .left(3)
Fixed formatting. Also, you can write down about using //MARK: - to make code navigation easier.
Trying to make it more active, in comparison to the other one. We've also got some kewl things like windows install guides. 
&gt;what undergrads did you (as a swift developer) do? Physics (3/4 of the way through PhD) &gt;I'm really interested in building mobile apps even though the market is quite saturated already. It's not at all. There are no jobs worth getting that are easy to get, but you're better off with a CS degree going for a developer position than you are with just about any other degree/job combination. &gt;I'm wondering what was the reason that you decided to go with swift? I dabbled around making apps on the side while in grad school. Figured I'd make it a career.
In all honesty it doesn't make it look bad and only takes seconds but I'm still n00bish and trying to figure out what I like best as far as commenting and structure Edit: clarity
Horticulture, because vegetables are awesome
don't forget about that dope swift eval
&gt; //incorrectly prints 1 2 3 4 That's not happening for me.
This is a bit dated, but contains some great ideas. https://developer.apple.com/videos/play/wwdc2012/402/
I got my degree in electrical engineering, with minors in applied mathematics, mathematics, and physics. My EE degree specialties, however, are related to analog, rather than digital, design. Still, most every EE I know also does digital design work, since it's such a huge part of what work is being done today. As for Swift, I started with it (around version 2) because I was already using iOS and writing for it in Objective-C, and Swift was the new language of the platform. Now that I'm better acquainted with it, though, I'm a big fan of it. I started using C as a kid in the '90s, and to me, Swift seems like a language that makes sense. Microsoft's C# is also a nice language, but Swift has an advantage because of how it rethought the language from the ground up, and so much of the baggage of C was left behind.
Honest questions... What's the difference between Discord and Slack? What's the benefit to Discord over reddit? On reddit, I can skim topics; discord feels like a chat room.
So I got my web service working, however after adding a SessionsMiddleware and PersistMiddleware, my login request is not returning a cookie to use in subsequent requests. I haven't found any tutorials or docs regarding this, besides the default vapor 2 docs and I have followed those. Any insight would be amazing. macOS 10.12.4 Xcode
This is what I use, took some parts from Stackoverflow and did a few things on my own. Hope that helps you. :) import UIKit class CurrencyField: UITextField { static let max_digits = 15 static var locale:Locale! var value:Float { get{ Formatter.currency.locale = Locale.current let divider:Double = pow(Double(10), Double(Formatter.currency.maximumFractionDigits)) if let t = text{ return Float(t.numbers.integer) / Float(divider) }else{ return 0.0 } } set(newVal){ Formatter.currency.locale = Locale.current text = Formatter.currency.string(from: NSNumber(value: newVal)) } } override func awakeFromNib() { super.awakeFromNib() addTarget(self, action: #selector(editingChanged), for: .editingChanged) keyboardType = .numberPad textAlignment = .right editingChanged() } func editingChanged() { let max = String(string.numbers.characters.prefix(CurrencyField.max_digits)) Formatter.currency.locale = Locale.current let divider:Double = pow(Double(10), Double(Formatter.currency.maximumFractionDigits)) text = Formatter.currency.string(from: (Double(max.numbers.integer) / divider) as NSNumber) self.value = (Float(max.numbers.integer) / Float(divider)) } } struct Formatter { static let currency = NumberFormatter(numberStyle: .currency) } extension UITextField { var string: String { return text ?? "" } } extension String { var numbers: String { return components(separatedBy: Numbers.characterSet.inverted).joined() } var integer: Int { return Int(numbers) ?? 0 } } struct Numbers { static let characterSet = CharacterSet(charactersIn: "0123456789") } extension NumberFormatter { convenience init(numberStyle: NumberFormatter.Style) { self.init() self.numberStyle = numberStyle } }
Or you could just use a collection view. :) A collection view isn't any more complex than a table view, and offers the kind of control you need to make it horizontally scrolling etc.
&gt; Or perhaps it was a mistake in trusting people who said Swift works fine on Ubuntu 17.04. I don't know who your source is for this, but from looking at bugs.swift.org, there's a ton of issues with Swift on Linux today.
In the header say it is readonly
Show a readonly property in the header, then redeclare as readwrite in the class extension: header: @interface DemoObject : NSObject @property (nonatomic, readonly, copy, nonnull) NSString *value; - (void)modifyInternally; @end Implementation: @interface DemoObject () @property (nonatomic, copy) NSString *value; //redefined as readwrite @end @implementation DemoObject - (instancetype)init { self = [super init]; if (self) { _value = @"default value"; } return self; } - (void)modifyInternally { //can set a value here because it is using the class extension implementation self.value = @"different value"; } @end Then at the point of use (swift because i accidentally started the project with swift): let demo = DemoObject() print(demo.value) //default value demo.modifyInternally() print(demo.value) //different value //demo.value = "test" //compiler error
does this take the user to screens i set before? say i have 5 screens can ckilcking on this link take the user to straight to screen 5? 
For some reason my Xcode keeps reloading the storyboard tab just by virtue of switching to it, even when nothing has changed (tested using shortcuts to cycle through visible tabs), so I found out that I can "tear" the tab into a separate window and then it is not reloaded. Of course you need a different key combo to switch to it, rather than cycling through tabs I use now mission control "show app windows". But at least I don't get the performance hit of reloading big storyboards. 
Its not a silly question. I didnt know either couple months ago :)
Thanks :) also just downloaded your app! Great job!
Yes, and it gives me the error: 'super' cannot be used outside of class member.
I think this is related to returning from an init before setting the instances values Can you make the initialiser optional and return nil instead of just returning?
Swift doesn't officially have a build for 17.04. I just saw a few threads of people saying the 16.10 builds and is working fine. But yup, swift on Linux has loads of bugs. Several with the Data class. In any case, I bounced back to 3.1 and everything is building and running okay. I am only using Data and converting between bytes and various data types and so forth. So all of my bugs usually come from that single class. In any case, looks like swift on Linux isn't ready for the prime time yet. 
textView is what you'd use for multiple lines of text. It's usually for entering text but you can disable that feature. textField is usually for entering a single line of text, say your username or password. A UILabel is simply for displaying text whether a single line or multiple and the user can not change or edit a UILabel. Sounds like a UILabel is what you're going for. 
&gt; Autocomplete always. If it’s not coming up as you type, hit esc or ⌃ + space to summon the options. Additional tip: If you're writing in Swift, go make a cup of coffee while the autocomplete thinks.
Thanks for this. These concepts are difficult to master while learning programming. I worked through it and concepts were clicking because I started to make connections in my mind before I read them on the tutorial. Definitely will be referring back to this.
I didn't even know how he came up with that way... I must've done stuff like that all the time when I started. arr.map { $0 * 2 } is cleanest 
Clean and restart Xcode usually does the trick for me. 
Curious, would you consider the example of polymorphism to just simply be an example of using inheritance ? I am thinking of the example of: Vector.Scale( float ); Vector.Scale( int); Edit Note: I do not know swift very well
What paradigms is Swift best suited for? Functional? OO? Others?
I have! Everything is working except for the short press release. UITapGesture doesn't have a state for release and one for begin. Any help?
hue needs to [be of type CGFloat](https://www.hackingwithswift.com/example-code/language/what-is-a-cgfloat), which is constructed with `CGFloat(random)`, so your code should be: &gt; //This generates 0.00 to 1.00 &gt; let random = Double(arc4random_uniform(100)) / 100 &gt; //Hue should be a value from 0.00 to 0.20 or from 0.50 to 0.80 &gt; let hue = CGFloat(random) &gt; UIColor randomColour = UIColor(hue: hue, saturation: 1, brightness: 1, alpha: 1) 
You've got to post some code then. There's no way anyone can tell you wants wrong without knowing what you've tried.
Be sure you're adding a recognizer to your button. Based on your description, your .Ended state will always turn your button black. Your .Began state will change the color to red or green. Best of luck!
 func createScreen() { let screen = UIView() screen.frame = view.frame let longPress = UILongPressGestureRecognizer(target: self, action: #selector(handleStopwatch(sender:))) longPress.minimumPressDuration = 1 let shortPress = UITapGestureRecognizer(target: self, action: #selector(handleShortPress(sender:))) screen.addGestureRecognizer(longPress) screen.addGestureRecognizer(shortPress) view.addSubview(screen) } func handleShortPress(sender: UITapGestureRecognizer) { if sender.state == .ended { timeLbl.textColor = UIColor.black } else if sender.state == .began { timeLbl.textColor = UIColor.red } } func handleStopwatch(sender: UILongPressGestureRecognizer) { if sender.state == .ended { timeLbl.textColor = UIColor.black handleColorAndDecimals() if isRunning == false { startVisualTimer() scrambleLbl.isHidden = true } else { stopTimer() saveTime() scrambleLbl.isHidden = false } } else if sender.state == .began { //green timeLbl.textColor = UIColor(red: 20/255, green: 240/255, blue: 0/255, alpha: 1) } }
LongPress is working but TapGesture does nothing.
 //random from 0 to 0.5 let random = CGFloat(Float(arc4random()) / Float(UINT32_MAX) / 2.0f) //transfrom random from 0 to 0.5 into random from 0 to 0.2 and 0.5 to 0.8 let hue = (random &lt; 0.2) ? random : (random + 0.3)
The title was edited in this post, for some reason -- the page itself says "iOS and Android Automation for Continuous Delivery". It's a tool for mobile developers, not (all) Swift developers.
You'll need to post more code showing off the problem. The code you posted seems to work fine.
Edited because /r/Swift.
Ray Wenderlich just released a book on RxSwift.
I'd like to learn RP before using any third-party frameworks, though.
Fastlane has become an essential tool for me. I recently got my Android builds set up alongside iOS and was surprised how well it all crashed together. 
Do you have Account defined as a type visible to the file where the enum is defined? That's the only thing I can think of that would make it not work as written above.
Yes, Your application will get event on one of its AppDelegate method. Then you are free to do anything in your application navigate on any screen you thing suit for the application, that should be your app logic.
You could call `didSet` and friends reactive.
Use/modify snippets below. drand48() is fastest way to get 0...1. // Set random seed srand48(Int(arc4random_uniform(UInt32(Int32.max)))) static func randomColor(_ a: CGFloat = 1) -&gt; UIColor { if Helper.randomFifty() { return UIColor(hue: random01(), saturation: random01(), brightness: random01(), alpha: a) } else { return UIColor(red: random01(), green: random01(), blue: random01(), alpha: a) } } static func randomFifty() -&gt; Bool { return random01() &lt; 0.5 } static func random01() -&gt; CGFloat { return CGFloat(drand48()) }
maybe double check the type of sortType is correct? Also is sortType optional?
yeah its a subclass of UIGestureRecognizer which allows you to override touchesBegan, cancelled, ended etc Its not the only way and you could do this with 2 gestures for sure, just you'd have more moving parts (in my opinion). If you want to get the 2 gestures to work, look into `gestureRecognizer(_:shouldRecognizeSimultaneouslyWith:)` on `UIGestureRecognizerDelegate`. Since tap and long press are essentially the same gesture (touch for some amount of time) with different requirements, they will conflict by default
Hey, sorry you're hitting a lot of traps in your progress. Do you use slack at all, it's a bit quicker feedback loop, and there's lots of great devs in there to help is get you setup. http://vapor.team
It's entirely enough for some things. Things are about tradeoffs.
I learned by doing a redux tutorial in another language, then used ReSwift. ReSwift has simple concepts and good enough tutorials. My heirarchy of reactive programming is didSet, didSet plus state enum, ReSwift, then FRP frameworks like ReactiveCocoa and RxSwift.
Good stuff, I do all my swift with OOP and it's fantastic, never have to use structs or protocols, I feel like people are trying so hard to find a good reason to use those but I don't see the benefit. Best thing about swift for me is the syntax, my view controllers are now as many lines as cells they have, copy and paste cells tableviews and components all day with all my view controllers sharing an abstract superclass.
Swift doesn't have its own reactive framework.
Sorry for answering this old topic but your problem reminded me of a similar issue we had a year ago on a totally swift unrelated project. When we used a png file, we had unexplained massive memory issues, switching to jpg, issue solved. Somehow it was related to the alpha channel in the png file. Sorry if i can not be more specific as too much time passed but without the alpha channel the memory usage was normal, with the channel it was insane. We solved it by forcefully converting all png files to jpg that a user was able to upload to our service. It sounded somewhat familiar, so i just wanted to mention checking the alpha channel.
thank you this is a good point to look at!
You can post specific questions to r/watchdev.
My guess is this: You have a searchController that is active and you presented it. When you press the button to unwind then you're trying to navigate backwards while the search controller is still active. My suggestion: Maybe you have to dismiss the search controller first then unwind
Mostly in the ways that JVM is inferior to native. Very limited support for value types, and interfacing with native C code is a pain. Also, Swift has a nicer type system.
 if let min = previousTimes.min(), time &lt; min { print("new personal record") }
as a footnote, i actually typed 2*apples + 3*oranges, not 2apples + 3oranges as above.
Ok didn't know that existed thx
Something like this i think will work (not 100% if the behaviour is exactly what you want but you can tweak it). Using a single non custom gesture since that seems the least complicated option class ViewController: UIViewController { let demoView = UIView() override func viewDidLoad() { super.viewDidLoad() self.view.addSubview(demoView) demoView.backgroundColor = .black demoView.translatesAutoresizingMaskIntoConstraints = false demoView.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive = true demoView.centerYAnchor.constraint(equalTo: self.view.centerYAnchor).isActive = true demoView.widthAnchor.constraint(equalToConstant: 200).isActive = true demoView.heightAnchor.constraint(equalToConstant: 200).isActive = true let longPress = UILongPressGestureRecognizer(target: self, action: #selector(ViewController.handleLongPress(recognizer:))) longPress.minimumPressDuration = 0 //start immediately self.view.addGestureRecognizer(longPress) } private var markAsGreenWorkItem: DispatchWorkItem? { didSet { oldValue?.cancel() //cancel old value when a new value is set (or old value is nilled) } } func handleLongPress(recognizer: UILongPressGestureRecognizer) { switch recognizer.state { case .began: //mark as red immediately demoView.backgroundColor = .red //set background to green after delay let workItem = DispatchWorkItem { self.demoView.backgroundColor = .green } DispatchQueue.main.asyncAfter(deadline: .now() + 0.5, execute: workItem) markAsGreenWorkItem = workItem case .possible, .changed: break //no action needed case .cancelled, .ended, .failed: //clear work item to prevent changing to green markAsGreenWorkItem = nil //and reset back to black demoView.backgroundColor = .black } } }
Did you set the delegate? Is the delegate method being called at all? Add a breakpoint and try that first. 
 case .cancelled, .ended, .failed: //clear work item to prevent changing to green markAsGreenWorkItem = nil handleColorAndDecimals() if isRunning == false { startVisualTimer() scrambleLbl.isHidden = true } else { stopTimer() scrambleLbl.isHidden = false } scrambleLbl.isHidden = false timeLbl.textColor = .white } Perhaps check if it has passed 0.5 seconds, then start, otherwise don't do anything?
It's likely failing because you didn't have your class conform to the delegate protocol so your nil casting (as?) of it is nil
 if !previousTimes.contains(where: { $0 &lt;= time }) { ... } Gracefully handles the case where previousTimes is empty
Sorry, I'm quite new to swift... How do I set a flag? (If you could show me with code I would literally die for you)
Here's a simple extension: extension UIColor { class func randomColor() -&gt; UIColor { let red = CGFloat(drand48()) let green = CGFloat(drand48()) let blue = CGFloat(drand48()) return UIColor(red: red, green: green, blue: blue, alpha: 1) } }
[@JagCesar's latest tweet](http://i.imgur.com/sd0Jq8W.jpg) [@JagCesar on Twitter](https://twitter.com/JagCesar) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Part 2 and 3: https://www.synopsys.com/blogs/software-security/swift-programming-language-design-part-2/ https://www.synopsys.com/blogs/software-security/swift-programming-language-design-part-3/
[@interface's latest tweet](http://i.imgur.com/zdcrmup.jpg) [@interface on Twitter](https://twitter.com/interface) - ^i ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
`isEmpty` is generally preferred over comparing `count` to 0.
let timeIsLessThanAllTimesInArray = previousTimes.filter{ $0 &lt; time }.count == 0