Pretty fast animal and first post on here. Here's more about it. http://en.wikipedia.org/wiki/Peregrine_Falcon
Any links to the language documentation?
https://itunes.apple.com/gb/book/swift-programming-language/id881256329?mt=11
Not available for US. I'll give it a little bit.
that was my though exactly when i started iOS development (coming from Ruby)
Well, this was created 6 months ago by someone named 'Swiftapple'...very suspicious.. 
If you look at the account it doesn't seem to be an Apple employee, might just be a subreddit named after him/herself? But who knows.
It should be up soon. I can't wait for it to run with 10.10. 
heh "Looking for the Swift parallel scripting language? Please visit http://swift-lang.org"
At least this is up already
https://developer.apple.com/swift/
I think you'll be fine, 4 years isn't bad.
awesome. It's cool how it's been under cover for so long.
ikr! I'm a new programmer and was going to learn objective C until swift :D 
Xcode 6.0 is currently available for download on the iOS and Mac Dev Center! It is 2.5 GB and currently downloading with ~4 MB/s, so downloading it shouldn't take too long. :)
I know Java pretty well, but otherwise I was going to do the same!
Oh, you have to be paying?
I'm afraid so. But the past has taught us that very soon it will be available for download elsewhere on the internet. ;)
Well, 100 bucks isn't that bad. Plus you get all the other nice stuff without feeling illegal ;)
The Ruby programming language has the same feature, but then exactly the other way around: &gt; (1..5) #==&gt; 1, 2, 3, 4, 5 &gt; (1...5) #==&gt; 1, 2, 3, 4
For the time being, you'll need OSX since the only Swift IDE so far is Xcode. I'm sure third party IDEs will become available eventually, but since the language was announced only an hour ago, it'll take at least a few weeks before something is available, if not a few months.
I just skimmed through the Swift book published by Apple, and I'd say that it's a good first language. All the basics are there, free from cluttered syntax. There's also room to grow with some more advanced concepts. Regarding learning other languages too: yes, always. My initial feeling is that learning Python would translate well to Swift. Python also has the advantage of tons of resources (that Swift won't have for a while, being hours old). 
Do you know if a university developer account will be able to download it?
Seeing your use of &gt; guys...i and &gt; future..as I think you will find working with the new range operators a breeze. 
https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/index.html#//apple_ref/doc/uid/TP40014097-CH3-XID_0
I am currently waiting on the same answer. If I can not use the language before fall I will probably get a version of OS X Yosemite soon via multiple methods
As of right now, there is no swift -&gt; java converters as swift is so new, so you would basically have to do it all by hand.
Can you set in the sidebar to an IRC channel on Freenode to #swift-lang?
Ouch. OP's worry is not the problem. THIS will be the real cause of some frustration.
I signed up for public beta of yosemite so it comes this summer. I'll still need Xcode 6 and presumably iOS 8 if I want to use Swift to make iOS programs, so I'm going to have to be a registered iOS dev.
The mod [has been around for a year](http://www.reddit.com/user/Swiftapple) so it's had its name for at least that long.
I'm registered to do iOS dev but it's only showing a link to download Xcode 5, do I need to install that and it'll auto update to 6? EDIT: Disregard, had to agree to updated ToS and now I can access it.
I'd be down to help out, if I knew how to sign up.
Agree. However, the way Swift implements it seems way more intuitive to me.
You're SOS if you want to get an app to their store or use any of the cool xcode/cocoa specific features. Apple doesn't allow us linux guys to do it either. Even my old 2007 macbook won't cut it since it can't run the latest OS. I'll be on the prowl for a prebuilt VM soon
Volunteering
That is what I am wondering as well.
You'll need Xcode, which is the biggest barrier atm.
They definitely inferred it's purposed to replace Obj-C over time.
How will swift handle all the old NSObject based classes - will they all eventually be replaced with pure swift based classes? What about things like GCD?
Did anyone else notice the Firefly reference? &gt;Create arrays and dictionaries using brackets ([]), and access their elements by writing the index or key in brackets. &gt;var shoppingList = ["catfish", "water", "tulips", "blue paint"] shoppingList[1] = "bottle of water" &gt;var occupations = [ "Malcolm": "Captain", "Kaylee": "Mechanic", ] &gt;occupations["Jayne"] = "Public Relations"
They just said in the Platforms State of the Union keynote that Swift will run on iOS7, Mavericks iOS8, and Yosemite.
How do I sign up
Correct me if I'm wrong, but isn't NSObject just part of Cocoa? Swift and Cocoa are completely together, just like Obj-C.
? relevant for the millions of iOS users...
I don't think Apple's Swift is the same as the Swift at swift-lang.org I worry about the confusion that "#swift-lang" will cause. 
it is unrelated....that text is at the bottom of the apple swift page ;)
Thanks. Hopefully the public beta for Yosemite will open within the next month or two.
No worse than the fact that #swift is already used by cal poly for something. Theres already about 40 people in #swift-lang so, it seems to be going fine. 
This is a really big barrier of entry for people who would like to start developing, while not already an active developer. Seems like a risky move to make for a company that would like their programming language to be a big success. It could be a very efficient way to make young people join the language by offering easy-to-access guidance, so when these aspiring developers look for "learning how to code" in iBook or the AppStore, that is what they find. Oh well, all in all it just seems odd to limit an entire codinglanguage by a cashwall, but i guess that's just me.
Probably, because I think swift requires the new Xcode beta, and I know you have to be a developer to get that.
If you want a standalone implementation, you can probably make one. Assuming there isn't some clause prohibiting it.
Page 829
I was in the exact same situation and eventually said to myself "gah! I can't stand this cruft, I'll come back to this if Apple ever creates a higher level language." I was honestly shocked that I got exactly what I wanted. How about them first order functions? Swoon.
And sidebar? &gt; A subreddit dedicated to the Swift programming language released by Apple, Inc. Swift is a fantastic way to write iOS and OS X apps, and will continue to evolve with new features and capabilities.
scripting languages are programming languages. scripting and programming are much, much, muuuuuuch more similar than scripting and writing css...
Just threw something together as a quick test. It's super simple but might point someone in the right direction with regards to something and I didnt see any apps here yet so figured id throw this out there. Enjoy. 
sorry, that's what I meant.
That's what I'm hoping for too.
I am not sure if you know much about this topic but I am pretty sure people with developer accounts can basically let 100 or so people test out the new operating systems.
I didn't know that. That would be really cool, seeing as though I'm not a OS X registered dev.
[**@henriquebarroso**](https://twitter.com/henriquebarroso): &gt;[2014-06-02 23:47:36 UTC](https://twitter.com/henriquebarroso/status/473611923498340352) &gt;My first [#swift](https://twitter.com/search?q=%23swift) app. [#sickReferencesBro](https://twitter.com/search?q=%23sickReferencesBro) :X [*pic.twitter.com*](http://pbs.twimg.com/media/BpKbiKoIQAAQz-h.png) [^[Imgur]](http://i.imgur.com/LfBbXg1.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/275npw%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Should have gone with [a .. b) and [a .. b]; it's intuitive for everyone who's done basic math, and allows (a .. b) and (a .. b] as well. I had to re-read OPs post 3 times to notice the extra dot. :/
OP just updated that today
moof
He got cocky.
You can also read it [online](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/).
XCode is free when it's released. Go up to the app store and download it any time. No cash wall. Swift and Xcode 6 are beta at the moment, so you need a paid dev account to access them. It's Apple's way of raising the barrier high enough so as to minimize support issues with a buggy-ass product. 
Xcode 6 and Swift work fine on Mavs.
whoa! haha, I was half-kidding ... I mean, I skimmed, but obviously didn't look far enough ahead in the book. Thanks! :)
https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_75 I think you would treat swift imported things from C the same way you would treat ObjC things, that is, if it's possible to call ObjC, it's possible for Swift. 
In the keynote they talked a little about why. They implied that they felt like ObjC was being bogged down by it's C roots, and wanted a nice modern language like Python, but without the speed penalties. Yes, this will absolutely replace ObjC as their platform language of choice. I think that a lot of people are also put off by the odd syntax objc brings with it, swift feels a lot more like javascript or python. 
I'm up for it. Will be using swift for the next 2 1/2 months working on an app and I would love to participate
Can you get Xcode 6 without being a registered dev?
Volunteering (iOS developer learning swift)
yeh apple employee bit sneaky but who cares
Seems swift will only work on iOS 8 see the 2nd to last paragraph of this [link](http://www.apple.com/pr/library/2014/06/02Apple-Releases-iOS-8-SDK-With-Over-4-000-New-APIs.html)
I just checked the table of contents :-). Now I have to decide if I want to implement it... and if so, do I see if combinators can be made in swift...
I recommend Ruby! Why the downvote?? 
Too soon man, too soon!
http://i.imgur.com/Dgisdwq.jpg I can't believe that is an actual example in the book. Someone could have figured it out, but why call attention to it?
I'd be happy to be a mod. I'm a mod of several other subreddits and an iOS dev.
Not legally.
Apple has been great recently at making ObjC a better language to program in, I was looking forward to updates to the language. This is huge. A whole new** language for them to iterate on. I am looking forward to using it in a real project. **Is any language ever really new?
If someone here is talented with CSS let me know.
Apple is accepting feedback on the language (although I don't know to where), so if we speak up about this, perhaps we can get it changed.
I can do CSS. I'm also a mobile developer for a living and plan on learning and using swift. [Example CSS I made is here](http://www.reddit.com/r/projectshield)
Hopefully not only iOS. This has a lot of potential, I hope it breaks the bounds of apple and gets used elsewhere. If it's faster than python [and hopefully threadsafe|without GIL], I'd totally jump into this bandwagon and start writing web apps with it. I have never been this excited about a language since I found python. Not even Go made me this interested.
although it would be cooler if the syntax weren't quite so circuitous. like switch sender is { } or case is NSButton: I did try: case let x where x = sender as? NSButton: but no joy.
great, could you spice up the subreddit? doesn't have to be immediate, but in your own time, could you make it like /r/apple? simple, clean, and have a nice logo to the side. thanks!!
Will do. I'll start tonight. Thanks
Ill mod. Just finished reading the Swift eBook from Apple and really excited about where this is going.
I'd like to throw my hat in the ring.
As silly as this is, I actually love it. 
Nothing for you to worry about! I'm rocking a late 2009 MacBook and she's running perfectly fine, though you can always err on the safe side and install it on a partition. Best of luck!
It's on this page, but the iOS 8 beta link will be grayed out until you agree to the new TOS: https://developer.apple.com/devcenter/ios/index.action
Can you name functions as emoji?
yes
If memory serves me right, with both you get Xcode, and can make apps for both, but you won't be able to publish them (or maybe put them on a device?) without enrolling in the proper program.
From now on, I will be using emoji's in every and all code I write.
Why print? The beauty of an ePub is you don't need to fumble around with papers and physical limitations.
So you have to pay $100's to try this out? Do you think it will be free once it is out of beta?
The subreddit is nice and I know you are currently working on it but I'd aim for a more iOS 8 Yosemite style feel for it. Same typeface would be a good place to start.
Answering my own question: if you create a bridging header and then #import the header from the external framework there, it will make the objects from that framework available to your Swift code. Boo yah.
Like all (that I can remember) before this, Apple has made xcode free outside of beta, so I would assume now would be no different. I feel your pain though... Why wouldn't they want to open a new language to as many people as possible as soon as possible?
I'm up for modding. EDIT: I am always ready to help people and I feel I would be a very effective mod for this new subreddit
In order for you to get the latest XCode beta, you will need to be running at least MacOSX 10.8 Mountain Lion or later.
Thanks. I tried to find that info but couldn't. 
[i think I find one, is there a better version?](https://docs.google.com/file/d/0B_hMezUpeg22cTJLWk5vSC1vUWs/view?sle=true)
What a fucking idiot.
You should still get a handle on ObjC. Any iOS shop is going to have ObjC code laying around for some time. 
How do you run code in your playground?
I'm in, rewriting my company's apps in Swift now.
I can't select any of the options from "Product" which includes "Run" and "Test".
just start another project. edit: I'm sorry, I forgot you can can directly create a playground in the welcome window. In this case select view -&gt; utilities -&gt; file inspector. Then select OS X as your platform in the right sidebar.
https://developer.apple.com/library/prerelease/ios/recipes/xcode_help-source_editor/ExploringandEvaluatingSwiftCodeinaPlayground/ExploringandEvaluatingSwiftCodeinaPlayground.html#//apple_ref/doc/uid/TP40009975-CH26
Because they don't need to. The same reason Apple does everything.
The next guy who's gonna take over your projects is gonna love you sooo much.
What do you want to do with Swift that you can't do with PHP/Ruby/Python/etc.? I mean, you can do web programming with C++ right now, but it's not very popular.
They said it will work with iOS 7/OS X 10.9 or better. So current up to date iOS and Mavericks users will be fine.
If you need a mod from an Europe Timezone I'll gladly join.
From my experience you can have 2 xcode installed on your mac and run them as two different apps. And yes Xcode 6 can run on mavericks. Downloading Xcode 6 now, I'll tell you for sure in ~ 30 min.
Not in particular, was just wondering if it was something that we'd see eventually since the keynote slides compared its performance to Objective-C (naturally) and to Python.
XCTest works out of the box, I haven't been able to get OCMock working though
Thanks. I wonder if someone will whip up a gnu-linux compiler. Not sure how / what apples licensing looks like. Assuming swift will be locked up on osx. It will be interesting at least if I hear about some trying to do it!
Swift also runs on iOS 6. I made a test app and it ran fine on my iOS 6 device
6, That's NumberWang!!
I think they just compared to Python because that was one of the slower "modern" languages. So they can tout bigger "FASTER THAN BY 200X!" kind of stuff. If they were really shooting for web programming stuff I'd imagine they'd aim at Ruby right now. Of course this is all my uninformed speculation. =P
lookl like you'd have plenty, but I'm up if you need more choice
Yeah I thought it was a little odd. Python isn't exactly one of the languages that Swift will be replacing; perhaps on the desktop side? A comparison to C would've been more useful probably.
When you are on the project page, click on the Download Zip link on the right Then unzip it somewhere on your mac, open the director, then open the file named "SillyNameExample.xcodeproj". You are all set
No. Jquery is a library written in javascript that makes dealing with the DOM (HTML) and different browsers easier. Swift is a different programming language than objective c 
It's an old Apple joke http://en.wikipedia.org/wiki/Dogcow
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Dogcow**](https://en.wikipedia.org/wiki/Dogcow): [](#sfw) --- &gt; &gt;The dogcow, also known as __Clarus the Dogcow__, is a [bitmapped](https://en.wikipedia.org/wiki/Bitmap) image first introduced by [Apple](https://en.wikipedia.org/wiki/Apple_Inc.). It is the shape of a [dog](https://en.wikipedia.org/wiki/Dog), originally created in 1983 as part of the *[Cairo](https://en.wikipedia.org/wiki/Cairo_(dingbat_font\))* [font](https://en.wikipedia.org/wiki/Typeface) by [Susan Kare](https://en.wikipedia.org/wiki/Susan_Kare) as the [glyph](https://en.wikipedia.org/wiki/Glyph) for “z.” That image was later chosen for the Mac OS Page Setup dialog box, though it needed to be slightly redrawn because the original Cairo dog did not proportionally fit the Page Setup dialog box. This modified version became the image famously known as the dogcow. &gt;The term “dogcow” was first coined by either Scott Zimmerman or Ginger Jernigan. Mark “The Red” Harlan named the dogcow “Clarus” as a joking reference to [Claris](https://en.wikipedia.org/wiki/Claris), Apple’s office software unit at the time. The sound she makes is “Moof!” &gt;The image of the dogcow was used to show the orientation and color of the paper in [Mac OS](https://en.wikipedia.org/wiki/Mac_OS) page setup [dialog boxes](https://en.wikipedia.org/wiki/Dialog_box). [HCI](https://en.wikipedia.org/wiki/Human-computer_interaction) engineer Annette Wagner made the decision to use the dog from the Cairo font as a starting point for the page graphic. Wagner edited the original font and created a larger version with spots more suitable for demonstrating various printing options. The new dog graphic had a more bovine look, making it arguably less clear as to what animal it was intended to be, and after the print dialog was released the name “dogcow” came into use. &gt;==== &gt;[**Image from article**](https://i.imgur.com/EPwDB8l.png) [^(i)](https://en.wikipedia.org/wiki/File:DogCow_from_LaserWriter_8.png) --- ^Interesting: [^Susan ^Kare](https://en.wikipedia.org/wiki/Susan_Kare) ^| [^MacHack](https://en.wikipedia.org/wiki/MacHack) ^| [^Kings ^in ^the ^Corner](https://en.wikipedia.org/wiki/Kings_in_the_Corner) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chxuuyt) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chxuuyt)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I saw somewhere that you could even build an operating system with it, so as many programming language I think the sky is the limit.
Yes :)
I'm pretty happy with this. Ruby has it and it's not widely abused there, it can make some code a lot clearer IMO. 
Definitely true, but I see it opening the door to heavy abuse, when overloads start being written which stretch the expected meaning of an operator. In C++ for example: cout &lt;&lt; "Hello, world!"; &lt;&lt; is used because it looks like an arrow to represent data flow, but that has nothing to do with the intended meaning (bit shifting). 
It's the wave of the future! Apple has always been about the future, and with adding emoji support, they're hoping to bring a bunch of teenaged girls to the world of coding! (ya know, cause the tech industry isn't 'diverse' enough)
Only a matter of time. If Apple doesn't, someone will do it for them.
But if they compare it to C it would just be slower. =P
Flattering acceptance. However, certainly too early to tell how warmly it'll be accepted into the broader community.
You have to update to 10.9.3 to use XCode 6, I had the same issue until I updated a few minutes ago from 10.9.2. Hopefully that helps
Job securityyyyyy.
Exactly my issue. Did it and now installing Xcode 6. :D
Great, have fun
Check http://book.swiftlang.eu
I'm down for just moderating people who are being mean to each other. No full-time commitments, though. :)
While the logic is sound, that's not the case here: the Developer program has always cost $99. The new version of Xcode is currently in a closed beta available to all members of the Developer program. Once it's out of beta it will be freely available for download just like Xcode 5.
But isn't the NSObject class written in Objc? won't it's implementation have to be rewritten in Swift, or is there some kind of bridge. Further more what will happen with C apis like Grand Central dispatch?
I'm largely excited by the "&gt;&gt;=" operator, but that probably says more about me than anything.
Didn't convert too well...
Nobody can switch all projects to new languages, it will be used for writing new programs for quite a while. Same goes about supporting already written programs - their code won't be rewritten in Swift and it still needs support.
Indeed. I tried 3 different services and none of them were spectacular.
[We don't usually promise anything for the future, but in this case we are making an exception. Swift will have access control mechanisms.](https://devforums.apple.com/thread/227288) 
Looks like perhaps there's already some action happening there :D https://github.com/search?q=swift+grammar&amp;ref=cmdform&amp;type=Issues *edit* oh, also found this succint online version: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/zzSummaryOfTheGrammar.html
I want to know this too.
Ruby is actually my favorite imperative language atm, I just don't think it's the best choice for a first one.
Ditto
You probably weren't struggling with the language itself as much as the general thoughts behind the language. It doesn't seem like swift has changed this. However, if you feel like the Swift syntax makes the paradigms easier to understand, then it's easier for you. Just pick up Apple's book and give it a shot
I don't think you should count on Apple to make this happen. 
As someone who coded professionally for 15 years in Perl, PHP, and Ruby I feel completely freaking lost in XCode. I just want to do hello world and see it execute somewhere.
At least, not at this time. Once Xcode 6 is out of beta, it will likely be free on the MAS, just as Xcode 5 is now. 
why is it confusing? They are different things.
I'm brand new to both XCode and Swift but it looks to me like this is supposed to show the text animated. I got it to run without error but all I see is the black window with "Some text" in the middle. Below that I see a timeline looking thing with a plus or minus that says 30 as in 30 frames or 30 seconds... I think. I don't see any way to actually run the program other than what is displayed already in the playground. Questions, is this in fact animated or am I seeing what I'm supposed to see? Is there a way to start it so it cycles once? Or am I completely missing something?
Caligra...
mostly because I have printing allowance from last semester at college that I don't want to go to waste, but also partly because I like having a physical reference. 
This is pretty sweet! I've been reading the ebook all night. Can't wait to get started. 
The easiest way to go (removing as many hurdles from here to writing your first lines of code) is to just fire up your browser and start coding javascript. Get your head around the basic concepts about programming. After that perhaps start to take a look at ios coding. http://www.codecademy.com/tracks/javascript is a good place to start. :) 
Objective-C isn't going anywhere anytime soon. There are definitely some bugs in Swift as it stands (Not to say there aren't bugs in Obj-C, but its got a much larger install base). Swift is looking great as a modern language, and IMO learning obj-c is more about learning the Cocoa framework, which translates into Swift. For me personally since I have no urgency in requiring obj-c to publish on the app store I'm happy to shift my focus to Swift because my interest is academic. If I were building apps I'd probably continue with Obj-C for now and keep up on Swift as its released &amp; grows.
There are also 162 people and growing in the IRC channel, Freenode #swift-lang. The conversation tends to be very computer science-y, think #Haskell, which I think is really good for the language. There are also quite a few very knowledgable people helping out on some general Q/A.
Yes, but you should certainly focus more effort on Swift as Obj-C will more or less be a supporting legacy code in the distant future as Swift takes over.
Swift doesn't have as many support documentation as other languages, so it'll be a bit harder to pick up as a newb. But maybe learn another language and look for similar syntax and API in Swift while doing so.
I've added to the sidebar for now since I've had a lot of people asking for a PDF copy of it (People without iTunes)
You had to use Xcode 6 right? Would you be able to submit that to the app store right now?
Probably not. Swift is the future. Faster, cleaner, cross-platform (iOS/MacOS) etc etc. After getting about half-way through the Language Guide, it's obvious that Apple intends for this to become the defacto language for all Apple platforms. It's very comprehensive, and has much more improvements to regular JavaScript than I was expecting. I never learned a lot of Objective-C, and there's zero chance of me learning any more.
Can you compile to a binary from the command line? swiftc ?
Simply case x as NSView will do, I think. Perhaps you need let in front. The "as" operator doesn't fail in switch statements. 
The language itself isn't really much dependent on that particular runtime. 
Serious question, did you do this just in one day or did you have exposure to the language before? Second question, how the hell are you giving training on Swift already?!
It's hard to say. The implementation would be much different in the primitive language that C is, making a comparison hard. 
Does anybody know if the Swift compiler is self-hosting (written in Swift, that is)? 
So it looks like there is right recursion, didn't see any left recursion. Might be LL?
ruby is messy and has an overabundance of features and concepts you need to learn to do much of anything...
In my case I had to use the iPhone 4S simulator.
Nice, I missed that. Still, I find it highly unlikely that Objective-C is going to be sunset in the next decade. I don't think it will be common, but I think the need will still be there. More importantly, Apple has not said that Objective-C is going to be EOL'ed. There seems to be a lot of panic for nothing.
Are you registered in the mac/ios developer program?
My source is the keynote. I'm not saying they are going to suddenly make it impossible to develop in Objective C. I have no idea how long someone could theoretically continue developing in Objective C -- certainly years, but maybe even decades for all I know. It was possible to develop in c++ and Carbon for many many years after OSX and Objective C was out. All I'm saying is that my understanding from the keynote is that they consider Objective C legacy and Swift their future. I don't think they will be releasing anymore major updates to Objective C. I don't think there will ever be an Objective C 3.0, for example. Of course, just because that's their plan doesn't mean it will really happen. It will all depend on whether the developer community really does switch to Swift.
I've been looking for the answers for those questions myself. Specifically being able to find classes that inherits from a certain class. I could so all that with objc_ functions but are quite lost with swift. I get the feeling that we are getting more C++ object orientation than Smalltalk OO. I also haven't seen any analog to + (void)initialize;
C++ should have been at the top of that list. Structs, templates, and a general willingness to be advanced. 
Thanks for the input guys. I will continue with objective-c for the valid reasons given, also because I don't have dev access, so I can't get Xcode 6 yet anyway. 
I would continue if I were facing that question. The course may be taught in Obj-C, but it is mostly about Cocoa Touch and other frameworks that allow you to interact with iOS. Things like NSString and UIVIew are not Obj-C and you will still use them later in Swift (although you may opt for Swift native String type for certain cases). At the same token, it will be a while before you can find a comprehensive course on how to program for iOS that uses Swift.
I'm not sure how you took that away from the Keynote. Seeing the Keynote myself, that seems like quite a leap. What I took away from it is that Swift provides a higher-level way to develop applications, and provides interaction to just about everything most developers need. I imagine the vast majority of developers who will still be doing Objective-C far into the future are the same ones who often still do quite a bit of C coding, the Mac OS X application developers.
I thought so, how can I tell? *edit:* Yes, I am, doesn't expire until October 2014...
You should also mention Codecademy.
From http://en.wikipedia.org/wiki/Carbon_(API) &gt; Apple did not create a 64-bit version of Carbon while updating their other frameworks in the 2007 time-frame, and eventually deprecated the entire system in OS X 10.8, which was released on July 24, 2012.
Not at all, if you read the beginning of the post it's pretty clear that it's experimental.
Very true, I commented before I read as I wasn't trying to personally attack you. The title just was one of the many "Hey I played with Swift and I know everything now" titles/statements. Anyway, I just had a quick look at it and it looks like you're actually just outlining your own thoughts and learning process. I like it :)
1. Write a swift interpreter 2. Write the Cocoa runtime in swift for Windows.
Interesting. I guess I just need to figure out how to write the header by hand (since I use a cross platform build system) and what Xcode puts in that header :)
It was definitely implied (and shown) that Swift is a higher level language, but it also implied that you can do just about everything in Swift that you can in Objective-C. For what its worth, just because a language is high-level doesn't mean you can't interact with low-level APIs. Python is a good example of this concept. &gt; What it is now is most likely it's final version. This is the leap I'm talking about. Apple didn't even elude to that. An important thing to keep in mind that Apple aren't the only contributors to Objective-C, and while they've made some major contributions (ARC), there are many things they had little to do with.
&gt; It was definitely implied (and shown) that Swift is a higher level language Where was that shown? In what way? As I said you can convert any Objective C file into a Swift file that does the same thing. If you think there's something that can only be done in Objective C or will work faster in Objective C what exactly is it?
Making the syntax simpler so that the same thing can be done in fewer lines does not make it a higher level language. It just makes it a language with a simpler syntax.
All the introspection functions from objc/runtime.h still work in Swift, as far as I can tell. Where previously you might have used [someObj class] you can now use someObj.dynamicType or where you would have used [SomeClass class] you can now use SomeClass.self. Hopefully at some point there will be pure Swift implementations of these functions, especially since interacting with C via swift is somewhat cumbersome. Method swizzling still works as well. +(void)load and +(void)initialize still work as expected for any object that inherits from NSObject. Dynamically resolving method calls or using something like performSelector or NSInvocation is no longer supported in Swift, and this is intentional. You can get around this by making your changes via ObjC, but this seems hacky and is necessarily limited to things you can do in obj C . Personally I am extremely disappointed with this decision, as it removes entirely legitimate design patterns that Apple itself uses in the name of 'safety'. I just feel like I'm getting a language with training wheels. This is definitely the most off putting decision they've made with Swift imo.
That would be true if Swift was just syntax enhancements. Closures, functional patterns, and generics are all higher-level concepts. Swift is much higher level than Objective-C.
My impression is that it's nothing like VB or javascript. More like Go or C#: it's a statically typed language with local type inference and some other nice features taken from other static languages (convenient lambdas, multiple return values, automated memory management, generics). Doesn't use garbage collection, which I guess is a surprise, but the use of ARC lets it fit right in with the iOS and OS X environment, so that seems quite natural.
Looks that way. Just run `xcrun swift --help` for details.
println isn't showing up in my playground.
Thanks. That makes a lot of sense. The documentation is pretty good but clearly aimed at someone with more CS/general programming experience than I have (which is minimal). I think it's just going to take me a while to wrap my head around some of these concepts. 
The answer is 'sort of'. From the [dev forums](https://devforums.apple.com/thread/227299?tstart=45): &gt;Swift can use several dispatch mechanisms. The short answer: &gt;* Methods in classes that do not have Objective-C inheritance use virtual table dispatch by default. * Methods in subclasses of NSObject use Objective-C dispatch, except for method declarations that are inexpressible in Objective-C. * Methods in structs are dispatched directly. Furthermore, access to dynamic features like performSelector, NSInvocation, objc_msgSend, class_addMethod, etc are disabled in Swift. @dynamic has been replaced by @NSManaged, which only works for core data subclasses. I really hope they make this optional like in Scala, so that if you want a dynamic class you can do so voluntarily while accepting the associated risks and performance cost of dynamic code.
Just to show I am not the only one who came away from the keynote with the impression that Swift is meant to replace Objective C : From [ArsTechnica](http://arstechnica.com/apple/2014/06/apple-shows-off-swift-its-new-programming-language/) &gt; Apple announced on Monday that it has developed a successor to its venerable Objective C with a language it's calling Swift. From [Times of India](http://timesofindia.indiatimes.com/Tech/Tech-News/Apples-programming-language-Swift-5-things-to-know/articleshow/35988640.cms) &gt; Though it is meant to eventually replace Objective-C, Swift will co-exist with the older language. From [TechCrunch](http://techcrunch.com/2014/06/02/apple-launches-swift-a-new-programming-language-for-writing-ios-and-os-x-apps/) &gt; At its WWDC developer event today, Apple surprised all of the developers in the audience by launching a new programming language called Swift. This new language seems to be poised to replace Objective-C as the main programming language on Apple’s platforms. From [TheNextWeb](http://thenextweb.com/apple/2014/06/03/developers-apples-swift-huge-potential/) &gt; The new language — which is in beta until iOS 8 is released – is Apple’s replacement for Objective-C From [CNET](http://www.cnet.com/news/apples-new-swift-coding-language-hopes-to-lock-down-errors/) &gt; Swift is native to Apple's Cocoa and Cocoa Touch frameworks on which OS X and iOS are respectively built. Federighi outlined an ambitious goal to replace the Objective-C and Python languages with a single language that is faster and easier to code in. From [TechGeek](http://techgeek.com.au/2014/06/03/apple-creates-swift-programming-language-none-baggage-c/) &gt; Announced earlier today, Apple has created a brand new programming language for designing apps to run on iOS and its Mac computers to replace Objective-C. From [Macgasm](http://www.macgasm.net/2014/06/02/apple-pushes-swift-manual-live-ibookstore/) &gt; The language is meant to replace Objective-C, the current language used for developing iOS and OS X apps, From [Technoligizer](http://www.technologizer.com/2014/06/03/flappy-bird/) &gt; Yesterday, Apple startled attendees at its WWDC keynote by announcing that a new language, Swift, would replace Objective-C as the way to write apps for iOS devices. Believe what you want. Obviously people can have different interpretations of the keynote, but I am not alone in my understanding of it. And with that I am done with this thread.
This is a disaster. Not only the head of LLVM project is being funded by Apple as previously known, but it has now been revealed that he is actively working to further Apple's monopolistic interests by working on a proprietary language for the sole benefit of Apple's locked-in platform. LLVM maintainership may not longer be considered to act in the public interest, and there is even the significant risk that Apple may make an "enhanced" proprietary source version of it. Any other big stakeholder in LLVM should consider first of all pushing for a license change to LGPL at least, and possibly disputing maintainership and forking. It is truly sad that such a betrayal of the public interest has happened. 
Better version, ePub http://kristofferr.com/files/The%20Swift%20Programming%20Language.epub
&gt; There are so many questions, It feels rather like a hodgepodge of VB and Javascript, which I (probably ignorantly) consider "fisher price" languages. It's not. It has simpler syntax and it is higher level, but that doesn't mean it's less powerful. It's actually quite modern. The important thing is that its semantics are much more restrictive in the form you express your code in, but there's less code to actually write and less to manually take care of. So the toolchain can reason about the code structure to a greater extent, and it rules out large classes of bugs. It's like how ARC is slightly less flexible, but frees you up from worrying about a lot of bookkeeping that the computer can do for you - it's not "cheating", it's making sensible use of the resources available to you. &gt; Has Cocoa's classes (NSString,UITableView etc etc) all had their implementations rewritten in Swift already? or are they simply bridged for now? They will be bridged, and they will remain bridged for the foreseeable future. There's no reason to have two different implementations for something that provides the same semantics in a compatible way. If Apple decide to replace system frameworks with Swift implementation, all it will mean is that the bridge will go in the other direction for people writing Objective-C. Again, it's like ARC. When ARC was released, Apple didn't go out and rewrite everything to use ARC. They made sure ARC and non-ARC code could interoperate, and they will slowly phase out non-ARC code over time. &gt; How will lower level C based APIs (Address Book / Grand Central Dispatch) be handled with Swift? You can call C functions from Swift. [Here's the guide](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/InteractingWithCAPIs.html#//apple_ref/doc/uid/TP40014216-CH8-XID_13). &gt; Is Swift a light weight companion to ObjC or a full blooded replacement? It looks like a replacement to me. They may keep Objective-C around for niche cases, but I don't see anything that's a roadblock to the vast majority of developers. It does the same job but in a better way. &gt; I know it's supposed to be simpler (no semicolons etc) however I find the syntax vague It's not vague, you've just had a day to look at it, so of course there are going to be things you're unclear on. How long did it take you to get a good working knowledge of Objective-C? A day? &gt; how are properties defined [This is explained in the tour](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/GuidedTour.html#//apple_ref/doc/uid/TP40014097-CH2-XID_14). &gt; do I need to import classes I define, whey is there no header files etc. Those are not "This is vague" or "I don't know how to do it" questions. That is "Objective-C makes me do X and I want to write Objective-C, so where's the X?". Headers are ancient technology. Even languages from years ago abandoned them. Just because Objective-C needed you to do things like that, it doesn't mean that there must be an equivalent in Swift. That's like a buggy driver saying "but where do I put the horse?" when confronted with a car. &gt; My intention wasn't to complain here, just feel a bit afraid of Swift, maybe I'll eventually enjoy it, I certainly don't like JS or VB. There's nothing to be afraid of. It's just new, that's all. It's nothing like VB and not much like JavaScript. It's a mixture of features from much more advanced languages, while retaining enough of the Objective-C semantics that it will remain compatible with the current platform. Stop trying to think in Objective-C and start trying to think in Swift. You'll find it much easier once you stop trying to look for places to put things like headers in where they aren't needed and concentrate on actually learning the language instead. 
Based on this video it doesn't appear that an app built in Swift requires significantly less code than one built in Objective-C. What am I missing?
Swift is missing most of the dynamic features from ObjC, so some ObjC implementations will not be directly convertible to Swift. Those pieces of code will either need to remain ObjC, or they'll need to be rewritten using another approach.
swift, unlike objective c, can create "structs" which are value types stored on the stack structs still have methods, properties, etc
Your question can better be phrased as: Does Swift only have reference types? The answer is no. Swift has both reference and value types. Most of the built-ins like `Int`, and also user defined `enum`s and `struct`s are value types. These are allocated on the stack. User defined `class`es are reference types. These are allocated on the heap. Stack and heap management are performed behind the scenes and you don't have to worry about them. This is detailed in the language guide under [Classes and Structures](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/ClassesAndStructures.html#//apple_ref/doc/uid/TP40014097-CH13-XID_94) and [Automatic Reference Counting](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html#//apple_ref/doc/uid/TP40014097-CH20-XID_50).
Press command + alt + return
Yes please find a channel that already isn't in use. Its been fun the last 24 hours in there. 
The documentation is currently quite thin on this. However, in practice, if you are not calling Objective-C code or decorating your protocols with [`@objc`](https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/buildingcocoaapps/InteractingWithObjective-CAPIs.html#//apple_ref/doc/uid/TP40014216-CH4-XID_36), calls to `objc_msgSend` do not seem to be produced by the compiler (i.e.: dispatching is not done). Not tested this thoroughly.
Not my project, but yes, it seems he hacked it together in one day. 
Well, a language could implement reference types that refer to objects on the stack. But you couldn't do that if the language was dynamic. Or am I mistaken? Anyhow thanks for the links - very helpful.
Very nice video, thank you! Gives a good little inlook into the language. Swift seems to be pretty sweet. A bit pytonish here and there. 
Thanks alot for the detailed response, I'll try and forge forward!
Thanks man! Appreciate it! :) Not hugely experienced with Python, but it's certainly a fair change from Objective-C. Nice to know UIKit hasn't changed much though...!
I've not really found anything as of yet; there are a couple of blog posts scattered around (and Flappy Bird in Swift, which might help out: [GitHub Link](https://github.com/fullstackio/FlappySwift)). I'd say keep your eyes peeled on this subreddit and HN for the next few days, some are bound to surface!
OT, but get a Mac Mini if cost is an issue. Apple refurb is a great source of warrantied, recent, cheap, machines.
Nothing is automatically obsoleted by Swift. Swift is a new language but you can still use Objective-C. They aren't removing that, just adding a "safer" and easier language to use. I'd stick with continuing learning using available resources. It'll be awhile before new things come out for Swift unless Apple has already given publishers access.
I'm in the same boat. I want to make iOS games, and don't want to have to learn a million and one languages to do it...
No. You need Xcode 6, which runs on OS X only.
I was thinking of a used Mac book since I can't really afford refurbished. So far I've only seen "get a Mac" so I hope the laptop will get me far enough to see results. Thank you anyway. 
Languages don't matter. If you've seen enough of them they become kind of interchangeable. That said, swift looks nice, I'd prefer it over objective-c. There are some perf benefits also, so you gain something and convenience. It's true that you lose manual memory management, not sure how good swift GC is. Manual memory management usually is only an issue when doing graphics heavy code, but that's one of the avenues of swift, so it's nothing to just shrug off. 
Pretty sure Swift is interpreted.
And as an added bonus you get yosemite and the ability to publish and a free copy of apple server
I've had a little over a year coding in primarily C++ and a few other languages and was just interested in the iOS scene as of late. Thanks for the links though. 
Hello, I see /u/Legolas-the-elf has answered your questions, but I just wanted to pipe in and say that while header files and imports are very old-fashioned, the state-of-the-art ways of doing things are still being developed and refined to this day. The basic idea here is that a group of declarations and implementations all live in the same file, and you can 'import' this file or module or whatever to access and use the defined names. So no need for header files because the compiler resolves all names by looking through the implementations. Java was the first to bring this into the mainstream, but most new languages are doing it now, I think. Swift is just the latest. That said, I feel like you might have some more questions--I'd be happy to take a crack at them.
Just made appleswift.wikia.com. I think a Swift wiki is a pretty good idea.
Yech! You'd think he would have a better looking website..
Wikia isn't the greatest to be honest. I'm messing around with a couple other sites just to see what is available.
What model laptop? Don't want too old...also remember you'll need to be a registered dev to get started which costs money. A solid release of Yosemite and Xcode 6 won't happen till around fall. But by then it'll be free, and new macs will likely be announced as well, thus making it cheaper for older models. 
if you are going to program then get a mac. whether it be perl, php, ruby, java, etc are easier to do on mac b/c it's based on unix. 
He's a compiler engineer, not a web designer. Compared to [Ian Piumarta's website](http://piumarta.com/) (another compiler engineer, but not well known outside of the field), it's a work of art.
I was kinda lost too, but after the first book chapters and sams video I found that the change just goes into objetice-c, we still have cocoa touch, uikit. And yeah, just check that theres no header/implementation/properties( count that lines of code out) :) And this video shows a well done brief view of "translate" a simple app with comparison of ways, we just need time for figure out the advantage of usage the cool new stuff for it.
[This](http://www.amazon.com/Apple-MacBook-1-83GHz-Camera-Leopard/dp/B004FK3QWK/ref=sr_1_2?s=pc&amp;ie=UTF8&amp;qid=1401840992&amp;sr=1-2&amp;keywords=mac) is the cheapest I could find used and is the one I'd probably end up getting. Not necessarily that one but that's the model. This mac is not something I intend to use for everything I do, that's what my PC is for. I only intend to code Obj-C and Swift on it and nothing else (and maybe other Mac only apps).
Hmmm...looks good except I'm not really sure how many more updates this device will be getting. It seems like it would be pretty hard to run Xcode.
I could be wrong, but I believe anyone with a Mac can download xCode
Bah. I was afraid of that. I guess if I want to join the group I'll have to bide my time. I'll still be keeping a close eye on Swift though. Thanks for your help.
But only licensed developers can download Xcode betas, such as the one required to develop in swift.
There is no reason for them to be closures. It's just that the concept of any kind of code block always comes with curly brackets and its own lexical scope, including i/switch/closures/etc.
No problem. Just looked up devices that will work with 10.10 and that macbook isn't one of them. Wish I could help more!
[Not Xcode 6](http://i.imgur.com/Yw20kiw.png)
I think it's the same as mine, if it doesn't support 10.9 then you're probably doomed cause Xcode 6 beta only works on 10.9, I asked Apple for an explanation and am awaiting the response. BTW they have horrible support page, half an hour wasted. I personally won't buy a new Mac just to be able to code for it, lol.
Why not unix then?
You have to use Xcode6 and no, you cannot submit any apps with it to the appstore now. You wouldn't want to now anyways, its still buggy.
Never happen.
&gt; Ian Piumarta's website Oh my goodness, that last link isn't even active. 
It's not supposed to be active.
very pythonic
The C functions getchar, getc, gets and a few others are all accessible when Darwin (or Foundation or Cocoa) is imported.
haha
I suggest opening radars for all issues as you are a registered developer. 
They need to add a splat operator to allow the conversion of [1,2,3] to 1,2,3 like Ruby's *[1,2,3] or Go's [1,2,3]...
The problem is that the block is executing. There appear to be two competing possibilities here: 1. since opt is an implicitly unwrapped optional (i.e. type of an optional, defined with a !), using it should evaluate it, return false, and the block should not execute 2. since opt is an optional, using it in an if statement evaluates it to true or false, depending on whether it has value or not. Since it has value, it is evaluates to true, and block executes The latter happens here. It may be just a case of precedence of operations, but it's a strange one, because the entire point, as far as I can understand, of implicitly unwrapped optional (as opposed to regular optional) is that it automatically evaluates. It does that for types other than Bool, but not for Bool in this case, introducing inconsistency. 
Valid HTML 4.01 yo
The official apple guide to swift basically teaches you how to program in the language. "The Swift Programming Language" on iBooks. You can even open the book in Xcode and use the examples in the playground! I'm probably going to buy a Mac just to learn this language.. It's awesome
Right now I'm creating classes and interacting with labels and buttons. Nothing too ground breaking. If you are familiar with the course, I'm stopped on section 23 as I build my own version of the pirate game from the previous sections.
I think pattern matching gives it one up on Golang too. Would be nice to see Go threading patterns with Swift and GCD though. It feels like it would make a nice server-side language. I hope it is open sourced and can be used on backend Linux servers.
Wouldn't be surprised if Apportable adds it to their toolchain. Might need to be open sourced first. Apple has open sourced their compilers in the past, so will need to see.
OSX *is* unix, just as much as any linux distro or FreeBSD. Hell, it's unix certified, which linux isn't (not that's very important, but still). So the reason to use it might just be a preference for Apple UIs over KDE and X11. It's just a matter of taste once you've got unix underpinnings. 
&gt; learning Python would translate well to Swift Or Haskell, or Scala, or Rust, or OCaml. 
[**@futurepaul**](https://twitter.com/futurepaul): &gt;[2014-06-03 19:01:06 UTC](https://twitter.com/futurepaul/status/473902211463118848) &gt;Noah's Ark, in Swift [*pic.twitter.com*](http://pbs.twimg.com/media/BpOjjOGIEAA7ZVb.png) [^[Imgur]](http://i.imgur.com/QgIRzRs.png) ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/279dby%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Just curious, how has this community already existed for 6 months? Inside info? I see that the sub was created by "SwiftApple" :p
I'm not sure anybody knows enough about Swift yet to tell you if it's a good language to be your first learning experience. I would wager that it's actually not a good language right now - for learning, specifically - because aside from the free ebook that Apple just released there are near-zero resources about programming Swift. This reddit will start collecting a lot of those resources, but again, because Swift is not yet a mature language, a lot of these tutorials are going to show things that won't be best practice in a year or two. Plus, Swift is just the syntax. The majority of the APIs you will deal with (the nouns and verbs, effectively) will be Cocoa, and all the Cocoa documentation, currently, has examples in Objective-C. So learning Swift will probably mean at least learning to read Objective-C. Not a show stopper - but if it's your first time out it's going to add some complexity to your learning. All that being said, you said one thing in particular: you are specifically interested in iOS programming. Swift is _definitely_ the language of the future for iOS development. Also in the plus column is the Playgrounds feature of Xcode that only works with Swift. That's definitely going to help you get learning the language quickly - it really reduces the amount of time it takes to see if your code does what you think. So. There are challenges learning Swift as a first language, but there are also upsides. If you're committed, I think it's doable. But if you're looking to learn at your own pace and don't have a lot of time per session (less than a few hours at a time) to spend on learning, then I'd go with something much more mature and documented.
I've been wondering the same. When I saw the slide that said we could get started with it "today" I was excited. I immediately opened up the appstore and checked if there was an update for XCode waiting for me. There wasn't. I would really like to try out swift, but I don't want to pay $99 to do so.
To last u would want a 2012 or later MacBook Air, pro or Mac mini. Hackintosh at the least 
objectAtIndex might work as a workaround.
Yeah, if you want to do iOS, the getting access to a Mac is the only way forward.* *you actually can do without, but it's not easy, and IMO not worth it.
Sure. If you want to wait another year or so to learn how to program you should wait. Or if you want to start learning now you should start now.
It's really not hard to add some color &gt;.&lt; It's not like he doesn't have access to a shit ton of designers at apple lol
Programming is a very hard task to learn. And no specific language is a "beginner" language. But once you do learn a language, any other one will be a lot easier to handle because you know how coding works, and most languages are *similar* in style but each are slightly different. What I'm trying to say is, I have been trying to learn to code for about 2 years now, and I could never find an up-to date tutorial on how to do it. So my advice is to, especially if you want to code IOS, sign up for the dev program, grab yourself Apple's free ibook (Trust me, it is a book for noobs written by the people that made the code) and get committed to learning! Once you know it, say 2 years down the line you decide you should've learned Python, it will be 100x easier if you know Swift, so there's not really a bad choice unless you do nothing! And you mentioned your whole family being into coding? I'm sure any of them would love to give you some guidance along the way! Good luck!
Objc: self.textField.backgroundColor = UIColor.redColor; also works, so really it's even closer to swift than you might think for a number of cases! 
Swiftians, Swiftites, Swifties?
I see you using CGRectMake(), it might be useful to know what you can also do: let var = CGRect(x: 0.0, y: 0.0, width: 10.0, height: 50.0) 
Xcode 6 and Yosemite will run on anything that supports 10.8 and 10.9, which is a list that contains some (but not all) machines going back all the way to 2007: http://arstechnica.com/apple/2014/06/psa-the-idevices-and-macs-that-will-support-ios-8-and-os-x-10-10/ Now, if you want a *pleasant* experience developing with Xcode 6 and Swift, you're going to want something from the last couple of years-- I'd say mid-2012-era is a good baseline (that should get you an Ivy Bridge machine). Throw in more RAM (OSX *really* likes having at least 8 GB) if needed; swap in an SSD if you can (still a bit expensive, and some models don't have user-replaceable hard drives).
Yeah I mean given that the creator is "Swiftapple" it's not like the sub was originally for something unrelated and was just repurposed for swift when it was officially announced. Paging /u/Swiftapple for the answers :p
Wait another year?? No, learn Android first and then iOS8 later..
And it's appreciated. Definitely helps me to see something practical being done, and interfacing with the existing APIs. Thanks!
Well, as far as I could find out till now, if you want to use the println, which prints to the console, you should try to set up a new console application and try your code there. Thats what I did for my first "Hello World" in swift. If you just want to fiddle with the language the Playground is a good place to start.
Yes, but not legally. Xcode 6 beta 1 can be easily found on websites with less than stellar reputations
If I remember correctly the last supported OS X on this line of laptops is OS 10.6.8 Source: [everymac](http://www.everymac.com). So I would think about getting a newer model... But don't trust me on this :)
Downloading Xcode requires 10.9.3 and Apple only distributes the betas to developer accounts. Worth noting is that the beta can be easily downloaded from other less reputable sites, as it does not require any sort of authentication to run. 
The name was purely coincidence. But worked out well for us.
They also mentioned that it will work on iOS 6 at the state of the Union 
Best I've managed through my research linked below. It compiles but the adjust function doesn't work and when ran in the repl it throws an error. https://gist.github.com/anonymous/5cc0af9ba0e94434d295 edit: through some research on this sub, it looks like enum might not accept properties as classes and structs do. Might be a trick question?
Awesome thanks, currently the cheapest mac possible on the AUS refurb store is the June 2013 MacBook Air 11" Might see if I can find a used Mac mini 2012 or later
Huh. Super weird, but very cool. I've subbed, hope for some good content :D
Awesome it is nice to watch someone else discuss the language to clear up any ambiguities I had reading, also seeing the info a second time helps reinforce it.
It is not self-hosting.
What's wrong with his site? It's great and it looks exactly the way it's supposed to.
If you don't have the patience for long videos there is a slightly weird thing I started doing recently is watching tech videos at 1.5x speed. It's still comprehensible and yet saves a lot of time. It's easy to do on YouTube and VLC also allows you to set playback speed.
Stay away from an SSD if price is a factor. That suggestion is just plain silly.
for anyone interested, I made a PDF myself from the EPUB. https://mega.co.nz/#!rdUSATyC!kSw6jwlPFW_Dpt0PsXCwDov0Bu3Q9I3eR3WahGdJs0Y
Awesome, thank you! This was really great to watch and follow along with. One little bit I noticed that is cool about swift: In the line self.tableView = UITableView(frame: CGRectMake(0, 100, self.view.bounds.size.width, self.view.bounds.size.height - 100), style: UITableViewStyle.Plain) The `UITableViewStyle` bit is implicit (as well as the `self`s), so it can be written as tableView = UITableView(frame: CGRectMake(0, 100, view.bounds.size.width, view.bounds.size.height - 100), style: .Plain)
There's not a significant difference (beyond syntax) between a computed variable and their equivalent getter and setter functions (what used to be `[myObject someProperty]` and `[myObject setSomeProperty:]` in Objective-C prior to the addition of properties to the language). It's really just a convenient syntactical shortcut for that class of functions.
Just tried this out, that's awesome! I hadn't noticed that yet!
Totally agree! When I was doing the tutorial I had brief stints of "Is this tutorial really necessary?"; then I got to little bits that tripped me up (like using .self() instead of .class), and figured it'd be a useful resource in the end!
Is the difference between `let` and `var` the same as in JavaScript?
Say we have a simple struct: struct Circle { var radius = 0.0 } If we implement area as a computed property, it looks, at its most basic, like this: struct Circle { var radius = 0.0 var area = Double { return 3.14 * radius * radius } } And we could use it like this: var myCircle = Circle() myCircle.radius = 2.0 myCircle.area // 12.56 Note that we don't need parentheses to get area, we just access it like a property. What if we maybe wanted to be able to set the area? We can do this with the `get` and `set` of computed properties, like this: struct Circle { var radius = 0.0 var area: Double { get { return 3.14 * radius * radius } set(newArea) { radius = sqrt(newArea / 3.14) } } } and we can use it like this: var myCircle = Circle() myCircle.area = 15.0 myCircle.radius // 2.186 Notice how we just set `myCircle.area = 15.0` and we don't do something like `myCircle.setArea(15.0)`
Server cannot be found.
Yeah, it's cool, and the part about needing to use as UITableViewCell made me realize that Swift is actually more strongly typed than ObjC!
Pretty sure I read in the docs that there is a splat operator: ...
Yeah, buy it baseline. Upgrade RAM and SSD by yourself, it's much much much cheaper, and it's very simple.
I would stay away from an 11" unless you have an external monitor. I have on i use when traveling to dev on, it's painful. Screen is just a bit small. 
The error is because your setter is causing an infinite loop. Fixed code posted as a comment to that gist.
From what I have done with the language in the past 24 hours, it's very similar to Python, with hybrid dynamics of JavaScript. 
The language was just released, I don't think you will find beginner material on Swift anytime soon.The book from Apple is not really a how to program guide. I suggest you spend the summer learning about problem solving, object oriented programming, algorithms/data structures, etc. I started with C++ with this [book](http://www.amazon.com/Programming-Principles-Practice-Using-Edition/dp/0321992784/ref=sr_1_4?ie=UTF8&amp;qid=1401865871&amp;sr=8-4&amp;keywords=C%2B%2B). The author of the book is also the author of the C++ language. Its a book on problem solving using C++, its not a C++ reference book, which is why it is used in many intro courses. For Python I suggest this [book](http://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/1590282418/ref=sr_1_2?ie=UTF8&amp;qid=1401866062&amp;sr=8-2&amp;keywords=python). Its currently the textbook used in intro courses at my school. Come back in the fall with this knowledge and you will be ready to go, and I'm sure there will be many books on Swift development by then. Here's a free intro course from MIT which uses Python: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/
Swift doesn't use GC, it uses ARC, which is the same as ObjC (at least for modern code bases). ARC is like having the compiler do all your manual memory management for you. You get all the speed, and you only really have to follow a few basic rules (and watch out for retain loops in certain cases).
a 2008 Mac Pro or a older Mac Mini. Probably expect to pay around 300-600$
Nice, I didn't catch that.
Wait for training resources? (he said incredulously) The Swift Book and the API guide are all you need to learn the language. Any basic programming skills carry over. 
Even QuickTime Player allows this. Just hold the Alt-key while clicking on the forward-button.
From what I can tell, Swift is easy, not simple. There's a big difference. The fact that they have this REPL playground in the IDE makes it a great language for learning, you can literally see what is going on in your logic.
Thank you and purchased! =) The C++ textbook I have on my shelf isn't the best.
1. It's best for Apple if they own the language ecosystem, then they don't have to ask permission, or create fragmentation for anything they want to do with the language. 2. Very Low. It would not directly benefit them at this time.
You'll probably need something like if let val = opt { // check val for true or false }
let is defined and can't be manipulated by computations (in terms of being forced to change) Vars can do whatever they are told by the code
I put the test code in the editor, it gave a syntax error (consecutive statements on a line must be separated by ';'), and autocorrected to this: if x &lt; 1 { [x]; in return x } So, the answer is no, they are not closures, at least for this test. 
The playground is overall a tad weird about things. Guess I just need to get the hang of this new Xcode. 
Cool project. One thing for when you create a property in a class. Instead of instantiating straight away you can use "optionals" by adding an `?` after the variable name. So rather than: `var tableView : UITableView = UITableView()` You can use `var tableView : UITableView?` It just means you're not creating all these instances, and then re-creating them when you set them up with frames.
There are no implicit casts (at all) in Swift. To get a value of the correct type, construct a value of the correct type passing the wrong type as the parameter. e.g. if you need an "Int", you'd use: var index = Int(incomingShort)
Thanks! Is this taken from another language? I only know JS and C#. Can't wait to learn Swift!
What do you mean by the word "dynamic"? Swift is statically typed.
could you give an example here? 
Really nice video!!! Thank you very much. I have some questions of somethings I am not sure about. What's the advantage to using self. with all the member variables? Is the any stylist choice for naming member variables? I used a member variable for the cell identifier constant. Should that variable name be capitalized? I have constantly been seeing let followed by lower case names, but in Obj-C, things like cell identifiers were named with capitals I think. Finally, I have never used datasource.add(). Instead I always used to add to the array or whatever data source I was using. Is there any advantage or disadvantage to either way? Thanks for any suggestions!
Is this showing that an image file can be used as a variable name?
No, it's showing that Unicode characters (of which emoji are a subset) can be used in variable names.
Good catch! Updated the article.
There are no implicit casting between integer types in Swift. Just like in C#, you can use the `as` operator to type convert. Failure to convert will result in a runtime error. For instance: `s as Int` If you are uncertain about whether a conversion would succeed, you can use the `as?` operator, which returns nil on failure. [Here is a list of the available numeric types](https://developer.apple.com/library/prerelease/ios/documentation/General/Reference/SwiftStandardLibraryReference/NumericTypes.html#//apple_ref/doc/uid/TP40014608-CH18-SW1).
Dynamic means that many things are evaluated at runtime rather than compile time. As an example think dynamic messaging. Certain things about objects may be unknown at compile time, so you might not know how much memory to reserve (classes can vary at runtime) hence the language has to allocate memory for them dynamically (on the heap - so it can be resized if needed). A language can be statically typed but still be a dynamic language - like Objective-C.
Hakintosh is doing well with xcode6 and swift if someone wants to know.
&gt;var you: String? = "Reader" var greeting = “Hello \(you)” // No compiler error! print(“Hello “); println(you) // Also fine. var nope = "Hello " + you // Compiler error This is because concatenation requires a string type, while the other two operations are type agnostic, right?
Not wikia. Please.
You can create the app now but won't be able to release it until iOS8 releases (nothing built with Xcode 6 will be allowed on the store until the end of the beta period)
Swift is actually great for a beginner programmer, as the Playgrounds feature helps a developer to understand both the syntax of Swift itself and behavior common to most programming languages. They're a great way to test out an algorithm and get an idea of the basic structures (if blocks, loops, classes, etc.). I'm actually in the process of porting one of the JavaScript applications I'm in charge of at work, just so that I can use a Playground for debugging. I would bet that it's just as easy to learn as JavaScript or Python, but with the power to create code that will run on an iPhone or Mac. Plus knowing Swift will make it much easier to understand another language should you decide to learn one. I say go for it. If you run into a wall, message me on here and I can help you. The iBook provided by Apple (also available as a series of web pages) is a great resource, and as an added bonus it's full of classic sci-fi references.
The word "dynamic" alone doesn't have any useful meaning. Swift certainly does have dynamic dispatch and dynamic allocation. Though almost all modern languages have dynamic allocation. It is unlikely for a language with reference types to not do dynamic allocation. What would you do when a function returns, and you return a reference to the stack? Admittedly I do not understand your concerns. In Swift, you *can* allocate objects on the stack. Such objects must be a `struct` rather than a `class`, and have value semantics. It is much like C# in this respect.
For clarification, it lets developers reason about code better, but more importantly, it lets *the compiler* reason about code better. If the compiler is positive that value will never change, it can store it in a different, more efficient structure than regular variables, thus leading to a whole new class of optimizations.
Plus, Apple gave some very clear sample code.
You are right, of couse! Page 392, someone's been busy. ARC is pretty nice actually. :)
it should work http://www.downforeveryoneorjustme.com/weheartswift.com
I agree that the word dynamic can be vague ([here's a wiki on it](http://en.wikipedia.org/wiki/Dynamic_programming_language)). But let's just ignore the semantics. My initial concerns are pretty much solved by structs. It's not that I had a problem with dynamic allocation, I just hated having to allocate for every object - again this is solved by structs. I would have preferred a C++ model though, but I suppose they had to keep it compatible with Objective-C.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Dynamic programming language**](https://en.wikipedia.org/wiki/Dynamic%20programming%20language): [](#sfw) --- &gt; &gt;&gt;*This article is about a class of programming languages, for the method for reducing the runtime of algorithms, see [Dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming).* &gt;__Dynamic programming language__ is a term used in [computer science](https://en.wikipedia.org/wiki/Computer_science) to describe a class of [high-level programming languages](https://en.wikipedia.org/wiki/High-level_programming_language) which, at [runtime](https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase\)), execute many common programming behaviors that static programming languages perform during [compilation](https://en.wikipedia.org/wiki/Compiler). These behaviors could include extension of the program, by adding new [code](https://en.wikipedia.org/wiki/Source_code), by extending [objects](https://en.wikipedia.org/wiki/Object_(computer_science\)) and definitions, or by modifying the [type system](https://en.wikipedia.org/wiki/Type_system). These behaviors can be emulated in nearly any language of sufficient complexity, but dynamic languages provide direct tools to make use of them. Many of these features were first implemented as native features in the [Lisp](https://en.wikipedia.org/wiki/Lisp_(programming_language\)) programming language. &gt;Most dynamic languages are also [dynamically typed](https://en.wikipedia.org/wiki/Dynamic_typing), but not all are. Dynamic languages are frequently (but not always) referred to as “[scripting languages](https://en.wikipedia.org/wiki/Scripting_language)”, although the term “scripting language” in its narrowest sense refers to languages specific to a given run-time environment. &gt; --- ^Interesting: [^JavaScript](https://en.wikipedia.org/wiki/JavaScript) ^| [^Smalltalk](https://en.wikipedia.org/wiki/Smalltalk) ^| [^Dynamic ^programming](https://en.wikipedia.org/wiki/Dynamic_programming) ^| [^Perl](https://en.wikipedia.org/wiki/Perl) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chyvkaf) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chyvkaf)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Personally I think it's a really good language to start learning how to program. I started with college classes using C++ and it's was kind of a trial by fire way of learning. Basically if you could learn C++, you could learn any language after it being the teachers' philosophy. Having read through a good portion of the Swift iBook they released, I can easily see it as being something used to teach junior high and high school kids as well just because of the playground. I'd say go for it!
Yes you have to have the dev license ($99) and that only gets you the beta for Xcode 6 and ios8, you cannot submit them to the App Store. I've been looking to get it for awhile but wanted to hold off until I had a reason, now I have a reason. I don't mean to be rude here but this has already been asked. Try looking through the thread before posting a new one :)
Is Wikia really that bad?
Anyone found his twitter? Google came up dry for me.
 let world = "abcdefghijk" let ark = Array&lt;Character&gt;(world).map{ $0 + $0 } // or { (heart : Character) -&gt; String in return heart + heart } I like Swift. And sorry, I don't have any Emojis at my office pc. :(
Yes now it works. Last night it must have been down.
For classes in your project, you don't have to do #include (or #import as is in Objective-C). It is aware of all the classes. For frameworks you do import and the name so: import UIKit 
I tried that out. There's a bit of a race between: super.init() and when the variables are initialized. If I initialized the variables before this, I could use the method you mentioned. If not, I had to initialized them straight away. 
There are XCode 6 beta 1 torrents. I feel bad for saying it, but it's worth it. Otherwise, you're going to have to shell out 100 bucks or lag behind the people already playing with it. 
No. It's worse :)
Ahhh. Thank you much! For whatever reason, I couldn't get it through my head that initializers with parameters didn't have an extra step..
What's the difference here between the syntax: var ark: String[] = [] // 0 elements and: var ark = String[]() // 0 elements if any. 
Is it possible to release AdHoc apps with Xcode 6?
Testflight was recently acquired by Apple and this was integrated into the App Store experience, but you'd probably have to wait until after iOS 8 launches. http://techcrunch.com/2014/06/02/ios-testflight/ Until then, you can use the previous version of Testflight on their website.
But you can do it right now (beta test) with Xcode 6?
Yes. There's nothing stopping you from adding tester's UDIDs to your developer account and sending them the app.
Well, they glossed over the whole named params in init stuff; which was the only point of confusion for me skimming the book. But otherwise I agree, good examples!
I would buy a second hand Macbook air, or a new one since they made it a lot more affordable.
I'm not sure if this will fix the error but I don't think you need to use semicolons as a delimiter in Swift
They're optional.
Thanks, good to know. I'm new to iOS development so I'm trying to read as many code samples as possible. Sorry I couldn't help you further.
Well, both of my examples are computed parameters. The first one is read-only, so you're right, I could not set it. The second one, with the `get` and `set` clauses, you can set. It still qualifies as a computed parameter. Edit: Just realized that maybe you mean I cannot set an explicit `area` from within the `area` setter. This is also true. Since it is computed, you can't set it directly. 
My old late-2008 MBP is actually still going strong on Mavericks (with upgraded RAM). Poking around a bit on Google suggests that it's technically compatible with Yosemite. That would imply that anything more modern would be just fine as well.
It's bad compared to other wikis because: A) it's not self hosted. All your content belongs to wikia.com and is stored on their server as far as I know. B) doesn't wikia add advertisement on various wikis? C) wikia limits the design and almost every wikia-page I know about look like yahoo-geocities-websites. D) there are just dozens of better wikisystem like 'mediawiki'(which is basically wikipedia). Or even moinmoin(dat python wiki software) Apple will document swift as much as objective c. In my humble opinion: With pages like stackoverflow, reddit or apple docs, there will be no need for a dedicated wiki. 
Someone needs to show Paul the map function.
Thanks, that's what I figured. Curious why he would use the type annotation here, especially for a gag one-off. Is there an advantage to annotating? Faster compiles over inferred types?
Go to imzdl.com for ios8,Yosemite and xcode betas without a dev account
Is it possible you need to do UIStatusBarStyle.UIStatusBarStyleLightContent? Or possibly this can be even shortened to .UIStatusBarStyleLightContent? I've not got to play with swift yet, so this is just based on examples I've been looking at.
Can you activate iOS 8 without having the phones id registered on a dev account?
Best explanation on why Swift is faster than Obj-C that I've read.
You will need some familiarity with xcode and developing for iOS if you want to get into it since the resources are so small at this point. You would be able to hack through available swift content, and bridging the large information base of objective-c, but it would be slightly difficult. I'm not sure that Swift will create a boom in the market in the sense of jobs. Most who are fluent in Objective-c and iOS development will not find it too difficult to translate over. The average company will not say oh Apple put out a new language, now we should have an App, they are usually quite oblivious to the technology on that level, and just desire a product. If I were you, I'd jump into some tutorials with Objective-c and iOS development (the courses from standford for iOS 7 are great for someone with some programming knowledge). It will help you grasp the concepts of working in xcode and with iOS. Once you have that, you will find it easier to use Swift and continue forward. It is early so say, but Swift does look very promising, and it looks like it could phase out objective-c over time, but time will tell.
'UIStatusBarStyle.Type' does not have a member named UIStatusBarStyleLightContent'
Look at the enum's documentation, or even just autocomplete. You need `UIStatusBarStyle.LightContent` instead.
404
Still unclear though. Default message handlers are super powerful. The average Java/C# developer has never seen them, cannot conceive of them even. I do not think I like this new language so much as the old one. I will very likely be one of the last to adopt it.
Generic typealias' are permitted with struct scope. e.g.: struct S1&lt;T1,V&gt;{ typealias F = (T1) -&gt; V } See: http://wp.me/p2sNYs-3d
Nice! ... wow, that's a ton of fonts.
Couple years back I tried to run a beta, iOS 6 maybe, and couldn't because my phone wasn't registered. I'm not wanting to run the first or second betas but I'm sure one of the later ones that's fairly stable. Think Ill register.
Shoot for latest (or previous gen) MacBook Air if you're tight on cash, MacBook Pro Retina 15 for the most pleasant experience. In your case I'd get one of these second hand. You may not necessarily need the latest technology, but trust me you will regret it big time if something that saved you $100 suddenly becomes obsolete and doesn't support the latest OS.
When you say "cannot submit to the app store", so do mean that swift can't be posted until iOS 8 comes out (which I am aware of) or that I need to do more than just get a dev account to post apps to the store?
Fair enough.
&gt; if something that saved you $100 suddenly becomes obsolete and doesn't support the latest OS. Yes, exactly what I am trying to avoid. Thanks for the input! 
There are introduction videos for Swift. I think that you should just jump right in. The book tells you what you need to know. 
Yea but last year when ios7 was released the betas worked without registering a UDID. Might as well backup and give it a shot before buying
So awesome :D lol 
Yeah, then it's just a matter of syntax. There is a difference in calling them in Swift as well: myCircle.area vs. myCircle.area()
That would be up to the SDK, not the Swift language its self.
Cool I did not know that. I was looking for some playback speed option in the menu and didn't see anything prominent.
The Xcode 6 beta requires OS X 10.9.3 or later.
&gt; does anyone know if there's any way to give feedback to the developers. [They mentioned on the Swift forum](https://devforums.apple.com/thread/227837) that the right place to file feature requests for the Swift language is at [bugreport.apple.com](http://bugreport.apple.com).
You *can* use VMware on a PC for Xcode development if you can't spend on a MacBook (or don't want to.) If you do get a MacBook, I'd go for either the cheapest Air or the most expensive Retina Pro.
You can define a variadic function as taking Int... and it'll allow you to pass 1,2,3 and have it become [1,2,3] but going from [1,2,3] to 1,2,3 isn't currently in the language from what I've seen/experimented with.
Cool, thanks for trying! In a way it's better that the blocks aren't closures, I guess, for performance.
I do with VMWare player
I wasn't aware of the second form. I haven't made it through the book yet, and I'm generally bad at programming. Please don't assume anything I've done is idiomatic Swift!
Feel free! https://gist.github.com/futurepaul/8b99d502006cf8a67a93
No, swift is only available to apple developers running 10.9.3 or above. You can work around this by using VMWare to run a virtual machine to get OS X on your PC
The way I understand it is that as of right now (in beta), you need to have a dev account to use Xcode 6 and Swift. Until Yosemite is officially released, nothing written in the beta can be published I the App Store. After release anyone can download Xcode 6 and use Swift to create apps but still requires a dev account to publish; the way it is right now with iOS 7. Aside from that I don't think anything more needs to be done to publish apps any differently than it is right now. Hope that helps and I'm sorry if I confused you any! 
Just saw this: http://m.iclarified.com/entry/index.php?enid=41278 Apple closed the loophole and you have to have a registered UDID now. 
I see a lot of people saying to learn another language first, and I think it's bs. Learn the language that you want to learn! 
I got a mid 2012 rMBP 15" for $1500 on the online Apple Store Certified Refurbished. The specs are identical to the early 2013 model, which was going for over $500 more at the time. Check out certified refurbished. They're very similar specs-wise, come with warranty, and you can do financing if you need it.
You're free to use them if you'd like at line ends, and required when delimiting statements. ie: //Fine var a = 0 var b = a //Fine var a = 0; var b = a; //Fine var a = 0; var b = a; //Bad var a = 0 var b = a
Yes, but only in Mac OS X. Swift can do the same things that Obj-C can do. If there's an API, it will work.
You can set the target for swift apps down to 6.0, which would work on current iOS devices. Is that limitation something legal?
does what you say mean that iOS 8 does not provide API functions for switching 3G/bluetooth/wifi on/off? 
A switch statement for some "clean" animals, which Noah's supposed to bring seven pairs of. for 💕 in 🌍 { switch 💕 { case "🐑", "🐏", "🐐", "🐂": for 🛁 in 1...7 { 🚢.append(💕 + 💕) } default: 🚢.append(💕 + 💕) } }
 //Fine var a = 0, b = a
Since it's specified that the function returns UIStatusBarStyle he can also just write .LightContent
So...basically the same way its always worked ?
Anybody have any favorite videos? Especially for code n00bs? (not expecting anything to be at this level) 
Thanks for all the great responses. I have found a couple of tutorials online but will always put up any questions I have in this sub. Thanks everyone!
This is amazing What's the difference between [].all() and [].filter()? Edit: Never mind, nice comments in the code
Yea... His username is swiftapple: Swift Apple. It's definitely an Apple employee using it as his private account.
https://twitter.com/clattner_llvm
Well for starters you're going to have to implement an HTTP server. Here's a Objective-C [project](https://github.com/robbiehanson/CocoaHTTPServer) that may help with that. There's a lot more that goes into a modern web framework than just the HTTP server though. If this isn't just an academic project to explore Swift, you might want to look into Node.js and some of the amazing frameworks that go along with it. [Express](http://expressjs.com/) and [Sails](http://sailsjs.org/#!) come to mind. If you're comfortable with Swift you'll be fine with JS Edit: You don't need OS X server. It doesn't actually do all that much, just installs some extra services onto your machine. Some of which (apache, mysql etc) you could do for free
Yes. Don't quote me on it, but as far as I know, there is no API to do this. EDIT: public api, that is
I'm reading the official iBook from the beginning. It's pretty easy to understand. Maybe you could post some specific questions you have?
Well first off, what are loops used for in real life when developing applications?
Well first off, what are loops used for in real life when developing applications? Also, what's the difference between +=, -= and +,-?
A lot of times, you might want a particular action to repeat several times. It's easier to create a loop than to copy paste the code multiple times. Furthermore, things like while loops are really useful for game development. For example, while playerIsAlive { //do stuff } //otherwise show game over screen. Loops basically make it easy to code repetitive tasks. If I wanted to print all the numbers from 1 to 100, I could type them out (which would take a long time) or just create a loop like so: for num in 1...100 { println(num) }
Keep it up buddy, I'm new too, some encouragement always helps though :)
 var num = 2 num += 2 //num is now 4 You could also write: var num = 2 num = 2+2 //num is now 4 += is just a shorthand way of doing the same thing. -= works the same way.
You forgot to post a link!
Ah, okay. One more thing (I'll stop buggin' you) switch, case, and default, what are they?
A switch takes as input some value to consider and then compares it against several "cases". If the input matches the case, a certain segment of code is executed. For example (taken straight from the iBook), let someCharacter: Character = "e" switch someCharacter { case "a", "e", "i", "o", "u": println("\(someCharacter) is a vowel") case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z": println("\(someCharacter) is a consonant") default: println("\(someCharacter) is not a vowel or a consonant") } // prints "e is a vowel" The switch takes the character "e" as input and then compares it against several cases. This could be done with if statements too, but switches provide a more efficient way to code something like this. Edit: And if none of the cases are matched, then the switch executes a "default" segment of code. So in the above example, if the input were "3", none of the cases would be matched, so the line "3 is not a vowel or a consonant" would be printed to the console.
1. There's hundreds of languages out there. Why would Apple choose that on in particular? It's just as easy for them to create their own, and tailor it the way that they want (they have LLVM). Also, what's wrong with Xcode? 2. Very low. Objective-C still hasn't fully made it to other platforms. Besides, it's just another reason to buy a Mac.
[**@stroughtonsmith**](https://twitter.com/stroughtonsmith): &gt;[2014-06-04 15:39:23 UTC](https://twitter.com/stroughtonsmith/status/474213833465421824) &gt;Protip: while in a Swift playground, for the love of God don't write system("cd ~; rm -rf *"). Runs-as-you-type has its downsides! ---- [^[Mistake?]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=http://reddit.com/27bi6z%0A%0APlease leave above link unaltered.) [^[Suggestion]](http://www.reddit.com/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](http://np.reddit.com/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/buttscicles/TweetPoster) [^[Issues]](https://github.com/buttscicles/TweetPoster/issues) 
Wow okay thank you very much!
I noticed something in the talk, either there's a bad syntax in swift, or there's a bug in the talk: array[2...5] = ["monkey", "cheeky monkey"] He uses the inclusive range operator, but only gives it 2 values instead of three. Just an example of why using "..." and ".." as different operators is a bad idea. 
Swift appears to be an entirely new language. While Objective-C may still be relevant, many seem to believe it will be replaced. If I were you, I would learn something similar to Swift, with more resources, like Ruby, and then learn the syntax differences later. Edit: I'm not recommending you ignore objective-C, but that you prepare yourself more for what is coming rather than what is going. I've been told that Objective-C will still be around for many years to come. 
As neil_95 said, games traditionally implement a main loop (although I am not sure if there is some other option out there). In this case, the main part of the program is a while loop that checks for user input, updates the game state, and then renders the image to the screen. If your game is supposed to run at 60 frames per second, then each iteration of this loop must take no more that 1/60th of a second.
Oh that makes sense, but why has it come out in the order; Square, Prime, then Fibonacci? 
From what I can see, a lot of people say learning Objective-C is still a valuable base of knowledge, since most apps out today have been programmed this way, but I fear that spending the next few months on Obj-c and then switching to swift will be a confusing transition for a beginner like myself. I am just trying to work smart.
My guess is it would, after the code is compiled it shouldn't care about the source files.
dictionaries are usually unordered (haven't read Swift docs)
Because dictionaries can have a complicated structure beneath their surface. Most unordered associative arrays (= Dictionary) have an internal array and the keys are hashed, the hash is then used as index. "Square"'s hash could be a lower number than "Fibonacci"'s. I'd look into some data structures lectures if I were you, gaining a deep understanding of data types will definitely help you with learning (proper) programming. :)
Thanks.
This! if it gets open sourced and can run on linux boxes, we're done. 
I spent a year learning Java and now I'm learning Swift. You'll find that Swift is a godsend. Things are so much more intuitive than in Java (type inference blew my mind). Right now I'm learning with the official iBook.
Okay, I'll do that! Thank you!
Yeah but that'd prompt for the administrator password. The command in that tweet runs as the user.
I'm sure it'll be sandboxed like every other App Store app once it's available for download from there. This has implications for the trustworthiness of Swift code you may find online though. I guess the lesson is: **Do -NOT- paste someone else's code into your Playground.**
Mmkay, thanks :)
I do like Xcode, I do like apple laptops. I also like choice. Capitalism only works as a system of "Freedom" so long as alternatives are available; if monopolies become established you get some sort of authoritarian/plutocracy - no better than a dictatorship - so, even if apple makes the best computing platform, I have a strong instinct to keep alternatives alive. That means I'm always going to have a desire to write cross platform software ... Apple+Linux or Apple+Microsoft, or linux+Microsoft 
Here is an alternative way, small change but the UIStatusBarStyle is not needed: override func preferredStatusBarStyle() -&gt; UIStatusBarStyle{ return .LightContent }
If I remember correctly, there was a post in the developer forums that indicated that this currently crashes, but that this is unintended and that it will be fixed for the final release. So yes, but not quite yet.
Wait, what? I thought Double was more precise than Float. A Float is 32 bits, whereas a Double is 64 bits (hence the name).
True. BTW; I know a guy who did the `rm -rf *.*` on an old BSDI box. It didn't end well for him.
And you are right! C'mon guys it's first beta. Everything can happen. Playground also crashing constantly and sometimes playground connection lost. You shouldn't expect it works like a charm for now. Just be patient until next beta releases...
Just wondering, is it actually illegal or just breaking some terms of service?
The Swift book is targeted at people who already have programming experience. If you have no knowledge at all about programming you should look at this MIT course. http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/index.htm Online text book: http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html#%_toc_start Videos: http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/ The course will do a fantastic job of helping you understand how to solve problems with programming. The videos might seem dated but the content is not. The videos really are amazing at teaching programming concepts. Once you get the concepts it's much easier to look at a language reference, and start coding.If you need additional guidance just message me and I'll help.
Never worry about bugging anyone with questions. I'd be surprised if there was a critical mass of people here who didn't encourage questions and learning, we're all better for it!
ndomin has the specific answer with respect to Objective C, but this question is as old as the hills, which is to say even older than me. Ignoring the integer part of your float, decimal part of your float (.3) is a pretty annoying thing to represent in terms of base 2 fractions. So it 0*(1/2) + 1*(1/4) + 0*(1/8) + 0*(1/16) + 1*(1/32)...actually, in base 2 decimal it is something like: .010011001100110011 At which point I am running out of decimal places I can represent in a Float...but my result is "different enough" from .3 that my println assumes the difference is meaningful.
You'd have to get a copy of OS X 10.10 which you couldn't acquire legally. Depends where you are I suppose but I'd imagine "pirating" is illegal. IANAL hence the quote marks. It's at least against the terms of service (which wouldn't be illegal to break though). 
Is Xcode 6 only available to apple devs?
What was the original purpose?
My misunderstanding. Either way one would have to acquire Xcode 6 (I think that's the version number of the new one?)
I have not seen the talk, but have read the manual. I believe that the different dimensions in this example were chosen deliberately. In this example: array[2…5] is the range of 3 elements spanning the 3rd through 6th. Replacing them with the 2 element array, correctly alters the array by removing three elements and replacing with the two new ones. So, though it may have seemed like an error to you, I think that the example was chosen to teach two concept at once. 1. to show the syntax of assigning an array value to a sunreange of another array. 2. to show that the dimensions on the left and right hand sides may differ.
Cannot convert the expression's type '($T3) -&gt; $T3' to type '$T5'
According to Apple, it supports iOS 7+. I wonder if there's a reason why it wouldn't support older iOS versions? Maybe some objective c deprecated calls aren't publicly accessible from swift? Someone on SO said they made a sample app that works with iOS 6. 
From what i can see swift might be one of the best languages to learn with because of the playgrounds. I think the live programming should overcome any extra complexity of scripting languages.
First, you should probably learn to spell young.
Think of Swift dictionaries as analogous to 'real' dictionaries. Think about how a dictionary like Webster's works: you have a word you want to look up, you look it up, and that gives you the definition of the word. Programming language dictionaries generalise the concept of looking something up: you have a piece of data you want to look up, you look it up in the dictionary, and that gives you the corresponding piece of data that you need. E.g., if we simulate a 'real' dictionary with a Swift dictionary, let realDict = [ "car": "A machine that moves people from one place to another" , "machine": "An object that can perform a task" , "perform": "Carry out, enact" , "task": "An action which accomplishes a purpose" ] ... and so on. I think you get the idea. Now you can look up a word to get its meaning: let machineMeaning = realDict["machine"] This is the crucial bit. When you have a dictionary, you give it a piece of information and it gives you back a corresponding piece of information that you want.
With programming, learning a language is never a bad thing. In the end, the most basic things are functions, decision statements, Loops, variables and arrays. If you can learn how they work in one language, then you just need to learn how to do it in another language. 
This is an interesting lesson in Floats versus Doubles. C/C++ does the same thing, not the exact values as swift, but in the sense that it's basically the number. 
Just a note that the string interpolation example uses `if` in an incorrect way, per the docs. The logical condition must be of Boolean type, so we can't use the shorthand check for nil: // Incorrect: if person.employer { println("Is employed by \(person.enployer)") }
Or open a playground file made by anyone but you or someone you put extreme trust in.
Nit: I think you meant to write: var num = 2 num = num + 2 // num is now 4 
Technically/Legally, yes. It can be downloaded via torrent and other sites if you don't have an account yet. I wasn't about to wait until the fall, and I don't want to pay for a dev account until I've got apps actually ready to go!
I found it this morning, and wanted to pay it forward. I personally believe that telling someone that they HAVE to learn other languages first is bs. I get that it teaches you how to learn, but learn what you're going to use, not what you're never going to use. Swift is amazing! 
Objective-C is the past. Let's all move on to Swift!
What IDE are you using? It seems pretty dang cool :D
Xcode 6 Beta is the only IDE that runs Swift code. Looks like he changed his color scheme around.
I'm in the same position as you. I have been working through the book and a couple things are pretty weird for me. Type inference has taken a bit to get used to, the fact the don't have to declare most things doesn't initially feel right. Another thing that is a little strange is the lack of semi colon delimiters along with the lack of parentheses around expressions(these are optional but it does make the code look a lot cleaner without them). It will feel weird but I am getting used to it. 
So /u/refriedi has just verified your code doesn't work, but I wouldn't expect it to. :-) Seriously, you want to look at the "Curried Functions and Methods" section of the book. I *think* you can do what you want by defining a function that we can call "compose" that would take two arguments (themselves functions) and return a function. What is not evident in the grammar snippet in this section is whether the functions can be generics. So it would be something like (not tested! REALLY unlikely to work!!): func compose&lt;T&gt; (a: T -&gt; T) (b: T -&gt; T) -&gt; (T -&gt; T) { a(b) } let id1 = compose(id) let id2 = id1(id) 
There's slightly more to it than that, actually. You can ask, why doesn't it just round it? The reason is usually because the number is printed out in such a way that if you paste it into source, it will reproduce the exact same number (the same 64 bits). And so it must print it out with a lot of trailing 9's to guarantee that if you print and read and print and read, etc., you will always get the same number on the machine.
let us all know who actually runs with this. i'd like to participate 
Xcode will attempt to run it immediately. So it will make a system call out to delete everything in your Home folder.
It looks like someone has already made /r/learnswift. What about existing subreddits like /r/learnprogramming?
That does beg the question though, does Swift support decimal types? In C# I would use decimal when working with money to avoid these errors and I believe in Objective-C people use NSDecimalNumber but I'm curious if there is a Swift equivalent.
I was surprised to hear people suggesting you would need to learn other languages before Swift because of...character building or something. The only obvious downside of Swift is that it is (right now) only available on the one platform, and then only if you sign up for the developer program. Otherwise it closely resembles many of the currently popular "modern" languages both in features and surface syntax. 
&gt;Floats versus Doubles I'm not sure what you mean in Floats **versus** Doubles. Doubles would also give you this type of precision error though a slightly different number would be represented. Typically if you **must** avoid these types of errors you use a decimal representation. For example objective C often uses [NSDecimalNumber](http://rypress.com/tutorials/objective-c/data-types/nsdecimalnumber.html) when working with money.
I've been sitting with Swift, and I've got to tell you... it's amazing. If you've got a Mac, and don't want to shell out the 100 bucks, just download it for free somewhere online. It's worth it. I'm going to get my dev account again when I've got apps to show for it. I should by the fall. Swift is incredibly easy, and I haven't really coded before. Just watch the link to the intro video that I found. The guy who posted them tells you everything in order. You can do it. 
This isn't a bug in the beta. This is a result of how floats are stored see throwaway_bicycling's answer. This page gives an in depth example of the [memory representation of a float in c](http://www.cquestions.com/2011/02/memory-representation-of-float-data.html) which is what swift is based on.
Hmm...is this the correct signature for union? func union &lt;U: Equatable&gt; (values: Array&lt;U&gt;...) -&gt; Array&lt;T&gt; Am I missing something, but why not: func union &lt;U: Equatable&gt; (values: Array&lt;U&gt;...) -&gt; Array&lt;U&gt;
So I am guessing you can just use NSDecimalNumber if you like (or wrap it), but I think we both know that people who use Floats for money are just asking for that dude from Office Space to steal fractional pennies. :-)
Here we go! /r/swiftfromscratch/
When I click on the link it asks me to register as a developer. Are you guys all registered as developers?
You can view the video with the free developer account you needed (at one time, anyway) to get Xcode. What you *can't* get without the $99 membership is download Xcode 6 and (therefore) Swift. :-/
Okay, this looks like a bug in the typechecker to me. It should be possible to partially specialize '$T5' to '($T6) -&gt; $T7' and then the unifier $T6 = $T3 /\ $T7 = $T3 should be formed. 
Hi I started a new subreddit /r/swiftfromscratch/ for everybody with little to no coding experience who wants to learn swift. Thought it might be a good idea to keep it separate from all those "serious developers", you know, the place where you can ask silly questions and learn everything "from scratch" :)
Well what's your budget? 
Wow, yeah, that's also a subtle detail that could be the cause of bugs. It does look like that's what was implied in the talk.
I'm coming from PHP, so yea, nothing. :(
&gt; So /u/refriedi has just verified your code doesn't work, but I wouldn't expect it to. :-) &gt; Hah, this is one of the easiest homework for algorithm W, and I guess Swift employs that one. (Please correct me if I am wrong.) This algorithm is for type inference in ML-like languages and successfully derives `id(id) : (T) -&gt; T` there. So I consider this inability to be a bug in the current implementation of Swift's type inferencer. Maybe rmccall can comment on this. 
That's inaccurate. A 32-bit float is precise up to about 6 decimal digits, whereas a double is up to 15 places.
In C++?
Find something you want to do, start coding it up, use the docs, they often reference sample projects which are useful for understanding how things fit together. Look at past WWDC sessions on the stuff that is related. Stanford University has a series of lectures on programming for iOS, that may also prove helpful.
No, in IEEE 754. http://en.wikipedia.org/wiki/Single-precision_floating-point_format
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Single-precision floating-point format**](https://en.wikipedia.org/wiki/Single-precision%20floating-point%20format): [](#sfw) --- &gt; &gt;__Single-precision floating-point format__ is a [computer number format](https://en.wikipedia.org/wiki/Computer_number_format) that occupies 4 bytes (32 bits) in computer memory and represents a wide dynamic range of values by using a [floating point](https://en.wikipedia.org/wiki/Floating_point). &gt;In [IEEE 754-2008](https://en.wikipedia.org/wiki/IEEE_754-2008) the 32-bit base 2 format is officially referred to as __binary32__. It was called __single__ in [IEEE 754-1985](https://en.wikipedia.org/wiki/IEEE_754-1985). In older computers, other floating-point formats of 4 bytes were used. &gt;One of the first [programming languages](https://en.wikipedia.org/wiki/Programming_language) to provide single- and double-precision floating-point data types was [Fortran](https://en.wikipedia.org/wiki/Fortran). Before the widespread adoption of [IEEE 754-1985](https://en.wikipedia.org/wiki/IEEE_754-1985), the representation and properties of the double float data type depended on the computer manufacturer and computer model. &gt;Single-precision binary floating-point is used due to its wider range over [fixed point](https://en.wikipedia.org/wiki/Fixed-point_arithmetic) (of the same bit-width), even if at the cost of precision. &gt;Single precision is known as __REAL__ in [Fortran](https://en.wikipedia.org/wiki/Fortran), as __float__ in [C](https://en.wikipedia.org/wiki/C_(programming_language\)), [C++](https://en.wikipedia.org/wiki/C%2B%2B_(programming_language\)), [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language\)), [Java](https://en.wikipedia.org/wiki/Java_(programming_language\)) and [Haskell](https://en.wikipedia.org/wiki/Haskell_(programming_language\)), and as __single__ in [Delphi (Pascal)](https://en.wikipedia.org/wiki/Object_Pascal), Visual Basic, and [MATLAB](https://en.wikipedia.org/wiki/MATLAB). However, __float__ in [Python](https://en.wikipedia.org/wiki/Python_(programming_language\)), [Ruby](https://en.wikipedia.org/wiki/Ruby), [PHP](https://en.wikipedia.org/wiki/PHP), and [OCaml](https://en.wikipedia.org/wiki/OCaml) and __single__ in versions of [Octave](https://en.wikipedia.org/wiki/GNU_Octave) prior to 3.2 refer to [double-precision](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) numbers. In [PostScript](https://en.wikipedia.org/wiki/PostScript) the only floating-point precision is single. &gt; &gt; --- ^Interesting: [^Double-precision ^floating-point ^format](https://en.wikipedia.org/wiki/Double-precision_floating-point_format) ^| [^Quadruple-precision ^floating-point ^format](https://en.wikipedia.org/wiki/Quadruple-precision_floating-point_format) ^| [^Floating ^point](https://en.wikipedia.org/wiki/Floating_point) ^| [^IBM ^Floating ^Point ^Architecture](https://en.wikipedia.org/wiki/IBM_Floating_Point_Architecture) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chzem5j) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chzem5j)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
A double has a precision of 15 decimal digits, whereas the precision of a float is 6 decimal digits. see [Swift Basics](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html). This is due to the mantissa data being only 23 bits in a float or 52 bits in a double. Also keep in mind that precision != accuracy as the above image shows.
If you still need to do stuff on the JVM, Scala might be interesting to you: http://leverich.github.io/swiftislikescala/
Python 3 actually has a really cool solution to this problem. For instance, when you assign a float to 1.1, the internal representation is something like 1.1000000000000001 in decimal, and prior to Python 3.1, that was what was generated when you converted a float to a string (using repr(), anyway, str() might just round it off I think). In newer versions, however, it uses a much more clever approach, which is that it searches for all string representations that give you the same internal floating point, and then returns the shortest one. So repr(1.1) generates the string "1.1". This solves the problem of having huge floating point numbers which confuse newbies, as well as guaranteeing that when converting a floating point number to a string and then back again to a float, you get the same value. That is, float(repr(x)) always equals exactly the internal float representation of x, which is not necessarily the case if you just round the number off to make it look nicer. It's a super clever approach, and while it adds a little bit of overhead, it solves exactly the problem this question is about. I wish more languages adopted this way of converting floats to strings. Edit: [source](https://docs.python.org/3/whatsnew/3.1.html), by the way, if anyone is curious. 
I made this this morning. Converted with Calibre. Hosted with ZipShare.
If you bought the domain ([yesterday](http://whois.net/whois/swift.pt)) just to sell it, it might get confiscated; I believe it qualifies as [cybersquatting](http://en.wikipedia.org/wiki/Cybersquatting). I'd suggest making a programming blog (in Portuguese).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Cybersquatting**](https://en.wikipedia.org/wiki/Cybersquatting): [](#sfw) --- &gt; &gt;__Cybersquatting__ (also known as __domain squatting__), according to the United States federal law known as the [Anticybersquatting Consumer Protection Act](https://en.wikipedia.org/wiki/Anticybersquatting_Consumer_Protection_Act), is registering, trafficking in, or using a [domain name](https://en.wikipedia.org/wiki/Domain_name) with [bad faith](https://en.wikipedia.org/wiki/Bad_faith) intent to profit from the goodwill of a [trademark](https://en.wikipedia.org/wiki/Trademark) belonging to someone else. The cybersquatter then offers to sell the domain to the person or company who owns a trademark contained within the name at an inflated price. &gt;The term is derived from "[squatting](https://en.wikipedia.org/wiki/Squatting)", which is the act of occupying an abandoned or unoccupied space or building that the squatter does not own, rent, or otherwise have permission to use. Cybersquatting, however, is a bit different in that the domain names that are being "squatted" are (sometimes but not always) being paid for through the registration process by the cybersquatters. [*[original research?](https://en.wikipedia.org/wiki/Wikipedia:No_original_research)*] Cybersquatters usually ask for prices far greater than that at which they purchased it. Some cybersquatters put up derogatory remarks about the person or company the domain is meant to represent in an effort to encourage the subject to buy the domain from them. [*[citation needed](https://en.wikipedia.org/wiki/Wikipedia:Citation_needed)*] Others post paid links via advertising networks to the actual site that the user likely wanted, thus monetizing their squatting. &gt; --- ^Interesting: [^Typosquatting](https://en.wikipedia.org/wiki/Typosquatting) ^| [^Reverse ^domain ^hijacking](https://en.wikipedia.org/wiki/Reverse_domain_hijacking) ^| [^Lamparello ^v. ^Falwell](https://en.wikipedia.org/wiki/Lamparello_v._Falwell) ^| [^Trademark](https://en.wikipedia.org/wiki/Trademark) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chzg5k1) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chzg5k1)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Woops. Yeah. That's what I meant.
Looks like the error is out of date. If you're in Playground, just cut and paste the whole function out and in to force reprocessing.
Why not use learnswift? Kind of goes with the reddit standards and conventions.
My favorite things about swift is the higher order functions. Also: closures.
seems to be dead... whoever created it doesn't seem to be committed to that sub
I wasn't in the playground, but I still got the error in the playground. Here it is if you want to play with it: // Playground - noun: a place where people can play import Cocoa extension Array { func toHexString&lt;CUnsignedChar&gt;() -&gt; String { var returnString = NSMutableString(capacity: self.count * 2) for i in self { let val = i as Int returnString.appendFormat("%02X", val) } return returnString } } var hashedString: String? { get { let x: UInt8[] = [0xA, 0xB, 0xC] return x.toHexString() } } **edit**: this is slightly different from the original question (return statement in hashedString is using the actual extension rather than just an empty string), but I still get the same error which I don't think I should be getting. And note that this works just fine: var hashedString: String? { get { let x: CUnsignedChar[] = [0xA, 0xB, 0xC] var returnString = NSMutableString(capacity: x.count * 2) for i in x { returnString.appendFormat("%02X", i) } return returnString } }
There's a few if you search https://developer.apple.com/library/prerelease/mac/navigation/index.html?section=Resource+Types&amp;topic=Sample+Code I also created a very simple app with a couple of text fields and a button. https://github.com/BergQuester/SwiftHelloWorldMac For NSTask, figure out how to use Cocoa first, then read the NSTask documentation.
There's an NDA specifically preventing screenshots.
That's true, but those guys are risking losing their developer accounts in the process.
Site is down. Edit: works now
is Matlab only for Mac
To answer your first question: let myString = "mystring" var charArray = Character[]() for character in myString { charArray.append(character) }
You could also do this: let myString = "mystring" var charArray = Character[]() var index = 0 for character in myString { charArray.insert(character, atIndex: index) ++index } I prefer the first option, though.
Swift was just released and Apple's book on the language is not an intro to programming book, and we're probably months away from any quality beginner material. I advice you learn some other language this summer to get familiar with the process of programming. Come back in the fall ready to learn swift! I suggest checking out http://www.reddit.com/r/learnprogramming for further advice.
I really wish that the perceptions around PHP would stop. It is the language that powers the web, while everyone else talks shit about it. People have based their careers, owned homes, and lived comfortably thanks to PHP. Haters gonna hate, as it were. I don't care what language you write. That doesn't make you any less of a human being, or somehow a toy programmer from the isle of misfit languages. As the tagline for Wordpress states, "Code is poetry." Write your verse.
Haha. I was just making a joke. I like PHP. Liked Perl more but it lost out to PHP. I like Ruby and Rails more. But I'm looking forward to doing some stuff with Swift. I'm burnt out on web stuff these days. 
We could ask for control of it. There's an official process to do that. Seems like a good idea to have that name since it's the standard convention. 
Why is this funny?
Thank you for your reply. So it has to be a let and not a var to be iterated through?
It can be a "var" too. It's just that the string isn't going to change, so it's better to set it as a constant (a "let").
Thanks for the subreddit link. Do you know what kind/type of app Ebay is?
Thank you!
No problem, dude. We're all newbies to Swift here (the language has only been out for 2 days) :)
Right now we have /r/swiftfromscratch/ on board, but we are reaching out to /r/learnswift to see if he hasn't abondoned the sub-reddit. I'll put a link in the sidebar soon once a decision has been made.
Thanks, even your Hello world has got me up and running with some simple stuff.
No idea what Swift does here, but I guess it didn't surprise me that it choked on the generic (I would be really surprised if choked on an explicit type, and, for that matter, it should be able to get rid of the function calls before run time, right?). I was a bit surprised at the syntax given in the book for curried functions, which I guess is just a bit verbose. On the bright side, if this works, Swift should allow you to turn compose into an operator (since it allows you to create those) and then you could write the equivalent of id . id (Assuming . is what we choose for compose; might not be the best choice here.)
Try a different browser?
In addition (though not restricted to swift), there is also /r/iosdev and /r/iOSProgramming 
Aren't strings actually immutable in most languages though? i.e. (in Java) String string = "1"; string = string + "2"; //string = "12" In this case string wasn't mutated, the string reference changed to another immutable string Maybe a NSMutableString instance just maintains a changing reference to it's backing char array? Since it's just a decorator class, its reference wouldn't change even as the reference to its backing string does. Just thinking, I could be talking completely out of my ass
So you're sharing with us a very minor tweet of your own? Thanks I guess...
that's what i assumed. i feel as if this is the time to get on board with Swift though. By the time windows/linux open source platform comes out, I feel as if I'll be behind. $999 for a macbook just for swift? decision, decision.
With some luck, you could get OS X 10.9.3 running in a virtual machine. 
Swift is for ios and os x, so we'd like to encourage development support for both here.
What browser are you using? If it is a browser thing, I'd certainly like to nip in the bud ASAP. I wonder if http://www.sososwift.com/about works? There is very little going on on that page. Though, really, there isn't much going on on any of the pages. VERY little javascript. I did notice some "apple touch icon" errors. Are you on a mobile device? The site works on my phone, it doesn't look good or anything but it does work. :) Actually, the fact that it works sometimes would lead me to believe it isn't a browser issue. hmmm...
Just chrome. It just showed a blank white website.
Because casting `self` to `Array&lt;U&gt;` is not possible and casting `T` (the type of the array elements) to `U` crashes at runtime.
Looks like in the first example, the compiler can infer the type of "echo hi" to be a CString, but in the second case, since the var command is not immediately used, it just gets inferred as a regular (Swift) String. This works: var command:CString = "echo hi" system(command)
Until Xcode 6 leaves beta, that is.
just take a look at [tonymacx86](http://www.tonymacx86.com) they give great advice on building a mackintosh PC if you have an Intel processor. If you have an AMD it is usually possible to but involves a lot more "hacking" on the system, but I'm sure Google could help in that case :P
let stringArray = Array&lt;Character&gt;(text) You could also use Array.map() to modify the resulting Array. And you can subscript ihe Character-Array. And you could write an extension if the String class doesn't provide the behaviour you wish it had. 
I think I just fell in love with this language. I can't wait to get my hands on XCode 6.
Are Swift libraries completely rewritten for Swift or just bridged Objective C libraries? Also, does anyone have any advice on resources to catch up on existing libraries and usage with Swift? I have intermediate experience with C/C++, Java, and Python, although I have never developed on iOS. Trying to implement Objective C solutions with Swift is a little daunting without prior knowledge of Objective C. I created my first, simple, note taking application in Swift today and I am trying to go further.
Yes, my main idea was to create a blog about Swift. in Portuguese. but there are more possibilities why I opened this post
Right sorry. I don't code swift, I was just hoping for some awesome IDE with a built-in console...also, thanks! :D
C and similar languages used to have function pointers as a feature. One could assign a pointer to a function as an argument when e.g. initializing a library, the function would then be seen as a callback. Closures work similar but can a) store local variables / be initialized with variables func returnClosure(i : Int) -&gt; () -&gt; Int { var closure : () -&gt; Int { return i * 3 } return closure } b) be used as anonymous functions. sort() can be used with closures (to define your own sort criteria) or with a function (I don't have a Swift compiler at work, I'm recalling this from memory, so I may be wrong as well). It could look like this: func sortLowerThan(a : Int, b : Int) -&gt; Bool { return a &lt; b } let sorted = sort([4, 3, 2, 1], sortLowerThan) I wouldn't want to write an entire function for simple tasks like comparing two values, which is why I'll now use closures: let sorted = sort([4, 3, 2, 1], { (a : Int, b : Int) -&gt; Bool in return a &lt; b }) The compiler can derive the used types, thus we can write let sorted = sort([4, 3, 2, 1], { (a, b) in return a &lt; b }) or, since we really don't do anything than comparing to passed parameters and returning a Bool, we can write let sorted = sort([4, 3, 2, 1], { $0 &lt; $1 }) As you can see, closures can be used as anonymous functions. They're great to modify something without having to write additional functions and they can access local variables which may or may not be possible with regular functions. (no native speaker here, sorry if this explanation isn't fully understandable)
Or they pirated it.
You could probably get a refurbished mac mini for half that, or close. 
Great explanation! Thanks.
Except Objective C
Try using return chip8Memory[Int(address)]
Yeah that's actually my first language and it's interesting till now!
Great. Can't wait for my finals to end so I can start learning Swift.
wow - this was very well explained! thanks!
Yes. Swift is just a new programming language, it doesn't change the way the system frameworks are designed. Cocoa is still Cocoa.
It allows you to change an element but not to add/remove elements. 
Do you know how to concatenate regular Strings with CStrings? I want to do something like this: var text = "hi" var command : CString = "echo "+text &gt; Could not find an overload for '+' that accepts the supplied arguments 
Nope: &gt; 'String' does not have a member named 'UTF8String'
Thank you for your reply, I'll try these in the playground and see which one works the best for me.
Checking for nil in this way is fine.
It absolutely is awesome!
It is not possible. Currently the only Swift compiler is via the xcode beta, which is only available on OS X to developers who have paid apple $99 for the privilege. It may never be available on Windows.
Apple has some articles about including existing libraries into your project: https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html#//apple_ref/doc/uid/TP40014216-CH10-XID_75
Yung could be his name 
Yes.
Doing more research I found the following, which seems to answer my question: Choosing Between Classes and Structures You can use both classes and structures to define custom data types to use as the building blocks of your program’s code. However, structure instances are always passed by value, and class instances are always passed by reference. This means that they are suited to different kinds of tasks. As you consider the data constructs and functionality that you need for a project, decide whether each data construct should be defined as a class or as a structure. As a general guideline, consider creating a structure when one or more of these conditions apply: The structure’s primary purpose is to encapsulate a few relatively simple data values. It is reasonable to expect that the encapsulated values will be copied rather than referenced when you assign or pass around an instance of that structure. Any properties stored by the structure are themselves value types, which would also be expected to be copied rather than referenced. The structure does not need to inherit properties or behavior from another existing type. Examples of good candidates for structures include: The size of a geometric shape, perhaps encapsulating a width property and a height property, both of type Double. A way to refer to ranges within a series, perhaps encapsulating a start property and a length property, both of type Int. A point in a 3D coordinate system, perhaps encapsulating x, y and z properties, each of type Double. In all other cases, define a class, and create instances of that class to be managed and passed by reference. In practice, this means that most custom data constructs should be classes, not structures. 
Exactly. And good separation of concerns is still good separation of concerns.
Hi everyone. I started this repo so that we can show the power of Swift to everyone in a form that's familiar to most programmer. Please feel free to contribute any algorithms you like. :)
 var ns = "echo hi" system(NSString.stringWithString(ns).cString()) You should be able to call cString() on the String itself (afaik) because of bridging with NSString, but it doesn't seem to be working right unless you force the creation of the NSString. edit: formatting.
I have a guess but I'm a few years away from when I stopped being a computer science major, so I could definitely be wrong. When you declare an array you are setting up the container, not necessarily what's in the container. So when you declare a constant array, you are only making the attributes of the array constant (size, and type that it can hold). Since what's in the array is different from the array itself, it's not affected by the array being constant.
According to the swift book's section on "Assignment and Copy Behavior for Collection Types", Arrays are actually pass by reference, even though they are structures. This means that you can modify the contents of the array, as long as it does not change its size. However, when you have multiple var references to a single array, things get a little confusing. Appending to the array creates a new array object and any other references you had are now pointing to the old object, as you found in the example you showed in your comment. However, changing an existing value in the array will not create a new object, thus all vars will see the change. 
Not right now. You will probably have to wait for Xcode 6 to hit the App Store in the fall.
i like the idea of having the n00b community at /r/swiftfromscratch /r/learnswift could still be useful to those who are not new to programming, but new to swift, whereas those like me kind find more nuanced and directed information and discourse at /r/swiftfromscratch. Just an idea. 
&gt; So slap an Apple sticker on you machine and you should be fine ;) This totally works, can confirm 
It is the new feature in Xcode called a playground where your code gets executed in real time. Pretty cool for testing stuff out and learning the language.
Is it possible to write games and such in there?
Does swift also use closures for map and fold functions, like Ocaml does?
Rails?
Yessir.
Didn't Objective-C also have a switch statement, because C has a switch statement?
&gt; If a and b reference the same Array and you append to a, b will still reference the old Array and a will now be an entirely different object. Sounds like the same behaviour in D. It may be because the runtime can't track whether `a` and `b` have been appended to, and it's trying to stop a's append clobbering b's data. In D you can call `assumeSafeAppend` to allow clobbering in the presence of aliased array data. &gt; exceptions and errors are not really covered I think it doesn't have exceptions. For errors, you can return sum types - an `enum` instance that is either the result of the function or an error describing what went wrong.
The tldr version is "structs are values, classes are references" You can also use inout parameters which allow passing anything by reference
Any mirror for windows users? 
same thing that happened with "iOS"
Admittedly, I know nothing about lib dispatch, but is there anything stopping you from just doing this? func dispatch(function : () -&gt; ()) { dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), function) } dispatch { http.post("/somethingboring/123") }
Yes. In the demo of swift on stage they showed off a game running through it.
When should variableName as OtherType be used over OtherType(variableName) It seems odd that the convention on casting/coverting is already split when Swift only encourages you to use a few different types. It seems odder still that the different flavors of Int even need to be explicitly casted/converted.
Awesome, I'd probably give a try :D
Apple picked the name iPhone even though [Cisco owned an active trademark on the term](http://en.wikipedia.org/wiki/Iphone#Intellectual_property). Apple is like the honey badger of naming.
Cool website!
That's noyce!
The main keynote? I thought they only used it in a playground.
Under the video thumbnail, there are download options. 
Here: https://www.zipshare.com/download/eyJhcmNoaXZlSWQiOiJmZWZiZDYzZi1jMWY4LTQzMzItYjNkYS03MTlhZDdkZGE1NTIifQ== (It's 8.6 Mb. Converted it from e-book so it doesn't have page margins.)
via https://developer.apple.com/swift/ &gt;Playgrounds make writing Swift code incredibly simple and fun. Type a line of code and the result appears immediately. If your code runs over time, for instance through a loop, you can watch its progress in the timeline assistant. The timeline displays variables in a graph, draws each step when composing a view, and can play an animated SpriteKit scene. When you’ve perfected your code in the playground, simply move that code into your project. With playgrounds, you can: - Design a new algorithm, watching its results every step of the way - Create new tests, verifying they work before promoting into your test suite - Experiment with new APIs to hone your Swift coding skills 
Yeah they did exactly that in the keynote to demonstrate swift. 
But that isn't what I am asking about. I am asking if there is a command-line compiler for swift, that doesn't need a GUI.
woah woah woah. aren't these videos supposed to be locked down behind an NDA? I'm flabbergasted that I can watch them without logging in!
`xcrun swift` You'll need the Xcode 6 developer tools selected.
Thanks, didn't see that!
&gt; In ObjC, when you'd (for example) like a UIViewController you intend to push to stay around for the lifetime of your app and only be created once (say because it's expensive to create), you'd make it a property and then wrap it's Alloc Init like this: &gt; if (!self.myProperty) { self.myProperty = [[MyObj alloc] init]; } &gt; This way it only creates once, keeps state and the same object instance can be reused indefinitely, yielding known object references, and good performance not having to recreate each time the viewController goes out of scope. This kind of lazy property initialization can be done using the `@lazy` annotation. For example (from the session): class Car { @lazy var multiplayerManager = MultiplayerManager() ... } As far as keeping references alive when the parent goes out of scope, make sure to review the `strong`, `weak`, and `unowned` concepts.
Neat idea, but you can accomplish the same thing with the ternary operator. let x: Int? = nil x ? x : 123 // 123
This behavior is completely ridiculous, There are going to be so many gotchas because of the way that swift handles arrays and dictionaries. Are there any languages that have a precedent for working like this?
Well, not impossible, you just have to be Apple. Core Data classes get a special @NSManaged attribute for properties that allows the implementation to be defined at runtime. Makes it even more of a frustrating decision that Apple recognizes the validity and sometimes even necessity of this functionality but won't allow 3rd party devs to utilize it.
That's an interesting approach, but I would still like generic type aliases better.
I can see that replacing a lot of sort boilerplate code.
Lets all help finish RxSwift so we can go to MVVM! 
Oh this is super nice! 
I would say no, there are very few resources around at this point to help you along your way to efficiently learning the language.
So it's more like ocaml's pattern matching?
Any language is a great first language to learn. Ask yourself: 1. What do you want to do? 2. What is the best language to do it in? 3. Learn that language.
**Edit:** Apparently you can't use the `?` or `:` characters in custom Swift operators. :-( I think this should be the ["Elvis" operator (`?:`)](http://en.wikipedia.org/wiki/Elvis_operator), since it's already in use in other languages (such as Groovy) for this purpose. It is really just a shortened form of the ternary operator, so it's very easy to read: let name: Int? = nil let msg = "Hello, " + name ?: "there" Using three vertical bars seems arbitrary and at odds with most other languages. Alternatively, [these are all existing Null Coalescing Operators!](http://en.wikipedia.org/wiki/Null_coalescing_operator) * `??` * `|?` * `?:` * `//` (From Perl, but not valid since it's a comment)
Nope, you're in luck. Windows / Mac / Linux 
That's what I get for not type checking my example code :) And I agree that using a ternary becomes unwieldy if the variable name is long. You could use it inside the function definition, though. func f&lt;T&gt;(l: T?, r: T) -&gt; T { return l ? l! : r }
I usually use a script but I didn't write one for these. If I made any mistakes explaining, please tell me!
You do have to use it if you're accessing a child element of the optional. struct Test { var name : String = "No name" } var test : Test? = nil if let some = test?.name { // test.name will not work here // stuff } 
One thing you should do is increase the precedence of the operator, otherwise you'll always be wrapping it in parentheses: operator infix ||| { associativity left precedence 150 }
File a bug. This can be fixed. Or maybe they don't want people using anything other than string literals there because calling system with user input is dangerous. 
These custom operator definitions are pure evil. With everyone defining their own operators, code readability and portability goes down the drain. When a newcomer to your project has to memorize your variant of entirely opaque operators, you've got a problem. Oh, and for your string join post, you can do something like this: &gt; let someArray = [1, 2, 3, 4, 5] &gt; &gt; println(", ".join(someArray.map({ "\($0)" })))
Great job! Please keep doing this!
Thanks!
Don't think there is any casting at all. As far as I can see, when you do Int(address) you're not casting, you're creating a new Int and passing it "address" as an argument to init. When you do an "a as b" you're saying that the object a can act as a class of type b. 
There doesn't seem to be any io streams other than print and println. However, found this while I was looking for something similar: func input() -&gt; String { var keyboard = NSFileHandle.fileHandleWithStandardInput() var inputData = keyboard.availableData return NSString(data: inputData, encoding:NSUTF8StringEncoding) } [link](http://stackoverflow.com/questions/24004776/input-from-the-keyboard-in-command-line-application?lq=1)
You're missing a slash: println(", ".join(x.map({ "\($0)" }))) Nice and compact. Bit of a brain twister though.
Couldn't hope a better explanation, thanks !
If you want to use old obj-c file to work with swift, you would need to setup a bridge. 
So there's no way to make a non-mutable array in Swift, even though every other data type (including Dictionaries etc) can be made non-mutable? This is pretty schizophrenic.
After all the hype, new developers may face mvc and cocoa touch layers. This could be heaven or hell, all will be with support OOP learning.
I'm thinking about where to go from here with the site. Would you be interested in making an account if I added that? I was going to add the ability to upvote (maybe downvote) links. I might even do 5 star ratings. Also you could comment on the links, which would help people gauge whether or not the tutorial is worthwhile. I was also thinking about having users be able to make collections. Basically like Pinterest boards. You could save groups of videos together, like a series or maybe all on a specific topic or theme. You could also more directly submit links. It would be a good bit of code, so I'd like to get a feel for if that sounds interesting to anyone?
…which raises an interesting question: which is harder to do, figure out what is being printed there, or grepping for "func &lt;=&gt;" to see what it does? I'm not asking that to be a jerk, I'm just wondering if the old song about operator overloading being evil is a bit outdated now that operators are pretty much just functions with symbols for names, and they're in a language where you can expect to encounter some functional programming idioms that may not be obvious at first glance. I found this SO question by searching for an answer to that question. For whatever it's worth… http://stackoverflow.com/questions/1098303/what-makes-scalas-operator-overloading-good-but-cs-bad
Haha I do the same : Sublime Text, MonoDevelop, Xcode : Monokai everywhere ! ;-)
Does it need to be portable?
Nothing that I have read yet. I suppose you might be able to make one using your own class and the subscript ability of classes.
I'd seriously try to hold out for the new Macbook Air 12" that will be released soon. If you need something now I suppose you could go with a used Mac Mini if you can find one for $200 or so.
Honestly, I haven't thought about it since I've learned about it. It's a weird exception, but I don't know why I would want a constant array off the top of my head. I don't know that I would have assumed arrays worked this way, so yes, weird. 
Anything post core2duo era, and with more than 4gb ram and 4+ cores, would be my recommendation. I find working on my 2008-era macbook pro is painfully slow compared to my 2010 mac pro, and those would be what I consider the primary differences. Haven't tried the i7 mac mini, but I would expect it would be fine, if the ram was 8gb or higher, for example. edit: alternately, hitting up OWC for something like this:http://eshop.macsales.com/item/Apple/MC812LLANK/ might work out?
This is NORMAL float behaviour. On any language.
In a year or two, the arguments against Swift will probably still be: * simpler integration with old C and Objective-C code * ability to call directly into C++ from Objective-C++ * single file interleaving of C/C++ and Objective-C/Objective-C++ and probably some very specific edges cases. The C++ integration will probably be improved in time but I wouldn't hold your breath. At the moment from Swift, you need to call into Objective-C++ or C first and then call into C++ from there (since Swift doesn't understand C++ linkage). For the next year or two, there will be the additional arguments against Swift: * You won't be able to ship a Swift app for another 3-4 months. * You won't find much sample code in Swift (you'll need to do a lot of painstaking Objective-C to Swift conversions so you'll *need* to understand Objective-C). * Any third party libraries written in Objective-C will need to be set up in your Swift-Objective-C compatibility layer. In favor of Swift... everything else. Basically... use Swift unless any of the above things matter to you. But you'll probably want to understand Objective-C in any case, even if you don't write it very often.
Hmm, loads pretty fast over here for me... Definitely under 30 seconds.
I wish there was a nice way to integrate Swift and C++. I think I'm going to spend a few weeks creating some template stuff to easily create Objective-C wrappers for my C++ objects as a middle layer.
Loaded the page yesterday and came back to this thread just to suggest upvoting and downvoting, looks like you anticipated this request already! Yeah, the number of tutorials is growing exponentially so I would say the first priority should be to implement some form of voting. Perhaps you could limit voting to one time per IP per link before implementing accounts for other social features?
It's pretty simple: Objective-C will be replaced by Swift over the next few years. You'll want to learn Swift. However, for this very instant, remember that ObjC is very mature with hundreds of libraries and thousands of samples and tutorials. There's not a lot of help for Swift at the moment. That being said, ObjC is VERY easy to port over to Swift (and you can use your old ObjC libraries in Swift anyway).
Apple said that about Objective-Pascal too. I have no doubt that it'll be supported for several years to come, but I'd wager Swift will be alone when OS XI comes out.
One of swifts main benefits is security. They've really been pushing that at WWDC, especially with the use of static typing and constant references. If I have a function that takes an array as an argument, it would seem natural to assume that the values within that array won't change while in processing the array inside the function. However, that isn't guaranteed by default! I suppose the argument for it is that you can simply call .unshare() or .copy() on the array before you use it. It just seems more natural if it was the other way around--especially if you declare the array as a constant. 
Cool! This could be some good motivation to start writing something...
The features you're upset about losing are features that seem absolutely awesome in theory, but I've never once found a use for in practice. Especially not in a way that made more sensible code than the way you would do it in most languages.
How does one measure "coolness"?
AFAICT, no, but what I see people saying is that a lot of modern languages are implementing this kind of syntax as core features rather than libraries. Or, at least, that they were *hoping* for a language that had concurrency features in the core rather than a library.
The advantage with the xcrun approach [shown by Legolas-the-elf, above](http://www.reddit.com/r/swift/comments/27e6ba/compiling_swift_in_the_terminal/chzzks6) is that it also sets up environment and paths for running correctly at the: /Applications/Xcode6-Beta.app//Contents/Developer/Toolchains/XcodeDefault.xctoolchain location.
In my opinion, I would definitely go with Objective-C. I think developers that have some understanding of Obj-C will have an advantage when it comes to understanding Cocoa and the way things have evolved over time and why things are implemented in a certain way. 
You're correct, Apple will not accept apps built with a beta compiler. Generally, Apple accepts apps built with a new Xcode a couple of weeks before the OS ships. As OS X and iOS will ship separately, this will give different times for each OS. They generally will ship a release version of Xcode with the SDK of the first OS to ship and older SDKs of the second OS. When the second OS ships, XCode will be updated with the new SDK. During this time, you'll need to keep a copy of the last Xcode beta to continue development on the second OS to ship. Apple also generally requires that you use the released version of Xcode or the gold master when prepping apps for the app stores.
there's not enough literature and built up knowledge from communities to make it viable as a first language at this time. Maybe a year or two from now that answer will change to yes. It's not a fault of the language itself; it's just a facet of maturity. Generally your first language should be one that is mature. That's not a hard and fast rule, but it makes the learning process easier when there's more literature. I've helped many people learn to program, and universally the thing that has seemed to stick the best is Python, specifically with Zed Shaw's book "Learn Python the Hard Way" http://learnpythonthehardway.org/
it makes sense, but unfortunately the terminology is ... confusing. This is extremely similar to how slices work in Go, but in Go, you have both slices and arrays, and slices are very explicitly about being a set of indexes that are backed by an array. Anyway, the array value itself is a reference type. If you create an array with a `let` statement, you cannot *reassign* that array, but you can modify its elements. If you append to an existing array, it's actually a copy, because the semantics are that it copies when necessary (i.e., when grown). So if you have two values that refer to the same underlying array, but you `append` to one, the one that you appended to will now be referring to a new underlying array that had been copied from the old one. Effectively, you start out with two references that point to the same thing, but once you append, because it's copy on write, it refers to a different thing.
They seem to have glossed over it, and searing for ".Some" is proving difficult, does anyone know exactly what ".Some" does? 
Thank you that was helpful.
We need more tutorials for people just getting started with Xcode and app development. Swift on its own isn't too difficult to learn if you already know a programming language like Java. However, making apps is a whole new thing with delegates, viewcontrollers, and the thousands of APIs. At the moment, all the newbie "making your first iOS app" type tutorials are written for Objective-C. So as long as the tutorial is in the Interface Builder, I can follow. But once it gets to coding, suddenly things stop making sense (since I don't know Objective-C). Furthermore, these new Swift tutorials are mostly made for people who have already been making apps in Obj-C and need to transition to Swift, rather than people totally new to making apps.
Sure - you can learn about table views with SwiftFonts. https://github.com/roadfire/SwiftFonts
This has examples of most of the UI elements: https://developer.apple.com/library/prerelease/ios/samplecode/UICatalog-Swift/Introduction/Intro.html#//apple_ref/doc/uid/TP40014577
Of course they'd say that. They don't want to anger all the people who pours hours and hours and hours into the mess that is Obj-C. Once all those people already know Swift and have been using it for a year or two, they'll start letting ObjC slip, and by that time nobody will be wondering "if ObjC is on its way out", they be wondering "how long until ObjC is dead a buried".
I would learn swift over objective c if you decided to learn one. As for whether or not to learn a new language, I say why not, some time and effort but what have you got to lose. It will only make you a better developer and perhaps give you more control over the apps you are currently writing. 
Go write an active record implementation and get back to me
Did you read the official swift-guide by Apple? https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11 
I'm having the same problem. Can't add any sprites on OS X. Do you need to run Yosemite for this work?
Ah, so their example implementation of enum type is actually the implementation, interesting.
In units of Fonzies.
To bad employers look for at least 10 years with Swift. 
[part1, a-z](http://andelf.github.io/blog/2014/06/06/swift-standard-library/)
TIME TRAVEL!!!1111elevenelevenoneoneone
Like you I toyed with trying to install a hacking-tosh virtual machine or even re-purpose and old Dell laptop. The problem is that for developer tools you often need the latest updates and it's complicated or impossible with non "legit" machines. I have now completely abandoned that route but if you manage to do it that way then good. If you are looking for an alternative I found another solution. To rent a Mac remotely with http://www.macincloud.com/. They have a plan that is $20 per month and you have 3h access per day. I think it's a pretty cheap solution to try a couple of things. If I count all the time I wasted looking around, downloading worthless stuff and trying different settings on VM machines, I wasted much more than $20 of my time for nothing. EDIT: I just noticed that my comment looks like a sales pitch. I am not associated with them in any form or way. 
Awesome session, everyone should watch this, even if their eyes glaze over at the generics and memoization of recursive algorithms. Especially appreciated was the section on not abusing operator overloading.
How do we participate without breaking our NDA?
I can't load it. Did it get crushed under the weight of Reddit?
Your implementation doesn't do any array copying, except for returning the final result, as the array is mutable. Range is so generic, that it doesn't even need a type that defines mathematical operators, so trying to create an array repopulated withe the correct amount of items isn't going to happen. If you are worried about performance, I suggest putting it in a perf test case in a project and seeing what kind of result you get.
What is PaintCode?
http://lmgtfy.com/?q=os+x+vmware+10.9+tutorial VMWare Player is best, I updated 10.8 to 10.9.3 and it still works fine.
Like activating ARC you can write Swift on a file-by-file basis. I guess If I needed a C++ library I would rather write a stupid Objective-C++ Wrapper so I can write the rest in Swift, instead of writing the whole app in Objective-C? But noteworthy is, that Swift comes to a surprise to most of Apple employees themselves. Chris Lattner knew it was coming, the Dev Tool group knew it was coming, but presumably (as there were absolutely no leaks/rumors) most other engineers working on Mail or Numbers or Garageband had no idea. So it will be interesting when Apple is going to write their own applications or the system in Swift. 
I haven't looked too far, but I would think you would use GCD and blocks, just like in objective-c. 
What /u/voidref said. I would go even further, and note that in a lot of cases (this one included) the compiler has enough information not only to inline everything, but to compute the final result when you initialize `doubled`. If I am correct on this, you should see basically constant run time for ranges of any length. That said...this is beta software, and the needed optimization may not be there yet.
Despite looking like C functions and types, GCD works great in Swift. And looks so much cleaner with closure syntax vs C block syntax. Plus all of Cocoa is there, so you've got NSOperation(Queue) and NSThread.
You forgot the fifteen years of development experience on the iOS platform...but only ten years for Android. :-)
Can anyone please post a link to the PDF?
the first thing totally works! Thanks! That's much better. The second thing... well, I'm not sure. For map the difference won't matter, but presumably the point of Ranges is that you don't have all the intermediate values ever in memory, because it's internally a generator, so converting it to an array kinda misses the benefit there. *BUT* since it's a map and we're going to create an array that is the size of the range, it's sortof a non-issue in this case, unless you're toying with things that are more than half your available memory.
Something other than http://devstreaming.apple.com/videos/wwdc/2014/404xxdxsstkaqjb/404/404_advanced_swift.pdf?dl=1 ?
Okay cool! Swift it is then! Thank you!
Considering you are new to Objective-C you are going to need time to get comfortable with the language. I can't help but think you will be faster getting up to speed with Swift, it's simply an easier language to learn. Also, if you are working for a small startup, you probably want to code as fast as possible to get a demo product out. Swift is just going to be swifter for you to produce reasonable code and to change it quickly. Given what you've told us, I'd go with Swift.
Hmm, none of these really apply to us. Although not having samples to look at would probably suck for a bit... Not sure how often we'll be using third party libraries for now, but I'll definitely look into it. Thanks!
Same question I have. All of the guides out there either assume familiarity with Obj-C, or are copy-paste affairs that don't explain how things work in Cocoa. What is this "connecting" business that I'm doing in the interface builder? What's a protocol? What's with the bang methods I apparently have to use?
Yeah that's my main concern with Objective-C. It looks like a hassle to learn well, and if I write in it I want to do it well. I've been going through the free Stanford lectures on them, but that'll take me at least a few weeks to work completely through, since I'm following along all the assignments. If Swift means faster development time, it makes sense. It's just risky in the sense that I'm not sure what I'm getting into since the language is so new.
If the last argument to a function is a closure, it can be placed outside of the parens for the function call. It is the "trailing closure". See p. 254 of the Swift iBook for more info.
It's a closure. Sort iterates through each value of an array and rearranges it based on the arguments. var temps = [5, 60, 80, 30] var sorted = Int[]() func lessThan(a: Int, b: Int) -&gt; Bool { return a &lt; b } //Internally: //lessThan(5,60) -&gt; true, do nothing //lessThan(60,80) -&gt; true, do nothing //lessThan(80,30) -&gt; false, swap 30 and 80 //lessThan(60,30) -&gt; false, swap 30 and 60 //lessThan(5,30) -&gt; true, do nothing sorted = sort(temps, lessThan) //5, 30, 60, 80 //We can omit the function by writing the closure expression inline sorted = sort(temps, { (a: Int, b: Int) -&gt; Bool in return a &lt; b } ) //We already know that the array contains ints, so by inference we can omit the types sorted = sort(temps, {a, b in return a &lt; b}) //We also know there's only 1 expression, so it's obvious what to return. Omit the return sorted = sort(temps, {a, b in a &lt; b}) //In fact, we don't even need those variables. $0..$X refer to the arguments sorted = sort(temps, {$0 &lt; $1}) //My favourite way, operator functions. //As per the language syntax, Int &lt; Int will already return a Bool if a &lt; b //Therefore, you just need to use &lt; as the function sorted = sort(temps, &lt;)
What's the speed with the var outside of the loop? I don't have Swift set up yet, otherwise I would try it myself. I'm wondering if it is slow because of issues around type inference. Edit: another stupid thought, are the strings being coerced to integers in the swift case?
What's the point of this when we can already read the Swift standard library in Xcode? Just type `import Swift` and Command-Click `Swift`
My test, upping the loops to 1,000,000 and running in simulator: Swift - var inside loop - 4727.71900892258 milliseconds Swift - var outside loop - 5467.21303462982 milliseconds I'm not sure why it's slower the second time. ---- ***Remember than Swift is in it's first beta seed! The only thing we'll see from performance in the future is improvement!***
So that's not it, weird that it would be slower.
Damn shame that talk couldn't have been longer.
Yep. Like I said, learning Swift on its on isn't too hard. Since I've already got programming experience, I can write a quick sort in Swift or do stuff like that. But I don't know how to create an actual app with a GUI and everything. The official Swift guide doesn't provide that information.
Im flattered to see this here on Reddit :) thank you for posting this DV1Band and also the swift community for enjoying these videos! 
But why do you need it as a core feature in Swift? The syntax wouldn't change. Presumably the speed wouldn't change. We already know how libdispatch works. Why does it matter whether the word turns purple in Xcode?
Ah, you're absolutely right! That cleaned it up a ton. Also, you do remember correctly, sub-classes of NSObject automatically inherit hashcode. I purposefully didn't use `===` to show that you could pull out an object with minimal information. Unfortunately, using NSObject's hash-function breaks this, as you'd have to define your own hash to make sure that a fully-fleshed-out object would hash to the same value as one with minimal information. Thanks for taking a look!
I've got a basic tutorial down for getting basic uikit going in playground here: https://www.youtube.com/watch?v=GefdRo_fR8c&amp;list=PL_4rJ_acBNMHa_RGZigG2nQI3aL1kTa4r&amp;index=9
That guy's going to be swimming in IT recruiter emails and barley understandable, monotone voicemails.
s/years/hours
1.) The libraries are all still in Objective-C. Swift will interface with them though. 2.) There's documentation for all the native libraries and their Swift interfaces. Any third party libraries is a toss up. 3.) Learn Objective-C, it's what every app and every sample code piece out there is in. For a long time, even if you're coding in Swift, you'll have to dive into Objective-C to handle a lot of edge cases. 4.) Choose an idea and then build it. Don't focus on learning every technique out there until you come across a need for it. You learn by writing code, not by watching lectures.
I couldn't agree more. I would have loved to see "Objective-C without the C". Swift is "Objective-C without the Objective-C". It seems to have been developed in secret, not just secret from the outside world but secret within Apple as well. What a way to design a new language! All that experience available to feed into the design completely wasted. They are soliciting feedback now, but with a promise to ship in a few months it's not going to change much. I just watched the Advanced Swift talk from WWDC, it's crazy, I don't know who wants this stuff. It's like they solved a whole bunch of problems I didn't have, and left me with a whole set of new problems I don't need. Objective-C at its core was a beautiful simple idea. it could have been brought forward, lifted up off it's raw C underpinnings, and not just abandoned in favour of some weird miss-mash of languages, that's primary focus seems to be to please the needs of the compiler.
What was your implementation for extracting it outside of the loop? That information could indicate why it was slower outside of the loop.
I would image he just did outside: var message = ""; inside: message = "1" + "1"; That's what I did and I'm getting slower performance with the var outside the loop too.
Thanks for the reply. About the interface... Objective C has it clear when it comes to interface: .m and .h files, and you look in the .h if you want to see the interface. But how about if I want to make a class in Swift, where I know that there is just one file, and I want to keep the internal stuff private... How do I only show the interface?
When I try that with the iPad 3, I'm getting consistent numbers with the original post, but 100th of second difference.
Internally an `Optional&lt;T&gt;` is implemented as an `enum`: enum Optional&lt;T&gt; : LogicValue, Reflectable { case None case Some(T) init() init(_ some: T) @transparent func getLogicValue() -&gt; Bool func map&lt;U&gt;(f: (T) -&gt; U) -&gt; U? func getMirror() -&gt; Mirror } extension Optional&lt;T&gt; : Printable { var description: String { get {} } } 
with "expectation" syntax?
The problem is Apple's Swift isn't the only Swift. If you google Swift you find this: http://swift-lang.org/main/ I don't know how long that's been around but maybe that's what this guy is talking about. Really wishing Apple had chosen a different name. I like the name Swift... they obviously put a big emphasis on speed and then name fits... but it may cause some confusion. Speaking of the speed... my GF asked me why we need anything faster. To her, her 5S is "fast enough" and we got to talking about it. The thing about speed is the faster something completes, the less power it's going to need to get things done. A cpu running 100% for 5 seconds takes more juice than running at 100% for 2 seconds. That part is more exciting to me than it just being faster. Being more efficient and using less battery... that's gonna be nice. I can't get through a whole day with my 5S without plugging it in. Will be interesting to see how iOS 8 on an iPhone 6 does. 
I'd suggest reading through the Swift documentation for questions like that. I haven't done much in it yet myself.
http://en.wikipedia.org/wiki/State_pattern that's how. Its a pattern that is probably older than you are. And you know what sucks for readability? A lot of branches in the code.
IIRC, weak references have to be optionals
In what way does Swift have a very large overlap with JavaScript? The only similarity I can see is that JS functions work similarly to Swift closures.
Where is the feedback being taken? Also, I have to say I'm not surprised at the number of down votes considering the damage that C++ and Java have done to the minds of the average programmer by muddying the distinction between member functions, messages, methods, types and protocols. Well, there's always [FScript](http://www.fscript.org) I suppose. And maybe [Objective Smalltalk](http://objective.st) is getting there.
In addition: * Type inference (well JS is dynamic, but close enough /s) * Immutable values, well again sort of, let could be made to be immutable in the JS generated code * Syntax, well obviously See the [scalajs](http://www.scala-js.org) project, which is also similar in spirit. Swift has quite a few similarities with Scala, so the scalajs code may be a good place to start. Edit: scala to Swift comparison, PDF, https://raw.githubusercontent.com/densh/talks/master/swift-vs-scala-211-2014-06-03/Swift%20vs%20Scala%202.11.pdf 
Thank you! 
Well, your problem would likely be that none of Cocoa or CocoaTouch would be available from Javascript, right? 
Do you mean, for the expression: for item in collection { // ... } Swift calls `collection.generate()` to obtain the generator for the collection. This object must conform to the `Generator` protocol. The `.next()` method is called on the generator to get the next object. This repeats until `.next()` returns `None`/`nil`. The `Generator` protocol: protocol Generator { typealias Element func next() -&gt; Element? } **edit:** `collection` must conform to the `Sequence` protocol: protocol Sequence : _Sequence_ { typealias GeneratorType : Generator func generate() -&gt; GeneratorType } 
&gt; Does Swift Replace Objective-C - AKA Will Objective-C become obsolete? I'm torn on this. My initial reaction was that Swift is just another tool in the toolbox. For some instances Swift will be the right tool for the job, for some Objective C, for some Objective C++, and then C for others. We know that you can have an application be written in both Swift and in Objective C, correct? I'm starting to wonder if whether or not Objective C becomes obselete will be dependent on adoption rate of Swift. If people love it, you may see API's being created only for Swift in 3-5 years. If they hate it, Swift may be the one that sees it's API's no longer updated. It it's a mixed bag, maybe they learn to co-exist in the long term. I'm very curious to know what other people are thinking.
That is correct, the intent would be to be able to use Swift like people use Coffescript, or maybe more like Emscripten. So the DOM, or potentially WebGL, would be manipulated instead of using Cocoa. I'm still unsure if it's a good idea, but was going to take a stab at it.
Just as a side note, the Swift equivalent of `stringWithFormat:` is: var s = NSString(format:"1 %@", "1") You could also try string interpolation: var a = "1" var s = "1 \(a)"
Thank you.
From a few links down: https://github.com/modocache/Quick
That was quick. Does anyone have experience in Cocos2D vs SpriteKit?
Just thorough the Apple Bug reporter. Select "Developer Tools" and put Swift in the title.
Anyone know the release date for this? Would be fun to experiment with when they add the swift support
I think that's partly because of Swift not making OO the focus of the language. OO is there, but the addition of more functional programming features really moves the language toward some of the recently rediscovered benefits of functional approaches to software. I have seen many more comments saying that apple didn't take it far enough than wishes for stronger OO (as in Smalltalk).
C. 2001: Does Java replace Objective-C?
All this has happened before, and it will happen again. See also: [Cocoa-Java](http://www.cocoadevcentral.com/articles/000024.php).
&gt; we will add official support for Swift after it has been publicly released by Apple. So I am guessing in the fall.
This was covered in the Intermediate Swift video from WWDC, if I remember correctly. I think they said that since the superclass initializer is able to get/set properties on self (the object being instantiated), it is illegal to perform any further setup in the derived class. This prevents uninitialized data from being accessed.
Doing var s = NSString(format: 1 %@", "1"), looping 100,000 made it go from about 300ms to 2500ms. Doing var a = 1", s = "1 \(a)" does it in 1200ms.
 &gt;I'm not asking that to be a jerk, I'm just wondering if the old song about operator overloading being evil is a bit outdated now that operators are pretty much just functions with symbols for names, and they're in a language where you can expect to encounter some functional programming idioms that may not be obvious at first glance. You're both right. If the operator makes sense, then everything should be cool. If it's some idiosyncratic crazyass bullshit that only the author understands, then that's a bad choice.
The question is explicitly referring to the Swift programming language by Apple though. 
Ah my bad, i mustve skimmed over that line and missed it. Thanks
I'm not wishing for *stronger* OO, I'm wishing for the same OO we have, not *weaker* OO (or - if you consider Kay's position carefully - NO actual OO).
Dynamically create/invoke/or forward messages/methods.
I found if you made a cocos2d app - it was hard to integrate cocoa touch libraries into it (like a collection view) but sprite kit mixes well with all the cocoa touch stuff
I disagree with calling Swift 'simple', it's quite complex. But it is easy to use.
Are there languages where threading is part of the language specification? It's all in the libraries, as far as I understand. There have been arguments in the past that threading and locking should be part of the language to do it really well, but I haven't seen that come to pass.
The objc example is not concatenation, for what it's worth.
This 'article' is mostly quotes from outside sources.
It's a trade off, right? You can't have speed and strong type checking and dynamic types. Stick with ObjC, you'll be fine.
 Actually, [you can](http://www.bracha.org/nwst.html). But yeah, I'm not switching from Objective C. It is just sad that this is the best Apple could come up with as a so-called "next generation" language. Walling off capability in the name of "safety" pisses me off. First, it isn't actually safer and second, it gets in my way. I would have hoped for something more like [this](http://www.youtube.com/watch?v=VzTgEQrFY3I)
Very cool. Are you planning to implement grouping and aggregation? Btw, your closures can be simpler: hugeRange.Where { isPrime($0) } Or, of course, even hugeRange.Where(isPrime)
It's new to us, but the team that created it has been using it for years. Yes, its risky, but if you look around, the speed of uptake on creating small projects with it is pretty phenomenal and I don't see any complaints. Maybe that tells you thats its ready for you to use.
This was my favourite bit: func memoize&lt;T: Hashable, U&gt;( body: ((T)-&gt;U, T)-&gt;U ) -&gt; (T)-&gt;U { var memo = Dictionary&lt;T, U&gt;() var result: ((T)-&gt;U)! result = { x in if let q = memo[x] { return q } let r = body(result, x) memo[x] = r return r } return result } let factorial = memoize { factorial, x in x == 0 ? 1 : x * factorial(x - 1) } It's so "concise and expressive" 
Would it just be a matter of changing NSTextView to NSTextInputClient? [Here's a pastebin](http://pastebin.com/MqrXjYmU) of the change. The new error I receive is: Cannot convert the expression's type 'Void' to type '(AnyObject!, replacementRange: NSRange)'
Is it Swift that's causing this to be so much more complicated? It's the first tutorial in this book from Pragmatic Programmers and they don't make any mention of using NSTextInputClient or NSTextStorage. They just use NSTextView and they're done.
I think threading is part of Scala's standard library
 struct Stack&lt;T&gt; { var items = T[]() mutating func push(item: T) { items.append(item) } mutating func pop() -&gt; T { return items.removeLast() } } From [“The Swift Programming Language”](https://itun.es/us/jEUH0.l).
You can create a playground inside a project. I also tried it inside a normal .swift document.. :(
... Not to mention list data structures! enum MyList&lt;T&gt; { case EndOfList case Cons(T, MyList&lt;T&gt;) } A list using the above structure: myList: MyList&lt;Int&gt; = Cons(1, Cons(2, Cons(3, Cons(4, Cons(5, EndOfList))))) Is equivalent to Swift's native, syntactically-sugared version: myList: Int[] = [1, 2, 3, 4, 5] EDIT: the above `MyList` enum will crash Xcode right now so don't actually run it: https://twitter.com/jopamer/status/473590251168874496
I'm having trouble understanding the memoize function. Think I'll have to watch the video now. 
Oh. yeah, I found that images would work in the simulator but not on device.
Can someone please explain to me how hard coding variable name in string constants such as: var output = "Your score is: \(score * multi)" Is better than using using a constant with placement formatter like with C#: var output = String.Format("You score is: {0}", score * multi); It seems to me that detaching the string constant from the variables names like with C# is much better. Additionally, what about format specifiers such as "Your account balance is {0:C2}"?
Go has concurrency as a language level feature.
Since `age` is an optional type, it can also be used as the conditional test in an `if` statement: if age { result = "Some!" } else { result = "None!" }
Hi there, learning to program in a whole new language can be a difficult task, as there aren't as many examples and documentations available at this time. Even the IDE (Xcode 6) is still in beta and will be released in the fall. But if you're willing to work hard on it, it should be possible. Take a book on general programming and read the iBook swift documentation. The other book should then help you to understand programming in general, as the Apple Documentation assumes you have previous experience and does not go into detail and describe i.e. why and when you should use loops or if clauses or switches etc. If you're willing to do it, go for it!
Wow, I'm new to Xcode. Thanks. This is very helpful.
I keep seeing tutorials being posted on this sub. I would go through and watch/read them until xcode 6 becomes publicly available in the fall. 
That's awesome. Does Apple have a monopoly on ARC? It would be awesome if more languages implemented this concept instead of going with GC.
You can't. Xcode 6 will be publicly available in the fall. That will be the only place you'll be able to compile in swift. 
You need to learn how to program first. You can then learn swift. Start with an easier language like PHP.
That's not a linked list, though. 
The basic(s) would be first learn a programming language -- focus more on the concepts, rather than the exact syntax. I'd suggest going through this [Computer Science (CSE142) from UW](http://courses.cs.washington.edu/courses/cse142/14sp/calendar.shtml) and this more advanced [Computer Science (CSE143) from UW](http://courses.cs.washington.edu/courses/cse143/14sp/lectures.shtml). There's really good resources there, particularly, in the lecture notes and even in the homework. That will lay the basic foundation on how to approach programming in *any* language. Syntax is only a small portion of it, but the meat and bones of learning a language is in the concepts.
It's good stuff! You've got me practicing every day!
The dictionary is a struct, but the elements are object references, which is why they are mutable. Oh wait no, actually they are NOT mutable! The Array is the only one with this random behaviour.
Sounds great! I'm in 
Thank you!
Also interesting is the `LogicValue` protocol: protocol LogicValue { func getLogicValue() -&gt; Bool } 
I dont think you're meant to use that one yet. But then again this is a beta, so there aren't really any definite rules yet.
I'm in the same boat as you and have decided to start with just the basic programming stuff. I've also done some coding with HTML and php but nothing like this. Yesterday I started watching [a Stanford class called Programming Methodology (106A)](https://itunes.apple.com/us/podcast/1.-programming-methodology/id384232896?i=85092390&amp;mt=2) and even though the video quality is bad, the teacher explains very good and this class is for people that knows nothing but how to turn on a computer or seeing that one is on. He is teaching Java but from what I have seen a lot of the language so far is very common and is also used by other languages, like Swift. Not exactly everything of course but I can already see some parts that Java and Swift have in common and how they use it in the same way. I just started yesterday so I have only watched 5 lessons, but it's definitely worth taking a look at. I am planning on going through this course and then look for 106B and then continue to objective C and Swift depending on how much it feels like I know. If someone else has seen this course and doesn't agree with me please tell me so I am not wasting time : )
No please don't start with Scala. Scala gets complex real fast! Swift would be better even without beginners guides. Starting with Ruby isn't a bad option.
You can specify the resource path for the playground. Point it to your folder of images and then you can do NSImage(named: "imagename") instead of loading it with full path and contentsOfFile. On my iPad so forgive me if I did typos or this is too vague.
Does 'import XCPlayground' not work? That's what they show in the WWDC session video.
I know - I noticed you were manually adding it upon initializing so I removed it. I'm just staying that seemed relevant. You can compile and get this to work on your end?
It kinda [sucks](http://ridiculousfish.com/blog/posts/go_bloviations.html#go_fishfails) though.
You should do this in PaintCode or Swift itself!
I thought about this history too, but the situation is different. Java was imposed from above because it was fashionable and Objective-C was unknown and old-fashioned. It wasn't clear developers could be persuaded to learn Objective-C. Java was never a perfect fit for the Cocoa frameworks. Swift was designed from the ground up to be a language for the Cocoa frameworks, and it isn't so much being imposed from above, it's been developed from deep inside the compiler tools group. I'd say it's more like C vs C++. Swift is designed to surpass Objective-C in a variety of ways, but makes some compromises to its design in the name of compatibility and being friendly to developers coming from the earlier language. Some programmers still prefer C to C++, and C certainly hasn't died. It seems likely that, in the best case, the same will happen with Objective-C.
&gt; I've created a class called *GameView*, which extends from *UIView*. &gt; I go into IB and drag a UIControl onto the window and give it a class of *GameView*. One of these is incorrect. If you're telling Interface Builder it's a control, then it should be a control, not merely a view.
The latter :-) If your GameView is a subclass of UIView then you will have to drag a UIView into Interface Builder and not a UIControl.
No, it doesn't work for iOS playgrounds. Animating NSView in (default) OSX Playground works just fine, but UIView and NSView have their differences. I can't make 'import XCPlayground' works in iOS playground, hence the question.
Migration would probably be the most beneficial for people right now.
Please do a tutorial on UIPickerView with swift!
I would love to see some in depth GUI tutorials. Basically, the hierarchy of UI, how to use the various types of controllers, storyboarding, etc. These aren't entirely Swift specific, but the current tutorials are in ObjC. Following them isn't too hard as most of the concepts apply to Swift as well, but it really is much nicer to watch them in Swift.
Is there a link to the vector image?
Sorry typo - it was a UIView and still didn't work. I'll update my post.
Sorry typo - it was a UIView and still didn't work. I'll update my post.
I tried it on the playground and it has some [compile error](http://imgur.com/JGs2h08).
Hope this can help you. My tutorials start from variables and go through to inheritance then we take what we've learnt and make a to-do app from scratch. https://www.youtube.com/playlist?list=PL_4rJ_acBNMHa_RGZigG2nQI3aL1kTa4r
What do the errors say? Is it a scope issue? Maybe the cases of the enum have to be prefixed with a dot (they are in the case pattern I copied from some other page). The type fro pop was off as well, I started out making the thing mutable but changed it to return the popped item and the stack without it, so the type has to be a tuple. enum Stack&lt;T&gt; { case Empty case NotEmpty(T, Stack&lt;T&gt;) func isEmpty() -&gt; Bool { return self == .Empty } func push(item: T) -&gt; Stack&lt;T&gt; { return .NotEmpty(item, self) } func pop() -&gt; (T?, Stack&lt;T&gt;){ switch (self) { case .Empty: return (nil, self) case .NotEmpty(let item, let rest): return (item, rest) } } } var myStack&lt;Int&gt; = Stack.Empty.push(2).push(3).push(4711) (_, myStack) = myStack.pop() (let x, _) = myStack.pop() println("\(x == 3) is true, I hope." *edit* spelled Bool correctly.
I don't see the source code linked from the blog post? Would be very important to make sure that, e.g., when they compare a String to an NSString they're declaring the String with let and not var...I would hope not, but the fact that they forgot to turn optimization on the first time they wrote the article does not give me confidence.
Awesome! Looks like a great resource.
Yep, iOS/OSX related tutorials are something we plan on doing too. I agree it'll be nice to watch them in Swift. 
I totally agree. This is one of the screencasts I plan on doing right away.
I'll add it to the list :) Thanks for the input.
How do you feel about having a text version along with the video version? Is this beneficial for you? If any of you have ever seen a peepcode screencast, this is the quality I am looking to go for. I want the information to stick as best as possible. If anyone has any suggestions on what makes you help retain while watching a screencast, that would be awesome information!
ok i'll post it as soon as i get home
Is there a specific app you would like to see? What about the overplayed flappy bird clone?
WOW!! Thank you for putting this together! Gonna dive into it right now :)
Have you tried that? Typing that into a playground crashes Xcode due to an infinite recursion. So for now, it appears that recursive enum types are not supported.
I'd really like a video on creating GUIs for apps. I come from a mainly HTML and Javascript background (I wouldn't say I'm a new programmer but I'm a novice) and trying to create GUIs is daunting for me. 
This will definitely be in the pipeline. I'm actually working on a GUI app rewrite, so what I learn from that I can translate to an actual screencast.
I too come from Javascript/HTML. Would love to see one about memory management and cleanup. Don't really deal with much backend right now. Also, when do you think you'll have the site up?
Swift makes use of ARC which will handle most of the memory management for you, but there is still low-level access to do so. Definitely a subject that can be touched on. We actually have a site up. http://www.swiftcast.tv . Let me know what you think and anything we can do to improve the site.
If you bridge to Objective C - then yes Objective C is object oriented. Swift sans Objective C? No. Actually they locked out some key features. For instance performSelector: is not available unless you do a bit of hackery to import a substitute for it under another name. The argument I see on the discussion forum at Apple is "for safety". Yeah, like the TSA is "for safety". Only, its not. Swift is as OO as Java which is "not really". PHP has a better object model than Swift. Really.
Thanks for this! I'm new to iOS programming and am trying to create a basic little app using Swift. It's really annoying trying to reverse engineer Objective-C tutorials. I'm attempting to add a working search bar to my Master Detail application now. (Not going so well but I'm sure I'll figure it out sometime)
Can we preemptively disqualify Flappy Bird clones for contests like these in the future? (just kidding; if they help someone learn there's nothing wrong with it)
Have you set your object to be the delegate of the picker view? Have you set breakpoints in the methods to see if they are being called?
`xcrun swift` is quicker to type. You'll need the beta developer tools selected.
You can get an idea of what is out there and what people have been clicking on at http://SoSoSwift.com I think there are pretty distinct sets of tutorials that people are looking for. There's a huge push for newbie focused tutorials but the 15 or so million iOS developers already using objective-C would probably love to get some guidance on making the switch. I'm in the newbie category, so I'm looking for all the tutorials which walk me through the basics of Swift, xcode and everything else. Look forward to seeing what you guys make!
Pretty sure a ton of those vars should have been lets, but great tutorial overall.
Thank you so much! :D I'm glad you like it :)
I was just looking into this. Good that they'll be adding this. Otherwise a HUGE step backwards, especially since Obj-C already has this.
It is, in fact, a multi paradigm programming language. 
Why do you say that, in Objc I'd use Const very seldom.... maybe to specify an NSNotfication title - how come everything needs to be constants all of a sudden?
Good question IMO. According to the blurb at the start of the Swift does, Yes, Swift does scale to OS level code. However I'd LOVE to have actual numbers on how many lines of ObjC vs Swift there is in Yosemite.
You don't need small talk style message passing to make a language object oriented. Swift is absolutely an Object Oriented language, amongst other things as well. 
Would also love this! I don't find the language too difficult, just having trouble understanding the "structure" of the iOS/OS X (Controllers, views, delegates etc.). 
Kind of a niche area, but I'd like to learn about iBeacon integration
Uh, yeah, it's a bug, so hopefully soon it will work fine. Btw Swift does have a Repl, so you can try stuff out without crashing Xcode: http://stackoverflow.com/questions/24011120/how-can-i-use-swift-in-terminal
Very. Yes.
This is an awesome response. This is very niche and something I'd like to learn myself as I have an idea that could make use of iBeacon. I will take a look at it and see about possibly planning it if there are enough people that would like to learn more about iBeacon.
There are a few things I'd like to learn before I port a project I'm working on in C# over. Binary file reading using native byte/short types. Creating images from data and displaying them on the screen. Polling the state of keys/gamepad buttons. I'd like to port my GameBoy emulator.
Ill be doing a project starting in August with ibeacons. If you end up not doing anything I'll see about putting together a tutorial series.
If you want to define OO as message passing I guess... It's OO in the way that we colloquially accept OO to be. (mostly) Class based, data encapsulation, polymorphism, inheritance, etc. I wouldn't say that they "left out the OO" though.
Okay, let's keep in contact and may be we can help each other!
Isn't the WWDC app written in Swift?
Might as well use raw sqlite if you're just going to use generic NSManagedObjects and not custom model subclasses.
Apple will probably adopt Swift on an as-needed basis like any other developers maintaining large existing projects.
As I understand it, only some (relatively small) parts of it are written in Swift. The rest is still Objective-C.
&gt;I didn't. Alan Key, the guy who coined the term, did. I'm aware, hence "colloquially". I don't even disagree with you really, I just think saying it's not OO is sort of disingenuous given what OO means in the common vernacular.
Yea, there are a good bit of "hello world" videos out there. Some of the most popular seem to be just links to github repos. I thought that was kinda cool. :)
ObjC has overhead when calling methods, and it can never really be inlined. For that reason ObjC will be slower than C/C++. However, since you're always able to dig down into C when you **really** need it, it's not much of a performance issue. Currently there are some bugs in the optimizer with ARC, making some microbenchmarks look grossly distorted, but with workarounds, it's fairly clear that plain Swift works at C speeds, and dispatch is generally as fast as C++. Another thing to improve things compared to ObjC is the ability to use value objects (structs) where you mostly had to use objects in ObjC. This is nice due to structs residing on the stack. That said, few projects are limited by ObjC method dispatch, and if they are it's often trivial to rewrite the critical parts in C. The advantage of Swift is both solid (c-like) performance **and** a language that is more succinct and easier to learn than ObjC.
Also, you can follow us on twitter @SwiftCastTV
I LOVE having the text version. I can skim text at about 5-8 times the speed I can watch the video (and do so without earphones or bothering others in the room).
Okay, we will make sure to have text versions along with the video versions!
Very interesting and specific. No idea if these would be subjects we'd cover, but if that changes I'm sure you will see.
from what i can understand... let is quite not the same as const in obj c. let is more like a non mutable object - NSString/NSArray/NSDictionary var is like mutable NSMutableString/NSMutableArray/NSMutableDictionary.
This question doesn't make a lot of sense, despite what the other commenters may think. Here is the metaphorical situation to compare it to. Your question is like asking a city planner about the quality of a particular building in the city that is new and excellent for its task of, say, being a courthouse. Then you ask if the entire city will be made of this building. That city planner is going to look at you like you're insane. Swift is designed for RAD. It's designed AROUND Cocoa and Obj-c. Sure, you could probably force it to be the basis of an OS. But, honestly, there is hardly any Obj-C code at the base of OS X. So what are you even asking? The UI is largely Cocoa, sure. But that's only a portion of the OS. My guess is that, over time, Swift code will be introduced into all the core apps. Probably not the finder or anything really critical, at least, not for a long time. There is no point. Apple already has that software, already has developers that are experts in it, and there is not point in switching languages mid project without some impetus like a major platform shift. So honestly, I think the answer is overwhelmingly "no" if you accept that by "no" I mean that the majority of the OS will never be written in Swift, especially not when you see just how much is C and C++ from OSS projects that Apple only moderately participated in.
I have heard that Swift is similar to Python. Does that hold any truth?
I just now realized that I forgot to set the delegate. D'oh stupid mistake
Swift encourages immutability. It ensures a lot more bug free code and makes certain bugs impossible. Basically, if something should never change, don't let it ever change
A friend of mine works at Apple on OS X and he said VERY few people knew about Swift until WWDC and he even only knew about it unofficially.
Definitely a possible idea. It probably would cover too much for beginners, but that doesn't mean we cannot target the non-beginners.
Lol no. I agree that data should be modeled into first class objects. But custom NSManagedObject subclasses is a tiny piece of what Core Data brings to the table. 
By the way, for the purposes of the reddit, it would be great to follow up with fixed sample code to others can see how it works. I know there are a ton of tutorial projects ongoing, but ones where folks interface with the existing libraries are most helpful.
I'm curious about how many videos you will be releasing a week. If you're familiar with nsscreencast.com, he only releases 1 video a week which seems like too few for $10 a month. Whereas laracasts.com (Laravel PHP framework) releases a video about every day for $10 a month.
I would love to see a mini application tutorial showing how to create a simple app to take pictures or videos from the camera and saving them to camera roll.
Would you like me to make a blog post about implementing picker views on swift and post it in the sub?
Once we launch, I would like to do a screencast a week. We are looking to do very high quality screencasts. Not just your here's some programming and me explaining it, but really getting in depth with the subjects. Using graphics to better illustrate the ideas and any other way we feel people will benefit from a learning standpoint. As far as pricing goes that's still up for debate. It'll most likely be around the $5-10 mark. I feel if the quality is high enough, $10 a month isn't bad. May be I'm wrong and we will definitely try to find out what the community thinks.
I can see us doing something along these lines. The focus being how to make use of camera and photo APIs.
First of all, Xcode is not a compiler, it just kicks them off. Furthermore, it's very common for a compiler to be able to compile itself. No problem whatsoever.
Definitely will happen! I'm working on rewriting an app at the moment for Mac with Swift.
When it comes to benchmarks, I have trouble trusting someone who says ARC makes code 40% slower. Also Ints and other primitives like those aren't classes and don't use ARC or any memory management. They're value types. No performance hit from that. I'm intrigued to see what other people come up with for benchmarks. For now it seems like these guys have some decent proof that swift is significantly slower, but I'd be relieved if they were incorrect or if Apple fixes it.
If it's not found, the best guess is that it's not supported for iOS, likely because UI stuff would normally require a simulator, which is more heavy weight than playground.
exactly!
~~Xcode~~ Xcrash
oh yeah, please.
Awesome. Just the kind of answer I was looking for. Is there anything currently possible with Objective C and C programming on Mac and iOS that isn't currently possible with Swift?
In functional languages (and in c++), what can be marked const should be marked const to aid the compiler So greatly prefer let when at all possible to get easier to understand less error prone programs that the compiler can optimize easier
You can obj msg send to swift objects and they behave correctly Still the same runtime You lose a ton of type info when you do though 
The language is poorly documented and changing even! I would not start there to learn I suggest SCIP on the MIT website or via the Understudy iPad app Similar concepts to swift but a long understood language You will then Be able to learn swift as the doc has improved and general computing concepts already exist In Your brain to hand swifts versions on
Could you teach us about integrating the Facebook or Google Maps API in Objective-C to work side by side with our Swift code?
You need to learn cocoa As a cocoa expert, swift is pretty challenging at points with the sparse doc to do some things I've been doing for years upon years. But it's been out only a week :D I have written code in languages similar to swift in the past as well. Not a great place to start iOS dev just yet, but may be fine in a month or two. Objective c will teach you the cocoa parts just fine and will easily transition you to swift as you're still programming in cocoa when doing swift. The doc will improve as you go If you *do* insist on swift first, I suggest something like the Big Nerd Ranch course on it to get the cocoa fundamentals cemented in well with a trustworthy info source
I've been writing a swift program the last few days and slight errors on generic extensions to base structs have been causing SourceKit to die (the thing that does syntax parsing for Xcode) Not yet an ideal environment Playgrounds are great, but will certainly be more usable come the middle/end of summer
This was an unexpectedly good read: enlightening yet accessible. Thanks! :)
You can't release things on the app stores till this fall Technically, I guess a Mac app is possible now 
This site is doing something odd with twitter when I try to load it and freezing chrome. Going to avoid it.
While this is an interesting (ab)use of the language, I don't see the point of using this approach when the language already provides reduce().
Whatever is easiest - I suspect people just want as many simple examples as possible.
Strongly disagree. You might be a fan of controllers and bindings (I’m not - huge mess, impossible to debug, pointlessly complex, and much too inefficient for ios), BUT, I don’t see any value in CoreData beyond basic persistence and the ability to map tables to map objects to Sqlite Tables unless you have custom classes. Also, I recall EOF and CoreData is a crap substitute I found I could replace in its entirety in about a page of Objective C.
I would like to see read-only properties from Objective-C to Swift such as NSDateFormatter. 
Java classes aren't objects. They're fucking structs. Of course I'm wasting my time - arguing with a monkey and all.
Why bother? Its not like the type info is all that useful. I think the last time I actually had a type error in any language - typed or not - was maybe 2003. It is an error much obsessed over that generally seldom happens. Rather like the TSA and terrorism - the effort poured into it isn't worth the payback.
 Welcome to Swift! Type :help for assistance. 1&gt; let d = ["joe":1] d: Dictionary&lt;String, Int&gt; = { [0] = { key = "joe" value = 1 } } 2&gt; d["joe"] = 2 3&gt; d $R2: Dictionary&lt;String, Int&gt; = { [0] = { key = "joe" value = 2 } } 
How do you think the first computer programs got compiled, magic? Or did very smart programmers bootstrap them.
Great to see an implementation of 2048 in swift. I will certainly dig into this a little more as I wrote clones of this game in a diffrent languages before. Regarding access-modifier: look over here, they should soon arrive: http://stackoverflow.com/questions/24003918/does-swift-have-access-modifiers
&gt; This is really amazing for fans of statically typed functional languages Or as I call them, languages you can't get any UI done in. 
If I may ask, what does that mean?
ObjC dynamic dispatch is largely missing from swift. You're not allowed to use performSelector from Swift for example. Other than that, bridging to ObjC/C is effortless, so if you find something you really can't do, it's easy to write that part in C/ObjC and it'll automagically be usable from Swift.
They are called attributes, [here are a list of them](https://developer.apple.com/library/prerelease/ios/documentation/swift/conceptual/swift_programming_language/Attributes.html).
I am not the original dev
Can't wait to visit this comment in a few years. Apple is gonna put a lot of weight behind it Swift. &gt; Most perplexing feedback on Swift: folks who see it (and judge it) as the end of a trek - but don't realize it is the start of a new world. https://twitter.com/clattner_llvm/status/474082459860992000
Hello can you make a tutorial with a search for a table view
Hmm.. I'm genuinely confused on this point. Lets take objects, so if I have a UIViewController subclass declared with 'let' then the pointer to the object is constant - but I can still change properties on the object (view, frame etc), this is according to the docs. So should let be used when say creating a heavy ViewController that I'd only like to create once?
Interesting however when using let with objects you can still change their properties according to the docs. However you cannot change the object pointed to.
I've read the wiki page on it, but can you (in a nutshell) explain the difference between what ObjC is and a functional language?
That would really be appreciated!
It has classes (object oriented) and value types (standard imperative) and closures + currying (functional). Hence, multi-paradigm.
Yeah, probably animating UIView isn't such an easy task. But static things actually work - open XCode, File - New - File..., choose iOS/Playground, and type: let view = UIView(frame: CGRect(x: 0, y: 0, width: 100, height: 100)) view.layer.cornerRadius = 15 view.backgroundColor = UIColor.redColor() view Click on the circle thingy in the same row as the last view to open Timeline, and you'll see our UIView with nicely rounded corners. Change cornerRadius in line two, and the view on the right will change. I assume (or hope ;) ) we'll see some equivalent of XCPlaygroung for iOS code in the future.
Hm. Can you give an example where Objective-C would be better?
Thanks for the feedback. I've got a third post in the series about ready to go up, keep an eye out. edit: [here](http://www.reddit.com/r/swift/comments/27m29g/using_any_to_store_different_types_of_numbers/) it is.
Swift supports method overloading. For example, this works: class Test { func test(a : String) -&gt; NSString { return a; } func test(a : UInt) -&gt; NSString { return "{\(a)}" } } Test().test("Foo") // "Foo" Test().test(123) // "{123}"
Well...a lot of early days in new programming languages is spent implementing things that end up being standard library functions you don't know about yet. But this is okay, since it builds confidence and experience and, especially in the case of Swift, pretty much demonstrates that things are pretty simple all of the way down. In any case, I think a more interesting post and idea from OP [was this first one on discriminated unions](http://vperi.com/2014/06/06/discriminated-unions-in-swift/) that suggests when Swift is less buggy, it will support enums with recursive structure like this one: enum Tree { case Tip case Node(Int, Tree, Tree) // more code here } Which, if/when it works, will allow you to do all of the elegant stuff you can do in (e.g.) Haskell with ADTs.
You realize swift has Cocoa bindings and interface builder parameters, right? 
This comment is a black hole of wrongness. If you don't think this is the next big thing for iOS/MacOS, you either don't understand Apple all that well, or are just plain ignorant. 
I agree. One thing I find very interesting is the heavy emphasis on safety you see in Swift, and an approach that aims to stop a lot of unsafe memory accesses at compile time. So it's nice that this could prevent your new iOS game from crashing, but the longer run significance runs deeper. That said...a lot of low level OS code kind of does need to have the naked memory model exposed for performance reasons, and at the moment it is not very clear how easy this is in Swift.
Very nice.
I'll have that for you this afternoon 
These look promising, I think i'll go through the first 6 videos then attempt the todo list app! If I complete it it would be my first complete swift app!
Well, at least it is as fast as C when using the -Ofast compiler option. Here is another comparison with good old Objective-C of the Dijkstra algorithm: https://github.com/juliengomes/Dijkstra-swift 2048 nodes in Obj-C = 1950ms and in Swift = 55000ms 
Playgrounds are really nice, and I like to be able to see the changes to views that I've created, but damn if it doesn't crash Xcode every five keystrokes... EDIT: Just crashed again doing nothing more than commenting out a line.
C++ under the hood: C++ is still useful for low level code because it's abstractions (templates, overloading) are still more useful than #defines. I've been following rust, which aims to replace C++ by providing unsafe blocks. To my knowledge today (i'm still asking &amp; reading around ?), swift doesn't match this capability? ... so indeed, one would consider C++ for some lower level components, and use swift for higher level parts. (with an additional draw to objC for interfacing C++ via obj-C++ to swift, beyond C FFI) What people think of as an OS today does have a lot of UI code, of course. Now one question I have is, can Swift match Rusts memory model through some fancy static analyser and whole-program optimization (advanced forms of escape analysis)? I'm not sure this is possible; if it was, GC based languages would have completely killed C++ already.
I just wrote this blog post demonstrating an implementation of UIPickerView in swift! It's my first tutorial, so feedback welcome. If people like it, I'll do more!
Here it is: http://blog.cohix.ca/?p=101. Cheers! 
Type is a lot of annotation for optimization You can toss out lots of check and redo code order with enough type info to vastly change the AST to make it faster in high level optimization 
You're not wrong.
Swift can support functional programming, but is NOT only a functional language Functional languages support the process of passing functions to methods as first class objects This allows a programmer to avoid having a piece of code multiple times, and as well allows chaining of multiple functions in such a way you can basically say what you want rather than how you get there Most swift *right now* will en interfacing with cocoa though, which is still very object oriented
Effort? You specify type a hell of a lot more in ObjC than swift Type is mostly inferred for you in swift, and definitely matches as opposed to C style "were using type merely to tell is how to interpret this memory! No guarentee!" Enums are a huge pleasure for me so far
Swift is not written in all caps. It's not an acronym. 
Can beginners (no programming experience) use these videos? Or should I learn c or objective-c first? 
From what I understand, learning obj-c wouldn't really help you in swift. It's an entirely new language and one of the reasons we have swift now is because apple wanted to encourage more developers to learn their platform. So they don't really expect you to learn the old stuff either 
Your post is a non-sequiteur. What are you saying exactly? &gt;Enums are a huge pleasure for me so far You are easily amused.
To be fair, Apple has occasionally made big announcements on technologies and then let them slowly die: most of the iTools suite, Objective-C garbage collection. However, I don't think that this will be one of those technologies.
&gt;Type is a lot of annotation for optimization Hmmm only it turned out that isn't really true, although it gets repeated a lot. There may be many good reasons to add static type declarations to a program, but performance isn't one of them. This was nicely demonstrated by the Strongtalk compiler, which aggressively optimized the code while *completely ignoring* the optional declared types. At least when it comes to object oriented method dispatch, manifest typing and performance are orthogonal concerns.
I've been doing this stuff since Next days. I think you don't quite understand Apple's developers - the existing ones that really *know* Objective C. They're not going to like it because the language is a downgrade in power for them. That's why I don't like it. 
Java did too for awhile - it didn't catch on.
and guess by your username, you are the creator of these videos... Thank you for making them! :)
agreed, will keep that in mind.
&gt; Swift is designed for RAD. RAD means? 
I always thought Genie did it.
Do you count C# as a language you can't get any UI done in? Because, I hate to break it to you, but C# + WinForms is one of the most successful UI programming combos _ever._
Rapid Application Development
Can you use Swift now by using the latest Xcode or do you need the developer preview of Yosemite?
Thanks! I don't have a dev account yet, but I applied for the public 10.10 beta. Do you think it comes with Xcode Beta 6?
Functions and objects are both first class objects in swift The things that correspond to c primitive types are even a thing akin to an object (called a struct, but different from a c struct). Swift has classes, and classes have an entirely different set of semantics from structs pass by ref vs pass by value being the biggest) Swift is clearly designed to allow almost all forms of programming to be brought to bear towards making iOS and mac apps. Most apps will still be mostly OO for whatever than means for the time benign and the near future Huge swaths of the language are designed for ease of learning, and many structures in the language are super intuitive to a objective c developer when learning I really interested what 3rd part devs make library wise for swift. This really added a lot of interesting are for expansion to the coding landscape 
Which is why it's a good thing that Swift is an adjunct to ObjC, not a replacement for it.
Great tutorials. Thanks for all the work you've put into this. Slightly off-topic question: what's the Skrillex-like music on the intro video?
Worse, [SWIFT](http://en.wikipedia.org/wiki/Society_for_Worldwide_Interbank_Financial_Telecommunication) *is* an acronym... for something else. What with that, Taylor Swift, and the other Swift language, Apple really could have chosen a more search-friendly name! You'd think they'd have learned from Google calling their language Go.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Society for Worldwide Interbank Financial Telecommunication**](https://en.wikipedia.org/wiki/Society%20for%20Worldwide%20Interbank%20Financial%20Telecommunication): [](#sfw) --- &gt; &gt;The __Society for Worldwide Interbank Financial Telecommunication__ (__SWIFT__) provides a network that enables [financial institutions](https://en.wikipedia.org/wiki/Financial_institution) worldwide to send and receive information about financial transactions in a secure, standardized and reliable environment. Swift also sells [software](https://en.wikipedia.org/wiki/Software) and services to financial institutions, much of it for use on the SWIFTNet Network, and [ISO 9362](https://en.wikipedia.org/wiki/ISO_9362). Business Identifier Codes (BICs) are popularly known as "SWIFT codes". &gt;The chairman of SWIFT is Yawar Shah, originally from [Pakistan](https://en.wikipedia.org/wiki/Pakistan), and its [CEO](https://en.wikipedia.org/wiki/Chief_executive_officer) is Gottfried Leibbrandt, originally from the [Netherlands](https://en.wikipedia.org/wiki/Netherlands). &gt;The majority of international interbank messages use the SWIFT network. As of September 2010 [update], SWIFT linked more than 9,000 financial institutions in 209 countries and territories, who were exchanging an average of over 15 million messages per day (compared to an average of 2.4 million daily messages in 1995). SWIFT transports financial messages in a highly secure way but does not hold accounts for its members and does not perform any form of [clearing](https://en.wikipedia.org/wiki/Clearing_(finance\)) or [settlement](https://en.wikipedia.org/wiki/Settlement_(finance\)). &gt;==== &gt;[**Image**](https://i.imgur.com/cEXPWxr.png) [^(i)](https://en.wikipedia.org/wiki/File:SWIFT.svg) --- ^Interesting: [^ISO ^9362](https://en.wikipedia.org/wiki/ISO_9362) ^| [^La ^Hulpe](https://en.wikipedia.org/wiki/La_Hulpe) ^| [^Terrorist ^Finance ^Tracking ^Program](https://en.wikipedia.org/wiki/Terrorist_Finance_Tracking_Program) ^| [^SWIFT ^message ^types](https://en.wikipedia.org/wiki/SWIFT_message_types) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ci2cq55) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ci2cq55)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
See the dev forums. I posted a very early question on this, and then tracked down the issue myself. It's obvious from the assembler output, and how ARC works (both for ObjC and Swift): ARC always emits a retain on an object before calling a method on said object. It then counts on the optimizer to remove it. Currently, that doesn't happen except for using -Ofast.