Do you have View as a separate instance and do you inject VM using init?
You can use AppDelegate for that. The method application(_:open:options) should handle all that for you. See documentation: https://developer.apple.com/documentation/uikit/core_app/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app This blog gives a good implementation example: https://link.medium.com/0DeC5Y6suV
This should help... https://www.hackingwithswift.com/example-code/system/how-to-make-your-app-open-with-a-custom-url-scheme
Why do you want to check if the rootFS is remounted? If you want to detect jail breaking, check if you can write to /var
I struggle with that for days now. For some reason the app does not end up back in the app delegate function once the url scheme is called in safari. No idea what’s wrong...
I inject the ViewModel through a func "bind(to: MyViewModel)" into the View, (so they are reusable for TableViewCells). After that, there's no need to hold any additional references to the view. All communication is with Viewmodels in/ouput.
Thanks - I'm trying it out, but can't seem to get it to work (I'm a beginner so maybe I'm missing something obvious). Tried to include below code at different places in my app - but when running the main app in simulator, then going to safari and using my share extension to open my custom URL Scheme that takes me back to the main app, "hello" is not printed. func application(_ application: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:] ) -&gt; Bool { print("hello") return false } code I'm using in my share extention to open my main app: if let url = URL(string: "myAppUrl://") { UIApplication.shared.open(url, options: [:]) } &amp;#x200B; &amp;#x200B;
Did you add register the schema to handle? Check the documentation it explains it.
It’s because your data source is saying there are `daysOfWeek.count` sections with one row in each, rather than one section with `daysOfWeek.count` rows.
Wow thank you. This has been under so many eyes in the last 24 hours and you're the only one that noticed this.
I have a follow up question about this article, which isn't entirely clear to me. My use case would be I send an email with the custom url embedded as a link inside it. If a user has the Gmail app installed on their phone and taps on the link from the Gmail app, the link will often be opened by the Chrome app. From what I've read, that won't work, it has to be opened in Safari.
I haven’t specifically tried that case where they have gmail and chrome installed and thus links in gmail open chrome - I do know there’s no way to set a default browser on an iOS device (well not officially - there’s the upTime deal). I did just try a deeplink though from Chrome and as expected it did not work. I think it’s enough of an edge case, but that’s naturally your call.
No one who understands and respects copyright will work with you on that one. 
The project is open source? Or do you mean the MCU related copyrights? 
I'm trying to get rid of some repeat code but running into a block. This code repeats several times: func underlineMainSegmentedControl(control: UISegmentedControl) { mainUnderlineBar.translatesAutoresizingMaskIntoConstraints = false // are using auto layout constraints mainUnderlineBar.backgroundColor = UIColor.primaryOrange view.addSubview(mainUnderlineBar) mainUnderlineBar.topAnchor.constraint(equalTo: control.bottomAnchor).isActive = true mainUnderlineBar.heightAnchor.constraint(equalToConstant: 3).isActive = true mainUnderlineBar.widthAnchor.constraint(equalTo: control.widthAnchor, multiplier: 1 / CGFloat(control.numberOfSegments)).isActive = true mainUnderlineBarLeftAnchor = mainUnderlineBar.leftAnchor.constraint(equalTo: control.leftAnchor, constant: 0) mainUnderlineBarLeftAnchor.isActive = true } So I tried to take the 3 parameters that change each time and write this to reduce repeat code: func underlineSegmentedControl(underlineBar: UIView, control: UISegmentedControl, underlineBarAnchor: NSLayoutConstraint) { underlineBar.translatesAutoresizingMaskIntoConstraints = false // are using auto layout constraints underlineBar.backgroundColor = UIColor.primaryOrange view.addSubview(underlineBar) underlineBar.topAnchor.constraint(equalTo: control.bottomAnchor).isActive = true underlineBar.heightAnchor.constraint(equalToConstant: 3).isActive = true underlineBar.widthAnchor.constraint(equalTo: control.widthAnchor, multiplier: 1 / CGFloat(control.numberOfSegments)).isActive = true underlineAnchor = underlineBar.leftAnchor.constraint(equalTo: control.leftAnchor, constant: 0) underlineAnchor.isActive = true } However, I get an error that says "Cannot assign to value: 'underlineBarAnchor' is a 'let' constant". I understand that parameters are let values. I tried to make it a var like: var underlineAnchor = underlineBarAnchor underlineAnchor = underlineBar.leftAnchor.constraint(equalTo: control.leftAnchor, constant: 0) underlineAnchor.isActive = true But this keeps returning nil values for NSLayoutConstraint. Can anyone push me in the right direction? 
My App already does that, but look at rootless JB, it is undetectable unless u check for rootFS (I think)
MCU related copyrights of course. 
Ill most likely switch my intentions to the ability to add any custom face instead of adding my own and re releasing. The more I think about it the more you’re right 
Writing web service with Vapor, swifty all the way. Just wish we will have SwiftScript for writing web-apps
If you really want ordered dictionaries. You can use ‘KeyValuePairs&lt;Key, Value&gt;’. You will lose the abolity to use fast key lookup that dictionary provides.
Use https://developer.apple.com/documentation/uikit/uibarbuttonitem/1617151-init First create your text field and set its delegate, then create a bar button item with a custom view that is your text field.
Who knows?
I had very hard time to track IOS networking errors.... I very often getting -1009 or -53 errors which don't have any real reason behind them .. up until this day I can't solve those errors nor do I know clear causes...
Not to be rude but are there any real benefits from this? I would much more welcome coroutines or async await which would provide real performance benefits
Hey, Is it easy to learn? I don’t have a lot of time !
Thanks for the answer ! But is it really a problem if no one is going to use the app ? It’s just a project for one of my classes. If I ever want to publish an app on the appstore, I’ll keep in mind what you said !
So you’re recommending firebase ? Thanks !
Can I ask why you want to check for JB? It’s almost always a huge pain and will drive people to either bypass or stop using your app. 
The whole point of the app is to find out if ur device is jailbroken lmao
Oh lol. :p in that case go right ahead!
xD
Thanks a lot!
Ahh okay, If you just want to use it for easy use, with good conditions (eg. always internet connection etc) its good to use :)
Do you mean if I registered the "myAppUrl://"? I did, the app opens when clicking on it! But the "func application" is not executing in the container app when it opens.
Figured it out - I put the code in AppDelagate and now it prints hello! Thanks!
Have a look into `NotificationCenter`. What I would personally do is send out a notification from your \`application(\_:open:options)\` function which your view controller listens to and reloads every time it receives it! In particular look at: [Adding Observers](https://developer.apple.com/documentation/foundation/notificationcenter/1411723-addobserver) [Removing Observers](https://developer.apple.com/documentation/foundation/notificationcenter/1413994-removeobserver) (You'll need to do this in your deinit method of your view controller [Posting Notifications](https://developer.apple.com/documentation/foundation/notificationcenter/1410608-post) Let me know if you want any more help!
For the majority of devs I’d say the processing benefits won’t be a big deal, but for those working with large datasets that have to try for maximum performance it will be nice. I don’t have a use for this, but I think it’s important to understand how things work under the hood. I’m weak in this area so it’s good to read up!
Worked like a charm! //What I put in "application(_:open:options)" let notificationName = Notification.Name("updateWebView") NotificationCenter.default.post(name: notificationName, object: nil) //What I put in ViewControler let notificationName = Notification.Name("updateWebView")NotificationCenter.default.addObserver(self, selector: #selector(updateWebView), name: notificationName, object: nil) Thanks!
Nicely done! Glad I could help.
The particle effect properties are probably generally the same across different engines. So you could take examples from unity and plug in the property numbers 
JSONs are pretty easy to deal with in Swift. Read up on the Codable protocol. There’s also JSONDecoder and JSONEncoder that give you some cool options for coding/decoding JSONs. 
&gt; Overall coroutines are a huge thing but they’re also the only huge thing. I’m expecting Swift 6 to have an answer. Even if you believe this is the only major limitation of Swift, it doesn't seem like something you can bolt on to a language, several major versions later, and have it work in any cohesive way. It's not just a library. It's how calls return. It's fundamental. On the other side of the aisle, Java 8 finally got Optionals. I'm going to go out on a limb and guess that they're not as convenient or well-supported as Swift Optionals, which have existed in this language from the beginning.
Nice! Now you can abstract the notification name into a public constant so you can avoid bugs from accidental name changes
Man I read his post so many times trying to find out what you meant by that last sentence hahaha
I don’t think you need to worry about alignment at all. Just have the label take up all the available space. I think you can do this by increasing the horizontal content compression resistance priority of the label. Maybe also increasing the content hugging priority of the switch. Note: if you’re trying to create this view layout in a table view cell, it might be easier to just assign the switch to the accessoryView of the cell.
Set it to fill, give them both defined widths via constraints and add a view in between that doesn’t have a defined view. It will always size to fit. 
It's more complex tableView cell layout so I can't use accessoryView in this case. I will check the compression
Check the class of the storyboards. 
Kotlin also didn't always have coroutines and C# didn't always have async/await. They'll figure something out.
I've come a bit further! The code below pushes the entire WebView up when the keyboard is showing - however, I'm not sure how to lock the top of the WebView and just shrink its hight... //added these in my ViewDidLoad NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil) NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil) And this further down in my code: @objc func keyboardWillShow(notification: NSNotification) { if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue { if self.view.frame.origin.y == 0 { self.view.frame.origin.y -= keyboardSize.height print("hi") } } } @objc func keyboardWillHide(notification: NSNotification) { if self.view.frame.origin.y != 0 { self.view.frame.origin.y = 0 print("bye") } } &amp;#x200B;
Backend. Web dev is usually front end.
yes i choose back-end too, something like python or nodeJs, i think it is a good idea to have ability to make server for our applications (ideas)
It’s a tough one. I learnt web backend (Django) a long side Swift but now I’m Swift only. On one hand it’s great to be able to build your own backend, but there are always existing services you could use with the mobile apps. With that in mind I think I’d learn Kotlin and make sure that my app is reaching most mobile audiences.
Next step in career is to get better at iOS development. Maybe add macOS since there are actual job offers that include both. Or learn about CI/CD since that's often required too. Don't waste time getting sidetracked with stuff that's a different full time position even in smaller companies.
Instead of changing webview origin, change its size.
Kotlin for me. Even though iOS has a wider share of the market in English speaking countries. Outside of the English speaking countries it's all Android. Worldwide 87% of mobile phones ran on Android in 2017. I'm on mobile atm but you can find the sources easily. So for someone who doesn't speak English at home, a lot of my best ideas feel inhibited by the smaller market. That's not to complain though. Apple customers pay more on average. Not to mention I'm in the US so there's always a demand for iOS.
I’ve been doing iOS since 2008 and I still have loads to learn. And every year Apple bring out new API and change existing ones. That’s a full time job just keeping up. I’ve recently returned to my web dev roots a bit by writing backends for my apps in Kitura. It’s fantastic to be able to use Swift for the full stack. Don’t let anybody tell you it’s not ready for production use - Kitura and Vapor are already more feature complete than when I first started writing Ruby on Rails apps. 
I'll give it a look, thank you
usually, iOS and Android teams are work alongside and normally we can learn android every day, little by little with just listening... on the other hand, i like kotlin and it is very easy to learn kotlin with our swift backend
Web development (full stack). I think being just an ios developer sometimes you get stuck and only know within the ios development ecosystem. A lot of web terms just flies over my head. I think getting a good understanding on how everything works on the web side is a great next step for ios developers. I’m not saying a master at either frontend or backend. But just a general understanding of each so I’d say full stack MERN stack
i think our daily job(as iOS developer) pushes us to that direction like it or not, learning new languages helps us to be better developer and maybe we can get some good ideas from those languages and implement them in swift 
Ew. Ew. Python please.
huum you are right and in it's true about my country 
Agreed. It’s hard to even build out an app fully without understanding what is needed on the backend and how it’s implemented. Your prototypes end up all being hacked together with localized assets to give the appearance of working through the web. 
i like swift for backend too, but i think there is very small portion of the market that needs a swift backend developer and in 2019 the whole focus has gone to javascript and python for backend
Personally I see myself just doubling down on Swift because it is only becoming more and more ubiquitous. Coming from a background of learning other older languages first really helps me appreciate how intuitive Swift is. However programming is not my current job, so I suppose I have the luxury of only focusing on iOS and Mac OS projects that I actually want to create and that are useful to me in my other skill sets. 
true story
So you want to work at Apple developing iOS system frameworks? I'm pretty sure there are a bunch of stuff even in UIKit that you never tried. Not to mention the other system frameworks.
You want keyboardWillChangeFrame instead of those.
I already have macOS and iOS w/Swift and Obj-C under my belt as well as a little backend experience (RoR). I think next up will be backend w/ Elixir+Phoenix and native Android with Kotlin. That should enable me to make my personal projects cross-platform, especially with Phoenix Liveview in the horizon (enables pure-backend rich yet lightweight web apps without writing any JavaScript). If it’s absolutely necessary to further my career I’ll take up web front end but I’d really rather not, at least until browser vendors agree on something resembling a standard library for the web and the JS ecosystem stops being such a clusterfuck.
I can see the merit in learning Android, but for me, I'm learning more full stack. Irony being I started with Android dev work and became an iOS Developer in the end. Anyway, I felt I would be exposed to more different view points trying to learn more of a back end point of view and it would strengthen knowledge about networking. Full disclosure, I also already knew Python and Java. I'm even learning some JS (well, Typescript) since I've also given Firebase and their Cloud Functions a go. Its fulfilling to try something different. Not that Android is the same but I liked learning about non-Front End work.
i am agree with you, there are a lot of things in swift and apple development environment which i don't know about them, even maybe i have not hear those names yet. but sometimes focusing in one area just bored us and maybe kills our motive for learning new things, maybe we have to get some fresh air with new ecosystem and then get back to our love (Swift and iOS) 
I feel like I have a hard enough time being as good as I’d like with iOS related things, but I do a little Python in my spare time, so maybe looking into some backend stuff using Python would be a wise move to develop myself further as an iOS developer
agree. i think as an iOS Developer, i need some fresh air. last year i literally killed my self with iOS and now i need some space for resting. i go with python too
I'd go with backend web dev. I started out as a backend web dev (with some "fullstack" experience - namely basic Javascript to support a web front end) I've since added Swift as a language I work in (about a year and a half ago), and also front end frameworks (namely React). But backend really is the core of modern development, because any type of server has to be setup with a backend framework. I feel not working with backend technologies (or at least understanding how they work) ties your hand behind your back a bit.
I found a solution! Would anyone be able to help me translate this code to Swift? - (void)keyboardWillShown:(NSNotification*)aNotification{ oldScrollDelegate = viewController.webView.scrollView.delegate; oldOffset = viewController.webView.scrollView.contentOffset; viewController.webView.scrollView.delegate = self; } - (void)keyboardWasShown:(NSNotification*)aNotification { viewController.webView.scrollView.delegate = oldScrollDelegate; } (void)scrollViewDidScroll:(UIScrollView *)scrollView { scrollView.contentOffset = oldOffset; } &amp;#x200B;
You want to eventually gain full stack which is the following. IOS/android/web. Backend, nodejs/python. Database/infrastructure i.e. aws azure + sql database or no sql. My progression was android, ios. AWS, mySQL. NodeJS. Python. Now i'm doing some unity/AR stuffs + tensorflow. 
No.
I still do a lot of things in Objective-C, because Swift just doesn't do everything better.
&gt; Apple bring out Apple brings out It is a company, an it. It brings. That's how it works. 
If you want actual modules in Xcode you would need to separate it out into a project and then use a workspace to bind all of those projects together. Then you can use import statements. However, it is best to do this only if you need to separate logic for different UI's.
You can group them into a framework 
Note that object references are passed by value as well, it’s just the value is a reference. 
You can spend 24/7 learning Swift. Most people are just using a fraction of its potential. Have you built an AR app? Something in Metal? How about Swift Server? You can spend years learning. It’s a pretty intense language. 
Personally I’ve started marketing / business development / ASO.
I found a guide I think solves my problem! I know about notifications, but would anyone help me translate the code below to Swift? [https://jmsliu.com/3461/set-uiwebview-content-not-to-scroll-when-keyboard-is-shown.html](https://jmsliu.com/3461/set-uiwebview-content-not-to-scroll-when-keyboard-is-shown.html) - (void)keyboardWillShown:(NSNotification*)aNotification{ oldScrollDelegate = viewController.webView.scrollView.delegate; oldOffset = viewController.webView.scrollView.contentOffset; viewController.webView.scrollView.delegate = self; } - (void)keyboardWasShown:(NSNotification*)aNotification{ viewController.webView.scrollView.delegate = oldScrollDelegate; } - (void)scrollViewDidScroll:(UIScrollView *)scrollView { scrollView.contentOffset = oldOffset; } &amp;#x200B;
I feel like it’s so easy to “learn” a new language when your experienced in one already. It’s not like learning to drive a different car. Same idea but maybe a few switches take time to get used to. 
You can build backends with Swift :)
Yes, you just have to unwrap that value before printing. ``` if let info = nData.info { print(info.height) } ``` or ``` guard let info = nData.info else { print("There is no data!") } print(info.height) ``` Read more there https://docs.swift.org/swift-book/LanguageGuide/OptionalChaining.html
Namespacing is pretty simple in Swift. Since you can nest types in different scopes you can use that as namespacing. People use `struct`, `class`, `enum` and such to provide those namespaces. There is also modules which are compilation units, those are individual compiled frameworks that can be included in projects. So, if you have a framework named "Foo" and you want to use a type named `Bar` from it unambiguously you would do this: import Foo let instance = Foo.Bar() If you want namespacing without creating a separate module here's how to do it with an `enum`: enum Bar { struct Baz {} } let other = Bar.Baz() An `enum` is a great choice for namespacing because if it doesn't have any `case` then the `enum` can't ever be instantiated. Thus its only use is as a container for anything namespaced inside it. You can nest this technique as deeply as desired.
Unwrap: if let height = nData.info?.height { print(height) } Forced unwrap, will crash if `nData.info` is nil, not recommended print(nData.info!.height)
Doesn't seem to be massively popular on this subreddit but I do c# aspnetcore and really enjoy it. Haven't had too much experience with Python but this syntax makes my skin crawl. 
I’ve been all around the stack with sql, c#, Java, node, and chrome (JavaScript). And I much prefer the iOS framework. If you don’t have experience with the other technologies and terminologies I can see why you’d want to expand. But for full time work, iOS pays more and is a better experience overall.
Obviously `nData.info` is an `Optional` since you are using optional chaining there. Therefore any resulting call chained with it is going to be an `Optional`, so `nData.info?.height` is also an `Optional` As others have said, you need to unwrap it to get at the value contained inside.
Andriod lusers aren't worth the effort. They'll bitch about how much they want an Android version of any iOS app, but they won't buy it.
Does it need to be pure Swift? Because that's functionality is already on the command-line: https://fedoramagazine.org/bc-command-line-calculator/
Are you using swift 4? You can use “fileHandle(forWritingTo: url)” to grab the existing file after you’ve checked for its presence (or created if it doesn’t exist, “fileHandle.seekToEndOfFile()”, to get the last line, then “fileHandle.write(task)”, then fileHandle.closeFile(). This should append vs. overwriting the first line of the file. 
I second this. I do ruby projects on the side, but I also do fastlane and jenkins to achieve CI/CD for iOS as well!
I think I tried doing fileHandle(forWritingTo: url), but wouldn't work. Let me try it again and try it. And just to be sure, does swift 4 accept running multiple functions in a buttonClicked function?
I would have have a method for getting the file hand, writing, and closing, a method for looking for the file/creating, and then you can call them separately from within the button click function. Might actually be “forWritingAtPath”. https://developer.apple.com/documentation/foundation/filehandle/1416892-init
I took an Android course in college, it didn’t make a profesional but at least it helped me to be able to talk with the Android teams on my projects understanding a little bit more of what they were saying, and also being able to “translate” terms from Android to iOS. I’ll go for Kotlin and Android if I were you, if your interests are to work with Android teams and projects.
Is the x (multiply) being sent as a * - otherwise it might be complaining
Yes yes i wrote X Here in reddit because otherwise it will just make my text bold
Ok - just checking
You just need to do \\*
This may help.. At least it seems to work in a Playground let stringWithMathematicalOperation: String = "1+2*3" // Example let exp: NSExpression = NSExpression(format: stringWithMathematicalOperation) let result: Double = exp.expressionValue(with: nil, context: nil) as! Double // 7 
First off I don’t see why everyone thinks that the next step in their development is the web. There is certainly lots of opportunity there but Python has a huge following in other industries often involving far more technical development. Speaking of Python I honestly believe that every well rounded programmer should learn a bit of Python. Frankly it has replaced BASH in many ways as a required skill. The question becomes how much time do you invest in it, there is no easy answer there. Now python n is at the tops of its popularity craze, I actually see Swift replacing it long term. Now with all of that BS out of the way, if you are to be a professional programmer you need to master one language for your bread and butter. I get the feeling you have a long ways to go here. A good 5 years of development with the stable language should get you there. 
Here it is with a little check - seems to work from the command line just fine... var result: Any if CommandLine.arguments.count == 2 { let stringWithMathematicalOperation: String = CommandLine.arguments[1] let exp: NSExpression = NSExpression(format: stringWithMathematicalOperation) result = exp.expressionValue(with: nil, context: nil) as! Double // 25.0 } else { result = "Invalid Number of Arguments" } print(result)
What did you search for? There's a million webpages about parsers.
I am super beginner about this stuff. Didn’t know what to search and where to learn
I have been an iOS developer for years, although am a manager now. I started in obj-c, but use it as little as possible now. I adopted swift as fast as I could, and got very proficient in it for the tools we build. After a few years of being strictly an iOS developer, I added Node backend and even some angular front end for a few content management systems we gave to our customers. I get more Linkedin job requests for my "minor skill in angular" than I do for my node backend work. IOS I still get a huge portion as well obviously. I like knowing the backend workings for the sake of how they interact with our applications. I could live without ever learning angular though. I never got into Android though. We hire native devs for both platforms, and rarely can you find someone who is actually proficient in both.
Been there, done that.... I’ve been doing iOS for 9 years, before that I did web and backend. I’ve done Windows and Unix. I’ve done Java and Android here and there. Frankly I’ll be happy doing iOS for quite a while yet. It continues to grow and adapt. Swift alone has a radically changed iOS development....
I think it depends on what OP wants to do. Here’s my advice: 1) Sign up for an AWS or Azure account and learn how to deploy some simple code. (Hello World on AWS Lambda using node.js for example) Serverless is getting big. 2) Download Postman and get more familiar with API requests. Then start working on the backend in node.js or .NET core that creates those APIs. 3) Look into how those APIs connect to a database. SQL etc. You’ll be well on your way to full stack at that point.
Completely. Apple has signalled iOS and macOS becoming further integrated. iOS is an incredibly deep language, and apart from that, most iOS devs suck at software development from a principles standpoint, myself included. Become a better software dev should be #1. 
In my recent job search I found a lot of postings for mobile engineers who knew both iOS and Android (I had no experience with Android at the time). Conversely, I haven't seen many roles that also require experience with web development. The company that I ended up going with was willing to allow me to learn the Android side of things while on the job, which is the main reason I took it. I think being able to handle the entire mobile frontend of an application makes you very valuable to employers. 
Are you talking about the actual disk path to your app on the device? If so, then no. This path is unique to every installation and should NEVER be saved anywhere; you should only save relative paths in your database/configuration, or your app will break if the user reinstalls or even updates your app. All of a sudden, your app’s physical path has changed, and your absolute file paths that you stored in your database or UserDefaults or wherever else are now broken.
It took me the whole day yesterday to figure this out. Lesson learn.
Where do I start with CI/CD as I'm seeing lots of jobs requiring this knowledge
I started with iOS and I’ve moved to learning both Django and nodejs frameworks. I’m now very useful at my current company because I know what our full stack is doing and how to resolve issues all around 
prepare to learn ML
Hi! Our company is looking for a new front-end developer. Preferably 6+ years of experience with a bachelors in computer science. Experience in Angular JS, Angular 2,4,5,6,7, React is, redux, flux, backbone, bootstrap, jquery, JavaScript, html, css, typescript, and dog walking is ABSOLUTEY required. Experience with AWS AND Azure is a bonus!
On a side note how do you all continue your skills. After work? Free time? On the job? I'm having trouble with that personally
Definitely also recommend either node.js or .net for server side 
OP, there are very good reasons why this was (intentionally) omitted. This looks like a clear case of the [Dunning-Kruger effect](https://en.m.wikipedia.org/wiki/Dunning%E2%80%93Kruger_effectthat). Just enough understanding to identify a problem, not enough to understand the context around it, and the ego to toss some comment about professional developers being "unable," while being blissfully unaware of the huge downsides of the solution they propose. Truely a spectacle. OP I suggest you read this forum post to learn more about this issue. There are many others like it, but this is one I saw recently and responded to: https://forums.swift.org/t/why-are-string-offsets-so-complicated/19753/69?u=alexanderm And also, if you're going to implement subscript functionality on a type, at least use a proper subscript operator and not a function like "get", "indexNum", or whatever. This isn't Java. 
Hey, XAleXOwnZX, just a quick heads-up: **truely** is actually spelled **truly**. You can remember it by **no e**. Have a nice day! ^^^^The ^^^^parent ^^^^commenter ^^^^can ^^^^reply ^^^^with ^^^^'delete' ^^^^to ^^^^delete ^^^^this ^^^^comment.
Hey /u/CommonMisspellingBot, just a quick heads up: Your spelling hints are really shitty because they're all essentially "remember the fucking spelling of the fucking word". And your fucking delete function doesn't work. You're useless. Have a nice day! [^Save ^your ^breath, ^I'm ^a ^bot.](https://www.reddit.com/user/BooCMB/comments/9vnzpd/faq/)
Hey BooCMB, just a quick heads up: I learnt quite a lot from the bot. Though it's mnemonics are useless, and 'one lot' is it's most useful one, it's just here to help. This is like screaming at someone for trying to rescue kittens, because they annoyed you while doing that. (But really CMB get some quiality mnemonics) I do agree with your idea of holding reddit for hostage by spambots though, while it might be a bit ineffective. Have a nice day!
First, I would start with running Unit Tests and UI tests locally. then go down this list: 1. Building an app from CLI using `xcodebuild` 2. Running tests from CLI using `xcodebuild` 3. Using fastlane to do above 4. Do Hello World with a Jenkins free style job 5. Running tests through a Jenkins Job The last one will require you to create a job that clones a project from a repository, sets up dev environment, then essentially do task #2. CD Is essentially just doing #1 and then deploying the archive to AppStore Connect or Crashytics. Fastlane has a bundle of reusable functionality to deploy to App Store connect or crashlytics so beside to understand how Fastlane works and offers. Fastlane even offers simple interfaces to run tests or produce archives. Google is your best friend for guides, find the one the bests suits you :)
Thanks for the outline!
Thanks for the outline!
I went for .Net backend because that's what comes handy in my company and they offered to teach me, so why the hell not :) 
Have done all 3; running like hell back to iOS! Fine if you like the others but I hate it. The use-every-library-in-the-world-automatically style is not one I can tolerate. Seriously, pick what you love and be great at it. Kudos learning of course.
Came from a web development background. No interest in going back. I’d rather expand into macOS or tvOS. 
Nice post on observer pattern.
Good bot!
Good bot!
Thanks for contributing absolutely nothing
https://github.com/sergdort/CleanArchitectureRxSwift
That. Also, learn something that's actually USED for backends, which means something else than Swift+Kitura or whatever. &amp;#x200B; I know that some people in this sub will destroy me for this, but backend Swift is a hobby for now, and you won't find a job for it just yet. Bet on stuff like ruby, java or golang.
Great introduction with some neat examples
Wow, so the swift team at apple has shills on reddit. 
Or is that lattner still trying to act like swift wasn't a huge mess? 
Good point, I was attempting to emulate Android intents, its quite common to cast from a bundle to data e.g; \`AccountBundle account = intent.*getSerializableExtra*("key") as AccountBundle\`. I found segues quite useful, but I'm not a fan of storyboards, next time I will try writing all layout code programatically using SnapKit. 
Android + Machine Learning (with Python for now, although Swift for TensorFlow is already available as pre-release)
Is the `var val` an instance of class type? eg : `var val = YourClass()` Class object is passed by reference.
PS: That reply was a textbook example of the kleinenschlagen sphincterplex. 
Post code, that’s the best way for us to see what’s going on. If you do then post text, not images. 
It won't assign string to UILabel.text cause UILabel is nil
Find (and rate!) the full video here 👉 [**https://www.youtube.com/watch?v=xgB5u38F4Zo**](https://www.youtube.com/watch?v=xgB5u38F4Zo)
Simple, running it in some online swift playground because xcode download has stalled many times. (Had deleted the tvOS simulator) Here is the code: var sum=0 func add(num:Int){ sum=num } add(num:10) print(sum)
The online playgrounds really aren’t that great, I wouldn’t depend on them to work properly. 
Best I found was using CoreMotion to track change in altitude, which could work, but I doubt the distance from waist to ear would be measured. https://stackoverflow.com/questions/36038491/ios-coremotion-calculating-height-difference . Also from googling it seems like using the accelerometer to measure height is too unstable and inaccurate :/. 
Not trying to take the piss out of Android, but its API is riddled with stupid things like the one you mentioned. Its probably better not to inspire from them. 
Oh, I thought that only happened with inout. How to pass by copy in a playground then? 
You probably have better chances using something based on ARKit. 
That's not "external". That's an enclosing scope. That's how programming languages work. I'm not sure what you're expecting it to do. If blocks *didn't* have access to the environment of their enclosing scope, then 90% of the language (from if-statements on up) wouldn't work.
Step 1: actually *pass* it...
So ... are you saying you didn't actually search for anything?
I suppose you could use the accelerometer. Make sure the device is initially at rest at the waist, then have the user raise it to their ear, then twice integrate the acceleration to produce distance. Not sure how accurate this would be but combined with barometric data it might be ok
This is probably a product of a different dialect of English. In the UK for example they say “Apple *have* money” treating Apple as a group of the people that make it up like “they *have* money”, in the US we treat it as a single entity, “Apple *has* money”, “it/he/she *has* money”. Both are still correct. “Apple bring out” -&gt; “they bring out”. If you want to be a pedant go after the real juicy stuff like “could of/should of/would of” and “allot/alot/a lot”.
 var sum = 0 var other = 0 func add(num:Int){ // sum is declared in the outer scope so the outer scope gets changed sum = num // other is declared both in the outer and local scope // only the local scope is changed var other = num } add(num:10) print(sum) // "10" print(other) // "0"
Usual name for if not is unless 
I like the idea but the contractions are terrible
The contractions are vitally important to this feature.
**Checks calendar** ahh, there it is
Bad April Fool's day joke.
I'm starting this program today. I don't have social media so I started a discord for people who are also doing this program. For anyone interested, you can join at: https://discord.gg/xW2NgGe I think joining will be super useful for holding everyone accountable if we can make a small community of us!
There is [`zip(_:_:)`](https://developer.apple.com/documentation/swift/1541125-zip) which allows two `Sequence` types to be bound together for iteration. If the sequences are standard ones like `Array` then they should use copy-on-write semantics and not allocate additional storage for read-only operations. For more than two you'll need to come up with your own solution, either through multiple applications of `zip` or something like this: https://gist.github.com/kristopherjohnson/04dbc470e17f67f836a2
Something like this: ``` extension Array where Element: Array { func nestedForEach(_ block: (Element.Element) -&gt; ()) { self.forEach { innerArray in innerArray.forEach { block($0)} } } } ``` On phone, so there might be some errors that are trivial to fix based on the error message. Since arrays are copy on write (and UIKit classes are passed by reference), there won't be too many extra storage needed by wrapping multiple arrays in an array.
No \`zip\` does something entirely different.
Yeah the implementation is not the concern. I just figured I might've overlooked something provided by the standard. (I would still create an iterator instead of a block enumerator. :D)
Does it? How so? It provides a way to iterate over multiple arrays. Do you mean that you want to iterate over one array then the other? It sounded like you wanted to iterate over them concurrently.
`zip` creates a sequence of *pairs* from the arrays' elements. I didn't think I gave the impression in my title or post, but if you have recommendations for edits I'd be happy to apply those.
flatMap can flat the array of arrays into a single array. Reduce can do the same.
It's my mistake then, when I read what you wrote it looked like you wanted to access the elements in pairs or sets. After re-reading your post and comments I now believe you want to access the elements of one array, then the next, then the next, and so on. It shouldn't be too difficult to roll a `struct` that provides an `Iterator` like that, similar to `Zip2Sequence` but providing sequential rather than concurrent access to elements. I don't know of anything like that in the current standard frameworks.
Use `flatMap`, with lazy if you want to avoid creating the array in memory. 
No worries. I think `zip` is the slightly more common operation. I'm keeping the 3 view types (decoration, supplementary, cells) as separate arrays since items are indexed and the other 2 types have different lookups, etc., but there are a few common operations that'd I'd like to just work them as one sequence.
Web, Android is complete shit (imho), especially to develop for. 
https://developer.apple.com/documentation/swift/sequence/2905332-flatmap
You should use `[arr1, arr2, …].lazy.flatMap { $0 }`
“ifnot” as a keyword instead of “if !” honestly reads better to me. But the contractions, sigh. 
There is no other kind. 
Thanks for the offers, I went to the Apple Store to test it out. If anybody is wondering all the button sizes are the same across all iPad models :)
I became better at Swift when I started with kotlin.
Good one
I just included all the source files of SavannaKit and SourceEditor in my project and have made some modifications to it there. I made a separate target for each and that's been working fine until now. They're in the same project. I'm not using Carthage or anything. And it doesn't look like SavannaKit has any dependencies.
It's part of my source.
It means search it: https://stackoverflow.com/questions/50701321/xcode-error-on-simulation-mgisdeviceoneoftype-is-not-supported-on-this-platform/53442910
https://forums.developer.apple.com/thread/103753
Technically they are passed by value (which can be seen by the called function not being able to change the *variable*), but the passed value is a reference to the object (which can be seen by the called function being able to change the *object* itself).
Hahaha the serious responses are funnier than the joke ones. Some of them critiqued it as a valuable feature.
I just found out that on any newer Jailbreaks, the /var check is useless... iOS wont let the App write to it (even in jailbroken mode)
I'm all for it if we can define true as YES and false as YESNT
You likely need to connect/reconnect the IBAction. You can confirm that it's receiving an action by setting a breakpoint on the IBAction. Also, you need to update the UI on the main thread.
There should also be a return’t
I've been wanting to learn, but I'm way too busy right now. Got to finish my Sec+ and degree first!
There's always an hour you can squeeze in! If you can't do it right now though, I understand. If you plan on starting relatively soon, definitely join anyway! If not, please spread the word! I want to get enough of us so that we can all hold each other accountable for working every single day.
I wish I could! After I knock this certification out, I'll for sure have the time. So many ideas bouncing around that I want to see to fruition! 
I'd say this is the only day of the year when you can say something true and relevant and still get downvoted to oblivion, but I'm not certain of that.
Sounds good. Join whenever and if you have friends who might be interested, definitely let them know too!
I'd say false needs to be defined as YEAH_NO.
Is that a recursive call to the function that contains it?
I’m interested. 
I’m not so sure that the lack of an install package for something that only developers will use anyway is that big a stopper for a programming language. 
I'm interested but I'd need at least one week before I could start /: So if you don't plan to start within the next 7 days I'm in :0
I think a few of us are starting tonight but I wouldn't not join because of it. I'm hoping to have people at different stages. It would be useful because we can help each other that way
Join the discord!
Im definitely down!! Im trying to become a iOS developer and I’m still a beginner so this sounds fun. Im already on like day 12 i think
Awesome! Don't forget to hop in the Discord!
I’m also interested. Thx. 
Rust is twice the age of Swift. Give Swift time to be better supported and normalised.
I'm in - just joined the Discord :) 
It only has up to day 60 on the website? 
You can use the `joined()` function on an array of sequences. It returns a `FlattenSequence` which you can iterate over. [Documentation](https://developer.apple.com/documentation/swift/array/2945737-joined)
So to be clear? I don’t have to know anything to start? I’ve played around with swift playgrounds on the iPad but not for very long. Also my Mac is really old are there strict hardware requirements? Thanks!
I just started swift through this same site this weekend! I’ve been a front end web developer for 10 years and I’ve decided to make the move over to apps. I’ll be joining the discord in the am!
I’m down. I like being held accountable so this should help me out. I started and got through the first week and then I got side tracked. 
i'm in
You’re a legend, Paul, keep up all the great work in the community! Just started listening to your podcast actually and have worked through a few of your publications. I’ll pass this along to fellow Swifters. 
I am planning on starting this during the summer since it is about 100 days so basically fit perfectly before my last year of college. It also allows me to gain a new skill during the summer. 
Just finished up a Simple Stopwatch app. Was interesting to make it without using a timer. Next I’m making a simple calculator. Gotta get them fundamentals before moving to big projects
Hey, quick question relating to RxSwift. Where would you say I get started with RxSwift? I have little to no experience with Rx and it looks very confusing. Thanks!
Remember that `Date` is always in UTC. There is no conversion until you go to display it. Set the `TimeZone` you want it to translate to on the formatter.
ABI, rather than AB. It stands for "application binary interface", and means that things like * how a function in one library passes arguments to and gets the return value from a function in another library * the format used to store information about classes and structs in compiled code * the size and layout of standard library types * etc… are locked down now, and can only be added to, not changed or removed. From a practical perspective, the benefits for you basically boil down to: Swift can be included in the OS instead of bundled in your app, so your app can launch a bit faster/use a little less memory/be smaller to download. Less directly it means that people writing tools that operate on compiled Swift code (say, a new debugger or reflection library) can do so with much less ongoing maintenance work.
https://swift.org/blog/abi-stability-and-more/ https://swift.org/blog/abi-stability-and-apple/
[3 days ago...](https://old.reddit.com/r/swift/comments/b754d3/just_learning_and_have_a_question/)
I am on day 4. I don’t know how he does it but everything is explained very well and it’s actually making sense. I am doing pretty good on most of the tests, just minor reading errors like I skip reading if it’s var vs let. I learned my mistake and start reading the code more. 
r/bodybuilding is over there...
OP, what level are you? 
I got it working a few days ago. Is there something in particular messing you up? Make sure you install the LSP plugin, and the settings snippet you find in the sourcekit-lsp docs goes into the LSP plugin settings - not your sublime user settings.
Yes, you don't need to know anything to start. You should get by just fine with an old mac. 
Joining!!
Hi, i would like to join too, would it be a problem ì our time zone are so farr away. Im at GMT+2
This is amazing, and compnerd has driven almost all of this. Looking forward to trying this on my PC soon.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/iosprogramming] [Is it possible to have a US App Store description and a UK App Store description?](https://www.reddit.com/r/iOSProgramming/comments/b8fmij/is_it_possible_to_have_a_us_app_store_description/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Solid effort. But why?
You can set different App Store descriptions for English (UK) and English (US) to achieve what you want. There's also Australia. (Example listing prices in description as $, £. AUD etc) Create a new version in iTunes Connect for release, then scroll down in the drop down on the right to add new localizations.
What about a country like HK, doesn’t that use English US and so will conflict with the US description?
It depends on the device locale at the time of registering the App Store country I believe. If the device is set to traditional Chinese at the time, the App Store will display Chinese if the localization is available. If the device is set to english, it will display the english description. Changing the device language after this point will not affect the App Store language. (The IAP's will still be displayed in the correct currency, but there will be a clash in the description indeed) It's not optimal, but Apple works in mysterious ways \^\^
Ah perfect. I think I overlooked \`joined()\` because I assumed it was creating new storage.
How would you update the UI on the main thread 
Because every engineer...scratch that, everyone should attempt at least one thing that doesn't seem possible or seems very difficult to do in order to improve or just for the heck of it
gameViewController\*\* &amp;#x200B;
Have you tried restarting Xcode? It happens once in a while
i restarted my laptop and still nothing
it works on the first view controller but not the second &amp;#x200B;
Is your class specified as GameViewController in the storyboard?
Hello! Welcome to the 100 Days of Swift! Building a community you can learn with will really help you learn, and I'm sure you'll find it very encouraging too. I realize you want to use Discord, which is great – go for it! But if you use Slack and want to join the official 100 Days of Swift channel, [use this invite link](https://join.slack.com/t/hackingwithswift/shared_invite/enQtNDc0NDUyODgxMzUxLTU3OGFlNTJhNTg1M2U0OWRlNTE3MmRlNWE1MWM2MjU1MzU0MmE5NTY0YTc0N2MxOGJiMDJhYmYxM2ZiNmE4MGI) then join #100. If you have questions, [please feel free to tweet me @twostraws](https://twitter.com/twostraws).
accessibility
It only started on February 1st – anyone following the curriculum of an hour a day can't be any further ahead than that.
Ideally your Mac should be able to run Xcode 10.2, but you can get by on just 10.1.
I'm glad you're enjoying my work 👍
It's good to hear that you're reading the code more carefully – it's such an important skill! I hope to return back to the earlier days to add extra explanation and functionality here and there, but right now I'm busy working on the next days 😅
No it’s a new coco file I think it’s called 
You need to change the class in the Inspector for the ViewController that you want, so enter "GameViewController" or whatever your name is of the .swift file and then try ctrl dragging again from your buttons/labels to the swift file with the assistant editor open
this is active https://discord.gg/YT4zdET
I wouldn't say that's an issue. We have people from all around the world.
What do you mean?
&gt; ' yes i just saw your comment on the Discord channel, thank you for creating it :)
it works for outlet but not action &amp;#x200B;
Thanks for joining!
@mightymander could you provide a video of what you are trying to do? it should work for both outlets and actions?
Definitely still join whenever you start. I'm hoping to still have people filtering in for quite a while
thank you so much i restarted the project and it worked i must have changed some sort of setting or something thank you for your help as im a beginner 
No problem, we all start off as beginners. Glad to help, and I wish you luck on your development journey 😎
Apple seems to use a combination of the ambient light sensor and some motion to detect this in Messages
Thanks! So that inout is basically a ridiculous way to pass by reference. 
\`don't\` and \`defern't\` are particularly great!
Thank you :)
It's there to make calls easier, compiler optimization more explicit, and mirror some existing C, C++, and Objective-C calling styles. For example: func foo(_ one: Int, _ two: Int) -&gt; (Int, Int) { return (one + 1, two + 1) } (one, two) = foo(one, two) vs func bar(_ one: inout Int, _ two: inout Int) { one += 1 two += 1 } bar(&amp;one, &amp;two) The `inout` version is simpler at the calling site. In addition, it offers the compiler more leeway in optimization because it's specifically annotating the fact that there is a copy-in copy-out operation. With the return statement the compiler has to detect and infer it. [Language Guide: In-Out Parameters](https://docs.swift.org/swift-book/LanguageGuide/Functions.html#ID173) [Language Reference: In-Out Parameters(https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID545)
Just wondering if you have any ideas for simple games I could make?? And I mean SIMPLE
You're typing for others to read. Use complete sentences.
&gt; Apples Apple's* Apples = more than one Apple Possessive nouns! How do they work?!
How can you see what you’re typing if the content doesn’t scroll up
I'm totally down! Gonna hop on the discord in a sec.
you forgot your question
Naughts and crosses
In this case, you probably don't have to worry about that - since you're updating your UI when the user presses the UIButton, that happens on the main thread automatically. &amp;#x200B; If you were to do something on a background thread, then to update the UI you would need to call: `DispatchQueue.main.async {`
Have a look here: [https://dev.azure.com/compnerd/windows-swift](https://dev.azure.com/compnerd/windows-swift) [https://forums.swift.org/t/swift-windows/22458](https://forums.swift.org/t/swift-windows/22458)
Storyboards take away the ability to use custom initializers making you have a bunch of non-optional optionals and only give slight performance increase for first load and segues. If you are using segues, you should switch to coordinators. If the slight perfornance hit of XIBs worries you, you should make your views in code. tl;dr don't use storyboards. As for connecting stuff, sometimes you have to type out the IBOutlet in code and connect from there.
Look into using a CAShapeLayer as your view’s mask. There are lots of good tutorials online if you search with those keywords. 
No programming language can supplant C nor C++ nor Java if it only runs on Apple platforms
History has shown that nothing can supplant C or C++, full stop. Nobody has ever proposed rewriting XNU or even IOKit in Swift. I don't even think Swift has the capabilities to implement all of what Objective-C can do -- that's why it was designed with such good C and Objective-C integration.
Making some tests pass didn't seem possible? To whom?
Thank you for the quick response man 👍👍👍
Did you miss the "or seems very difficult" part of my comment? 
History has shown that history showing things isn't a reliable way to predict the future. Swift can do everything all three of those languages can do, and Swift does it better. Any library for any platform can be written in Swift, and I'd bet money that it'd be better for it too. Also, [two quotes](https://oleb.net/blog/2017/06/chris-lattner-wwdc-swift-panel/) from Chris Lattner, inventor of Swift: &gt; My goal for Swift has always been and still is total world domination. It’s a modest goal. &gt; Killing C++ is really the unsolved problem, and it totally has to happen.
It's going to be tough for me to go through this course after getting myself a second job and my wife is about to give birth soon. But after failing to learn swift for so many times, I think it worth to try it again :)
Could easily be just a regular image where the background is partially transparent. At least if it's just a static header.
&gt; History has shown that nothing can supplant C or C++, full stop Rust would like a word with you
Apple fool?? Again?? 
April fool? Again??
I know you’re busy. I like and dislike there’s no explanation, at least for me on one hand it forces to me reinspect the code in question and after doing so, I see OH! that’s a constant and later in the code it’s trying to change it or in the case of comparisons realizing it’s not less/greater than. There has been a few (not many were I would like an explanation) You’re doing an awesome job with teaching us who have no experience with Swift or any code at all to learn! Keep it up!
You got this!
is just did , I now is partially works ,because the autocomplete dosen't work like in VSCode or this feature is not enable for sublime text ? [Img](https://imgur.com/ux8EEaX)
Ah right. That makes sense 
As a beginner learning on the current version of swift, will I be fine if I continue doing what I’m doing, or will I be better off if I stop and wait for swift 5 resources to come up? 
... They cant supplant it YET. in order to make it a viable language as they work on such a difficult endeavor, there has to be a transition period. To say that nothing can supplant Obj/C/++ is to ignore that they all get compiled down to bytecode. It ignores that Assembly was supplanted by other languages.
Making some tests pass "seems very difficult"?
Yes? If I were doing this task it will be difficult for me. TDD involves writing tests first so yes, making those tests pass will be difficult. Any more questions?
For LSP you have to have a SPM project. Pretty shitty since SPM can't replace Carthage/CocoaPods yet. To test I cloned Mint, since it's a Swift 5 and SPM project (https://github.com/yonaskolb/Mint). VS Code: https://imgur.com/a/Jvvp5Lq Sublime Text: https://imgur.com/a/Ju7bZSV
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/e1IhpAU.jpg** **https://i.imgur.com/KDrcEyz.jpg** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20ejyu40r) 
Either that or just a simple graphic and transparencies 
That’s made in flutter though, flutter is rendered through the Skia engine, which means that it doesn’t use any of the native UI components that the native development seem to offer. So it has the freedom to do whatever and however you want. It’s a little more difficult to achieve the same result in native development, but totally possible. 
I have 7 textviews that I show switching between 3 different segmented controls. Right now I'm using bools to hide everything except the one i want to show, but it feels glitchy. What is a better way to write something like this? The top segmented control has 3 choices. The first 2 choices offer a second segmented control to pick from. So I have Aa, Ab, Ac, Ba, Bb, Bc. The final choice only has one option - Ca. Do I try to write this as some kind of nested enum like: enum TopLevel { case text(X) case translation(L) case info(I) enum X { case english case other case attachedLetters } enum L { case english case another case spanish } }
A view is any rectangle you see on the screen (even if it doesn't look like a rectangle, it's bounded by one). It is good at drawing itself. It's the basic building block of anything you see on the screen. A view can encompass other views. &amp;#x200B; A view controller is in charge of a whole bunch of views that work together to make up a window or screen. It has a view as one of its properties, and usually this view is the one that encompasses all other views on the screen/window. &amp;#x200B; A navigation controller is a special species of view controller that maintains an array of view controllers so a person can go "forward" and "backwards" through a bunch of view controllers. The navigation controller has code already built in to help you navigate around the array of view controllers. If you really wanted to, you could make your own navigation controller (and lots of people have). &amp;#x200B; Is that ELI5 enough? Sorry, I'm 10x5, so I can't quite remember what 5 was like.
View is a special type of model, views represents objects on the screen, each view can also have subviews. View controller is the controller in MVC for the view layer, it responds to view lifecycle events by triggering other controllers and translates those other controllers' response to the view layer, typically done by passing a model object to the root view (the `view` property of a UIViewController subclass) which then forwards the appropriate stuff to it's subviews. Navigation controller can refer to "coordinator"s which know what type of view and view controller is needed to present data on a different screen and how to present it for the current context. It can also refer to UINavigationController which is part of iOS's UIKit and it provides horizontal navigation and a navigation bar at the top with built in back button, optional title and optional right bar button item(s), it also has an interactive pop gesture recognizer which handles swiping back.
Super exciting! With a good wrapper for UWP/MFC or Win32, within the next couple of years we could feasibly create projects with a common core and thin native UI layers all written in Swift. We have AppKit on Mac and GTK+ on Linux already, just need to get Windows covered!
Flutter ❤️
You probably assign a Data object to your URLRequest’s httpBody. Most likely you need to get the HMAC of that data and add it to your request somehow. There are simply too many variables here to give you a complete answer.
This is what I would do. 
I'm seriously considering jumping in. I'm currently taking Design + Code's Swift lessons, which touch on some of the concepts you go over. Is 100 Days of Swift worth doing for someone who's pursuing a product management career, not quite iOS development?
Do you really think all that was required for this was "making some tests pass?"
Yes that makes sense. Thank you. So for a simple example, I could have an app that had a single navigation controller that controls say-10 view controllers and each of those view controllers manage a view? Also, I understand that a single navigation controller can control multiple view controllers, so can a single view controller manage more than 1 view or is it 1 to 1? 
It involves UIBezierPath and masking. I didn’t understand Bezier paths at first but this site really helped me understand them better: [Thinking Like a Bezier Path](http://ronnqvi.st/thinking-like-a-bzier-path). As for the masking, it can be done through the CALayer backing the view or by using the [`mask`](https://developer.apple.com/documentation/uikit/uiview/1622557-mask) property of UIView. Here is a simple example: [How to Mask One UIView Using Another UIView](https://www.hackingwithswift.com/example-code/uikit/how-to-mask-one-uiview-using-another-uiview). Both sites are also generally a really good source of tips and useful ideas. 
I am using this piece of code to POST data to REST API but it retrieves the same value each time. let url = URL(string: "")! var request = URLRequest(url: url) request.httpMethod = "POST" request.addValue("application/json", forHTTPHeaderField: "Content-Type") // prepare json data let json: [String: Any] = ["likes": 11] let jsonData = try? JSONSerialization.data(withJSONObject: json) request.httpBody = jsonData let task = URLSession.shared.dataTask(with: request) { data, response, error in if let response = response { print(response) if let data = data, let body = String(data: data, encoding: .utf8) { print(body) } } else { print(error ?? "Unknown error") } } task.resume() 
Help please.
A view controller manages ALL of the views that make ups a screen (views can contain more views, so it gets complicated but the View controller knows about the parent views and the parent views manage their children) &amp;#x200B; An example: A table view controller has a big view to sort of hold everything. That view has a scroll view (so we can scroll the table) and a view to contain the little scroller bar on the right and a view to contain all of the table view cells. Each table view cell has a single parent view and then a bunch of views inside of it (there might be a label and an image or a little button, each of these renders on the screen as a view). As you scroll a table view, the table view controller determines what views to render and to kill so that the new cells get drawn just before they need to scroll onto the visible part of the screen and after they scroll off the memory gets released. The views themselves don't worry about any of this they just tell how they are to be drawn when the view controller asks them to draw themselves. And when the controller tells a parent view to draw, the parent tells the children to draw.
Ah, is that flutter? It very much reminds me of Google’s Material Design standard from years back.
Are you using a Navigation Controller
Perfect. Thank you
Can you show in your example where the API wants the HMAC signature? Is it a separate header variable or do you just HMAC the whole body? To create the signature, you normally import the CommonCrypto library and then use the CCHmac command. You'll need to do a little googling to find a good example for how to set up the data to make the call. Because CCHmac is in C and so if you just know Swift, it will take some copy and paste and trial and error to get it working.
Thanks you soo much !!!!! I working with TensorFlow with Swift and this help me a lot . Have a good day , good man 👍🏻
This has nothing to do with swift. 
Core graphics is kinda the Apple equivalent of skia and is what the op should look into for this kind of thing. The general idea is you send a bunch of drawing commands to a context and the os will render. In the case of iOS the context will typically be the current context in a uiview. 
I'm working hard to add explanations to all the tests – there's about 1600 questions in total, and about 1100 now have explanations. However, as you might imagine, it takes quite some time to add the explanations, so I'm doing it as fast as I can :)
keep doing what youre doing. the changes are small, especially for the beginning stuff. i have an entire swift4/spritekit/coredata game and it had zero changes to make for conversion &amp;#x200B;
You will be fine learning Swift 4 but there is more to programming than learning a language. As such I’d suggest moving to Swift 5 now. Much of the Swift 4 world is applicable to Swift 5 but you gain that all important ABI compatibility. If you don’t move to Swift 5 now, keep an eye on WWDC. Most likely the next versions of iOS and Mac OS will be completely ready for Swift 5. I’m expecting Apple to push developers hard to move to Swift 5 and the latest and greatest from WWDC. 
Here is a Playground that shows how to mask using a BezierPath. This is very rough but should give you a good example for how to do something like this. Sorry for the wall of \`lorem ipsum\` just wanted to show content scrolling behind the masked image. //: A UIKit based Playground for presenting user interface import UIKit import PlaygroundSupport class MyViewController : UIViewController { override func loadView() { let view = UIView() view.backgroundColor = .white let scrollView = UIScrollView() scrollView.translatesAutoresizingMaskIntoConstraints = false view.addSubview(scrollView) scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true scrollView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true let contentView = UIView() contentView.translatesAutoresizingMaskIntoConstraints = false scrollView.addSubview(contentView) contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor).isActive = true contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor).isActive = true contentView.topAnchor.constraint(equalTo: scrollView.topAnchor).isActive = true contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor).isActive = true contentView.widthAnchor.constraint(equalTo: view.widthAnchor).isActive = true let label = UILabel(frame: .zero) label.translatesAutoresizingMaskIntoConstraints = false label.numberOfLines = 0 label.text = """ Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed in posuere lacus. Suspendisse quis nisl posuere, ullamcorper ex nec, viverra leo. Suspendisse sollicitudin enim et tempor tempus. Praesent aliquam enim vel metus iaculis, facilisis interdum elit eleifend. Duis efficitur mi sit amet pulvinar condimentum. Sed mattis, sem sed rhoncus posuere, arcu sem blandit sapien, vitae varius massa libero lacinia felis. Morbi vulputate et lectus rutrum vestibulum. Nunc posuere, leo id dictum aliquet, odio mi hendrerit nibh, a iaculis sapien risus at nisi. Curabitur orci sapien, molestie quis molestie in, tristique sit amet metus. Cras feugiat euismod tempor. Proin quis odio nunc. Duis eu scelerisque augue. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur ante urna, fermentum nec laoreet sed, ullamcorper tincidunt lectus. Etiam suscipit dignissim sapien a aliquet. Aenean egestas enim gravida viverra cursus. Cras eu aliquam nunc. Fusce tristique faucibus felis. Aliquam vel magna nulla. Quisque ullamcorper nisl dolor. Nunc placerat orci in ex rutrum posuere. Sed imperdiet quam mauris, nec pellentesque lacus sodales eu. In hac habitasse platea dictumst. Donec lectus lectus, facilisis vitae cursus lacinia, varius ac felis. Donec venenatis luctus mauris, eget fermentum nunc commodo a. Integer ultrices tortor urna, porttitor imperdiet ipsum egestas non. Fusce eu metus nec mi faucibus pretium nec a purus. Phasellus gravida sed nibh at rutrum. Praesent enim tortor, facilisis sit amet orci non, pellentesque efficitur mi. Vivamus id viverra felis, sed pretium turpis. Aliquam maximus eleifend neque vitae finibus. Duis et enim pellentesque, sollicitudin eros in, varius nisi. Etiam iaculis faucibus massa, quis pulvinar urna egestas non. Nam et ex vestibulum sapien tempor consequat ac et risus. Curabitur rutrum laoreet odio quis elementum. Aenean in odio ac ex egestas bibendum. Etiam dignissim varius metus vitae scelerisque. Duis ornare et ex non vestibulum. Phasellus a tempor nulla. Pellentesque felis libero, lobortis vitae lobortis at, faucibus id risus. Integer ut ultrices quam, vitae suscipit lectus. Nunc elementum neque purus, id eleifend nibh aliquet in. Nunc posuere risus a urna congue ullamcorper. In hac habitasse platea dictumst. Nunc pellentesque nisl et facilisis semper. Mauris ornare sodales lacus, cursus interdum libero semper a. Donec eros tortor, semper vel sem eu, egestas viverra quam. Nam non dolor sollicitudin, tempor quam in, vestibulum tellus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec commodo augue sed erat viverra, vitae bibendum lacus condimentum. Praesent sed dolor non velit pharetra mollis. Quisque lobortis tellus in diam dignissim, non posuere nulla lobortis. Donec dignissim nibh eget sapien interdum fringilla. Pellentesque quam massa, viverra ac urna in, vulputate tincidunt ipsum. Morbi accumsan, diam quis consectetur faucibus, quam tellus pharetra mauris, porta aliquet magna metus nec tellus. Ut vitae ligula eget orci luctus bibendum ut vel velit. Sed mauris ex, pharetra in ipsum non, rutrum volutpat elit. Nullam ut lacinia enim. Donec ultricies massa tristique pharetra convallis. Quisque gravida magna vitae sapien elementum rutrum et id metus. Sed semper dolor sit amet risus ullamcorper placerat. Integer nec cursus metus, a tempus felis. Cras sodales ipsum odio, in maximus justo faucibus sit amet. Curabitur vel accumsan augue, eu ultrices ligula. """ contentView.addSubview(label) label.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor).isActive = true label.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor).isActive = true label.topAnchor.constraint(equalTo: scrollView.topAnchor).isActive = true label.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor).isActive = true label.widthAnchor.constraint(equalTo: view.widthAnchor) let image = UIImage(named: "girl.jpg") let imageView = UIImageView(image: image) imageView.translatesAutoresizingMaskIntoConstraints = false imageView.contentMode = .scaleAspectFill view.addSubview(imageView) imageView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true imageView.trailingAnchor.constraint(equalTo: view.trailingAnchor).isActive = true imageView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true imageView.heightAnchor.constraint(equalTo: view.heightAnchor, multiplier: 0.25).isActive = true // Here is the masking let maskPath = UIBezierPath() maskPath.move(to: CGPoint(x: 0, y: 0)) maskPath.addLine(to: CGPoint(x: 768, y: 0)) maskPath.addLine(to: CGPoint(x: 768, y: 300)) maskPath.addLine(to: CGPoint(x: 0, y: 200)) maskPath.close() let maskLayer = CAShapeLayer() maskLayer.frame = imageView.bounds maskLayer.path = maskPath.cgPath imageView.layer.mask = maskLayer self.view = view } } // Present the view controller in the Live View window PlaygroundPage.current.needsIndefiniteExecution = true PlaygroundPage.current.liveView = MyViewController() 
Those 2 things aren't mutually exclusive. One is a development framework and the other is a design language. Material design is also still very much in use.
Have you seen Swift/Win32 by compnerd? [https://github.com/compnerd/swift-win32/](https://github.com/compnerd/swift-win32/) seems to at least have a start and had some commits within the last week.
That’s a lot to add. Again thank you for what you are doing, for free! It’s awesome
If your cell is defined in a XIB, you need to instantiate it from the XIB. If you instantiate it directly from the class, anything you hooked up from the XIB instead of directly in code, such as your outlets and actions, will NOT get hooked up. So then you get your "Unexpectedly found nil while implicitly unwrapping an Optional value" crash when you try to access any of those implicitly unwrapped outlets that never actually got hooked up. Think of it like the difference between instantiating a view controller by doing this: let vc = FooVC() instead of this: let vc = storyboard?.instantiateViewController(withIdentifier: "FooVC") as? FooVC So what you need in your case is similar: songTableView.register(UINib(nibName: "LyricsCell", bundle: nil), forCellReuseIdentifier: "lyricsCell")
Remember it’s always rectangles at the fundamental level. Compose with background images if you can and avoid drawrect if possible as general rule of thumb. So it’s an image that looks like the area that includes the red area and the white area beneath it at least to the max Y value of the red. 
This is ... not a very good article. &gt; How Making Models Structs is Almost Always the Right Decision This article is full of false statements, and merely misleading statements. It links to StackOverflow questions which aren't about Swift, or where the link text doesn't really match the StackOverflow content. There are truths and useful information here, but anyone who is experienced enough to know which parts to ignore already knows the good parts. In the areas where I have experience, the article is wrong. In the areas where I don't have much experience, I assume the article is not to be trusted there, either. &gt; Apps are getting BIG. Like six figure lines of code big. Oh you poor soul. You think that's big? I've got 6 figures worth of *header files* here. Applications have been that big for many decades. &gt; Learn to Earn More, Use the modern coding techniques, App Entrepreneurship and more by signing up here. Oh, so it's blogspam.
Use an image for the static gray part. Most efficient way. 
That did the trick. Thanks, was getting frustrated. &amp;#x200B;
Generally this is not how you'd go about this in Swift. First of all, this sort of data is best held in a `struct` instead of a `class. That's because this is what we call a POD (plain old data) object. You build models with POD objects and use classes for objects which need reference semantics, things that you are going to access and modify in many places and which might need inheritance. Secondly there's no real need for getter and setter methods because the properties themselves can serve as that. Example: struct Pet { let name: String let age: Int let details: String } let foo = Pet(name: "Fluffy", age: 10, details: "A dog.") print("Name:", foo.name) print("Age:", foo.age) print("Details:", foo.details) As you can see, we have the type definition, instance creation and initialization, and the getters for the type all done. No need for defining methods at all, we get them for free for using a `struct`. In addition, if you do this you get the ability to decode to and from JSON automatically: struct Pet: Codable { Of course, you have to create a full model which follows the API you're reading. 
You are good at explaining.
`.joined()` seems the exact solution! Thank you.
I read a little bit about the evolution of `.flatMap` and `.flatten() -&gt; .joined()`. It appears they are both extremely similar with the exception that `.joined()` is *always* lazy. Thanks you.
That's not how it works. The tableView manages it's views, not the controller. The views don't get deallocated when they go out of the screen, they get reused. UITableViewController is just a violation to single responsibility principle, it wants to act as a view controller and a tableView data source. A complicated screen can easily have multiple controllers if there are multiple distinct tasks that are done on the screen.
Thanks. Yes, it's obviously nice to not need to copy a huge variable to modify some small part of it. 
If you take a function like this: `func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell` The signature would be: `tableView(_:cellForRowAt:)` I wonder if he’s wanting you to just stub out the functions. Basically, define the function without actually implementing it, and including appropriate documentation above it for your parameters. 
I work as a web developer and usually those kind of “style” are just an image our graphic designer whipped up
Don't like StackOverflow for the same reason. Condescension is all but helping.
Jesus, please use complete sentences. Spell the words. You're typing for others to read, not for your own convenience.
Maybe I’m just getting too worked up about this. I tend to get emotional late at night. At the same time I feel like this is what’s holding most of the people off from posting new and possibly very decent questions.
Yes, things can actually get very complicated and I used terms that can gloss over some of the trickier details, I agree. But I am trying to keep with the spirit of ELI5. 
I'd love more questions on the platform due to the fact if I look something up it's about swift 2 or swift 3 which have some huge differences to the new versions
Can you link your question? 
I'd go with UIImageView with transparent bottom triangle (white part crossing with menu button) - so views above "My Tasks" would habe hierarchy: \- Ryan Barnes label \- Menu button \- Grey vertical line (left side) view \- UIImageView - png with transparent triangle (Easy to do with PS or gimp) \- White background
In your original code, `mainUnderlineBarLeftAnchor` is probably some property in your view, and your code sets that property in the line `mainUnderlineBarLeftAnchor = mainUnderlineBar.leftAnchor.constraint(equalTo: control.leftAnchor, constant: 0)`. Your new code with the `var underlineAnchor = underlineBarAnchor` does not make sense: you assign a value to `underlineAnchor`, then overwrite it immediately in the next line. As is, the the `underlineBarAnchor` parameter is not used in your method, and the `underlineAnchor` you create isn't stored anywhere (which is probably why you get nil for that later). For a solution, it depends a little bit on what you want to accomplish. It seems that you need to be able to use the `underlineAnchor` later on, because you store it in a property. So one thing you could do is let `underlineSegmentedControl` store the underline anchors in an array property: - Use this if you treat the left anchors the same, and don't care too much about which is which - Instead of `mainUnderlineBarLeftAnchor`, have a property `var underlineLeftAnchors: [NSLayoutConstraint] = []` - In `underlineSegmentedControl`, just drop the last parameter, then create your `underlineAnchor` and append it to `underlineLeftAnchors`. - Later on, access your anchors from the array. Another thing that you could do is to just have `underlineSegmentedControl` return the `underlineAnchor`: - Again, drop the last parameter, and add a `-&gt; NSLayoutConstraint` to the method signature - Create the underline anchor and return it - When you call your method, do something like `mainUnderlineBarLeftAnchor = underlineSegmentedControl(underlineBar: ..., control: ...)`
You spent only an hour to fix the bug? StackOverflow is a pretty good place to solve 95% of problems, but those 5% you'll have to often solve yourself. And if you do - trust me, it feels much better than copy paste from stack. 
If you're trying to record your touches (I think you do) try using TouchVisualizer pod. And you can just record screencast from phone (using QuickTime player) and watch it later.
I believe what your prof is asking for is information so that if he wanted to use your class, he would know what to call. How do you intend the class and methods to be used. So in this case, how are you passing which entity to retrieve? Is it part of the constructor of the class in which? Or is it for each individual method? pet = GetPetInfo(petId: String, apiKey: String) pet.getName() pet.getOtherField() Or pet = GetPetInfo(apiKey: String) pet.getName(for petId: String) These are just examples. There’s other ways to structure these operations. 
Using Swift 4.2
Use "!" `let itemProvider = extensionItem.attachments?.first!`
Well, assuming `extentionItem.attachments` is non-`nil`, then calling it's `first` method will just return a `NSItemProvider?`, so there's no need for a typecast. Just use something like: guard let itemProvider = extensionItem.attachments?.first else { //return, throw, whatever's appropriate} let propertyList … blah, blah, blah
I've just finished new offline version of my puzzle app. It cost me a lot to use UITextView for sophisticated input control, check it out if you want. [https://itunes.apple.com/app/matchupicture/id1323984271](https://itunes.apple.com/app/matchupicture/id1323984271)
I feel you. StackOverflow is so discouraging sometimes
StackOverflow is just toxic. 
Also - generally it's not a good idea to force unwrap or force cast, because if the cast fails or you have nil, you'll crash. Make your intentions and code clearer by doing something like this: guard let unwrappedString = someOptional as? String else { // handle this error. } And if you have to crash if that conditional fails (by calling assertionFailure() for example) then at that point you've made it explicit that this code can crash, rather than hiding that behind explicitly unwrapped optionals or forced casts. 
Link to the question or post it on here, lots of ya here are much more willing to help
Thanks!
Great, thanks! 
What's the question, though? Seriously, if you're having such a problem - why not post it here as well? :/
It's not overreacting. You put a lot of time into your code. You put time and thought and consideration into your question sincerely hoping for help. Condescending unhelpful people put neither time nor consideration into their answer. With my own xp with swift - the community's knowledge base is very poorly developed beyond the basics and questions beyond that scope usually go unanswered. When you finally get an answer after hours or days of waiting and being dead-ended and it's garbage, it's really just the equivalent of being spit on. I have a dev with 20 yrs xp to turn to when I reach dead ends, but he couldn't figure out some issues with swift errors - then the community gives a spit-on-you answer. It's not because they know and don't want to tell you. They don't know it. It's because they hate their life and like to spit on other people online.
The issue has been resolved with a patch to the mysql driver. See my reply for more info: https://forums.swift.org/t/memory-leaking-in-vapor-app/22209/43?u=tanner0101
Error: Hugs not available. 
We havent even got half way to explaining any of this, he is asking us for things we never even were taught, which is why I am confused. So I cant really say how everything will work since I dont even know how they normally work in the first place. I have never worked with JSON in swift or anything at this level. Sorry for not having more information for you.
I would like to go off and do struct but he strictly wants classes and their methods and if they are Model, View or Controller. I am not to diverge from that. I do appreciate the insight though.
Stackoverflow is useless. It’s full of pretentious moderators and seasoned developers who don’t really want to help you. 
Do you need an emotional support swift?! Too bad, you just unwrap an optional support animal!
Yeah, here it is: https://stackoverflow.com/questions/55488386/
Post in question: https://stackoverflow.com/questions/55488386/ It’s been resolved, though I do wish to know more about why the heck Swift told me that I’m apparently calling a function - that error message seems wonky to me ._.
Linked it :) It’s been resolved since, but the logic in the error message still sounds wonky in my head
Oh boy that’s rough. Have you changed the class name?
I think the condescension isn’t called for but at the same time I don’t think the answers are that condescending. The reason you are having trouble with this is because you don’t fully understand the fundamentals that make this an error. These fundamentals aren’t exactly taught anywhere, they tend to be learned and that’s why people can seem condescending. They forget the time when they didn’t know this either. The most basic way to think about it is that initializers are special. You can’t use self at all if you haven’t initialized everything. Making something optional tells the compiler that it can be initialized to nil
Having reddit as an Optional support base was the wrong choice 😪 ^^^I ^^^love ^^^you ^^^guys
Get rekt 
Oh wow, thanks a lot! The last paragraph cleared it up for me :D And after some sleep I realize that I probably took his answer more negatively than I should have - in the end he did supply a longer answer.
Well, I know it won't take that original feeling away... but the question is no longer in the negative (I wish I could give more up votes 😌) Swift is so powerful and is open to so many conventions and paradigms that it can be extremely painful to learn solely from build failures. There are open issues in the Swift repo to clarify some opaque compiler error messages. Maybe I'll work on that this year. 
I noticed you still seem to be confused as to why you got that error, maybe I can help. Your code can be reduced to this: class C { var member: Int // 1 init() { member = someFunction() // 2 } func someFunction() -&gt; Int { return 0 } } What happens here is that you're trying to instantiate C, so the init() is executed. **member** does not have a pre-set value (1) and you call **someFunction()** (2) to assign a value to it. But, calling **someFunction()** is the equivalent of calling **self.someFunction()**. Since **init()** has not finished setting a value for each of the instance properties, **self** is not yet initialized, therefore it is impossible to call someFunction() from that point. **self** can be considered as initialized only when all of it's properties have been populated. You got a handful of solutions: 1. Define a pre-set value at (1). In this case it's an easy fix and I'd probably choose it as well. 2. Define **member** as an optional. When that happens, as init() executes there are no more properties to initialize so **self** is considered to be fully initialized, which means you can safely call **someFunction()** to generate and associate a value to it. The downside is that you're gonna litter the code with question marks every time you access **member**. 3. Similar to 2, but brings some clarity to code which uses **member**: define it as an implicitly unwrapped optional, basically define it as **Int!**. The ! means you're telling the compiler "treat this variable as if it's initialized. trust me, I will initialize it later". The compiler will indeed trust you, but if you don't initialize it, as soon as you read or use that variable, it's gonna crash. The advantage of this is that you won't litter your code whenever you try to access **member** with question marks.
A good night sleep and your answer do make me feel better 🙂
I think it depends on what your priorities are, and what you plan to build. If you want to learn the iOS ecosystem, then use Core Data. But then you’ll have more that you’ll have to build yourself if you want all the functionality that Realm offers. If you don’t care about improving your skills with the iOS libraries such as Core Data and others, then use a third-party thing such as Realm. Downsides to this are having a larger source code dependencies, more source code to build each time, and dependence on a third-party vendor and service including possible fees. This is how I would make that decision. It would help if you can clarify what precisely you intend to build.
Thank you! Though I’m not calling the function, I’m merely setting a variable to point to a function ``` class C { var member: () -&gt; Int init() { // no braces here! member = someFunction } func someFunction() -&gt; Int { return 0 } } ``` And the error makes it sound like I’m calling the function even though I clearly don’t want to!
Haven't used CoreData in 5 or so years and from what I gathered it's grown into a more usable API, but I use Realm every day so maybe this insight will help you. The good: * It's fast, like really fast. I haven't hit any significant bottlenecks with tables of tens of thousands of entries and 40 or so columns. You just need to make sure you index any and all columns you will search into. * You can search/filter using predicates. * When you perform a search, the objects in that search are not immediately pulled from the database, they will be created only when you actually access them. * Migrations are trivial. I still have nightmares from the CoreData migrations, so when I saw that for Realm a migration is just a bump in the schema version (and possibly updating any rows affected by the migration), I could not believe it. * It's got encryption. This was a huge plus because the app I am working on needs to store the data in an encrypted database. All I had to do was set up a password. Easy. * Updating an object automatically updates all other instances of that object, regardless of thread. * It's suprisingly bug-free. Been using it for 3-4 years, I don't remember ever encountering a Realm bug. The bad (better said, inconvenient): * You **WILL NOT** touch any object that was fetched on another thread. That is an immediate crash, no questions asked. Initially I feared that performing searches in the background will be impossible, but what you can do is perform a search, get a result set, collect the primary keys and pass the primary keys to a handler on the destination thread where you can actually pull the objects from the database. If I recall correctly, it's not so different for CD either. * The Realm core is closed source (at least it was, I kinda remember a vague promise that it will be open sourced sometime later).
Of course, you're right, you're not calling it, but you're still basically accessing ***self*****.someFunction**, and because **member** has not yet been initialized, **self** is not accessible at that point.
Yeah, I read that calling self-functions was a no-go during initialization, but for some reason my mind didn‘t want to click that this also involves accessing function pointers. Thank you for clearing that up!
&gt; At the same time I feel like this is what’s holding most people off from posting new and possibly very decent questions. You know what will hold them off even more? If the regulars stopped providing answers because they get annoyed too much. Last time I checked around 90% of the questions in the iOS related tags are absolutely shit and low effort personal help requests. You can only get that under control with zero-tolerance downvoting and a heavy-handed closing policy. And while your question is not that bad, I would have used my super-powers to close it as a duplicate of [Calling instance method during initialization in Swift ](https://stackoverflow.com/questions/28646838/calling-instance-method-during-initialization-in-swift). And you would have complained about one of those assholes closing your question in this thread. Would. If I would still spend an hour or two per day to help others out. I stopped doing that 2 years ago after answering ~1200 questions and getting ~8000 upvotes. Because I could no longer stand the massive amount of low quality questions. 
Realm is faster but you need a really big database for that to matter. So if the developers working on the project doesn't have any preference for one and it's not a "learn how to use Realm" project, I'd go with CoreData. Or if it's a learning project, you could create a protocol and implement a wrapper for both, so you can just change a bool to choose which one to use.
&gt; I would have used my super-powers to close it as a duplicate of Calling instance method during initialization in Swift I‘ve seen that SO post, but it‘s _not the same_ (to me at least). He‘s explicitly calling the function, but I‘m _not_. I do understand however that having lots of low-effort questions are depressing after some time.
Why do you want to use Xcode 9.4.1? I don't think you can submit to the app store using that anymore.
I've run into the same problem, but almost exclusively for swift issues. For other languages, I've found even simple questions to garner more helpful and supportive answers. For me, one of the big issues I've run into for swift is that people will try to literally answer the question without any additional help. I had one issue where my approach was wrong, but someone tried to dig me deeper into the hole to solve the exact problem I was running into with it, where a friend saw it and said "oh, that's not how you're supposed to do that" and pointed me in the right direction (I was trying to trigger something in one ViewController from another). Another user suggested asking a coworker since I work in a place that is known for doing swift, but my division doesn't really use it; I was learning on my own on the side. Like, wtf, dude. what help is that? The elixir and server communities have been much more helpful, in my experience.
It‘s always great to receive answers that cause more headaches and errors! Swift has also been the hardest language for me to find good answers to. Googling for help on Java, C, C++, C#, web-stuff, Golang was child’s-play compared to that and I don‘t get why ._. (to be fair though C / C++ can be equally frustrating with their obscure error messages)
Learning and using Realm is 10x better. Things are just simplified and makes more sense because the objects/entities are literally regular class codes. Core data only works for iOS. So, if you ever have a need to add an Android version to your app, you need to learn and use another database. That's a pain. Realm works on both iOS and Android. Codebase are fairly similar. 
Try not to take it personally; StackOverflow is run by a bunch of people with chips on their shoulders. Unfortunately you'll run into the same thing during code reviews at some companies.
I'd go with realm. It easier to understand at the beginning (it was for me). Many of my friends using CoreData has switched to Realm right after first tries. It took me like 1 day to learn the basics and use it in real project.
Yeah I have some experience with that. Can be hard sometimes to take the feedback as objectively as possible. Coming to r/swift however has helped brighten my mood :)
Running Sierra. 
Could still make Mac apps and tools.
I can probably help you. Let me download it on my server, then you can grab it via rsync or such. Will PM you within 30 minutes.
Yeah, you're right, UIKit stuff happens automatically on the main thread. Were you able to solve it @mightymander?
Core Data, the reason most of us drifted away from using it or opted for using third party libraries to use it, was because it sucked, but it's actually great enough to be used natively now :) has been for the past year or two (forgot exactly when they introduced all the changes to CoreData)
The changes are minimal enough to continue working with the Swift 4 material, but feel free to update Xcode and work with Swift 5. You'll very occasionally find a discrepancy, but generally everything will still be relevant.
Agreed, I opted using Realm in one project, and after hitting the nuisance for background fetchs, I must say that for a later project I am glad I went with Core Data. They are still lacking in the migration part, and I wish they had something similar to what Realm does
 self.explanatory
`self.flipTable()` `Error: 'self' used in method call 'flipTable' before all stored properties are initialized.`
9.2.1 is highest on sierra
Just out of curiosity... If you subclass `NSObject` and call `super.init` in the beginning of your constructor, does it work?
No, got a `'self' called in method call 'beat' before 'super.init' call`. Probably should be happy about it, otherwise I would completely lose my mind.
Actually, [realm-core](https://github.com/realm/realm-core) has been open-source since September 2016.
That makes sense
I wrote a generalized solution to a generalized version of your question: [https://stackoverflow.com/a/55501150/1311272](https://stackoverflow.com/a/55501150/1311272)
Swift was sure hard for me and I blame that partially on Swift the language being so separate from the ui frameworks on macOS and the rapid rate that the language has been evolving. The community also really needs to be more helpful. I don’t understand how the culture got that way. One thing that I will give super high praise to, on both stack overflow and other learning resources online, is that examples are updated over time for new syntaxes introduced over time. I saw solutions that were posted in 2015 updates 2 or 3 times for newer versions of Swift. 
The question is indeed very dumb though
Don‘t rub salt into my wounds :(
Realm is f'ing massive and a huge pain in the dick to compile if you're using Carthage. Realm also has a lot of gotchas as well. After using it for a few years, I definitely would recommend Core Data.
You can download older versions directly from Apple. https://developer.apple.com/download/more/
One option is to make it a lazy var. You can do `lazy var member = someFunction()` That way the variable is only evaluated when you use it, not before init.
Missed the most important thing about the new string literal feature: they are not raw strings! 
🧂🧂🧂🔫
"Last time I checked around 90% of the questions in the iOS related tags are absolutely shit and low effort personal help requests. You can only get that under control with low-tolerance downvoting and a heavy-handed closing policy." &amp;#x200B; Seriously, what is wrong with you? If you already know how to do something, it seems obvious. If you don't know something, it doesn't seem obvious. In fact, if you don't know something, it can be rather hard to figure it out, especially with Swift. &amp;#x200B; This is why people say coders are a bunch of neckbeards. 
Why are you using storyboards? From my experience XIBs are better when you are building UI in the interface builder since they allow you to have a custom initializer that calls super.initWithNibName:bundle: which means you can pass in the required parameters in the init and you don't need a factory method that sets these up after instantiating from storyboard which results in less non-optional optionals which make the code easier to understand. They also help you avoid merge conflicts when modifying different screens because they are also in different files.
Maybe try UX?
UX?
Agile guesswork and Figma.
Hey, thank you so much! Coming from other languages, I really want to work with Swift as something other than just some abstract C++ variation. Answers like these really help teaching me stuff that I didn‘t know existed (you don‘t know what you don’t know)
What bothers me so much is when you have a question and someone just links to another question that could be in Objective-C or early versions of Swift that you can’t even understand. Also, for newcomers it can be very hard to figure out how to apply code to your project from another project, which is very different from your own. I agree though, StackOverflow is very hard to find information on, and most often people can be very condescending. 
The changes in terms of external APIs are drastic. But still it is a very big release as Swift is finally ABI stable. I wrote [an article](https://medium.com/swiftify/enum-in-swift-5-19b324b25f94) based on handling different enum types ie non-frozen and frozen enum in Swift 5.
Love this joke... or is it a joke?
Yeah :)
I updated all the projects in [Swift 30 projects](https://github.com/soapyigu/Swift-30-Projects) to Swift 5 and opened a pull request. Updated [Swift 5 projects](https://github.com/Swiftify-Corp/Swift-30-Projects) can be found here. 
It‘s also infuriating when they mark it as duplicate to another question that sounds similar but actually solves a different problem ([just like him](https://www.reddit.com/r/swift/comments/b8uvvt/you_know_what_grinds_my_gears/ek12jlf/?utm_source=share&amp;utm_medium=ios_app)) I feel like at some point they need to reset all Swift questions and only allow answers from version 5 and up. Those first four versions had so many changes, it‘s ridiculous. (although I do like most of the changes)
I totally agree with you
Ah, I see. I‘m not looking for UX design stuff yet, but if I do I‘ll take a look at this 
Whilst your points are valid; there are many valid reasons for using storyboards over other solutions. As with anything, it comes down to picking the right tool for the job. As for your last paragraph; you can - and should - break up storyboards into smaller files. That will also mitigate merge conflicts somewhat. 
So what is the advantage of storyboards?
You use [InputStream](https://developer.apple.com/documentation/foundation/inputstream) Roughly: import Foundation if let input = InputStream(url: url) { let bufferSize = 1024 let buffer = UnsafeMutablePointer&lt;UInt8&gt;.allocate(capacity: bufferSize) input.open() defer { input.close() buffer.deallocate() } while input.hasBytesAvailable { let readCount = input.read(buffer, maxLength: bufferSize) // use buffer here } } 
Shiiiit you like One Piece too? Nice. 
&gt; From my experience XIBs are better when you are building UI in the interface builder since they allow you to have a custom initializer ... Do you just post this same complaint in every thread, even [when it's not relevant to the question](https://old.reddit.com/r/swift/comments/b8ghi9/i_cant_hold_control_and_drag/ejy9z5w/)? &gt; They also help you avoid merge conflicts when modifying different screens because they are also in different files. With Storyboards, you can split things into separate files any way you wish.
Yo booooyy, whazzup fam!
What is interesting here is that nobody answered the real question: “I’m not calling the method, I’m referencing it.” Surely just referencing an instance method does not access `self`, right? Well, not exactly. There are a few ways to reference a method in Swift. Let’s say you have a class: class BeatMaker { let hapticFunction: () -&gt; Void func beat() { ... } func beatFallback() { ... } } There are a few ways to form a reference to a method: ### On the type itself You could form a reference directly from `BeatMaker`, like so: let reference = BeatMaker.beat This reference will have this type: (BeatMaker) -&gt; () -&gt; Void You can read this as 'a function that takes a BeatMaker and itself returns a function that returns `Void`'. The important part is that, because it is a reference to a method, *you are responsible for providing it a `self`*. ### On a value of the type If, instead, you reference the method like this: let reference = myBeatMaker.beat It will have this type: () -&gt; Void Why is that? Well, because `self` is available (it is actually `myBeatMaker`), the compiler will *partially apply* this function. ## What is 'partial application'? Partial application, as implied by the name, is when you apply _some_ of the arguments to a function, and leave the rest to be filled in. Let's look back at the two references we made: let myBeatMaker = BeatMaker() let typeReference = BeatMaker.beat // has type (BeatMaker) -&gt; () -&gt; Void let partiallyApplied = myBeatMaker.beat // has type () -&gt; Void What has the compiler _actually done_ here? It's essentially pre-passed `self` into the first kind of reference. You can think of the two kinds of methods like this instead: let typeReference: (BeatMaker) -&gt; () -&gt; Void = { someBeatMaker in { someBeatMaker.beat() } } let partiallyApplied: () -&gt; Void = BeatMaker.beat(myBeatMaker) Notice that in the `partiallyApplied` case, the first level of function is stripped off, as we've provided the `BeatMaker` to the first function. Now we have a second function we can call with no parameters to provide the behavior we're after. ## Putting it all together Now that we know how partial applications work, let's go back to the code you've posted: init(supportsBeatGeneration: Bool) { self.hapticFunction = supportsBeatGeneration ? beat : beatFallback } Let's _desugar_ this, to see where the trouble lies: init(supportsBeatGeneration: Bool) { let beatReference = { beatMaker in beatMaker.beat() } let beatFallbackReference = { beatMaker in beatMaker.beatFallback() } self.hapticFunction = supportsBeatGeneration ? beatReference(self) : beatFallbackReference(self) } _Now_ the issue is clear -- you're partially applying a method that _captures_ `self`. That use of `self` before the `hapticFunction` property has been initialized is the source of the error. ### One more bug Now, here's another thing the desugaring reveals: You're storing a closure that references self as a stored property. In Swift, everything that a closure _captures_ will be _retained_ if the closure is passed outside this function. Since your closure _captures `self`_, that means this closure will retain `self`. And since the closure is a stored property of `self`, that causes a _retain cycle_. This is something that's really tricky and hard to detect if you're not fully aware of partial applications and closure capturing rules. The suggestion given on Stack Overflow to instead check the `Bool` inside `beat()` and do away with `beatFallback` is the correct answer, as it will avoid the retain cycle here. Hope I could help!
Can’t you pass a variable where the contents would be hard coded ?
Technically speaking, if a thing isn’t close to self-evident (no pun), aren’t widely taught and are usually learned only by trial and experience, they can’t really be called “fundamentals”. 
Yes, you can. 
Not sure if you are interested, but the Vapor discord also have a Swift channel 😊 http://vapor.team
Here's a tutorial: [AudioKit Tutorial: Getting Started](https://www.raywenderlich.com/835-audiokit-tutorial-getting-started)
You hit the nail on the head with this one. I really have trouble getting the point across of what I _actually_ want to know. And I try to just be satisfied with what I get. Follow-up question, if you don‘t mind: I am able to do the following ``` private let f: (BeatMaker) -&gt; () -&gt; () init(canDo: Bool) { f = (canDo) ? BeatMaker.beat : BeatMaker.beatFallback } private func beat() {} private func beatFallback() {} func hitIt() { self.f(self)() } ``` If I understood your One More Bug part correctly, I‘m essentially passing self to the function each time and it will not be retained - is that right? If so, could I go with this?
You're spot on -- since that closure no longer captures `self`, you're able to do this without a retain cycle. I also think there's value in adding a diagnostic that better detects when you're accidentally capturing `self` and assigning it to a stored property of `self` -- there's nothing special about `self` here either, a developer could have just as easily written myBeatMaker.hapticFunction = myBeatMaker.beatFallback
Dude, you‘re awesome. Feel free to add it as an answer on SO, this is exactly what I was looking for
True but I misspoke. What I meant by fundamentals is logic and computer science fundamentals. Knowing what the compiler is doing and why. These are theoretical things that are taught when learning computer science. Language specific intricacies are not taught, but the fundamentals behind them still apply. It’s just up to us to learn the specifics 
I think this is an excellent theme, but calling it "open-sourced" is a little broad. it's just a style sheet.
What’s the diff between `@unknown default:` vs. `@unknown case _:`? 
In my experience, people will put up with subpart experience if they can get away with not spending that 99c. Hence, facebook, amazon, youtube, google and their core products. If you can bait them into spending that 99c with something they want. That would be your golden ticket, pay-to-win games are gold coins. Photo editing apps are the 'advanced filters.' I hope this helps. People loves to be bait it into it, they just don't want to know about being bait into doing it.
A style sheet doesn’t allow you to send a PR (and many other things) an open source style sheet does.
In that case, I should probably cancel my plans to start a foundation setup a Patreon page. My bad. &amp;#x200B; &amp;#x200B;
The source is open therefore it is open source. 
Setting the frame is useless, as you note. The constraints will set the frame. NSLayoutConstraint.activate(...) might make this look a tiny bit simpler. I'm not sure exactly what you're doing, but this looks pretty weird: ```mainView.leadingAnchor.constraint(equalTo: view.leadingAnchor).isActive = true``` Here, `mainView` was previously set to `view`, so you're saying "the leading edge of X should match the leading edge of itself", and likewise for the other edges. 
You might find it easier to use Apple’s [visual format language](https://developer.apple.com/library/archive/documentation/UserExperience/Conceptual/AutolayoutPG/VisualFormatLanguage.html) for this. Not only more expressive, but easier to debug in code.
GoFund your Patreon outside the box for monitization of your empowerment. Proactively.
Go for in-app. That is the Apple blessed solution to the problem, it means people who want to upgrade have the solution close at hand and it keeps all your download stats and suchlike focused on one version of the product instead of splitting them over two, which in turn helps with position on top lists and the like.
What was the original comment lol?
These two links will likely have every reasonable idea. Some of the generics proposal discussions melt my brain. I don’t have ideas for change because I don’t fully understand it all yet. [Swift forums- Evolution](https://forums.swift.org/c/evolution) [Swift Programming Language Evolution @ Github]
There’s a discussion going on about it over on the forums, and I hope it gains traction, because one of the things I’ve wanted for a long time are `switch` and if `expressions`; they are so much more useful than the statements we have now. I’d also love it if they could clean up pattern matching to make it a more like ML or Haskell and finally kill the `if case let` abomination. 
Can you elaborate? We have switch statements already. I'm not really familiar with other languages so excuse me if I'm missing the obvious.
Move “throws” out of no man’s land to front of “func” in the form of “throwing” or some such. Right now it gets completely lost in the hash that is the verbose function declaration. 
Thanks for the reply. Right now I'm just trying different things out, trying to learn the basics. If I understand what you're saying, the last four lines don't do anything. I've removed those. Here's the kind of thing that's got me stumped, if I add the constraints: headerView.topAnchor.constraint(equalTo: mainView.topAnchor).isActive = true headerView.leadingAnchor.constraint(equalTo: mainView.leadingAnchor).isActive = true headerView.trailingAnchor.constraint(equalTo: mainView.trailingAnchor).isActive = true I would *expect* that headerView gets pinned to the left, top and right edges of mainView. All I get is a blank window.
Yes, we have switches and ifs which are simply flow control gates. In a number of other languages, switches and ifs are expressions that evaluate to a value so you could do things like: let x = switch y { case .i: 1 case .v: 5 case .x: 10 case .l: 50 } Instead of: var x: Int switch y { case .i: x = 1 case .v: x = 5 case .x: x = 10 case .l: x = 50 } 
Solid thought.
They requested ads be removed by offering a 99 cent upgrade lol.
 let x: Int = { switch $0 { case 1: return 1 case 2: return 5 case 3: return 10 default: return 50 } }(y) 
“Low effort” what does that even mean? The level of difficulty for making apps with Swift is totally relative. A beginner is going to ask questions whose answer would be obvious to an expert. That’s how learning works... If a person is confused about something you can choose to help them. You can choose to ignore them. But choosing to make their search for an answer more difficult is a really shitty thing to do. We were all novices at some point. And all of the “experts” out there only became good at things because they had people around them helping them get good. Malcom Gladwell talks about how it takes 10k hours to get good at something.... what he meant was that it requires a huge support system to spend enough time at anything to get good at it. If you got good at something and were “self taught” it means you had people around you supporting you until you got good enough to support yourself financially at something. If you got good otherwise it’s because other people helped/taught you. No one is born good at coding. It’s a social activity. Fuck the idea that there are “low effort” questions. We all need to be taught at some stage. If you don’t want to help other people get better at coding, get the fuck off of stack overflow. Good on you for asking for help OP. And the people that would downvote your requests are absolute trash.
Take a look at this awesome blog post (not mine) https://oleb.net/blog/2016/12/optionals-string-interpolation/
This pattern doesn’t really adhere to MVVM. The issue with MVVM in iOS is that there are built in “view controllers”. The UIViewController should act as a “view” in the case of MVVM. So in iOS world it’s more like MV(c)VM. A UIViewController is kind of coupled to its view in MVVM. If you want to embed reusable views you would embed UIViewControllers instead.
I would be heart pressed if you can't make more from showing user ads than letting them buy their way out.
Supporting Yang2020 with [Yang 1k+](https://itunes.apple.com/us/app/yang-1k-the-keyboard-app/id1456473221?ls=1&amp;mt=8). Your one stop shop for the spiciest Ynag2020 memes and policies.
Agree with /u/dagmx on this one. I wouldn’t bother wasting your breath dagmx, seems like /u/thisischemistry is a typical 9-5 programmer. It takes creativity to become a software architect, to create new things and to think outside the box. There’s a difference between people who use software design principles and people who create them. The latter are the creatives. 
Haha thanks for your support! Let’s just not get too aggressive about this :)
Bewilderment at the audacity of calling it "open-source".
Feel like linking us to it?
Ah, thanks; edited!
To be honest, what I’d like most is for things to stop changing. The constant churn is difficult to stay on top of. But other than that I’d like to see [real Coroutines](https://gist.github.com/lattner/429b9070918248274f25b714dcfc7619), since that would have a huge impact on how you use swift.
I don't think they are.
The second one works with let too. The first one could easily take too long to typecheck if it was a valid format.
You seem to have a chip on your shoulder about storyboards - looking at your post history. So I’m not going to try explain why they can be useful. If you don’t like them that’s fine. 
I want to know why YOU find them useful.
The current company I’m at has been plagued by issues with Realm for years now. I just started last year and the main reason we’ve gotten the app back on track is consistently moving things over to core data as much as possible. There are other extreme gotchas (like the lack of ability to cascade delete) that just makes realm a nonstarter for me moving forward.
From an article a year or more ago it was stated that you would need 100s of thousands of ad impressions a month to make minimum lovable wage :/
MAGA
should've called it "Purple Drain"
\-&gt; joined thank you :)
Are deaf people really that limited in software engineering? I mean most of our communication is written in emails, slack, etc. Yes, there are some calls/meetings sometimes and local standups, but I'd say you wouldn't miss a thing skipping most. :D On the other hand I had really hard time sitting through any tutorials/courses, and rather investigated the knowledge myself. There are some pretty dope books to hit up, also good to learn how to use Apple's documentation. And reverse engineering github projects taught me way way more than any tutorial. Anyhow, this is great effort! I hope it'll still help many regardless!
I got the following trick from this comment on StackOverflow: http://stackoverflow.com/a/27216156/1085556 public func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool { // See also http://stackoverflow.com/a/27216156/1085556 let inverseSet = NSCharacterSet(charactersIn: "0123456789").inverted let components = string.components(separatedBy: inverseSet) let filtered = components.joined(separator: "") return (string == filtered) } 
That looks really good! Unfortunately, I am trying to run that code (without the textField function) in Swift Playground and it is giving me errors (unresolved identifier.) let inverseSet = NSCharacterSet(charactersIn: "0123456789").inverted let components = string.components(separatedBy: inverseSet) let filtered = components.joined(separator: "") 
Try this: import Foundation var string = "Hello, 123 playground 456" let inverseSet = NSCharacterSet(charactersIn: "0123456789").inverted let components = string.components(separatedBy: inverseSet) let filtered = components.joined(separator: "") print(filtered) 
to clarify Module stability means that a framework compiled with Swift 5.1 can be used with any older/future versions of Swift client apps?
I second `switch` expressions (and `if` ones, though C-style ternary operators make those less urgent), and add: * A comprehension expression syntax, like Python list comprehensions, unifying `if let` and `for ... in` in an expression syntax (a bit like Scala's for comprehensions or Haskell do notation). This could be implemented using sequence iterators for things that are a `Sequence`, with Optionals being seen as a sequence yielding 0 or 1 values; i.e., `let userEmails = for u in user, let contact = contactDetails(user), for email in contact.emails` would return an iterable (possibly lazy). Appending a `.map { $0 }` could make it into a strict Array. * Higher-kinded types. Being able to have protocols for things like Functors and Monads would be nice.
So I got NSCharacterSet working in the main program, as you demonstrated. I tried to make textField return false whenever string.isEmpty but that didn't work because when there are no numerals it always returns with "", "". Seeing that, I tried to use the condition string != ", " but then it said I was trying to make string a boolean. I didn't realize that was what I was doing. Fun times. :)
Clean up pattern matching how?
Are you looking to learn Swift? Swift has similarities to python/objective-c/c/c++. Java is quite different from swift apart from concepts that are true with all languages like arrays, linked lists, variable types, etc . Libraries/extensions are a whole different ball park. If you’re good/have background in HTML 5/CSS then apply your skills on web-based iOS apps,maybe? This is kind of unrelated , but when I was preparing for an interview and dug deep for salaries (early 2018) iOS engineers are paid more than android if you work for a for-profit firm. iOS users are bigger spenders than Android users so there’s more cash flow. Android’s market share is far, far bigger than iOS globally, but if you work in an iOS dominant country like US/Japan/most of Europe, then perhaps that’s extra motivation for you.
Yes, it works with let too, but you still have all of the extra boilerplate and noise. As for the typechecking, other languages have figured out how to handle switch expressions, so it's clearly not intractable. There will be other considerations, as Swift's type system isn't the same as, say, Haskell's, but it can be done.
Isn't all code text and images? What's so different about deaf users coding than ones with hearing? I mean, I have good hearing and I already avoid all resources where they use audio because code is text and listening to someone program is like nails on a chalkboard. It's so much easier to see it written down and there's no lack of written resources.
I would love to see a construct more like OCaml's `match … with` pattern matching. It's a much cleaner way of writing matches, IMO. However, I'm sure there way too much water under the bridge for that to happen. It'd be nice if they fixed the bugs with `~=` though.
&gt; this 1 month I tried Frontend and boy is it wild. so many ways to do same things, not mentioning the way to optimize said ways Haha, I feel your pain. The situation in JS land killed my interest in frontend dev, especially after the AngularJS team killed it in favour of Angular. I'm slowly crawling back to Vue, because I might have a project coming up, and it feels like a successor to AngularJS. I like to keep things simple. &gt; is ios similar to android in terms of structure,ease to program etc? I can share a little my experience as an Android dev who transitioned to iOS two years ago. Roughly speaking, the are a lot of similarities. Activities in Android are ViewControllers. Transitioning between VCs in iOS is as simple as presenting or pushing ViewController instances (from another VC). I generally avoid InterfaceBuilder and build my UIs in swift, because there's too much magic in there, but IB being visual is such a great thing for those so inclined. The "hardest" parts of being an iOS dev is having to deal with Apple's AppReview when you want to publish an app. It means you have to pay more attention to their guidelines, etc. A lot of my time has been spent getting familiar with those. Without any more specific questions, this is all I can say for now. Both platforms have their own difficulties: Swift is nicer to work with, but determining the height of content in a UICollectionViewCell (equivalent to Android's RecyclerView's Adapter) leaves me speechless... 
Is your textField a `UITextField`? If so, you can get its contents via its `text` attribute and then see if it's `nil` or not. You can then use Foundation's `CharacterSet` struct to test for letters in the string. See https://developer.apple.com/documentation/uikit/uitextfield and https://developer.apple.com/documentation/foundation/characterset to learn about how these work. let s1 = "Hello, 123 playground 456" let s2 = "12345--..!!!" let s3 = "🙄😐🙂👍🏼" let s4 = "" let s5 = "Эта строка содержит 21 буквы." func hasLetters(_ str: String) -&gt; Bool { if let _ = str.unicodeScalars.first(where: { CharacterSet.letters.contains($0) }) { return true } else { return false } } [s1, s2, s3, s4, s5].map(hasLetters) // [true, false, false, false, true] 
I really love the visual design aspect (UI/UX) of Swift. Storyboards are not perfect, but their are fun to me to use. I'm embedded in code all day long, like to balance out the other part of my brain with drag and dropping views, changing colors in a UI, and the birds eye view, And 3D is awesome. If you work at Storyboards, eventually it gets easy and fun too. :-) Not perfect, but does the job for me. My projects generally never go over 3/5 viewcontrollers max. 
ok, this is epic
Is your textField a `UITextField`? If so, you can get its contents via its `text` attribute and then check if it's `nil` or not. You can then use Foundation's `CharacterSet` struct to test for letters in the string. See https://developer.apple.com/documentation/uikit/uitextfield and https://developer.apple.com/documentation/foundation/characterset to learn about how these work. let s1 = "Hello, 123 playground 456" let s2 = "12345--..!!!" let s3 = "🙄😐🙂👍🏼" let s4 = "" let s5 = "Эта строка содержит 21 буквы." func hasLetters(_ str: String) -&gt; Bool { if let _ = str.unicodeScalars.first(where: { CharacterSet.letters.contains($0) }) { return true } else { return false } } [s1, s2, s3, s4, s5].map(hasLetters) // [true, false, false, false, true] **edit:** I see you're supposed to use `NSCharacterSet` instead of `CharacterSet` for whatever reason. That's fine. Just append "NS" to the `CharacterSet` in the above code and it'll still work. **edit 2:** Wait… are you supposed to be implementing the method `textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -&gt; Bool` and need to return `true` if the replacement string does not contain letters? Please be a bit more precise about what you are actually asking about. Anyway, if this is the case, you can still use the above code to check if `replacementString` a.k.a. `string` contains any letters. Though nothing about this involves checking if `textField` contains a string as this delegate method shouldn't get triggered if it doesn't.
Sbeve
[sbeve](https://imgur.com/A2QJNL1)
`@import Metal` ==
Compile type thread safety. Optionals solved null errors but thread safety still needs to be managed by the human. Would love some kind of supper for this like Rust. It’s the final frontier :)
Jeez, does everyone have a package manager nowadays? For homebrew installed tools (swiftformat, swiftlint, clang-format) I usually echo the output of --version into a text file and warning at build time if it doesn't match the local version prompting to run the update script.
Wait people don't realize this? This is the primary way I code 🙃
What the ass is sbeve
Its a meme for intellectuals only
I’ll start a petition do delete all Swift 2 and 3 answers!
https://reddit.com/r/iOSProgramming/comments/aw64co/android_developer_turned_ios_developer_feeling/ This should help you out!
I’m happy this community exists. Balances it all out :)
Cor[e]Gra[p]h[ic]s * Developers: epic 😭 * Reddit: CorGrahs 😬 
Saw that. Sucks. Know how to mod the 9.4.1 xcodebuild file to force it to run? 
Why you have so much karma?
:(
Tired of slow compilation and having to depend on CocoaPods? The easy answer is not to use CocoaPods.
Initializer delegation rules are different for value/reference types. Also, structs automatically create a default memberwise initializer (at least until SE-0018 is figured out).
The Swift guide has [a whole chapter](https://docs.swift.org/swift-book/LanguageGuide/Initialization.html) on this. Is there a specific part you need help with? It's thousands of words long because it's a complex topic.
Swift has similarities with Python and C++, but is quite different from Java? How do you figure? You picked two of the most disparate languages, and exclude the one that's halfway in between.
It would be better if Xcode can predict when I want to type a Type (class name) and when - variable 🙃
Yes thanks 
Swift is derived from objective-c. Swift is backwards compatible to it. Then, obj-c is derived from c. C++ mostly backwards compatible with c. 
That’s awesome! I’ll give that a try. Thanks!
I’m looking for information on this incedent. A friend is claiming that it is fake. https://i.imgur.com/NyLPYvQ.jpg
I see the value for deaf people to be able to watch a video and see someone sign it rather than use captions. I do think you should put a lot more time into the material/code though. I watched https://www.youtube.com/watch?v=mMFyP40x2Cs, and I noticed some issues: - The opening slide/page/video frame on variables is really really hard to read. The language used isn't very precise and has a lot of grammar errors, which will confuse people. - I think you should be more careful about choosing variable names. Some in the video may be confusing later on, or now if the viewer has some programming experience. Bad ones I noticed: - `comment` - `classType` - `item` - `description` Using names like that to store strings, even in a simple example is a bad idea IMO. All of those have a different meaning in most programming/swift contexts. Hopefully the feedback helps, I'm not trying to complain - just help you improve and make sure people that are learning from you don't get discouraged/confused.
You use autocomplete by picking random letters in a name? As your primary way of coding?
I was saying I needed to return the textField as true. It is a UITextField and the view controller is using a TextView delegate. It returns true if the text qualifies as valid characters. I will get back to this tomorrow, and I sure appreciate your help.
&gt;sbeve [https://knowyourmeme.com/memes/she-believed-sbeve](https://knowyourmeme.com/memes/she-believed-sbeve)
In the future that could be best for more new deaf iOS Engineer and Developer! Pretty grow right now. True, but this is the best tutorials to learn about Swift! 😄 Thanks you! :) I will do more new video. This is not book, actually close caption replace to the notes, but new swift tutorials could change lot better than notes. I am going plan redesign some more to look better than I tried to edit a closed caption! :) Yes i, it is! 😄 
Hello, I am work on new redesign that could better than pages. I am going plan on new videos with swift tutorials in few weeks! 😁👍 I really apologize if you or someone have hard to read. I will going fixed this issues! Not worried! Oh I forgot to tell this two comment different light green mean example sentence about this code and dark green is a real comment. I apologize about this. I really apologize about grammar is terrible, next time, my friend will help me thought fix English because in fact, most of deaf community have failed with English as I do. But my English is bit improve right now while I am going study a English book. I really apologize about grammar errors. 
Nothing, `case default:` is a synonym for `case _:`.
My favorite use for this is `tamic`to get `translatesAutoresizingMaskIntoConstraints` 👍
Xcode - so easy, a monkey with a typewriter can use it!
It's the daily struggle.
I like it a lot, thanks man. Only thing I changed was the orange and i used Dank font for comments. Appreciate you sharing
it's not a coincidence that the Frontend Dev in our firm are the nerdiest ones. always looking for the shiniest JS framework, rewriting for fun etc. &amp;#x200B; that part of AppReview obeisance is quite true, my team sometimes got delayed deadline because of that. &amp;#x200B; thanks for the input, ok I'll prepare for some of Swift's quirks.
thanks for the heads up! &amp;#x200B; that was some wealth of knowledge especially the comparisons . ios has interesting perspective.
Not far off lol
This was the best improvement I’ve ever seen in Xcode in the last years, it really improved my development times, they added it on Xcode 8 IIRC.
How is this related to Swift?
Is it on the main queue??? https://stackoverflow.com/questions/42999646/view-is-not-being-updated-when-calling-uibutton-ishidden-true-false/43000036
Yes — can confirm I’ve gone through this whole process, still not hiding
Did you change to a regular UIButton and see
Yes, that works — note that when I try to hide the custom button inside of viewDidLaod(), it still doesn’t hide
What if you set it to hidden in IB - I realize that’s the same as what should be happening - just curious if you check the box if it will hide.
Can't do that because its all done programmatically -- I was thinking about that earlier, when I was first getting into iOS dev I was definitely able to hide custom classes through storyboard -- just can't seem to figure it out programmatically
Ok that helps - on the .isHidden line put a break and make sure your button has actually initialized at that point, I realize it seems trivial - but make sure you have the button you are hiding - then walk through and see - should be able to po yourButton.isHidden in the debug window to see as well - maybe right at the end of the method you are hiding it in, etc.
It didn't used to be this way. Once it was helpful.
I just stepped through it multiple times and the button is initializing so it just doesn't make sense to me.
I know. It’s sad. 
I found something interesting when I went into interface builder when I hid the testButton -- it think the testButton is a UIView when it is hidden
Most things are derived from UIView though - so not sure that’s anything but...
And at the point you set isHidden the address for the button is the same address for the one when you view the view hierarchy in debugger?
Yes -- but in the hierarchy there is no isHidden property
I believe it’s on the right side when viewing the view inspector etc - pretty sure hidden is shown over there as well as accessibility etc - the memory address is at the top and should match the address on the isahidden line.
It says "Hidden Off" which I take as .isHidden = false
By low effort, he's specifically calling out the people who just want their problem fixed, with absolutely no indication they did anything to try to solve it themselves. There are *many* questions in which they didn't google it (e.g. There're are several posts a day about "unexpectedly found nil..." which has 100s of questions on SO, and many incredibly comprehensive answers), didnt look at the API documentation (e.g. A warning that x was deprecated, used y instead). People are more than thrilled to help people with basic questions. But they're not thrilled to, for the 10th time that month, explain why "!" is usually bad.
For some perspective: what you're wishing for is ***exactly*** what many people detest. When people have a problem X, and try to come up with a solution, but run into an issue Y with the solution, they ask about Y. The thing is, with a lot of questions, there's this sense of "something is up with this", usually coming from a thought of "what could you possibly be trying to do that would require you to do Y?" Yet when you try to ask people for their motivations, they feel like you're overcomplicating the question, like you're questioning their design skill, or being "dismissive." Ironically, nothing could be further from "dismissive" than using hours of your own time to discuss a problem and walk a stranger on the internet through a solution, for free. There's douchebags on SO; no doubt. But people really seem to not comprehend that anyone you see with over 10K rep has spent literally hundreds, probably thousands of their own hours to help strangers on the internet for no pay (even though consulting pays $$$), to an audiance with no consensus on what it wants. Does it want point-blank answers to questions as they are? Do they want to have their assumptions challenged, and have their whole approach called into question, but leading to learning and better solutions ? Do they want aggressive deduplication, voting and closing, or a flood of repetitive shit-tier content about force unwrapping optionals, unbound IBOutlets, values not set immediately after a call to an async function that uses a completion handler, and other questions like that?
Unfortunately, I still think like Objective C is quite manditory to understand, at least at a very basic level, to be successful in Cocoa development. You can try to get people to translate ObjC answers.for you on SO, but that's a crutch that will ultimately hinder your progress, because even though lots of the API docs are updated for Swift, nearly none of the "long form" docs on Apple's site are.
It's actually the same problem, with the distinction that you're referencing a method instead of calling it, but the principle is the same. Because that would have probably been unclear to you, you can comment on your question and say "I see how some parts of the duplicate relate, but the difference is that I'm not even calling the method", to which the mod would have responded and cleared up the distinction. People take negatively to closes-as-duplicates, I suspect because they feel dismissed, but I really do wish people tried to understand the bright side. By having a set of core questions, with many answers, lots of voting activity, editing, improving, etc., we have a repo of knowledge that gets better over time. Discoverability becomes a problem, and that's what closes for frduplication are for: they set up sign posts that point people towards these good posts. If we didn't do that, there would obviously be a lot of effort be wasted on reanswering the same things over and over. But you also wouldn't have this high engagement with a core set of questions, but rather a diffused set of answers to many questions, which never build on each other and lead to shitty, low-reuse content.
This, dark mode and fixing the open-new-tab bug. All I need.
Nice, good luck with the series!
Thanks, I will try to improve my work. Thanks you for remind me about that issues! 😁 
Yeah, I see the philosophy behind those core questions and I agree with that fully. There’s also the case where we simply don’t know what terms to search for, for example in [this case](https://stackoverflow.com/q/55519959/7669319) where the problem is very common, but you might not realize that you’re asking the wrong questions (which was also the same case for me). In those cases it’s great to be redirected to a more relevant resources. Then again, even though the underlaying problem may be the same, it can have different causes - which in my case was greatly explained [by this great gentleman](https://www.reddit.com/r/swift/comments/b8uvvt/you_know_what_grinds_my_gears/ek21afn/?utm_source=share&amp;utm_medium=ios_app), which was exactly the answer what I would have hoped for. It’s easy to just copy paste the error into google, find a similar topic and mark it as Duplicate, and it’s frustrating to the user when clearly there were different intentions and different expected results that don’t really translate to the other question. This is what I meant when I said the other question, where the user explicitly calls a function, is not the same. With that being said, I really can’t speak for the people who have to deal with those thousands upon thousands of questions and do realize that time is an important factor. For this I am very grateful that there are dedicated programmers working to keep the place clean and relevant.
I miss this so much from kotlin. That and being able to omit curly braces from if statements: var x = if (some condition) “value1” else “value2”
You’ve heard of Monkey Testing, now get ready for Monkey Development
You shouldn't need to add a custom UTI to open a .scn file: there should already be a UTI available that you can use.
https://ios-developer.net/iphone-ipad-programmer/development/notifications/orientation-change-notification try this
The comment about pi bothers me the most.
it’s just to make sure that “Double.pi” is actually accurate 
It is being called before. You can the change to completion block in transition or you can animate the constraint changes during the transition.
For background: I can see this being done in a few apps like Facebook, Slack and Twitter, but couldn’t find anything about it online. Is this something an app developer can freely implement or is it something Apple does?
I fixed that, but how do i handle that file? 
You can manage this with [Declaring Your Actionable Notification Types](https://developer.apple.com/documentation/usernotifications/declaring_your_actionable_notification_types) . 
That's new api in iOS 12 - you declare support with UNNotificationSettings. providesAppNotificationSettings and then handle callback with userNotificationCenter(_:openSettingsFor:) https://developer.apple.com/documentation/usernotifications/unnotificationsettings/2990404-providesappnotificationsettings https://developer.apple.com/documentation/usernotifications/unusernotificationcenterdelegate/2981869-usernotificationcenter
Spam account spamming all programming languages with courses. 
Hey, guys. I’m just getting started with Swift development and I’ve been enjoying myself so far. I’m building a simple app where I change the background/canvas colour every time the user swipes. I’ve got the changing working properly but I need help trying to have iOS ‘remember’ the background colour for the next time the user opens the app. How would I go about that? Also, is there a way to work with hex instead of UIColor?
Dylan.Beadle@resmed.com 
Docs -&gt; [https://developer.apple.com/documentation/usernotifications/unnotificationsettings/2990404-providesappnotificationsettings?language=objc](https://developer.apple.com/documentation/usernotifications/unnotificationsettings/2990404-providesappnotificationsettings?language=objc) Tutorial -&gt; [https://medium.com/@toru\_furuya/drastic-changes-in-ios-12-push-notification-6d5dee739432](https://medium.com/@toru_furuya/drastic-changes-in-ios-12-push-notification-6d5dee739432) &amp;#x200B;
I don't get why Snapchat has this, it just redirected me to the app lol
Any way*
People who are learning need to know why ! is bad. If they learn why it’s bad, they won’t continue to use it or ask about why it’s bad... Also, if you’re new to coding, you’re also new to stack overflow, so you have no idea what has been answered on stack overflow or what hasn’t been answered. Here’s why your “don’t answer simple questions” set of logic is self defeating- You don’t want to answer simple questions. But if the simple questions were answered, the people asking them would GET BETTER AT CODING, thus reducing the amount of simple questions. By not answering simple questions, you’re actually creating more of them in the long run. If people can’t get answers to simple questions they get stuck on, they won’t ever improve, and they’ll keep asking simple questions because they never got any better. So, if the simple questions got answered, there would be less of them. But, because so many iOS coders have an attitude of “if you don’t already know the answer, I won’t tell you the answer,” there to continue to be a million simple questions. Swift is a relatively easy language to learn. But USING SWIFT TO MAKE APPS is really hard. Even the simple stuff is really confusing at first. To get over that hump, a lot of people ask questions that seem easy to someone who already knows why ! is bad, or how an IBOUTLET needs to be hooked up or whatever. If they got quick answers to those questions, they’d improve and would not only stop asking those questions, they’d be able to answer them for someone else. Get that “high and mighty” shit outta here man. We were all novices once and needed help with the simple stuff. If people had refused to help you, you’d still be asking “low effort” questions all day.
To all the haters, you can embed flutter in an existing app and still use swift.
It was late when I wrote this up and I did it on a phone. ¯\\\_(ツ)\_/¯
Yes, it's possible. Here's some code I wrote that does what I think you're looking for. override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) { super.viewWillTransition(to: size, with: coordinator) //make sure to only activate when on this viewcontroller guard tabBarController?.selectedIndex == 2 else { return } if railInfo.favArray.isEmpty { switch UIDevice.current.orientation { case .portrait, .portraitUpsideDown: favList.backgroundView = noItemsView break case .landscapeLeft, .landscapeRight: favList.backgroundView = noItemViewLandscape break default: break } } } &amp;#x200B;
I’ll try this when I get home tonight
Report it as an advertisement. We really should have some better rules and reporting options for stuff like this. Advertisements knock down the quality of posts quite a bit and make it tougher for people with real questions to be heard.
Probably an old/broken deep link not being handled properly 
Try 1.0/16.0 instead. Without the decimals you’re dividing Ints, not Floats
Thanks a lot it worked.What a silly mistake
The Swift types are usually copy on write structs while the NS types are subclasses of NSObject, the superclass of all ObjectiveC classes. If you declare your property in your ObjectiveC file as copy, they will allso copy. You can safely convert them back and forth using the `as` operator without needing to add `?` or `!` to it.
There used to be Swift and iOS tutorials available from Apple. I can’t seem to find them anymore - has Apple removed them? If so, are they replaced with something else? I am aware of the general Swift and iOS documentation, but I enjoyed working through the step-by-step tutorials.
Yeah that first case you link to is a \*really\* common category of question ("how to get a value out of an async completion handler), along with the "how do I pass values between VCs". These two categories have quite a few difficulties: 1. It's hard to come up with the keywords necessary to find similar questions 2. Is that there is no one-size fits all answer, so anytime a person is linked to a similar question, they don't feel like \*their\* question is being answered, even though if you spend the time to fully understand what you were linked to, you'd see that it does actually answer it. 3. Good answers are hard to come up with, because this needs a pretty solid understanding of software architecture in general &amp;#x200B; &amp;#x200B; &gt;It’s easy to just copy paste the error into google, find a similar topic and mark it as Duplicate, and it’s frustrating to the user when clearly there were different intentions and different expected results that don’t really translate to the other question. I bet! But there are two things everyone should know about this: 1. You can prevent this from happening by mentioning your existing research in your question. If we see no code, no attempts, and no references to existing questions or online resources, we just assume you're too lazy to do your own work, and become much more "generous" without dedupe hammer. You can preempt the deduplication that you think will happening by linking to the existing questions and explaining why they're quite right for your case. 2. Closed as duplicate isn't as "final" as the word "closed" might suggest. The comment box is still open. If the question you're linked to isn't quite what you're looking for, you can comment that on your question. If you explain why it's not quite a good fit, someone will answer you by either: explaining the difference &amp;#x200B;
Thank you so much. :)
Haha, I really appreciate your answer. I see, there will be some rewiring in my brain needed to not get upset about this. Thank you for bearing with me!
&gt;If they learn why it’s bad, they won’t continue to use it or ask about why it’s bad... &amp;#x200B; Yeah, there's absolutely nothing wrong with not understanding the basics. You'll be surprised at just how much effort people on SO will put into explaining stuff to total noobs who have tried their best. I've done several mutli-hour long debugging sessions in chat rooms before, for novice issues. The issue is when people post low quality questions, where low quality is deemed by some combination of: 1. Problem without any example test cases 2. No attempt shown (which is particularly egregious for questions that are clearly homework assignments) 3. No links to existing questions/resources that shows background research 4. Clear evidence they didn't google the problem first (`fatal error: unexpectedly found nil while unwrapping an Optional value`) ***almost always*** falls into this category There's nothing wrong with being a noob, we all were at some point. There's a lot wrong with being a noob, not googling your own problem, posting low quality questions, and feeling like you're entitled to the free help of people on the site. &gt;Here’s why your “don’t answer simple questions” set of logic... ***I absolutely never said that***. And if you think I implied this, you're completely misunderstanding what I'm saying &amp;#x200B; &gt;But USING SWIFT TO MAKE APPS is really hard. Agreed! Which is why I generally disagree with the approach of "winging it" and just resorting to SO to "fill the gaps." I almost always recommend people fall some kind of structured learning (book, tutorial series, video series, etc.), and then come to SO with specific questions that arise from there. &gt;To get over that hump, a lot of people ask questions that seem easy to someone who already knows why ! is bad, or how an IBOUTLET needs to be hooked up or whatever. You say this as if the only reason I know about these questions is because of my experience on SO. It's not. The `fatal error: unexpectedly found nil while unwrapping an Optional value`error has [over 3281 questions on StackOverflow](https://stackoverflow.com/search?q=fatal+error%3A+unexpectedly+found+nil+while+unwrapping+an+Optional+value), which you can find literally by just googling the error message. It's a beaten dead horse. I wouldn't be opposed to StackOverflow literally blocking any questions attempted to be made containing that string. There's no new value that's going to come, to anyone, by asking this question more times. There are countless articles, blog posts, high quality answers (with 100s of votes), etc. It's a solved problem, people just need to spend the second it takes to google it first. &gt;they’d improve and would not only stop asking those questions, they’d be able to answer them for someone else. Unfortunately: 1. There's too many Swift learners for this to be a viable strategy. People need to do their own independent research before coming to these help sites. Otherwise you just end up with a cesspool of repetitive, low quality content. People on this subreddit complain a lot about that, for example. (How many times a week do we see a "How do I get started" post? If they had just searched the subreddit first...) 2. Many of the people who ask these questions have accounts whose only activity is asking that one question (nothing prior, nothing after). Not that we should give up on them or anything, but I just can't agree at all with the idea that by coddling people who didn't do their own research, we're encouraging them to somehow pay it forward. I doubt that. If you're not going to spend the time to try to solve ***your own problem***, I highly doubt you would volunteer your own time to help another person's problem, let alone for a stranger on the internet. &gt;Get that “high and mighty” shit outta here man. We were all novices once and needed help with the simple stuff. If people had refused to help you, you’d still be asking “low effort” questions all day. People DID refuse to help me. Because I've asked some god stupid questions that I could have google. Instead of giving me a fish, they taught me to fish, and linked me to resources on what makes good questions. I've had absolutely stellar experiences on stack overflow once I started: 1. Providing runnable code for a [minimal, complete, viable example](https://stackoverflow.com/help/mcve) 2. Showing my error messages (you would be surprised just how many people don't do this) 3. Showing my attempts 4. Explaining what I've researched so far, and why I didn't understand it or why it didn't fit my needs 5. Explaining my motivations behind my question, so as to ensure they're challenged, rather than having answerers (unknowingly) help me down my wrong path I think people with this "high and mighty" perception fail to understand one crucial thing: I might be an expert in Swift, but I'm a noob in a whole bunch of other techs, for which I use SO. I'm simultaneously both a high-rep user (e.g. I can close Swift questions without needing other's votes), and a complete novice (such as in [Java](https://stackoverflow.com/q/52448983/3141234), [C](https://stackoverflow.com/q/47086406/3141234), [SQL](https://stackoverflow.com/questions/40373848/combine-3-column-sums-into-a-single-table)). My novice questions are generally well received because I do the things above, and people feel like I'm not abusing them for free, effortless homework help.
Where's your code? We can't debug a program without source code. - Is it Objective-C? That's kind of off-topic. - Is it plain Swift? That's [completely unsupported](https://forums.developer.apple.com/thread/77158) by the operating system. There's a reason the Xcode QL plugin template doesn't ask you what language you want to use. - Is it an Objective-C stub which calls a Swift XPC service? That gets icky real fast, and in this case your problem may not have anything to do with folders or UTIs. 
Haha no problem, I'm glad I could clear things up! Thanks for the silver!
OK so it isn't working. How do you know it's not working, what did you expect it to do and what is it actually doing?
It's working. It just wasn't outputting them in the side panel. Weird. Sorry about that.
I had the same issue just yesterday :) 
The reason both exist is that the NS types are imported Objective-C classes that predate Swift by many years, while the non-NS variants are Swift struct versions of them.
Okay, so I think the area we're having cognitive dissonance is over what is considered a low effort question. It seems we're both in agreement that if someone tried a bunch of stuff and showed their work and asked a question that was still pretty easy, that's NOT low effort. I also agree with you that a burner account for one question is low effort and not worth anyone's time to answer a question for. Oh man, we couldn't agree more about needing structured learning to learn how to use Swift. &amp;#x200B; I'm glad we also agree that just because a question is simple, doesn't make it low effort. It's awesome that you've spent your time working with people on questions that are relatively simple, as long as they've put in the effort to ask the questions in the right way and do their own research first. I hope they pay it forward. &amp;#x200B; I think the framework you're outlining here is very reasonable and thank you for the clarification. That being said, I think that there are a lot of people with a much higher bar for defining "low effort" on Stack Overflow than you. And as a novice that can be a really significant barrier to entry on something that's already really hard.
IIRC, click and hold the execute playground button (at the bottom) to re-enable automatic compilation.
Understood. Thank you.
Your lack of a decent title does not inspire me to click on the link.
I'll give this a shot when I'm back home from work, thanks for the tip! &amp;#x200B;
Woah, this thread took a turn for the better, which I can't say I was expecting. \&gt; That being said, I think that there are a lot of people with a much higher bar for defining "low effort" on Stack Overflow than you. I don't think this is the case, I just think that it's not communicated very well. Part of the problem is that the set of low-effort questions and basic questions has a very large overlap. I wish Stackoverflow's question box was more structured, having sections like: "What is the problem?", "What did you try?", "What was the error or undesired behaviour you got?", "What result/behaviour are you looking for?", "What did other internet sources have to say about this?". Simply answering these questions is 99% of what you need to produce a good question which drives lots of attention from the experts on your question's tags. I feel like StackOverflow would really benefit from integrating some of the content of [idownvotedbecau.se](https://idownvotedbecau.se). On a side note, I love that site, but I wish the title didn't have to explicitly tie to down-voting. I don't downvote questions that are a few simple edits away from being good, so I would have liked that site to be like yourquestionsuc.ks lol &amp;#x200B;
No problem! I think it changed with Xcode 10.2.
Your answer was thoughtful and made sense to me. I didn't understand it from the perspective of someone who was really experienced. I still think there are assholes out there who downvote out of a sense of entitlement derived from their coding experience, but I also see that asking in a way that demonstrates you've tried on your own is important too. &amp;#x200B; Yes, it would make a lot of sense for SO to structure their question form page to incorporate those questions. That would eliminate a LOT of tension between noobs and people with more experience.
NS, is short for NextStep, a computer company, Steve Jobs created after leaving Apple, they later got acquired by Apple. Apple implemented a lot of the NextStep system into it’s own OS. Some parts of this still remains today, e.g. in ‘Foundation’ and ‘AppKit’.
Nice factoid! Thanks!
[Previously](https://old.reddit.com/r/swift/comments/b8cn1u/nothing_prints_to_debug_area_after_xcode_102/), [previously](https://old.reddit.com/r/swift/comments/b754d3/just_learning_and_have_a_question/).
Tried searching with the verbage used in the learning material " results bar" that's why I couldn't find anything. Thanks.
To persist some data on files, look in the [File System Programming Guide](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/FileSystemOverview/FileSystemOverview.html), especially section "About the iOS File System". UIColor conforms to NSCoding, so you can just encode it in some file. As for the hex, there is no way but you can code your own initializer of UIColor, with that signature: init(hex: Int) and call it with some hex value: UIColor(hex: 0xAAEEAA)
Read up on how floating point numbers work.
https://stackoverflow.com/questions/588004/is-floating-point-math-broken
Thanks man
`in` can't be used to check if a string contains a substring. Use `.contains` or `.range(of:)` for this.
Because what you've written is not valid Swift code. An `if` statement evaluates a series of `Bool` and if all of them are `true` then it executes what's in the braces. Your first statement is a `Bool`, second is a `Bool`, third is a `String` so it fails to compile.
Oops!
will do! thanks.
I finally launched my first iOS app, [Just Timers](https://itunes.apple.com/us/app/just-timers/id1453573845?ls=1&amp;mt=8), which lets you create multiple timers with different names, then assign Siri Shortcuts to them to trigger them by voice. Basically, I got tired of iOS only allowing one timer at a time, and I use the same handful of timers every day, so this makes it easy to just bark "tea time" to my watch and start a timer now 🙂 For the brave, I also built some Shortcuts App x-callback-url hooks in which I've documented [here](https://justtimers.app/help/shortcuts/) in detail. I included a link to an existing shortcut that will let you create new timers by voice as well. I'd love any feedback, I have some bigger plans for a watch app and a visual redesign in the near future. I'm no designer, so any help there is always appreciated. Cheers!
&gt; Swift is derived from objective-c. You must have a very different definition of "derived" than me. Swift is basically an exercise in "what can we do if we *don't* have to derive the next language from our previous one". &gt; Anyone who’s seen both objective c and swift code can see they’re pretty much identical. I guess my decades of experience with Objective-C and years with Swift don't qualify me as "anyone". These languages almost couldn't be more different. The latter even has a special attribute `@objc` which means "please flip your language's behavior to the *exact opposite* of what it normally is, for compatibility with this other language". 
Also, if you have a series of `Bool` you really don't need an `if` statement that returns a `Bool`. Just combine them: import Foundation func test() -&gt; Bool { return existingTextHasDecimalSeparator != nil &amp;&amp; replacementTextHasDecimalSeparator != nil &amp;&amp; !string.contains("\", \"") } 
I replaced it like this: let inverseSet = NSCharacterSet(charactersIn: "0123456789").inverted let components = string.components(separatedBy: inverseSet) let filtered = components.joined(separator: "") if existingTextHasDecimalSeparator != nil, replacementTextHasDecimalSeparator != nil, filtered == nil { return false } else { return true } It's telling me that its always going to return false with a non-optional. I tried making filtered: string? = components.joined(separator: "") then filtered! == nil in the conditional. I'm not sure if filtered ever is nil, but it is always a string and when I print it and it doesn't have any of the CharacterSet in it, it prints nothing. Can you tell me what I did wrong? Sure would appreciate it!
You should set you array as an empty one when you declare it
very cool!
`filtered` is never nil, which the documentation for `joined` tells you - it returns a String, not an optional String (`String?`) If all you're intested in is the number of entries in `components`, I suggest checking its `count`.
``` struct Match { var scores: [Int] = [] mutating func generateScores() { for _ in 0..&lt;numberOfPlayers { self.scores.append(0) } } } ```
Also where `numberOfPlayers` come from? 
Also where did `numberOfPlayers` come from? 
I tried print("components.count ", components.count) if existingTextHasDecimalSeparator != nil, replacementTextHasDecimalSeparator != nil, components.count &gt; 1{ return false } else { return true } Its strange because when I enter a letter count becomes 2, as it should, but for some reason it doesn't return false. Any ideas, sir?
Also if you only need one of those conditions to be met use || which means or. So if condition 1 != nil || condition 2 != nil || string.contains “”, “” then blah. 
I just needed it to also component.count &gt; 2 so it would return false when I enter a character. even though component.count &gt; 2 it doesn't return false! But yeah, you really helped me with your tips.
Hey. I am really stupid, I DID need the or operators. What was I thinking? Now I just tried this: if existingTextHasDecimalSeparator != nil, replacementTextHasDecimalSeparator != nil || components.count &gt; 1 { return false } else { return true } but it didn't work right. Do you know why, sir?
Are you actually setting them all to 0? Because you could just do: `self.scores = [](repeating: 0, count: numberOfPlayers)`
It's not clear to me what, specifically, you're asking. [Core Data does support relationships](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CoreData/HowManagedObjectsarerelated.html). (Preserving an object graph is its primary purpose, really) Are you trying to figure out how to establish that relationship or how to access that relationship?
Even better: struct Match { var scores: [Int] = [] mutating func generateScores() { scores = [Int](repeating: 0, count: numberOfPlayers) } } Though what they probably want is more like: struct Match { let numberOfPlayers: Int var scores: [Int] init(numberOfPlayers: Int) { self.numberOfPlayers = numberOfPlayers self.scores = [Int](repeating: 0, count: numberOfPlayers) } } 
It could be nil because number of players is 0. Also its good practice to initialize it as an empty array first!
Well, Pantry is your class/entity, so Pantry.allObjects doesn't really make sense. Which pantry? Even if there is only one Pantry in your data model / database, you need to fetch it first. If, OTOH, you want to fetch all Item objects no matter what Pantry they are in, just fetch your Item objects directly.
&gt; I would expect it to fetch all your pantries, Yes! Exactly! I was just making a point to a “similar api” to access it. My goal is to list all pantries, not it’s children.
Sorry, I think I made it difficult to understand. I have a pantry entity which I can save multiple pantries. My goal: I would like to list all pantries names, for example, not its contents.
You're seeing only one address being printed because it's the array reference to it's object. If you want to see for each element you could split up the array into a 2D and then loop it, but I don't think that's what you're looking for. func pointerAddress(address o: UnsafeRawPointer ) { print(String(format: "%p", Int(bitPattern: o))) } var array1: [Int] = [0, 1, 2, 3] var new: [[Int]] = [[Int]]() for i in 0..&lt;array1.count { new.append([array1[i]]) pointerAddress(address: new[i]) } &amp;#x200B;
Other people have already given you answers on how to fix the problem, so I'll offer something different: I recommend using a class instead of a struct. If your object needs repeated mutation, then a struct will be extremely inefficient and wasteful in comparison to a class. For structs, you want to try to avoid all mutation, if possible. If your struct requires more than the tiniest amount of mutation, then it's better off as a class. 
Don't get the downvotes, this is a basic question from a newcomer. Floating point is a weird standard designed to cover a very large range of numbers, and because computers are binary, rational numbers without a denominator that's a power of 2 are straight up not precisely representable (think something like 19/7 in decimal, the number just keeps repeating forever). This has nothing to do with Swift in particular, although I ***believe*** some scientific languages like MATLAB do put in an effort to handle these inaccuracies.
The error means you need to recompile the library
Just make sure your command line tools match the version of Xcode you’re using with Swift 5 support. Then rebuild Carthage.
&gt; When it doesn't work - scores is nil - and I'm not sure why. It's an Optional, and you didn't assign anything to it. Nil is the default for optionals. 
I don’t think this type is thread safe. If this execute(with:) method is called from two threads at the same time then the closure can still be executed twice. This is even more likely if the code inside the closure takes a while, because didExecute is not set until after the closure executes. If this is something you intend to use routinely then you might want to include some form of synchronization. Maybe a serial queue or a lock, etc.
This is exactly the reason why I haven’t updated. Currently working on an app, I am halfway through and don’t want any risks.
Have you made the UIView.isUserInteractionEnabled = true
I currently have this error and still got no luck :/ I already tried downloading and running it with Xcode toolchains
Thanks for your reply, yes I have and it seems to make no difference on or off.
it has to be on for views you add gestures to.
I will leave it on then, but I suppose I must be experiencing another issue on top of that.
I totally dont know what im talking about but could the input be happening in a different thread? 
I don't think so unless there's something I don't understand about StackViews.XCode usually throws a fit when UIKit stuff happens off the main thread.
Maybe turn off delaysContentTouches on the UIScrollView?
Great suggestion but doesn't seemed to have worked for me. I don't know if this helps but I have another button in the ScrollView (but not in the Stack) that is working fine, which is why I think the issue is with the StackView.
I think the problem might be caused by the contentView size of the stackview. Make sure that all constraints are correct. The easiest way is to check it in UI debugger. If the stackview has height or width equal to 0 then this is what causes the problem.
Can you show the code? An example project? What you are saying sounds like it should work but hard to know where you’ve gone wrong. 
Result type is nothing new, most people used it already.
I have been fetching data from core data. If I refresh the table, those black boxes on right-side go away.
I think what you are describing is the active record pattern . This is the biggest library I'm aware of for core data: https://github.com/magicalpanda/MagicalRecord (doesnt look active though)
If you have automatic size, you need to set estimated cell size for the collectionView, and estimates should be equal or be bigger than cell size in maximum size you have. 
Use [View Debugging](https://www.raywenderlich.com/1879-view-debugging-in-xcode-6) to find out what those black boxes are.
Can you give me an example plz? &amp;#x200B;
Are you using Carthage or Cocoapods? Which library do you get this error for?
Joined today, thank you for this, good information and straight to point 
Hi All, &amp;#x200B; I jut committed my google maps API key to github. Obviously it is now compromised. My question is does this actually matter? I haven't provided any way for google to charge me so is it OK for other people to use it should they wish?
You probably updated Locksmith and now it’s built with the 5.0 compiler. Set the version to an earlier release and do another Carthage update.
Not that much experience in swift server side, but I think vapor is the most popular one. And I think it has Postgres support
The second method does not work because the array was never initialized. You just declared it. In the first method you initialized an array before adding items.
You are correct. I added a semaphore. Thanks
Two things not yet mentioned: 1. Use the view debugger to make sure there’s not a view covering your tap view. 2. Make sure that the tap view’s parent view’s frame includes the tap view area. 
If the developer of the framework/module you are using hasn’t updated their code to swift 5, it might be easiest to switch back to the older Xcode version. Just rename the current Xcode app (to XcodeNew for ex.). Then download and install an older version (https://developer.apple.com/download/more/ ). It might not be the best solution, but it will work until you can update the framework used.
This is a pretty idea! I’ve been modeling with Blender lately and think it would be pretty sweet to show some 3D animations in a frame like this: https://gfycat.com/glisteningheartycuttlefish
&gt; Can someone knows the answer of this question in Stack Overflow? Can? Yes, someone can. : / Does* someone know* the answer to* this question in Stack Overflow?
Would be interested to hear how this goes. My impression is that the ecosystem isn’t quite there yet. If you’re looking for a typed server language, I’d suggest looking at typescript on node.js. I’d personally prefer to use swift as a language over typescript but I’m feeling it may still be a year or so until it becomes feasible. 
Nice animations. it would be fun to have on display. A small c++ 3d rendering app would be nice to have to populate with various models. easiest right now for that would be a looping video. Still working on the assets uploading part. 
I would suggest you rename ounce to ounsPoundConversionRate and create a new var enteredOunces = Float(sender.text ?? "0") then it is just to set textfieldpound.text = String(enteredOunces \* ounsPoundConversionRate )
Init your score to not be nil, but an empty mutable array.
all pantries'* names
not its* children it's = it is or it has its = the next word or phrase belongs to it
Yep. I know. Got autocorrected... thanks anyway!
This one I didn’t know. What is the rule to use apostrophe in this case?
This article is your best bet, it comes from one of the most popular iOS tutorial sites around. https://www.raywenderlich.com/1323930-vapor-vs-kitura-choosing-a-server-side-swift-framework From what I understand, both are fairly even currently. To me, the big differentiating factor is that Vapor is embracing Swift from top to bottom with Kitura is tired to IBM with other tools that arent swift.
I'm a little confused, is this just a screen that you're outputting animations to?
Maybe I’m not understanding, but why is using PDFs a necessity and why collection views? There are probably simpler and easier ways to store info than using PDFs?
With getting inspiration from goodnotes, when they create a document they have templates that are in pdfs. I am using that knowledge in my initial development since I do not know what else to use or what to do since I have never done anything like this. I created a template that is a electronic version of engineering paper. The person will be able to write down their homework and then export the pdf to submit online or print. (in the future I want to auto-populate the header with their name, class, homework number, question numbers, and current page number out of the total pages) So this is why I am wanting to use a pdf. The collection view because I like the way it looks in providing information to the user. 
You may find this useful https://www.hackingwithswift.com/store/server-side-swift
Got it. It seems like there are three separate concerns here: 1. Annotating and viewing a note 2. Persisting a note 3. Displaying a note If you split your code correctly then it should be easy to use a collectionview or tableview or switch fairly easily. So, if you use a PDF solution, you're going to be limited to a single page size with a specific sized boxes on it. That may be fine for what you're going to achieve. I haven't used PDFKit before, but I'm sure it could work for that. You may want to consider basing it on a drawing app and generating the background yourself. https://www.raywenderlich.com/1934-how-to-make-a-simple-drawing-app-with-uikit-and-swift Then you could store the drawn data, grid size, etc. 
&gt; ounsPoundConversionRate ouncePoundConversionRate Don't mangle the readability of your word to save 1 character. 
You are probably calculating the cell size with self.size somewhere, where self,view didn’t had a layout pass yet and is still using your storyboard values (viewDidLoad for example). 
It is the splitting the code correctly that I will be trying to figure out the best way to achieve, what needs to be in what file. I am okay with it being a single page size since it is meant to be a 8.5"x11" paper for submission. Could you explain what you mean by "specific sized boxes on it"? I found that app by raywenderlich which I will try to adapt to my use. The first thing I am trying to do at the moment is use a pdf I have uploaded to my project and have it be viewed on my collection. Thanks for your help
Right, you probably want an object to represent a document or note class. You want some sort of object that can save / retieve that note class. Then you should have a separate view controller for each screen. As far as architecture, you could do some MVC or there are lots of articles online about other ways to structure your app.
&gt; If you’re looking for a typed server language, I’d suggest looking at typescript on node.js. For a typed server language, you'd go for a language built on JavaScript? In what way is this better than one natively built around a strong type system?
Awesome!!!!
OK, so this is a Swift programming sub. Where's the Swift code? You have a tiny mention of iOS and not much else.
Thank you! It's very important for me)
That is quite the understatement I would say. [Here](https://cdn.shopify.com/s/files/1/0204/4113/7252/files/screenman-pree-alpha_grande.jpg?v=1553364321) is an early prototype of the hardware device. On top of that, we communicate with the screens applications as seen [here](https://cdn.shopify.com/s/files/1/0204/4113/7252/files/Screenman121.png?v=1554550405). It is mainly offline, communication through the mobile application to customize various apps. This animation [here](https://cdn.shopify.com/s/files/1/0204/4113/7252/files/machine.gif?v=1554550629) is running on a custom "game engine," but we also have other applications to support for seamless video loops and images. 
looks like you didn‘t initialize the label or didn‘t assign to it from a storyboard.
I put this at the top of the class: @IBOutlet weak var BM1: UILabel!
This worked! Seems like Locksmith hasn't been updated since Swift 4.0 was originally released. Thanks for your help
Paul has a book specifically for Vapor https://www.hackingwithswift.com/store/server-side-swift I like the books from both sites. Either one would probably be fine.
Which is good, however you need to assign it to a label in your storyboard. Rightclick and hold on your label in storyboard and drag it to your IBOutlet (the thing your wrote). You‘ll need to have xcode in side by side mode for that (upper right button with two circles in xcode).
Yeah but did you link it in Interface Builder?
First you should use if let name = block\_1.name {} instead of if block\_1.name != nil {} Then the only value you are unwrapping is the label which is of type UILabel! and by elimination that is the only thing that could cause the error. So it is the label that is causing the error. When is this code run? before the label is initialized?
I got the same error. I initialized the label at the top of ViewController, this is at the bottom of ViewController.
[https://imgur.com/zvhm7pM](https://imgur.com/zvhm7pM) is that right?
Where the code is put in the viewcontroller unimportant, what is important is when the code is run, do you call the code from another viewcontroller or before the view is showing on screen? 
The code is run when the user enters info into a popup. &amp;#x200B;
Hard to say what causes the error without seeing the code. 
&amp;#x200B; Heres the code: **import** UIKit **import** CoreData **class** ViewController: UIViewController { **@IBOutlet** **weak** **var** BM1: UILabel! &amp;#x200B; **var** block\_1 = \[Block\_1\]() **var** block\_2 = \[Block\_2\]() **var** block\_3 = \[Block\_3\]() **var** block\_4 = \[Block\_4\]() **var** block\_5 = \[Block\_5\]() **var** block\_6 = \[Block\_6\]() **var** block\_7 = \[Block\_7\]() **@IBOutlet** **weak** **var** tableView: UITableView! **var** controller1: NSFetchedResultsController&lt;Block\_1&gt;! **override** **func** viewDidLoad() { **super**.viewDidLoad() } **@IBAction** **func** newBlock(){ **let** alert = UIAlertController(title: "Add a block", message: **nil**, preferredStyle: .alert) alert.addTextField { (textField) **in** textField.placeholder = "Block number" textField.keyboardType = .numberPad } alert.addTextField { (textField) **in** textField.placeholder = "Class Name" } **let** action = UIAlertAction(title: "Ok", style: .default) {(**\_**) **in** **let** name = alert.textFields!.last!.text **let** number = alert.textFields!.first!.text! **if** (Int16(number) == 1) { **let** block\_1 = Block\_1(context: PersistenceService.context) block\_1.name = name PersistenceService.saveContext() **self**.block\_1.append(block\_1) print(block\_1.name!) **if** **let** name = block\_1.name{ print("Not nil.") print(block\_1.name) print(name) **self**.BM1.text = name } **else** { print("Nil.") } } &amp;#x200B; } alert.addAction(UIAlertAction(title: "Cancel", style: UIAlertAction.Style.default, handler: { (action) **in** alert.dismiss(animated: **true**, completion: **nil**) print ("Cancel") })) alert.addAction(action) **self**.present(alert, animated: **true**, completion: **nil**) } }
I can't find whats causing the error but you could try changing @IBOutlet weak var BM1: UILabel! to @IBOutlet weak var BM1: UILabel? and then unwrap it in an if - statement to check if it is equal to nil
Vapor seemed to be the best, but I had a horrible experience trying to upgrade a fairly large project from Vapor 2 to Vapor 3. I’ll consider trying it again once their documentation gets some love. Last I checked there’s still tons of “coming soon” in the docs. Case in point, there are _still_ no docs on testing... https://docs.vapor.codes/3.0/testing/getting-started/
Thanks so much! I changed it to @IBOutlet weak var BM1: UILabel? and then did **if** **self**.BM1?.text != **nil** {**self**.BM1?.text = name} and it worked!
It has access to all of the libraries people have built for JavaScript. Most of the good ones have a typescript definitions file that allow leveraging strong typing. Admittedly, some of the libraries are better than others with regards to their design. Like you suggest, at its core, it’s still JavaScript. But it goes a long way to making working in node sane. 
Sry for my bad english but do you know the answer?
&gt; Don’t get the downvotes, this is a basic question from a newcomer. Maybe because of the annoying formatting and SCREAMING THE QUESTION?
lmao yeah though this is OP's first post cut them some slack
Yeah... I did downvote it but removed it afterwards.
Can someone ELI5? Is this a step towards AWS support of server side swift on services like Lambda?
If you're not going to take the time to properly ask the question, the inclination to reply with an answer diminishes. 
Swift does not yet have module stability. This means that the Swift 5 compiler can compile code written for Swift 4, 4.2 and 5; however you cannot mix and match code that was built with older versions of the *compiler*. You need to make sure that all dependencies of your app are rebuilt with the Swift compiler from Xcode 10.2.
With a name like Rizos Konstantinos, he's most likely Greek and has English as a second language. He communicated well enough that you know exactly what he meant and your pointless pedantry is unhelpful and insensitive.
are you sure it's the text that's nil and not the label itself?
It could be either one. How do I check? (Sorry I'm new to this)
i'm not an expert either. i would try print(label)
It prints "nil" &amp;#x200B; I made it in the storyboard. It's a UI label.
then your label is not connected to your code. &amp;#x200B; [https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html](https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html)
I have `@IBOutlet weak var label: UILabel?` at the top of my code &amp;#x200B;
Sounds like you're trying to assign the label before it's been loaded in the view
How do I fix that?
Hard to say without seeing what exactly you're doing. Is the outlet connected to the view controller? Is this outlet being shared between multiple views? How are you initializing the variable and where?
One suggestion to clean your code up is to use a ternary to check for nil. block_1.name != nil ? print("not nil") : print("nil") &amp;#x200B;
Your code seems to work however whenever I try to erase the value I entered in the first textfield I get a thread saying "Fatal error:Unexpectantly found nil while unwrapping an Optional value".
Hacking with Swift teaches you the different things that can be done with Vapor. Ray’s book is a walkthrough on making a web API and then building a web app that uses the API you built. It depends on what you want to do. Personally, I liked the Ray Wenderlich book because of the API building focus. 
This is similar to Vapor. Tools to facilitate creating web services with Swift. It may mean that Amazon is warming up to Swift for building server side code. 
I don’t know if it means that, but it means there’s at least one team in Amazon who’s using Swift and investing a decent amount in it. 
That's a good friend. And a good mindset. 
Wouldn't Lambda be a great way to test the waters? Rather than the huge task of building web frameworks like Vapor (love Vapor btw), just let people toss some Swift into a Lambda and see if people like it and start using it. The real reason I want Swift Lambda is so that Zeit Now can support Swift with their serverless model and kick-ass deployment flows
Sorry this isn't about your problem and I really hope you find a solution for it. Could you provide some documentation on how to set up the first cell as a create button?
Update: I've been trying some different things to debug the problem, I created a custom UIStackView class and overrode touchesBegan with a print statement just to make sure the stack was correctly in the view and accepting touches (so it wasn't the scroll view). Interestingly it prints my debug message when I hit anywhere in the stack view EXCEPT the button, which also has a print statement that should fire, but in that case nothing happens.
[removed]
It’s Xcode. I don’t see anything wrong per se on the code you sent. If you’re willing to PM one of the project that fails I might take a look if you want.
Did anyone already tried ReSwift in production apps? or redux implementation for iOS? how is it? I mean if the app gets massive can redux architecture still handles it? 
I suggest overriding hitTest instead of touchesBegan, calling + returning the super value, and checking what view is actually getting returned
Unless you're suggesting that other languages don't have libraries, I'm not sure how that answers my question.
This is going to be just guesswork until you post some source code.
“sender” in this scenario is one, or both, of your UITextFields, and sender.text is referring to the text inside the textfield (or returning “0” in case the textfield.text is nil). You can rename sender to be whatever you want, but you’re doing to much logic within a button, or whatever your IBAction is hooked up to. You’re probably going to want to use your conversion logic elsewhere in your app, so you would want to abstract it. Move everything from within the button to a separate function that handles conversion, and pass it in the cast float from your textfield. Something like: guard let text = sender.text else { return } guard let celsius = Float(text) else { return } convertCelsiusToKelvin(celsius) I’ve split out the guard statements into two to make it more clear for you, but this would normally be combined into a single guard statement.
Can you post your code that gets you your output? Are you making dict = snapshot? 
Are you sure that you can't describe the position of your text fields purely with constraints? In which case you wouldn't need to worry about rotation
So what I ended up doing was put my image view and text into their own subview. I resize the subview constraints accordingly to the size of the image. This works fine until I rotate orientation. Because the image is aspect fit, it leaves space on the top and bottom in portrait and left and right in landscape. I added my repo to the original post if you want to take a look. If it were up to me, I wouldn’t allow landscape orientation at all as the app doesn’t look great in landscape mode on iPhone. But it’s for a Udacity nanodegree assignment so I have to follow the design specs.
It’s not that other languages don’t have libraries. It’s that other languages may not yet have as many or as well developed libraries. For instance, amazon just released some AWS libraries for swift (like a few days ago). Prior to that, if you needed that kind of functionality you’d have to write it yourself. These are all things one should weigh when picking a platform for server development.
You are trying to access "ID" as a top-level object, when it is not. The top level objects in the dictionary are the "-LbpowWAwxRcMc1JLbKO" values. You want to do some mapping and filtering magic to convert this structure into just an array of the IDs, yeah? (as in, an array of the emails). You could try something like this: let emailsArray = dict?.compactMap { (key, value) -&gt; String? in guard let jsonObjsArray = value as? \[\[String: Any\]\] else { return nil } let idDictionary = jsonObjsArray.first(where: { json in json.keys.contains("ID") }) return idDictionary?\["ID"\] as? String } ?? \[\] &amp;#x200B; I can't vouch for the efficiency of this method, though. This is just something I played around with in a playground and it seems to get you what you are looking for.
In this hypothetical alternate version of Swift, it would be an error for `foo()` to return an instance of `A` when invoked on an instance of `B`
Yes I am, I am currently not home so I can’t post the code, but I’m retrieving it as a snapshot. 
This it? [https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple\_ref/doc/uid/TP40011343](https://developer.apple.com/library/archive/referencelibrary/GettingStarted/DevelopiOSAppsSwift/index.html#//apple_ref/doc/uid/TP40011343) 
I see you mentioned that you attached an image but I don’t see one? Also, at what point are you adjusting the custom height of the keyboard?
Probiere ich heute abend aus, danke! 
Hi everyone, I'm just starting to learn Swift and are following a course of tutorials with side lessons. I've become impossibly tripped up on a few problems, and I just...don't know how to proceed. I know what I need to get the my code to do, but I don't yet have the language skills to convey it. If anyone would be so kind to help, I'd really appreciate it. I'm kind of going this alone and I work best if I have someone to ask questions to so that I can better comprehend how and why I need to use x to make the program function properly. And I have no one to do that with! I really want to figure out what I'm doing wrong. The prompt and what I have started for code is as follows: PROMPT *Write a function called \`printPrimes(upTo n: Int)\`. The function should print the prime numbers that are between 1 and \`n\`. A number is prime if it is only evenly divisible by itself and 1, and not evenly divisible by any other number. Call your function with several different values for \`n\` and verify that it prints the correct numbers.* &amp;#x200B; My Code (it's probably really, really off. Sorry! I'm just learning!) &amp;#x200B; **func** printPrimes(upTo n: Int) -&gt; Int { **for** number **in** 1...n { **if** number / number == 1 &amp;&amp; number / 1 == number { print(number) } **else** { print("Not prime") } } } &amp;#x200B; (Right now, Xcode is warning *'Missing return in a function expected to return 'Int''* on the last closing bracket.) Help me. I don't know what the fuck is going on.
Der letzte upload ist schon was länger her? Ich verstehen, dass alle immer bei den basics anfangen, gerade wenn man seine online Presents aufbauen möchte, ich würde mir jedoch wünschen, auch mal einen Channel mit weiter fortgeschrittenen Inhalten zu finden. Wie man anfängt in die Programmierung einzusteigen gibt es soo viele quellen zu, jedoch was ich machen sollte um nach den Grundlagen wirklich weiter zu kommen ist selten (sicher auch kein einfaches Unterfangen). Ich werde mir deine Videos einmal angucken und mir eine Meinung bilden. Wenn du damit Erfolg haben möchtest hier schon mein erster Tipp...einfach weiter machen und versuchen Kontakt mit anderen Deutschen Youtubern/Podcastern zu knüpfen. 
Danke für dein Feedback, ich verstehe dass fortgeschrittene Inhalte Sinn machen. Falls du irgendwelche Themen hast, über die du gerne ein Video sehen möchtest, dann kannst du das gerne unter irgendein Video kommentieren. Mit anderen YouTubern zu kooperieren ist sicher auch gut, aber bei meinem sehr kleinen Kanal dachte ich, dass es schwer sein könnte, jemanden zu finden, der das machen möchte. Aber ich kann es ja mal versuchen. Danke für die Tipps.
Use UILabel!, if you forgot to connect the label in storyboard, app will crash.
I figured it out, but thanks for the help
Yes
This is NSPathControl, although Xcode has subclassed it to change the appearance of the separator arrows and to add the jump menus on each segment. 
https://developer.apple.com/documentation/uikit/uiresponder/1621092-inputview
I did simple thing. Just increased data source count for \`numberOfItemsInSection\` and show cells data accordingly. [Here is a sample snippet](https://pastebin.com/cSc3erPr). And sorry for late reply. &amp;#x200B; &amp;#x200B;
Thanks for reminding me the View Debugger\` 
Thanks for pointing out the issue. Well, I have put my cell size as hard-coded value eg. CGSize(width: 145, height: 145). Also I have updated my cell sizing along with setting size for cell on ViewWillAppear. Still its take the width of storyboard(as you suggested)
Moin! Was ich gut fände, anstatt zum n-ten Mal die Grundlagen durchzueiern, wäre mal den Prozess für eine etwas komplexere App zu sehen. Von der Idee, über einen Wireframe mit Design-Überlegungen und Architektur der App zum Modularisieren und Coden der App. Als Beispiel: ich code gerade an einer macOS App und wollte da eine Toolbar einbauen. Es hat eine ganz schöne Weile gedauert, bis ich gecheckt hab, wie ich auf diese Toolbar im Code zugreifen kann, weil das Ding im NSWindow und nicht im NSViewController hängt... Anderes Beispiel: ich habe ein Model und möchte jetzt CoreData einbauen. Müsste ja eigentlich einfach sein. Aber sich alle Klassen zusammenzusuchen, die man braucht, dauert 'ne Weile. Das Gefühl habe ich zumindest. Und dann hab ich auch Schwierigkeiten, wie ich das in mein Model einbaue. Wenn man ein Tutorial liest, dann starten die meisten mit 'ner blanko App und fangne mit CoreData an. Aber wie komme ich von einer App, die bereits ein Model hat zu einem von CoreData unterstützten Model? Ich denke es ist relativ einfach "Fortgeschrittene" Inhalte zu identifizieren, wenn man Tutorials auf Basis der etwas größeren Themen-Blöcke macht. CoreData, SpriteKit, usw. oder die DevOps-Themen: wie nutzt man CocoaPods, SPM, usw. richtig. Wann nutzt man was? Ich kann mir gerne noch mehr überlegen, falls Du Interesse hast. :D
Perfect, thanks! I got it working and have callbacks set up. Do you know how to make it so it doesn't "highlight" the entire pathControl when I click on it? I just want to perform an action on a specific item in the path and now have the whole row selected. &amp;#x200B;
Are there similar channels in English?
That will work cosmetically, but you might really want `refusesFirstResponder` so that it doesn’t invisibly take key focus away from something else.
Well, looks like you're new at programming, you have still some work ahead of you. But at least you'll make a good progress if you understand that example. Let's see line by line. func printPrimes(upTo n: Int) -&gt; Int { You declare that the function returns an Int, it is the "-&gt; Int" at the end of the line, and that's why the error is raised. It means you declare that your function computes a result, and that result is an integer value. If this was true, you could write: let x = printPrimes(upTo: 10), and x would be an Int. It doesn't make sense as you can see, there's nothing x can be. Your function just prints numbers, it doesn't compute a result, so you can just remove the "-&gt; Int", and to call it you'll just write: printPrimes(upTo: 10). for number in 1...n { The loop is correct. Little nitpick: it should be 2...n because 1 is not considered as prime. if number / number == 1 &amp;&amp; number / 1 == number { Well, unfortunately that's where you still have some work ahead of you. The code is well formed but the algorithm is not right. Maybe this one exercise wasn't quite fit to you because you were assumed to be accustomed to prime numbers, so you'll have to make up for it. To check if a number n is evenly divisible by a number k, you must write: if n.isMultiple(of: k). It checks if the division of n by k has a remainder equal to zero. And look again at the statement: "A number is prime if it is only evenly divisible by itself and 1, and not evenly divisible by any other number." You have checked the first half of the sentence, but skipped the second half. So, to tell if n is prime, you must also ensure that n is not evenly divisible by any number between 2 and (n-1). print(number) All right print("Not prime") It is not necessary, you're just supposed to print the prime numbers. If a number is not prime, just ignore it and do nothing. You can remove the 'else' block.
Thanks, I’ll use that.
I am wildly new to coding (literally started last week), but I've blasted through simpler examples and concepts quite successfully on my own. I'm just now reaching slightly more advanced essentials and without anyone to guide me and explain why x functions this way and y functions this way and together they do this thing, I get a little lost and frustrated. So, I thank you immensely for the help and clarification. Just to make sure everything checks out: - remove -&gt; Int. I understand the logic behind this failure now! - replace 1 with 2. I used 1 (even though it's not prime) because I recently did a function that called out all multiples of 5. It's probably harmless in terms of what I'm trying to print, but I understand the nitpick and appreciate it! - The algorithm is what I'm having the most trouble with. I know what I need it to do (print all prime numbers up to a given integer) but I was unsure of how to best or properly communicate that. If I have the first portion of my algorithm correct, how would I communicate the second statement to make sure that being n is not evenly divisible by any number between 2 and (n-)? -I figured the else block was useless. Thanks for confirming! I really appreciate your time and advice with this. I really enjoy everything I've learned so far, and want to advance. It's just incredibly frustrating when you get stuck and don't have anyone around to give you a push in the right direction. I'll follow up when I input my changes tomorrow. Again, thanks!
Awesome! Thanks and now let's see if I can figure out how to implement it to my code lol 
Mit Kontakte knüpfen meinte ich nicht sofort gemeinsame Videos aufnehmen sondern eher Ideen austauschen Freundschaften schließen ect. Der Rest kommt dann schon von selbst. 
Because the Swift compiler and runtime is implemented in C++.
The Swift package manager is written in Swift I guess so yeah 
What do you mean by "systems programming"?
There’s certainly some daemons and such using it (eg tzd): https://blog.timac.org/2018/0924-state-of-swift-ios12/
Why are you using UI Testing for a unit test? You should add a new target for Unit Testing rather than UI testing if all you're doing is testing a network API call. &amp;#x200B; Secondly, that example app you linked to on Stackoverflow has no test in it. You just launch the app in the UI Test, and stub the response… there's no \`XCAssert\` anywhere so for me the test passes.
&gt; how would I communicate the second statement to make sure that being n is not evenly divisible by any number between 2 and (n-)? You have to check all the numbers individually. It's programming, a computer can't understand the statement as we do, but it can execute a sequence of instructions to check the statement for a number n.
I am not trying to test my API parsing code, I am only trying to do UI testing (seeing if labels get the right data, if the UI isn't wrong for certain API responses). This is a first step that allows me to quickly see if something is wrong with my app, unit tests are a next step if I get the hang of testing and can see the results. I have now added a failing test that should pass if stubbing the response works. I may have been too "minimal" in my minimal example, sorry.
Why?
I believe you can do something like this; typealias SubscriptionCompletionHandler = (_ status: subscriptionStatus, _ error: Error?); class SubscriptionValidator: NSObject { private static var _shared: SubscriptionValidator? = nil; public static var shared: SubscriptionValidator { if(self._shared == nil){ // Supply user info here. self._shared = SubscriptionValidator(); } return self._shared!; } private var completionHandlers: [SubscriptionCompletionHandler] = []; private var subscriptionStatus: [String: SubscriptionStatus] = []; private override init(){ super.init(); // More initializing here. } func validateSubscription(user: User, completion: SubscriptionCompletionHandler){ if(self.subscriptionStatus[user.id] != nil){ completion(self.subscriptionStatus[user.id]!, nil); return; } // Validate subscription status via your API provider. self.validateSubs(user, ({ (result, error) in // parse result here. // pass result to all stored completion handlers associated for specified user, then remove reference to those handlers. // store fetched value, so you don’t have to fetch it again. })) } This way you can keep a track of status, and access it from anywhere in your app, and since it’s a singleton your safe from duplicates and not synced status! I don’t know your current setup, so I tried to make more generic, so supported multiple users, sorry 😅. I wrote, and architected this code on my phone, so mostly it’s not working or has some syntax errors, (didn’t code swift in months), and English isn’t my native language so sorry for my grammar mistakes! And would love to hear some suggestions to correct this solution!
Because it is implemented in C++.
Unit Tests should be the first thing you do - they are to test individual "units" of code to make sure that individually, they work as expected. In your example, the unit test should be on \`callSimpleAPI\` in the \`ViewController\`. Then, once that passes and you know it's working correctly, you should move onto integration/workflow tests (UI Tests). &amp;#x200B; As for getting the stubbing to work in a UITest, I have no real experience with this but check out this article on [Medium](https://medium.com/xcblog/network-stubbing-options-for-xctest-and-xcuitest-in-swift-2e0dcce9a37d)
I would consider tweaking the UI flow in a way that prevents the user from being able to get to one of those features (or at least stall them) before the call returns. Sort of like when video games have you waste time while data loads in the background. It doesn't have to be a plain spinner, but just an idea. Maybe a fancy animation while you're waiting? It sounds like you don't want to just disable the ui elements that are only for subscribers if I understand your dilemma correctly.
Yeah unit tests is what I think of when I think of testing, but I advocated UI tests to my boss so much that I don't think I can go back on that for now :p The article is helpful, and it mentions that Mockingjay works fine on Swift 3.2, but has some issues with Swift 4; maybe that's why I'm running into issues. I'll look into testing it on Swift 3.2
It also talks about other libraries to use for mocking network requests in a UITest
I would usually make a little class that stores an array of callbacks and on completion I would just forEach and empty it
Because it is impossible to build a new language IN the new language (before it's finished)
I believe this will keep strong references to all items in the array, potentially causing a memory leak. So be careful with that!
Yes, It is! I should have used NSPointerArray, Or which I believe its better to use delegation. But since this trick is used once, when doing multiple request before first subscription status was received, and usually Thread gets blocked when dealing with cash and subscription stuff, It’s not devastating to keep a strong reference. Thanks in advance for the note 😀.
Yeah, I've also tried OHHTTPStubs, but when that didn't work either, I assumed it was an issue with how I try to implement the frameworks. I will try to implement more frameworks in my sample, to check out if they work.
What you need is an implementation of multicast delegate. You might be aware of the delegate pattern in apps. You may have made a view controller a delegate for a table view before. This means that a table view delegates some of its tasks to the view controller to take control of. It’s one-to-one here. Multicast delegates allows a module to delegate its tasks to multiple other modules. In your case, the module that handles the check for subscription status needs to let one or more other modules know about the status after it’s available, if it’s still waiting on the remote server. https://github.com/jonasman/MulticastDelegate This is one implementation. But, I usually write my own as I hate to injection third party dependencies. You could look at this and write your own easily. Ensure that the references to the delegates are weak and not strong.
Abo geht raus ! 
Scroll down a little bit further, it specifically mentions libraries to use for UITests!
Why not just lock the buttons until the call in `didBecomeActive` returns?
Not speaking for Op but “systems programming” is *generally* considered to mean low-level development - OS kernel, system services, device drivers, code that directly interacts with hardware etc. **Occasionally** folks mean it in a systems administration context (automating sysadmin tasks via scripting); although Swift can be used in this sense, there are other more entrenched tools in this category (shell, Python, Ruby, Perl, etc.)
That's not true, depending on how you define "finished". Rust, for example, was bootstrapped relatively early in its development and it's still by no means finished. Swift could totally have been rewritten in Swift at some point, but the Swift team has decided not to do that.
Yup, low-level development is what I mean. 
All these current solutions are fine, but you might want to look into something more architecturally suitable to handle async problems, like: 1. [RxSwift](https://github.com/ReactiveX/RxSwift) 2. [PromiseKit](https://github.com/mxcl/PromiseKit) PromiseKit is probably simpler of the two, since learning how to program in a reactive framework has a steep learning curve, but both are pretty handy tools to have at your disposal.
NotificationCenter is your friend :)
I'd revoke it and create a new one. I'd assume it's against Google's ToS to give other people access to your API key (even though in practice, your key is probably just gonna get locked once other people use it too much).
PromiseKit made handling/synchronizing/composing asynchronous operations a whole new world for me. Didn't even require a radical paradigm change, plug and play into a classic MVC project as use as much as needed.
Catch it? What do you mean?
Who cares what language it contains? It all compiles down code and Swift can call C++ code just fine though various means. As they re-write parts of it they may very well switch to Swift for that new part but why throw away good work?
Yes.
Rust was never "bootstrapped" in Rust. It was bootstrapped in another language and once they had a decent toolchain they moved onto further development in Rust. The same is happening with Swift, parts of it were written in C++ until they had a viable toolchain and now other parts are being written in Swift. As to what amount of a toolchain is written in what language that really doesn't matter too much. At some point it's nice to have a good chunk written in the language you are developing simply because then your teams can all work on the same language and not have to context switch so much. Other than that, if you have parts of your toolchain in another language and it's working just fine then leave it that way.
An Array of optionals is safer than NSPointerArray. 
How can i handle/declare that imported file?
Sorry, I may have misunderstood what the exact definition of "bootstrapping" is. Either way, my point stands that the Rust compiler was first written in OCaml and is now written in Rust.
[SwiftNotes](https://github.com/sobri909/SwiftNotes). Just a simple wrapper around NotificationCenter, which was designed specifically to solve the problem you’re proposing. You don’t need any more complexity than that. The built in NotificationCenter already solves the problem, and SwiftNotes makes it quick and easy to use. M
Just launched my first Mac app, Juice! It’s the missing Bluetooth manager for macOS. Would appreciate feedback and suggestions! Thanks a bunch https://deadbeef.me/Juice/
Unless it's changed in Swift 5, it's objective-c
Not possible until Swift 5 due to lack of ABI stability. 
Bootstrapping is a misleading term which has a lot of different meanings and is tough to nail down. In this context it means it "started development, although the connotation is that it was developed using the barest minimum of outside resources before using the language itself for further development. An example would be making a very rudimentary compiler in assembly and then using that to compile a more complex compiler written in its own language. Something that's rarely done anymore. These days you write a language definition and then use an existing compiler to read that definition and compile that language into another representation. An example of this is writing the Swift frontend that feeds into a LLVM backend. There are a lot of components in the toolchain that are written in other languages, only a small portion is written in Swift. Even the Rust compiler is not written completely in Rust since it also uses LLVM as a backend. Portions of the compiler are written in Rust.
So you just want to load a scene and use it? [SCNScene.init(url:options:)](https://developer.apple.com/documentation/scenekit/scnscene/1522660-init)
As you can read for yourself on https://opensource.apple.com almost all the low level programming is done in C or C++. 
Servus! Das habe ich mir auch schon überlegt, eine "komplexere" App von der Idee bis zur Einreichung in den App Store mit Videos zu begleiten. Ich habe selbst die Erfahrung gemacht, dass man bei dem Prozess sehr viel lernen kann. Ein Video wie man nachträglich CoreData in eine Applikation integrieren kann, könnte ich am Wochenende machen, falls das Interesse besteht. &amp;#x200B; Falls du eine Idee für eine App hast, die man innerhalb ein von paar Tagen umsetzen kann, dann könnte ich das als Vorlage nehmen. Mit CocoaPods usw. könnte man noch weitere interessante Bereiche abdecken.
Knowing how Amazon is organized, I'm sure there's at least one team at Amazon using Brainfuck, too. They moved years ago to defining all the AWS interfaces in terms of JSON files. That's why it's easy for them to support new languages, and why the SmokeAWS repo is full of giant changesets that simply say "Code generate with Go SDK v1.16.32 models." This isn't some big investment in Swift. The average project here has 3 contributors, and 99% of the work was done by just 2 people. For comparison, Apple's "Graphing Calculator" had 2 full-time workers and a dozen or more part-time workers, back when Apple wasn't paying *anyone* to work on it.
Wait you want to download it on the fly from some URL? You should not do that.
How is a multicast delegate different from NotificationCenter? Apple uses this pattern a lot. There's a delegate protocol (like NSWindowDelegate) full of optional methods to make it easy for one class to receive notifications, and there are also NSNotification.Names for each delegate method, for when you want multiple receivers.
I don't see how this library "solves the problem". The entire source code is five 1-line wrapper methods. Plus it's CocoaPods-only, iOS-only, and adds a dependency to your project. *NotificationCenter* solves the problem.
Yep, thanks for this. Further googling told me it would just hit a limiter (rather than charge me through some clever google-knowing-all-my-data way). THanks for replying.
The library doesn’t solve the problem, NotificationCenter does. I explicitly said that. So you’re just restating exactly what I said but acting as though you disagree with me. The lib is intentionally a single small file, because it’s purpose is to be the most simple, lightweight syntactical sugar possible, to avoid NotificationCenter’s verbosity in everyday coding. You can drop the file into your project without needing CocoaPods. Calling it “a dependency” is stretching logic beyond breaking point. I don’t want to be combative, but you’ve missed the point while offering back my own point as your counterpoint. Not constructive, thanks. To finish off: it’s my own lib. I made it because things like PromiseKit (or worse, Reactive libs) are over engineered nightmares, when there’s already perfectly good solutions built in, that a tiny bit of syntactical sugar can make palatable. Understood now?
Can you communicate with Django from a rest service such as described here https://medium.com/@hassanabid/developing-ios-client-app-with-django-rest-framework-d649f96a7bb8 That may steer you in the right direction. Part of your exercise that will help you the most in the real world will be to learn to adapt to new circumstances and extend them further. The rest service described would naturally be used by both iOS and Android to go further.
No, apple uses Objective C for most everything and employees have mentioned that ironically they will probably be the last programs to switch to swift
Um what?
When Picture in Picture came out for the Mac, they bragged about it being written completely in Swift, so yes. 
Probably a really bad approach, but either way using the delegate methods, maybe textFieldDidEndEditing will help.
That needs module stability which will come with swift 5.1
Thanks, I'll give that link a look to see if I can't make something out of it.
Best way is to set up a variable observer @IBOutlet weak var label: UILabel! { didSet { //save data } }
Hyped!!!
C, C++, and objective c
Well, you could do similar things with both. But, by design, NotificationCenter is a broadcasting mechanism. There’s no access control. Anybody with the key can get notified about a NotificationCenter notification. With multicast delegate, you can specify access to only your module, and you have better control over where all the delegate is getting invoked. I rarely use NotificationCenter as it becomes unmanageable within a large project. Alternately, you could use a context on database to display everything and update database when subscription status changes. Also add observers in all VCs for database changes that concerns that VC. This is another way to have just 1 data updation action, and just one data access mechanism. It’s a more reactive approach in solving the same problem.
Down vote for a clean way to observe when a variable changes and run code. lol Have to love this sub
Subscribe to https://developer.apple.com/documentation/uikit/uiapplication/1622973-willresignactivenotification in viewDidAppear and unsubscribe from it in viewWillDisappear. Save your fields to UserDefaults in viewWillDisappear and your notification handler method. This way you will only save the values when it makes sense and won't use unnecessary resources by saving after every letter. However if your app crashes on this screen, you will lose any changes since last save.
This will only get called once before viewDidLoad, has nothing to do with the label's text. Also IBOutlets are recommended to be strong as they point in the direction of ownership, not the other way, so relying on them staying in the view hierarchy to keep a strong reference to them is bad.
No not from some URL, the url thats created when a .scn file is opened via dropbox/email to my app!
You're wrong on all counts.
I've been using didSet for IBOutlets to separate the initial setup instead of setting up all of them in awakeFromNib for a while now, I would know if it worked differently than what I described.
It does work, you should read up on observer pattern. Also using strong in your variables will lead to memory not being properly released, that's why Swift defaults to weak when you create an outlet.
https://github.com/realm/SwiftLint/issues/2433 And observing changes in your UILabel will still not trigger if only the text of that UILabel changes since UILabel is a class.
Copy the file to the application's document folder and add a browsing option that queries the files in that folders and offers the user to reopen them.
Many apps just show the splash screen when they come back from active if there's data they need to refresh that should also be relatively quick. Users are use to seeing the splash screen sometimes when they launch apps so most of them don't even realize something different is happening.
override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() //Update table view frame here.. }
swift 5 was already released
Right, it wasn’t allowed until then.
No automatic unsubscribe feature on deinit and no concrete type notifications instead of just the regular userInfo dictionary.
I've run tests and had this work just fine. But whatever, can't debate stupid.
I’ve worked with both and was going to propose this but I figured it might be overkill to integrate one of those big frameworks for something this small in scope. They are terrific frameworks to get to know though.
Yep. That’s sort of what I had in mind. Good call
Why not test with the real backend? Generally you are happy if you catch a server bug with UI testing instead of letting it go to production.
Thank you! I think I’ll be going with PromiseKit, it looks like it does exactly what I need.
Once it is stable I’m expecting Apple to switch all new systems development to Swift. The rational is pretty simple - more maintainable code and fewer bugs. By the way I know Swift has achieved one level of stability but the are still working to finish it off. Further you actually need a compiler that is stable in its code generation and quality.
&gt; The library doesn’t solve the problem, NotificationCenter does. I explicitly said that. So you’re just restating exactly what I said but acting as though you disagree with me. You said "Just a simple wrapper around NotificationCenter, which was designed specifically to solve the problem", which is ambiguous, and can mean either one is designed to solve this problem. I simply said "I don't see how" it does that. You're the one who launched into a 150-word "combative". &gt; Edit: And no, it’s not iOS only. It imports Foundation, and nothing else. What do you call [this](https://github.com/sobri909/SwiftNotes/blob/master/SwiftNotes/SwiftNotes.h#L9), then?
&gt; I rarely use NotificationCenter as it becomes unmanageable within a large project. How big are your applications? I admit I don't work on the biggest programs but NotificationCenter has never been even close to being an issue for me.
Nice, but that feature is pretty much the exact opposite of [systems programming](https://en.wikipedia.org/wiki/System_programming).
**System programming** System programming (or systems programming) is the activity of programming computer system software. The primary distinguishing characteristic of systems programming when compared to application programming is that application programming aims to produce software which provides services to the user directly (e.g. word processor), whereas systems programming aims to produce software and software platforms which provide services to other software, are performance constrained, or both (e.g. operating systems, computational science applications, game engines, industrial automation, and software as a service applications).System programming requires a great degree of hardware awareness. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/swift/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
Subclassing Operation properly is a pain in a**. With RetryingOperation it becomes easy, and you have additional features to go with it! Enjoy, and let me know what you think :)
During my last search for an iOS job, I used: - [Indeed.com](https://www.indeed.com) - [LinkedIn Jobs](https://www.linkedin.com/jobs) - [WeWorkRemotely](WeWorkRemotely.com) - [AngelList Jobs](https://angel.co/jobs) - [StackOverflow Jobs](https://stackoverflow.com/jobs) - Searching Twitter for iOS jobs - [Hire an App Developer](https://www.hireappdeveloper.org/jobs) - Directly researching and visiting employer websites (e.g. jobs.apple.com) Indeed is nice because you can set up a [notifications](https://www.indeed.com/notifications) for when a new job is listed that matches your search criteria. I set one for my city that looked for iOS developer or iOS engineer in the description. If you only want a Swift job, that’s possible too. LinkedIn Jobs are nice for their saved searches and notifications, and I found it worth the money to upgrade. They have an iOS app and do a nice job of keeping track of which jobs you’ve viewed, saved, and applied to. WeWorkRemotely.com is nice if you want a remote job. There are fewer iOS or Swift postings, but the companies that post there seem higher quality, and more likely to respond to an application. I haven’t done much there, but AngelList might be good if you want a startup job. If you have a local startup accelerator or community like [Capital Factory](https://www.capitalfactory.com), they often have mailing lists or forums where jobs are posted. Twitter doesn’t have the density of job postings, but you can still find a few by searching for terms like: #ios, #swift, jobs, hiring, opening, and position. The advantage of finding someone posting a job on Twitter is that you can read their other tweets. You can sometimes get a good idea of what your potential future co-workers will be like, and even strike up a conversation with them. Finally, I operate my own [iOS developer career news and job board site](https://www.hireappdeveloper.org/jobs). It only targets app developers, so while there are fewer postings, they’re more relevant. I designed the job board to (hopefully) help better differentiate the job postings from each other and make the most important information visible. I also retweet the occasional attractive iOS developer opportunity from its [@HireAnAppDev Twitter account](https://www.twitter.com/hireanappdev) — even ones not listed on my site.
Easiest way is to make a proper model out of the objects, decode into that model, make the change, encode back to JSON. You could also do simple string find and replace but that's fraught with possible bugs and errors. import Foundation let json = #"{ "jsonObject" : "PlaceHolderText" }"# struct Foo: Codable { var jsonObject: String } if let data = json.data(using: .utf8), var decoded = try? JSONDecoder().decode(Foo.self, from: data) { decoded.jsonObject = "Something" if let encoded = try? JSONEncoder().encode(decoded), let newJson = String(data: encoded, encoding: .utf8) { print(newJson) // {"jsonObject":"Something"} } }
Im on Xcode 10.2 so Swift 5 works great! Ahh, Thanks for this! I was stuck on the idea of grabbing each individual json object, doing a model that way and then changing the string values , one by one! BLAH!!
Very valuable article, thank you. +1 for swift 5
Thank you!
There’s no alternative built in, but you could very easily build your own. If I understand what you want... not too terribly familiar with Android, but I do know what toast messages are or at least used to be on that platform. Assuming you want this just inside your own app, that is.
What was your interview with Apple like?
&gt; Who cares what language it contains? There's lots of cases where someone might care. Someone wanting to help implement a new feature, or debug an issue they're seeing, may struggle if they have little/no C++ experience.
https://github.com/scalessec/Toast-Swift/blob/master/README.md
https://github.com/huri000/SwiftEntryKit
&gt; You said "Just a simple wrapper around NotificationCenter, which was designed specifically to solve the problem", which is ambiguous, and can mean either one is designed to solve this problem. And then in the next sentence I explicitly said that it is NotificationCenter that solves the problem. Seriously, you're wasting my time. You responded too quickly, and totally failed to understand the message that you replied to. &gt; Either way, I simply said "I don't see how" it does that. You're the one who launched into a 150-word "combative". Fuck off. I gave a simple reply, pointing out that NotificationCenter solves the problem, and my tiny wrapper makes its syntax easy to use, and you came at me. This is on you. Get fucked. &gt; What do you call this, then? I call that an auto generated h file, which is only used by C / Objective-C, and that the Readme explicitly states you don't need. Once again, you've replied too soon. For someone who talks a lot about the early history of Next and friends, you have displayed a bewildering amount of ignorance and misunderstanding. Go away.
&gt; I rarely use NotificationCenter as it becomes unmanageable within a large project. No it doesn't.
```swift var observers: [Any] = [] ``` ```swift deinit { observers.forEach { NotificationCenter.default.removeObserver($0) } } ``` Problem solved.
That’s the nature of programming. Very little is implemented completely in a single language. You either focus on the parts you’re familiar with or you learn new things.
Considering how many conditionals and completions you have you should switch to 2 spaces instead of tabs. It's so hard to read when the next line jumps so far to the right. Maybe thats just me.
I would also think you could use a custom init in your codable structure and just force the default values there. https://stackoverflow.com/questions/53237085/swift-codable-default-value-to-class-property-when-key-missing-in-the-json
The Dock was redone in Swift. &amp;#x200B; Source: [http://daringfireball.net/thetalkshow/139/federighi-gruber-transcript](http://daringfireball.net/thetalkshow/139/federighi-gruber-transcript) From the Link : "FEDERIGHI: We have all types here within Apple. They start out with the “I love Objective-C. I don’t want to change” to “OK, maybe there’s something to this Swift thing” to “Let me give it a try” to “I love it.” We’ve gone through all the phases internally. You know, we’ve had some really great adoption by teams like … the team that does the Dock and the window management on OS X, implemented all their new features for El Capitan in Swift and started mass-converting all of their code, and say that they couldn’t imagine going back and that they’re more productive with it. Part of what our internal teams need to deal with, though, is that they’re working on, let’s say, the current version of Swift 2.0 while it’s not done yet. I mean, while it’s not even WWDC-level done yet, right? And they’re working on the interfaces in terms of our internal frameworks that haven’t been modernized for Swift. And so, they’ve got it rough. They’ve got to really love it to make that leap because they’re working on a very, very bleeding-edge environment when we use it internally. Thankfully, with Swift 2.0 now well out the door, that’s stabilized things a good bit and they’re really open to it. But there’s been just lot of feedback. And a lot of it has helped with the impedance, making sure the impedance between Objective-C and Swift is absolutely minimized because of course we have and will continue to have and continue to write more Objective-C code, and so the ability of Swift and Objective-C code to work together completely naturally is a huge focus. A bunch of things like generic collection, support for lightweight generics in Objective-C, were big pain points internally and something we fixed in the language, and is now great for all of our app developers externally. So, it’s been a not dissimilar road for us internally to what you see outside. But in terms of Swift and writing big apps, it’s certainly the case that when Swift 1.0 came out — heck, we didn’t support incremental compilation in the very first update. And so that was going to be a limiting factor for productivity for people who had big apps. A lot of that stuff has changed. And then in 2.0 having a good error-handling model, having the availability check so you could span API versions — these sorts of things. I think it really addressed the vast majority of pain points that we were experiencing, that I think the community was experiencing about writing larger apps. And so much about Swift is actually inherently better for building big apps because it handles modules and namespaces in a way more naturally than in Objective-C. It makes the API contracts a little more clear, the code more obtainable. So, we’re very comfortable."
For the chat UI, you can use [MessageKit](https://github.com/MessageKit/MessageKit). It works well and has a really great community backing it. I'm actually using it in one of my production apps.
HTML is pain in the ass to render.
You can create it from scratch and customize accordingly to your app's design. Not a complicated thing: create UIView subclass, put it on top of the current UIWindow instance and dismiss the toast with by timer.
If you want to.
Sure, that doesn't mean a developer shouldn't care, or shouldn't question it.
Thank you, sorry for the long reply!
no.
It’s mostly a style/convention question although you still need to be careful when you have two variables in different scopes with the same name.
No problem, glad to help. If I might ask, what is the layout of the data? The size of it? The use for it? There might be better or easier solutions to your problem.
Oh boy. That question is like asking if someone should use tabs vs. spaces. There are pros and cons to each. In my opinion: - Biggest pro: you always differentiate properties vs. local variables which shadow them - Biggest con: you lose the ability to recognize `self.` as being important There isn't even consensus in official Swift projects. The standard library doesn't require it, but swift-nio does. Personally, I don't. Lots of people do. I like that, because I only use it where it is required, it means something when I use it – if it's in a closure, it's because I'm explicitly capturing self, etc. But that's just me.
Because that’s the idea behind testing, you isolate the app from all other factors, so that your tests always run the same. Our backend devs write tests for their code, so they shouldn’t be a factor in how the app works. Also, not everything can be faked, we are now consuming a third-party API that is not reliable, but we have already let them know that it sucks and (I hope) they’re working on it. So now we test the app in a vacuum, to ensure the app works, before knowing that the backend works.
It's just a text file with the first line being junk values; then 8 integers of different values on each line, spaced in between each other for about 20-30 lines.
Apple indicates in their books to not call self
[https://github.com/schmidyy/Loaf](https://github.com/schmidyy/Loaf)
What if you accidentally call an endpoint twice during your registration flow, so your actual backend would reject it? You would never find that out if you test the backend separately from your app and. UI testing is for making sure everything still works when you put them together.
You should always call self where clarity is needed.
Multiple ways to go around it. Here's 2: Render in a web view. Do some string injection to add a css file and you got it. Render in a text view by adding the text as attributed strings. This can be painful if you go the none external library way, but there are some libraries that can help a lot with it like Attributika.
The best way is to be consistent within your codebase. If you are starting your own project/building something from scratch then do what feels right to you. Personally, I don’t like putting `self` where it isn’t required, but my team lead forces me to put it in when we are assigning (eg `self.name = “123”` ). If you entering existing project, just stick to its style.
Do you read this on GitHub? On Xcode I have setup the tabs to be three-spaces wide, so it works great
It is pretty common to have the interface split across multiple files in swift (and even in C/C++). If the access level were \`private\` it would hinder this ability as everything would be limited to just the class/struct or file in the case of a free function.
Die meisten deutschssprachigen Channels die ich bisher zum Thema Programmieren gesehen hab waren doch eher monoton-einschläfernd, dir kann man aber wirklich gut zuhören. Wenn der Content jetzt noch etwas spezieller und vor allem frequenter wird (wie einige hier bereits erwähnt haben), geht das alles in eine gute Richtung! Hab auch mal ein Abo da gelassen.
It works well with framework oriented programming.
&gt;three-spaces wide absolute mad man
I have a bit of feedback, if you're open to it. - Some syntax choices seem a bit weird to me. For example, your if/else in RetryingOperation.swift:110. Is this an error? Why is the if in one line and the else in several? Same thing in 460. Having an in-line if makes it a bit harder to read, imo. - I haven't yet gotten into the logic of it, but having a double optional (TimeInterval??) is definitely a code smell. I would look into why that is happening and simplify accordingly. - In Swift, it's no longer a thing to add `is` before variables (e.g. isAsynchronous). That's a legacy choice from Obj-C. - You use self in some places that don't require it, like in WrappedRetryingOperaration.swift:78 I think you've put some good effort into this and I immediately realized I could use it in a few places in one or two projects I'm working on. Good job!
When I want to add functions in the way of convenience initializers or getting values using only an object's existing properties, I use an extension. When you want to add more properties to an existing class then I make a new class with inheritance. More times than not you'd want to extend something like UIColor, and subclass something like UIViewController in my experience
Maybe you modify the datasource's array after `viewWillDisappear` is called or something like that?
I figured it out. I just had to call when either of the buttons are tapped on. This solved the issue. The tableView stops scrolling instantly. This works and it doesn't crash `tableView.setContentOffset(tableView.contentOffset, animated: false)`
The view doesn't disappear though. But I figured it out. Thank you for the input
Wonderful component! Thank you.
Thank you for your feedback.
Well, I misunderstood the question. Thank you for informing me
Interesting solution, thanks!
Thanks!
Thanks for info.
Their sample code: &gt; struct Configuration { &gt; &gt; static let productScreen = StepAssembly(finder: ProductViewControllerFinder(), factory: ProductViewControllerFactory()) &gt; .add(LoginInterceptor&lt;UUID&gt;()) &gt; .add(ProductViewControllerContextTask()) &gt; .add(ProductViewControllerPostTask(analyticsManager: AnalyticsManager.sharedInstance)) &gt; .using(UINavigationController.push()) &gt; .from(NavigationControllerStep()) &gt; .using(GeneralActions.presentModally()) &gt; .from(GeneralStep.current()) &gt; .assemble() &gt; &gt;} &gt; try? router.navigate(to: Configuration.productScreen, with: productID) Here's boring UIKit: &gt; if isLoggedIn { &gt; let controller = ProductViewController(productID) &gt;. self.show(controller, animated:true) &gt; } That analytics call probably doesn't belong in navigation, but imagine an an extra line if you disagree. &gt; RouteComposer allows you to split everything into small reusable pieces and store navigation configuration separately from your view logic. Also, the above implementation will grow dramatically when you try to add Universal Link support to your app. Especially if you will have to choose from opening ProductViewController from a universal link if it is already present on the screen or not and so on. I'd probably just send `openProduct` to the responder chain. An existing ProductViewController can accept and handle the message. If there is none, the root navigation controller can spawn a new ProductViewController. That said, how much of your app deals with universal links? If it's a niche feature, I'd rather make that portion a little more complicated than adding complexity to the common case.
The general principle here is “be easygoing about things UNLESS doing so would be irreversible”. Public is a scary ongoing commitment, but internal is easy enough to switch to private if needed (since only your code needs to change).
Calling reloadData() after you clear your data should work.
The ifs is an old habit of mine. Tbh re-reading it, especially the one with the if on one line, and the else on multiple line, it’s weird indeed. I might change it later. The double-optional is intended and explained l. 152. It is for internal use anyway, so shouldn’t bother clients :) `isAsynchronous` is not a choice, it is an override of Operation and thus cannot be renamed. The `self`s I will definitely remove! Thanks for the feedback, it is much appreciated :) Stay tuned for more projects like these coming soon.
I like odd numbers, what are you gonna do? 🤷‍♂️
While max answer is perfectly fine, it resolves around inheritance which is not always the way to go. In fact, Apple themselves heavily promote the usage of value types, i.e. `struct` instead of class. I use extensions a lot, it is one of the best things about Swift (and ObjC). But you can ask yourself if the code you put will be relevant in more use cases than one, if it is extremely nisched and sort of blots the API for said type, you might wanna create a `private extension ` and put it in the same file as where it is used.
One more case for using extension would be when you want to provide a default implementation for some functions of a Protocol
Danke für dein Feedback! Ich schreibe mir gerade Ideen zusammen, worüber ich eine etwas spezialisiertere Video-Folge drehen könnte. Am Samstag werde ich noch ein Video über Generics machen, in Verbindung mit Netzwerk Requests.
In my experience, they are a useful intermediary when converting an ObjC codebase slowly over to Swift. Rather than biting the whole task off at once, create an extension of that ObjC class in Swift and start converting one function at a time. The added benefit is that if some other bug or task needs higher priority, you'll never be too far from having something in a good, mergeable state.
Some people say you should use extensions for protocol conformance - to keep the class clearer to read. I like it personally, and it it makes it especially easily to delete later, though others say you should just use mark comments.
Here. [Knock yourself out](https://forums.swift.org/t/style-explicit-self-when-referencing-instance-member/21173).
Is the class of the xib correctly set? It should be in one of the panels on the right side.
This is why git branching exists lol.
Until you have a stale branch that you forget about because you get sidetracked with higher priority issues. It you're constantly merging in little bits at a time, you greatly reduce the likelihood of abandoning a branch.
The only time I'm not using extensions is when my type is so simple it would be silly to go outside of a simple definition. For example: struct Foo { let bar: Int let baz: String } No need for an extension there. However, if I wanted to conform to some protocol such as `CustomStringConvertible` I'd do that in an extension: extension Foo: CustomStringConvertible { var description: String { return "(\(bar), \(baz))" } } That way all related functionality is done as a unit and clearly demarcated from the rest of the code. Basically, if it's not declaring storage or absolutely essential functionality that can be represented in a compact manner it's getting put in an extension.
The way I think about extensions depends entirely upon the interface I’m trying to implement. In Objective-C, a great pattern to break up a large public interface to an object with many (often utility) methods is to declare categories inline. You can see [an example of this here](https://github.com/CodaFi/CFAAction/blob/master/CFAAction/CFAAction.h#L68). Some authors go so far as to put separate categories in separate files, though I find this often indicates your object is becoming too complex, or you’re too religious about separation of concerns (possibly a symptom of the former). All this to say, when implementing a large public interface, the same idea applies: breaking your API into extensions really helps [keep things binned neatly](https://github.com/llvm-swift/LLVMSwift/blob/master/Sources/LLVM/IRBuilder.swift). The next easiest kind in Swift, but not in Objective-C, are local extensions. These are internal, fileprivate, or private extensions of your types or somebody else’s types for any use. In Objective-C, declaring a category on somebody else’s types is frowned upon because load-time ordering of category methods is undefined and you can cause non-deterministic runtime behaviors. Swift has no such problem, so feel free to extend to your heart’s content: So long as it’s internal to your module. Public extensions to types you don’t own, especially those that declare conformances to protocols you didn’t write, especially especially conditional conformances in said configuration, are an anti-pattern. This is the well-known [orphan instances](https://wiki.haskell.org/Orphan_instance) problem in Haskell and other languages with the “open world assumption”. Notice that these are ordered from least bad to most bad here: I’m not saying e.g. you shouldn’t extend String (within reason), I’m saying e.g. you shouldn’t extend Optional to conform to Sequence. So that’s the 99% case. There’s still some weird corner cases like wanting an equivalent to categories on NSObject because - well, I suspect you’re working with legacy code and don’t want to refactor it. Most of those cases have much better equivalents in Swift - you probably just want protocol extensions.
Hey guys, I'm relatively new to Swift and need help going through an example problem. Here's the code given: class Circle { var radius = 12.5 var area: String { return "of rectangle for \\(radius) " } } class Rectangle: Circle { var print = 7 override var area: String { return super.area + " is now overridden as \\(print)" } } let rect = Rectangle() rect.radius = 25.0 rect.print = 3 print("Radius \\(rect.area)") &amp;#x200B; class Square: Rectangle { override var radius: Double { didSet { print = Int(radius/5.0)+1 } } } let sq = Square() sq.radius = 100.0 print("Radius \\(sq.area)") &amp;#x200B; I need to change the property inheritance values to override the default values and to comment out the override to return the original values without throwing an error. Any help with this?
You’re missing a huge case which is extending protocols with default implementations. You can use this to give structs lots of functionality for free simply by declaring conformance to a protocol.
This is a very simple way to look at it. 1. Boring UIKit will open this product controller even user is already there. 2. What is you need to show login screen first and then if user successfully logged in - show him the product. While in login view controller user can use "forgot password flow" that will involve another view controller, then email, then a universal link to your app to reset password which is another view controller, then you have to login user and finally show him the product. This solution wraps it all.
One reason to use extensions is to cleanly organize your code. Here's a common pattern that you'll find in Apple's own sample code: ``` class SomeTableViewController: UIViewController { } extension SomeTableViewController: UITableViewDelegate { // Put delegate funcs in here } ``` The idea is that since delegate conformance to optional methods isn't explicit, you can section off that code into its own area to make it more obvious. It also just makes your code more readable IMO. You can also use extensions to provide default implementations for protocol methods, which lets you compose those methods onto classes just by conforming to that protocol: ``` protocol DoesAThing: UIViewController { func doAThing() { } } extension DoesAThing { func doAThing() { // Actually implement here } } class SomeVC: UIViewController, DoesAThing { // you can now call doAThing() on any instance of // this class, no further code required } ``` Extensions are of course also useful for adding functionality to existing things. I think it's particularly useful for adding convenience functions that aren't a part of the standard library, for example a method for decoding a hex string into a UIColor. I think there's a limit here, though; always ask yourself if all instances of what you're extending need that functionality. If not, you should probably subclass instead. There is an exception here, though. If you have a function that would fit really well as an extension to an existing class, but you're only going to use it in one file, consider writing it as a private extension. That way you're not polluting the object with methods that don't matter in other areas of the codebase.
Default implementations work with objects as well. And you can further constrain your protocol by declaring it class only if needed
Hey, I'm not sure if this is the issue but if you make a view update off the main thread you can crash. So when the button it making the data request on the main thread and the scroll tries to update and is pushed to a back thread it can result in a crash. Just to keep in mind! Good luck friend!
They're all objects - `struct`, `class`, `enum`.
Great advice here, use the tools of the language. Access control is a great tool for keeping useful stuff internal to your own code. Extensions just build on that and provide an excellent way to add functionality.
Check out the [Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/)
See, I highly disagree with this thinking. I don't think that putting the TableView methods in an extension does anything for separation or making it easier to read. In fact, I find it more difficult, because when you use Marks, you get something in the drop down that will indicate "here's where the tableview methods are". With an extension, you don't get that. And if you have an object who's main purpose is to implement that protocol, it doesn't make any sense to do that.
An app to control a GOTO system for telescopes...
Also the winners of the [Apple Design Award](https://developer.apple.com/design/awards/)
Extension can be used: - to extend existing type from framework - like UIColor, String, etc. - with custom helper methods. It helps with code reuse, as you may use it not one time, and make design more clear, as being available from extended type; - to put your type constants in its extension to better organize code; - to implement traits. But it requires good understanding of OOP, and especially Composition over Inheritance principle. Swift supports Traits by protocol extension and conformance, so it suits CoI well. Wikipedia articles https://en.m.wikipedia.org/wiki/Trait_(computer_programming) and https://en.m.wikipedia.org/wiki/Composition_over_inheritance give good introduction to it. There are cases to use extensions, but you should care as its overuse may result in complex and inflexible code.
&gt; Boring UIKit will open this product controller even user is already there. As I already said, one way to handle it is via the responder chain. If the product view controller is present, it can handle the request. If not, some parent view controller can handle spawning a new controller. &gt; It's like to say, why would i learn Swift? Objective C does the same, stable and even compiles faster :) Because Swift is five years old and encouraged by Apple, while this system is just new and shiny from "Some Dude On the Internet." And despite Apple's support, it was foolish to use Swift on a large codebase in those first two years. Ask the companies that wasted weeks on migrations between Swift 2 and 3. &gt; What if you need to show login screen first and then if user successfully logged in - show him the product. While in login view controller user can use "forgot password flow" that will involve another view controller, then email, then a universal link to your app to reset password which is another view controller, then you have to login user and finally show him the product. Here's one take: enum Link { case openProduct(productID:String) case verifyEmail(code:String) var requiresLogin:Bool { ... } } class RootViewController:UIViewController { func dispatchLink(_ link:Link){ guard userIsLoggedIn || !link.requiresLogin else { handleLoginWall(link:link) return } switch link { case .verifyEmail(code:let code): if let loginController = findCurrentLoginController() else { loginController.verify(code:code) } else { let loginController = LoginController(fromVerification:code) self.show(loginController) } case openProduct(productID: let productID): // Fires off message that can be picked up by, // an existing product controller or spawn // a new one. self.openProduct(productID:productID) } } func handleLoginWall(link:Link){ if let loginController = findCurrentLoginController() else { loginController.afterLoginLink = link } else { let loginController = LoginController() loginController.afterLoginLink = link self.show(loginController) } } } } &gt; Any commercial app deals heavily with universal links. It is the main engagement tool that brings users to the app. The actual parsing and interpretting of links is a narrow slither of functionality. The common case is "User taps a product cell, go to that controller." &gt; This solution wraps it all. The solution is worse than the problem.
This is a good place to start: https://developer.apple.com/documentation/appkit/views_and_controls
You can still get that by adding the MARK right above the extension implementation pf the delegate conformance methods?
Solved folks.. I am such a noobie. &amp;#x200B; Square brackets for arrays, yes.... oops!
What do you mean “file type”?
In Xcode. There are several options when you choose to create a new file and I almost always choose to make a swift file. For this fast could there be a better choice?
I mean, you’re gonna need a .swift file. But you could create a data model if you’re using core data. But you still need a swift file somewhere to load the data into a view and animate it. Tip: If you choose “cocoa touch class” it creates a .swift file, but it automatically subclasses to cocoa object you select
Total beginner here. I just started working on my first game in Swift. I'm making a paper football game using SpriteKit, and so far I have implemented my "football" and the ability to touch the screen to move the football around. Anyways, I've spent a bunch of time searching the internet trying to find a way to use your finger to slide the football, instead of it just following where you touch, but to no avail. Any help would be appreciated!
I know it depends greatly on the features of the card, but would it be better to create a card template that reads a file to get its distinct info Or, should I make a card super class and all used cards subclasses. Or something different 😕
That's not correct and can be a source of confusion depending on what you're doing, especially when designing your API. Structs / enums are value types, classes are reference types and by convention referred to as objects. Not sure there was a way to write that without sounding like a dick, but the differences are meaningful
Personally, I would layout like this: Card.Swift image: CGImage hp: Int attacks: [String: Int] // etc... CardView.swift cardData: Card lazy var imageView: UIImage = { return UIImage(cgImage: cardData.image) }() // etc... using lazy cars to load data Then create each instance of a Card
I think this will do very well for my project. Thank you very much.
I would counter that by saying that I typically add a \`MARK\` to an extension that conforms to a protocol. I should have written that. And your point stands that you shouldn't have an empty class implementation with an extension conforming to a protocol next to it if the whole point of the class is to conform to that protocol. I also feel the same -- I just thought that would have been obvious not to do. These aren't dogmatic rules, just tips.
You can, and that's usually what I do. I should have noted that.
Can’t you just hand it to a web view?
Refactoring the first iOS app I ever built at my current job, it’s lots of fun to see how much you learn in just over a year. Also trying to push my skills in Android and backend development to the next level :)
By an even older convention, all semantic values in memory are called objects. By that convention he's correct: they are all objects. If you look in the Swift Programming Language book you'll find that it uses the older convention.
Just make it a .dll
What are the benefits of .dll that would help
My [100 Days of Swift challenge](https://www.hackingwithswift.com/100) continues, and as I write this I just posted day 68 – it's an hour of free learning every day, with videos, tests, and more. I also just announced that I'm running my own Swift conference in the UK, with all profits going to charity. It's called [Hacking with Swift Live](https://www.hackingwithswift.com/live) and takes place in July, so I'll be able to cram in lots of new things from WWDC19. I've been posting a lot of videos to YouTube recently, with my most recent one taking [an unusual approach to Create ML](https://www.youtube.com/watch?v=a905KIBw1hs). And of course to celebrate the 1st of this month I had to [post something a little fun](https://www.youtube.com/watch?v=wC7CnUqcXV4) :) Anyway, this month I plan to continue my weekly Swift on Sundays livestreams. Each week I create a new app from scratch, and take questions from folks during and afterwards – I've done 12 of them so far, and you can [see the full playlist here](https://www.youtube.com/playlist?list=PLuoeXyslFTuZNAZKB3FAYqiJZKigjC3VG). This weekend we'll be making a menu bar app for macOS, which is the first time we're creating a macOS app in the series.
Working on a new app, super excited about it because I've actually been using it every day since I created the first draft. It's essentially a to-do list but with a twist that I think is original (I like it anyway), what I'm most proud of is that the project doesn't include a single non-Apple framework. Anything I've wanted to include (toast notifications for instance) I've just done myself. Had a recent bout of frustration where integrating SiriKit was just not working, fixed it by copying all of the files to a brand new project and changing not a single line of code. That was fun. Struggling now with when to stop adding new features and just settle on a binary to try and get approved.
It is all as simple as you wrote until it becomes complicated. Add there an A/B test, present controlles vc push to the navigation or open in another tab, add there conditions not to open products if it is open already; and so on and simple solution will transform in to a spaghetti. Anyway, thank you for your reply and time you spent writing the code. I am happy that you do not need to handle this issues.
I don't know about UIButton, but there are several styles of NSButton, and many of them (including the default) have a fixed height. Are you sure your UIButton is occupying the space you think it is?
Still working on my modern, open source [macOS markdown editor](https://github.com/lukakerr/Pine), a bunch of new features have been added in the past month or so, and I’d say it’s ready for daily usage. It’s been pretty fun to work on, and I’m learning a lot more about AppKit and Cocoa
Why?
&gt; It is all as simple as you wrote until it becomes complicated. Adding a complicated framework on top of complicated requirements doesn't make it simpler. It just adds another layer of complexity. &gt; I am happy that you do not need to handle this issues. I am happy that this is the most complicated thing you handle.
Does anyone know if the Package Manager has been ported? Not yet usable without it
how it is suppose**d*** to be used. Nothing ever is "suppose to". Things are "suppose**d** to". That's how it works. supposed | səˈpōzd, səˈpōzəd | adjective [attributive] generally assumed or believed to be the case, but not necessarily so: people admire their supposed industriousness.
I’ve been working on a new *free* WWDC companion app with countdowns and related events. I’m trying to make it a great app for all developers attending WWDC or nearby events and I’d love to hear what you think! https://itunes.apple.com/app/id1458485759
most straight forward way &amp;#x200B; for ele in arr { if ele == "A" { ele = "B" } }
Could you use `map` for this? Such as: ```arr.map { if $0 == “A” { return “B” } return $0 }```
You're thinking about it incorrectly. Stop thinking about file type
Making a cross platform sprite kit game based on a simple rts defense game I used to play on addictinggames.com when I was in high school.
No, but, there are patches in flight to help get swift-package-manager building on Windows.
&gt; If you look in the Swift Programming Language book you'll find that it uses the older convention. I don't think that's true, assuming you're saying that TSPL uses "object" to refer instances of classes, structures, and enumerations. It uses "instance" as a broader term, and only uses "object" for class instances. I agree with your broader point that there's an older convention.
You can make it a bit shorter as well: &amp;#x200B; let arr = ["A", "B", "C", "A"] arr.map { $0 == "A" ? "B" : $0 } // ["B", "B", "C", "B"]
Right, there are several different meanings to "object". An older computer science meaning is anything that has identity and that has properties and attributes specific to that identity. For example, a data structure that represents the properties and attributes of a car. The group of that identity, properties, and attributes is called an object. Newer paradigms extend that older meaning with the concepts of inheritance and polymorphism, that object types can be part of a more general type and that they can also be specialized for more specific types. So `struct`, `enum`, and `class` are all representations of objects. So are things like Core Foundation's `CFString` - which is a cluster of functions and primitive data representations. Here's a good read on some history and definitions of objects and object-oriented programming: [A Brief History of Object-Oriented Programming](http://web.eecs.utk.edu/~huangj/CS302S04/notes/oo-intro.html) &gt; The idea with an object is that it advertises the types of data that it will store and the types of operations that it allow to manipulate that data.
Can I try it?
As others have said, `map` is a natural choice for this. You could also use `split` and `join`: var arr = ["A", "B", "A", "C"] let replaced = [String](arr .split(separator: "A", omittingEmptySubsequences: false) .joined(separator: ["B"])) print(replaced) // ["B", "B", "B", "C"]
Is .NET somehow going to lock you in to a Windows workstation? Looked this up in the internet but couldn’t find anything conclusive.
As others have pointed out, `map` may be the good way to go, [`replaceSubrange(_:with:)`](https://developer.apple.com/documentation/swift/array/3126960-replacesubrange) May also be a good choice depending on what your use case is.