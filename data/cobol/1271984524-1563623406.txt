My suggestion is get books off of ebay or amazon and torrent a Micro Focus or RM/COBOL compiler. Both are very expensive to buy on your own.
How's OpenCOBOL? I have a z/OS account that I can play with, so having access to a high-end compiler isn't an issue. However, I wanted to learn on my local machine, and I was planning to use OpenCOBOL.
Nothing wrong with that...but the OpenCOBOL has a few missing things from ANSI 68 and 74, althought 85 is the defacto standard. If you are looking for the basic "learn COBOL", OpenCOBOL will do fine. I have it installed on my Debian deployment and it works good. The RM/COBOL I have is an educational version for Win32.
Don't torrent a compiler! There is a FREE LEGAL ONE FOR LEARNING from Micro Focus: http://download.cnet.com/Net-Express-with-NET/3000-2069_4-10866201.html?part=dl-10866201&amp;subj=dl&amp;tag=button PS - how do I make a rss feed from r/cobol? 
In some respects, from what I'm reading, this seems like another case of Ada Lovelace. Girl gets into computing early, takes credit. Wiki says she conceptualized the idea of verbose programming languages. COBOL was a merger of [COMTRAN](http://en.wikipedia.org/wiki/COMTRAN), which was inspired by FORTRAN. What I'm getting at is that COMTRAN shows English being used to specify a program, COBOL just went farther than most cared to (ie ADD X TO Y GIVING Z over Z=Y+X) Let's not discredit William Selden, Gertrude Tierney, Howard Bromberg, Howard Discount, Vernon Reeves, Jean E. Sammet, or the rest of CODAYSYL now
I'm not sure about the PHP part. But when I need to display results to just the command window I just use "Display string-name". I don't use the UPON clause at all. Have you tried that already? Jay
I suggested this in the other thread as well, but Move spaces to Name1 before you put content you want in it. 
Try setting initial values when you define the variables, ie. 01 NAME PIC X(10) VALUE SPACES. 01 AGE PIC 9(2) VALUE ZERO. etc.
Yes, a least on the Stratus' and Z900's implementations. And actually is seven spaces. First 6 columns for the line number. e.g. 000010 (but you don't have to write them) and the seventh column to indicate comments (with an *). the Z900 compiler, if i recall correctly, inserted the line numbers after compilation, the stratus one didn't. The Stratus Cobol Compiler has a neat feature, with a flag you can tell it to ignore the lack of the indent. And with another utility you could transform one source file without indentation to have indentation. *edit: formating*
Is there a way to not have to do this with OpenCobol?
&gt; *edit: formating* Pun intended?
Apparently yes. Reading about OpenCobol it seems to have a flag to make it use the free format (no indentation). [http://en.wikipedia.org/wiki/OpenCOBOL#Compile_and_execute](http://en.wikipedia.org/wiki/OpenCOBOL#Compile_and_execute)
Hahah. Not really. but now it is.
My memories of this is really hazy, but isn't it the first column that is for marking comment lines with '*', and columns 2-7 that are for line numbers?
My memories aren't pristine either, but i remember the compiler complaining about an * in the wrong place. So ,at least for the Stratus' compiler, seventh column for marking comments.
Thanks!
Your comment made me look it up (which, arguably, I should have done before sticking my neck out in the first place) and of course you're right. But for once I'm glad to be wrong! Because that just means that my COBOL days are finally so long behind that it's not any longer occupying my mind all that much :)
I should clarify, this is a one off project and we have been looking for a term license type solution for about 30 days.
Thanks! I'll check these out.
My interest in COBOL waned in the past month, unfortunately. Still, thanks for the reply. I hope someone else can find these useful.
No, unfortunately. Thanks for the offer, though.
Yes, I have examples, exercises with solutions and exams. PM me your e-mail and I will send it.
I can't list any specific issues to using OO COBOL other than maintainability. I know that while it's offered in universities, many of them also try to convince grads that it's dead or dying. So there might not be the bodies to maintain after sometime. Other than that, I work for a large corporation that extensively uses COBOL for a good portion of our primary computing and we've opted to migrate to Java EE and web services to phase out COBOL for our "real-time" transactions.
I would highly recommend this one: [Murach's mainframe COBOL](http://www.amazon.ca/Murachs-Mainframe-COBOL-Mike-Murach/dp/1890774243). It's a bit pricey, but it's up on current trends and even briefly discusses recent developments in Object Oriented and .NET COBOL.
How would I get a COBOL runtime system? I really know nothing about COBOL. Is that just an IDE?
You would need either the computer where COBOL applications are being run, or a computer with the COBOL compiler installed on it - preferably one with the compiler as it's more likely to have the two utilities (which are actually COBOL programs) installed. If you have no access to these tool, you can try this: http://www.cobolproducts.com/datafile/ (I've never used their product or their service) As a last gasp, do you have access to the source code for the program(s) that created thee files?If so, you may be able to determine the file structure from the Work File Definition section of the source.
The problem is that I don't have access to the source. I'm attempting to extract them for a client. I just tried the data viewer and it just crashes upon attempting to open the data file.
you may not need COBOL. can you view the contents in another program, like a hex dump lister, or even (on Windows) notepad? 
I've tried notepad. Some of the info is readable, but not all of it.
the unreadable stuff may be binary or packed decimal data. can you discern a repetition in the data? determining logical record length will be one of the first steps in extracting the data you want. if the dataset consists of fixed length records, you will see some kind of repeating pattern. EDIT "~~of~~ if the dataset"
Well the source would hold the record layout, although it may have been copied in at compile time. Your chances of figuring it out without that are slim. There are unlikely to be line feeds in the file, although there is a good chance they are fixed length records. Unfortunately it was common for there to be redefined records, where the first couple of characters in the record would indicate the record type, and a different record layout would apply for each type. I am surprised that the client does not have access to the source - are you sure the client is the legitimate owners of the data?
I thought I was the only cobol programmer that listened to Brand New. I do mainframe stuff, but are you closing your files at the end? You could have a file-section or linkage area issue too.
Ops, sorry, my very first submission to reddit...I wanted to explain it a bit so you don't waste time clicking the link. Basically, I've made a LGPL licensed lib for Java that allows to define a buffer the same way it's made on Cobol. This way, a programmer can access fields exactly the same way it's done with Cobol and read or write a byte[] buffer that can be interchanged between Java and Cobol. Hope this be useful and I'm open to suggestions and improvements.
[Visual COBOL Personal Edition](https://www.microfocus.com/product-downloads/vcpe/index.aspx)
Just move it to a field thats defined smaller than the original. It being comp shouldnt matter.
IIRC, cobol doesnt store the data physically in sequence, so even if it overwrote data it wouldn't necessarily be the next field in the program. 
Came here to say this. Murach's is easily the best COBOL book I can think of on the market.
I recommend Murach's books as well. I too was in your shoes and wanted to practice COBOL beforehand, but it's difficult to do on a PC. I didn't get any of my hands-on training until I landed a job and had access to an emulator through work. I learned all about TSO and ISPF editor on the job. We have RDz(Rational Developer for System z) now that we can use too. If you've used eclipse for Java, etc. this will be very familiar to you. Mainframes were entirely new to me and I learned so much because they are so different from normal computers. Sites I use that I can think of off the top of my head are: * [SimoTime](http://www.simotime.com/indextwo.htm) * [Mainframe Guru](http://www.mainframegurukul.com/tutorials/programming/cobol/cobol-tutorial.html) I also use Google searches a lot to help me which leads me to a lot of forums. If you're going to using COBOL, chances are you'll be working with JCL, SQL, VSAM files, etc. It's good to read up on those as well. Best of luck on your interview! I'm a young guy working on the mainframe and unlike a lot of others my age, I actually enjoy it. I hope you do as well! I've actually worked on programs that are older than I am!! 
Thank you so much for your response I will def. check out your suggestions! I hope I like it as well, can't be any worse then the over night shift at a data center like i'm doing now.
Your PIC should be 99V999 not 99.999 and the value you plug into it should be 34.25 not 34V25. Also losing values due to incorrect pic size is called truncate not cut. This site will allow you to practice online: [compileonline.com](http://www.compileonline.com/compile_cobol_online.php) Here is an example program I coded for you to start with: IDENTIFICATION DIVISION. PROGRAM-ID. HELLO-WORLD. DATA DIVISION. WORKING-STORAGE SECTION. 01 Ex1 PIC 99V999. 01 Ex2 PIC 9.9. 01 Ex3 PIC +99999. 01 Ex4 PIC -99999. PROCEDURE DIVISION. DISPLAY 'Hello, world'. Move 34.25 TO Ex1. Display "Ex1: 34.25 to 99V999 = ", Ex1. Move 146.6 To Ex2. Display "Ex2: 146.6 into PIC 9V9 = " , Ex2. Move -108 To Ex3. Display "Ex3: -108 into PIC +99999 = ", Ex3. Move 108 To Ex3. Display "Ex3: 108 into PIC +99999 = ", Ex3. Move 108 To Ex4. Display "Ex4: 108 into PIC +99999 = ", Ex4. STOP RUN.
My co-worker at my internship learned COBOL when she was in college, I have express interest in learning it and she said that she still had these books. She no longer practices COBOL and haven't for years. Now, I know that languages rarely ever change, but is there any reason that these books would *not* work to learn from?
Keep in mind that some of the methodology and coding practices taught in the book are no longer used in modern day cobol programming. 
I believe they fall into the period after Dijkstra started the "go to considered harmful" paranoia, but before COBOL-85 introduced the END-IF, END-PERFORM and EVALUATE statements, permitting a more flexible code structure (some might say too flexible). Otherwise they will teach you some good discipline in writing well structured COBOL, and that remains useful knowledge.
In addition to the comment from /u/Bentrow , it depends on the system implementation. Are you using a GUI COBOL like Acu or just doing batch processing? Does the company have separate frameworks or standards? Any entry points or other modularization? I imagine if a co-worker lent them, you should be pretty safe. A lot of it is just looking at other programs that have done similar things on the system. I picked up COBOL in a week or so (and the tough stuff in a couple months) just by browsing through the code and working on some bugs.
What have you tried so far? We're willing to provide pointers but not do your homework &lt;g&gt;. Have you tried writing the solution in pseudocode? If you are using a book there should be examples of file handling, calculations etc. I would start with solving a small part of the problem and add additional functionality from there. How about doing the file reading part first? If you don't have a textbook (and want to get one) look for a Murach's guide. Online resources would include IBMs Red Book series. Both of these would have sample programs.
I have the code for reading the student file which has information like age, name, gender, etc. Cant figure out how to calculate the average scores and the highest/lowest grades.
Do you need to do it trough a cobol application? Because this can be done purely on jcl.
The thing you need to keep in mind when programming in mainframe is that the new version of cobol 5.2 compiler, you need to have your file in pdse format of you will get an abend. There are also new functions added which has removed some occupied word in cobol, dont have the full detail on which words it is but there is a good manual on IBM homepage. but if you are programming just for fun on your own computer there is no problem with these books, there are minor changes when programming for a company structured cobol.
I'm a Sr Software Developer with a health insurance processor that codes in COBOL. I can tell you for sure that COBOL is used daily by millions of people unknowingly and is used for tons of new projects. We currently enhanced our entire COBOL CICS products to using newer technologies and new DB2 enhancements. COBOL is a great language to get into, as there is a massive amount of code to maintain and very few COBOL programmers. The average age of a developer in my office is somewhere in the upper 50's, so as these people retire off, there is a lack of younger developers coming up behind them. This is due to many colleges dropping COBOL, and it makes you as a younger developer very valuable. You can make a lot of money quickly and if you're any good you can advance up the corporate ladder in a hurry. There are a ton of these jobs available too, but we continually have to use offshore resources from places like India and Thailand because we can't find anyone local who's qualified. I am really happy I focused on COBOL after college, it is an easy language to master and since I am the only developer at my company under 30, I get a lot of perks and bonuses to keep me happy so I won't go to one of the other companies around town. As you mentioned, most of the industries you will work in will be financial, health, transportation, or government, and will be backend processing, so if you enjoy designing cool interactive stuff, Cobol may not be for you, but if you like solving problems in code and designing new ways for processing data, then maybe it's something to look more into.
I think thats because of the part I talked about, you need more then just COBOL to be a COBOL programmer. I think beginners should at least learn a bit about ISPF and JCL, else there is not much point in learning COBOL. Even then it might be strange as you are in a different enviroment, its not Windows or Linux. 
to be more specific, we have several thousand cobol programs that we maintain and many have been put on the web. It's a fairly seamless experience for the web user, but in my efforts to do as little in cobol as possible, I was wondering if anyone else was in a similar boat and what kind of luck they have had with jQuery, python, and php
Generally you would want the COBOL program to create a data source of some kind (file, xml, or better yet a database) and then do "normal" web development against those data sources. (Our COBOL is running on an IBM mainframe with an overnight batch as well as a multiplexed CICS environment. We have everything from COBOL code that manually creates HTML files + javascript to the database/api stuff I mentioned above. A DB2 database on the mainframe can be accessed via a JDBC call from a java/websphere or other application server environment)
Sounds very much like the same IBM system we're running. We've enabled most of the CICS screens to be web-friendly (along with 3270). In the COBOL, we do all of the processing, database connections, string together a large string of html code, and then send that out to the web. We use css and javascript as well, but I'm looking for anyone that also uses more web-languages. It's looking like we're going to include php, but I have very little experience with that.
The only way to get it now is from an academic institution which is part of Micro Focus' [Academic Program](http://www.microfocus.com/education-services/academic/faq.aspx). Micro Focus has other personal edition compilers available, but they have some problems: * Visual COBOL doesn't support JCL and CICS, runs in a different environment (Visual Studio or Eclipse) and has a few [incompatibilities](http://documentation.microfocus.com/help/index.jsp?topic=%2Fcom.microfocus.eclipse.infocenter.visualcobol.vs%2FGUID-DF1DF955-94ED-4611-A730-863CA5C7BBA4AB.html). * Enterprise Developer is similar to Visual COBOL, except it does support JCL and CICS. However, its personal edition doesn't produce executables.
Also, Micro Focus have announced that they'll stop supporting MFE in one or two years... my school and future workplace have started transitioning from MFE already.
I was trained and recruited because of this very reason. Old experts retire, they need new blood to take over. Currently working for a year now as a COBOL programmer (im 26 years old).
It's refreshing to see COBOL that doesn't look like it was written in 1983 by an angry IBM employee thirteen minutes away from going postal. 
I've never come across a compiler that didn't differentiate "alphabetic" and "alphanumeric" data. Which are you referring to? 
I have been working in COBOL for over two decades, and have never seen PIC A(..) used, and I wasn't taught about it when I learnt the language. I only found out about it when I just googled it. Since I didn't know about it, CobTree doesn't support it, and nobody has ever complained; although some have complained about the lack of support for various platform specific COMP formats; or not known that using S9 on a non-COMP field is also platform specific. 
Oh, by no means was I suggesting alphabetic data was in any way *useful* or actually worth taking note of. It's just another of those odd little leftovers from the earliest years of the language. I've definitely seen it used in a lot of legacy code, however, so it does seem odd for any compiler not to support it at all. Then again, I don't know CobTree and what it's typically used for. 
It is just a windows editor with a treeview, but it can also show offsets in a record definition, and act as a file editor based on record definitions. It is only these last two features that would care about PIC clauses. I wrote it to make my job easier, and it's freeware.
Sounds like you sample code. Have you tried locating any. Remember there has only been one COBOL program ever written and everyone else copied it. That aside have have you been able to display the first 40 bytes yet
There are lots of cobol jobs just not in the us, a large local company (10,000+ employees, half cobol programmers in 2000) has sent most all cobol off shore. Anecdotal yes, i believe typical though.
whats the typical salary for junior and sr positions in cobol?
whats the typical salary for a junior and senior cobol programmer?
Depends a lot on the country and company. I get the same salary as developers on other platforms and languages at my company. In the future we might be more rare so we can ask more. But for now its the same. 
I doubt it. You'd likely be better with a version you can run on your own computer as you move beyond the hello world stuff into file and database processing. I suspect the linked version has limited capabilities. Use your Google-fu and you'll find several free options.
Thankyou!!
Maybe on the coasts where the cost of living is higher, but here you'd need 10 years experience or so to earn over 100k. It is pretty common though, just takes getting to a Engineer/Architect level first, which comes after Senior developer in my organization. Or you could do contracting and make 6 figures, but you won't get benefits with those jobs, so after buying insurance and putting money in your 401k, it's less than that.
yea i keep reading how "cobol is in such high demand.. people are getting paid big $$$" but i guess it not really that way.. atleast not much different than any other language
COBOL is primarily used on mainframe. Given its government likely IBM. You'd also need to learn JCL (essentially scripts to run jobs in batch mode), CICS if you're developing green screens/online transactions. DB2 for database, EasyTrieve for report writing, as well as tools for source code management. As mainframe is a different environment there going to be a lot to learn. So be prepared for that ☺ Schools seem to be focusing a lot less on mainframe technologies so few graduates have those skills. As a result businesses are more flexible in actual experience if the candidate shows a desire to learn. For learning COBOL itself you can download some free/open source compilers for PC. For good manuals on mainframe topics look for the Murachs books.
Blimey, I haven't seen Ezetrieve since the 80's! I recall trying to make customisations was like fixing an engine by sticking a very long spanner (wrench to our US friends) up the exhaust pipe - I assume since it still exists, that maybe it has got a bit better?
Our basic mainframe reports are typically written in it. Mostly 50-100 lines of code. Really complex reports tend to be done via off host tools. The mainframe is still alive and kicking for high volume transaction processing. A lot of our back end services run on that platform with the user interface being on a website running on some flavor of *nix.
COBOL developer here. The average salary on my team is around 70k. With that said, I would put your time into learning Java or Ruby like /u/Gorilla_Power has already said. 
Contract opportunies often lead to permanent positions if you know what you're doing. It's very hard finding good COBOL programmers these days.
So, that being said, is it better to go with a regional recruiting firm, or a national one if you want to go contract to permanent? I've been a FTE my entire career. I'm good at what I do, but I'm extremely risk averse.
I've had better experiences with regional firms but YMMV. A firm in CA got me the contract I'm working on in NC. If you know what you're doing, there isn't as much risk as you'd think. It's very difficult to learn COBOL and those that have managed to get some experience aren't that skilled. If you have years of experience and can write JCL in your sleep, you're golden.
There's usually mainframe work in capital cities. Governments don't pay as well as banks or insurance companies but they'll never get acquired or go bankrupt and the benefits are outstanding.
Thanks for your feedback, guys! May I ask how you ended up working with COBOL? To me, it seems like it is not the most widely taught language...
VALIDATE is a statement that was added in COBOL 2002. It's described in [this **1983** *Computerworld* article](https://books.google.co.uk/books?id=a7XF1jwgGgsC&amp;pg=RA1-PA21), and it basically handles data validation. So, why is it not well-known? Because not a single compiler supports it. I have only heard a rumour that [ICL](https://en.wikipedia.org/wiki/International_Computers_Limited) implemented it in the 90's. It's probably not been implemented by anyone else due to a lack of demand and its complexity. [Googling "VALIDATE statement COBOL"](https://www.google.co.uk/search?q=VALIDATE+statement+cobol&amp;tbs=cdr:1,cd_min:01/01/1990&amp;start=40) gives nearly no useful results after 1990—you'd be forgiven for thinking I've made this up. Personally, I think the reason VALIDATE is forgotten is that everyone forgot to mention it and it then got hidden behind the new, exciting object-oriented features (inspired by C++ and Smalltalk, if you like trivia). If you're new to COBOL, you may not yet have heard of MOVE CORRESPONDING and the ALTER statement (some of COBOL's oddest features) and the Report Writer (COBOL's best feature). These are well-known though, and you'll be able to google them for information.
I could write a book on this but I don't know things are considered "well known" or not, given the subject matter. I'm a developer in my 30's who is approaching 10 years developing in mainframe COBOL for a major financial institution, and I constantly feel like a complete outsider from another planet when I lurk around the development sub-reddits. I reckon no one knows anything about COBOL at all....
I didn't have any COBOL when I started my job so yes I would think so. Honestly COBOL isn't a difficult language. You can download a compiler here: https://www.microfocus.com/product-downloads/vcpe/vcpe22/index.aspx This is similar to what I used when they trained me on COBOL. Hopefully you don't have to relocate to Alaska. Look at some of the bigger companies... Think banks and insurance and you'll probably find plenty of COBOL jobs. Hope that helps!
It does help. I've been getting mixed responses as to the cobol career outlook, and you've cleared that up for me. One more thing: It seems that COBOL is a big place with an emphasis on mainframes. Any idea on what I should focus on after going through some generic texts?
Visual COBOL personal edition is what I'm using for my class. I had the same problem in my COBOL class this semester, it's silly that the school hasn't considered Visual COBOL as an alternative. I emailed my professor as well as department chair about how silly it is that we have to use such a fickle system in class when there is a much better alternative at no cost that the students can use at home.
We're using Microfocus MFE in school, but I'm not sure if that's what you're looking for. You'll need to buy a license which got quite a hefty tag on it, and there are (AFAIK) unconfirmed rumors that Microfocus is going to stop supporting/dev'ing MFE in a year or two.
This link describes how to setup and use *GNU Cobol* with Zeus: http://www.zeusedit.com/phpBB3/viewtopic.php?f=5&amp;t=7174 &gt; as a safety precaution Zeus is just a text editor/IDE, but unfortunately, there is a similarly named, but totally unrelated **ZeuS** virus. In any case your virus scanner will always give *Zeus the text editor* a clean bill of health. *Jussi Jumppanen* *Author: Zeus IDE*
Both files you have defined, you open as INPUT. If a file doesn't exist and you open it as INPUT you will get an error. You are writing to the STUDENT-RECORD file, so open that I-O or OUTPUT or EXTEND. From what I can see you never read/write from STUDENT-FILE. You use STUDENT-RECORD-IN as working storage then move it to STUDENT-RECORD-OUT and write that. So, you could just have one file, and define STUDENT-RECORD-IN in working storage. 
Cool. Note, every time you open a SEQUENTIAL file OUTPUT it will get rid of any records already in the file. If you want subsequent runs of your program to add new records after existing records in the file, open it EXTEND. But if you open it EXTEND, the file has to already exist. 
Would you mind if I reposted this on some other sites, /u/psykocrime? I'm sure there are be plenty of willing programmers on the COBOL LinkedIn group, for example.
You are unlikely to find the latest version of COBOL in Enterprise; most places still use COBOL85 compilers. So no UTF-8, strictly ANSI/ASCII (or EBCDIC for old IBM hardware, but most businesses will have transitioned to ANSI based Operating Systems years ago). As for XML, there may be external parsers you can call, but otherwise you write your own in COBOL, using subscripted strings. Not pretty code, I'll grant you, especially dealing with the substitute characters, but it can be done.
I've coded a process to marshal in and out of xml in cobol. The xml parse commands work well. For reference, I think we running enterprise 3.4(?)
Truth be told I took a class a year ago, made it out with a B. And now my work has moved me into a team where two Cobol developers retired and the last one is my mentor. She is mostly busy, but my work has provided some murach books for me to study in the meantime. Funny thing is that the interface and tools I use now are nearly identical to those I used in school. 
Tso 
I had a similar thing happen in 2006. I had "assembler" on my resume because I took an elective in college which was super easy because I used to mess with assembler when I was young. A recruiter at a job fair saw it and knew it was "an old language" and thought I might be good for some upcoming positions so she took my info and later contacted me. They brought in candidates for a screening test (WCOAT test i believe, also called "the wolfe test" (sp?)) which is actually super appropriate and generic. Based on the scores they called people back in for rounds of interviews and eventually I ended up working for them, a large financial institution, where I still work today. They did not expect anyone to have any mainframe or COBOL experience going in. They were specifically looking for "new blood" and only required a 4 year degree, a good score on that screening test, and the hunch that you would be a good fit that could learn your way around the system and all that stuff. Sadly since then I think most companies have turned to "offshore resources" rather than trying to develop long term talent in western locations. (at least this is the impression I get from my own company and the interactions I have had with our clients or other firms in the financial industry) So, my advice to you would be to move to India or China :)
That is beautiful. HK = helicopter? 
Hunter Killers
add 1 to OP giving karma. :)
Cyberdyne Systems always struck me as a COBOL shop.
Oh thats true!! I have something similar on another JCL to unmerge them all. Completely forgot. I'm still new at this . Thanks a lot!
Let's say it's data like this &gt;22872737216381726381762381237816283 I want to add at the end which file they came from &gt;22872737216381726381762381237816283FILE1 Something like that.
You can try something like INREC IFTHEN= (WHEN= (173,8,CH,EQ,C'SBP03204) , OVERLAY= (196:C'FILE1')), second IFTHEN, third IFTHEN
I'll try that. Thanks a lot! 
https://www.microfocus.com/product-downloads/vcpe/vcpe22/index.aspx works if you need a free IDE. I believe its free for a year or something. When doing experimenting on my own at home I use GnuCOBOL and Atom with some syntax highlighting and a linter I whipped up on my own. But the SQL support in GnuCOBOL is a bit weak, there is some support from third parties but I've never felt that it worked great. I'm working on a precompiled for Embedded SQL to work with PostgreSQL. As far as books go, http://www.murach.com/books/mcb2/index.htm is great.
As far as JCL goes, this book was the text for our JCL course in college, and was excellent [http://www.murach.com/books/zjcl/index.htm](http://www.murach.com/books/zjcl/index.htm). For Cobol we used [http://www.amazon.ca/COBOL-From-Micro-Mainframe-Edition/dp/0137908172](http://www.amazon.ca/COBOL-From-Micro-Mainframe-Edition/dp/0137908172) and it was good as well.
Whoa, I didn't even know those stats! 
Where are you located? I'm fairly certain my company is hiring. 
Texas...but possibly willing to move.
I'll PM you. 
It's pretty well paid in sweden compared to regular programmers. At least in the finance sector.
I don't see it having much relevance. In my shop, we primarily maintain a legacy COBOL application. We also have subsystems and sister services in Java. There is no OO-COBOL anywhere. I reckon this is because: - The experienced COBOL programmers don't know it. - The younger programmers know Java. - It would add learning curve and complexity to our legacy code base. - Our business analysts understand the structured COBOL. - If we were to re-implement in OO, we could re-implement in Java, which will run on the mainframe, and on distributed hardware. - There are lots of Java programmers, which makes it the cheaper alternative. 
Nice
Nope. [Lizard poisons Spock](https://upload.wikimedia.org/wikipedia/commons/f/fe/Rock_Paper_Scissors_Lizard_Spock_en.svg). See also: https://www.youtube.com/watch?v=x5Q6-wMx-K8
I'm actually coding a proof of concept now for a batch extract and decisioning process. I see it as an opportunistic way to call Java methods on our mainframe, yet reuse a lot of what we already have coded. This way we can rewrite targeted business logic in Java, allowing for the write once and deploy as it makes sense. 
How is the precompiled SQL going? I would love to see that in action. Just got a new position that has some COBOL reporting systems and we are looking to transfer it all into SQL (of some sort). I haven't been able to get COBOL and SQL to talk to one another (mariadb and pg ATM). Also what are you using for your linter? I am currently looking at https://github.com/tollofsen/language-cobol as the cobol langauge syntax within Atom, but I have not found a linter I like yet.
We got it working. Recently, we have been pulled away to do other things that the business wants us to do. We are currently working with coaches to rewrite the Java written to use junit, and will build test scripts, to ensure we are doing the OO stuff right. So, some good learning opportunities, but not much progress. 
//SYSIN DD * I think stdin would have been the card reader. I guess I could have figured out the device name of one of the IBM TSO terminals
I have a program in gnucobol to control the gpio pins on my raspberry pi
Was this available in 1981?
That explains it,there is?nothing like that here in America, I wish they would offer more programs like that
IBM still has major clients in the mainframe space. They may try and push Them to Java but it's not happening unless the companies comply. I currently work at one of the world's largest financial firms and there is way too much COBOL to replace. Replacing the apps with Java will take FOREVER and continually get pushed off. Plus there is the fear of redoing something that works. It's the old, "if it ain't broke, why fix it?" line. It's not going away anytime soon, my friend. I just recently shifted off mainframe and onto distributed and mainframe is so much more stable. There's COBOL code that's been in place for 20 years and it's safe, stable, and it's fast! 
I work at one of these world's largest financial firms too and that was what I was told. They said at the meeting a lot of big name IBM clients have been pushing IBM for lower costs and now that IBM has finally caved and is now offering for 10% the cost you bet your ass everybody is gonna at least day dream about converting. 
The only new trick is compiling COBOL into Java instead of Assembler - do you really think a JVM can compete with machine code?
Java? trust me, java is dying. Source: 1st year computing student.
For example: 01 master-file. 05 branch-number PIC X(012). The input is 12 character string the first 6 char are supposed to be letters The following 6 are supposed to be numbers. I would like to confirm that the above conditions are true. A valid branch number would be: Branch000001 For example: INSPECT branch-number (1:6) tallying ws-tally-cnt for all **numeric** IF ws-tally-cnt &gt;0 display 'invalid branch number' I am having issues with the inspect function accepting anything other than a specific string value such as '1' or 'Branch'. I could tally the number of '1' in a string but not the number of numerics. 
Hi again, I was trying what you said and it does look like the keyword "numeric" isn't accepted by the INSPECT... TALLYING verb (unless someone else knows how) An alternative I can think of, is doing a PERFORM... VARYING on each byte of the variable and then doing an "IF variable IS NUMERIC," not as nice as INSPECT, but hopefully it helps. Edit: sorry I wasn't much of a help.
No problem. I am trying something a bit different right now. Moving the first 6 char into a PIC X(6) variable And moving char 7 through 12 into a pic 9. I think I should be able to test them with an IF statement. Ill try perform varying next.
You could use the class tests and substring for this, something like IF branch-number(1:6) IS ALPHABETIC AND branch-number(7:6) IS NUMERIC 
[removed]
I mean, you're not wrong. Java is dying the same way COBOL died. It is becoming less and less popular, but it will never go away because when it was at peak popularity so much was built on it.
What helped me learn is that my mentor asked me to recreate an existing job and then let me run with dummy data. 
First JCL. Explain basic input/output setup and how JCL establishes the address space and runtime environment for any program. I have the new user complete two things before programming COBOL. [The Reusable JCL Collection](https://www-01.ibm.com/support/knowledgecenter/zosbasics/com.ibm.zos.zjcl/zjcl_book.pdf) and [DFSORT Getting Started](http://publibfp.dhe.ibm.com/epubs/pdf/ice1cg50.pdf) Have them write a job with a single DFSORT step that sorts in-stream data and writes to SYSOUT. Repeat but have it come from catalog data and write to a new catalog dataset.
Oh, wow! Thank you for these links, I have a copy of DFSORT Getting Started in my work computer and in my mobile phone, as internet is blocked at work. It's my go-to reference for any dfsort related issue. The Reusable JCL Collection is pretty nice, most of my JCL knowledge are from copying existing jobs and googling, so I sometimes don't bother knowing what some of the things are for (as long as it works the way I want it), but this is going to be a nice reference for every bit of curious question the new guy is going to ask. 
If you have the resources to learn COBOL, then why not? I learned COBOL at my first job and been working with it ever since (about 11 years now). I laughed when I found out the company was training me to learn COBOL, coming from a web dev background at school. But who knew it would give me opportunities to travel and work abroad, go back home, and get offered to go back to the client again? But of course, it's still personal preference, if you don't like what you're doing, no amount of advice could make you learn what you have to.
COBOL developers are retiring faster than we can add new ones. If you want a guaranteed (as much as that can be a thing) job then COBOL is a great language to learn. There's billions of lines of code at huge companies that will need maintained and updated for the foreseeable future. Plus, there's lots of new tools that you can use while working with mainframes and COBOL that allow you to create a JavaScript interface between the mainframe and the web, which is a lot of fun and really cool.
It really depends on your preferences and what you want to do. COBOL thrives in implementing business logic and implementing large business applications. C++ graphics programming would be useful for learning algorithms and how to write high-performance code, which would be applicable to any sort of programming involving graphics. If you feel that COBOL is boring, most likely graphics programming will be more exciting. On the other hand, if you're just use MFC to make C++ GUIs.. well, that's probably just as boring.
Nice story, however, what was the program that Dale was doing? 
GLAD YOU ENJOYED IT! THEY ACTUALLY DIDN'T SPECIFY, BUT I SUSPECT THAT IT WAS A FORTRAN PROGRAM SINCE HE MENTIONED HE WAS AN ENGINEER.
There is a SORT example starting on page 9-144 (or 384 in the PDF) in the following COBOL74 Program Reference Manual, Vol. 1: https://public.support.unisys.com/aseries/docs/clearpath-mcp-14.0/pdf/86000296-207.pdf There's a second SORT example starting on page D-7 (769) in the same manual. There's a MERGE example starting on page D-10 (772) in the same manual.
[Here's an example on Rosetta Code](https://rosettacode.org/wiki/Sorting_algorithms/Selection_sort#COBOL).
Thanks. I found that one. But because it doesnt shiw the whole program with field descrptors If is hard for me to understand. 
this work can be done remotly ? I work with some COBOL programmers (Im a C# developer) here in Brazil
I'd say posting a link to your friend's agency would help. It would at least get the name out there.
LinkedIn? I am a COBOL programmer and I get recruiter e-mails all the time. This is technically the right place in reddit, but your exposure here will be so small. Maybe 25 people will see this post. Do you know where they are looking to hire? It's also pretty easy to train COBOL if you hire any math or CS major right out of college.
The company I work for has hired 4 programmers in the last 5 years that were all entirely new to COBOL (myself being the first hire of the bunch). We've determined that it's easier to hire and train them the way we want, then to hire someone knowledgeable that would need to adapt to the way our shop works.
I'm a cobol programmer and I work with about 80 other cobol programmers. Where do we find them? We don't. We train them. It's very easy to learn cobol.
This is useful. I'll pass this along to her and see if it helps
I'm not sure. You can contact my friend at denise.day@cdicorp.com. She can give you more details
My company runs a program every year to train new COBOL/Java devs. It's awesome. 
Yep just fixed it with a bunch of these kind of gems all over
I would advice treading lightly with legacy code; there is no need to rewrite it to your taste if it functions correctly, even if it does read like the original programmer had a background in assembler.
Agreed. However, the only reason I am looking in the first place is the program is no longer functioning. 
I agree. I was a CS graduate (mostly Java) and my only job before was two years experience as a RedHat Admin (Bash). Moving into a mainframe programmer role, learning Cobol was a breeze and JCL isn't too bad either. However, getting used to the z mainframe environment and a 3270 emulator (using F7/F8/F10/F11 to scroll) is not as easy. 
I also used the book Beginning COBOL for Programmers to get started. Works well in conjunction with GnuCoOBOL.
its nice to see people getting into Cobol every now and then. I've built , and designed applications in Cobol. Since you're just getting started, try be to be familiar with navigating the mainframe environment. Tip: 3.4 would be your favorite.. you'll see... If you have access to mainframes , good for you. If not , try Hercules System Z Emulator. There's not a lot to worry about learning CObol. Its pretty straight forward. Just verbous. Things will only start to get interesting when you interface with databases and build online systems. Good Luck
Location?
wat. 
yes
Okay, yea maybe it was all a myth. But as you say there might be some banks and such who rely on the system and it would cost too much to switch to another system. But I bet they want people with a lot more experience with the language in real life situations than a "newbie". 
There is a pretty large demand to support legacy systems. However, if you apply to a cobol position they will likely teach you what they want you to know since schools dont teach it. However, i really think you should evaluate that as a career option. Do you really want to be responsible for fixing code written by someone no longer at the company? Do you want to have your future employment cut short because the company finally switched to a more modern language? Just be careful, dont get sucked in without doing your homework and asking the right questions.
No I was not thinking of giving up on other modern languages. I am currently an iOS developer. But I was thinking of picking up COBOL and then find a nice paying job and on my spare time continue with iOS development or something. That was my plan, if there is a large demand on COBOL programmers.
Yea I guessed that. But I just wanted to get an answer to my question from people who work with COBOL and know the real deal with it :) So thanks for your answer :)
I was hired 5 years ago by my company, and we've since hired 4 more. All of us were brought in as Jr. Programmers that didn't know COBOL. There are companies hiring. Just have to find them.
Pretty cool hearing about people out there still using it
I found this [COBOL tutorial](http://www.tutorialspoint.com/cobol/cobol_environment_setup.htm) and they offer an [online environment](http://www.tutorialspoint.com/compile_cobol_online.php)
JCL is what I struggled with for awhile. Also handling files. 
My first thought with this was also dynamic allocation. There are many ways to do this including using an assembler routine. I'd look for any CALL statements that look like they're using a DDNAME parameter.
Hercules I believe is open source. Otherwise microfocus has netexpress. Not sure of cost though. I believe it's free for students 
Thanks! I'm also wondering about the technology used for interfacing and sdata. pureXML, REST, CICS Webservices, XML, Stored Procedures, zOS Connect etc How are the front-end apps connected to the back-end COBOL etc.
From the ones that I've worked with, there are certain technologies that are used to send files between COBOL-mainframe and other interfaces. Let's say a website (1 interface) is requesting data from mainframe; the website connects to the server, the server sends a request to the mainframe and a COBOL program is triggered to retrieve the requested information, another COBOL program then reformats the data into something that will be readable by the original requester (the website), an example of one that I've seen is XML. I've seen some interfaces where the data is sent via FTP or via MQ, although I don't know enough to be considered a good reference. Out of curiosity, are you doing COBOL mainframe?
I'm doing COBOL mainframe, but I was just wondering how we as COBOL programmers keep up with new technologies. I asked about it in r/mainframe how to promote mainframe technologies. As many outsiders think is old school while COBOL/CICS/DB2/MQ on mainframe can tackle a lot of problems especially when they are high volume.
My guess is the compiler cannot handle variable length, so read the file one byte at a time (i.e. make the file section record length 1), and feed these bytes into your working storage record. * read 76 bytes into your record in a loop * read 21 bytes (not 27, unless your post was truncated!) into your record in a loop ARTAAN times repeat until EOF 
I haven't done it myself, but there are companies with offers to transform/migrate mf reports/programs to (so called) modern environment. 
The number of variables you provide to UNSTRING into is the number of spaces it will stop after. So only give it one variable to UNSTRING into, and give it a pointer variable, and use OVERFLOW, and loop it. *PERFORM UNTIL WS-UNSTRING-DONE* UNSTRING WS-NAME DELIMITED BY ALL SPACE INTO WS-TMP POINTER WS-NAM-PTR ON OVERFLOW &lt;go do some stuff&gt; NOT ON OVERFLOW &lt;go do some other stuff&gt; SET WS-UNSTRING-DONE TO TRUE END-UNSTRING So on each loop, WS-TMP should be equal to the next "area" of the string. And UNSTRING will start at POINTER on the next iteration. ON OVERFLOW should go process this -- On first loop, check for title, else just keep adding whatever WS-TMP has into the first name. NOT ON OVERFLOW *should* mean that WS-TMP is currently holding the last name. (I'm not sure how UNSTRING will handle trailing spaces for this situation. Maybe use REVERSE and INSPECT to count them.) See Example 5 (last one) on [this page](https://supportline.microfocus.com/documentation/acucorpproducts/docs/v6_online_doc/gtman3/gt36141.htm) EDIT: Formatting 
I actually just got a job doing entry level COBOL myself. A few things I picked up along the way: 1) Number all of the paragraphs you're using like you did the 9000-end-program. It makes them stand out and be easier to read. 2) You checked that your input file opened correctly, but not your output file. What if someone else is trying to use it at the same time? (it happens all the time at work). I'd throw another if-statement in there, just so you know that things can go wrong and you're planning for it. 3) I'd try to re-arrange and rename paragraphs a bit so that things are more clearly labeled and easy to read for example, the first thing that you're doing in the paragraph that you titled "write-details-to-file" is a READ. A lot of my job right now is maintaining other people's code. The worst stuff to fix or update is the stuff that is poorly labeled or has surprise features in the paragraphs.
Czech. Seems they offer a course on COBOL for AS/400.
This is the first I've heard of the Hercules emulator...would be a fun project to try and get it to work. I understand that you'd still have to install an operating system into the emulator though. I run Linux inside a Virtual Box VM under Windows with the GNU Cobol compiler installed to work with Cobol, if you're just looking for something to do Cobol with.
Try this link: http://leo.steamr.com/2012/07/booting-zos-emulation-files-with-hercules/ Also, you may need to fetch Hercules from github. I remember having driver errors with the stable version. EDIT: Found the link that I used. Here it is: http://mainframed767.tumblr.com/post/40836059586/instructions-to-installing-zos-in-hercules
I've been wanting to go down this route as well, especially because I have a large interest in legacy systems. And with a lack of incoming developers, I will probably not have to worry as much about job stability. With that being said, a representative from Morgan Stanley told me that while they do use a large amount of mainframe software, there hasn't been any new development and most of the work consists of maintaining their old software. There seems to be a push towards distributed computing systems from what he said. Whether they'll bring over the COBOL software or start over with a newer language, I don't know.
well i dont know czech
Thanks for sharing that is a really neat article
I figured it out. Just had the counter in the wrong spot.
Improve COBOL? It's been perfect since 1968. :-)
First do a global change on 001-procedure to AA-100-better-paragraph-name Then a global change on 002-procedure to AB-100-better-paragraph-name Change shitty unstructured IF statements with structured EVALUATE statements. Remove GOTO completely, not even to exit(but this might me harder than is feasible) Indent and space code out and document what a paragraphs main function is at the start of the start of each paragraph. Remove comments made by maintenance programmers half way through the code (At one place I worked, we had to put remarks around every line of code introduced which made the whole thing unreadable.) COBOL is supposed to be self documenting if decent variable names are used. Remove hard coded values in the procedure division and use meaningful working storage names. Space stuff out, indent stuff, use drop through code. You must code like the next person to amend this program needs to be able to understand it as you would like to understand it. Start or change naming standards for the whole development/ maintenance teams and the company as a whole. The benefits of decent programming standards need to be sold to old just wedge it in there programmers. Talk to QA department they'll back you up. 
My thinking was that it was a simple 'count starts at zero' type thing. Best I can do without seeing the code.
If the open file found an empty file then It will be set to zero but more than likely your going to find records so just add 1 to record count after each successful read. 
Not sure that you'd even want to apply this to COBOL programs, but how about 'separation of concerns'?...meaning that you separate your business logic from your display logic and storage logic. The idea is to make it easier to port your programs to other platforms.
How would I go about posting the code? Screenshot?
Your client/employer might not like you posting their software on the internet, but you could post the relevant snippets...indent each line including the blank lines by 4 spaces to put it in code view: IDENTIFICATION DIVISION. PROGRAM-ID. CALC1000. ENVIRONMENT DIVISION. INPUT-OUTPUT SECTION. DATA DIVISION. * FILE SECTION. * WORKING-STORAGE SECTION. * 77 END-OF-SESSION-SWITCH PIC X VALUE "N". 77 SALES-AMOUNT PIC 9(5)V99. 77 SALES-TAX PIC Z,ZZZ.99. * PROCEDURE DIVISION. * 000-CALCULATE-SALES-TAX. * PERFORM 100-CALCULATE-ONE-SALES-TAX UNTIL END-OF-SESSION-SWITCH = "Y". DISPLAY "END OF SESSION.". STOP RUN. * 100-CALCULATE-ONE-SALES-TAX. * DISPLAY "-----------------------------------------------". DISPLAY "TO END PROGRAM, ENTER 0.". DISPLAY "TO CALCULATE SALES TAX, ENTER THE SALES AMOUNT.". ACCEPT SALES-AMOUNT. IF SALES-AMOUNT = ZERO MOVE "Y" TO END-OF-SESSION-SWITCH ELSE COMPUTE SALES-TAX ROUNDED = SALES-AMOUNT * .0785 DISPLAY "SALES TAX = " SALES-TAX. 
I consider numbering paragraphs stupid. I did a quarter century ago and now with such advanced IDEs it is unnecessary. Even the language has been improved to allow more modular development.
I began COBOL programming when "Structured Programming" and "go-to-less" programming was new. There was a lot of confusion about what that is, many people thought it was about physical structuring as you say. With advanced IDEs it is easy to physically restructure a program but logically restructuring it is not easy. I was also in a QA group that also did support for other programmers. I agree that programs should be documented and I usually documented my programs better than what management wanted to spend time doing. I think however that the specifications are a better place for descriptions than remarks in the source code. I would comply with standards if necessary but I sure would prefer an organization that emphasizes the concepts, such as logical structuring and specifications, over details such as lining up things.
I hope you got the job. This will be for others in the future. I suggest first determining what the standards are at the organization. You probably cannot do that before the interview but if you can then it would sure help to know what they want in the source code. You could determine how much analysis will be required for the position. You might want to impress with good specifications. You use a "GO TO". Yuck. That is enough for me to be very reluctant. Instead, you could just use an "ELSE" or a "PERFORM". This is where the standards are relevant; if the standards say no "GO TO" then you sure don't want to use them. In the READ statement I would use a "PERFORM" for the "NOT AT END" as in [COBOL Program to read a flat file sequentially and write it to an output file](http://stackoverflow.com/questions/11412221/cobol-program-to-read-a-flat-file-sequentially-and-write-it-to-an-output-file-n) (see the answer). When you do that you can move the "READ" to the "MAIN-PROCEDURE" and that makes the program more structured **logically**.
Yes, many "GO TO" statements and flags can make programs very difficult to understand. Logical restructuring can make programs much easier to understand and modify and less buggy and will definitely save money. I suggest first asking them if they have considered the [IBM COBOL Structuring Facility](http://www-01.ibm.com/common/ssi/cgi-bin/ssialias?infotype=dd&amp;subtype=sm&amp;htmlfid=897/ENUS5696-737). It was developed more than a quarter century ago and using Cleanroom Software Engineering, as in [Cleanroom software engineering differs form the conventional and object-oriented views](http://d.web.umkc.edu/dcw844/hw3.htm). You will need to do work before and after restructuring; see [COBOL/SF COBOL Structuring Facility - Google Groups](https://groups.google.com/forum/#!topic/bit.listserv.ibm-main/npEZ4o39EJM). Whether they want to do that or not, I suggest that you suggest documenting every program. That will make it easier for other programmers in the future to understand the programs and if you do a good job of documenting then a programmer (you or someone else) **should** be able to write a new program from just the specifications. That will keep you busy. 
You are infer that all of companies uses modern IDEs where this isn't true, unfortunately I never used it before and if you use, please tell me more about what IDE and how it integrate with environment of mainframe :-). All banks that I worked and governamental institutions doesn't use any type of IDE. I wrote all of my codes in a text editor, upload &amp; compile all programs via JOB. Numbering paragraphs was really helpful in many situations and big projects still adopt this methods in COBOL language. Basically: 1000-S-&lt;NAME-OF-PARAGRAPH&gt; //start initialize 1000-E-&lt;NAME-OF-PARAGRAPH&gt; //end initialize 2000-S-&lt;NAME-OF-PARAGRAPH&gt; //start main process 2000-E-&lt;NAME-OF-PARAGRAPH&gt; //end main process 9000-S-&lt;NAME-OF-PARAGRAPH&gt; //start close process 9000-E-&lt;NAME-OF-PARAGRAPH&gt; //end close process 5000-S-&lt;NAME-OF-PARAGRAPH&gt; //start common procedures 5000-E-&lt;NAME-OF-PARAGRAPH&gt; //end common procedures Some numbers are destined for specific context and for the particular project this standards change. I always asked for a workbook of programmer (when it exists) before programming.
I have done no COBOL programming since 1990. I did use ISPF then and it is still available. I know that there are versions and variations of ISPF available for PCs; I had a copy of the IBM EZ-VU dialog manager for DOS. There are editors, such as Eclipse, available for Windows environments. I know that in about 1989 IBM had a board they were testing that went inside of a PC AT computer that could emulate a mainframe and execute VM. I know because I had one on my desk. VM was used as a development system. I don't know what is currently available. Let's try [this](https://www.google.com/?gws_rd=ssl#q=ibm+cobol+ide). Okay I found [IBM Cobol - IBM MAINFRAME &amp; MVS FORUM](http://www.ibmmainframeforum.com/ibm-cobol); maybe they can help you.
COBOL-85 was the sweet spot for me.
Well I guess you'll just have to learn it now, won't you?
Not sure how I would feel about object oriented COBOL, but I hope it's not like FORTRAN90. When I looked at the newer FORTRAN versions, I figured "Why not use C++? What's the difference?". I preferred the older style of programming (GOTO statements, all capital letters, and fixed format). I gotta take a better look at the newer COBOL versions though. So far, it doesn't look like COBOL got turned into C++. I really wanna see those baby functions!
What are you looking to analyze exactly? Code changes? Errors?
It won't help on the platform you're coding on but JCL is Job Control Language.
You may want to look into this emulator called Vista by Tom Brennan Software
No, not the code changes (is visable in CA Endevor) and the coding errors can be checked with IBM Developer for zSystems and SonarQube. I'm looking for a way to visualize the application and all it's components and the way it's build.
OpenCobolIDE 4.7.4
It would really depend on what platform you were coding for and would probably be handled by platform dependent procedure calls.
In the places that I've worked in, there's usually something that sends the file to mainframe and vice versa. Although this isn't COBOL related, it's more on how your system would handle it (i.e. A network server would FTP files to mainframe and a JCL would run to FTP files back to the server)
I actually did take COBOL in school back in the 80's but never used it. There's all this talk about COBOL programmers being in demand so I've been brushing up my COBOL skills as well. I can't speak to the mainframe part, but if you just want a compiler to practice with, you can use [GnuCOBOL on Linux](https://sourceforge.net/projects/open-cobol/). You can use Visual Studio Code for an editor and get syntax highlighting for COBOL even :) I install Linux into VirtualBox VM's under Windows...it's not hard to do if you have enough CPU, disk space and RAM. 
The first block is intended to be executed by a repeating PERFORM. Each READ of a file only reads one record. Unless it is an empty file at the outset, you'd never get to the AT END branch of the READ unless you could somehow loop back to the READ. That's the job of the repeating Perform; execution will return to 750-CREATE-FILE03 until the AT END takes over, displays a message, closes the files, and stops the program. Without seeing the rest of the second block I can't analyze it.
I've always tried to give an analogy like mainframe is similar to Windows, while COBOL is similar C++; whenever I'm trying to explain to new-ish guys. In that regard, Windows (or an OS) would become easier to navigate/learn, the more you use it. When I started working, the company that hired me trained me in COBOL/JCL using a desktop application, I was only actually able to use mainframe when I started working on projects. My current company hires guys without any COBOL/JCL background, they learn it while they're working.
1) At the moment, a way that I can think of is using the STRING function: STRING GENDER DELIMITED BY ',' DOB-YEAR DELIMITED BY ',' DOB-MONTH DELIMITED BY ',' DOB-DAY DELIMITED BY ',' COUNTY-CODE DELIMITED BY ',' BIRTH-ORDER DELIMITED BY ',' SECURITY-CODE DELIMITED BY ',' INTO WS-NEW-FIELD END-STRING. 2) I'm not very familiar with object oriented programming, do you mean you want the value in DOB-YEAR without using the DOB-YEAR field? If that's what you mean: SOCIAL-SECURITY-ID(2:2) &lt;-- 2nd position of SOCIAL-SECURITY-ID, 2 bytes. Hope this helps edit: formatting
All I can think of is some convoluted way by reading in the copybook and parsing it out, creating commands for another program to process and write it out. 
That's what I feared the most. I'll stop searching for a easy solution then and start working on it. Thank you!
I agree that the copybook needs to be parsed, but I hoped there was an easy way out. Thank you!
https://pt.scribd.com/document/49956007/Cobol-From-Micro-to-Mainframe This ?
Send me a message if you want them, I took pictures and I can send them via e-mail. 
I honestly don't know of anyway you could learn mainframe related COBOL programming on your own. I started a year ago and was taught on the job with no experience besides JCL (which I would advise learning as well). Another colleague of mine who frequents this sub started the same way, although he's been in he field a few years longer. It's my understanding most junior positions are like this as companies want to teach you how to code in the fashion they are accustomed to.
Is it sort using COBOL or JCL?
Cobol.
Sorry for not clarifying lol
I figured out the first one. However, my professor is unfortunately not one who actually teaches why we do things and I cannot seem to figure out the answer for number 2
Ok, I'm not sure if what I'm thinking is the correct answer to the 2nd question, but here it goes. A control-break is a way to separate (or "break") records into different parts. The control field must be sorted in order to sequentially group your records. Example: Sort each transaction by account number Control field (account number) Transaction Amount Account A - 5.00 Account B - 1.00 Account A - 2.00 Account A - 3.00 Account B - 10.00 So, in order for you to display each transaction to the account number, you have to sort by account number first. Your program would then write each record and check if it's still reading your current account number, if it is then just continue writing the transaction amount, when it reads that the account number changed, then that's your "control-break" Sorry for the formatting I'm on mobile. Let me know if I made sense or if I made it more confusing for you, lol. Edit: ok, I can't format the example I made, I hope it makes sense 
I think that it is helpful lol. So this is what I gathered from what you said. Basically this means that the input file must be sorted on the control field, so that the information is correctly sorted and displayed in the right order?
Thank you very much!!!
So where are these great paying COBOL jobs for young developers? Asking for a friend... ;-)
GNU COBOL is much happier on a Linux...I went through a lot of hoops trying to get it going under Windows with Cygwin and MinGW and couldn't get it working. I installed Linux distros into VirtualBox Virtual Machines under Windows and it works great. You can even get the VMs to map to Windows shared folders and work there if you want. I've gotten it working with Linux Mint, Arch Linux, Antergos (a friendlier Arch derivative) and Manjaro (another Arch derivative). The Arch versions have GNU COBOL 2.0 (rc 2, I think) in the Arch User Repository (AUR) for easy installation. One other possibility, though I haven't tried it, is the latest Windows 10 update has 'Windows Subsystem for Linux (beta)'...maybe it's possible to get it working with that?
I have an RPi set up that would be easier to develop on (through git and SSH), but I'd prefer a local toolchain.
Is the *.txt file Unicode, ASNI or what? Does it contain line-feeds? If so, Unix or DOS format? Does it match the specified layout consistently?
The program is taken from tutorial points and modified for it to work. The previous ones with just reading the contents of the file works, this program makes you read a specific line from the file text.
Already domified in ANSI and UTF-8 format and it still gives me the same error.
Have you tried reading it normally and using working storage for the key?
I would suggest you try writing an indexed sequential file, then examine the output.
Your file's ORGANIZATION should be LINE SEQUENTIAL, not INDEXED. Indexed files are generally binary [flat file databases](https://en.wikipedia.org/wiki/Flat_file_databases), not text files.
It built properly but I tried running it and got: $ cobc configuration error: /mingw/share/gnu-cobol/config\default.conf: No such file or directory
I'm building 2.0 rc2 and that's not on line 547. In fact, that specific line isn't in the file at all. There are other define checks that have win32 though. EDIT: I grepped for _WIN32 and here's the output $ grep -n '_WIN32' common.h 35:#if defined(_WIN32) &amp;&amp; !defined(__MINGW32__) 332:#if (defined(_WIN32) || defined(__CYGWIN__)) &amp;&amp; !defined(__clang__) 376:#if defined (_MSC_VER) || (defined (__BORLANDC__) &amp;&amp; defined (_WIN32)) 517:#ifndef _WIN32 1035:#ifdef _WIN32
The #ifndef should before something like #define SLASH_CHAR.
That makes sense. When I get home back to my windows machine I'll give it a shot. Thanks for the help!
I'm glad to hear the patch worked. It's odd that you need the -conf option. What output do you get without -conf and with -vvv?
Still getting the same error.
Short of stepping through it line-by-line, there's nothing more we can do. I'll add this to the bug tracker on SourceForge where hopefully someone will investigate. Thanks very much for your help.
One more request: can you run `make check` and see what errors you get? We're interested if there are any related errors with loading configurations.
Can you try compiling and testing again using the tarball attached to [this post](https://sourceforge.net/p/open-cobol/discussion/help/thread/7a432ba9/#facf) in GnuCOBOL discussion forum? It might fix those "unable to parse test group" warnings. You'll also need [this updated version](https://sourceforge.net/p/open-cobol/code/1556/tree/branches/gnu-cobol-2.0/libcob/common.h) of libcob/common.h (apparently this didn't get into the tarball). I have to say again how grateful I am for your help with this. MinGW has always been difficult to set up due to a lack of testing and I appreciate that it is quite tedious to re-compiling GnuCOBOL again and again to help identify bugs.
Still isn't working. [check](https://pastebin.com/DrPqstA9), [test](https://pastebin.com/puKNzQX0). Don't thank me, I'm more than happy to help!
And now we're done! The errors in make check are expected; the error in make test has been fixed by [this change](https://sourceforge.net/p/open-cobol/code/1559) in r1559.
It tells me "KEY clause is invalid with this type".
Strangely enough this broke the configure for me. checking for Berkeley DB db.h version &gt;= 4.1 ... yes (6.2) configure: error: Include file db.h implies version &gt;=4.1 but no library found What it usually looks like: checking for Berkeley DB db.h version &gt;= 4.1... yes (6.2) checking for Berkeley DB library with version 6.2... yes configure: BDB library version 6.2 found as -ldb-6.2 Configure command: `$ ./configure --prefix=/mingw --disable-rpath`
Before you can use the KEY clause and ACCESS RANDOM you need a valid indexed file. You can convert your current LINE SEQUENTIAL file into an INDEXED one with a program like: IDENTIFICATION DIVISION. PROGRAM-ID. convert. ENVIRONMENT DIVISION. INPUT-OUTPUT SECTION. FILE-CONTROL. SELECT in-file ASSIGN "C:\Cobol\16 FIle Handling\input1.txt", LINE SEQUENTIAL. SELECT OPTIONAL out-file ASSIGN "C:\Cobol\16 FIle Handling\input1-indexed.dat", INDEXED, RECORD KEY student-id OF out-file. DATA DIVISION. FILE SECTION. FD in-file. 01 in-record. 05 student-id PIC 9(5). 05 student-name PIC A(25). FD out-file. 01 out-record. 05 student-id PIC 9(5). 05 student-name PIC A(25). PROCEDURE DIVISION. OPEN INPUT in-file, OUTPUT out-file PERFORM UNTIL EXIT READ in-file INTO out-record AT END EXIT PERFORM END-READ WRITE out-record END-PERFORM CLOSE in-file, out-file .
I just downloaded the snapshot from the site which was named `open-cobol-code-1559-trunk` I tried manually patching the files, but `./configure` complained about needing flex and I couldn't get that to build.
The trunk snapshot is for the very old GnuCOBOL 1.0 release. [Here's a link to the up-to-date gnu-cobol-2.0 branch source tree.](https://sourceforge.net/p/open-cobol/code/HEAD/tree/branches/gnu-cobol-2.0/) Click download snapshot there to get the actual latest version. (Hopefully we'll add clear instructions for this soon; there's someone complaining about this right now in the Bug-GnuCOBOL mailing list.) Have you installed flex? It's needed to generate parser code. If you have, the error is probably due to the trunk branch's out-of-date `./configure`.
Hi /u/basinx9001, While some people have different opinions about them, it may be worth connecting with some local IT recruiting firms (definitely do some research on who is reputable nearby, even the larger ones don't *always* have the best ratings) and seeing if they may know of any opportunities. Cobol is a very specific skillset that is extremely desirable, but only in very specific circumstances.
Thanks for tipz dude
Tutorialspoint.com has a bunch of COBOL lessons and a simulator. Hardest part of starting COBOL for me was finding a mainframe and emulator to work on. 
Pick up a JCL book too. They dont teach you that stuff in school. 
Agree on this, especially if you're going to be working on a mainframe environment using batch COBOL (as opposed to online COBOL, which I believe doesn't need to be run by a JCL)
Yep...then you need to study CICS. 
Don't bother with JCL unless you will be running batches in mainframe. Start with COBOL basics in a modern IDE, running shit in the console instead.
So... where are the jobs and what is the pay?
Sad reality is , most of the Cobol jobs are outsourced
You have my respect Sir!
So you want people to do your research for you?
(smiles)
Works fine on OSX as well.
This is the best tl;dr I could make, [original](https://www.nytimes.com/2017/06/04/technology/obituary-jean-sammet-software-designer-cobol.html) reduced by 83%. (I'm a bot) ***** &gt; Her ambition, Ben Shneiderman, a computer scientist at the University of Maryland, recalled her saying, was &amp;quot;To put every person in communication with the computer." &gt; In 1974, Ms. Sammet became the first female president of the Association for Computing Machinery, a leading professional association in computer science. &gt; The United States Department of Defense, the largest purchaser of computers at the time, set general guidelines for COBOL, including asking for &amp;quot;The maximum use of simple English&amp;quot; to &amp;quot;Broaden the base of those who can state problems to computers.&amp;quot; Later, the Pentagon declared it would not buy or lease computers unless they ran COBOL. Grace Hopper, a computer pioneer at Sperry Rand in the late 1950s, led the effort to bring computer makers together to collaborate on the new programming language. ***** [**Extended Summary**](http://np.reddit.com/r/autotldr/comments/6fbgyx/jean_sammet_codesigner_of_a_cobol_dies_at_89/) | [FAQ](http://np.reddit.com/r/autotldr/comments/31b9fm/faq_autotldr_bot/ "Version 1.65, ~136557 tl;drs so far.") | [Theory](http://np.reddit.com/r/autotldr/comments/31bfht/theory_autotldr_concept/) | [Feedback](http://np.reddit.com/message/compose?to=%23autotldr "PM's and comments are monitored, constructive feedback is welcome.") | *Top* *keywords*: **computer**^#1 **COBOL**^#2 **Sammet**^#3 **Ms.**^#4 **programs**^#5
I'm hoping/assuming she and Grace Hopper knew each other. RIP Ladies.
SQL (Oracle or IBM DBn) is often used in COBOL programs, along with CICS (IBM's network transaction processing). COBOL is often run on Unix environments these days; some older IBM sites will be using JCL.
PL/I seems to be pretty commonly paired with COBOL. If you want a better idea, [search "COBOL" on monster.com](https://www.monster.com/jobs/search/?q=COBOL&amp;intcid=skr_navigation_nhpso_searchMain) and see what other languages pop up in job listings.
SQL and Python go hand and hand with COBOL at my workplace. Though I'm only a novice COBOL programmer myself, this is what they wanted most when I applied. I mostly edit JCL, create jobs, and run new ones on our mainframe environment when I'm not doing data analytics. Also useful would be .NET and less so Java. 
Do a search for COBOL developer jobs for requirements. But for IBM mainframe you'll need DB2/SQL CICS JCL. Jackson Structured programming methods. 
Thanks :)
You might try looking at a different approach. Look to see what enterprise application systems use COBOL and learn what developing in those systems require. Myself, I suport PeopleSoft, but we rarely do any development in COBOL. Just troubleshooting data issues around a COBOL component. Another idea you might investigate is Micro Focus Visual COBOL Personal Edition. It integrates with Visual Studio 2017 and Eclipse. I have played a bit with the VS 2017 but not Eclipse. My Install - Micro Focus Visual COBOL 3.0 for Visual Studio 2017 http://www.psoftdev.com/2017/06/my-install-micro-focus-visual-cobol-30.html
Does the microfocus visual cobol let you run JCLs? I remember we used microfocus mainframe express during training a couple of years ago. It let's you run cobol and JCL, and let's you create CICS screens/programs. I've been meaning to learn pl/i and rexx, but I don't know how to compile and test them in my home pc, I figured maybe microfocus visual cobol might.
I would hit their discussion forum and ask. https://community.microfocus.com/microfocus/cobol/visual_cobol/ I am not a mainframe guy. My exposure to COBOL has been supporting ERPs and troubleshooting COBOL processes.
Worked at 3 different companies and I've yet to see Unix yet, all JCL heavy still.
Most of our clients use AIX (IBM's Unix), with Unix and Perl batch scripting.
Archer Daniels Midland (ADM) in Decatur, IL, United States Automobile Association (USAA) in San Antonio, TX, and Fidelity Information Systems (FIS) in Brown Deer, WI have all used JCL, and heavily at that. The amount one can do with JCL alone is pretty amazing, I couldn't imagine not using it for a lot of what I've written. FIS's systematics banking core Systematics is a rather popular core, and it's JCL invoked COBOL from what I remember of it. I don't work with that core anymore, that was at USAA. 
Learn JCL, it'll make your life a lot easier.
COBOL, CICS, JCL, ADABAS(ADAPREP).
At the company I'm currently employed we use: JCL, DB2, EZTRIEVE, REXX, IMS(Both DB and Transactions) and ProTerm. The most useful for you I think would be: JCL, DB2 and for a little fun REXX
Stop run. Rip
My college program was heavily focused on COBOL/Mainframe/CICS. I decided to focus my career on web systems instead. Nobody has ever beat down my door for COBOL work, other than a bad temp job offer from Robert Half. I can't imagine demand is that high.
I would recommend Ada; it has am annex for interfacing directly with Cobol *and* you can use the type-system to great advantage, in addition to having the `task` construct.
RDz/IDz is a fantastic IDE with some pretty powerful analytical tools. Eclipse based. Check out the Program Control Flow view in the COBOL Editor.
Or initialize the variable and write 1 to it before your counter/loop.
JCL, JCL, JCL! DB2 CICS SQL With those you'll have a large arsenal at your disposal. There are others that are helpful, but those are the main ones. Also, learn TSO.
I don't hate COBOL, I just can't get a job in my area with it. 
Thanks for letting us know.
Try and get a COBOL job without 20+ years of COBOL experience though. Every year we have an similar article, yet the industry doesn't change the way in which it approaches hiring people for such positions. Such a shame.
Perhaps REXX and/or RPG? PL/I is also a possibility. 
Thanks for the walk-through...I originally tried to get GNU Cobol to build on Windows and...gave up :) I went with running Linux in a VirtualBox VM and running it from there instead. Gonna try this when I get some free time.
Hi, I just added the link to a 7zip-file that contains the complete environment. You only have to update a few env-variables. Kind regards,
Excellent, thanks :)
I've updated the article with an Win32 API-call example. :)
A few days ago I wrote an article on compiling/installing GnuCOBOL on Windows. http://blog.brakmic.com/gnucobol-on-windows-from-compilation-to-helloworld/ Maybe it could be of some help to you. Kind regards,
I don't really understand what I'm supposed to do when I download the 7z. 
Just unpack the zipper file. :) http://7-zip.org/
(Thanks for trying to help.) ... Where should I put the unpacked file? How do I use it? Your guide was informative, but probably too technical for a beginner like myself. 
You should simply follow my tutorial. If you are a beginner, then start with beginner articles elsewhere. COBOL is nothing for beginners, in my opinion. Also, I doubt anyone here would like to provide you "free consulting services". I've already invested enough of my time to write the article. 
Yes, you have invested enough of your time. Whether others want to help me or not is up to them. 
&gt;WRT A &gt;MIN B &gt;STO X &gt;STP I'm not sure if I understood it correctly, but do you mean: WRT A = write the value of A into a file? MIN B = ? STO X = store the value of A into a file? STP = stop processing? or do you mean that's the pseudocode and you have to write it in COBOL?
You are correct; this is essentially the pseudocode that's used for the test. I do not have to write it into COBOL; the format above is essentially how the exam plays out. STO X = storing the value of the previous operations: Write A (6) Minus B (2) Store (complete the above operations and output the result, 4) Stop I apologize if I was not clear.
The good news: COBOL is omnipresent. Most of the systems that were developed before 1990s were written in COBOL. This includes your insurance system, telephone systems, stock market, airline systems, payment system are all written in COBOL. These systems are not going away atleast in the next 20-50 years. Even if some do there will be a lot of work as to deconvert you would need COBOL knowledge as well. The bad news: India has thousands of COBOL programmers who would do anything you could do at 1/10th the money you may want (and live a better life than you could coz of purchasing power parity). So it will be hard finding jobs. 
The good news: COBOL is omnipresent. Most of the systems that were developed before 1990s were written in COBOL. This includes your insurance system, telephone systems, stock market, airline systems, payment system are all written in COBOL. These systems are not going away atleast in the next 20-50 years. Even if some do there will be a lot of work as to deconvert you would need COBOL knowledge as well. The bad news: India has thousands of COBOL programmers who would do anything you could do at 1/10th the money you may want (and live a better life than you could coz of purchasing power parity). So it will be hard finding jobs. 
&gt; India has thousands of COBOL programmers Yeah. Isn't the a problem with any programming language? Also, maybe Cobol is more secure with this regard because Banks would want to hire locally. What do you think?
Well you would hope so. Truth is Banks which created their in-house software are the first one to offshore as it is not their core business. The fact that the software runs and only needs to be maintained make it more ripe to being offshored. 
Are there any jobs left on this earth, or should I just join the communist party?
There's still many companies that are willing to hire locally either due to culture, technical restraints or laws, but as you can imagine they are decreasing in number. Also, there are many flavors of Cobol and depending on what is being used Indian programmers may be insufficient. 
Commies never upgraded their ideology since the 20-th century. If anything they went from being progressive to regressive in the last seventy years. Except for Chinese.
Banks don't necessarily hire locally. The don't really care who does the coding, as long as upper management is in the US.
I think it's hit or miss, depending on where you live. I got a job 2 months into my senior year of college because of my cobol experience. It's a small group of people that maintain all the mainframe stuff, but also it's not like you have a ton of competition either. To be honest, I don't see big banks turning young people away with interest merely because within the next 5 years theyre going to need you very badly. 
I'll try to answer what I know, and uhh, since geographical location has been mentioned, I've worked in the Philippines and is currently in Malaysia. &gt;Is it enough to just learn Cobol, or is there more that someone would need to know in order to make it into a career? In most of the companies that I've worked with, COBOL usually goes hand in hand with JCL (Job Control Language). This would typically be in a Mainframe environment. I've see some COBOL code being run in Linux(?) but don't have hands on experience with it. But I assume coding and syntax are the same (since COBOL is COBOL). &gt;Like do you need years of experience with mainframes or legacy systems? Not really, in the last company that I worked with, they had a new guy come in, and we taught him COBOL and Mainframe on the go. &gt;Who are the clients typically? In the places I've worked in, clients are typically banks (checking and savings accounts), credit card systems, insurance. Clients range from the US, Italy, Germany, Switzerland. &gt;What is the working environment like? I guess, when people see COBOL, they would typically imagine a bunch of old people, on the contrary, most of us are in our early 30s, and a few fresh grads in their mid-20s. I was in my 20s when I learned and started working with COBOL. Edit: edited because I don't know how to format.
Good localized COBOL admins can earn money being "proofreeders" for shitty Indian code.
Dunno why you're being downvoted. It's not like what you're saying is bs.
[removed]
There's a bunch of commie subreddits with active lurking users like /r/LateStageCapitalism 
Believe me, I know that sub well..
There you go then :) The problems they identify make sense, but the solutions they suggest are utterly idiotic 99% of the time.
I agree. I'm a COBOL developer as well working in Insurance company. I'm in my mid 20s. I too work in Malaysia, an Indian programmer (being cursed 😅). I don't think all Indian programmers are shitty (on a general perspective). Problem is that we have stringent timelines, cost problems, vague requirements and not enough experienced developers. Most of us learn by experience and leave the language in sometime to get better salaries. COBOL in India doesn't pays good, but it still pays and competition to get a job is high.
..or team leaders. Most code from India I have seen is **abysmal** unless it is produced by somebody from one of the top universities, in which case it is usually outstanding. The worst? I sent a bug to be fixed back to India whereby one user (out of hundreds) couldn't log in. The next day, that user could log in, but not a single other user could. I asked to see the fix and received a sql statement with that user's screenname used as a condition in the where clause.
&gt; stock market. Nah, that's C++ and/or C.
I'm 26 and I work with mainframes in the financial sector. While I'm not a COBOL developer, almost any mainframe knowledge could land you a job as long as you are proficient at what you know. I'm sure my age had a large part in being successfully hired. I didn't have years of experience, but I had some though an Internship I did. As long as you have a genuine interest in learning that goes a long way. Not many younger people even know about COBOL, JCL or mainframes.
[GNU Cobol](https://sourceforge.net/projects/open-cobol/) works good on Linux, you can probably get it on Mac as well.
Try this one https://www.tutorialspoint.com/compile_cobol_online.php 
I live in France and working as consultant in a bank. They use Cobol and C#, our company is always looking for Cobol programmers, so I guess it's a good way to get a job.
This is really subjective. Wages have risen a lot in India and with conflicting business hours many companies are hiring Indians less and less and this isn't exclusive to COBOL. This whole "Indians will work for nothing" is going away more and more as they develop as a country.
Fintech still uses it.
still hiring?
how to apply?
Let's talk in pm ;)
Banks, look for banks, they're heavy in COBOL. 
[First one](https://www.google.com/search?q=cobol+jobs&amp;oq=cobol+jobs&amp;aqs=chrome..69i57j0l5.1502j0j1&amp;sourceid=chrome&amp;ie=UTF-8) that come up was for a Springfield MA job.
Or credit unions! The primary language I work in is very similar to COBOL.
You know the name of it by chance?
the language? PowerOn.
PowerOn appears to be more of a banking tool/core solution provided by Jack Henry. Looking further, it reminds me of Basic or PL1. 
Sure, I'm not a COBOL programmer. Just saying that if he has experience with COBOL, he may find PowerOn a piece of cake.
I just started getting into Cobol a couple weeks ago, any chance I could pm you with some q’s I have?
Sure thing. 
I am at the moment on my Macbook writing and learning cobol. http://macappstore.org/gnu-cobol/
Come to Morocco, So many companies are offshoring their COBOL devs here 
More information would be helpful I think here, there are quite a few ways to get this done, depending on what you actually need. Are you looking to split 1 file into 3 separate files using a sort? Do you need to copy the 1 file to 3 new files with the same information, using a repro command? Or do you actually want a COBOL source that takes in 1 file ddname and the performs operations on the data, and then outputs to 3 new dd names?
I was given an input file that has information in it. and with that information in the input, i have to output 3 different outputs using the same program. So im trying to see how this should look.
Your JCL will have 4 DD statements and the COBOL source will have 4 FD statements one for each file in the file section. See the link below: https://www.ibm.com/support/knowledgecenter/en/SS6SGM_3.1.0/com.ibm.aix.cbl.doc/PGandLR/ref/rpfio13e.htm
This - sorry for the delay in my response, I was away without service for the weekend.
&gt; and live a better life than you could coz of purchasing power parity That's not exactly true... When you live in a developing country, in order to have a *quality of life* similar to developed country (if possible at all), you have to make up with the cash. Also, people in developing countries support their poor parents, siblings, even cousins and their families.
You can call them up and ask what is going on with the license. Some licenses require the software to phone home and it may have already registered the max times. This is all speculation on my part though. 
Yeah. The issue was I got it working on the laptop after it failed on the other devices. 
Second this book. Super helpful. 
Do they hire people with no previous Cobol experience?
Unfortunately no, they need someone with at least a few years. 
Don’t know much about Toronto specifically, but in my experience I’d recommend looking for internships at older larger companies. Like banks, utilities, possibly local government. I work at a regional gas/propane utility provider and I have coworkers who have used COBOL/mainframe stuff at banks, older insurance companies, and other well established large companies. There aren’t many (if any) small companies or startups that want to spend the money on a mainframe.
Yes COBOL is a simple language to learn and use. Simple is often really good especially if you're coding large processes that have many complex business rules.
Hey there, thanks for the advice. I'll have to try and take a look at some insurance companies, I've basically exhausted banks.
Do you mean you want to see the values in the variables while you are testing? 
I don't understand. Can you show us an example for a much simpler program?
No. I would like to see a printout of all variables and where they are used. Sorted Alphabetically. 
Check your compiler options. There should be a cross reference showing where variables are defined and referenced
So just look at working storage? I’m not quite sure what you’re asking.
This is the correct answer: look for a list option.
Thank You. That's what I was looking for. 
Are you talking about usable reserved words in COBOL?
OK, you could copy the program to a new different file. Then globally rename all the variables so that they start with ZZ\- \(for example\). Then exclude all the lines in the file. Next do a FIND ALL for 'ZZ\-' which will give you all the lines with ZZ\- in them. Next delete all the excluded lines that were not found with the previous FIND ALL command. Then finally change all occurrences of 'ZZ\-' to '' which is null, so that all your variables are back to the original names. Then you have what you need.
I was browsing any links mentioning COBOL and the UK and I eventually found my way here. I would also like to know how is the market for COBOL developers in UK. Did a quick check at indeed.co.uk and found that most of the COBOL jobs are for mainframe. I, too, am a COBOL developer for 6+ years but for AS/400. I want to know if I have a chance on landing a job if ever I wanted to try my luck there.
I'm coding in microfocus COBOL and you're right most of the jobs I see are mainframe. I do see quite a few short contract jobs in different parts of the country but I'm not in a position to be moving around atm.
1. The OpenCobol version is good for new commers to practice COBOL. The industry standard is IBM Enterprise COBOL for z/OS if you work on a mainframe. It's okay, I use it also! 2. I've installed hercules with z/OS. It had JCL running and COBOL also. You don't need to instal JCL. 3. Hercules emulates a mainframe operating system. I would ftp the JCL scripts to the mainframe and use the terminal with ISPF 4. A learning path for a COBOL developer would be: COBOL then add to it DB2 and finally CICS. JCL isn't that important. Please fell free to ask more!
Thank you so much! Is all of this freely accessible or do i need to buy any of this? I know DB2 is the database management but is that a tool i have to buy/download or is it just something that comes built into z/OS or something? Same for CICS, is that something i'd have to download? Another question I've had is, I've seen articles where people have set up a home server for practise \(on its own independant machine\). I don't have the immediate means to do that, so, is it okay to just set up hercules on my main computer that i use for everything else? Again, thanks so much. This is such a foggy area for me. 
Yes you can instal hercules on your PC, after this boot a mainframe OS (I think mvs 3.8 is free on the hercules download). The operating system should have JCL and a cobol compiler. I don't know from where and how you could instal DB2. An alternative: OpenCobol can use a DBMS, a coleague of mine used this to teach. I think he used mysql. An alternative for CICS is KICKs. I can guarantee it works because I've installed it on the z/os emulated on hercules. Link: http://www.kicksfortso.com/User's%20Guide%201.5.0/index.html?Installation.shtml There are free alternatives to the real stuff, but you have to work a bit to make them run. If you encounter dificulties we'll help you.
Are you working in UK currently? I'm checking where else are there COBOL on AS/400.
He could probably do contracting. Work for 6 months or so then see how he likes it.
I’m 33 and work with COBOL. We’re always looking for COBOL devs, as they’re quite rare. Something like 85% of the financial transactions in the world touch COBOL and most COBOL devs are his age - aka retiring soon. He should be able to find employment if he looks I. The right places and brushes up on some other skills (JCL, php, and at least familiar with Java). 
Thank you! I'll tell him
Thank you! I'll make sure to tell him
Hi, Some time ago I wrote an article on COBOL. Maybe it will be of some help to you. It's pretty basic, beginner-level and it also includes a complete step-by-step tutorial on how to compile your own COBOL environment. It's Windows based. [https://blog.brakmic.com/gnucobol-on-windows-from-compilation-to-helloworld/](https://blog.brakmic.com/gnucobol-on-windows-from-compilation-to-helloworld/) Cheers!
Finding a school that still teaches it will be tricky. If you do, and you're willing to relocate, you'll be able to get some offers across the world. All my references on COBOL are kn print, but I can see if I can find a PDF version of them somewhere. 
You are, right on time here..https://www.ibm.com/it-infrastructure/z/education/master-the-mainframe-contest Visit the website and select “Try the learning system”. This is a IBM provided free Mainframe hands on course with online badge for completion. No prior Mainframe knowledge is required. Course closes by 31 August 2018. Let me know if u need any assistance. 
I like Murach’s Mainframe COBOL. I started a help desk job and wound up a programmer in 9 months with this book and a patient manager. 
Some community college still teach it. It's still used in banking and insurance, so focus on those regions where those are present. Apparently it's still a thing. :-)
Westfield State University in Massachusetts was still teaching it....I believe.
STEP 1: PRESS CAPS LOCK. STEP 2: KEEP IT BETWEEN 8 AND 80. STEP 3: PERIODS MEAN NOTHING. STEP 4: FORGET ABOUT GOOGLE THERE IS ZERO DOCUMENTATION. STEP 5: GO TO AMAZON AND BUY BOOK. STEP 6: GNU COBOL IS GOOD SANDBOX ENVIRONMENT AND GETTING MAINFRAME ACCESS IS HARD. GO BACK. 
Just curious, what did your family member tell you about COBOL that got you interested in learning it?
They told me about how many of COBOL developers are near retirement age so there is/will be demand for new COBOL developers. Also about where Cobol is used like banks and it would be pretty expensive to transition so there is a bit of job security and stability. They warned me that its not for everyone but I figured I would at least look into it. 
Thanks I will definitely look for it! Did you have any schooling before or while doing help desk? I've been looking but I probably need at least a 2 year degree minimum 
There are a bunch of companies that offer products to convert the code to Java or C#. Not sure how fully automated they are.
Yep. I’m one course from a bachelors. Although, i can say that if COBOL is your goal a degree is attainable while employed in the field. You could take a few classes on programming (intro to programming, tcp/ip concepts, and a technical writing class) and self study COBOL during that time. The trick is getting passed HR, and I would lean heavily on internships and school resources to secure an interview. Most hiring managers realize how rare COBOL devs are, and anybody who is actually pursuing a career with this language (and is under 50) is worth talking to. To explain my logic... Most experienced devs are approaching retirement, and companies will need to convert systems to another language or outsource to keep afloat. Its cheaper to invest some time into a JR Dev than to change languages or outsource (or they already would have outsourced!) Its also important to realize why COBOL exists; it was purpose built as a verbose language to facilitate learning to code for business people - not those with advanced knowledge. This doesn’t mean you don’t need that knowledge to remain competitive today, as you absolutely should continue to learn (Java, JCL, etc are mandatory to get the higher paid positions.) I hope this helps, and I should clarify that I’m only speaking from personal experience. I think you should consider talking to more advanced devs if you can and see what they have to say. 
Although it may not be available as a direct class, many schools will offer a guided self study program (mine did, as a professor started with COBOL). Just a thought - its always worth asking a person if you’re serious about it. 
The school I went to was axing it completely from their program about 2 years after I graduated. Which sucked because that students COBOL practice on a mainframe, which helped tremendously. 
I think you're best off analyzing the cobol code to get the business rules and then write the java code to support the business rules. This will let you take advantage of the features in java. A translate process may not give you that. I want to say that trying to shortcut knowing the business rules will end up not being a shortcut, but I think that depends on the application.
1. My work uses https://www.amazon.com/Beginning-COBOL-Programmers-Michael-Coughlan/dp/1430262532 to teach new employees. They all seem to like it. 2. I received a B.S in CS and ended up with a cobol position within a month of graduating. This happened less than 5 years ago. I knew nothing about it at the time. Employer was more than willing to teach me in house. 3. Based on #2, a degree is good enough but doing interships (Even if not COBOL related) helps...many places dont seem to mind training in house as long as you can show them you know the basics to programming and a willingness to learn. A lot of government agencys still use cobol and many people are retiring. Also feel free to look up UNISYS mainframes. Theyre not as popular as IBM mainframes but some places use them.
This is very true. I know COBOL and Java, work in FinTech, and basically every major bank or broker on Wall street still runs IBM Mainframes. 
Hi OP. This is OT but are there openings for COBOL there in Japan? 
Hi, The need is definitely there, a lot of companies want to migrate. But there are 2 things. 1. B2B software scene is somewhat different than the rest of the world. Big companies absolutely do not do business with small or even mid size company. 2. It is not easy to hire you formally unless you relocate to japan. So it is a closed system and quite alienating.
I understand now why I am having a hard time looking for companies willing to sponsor visas for people who wants to work there. I see ada but there will always be a requirement "must currently reside in Japan".
Depending on where you are located now, I don't think there are a lot of gain for relocating to japan, engineers are cheap here. There are quite a few company That I know are actively hiring foreigners. Don't bother checking companies with all-Japanese engineering staff. (I don`t know what exactly make it difficult to sponsor visa.)
 Can you dm the company? I wanna check it out. 😉 
np
I got a COBOL programming job right out of college and I didn't even know any COBOL or banking. They trained me 100% on the job. 
Hi. I signed up for this cpurse but I haven't received any confirmation email. How do I know how to begin the course?
When did you register.. it will take three to four working days I guess..
I registered a couple of weeks ago, that's the weird thing.
Please reach out to zskills@us.ibm.com with relevant info, they should be able to assist with this.
Thanks, they re-sent me the email, I now have access to the course :D
Great..😊
Do you remember how to substring? STRING(x:y) where x is the offset and y is the length You could loop back through NAME-40 until you find the last non-blank character... Don't forget to initialise PRINT-LINE!
Delimit it by 2 spaces.
Thanks. I think this is the method I was thinking of.
I don't think that's available in COBOL-74, is it?
Or in case you come across the occasional name that was mistyped and has two spaces between first and last, just delimit by 3. Or as the other user said, you could always inspect the variable backwards looking for the first non space character and then string it. That would only really be useful if you had a name that was close to filling the 40 character variable, since delimiting by 3 spaces on a 38 character name wouldn’t actually delimit it and you’d be left with 2 spaces and then the period. I guess it’d be unlikely to have a name that large though.
But this point in the code the name has been normalized so one space should do. 
Two spaces! Delimiting by one would give you just first name. Just want to make sure it doesn’t cause you problems.
Yes, two is what I meant to write. 
Based on my Wikipedia googling, reference modification was introduced in COBOL-85. Any reason you’re using the 44 year old version of cobol and not the 33 year old version?
Yes, but not a good one. 
Lol, I’m sorry for whoever it is you have to work for!
It’s not really that bad. Just costly. They talked about switching for the last twenty years but never have. I don’t get to make the decisions. 
Threaten to make heavy use of the "ALTER GO TO" statement... That'll convince them to upgrade.:)
[This](https://www.murach.com/shop/murachs-mainframe-cobol-detail) is what I learned out of. It takes things pretty slow if I remember right. You can probably get it cheaper used.
I would second u/_NetNomad. I just picked up Murach's Mainframe COBOL off Amazon, and it is wonderful. [https://www.amazon.com/Murachs-Mainframe-COBOL-Mike-Murach/dp/1890774243/ref=sr\_1\_1?ie=UTF8&amp;qid=1531421965&amp;sr=8-1&amp;keywords=murach&amp;#37;27s+mainframe+cobol](https://www.amazon.com/Murachs-Mainframe-COBOL-Mike-Murach/dp/1890774243/ref=sr_1_1?ie=UTF8&amp;qid=1531421965&amp;sr=8-1&amp;keywords=murach%27s+mainframe+cobol)
How long was your professional tenure?
Just over a year now. 
Here’s a good starting point for you - https://www.ibm.com/it-infrastructure/z/education/master-the-mainframe-contest It’s an event created by IBM to encourage students and enthusiasts to explore Mainframe and maybe pursue a career in the future. The good thing about it is you have access to a mainframe. There’s also a step by step guide on how to do stuff on the mainframe environment. IMO - its a pretty good program. 
Thanks! I just registered. It would be fantastic to get my hands dirty in a realistic mainframe environment. I've been using the Hercules 360 emulator with MVS but I don't know how accurate a representation that is of the current environment (assuming, not at all). Do you think not having a college degree would be a major hindrance in pursuing this career path? I know a lot of tech companies are willing to forgo formal education requirements, but considering most Mainframe jobs are in older, more traditional, and more established sectors, I worry that I will be overlooked simply for not having a degree. 
I used this book to learn the basics. https://www.amazon.com/Beginning-COBOL-Programmers-Michael-Coughlan/dp/1430262532 My background: I worked primarily with PCs and Linux servers from 2002 through 2016. I graduated with a degree in computer science in 2006. Spent 8 years writing C++ to support embedded systems. I switched to the banking industry in 2017. The nice thing about Coughlan's book is that he explains why COBOL-85 is still prevalent and gives some perspective on why these systems are still in use. One funny thing about COBOL: it has had string based switch statements ("EVALUATE") for over 30 years. Something C++11 still requires a constexpr hack to achieve...
Have you heard about Lambda School? It's not for COBOL, but their program is helping people get started in development careers quickly, with marketable skills, and good pay. https://lambdaschool.com
Thanks for the suggestion! Their tracks seem very specific and as I'm currently working in a Python position, it's not so much about getting a development job but rather specifically getting a COBOL job. I don't question the value of a place like Lambda School, I simply question the value for someone in my position. I'm mainly trying to figure out whether or not having a four-year degree is a deal-breaker for companies employing COBOL developers. I do appreciate the suggestion though! 
I learned from the Murach books when I became a mainframe developer in 2009. Murach's other mainframe books (Db2, COBOL and CICS, etc) are quite good as well. If you're looking at jumping into the mainframe side of the house, Murach's JCL (https://www.amazon.com/Murachs-OS-390-JCL/dp/1890774146) is good at getting the basics (he also has an MVS TSO book that will get you through the basic mainframe navigation portion too).
I assume you are talking about Copy Books. This is a library containing record layouts or procedural code that can be copied into the main program at compile time 
In OO COBOL you could put your class definitions in a Copy Book. 
What /u/92064Dad said. Copybooks are very handy for file record layouts (including IMS segment layouts, flat file layouts, etc.). They can be reused in multiple COBOL modules. If you make any changes to your copybook, remember to recompile the programs that use that copybook! :)
I meant to say thanks, but I forgot. 
I'd also like any feedback as I'm trying to get into cobol a bit myself.
I added that link to my reading list. 👍
Just a heads up, anyone can get access to the Master The Mainframe Learning System which while not the most beefy LPAR does come with a current version of z/OS, DB2 and the Enterprise Compilers :)
Didn't see this but I don't have Eu permit so meh.
A little recomendation from little me: [http://www.csis.ul.ie/cobol/](http://www.csis.ul.ie/cobol/)
I have been working with COBOL code for 30 years. Although there is still a need for COBOL developers in the insurance and financial industries, it is much less than 20 years ago. Generally, there are many more jobs available for software development in other languages. I believe it will be far easier to find a good-paying job in the city of your choice and in a variety of industries using Java or similar. You may have better opoportunities if you spend your time learning those other languages. Best of luck to you! 
COBOL language isn't hard and Murach's COBOL book is by far the best. If you don't have a system to code in, reading the pages might be pointless. If you can get on a frame, make sure you pick up a book on JCL so you can get your program running. 
I think you need to expand the FD
What do you mean by that? Sorry, I’m very new to cobol 
https://www.ibm.com/support/knowledgecenter/en/SSPSQF_9.0.0/com.ibm.etools.unix.cobol.lang.doc/topics/PGandLR/ref/rpfio13e.htm
I recommend delimiting every part of the string, even if you don't have to, simply for clarification on what you're trying to accomplish. Also, depending on the size of the variables, delimiting by size may just leave a bunch of spaces at the end of the name. Your first example would actually produce this if each variable was picked out at 10 bytes: JOHN ,KATE,HOMER WILL ATTEND. Your second example would actually produce this if each variable was picked out at 10 bytes: JOHN ,KATE , HOMER WILL ATTEND. This is what you should actually have: STRING AA-NAME-1 DELIMITED BY ' ' ', ' DELIMITED BY SIZE AA-NAME-2 DELIMITED BY ' ' ', ' DELIMITED BY SIZE AA-NAME-3 DELIMITED BY ' ' ' WILL ATTEND.' DELIMITED BY SIZE INTO AA-TEXT. Delimiting by two spaces will handle anyone with a single space in the name (La Verne, or something like that).
Thanks for your help! I should have been more clear. The assignment is to have no stated delimitations at the two lines where it’s now omitted. But why is the space in the ”, ” being removed if the delimitation is on the AA-NAME-THREE-line? That’s the part I’m not getting... Is the earlier DELIMITED BY SPACE somehow still active?
There's insufficient information here. Can you post the complete statement of the homework problem, the *complete* DATA DIVISION declarations of *all* the variables involved, and the fragment of this program containing the *complete* STRING statements? 
It's the opposite. It takes the last one and applies it to everything before. If you do:\\ STRING AA-NAME-1 ', ' AA-NAME-2 ', ' AA-NAME-3 ' WILL ATTEND.' DELIMITED BY SIZE INTO AA-TEXT. You get:\\ JOHN , KATE , HOMER WILL ATTEND. If you do:\\ STRING AA-NAME-1 ', ' AA-NAME-2 ', ' AA-NAME-3 ' WILL ATTEND.' DELIMITED BY SPACE INTO AA-TEXT. You get:\\ JOHN,KATE,HOMER Since it delimits everything by space, the 'WILL ATTEND' is gone since it starts with a space.
Curious, did you ever find what you're looking for? Honestly I'd just apply at the places that are asking for 5+ years experience. 
My COBOL is rust, so someone else may have a better idea... Create a 01 level named the same as the 4 byte Pic X; create two 05 levels under it (name-a and name-b) each pic x(2). Move your # into the name-b. As far as removing the lead 0, you could really hack it up and create two one byte 10 levels under the second 5 level and space it as needed from there.... You may be able to do some sleight of hand as well using a [redefines](https://www.ibm.com/support/knowledgecenter/en/SS6SG3_4.2.0/com.ibm.entcobol.doc_4.2/PGandLR/ref/rlddered.htm) clause -- make your pic x(4) a 5 level, create another 05 level that redefines it as a 4 byte number [ZZZ9](https://www.ibm.com/support/knowledgecenter/en/SSAE4W_9.1.0/com.ibm.etools.iseries.langref.doc/c0925395267.htm). Move the Pic9(2) to the ZZZ9 but then use the Pic X(4).
Hi I've participated in Cobol to C migration (more than million lines of code) about a year ago. We had a [contractor company](https://united-consult.hu/cobol/) from Eastern Europe. * they ran their conversion scripts * we checked quality of the translation/functionality to find flaws * then they did some additional tweaks in their translation * rinse and repeat several times end result: we've got C code which compiles and same functionality working as before conversion. The new code is definitely ugly and much less readable / support friendly. But the COBOL license savings are very significant
First off, format your post. Hard to read. Starting each line with 4 spaces will make your text appear as code. And this is COBOL. We type in caps ;-) AS SUCH Secondly, I'm not quite sure what you're trying to do. Your code seems a bit confusing. Inline "perform until's" are so ugly looking to me. You're also referencing a table item without indexing it in your until statement. You also have an extra 'END-PERFORM' in there. What's the exercise that you are trying to accomplish? From what I can gather, you want to accept the number of total people, and then every other (?) table item, you're moving it from 'LIVE' to 'DEAD' and subtracting 1 from the total people? Then the same for the number of 'DEAD'? Really hard to follow what the end goal is of your program. It's all just really confusing code. You're also only going to get a single display at the end of the program. Is that what you want?
First of all thank you for your time. Very sorry about the format, I copy pasted from online COBOL. What I'm trying to do is this: -There will be number of people by User input. -Every second person will die until there is last person stands. So in this case it goes like 2 / 4 / 6 ... -It is a circle so after first round is over, it should jump back to the start of the list. I have tried several approaches, the one I copied was a hopeless one. What I try to do is : - I create a list of living persons (Value 1) - Then start killing people in first round (Turning the value to 0) - I'm having trouble making a circle, that will see the first person on the top of the list who has (+1) value (But also it may be jumped person if the last of the list person has just died) - Also I'm having trouble to calculate how many time in one round killings will happen. Perform until Idx &gt; totalpeople seems to work to a point though. PS : Deadpeople list was a desperate attempt to make a circle. Thanks
Based on the wikipedia page for the [Josephus Problem](https://en.wikipedia.org/wiki/Josephus_problem) wouldn't you need to ask for some additional info (like the starting position, number of people to be skipped, ...). I assume the goal is to determine the last person standing? If that is the value of IDX would be what you want to display. Looking into the sizes of the variables they don't seem to be consistent with each other... You're allowing for up to 9999 people on the input variable but the array is only sized for 99.
Yes the problem has more infos to be implemented but i want to solve the code by myself. I don’t want to look at already written codes. Thats why I want help at places where I stuck. For now I want to write the code with starting point default 1th person, if I can manage it, I ll try the following.
Ok, I kind of understand what you’re trying to do now. I’m not so good at those puzzle brain teasers, so I’m not much more help than I’ve been so far, but I will tell you that you’re moving the accepted number of people to the 2nd item in the table. If you accepted 3218, you’re then moving it to a PIC 99 field, which will then contain 18. Your table only has 99 occurs, so there will always be 99 “people” in your program. I think you need to re-evaluate how you’re doing this.
And don’t bother asking for help on the mainframe forums. You’ll just get people responding with “read the manual”. 
I have been very keen to learn COBOL. After seeing this post I bit the bullet and did a proper search and found this : https://devops-com.cdn.ampproject.org/v/s/devops.com/the-beauty-of-the-cobol-programming-language-v2/amp/?amp_js_v=a2&amp;amp_gsa=1&amp;usqp=mq331AQECAFYAQ%3D%3D#referrer=https%3A%2F%2Fwww.google.com&amp;amp_tf=From%20%251%24s&amp;ampshare=https%3A%2F%2Fdevops.com%2Fthe-beauty-of-the-cobol-programming-language-v2%2F Looks like a good jumping off point for a language with limited online learning resources.
It's nothing like assembler
There are tools that can help you document and understand your Cobol code. I used this tool application analyzer to help extract business rules, and map out batch jobs. This will streamline your process trying to convert cobol into Java. I believe the same company that sold the product does Cobol Migration projects as well. DM if you're interested in the company name. 
This was a helpful comment.
Trying to convert from a sequential file to and indexed file.
Try access mode DYNAMIC for the indexed file. If I recall correctly, the named key field should be PIC X, or a group level field.
If you start each line with 4 spaces, it’ll format it as code so it’s easier to read. Like this
Okay I’ll try to figure it out. Newbie on this site as well as to COBOL. Thanks for your patience!
tried editing my post and adding 4 spaces before each line and it only saves it back to the way it was. :-( &amp;#x200B;
I also can't figure out how to post code in these comment blocks. Tried the 4 spaces before each line and that doesn't work.
Can you please detail? Is it a compile error?
It's a bunch of things. 1) It's not re-writing the changed fields. 2) I have to press enter 2x before it goes back to the input screen. 3) Pressing N for another transaction doesn't stop the program.
Figured out one of the issues. Need to change the first UNTIL statement to be 'N' or 'n' vs 'Y' or 'y'.
COBOL has layers that you will uncover. In my opinion these were mine steps: 1) Use the simplest data declarations like PIC 9 for numeric. Read &amp; Write flat files. Use only paragraphs for functions. Simple CALL. 2) Find the difference between dynamic and static CALL. Use comp-3 numeric. Use variations of ACCEPT. 3) Discover Pointers and complex calling methods. Use comp-1 numeric. I don't like the language because it doesn't have local variables and you are forced to invent weird car names. 
Great, can you please tell if you are using open COBOL, I suspect but need to be sure. 
I’m using visual cobol for eclipse. 
Visual COBOL eclipse. 
Have you looked in the [Micro Focus documentation] (https://www.microfocus.com/documentation/visual-cobol/vc40pu1/VS2017/index.html?t=BKCICIADISS017.html) for Visual COBOL? I'm not familiar with Visual COBOL myself but I suspect you need to send your values to the screen at some point.
Could you tell us what exactly isn't working / what you are expecting?
Depends where you live. Where I'm at there are some big Banks and insurance companies, they are always looking for COBOL people!
I'm working in Romania for a company that does outsourcing and they do not want to employ people to work even from other cities. I guess this is because most of the time we are doing support and what the company requires needs to be learned here (I don't agree with this, but anyway). Try to see if you can't go to the US and then start looking for a job. I'm interested in this also. 
If You know English , you know COBOL , its basically English like sentences in some procedural way , You should be able to learn the basics in a couple of days. Writing big programs/complex ones may take some time though.
Sorry, but why do you wanna learn COBOL? 😂
A job for life maybe?
Yeah but there’s so many languages (with better careers prospects than being a COBOL programmer on legacy systems). Which I used to do by the way. He wouldn’t be writing any new code but supporting/enhancing existing systems. The web based languages would be a better choice ...
COBOL itself is a cakewalk to learn; if you don't mind verbosity it's, well, OK. You do have to be willing to take the long way around in a lot of programming techniques. The language is not Turing-complete, and functions are not first-class entities. For instance, there's no way in the native language to pass callback functions as parameters. Some of the syntax seems bass-ackwards, too. SORT is a weird verb; to use it you really have to understand how IBM's mainframe sort utility works. String handling is better than it used to be, but it is still cumbersome at times. IBM architecture supports an unusual data type, Packed Decimal, that is heavily used in their COBOL. It's great for currency calculations but you have to understand how it's stored at the byte level to write optimal code. If you know assembly, COBOL is a great framework for hanging assembly subroutines from. My most advanced apps that had any COBOL were pretty much ten-line Procedure Division programs that call assembly code to do the real lifting. The real difficulty to getting COBOL jobs is that you're almost certainly going to be in an IBM mainframe environment; this means you have to know JCL. Training in JCL is a little hard to find. Also, most COBOL apps still in existence are heavy users of database and IBM online functionality (once called CICS). This can be another training bottleneck. COBOL won't have much to do with AI, or vice versa. It probably wouldn't be much use in data science except as a data sampler or collector; I can't imagine doing a lot of analysis with it when tools like R exist. But if you have COBOL and R i think the Wall Street plan could work well. But yeah, if you can punch all those boxes, you are probably worth at least $90K/yr, more if you're also fluent in modern techniques. 
*beep beep* Hi, I'm JobsHelperBot, your friendly neighborhood jobs helper bot! My job in life is to help you with your job search but I'm just 510.6 days old and I'm still learning, so please tell me if I screw up. *boop* It looks like you're asking about job search advice. But, I'm only ~21% sure of this. Let me know if I'm wrong! Have you checked out Forbes, LiveCareer, TalentWorks? They've got some great resources: * https://www.forbes.com/sites/karstenstrauss/2017/03/07/job-hunting-tips-for-2017/#794febea5c12 * https://www.livecareer.com/quintessential/15-job-hunting-tips * https://talent.works/automate-your-job-search
I agree completely, but would personally replace IBM with Unisys and JCL with WFL. Good luck. 
Yeah, well, me too, but they have such a small market share any more. Hell, I wish the Xerox Sigma were still a thing.
I agree with most of this, but I'm sure COBOL is in fact Turing-complete. (Or, to be precise, if COBOL isn't Turing-complete, then [it's worth mentioning C isn't, either](https://cs.stackexchange.com/q/60965).)
I'd kill for a COBOL job. I worked on IBM Big Iron with VS COBOL II and JCL back in a previous life. Honestly, I enjoyed the language. For what it was built for, it's still a great choice.
I.B.M. has RDi which is decent editor. What platform are you working on? Z Series mainframe or iSeries mid-tier? 
I went through a fairly COBOL intensive program at a community college in the late 90's. (Two terms of COBOL, two terms of CICS, a term of JCL, and all the related classes thrown in.) Pay was okay then and it still seems okay when I look. &amp;#x200B; Data Science, Cloud, and AI are going to be far more lucrative (as in pay 2x) and should be much easier finding a job. Most COBOL jobs I've seen were from insurance companies that do cyclical hiring. I've known one person able to write their own meal ticket with COBOL, and they are working a temp contract in a HCOL area, so I'm not sure how really great it is. &amp;#x200B;
IBM Z mainframes from what I understand. Why does it matter? Firstly I want to simply learn COBOL. Later on shall I see about mainframes/architecture and JCL right?
&gt; Later on shall I see about mainframes/architecture and JCL right? LOL let us know how your first compile on that IBM pig iron goes.
Ok, any suggestions regarding learning material etc?
Google a few things up and post the links, and I'll comment.
Since you mention a large enterprise I'm assuming its COBOL on the Z-series mainframes. The Murachs series of books are worth looking into - as well as COBOL other topics to consider are the books on JCL, DB2 and CICS. My goto learning book was by McCracken but I think that has been out of print for a while. IBM has the 'Red Books' - more useful as a reference. For tutorials check out IBMs Master the Mainframe site - it will cover a lot of areas you'll find useful.
From my search yes indeed Myrach's books are considered top kotch! I shall try to find McCracken (first time I encounter his name etc) too. So for starter I shall go to IBM site and play around, ok thank you a lot!
Programming is like Math you learn the basic concepts and they’re sharpened by actually doing. Honestly any book would be fine. If you’re on SystemZ you’ll need some reference materials for writing CICS and DB2 syntax in COBOL code as well. When it comes to the systems you’ll be working on it will depend on whether you’re working on the front end input systems or the back end reporting systems. For reporting you’ll want to obtain reference materials for COBOL intrinsic functions. Also if you’re going to be sending data outside the company you might want to familiarize yourself with learning how to create XML files as well. There are also formats used by several insurance companies that you will have to understand so that you can format the data feed to the converters. My final point, learning COBOL is straightforward and easy. Applying it and using it in a business setting is a little challenging. Understanding how the code you create or maintain impacts downstream systems or clients is the greatest lesson. Learning COBOL is a small fraction of what you will eventually need to know and is not an end in itself.
Well, the JCL and Assembly stuff might explain why the professor at my institution who knows COBOL is also an Assembly nut. Yeah, I hadn't assumed COBOL would have anything in the world to do with AI or data science; I was only mentioning my interests in those fields by way of explaining my curiosity in how valued COBOL skills are. That doesn't sound like a bad salary by any means, considering the necessary skills.
You are wrong.
It will never die, according to one of my professors, not just because technical reasons and sheer legacy use, but also because accountants can audit it perfectly without knowing single piece of computer code.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/h_n] [How Widespread Is the Modern Cobol Job Market?](https://www.reddit.com/r/h_n/comments/ar0tbx/how_widespread_is_the_modern_cobol_job_market/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Go to [archive.org](https://archive.org) and search for cobol and cics books. plenty there. Go to [vetusware.com](https://vetusware.com) and grab a cobol/cics compiler and practice. Murach's cobol and cics books are good. you can even download the code for free from their website. Good Luck! michael
Thank you a lot for your answer! I am currently awaiting for Murach's book to arrive!
These links might help: [https://kupdf.net/search/as%2F400](https://kupdf.net/search/as%2F400) [http://gen.lib.rus.ec/book/index.php?md5=6C9BEEEA218DBF122DFD240C0AE928BD](http://gen.lib.rus.ec/book/index.php?md5=6C9BEEEA218DBF122DFD240C0AE928BD) [https://www.scribd.com/search?content\_type=tops&amp;page=1&amp;query=as%2F400](https://www.scribd.com/search?content_type=tops&amp;page=1&amp;query=as%2F400) \[Documents Section\] Good Luck! Micol &amp;#x200B;
I'm from Europe so perphas this doesn't matter to you, but here COBOL developers are really on demand, so the salaries are the same or bigger then Java. I know only bank and insurance companies with IBM Mainframe. Also heard that some of them migrated. I'm thinking later in my career to go to the USA to work on mainframe projects. 
COBOL pays well but only really at the senior level position. I came from an operations background so I had an handle on JCL. Once I was a year in the language got easier to program in.
I don't know especially in Australia, but here in Quebec, Canada there is a high demand around big cities with a lot of companies using legacy systems. They are ready to pay for them (CAD$70K and upwards a year) as COBOL programmers are a rare breed. Essentially, you will be working on understanding, maintaining and converting COBOL code: you'll be considered good if you don't have a COBOL job when you're done, as companies want their legacy systems updated (often to C++ from what I've heard), so converting COBOL code to C++ will be essential. As with most things though, I am not an expert so contacting someone who actually known what they are saying (more than me anyways) could be of some help. What I wrote is what I heard from my CS teachers, but it may be dated or else... &amp;#x200B; printf("Good luck!"); 
Hi There, Murach book for Cobol is best book for beginners and advance programmers. In fact you can refer below mention blog for various Cobol topics. https://mainframe-forum.blogspot.com It has lot of good stuff. I hope you like it. Thanks. 
I will check out this blog, thnx!
*Eyy, another year! * It's your **4th Cakeday** TheTsaku! ^(hug)
Should be pretty easy to get back into it. I took these courses on udemy and was able to land a cobol contract gig within a month of completing them. Would give it a try, Cobol is in demand and you dont need to be a master just understand basics. I think if you follow these courses you'll land a cobol job quickly like I did. &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol/](https://www.udemy.com/the-complete-mainframe-master-course-cobol/) &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/](https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/) &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cics/](https://www.udemy.com/the-complete-mainframe-master-course-cics/) &amp;#x200B; [https://www.udemy.com/mastering-the-mainframe-technical-interview/](https://www.udemy.com/mastering-the-mainframe-technical-interview/)
I would try out these udemy courses, I found them immensely helpful and was able to land a job after taking these courses. &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol/](https://www.udemy.com/the-complete-mainframe-master-course-cobol/) &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/](https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/) &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cics/](https://www.udemy.com/the-complete-mainframe-master-course-cics/) &amp;#x200B; [https://www.udemy.com/mastering-the-mainframe-technical-interview/](https://www.udemy.com/mastering-the-mainframe-technical-interview/)
Theres a lot of demand for Cobol developers but you only need to know the basics. Pay is anywhere from 60-85k a year depending on role, contract and location &amp;#x200B; I did a couple courses on Udemy and was able to land a cobol job within a month. Ive listed the courses below, they may help you out as well. &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol/](https://www.udemy.com/the-complete-mainframe-master-course-cobol/) &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/](https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/) &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cics/](https://www.udemy.com/the-complete-mainframe-master-course-cics/) &amp;#x200B; [https://www.udemy.com/mastering-the-mainframe-technical-interview/](https://www.udemy.com/mastering-the-mainframe-technical-interview/)
Thanks. Maybe I need to learn C++ then.
Thanks for the links. It's amazing how much I remember, I am just a bit rusty. One major problem is that none of the jobs are where I live unfortunately.
Hello mate , I am currently working on a As400 you are sure these are worth it? I will definitely check out the 2nd one regarding DB2 but, as for the others can you give us a tiny review/ more information?
How many years of software developer experience did that before learning Cobol?
About 2 years. By experience I mean Wordpress and html/css/js No formal training
Yet another employer who does not want to pay for experienced staff? Sorry, I have zero sympathy for your predicament.
Hello, Why do you think he is an employer and not an employee trying to make a difference?
I do not think he is the employer, I assume he is the team leader, caught between management with unrealistic expectations and a bunch of junior programmers who have been given a "how to program in COBOL" book and then thrown in the deep end. The people who used to know how the system works were laid-off in a cost-cutting exercise. This has been the pattern in the industry over the last few years.
Your code is fine. Change your file name to match your program id.
Wow that really worked, thanks a lot!
I'm happy to have been a useful mammal today! The reason for the invalid argument is most likely due to the space you'd used in the file name. I suspect if you change the filename to HELLOX.cbl you'd get a different error.
Huh, surprisingly no error on that one. I wonder why. Hey, from one programmer to another, are thr numbers on thr side good cobol writing ediquite? They dont seem to be required in the program itself
That's weird there should have been an error. Can you check your directory for the compiled program and delete it? The compiled program will not have a .cbl extension in the filename. Then retry to compile the HELLOX.cbl. You should get an error. I wouldn't include the line numbers when posting code as they would need to be stripped out by anyone wanting to copy and compile your code.
There we go yeah. And hey thanks for the advice
What was the new error? Also, I think I misunderstood your question about numbers. It is good practice with COBOL to start paragraph names with a number. For instance, you should label your PROGRAM-BEGIN paragraph as A000-PROGRAM-BEGIN. The reason for the numbered paragraphs is that COBOL has traditionally been written with one file containing many, many, many paragraphs. And a lot of jumping in and out of those paragraphs. Using a structured naming convention helps to keep the code maintainable. If you start at A000-xxx then any calls from it should start at B100-xxx. Layer one and two. Any calls from B100-xxx should be to C100-xxx. If a second call is needed from B100-xxx to a C layer then the next C layer should be C110-xxx. Giving gaps of at least 10 in the name allows for other paragraphs to be inserted and stay inline with future mods.
Oh ok, that would make sense too. A syntax ertor
Ah, I suspect the compiler now knows it cannot find the name of the program id, and has given up. Kinda a cheesy way for a compiler to behave. If you don't mind, let's try this: - Change your file name back to HELLO.cbl - Remove the period after the HELLO in the program id And let me know what you get... I betting syntax error
Yep syntax, right on the money! So how long have you been reading thr future?
I cut my teeth on COBOL 20 years ago but haven't coded in it in the last eight or so. Chatting with you makes me realize how much I've forgotten. Would you mind if I ask why your looking into COBOL?
Well I really like old hardware, and so I thought that having a kob where i sustain old hardware and systems eould be interesting. I know 6502 assembly and I believe I heard somewhere that you could actually use assembly code in cobol. Is that tru?
You can write Assembly and call it from COBOL. The same goes for C. I've coded in both for college but never mixed them in with COBOL, so I really cannot speak to that.
Would you mind telling me your Cobol story?
All of my coding in COBOL was after I graduated, and landed a job at a university working on a Student Information System (SIS). The system was purchased by the university and ran within its data center on an IBM mainframe. After getting hired, one of the most challenging aspects of my job was learning Job Control Language (JCL). There is nothing about JCL that is intuitive.
Yeah, thats what I heard. I hope the teach me JCL in this book too. I heard they prettt much work in tandum
I have a book on JCL I can recommend. I'll look for it tomorrow if you're interested.
Yes plz thanks!
I find the numbered paragraphs unnecessary. A single paragraph may be executed several times in a program from different parts of the program, and at that point the number becomes meaningless. Plus it just takes up extra characters on the already limited length.
I number my paragraphs in series/groups, but not with any sort of strict "always use this" style or regarding how it's called. I like grouping things by their functions. E.G: Database calls would be DBXXX, with something like DB100, DB110, and DB120 being for open, read, close on the same database. DB2xx would be for a different database, etc. I find it helps with debugging during development and readability down the road.
http://cobolcowboys.com/meet-the-company/
I've been with my current employer for about 6 years doing COBOL. I wouldn't say I have any COBOL-specific "stories", but here's some perspective of my development position. The biggest thing is time, literally. It takes months to get anything done. Not because there are blockades, but because changing and testing our 30+ year old programs is that intensive. I've worked projects that take literal years from start to finish. Our COBOL programs support manufacturing, so the main mantra is "Keep the factories moving." A result of that, and the raw development time, is that deadlines...aren't really a thing. It must get done, and you must be making progress, but take the time you need. The impact of our work is so huge it needs to be perfect the first time, every time, and that means a very time-intensive development. That can be extremely stressful if you let it get to you, and having that much responsibility isn't for everyone. Having that much time isn't for everyone either. It's super easy to "coast" and not make much progress because you don't want to. Staying on track requires discipline, something we all need to remind ourselves of occasionally. There is a big process in getting anything released to production. Our release process itself takes six weeks, assuming everything goes 100% A++ perfect, which it never does. Getting users to test for us is challenging, because many have limited testing areas or simply limited knowledge of our programs. Quality of programs vary widely as well. "Back in the old days" the team that supported our COBOL programs was 100+ people, and now it's just 6. That means you can go anywhere from a beautiful fully documented and formatted masterpiece, to a program with zero documentation other than a short description at the top. Completely new things are extremely rare, and new features are also fairly rare. Most of our work is deep "level 3" bug hunting types of things. One project I worked on took over 4 months of investigation and lead me down to the database sending back the incorrect record to the calling program. I never figured out WHY the database did that, nor could I ever replicate it in test. I resolved it by coding the database call more explicitly to get what the program was expecting. Once that was complete, I spent the next ~8 months getting the affected programs released to production. COBOL is a time suck in many many ways, but I do really enjoy it. The pay is pretty awesome too.
A name so nice, use it twice!
Wow, this is really interesting! What inspired you to start COBOL?
Not every COBOL programmer is a mainframe programmer... I programmed in COBOL for almost 20 years (starting in the mid 1980’s) and did it on Unix and Windows systems only. I worked at a small company that had a vertical accounting software app that was written in Cobol. It used “interactive” COBOL (initially using DG iCobol, then Acucobol) and I led the projects to convert it to a GUI (yes, in Cobol) and replaced most file I/O with embedded SQL.
Woah, I thought people only used it for mainframes and things like that. Thats really wild, I didnt know COBOL was so versitle (especially that GUI, thats something id really like to learn more about). What was it like programming in COBOL during the mid 80s? Did were people calling the language dead then too?
&gt; What inspired you to start COBOL? When I transferred to a four-year college to get my Bachelors the undergraduate advisor was explaining the different emphasis available. She explained that mainframe development was in need of eople because a lot of older experienced people were retiring without many new people to take their place. Immediately I heard "job security". Luckily I actually enjoy COBOL/Mainframe development, so that helps too. &gt; how often do you use JCL in your work? My employer works exclusively on an IBM mainframe. I use JCL nearly daily. A lot of times it's just submitting the same thing over and over again for development reasons. Knowing JCL would have been a bonus coming in, but I learned it 'on-the-job' as projects came up.
It is interesting. I am working on code older than myself. The hard part is having to go the long way. There is no framework, if you want something you have to do it yourself. However thats also the charm.
Sure, they have been calling it “dead” for years. But during that time we went through new, “cool” languages like Informix 4GL, Powerbuilder, FoxPro, etc. that have all fallen by the wayside. Check out Acucobol, now a product owned by Micro Focus. It has an IDE, screen designer, debugger, and other tooling. Initially when I started, our programs were all text based interactive screens (still nice) using the SCREEN SECTION, added to COBOL as an extension by Data General in their iCobol. Acucobol took this and extended it to create graphical UI’s. Rather nicely. Like (not sure if this will post right): SCREEN SECTION. 01 SEARCH-SCREEN. 03 LABEL "Search for", LINE 1, COL 5. 03 ENTRY-BOX USING SEARCH-TEXT, COL + 1, SIZE 30. 03 PUSH-BUTTON, TITLE "Ok", LINE 3, COL 10, DEFAULT-BUTTON, TERMINATION-CODE IS 13. 03 PUSH-BUTTON, TITLE "Cancel", COL 25, CANCEL-BUTTON, EXCEPTION-CODE IS 27.
I'm sorry for so many questions(especially because they are such newbie ones too) , but I dont really have a lot of COBOL programmers around me to ask questions to! How exactally does COBOL interact with the factory? I dont think that it operates the machinery (unless it does, I've been surprised more than once on this thread) so is it many to keep track of inventory? Maybe the better question is how does the Mainframe itself interact with the factories?
I'll definatley check it out, hey, speaking of IDEs, how is OpenCOBOL (GNUCOBOL) for new COBOL programmers? How is it for advanced ones?
&gt; I'm sorry for so many questions(especially because they are such newbie ones too) , but I dont really have a lot of COBOL programmers around me to ask questions to! No problem at all! Our software suite tracks the materials as they're processed in the factory, going from raw good to finished product. It's a great big giant record keeper. It also defines the 'manufacturing path' the materials must take, which can vary based on testing throughout the process. Our software doesn't control the actual machines directly, but it does store data gathered from the machines during processing. Our software can also be used to track machine states (up down, maintenance mode, etc) which can then be used for load balancing, but that's optional and not all factories use it. I'm not as familiar with how it's used on the floor but most machines have a terminal of some kind, either direct attached or remote attached, that is human or automation operated to interact with our software. The specifics vary widely between factories. We don't keep track of 'global' inventory, only inventory at each factory. We use SAP for 'global' inventory tracking. When something gets started inventory is subtracted from SAP, then added to our software, then vice versa when the product is finished.
I haven’t looked at it in years. It’s probably good for learning (it being free) where most major commercial COBOL compilers can be costly. I looked at it years ago and it had the basics but not feature rich enough for production work. It also compiles to C, and then of course to native code. One of the things I liked most about Acucobol was that it compiled to “p-code” and you could develop on any system and run on any system they had a runtime port for (many). If you stuck to a text interface, you could run your same code on hundreds of systems without even recompiling.
I've been working for a insurance company for 16 years. The first 4 years I was on the programming staff, but I've been in a system support role since. Our project lifecycle isn't as intense as that other guy. Some projects take months to years, smaller changes can take a month, break-fixes take weeks, and emergency prod fixes can take hours. The normal process to promote code to production normally takes 2 weeks unless it's an emergency. I got this job straight out of college and never thought it'd be something I's enjoy, but here I am 16 yrs later. During training we initially learned native COBOL, then we focused on APS which is a pseduo language compiled into COBOL. It makes a some QOL improvements and makes it a little easier. We also are moving towards writing code in a GUI for testing and initial compiling before sending it to the mainframe. For new hires, this could be a good thing since coding in the mainframe can be a little intimidating. Well. I'm here to tell you that i was very well familiar with ins and outs of MVS and ISPF rather quickly. I've developed some many utilities and macros on the mainframe that the idea of losing those efficiencies isn't appealing. Microfocus owns APS and worth checking out since some shops use that. I use JCL daily. I also use Rexx, SCL (Endevor), DB2/SQL, IMS, and CICS nearly daily. I like to do ISPF development and create in-house tools/utilites and screens. I've written processes that communicate between mainframe and windows servers. A lot of what I've done over the years solidify the fact that anything can be done on the mainframe, and is sometimes easier. I've frequently sent files to the mainframe to manipulate because it would have taken me longer to do on windows. We frequently do new development as well as maintenance. I personally get involved early on and assist programmers with designs, whether they need DB2 or IMS, MQ, or whatever. I get to get involved in multiple projects, so I never get bored. Also, as a support role, we're available to assist programmers when they can't figure something out help troubleshoot, or just give guidance. As a team, we're also responsible in keeping the production system appls up and running, supporting customers, and after hour support. In the past 4 years, 4 of our senior guys retired, 2 more will retire in the next 2 years. That will me and another guy, and we're not due to retire for a while. So the need for younger folks to come in and be willing to learn is necessary. I'd be willing to bet you could get a secure job if you're younger. If I was in charge of hiring, I'd def want a young person to train an mold. But keeping them interested and willing to stay the long haul would be the biggest issue. Mainframe can seem boring, but it all depends on what you're involved it. I got bored quickly making small fixes to code, hence why i moved to a support role. That job seems new everyweek, and I enjoy branching out from time to time. Hope this helps.
These are some very good insights into the industry, COBOL definatley seems like a more obscure programming envirnment with some more unique challenges (including boredom). Have you or do you know any COBOL programmers who got into a COBOL job part time? Like they get got the job to fix one thibg and then theyd be off to greener pastures. That would crack down on the boredom.
I'd love to get back into COBOL/JCL again. Really enjoyed it.
Why did you leave?
Disability retirement. And it's practically impossible to find a part-time programming job.
Oh, I'm skrry to hear that. How long were you in the industry? Where did you work?
I was in from 1982-1999 and worked as a civilian employee for the US Army.
I can tell you that the IRS and some DOD still use COBOL, not sure about private industry.
Syntax is incorrect - change the file name to match program ID &amp;#x200B; I would check out these 2 courses - they helped me learn Cobol and they will do the same for you. &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/](https://www.udemy.com/the-complete-mainframe-master-course-cobol-jcl-db2/) [https://www.udemy.com/the-complete-mainframe-master-course-cobol/](https://www.udemy.com/the-complete-mainframe-master-course-cobol/)
Have you considered using Rexx? I would recommend this course give it a try... &amp;#x200B; [https://www.udemy.com/the-complete-mainframe-master-course-rexx/](https://www.udemy.com/the-complete-mainframe-master-course-rexx/)
So does pretty much every bank, insurance company, telecomm company, and every company more than 20 years old.
Anymore, the most cobol in my company is done in Thailand or India.
USAA in San Antonio, TX is heavy in COBOL still. ADM in Decatur, IL was using COBOL in 2012. Those are to past employers where I did COBOL programming. Others I know of that posted job offers are Target (their Red Card out of Minnesota), Verizon (opening was easy coast), Springleaf Financial or whatever their name is now, headquartered in Indiana (Evansville?), there is multiple companies in the Milwaukee area as well I'm aware of. I also got my education at Eastern Illinois University class of 2010, but last I knew they were no longer teaching it.
I have been with my current employer for 16 years - it is a big state R1 university. I support the student information and course scheduling/space management systems, along with most of the data feeds going to internal &amp; external clients. For the most part the work is mostly maintenance of existing programs, with the occasional new program being developed to support some mandate. Right now the majority of my work involves being a data expert rather than a COBOL programmer. Base technologies used here are IBM COBOL, IMS DB/DC, Oracle, Z-Direct (for interfacing web stuff to existing IMS transactions), and Informatica (change data capture to update Oracle tables). &amp;#x200B; Worst part is that it is becoming difficult to get replacement programmers as folks retire. We are a university and we don't teach the subject. &amp;#x200B; Previous job was with a largish consulting company (17 years there), I was doing mostly telecom work (billing systems), but also branched into insurance, manufacturing and other industries.
Short story: Our company (that I recently started working for) have not laid off developers, nor have we tried to cut costs on development. I'd like to see unit testing introduced to help our vendor as much as it helps us, by reducing the feedback loop and providing growing coverage of legacy code. Long story: No layoffs that I know of though, and we pay for (what we are sold as) experienced staff, but you're not too far from the crux of it. I'm the new QA Manager, trying to bring years of QA and Project Management experience in Agile and a little DevOps to a company with waterfall, outsourced, mainframe development. Vendors try to maximize profit, so they're always after the cheapest labor, which likely does not include those who have been coding COBOL for decades. We pay them to do a job. My experiences tell me that could be improved. To my knowledge there have been no layoffs. The system has been branched for each customer (because reasons) and the team that developed the original system are either on bigger accounts, changed employers or (most likely) retired. The result is the same, a lot of the deep knowledge of the system has been lost. I see unit testing as a way to get fast feedback for the devs if they inadvertently break something old. It's a long road ahead to build up decent, meaningful coverage so I 'm seeking help to find the right tool for the job (one the vendor can't find excuses not to start using). I know there is often resistance to introduce unit testing, but based on my experience I see this as something that would benefit the dev team more than us. So, back to the original question...
Thanks for the tip. I'll do a little reading up on rexx.
I assume your unit environment is on windows since you are using Netexpress. Your unit testing will typically have below two steps. Step 1 Execute step that create outputs Step 2 Verify output created in Step 1 with expected output Both of the steps can be automated using a scripting language (python is a good choice). In my experience automation of step 2 is a complex task, much more so for legacy system. If you have your integration environment on windows/linux and are able to build robust scripts for above steps, you can put these scripts (along with build/compile scripts) in a CI/CD tool like Jenkins.
Having a unique and uncommon skill. Seriously, I could have written this post about 11.5 years ago. It is a great company that I still work for. COBOL jobs often have good security, and the knowledge of the system you are maintaining is far more important and valuable than any language-specific skills, so it would be cheaper to retrain you than hire someone new. Feel free to DM or reply here with any specific questions. Best of luck.
Thanks for the reply :) I like things that are unique so it might help thinking about it this way.
COBOL is not going away, so get good at it and you can make a very good living off of it.
I'm currently studying COBOL and CICS and it is an enlightening experience. Mainframes have most of the modern paradigms for decades, only with unusual terms. For example, for the MVC, Model is the COMMAREA, view is TERMINAL and the controller is the transaction written in COBOL. If you want workflow, you XCTL (or transfer control) to another program. Distributed computing? CICS are ready for it from day 1 and can be configured any way by the system programmers.
That's one of the things I actually enjoy about working in cobol. You have to break your problem down to the basics to solve. Like doing a simple string replacing can be an interesting challenge
I like the fact that it has room for improvement with new programming tools. I try to apply graphical representations of mainframe programs and system. For example in COBOL I want to do a parser to make a depdency representation of different variables. Like does this column in the DB2 table has any impact on this program? Also I want to take a COBOL source code, parse it to find the input and output variables to simulate all the possible runtime scenarios. I think of it as automated testing. For the stuff I said upper I do them in my spare time.
So I currently have an internship at a company that runs on an IBM mainframe. Company is doing rather well and growing, acquiring new locations. Anyway, I'm just starting out. Literally my first week. COBOL is coming to pretty fast, makes a lot of sense and is easy to read. Not really hard at all. JCL is a bit much, but it is my first week and I'm still learning our system. I will be working with JCL a lot I assume. We also frequently use XBOL, which is a local thing. The dude who developed it died. But it complies into COBOL. it's a bit harder but saves a ton of time. It cuts out a ton of unnecessary stuff, which is awesome. Does a lot of reporting work for you. Can't google a single thing about it though, lol. Anyway, I'm actually really liking the work so far and the company. I'm looking for advice on taking this as a career path. Like, how viable is it and am I screwing myself in any way. Just any information about it and any general advice you have for me would be greatly appreciated. It sounds really tempting and kinda up my ally. I'm gonna learn a lot more this summer, but any and all advice is appreciated.
Where are you located and what's the pay like?
I moved to Atlanta for the job, pay was $68k a year
Are you still doing it? If so, what are you making now?
No, programming was a fallback for me, didn’t make money in bio. Always wanted to do sales and after a while in cobol ended up getting a tech sales offer, so I switched. However I wouldn’t have gotten that offer without my cobol experience, and the pay doing cobol changed my life around, I paid down debts and saved money. No longer had to drive Uber and work 40 hours a week to meet my bare minimum requirements. I always recommend cobol to people attempting to get into programming or tech if it’s for the money, because there’s short supply of devs for all the jobs available and no interest from CS majors and boot campers to do it because it’s not the hot thing.
&gt; how viable is it There are lots of companies that still rely on a COBOL software base deep in the bowels of their IT department. I don't see that changing majorly any time soon. At this point the technical debt to upgrade that is so large most companies just want to "deal with it" and opt to maintain what already exists. On the other side of the argument, those that favor their COBOL software base (like mine) see the mainframe as a huge asset. Mainframes are super flexible, can be extremely powerful, and are ridiculously reliable. My company runs 24/7/365 except for a 4 hour down time once a year. &gt; am I screwing myself in any way There's two 'traps' to mainframe development I can see. If the jobs dry up in your area, you'll have to move to follow the money. If you burn out of mainframe development you'll have a hard time transitioning to some other modern development if you haven't been keeping your skills up to date in your off time.
Not sure how the market for COBOL is over there but seeing the amount of experience you have in coding it should be easy for you. COBOL isn't really a sexy robust language but developers are still in high demand. Good luck.
thanks, that's reassuring!
Since you already know a few languages adding another to your skill set should not be difficult, but that is only half of the problem. The base language - easy,just get a copy of open COBOL (or whatever it is currently called), install it and pick up a book. The big problem would be all of the other additions that employers will be looking for (specific databases, online transaction processing, additional frameworks etc.) would be difficult to learn outside of a corporation. One of the biggest things that you will have difficulty with would be a lack of business knowledge used in whatever industry is hiring. This is usually more important than knowledge of the language. Given your background as a physics PhD student and the list of languages that you already know, it might be better to get a programming job in some scientific related field (one where COBOL would not be the primary language). FWIW - I am coming from the opposite direction - long time COBOL programmer, working on a PhD in info science.
That's great info, thanks! Yeah I did consider that, I like to think of myself as a very adaptable person but companies might not be interested in the investment. I am familiar with those languages, but in a very basic way, very utilitarian, so I have a lot to learn in the other aspects. What languages would you advise me to get into/better at then? Python I'd assume would be interesting, anything else?
Python &amp; R for anything related to machine learning or statistics. Maybe pick up a visualization tool like Tableau.
&gt;Python &amp; R for anything related to machine learning or statistics. No, please, anything but R!! I've been traumatized by its syntax and function names a long time ago haha
Is there a way to break into the COBOL programming world besides a business spending the time to familiarize you with these things?
Yes, I worked for a company for many years on the operations side of things maintaining JCL and such. You need to have some understanding of something in the realm of COBOL. With all of the old programmers getting ready for retirement a lot of companies will start taking employees on with little experience.
COBOL programmer here. Can confirm, I work for an insurance company. Pick one insurance company, pick any that have any longevity. You’ll find cobol. No way we can rewrite grandmas grandfathered rules for her policy that are 30 yrs old- multiply the idea by millions, and then think of more than 1 line of business. Replicate that in java? You’ll be there a while 😁
Good old 3270 emulator... Yeah lame ...
I love this editor. ISPF is good enough for me. The only time I use idz is when i want a graphical flow of a program.
If you can FTP the programs to a Windows box, you can use [CobTree](http://ynohoo.com/CobTree/index.html), an editor I created to make my own life easier.
I've been using vim for years now (and plain vi before that) for COBOL programming. It's not COBOL-dedicated, but it has syntax highlighting, window management, etc. I develop for a Unix system on remote servers, so ssh-ing and firing up vim is the quickest way for me, and works well for practically any client I'm using.
Ah, I don’t think so. It isn’t hard to train people to code cobol. The main issue I can see is if your programs are extremely convoluted and poorly documented. Otherwise no, there isn’t an issue with running cobol. Many companies do. It is extremely reliable. I intern at one now and we often write new stuff from take overs and integrating them into our system. But we have code running from the early 80’s today. There are certainly some drawbacks, but also some benefits. I’m not the best to explain seeing as I’m just an intern. But as long as you guys can integrate new programmers and don’t have a mess of a codebase, then I don’t see the problem. Younger companies can have an advantage but migrating to newer systems can be such a massive project that is incredibly likely to fail. So it’s more likely that you will keep running cobol and something else will kill your business not cobol itself.
That’s what I’m using. My first internship and I was back so far. I do like some things but it’s such a shock from the IDE’s we use in school.
Hi there, I'm a software engineer at a small-to-medium sized bank data processing company that has been in operation since the late sixties. A large part of our software has run on COBOL during that time, and when I was hired in 2007, it was to write and maintain COBOL-74 code. What u/awhaling said is correct, it's easy to train people on COBOL. I had no experience, and within a week or so I was writing code. The truth is, no programming tools are hard to learn for someone with the right mindset, but that isn't to say that sticking with COBOL doesn't have its problems. I think the main problem with COBOL today is that it isn't taught very much, or very well anymore. As I said, I didn't know any of it before coming to the company I work for, but from what the other guys on my team who had exposure to COBOL in college, the way the professors taught didn't match up with the way the real code was created. This leads to clunky, inefficient code in programs so large that the programmers don't have time to maintain it properly, and can only make the code larger and clunkier. I've recently been moved to a project that uses c# and the code there is much easier to maintain, although that's not necessiarly a fair judgement as its only five years old. Other problems arise when dealing with the distributers of mainframe technology. I won't name any names, but there are a few that may be out of business soon, and that could leave a few of these companies in serious trouble. To sum up, lack of interest in new people not wanting to learn COBOL, the way COBOL is taught vs how it is actually used, the size and disorganization of many large-scale COBOL applications, and older companies that manage these technologies going under may pose serious issues for these companies in the upcoming years. Bonus issue: Many of the original programmers for these large-scale programs, well most actually, have retired, or are about to retire, leaving a severe knowledge-deficit at these companies. I remember when our two senior guys retired, bugs started to increase significantly.
I work for a financial services company in the UK and work with COBOL everyday. As others have said, the drawbacks are mainly lack of developers and teaching. I've had to learn by doing for the past 20 months and I'm just now getting to the point where I can tackle rewriting programs. The COBOL still exists purely because it would be far too expensive to replace it all. (We have hundreds of programs running)
Nearly all legacy bank/insurance in France work with cobol , And a lot of other business too ( commercial chains, car constructor etc.) It is an easy languageto learn, it is not technically complicated, it is not made for 3d rendering, or video games etc, it is management computer. The complexity comes from the architecture in place at your shop and how to adapt it for the new project/task.
I have been programming in COBOL for 31 years. In my experience, no matter what the language, companies want people that understand how the business works. I had a professor in college tell us that languages and operating systems will change - you need to understand what it is you are trying to accomplish.
Welcome to every article about COBOL dying for the last 10 years.
I think Microfocus offers either Eclipse or Visual Studio for VisualCobol I've tried it out briefly and it seemed really good. You might well have a hard time convincing the older developers of its merits though (as we did here). Personally I just use Visual Studio Code to write my Cobol (not the same thing as Microsoft Visual Studio) It's not an IDE, just a free, fancy text editor, but it has a Cobol plugin and lot of the formatting and auto fill options of an IDE.
Yeah, we've tried the same. One guy is positive and the rest are negative. How do you get your programs onto the Mainframe?
Grace Hopper never needed certification. (ツ)
Our COBOL is running on a Linux box not a mainframe. The guys that still use VI just edit straight on the box and I FTP them back and forth to my PC. We badly need proper version control and a modern ide but there isn't much appetite for it unfortunately.
I feel you. We have a sort of version control, and because of that the old guys are sceptical to all new IDEs because: "But our version control is working and we don't know how this new thing will handle it and we don't want to put in the work."
That's not the case here ;) It is simply something cool to have on your LinkedIn/CV I think + Something cool to do with your spare time so why not !?
Seems odd that they'd want a certification. Maybe just buy some books?
 They don't "want". They just have a budget available if I want a course etc :)
A basic gtihub project is all that you'd need to verify it on your CV. No need to jump through hoops you don't have to.
What kind of projects/simple algorithms woul you suggest? ++ Variations of Murach's book?
It's been 20 years since I encountered a Recruitment Agency that specialised beyond grepping online CVs for keywords. Get your CV online, and let the COBOL search find you!
are you looking for a COBOL job? if so, where in the UK are you?
Course has been deleted. Got any alternatives?
Would you say it's at all possible to get into COBOL programming as a career without certification? I've used C++ a bit and python day to day, i can use a few other languages, but it's always been a hobby, i've just started getting into open source development. I really want to get into COBOL and am kinda lost for a career path. Do you have any advice you could share?
I'm a noob here so excuse my ignorance but, why can you not use something like Git and openCOBOL? as far as i know openCOBOL can target whatever cobol compiler you use, making it not much more than a text editor with a build/run button, right? &amp;#x200B; PS: (Im 99.999999% sure this cannot be done but im asking in the interest of learning)
Damn. Both got removed :(
Welcome 🙂 The problem isn't that we can't use git. It's that the older and more senior coders don't want to use it and think it's unnecessary and no-one can persuade them otherwise. My work place is resistant to any kind of change unfortunately.
Unfortunately I'm literally just starting my IT career so I don't have any useful tips. I managed to get into the job I have through an apprenticeship so I just kinda accidentally ended up working with COBOL. I'd say learn the language and apply for jobs at companies that use COBOL and other technologies you're familiar with, that way you can try to transition into the COBOL stuff gradually. Sorry I can't be of more help.
It's help enough so thank you! It's always good to hear advice that doesn't involve "go back to square one and get yourself a CS degree". Thanks again!
I'm an idiot, I should be using a pointer. Right? Then I could set the address of a variable to the address of the pointer and set the variable to the value of the address of the glyph
I think I'm on the right track but getting segfaults or a grid of pointer addresses now so if anyone's got advice it'd be much appreciated
SET ADDRESS OF floorCol(row,col) TO ADDRESS OF glyphFloor but that seems to be totally against the entire idea of a table. &amp;#x200B; I don't know about GnuCOBOL , but IBM COBOL only allows SET ADDRESS of something when something is in the linkage section.
Thanks for this, it fixed two of my problems. effectively I'll need a table of pointers and then use SET floorcol(row,col) TO ADDRESS OF glyphfloor, and when combining my layers use MOVE to combine into a pic x table representing the combined gameboard since it looks like MOVE and CALL both pass the value of what the pointer points to, but DISPLAY doesn't. The idea is that I want to be able to handle multiple layers, and I figure having tables of pointers instead of actual characters would be slimmer overall. This way for each cell I just take the topmost pointer and that's the tile in that location, and there's only ever one full character-based/pic x table, the gameboard. Mostly this is a "can I do this?" type of project.
thank you, thank you, thank you! it works! I don't know if you're interested in seeing the abomination but if you are I could post it in pastebin and put a lin
Ancient COBaller here. Not sure what this product's goal is. But honestly its website is almost unreadable. For one, switch to a monospaced font for your code examples. Then I'll come back and take another look.