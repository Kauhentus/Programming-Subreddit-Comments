I doubt it matters much to us but if they had it would only had replaced the Node.js part with .NET Core + ASP.NET 5. Since Core doesn't have any non-web UI framework, the Chromium sandbox would still be needed.
awesome :)
Thanks for your helpful reply :)
Don't forget to update NuGet as well. Did you try to clean entries in web.configs as well?
I've always hesitated on WPF because the whole MVVM thing confuses me, and I don't want to do Winforms type code behind with WPF because that's the "incorrect" way to do it. I've tried numerous tutorials with MVVM and I get the basics, but I can never figure out how to implement current applications in that style. (Lots of old legacy code that just needs to be rewritten, honestly)
Excellent advice. Thank you very much I really appreciate your help. I'm going to do away with that and start focusing on actually releasing the site
Is it a code smell if the api of the service used in a controller closely matches your controller methods? e.g. Get/ bookmark -&gt; service.getAllBookmarks() GEt/ bookmark/:id -&gt; service.getBookmark(:id) etc.
I'm excited too! I got into C# like I got into PHP and Perl before that, because it was the language of the day. Now it seems like C# (or .NET in general) has caught its 2nd wind. Microsoft cultivated it into a powerful, stable language before they let it loose in the open/free world. I think that growing up sheltered as it was made it strong and solid. I am skeptical about how useful it will be on other platforms, but I am excited to find out.
I'd say that the only disadvantage to using WCF with MVC is that it requires a lot more work to do it that way. It sounds like they have already done most of that extra work for you, so why not? It gives you undefeatable scope at the layer boundary which will force you to only write decoupled code.
I feel like a little kid on christmas. This build is really something, I've been expecting just ton of azure stuff that doesn't concern me and more info on VS 2015 and new asp.net, but holy mother of god and all her wacky nephews - dockerized windows? free multiplatform editor with intellisense? windows 10 running basically everything everywhere? I did not expect that. I'm also impressed by the progress they are having with holo lens, especially the fact that it's standalone unit and not just peripheral to a computer.
One thing to note is that the DropShadowEffect you use on floating buttons and whatnot is horrible when it comes to performance on multiple items. It crippled my app when I applied it to most buttons. Had to disable it. There is SystemDropShadowChrome that could be used but I don't know how portable that class is.
I've been up to my eyeballs in project work this week, anybody got a reference for dockerized windows? I've been waiting for that.
You can always just work on the new pieces of the application using MVVM and WPF. [ElementHost](https://msdn.microsoft.com/en-us/library/system.windows.forms.integration.elementhost%28v=vs.110%29.aspx) is designed to let you do just that - host WPF content in a Windows Forms application.
Me watching the build video is like Mcconaughey watching the star wars trailer. 
I'm in SFO waiting for my plane back home. Build was great, and I feel like I picked a great one for my first. Got to try out HoloLens and while it wasn't perfect, it represents a dramatic first step. I'm surprisingly drained after three days of talks, but there is a lot of good stuff happening. It's a great time to be a developer, and an even better time to be in Microsoft's corner.
If I recall, that bit was to get iOS and Android developers onto windows phone.
Ok, will bear that in mind. Currently investigating sine other options for the shadows on Windows Universal which might push me in a different direction on WPF.
Can I use Azure services for small application for free ? 
Frankly I feel they found a *better* way than before. I used to feel the company had rather horrible business practices but had awesome development tools. Now the dev tools are even better and the company has become a company I want to support.
There have been a number of releases of Entity Framework. [As far as I know, EF6 *does* run on .NET 4](https://msdn.microsoft.com/en-us/data/jj574253.aspx), but even if I'm wrong, you can always fall back to a previous version. I'm currently one of the lead developers on a legacy project that targets .NET 4 due to contractual obligations to support Windows XP users. Our software remains using EF4 due to some "clever" implementation details (read: bad code), compounded by a general apprehension by upper-management to make any changes to the underlying data access code. In short, it *should* work, but even if it doesn't, you can simply use a previous version of Entity Framework.
The error and the fact that you can't find where users are being stored leads me to believe that the users table never got created. Do you have the default identity tables like AspNetUser? Did you create a migration and update the database after you added the identity stuff and your MyUser class? What does your Startup.Auth.config look like? My wild-ass-guess is that Startup.Auth.config configures a different context for Identity to use that probably points at some other database, so when you try to use your TomahawkContext it can't find the Users table. EDIT: In your controller, try getting the user manager like this instead: `manager = HttpContext.GetOwinContext().GetUserManager&lt;UserManager&gt;();` That should ensure you're working against the same context that Identity is.
It's an extension method, gimme a sec and I'll find the namespace.
I think in fact I'll just add more colour options for the flat button style. Not in the guidelines but these would be for a specific case where you have lots of buttons and are managing performance. Of course I can't drop the shadows on the main styles; if I did this it wouldn't be Material Design. Like I said I am investigating a different way to render the shadows on Universal, so may come back and change the shadow mechanism in WPF at some point. If you want to chat then drop by the [Gitter room](https://gitter.im/ButchersBoy/MaterialDesignInXamlToolkit)
The point really is to port existing apps more easily and so lower the barrier for companies to make their apps on Android/IOS run **also** on windows phone. If someone's going to develop for WP specifically he will use C#.
`Cannot implicitly convert type 'Tomahawk.ApplicationUserManager' to 'Microsoft_AspNet.Identity.UesrManager&lt;Tomahawk.Models.MyUser&gt;'` I understand that it's doing that because: private UserManager&lt;MyUser&gt; manager; public MessagesController() { db = new TomahawkContext(); //manager = new UserManager&lt;MyUser&gt;(new UserStore&lt;MyUser&gt;(db)); manager = HttpContext.GetOwinContext().GetUserManager&lt;ApplicationUserManager&gt;(); } So I'm curious, should I should define manager as type UserManager&lt;MyUser&gt; ? Seems like I'd still need to, though.
I'm still trying to 'get' docker.. as far as I understand its like a self contained OS and apps ready to shut down and start up as needed? 
right for me I can only think of one app that is on iOS that I wish was on WP (Autodesk Catch 123D) so if that helps great.. I don't understand people who feel like all sort of programs are missing for WP.. but then again I am a minimalist and how less than 25 apps total on my phone
maybe this is what happens when you put a tech person in charge? 
The application you are Codding is!?. I suppose is a web app, then in VS2010 you can use the EF6.1.3 but be aware of all the assemblies you need to deploy on the testing and production servers. Some parts of the EF6 are based on the Sql server feature pack 2012. And remember if have assembly problems use fusion log. https://www.microsoft.com/en-us/download/details.aspx?id=29065 https://msdn.microsoft.com/en-us/library/e74a18c4%28v=vs.110%29.aspx
Ef 6 works on .net 4.0 but I've found the .net 4.0 version to be more buggy, but YMMV...
A company I worked for did something similar to #1. We had a legacy service call tracking system that only worked with a local database, but set up Terminal Services so that remote workers could access it. It was perfectly workable in that situation, but I wouldn't recommend it for a new application. If you're more comfortable with WPF, you could do a mix of #2 and #3 by implementing a simple REST API with ASP.NET WebAPI or ASP.NET vNext that your desktop application calls out to. You could then install the API endpoint on a server that the company owns (if they would allow it) and avoid the Azure costs.
Are you sure they are limiting this to Mobile? I got the impression one could extend the app to a universal app hence working on desktop too? 
I would go with MVC. That way its platform independent. Look at bootstrap as well, it could even be mobile friendly for a little bit of work Azure hosting isn't bad. If the company has servers you could host it on one of them as well. 
Do they have other developers? If so ask them about it as they will have to maintain it after you're gone. My vote is an MVC web app with authorizations of some sort. It will be the most bang for the buck. Plus you can use bootstrap or foundation on the UI and make It usable on their phones! Azure is cool but can get pricey but there are other windows hosts out there. Also remember to take proper precaution with the data! It sounds like there maybe financial info in the app and you'll want to make sure to protect that! 
MVC, and you shouldn't have to pay for hosting yourself if this is a summer job. Also, this company should hire an IT guy or otherwise get someone to set up a VPN server so that you don't have to worry about how employees will be accessing company resources in general (not just this application) securely while at home or outside of the office. This is not a problem you should have to solve really.
Both ASP.NET MVC and WPF would work for your scenario. The thing you have to consider is the knowledge you have on both technologies, I would go with which one I feel better working with. Another thing you mentioned is that security could be "tricky" by using a MySQL database, I don't know what you mean by that, but MySQL is safe just enough for what you planning to do. And even tough you decided to use ASP.NET MVC you probably would want to use a database too. I would say that WPF is better for this scenario, but only if the Azure hosting is a budget problem for you. So if the company is whiling to pay for it then you should definitely go with ASP.NET MVC. But it doesn't mean you wouldn't have expenses with the hosting of the database for the WPF application as well as it still have to be hosted somewhere, as so as the database for the ASP.NET application. 
If you do a WPF application it will be totally insecure unless you make it a thin client and then have a WebAPI or WCF or whatever thing it talks to. MVC is going to be easier.
Why not go by line and look for lines that match `\s*GO\s*`?
I'm new to docker, so some of these claims might not be precise, but basically you are right. It uses virtualization that shares kernel and resources with host, so it's cheap to isolate all apps - you typically run one app per container. It also uses copy on write filesystem, so it's really quick to create new containers and saves disk space. Another thing that's awesome is that you create "layers" one over another, so say you have some apps that run with similar dependencies, so you will use (meaning someone already created it and you don't have to install anything, it will just get downloaded from docker registry) some base OS image (for example the new windows core), install your dependencies (for example dnx) and save that as new image. Now you can reuse this image for each of your apps without installing os / dnx on the server again. I'd really recommend getting to know docker, for me as someone who deploys new or updated apps frequently while managing multiple environments for them this is a game changer.
My very first experience with programming was with VBA in Excel 97, when I was 7 or 8 years old (I'm 24 now). My uncle showed me how to build forms and write Excel macros and we built some very basic games together. I moved on to VB3 then VB6, and stuck with that for a while. Once I got internet access I became more interested in web technologies and started using HTML and PHP. At university I learnt a bunch of programming languages, but especially developed an interest in C#. I used C#, ASP.NET WebForms and ASP.NET MVC at my first "real" job. I also had to deal with old legacy classic ASP VBScript code. Eventually I decided I liked working in front end development more than back end, and started focusing on JavaScript. These I'm writing JavaScript during my day job (working on one of the largest React and Flux apps in the world), and C# and occasionally PHP for side projects. I really love C# as a programming language and the .NET platform is fantastic, I just prefer it as a fun side thing rather than being my day job :P
OK, starting in 1982 ... * 1982 -&gt; BASIC / assembly - Dragon 32 / C64 * 1988 -&gt; Powerhouse, Fortran, TurboImage, MPE, HP3000, QuickBasic * 1991 -&gt; Prime Information, &amp;PACE, PrimeOS * 1993 -&gt; Universe, Unix (DG-UX) * 1995 -&gt; Universe, Windows NT / AIX * 1998 -&gt; Linux * 2000 -&gt; ASP (VBScript), JavaScript, Access, MS SQL Server, Html / CSS * 2002 -&gt; ASP.NET (C#) * 2005 -&gt; PHP, MySQL, Joomla, Wordpress * 2009 -&gt; PHP, PostgreSQL, Drupal, SQLite * 2012 -&gt; Node.js, PostgreSQL, "NoSQL" (IndexDB, RethinkDB, MongoDB) * 2014 -&gt; Haskell (Snap Framework), PostgreSQL sprinkled in there is a bit of C, C++ and Python + a few other things I've forgotten about :) 
+1 on this. I was going to suggest if he's more comfortable with native platforms to try a desktop app talking to WebAPI.
In order: College: Java, C College internships: ASP Real world: VB.Net &amp; Javascript, C#, VB6 (lots of migration work), jQuery
- Turbo Pascal - Modula 2 - C - C++ - Delphi - Python - JavaScript - C# - Kotlin - F#
- Basic (BBC micro) - Forth - Pascal - COMAL - 6502 assembly - Modula 2 - OL (an obscure functional programming language) - C - Quick Basic - AS/400 Basic - Visual Basic - C++ - COM/DCOM - Python - Java - C#/.NET - WPF
The challenge with a desktop application is how will it access the database. The only safe way would be through a service call of some kind (WCF/WebAPI) so the mechanics of database connectivity are obfuscated from the client. In other words, don't put a connection string in your app.config, or hard code it into your application. Someone could take that and compromise your database. With a Web Application your concerns will be how to limit access. If you expose it to the internet you should consider IP restrictions in addition to traditional authentication mechanisms. As others have mentioned, you can also keep the site on your intranet and require users to set up a VPN to access it. Either way, you might consider a SOA where data is accessed via a service and your clients (Web or Desktop) invoke methods on that service.
* HTML when I was 12 * mIRC script when I was 12 * VB 6 when I was a teen * PHP when I was a teen and beyond * Java when I got to college * Assembly, C, C++ in college * C# when I got a job * ASP.NET when I got a job
Pascal Assembly COBOL C VB Java JavaScript C# Node 
There is a way to edit the config of default project, can't remember how but should be on Google.
I guess it started back in high school I hand coded some HTML. CSS was the brand new thing, so that's as far as it went. In architecture school there was a 3D modeling package that I used a lot. It had a VBScript engine, so that was the first thing I learned. That same 3D package had another component that came out that supported both .Net and Python scripting. I transitioned to VB.Net from there. Some time in the middle I tried my hand at both Ruby and Python. Neither really stuck. Then I actually started developing plugins for that 3D software, so I jumped into Visual Studio. I also collaborated on a project with a few other developers, so I learned C# for that project. I also started to learn WinForms at the time. Also had to create an installer that was written in Delphi. Finally got my first professional job as a developer doing C#, and had to get up to speed with both SQL and other parts of the .Net Framework (ADO.Net, data binding, etc). Learned a lot of SQL very quick, not just with SQL server, but with a number of other DBMSs. Also did a fair amount of WCF work as well. Did a couple proof of concepts in WPF and Silverlight. Got used to XAML. Switched jobs into a much more web focused role, which brought on Web Forms and a fair amount of Javascript. Switched jobs again to get into more MVC. I had done a little on the side along with some Web API for minor things.
C -&gt; C++ -&gt; Java -&gt; C# -&gt; Ruby -&gt; JavaScript -&gt; Clojure and ClojureScript
Because it will have the database connection information embedded with the app, so there is no meaningful user access control. Anyone can just use the credentials to access the database directly. E: I don't know who's downvoting this but uh... do some reading before starting on your next application.
Decompiling it or sniffing network traffic to find it are both absolutely trivial. If you put it in the app.config you don't even have to do that because it's already human readable.
html css php webforms javascript mvc web api
Basic (1982 ish? Guessing really... ZX81!) Basic (and learning roughly how machine code worked....Acorn Electron / bbc micro) More basic and a TINY bit of assembly ( Atari st era) Qbasic (pc-era , college courses etc) Visual basic Cobol C++ (university era) More visual basic Java Asp/vbscript , sql etc etc (first proper web dev job - 1996 iirc) Javascript Actionscript More Asp/vbscript C# 
It is. Iirc by RPG IV (may have been III) they would no longer force you to run in that event loop, you could have a single-pass "main" function like any other normal language and the vast majority of the RPG that I coded was written this way (and when it wasn't 9 times out of 10 it was a report). 
* Basic (Apple ][, Timex Sinclair, C-64) (1983) * Apple Pascal and Turbo Pascal (1984) * Vax Assembly (1986) * Turbo C and 8086 Assembly (1988) * HP Chemstation (1990) * Turbo C++ (1992) * HTML / CGI (1996) * DEC Unix / Motif (1995) * MS VC++ / MFC (1997) * ATL / ATL Server / WTL (1999) * C# / .NET / WinForms (2001) * ASP.NET (2002) * ADO / SQL Server (2003) * WPF / WCF / WWF (2007) * Python (2009) * Java / Android (2010) * xCode / iOS (2011) * Javascript (2012) * Node.js (2014) 
* BASIC * Pascal * Modula/2 * Assembler * C * C++ * JavaScript * Fortran 77 (the horror) * Java * C# (still my primary) * Ruby 
If its just dev/qa/prd difference just use config transforms to switch the connection strings. Then when you change the build the connection strings will change. If on 2013 I believe transforms are built in, older versions download slow cheetah. Although, if debugging through VS I think that will only work with web apps. I don't think transforms get applied for console apps/unit test when debugging. They will when deploying code though.
I would suggest you create a build config for each environment and use configuration transforms on your environment specific configurations. If it's a web application that is built in to Visual Studio. If it's not, install Slow Cheetah.
Ok, I agree with you that the application could be decompiled and that the database connection information could be easily retrieved from its source code later on, but you also mentioned that network sniffing could be used to retrieve the data, I'd to discuss something about it. I'm not sure but couldn't that be equally possible if we we're referring to a web applications? Because the HTTP messages can still be intercepted. Even if it's not sending database connection information, it is still sending messages that will perform some sort of operation with the application. I just think you're "over reacting" a bit on those security issues with desktop applications. Btw, I'm not the down voter. ;) 
VB6 C++ JavaScript Java C# -- I use this and javascript only now. Python Ruby
Thanks everyone for the info. It sounds like will go the remote web api route. Is anyone aware of any decent tutorials that specifically cover having a separate web api and mvc app? We will likely have them on separate servers.
This is kind of what I was hoping for when I first heard about visual studio online. That and multi user code editing. Like they have for office online.
Since you are already familiar with OOP concepts, most of the resources you find online will be too basic (like the [canonical training resource](https://channel9.msdn.com/Series/C-Sharp-Fundamentals-Development-for-Absolute-Beginners)) but try the following: [C# Yellow Book](http://www.robmiles.com/c-yellow-book/) [Essential C# 5.0](http://www.amazon.com/Essential-Edition-Microsoft-Windows-Development/dp/0321877586) [C# In Depth](http://www.manning.com/skeet3/) [CLR via C#](https://www.microsoft.com/learning/en-us/book.aspx?id=15528&amp;locale=en-us) [C# in a Nutshell](http://www.albahari.com/nutshell/) If you prefer videos over book, try [Pluralsight](http://www.pluralsight.com/). They have a large library that should cover almost everything you want to know about C# and .NET. As for tools, if you want to stick to Linux, Mono (and .NET Core) should be fine. Take a look at [OmniSharp](http://www.omnisharp.net/) for tooling and plug-ins for your favorite editors (Sublime, Atom, Vim, etc.). For Windows, Microsoft recently made [Visual Studio Community](https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx) free for everyone, so that'll be your best bet. 
If you want to do web development in .NET like you do in PHP then I suggest you learn ASP.NET in a Windows environment. There is a lot more to it then just the C# language and the .NET Framework itself. You usually have to deal with IIS configuration and SQL Server. For example, there is the Entity Framework and Windows Communication Foundation which probably don't exist for Mono. There is no telling what a .NET shop would expect you to know, probably something to throw a curve ball to even the most experienced .NET web developer. Unless you are only casually interested in .NET, in which case you should just learn the basics.
It could be in a multiline comment.....?
Have you ever heard about commands? They should be used for enable/disable behaviour not dependency properties.
Here is what I've done for my two web sites. I have one shared DB and there is a shred piece of data across two sites. I have developed a WCF service to do all the CRUD operations, both sites consume that service. So, when change occurs in DB, I need to update WCF and then update service references in both sites. Probably it is an overkill, a small shared DLL would do the same, but I did that to get some experience on my own. On a daily basis, my job requires me to consume WCF, not to write it. I didn't have any problems with WCF deployment - I host it as a separate app under sub-domain. You could do the same using REST API instead of WCF. If there is a potential, that your apps will grow, then having a service/API (WCF or REST) makes sense. It is hard to argue with "this is what we do" when someone is not open to new ideas and solutions.
If you haven't written much code yet, I would recommend using Visual Studio Code on your preferred dev environment and follow a tutorial on how to create an asp.net 5 web app with it. Booting up windows and installing the big Visual Studio for an hour that litters your system with magic components may cause hickups. And the VS UI is not for the faint of heart either. I think it's a bit more forgiving when someone is sitting next to you and holding your hand for the first time.
well, it's quite easy because most of the changes happened when I changed jobs. 
Any useful guides you can point me to on setting up a local IIS? Last time I did that was on Server 2003 so you can imagine how long its been, hah. I'm fairly comfortable with Apache and Nginx but I know IIS isn't the same as those really.
REST and JSON are standards too though?
Yes, I imagine there is much in the Windows platform ecosystem which cannot be replicated in Mono and Linux.
Do you have any experience w/ Mono? I'm intrigued by the idea of being able to write mobile apps with it that work for OSX/iPhone/Android/Windows Phone, but not sure if its actually working, if it has performance hits like using Python for Android, etc...
Can you give me an example of that? Sounds like .NET is sort of a rolling-release Linux distro.
You can have a constructor for your custom context in another file (so it doesn't get rewritten on model update) and call base constructor from it: public partial class MyDbContext { public MyDbContext(string nameOrConnString) : base(nameOrConnString) { } } Then in your code, you can create a factory which creates your context using correct connection string: #if DEBUG return new MyDbContext("name=MyDebugConnString"); #else return new MyDbContext("name=MyOtherConnString"); #endif However, I prefer to have connection strings and application settings in separate files (owned by the environment). 1. Put following into your web.config/app.config: &lt;connectionStrings configSource="ConnectionStrings.config" /&gt; &lt;appSettings configSource="AppSettings.config" /&gt; 2. Create ConnectionStrings.config and AppSettings.config files for each environment and put those nodes inside. See the examples here: https://github.com/anilmujagic/DeploymentCockpit/blob/master/src/DeploymentCockpit.Server/ConnectionStrings.config https://github.com/anilmujagic/DeploymentCockpit/blob/master/src/DeploymentCockpit.Server/AppSettings.config 3. When deploying the application package, same web.config is deployed to all environments, but ConnectionStrings.config and AppSettings.config should be taken according to the target environment.
For LINQ programming have you seen [LINQPad](https://www.linqpad.net/)? It's a great tool for learning LINQ, trying out and testing LINQ Expressions and just general use a lightweight C# scratchpad that lets you write little programs to check out how something will work or even to write quick little automation tasks in. I use it a lot for all of the above. I can't recommend it highly enough - it really is a great little tool. It now has a built in debugger too as of the current version. I bought licenses for every member of my team and we all use it a lot... Edit: IMO LINQ is one of .Net's killer features - I actually wrote a domain specific query language using the [Irony EBNF Lexington and parsing toolkit](http://irony.codeplex.com/wikipage?title=expression%20grammar%20sample&amp;referringTitle=Home) that takes simple domain specific query terms from users and compiles to LINQ Expressions I can then execute against LINQ to NHibernate. It makes for a great search feature for our systems' users without stupid, ugly query forms. This site looks really handy for those learning the intricacies of LINQ, which can seem difficult depending on how far along the learning curve you are. Anything that helps you learn how to get the most out of LINQ is valuable as the effort put into learning how to use it will repay itself hundreds of times over! Good work OP.
Would you prefer them to stay with the antiquated and terrible web forms? They are evolving to keep up with the times. 
They are changing the architecture to be trendy. That is a terrible idea.
Are you in Europe? That Average() of 10, 10, 11, 11 being 10,5 (not 10.5) threw me off for a minute. lol And First(), is that answer right?
Suggestion: Dim letters = " World".ToCharArray
Some terminology nitpicking: the distinction between "Lambda" and "LINQ" is incorrect. LINQ is the feature as a whole. In order to write queries you either use *Expression syntax* or *Query syntax*. Expression syntax uses lambdas. [This might not be what you're intending](http://linqsamples.com/linq-to-objects/element/First-strings-lambda-vb). Otherwise an interesting site! 
That's what my instinct was telling me - thanks for the clarification, particularly on LINQ itself. 
&gt; Is this just a personal preference or is there a functional reason why LINQ would be favored? Not a *functional* difference, but in terms of readability there are instances where one syntax will be much more expressive or readable than the other. Nested selects into groups, for example, is one area where the query/method syntax (from x in y select...), will generally lead to far less noisy code. Complex query logic, code smell that it is, will tend to fit more nicely into the query syntax also. Quick alterations of lists, OTOH, look much neater with the expression syntax. IMO the weaknesses of the query syntax are most apparent when you're engaging in secondary manipulation like .Take or .SkipBy, leading to lots of line noise for dubious benefit. There are also a handful of Linq functions that aren't present in the query syntax, so I tend to use the expression syntax as a 'default' and query for specific cases.
Great, thanks for the sanity check!
EF and WCF exist in Mono, of course. Why would they miss two core elements out? Mono isn't just some bunch of a few classes and a compiler.
Let him dictate the features and the priority. Prioritization alone will force them to think where the most value is. Feature A might be a pain in the arse and take ages to develop but it might be worth it. Feature B might require the same but not deliver any value. Let the development team control the time line though, let them pay back the technical debt as they see fit. If the technical debt isn't being addressed then your in a death spiral, either pull out of it or eject.
Thanks a lot for all the nice feedback, and great suggestions for site improvement. Some is already fixed by now, and the rest has been added on my todo list.
Well, look, raise your objections and make your case. Perhaps he wasn't aware of the issues you're concerned about and if you explained them he would find it persuasive (certainly I have seen this happen). If he isn't convinced, hey, who's signing the paychecks? You did your honest best to persuade him. If you think he's asking you to do something totally insane you might want to start looking elsewhere.
Works on Chrome Android fine. Try loading the page in incognito mode, it might be a dodgy extension or fake your user agent.
I've not found a .Net T-SQL real parser that exposes the code as a tree or whatnot.
Works fine here on Chrome 42 (PC/Win 8.1)
Hmmm. I agree with your nitpick about Lambda and LINQ being incorrect names for the these two flavors of LINQ syntax. But I understand them to be query syntax and method syntax (not expression syntax). [Query Syntax and Method Syntax in LINQ (C#)](https://msdn.microsoft.com/en-us/library/bb397947.aspx) As for expression, I have seen query syntax referred to as query expression syntax. [Query Expression Syntax Examples](https://msdn.microsoft.com/en-us/library/bb386943\(v=vs.110\).aspx) Either way, LINQ is awesome, and I appreciate OP's efforts in creating this resource, as well as any effort by people like you to improve it.
As all Windows since Vista, the full and latest .NET framework is delivered with it. So you'll have 4.6 with Win 10.
You can never win those sort of arguments, you can only lead by example.
That's what I was thinking actually. Because the MVC model is already ingrained in my head so it would just be trying to get it to work w/ a different language. I'll probably just make a basic/small web service that spits out some random JSON data or whatnot and go from there.
Lambda fruits.First(); LINQ (from f in fruits select f) .First(); These are not equivalent. The second expression equates to: fruits.Select(x =&gt; x).First(); edit: Ok, what? Join // Using a Query Syntax it goes... var result = (from n in warmCountries select n) .Join(europeanCountries, warm =&gt; warm, european =&gt; european, (warm, european) =&gt; warm); That... That is not even Query Syntax? This is Query Syntax. var result = from warm in warmCountries join european in europeanCountries on warm equals european select warm; edit2: This applies for every sample.... Am I seeing the wrong site or something? Because this is not Query Syntax at all. This is bad examples.
Proof: (from f in fruits select f).First(); IL_0022: ldsfld UserQuery.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 IL_0027: brtrue.s IL_003A IL_0029: ldnull IL_002A: ldftn b__0 IL_0030: newobj System.Func&lt;System.String,System.String&gt;..ctor IL_0035: stsfld UserQuery.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 IL_003A: ldsfld UserQuery.CS$&lt;&gt;9__CachedAnonymousMethodDelegate1 IL_003F: call System.Linq.Enumerable.Select IL_0044: call System.Linq.Enumerable.First IL_0049: pop fruits.First() IL_0022: call System.Linq.Enumerable.First IL_0027: pop 
Are you talking about the universal app platform for windows 10? I'm not sure about the answer to your question, but the [windows dev center](https://dev.windows.com/en-US/develop/build-apps-shared-code) has some links to get started with using it. Maybe those would make it more clear as to it's limitations, if any, when using .NET.
Works on the latest Chrome for OSX...
* DBase 3, Dbase 4 * Paradox * Pascal for Dos * Visual Basic 3 for windows * VB 4, 5, 6 * perl * HTML/XHTML * Javascript * ASP.NET 1.0 * ASP.NET / C# 2.0 - 4.5 * ASP.NET - Web Services / WCF * MVC / MVP 
I'd try finding some stuff on PluralSight and Microsoft's Channel 9. I just started working with EF and ASP.NET this week and it took me a while to get the hang of it, but I feel comfortable now. The course is free on ASP.NET: http://www.asp.net/mvc/pluralsight
Added
I recommend a VM for trying it out. You can get Windows 10 preview and VS 2015 RC for free right now and pless around with the very best :) Support for Linux should be improving in the next few years.
I checked out plural sight when I first started MVC but I haven't went through any of the EF courses. I'll have to check them out, thanks!
Thanks, I'll definitely be checking these out tonight.
Does using Windows really make a difference in the market? I mean, if I learn Mono can't I market it as .NET on my resume and explain in interviews that I use Mono?
You could use the seed method as a means to put that data in place. THe nice thing about the seed method is that it will be triggered when the database is created, so if you are planning on blowing your DB away on a regular basis during development, it can be handy. Another option is to write a stored procedure that would insert all the archive data you need, I feel like this is a more commonplace method of accomplishing that, and it allows you to add entries to the DB without having to compile a program to make changes. I believe you can also run a stored procedure as part of the seed process, but I do not know how to do that off the top of my head. One very powerful feature of EF is the ability to do database migrations, which allow you to have EF track the changes that occur to your database's schema so that you can change the schema of your database to match a different point in time.
Gen0 collections are rarely a problem as collecting Gen0 is very efficient. Have you decided what is causing the free memory to jump every hour. Are you recycling the process that often (restarting IIS)? If not check that this isn't being caused by your Gen2 collections which are more or less hidden by the scale of the graph. If your Gen2 collections are freeing multiple GB then you probably have some problem code (unintentionally long lived objects). If this is the case try dumping the process when memory gets low and then looking at the dump to see what is using the memory (sometimes - and especially if it is your code- this is enough to figure out where you made a mistake or poor assumption)
The level of ignorance about .NET on these Microsoft related reddits is stunning. I can't fathom for the life of me why Microsoft and the MVP core don't bother to invest time here. This is the place to be pimping the best damn developer stack in history. WPF applications that are "Universal Apps" compile to native. This is just how it is. http://blogs.windows.com/buildingapps/2015/04/30/whats-new-in-visual-studio-tools-for-universal-windows-apps/
And for what it is worth... When one considers how Universal apps work it seems perfectly viable to see Cortana show up on non windows platforms. In fact it seems like they would be foolish to not ship them for alternative platforms. 
I've had to do this in the past http://stackoverflow.com/a/21073804/476309
How many requests and/or sessions are being created per whatever timing interval? That will help you deduce how many objects are being created and may lead you to see that the system is behaving normally. Due the stateless nature of ASP lots of things are created with each request so lots of Gen 0 collections is normal. [This article on analyzing GC](https://msdn.microsoft.com/en-us/magazine/ee309515.aspx) may be helpful.
What's wrong with using one of those tools? They work off XML sitemaps, analytics info and more. Asp.net sites can generate that data just like any other site.
Save yourself a headache and use sql server express. Localdb isn't for production and has limitations.
I second the nested repeater. They can get somewhat messy, especially at first; but eventually you get used to it.
I think you need to use the genetic version of .Entity. See the great documentation at https://msdn.microsoft.com/en-ca/data/jj591617 For your case, you want this instead: modelBuilder.Entity&lt;Person&gt;(); If you plan to create multiple mappings (I usually do) this is a good coding idiom: var personMap = modelBuilder.Entity&lt;Person&gt;(); personMap.HasKey(x=&gt; x.Id); personMap.Property(x =&gt; x.Name).HasMaxLength(500); and so on.
Many thanks. I've never heard of this. I'll look it up.
Thank you for the suggestion. 
I think you may be a little confused, have you tried to compile a WPF application to native code? According to this: http://forums.dotnetfoundation.org/t/will-wpf-be-able-to-compile-to-native-code-someday/600/6 it isn't likely.
I'd imagine that the order is "undefined" (but, most likely alphabetical). If you need to include files in specific order, you'll have to include them one by one (or ideally bundle them with gulp/grunt). It also depends on what framework you're using. For instance in case of angular order shouldn't matter for controllers / services.
Yes. Razor is newer and much, much nicer to work with.
Yes. Emitting DOM content is much simpler with Razor. Traditional ASP.Net syntax is clunky. Here's one of my favorite statements (we use KnockoutJS for view binding) viewModelInstance().model(ko.mapping.fromJS(@Html.Raw(Json.Encode(Model ?? new { }))));
Save yourself some pain, and focus on razor.
But no intellisense. They kinda dropped the ball on Razor IMO.
generic? And thanks. I'll start taking a look this.
Make sure you have all your usings in place (there's a web.config setting to automatically include given namespaces across all views). Also make sure the version of visual studio is compatible with the MVC version (for example 2013+ is incompatible with MVC version &lt;= 4)
Visual Studio a text editor?
The solution did work and the migration generated correctly. I'm having one issue when saveChanges is being called though. I'm getting the error Cannot insert explicit value for identity column in table 'Client' when IDENTITY_INSERT is set to OFF Had to look it up to see that this means its trying to insert a value into clientID but I don't have anywhere in my code where I'm explicitly doing that (as far as I can tell). Any ideas?
If it is a windows application then SQL Server Express would be overkill in most cases.
yes. razor. @Model.goodness 
Yes, you can fix this in your mappings or in how you create objects. I strongly recommend fixing your mappings. So when EF created your table, it created a Client.Id column as the primary key. Something like: CREATE TABLE Client (ID INT PRIMARY KEY, NAME VARCHAR(MAX)) Which, if you try to insert into it by writing your own SQL, means you have to provide the primary key value. But you almost certainly want identity insert so that the DB just uses the next available Id. You'd want your table created like this instead: CREATE TABLE Client (ID INT PRIMARY KEY IDENTITY, NAME VARCHAR(MAX)) To fix that with your mappings, change: personMap.HasKey(x =&gt; x.Id) to: personMap.HasKey(x =&gt; x.Id); personMap.Property(x =&gt; x.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity); Then re-generate your database and you should find that the Id column now has the SQL IDENTITY property. Inserts should work now.
The current trend from Microsoft goes away from previously supported knockout to angular. AngularJS 2 is build in TypeScript and will be final at the end of the year or so. The problem is, that it has very very many breaking changes and whole new methods and ways to do things. So you either have to develop with the unfinished angular 2 or rewrite a good chunk when it's finished. 
Are you experiencing any performance issues? Memory usage is not in itself an issue unless it causes some actual problems.
I'd offer that since you supply the library to the client the only shitter is a painless upgrade for you as a developer. Code written for JjQuery 1.4 still works when you supply jQuery 1.4.
I'm at Ignite and won the book 'Expert ASP.NET Web API 2 for MVC Developers' from the Apress booth. Its a pretty reasonable size and it reads like their previous ones so this might be a good option. 
I am not fluent in Web Api, but this is a good starting point : http://www.asp.net/web-api 
&gt; Is this normal for a release candidate? Yes.
Thank you!
My guess is that it is probably because of the new Roslyn compiler, which is completely rewritten in .NET instead of C++. It has impressive advantages such as automatic conversion between C# and VB.NET code, a rich API and is open source. The move to .NET is likely to cause an increase in memory usage.
The one thing Angular 1 has going for it is that it supports IE8.
Yes - Razor is LOVELY.
[Here](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api) is an introduction. [Here](http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/build-a-single-page-application-%28spa%29-with-aspnet-web-api-and-angularjs) is an example of putting it all together into an application.
I'm curious, why is Visual Studio *not* in the future?
I totally agree, the text editor path is much nicer for editing files quickly and when you know the resulting behavior. But there are some distinct advantages to using Visual Studio (or an IDE in general) that you can't find in text editors, no? Also what do you think of VS Code?
Razor, as opposed to...? Just plain HTML? How do you plan to post/load data on your views? Javascript?
What is a better alternative?
Generating a knockout vm from an MVC vm is pretty terrible though, they are seperate things.
I'd say you should be using a client side framework like knockout or angularjs for rendering dynamic html.
Ugh. That works? Gross. Guess I never even thought to try.
Not to be snarky, but this is C# documentation. ASP.NET is a web framework for .NET which can be used with most languages that .NET supports. I understand that beginners need different info than experienced devs, but the MSDN docs are intended as a reference not a tutorial for beginners.
You can say that about any framework
Indeed. That's why Microsoft has released a bunch of free ASP.NET Pluralsight tutorials. They get the neebies going, and the reference doc is there to dig deeper.
Dragablz is a fantastic. I hope you keep maintaining it.
I've been using React/Flux for some of the more recent stuff I've been working on. Bit of a learning curve but going back to some of the legacy Angular stuff at this point feels clunky and disorganized compared to it. 
To add to the snark, if MS released documentation that looks like it was built with FrontPage 98 I'm not sure anyone BUT beginners would take it seriously. That being said, the new documentation for ASP.NET vNext they are doing using spinx is looking much more promising than what is out there now http://docs.asp.net/en/latest/
Right click your project, click on Web, there's a box that says "use is express". Change it to local, specify a name and click "create virtual directory"
I hate to sound negative, but I got a webfroms project at work that needs maintaing (and we wrote it only like 6 moths ago - the idea to go with this tech was before I worked there). Fuck that shit. It's just outdated.
But but I have to handle to much in MVC /s
I haven't used it myself, but it sounds like the Windows Forms of web development. It's great to start with because it's easy to use, but then it quickly becomes a mess for any serious projects.
Understandable, I'll try and hunt down a more descriptive video for you. I've come across a few in the past, no telling if they're still there though. The basics are what I wrote above, just don't forget to do the enable-migrations, add-migration, and update-database pieces in the nuget package manager console in order to actually create the database (also be sure you're using the .data project, not the original or .data.model project, when in the console).
Poor unloved webforms, it's certainly had it's day. One the major reasons for it's bloating and the massive viewstates control was to emulate the experience of creating WinForms, and hide complexities like the http protocol. Now Http2 is an advertised feature, kinda defeats the purpose. The developers I feel sorry for the most, are SharePoint devs (Like me), who are going to be stuck in WebForms for a looooooong time to come.
I would most definitely NOT recommend learning server-side programming using Web Forms. 
Because that's not how the web works!
I think the most obvious reason is that it doesn't accurately reflect the state of developing modern web applications. Even if you have no connection to the interface at all, you're still ultimately talking about writing event-driven server side code rather than request/response based server-side code. That is, of course, assuming that you're working with codebehind files (webforms) or controllers (MVC). If you're writing business logic and/or data access layers as a means of learning I suppose you could argue that WebForms makes it easier to put together a web application quicky, but then why not simply use a console app if it's a learning project with no users? 
It hides too much from the user and gives people a seriously flawed view of how the web works. It was an ok idea 15 years ago when the web was simple documents and forms, but for today it no longer makes any sense. The sheer amount of WTFery (technical term) you have to go through to get AJAX working should send anyone running screaming for the hills.
Exactly. 
The whole entire view-state thing and all of the functionality it provides completely hides the whole entire client/server, request/response pattern inherent in web applications, because it has all of those events and stuff to make the web seem like it is stateful when it really is stateless.
Gonna be a bit before I can really go through stuff here, but this: &gt; Also knowing that no foreign keys or relationships are setup in my database, should I rethink my database first approach? You seem to have multiple foreign keys that aren't assigned as such. You can go through the diagram and establish foreign keys, but IMO it's simpler to code first foreign keys. Depends on what you prefer and what is easier for you, though. Also, I noticed this throughout your .xaml file: &gt; ItemsSource="{Binding} Question being, Binding to... what? I bind things in multiple ways depending on the purpose that day, but you can do it like this: &gt; {Binding ImgSource} ...where ImgSource is a fairly static codebehind uri property depending on user input, or &gt; {Binding Email, UpdateSourceTrigger=PropertyChanged} ...where Email is the same as ImgSource (well, it's a string object, so not a static uri property, but still), but I'm calling out that the property has changed and activating other stuff because the property changes on each keystroke. I could be off and have missed something else going on, and I'm still fairly new to WPF stuff, but that's something that caught my eye and so I wanted to direct attention to it.
Well that's the plan, make web development as quick and easy as windows development. Didn't quite work, but wasn't a total failure either. There is still a lot of benefit in cranking out internal websites using web forms (though probably not enough to justify it).
What about for hobbyists that just want basic form entry? I'm thinking web forms may still be useful to them for exactly the same reason why it is a bad idea for us.
1. Why not use MVC5? its not a huge divergence and its better. 2. Web forms to MVC is a pretty drastic change in design. Its going to take a while to learn, it took me a while, before i even started jumping into the JQuery and Ajax stuff. 3. A couple of tips that would have really helped me when starting out: a) No logic in the controller, use a manager class to handle that. b) No logic in the view models, these are strictly for passing data back from the controller to the view. its temping and its easy, but creates a gigantic mess later on.
That's what the razor web~~sites~~pages are for. http://www.asp.net/web-pages
I'm not talking about "simple" IntelliSense or anything related to editing code though. Yeah it's awesome being able to open up a file/project/solution whatever and edit it immediately. And I do that when I'm going to be doing something easy or menial (relatively speaking). But Visual Studio has so many advantages over text editors afaik. You get templates, debugging, automation of procedures like hooking up to a server/git, built-in NuGet support. I'm not saying any of this is impossible without Visual Studio, but you gotta admit where we stand right now VS is definitely something worth keeping in your tool belt, and probably will be for the foreseeable future as Microsoft seems to be doubling down on C#/.NET/Azure/{insert developer tool here}. Autocomplete is nice, but it's not why I use Visual Studio.
If it's a public API you're hitting why even bother with a server side solution? Just use a Javascript framework like angularjs and call the API from an angular factory and update the view. Unless there is some "value add" you're providing to the user by way of saved preferences or something but even that could be managed with cookies. 
Haven't used them really, but I know they are aimed toward beginners. Learning webforms has the downside of needing to learn the asp.net page life cycle. 
Not having to waste time using command line tools is definitely a great trade-off. It's not like the git is really that important, it was just an example. My company uses a different version control so I don't care one way or another. Like I said, just one of many examples. NuGet has hardly once let me down, and the small bugs that arise are worth the hassle. Also I don't think most. I've never heard a person say anything bad about NuGet. Most praise it and use it for easy internal package management. Also it's nice working in the 21st century with automated processes rather than manual tedium. Is it helpful to understand HOW to use git from the command line or how to compile a solution without hitting a build button? Yes. But if you've done in once, there's no need to do it again. It doesn't matter. Preferences aren't some right or wrong binary. Just Visual Studio isn't being replaced by recent developments in OmniSharp or VS Code. Just new tools to improve our lives. :) All I'm saying is the time saved for booting the software for development isn't the only measurement of "rival" software's future. I can save a lot of time in using VS instead of a text editor and when I can I will. 
I see people choosing Windows Forms for new projects frequently though.
The funny thing is it's easy to fall into this trap but then you end up spending ages trying to understand all the magic.
This won't be especially helpful to your current situation, but if you want to do a setup off a fresh windows install to a regular instance of IIS, the process goes like this. * Control Panel -&gt; Programs And Features -&gt; Turn Windows Features on or off * Under Internet Information Services, turn on: * Web Management Tools -&gt; IIS Management Console, IIS Scripts and Tools, IIS Management Service * World Wide Web Services -&gt; Application Development Features -&gt; .Net Extensibility, ASP, ASP.NET, ISAPI Extensions, ISAPI Filters * World Wide Web Services -&gt; Common HTTP Features -&gt; Default Document, Static Content, HTTP Errors, HTTP Redirection * World Wide Web Services -&gt; Security -&gt; Basic Authentication, Request Filtering, URL Authorization * Okay, that's installed, great. ASP.NET probably didn't register though, because reasons. Lets fix that * Open a command console (or powershell) as an administrator and enter the following: * C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_regiis -i * Okay, reboot. Probably. Once you have, it's time to start up your the IIS manager * Start -&gt; Run -&gt; inetmgr * Lets create a website. Go ahead and add one, point the physical path to the local directory of your web project. If you're not sure which is is, it's the one with the web.config. I recommend you create an AppPool to go along with it, for this example we'll name it MyDevAppPool. Set the binding to something like dev.mysite.com * Click on the site in the IIS manager, and on the right select Authentication. Right click Allow Anonymous and select edit, then change the identity from IUSR to the second option, use apppool identity. * Lets make the binding work. Open your hosts file from C:\Windows\system32\drivers\etc\hosts as an administrator. add the binding 127.0.0.01 dev.mysite.com * Navigate to the folder for your project and right click -&gt; properties -&gt; security -&gt; edit. Add user IIS AppPool\MyDevAppPool You may need to specifically specify for it to look for users on your machine if you log in through a domain. * Okay, almost there. Open Visual Studio as an Administrator. In your VS Project open the properties for the web project. Under servers, select IIS and set the Project url to dev.mysite.com Bam, this should do it for IIS 7 in Win 7. You'll have to run VS as an Admin for the Web Project to load in the future. If anyone has any corrections please rip this apart.
&gt;IE/FF are probably attempting to display it despite this being wrong. Interesting - This is coming from the standard .Net 4 libraries, with no tweaks. It would have been flagged earlier, shurely?
Ah! Like doing HTML parsing in it? I didn't know where the line was drawn.
Thank you!
Thank you!
Well, basically, by whether it's a [regular language](http://en.wikipedia.org/wiki/Regular_language). SQL isn't a regular language so, while you can use regular expressions to modify it, obviously, you're going to have a hard time making something that just operates on any old arbitrary input. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Regular language**](https://en.wikipedia.org/wiki/Regular%20language): [](#sfw) --- &gt; &gt;In [theoretical computer science](https://en.wikipedia.org/wiki/Theoretical_computer_science) and [formal language theory](https://en.wikipedia.org/wiki/Formal_language_theory), a __regular language__ (also called a __rational language__ ) is a [formal language](https://en.wikipedia.org/wiki/Formal_language) that can be expressed using a [regular expression](https://en.wikipedia.org/wiki/Regular_expression), in the strict sense of the latter notion used in theoretical computer science. (Many regular expressions engines provided by modern programming languages are [augmented with features](https://en.wikipedia.org/wiki/Regular_expression#Patterns_for_non-regular_languages) that allow recognition of languages that cannot be expressed by a classic regular expression.) &gt;Alternatively, a regular language can be defined as a language recognized by a [finite automaton](https://en.wikipedia.org/wiki/Finite_automaton). The equivalence of regular expressions and finite automata is known as __[Kleene](https://en.wikipedia.org/wiki/Stephen_Cole_Kleene)'s theorem__. In the [Chomsky hierarchy](https://en.wikipedia.org/wiki/Chomsky_hierarchy), regular languages are defined to be the languages that are generated by Type-3 grammars ([regular grammars](https://en.wikipedia.org/wiki/Regular_grammar)). &gt;Regular languages are very useful in input [parsing](https://en.wikipedia.org/wiki/Parsing) and [programming language](https://en.wikipedia.org/wiki/Programming_language) design. &gt;==== &gt;[**Image**](https://i.imgur.com/YAs8J4Z.png) [^(i)](https://commons.wikimedia.org/wiki/File:Chomsky-hierarchy.svg) --- ^Interesting: [^Omega-regular ^language](https://en.wikipedia.org/wiki/Omega-regular_language) ^| [^Star-free ^language](https://en.wikipedia.org/wiki/Star-free_language) ^| [^Regular ^Language ^description ^for ^XML](https://en.wikipedia.org/wiki/Regular_Language_description_for_XML) ^| [^Induction ^of ^regular ^languages](https://en.wikipedia.org/wiki/Induction_of_regular_languages) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cr3cdl3) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cr3cdl3)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Been playing with MVC6 for a bit now, and yes. It's so beautiful.
Angular sends JSON to the webapi, I almost always use angular up front because it interfaces so well with c#. But using it inside the .NET MVC frame, so painful... 
I did not explicitly say that it was a bad choice - Windows Forms (and Web Forms) are great if you want to quickly create something; it's no surprise why you still see a lot of Windows Forms applications still available on the net. I would imagine ultimately it's down to preference, however. If you're more productive using one technology, you may as well stick with it if it does the job well.
Hanselman says Webforms are the dark matter of the Internet. It's probably used more than one would guess. As such it's not likely to die anytime soon. The pragmatist would say use the best tool for the job, webforms included. 
Hey Wunderbar, Many thanks for suggesting this approach, I'm more keen to try and figure out a way of hiding the data instead. As in the future apps I'll be calling private APIs in the background with a token, Baking this into webforms is pretty stright forward and prevents the client from being exposed to the API endpoint. Ideally with this project I would like to hook up a controller and remotely grab the json ASync on the controller then let JQuery handle the data once aquired from the controller. It's not ideal but when it comes to private APIs i'm guessing this might be the best approach. Many Thanks Oliver
Hi Private_Sub, Many thanks for commenting! I'm going to start off by responding to your comment 1. I agree, I'm going to take alook at this! 2. Oh i agree, AJAX seems like a whole new beast, I'm really looking forward to testing it out as things go along. 3a. Roger that i'm thinking of actually coding the Grid's logic into a seperate file altogether. 3b. Ok. Ideally I am looking at creating a controller that will allow JSON data to be grabbed from a remote json server &gt; JSON string and parsed over to JQuery for embedding into a Grid (something like JQGrid) this would then prevent the client from viewing the JSON endpoint (this will come in handy when I'm building out private API based apps.) I'm struggling to find any examples online that use RESTful JSON apis on a remote controller parsed over to JQuery most of the "tutorials"/examples show ASP.net's WebAPIs instead of remote JSON. 
there a mvc webparts in sharepoint, doesnt it fill the purpose ? 
no you're right I am trying to get the logic correct, so for now it's empty. Should the combobox be binded to the Customer.CustomerName, and then specify fk in codebehind? I tried adding associations in my diagram, but for some reason i kept getting errors about mappings.
All pages in a SharePoint web are Web Forms. Lists, pages created for document libraries, system pages etc All of 'em bar none. You want to create your own page, it's a Web Forms page derived from one of the SharePoint types. If you want to use mvc, you have to create a SharePoint app which is a seperate website, that lives outside of your sharepoint installation, and is hosted elsewhere. Here you can use all that mvc, webApi, php et al goodness and have a fun time doing it. However to surface that content in your main site....it's a Web Forms page, with a iFrame (called an App Part), that has some bells and whistles for CORS, and property management.
I'll start laying down a codefirst implementation post by post, follow the comment chain all the way down. :) (but give me a bit to write them out, because you know... typing that much takes time) Edit: k, it's completed. Let me know if you still have any other questions about it.
First thing to do is start a new project. For the sake of simplicity, make a new asp.net mvc project (without user authentication to keep the solution explorer cleaner). Once you've done that, let's also set up two class library projects inside the solution. I named my project TrainingReddit, and so the first c# class library project I add I'll call TrainingReddit.Data. The second one will be called TrainingReddit.Data.Model. Then, start referencing *down* to the new projects. So TrainingReddit got referenced to TrainingReddit.Data, and TrainingReddit.Data.Model. TrainingReddit.Data got referenced only to TrainingReddit.Data.Model, and the .Model doesn't need any new references. Once that's done, go on nuget and grab the latest Entity Framework (but not the beta one, because it's beta). Make sure the Entity package is added to all three projects in the solution.
In TrainingReddit.Data.Model, there'll be a class1.cs file. Rename it to Chore.cs, and if it doesn't prompt you to let it rename the class itself, go to line 9 and change it to say public class Chore. Here's the class definition I made for Chore.cs: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TrainingReddit.Data.Model { public class Chore { public int ChoreId { get; set; } public string Task { get; set; } public int PersonId { get; set; } public virtual Person Assignee {get; set;} public DateTime DateCreated { get; set; } public DateTime? DateModified { get; set; } // Note that the ? makes this property nullable in the table. Without it, it would always need a DateModified or the process would break. } }
Next step is to define the Person class, so I'll add another class to TrainingReddit.Data.Model called "Person". Here's what I built for that class: using System; using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks; namespace TrainingReddit.Data.Model { public class Person { public int PersonId { get; set; } public string Name { get; set; } public ICollection&lt;Chore&gt; Chores { get; set; } } } Note that as I go on I may come back and edit things, so.. if I do I'll make note of it.
Once that's been set up, go to the nuget package manager console and change the default project to TrainingReddit.Data, and write the following: PM&gt; enable-migrations This will build a migration folder in that project based on the DbContext we built. Right now it only has a configuration class, and in that class we could seed data if we want (but for now, we don't need to - we just want to get a database up and out). Once you've enable-migrations'ed, back in the console there, type out: PM&gt;add-migration initCommit This will scaffold out a migration and then you can see what kind of database is going to be created. 
Once you've gone through and looked at everything to make sure it's the way you wanted it to be created, go ahead and go back to the console and write out: PM&gt;update-database This will create the database if it hasn't been created already, which it hasn't, and then you can go and play with it to your hearts content. :) If you can't find where the database ended up, check in web.config on the original project and you'll see this towards the bottom: &lt;entityFramework&gt; &lt;defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework"&gt; &lt;parameters&gt; &lt;parameter value="mssqllocaldb" /&gt; &lt;!--Note that this is where your database lives locally--&gt; &lt;/parameters&gt; &lt;/defaultConnectionFactory&gt; &lt;providers&gt; &lt;provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" /&gt; &lt;/providers&gt; &lt;/entityFramework&gt; quick edit: If you are having problems figuring out where the database got put after going through your web.config file, you can also use the -verbose command when updating the database and it will be rather descriptive of where things went and what did what.
The older versions are not going to disappear the instant the new ones come out, and the old ones are the only serious option for new development starting right now. Even once ASP.NET vNext is available, some people will almost certainly still be starting new projects with the older versions for a while. I still see lots of job listings talking about Visual Studio 2010, two versions ago. And because the new version breaks concepts like HttpContext that some applications lean heavily on, it might be nontrivial to upgrade many existing applicatinos. Besides all these things, making MVC Web sites with ASP.NET vNext is going to be more similar than not to making MVC Web sites today. In short, yes, it's worthwhile.
Why not? It's the most common stack so if you want to make a project it seems sensible. MVC and WebAPI are almost the same and you need *some* sort of persistence layer for most applications.
I like Angular with WebAPI a lot. Angular in MVC makes less sense but it can be appropriate for making smaller, self-contained miniature applications within a larger Web application.
I went to VS Live last year and there was way more Angular content than Knockout. It kind of seemed like Angular was heading toward being the one framework to know but them announcing a breaking 2.0 update with no upgrade path kinda fucked that up.
Another possible benefit of sticking to the older version is if you get stuck, the amount of help (online articles, blog posts, stackoverflow and forum posts, etc) available for the older version is likely going to remain greater than the newer version for a while. If you get stuck with vNext, you'll more than likely have to figure it out yourself (at least until it's hit mainstream and been around for a little while).
http://huagati.blogspot.com/2010/12/inferring-foreign-key-constraints-in.html 
it's an old database and already installed at multiple clients. 
It's not any easier to do really. 
The core language and frameworks are still there. Learning from .NET 2.0 up will give you 90% of what most people building applications on. When you're talking about async/threading, well then there's some newer bits for that too. Even though there's new ways of doing things for some parts of the framework, it's still useful to know how it used to work, because it's almost certain that anyone going into professional development is going to need to maintain the older versions, and at the very least. In addition, much of the existing discussion on how to solve X will be centered around the old way of doing it. Knowing how to translate that into the new way is also important. Come back in 2-5 years and there'll be much less care factor - same as how few people today need to worry about implementing their own list/array types.
&gt; Is it a way to do it once, then copy the schematic over to different installs? You write a script. [ALTER TABLE foo ADD FOREIGN KEY (…)](https://duckduckgo.com/?q=ALTER+TABLE+ADD+FOREIGN+KEY&amp;ia=qa).
When I tried this Alter TABLE script it does add the FK, but when I reload the Entity Framework model I get an error. I made a new edmx file and still the same error... Warning 2 Error 6035: The relationship 'FK__CTUserCho__Compa__71BCD978' has columns that are not part of the key of the table on the primary side of the relationship. The relationship was excluded. 
Assuming this is SQL Server, take a look at SSDT: https://msdn.microsoft.com/en-us/data/tools.aspx It will allow you to add a database project to your existing VS project, where you can incrementally start adding all of these FK relationships. It can generate a publish script for you (a large .sql file with all of your changes) against any target database. You can make all of your changes against a development server, then simply change the target and generate a new .sql file for production.
Don't make the changes directly against the database, even a copy. Write a .sql file- which is just the list of commands you might write from an interactive prompt. You can run that against your target database. That becomes your "master" script. You only run it against production environments when it's been well tested.
That implies to me that your data is bad. Remember when you add a FK reference you're defining a 1 to at least 1 relationship. If you have a value in your table that references a non existent key then you're not going to have a good time. As for updating copies beyond your database, I believe SSMS has an option that scripts out an existing database but really your schema should all be in some form of source control so there's a set of data that rebuilds your data. 
Well if it's Entity you'll get a pretty clear error message saying so...
This thread has been linked to from another place on reddit. - [/r/csharp] [.net mvc based CMS](https://np.reddit.com/r/csharp/comments/35i7ch/net_mvc_based_cms/) - [/r/webdev] [.net mvc based CMS](https://np.reddit.com/r/webdev/comments/35i8ig/net_mvc_based_cms/) [](#footer)*^(If you follow any of the above links, respect the rules of reddit and don't vote.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
Isn't the idea that you inject it if you need it instead of having a static one you access everywhere? I agree with that idea. Easier to swap it out when needed.
Is there any web site running on it?
I haven't got anything I'd need it for really. One thing that would give me pause if I did is you don't seem to be offering any way to separate the data from the application server. That's a problem for people who want to use, say, Azure Web sites.
Oh, cool. You should definitely add that info to the PR. 
What I would like to see in a next generation .net CMS is jekyll integration. I recently moved my blog from .net to jekyll and It is just nice how everything is simple and just works. Using Markdown / Html for blog posts is genius. If I had this with Razor and .Net MVC controllers I would be in heaven.
no the database is setup like this now. | CompanyNames | UserChoice | UserTable | |:--------------|:--------------|:-------------------| | pk SystemID | pk SystemID | pk SystemID | | CompanyName | CompanyID | TableID | | CompanyID | TableID | TableDescription| | Active | Choice | | | | Description | | BUT CompanyNames.CompanyID is equal to UserChoice.CompanyID AND UserChoice.TableID is equal to UserTable.TableID. SystemID is the PK in every table I have. 
thanks
it's so much easier to use than either of them. no extra concepts to learn, just pure mvc. the api is nicer too, strongly typed and less error prone. at the time i built it, it was also awkward to build sites with multi-site and 1:1 translation options. but basically i built it because i didn't like how unnecessarily complex the other cms's out there were. there's more sophistication to being simple, i think
&gt; Sometimes the real world gets in the way of doing things right. I would like to point out that, despite the fact that you are using database software, you do not have a single database.
I've done this and double checked that the column is the identity. [link](http://i.imgur.com/rwAX8t9.png) I'm still getting the same problem however. 
.NET does have some Jekyll-like solutions like [FsBlog](https://github.com/fsprojects/FsBlog), [Pretzel](https://github.com/Code52/pretzel) and [Sandra.Snow](https://github.com/Sandra/Sandra.Snow). If this is of interest to you, contributions are always welcome. 
Also I did read the docs you posted. A lot of the mappings seem to be done through attributes in the class file.
Ya, you can do either, and AFAIK the fluent mapping API and attributes are both complete (so you can just pick one). Visual Studio seems to be corrupted on my laptop so I can't whip up an example right now, but I can (less helpfully) rattle off a couple things to check: * Did you delete your test database and recreate it with the changes to your context? You can manually nuke it, or specify a [DropCreateDatabaseAlways](https://msdn.microsoft.com/en-us/library/gg679506%28v=vs.113%29.aspx?f=255&amp;MSPPError=-2147217396) initializer. Your screenshot shows a CREATE statement, but are you sure *that* statement was executed and created the table? * Run SQL Server Profiler (comes with all editions of SQL Server) and see the query that EF produced when it tries to execute it. Take EF out of the equation and determine if EF's query is wrong, or your model is being generated wrong. Let me know if you're still having trouble and I can come up with an example after I get VS repaired.
How is nuget that hard to use? I'm working on lots of small projects so being able to add packages with nuget is a great timesaver to get things set up quick. Will be interesting to see what package manager vs code gets though. VS seems to get some people pretty worked up for some reason, it has its annoying moments but I like it for the most part
You've probably got some good points but you spoil them with your attitude. Linux package management is great, it's taken the rest of the world a long time to catch on but if your working on windows and you don't want to learn linux then nuget is what it is, an easy way to grab packages without to much fuss. Is there a .net package manager for omnisharp?
Cool, I only used it once just after it was released. Will have to go back and give it another go.
I'd suggest you to add some examples in the readme file.
Finally! Putting the identity attribute for the person class worked. I'm guessing its because client inherits from person so trying to set identity on just client was causing issues. Thanks for your help and patience!
you don't have to use localdb (i will update wiki). just point connection string to sql server database and code first will setup the schema there
Read the tests Luke! https://github.com/kbilsted/StatePrinter/blob/master/StatePrinter.Tests/ExamplesForDocumentation/ExampleListAndArrays.cs
http://www.amazon.com/CLR-via-Edition-Developer-Reference/dp/0735667454 
If you develop in Java, I recommend the [Microsoft dev](https://msdn.microsoft.com/developer-centers-msdn) tutorials and docs. You will learn all the basics just looking through some and maybe following the more complex ones. You can also learn a lot just by doing it. I knew Java and started working with .Net... they are a lot alike, you will find out about the differences pretty quickly. [Here are some answers that may be useful](http://stackoverflow.com/questions/294453/from-java-to-net)
How would you write the Alter statement to change it? 
If you really want an in depth understanding of the language and platform this is the book. I own every edition :)
The dynamic compilation features are meant to simplify the developer workflow. You can still pre-compile before deploying to your server.
Not sure I understand. There are plenty of links in the readme under "getting started" for each type of thing you want to do with the frame work
I'll answer any question you might have. DLLs are a windows thing. Designed to be shared among applications. Assemblies can be tricky to define but easy to implement. 90% of the time, an assembly maps 1:1 to a project. So your exe will be an assembly and your DLL will be another. They are a way to help manage your application from a policy point of view (I admit this is a simplistic answer) .net doesn't have a jar like mechanism. C# is first compiled to the intermediate language (IL) and the hit compiles it to machine code. The IL is an asm looking language. To get technical, IL is the language of .net. C# , VB, F#, etc all compile to IL. So you only need one jit compiler.
Very cool, how do you think it compares to a well known .net CMS like Umbraco?
I'm waiting for final releases before I actually try it all out first hand, but based on other tools I've used the approaches are not mutually exclusive. As a quick example, for a couple of sites I use NancyFx with Nancy.Pile for minification and bundling. While the app is running, it'll pick up any CSS/JS changes I make on the fly without having to recompile/restart the app. So long as it's tracking the file system, I think any workflow can handle it to be honest (compiled, dynamic, or any combo in between).
Lighten up! I merely gave some friendly advice. 
Why do you care? It doesn't affect or change anything. `dnx . kestrel` running dynamically vs `dnu pack &amp;&amp; ./kestrel` which will precompile.
The most important book is the .NET Framework Design Guideline. This book was written by the people who designed .NET itself. http://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613
What a cool name.
If you work without sessions/stateless you don't have a session ID. Also with a man-in-the-middle attack the session ID is easily forged. However with the AntiForgeryToken this is a per POST request validation making a MITM attack allot less likely.
The AntiForgeryToken is to prevent a particular attack known as Cross Site Request Forgery (CSRF) this form of attack can be augmented via a Cross Site Scripting (XSS) on **somebody else's** site. The idea of a CSRF requires the user to be logged onto your site, then they visit **another site**( that opens a URL to **your site** that does something, like buying a product. This can be done for GET requests very easily through the use of an `image` tag that points to said URL. It works because when the browser goes to send off requests it will also send all of the cookies it has. It doesn't matter that the image tag was not hosted on your site. I can't exactly remember how, but an XSS vulnerability on **somebody else's** site may allow them to do a POST request as well. In short, yes, yes you need it on POST requests as well, probably especially post requests since they're generally the ones you use to do things like purchases or payments.
These are to stop CSRF not MITM attacks.
Nice! I like it!
Thanks - but I'm still not entirely convinced for the following reason, which maybe you or someone can clarify. [AntiForgeryToken] works by sending your browser a cookie with a hash code, as well as a normal HTML field with a hash code. Those are sent back to the server when posting and cross-checked against each other. If the browser does send cookies along with the cross-site POST request then what prevents an XSS attacker from just causing a GET against your homepage before they do their post? 
&gt; Overall, the tag helper version is much more readable. Firstly, that is a subjective statement presented as objective fact. Secondly, I staunchly object. It is not more readable to use prefixed tags as they blend in with the rest of the mark-up, and let's be very clear on one very important point here... **These tags are not mark-up**. They are part of the functional, dynamic syntax which are now going to be camouflaged in amongst the rest of the static mark-up.
It makes it a lot easier if you want to do a minor change. This is in line with how pretty much all other popular web frameworks (like Rails, Django or Laravel) do things. Recompiling a whole site for a text change in a file seems overkill and can be offputting for newbies when choosing a framework so this is a step in the right direction.
I'd go for Angular 2.0 if you have an eye on longevity. It's supported by Google and the Angular team have been working closely with the TypeScript team which Angular 2.0 uses by default. It is also the most popular front end framework by some distance.
JQuery is a library though, not a framework.
From my experience, I don't need to recompile project when I make changes in CSS or JS, bundling will generate new link with GUID to new bundled resources.
Basically this. It's how I migrated from Python to Java to C# The deep dives books listed are also excellent for really understanding the system.
Good question. I will be following up with a blog posting going into the details of the input tag helper and I will make sure I test this out
My first question would be, where are you encountering problems? As long as the HTTP call to the WebAPI is sound, the logic will be regular c# logic. Here's an example using angular: var addEvent = function (editObj) { var def = $q.defer(); $http({ url: '/createEvent', method: 'POST', data: editObj }).success(function (data) { def.resolve(data); }).error(function (data) { def.reject(data); }); return def.promise; } Which is then routed through the API to the repository pattern: [Route("createEvent")] public IHttpActionResult CreateEvent(EventObjVm obj) { _adapter.CreateEvent(obj); return Ok(); }
Not running into any problems, never done any kind of service oriented stuff, so I want a tutorial so I can learn.
Ahh, gotcha. Which language will you be using to talk to the WebAPI? I'll see if I can hunt one down for you
I mean getting the hidden form value directly from the site they are going to attack. If the malware script is on site B and they're attacking site A. e.g. On site B, have an img src which GETs site A's homepage extract the token from A POST to A
Hi, thanks for your reply. I tried running the commands you listed but I got these errors when I ran the third command: Error: Package: mono-devel-4.0.1-3.x86_64 (download.mono-project.com_repo_centos_) Requires: libc.so.6(GLIBC_2.15)(64bit) Error: Package: libgdiplus0-3.12-1.x86_64 (download.mono-project.com_repo_centos_) Requires: libpng15.so.15()(64bit) Error: Package: libgdiplus0-3.12-1.x86_64 (download.mono-project.com_repo_centos_) Requires: libtiff.so.5()(64bit) Error: Package: libmonosgen-2_0-1-4.0.1-3.x86_64 (download.mono-project.com_repo_centos_) Requires: libc.so.6(GLIBC_2.15)(64bit) Error: Package: libgdiplus0-3.12-1.x86_64 (download.mono-project.com_repo_centos_) Requires: libtiff.so.5(LIBTIFF_4.0)(64bit) Error: Package: mono-core-4.0.1-3.x86_64 (download.mono-project.com_repo_centos_) Requires: libc.so.6(GLIBC_2.16)(64bit) Error: Package: libgdiplus0-3.12-1.x86_64 (download.mono-project.com_repo_centos_) Requires: libc.so.6(GLIBC_2.14)(64bit) Error: Package: libgdiplus0-3.12-1.x86_64 (download.mono-project.com_repo_centos_) Requires: libpng15.so.15(PNG15_0)(64bit) Error: Package: libmonoboehm-2_0-1-4.0.1-3.x86_64 (download.mono-project.com_repo_centos_) Requires: libc.so.6(GLIBC_2.15)(64bit) Do you know where I can locate these libraries? I wasn't able to find them when running the yum update commands. The latest version I could get of libc.so.6 was 2.12.
I hope it works like that; would make things very clean and easy.
I wouldn't expect it to be any faster
This doesn't follow as a reply. I've made a response to your statement that the helper tag is better and your response is "don't use it". Is there not something else you can say to clarify how they won't blend in with the other tags?
Html is meant to be parsed and interpreted by the server before it is passed to the client, is it? And please show where this is the case as I am genuinely curious and always willing to learn and be open to other's opinions. You can also leave the bitter resentment at the door as this is a discussion. One that deserves to be meted with maturity and not childish mud flinging.
&gt; Html is meant to be parsed and interpreted by the server before it is passed to the client, is it? Yes. I take it that you've never heard of Server Side Includes.
Oh and "P.S." starting a post with "So you're saying ... &lt;something they are not saying&gt;" is a strawman. 
&gt; It is not more readable to use prefixed tags as they blend in with the rest of the mark-up That's a pretty subjective statement presented as objective fact! &gt; These tags are not mark-up Sure they are. "Mark-up" does not mean "HTML". These tags are part of the markup language used by ASP.NET vNext. Prior to vNext, that markup language was Razor, and any of the @Html.Helpers we used were simply Razor markup. Now it's something else. There is also the Spark view engine, which has its own markup language. &gt; They are part of the functional, dynamic syntax which are now going to be camouflaged in amongst the rest of the static mark-up. This is subjective. If you choose not to use the syntax highlighting features of your editor or IDE, then of course they will be "camouflaged". This holds true for any language - I could disable syntax highlighting for C#, Razor, HTML, CSS, etc. and everything would look fairly "camouflaged". Or [I could choose to not do that](http://i.imgur.com/5gwQs7C.png), and the new tags are perfectly readable and easily identifiable.
I think this is exactly what you're looking for! http://givecamp.org/ 
&gt; That's a pretty subjective statement presented as objective fact! As a counter/example to reaffirm my initial point, yes. It is. :p Although it's pretty objectively so that &lt;tag&gt; blends with &lt;anothertag&gt; easily compared to syntax that uses a completely different identifier like @Html ;) &gt; Sure they are. "Mark-up" does not mean "HTML". My point was that of the extended, dynamic, programmatic functionality afforded to these tags over the static DOM element declarations that they will blend into. Which is quite a mouthful when compared to describing it as "mark-up" :) &gt; These tags are part of the markup language used by ASP.NET vNext. Prior to vNext, that markup language was Razor, and any of the @Html.Helpers we used were simply Razor markup. Now it's something else. There is also the Spark view engine, which has its own markup language. They are part of the programmatic syntax used by ASP.NET to invoke programmatic actions to dynamically generate the eventual static (as far as the server-side is concerned) markup that is sent to the client. This is my objection to this tag prefixing over something just a bit more obvious (like the @Html used by Razor) *coupled with just calling it better like it is so blatantly obvious when it isn't so obvious*. It is blurring what is server-side mark-up, and what is client-side mark-up. This is the very reason classic ASP mark-up was abandoned for the likes of Razor and Spark.. As for the ignoring IDE highlighting comment you make - that in itself is exactly my point. You are asserting that it is necessary to use the highlighting to see them clearly amongst the other tags.
you are so awesome dude. I will take a few days off next week to go through learning Code First, using this. Thank you so much for taking your time! I wish you the best and hope you have a good time. Also paging /u/bobhamsandwich in case he missed your posts.
I think the tag helper syntax is better. It is clear from your comments in this thread that you do not think it is better. We do not have to agree on this. Both options are available and we are both entitled to our opinions. I would encourage you to at least give it a try though ;-)
I'm not entirely sure. I'm not in charge of the upgrade. I was just told that we couldn't put VS 2013 solutions in TFS 2008. Which, is for the best. My company probably wouldn't invest the time or money otherwise =/
If you're using C# then you don't really need to use a WebAPI... just use the repository pattern. WebAPI is a way to set up a REST api, C# to C# doesn't need to be sending off JSON or XML to understand itself.
Be sure to check out https://coderdojo.com/ They help teach children how to code. 
I just emailed someone running GiveCamp to organize something in the TampaBay area. Thanks for the tip! 
asp.net (the website) does have some tutorials on this. I'd start with those.
By default, nothings stops you from enabling. I have externalised this to web.config, so I don't have to rebuild my project.
Freelance for profit, give the profit to a worthy charitable organization like Doctors Without Borders or Unicef.
Thanks! This should be what I was looking for and answer all my questions.
That's also assuming that they aren't using VS 2013 and have edit and continue on. That will kill the debug server whenever you stop debugging, so then you have to start the debug server all the time. I am just talking about the Ctrl + Shift + B portion.
I'm still not sure what it is that Armor does that `@Html.AntiForgeryToken()` can't. Anyone here have experience with both that could expand on this?
Hi, thanks for the tip. If this feature is coming in VS 2015 I guess I can wait. Do you by chance have any links about this feature?
It's a part of ASP.NET 5, see e.g. [here](https://weblogs.asp.net/scottgu/introducing-asp-net-5) under "Dynamic Development".
You have a great hackerspace in Tampa. Maybe get involved with teaching there?
I appreciate your waiting to pass judgement. I am hopeful Microsoft will improve the situation before final release. Based on past history, I am sure they will change it some but not hopeful they will truly address this issue. I agree that it can be made to work, the System.Web.Optimization package took a dynamic approach so it could be used with website projects. However, I'm pointing out that they are mixing approaches in ways that don't really seem to make sense.
I don't think HT was used in Nepal. Richard Campbell said recently on one of his podcasts that they aren't in a position yet to be deploying it to the field yet.
Pull the trigger. Go back and re-read just the portion you wrote about the original product. You failed, and it sounds like you did it pretty often. But, each failure got you closer to the target. Why do you suddenly expect to hit the target outright this go-around? Hopefully, you have learned a lot from your past failures (failure is always an option, so long as we learn from it). And your first failure will be a lot closer to the target this time than the last time you were starting out. Certainly, you want to fail close enough to the target that you don't cause any major issues. And having a limited roll-out and users who are willing to work with you to iron out the bugs will make a huge difference. But, expecting to come from nothing to a full fledged, full featured product, with no time for growth, no bugs and no expectations of failing occasionally, is simply unrealistic. If your upper management really wants a product out of the gate which is full featured, and has very few or no bugs, they should pony up the money to hire the developers. Those developers have the training, practice and development support structure to do this type of work. you are just one guy at his desk with no formal training, and very little experience in this field. You have the advantage of tribal knowledge and cost. Management just needs to accept that comes at an associated cost of time and bugs. And it sounds like they have accepted that. So, quit letting the perfect be the enemy of the good enough. Pull the goddam trigger.
Put a listing on craigslist for free computer programming tutor.
&gt; Go back and re-read just the portion you wrote about the original product. You failed, and it sounds like you did it pretty often. But, each failure got you closer to the target. I think it might be confusing because of the similar terminology, but by "process" I'm referring to a *logical* process (as in something like SCRUM). What we have been working on is really developing and improving the main process, and the tool/program that I've built specifically reflects the steps, ideology, and logical sequencing we use in that process. The majority of the major changes that have occurred over the last year or so have all been changes that reflect changes and refinement made to the actual **process**--not because the tool failed to perform as it needed to. We've been using the tool successfully for the last four or five months without needing much in terms of modifications; I've mainly only made relatively minor improvements (like the UI) or adding additional functionality that we didn't realize we wanted/needed before. This stability is actually why we are now ready to move forward to a more robust solution. &gt;Hopefully, you have learned a lot from your past failures (failure is always an option, so long as we learn from it). And your first failure will be a lot closer to the target this time than the last time you were starting out. Certainly, you want to fail close enough to the target that you don't cause any major issues. And having a limited roll-out and users who are willing to work with you to iron out the bugs will make a huge difference. That is exactly what we have been doing over the last year and a half, and the philosophy of "It's okay to fail as long as we are failing a little closer every time" has been our team's general philosophy while we have been developing this process. Our first attempts were a good example of "Looks good on paper but fails in practice." And each time we come back here, put our heads together about how to improve our process and, if applicable, what changes we can make to the tool that would help. And, as I mentioned above, we are now at the point where we ***have*** most of the bugs ironed out. We have a functioning prototype of what we need the stand-alone program to perform. &gt;If your upper management really wants a product out of the gate which is full featured, and has very few or no bugs, they should pony up the money to hire the developers. Those developers have the training, practice and development support structure to do this type of work. you are just one guy at his desk with no formal training, and very little experience in this field. They absolutely ***do*** understand this and they ***do not*** expect me to provide a full-feature perfect product right out of the gate. In fact, they didn't actually expect me to produce the final product ***at all***. I was okay with letting a professional team do it for us... but as we looked into it, this option became less and less practical. ***I*** decided to explore the option of creating the stand-alone myself in VB.NET and, when I was confident that I would be able to do so, ***I*** presented it as an alternative to the upper management because we don't really have any better options and it will be at least mid-2016 before we would be able to get the required funding to hire a contracting development team to do it for us. I'm not afraid of ***failing***... I'm afraid of making some stupid mistakes (due to my VB.NET naiveté) that will rack me up a ton of technical debt I will ***really*** end up regretting in three or six months when I realize the poor decision I made in that implementation which has 12 other subs and functions are dependant on... I am ***confident*** that I can do this. I have seen enough and figured enough out that I **know** I will be able to do the rest. What I **don't** know I can do things the *right* way the first time. Like, in my early VB.NET stand-alone/proof-of-concept, I needed to loop through a specific subset of the data I pulled from a database and use it to create a treeview structure. My initial solution? Creating variants of the TableAdapter's `GetBy...` methods that I used supplied parameters to select the correct data and ***I used in inside a `For Each` loop.*** It took over ***10 million ticks*** to populate the TreeView structure (2-3 seconds?). A few weeks ago I started digging into learning about LINQ and had an f-ing Eureka moment. I filled the DataSet ***once*** and used LINQ statements to return a group of matching rows from the DataTable that I could easily iterate through. End result? Under ***500,000 ticks***. ***That's*** the kind of foolish mistakes I'm afraid of making, if that makes sense? 
Came here to write the exact same comment lol
&gt; If I were you I'd look into using c# instead of vb. There are a ton more resources online for c# than for vb. Yeah, I know that there are a lot more resources out there for C#--not to mention career opportunities--and I definitely plan to start dabbling in it, in the near future. But I figured it would be simpler, at this point, to continue with VB and more learning the .NET part of it instead of adding the learning curve of another language on top of the .NET stuff. But, so far, I haven't really had trouble finding VB resources, though. &gt;If you aren't making 50k+ then you will be better served treating this as a learning experience and then getting a real developer job before you even finish your project. Well, I'm not making 50k+ but I **am** thinking that doing this would be a great learning experience that I can leverage into a real developer job in the future... but, at this point, I don't think I'd be able to do that (without formal programming education and that the biggest project I've done that I could show is entirely based in Excel/VBA). And that's really why I pitched the possibility of doing this project, myself, to our bosses... because I could hopefully be able to use in order to leverage myself into an actual development job (or at least one that is **closer** to being to an actual developer) down the road.
Keep in mind that MVC6 is still in beta. Here are some design notes from a meeting on precompilation from only 20 hrs ago https://github.com/aspnet/Mvc/issues/2551 
Ah, you are correct. Updated the first line, thanks.
&gt; That's the kind of foolish mistakes I'm afraid of making, if that makes sense? Absolutely. I have a web app which I was handed to bug fix and update. It's a decade old vbscript, classic ASP beast. I'm just a sysadmin who started dabbling in coding and web development. And the environment doesn't want to spring for an actual developer (.Net developers in the DC area are expensive). I screw up pretty regularly. 
Yeah, jump on c# now before really digging into the project. Also, look into switching from web forms to MVC. I'm just going to give you the reality here. You aren't going to finish the project. You may get some pieces done, but you are taking on something so large that you aren't ready for it. I'm not saying don't take on this project I'm just saying consider it just a learning experience. Don't even plan on completing it. If you can start a c# MVC project and use entity framework or linq then you will be employable elsewhere. Get those skills and high tail out of there.
&gt;In my opinion you're racking up technical debt by using vb. It's only technical debt if I need to come back later and redo it. This project isn't ***that*** computationally intensive or complex that VB will not be able to fulfill what is intended. I understand that VB is not a beloved language, but unfortunately it is the only practical option in this circumstance. I wouldn't be able to become proficient in C# and complete this project in the timetable we are looking to achieve, and the main appeal of having me do this project is that we can still get a functional standalone program within the desired timeframe and without requiring us to secure funding that nobody is very willing to provide. If we can't get it inside the timeframe we need, we would have no other choice but to go another route. Having this experience in my pocket is a **major** step towards landing an actual development role; I'm sure most companies would prefer a candidate that has complete an actual development project--even if it is VB-but learned C# afterwards (or during) over a candidate without that experience. I know it's not ideal, but I have to work with the tools I have right in front of me when opportunities present themselves because they won't wait for me to get back from going to find a better tool. :/
&gt; It sounds like you are facing the "Wall", the wall is getting over your own internal demons who are making you worry about what you dont know. This is also called imposter syndrome. All developers go through this, all you can do is look at it from a bird's eye view put your head down figure it out the best you can. Thank you! I feel **loads** better just knowing that this sort of thing is a normal experience that many (if not all) developers go through. &gt;No manager/coworker is going to give you trouble even if you "fail" as long as they are part of the solution, you keep them in the loop and be realistic about the system. I never really had any worries about that part of it. My manager and the leads I've been working on this project with for the last two years have all been enormously supportive and encouraging. They don't ***expect*** me to produce the type of results on the same level as a professional developer, or to produce as quickly as an experienced developer would. (For one thing, for every year we have ***not*** used the original SaaS solution we started with is $150k(+) saved... so it's a clear "win" for us because our team's main objective involves helping the maintenance departments in all of our North American facilities deliver year-on-year cost savings.) And I actually think I've far exceeded the expectations in what I have put together and the consistent improvements and refinements I've made to continue making the tool easier to use and adapting to the many, ***many*** changes and alterations to the process that we are piloting and refining and that the tool is built to facilitate. (But they ***do*** understand that even a simple change to the process can sometimes mean having to make major changes in the underlying code in order to make it work; in cases like this, they are open to alternative suggestions that can achieve the same purpose and functionality *without* rewriting tons of code.) &gt; From what I can see, you have a solid application already developed on a platform that is not able to provide the tools needed for you to grow the app. You have looked at technologies that can replace it and my personal belief is that you made a good choice for yourself given where your app is coming from and your own skills. You are wondering about all the little questions now, and how to get it rolling as well as timelines and how to get everybody on board. Welcome to the "developer" job :) &gt; The good news is that you have done all the heavy lifting already. 80% (This number is a fabrication and should not be taken literally) of application development is having a strong understanding of what you need to do. You have an existing program that works, all you want to do is convert it to a stronger platform and add some features. Yeah, that was pretty much my reasoning, as well... just ***knowing*** exactly what it needs to do, how it will handle the underlying data, and understanding the overall purpose it is supposed to fulfill is a **MAJOR** part of it. A ***lot*** of the challenges that I faced while developing the Excel/VBA version was because the initial scope and functionality of it wasn't actually meant to **completely** replace the SaaS we were using... only to hold us over and keep the pilot facility from bailing on us while we researched and found a different solution (or got somebody to create one for specially for us). But once we had went out and actually use it in the field, a few times, we were able to gain a much better understanding and idea of what we needed to have and how it needed to work. (There were several times I seriously considered saying "Screw it!" and just rebuilding the entire thing over again from scratch instead of fighting with limitations stemming from code I didn't anticipate having the functionality or changes I now needed to do. (There were several things that I **did** completely rewrite from the bottom up, though!). &gt; Come on over to /r/visualbasic we would love to help with this and we have a strong community that you can rely on. I've actually been subscribed to that sub and have lurked there for quite awhile, already! :D &gt; I personally (as one of the curators of the sub) have worked on hundreds of apps, and I am more than willing to help you layout the foundations of this and give guidance as I can. I am certain a bunch of the sub regulars will be happy to help and give you an alternative to my diatribe :D I will definitely take you up on that! &gt; O and 300 to 400K sounds like bullshit to me.... :) Yeah, I think so too. I think a really big portion of the price in that quote was because they had to allocate a significant chunk of time *basically* just trying to understand and get a handle on what the program actually does... but it ***really*** isn't as complicated as it looks. Most of it just simple reading and writing to/from three---*maybe* four--tables in a database. The tool simply takes the data, creates a visual representation of a structure using a TreeView (with a **max** depth of 3 levels), and displays information so that it is in a user-friendly view (i.e., so that it is not difficult for people that do ***not*** have extensive technical/computer skills) and then guide them through a pretty straightforward step-by-step process to modify and change the data, put it back into the database, and then at the end, it takes the relevant pieces of data. throws it into a simple Excel template so they end up with a ready-to-use document and every department in all of the facilities in the company are using a single, consistent format. Okay, I guess that **does** kind of sound a bit complicated... but it isn't really that bad: Do [Take a row of data from the table] [display it in a window that walks the user through the process of changing and editing it] [Save data back into table] Loop Until [all rows completed] Then the part that create the output file is just a basic fill-in-the-blanks. Really, it's more that the ***process*** which the program is built to facilitate is the part that is somewhat complicated... but what the program is actually ***doing*** is not that complicated. 
Thanks for saying that. It's reassuring to know it isn't an uncommon feeling to experience in this sort of situation. It isn't really that I don't know where to begin--because I actually have a main piece of the UI completed: out of the five(?) main classes I think I will need, I have three of them almost entirely finished (the parts I haven't finished are things that will be interfacing with other modules/functions that don't yet exist but aren't yet needed), it pulls the data it needs from a database into a DataSet and will write changes back to the database, it uses that data to create a structure of TreeView nodes and gives certain nodes specific formatting based on a set of different criteria... Honestly... the rest isn't really that complicated. You know... think about it now, I think what is actually what's holding me back **isn't** that the whole thing seems so big and I don't know where to start... but it's actually the prospect of deciding ***what is the best way of tying all of these smaller units back together into one, cohesive program***... Hmm. This is something I need to think about. But **thank you** for your reply... I think it has helped me sort out what is actually the thing that's holding me back. 
Glad to help!
I'm not sure why you think this project is "so large" that I won't be able to complete it... I have already created a fully functional version of the tool that's based in Excel. It already ***does*** nearly all of the functionality we need for a tool; the main thing we the tool to do in order to scale upwards is to use a central database for the data is uses. But when it comes to that, it really is a question of "Does it really pay to bother with that, at this point?" because the Excel/VBA version would require rewriting a ***huge*** percentage of the underlying frameworkto use an ADO library for database read/write. If we will be spending all of that time rewriting everything for that and then having to go through all of the QA/bug-testing just for that functionality, then we might as well move to a more robust platform where it's actually infinitely easier to pull from a database, store it in an in-memory table to access and modify as needed during usage, and then write all of the changes back into the database. It ***really*** isn't that complicated of a program and I've already made the damn thing ***once***. Also, I wrote this in response to another comment, here, but it is relevant: &gt;It isn't really that I don't know where to begin--because I actually have a main piece of the UI completed: out of the five(?) main classes I think I will need, I have three of them almost entirely finished (the parts I haven't finished are things that will be interfacing with other modules/functions that don't yet exist but aren't yet needed), it pulls the data it needs from a database into a DataSet and will write changes back to the database, it uses that data to create a structure of TreeView nodes and gives certain nodes specific formatting based on a set of different criteria... &gt;Honestly... the rest isn't really that complicated. &gt;You know... think about it now, I think what is actually what's holding me back **isn't** that the whole thing seems so big and I don't know where to start... but it's actually the prospect of deciding ***what is the best way of tying all of these smaller units back together into one, cohesive program***... Also: Mid-February was the first time opening--let alone ***using***--any version of Visual Studio. In my *entire* ***life***. And after two months of playing around, seeing what was possible, and learning what was there---***at work, as a side project***--I had put together an early prototype/proof-of-concept which has the core/central component of the tool fully functioning and entirely using database storage. In **two** months from "I have absolutely no experience with Visual Studio and I've never used it before in my life..." to "I've recreated the core functionality/UI in VB.NET and uses a single, central database for all of its data, implements BackgroundWorker threads to proccess and Invoke to update the UI, and also implements LINQ to quickly find and iterate through specific DataRows from in a strongly-typed DataSet." Most of what remains is simply user-facing stuff. The three classes that I have written are the classes I wish I had created on Day 1 of the Excel version because they ***greatly*** simply the process of handing data off from one step/module to another. If this became my sole project at work, I would *cautiously* estimate I would be finished within 6 months (aside from making any additional changes needed in response to changing/tweaking the process that the program is designed to facilitate and fit into) and all of the core functionality completely running in four.
&gt; I'm sure most companies would prefer a candidate that has complete an actual development project--even if it is VB-but learned C# afterwards (or during) over a candidate without that experience. Not necessarily. You just need some intro level experience to get on a team of other developers. It sounds like you're a lot closer to having that intro experience than you are to having this application completed and used in production.
&gt;You just need some intro level experience to get on a team of other developers. It sounds like you're a lot closer to having that intro experience than you are to having this application completed and used in production. My relevant experience is basically two years of VBA on this project (it wasn't my **sole** project during that time, though; *maybe* 50% of that time was on this? And *most* of that time was due to changes in the **process** that required changes in the application). And the reason for wanting to do this project is to **get** that entry-level experience I need. The VBA application if already pretty much competed and we **have** been using it in actual production environments. The reason for building a standalone version is so we can scale up with more users and not require separate data files for each project. The database portion of the standalone is already functional. The rest is basically reproducing what I already built in VBA. I think you imagine this application to be far more complicated that it truly is... but that may be a failure on my part by not being able to describe it articulately and adequately. Thank you for sharing your opinion, though.
&gt; Your code already sounds like a mess. The Excel/VBA code? In some places, oh god, it's a trainwreck. I would die if other people had to read it. But I'm quite interested to hear how the code I have written recently "sounds like a mess"? Starting from scratch has given me the opportunity to do things the **right** way and ***not*** end up with trainwreck code like the VBA one did. I know that I made a lot mistakes in the VBA version--and I paid dearly for many of them when I later needed to go back and do it completely differently--but the entire topic of this post is because I don't fucking want to make the same kind of mistakes I did back then, just now in a different stack this time.
Yeah, that's an absurdly low number. It sounds like you have each class doing too much.
That's not typical at all. I suspect some problems on your machine? Reboot and try again? Anything in the log files that get generated during the installation?
Each one doesn't actually *do* a whole lot themselves. I'd say each one *maybe* has four methods? And two of those are "Load the data from [db table key]" and the other is "write change to database" As I said, the main usage of the application is basically a sort of data-entry kind of thing. It probably could probably be done pretty easily using Access forms/reports. But, again, it comes back to being an issue of scalability
Dependency Injection. Although, you seem to be talking about something else entirely
&gt;It sounds like you already have this. Maybe you're right. I'll start to keep an eye out for any jr. developer kind of job postings in the area... won't hurt to apply for them if they come up. I can't afford to quit my job without having another one lined up, though... so, in the meantime, it still doesn't do anything about my current situation with this project. :\
Update took about 5 minutes for me
&gt; Well, I'm not making 50k+ but I am thinking that doing this would be a great learning experience that I can leverage into a real developer job in the future... but, at this point, I don't think I'd be able to do that (without formal programming education and that the biggest project I've done that I could show is entirely based in Excel/VBA). if you write this and it works (which it will) i have no doubt your current employer will want to keep you just becuase of knowledge you will have gained. Meaning at raise time point out how mush work you did to get this completed and how much you have saved teh company. etc. etc.
I object to adopting a whole new paradigm for every major release of ASP.NET. Microsoft should clearly distinguish its web application frameworks and provide a road map for their web server support of those frameworks.
Yes, you can totally do that! Here is my follow-up post: http://www.davepaquette.com/archive/2015/05/13/mvc6-input-tag-helper-deep-dive.aspx
Except there's a reason MS pulled VB out of .NET (even though there was such an outcry I've heard it's back now). Speaking from the companies point of view VB is technical debt. In most markets it's easier to replace a C# developer than a VB developer.
So basically this is a complaint about wanting to stay on the latest products, but never have to change? Most of these are extensions to the framework anyway, not the framework itself and are governed by different rules. C++ and PHP are available for those who hate change.
It all depends on how long the web server supports these application frameworks. One of my colleagues still uses Classic ASP and ran into a problem with a legacy application that requires a DLL which is unavailable for 64 bit systems. ASP.NET 1.1 now has a problem with SSL. Admittedly everyone should have abandoned that technology a long time ago. But even now I run into issues where I begin to use part of the .NET Framework only to learn that it has been superseded by a completely different technology.
Installation just finished. It took more than an hour by itself to install Windows 8.1 emulators.
Parts of the .NET framework very rarely get superseded. Parts of the .NET family are a little different and do regularly get updated with breaking changes. Most of them make no guarantee that breaking changes won't be made later in versions. So complaining about it is kind of worthless. Don't like it then don't upgrade or use another stack. The rest of us will take the improvements with breaks.
Html.Action returns a MvcHtmlString. It's basically just a string; you can't iterate it. If the string contains an enumerable set of data, you will need to parse it first.
I have a very similar background to you. No formal training, self-taught, started with Office/VBA and eventually started doing .NET, all on company time. I'm now a fully-fledged, full-time programmer, largely working alone (recently this has changed a bit and I'm working in a two-person team). First of all: you can be proud of yourself. A lot of people start out on this road and the vast majority do not succeed and do not end up where you are now -- being paid to write production software. As for your question, I have good news and bad news: The bad news is, yes, you will make mistakes, in either design or implementation, and many of them will be things you'll later see and think "how could I be so stupid as to do that?" But unless you're cranking out identical applications over and over again that's always going to happen. That's part of this career. The good news is you'll learn from those things and you'll get better at recovering from them and you'll make better designs next time. Take a deep breath. Your work is making your company money. They see the value in it. Most of them probably don't give a shit about whatever's at the top of Hacker News this morning.
Try specifying the area in the route data parameter: Html.Action("Get","TopFolders", new {area = ""})
&gt; Like, in my early VB.NET stand-alone/proof-of-concept, I needed to loop through a specific subset of the data I pulled from a database and use it to create a treeview structure. My initial solution? Creating variants of the TableAdapter's GetBy... methods that I used supplied parameters to select the correct data and I used in inside a For Each loop. It took over 10 million ticks to populate the TreeView structure (2-3 seconds?). &gt; A few weeks ago I started digging into learning about LINQ and had an f-ing Eureka moment. I filled the DataSet once and used LINQ statements to return a group of matching rows from the DataTable that I could easily iterate through. End result? Under 500,000 ticks. If this is the kind of mistake you're worried about... it's not a big deal. Deleting rows in an accounting ledger is a big deal. Software that's too slow is often good enough for a while.
&gt; If I were you I'd look into using c# instead of vb. There are a ton more resources online for c# than for vb. I never write VB but I have no trouble reading the code and "translating" it into C# and I'm sure you can go the other way if you're not absolutely dense. The framework is bigger than either language and they both offer similar tools.
Nope, still the same error. Could it be because I'm trying to call ApiController as opposed to regular Controller? Looks like ApiController really does not implement IController interface, so the error message seems appropriate. Is it not possible to call ApiController like that? EDIT: I figured it out. Here's what I did: @{MyProject.Controllers.TopFoldersController controller = new MyProject.Controllers.TopFoldersController();} @foreach (string item in controller.Get()) { ... stuff } Thanks for your help!
Yeah, I totally doubt Html.Action can call an ApiController action method like that. I would recommend going one of two possible ways: Hokey: In your view, new up an instance of the ApiController and call the action method directly. Hypothetically, something like this: @{ var Folders = new TopFolders(); var ListOfFolders = Folders.Get(); } Then you can do your ForEach enumerating of the list of folders. Better solution: Refactor the logic that builds the list of folders into a static method in a class in your Models. Have the TopFolders.Get action return the result of that method. Also have your view use that same static method to get the list. (Disclaimer: I work for Microsoft supporting Azure and ASP.NET, but I'm not officially representing Microsoft on Reddit. No guarantees that the above code will work. Not responsible if it kills your dog, burns your house down, or bones your wife.)
I had no problem with outbound connections, I couldn't run an executable from my web app, and I moved my local file storage stuff to azure storage
IMO newing up a second controller from a view is kinda gross. I would just add MenuItems to my viewmodel and either (a) call the APIController from the regular Controller or (b) same but use a repositoryish pattern to avoid cross controller calls.
A "pretty good" development machine will cost you about $3000. If you have a slow machine, you will waste anywhere from 10-40+% of your time on "slow computer" overhead, depending on how often you compile and what else you've got going on. Take how much time you'll spend developing and what you value your time at, and do the math. Don't forget to account for frustration. Dell has some pretty great machines, and they finance.
VS solutions are just text files, and you can put any kind of file in TFS version control. There might be integration problems between VS 2015's TFS client tools and TFS 2008, but that's a different story. Anyway, you'll be fine with VS 2015 and TFS 2013.
Inexperience? I can see through your comment history that you only work on vb. I've had professional development jobs in c#, java, and right now I'm deploying cloud architecture using configuration management, orchestration tools, and custom middleware that I've personally built. I'm pretty far from inexperienced and quite a few years ago I was in OP's shoes and the only language I worked with then was VBA/vb. You may want to read some of his pays because he's pretty clear that he's not getting paid jack and the end goal is a new job as a developer.
I could have sworn I heard on this very sub that vb was pulled out of the newest .net runtime. I haven't been in the .NET space in quite a few years now so I may be wrong.
Yeah, but was your learning experience from building a VBA app backed by excel or was it on designing and developing an app on the actual .NET framework? That first job of mine lasted 5 years, I learned a ton, but as soon as I figured out I was being on technology I dug in and choose to learn and start working with c# MVC. Didn't take long to get a new job after that. Even though i was vindicated in a lot of my design and choices with the new job I learned about a ton of things I was doing wrong. You will grow so much faster working on a team of experienced developers than you ever will by yourself.
I will probably get dragged through the mud for this post, but I'm going to put it out there anyway. :) I have been developing and maintaining ASP.NET sites using all of the frameworks. My newer apps are usually something like MVC, because it's new, pretty easy to work with, and let's face it - it's just cool and fun. I also have what feels like a lifetime of experience working with Web Forms. I support using the newer frameworks, but I feel like a lot of people just jump on the "bash Web Forms" bandwagon because that's what you are supposed to do now. The fact is it is not hard to do AJAX calls to backend services in Web Forms. If you stick to the models they provide, you can wire their so-called "Page Methods" right into your code behind. And you can easily call these methods with a simple $.ajax() function call if you prefer to do so rather than using ScriptManager. ScriptManager will build the proxy for you, but you don't need it. It's trivial to do it by hand. There are some things in Web Forms that were probably pretty good ideas at the time, like ViewState, and the wonky control naming (and many others). The basic design of Web Forms was meant to facilitate all of those WinForms developers moving their applications over to the web and feeling at home, so to speak. They are also heavyweight and carry a lot of overhead, and are trivial to disable. To that point - I built an application a few years back in Web Forms that, for the sake of brevity, was essentially a spreadsheet. As soon as we started testing the thing with real datasets, the performance was pretty rough. A quick look in Fiddler pointed out the problem - a ViewState payload that was on the order of a few MEGABYTES for the large DataGrid that was being displayed, and of course that was round-tripping with every postback (even though it was a partial postback). It was nice that ASP.NET would handle all of that control persistence between postbacks if we needed it, but we didn't. A quick switch in the web.config file, and the problem was gone. And it's pretty easy to migrate to newer technologies in steps too, which usually makes a longtime client very happy to hear. Clients often cringe at every media blast of new framework X, because they want the new stuff, but they don't want to just throw out what they have spent many man-years and a ton of money developing. For example, I am currently working on a brand new JS-heavy-UI rebuild for an old Web Forms site. It has all the latest bells and whistles on the client side, including some really slick custom JS UI components built specifically for this new design. This is an existing application/site, that has its roots in a MS SQL database and ASMX web service hosting the API, built in 2005. Throw an attribute on those ASMX web methods, wire up a quick proxy class in jQuery, and I am off and running, with an API that I can call asynchronously through JS and now returns JSON. The client is happy because this massive rework to modernize their UX ends up preserving 2 of the 3 tiers that they have invested so much time and money in over the years, and all the areas of the site that don't need to be modernized (login, admin, reports, b2b, and so on) can just keep plugging along with their Web Forms pages while they focus on their end user experience. It was also very easy to add some realtime updates to a few of the live discussion-type areas of the site by dropping SignalR right in and using it in the existing Web Forms page. Suddenly their old page is using a pretty new and advanced piece of technology (and something it wasn't built for) and the site comes alive. My own feeling is that where it falls apart is when, rather than working within the framework, we want to use some brand new whiz-bang model or pattern or framework WITH it, and this is when Web Forms' event-driven page-lifecycle state-ish heavyweight model starts to get in your way. I'm not sure, at the end of the day, if this failing is so different than investing in any other architecture or framework. Work within the framework's offerings, benefits, and limitations, and you can make it work. Try to shoehorn something in that it wasn't meant to deal with, and you have growing pains. I'm not saying that we shouldn't be moving forward - we should always try to move forward. That should come with the profession, and we should all want to do that and enjoy doing that. I'm just saying that it seems so easy to bash it now, but the reality is that it's not all that hard to work within the framework, and a lot of the things that people claim are hard or impossible to do are actually not that bad. And for all its failings, I think it did have a big hand in getting a lot of Windows desktop developers (and their applications) migrated to the web. So in the end, I think it accomplished its primary goal. Check back in a few years, when all the posts on this sub are bashing that archaic ASP.NET MVC framework. :) And actually, you already see people talking about how much they prefer working with Web API as a lighter weight solution for a lot of projects. I have been thoroughly enjoying building out recent projects, using Web API to implement a clean and simple REST API and a slick JS user-facing responsive site with no heavy server-side overhead. Times change. Our industry moves at light speed. Jump over to /r/javascript and try to keep track and make sense of every new JS framework that hits the wire. It's dizzying. And a lot of fun. As long as you continue to keep up with the trends and learn and use the new technologies, there should be no shame in throwing up a quick Web Forms site when the project calls for it for some reason. It's the same polarization we have in WinForms/WPF, and there are still plenty of times that I will quickly wire up a WinForms app to accomplish something (or a console app, or a service). One size never fits all. And for all those people out there that need to do some development as part of their job, but aren't developers, some of these long-established paradigms are just easier to manage. I have watched my wife throw together simple Web Forms apps for projects she needs for work, where it is much harder for her to grasp some of the newer concepts. It's just not her forté, but she can still get done what she needs to. So that makes it a valid tool for her needs. And I would expect, for many others like her too. I just wanted to be a (sole?) voice of support for Web Forms. It had its purpose at the time, it did its job well, and even today, it remains a fairly easy framework to work with, regardless of the better, faster, and easier offerings available to us now. Well, there is my $0.02 on the subject. Feel free to downvote this now. :)
Yeah, this example wasn't really *that* big of a deal and I was able to correct it quite painlessly. I used it because it was the most recent example that came to mind where I used a really ineffective, inefficient way of doing something relatively simple because it was really the only way I knew how to do it. My concern is making a mistake like that in something that later has several related and dependant functionality built around it, and then waaaay down the road finding that the implementation I used is actually going to make this one aspect of the program ***exponentially*** more difficult to implement... so much so that it would actually be easier to go back and rewrite that part and then go back through to change everything connected/dependant on it, just so I can get that other functionality to work. But, you know... now that I really think about this, maybe I am going to be far less inclined to making that type of fatal flaw than I was when I first started building the program in Excel/VBA: because at ***that*** point in time, despite having a working understanding knowledge of VBA, what I ***really*** lacked was the experience of creating anything of that scale. So, looking back on it, it really wasn't due to my lack of understanding the different/more efficient ways of doing certain things in the language, it was my lack of experience creating a program of that proportions and I failed to consider how many of the moving pieces could interact; and I also made a lot of assumptions in my initial code where I had assumed that "when [this] sub/function is called, [these things and conditions] will ***always*** be true." As the program grew and I became more and more experienced (due in **no** small part to **many** failures of this kind), I began to really understand the advantage in making the code more modular so I could more easily adapt to changes. But, going into this project armed with the experience and knowledge of how fundamentally *important* it is to write code that can be much more flexible and versatile... even if I don't ***expect*** it will **need** that capability. &gt;Deleting rows in an accounting ledger is a big deal. [This is all I could think of after reading this.](http://i.imgur.com/H6UCscp.jpg?1) 
okay I took the one out from the InitializeComponent(); and updated propertychanged. Was it another one I needed to remove?
That sounds like a bad idea. Make your JSON action call some method which returns objects which you can also call from your view (or better, from the other action and stick the result in the view model). That way both action call the same "normal" method therefore reusing the code without having to jump hoops to get at the data later.
It's OK, it will come with time. Sub-actions are awesome when you want to reuse an action in another one (like a "news widget" or something like that). But don't use it to share data. That's what plain methods are for. Plus in the "MVC way" try to load the stuff you need in your view in the model. So create a non-action method (lets call it GetNews()) that gets the data you need in both cases. In your JSON action, call GetNews() and return that collection, JsonActionResult will handle the serialization. In you non-JSON action, call GetNews() and put that List&lt;News&gt; in a property of your model, pass that model to your view. In your view just foreach on Model.News. Nice and clean, the essential method gets reused. If you want to go further, GetNews() should me a method in a service that you call via IoC but that's for a later time. Reusing Actions is fine for modular actions but don't mix up your data-access methods and actions. 
I'm just going to post this as a top-level comment (see above) to all of the people who chipped in and offered their advice and perspective (instead of copy-pasting it or linking this comment). A special thank-you to everyone who pitched in and offered their advice, perspectives, and their own experiences. Since the "username mention" notifications don't work for comments with more than three usernames, I can only thank three user at a time (and here's the second batch): * /u/LandOfTheLostPass * /u/gnomoretears (who was the only person in /r/learnprogramming to take the time to offer a response!) * And even /u/kaydub88 (even though their responses may not have been *particularly* helpful in the specific situation I mentioned, I feel they were truly trying to help me and did present some valid points that I should take into consideration, especially in regards to my longer-term plans.) I appreciate it more than I can express at this time. You guys **rock**. 
Change var data = await _context.UserChoices.OrderBy(o =&gt; o.CompanyID).ToListAsync(); To var data = _context.UserChoices.OrderBy(o =&gt; o.CompanyID).ToList();
ok, you created this now I am going to set you straight. You have actually pissed me off with your ignorance. you stated; &gt; I can see through your comment history that you only work on vb. I have been a programer for 25 Years. I started in Basic 8K/Cobol, learned Fortran, and Settled on C for years. I am a C++ grandmaster, and have taught program classes at the university level. I know java, javascript, css, html5 and a bunch of frameworks including NOde.js and a few others. This is inclusive of all .NET experience. I can paper my wall with my industry certifications. I just sold my development company that had 15 developers working for me as well as designers, writers and the rest of the support staff required. I am retired, 45 years old. Now I have done swinging my dick around let's get down to brass tacks. You told /u/anon_smithsonian &gt;In my opinion you're racking up technical debt by using vb. Which I can understand, VB has a bad perception of it. Today's VB is not VBA, or VB6 or hell even the same as .NET2 it's a fully functioning programming language that can be used to solve problems with ease. This shows that you are stuck in the mindset that everything has to be one way, the way you know, or possibly the way you understand it from your working environment. &gt;Speaking from the companies point of view VB is technical debt. In most markets it's easier to replace a C# developer than a VB developer. This is also true except VB.net and C# are interchangeable. I could say to you C++ is better than .NET becuase I can get more people who know C++. It is not a technical debt for it all rides back to .NET CLR, not matter what language you support. In vNExt it is even less relevant. If in your company they choose to use C# thats great, but dont take from your company that it is that way everywhere. &gt;Your code already sounds like a mess. Why degrade somebody's efforts? Mess or not it works, in its current state vba and all. I could go on but as I write this I am cooling down, and think I will stop here. Maybe as you get older you will realize that it does not matter what language you use, its what problems you solve that are important.
Thanks. I'm now getting the results to my query. But they are not showing in my datagrid. I'm sure it's an itemsource, datacontext, Binding path or something.. that's wrong 
You could have removed either assignment of the data context. 
Gotcha. I don't keep up enough with Microsoft since moving to a java/Linux environment.
"C++ and PHP are available for those who hate change." Lol thanks for making my afternoon.
I did, but for some reason my query is getting data, but I'm not populating the data grid.. Thanks
Dependency Injection has nothing to do with what he is talking about. 
posted above and thanks
Well, the up carat was interpreted. "^Division\W{12}"
"\^Division.*" would match anything that starts with Division. Are you trying to capture anything specific following "Division" ?
But how do I get the space after it and the next three characters? Shouldn't that be .*{12}?
Took the up carat out and it works fine. I don't get it. Thanks for the help though. The rest of it did the trick 
in the markup you can use the inline tags to reference a value populated on the server side. &lt;div&gt;&lt;%: serverVariable %&gt;&lt;/div&gt; Then set the server variable before the end of the page's onload call.
How many projects do you have in the solution? This is generally the slowest part of compiling so reducing this can help dramatically. 
This is where I was stuck. I know how to manually pick out connection strings from a config file, but how do I reference a method call in my code behind or a public variable that I can set in the Page_Load? I'm still having a hard time knowing when to use % %# or %$ I just read this [write up](http://stackoverflow.com/a/649458) on them (&lt;%$ %&gt;), but wasn't sure if making my own custom expression builder was the only way. I set a public variable named conString in my code behind and then tried ConnectionString='&lt;%# conString %&gt;' I get the Exception: System.InvalidOperationException: The ConnectionString property has not been initialized.
I looked at Coevery a while ago, it has now matured into a generic platform for creating applications but the CRM build I found to be very usable and well written; CRM Version: https://coevery.codeplex.com/ 
I have no idea. What's a free and easy-to-use benchmark tool?
I've learned almost everything I know about IIS from Stack Overflow and Technet articles, so I can't help you there. Why do you need a book?
Learn what you need to to get your application hosted in IIS, then Google the rest when you have a specific issue. All IIS is going to do is host your app for you, so it's a means to an end. You really shouldn't be diving into it all that much unless there's something you specifically need. If you want broad knowledge of IIS, are you a Dev or a sys admin?
If you were an administrator, I'd suggest [IIS in a Month of Lunches](http://www.manning.com/helmick/) based on the author and the reputation of the other "month of lunches" books. As a pure developer, you shouldn't need to get *too* far into the weeds with IIS. Especially as a beginner.
Yes, as others said: just learn how to run your application. Nothing else you need (for now, at least). There are already a hell lot of information you need to absorb about asp. IIS give great tools to use - when you have knowladge about what you need. Like, you can read about URL rewrite - it is a pretty powerful tools, but as long as you have problems about the basics how the webpages work, how the page created on serverside (like many beginers) then the url rewrite won't do anything useful for you. Learn the basics, and when you can do things, you will start searching about IIS tools - and you will get knowledge from SO :)
no books. just google everything and try building test pages or apps. youtube to start. everyone else here is right too.
It would be nice to be able to easily read your original post.
We used to use a local IIS instance but we've since stopped. The main reason is that if you are debugging and you spot a problem, the thread completes (which could be a very bad thing depending upon what you're doing). If you're using IIS Express, it kills the process and the thread never completes.
Sorry, I didn't think anyone would really be that interested, anymore. [Here is the same post](http://np.reddit.com/r/learnprogramming/comments/35ud2l/vbnet_valley_of_despair_selftaught_looking_for/) but without the strikeout that I crossposted on /r/learnprogramming (but only one user responded) if you still want to read it. 
that is VERY slow. You are probably testing DB latency?
The last time I tried this stuff was in January I think, and there was so much stuff missing it sucked. e.g. /{controller}/{action}/{id} &lt;-- optional id was UNSUPPORTED! Lose. But now it's all cool.
Thank you.
Sorry, I meant I hope the can get .NET 4.0 running at some point. That would cover a good chunk of our apps as we upgraded most of them to 4.0 over the last 2 years. 
I'm seeing the same thing as you. I have a feeling SqlDataSource doesn't allow you to use binding expressions to set them up in aspx. Would setting the connection string in codebehind be acceptable? This definitely works: &lt;asp:SqlDataSource runat="server" ID="db" SelectCommand="SELECT * FROM sometable" /&gt; ... protected void Page_Load(object sender, EventArgs e){ db.ConnectionString = connStr;} Better yet, replace the local connection string variable with a call to a factory method that figures out the connection string for you. I'm a little surprised it doesn't work declaratively - I'm most familiar with the data binding syntax tags of &lt;%# varName %&gt; which works in other places. You could use an expression builder to do this, but you'll need to have all your connection strings defined in AppSettings or ConnectionStrings. I'm not sure what your scenario is - do you need to swap connection strings in and out for a page at runtime, or can you assume that one page has exactly one connection string no matter the user?
This is true for developers - for admins though having a good understanding of the different features can make troubleshooting common configuration issues that developers may or may not run into in test. (Sync issues with clustering, Kerberos permission issues, etc).
Ah okay, makes sense. I'm not familiar enough with Mono I guess. Sounds like I can do what I want already! 
Wow, that totally worked. I had just assumed it had to be done in the markup since it would be done before the Page_Load. I don't know why I made that assumption since it's before any rendering. Thanks!
Nope, my api requires the user to upload very large files ;)
A lot of stuff has a MSSQL dependency, so there's that hurdle still...
Check out Visual Studio Code, and here are the instructions to get an aspnet 5 project going. https://code.visualstudio.com/Docs/ASPnet5 Use the --gulp option when running the generator, it's nicer than grunt.
Unfortunately we don't have dev databases so most of our dev apps point at a test db (usually Oracle or MSSQL). 
I have to if I'm using IIS rather than Express
also keep in mind that IIS is the old and busted and [owin/katana](http://www.asp.net/aspnet/overview/owin-and-katana/an-overview-of-project-katana) is the new hotness. it will be useful for the next few years to know a bit about IIS, but probably not for much longer than that.
Damn, can't believe I missed this aspect of the open MS stuff. Very exciting.
Why don't you setup your own test? It is a thought out example...
If you're going out of your way to avoid visual Studio you're doing it wrong. Stop fighting it and accept that it's the most powerful ide out there by a huge margin. You should also look into c# rather than trying to do this in managed c++. Really it sounds like you're trying really hard to make the whole ecosystem be what you want it to be instead of what it is. With a lot of effort you can make that happen but you'll be swimming against the current the whole way and you're not going to find a lot of help on the specifics because no one else is doing what you want to do. It's going to be really difficult when you don't know much about the environment yet. 
Check out this project [materializecss](http://materializecss.com)
You don't need anything .net specific as it's just front end CSS you'll need to include.
First off, you're using C++/CX, not C++. You don't have to use CX, but not using it makes everything far more difficult with no real benefit. Second, if you're not worried about using existing C++ code then use C#. C++/CX has no real benefit beyond interop (any performance gains are a drop in the ocean). Finally, fighting the tools will gain you nothing but unnecessary pain. They're some of the best tools in the industry. Embrace them.
I'm able to get max 150/s with the MVC template in Visual Studio.
It's a common misconception because it uses similar syntax.
Great name. Like the look. Client side seems a little old skol being jquery. GPL. Very nice start, though.
Not my project, just heard of it on Reddit, checked it out, found out it was hosted on GitHub, was ASP.NET and cloned it to give it a look. Architecturally it's simplistic at the moment (single project, no IoC...) and would certainly die painfully at scale but it's a start. Frankly the business plan sounds more interesting: it's based in Switzerland, claims to be censorship-free and wants to share revenue with content providers (whatever that would actually translate to).
Yep, I knew to focus on Universal apps, thanks! I will consider C#. I am also exploring C++/Qt (which I know how to use) compilation and debug for WP.
How deeply are they leveraging SignalR?
Actually, OWIN/Katana are basically dead as of VS2015/.NET4.6, although the new system is based loosely on Owin, so the concepts still apply. Perhaps OWIN will catch up
From what I've seen, Yet Another SignalR Chat Widget.
got source? also what is "the new system"?
Very impressive, but essentially useless because nobody in their right mind is going to use your framework. It lacks the kind of support network and tools that IIS or even Apache gives you. Nobody is going to invest in your custom MVC framework and tie themselves to your platform. Asp.net is moving towards platform independence. OWIN means you can ignore server dependencies and run your apps on any server. You're going the opposite way.
Going off-topic but why is your desktop app hosting SignalR for? Wouldn't you rather have a central SignalR server talking to the desktop clients?
Sounds interesting.
To me, it's like the holy grail of awesomeness that will solve so many of the architectural problems with this 3-year-old project. It's just a little daunting when you've never made an ASP.NET site before -- lots of examples but none are production-ready.
I guess he means not using React or Angular or something.
Just fyi, this is MVC 5, *not* ASP.NET 5 (formerly known as vNext.)
You can use ASP.Net Identity on multiple servers behind a load balancer with a single database. You will need to set matching machine keys in your web.config on each server for the cookie to be decrypted. You can use [this article](https://support.microsoft.com/en-us/kb/2915218#AppendixA) to generate a machine key. Edit: Here are some resources I have collected over the past few months from my work with ASP.Net Identity: 1. http://www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity - Overview of ASP.Net Identity 2. http://blogs.msdn.com/b/webdev/archive/2014/08/05/announcing-rtm-of-asp-net-identity-2-1-0.aspx - ASP.Net Identity 2.1.0 blog post showing how to use 2-factor authentication 3. http://blog.markjohnson.io/exorcising-entity-framework-from-asp-net-identity/ - Using Dapper with ASP.Net Identity (could be adapted to work with Massive or we could use Dapper, slightly outdated though) 4. https://github.com/whisperdancer/AspNet.Identity.Dapper - ASP.Net Identity + Dapper project for 2.0 version of Identity 5. https://aspnet.codeplex.com/SourceControl/latest#Samples/Identity/AspNet.Identity.MySQL/ - ASP.Net Identity MySQL implementation (used as a reference for building repositories) 6. http://stackoverflow.com/questions/19991161/get-current-applicationuser-in-a-partialview - Using extension methods to retrieve the ApplicationUser model from the database 7. http://www.beabigrockstar.com/blog/using-google-authenticator-asp-net-identity - Adding Google Authenticator (TOTP) support 8. http://www.asp.net/identity/overview/features-api/account-confirmation-and-password-recovery-with-aspnet-identity - Good information on how to configure ASP.Net Identity 9. http://bitoftech.net/2014/09/24/decouple-owin-authorization-server-resource-server-oauth-2-0-web-api/ - How to generate machinekey keys for web.config to allow ASP.Net identity to share login details across applications (allow users to login to admin and main site using same encrypted cookie, load balancing) 10. http://www.asp.net/aspnet/overview/owin-and-katana/owin-oauth-20-authorization-server - OWIN Authentication server guide for authenticating on different machines. 11. http://www.mikesdotnetting.com/article/253/using-asp-net-identity-with-razor-web-pages - ASP.Net Identity + Razor Webpages configuration
Not selling you anything. Not asking you to use my framework, but most likely you are already using it as a user although you may not be aware of it (if you shop on major US retailer sites). And of course all major high-scalability sites (Twitter, Google, Facebook, LinkedIn) are all written in ASP.Net and run in IIS (this was a joke) Seriously, the reason for this post was to get real # from .NET folks. I gather 15,000 req/sec from Node.js team for a chat app on a quad cpu server, heard about happy PHP people handling 200/sec in a social app connected to memcache..... I can not get any numbers from .NET people, its like the .NET world has no clue how fast their services work. So if you could be so kind, what are your numbers without revealing any business details? 
Which metadata are you referring to?
The class and it's properties. So I don't need to make the same classes and what not. So I don't have to do double the work.
You can add WADL to WebAPI without too much difficulty: http://blogs.msdn.com/b/stuartleeks/archive/2014/05/20/teaching-asp-net-web-api-to-wadl.aspx
Yes. You suck. Seriously, you would know better than we do. If you think you suck, you probably do. But in reality, it sounds more like a confidence issue. A good developer has self-confidence. They may not know how to solve a problem, but they can figure it out. Regarding your current situation.. 100 pages? I've worked in some very large web sites that haven't had 100 non-static pages... this tells me your companies site design is very wrong... If you can't keep track of things, then it sounds like your companies process is also wrong. You're not using tools like TFS, Jira, or other work item tracking... 
You are correct, ASP.NET *MVC* 5.
My bad.
Async loading of nested comments seems ideal fit for React.. no?
`userChoice` is a property of `ObservableCollection&lt;UserChoice&gt;`. `ObserveableCollection` notifies when things are added, removed or rearranged in the collection. In `GetDataAsync()` you are setting the userChoice property to a whole new instance of `ObserveableCollection&lt;UserChoice&gt;`. The old instance doesn't know anything about this change so it doesn't make a peep. What you need to do is call `OnPropertyChanged()` in the setter body of `userChoice` so that your view model will raise the property changed even for that property. You'll also need to call `GetDataAsync()` in the setter of `MySelectedItem` like /u/mosentok suggested. You can ignore the `Task` returned by that method and it will run to completion on a background thread (that's not best practice but it's just one thing in a long list of things you're doing, so don't worry about it).
So I don't have to make double the classes. I'm new to WebAPI. So maybe I'm approaching this wrong. But this is my thinking: I'll create a biz class in the WebAPI, and when I call the Get, it will return the appropriate class, but in JSON. Then I'll have to convert the JSON back to the business class so I can use it easily in C#.
You can try exposing your API as an oData endpoint.
Any laptop with decent system rig and running Windows as primary operating system. You can go for Mac, but I, myself am not fond of OSX (you will need to install Windows separately to work on .NET if you intend to use Visual Studio) and honestly speaking, the hardware is literally shit in a Mac. It's more of a "show-off" device than an actual useful hardware. I personally like 15.6" or 17" laptops myself. Those 11" or 13" high res laptops are simply not for me.
I use a laptop with an external display. It's my personal preference, plus I like the option to take it with me on the go.
Lenovo X1 Carbon
I've heard negative remarks regarding the screen on the Carbon. Is there any truth to that?
The hardware is literally shit? Come on, you're allowed to be a PC guy but that's ignorant. Macs have great build quality, the keyboards are great and the touchpads are on a completely different level (probably partly a software issue). I have a pretty high end PC laptop which is good but it does not feel as good as a MacBook. And the retina displays are just awesome. SSD speed (1.4GB/s!)? I doubt many PC laptops come close. For .NET development? Not much of a point in a Mac. But they are great machines and I often wish I had one at work when doing web development. 
You're not allowed to call someone ignorant if you barely read their comment. That guy clearly was talking about the performance hardware that actually matters like CPU and RAM amount. A fast SSD wont be really helpful unless disk i/o is a bottleneck. The hires display puts even more of a loaf on the processor, further proving his point.
My only complaint about the screen is that it's not full 1080p - 1600x900 was as high as it went when I got mine. The newer ones go up to 1440p I believe.
He said hardware. Most developers should be fine with 16 or even 8GB. The i7 in a MacBook Pro should also be plenty. Calling it "literally shit" is just ridiculous. 
MacBook Pro here. I use Windows 8.1 in VirtualBox and works like a dream.
I'm using a macbook pro with an i7 and 8 gb of ram, and I wish I had more memory for sure. I'd get more. 
No, you can *never* have too much memory. 
15" Macbook Pro. Windows 10 running inside parallels. Works great for me, I do a bit more front end work now and I prefer working in OS X for that.
Have you found any issues with the bootcamp drivers and keyboard commands when jump into windows?
&gt; and honestly speaking, the hardware is literally shit in a Mac Compared to what? Have any models for comparison from other companies?
I have mixed feelings about that. On one hand great original content would get rewarded, on the other exploitative karma whores will find loopholes and profit from others.
Dell e7440, i7, 16GB RAM and a 1TB SSD. It's pretty good. Battery life is around 3 hours which is better than my old laptop. It's built like a very lightweight tank. Keyboard is nice. The GPU is only HD 4000 though so it's a game free zone.
Asus N551JK-CN263H, and I replaced the DVD drive with an SSD. It has everything I need performance-wise, and the build quality is great. The keyboard is awesome to type on too, it doesn't bend and flex like a lot of other laptop keyboards do. The only downside I've found after 2 months of use is the touchpad which isn't too great, but I carry my mouse around all the time anyways.
I'm not a pc gamer - I'll check this out. Thanks!
I have 16gb and sometimes it's not enough. E.g. when using the performance analyser in VS.
I'm not suggesting a Mac for .net, I was just responding to another commenter. The Alienware laptop seems to not be half the price of the MacBook Pro btw, neither does it have great battery life 4-5h vs over 10. But it probably has good performance, I'll give you that. Gaming isn't what macs are about though. 
You can get a better laptop than the $1799 mac (performance-wise) and alienwares are some nasty beasts in terms of development and battery life. I don't know why you are comparing Mac's non-gaming battery life with alienware's battery life while gaming. I have an alienware laptop and hooking it up with Windows 10 gets me a smooth 10~12 hours life on a full charge. Also, don't forget the part that you can replace laptop parts, i.e. upgrade it in Alienware, which is nothing but a dream in Mac.
Unless you're running a 32-bit OS.
I checked the battery numbers from some reviews I pulled up, if it is that good, cool. How's the noise? I have a dell 7250 (iirc) which is otherwise very nice but the fan is super annoying as it keeps turning on while doing light browsing or coding. The noise isn't consistent either, it keeps changing the fan speed. Things like these are hard to know from specs. 
I have 24GB in mine and regularly hit 20GB+. 4 instances of VS + Resharper + Firefox + Chrome is all it takes to hit that sometimes.
I run an ASUS Ultrabook UX305. It has worked out surprisingly well for me despite the "slow" CPU.
I didn't use anywhere near that to run Visual Studio when I was doing it under Parallels. It could be that you're giving it too much, leading to this problem.
I still love my HP elite book my company gave me a little over a year ago. i7, SSD, 16GB ram, super light weight and it looks good too. SSD is key. 
I second the XPS 15. Although, it's actually QHD, not 4k.
Oddly this is the complete opposite of what I've found on my mid-2012 MBPR running Yosemite. Using Windows 8.1 / 10 in Parallels is extremely smooth, the only VM I've ever actually found to be smooth even. I tried VMware Fusion before Parallels and found it disappointingly slow for coding in Visual Studio, but Parallels seems to be essentially native performance. Even if I'm doing just Windows work, I'll be in OSX usually so I can use the trackpad and such. I use Xamarin in OSX for mobile development, and then VS inside Parallels in full screen mode for non-mobile development.
I use a surface pro 3, i5 256gb
Yeah mine is QHD, but they now offer them with 4k screens
sonofabitch! I wish I had known that was on the way. I would have waited.
Haha tell me about it...the 4k version came out about a month after I got mine :(
Razerblade
*whisper it* Macbook Pro :-)
Dell Precision M3800. It's kind of like an Ultrabook. So it's nice when we have meetings and I need to present or take notes.
Do you think it's worth buying the fully loaded XPS 15 over a top of the line desktop build? Personally, I haven't used a desktop in years.
Yes. Also ability to pre-render on the server would be useful for SEO and page load speed.
Surface Pro 3
Surface Pro 2
MBP here too. Fusion/boot camp. I just like the hardware plus for non .net I've switched to OS X in the last year after 20 or so years of windows. Reboot for a dedicated dev environment. Works for me!
I use a Pro 3 for my Win8 test system and travel. Love them, absolutely love them!
Both bootcamp and VM. I prefer bootcamp and only use the VM once-in-a-while. In the VM (Fusion) I often encounter scaling/display issues so if I'm really in the zone I boot to Windows to eliminate distractions. 
Parallels works fine for me when I'm in the windows VM or when I'm working in OSX exclusively but switch back and forth I spiny wheel of death like 4-5 times a day.
HP Stream 11 with a 64GB SD card for drive space. Mind you I don't do the majority of my development on this, I'm more LAMP than .NET, but I can say that VS2013 runs well on even a small machine like it.
Lenovo Thinkpad T440s. Core i7, 12gb ram, 512gb sad, 1080p, and extended battery. It's a great laptop for developing on the go without a charger.
SSD*
&gt; Lenovo lol fuck lenovo
SSD, ssd, anything with ssd will rock. Lenovo with windows 8 would be my preference.
I really liked this library, but there was some stuff not working when I tried implementing it a couple months ago. I want to say pop ups and causing them to scroll/cut off content, but I cant remember exactly. Also, keep in mind it is a grid system, one I actually liked and felt the class names were more straight forward then boot straps (though went back to boot strap after fighting the issues we ran into). Been watching it on github, will be great to see it mature.
I have a Pro2, but I wish the display was a lot bigger. Display scaling looks like arse on a 10.8" screen. :[
Why is that better?
Okay so your client, that will consume the WebAPI is a C# client? You will need some entity models that are converted into Json (Or another format) in your WebAPI. They are then send over the wire to a client. The client should have its own logic (If you ask me) then you have great separation of concern. If you start to share the entities between your client and your service, you need to update the client if you update your service. Also maybe some of the info ain't needed in the client, like the id.
I have 4 separate solutions open.
It reduces the surface area on which tokens are retained on the UI. It also does not rely on cookie-storage (cookies being particularly subject to hacking attempts). Because the ARMOR token can be stored anywhere on the UI. It potentially reduces the risk of scraping attempts. There are some discussions on this older post that might be of interest to you: http://insidethecpu.com/2013/09/23/encrypted-token-pattern/
I just got a XPS 13 too. Amazeballs. I plumped for the QHD+ option... the clarity is beautiful. But yeah, great laptop. So far I'm tending to use Visual Studio Code and Sublime etc for webby type stuff, and when I doing WPF dev I tend to prefer the desktop, but VS runs fine on the laptop. 
HP ZBook. Had for about two months now. It's locking up a lot now, which scares me. Before that was Lenovo Thinkpad.
http://www.novatech.co.uk/laptop/range/novatecheliten1605.html Can't fault it has plenty of power and was pleasantly surprised by the performance
It scares me how many people in this thread don't know what meta data relates to in a web service. He's talking about a WSDL or equivalent. 
I thought about that, but what happens when a user does not select anything on the datagrid and just starts typing in the TextBox. I was thinking {Binding SelectedChoice} only gets a value once the user selects something in the datagrid.
Surface Pro 3 i5
But that makes 0 sense in a WebAPI context, so I guess people (Me included) is trying to understand the OP question and thought process. It could say it scares me that you don't know that WSDL makes 0 sense in a WebAPI context :)
[Original Source](http://xkcd.com/1445/) **Title:** Efficiency **Title-text:** I need an extension for my research project because I spent all month trying to figure out whether learning Dvorak would help me type it faster. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1445#Explanation) **Stats:** This comic has been referenced 54 times, representing 0.0844% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_crcy8ro)
I went ROG with this latest laptop and have to say that I'm extremely happy with it. I was considering a MBP but I just don't like OS X and would replace it with Ubuntu anyway. So went with the ROG. Surprisingly runs circles around my friend's MBP and I think I paid half of what he did. Plus I've been using the GPU more and more for data/image processing. So having a decent one has made things a lot faster. Plus I'm a gamer, so really not that hard of a decision for me. edit: Oh and since the OP was curious, it was i7, 16gb ram (wanted 32 but hard to find a laptop motherboard that supports it right now for a decent price), 1TB 7200HD and removed CD drive and replaced it with the 128GB SSD that I already had from the last laptop, NVidia 960M. Got it for about $800 because they were coming out with the newer models that have a 970M in there and 256GB SSD standard as a secondary drive.
You replied to the wrong person
Oops! You're right. Sorry about that. I'll link my comment back to OP. 
I did some google foo and found this http://www.asp.net/aspnet/overview/owin-and-katana/owin-middleware-in-the-iis-integrated-pipeline It looks like you use stage markers within a middleware to plug into the event you need.
Azure, websites are free on there (up to 10 I think). Also you can have your own free SQL databases (though they are quite small). Its also really easy to deploy your web apps from visual studio.
Down the CPUs to 3 (or 1 CPU, 3 cores) and try that.. and only do 6GB.
At the conceptual level you have a (potentially) public face by API of which there is (to my limited knowledge) no discovery mechanism. One of the pains I have with consuming many 'web services' these days is the shit work I need to go to generate proxy classes that used to be a couple of clicks. Look, nothing against web app, it serves as a simple replacement to wcf, but some sort of metadata that could be consumed by a wizard in VS would be nice. A nice WSDL is all I ask for
Azure for web apps, mobile services, SQL dbs, queries, web jobs and table storage. VS integration is great and my cost is well under $100/month.
I host a half-rack with Venyu Solutions in one of their data-centers. - **Pros:** It's pretty close for physical access, they're easy to work with, they offer some nifty extra tools, and they shave off the top 5% of your bandwidth spikes to flatten your average usage per month (95th percentile). - **Cons:** None so far from a technical standpoint. They had some power issues at the location I use because they did not have full control over the building, but they have since fixed that and are in the process of building their own center which will open next year. Price point is around $750 a month for a half rack with the usual amenities plus $150 per Mbit of bandwidth used (rounded up) based on their 95th percentile calculations.
Have you ever had any issues running it in bootcamp (if you have tried before)? How does windows and visual studio scale due to the high resolutions?
I did this and they gave me $250 credit (set to expire in 1 month if not used) but it didn't appear I could get away with 10 sites for free. Maybe I didn't look hard enough, I'll check again. 
 First of all, thank you so much for your response and point of view. (I'll just reply to both of your comments in this one to make it easier) -- &gt; Adopt some agile XP (extreme programming) concepts like refactoring and YAGNI (you aren't gonna need it) and KISS (keep it simple, stupid). Take them to heart. When you are making a decision, refer to these concepts and make sure you aren't violating them. I can't tell you how many apps I have seen where the developers go all-out building a huge pluggable architecture just in the off chance that it might make sense that this app can be extended in this way, years from now, when there is no requirement for this NOW. It's actually kind of funny. A few months ago I stumbled across the XP philosophy/concept and I was surprised because it sounded a *lot* like the approach that I/we had already been taking in creating the Excel VBA version. We started with a relatively simple version of the tool that mainly only had the core functionality implemented and we took it, ran it through some real-world testing, learned new insights into how its usage theory--how we *expected* it would be used--compared to *actual* usage, gathered feedback ("It would be really helpful if we could also find a way to do [this] from [that] window..."), got together and discussed possible ways of addressing concerns or improving functionality, then made changes or added new features as necessary, then rinse and repeat. These frequent, smaller iterations were vital in helping us understand what our final product needed to be, what worked, what didn't, and identify features and functionality we didn't really anticipate or ever even originally had considered. "Spike solutions" (putting together a smaller, separate sort of "proof-of-concept" to test out a potential solution before attempting to fully implement) and Refactoring were also some of the concepts/ideas I frequently used. At the time, I guess I more saw the refactoring as being something that was a result of my failure to properly plan or implement something ***the first time*** around. &gt; You will make mistakes. I don't care who you are, or how long you have been doing this, or how many degrees or certifications you have. Everyone does it, regardless of their skill level. Don't let your fear of incorrectly or incompletely solving a problem stop you. Yeah, I totally get that. I don't ***expect*** to write flawless code or that I'll get everything right the first time. Mistakes go hand-in-hand with self-teaching because you don't have a teacher (or other expert-type of person) who you can go to and ask if you're doing this right, or who you can say "I'm not sure I really get this piece of it... can you clear this up for me?" and you ultimately have to *rely* on the very act of making mistakes in order to find out if you really understand the concept... but not just making a mistake, it's about being able to learn from them, to look back and figure out what you did wrong and where. So yeah, I'm okay with making mistakes, and as long as: 1. I can learn something from my mistake and I'm able to come away with a better understanding of something than I had before 2. I am not continuing to make the ***same*** mistakes. To make it once is expected. To make that mistake a second time, "*well... okay, self, you're only human... but pay closer attention, buddy.*" But a third time, though, it's like "*seriously me, get it together already.*" More than that I need to stop and take a really hard look at what I am doing and why it is happening because it's probably a sign that I'm operating on incorrect/incomplete/false information. It's pretty much the philosophy of "failing upwards." It's perfectly okay to make a mistake, just as long as you fail a little closer to your goal each time. Ultimately, my worry isn't that I will make ***any*** mistakes... it is that I will make a mistake in something that will be a common thread in several other processes and then I have to do something completely different there to fix it, and *that* will end up creating a ripple-effect of other problems because of all the things that operated off of the assumption that `x = true` and now `x` is a two-dimensional array of strings (or something, I don't know, I'm just making this up). The times where I've had to do this I've really kicked myself... and that's really where it all calls back to, I think. I don't want to make that sort of critical error. But, as others have helped me realize, I don't think it's as likely that I *will* make that same critical mistake. My experiences with the VBA version of the tool has really helped me see the importance of modular code and a lot of other stuff that, even though it won't be transfer 1:1 from VBA to VB.NET, the core, fundamental ideas and practices are universal. &gt;Remember, a software developer is an engineer. At the heart of the engineer lies the core belief that you can always do what you did better. This is a ***really*** good point. I never really thought about it like this. My father is an engineer, only of the mechanical variety, and your point really rings true. A large reason for wanting to do the standalone development myself is really because ***I can do a better job than I did last time**; I can build it, from the get-go, the way it should have been built last time. &gt; Take a look around online and try to recognize how hard it is for a developer to attach v1.0 to a project. Doing so implies a "doneness" that is hard for an engineer to come to terms with. The reason why developers tend to work alongside project managers (or product owners in SCRUM) is because we have a basic need for this to be controlled externally, lest we iterate forever. That hasn't been too much of an issue for me, so far, but I suppose it is different because I don't really have the traditional "Build this and let me know when it's finished" sort of scenario; it has been "Okay, our next pilot workshop is 6 weeks from now," and then I'd spend the first four weeks (or so) of that getting as much of bugs fixed, changes made, and new features/options/functionality implemented that I can get done, a few days to iron out any bugs or problems I can find on my own, hand it off to a co-worker who gives it a sort of stress-test/bug-test trying to find ways of getting it to break that I hadn't anticipated, and then the remaining time is spent fixing those bugs--or if they aren't something I can fix in time, then at least putting stop-gaps in place to minimize their impact or prevent them from causing critical errors/terminating code execution--and just general polishing. But I can definitely see how this could be an issue if there weren't these sort of non-negotiable windows I had to work within. Yikes. :\00 &gt; I will leave you with this XKCD comic that I am often reminded of when working through these issues. I have it printed out and hung on my office wall as a reminder: &gt; &gt; http://imgs.xkcd.com/comics/efficiency.png I love xkcd! I have several of them up around my desk at work, as well. I ***don't*** have this one, though... but I will be printing it out and adding it because it will be a good reminder for me as well. &gt;If you are pretty happy where you are, keep building your skills. It makes you more marketable. I have seen others suggest switching to C# or ASP.NET MVC. These aren't bad suggestions (I love C# myself) but you also have existing knowledge that you are augmenting by going from VBA to VB.NET, so that lets you accomplish your goal a little easier. That was pretty much exactly what I was thinking, as well. Going forward, I plan to start to learning more about C# syntax and familiarize myself with the language concepts more... but I don't think it makes sense to try learning it for ***this*** particular project because I'm already trying to learn the .NET framework and all of the additional concepts, ideas, and capabilities that I didn't previously have at my disposal, so I just think it would be far more disadvantageous to throw having to learn all of the new concepts in a language I'm not familiar with (like reading a calculus textbook written in a foreign language). I think it will be much easier to transition from VB.NET--&gt;C# ***after*** this project because I'll have a much more thorough and solid understanding of a lot more of the concepts so it should then be more just a matter of learning the language. And since I've seen there are VB.NET&lt;-&gt;C# code converters/translators ^[\[1\]](http://converter.telerik.com/) ^[\[2\]](http://www.carlosag.net/tools/codetranslator/) out there--although I'm sure they aren't ***perfect***--so that makes me hopeful that the transition shouldn't be too difficult. &gt;You have your short-term (completing this project) and long-term (becoming a better developer) goals set out in front of you. As I've said before, the most important thing is to keep moving forward. Thank you; you're exactly right. After reflecting on the feedback and discussions that I've had from this post, I have begun moving forward, again, and my pace has been increasing. I started mapping out a better rough idea of how to tie everything together and where to go next. And, as of today I have an MSDN membership (courtesy of work!). Now all that is left is just a matter of **doing**. You and the others here have been an immeasurable help and I am immensely grateful for your feedback and advice. Thank you! 
[Original Source](http://xkcd.com/1445/) **Title:** Efficiency **Title-text:** I need an extension for my research project because I spent all month trying to figure out whether learning Dvorak would help me type it faster. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php/1445#Explanation) **Stats:** This comic has been referenced 55 times, representing 0.0859% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20t1_crdgzkp)
Plus, if it is for a sideproject/side business you can get $150 worth of hosting EVERY MONTH for three years: http://www.microsoft.com/bizspark/default.aspx
AppHarbor! Not sure if it's around anymore, but it was like heroku for just .net apps. 
Surprised I'm the only Amazon Web Services guy here! Price is reasonable, close to free if you are running a low traffic site. The Simple Email Sender is pretty cool. All really easy to set up and get going.
This won't answer your question but if you're targeting .NET 4.5+ you should abandon `BackgroundWorker` as fast as you can and use async/await. `BackgroundWorker` is old school WinForms junk.
The only thing I found to be an issue is that deployment is pretty slow. If you are a student you can also get some more free stuff through dream spark 
That actually is true for shared to premium as well. I run multiple sites on a shared app service plan. Works great for light traffic sites. 
Just wanted to say thanks. Your code worked perfectly.
$150/month VPS on go-daddy, for a ASP.net WPF site. We do it this way because the site usually has 20+ concurrent users but occasionally as many as 70 users at once, and my company values the stability of the fixed price VPS rather than the variable pricing of somewhere such as Azure or AWS. We also like go-daddy because their VPS means we don't have to administer the box ourselves. ^(I'm not joking.)
You are not alone. Just that the micro instances might not keep the load... Unless you use Beanstalk. Anyway no way to get a free db...
I used Asus Eee PCs for years and they rocked. Sadly, you cannot get decent cheap ones any more. :-(
Nothing azure related though. Dreamspark is software only.
upvoted because Azure is confusing. 
You can get free SQL databases on Azure as well, however they are limited to 10mb I think, though that would likely be enough for small hobby projects. Also if you go on the 3rd party apps section you can get 1gb mongoDb instances through a company called mongolab I think, which you can then use in your project. (Theres probably other databases available on there as well)
You can put more than one schema in the database (effectively multiple databases). Azure is very cost effective+, especially once you start looking at fail over or backups. \+ Cost being time and/or money
Another QHD+ xps user checking in. Before that I would alternate between a Dell Vostro 3450 and MacBook air.
Are you talking about hosting SQL Server in a VM? That will end up being more expensive because you have to keep the VM on all the time and VMs bill based on uptime.
Looks impressive. Try [Tsung](http://tsung.erlang-projects.org/) or [Siege](https://code.google.com/p/siege-windows/) instead of AB.exe to benchmark? I'd also suggest using much higher parameters, e.g. n=1000000, c=1000-10000 to see how it 'scales'. With similar tests on my work machine (i7-4790 - 4 core/8 HT, 16GB 1600MHz RAM) I get around 7-8K req/s with ASP.NET vNext, 5.5-6.5K req/s with Katana and 4K req/s with MVC 5. Go net/http and Node.js http bench about the same as vNext. Unfortunately the OWIN adapter of vNext slows down things quite a bit; running at about the same speed as Katana. Does NFX Wave make use of metadata to generate concrete HTTP handler adapters for optimal speed? I found [Sigil](https://github.com/kevin-montrose/Sigil) to be rather valuable when generating CIL for dynamic methods. [Jil](https://github.com/kevin-montrose/Jil)(fastest general .NET JSON serializer) also makes use of Sigil for dynamically generating serializer/deserializer pairs for JSON encoding. I love micro benchmarks as much as the next guy, but it's usually the 'other things' that slow down the application (e.g. database call taking 1 ms, effectively reducing your 50K req/s to ~1K req/s). A realistic number for a small VM (4 core, 8GB RAM) is about 200+ req/s for 'high performance' and 50+ req/s for 'good performance' and 10+ req/s for 'mediocre performance'. 
https://github.com/dotnet/coreclr 
For the smallest size (2GB), yes, it's about $5. If you do any research, you will find that this is pretty reasonably priced. You won't find many places that offer SQL Server databases for much cheaper. What you could do is fire up a virtual machine, and run sql server yourself on it, then you can put as many databases as you want on it. However, you would need a large number of databases before this would become cost effective. 
Smarterasp. Easy to use, no problems really except that they don't provide much database space (about 3gb for reasonable pricing) 
How about using Dropbox?
Not directly answering your question, but SQLite is very good for websites, esp if your load is mostly reads. When you're writing to a SQLIte DB, ensure you use transactions to speed things up, reducing file open's and closes to once per transaction.
I work on the Azure Mobile Services team. This is how we let you use more than one MS with a database.
&gt; The thing that confuses me about Azure App Service's "free" tier is the "60 CPU minutes / day" limit. I've never seen any clear documentation on what that MEANS. &gt; Is it a per-app limit, or a per-owner limit across the 10 free apps you can have in that tier? &gt; Is it talking about idle time, such that an app literally can be up for only one hour per day? &gt; Or is talking about "CPU time", such that the clock runs only when HTTP requests are being processed? This is per App Hosting plan. If you host ten websites in ten different web hosting plans, you get 60 CPU time each. This lasts a pretty long time, I've found, but YMMV. &gt; Can you do this with an Azure demo hosted on "azurewebsites.net"... or is that only meant for non-public experiments lasting a few minutes? Yup, you get a url for free sites as well. They also scale into paid once you've reached your limits &gt; If the "60/min-day" limit is as restrictive as it sounds, then Microsoft is really missing an opportunity to get their mindshare out there with the young enthusiasts who will otherwise be drawn to Node.js or Rails on Heroku (and never getting involved with the MS ecosystem as their career progresses long-term). You're right that sites like Heroku offer more free CPU time. But it's a struggle, as a business, to offer anything like this for free. The idea with the free tier is to provide a simple dev environment without charging you any money. It's not really designed for hosting your personal project long term, though it's capable of doing that. We've seen Heroku recently pull back on their free tier a bit - I think they've experienced similar problems. You've never met someone so steadfast in their entitlement to a 100% uptime service than someone getting something for absolute free. :)
Yeah, this is something we need to be better at explaining - its not entirely clear because its a bit boring. When you create any of the App types, you select an existing or new app service hosting plan which acts as your bucket of resources you pay for. When you create a new plan you can select your tier and you can upgrade that from any app. It essentially works as a bucket - you can run multiple types of apps in a single bucket, but they share resources. I have a mobile app being used by a dozen people and rarely have a problem. Your experiences may vary. Deployment can eat a bunch of CPU. When I'm actively deving, I tend to use shared just to avoid issues. Drop it down to free when I'm done and its just in demo mode.
If it's posting a lot of data to your server, and you're server is "working" it's probably legit timing out. Either have your server start doing stuff ASync and give a response faster. or in the client app set the timeout to a higher limit. 
I fucking love you, signed up yesterday, approved today. Wish I knew about this before, I've already spent decent amount on Visual Studio, Azure, etc. 
Not completely sure of a real practical use case for JSON within a relational database (outside of what was already available) but this is neat. Still based on nvarchar field for now but at least it adds some querying abilities.
Entity Framework support ? I have one application that makes use of JSON to save weakly typed (client defined) objects. Being able to pass the query directly to SQL would be awesome.
Can you [Pastebin](http://pastebin.com/) the log? I don't really want to download a file from some random reddit post.
FWIW, I've had 5 and they all worked great.
I read about something like this recently, the solution was to reboot because files were locked.
That's good to know. I will say that most complaints tend to be on Amazon. However, Amazon is notorious in selling refurbished machines as "new".
Do you have access to both the api and the clients consuming the api? If so you could create a class library consisting solely of pocos returned by your service that could be used by your api and referenced by your clients. There are certainly many ifs and caveats to this approach.
I believe so, .NET 4.0 etc. all install.
Is this the real world or Posgtre fantasy?
Over the last few versions, PostgreSQL has been adding/improving its own support for JSON fields.
Interesting with the for json. Guess it saved me a step.
FYI database first/edmx are going away in EF7
Nice to see they are working on adding this feature, but I can't say I'm a huge fan of the implementation. The solution of "add a computed column" to index json properties is just a really ugly hack in my opinion and it feels like a cop-out to try to rush the feature out so they can say "Hey, guys, we can support JSON too!". Honestly, I could have just imported the JSON.NET assembly into SQL Server and written half of this functionality in a week or two - with no binary storage format and no indexes this hardly implements anything particularly useful. EDIT: The function smell is strong too, accessing nested values with JSON_VALUE is a lot uglier than Postgres' JSON operators, and shows a lot of inflexibility that T-SQL cannot seem to overcome. There's some nice features in SQL Server as a product, Analysis Services being one I am hard pressed to even consider replacing, but the Database Engine is getting long in the tooth for me.
We had a few people who had this problem. Try adding it as a feature in "add remove windows features". Also if you're on an internal network make sure they don't suppress unapproved updates from windows update. 
I totally agree. There's also this condescending bit in the post: &gt; We know that PostgreSQL has a native type and JSONB support, but in this version we want to focus on the other things that are more important (do you want to see SQL Server with native type but without built-in functions that handle JSON – I don’t think so :) ) For those who don't know, JSON was added as a datatype in PostgreSQL before any decent functionality came along to use the type. Over the next couple minor versions however, all the functionality you'd expect was released. SQL Server's release structure is entirely different and in this case I'd argue, I'd much rather have a semi-capable type that I can begin using now, and will grow over time, rather than be stuck forever with an "NVARCHAR, kindof, sometimes" type. Still though, I appreciate the development effort and this will drive me to adopt SQL Server 2016 as soon as possible.
Having used XML support in the past and platforms such as Elasticsearch I can see the benefit of this. JSON is less verbose than XML and if you will be always returning JSON you get to avoid serialization expense. Plus you get the ability to query and index on properties in the JSON. In the end there are better platforms to host this data but if you are forced to use SQL Server this could be a nice addition
That's interesting. I was planning on using EF, but inside of the data layer. What's the ideal way of using it?
Without trying to be too semantic, I don't think there's an "ideal" way to use EF. Or maybe a better way of saying it is, EF is designed for a myriad of use cases, so any of a number of ways can be ideal. I'm not sure of your experiences with EF, so an apology upfront if you already know EF.... The majority of my experience with EF has been "code first, with manual migrations". Code first means that all database objects are derived from my entity classes, and I construct the overall data model (foreign keys, indexes, etc) in code. Manual migrations mean that whenever I alter an entity class or the data model, I need to create a migration to apply that change to the data store. EF comes with tools that make this very easy. Additionally, the data module that you build with EF is a very LINQ/lambda-friendly repository. By duplicating the DbSet&lt;*Entity*&gt; declarations in an interface, you have a quick-and-easy injectable repository. *** screeech *** OK so I was Googling around to make sure I was using the right terms and found a great diagram on this page; it should help explain what I'm getting at: [Unit of Work](http://www.asp.net/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application) This is for MVC but the pattern holds for WebAPI. My advice is simply, evaluate whether you need a strong, abstracted divide between your business and data tiers. You can have dependency injection and unit tests without any moats. Spend your time *actually creating unit tests* rather than worrying over design. I would recommend MEF for your DI stuff, if you don't have a favorite already. (same human, different computer)
Eh, depends on whose reading it. JSON is better for machine-read data for sure, but if it is something that humans need to read and hand edit I still prefer XML.
Shh, don't tell anyone but SQL Server already has JSON support. I'm willing to bet that all they did was expose some C# based JSON functions via SQL CLR. That's why there isn't any new column types or JSON specific indexes.
That is exactly what I am doing right now. Only problem is that since I don`t know what my objects look like I had to write my own OData query mechanism (something I would love to delete). Lets hope the new microsoft reaches the EF team soon.
EF is open source now. I'm thinking about stealing the few bits that aren't totally retarded for my own data access library.
When I had this issue, that was the cause
Thanks I'll try it out and report back to you :) **EDIT**: It's error code "0x800f0922" not " 0x800f0906" so it was sadly of no help.
Sorry, I meant .NET Core. As you know Microsoft is working on making .NET cross platform and has plans to release versions of it for Linux and OS X as well.
I doubt it. DocumentDB is a different database system. Besides, storing json docs in a field and separately create an index on it isn't rocket science. 
First of all, your N-Tier is just logical or you plan to have several out-of-process services that interact together? Each solution has its own pros and cons.
I hate WCF. I've always hated WCF. I'm sure it has plenty of fans, but I'm definitely not one of them. I've written several different services in it now, and each time, it's always felt very 'clunky' and overly complex. Maybe I'm just a bad developer. :)
I have to agree. I don't do it enough for any of it to stick, so I almost always have to relearn it when it's time for a new service. I appreciate Web API much more
So far every release of SQL Management Studio I remember used Visual Studio Shell one version older than the current Visual Studio version at the time, so my guess would be "unlikely".
I you like reading Stephen King novels you'll love WCF config.
I'm not sure what you're implying here. WCF does not add 4 seconds of overhead.I'm sure most of that 4 seconds is something that's happening on the server side, or the amount of data you're transferring. We use WCF and calls are around 30ms including server processing(such as running database transactions etc). I don't have metrics for how much overhead is actually just WCF.
Eh, it's just a matter of rebuilding the computed columns. Not like we're talking about anything insane like CLR UDTs.
I've learned and promptly forgotten WCF more times than I can count.
Ahh, that's the problem. You don't have to use the XML. In fact, I strongly recommend that you completely forget that the XML even exists.
I think they just use whatever is stable at the point they decide to start developing new version so they don't have to cooperate with different department and wait for bug resolution etc.
A lot of my games and apps keep asking for 3.5. No idea why.
Yes! I tried recently to set it up by code and it's a lot cleaner, only downside is that the documentation/help is harder to find, but most of the time you can "translate" what was in the XML pretty easily.
I would rather they just expose SSMS as a set if VS plugins and be done with it. I'm tired of having to switch tools when going between SSIS and 'normal' SQL development. 
Yeah, I might consider Linux. Or Ubuntu. Any recommendations? :P
After discovering ServiceStack a couple years back right before they went from V3 (open source) to V4 (enterprise license required) I quickly lost all interest in WCF and WebAPI too. SS3 is just a thing of pure joy to build web services in. Especially compared to WCF. WebAPI is better than WCF, but it's not as feature rich as ServiceStack, and the client side code is a lot cleaner with SS than WebAPI too.
If you're in a position to use Web API you definitely should. If you're stuck using some other protocol, WCF will get you there... eventually. It's very powerful and can handle whatever bullshit non-standard configuration some corporate bozo decided to use for their service. The problem with that flexibility is that it needs to be configured and that requires knowing about a bunch of details that no one wants to be bothered with. It really doesn't help that this stuff is not well documented nor particularly well implemented. So I'll agree with you 90% of the time and be very glad that I don't have to scrape together my own solution manually the other 10%. For non-enterprise developers, there's pretty little reason to be concerned with WCF these days.
Actually most of the functionality I need in SSMS is already available in VS (View -&gt; SQL Server Object Explorer), but I still prefer separate tool.
Oh hey, now don't I feel foolish. Thanks. 
The autofac/dynamic proxy libraries work well for this.
It was fantastic compared to the alternatives at the time, soap. I despise it because every man and his dog thought adding a physically separate "service layer" was a good idea.
What is your front end? Is it a desktop or web app?
I spent a month last year trying to get authentication working correctly with an external company. I ended up doing it 5 different ways before they could finally get their client to authenticate. In fairness though, most of the trouble was from the incompetence of this other company rather than WCF. Regardless, authentication stuff is a pain in the balls. 
Web. MVC.
This is huge. I see a lot of WCF hate in the thread. I get it. WCF is klunky as fuck with a lot going on. But like most things, it probably is not used in the right places. For larger projects that require an API be exposed to multiple clients in multiple environments, it is a godsend. Coding one endpoint to be exposed over IPC with TCP and/or HTTP make the initial shitstorm of configuration worth it. Using it for a simple web service, not so much. WCF is not a good candidate to futureproof yourself against possible but unknown requirements that may or may not happen makes for a painful experience. If you choose WCF just in case your simple REST service that is only serving web clients might be used in a different way in the future, but you do not know if it ever will, you are gonna have a bad time. 
Client-server and vb6??? The common practice is vb6 was client-database, maybe with little data binding thrown in!
It's been a long time since I used soap but I remember growing to despise it, or at least the .net libraries and code gen for it. My "favorite" bug ever was when the soap libraries were automatically (unwantenly) adjusting dates for us to match time zones. If, and only if, the pc was set to automatically adjust timezones. Took forever to track down but eventually we got a second client in a different timezone with the correct desktop settings.
Personally I consider the first one much more readable.
You've forgotten about DCOM and COM+, haven't you? Or that horror known as DTC. I've also done client-sever using VB 6 libraries hanging off MSMQ Triggers.
It abstracts away a lot of things. It deals with sockets, pooling, concurrency, buffering, quotas, authentication and more. It's extremely complicated behind the scenes, but generally nicely designed. I mostly know the details of the server side code, though, which is not what was released here. 
I find that is a matter of formatting: var result = people .Where(p =&gt; p.Age &lt; 18) .SelectMany(i =&gt; i.Pets) .ToList(); Method syntax is clearer to me as you can see which methods are going to be called and in what order. But in my opinion, there just is no value in adding a `.ToList()` it beats the whole beauty of linq where you can chain several linq statements and defer the executed to the point where you need to iterate over them. For example: var result = people .Where(p =&gt; p.Age &lt; 18) .SelectMany(i =&gt; i.Pets) .ToList(); and now I say ops I only need brown pets var brownPets = result.Where(x =&gt; x.Color == "Brown").ToList(); This will iterate over all people and put it in a list. The second statement will iterate over the list and put the result in the second list. If you write var result = people .Where(p =&gt; p.Age &lt; 18) .SelectMany(i =&gt; i.Pets); and now I say ops I only need brown pets var brownPets = result.Where(x =&gt; x.Color == "Brown"); In this case actually nothing happens. Only when doing the `foreach` the people enumerable will be enumerated and you will only enumerate one time instead of 2 times. foreach(var item in brownPets) &lt;-- the linq statement is being executed here. { Console.WriteLine(item); } 
I don't care, I'd just like something that works with my retina display!
I agree. We are using MediatR with WebAPI and it has simplified our code considerably. Had to fight everyone on the team to do it because they wanted to go full on Enterprise As Fuck with everything. Now they love the simplicity.
Whatever piece of crap my current employer has bought for the staff... If I could use my Samsung aviv book 9 2014 then I would use that. It's pretty fast when all the battery saver stuff is turned off, light, touchscreen 1080p and has a great keyboard. I use it when I'm doing hobby learning programming instead of actual work.
Do you need an entire database instance for each of those sites? Are they small sites with minimal DB needs? If they will share the same database tables, then use some kind of partitioning scheme to separate data and use a multi-tenant design in a single instance. If you need different database tables for each, then you can probably just keep them all in one database instance with different schemas for each client. You only really should think about multiple databases if the volume demands it or if your client is willing to pay for it...
It depends on how often you use lambda expressions. I use them all the time, so both lines look just as readable.
No, it does not depend on that. I constantly use lambda expressions.
You will have to define the visual template for the items in your treeview and adjust the indent accordingly. Relevant [stackoverflow](http://stackoverflow.com/questions/13649183/wpf-tree-view-how-to-change-indention) post
Ask a developer you know to review your code. If you don't know any other developers, go make some new friends at a local meetup. Otherwise, you can try [Stack Exchange's Code Review](http://codereview.stackexchange.com/) site, but it will be fairly impractical to try to get an entire app reviewed there.
Welcome to the early 2000's!
I'm not a WPF programmer (Windows Forms, primarily) but if there's only one level to the "tree" then maybe using a ListView with a ListViewGroup might be a better UI solution.
What you're looking for is the [Accordion](http://blogs.u2u.be/diederik/post/2010/02/20/How-to-play-the-Accordion-WPF-Toolkit.aspx) control.
Foundation. It isn't perfect, but for me it is more of a framework. I've found it much easier to work with. We use it for a set of templates in an enterprise CMS and somewhere around 100 sites use those templates. On top of that, they also have Foundation for Email (formerly called Ink) and Foundation for Apps (based on AngularJS). So you've got a whole suite of frameworks that share a lot in common. Foundation 6 is just around the corner and it will feature some pretty good enhancements as well. They both have their uses. It really depends upon the project and what you're looking to do. I've got pretty extensive use with both, so if you had specific questions I might be able to be more help. 
Bootstrap comes with MVC. Bootstrap has a larger community. Bootstrap has many more free templates and styles. This is dotnet. Just use Bootstrap and then hire a front end guy if you need to.
If you're an average dev who's going to spend their career gluing components together, Bootstrap. If you are willing to work to get a unique look and feel, Foundation. But boy do you have to work for it, it is literally just that, a Foundation.
That's actually a really good way to do it, albeit a little douchey. Simply asking someone will most likely not make them give you all the details they're thinking. Telling them your opinion as fact will make them want to prove you wrong.
na, its about 5K now.
Thanks! I didn't end up using this for now but its great to know its there, I will likely use it for my next project! :)
Glad to have helped.
or should I say, this.Totes();
There are a *shit* ton of differences. I have no idea why you cherry picked those few. Also, why compare VS 2012 to 2015? Why not 2013 to 2015? This is shitty article.
Agreed. This article has very low quality.
Anywhere that puts "codes" instead of "code" is always a bad article.
Thanks, getting that reference added got rid of that error! It is erroring now when trying the "AddHook" method though: "System.NullReferenceException occurred but was not handled in user code." Public Sub New() ' This call is required by the designer. InitializeComponent() ' Add any initialization after the InitializeComponent() call. hWnd = New WindowInteropHelper(Me).Handle Dim source As HwndSource = PresentationSource.FromVisual(Me) If IsDBNull(source) Then Throw New FormatException("Could not create hWnd source from Window") source.AddHook(AddressOf WndProc) End Sub Protected Function WndProc(ByVal hwnd As System.IntPtr, ByVal msg As Integer, ByVal wParam As System.IntPtr, ByVal lParam As System.IntPtr, ByRef handled As Boolean) As System.IntPtr If msg = Messages.WM_HOTKEY Then MsgBox("hwnd=" &amp; CStr(hwnd) &amp; vbNewLine &amp; "wParam=" &amp; CStr(wParam) &amp; vbNewLine &amp; "lparam=" &amp; CStr(lParam)) End If Return IntPtr.Zero End Function
I'm guessing source is null because the window handle isn't created yet in the constructor. The `IsDBNull` check isn't working because that's meant for [something else](https://msdn.microsoft.com/en-us/library/system.dbnull%28v=vs.90%29.aspx) and not for general null/Nothing checks, use `Is Nothing` instead.
Is this what entity framework uses when I use .skip.take?
That did it, it compiles and runs fine. I just have to tweak the logic for catching the hotkeys now. Thanks!
I've updated the original post with my updated config and the screencap.
Please do post faster way for basic pagination.
Here's the article that taught me the error of my ways, http://use-the-index-luke.com/no-offset
Wow, those DBA guys, they really have no idea how to write. Spent 2 minutes glancing very hard, still no idea what they're on about. :O Now when software developers write a document, it's really easy to get big picture after half a minute and then to zone in to specific gritty details you're not familiar with in the article. PowerPoint presentations, ironically, never get the point across. :D
My apologies, that was the wrong link. This is the one I meant to offer. http://use-the-index-luke.com/sql/partial-results/fetch-next-page No wonder the other one was confusing, it assumed that you already read this one.
I think you need to install new connectors to allow them to show up in the Entity Data Model Wizard. The wizard - as far as I know - isn't reading from the config. It might write to the config as part of the data setup, but the wizard itself is a Visual Studio tool/plugin that is managed apart from the solution/project. Start here: https://msdn.microsoft.com/en-us/library/bb163935.aspx and here: http://dev.mysql.com/downloads/connector/net/ Edit: Sorry, I overlooked the comment about installing the connectors already. I think historically the MySql connector has been a bit buggy. Some users reported having to use older versions to get it to work, others had to do clean installs (make sure you don't have any older versions of the connector). On the connector download page they do have this warning: "Starting with version 6.7, Connector/Net will no longer include the MySQL for Visual Studio integration. That functionality is now available in a separate product called MySQL for Visual Studio available using the MySQL Installer for Windows"
Thanks . This i will add in my blog that this is good when you are doing changes in test or developer edition. But for production it should not be used or used very cautiously
It's a bit delusional to think that lack of Mono support will kill Unreal. The graphics fidelity and performance Unity offers doesn't come close to Unreal, and Unreal is the only triple-A quality graphics engine which is accessible to small or indie developers. They're both fantastic engines but they do different things. They're not really direct competitors. 
Perhaps with ef7?
The cry engine is also available, just not free. Also the upcoming source 2 of course. 
Not sure of an answer, but curious why it matters?
Support for self-closing tags was added in the beta4 release - https://github.com/aspnet/Mvc/issues/1739. What version are you using?
True, but that pushes the logic to the client side to track, increasing complexity. That is time that could be better spent, preferably on things that prevent the need to page in the first place. 
"makes more sense" is subjective. It's not required by the standard, so it's a useless piece of information. Some would argue it makes sense to remove useless code. And HTML is not XML.
Recycling the app pool is not a good way to do this. Why not just [limit the size of the cache](http://stackoverflow.com/questions/5547003/is-there-a-way-to-enforce-a-size-limit-of-memorycache-in-system-runtime-caching)?
TopShelf
Why can't you just close your tags? I think if you've done a lot of xml/xhtml it comes naturally, personally I have to think to *not* do it, for exceptions like script (when referencing src). 
It's pretty close though. I was a fan of xhtml. From a parsers perspective, it's better to know for sure that a tag is closed than have to keep looking out for its closing tag. 
Why "keep looking out for its closing tag"? There aren't many elements where it's allowed to have no closing tag, and those are just inline-elements.
Oh so you're closing your other tags? I guess it just makes more sense to me to consistently close all tags rather than change back and forth. 
[The spec](http://www.w3.org/TR/html5/syntax.html#void-elements) says that the trailing slash may be included, but is not required.
I like [hangfire](http://hangfire.io/) a lot better lately.
It depends if you want to travel and get free stuff or if you actually want to learn something. Many of the bigger events are glitzy but weak on depth (many 100-level sessions). I've found the smaller events like CodeMash, DevLink, and similar events to be more valuable in terms of time and money spent. Also check for meet up groups in your area as they will be a place to start and find out about more things in your area. 
4 answers so far, each completely different and each one of them is absolutely brilliant. It's a good time to be a developer.
Unfortunately, it looks like last year's conference was their last conference. http://www.johnkellar.com/2015/02/farewell-to-the-devlink-technical-conference/
Depends on where you are, but there are lots of fantastic regional conferences. Here are a few that I know of: - [Kansas City Developer's Conference, Jun 24-26](http://www.kcdc.info/#!/) - [Codestock (Knoxville, TN), Jul 10-11] (http://www.codestock.org/) - [That Conference (Wisconsin Dells, WI), Aug 10-12] (https://www.thatconference.com/) Hope to see you at one!
This is very helpful but not really necessary now - the latest version of Mono installs pretty easily on OSX and supports ASP.NET 5.
I was starting to think I'd missed a trick there. Is there a point doing both....
Ah, sorry meant to say, that can be installed with the DNVM.
&gt;Unfortunately, compiling managed code (easily) is still a bit out of reach for the current level of OS X support. To compile the C# code we write here, we will be relying on Mono, a long-standing project that has run for a decade, trying to bring a fully api-compatible runtime for .NET to Unix derivants. It's still at that Frankenstein stage but it is definitely looking very promising. Hopefully the tool chains will start to catch up and further development will make compilation simpler.
This will be my second year going to THAT Conf. I really enjoyed it. It isn't a huge conference (but big enough). It is held at an indoor waterpark (seriously) and they rent it out for an entire night. Plus it is super cheap (like sub-500 cheap). The keynotes also tend to be pretty darn good as well. As I said, the guy who runs it (Clark Sell) used to work at MS and is well connected in the industry.
If you want closeable headers use Dragablz. https://github.com/ButchersBoy/Dragablz 
Many in the .net world used to claim that javas huge ecosystem of libraries and tools was a weakness. There was utter contempt for oss libraries. Now we're in the same boat.
Cross platform CLI is, but whether it's Mono or Microsoft CLR is slightly less :)
The attitude was that Microsoft had exactly one way to do anything and that's all we need. People thought EF and MVC were revolutionary even though the .net world already had great ORMs and mvc frameworks available. This is why groups like alt.net sprung up. Just getting adoption for these fantastic tools was a challenge. 
I suppose my earlier point reigns even more true. .net has always been powerful but now properly leveraging the availability of brilliant libraries has made it an absolute powerhouse.
Agreed. I give nuget most of the credit for this.
Do you mean having a close button in the tab itself? I haven't actually implemented anything like this myself, but you could probably do something like this, assuming that your view models are all in the same list: &lt;Button Content="Close" Command="{Binding CloseCommand}" CommandParameter="{Binding}" /&gt; Your close command could be pretty simple: private void Close(object parameter) { this.YourListOfViewModels.Remove(parameter); } This is untested mind you, but it should work. 
Have you had a look at the default database which was generated after you built your MVC project. It will contain a users table. I would suggest added the two tables you had in mind into that database and then adding an edmx (entity framework model) to your project (add those tables into your edmx). You can then have a play around with using linq to entities to pull or save data to your database. Do you understand how the routing to controllers / actions work? Say for example you load the page mywebsite.com/home/index. The controller is home and the action is index. Within the index action you can call your database via context and pass any information you need to your view. In a standard post back your action will be prefixed with the attribute [HttpPost]. Here you can retrieve any data from the posted model which you can then save into your database. All I've said here is very brief but hopefully you can already tick off some of questions which you would really need you to know before moving on. I think once you understand controllers / actions, forms, and how to pull and save from the database (with linq to entities or ado), you should be able to write what you want. Give me shout if you have any questions.
There are multiple ways to go about this. I haven't played around much with the new(ish) identity APIs yet, so realize that part will be missing in my post. MVC is design pattern for controlling HTTP Request handling. The below would work regardless of your frontend API (IE a unit test project or console app). Coming from PHP/mysql, where you're probably used to ripping into a database and running queries, you could feel at home using the `System.Data.SqlClient` namespace; mainly `SqlCommand`. This will allow you to manually do CRUD operations as you would expect. You open the connection, run a SP or query and read the results. This would (most likely) require a database and relevant schema to already exist (unless you write the commands to set it up). If you'd like to take a more common "ASP.NET" approach, start learning about the EntityFramework and Code-First data modeling. You can get started easily by loading up the EntityFramework via the NuGet package manager (`Tools &gt; NuGet Package Manager &gt; Manage NuGet Packages for Solution`). This allows you to code the model you want to store and use providers to handle all the actual SQL "authoring". There are a ton of resources put out there by Microsoft that I suggest you tap into... * [ASP.NET](http://asp.net) * [EntityFramework](https://msdn.microsoft.com/en-us/data/ee712907) * [Scott Hanselman](http://www.hanselman.com) * [Channel9](https://channel9.msdn.com) * [Build](http://www.buildwindows.com) - a conference, but the videos are usually pretty awesome
I'm trying to avoid manual CRUD and hoping to use EntityFramework and code-first data modeling. I will review these links - thanks! 
Sorry - to be more clear- does identities help with the group piece, or JUST user authentication? 
It can help with the roles. Here's a good overview. http://typecastexception.com/post/2014/06/22/ASPNET-Identity-20-Customizing-Users-and-Roles.aspx
Excellent! Once you get your feet wet you may want to check out other ORM projects like [NHibernate](http://nhibernate.info).
We had one of our devs create a oauth provider for active directory. That took care of authenticating against AD but using OAuth tokens. You could also externalize this into a separate server component (more below). You can then override Claims AuthenticationManager in system.security.claims to make a call to your role db using the username claim value as the query criteria. Take all of the rolls and add claims for each as a claimtype.role. This will allow you to use the AuthorizeAttribute with the Roles property. This doesn't let you flex the full power of OAuth because it is embedded in the app. If you decide to externalize the oauth provider, look at Thinktexture identity server and thinktecture identity model. Thinktecture identity model also adds a different way of doing authorization which is more like a policy than a simple role check, which makes the security more portable if you need that.
Just to clear up a few things. I didn't mention extending Identity because I've read it can be somewhat complicated and I haven't done it personally yet so I couldn't really share any insight on that. I know it can definitely be done though. I suppose you would like to extend Identity to contain the group(s) which that user belongs to. You mentioned you thought that it was possible to add tables from the entity model to the database. I believe this is called code first. Again I haven't done this too many times, I generally just stick to modifying the database and then updating the edmx. But which ever way you choose should be fine.
Use ViewBag in the controller method: ViewBag.Message = "Hey there"; Then in the View, you use razor to show it &lt;span&gt;@ViewBag.Message&lt;/span&gt; You can send any object to the view using the ViewBag though you'll have to cast it sometimes.
Brilliant, I've let my colleagues know about this now
You'll need to take a look at documentation on the RoleStore and RoleManager classes, they're part of the Identity package. public static void Seed(ApplicationDbContext db) { var roleStore = new RoleStore&lt;IdentityRole&gt;(db); var roleManager = new RoleManager&lt;IdentityRole&gt;(roleStore); var userStore = new UserStore&lt;ApplicationUser&gt;(db); var userManager = new UserManager&lt;ApplicationUser&gt;(userStore); if (!roleManager.RoleExists("Admin")) { roleManager.Create(new IdentityRole("Admin")); } if (!roleManager.RoleExists("User")) { roleManager.Create(new IdentityRole("User")); } This is a fairly common way to set it up. Obviously there'd be more going on further down such as creating a user and adding said user to said role if you so desired, but this by itself will create roles and add them to the role table in your database.
Can I suggest that you start with something that doesn't involve user and roles? The "best" way to handle this in .net seems to change every other week. A lot of the information you find will be outdated and/or misleading. I still get confused by it.
Thanks u/realzequel This is whut I went with: In the Controller: At the class level: public static List&lt;string&gt; resultsMessages = new List&lt;string&gt;(); Default message in the method ViewResult Index () if (resultsMessages.Count() &lt; 1) { resultsMessages.Add("Processes messages go here"); } ViewBag.Message = resultsMessages; In the ActionResult ResetData() resultsMessages.Clear(); //Stuff resultsMessages = tdh.DataLoader(db, myScenario) return RedirectToAction("Index") In the View: &lt;span&gt; &lt;div class="validation-summary-errors"&gt; @foreach (var item in ViewBag.Message as IList&lt;string&gt;) { &lt;p&gt; &lt;strong&gt;@item&lt;/strong&gt; &lt;/p&gt; } &lt;/div&gt; &lt;/span&gt;
You didn't need a partial view.
The best practive would be to create a view model with "ListOfScenarios" and "Message" as properties and pass that to your view. ViewBag is a big no-no IMO. Using a view model makes the code cleaner.
I see what you mean. I'll create a ticket. This will get me by for a demo.
This. Is exactly why I don't use it. Plus some things seem pretty pricy, $6/per user, per month for AD?
The screen is OK if you get one of the upgraded options (check Lenovo's web site for details, it's worth the extra money). That being said, the one. I use the X1 for work but it is still not my MBP Retina, I haven't seen many that compare to it other than the Surface Pro 3 (I'm sure there are other good ones, I just haven't seen them). I used it primarily before the X1 but ran out of storage on my Bootcamp partition and didn't have any extra to give it. Worked like a charm though.
Edited - Thanks!
Thanks for this. Yea, the attribute will solve it. I have also found a simple way of solving the problem as well, but I might run the risk of throwing a DataReader error (multiple queries at once and I'd rather not enable MultipleActiveResultSets (I posted the solution in another edit). For the first problem though, let's assume that a book can only have a single author, but an author can have many books. I'm still really interested in if it's possible to select multiple matches on the LINQ join! Fascinating! 
You are correct, the entire state is read/written. Keep this in mind if you're storing large data in your session state. Also serialization is binary from memory, which unlike the improc means anything you put into the cache needs to be marked as serializable. There can be quite a performance hit moving from inproc so plan wisely if it's not a greenfield project.
If you change WBPL.drawPixels to take a collection type that supports covariance then you can just pass the pixelCurve list to it without casting. IEnumerable&lt;T&gt; supports covariance, so just replace drawPixels(ref WriteableBitmap a, List&lt;pixel&gt; pl) with drawPixels(ref WriteableBitmap a, IEnumerable&lt;pixel&gt; pl) The function only foreach's over the list so changing the type of the parameter shouldn't affect the rest of it.
For work I've been using a 13" MBP and run Windows in Parallels. For home use I still use an Asus 15". And to be fair, I really don't like the keyboard on the MBP... missing too many keys that are useful and the keyboard shortcuts tend to be nonsensical sometimes (command-shift-4 for area screenshot as an example).
I can think of one off the top of my head or googled for that matter. The best thing you can do is create that new app, get it working, and then slowly move code into your application in test and figure it out. Sorry man, but document it so that when you figure it out you can create that article your are looking for :)
Shouldn't you define roles by their ability?
A role's abilities are defined elsewhere. For example, I could define a role's ability by making it so you have to have the role to see a link, or I could limit your access through the controller based on your role. So on, so forth. I used admin and user because it's a simplistic approach and was quick to write out.
That's exactly what I'm not looking for - it creates the tutorial based on making a new app
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/mistyfront] [Hey ASP.NET developers, help Microsoft build a better cloud for your applications and data (/r/dotnet)](https://np.reddit.com/r/mistyfront/comments/37mny1/hey_aspnet_developers_help_microsoft_build_a/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
Just a minor point: https://msdn.microsoft.com/en-us/library/dn169389%28v=vs.110%29.aspx &gt; X DO NOT use ArrayList or List&lt;T&gt; in public APIs. &gt; These types are data structures designed to be used in internal implementation, not in public APIs. List&lt;T&gt; is optimized for performance and power at the cost of cleanness of the APIs and flexibility. For example, if you return List&lt;T&gt;, you will not ever be able to receive notifications when client code modifies the collection. Also, List&lt;T&gt; exposes many members, such as BinarySearch, that are not useful or applicable in many scenarios. The following two sections describe types (abstractions) designed specifically for use in public APIs. so as /u/Eddie-Monsoon suggests, try this as a method signature: drawPixels(ref WriteableBitmap a, IEnumerable&lt;pixel&gt; pl)
Does this media library simply index files on a local file system and grab metadata about them? What is the use-case where you need to save files to a file system (and ultimately a CDN)?
Rare. If you find one, and they want you, do whatever it takes to get and keep it...
It depends on how much experience you have. Having previous remote work experience also helps too. I have about 10 years of .NET and 3 of remote work. I have no doubt I could find another remote gig if I wanted. Keep an eye out on https://weworkremotely.com/ for opportunities
In your case you should be using GroupBy and not Join. Here's how to do get all authors with their books: var BooksPerAuthor = library.Books .GroupBy(p =&gt; p.AuthorId) .Select(p =&gt; new AuthorVM { Author = library.Authors.Find(p.Key), Books = p }); var BooksOfAuthor = BooksPerAuthor.FirstOrDefault(p =&gt; p.Author.Id == id); I personally haven't used join at all in linq. Join is a way to merge data into tabular data. You don't need tabular data in c# because you can have better structure. You should look at .SelectMany and .GroupBy. With those two you will rarely use join as well.
Thanks for this! I'll definitely check it out.
Urgh
You could look into Cairo, a 2D open source drawing library. Example with C# and mono: http://www.mono-project.com/docs/tools+libraries/libraries/Mono.Cairo/tutorial/
I haven't used .Net core specifically; is there some limitation in regards to binding to external libraries?
You just need to add a reference to System.Drawing. The web server doesn't care what assemblies you load. 
There is no assembly that provides System.Drawing in ASP.NET 5.
They host the new cross platform asp.net 5 already?
No, it's 4.5, but I just tried it locally and it works in 5 too. Of course, it's still referencing .net framework (not just core) which is why I said you'd need Mono if you want cross platform. 
Mongo db works perfectly fine with .NET http://docs.mongodb.org/ecosystem/drivers/csharp/ Don't change your application because of a piece of tech. There's usually a way of making it work. 
Do you actually have a use case for mongodb or are you just using it because it's a shiny new piece of tech?
Because you talk about cost I'll assume that you are using Ms SQL server. If you just want to switch to a free alternative, I would suggest to use Postgres or MySql. Two great OSS relational databases. For which both are good drivers available for dotnet. If you are really looking for a nosql solution, you can just use the dotnet drivers for mongodb or other nosql dB's. No need to switch language at all.
I haven't found any except that ICustomMarshaller (and all related stuff) is missing.
If it supports [DllImport], it should be usable. Cairo is a C library; it's not managed or COM.
MantisBT is pretty easy to setup. I had it done in an afternoon ( at most) at the job I just left. PHP on IIS was pretty simply to do, and we'd been using mantis for 3 or 4 years now. Guess it's not really we anymore, but you get the picture. http://www.mantisbt.org/
Fog Bugz has a free single user / single product package, and it's hosted. 
Damn... I've actually used Trello before one of the developers at work used it when he was heading one of our projects. I'll have to look into it it seemed like it worked well. Edit: This one wins... I had a list of apps that I didn't want to write but thought I might have to because I needed them. This was pretty much #1 on the list. 
You can use [Visual Studio Online](https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs.aspx). It's basically hosted TFS instance from Microsoft. It has the same features as the TFS your used to using at work, i.e. source control, work items, sprints, product backlogs, etc. The only limitation is the free version is limited to concurrent 5 users, though this shouldn't be a problem for your scenario.
 I use [VS 2012 TFS Express](https://www.microsoft.com/en-us/download/details.aspx?id=38190) and it works great for my personal projects. 
This is true and it is OSS which is nice. BitBucket I believe also provide 5 free private repos as well. 
I have been using this for my for my source control for more than a year now. It's awesome, you can even choose between GIT and TFS. Also we are less than 5 devs and have not paid a penny.
private repos are like 7$ a month
Asana is free.
Tfs express is free
You could use a library like [SimpleAuthentication](https://github.com/SimpleAuthentication/SimpleAuthentication) instead of building the functionality yourself. 
It very well could be. ... It's been a few years since I signed up, and I couldn't remember what the limitations were (but knew they were fairly low, and they could have changed). 
Thanks slappy1. Because the big recruiting shops usually don't have much workspace available then it will be better to target them. Are you expecting an increase in demand because Microsoft now is open source? 
What is the relationship between dnxcore50 and mono?
Is this site for US citizens only?
Agreed, usually. In this case, definitely.
thanks for sharing your experience and some good advise. Thanks
Does Junior .Net MVC Developers have a change too?
Is there a reason that you need to switch the existing context instead of instantiating a new one that points at the other database? If so is likely there's an easier way to do what you're trying to do.
all I need to do is to be able to change the server name at runtime.
Just ask your questions.
Done
Just remember trello follows the less is more approach. For our team it does about 70% of what we want and 85% of what we need. I find this better than most issue trackers that do 300% of what we need and forcing all that complexity on us.
/u/thornsten is right, you don't need to change the connection string, you just need to construct the db context with whatever connection string you want.
It depends on the employer but I bet most would consider hiring outside the US
Why would you use dnxcore50 then? Mono already does more and is cross platform already.
Solr is a good choice.
I agree, check them out, but I don't see the point to using NHibernate anymore.
I have an application that I will need to install at about 70 sites. The only thing that changes at these sites is the server name. The rest of the connectionstring stays the same. Should I be looking at another way to set the connectionstring?
I have an application that I will need to install at about 70 sites. The only thing that changes at these sites is the server name. The rest of the connectionstring stays the same. Should I be looking at another way to set the connectionstring?
So why does the context need to change at runtime? Can't you just configure the context with the correct connection string for the location to start with?
Your installing the site as 70 separate applications? If so have a separate web.config in each one. It it 70 sites running as a single application? Then you need to construct a new db context every request depending on the url or whatever you use to discriminate each site.
Avoid MySQL when using EntityFramework. The connector is utterly broken.
One overload of the `DbContext` constructor accepts a connection string. You should pass it here, as part of the construction. You're trying to change the connection string **after the context was created**. Don't do this.
I too was just at angle brackets. There was a lot of really good info on what's new in the MS stack, but if you're looking for depth I would recommend taking a class in one particular area (MVC, etc.)
Looks like there are some other commands you can pass, here's an MSDN example: https://msdn.microsoft.com/en-us/library/ms229716(v=vs.110).aspx
Small world, I did this yesterday. I used regular expressions with groups. ^(?&lt;dir&gt;[\-ld])(?&lt;permission&gt;([\-r][\-w][\-xs]){3})\s+(?&lt;filecode&gt;\d+)\s+(?&lt;owner&gt;\w+)\s+(?&lt;group&gt;\w+)\s+(?&lt;size&gt;\d+)\s+(?&lt;timestamp&gt;((?&lt;month&gt;\w{3})\s+(?&lt;day&gt;\d{2})\s+(?&lt;hour&gt;\d{1,2}):(?&lt;minute&gt;\d{2}))|((?&lt;month&gt;\w{3})\s+(?&lt;day&gt;\d{1,2})\s+(?&lt;year&gt;\d{4})))\s+(?&lt;name&gt;.+)$
Would you be able to share the actual code used? I am not that good at regular expressions and your regex there makes my eyes bulge.
It would be difficult, it's split up among many classes. But here is the gist: Create a new Regex using that in the constructor split your ftp listing by Environment.Newline for each line do a regex.Match if (match.Groups[regex.GroupNumberFromName("dir")].Value == "d") you have a directory if (match.Groups[regex.GroupNumberFromName("dir")].Value == "-") you have a file Obviously you can just look at the first character in each line to do this, the point of the regex is it gives you all the other information about the item such as permissions, date, size, etc. It's all in the groups.
Awesome. Thank you sir! Your help has been tremendous.
I'm looking at this and not quite understanding what you're trying to do with it. I thought if anything this would be all the tests failing and then you write code to make them pass - which in my opinion would be pretty fitting to teach someone how test-driven development works. But that's not what this is...
I learned most of my vector, matrix and quaternion math using this method. It works very well, though it does not necessarily teach you to write good code. It's a great way to provide direct feedback. Right away I know I did something right or something wrong based on the tests. As u/Eldorian mentioned, it's also a great way to show how test-driven development works by writing the tests first.
can you tile your workload up? split your bitmap into n pieces, sort your datapoints according to the bitmap tile they will affect, run n threads to render your data into the n bitmap tiles, put everything together, render the datapoints that affected the edges of more than one tile 
that was it thanks
And I thank both of you for you hard-work, glad to see these projects are still getting updated.
Do you have a firewall on production? 
Thank you for taking a look at it. If you think there is something that needs to be added, feel free to let me know, even more, I can make you admin and you could add that yourself, to avoid Pull Request if you prefer. One of my main goals is to make this community-driven, that way everybody learns
Thank you for your comments, I plan to add more topics soon (Lambda, LINQ, etc), very interesting to know that a similar method helped you with vector,matrix and quaternion math.
Good project too, I wanted this project to be very specific to C#, and I think it is easier to run, thanks for sharing.
This has literally nothing to do with .NET. Try posting in /r/sqlserver instead. I *was* excited by the title though. I thought maybe I would learn some new SQL syntax that I was completely unaware of. Alas, the script just generates all of the individual DROP TABLE commands. 
You're right. I was told this was needed due to the httphandler, but the problem was actually with certificates. Once I opened visual studio as admin the certs started working. I reverted the changes I made to the httphandler and everything looks like its working now. Thanks!
So, in your App_Code folder, add a file called SharedFunctions, with the following: Public Class SharedFunctions Public MustInherit Class MyMasterPageControllingClass inherits MasterPage 'all your special master page stuff here. 'Now. let's say you want to access a label in the master page. Add a method like this: Public MustOverride Function MyFunkyLabel() As Label Public Sub SetFunkyLabelText(s as string) Me.MyFunkyLabel().Text = s end sub End Class Public shared Function MM() as SharedFunctions.MyMasterPageControllingClass Return DirectCast(HttpContext.Current.Handler, Page).Master end function End Class ________________________ Change "System.Web.UI.MasterPage" to "Inherits SharedFunctions.MyMasterPageControllingClass" in your master page code-behind. Hit Enter. All the overrides you defined in MyMasterPageControllingClass will show up. In this example, put: Public Overrides Function MyFunkyLabel() As Label Return Me.Label1 End Function ____________________________ Add the following to your web.config in &lt;system.web&gt;&lt;pages&gt;&lt;namespaces&gt; &lt;add namespace="SharedFunctions" /&gt; You'll have to clean and rebuild for this to kick in. ________________________________ Now, in any derived page, just use MM. MM().SetFunkyLabelText("So there!") ___________________________________ That's basically the gist of it. 
The RoutedEventHandler is the following signature: public delegate void RoutedEventHandler(object sender, RoutedEventArgs e) So if you want to call your eventhandler through that, you're going to need to change your signature on fgPick_ColorChanged to private void fgPicker_ColorChanged(object sender, RoutedEventArgs argsOrWhatever)
But basically yes, a cast will be necessary? I haven't attempted an implementation of what you've said yet, I'm waiting for ReSharper to finish fixing the namespace hell that is this project. While I'm waiting, I figure I may as well be a little more clear about exactly what I'm trying to accomplish. I have the following master page, SomeMaster.master.vb, which looks like this: Partial Class SomeMaster Inherits System.Web.UI.MasterPage Public Property SomeTextBox() As TextBox Get Return txtSomeTextBox 'LOL hungarian notation everywhere End Get Set(ByVal value as TextBox) txtSomeTextBox = value End Set End Property End Class I then have a page, SomePage.aspx that looks like this &lt;%@Page Language="VB" AutoEventWireup="false" CodeFile="SomePage.aspx.vb" Inherits="SomePage" MasterPageFile="SomeMaster.master" %&gt; &lt;%@MasterType VirtualPath="~/SomeMaster.master" %&gt; With a boilerplate code-behind file, currently inheriting from System.Web.UI.Page. I'd like to have it instead inherit from MyCommonBaseForStuff.vb, which would inherit from System.Web.UI.Page. I can set the MasterPageFile in the OnPreInit(...) function, but not the MasterType directive. The solution I believe I'm going to go with is just having a private field that is a direct cast of the Me.Master to SomeMaster and accessing the Properties through that. Thoughts?
Yup, that's seems to be exactly the issue I'm coming into trying to do what I said. It seems that the master page's namespace is innaccessible? It could just be that this project has an interesting take on Namespace structure in general, and I don't find the way VB.NET does it's non-explicit Namespacing particular great. I went ahead and extracted all the public methods as an abstract superclass (Thanks ReSharper!) and it seems I'm good to go. Thanks for the help!
When will version 1.2 be released?
You can still write your backend in WebApi but there is just too much joy to be had with frameworks like Angular on the front end
Oh! Thanks for letting us know about the API issues with List.
DNX, VS Code, Roslyn, ASPNET5, EF7, Win10 as platform, Office iOS/Android, Universal Apps, Hololens, F#, Omnisharp, Azure App Service, Satya (lol), Scott's, Anders &amp; Co., .NetNative, +OSS, TypeScript, open source docs, Docker for Win, Nano Server... . I remember when i started with C++, then PHP, then Perl, then Java, then JavaScript... then i learnt C# with VisualStudio(and VB), was the most pleasurable and fun experience i ever had with programming... used osx and linux for years, but have never had such a great/complete experience than with the MS Dev platform. With all the *open source* initiative the platform is becoming *beautiful for startups*, and even more for the enterprise that are already on it. . It's just beginning, this is a new Microsoft \o/
The idea behind the project was formed years ago. I found the repeated boiler-plate of maintaining collections very dull and since every application I encountered required me to maintain and query collections I decided to abstract the concept. The idea is you have a source of data which is observable. As the observable source changes the observers perform an action and provide their own notifications. From this simple idea I evolved a whole heap of operators which enable filtering, sorting, transformations, grouping, binding to name a few of the basic operators. More advanced operators allow collections to be combined with logical and, Or and Except operators. Then there is another class of operator which allows data visualisation and paging.These operators are fluent and can be chained together to create very sophisticated dynamic queries with very simple and easy to understand code. All this allows for the declarative querying and manipulation of collections with very little code. I have a demo project (see [https://github.com/RolandPheasant/Dynamic.Trader](https://github.com/RolandPheasant/Dynamic.Trader)) which I have created where I take a single source of trade data and spin about 10 screens from it. Each screen serves an example of the power of directly manipulating collections using dynamic data and if you look at the code behind you will see there is very little code. Although the example is WPF based dynamic data can be run in most c# processes (not Silverlight). As for it's history, Version 1 was written in 2008/9 for a work project and was based on standard .Net events. Version 2 I wrote as a private project in my own time using Rx when it first came out. However this was never open sourced as my understanding of Rx was flawed. Version 3 was also written in my own time and later open sourced. And yes it is used on several work and private projects 
I asked in the main Gitter forum: maybe this month, depending on getting a few bugs killed off.
Funnily enough I write WPF apps by day, but have always kept an oar in ASP &amp; web stuff...but now I actually prefer writing Node.js to ASP. Although I just pushed a Node site to Azure which was an absolute breeze. vNext basically looks like node/npm, so I guess that's a good thing. Basically, I hedge my bets all over the place :) Still not sold on Win10 apps, but desktop enteprise apps are still a very feasible way to make you salary.
Thank you for the reply. I asked because often libraries and framework are created out of whim of the author without them really going through real world scenarios beyond the "amazing hello world" :)
If you can develop for vNext you could easily switch to Node if needed. Problem solved. PS And don't forget that some people are still doing new research projects in COBOL so the concept of "dead ecosystem" is an overestimation
ASPNET5 is another reset to Microsoft's web stacks. Now as a .NET web developer you have to deal with at least three .NET web stacks.
I laughed at point 2. If MS puts out a revolving door of technologies, then web dev must be a whirling blade of death. The half life of MS tech is around 5 years, for web dev, it is closer to a year. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**False sharing**](https://en.wikipedia.org/wiki/False%20sharing): [](#sfw) --- &gt;In [computer science](https://en.wikipedia.org/wiki/Computer_science), __false sharing__ is a performance-degrading usage pattern that can arise in systems with distributed, [coherent caches](https://en.wikipedia.org/wiki/Cache_coherency) at the size of the smallest resource block managed by the caching mechanism. When a system participant attempts to periodically access data that will never be altered by another party, but that data shares a cache block with data that *is* altered, the caching protocol may force the first participant to reload the whole unit despite a lack of logical necessity. The caching system is unaware of activity within this block and forces the first participant to bear the caching system overhead required by true shared access of a resource. &gt; --- ^Interesting: [^Kathryn ^S. ^McKinley](https://en.wikipedia.org/wiki/Kathryn_S._McKinley) ^| [^Transactional ^memory](https://en.wikipedia.org/wiki/Transactional_memory) ^| [^Hoard ^memory ^allocator](https://en.wikipedia.org/wiki/Hoard_memory_allocator) ^| [^OpenMP](https://en.wikipedia.org/wiki/OpenMP) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+crsyf3u) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+crsyf3u)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Always money in such a rich enterprise ecosystem, and that pays pretty well too. Any engineer that only lives a single stack is sealing their fate. Like an investment adviser would say, always diversify. Learn node.js, Go, and whichever other stack makes sense. And use Windows, Mac, Linux -- all the things. Don't be a silo. 
If you want to leverage legacy code in Java, but develop in .NET then have a look at iKVM.NET. http://www.ikvm.net/ It saved me from six months to year of hell in Eclipse.
&gt; Not terribly different from what you will get with Mongo Exactly. There are a dozen database options out there just as good as RavenDB (or better), which have license terms friendly to both open source *and* commercial projects. RavenDB (and even its client libraries!) are licensed under the GPL, which is an absolute deal-breaker for many enterprise shops. Why invest a lot of time into mastering something, when its not all that different from numerous other options with more attractive terms and more companies willing to use it? You can charge money for a technology as a product, or you can give it away and make money through support services or by selling an "enterprise" extended version. The creator of RavenDB has said that he prefers the former model, basically because the latter is too much work and uncertainty. However, the latter model is what's been embraced in the business world, and you'll have an uphill battle selling a product SKU against a dozen competitors selling what businesses actually want. The only real compelling angle to RavenDB is that it happens to be the only database solution implemented in .NET. However, is that really a big deal? Do Java guys really care that Apache Cassandra is implemented in Java under the covers? What matters is how well does the client libraries map to the idioms of whatever language you're using to connect with the database.
Actually what they got was syntactic sugar. A generic collection in Java looks OK, but then you run it through JavaC.exe and it is all translated into ArrayLists of object. It can make debugging a headache and I shudder to thing what it does for efficiency.
I guess my point was I think RavenDB is better than the other options as far as speed, features, and ease of use. I meant it is not terribly different from Mongo conceptually, but from the view of use and implementation, I think it works a lot better. I am not terribly happy about RavenDB's choices for business model, but I still think it's the best option. Just didn't see it mentioned and wanted to make sure it got some attention as an option.
Done :)
I'm curious about why there aren't any questions about health habits - exercise, amount of daily activity, diet, etc.
Not specifically related to .NET but I think a good topic for people to know/practice in general. 
Coolio. Did it.
Some .NET guys has to handle sql server as well. Some companies don't hire sql developers
You typically avoid database media libraries for speed. CDNs baby!
They are not typical databases. Azure blobs for instance host's website file storage. They are also scalable in the case you have multiple application instances.
Fair enough. I guess my concern is that surveys like this (yours isn't the only one where I've noticed it) come across as a bit negative, subtly focusing on the question of "is this job killing you". I think a few questions like "how often do you exercise", "what kind of exercise do you do" and "how has exercise impacted your work habits" would put a more positive spin and hopefully the results would start driving people toward taking a more active role in improving their own health, instead of destroying their bodies by sitting in front of a screen all day long.
I super appreciate this feedback. All great points. It wasn't the intent to have a gloomy focus but I can definitely see that perspective. Thanks for bringing it up! 
I've lost count of the times I've picked up someone else's code and had to unpick some overly long very poorly written function with no comments and then finally I'm presented with ... ' Release resources obj = Nothing 
Thanks for this feedback! I've updated this to be more inclusive.
Of course! My point was there is zero content in the post that relates to .NET. 
I didn't say they weren't supported. Reread what I wrote. I deployed a production system on ASPNET5 last week actually. I can assure you there is no direct migration path into ASPNET5. 
Share this on other subreddits as well.
I disagree with #1, obviously that example has incredibly simple code, but that's hyperbole. I find just a quick couple words in comments can make it super easy to find a relevant section of code, especially when you're dealing with older systems that have had a lot of shit tacked on over the years. In perfectly abstracted, amazing, fairy tale code it might not be necessary, I don't think most of us in the enterprise world are there.
neat! :)
Are you missing an IIS extension in production?
Data Platforms and Dr Pepper are all okay in my book.
Thanks for that - It was just copied straight from code. I've updated it to replace the tabs with just 2 spaces.
You need to call `Lock()` and `Unlock()` around your BackBuffer manipulations; and to tell it where you modified it, you need to call `AddDirtyRect()` which it uses to update the 'front' buffer (which is what's used for painting). Call `AddDirtyRect()` while still holding the lock. Also, a call to `Array.Clear( a.Pixels, 0, a.Pixels.Length )` is probably faster than calling into `RtlMoveMemory`. It's very highly optimized and doesn't need to do p/invoke overhead. 
Thank you! &gt;Also, a call to Array.Clear( a.Pixels, 0, a.Pixels.Length ) is probably faster than calling into RtlMoveMemory. It's very highly optimized and doesn't need to do p/invoke overhead. I wondered about that... I'd seen Array clear, and wondered about its performance compared to the move routine - I figured setting memory locations is just a write operation, whereas the move is a read/write 2 cycle process. (unless the CPU can cheat in hardware somehow) I found `RtlClearMemory` too just a while ago! I got that working fine - but p/invoke it uses, well, thanks for the Array tip! 
This was it. Thanks so much!
It depends on the newly made website. Generally in MVC 5 you can submit models to the razor view easy enough and then use AjaxForm or BeginFrom depending on your pages needs. However new technology like web api controllers and libraries like knockout.js which comes with some of the project types for web is a great resource and there you can use ajax calls or what I do is use jquery ajax. So many times you can do a simple one line call from your .js file for the .cshtml view page: $.get('/Controller/Method/', object to send, callback to handle or bind') You can do similar calls for the http verbs. I think ajax is critical espically if you want to branch out into other web frameworks or make modern SPA pages. Note: I am still learning about framework 4.6 and the new hybridzied controllers for mvc . I am also new to the subreddit, so I hope I followed decorum. Edit: some links: http://api.jquery.com/jquery.ajax/ https://api.jquery.com/jquery.get/ http://learn.knockoutjs.com/
AJAX simply stands for [Asynchronous Javascript and XML](http://en.wikipedia.org/wiki/Ajax_%28programming%29). jQuery, Angular, Backbone, et al. all rely on AJAX for doing things like partial page updates and creating [single page applications (SPA)](http://en.wikipedia.org/wiki/Single-page_application). You may not hear the actual term AJAX, but it is still extremely prevalent in modern web applications. Side note, when you use javascript and return JSON instead of XML, is that supposed to be called AJAJ? :) Edit: Apparently I was [jokingly correct about AJAJ](http://en.wikipedia.org/wiki/AJAJ), just the acronym never took hold.
yes, it's used extensively in most web applications. Take a look at your network tab in chrome dev tools after you've loaded cnn.com for example. Those are all ajax requests.
You shouldn't include your node_modules folder in your repo. The directory hierarchy can get too big for windows if you're not careful. I'd add it to your .gitignore as azure will run an npm install for you
Fell bad for me. I'm working on a .net class right now that's over 4200 lines of code. It's not good code either.
right, which is why I specified to do so after the page has loaded
If you have not previously turned on the XHR filter, it doesn't matter when you open the dev tools. The default filter is All, which as the name implies, will show you all network requests, many of which are not XHR requests.
Thank you for the response and filling out the survey.
Correct that it only shows requests that occurred since the dev tools were opened, but did you actually look at the network tab in dev tools when the front page of cnn.com is loaded? It takes several minutes to load all of the media, even though the page appears fully rendered in the browser within seconds, and all of their actual XHR requests run in the first 3-5 seconds of page load.
Literally nanoseconds, the time it takes to determine if the first two valid characters of a string are comment characters. 
I only have one Linux server for production and it's a pretty decent spec so I couldn't really afford another.
This won't work because in the background, IIS still maps the root to default.aspx. Dump your server variables, you'll see SCRIPT_NAME, PATH_INFO and URL all with the value "/default.aspx". What's more telling is the value of PATH_TRANSLATED. In order to do what you're tying to do, you need to set default.aspx as the default document, nothing more. Example: &lt;system.webServer&gt; &lt;defaultDocument&gt; &lt;files&gt; &lt;clear /&gt; &lt;add value="default.aspx" /&gt; &lt;/files&gt; &lt;/defaultDocument&gt; &lt;/system.webServer&gt; 
Interesting. I had the default document set in IIS along with the list of default docs that come already (index.html, index.htm, default.aspx, default.asp), and was getting the issue. When they're all cleared and adding the value like you mentioned, it works fine. Thanks a ton for your help! Feel free to set the same answer in StackOverflow if you'd like me to mark it as the answer if you have an account there.
&gt; It's not good code either. That's a bit redundant ;)
That is correct. Nginx and Apache can load modules for executing things (php, perl, etc) into the same thread/process or delegate via cgi. In the case of mono, there is a mod_mono for Apache but it's not necessarily the best way to go. A common deployment scenario is to have one server running nginx and multiple servers running the Asp.Net app. but /u/matthewblott only has one server so everything is going to have to run on the same box. They will not share a thread even if they are on the same box. Sorry if I was unclear about that.
Scroll down a bit for screen shots. I'm with you with the code examples and gifs, they'd be nice.
What type of code example would you like? Invoking it is found on the github.
http://blog.jsinh.in/hosting-asp-net-5-web-application-on-linux/ As far as I know beta4 is still regarded as 'stable', which is why most articles are referencing it. You may also run into an issue when running 'dnx . kestrel' to the tune of 'kqueue() FileSystemWatcher has reached the maximum number of files to watch'. This is a bug with Mono, you can read more here: https://github.com/OmniSharp/generator-aspnet/issues/138
I'd be more concerned that the director - your new boss and current lead developer - is easily confused between js/html/whatever and C#. 
Unfortunately, it seems you don't have much of a bargaining position here. The position is part-time, and you're jumping into an existing codebase. If you and all the other developers end up making a case to the director, you might have a way to build new components in C#. I agree that it's nonsensical that the director is sticking with Visual Basic and disregarding industry trends. It seems they feel they can find Visual Basic developers without much problem. Those arguments he made all sound like self-serving bullshit. &gt;associate VB with crap code and cheaply built software. This is an argument usually brought against PHP. There sure is a lot of crappy PHP code, same as VB I'm sure, but VB.net as a language is well done. [PHP, well, um](http://eev.ee/blog/2012/04/09/php-a-fractal-of-bad-design/). The root cause is the low barrier to entry. This brings up a great challenge, actually. If you know the .NET framework you'll be fairly well at home with VB.net. Knowing and practicing another language doesn't hurt. You'll just be entering semicolons unnecessarily. I don't blame you for feeling bad about having to switch over to VB, but try to approach it as sharpening your skills with that language. 
Many of us are in deeper depths of hell than that... ever had the shame of writing PDFs via VBScript and the Open Office API? At least you're still in .NET! If this is Dominos, don't fuck it up... still the best online pizza ordering system in NZ!
I built something to be handed over to another group to maintain, and about 80% through, we started knowledge transfer and they freaked out. They wanted it in VB rather than C#. I found a converter and it worked perfectly! The next day it was all VB. The similarity between js and C# is a terrible reason. The fact that their existing code base is VB is a good enough reason -- especially if their team as a whole is more comfortable with it.
Hahaha, there's a few bugs with the Domino's system where you can put a shitload of extra toppings on for no additional cost. It's fucking great! 
From what I gathered: It´s an existing .NET application, written in VB.NET. Now you are suggesting they convert the whole thing to C#. May I ask, why? What is the benefit the company would get from this? All their existing devs are familiar with the VB version. The compiled result is the same even if you convert it to C#.
:o Tell tell!
I'm not going to be sympathetic with you. VB.net and C# are equivalent, switching to C# will not improve the code base or the programmers doing the coding. The last thing anyone wants is a bunch of different languages in the same code base. Similarly, no one wants a bunch of different code styles in the same code base. And porting a code base (correctly) takes a long time and results in no actual forward progress during that time. There are many times when I had to make marine missions into strange or bad code bases. I call them marine missions because the goal was to fix the code (or add the feature) and get out...without leaving a trace. My code would look just like the existing code, no one would be able to tell the difference. Either suck it up and code in VB, or find a different job (which often is not that hard). 
I've run some node apps this way. I deploy 3 node processes on 3 ports and load balance traffic to them over 80 from nginx. 
The only big difference I've found is C# supports unsafe code - writing to memory directly. With VB that isn't an option.
Also VB devs are cheaper...
&gt; I did make a point to ask why don't they use C#, or allow each developer to use the language they are most comfortable with. It's fairly usual to declare that the company/team uses language X, whatever language that is, for everything. Same goes with frameworks, toolsets, and supporting software like DBs. This way you don't have Fred who likes to run the newest hipster language that's trending this week, and Joe who's never met a problem that LISP wasn't perfect for being unable to maintain each other's code. If they already have an existing team that does this, and an existing product - then saying "throw it out, lets rewrite it in {X}" without some solid evidence to back up your argument is going to make you (the new guy) look like an asshole. So, part of your role is to make suggestions - put together a business case for improving things. It's going to take you time to get a handle on how everything works, and once you've got that, you should have enough evidence to back up your claims that doing X, Y, and Z will help. 
so if you're going to be against VB.NET, you'll need to have objective reasons why you're better off with C# to even hope that this conversation could be productive. here are some such reasons: * top .NET talent, as a rule, works in C# (or sometimes F#), so you will have trouble attracting/maintaining good people * for the same reason, most code samples/blogs/open source .NET code is in C#, so whenever anyone on your team googles/stackoverflows something, they will have to know C# anyway to understand the material, and waste time translating useful snippets between languages * if you want to use any open-source, non-compiled code, you'll either have to find it in VB.NET (good luck with that), port it (which is a head-slapping waste of time), or break your VB.NET-only rule as an aside, your director sounds like a mook - you might consider picking up some experience at this job (if you need it) and then moving on rather than dealing with weird office politics and a resume that's mostly VB.NET.
Nothing wrong with VB. I know more companies that work with VB than C#, but might just be a European thing.
I thought you meant the same thread, thanks for clearing. I'm pretty new with NGINX and I'm not an Apache expert - I spent years using IIS. But I made the strategic decision to go down the *nix road for the organisation I work for and it's proving to be an interesting learning experience!
I code mostly in C# and prefer it but the hate towards VB.NET is irrational. FWIW there's a fairly large VB.NET app I support (along with a really old legacy VBA app for that matter!) and I found the following hack for converting keywords to lowercase improves the readability no end: http://blogs.msdn.com/b/vbteam/archive/2015/04/02/lowercase-keywords-revisited.aspx My VB code now looks a lot like Ruby (which is a really nice language) and I'm starting to like it a lot more.
That same "top .NET talent" should have no problem quickly translating code between C#/VB.NET as necessary. If they can't, they are an expert beginner who can only think in terms of C#. I used to be a C# snob. Then I worked on a VB.NET project with over a million lines of code for a few years. I quickly realized I was a C# snob for two reasons: 1) I never gave VB.NET a chance, or actually worked with it; 2) I naively followed the circle jerk in the .NET dev community about the superiority of C# over VB.NET. The languages seriously aren't that different, and people confuse bad coding practices with the language it's written in. I'll gripe about VB6 style coding in VB.NET, just as much as I'll gripe about C# code that looks like someone just learned about lambda expressions and now must use them everywhere. TL;DR It's not the .NET language that makes a codebase good or bad, it's the architecture and people working in it. I'll take a well-architected VB solution any day over a ball of C# spaghetti. The language is irrelevant there.
I would say not only is it still used, but it's use has exploded in recent years with the move toward heavier client-side frameworks with leaner server-side code. These heavyweight JS frameworks that make RESTful calls are intrinsically based in large part on AJAX calls.
Sure, I will add you
This is awesome. It looks like something I could use for my work project, as more interactivity has been a constant request.
I'm pretty sure I never said or implied that I want to convert the whole existing system to C#. That would take years, and not improve anything. In this new role I will be taking over lead on a new and almost-finished web-facing application which was developed by a 3rd party (offshore) team. There will be no other devs working on the application. My job will be to finish that and get it working corectly with the company's other POS systems and then start work on some other similar webapps for other clients. I probably worded it badly, but what I intended to imply in the original post is that I was considering suggesting to the Director that I start to do the coding I need to do on the Web app in C# and then look at doing other new apps in C# too. Not for any reason other that that is my personal preference and as others have pointed out it is the way the industry is trending.
Thanks for you comment. I absolutely agree.
Yes that does indeed concern me.
I didn't say that I want to port the whole system to C#, that would be a useless endeavor. I do agree with you however that it is great to have the whole thing in one language with one code style. I didn't mention that I will be working as lead and sole developer on a different but related system which is still in development and not launching for many months, I was told I will be able to make suggestions of how to move forward on that App, and then start one or more new projects.
irc.freenode.net &amp;#35;&amp;#35;asp.net &amp;#35;&amp;#35;csharp &amp;#35;&amp;#35;xaml I'm sure there are others.
No, it's not Domino's, but close ;)
Thanks for your comment, I will give it a few weeks and see how correct you are.
Even if I stay at that job for two years I will still have more experience in C#.
That is the point of view that I have toward VB at the moment, but the general consensus of this thread says that I'm wrong and suck it up. 
That's the reason I created, for use in a work application. Stay tuned, keep an eye on it, I'll be switching it to a custom control as commented about here
Its funny how people throw stuff like that out there. I haven't checked the stats recently, but I remember seeing a breakdown a while ago, and html was at the highest average $. That said, I have to wonder about some of those stats, cause really, who just knows html, or just knows c# these days... I never did look into the methodology, and the report is lost to the annals of my mind. That said, I recall being surprised VB developers were so high on the list, and some "more respected" languages (I mean this in the joking way that some people think one language is better than others for all things etc...) paid less. I don't rightly recall where c# was tbh, so you may be correct that VB was lower on the list, or things might have changed so it is now lower... All that said, I think choosing vb cause it is cheaper is like choosing a nail instead of a screw because a hammer is cheaper than a screwdriver. 
I know there are web sites and all that but I find it is better to just find a few people you can get to know over time than asking random questions to random people
Just a heads up, I moderate a small (completely unrelated) subreddit and when I asked the admins about users putting their Skype in posts, they said it qualified as personal information and was not permitted, so you might want to change it to "pm me" considering how shadowban happy they can be :P Good luck finding people to talk to!
Not to mention it just is't a good idea anymore to give away PII.
That's one aspect of new hires that usually drives me crazy. Congrats, you're smart, I hired you because you were smart, you don't need to show off to me. What I need you to do is learn to be a contributor, not come in and fix everything, just do what needs to be done and fix little pieces where you can. 
Make sure you turn on option strict and as many other options as you can. That makes it much safer and much more like C#. If your boss doesn't know what those are or won't let you use them then quit. There are good reasons to prefer C#. Where I work we have some of both. Just last week a MAJOR bug was caused, because someone wrote in VB `IF x = Enum.Value1 OR Enum.Value2`. He of course meant `IF x = Enum.Value1 OR x = Enum.Value2`. In C#, the first code would not have compiled. In VB it silently converted Enum.Value2 to a bool and so the `if` was always true.
Those stats are all supply and demand based. Based on my experience I would guess the lower pay scale for VB.NET is due to non devs writing code. Every system I've worked on in in the last 10 years or so has been a system that was developed by an old engineer/accountant/etc. Generally these people are very proud of their work and don't want some developer coming in and telling them it's crap plus they figure they shouldn't have to pay someone a lot of money to do something they could totally do themselves if they wanted to. 
The stackoverflow chat rooms are pretty good. You can create your own private chat room with other users if you wish. I met a nice chap on there that told me about Meteor JS and helped solve a problem I was having in the process. Some decent people out there. I know you want to Skype but just a suggestion. 
Exactly this. There's often a 5-10 year history on the decisions that were made and we are perfectly aware of the tradeoffs that were involved in making them. 
Ill take a look.. I didn't know stackoverflow had chatrooms thanks
That didn't present any red flags to you before accepting the job?
IRC channels are generally frequented by the same users, with new folks popping in from time to time.
No. You'll need to add 4.5 to your server. With few exceptions, there shouldn't be any reason you can't add 4.5 to your server. 
Man. I wish more people were as excited for Akka.net as I am!
With ASP.NET MVC2 and MVC3, we write our own `IMembershipProvider` and `IRoleProvider`. Works perfectly. edit: You can specify the implementations to use in the Web.config.
You're the type of interviewer I ignore, when you're struggling to fill the roles and wonder why.
Find out what? I haven't started yet, starting on Tuesday 
I've worked on some large PHP projects where all the php is mixed in with the template. I know that pain.
I'm not sure what feature's you're using. If you're not using some of the async/await stuff, you might be able to downgrade your app from 4.5 to 4.0 for deployment.
Anyone can feel free to message me. Will give hangouts to pm. I'm the only developer at a municipal government and go crazy not having anyone to bounce things off of.
If using tfs for work items/tasks, you could implement a check-in policy to enforce needing an assigned task in an appropriate state.
Multi-cursor is a feature that allows you to edit multiple lines at the same time by adding multiple cursors at specific points of your choice in the text editor. Sublime Text have this feature and it was one of the most requested on [Code's UserVoice page](http://visualstudio.uservoice.com/forums/293070-visual-studio-code) at the time of the first release of the editor. It's incredibly useful, IMHO, and it plays a very important role on my daily tasks at work.
This editor has fast become my go-to for web stuff.
It has the MS badge, ties developer's into an MS product. Beware the corporate giant's new 'openness' - although welcome I think it has less to do with altruism and more to do with maintaining relevance. This was brought home with the recent announcement that MS is forking Node ... http://www.programmableweb.com/news/microsofts-plans-to-fork-and-extend-node.js-alarms-developers/2015/05/20 
Oh crap not another fork again ._. Didn't know about it
/u/ChesireSwift summed it up nicely on this same post over in /r/csharp &gt; You define a selection of constraints, like "button this should be centred horizontally in its parent, 8 units to the left of the label and the label should align its right hand edge with the table below" and it will solve the system of equations for positions/sizes that meet those constraints. As to why you would use this over grids / other panels.... You hate grids! Html has moved on from laying everything out with tables, why shouldn't we?! More seriously though, I've worked with a number of applications whose layout simply didn't lend itself well to grids: you'd end up having to use empty columns for spacing, or weird margins and mysterious hard-coded numbers to get things to line up. I've also found that when I'm designing a UI, I often naturally think in terms of constraints (*"I want these labels to align on the left, and these textboxes to be on their right, and that button at the bottom to span across the width of both..." &amp;c*) and have to constantly convert that into grids. Now, some layouts actually lend themselves really nicely to grid-based layouts, and their constraints can end up being much more complicated than simply using a grid. But there's no reason you can mix-and-match in you application, using whichever layout suits the problem at hand.
Better holding out for a good candidate, worth the wait. I prefer someone who is confident enough in their abilities and focused on a solution enough that they aren't going to whine about the technology all day.
Not my area of expertise either but have heard good things about WordPress, Drupal and Joomla. All are customisable and extensible as needed. They have good community support too.
I have the same sentiment towards DotNetNuke. DNN is like a proof of concept platform that just spiraled out of control. Wordpress is probably your best bet. Modern, and lots or outside support available. 
Wo, wo wo. Let's take a quick step back here. You just brain dumped a ton of different problems with your application domain and then proposed a CMS system as the solution. I'm am almost speechless as I do not see how you got from A to B. Problems: * Website *looks* old. * Website *built* on old tech. * Code is sloppy crap causing **HUGE** implementation costs for new features. You'r Proposal: * Nuke everything * Implement a proper CMS system. OK, Now that we have organized some of these thoughts lets take a closer look at the *cost* of your proposal. * Has anyone on this team ever done a full re-write of a website? * Have you investigated the financial burden of taking the whole team of 3-6 engineers for 2 years to do a full re-write? * Does the company a have a proper project management process for pulling off something of this magnitude? I am basically asking if you think the company has the correct tools/finances to achieve a full system re-write. Every developer want's a green field product, a full re-write but 99/100 times it's not something a company can afford and the 1/100 time they can afford it they don't do proper planning and projections so the project fails and their stuck with one 1/2 implemented solution and one crappy solution. I understand that what you have now is basically unworkable and probably unable to be refactored. Maybe a complete re-write from scratch is called for. It sure sounds like it. But if you plan to make that proposal to a senior you better come prepared and with a well thought out proposal. Don't you dare half bake a suggestion like that or I can guarantee you no one will listen. If you need to buy yourself some time you can always approach the conversation by saying "Hey Bossman, I'd like to set some time aside this week to do a deep dive into *EXACTLY* what it would take to do a full system re-write and what the *benefits* of such a thing would be. I believe this system would benefit from a proper CMS implementation and the time it will take to perform the full re-write will be less then the time it took us to build a broken shopping cart. However, it warrants more investigation if you will allow me the time to perform the research". The last thing I will say is that your two year degree and seemingly small amount of experience has you woefully under-prepared to take on a full system re-write. But I've seen people do more with less so hopefully you put serious thought into this and even if the answer is "I can't do it but I think we need to approach this topic seriously" You will garner more respect from your team and your business. Good Luck. *edit* Sorry if I come off as a dick :(. I'm just trying to donate my 2 cents and hopefully give some good experienced advice.
With his given experience and the woefully under talented team (3 year shopping cart anyone?) Wordpress is probably the best bet because it is so widely adopted. It will make it easier to hire *experienced* developers if a full system re-write is warranted/affordable. 
Also avoid Joomla unless you want to sit on top of it and update often (security patches). Joomla is a mess :( wordpress is nice!
I'm a .NET guy and tried DotNetNuke and switched to Wordpress. It's a breath of fresh air by comparison.
Go with Wordpress. It has a huge amount of plugins for pretty much anything you will need and you don't even need to be a coder to use it. I'm a seasoned .NET guy with about 15 year's professional coding experience and my colleague knows little coding but builds impressive sites with Wordpress compared to my efforts (I've finally started learning). Here's a couple of examples of stuff he's done: http://picturepilot.co.uk/ http://esgc.co.uk/ They're not groundbreaking or anything but were put together very quickly just by using the admin panel. I can't think of any reason you'd need to but if you found yourself needing to write any plugins you'll find PHP developer's are a lot cheaper than .NET guys and you also won't be tied to Windows (with their hosting costs). Do a search on Wordpress market share and you'll see it dominates all others - it's a no brainer as far as I can see.
Wow, I didn't realize that either. But before you run to a .NET version of WP, is that warranted? Almost every web host out there offers or can offer Wordpress support. Unless you're going to self-host, take this into consideration. And I would suggest against self-hosting, if you can avoid it.
The hang up with .NET is that we need to be able to connect our association management software to our site, and its web integration stuff is built with .NET. I'm 100% sure they wouldn't go for choosing a new AMS. They just paid for an upgrade to our existing service. :/
Any decent developer should be able to move between VB and C# seamlessly. 
I would recommend Angle Brackets if you can wait until November: https://anglebrackets.org/ 
Wow, you weren't kidding. 300 dollars? And the sessions sound fantastic.
IMHO: This is your mission if you choose to accept it. *Mission Statement:* Complete re-write of current website. Include all graphical elements and functionality. **Team:** * You - Your primary goal should be to produce a *Minimal Viable Product. After this is successful you'r second goal should be *ROI oriented, that is, build what ever gets you the most capital the fastest. Using these principals as your foundation will allow you to get capital to supplement the spending on your team. **what makes money** (don't drop this ball dude! Money is what matters here!). * Product Owner/ Business Analyst - This person must understand every nuance of your current website. If any questions raise about *how* or *why* something works this way it is imperative this person can answer the question off the cuff. The better they understand the *business* of your website and the products features the more quickly the new project can be completed and the more accurate it will be. * Project Manager - Experience should include large scale website transition/re-writes. There is a big difference management wise between building from the ground up and building something to work/act like something else. Your website probably has millions of hidden pieces of functionality that you have absolutely NO idea about. A good project manager should be able to help you *prioritize* these functionalities in order to produce the MVP and ROI faster as well as keep your team on schedule. Most companies are using some variation of Agile. This process has wholes/weaknesses but they all do and this one is popular at the moment. * Technical Lead (Senior Developer) - This will be your bread and butter developer. This person will be required to chose the technologies (CMS system/.Net/DI/MVC/restFUL Api) ect. They should be the pillar of your technical team. This person will have to answer for the products architecture, features, sprints, planning, code quality. This is where you will spend the biggest. A good technical lead can make or break a project. * Developers (N) (Intermediate, Junior) - These are your work horses. They take the marching orders from the Technical Lead. They are kept on track by the Project Manager. Don't under pay them or they will change jobs rapidly. Developers love green field worked where the team is knowledge and productive. * QA - Yes you DO require a quality QA team to ensure the features work and continue to work. **Recommendations:** * You should start by finding a PO/BA. This will most likely be someone in house. They should be able to communicate well to both business and technical individuals. Once they are acquired for this role they should be dedicated to documenting and understanding every small bit of functionality your website contains with an eagles eye emphasis on **what makes money** * Once the PO/BA has fully listed every feature and you + them understand what makes the most money. Organize them in such a way. * Now you are ready to hire a Technical Lead. This person should take the list of features and functions. Take the current set of code and then sit down for a *FULL FUCKING MONTH* to plan out the entire new systems architecture. They should be able to provide advice on what features can get done the *fastest*. Use this information to rearrange priority time + money = priority. They will also advice you on if Feature A is dependent on Feature B. * Now you and the Technical Lead should have a great understanding of how many Developers you need and what *Skill Sets* they require. If you are in charge of the financial aspects of this agenda this is the point where you should have a very solid timeline/costs. But keep in mind, You are Using Agile which means everything will fluctuate as you go. * Begin hiring the Developers and Project managers. OK, some gotcha's. A lot of people will say that what I have described is Waterfall and not Agile. Agile begins *after* you have done this upfront work. The premise of Agile is that you should be prepared to change time lines, and tasks based on day to day / week to week information. Doing a good amount of planning upfront will *help* you not have to change as much. Before you hire the dev team your dates should be considered *fuzzy*. The further down the timeline you go the *fuzzier* the timelines should be. But You NEED the planning up front. At least, this is IMHO and how I would do it... if I was a boss somewhere. Which I am not.
There's also a good number of hackathons that have speakers and conferences the days before it. I attended HackMidwest earlier this year and the hackathon afterwards (free to me since I was employed by the company hosting but they are cheap.) Lots of good speakers if you're a dev; we even had a few authors of books who I worked with give presentations. You can also use the hackathon to learn and network and we had tech demo's for the technologies we could win prizes for during the hackathon. Maybe not the best for you since its pretty small compared to kcdc. But something worth checking out. 
I just came back from the May conference. There were a lot of sessions covering a lot of topics. I highly recommend it.
Well, for a GUI you're probably looking at WPF for a thick-client. You could try using the free tier for Xamarin to make a mobile app or something. 
I've found ThatConference to be pretty cool. It's not an official microsoft conference so there seems to be much better and broader topics.
I'll second this. It is also inexpensive! This will be my second year going and I am very much looking forward to it!
Why does it say registration will open June 5th? It is June 5th and no registration options.
If by "seamlessly", you mean "being frustrated at VB's stunted syntax and comparative lack of features", then sure.
CodeStock in Knoxville TN has a lot of .NET sessions. There's still a few tickets available for July 10th, 11th. 
RubyConf! Come to the dark side.
[Velocity](http://velocityconf.com/) was pretty good when I was there. It's not strictly .NET, but it is all web dev (and ops) talks.
And I agree with everything you say. See my previous comment.
There are minor differences in features available between them but it mostly comes down to syntax. Any noob can pick up either language in an hour if they know the other. Im not going to get into a nerd holy war about something so trivial as a solution preset. 
where in Europe are you? I feel like everything around me is C# land.
One thing worth considering is do you need a full blown CMS. Static site generators are back in vogue now and can be better if you don't need frequent content updates it's a good option. 
I always use Umbraco, it'd be not to hard to get a nice site going and will allow you to add any more powerful features when you like.
Seconded ThatConference, but I'm a bit biased. I'm helping run it this year!
The one in the dells?
Yup, thats the one! It is smaller than a lot of other conferences, but big enough to have plenty of speakers and plenty of topics. Plus they have "Open Spaces" which is the same concept as "lightening talks". Basically anyone can host a session. Oh and you can bring your family because they do family oriented stuff each day while you are geeking out.
Why not make a Node.JS API and do an MVC project in .NET that leverages said API? 
Yeah, I'm not sure what's up with that. Hopefully it opens up soon. 
Thank you for taking the time to type all this out. I greatly appreciate your feedback. I'm taking this (and other feedback and research) to the meeting. They're basically expecting me to do this anyway (but on my own), and getting them to understand that it's not like building a 5 page website has been....challenging. You've given me a solid starting place, which is really what we need. Thanks very much.
For vslive.com what kind of swag are we talking about? Google IO type?
What do you think of it? Painful, or very easy to work with? 
What do you think of it? Painful, or very easy to work with? 
Perhaps a isomorphic fluxible-react based web app with node.js server to handle prerendering and state dehydration coupled with a Web API/MVC 6 API?
Yup, full TFS usage here. Build tools, work items, source control, everything. Love it.
Not sure where you are located, but in looking at info about microsoft build I noticed that they have free local one day follow up events all over the place. I just signed up for one this Wednesday in chicago. https://chicago.build15.com/register There lots of locations and dates, I'll come reply back here after I attend.
MVC and Web API aren't really the same thing. Some of the conventions are the same, but really you are doing one or the other. From your description it sounds like you are doing web api.
The MVC part can provide you with the opportunity to have your api documentation hosted in the same solution. But as samjudson said, it's separated tech built on the same conventions.
Maybe do something like a directory editor. You can include have stuff like phone numbers and other personal info. You could also put in a feature that lets you upload profile picture to the directory too. Give you some experience with file handeling and database manipulation. 
In MVC 6 they will he merged into the same stack and will be used very similarly. 
Lol php. Where your json is either all strings or guessed numbers. http://php.net/manual/en/function.json-encode.php JSON_NUMERIC_CHECK
Only painful in the sense of having to track every hour of every day in a TFS task- but that's not the tool's fault :) It seems pretty good from my developer point of view - you can have daily burndown charts emailed to you to see how your sprint is going, and the web version is nice for visualizing your scrum board. Most people don't like the web version for day-to-day though which is a painpoint for PM in that they have to install visual studio in order to use it. Other than that, I'm good with it.
It's for realtime pixel explosions. =)
I posted a full example on github: https://github.com/FransBouma/CSRotoZoomer You can see it's *very* fast, much faster than writablebitmap ;)
Used to be a total pain to install too. I've heard that got much, much easier too.
Funny I did something recently similar when I was learning Web API. You should be golden, I found all the guides and info I needed easily on the 'net.
Would you build an extension and expect to make money?
I’ve made it a habit of donating $15 to free extensions I use. I do think i’m on the minority here. But I think the successful ones have a long trial period to prove their worth. But there are a lot very good free ones, and the ones that aren’t free are highly polished and fill a huge void. I wouldn’t go into it looking to make more than beer money unless you got an amazing idea with excellent execution
Only if I have a great idea and the dedication to put through it. And then I wouldn't expect much money.
Yes, sorry. Any resources reddit can point me to would be greatly appreciated.
We use most of those features - backlogs, scrum boards, work items, builds - maybe not reports so much. The new web-based interface works very well. Looking forward to the new build engine in TFS 2015. 
You could check your routeconfig that may have ignore .axd routes configuration set. 
Back when the Business of Software forums at Joel on Software (http://discuss.joelonsoftware.com/?biz) had a lot of traffic, there was a regular there who made a vi emulator for Visual Studio called ViEmu. I don't think he made enough to quit his day job, but it's probably been a decent source of side income for him.
I've just started looking at WinRT myself - I prefer staying with XAML and i have zero knowledge about anything html. Keep the ideas coming though! 
I actually do some work with WinRT. For this, just displaying a grid of data, id recommend a ListView filled with 1-row grids. It isn't as clean as DataGrids, but that is the nature of WinRT
You do not have to 'suck it up' there are hundreds of jobs out there and it is soul-destroying to work for clueless people. I give my employer a deadline, shape up or I'm off!
Any chance you could provide me with a screenshot or an example? I'm not anywhere near a PC and googling "Listview 1 row grid" didnt get me much :)
Looks like it works just like the Ninject.MVC packages, which I like. I wonder if it will support loading Ninject modules? If it doesn't then I won't be switching existing apps any time soon as most of them make use of a module.
There is some Ninject specific code here: https://github.com/aspnet/DependencyInjection/tree/dev/src/Microsoft.Framework.DependencyInjection.Ninject No idea how to wire it in, but it exists!
Haven't actually installed it and I may not get to on our corporate servers, but it looks nice!
The new version of TFS (2015) has most of these features.
GTK. Though my company is just getting 2013 tested now.
Visual studio online has this I think
I've been toying with it for a few months. It's a great starting point and the author took time to really comment his code well. I recommend checking it out if you are interested in MVC. One question though, why did you change it to "using boilerplate...." instead of allowing us to control the namespace? And why only in a few places? Was it to be more in line with what the fine devs at abp are doing? Just curious and keep up the good work. 
I am seeing sites popping up all over the internet, where people have been publishing to azure and leaving the link to my site on the template home page. The project is getting around ~200 downloads a day and has had 23,000 downloads in total, not including GitHub forks. This project has cost me a few thousand StackOverflow points, to get answers to obscure questions using Bounties. I hope you all find it useful.
The framework code started life as part of the project but people complained about wanting to keep it up to date, so I moved it to a NuGet package called Boilerplate.Web.Mvc. Hence the namespace which has the same name. So now framework updates are as easy as updating a NuGet package. Most people still keep an eye out on the project for some updates like when a CDN or jQuery script has a new version. I make the change and put that into the release notes, people then copy it by looking at the changesets on GitHub. I also release new features every few days. I just implemented PubSubHubbub into the Atom feed just yesterday which was fairly easy but needed a fair amount of reading. I've commented it to help others.
The ASP.NET MVC example is shitty. Instead of `"Home"` you now pass the string `"HomeController"`. So much to "saving developers from themselves". And the null propagation operator has a wrong name.
&gt; The ASP.NET MVC example is shitty. Instead of "Home" you now pass the string "HomeController". So much to "saving developers from themselves". This is not correct. Using nameof moves the check for if the controller endpoint Home.Index() from when the link is clicked to either when the form is displayed or compile time. @Html.ActionLink("Home", "Index", "Home") You will find out there is no Index method of a Home controller when the link is clicked. @Html.ActionLink("Home", nameof(HomeController.Index), nameof(HomeController)) You will find out that there is no Index method of a Home controller either: * When the page is shown if the templates are not precompiled * When the program is compiled, if you precompile the templates. Currently, to get this sort of functionality, you have to write generic extensions that are used like: @Html.ActionLink&lt;HomeContoller&gt;("Home", c =&gt; c.Index()) Whether or not you want such behavior is a decision left up to you. I personally support using compile checks whenever possible, so I prefer the nameof way to the strings way.
The null conditional operator is nice, but you don't have to write all that boilerplate in c#5 either. Instead of string result = value; if (value != null) { result = value.Substring(0, Math.Min(value.Length, length)); } return result; You could have written return value != null ? value.Substring(0, Math.Min(value.Length, length)) : value;
&gt; The null conditional operator is nice, but you don't have to write all that boilerplate in c#5 either. Fair point. I was just trying to illustrate the point that the null conditional operator is the shortest and most readable method. You can imagine that for longer lines of code, the ternary operator you used gets a little less readable.
Yes i agree that the new method is much cleaner :)
The nameof operator is not so that you can write code faster, it's so that refactoring goes smoother. And yes, I think the improvements are good. Many of these features help take C# into the new world of programming, functional programming. You could of course get by with the old C# but by taking it further, and to the extreme, you could just say that C were enough. And even further, that assembly were enough. Or, we could just go back to program with butterflies, like *real* programmers.
Actually I meant that "nameof" was something that wasn't just to save keystrokes but the other features seem to be. Ignoring your slippery slope fallacy. I would like C# to stay true to C#. Why toss in functional programming? Isn't that what F# is for?
Maybe this isn't the right question to ask. Perhaps people make their money, after they write a good extension, to help people integrate it into their tool chain, as a contractor.
Yes. But you need Visual Studio 2015.
There's a really great NuGet package [T4MVC](https://www.nuget.org/packages/T4MVC/) that gives you statically typed controller and action names. I'll probably switch to using nameof as I switch my stuff to C# 6, but in the mean time T4MVC is helpful.
I would advise caution to anybody who doesn't want to be identified. If they are sharing raw data, that data in and of itself constitutes information that can identify you. The entire concept of an anonymized data set is [BS](http://arstechnica.com/tech-policy/2009/09/your-secrets-live-online-in-databases-of-ruin/).
&gt; Why toss in functional programming? Isn't that what F# is for? Would you like to take generics out then? 
Holy ****, I can't wait to get to work tomorrow to apply this to our logging class. I wonder what value it supplies when the caller is an anonymous delegate...
&gt;The first group of changes seems to be a declaration of war on curly braces ({}), you can now omit them in many cases. I personally am not too sure about this set of features, it reduces the lines of code you have to write a little and may save a few seconds but at the cost of having to learn a new set of syntax. Sniggers from the vb.net developers...
good post, i'm having a hard time adding that site to my RSS feed, anyone else?
You don't need to reach 6 levels in to see the benefit. `x.y` is enough. And how is this var temp1 = a.b; var temp2 = temp1.c; var temp3 = temp2.d; var temp4 = temp3.e; var temp5 = temp4.f return temp5.g; better than this? return a.b.c.d.e.f.g; 
I know about the law of demeter. I just don't always think following it yields the best code. In my code example rather than having an accessor for `g` on one type, you need an accessor for `g` on five different types. What if I need to get the length of the customer's first name? `customer.firstName.length` is clearly a violation, so I'll just add `customer.getLengthOfFirstName()`. I'd end up with hundreds or thousands of seemingly unrelated accessors on every trivial class. Basically, I don't think the law of demeter is good. https://twitter.com/martinfowler/status/1649793241
I don't know, maybe the thing you're trying to do makes sense as a method on the Customer class. The GetLengthOfFirstName method you propose fixes the problem to the letter, but not the spirit of the 'law'. The fact that you can't blindly apply LoD everywhere doesn't make it bad guidance.
Wow, thank you! I'll check it out now!
I would use visual studio online combined with azure for the test environment. Most likely you can do what you need just using MSDN credits, maybe a minimal cost. Look into something like saucelabs if you need JavaScript tests also. 
If I'm given a List of objects, I can do anything that the List class permits to that list once you've returned it to me, and the onus would be on me to let you know. If I don't inform you explicitly, the data source and sink are now out of sync. For example, say you have a public API to return a list of, oh...I don't know....users. The get() call is intended to be a readonly function, and the expectation is that the calling code wouldn't modify the user objects at all. If you return a List&lt;User&gt;, I as the client can now do all sorts of stuff. I could edit user names, remove users from the list, add users to the list, etc. and your code would never know I'm modifying the contents unless I made it a point to tell you. But if you were to modify your API to return an IEnumerable&lt;User&gt;, you're essentially using the code to enforce your business rule that this list should be read only. The only thing I can do with an IEnumerable is iterate over it. I can't modify the contents.
&gt; The only thing I can do with an IEnumerable is iterate over it. I can't modify the contents. Couldn't I still do .ToList() and modify the collection?