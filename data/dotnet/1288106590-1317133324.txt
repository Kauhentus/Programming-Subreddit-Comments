Excellent thanks!
Just wish it didn't use so much memory though. My crappy work pc can (and often does) run three or four instances of vs2008 quite happily. Not looking forward to trying the same with 2010.
There's an extension called "Visual Studio Color Theme Editor" that includes a classic theme.
I started on my certifications while I was unemployed, but it didn't help me find a job. Once I did land a job, I focused my learning time on new technologies like LINQ, which was much more useful to me. The biggest quirk with the certs is that they test you on what certain people at MS want you to know about their product, even a few things you are unlikely to use if ever. The asp.net 2 tests had a huge chunk of content regarding app deployment that has completely changed since 3.5 and 4.0. .NET is changing so fast that getting certified means you know a lot of stuff that you won't care about in 2 or 3 years. :P The other thing about these tests is that don't really say anything about your abilities as a programmer, nor do they help guide you towards best programming practices. It's more like feature trivia. By all means, do it if your employer is paying for it all, but I wouldn't expect any divine revelations while you're going through it. 
[Visual Studio Color Theme Editor](http://visualstudiogallery.msdn.microsoft.com/en-us/20cd93a2-c435-4d00-a797-499f16402378) Although it can be a real pain to figure out which setting affects which part of the UI.
I am really starting to enjoy EF4. I have been building dashboards lately and EF4 makes it very simple. I can easily import views, stored procs, and tables with ease (well maybe not stored procs but there is some tricks that can be used). Performance is very good from what I can see. I have a dashboard currently runs with around 60,000 rows of data. I can filter and aggregate the data on the fly using linq at instant speed (Using Silverlight 4 and WCF Web Service Binary Encoded). Great Entity Framework 4 series: http://blogs.msdn.com/b/adonet/archive/2009/06/16/using-repository-and-unit-of-work-patterns-with-entity-framework-4-0.aspx
So, how is this different then allowing multiple inheritance? 
No [diamond problem](http://en.wikipedia.org/wiki/Diamond_problem), no vertical relationships; only composition semantics. An inheritance hierarchy is a very heavy relationship, it defines who you *are*. Composition is more like what you *do*; like with interfaces, but with code. You should take a look at the [traits paper (pdf)](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf) for more details.
Ok, so one level multiple inheritance :) I haven't read the Traits paper yet, but I didn't notice if the article specified whether Roles would be inherited or not. 
You can see it like that, but then the word *inheritance* loses its meaning.
Interesting point, maybe it's just the C# way that everything just comes after the colon (:), like the base class and interfaces (maybe that's also the reason we use the "I" prefix to disambiguate - and the tentative "R" for roles). In Java, I guess, it would have a new keyword (alongside *extends* and *implements*), e.g., *does*, which would make the intent more explicit.
True, but a lot of people simply don't understand inheritance to begin with. I all too often have had to fix scenarios where inheritance was used for no other reason then to share common functions (i.e, the kind of thing which if better suited to a static class). Anyway, you responded before I edited my message: does it mention anywhere whether Roles should be inherited?
Oh so true, people abuse inheritance all the time in the name of code re-use. That's the wrong tool for the job. Roles are compositional, and not inherited, and so they are perfect for that (again, read the [traits paper - pdf](http://scg.unibe.ch/archive/papers/Scha03aTraits.pdf)). It's just like with static classes, but now there's a matching method in the class composing the role delegating to the static class (and this is almost like extension methods). Just look at how Scala [does it](http://codecrafter.blogspot.com/2010/03/scala-traits-under-hood.html).
I try to keep in mind an old article (late 90's I think) I read on the topic of composition vs inheritance when picking my strategy. If an object you are creating has a direct is-a relationship (Fruit&gt;Apple for example) then inheritance may make sense. If you are just wanting to re-use code then composition is a better option. 
I think I saw [that article](http://www.javaworld.com/javaworld/jw-11-1998/jw-11-techniques.html) too.... From the article: &gt; An important question to ask yourself when you think you have an is-a relationship is whether that is-a relationship will be constant throughout the lifetime of the application and, with luck, the lifecycle of the code. For example, you might think that an Employee is-a Person, when really Employee represents a role that a Person plays part of the time. What if the person becomes unemployed? What if the person is both an Employee and a Supervisor? Such impermanent is-a relationships should usually be modelled with composition. Note the word *role*.
this seems to be a more convoluted version of [udi dahan's "make roles explicit" talk](http://www.infoq.com/presentations/Making-Roles-Explicit-Udi-Dahan). Seems to be the same concept though. By making your roles explicit, you limit the scope of what something does, as well as it's dependencies. The actual implementation may do much much more than when the interface exposes, but you only expose what is necessary for the task that the role performs. 
That talk is really good. That's very much what Udi Dahan is talking about. Wouldn't it be nicer if we had language support for that? If composition would be as painless as inheritance? You should also take a look at the [DCI architecture](http://www.artima.com/articles/dci_vision.html). There's also a talk by [Jim Coplien on the subject](http://www.infoq.com/interviews/coplien-dci-architecture).
This is the Async CTP discussed by Anders Hejlsberg at the PDC. I've started playing with it and ease with which async calls can be made is quite cool.
Does this require server-side installation? Of is it some DLL I include in my projects that will work with my existing server setup?
It's similar to the way .NET 3.5 added features to .NET 2.0 - a new compiler that implements the new keywords and a DLL to reference in your projects. The runtime is still just .NET 4.0. However, it's a preview of a prototype compiler showing what they plan to add when C# 5 arrives. It's not something you want to write serious code on yet, if only because they could change it all and break your code by the time C# 5 is released.
It would work, but it's a CTP. If you look at the Anders Hejlsberg PDC talk you'll see how potentially awesome it is but I would resist putting in production code if I were you. 
Same could be said for ASP.Net MVC. Moving so damn fast it's hard to keep up at times.
At least you can be fairly confident that MVC 3 will be backwards-compatible with MVC 2 unless there's a pretty good reason to break it, so you can write production code against MVC 2 without having to worry too much about what's coming up in 3. With the Async CTP everything could change, right down to them thinking of better keywords to replace async and await. In fact, I think the preview makes use of a TaskEx class which will eventually replace/merge with Task. You're guaranteed that any code you write against the preview will need at least that change to work with the real C# 5.
Check that you are binding the dropdown before you try to select one of its items. Are you checking in code that the formview control is in edit mode before you search for the dropdown control?
It seems to me (some of) that can be achieved with extension methods on interfaces already. interface RPrintable {} static class RPrintableEx { public static void Print(this RPrintable that) { Console.WriteLine(that.ToString()); } } Wouldn't it be better to build on that? Maybe add syntactic sugar for interface implementations deferring to default extension methods. Maybe allow composing compatible interfaces at instantiation time. What else would be missing?
I must admit, I'm a bit confused by the whole 'binding' thing, since, in this case, it seems I want to bind the datasource to the range generator, but I want to bind the selected value to the linqdatasourceid. That said... The formview has DefaultMode="Edit". I'm trying to set the datasource for the dropdowns during Page_Load like this: if (!IsPostBack) { DropDownList vhsea = fvEmailAlerts.FindControl("alert_vhsea") as DropDownList; ... test for null... { vhsea.DataSource = Enumerable.Range(0, 100).ToList(); } } Again, I'm running into situations where I sometimes get the dropdownlist object, and sometimes don't. I've seen this before, but I forget how I fixed it (seemed it was a different form of FindControl, that included 'EditItemTemplate' as part of the call).
Yes, [extension methods on interfaces](http://codecrafter.blogspot.com/2010/02/c-quasi-mixins-pattern.html) can solve some of these problems, but it's a workaround, they weren't designed for this. But if you insist on extending them to approximate traits, or roles, then you'll be going too much on the wrong direction; and you'll probably end up with a clumsy abstraction like the proposed [public defender methods for Java (pdf)](http://cr.openjdk.java.net/~darcy/DefenderMethods.pdf). Instead, if we recognize and implement them as first level constructs in the language, the language will be more consistent and simple. It's like with anonymous delegates, it took a while before we had the lambda syntax. Anyway, the theme for C# 5 seems to be taken already (asynchrony), so this is all wishful thinking.
There's a difference between a CTP and a product that's on a quick release cycle because it's not 100% mature yet. On a CTP Microsoft is *supposed* to be reaching out for feedback (I'm looking at your Entity Framework 1.0) and it will have no issues in changing how things are supposed to be used. Once something is out the door as a beta and specially as a RTM, changes on the existent API will break existent applications so they should not be done unless it's absolutely necessary. So some things *can* break from one version to the other but this should be rare. 
You propose adding complex new features that seem to solve little more than another feature that already exists. If it's just a fun little exercise and wishful thinking that's perfectly fine. If you want to convince them to include this in C# 5 (or 6) you might want to explain a bit more why this is really needed and better than extending the existing feature. Maybe show how one would extend the existing language features, and then show how it would lead to problems. Your mixin article lists some limitations, but why couldn't these be fixed? Why is it the wrong direction? You say the language will be simpler with a new first level construct. Is conceptual integrity more important than concept count? The new concept should ideally be orthogonal to existing concepts. In the *Conflict Resolution* section you propose a lot of new syntax that doesn't really seem at home in C#. That doesn't help simplicity either. What's wrong with the public defender methods proposal? Anyway, really interesting articles. I would like to read more on this.
AForge.NET Framework http://code.google.com/p/aforge/
Glad it worked out for you. Take care...
Scottgu and hanselman's blogs are requisite. Sink's blog is usually pretty damn good too.
Eric Lippert (C#): http://blogs.msdn.com/b/ericlippert/ Rico Mariani (Performance): http://blogs.msdn.com/b/ricom/ Raymond Chen (Win32): http://blogs.msdn.com/b/oldnewthing/ Larry Osterman: http://blogs.msdn.com/b/larryosterman/ Michael Kaplan (Internationalization): http://blogs.msdn.com/b/michkap/
channel 9
links?
Scott Guthrie: http://weblogs.asp.net/scottgu/ Scott Hanselman: http://www.hanselman.com/blog/ Hanselman's Podcast Tags (what you actually want): http://www.hanselman.com/blog/CategoryView.aspx?category=Podcast
Bart de Smet. He doesn't post often, but when he does, goddamn is it interesting.
I think that conceptual integrity is really important. As C# developers, we get used to its features and take them for granted. As an example, I think that [static classes are just modules in disguise](http://codecrafter.blogspot.com/2009/09/c-static-classes-are-not-real-classes.html), and because the language designers failed to recognize that, they're cumbersome (like if you were forced to declare your interface members abstract) and lack a directive to import their members directly, which would be really useful. Extension methods, as well, have a weird feeling about them, with that explicit self-type. It looks like that old trick to [implement OO in C](http://stackoverflow.com/questions/415452/object-orientation-in-c/415536#415536). Now, there's a need to provide default interface implementations, so that classes don't have the burden to re-implement it or manually delegate to it. One common proposal is to have a field of a type that implements that interface and make the containing type also implement the interface by automatically delegating all interface member calls to calls to the field. This is actually what's done in the [Oxygene language](http://prismwiki.codegear.com/en/Provide_Mixin-like_functionality). Again, I have this weird feeling that, like with the explicit self-type in extension methods, this explicit delegating field is obscuring the abstraction. This is also what the Java public defender methods propose to address: default interface implementations. The proposal is to have an extension method defined in the interface (with no code) that delegates to a static method in another class (where the code is). This double declaration brings back C++ memories of separate header and implementation files. That's a lot of boilerplate for the concept that roles capture nicely. Roles, IMO, are more general. They deal with the broader notion of code re-use (and solve the default members for interfaces in the process). With roles, you don't really need interfaces. They define an interface and the default code for its members in the same construct. For the defender methods you need 2 constructs. Scala doesn't have interfaces, it only has traits for this reason. Now, I don't know how an extension to extension methods would help to solve this issues, but I do think that's the wrong path to take. As for the conflict resolution strategies, I think they're necessary to be able to explicitly define the behavior that we need. In Scala, for example, the order that you define your traits decides which methods get called. I think that this implicit behavior is fragile and might generate undesired surprises. There're already conflict resolution strategies in .NET languages for interfaces. In C# we have implicit interface implementations. In VB.NET and C++/CLI we have complete freedom to change the accessibility and name of interface members through aliasing. The proposed model for roles (which comes straight from the traits paper, with a couple of twists) just takes into account that roles can contain code, and so they need a more declarative way of resolving these mappings. But anyway, conflicts are supposedly rare. The proposed syntax can certainly be improved and simplified. Look at this part as not the essence of what roles bring to the table, but as a necessary mechanism in order to unambiguously include many of them into a class. Would you still want to push the current language concepts? That might make sense, from a pragmatic point of view. But I think we risk making a language full of cumbersome syntax, at least for outside observers. I didn't make this feature up, I just thought how it would look like in C#. You can look at the links that I reference in the post (traits paper, moose roles, traits in C#) as well as this one about [code inclusion in Sather](http://www.icsi.berkeley.edu/~sather/Documentation/LanguageDescription/webmaker/DescriptionX2Erem-chapters-1.html). I think C# would be a more complete OO-language with this concept. Thanks a lot for your comments, they really made me consider things. 
[.NET TV (http://www.dotnet-tv.com/)](http://www.dotnet-tv.com/) is an interesting directory of .NET related videos.
Thanks for responding everyone. There are some names on this list that i recognize, it is good to see that they are still active because i remember enjoying Guthrie and Hanselman in particular. Keep them coming though, the more the better. I will also update the main post to keep a list in a discoverable location. I also found a good twitter list put together by engadget: http://twitter.com/engadget/microsoft It covers more then development, but i plan on following it for a bit and then cherry picking the good bloggers. I definitely have a lot of reading ahead of me. 
Jon Skeet: https://msmvps.com/blogs/jon_skeet/
CodeBetter.com LosTechies.com ElegantCode.com
Here is Eric Sink's blog: http://www.ericsink.com/
You raise some very interesting points. Thanks for explaining them so thoroughly. &gt; There're already conflict resolution strategies in .NET languages for interfaces. Hence my surprise that you want to add another one. :) Do you really need the *role views*? Seems like the "supersede" syntax can do all of that already. (Also, why did you go for a C++ like syntax R::M instead of R.M? The supersede syntax could use an *override* (like) keyword.) ~~And what is your rationale for: ((R1)c).M(); // R2::M (after excluding R1::M) ((R1)c).M(); // R2::M (after imposing R2::M) ((R1)c).M(); // R1::M (after aliasing R1::M) Why not a compile time error for the first two? Why the different policy for aliasing?~~ (Makes sense after some thought.) &gt; Would you still want to push the current language concepts? Hard to say. If it can be done in a relatively clean way. If the proper way can not be done at all due to resource constraints. It's always a trade-off. I'll go read some more of your references now. Thanks for the links by the way.
Well, as I said, interfaces don't have implementation; roles do. So we need a declarative model for conflict resolution. The supercede is really the easy one, as you mentioned, and maybe should *supercede* the others :-) The other important ones (at least mentioned in the traits paper) are **exclude** and **alias**. I just thought that **impose** would be an interesting counterpart to **exclude**, and **hide** would be more in-line with C# and the way that explicit interface implementation works. I chose the C++ syntax so as not to mix it up with static method calls on the roles. People reading the code would be able to know which is which (static call or superceded-role call).
Here's an export of my Programming OPML in Google Reader. I tried to remove the stuff that is explicitly about non-.NET stuff but I may've missed one here or there. This is just the result of a quick macro. If you want, send me a message with your email and I will send you the OPML file as an attachment or something. Some of these are probably dead, as I browse in unread only and would never notice them. http://andreasohlund.blogspot.com/ http://ayende.com/Blog/Default.aspx http://blogs.msdn.com/b/bclteam/ http://www.dehora.net/journal/ http://devlicio.us/blogs/billy_mccafferty/default.aspx http://blogs.msdn.com/b/brada/ http://bradwilson.typepad.com/blog/ http://www.lostechies.com/blogs/chad_myers/default.aspx http://www.lostechies.com/blogs/chris_patterson/default.aspx http://weblogs.thinktecture.com/cweyer/ http://codebetter.com/blogs/ http://damieng.com http://www.25hoursaday.com/weblog/ http://diditwith.net/ http://jeremyjarrell.com/Default.aspx http://elegantcode.com http://blogs.msdn.com/b/e7/ http://weblogs.asp.net/fbouma/default.aspx http://www.bluebytesoftware.com/blog/ http://codebetter.com/blogs/gregyoung/default.aspx http://blog.iserviceoriented.com http://jameskovacs.com http://www.lostechies.com/blogs/jimmy_bogard/default.aspx http://jimmynilsson.com/blog/ http://www.iunknown.com/ http://ejohn.org http://www.google.com/reader/view/feed%2Fhttp%3A%2F%2Ffeeds.feedburner.com%2Fkozmic http://blogs.msdn.com/b/larryosterman/ http://www.lostechies.com/blogs/ http://mailinator.blogspot.com/ http://martinfowler.com http://blogs.msdn.com/b/hammett/ http://tirania.org/blog//index.html http://blogs.msdn.com/b/velocity/ http://blogs.msdn.com/b/pathelland/ http://www.pabich.eu/blog/Default.aspx http://blog.dotnetwiki.org/ http://remark.wordpress.com http://blogs.msdn.com/b/ricom/ http://abdullin.com/journal/ http://blog.wekeroad.com http://www.hanselman.com/blog/ http://blog.sharparchitecture.net/ http://www.innoq.com/blog/st/ http://blog.stevensanderson.com http://steve.vinoski.net/blog http://laribee.com http://davybrion.com/blog http://themechanicalbride.blogspot.com/ http://aabs.wordpress.com http://www.tigraine.at/ http://www.udidahan.com http://www.michaelnygard.com/blog/ http://yarivsblog.blogspot.com/ http://haacked.com/Default.aspx http://hammett.castleproject.org 
Do you get *any* work done?
Sure. I only read what interests me, but it's also part of my job description to know what's going on across a broad spectrum of niches in the tech industry.
Get your butt on twitter. Extremely powerful for this stuff. I get so many gems everyday, go through the people I'm following if you want: [_Mr_E](http://twitter.com/_Mr_E)
Step 1: Open MonoDevelop solution in Visual Studio on Windows. Step 2: Compile Step 3: Profit. There is some core compatibility between Mono and .NETv3.5. At the very least, source compatibility is pretty well maintained. I've heard rumors about people that have successfully run Mono binaries on the CLR, but I've never attempted it this myself. That said, there are libraries in Mono that aren't in the CLR. Most were written to provide similar functionality to the Microsoft.\* and Windows.\* namespace hierarchies, but not all of them.
Thanks, man! I'm happy to hear that. I guess I have to use Windows.Forms or is there a GTK# for Windows?
GTK# works just fine for Windows. I would use Windows Forms myself, but MonoDevelop and Pinta for example target Win/OSX/Linux using GTK#.
There is a set of DLLs for GTK#. You'd just have to reference them in your project. They are, to my knowledge, compatible with the CLR.
Does user first have to install GTK# or do I just statically link it into my project? For example, if you use GTK to write portable python app with GUI, Windows user first has to install GTK+, then pygtk and only then you can install the app proper. And, that's not what I want.
you can bundle it with it. 
I believe you just need to bundle the GTK# DLLs with your app
Excellent, thanks!
F# is a functional programming language for the .NET Framework. It combines the succinct, expressive and compositional style of functional programming with the runtime, libraries, interoperability, and object model of .NET. Microsoft recently released its source code under Apache License.
Or as I call it "how to work around the fact that EF 4 always does a SELECT *".
C1 is aimed at communicators who need to easily manage content on corporate websites while maintaining a consistent visual identity. C1 comes fully featured, it's straightforward to use, easy to extend, and integrates with other systems beautifully.
Cool idea, but got any links?
Looks like you [forgot this.](http://abdullin.com/journal/2010/11/11/moncai-cloud-computing-platform-for-net.html)
Oups. Thanks a lot!
Webhost4life screwed me as well when they were purchased. I switched to arvixe.com and have been happy so far.
Free plan has me excited. I've always wanted a place to try out dotnet apps. Guess I'll have to start looking into mono to avoid possible surprises down the line. Can I integrate mono onto visual studio so that my projects are compiled with it instead?
You don't have to bundle, there's a GTK# for .NET installer that sets everything up. Look at the Windows option on http://www.go-mono.com/mono-downloads/download.html.
But I _would_ like to bundle since I dont' want my users to have to install any additional stuff. And GTK# for .NET installer is additional stuff :-D
I've used Server Intellect in the past and they had excellent support response and offer SQL server hosting as well. I'd use them again in a heartbeat. 
I really like the way VisualSVN integrates in to Visual Studio, so for now I'm going to stick with SVN.
This is perfect! I've been looking for something just like this for my asp.net mvc setup. 
Still i don;t understand... Sorry I own up to being an idiot!! Reading it properly now! 
This does sound interesting, and I'm reading up a bit now. Personally, I'd like to see a Mono port to run directly on Xen kernel ala [Mirage](http://sna-projects.com/blog/2010/10/mirage/). In any case, good luck!
What he said.
Hang around /r/haskell for a while. AFAICT it's something to do with category theory...
The post talks about creating an Arrow abstraction in C#, and the possibility of then implementing Arrow-based FRP, as in many reactive Haskell libraries, and how this might be nicer to use, and possibly more efficient. Admittedly, it's probably a more abstract topic than most programmers care about, but in short, arrows are a generalization of monads. Rx.NET's IObservable is a monad that allows you to write programs that transform push-based *values*. In contrast, arrow-based FRP would allow you to transform with push-based *programs*. A raw reactive arrow expression is something like: Func&lt;T, IEnumerable&lt;R&gt;&gt;. The arrow combinators, like Select, SelectMany, etc. allow you to transform the type of IEnumerable that's returned. So why does this matter? Consider a concurrent program, like an HTTP server. If you were to build a monadic reactive program to handle HTTP requests, you would have to build a new reactive expression for every new HTTP connection. Instead, if you used arrows, where your reactive expression might be something like Func&lt;HttpRequest, IEnumerable&lt;byte[]&gt;&gt;, you would only have to create the reactive expression once, and you can reuse it safely amongst all threads. This is potentially a huge savings in memory use. Hopefully the links contained in the post itself point to enough relevant information if you want to delve in deeper.
Is this related to or superseded by [C# 5.0's async development model](http://player.microsoftpdc.com/Session/1b127a7d-300e-4385-af8e-ac747fee677a)? 
Superficially related in the sense that reactive expressions enable async programming. Both require APIs to take advantage of them however. C#'s new async syntax will probably end up being more efficient as well.
Took me awhile at first too, although this is much better explained than the first time I saw the concept. Think of it as equivalent to something like svn export, where your goal is to get a "clean" copy of a directory, where "clean" means that it doesn't have anything like \bin or \obj or .suo or .user files of any sort. If you find yourself frequently making projects or even whole solutions that follow the same general layout, you could build a starter version, use this to create a template from it, and then whenever you wanted it, it'd be a right click away. Presumably there is some way to share these via svn/etc as well, but I didn't research that.
Wait, I got it working: int counter = 1; while (cursor.Read()) { String name = (String)cursor["FirstName"]; Label labelName = new Label(); labelName.ID = "LabelName" + counter; labelName.Text = name; this.Controls.Add(labelName); counter++; } Only problem is i'm unsure how to define the position of the label? Any ideas?
 Use a Repeater. If it's actually an assignment for Classic ASP (not ASP.NET), you've apparently been dropped into a time machine.... 
I couldn't find a Planet for C# related blogs so I threw one together this weekend. If you guys think I'm missing any important feeds, please let me know and I'll add them to the list of blogs it checks. (Any other feedback is welcome as well!)
Relevant: http://blog.atlascs.co.uk/2010/12/03/the-microsoft-partner-programme-worth-the-effort/
How is this any different then a google reader feed for all the blogs?
That looks interesting. Does anyone have stories about using it on projects? How did it go on a production system?
Well I of course use it, but the documentation was severely lacking until this release. I know of at least one other person who used the last release for it's MIME and POP3 capabilities, and they [left a review at sourceforge](https://sourceforge.net/projects/sasa/reviews). Edit: fixed typo.
How does the IL Rewriter compare to PostSharp, which is probably better-known?
The IL rewriter is specific to certain abstractions in the Sasa library. For instance, it strips away Sasa.TypeConstraint, and in the future it will make inline pattern matching on Sasa.Either, and will provide [propertyof, methodof, etc.](http://evain.net/blog/articles/2010/05/05/parameterof-propertyof-methodof). Basically, it's purpose is to expose functionality available in IL but not available in C#, and to make certain high-level abstractions in Sasa more efficient by rewriting the code the C# compiler generates. PostSharp is more like a framework for writing custom IL rewrites, so it's a general purpose tool where Sasa's ilrewriter is a special purpose tool.
It's more efficient to do this with generics. It avoids the boxing and unboxing that comes with making the cast. 
Do you have an example? If I can make this more efficient I'd love to see it. Can generics be applied to increase performance and maintain the type safety of the object? 
It's a neat trick but seems like a complex bad design to me. If you're shipping this base class (and by shipping I mean allowing other people than yourself to use it/derive from it) you have no idea while using this property what its behavior is. Simple things like: foo.Value = "abc"; if (foo.Value != "abc") Trace.WriteLine("Crazy"); may have different behaviors. I don't know your use case but seems like trouble to me.
It is overly complex for the basic example given in the post, but I assure you that there are valid applications for it. Value in my case is not simply setting and getting a string behind the scenes. I can't get into details, but there are a number of operations performed based on the derived type to deliver the expected value from a complex object.
In effect, you're implementing the Getter/Setter pattern from C++ and then wrapping it in a property? It just seems like overkill. If you're writing something that's tricky enough to require this, I would think that you (or anyone else using your base class) would understand the Getter/Setter pattern. Can you provide a real-world example? 
I've been discovered... I am a C++ developer who has taken to a very strong liking to C# in the last year. 
[K.I.S.S.](http://en.wikipedia.org/wiki/KISS_principle)
point taken, just thought it might be helpful
Obtuse code (as clever as it may be) is rarely helpful. What is helpful is imagining yourself as the guy who is responsible for maintaining your code (after you've moved on to another project) and refactoring as such.
This scenario allows me to enforce implementation where I want it and minimize additional code where I don't by implementing half of the setter/getter in the base class. I will say that refactoring could be difficult, but maintaining or adding to it would require minimal effort, which is my current primary focus.
Most certainly. The .NET framework runtimes are installed automatically with Windows Updates, and are installed with Microsoft Office and Internet Explorer. So unless they are running a windows machine that hasn't been updated in 10 years they already have the .NET framework installed. In fact there are far more machines with the .NET framework installed than the latest visual C++ runtimes. You also don't even need to worry about it if you build an installer using the visual studio wizard because your setup.exe will automatically install the appropriate runtime if it's missing... which it won't be.
I remember that being used as a reason for not using .NET. It stopped being a valid reason 5 years ago.
From what I can read the XP Service Packs only included optional .NET installs. Not too sure how optional it was (need to *uncheck* something for example?). It became first preinstalled for consumers with Vista, and Server 2003 before that. See here for example: http://stackoverflow.com/questions/433567/how-do-you-distribute-a-net-application
This is a little off topic. I was talking to a senior developer about about a web project I was working on. It was a slight modification to an existing website, standard maintenance stuff. He mentioned that (in his opinion) we should support IE6, Safari, and Firefox (possibly Opera). My response was, "Fuck IE6. If someone is trying to access my website with IE6, fuck them." 
Fuck most people who are at work with lazy IT?
Especially them!
Remind me to never hire you.
Some legacy systems require IE6 due to active-x plug-ins or other stupid design decisions. Remember that your site isn't the only one someone is going to use. However, if there are no such legacy requirements, then it is a poor decision to target such old technology today. Also remember, using IE6 might not even be their decision, but a decision due to stupid administrators. 
Simple answer: YES
I don't get the blind hatred to 3rd party software. If you want a browser and don't have the EU version of Windows you need to actively go get it. Flash isn't automatically installed nor is Java. Hell until recently even an archive application needed to be installed. Codecs, runtimes and updated runtimes need to be installed as well. I don't see why this is really an issue that people complain so much about. As others have put it, the default installer for a .Net installation application is native and will check for a proper runtime version before launching the real product installer. If they don't have it, it will be installed. 
My approach to IE6 is that for just informational sites, it should be possible to get the information, but it doesn't need to look perfect. Once I need Javascript/AJAX or anything fancy, forget it.
I agree with your first point, but then those users would most likely be within some internal environment making them small and not very important to anyone outside that environment. &gt; Also remember, using IE6 might not even be their decision, but a decision due to stupid administrators. I think this is becoming less of an issue. My feelings mirror my response to your first thought. IMO, We reached a critical point a few years ago were it is worth the losing the IE6'ers (or forcing them to upgrade) rather than continue the expense of maintaining compliance with that extremely old browser.
True. Since we are getting further and further away from the .com era where anyone with the impression of knowing how to turn on a computer got to be an administrator, they are now either getting real knowledge or being replaced with people that know what they are doing. There are still some bad guys out there. I worked with one guy with 10+ years of exp as the IT guy/admin and he still didn't have a clue. Hence my first reply. Thinking about it this last decade has been really different where certain technologies have been lasting much longer than previous versions even though things are changing rapidly. IE6 came out over 9 years ago. I guess time is really flying :P 
Wait...do versions of Windows come with the VB6 runtime components now? As I certainly remember having to package those back in the day. Same thing for Visual C++ runtimes. The simple truth is that any non-trivial application is going to have library dependencies. Microsoft could've made our lives easier by forcing .NET frameworks, SPs, and KBs via Windows Update, but I'm sure the decision not to do so for XP was made back in the days of MS's antitrust nightmare. Probably the most painless way of doing this is to include the .Net Framework Client Profile, which is a reduced subset of the full framework. I think that this adds ~28mb to the installer. Alternately, you can include the &lt;1mb web installer, and have it acquire the framework if it is absent from the client machine.
Your installer can look for it and cause it to be installed first. It's not a big deal. Like a game requiring DirectX. Vista came with .NET 3 and Windows 7 came with .NET 3.5 I believe (this is off the top of my head).
It stopped being a valid reason when you could include the runtime with your installer which was further back than that. You could argue people didn't want a "slipstreamed" install of some framework but if you go back to VB6 apps there were a number of dependent libraries and frameworks that were bundled with a build so there wasn't much of a difference. The biggest barrier to .NET on the desktop was the terrible UI tools .NET had prior to WPF. 
Call us lazy, but when management refuses to spring for software to help deployment, it's hard to release updates very often. Even worse when each update must be submitted through management for consideration. So only once they get rid of that legacy intranet app, and even then after that, once they finally get IE7 or IE8 on the ghost build, they then have to deploy to each and every machine. I feel their pain. Fortunately I'm at a university and we can release every 3 months or so with relatively little oversight on updates.
About a year ago, Scott Hanselman asked around MS and while he doesn't cite his sources, he claimed then that: 90% of PCs have some version and 65% have .NET 3.5 SP1 http://www.hanselman.com/blog/HowManyPCsInTheWorldHaveTheNETFrameworkInstalled.aspx
If our website is anything to go by, then this is now a small minority of users. We get about 7% of website hits from IE6 now, and given that we are just in the middle of upgrading from IE6 internally the chances are that a significant portion of those 7% are from people internally checking the site. For most sites, it's probably still worth making sure that it's still just about usable in IE6, but there's usually little value in spending any significant time to make it look pretty if the layout breaks in IE6.
I agree that there are plenty sites now for which it makes no statistical sense anymore to keep supporting IE6. I'm just expressing disappointment with the attitude that IE6 users are some plague that needs to be banished even if a sizable percent of your users do still use IE6. And I'm not talking about making it 100% identical across all browsers, there will always be small differences, but usable.
Now to see if I still have a wired mouse anywhere in the house I thought this was a problem with some telerik items I had installed - Finally found [this](http://blogs.telerik.com/kevinbabcock/posts/08-06-28/what_to_do_when_your_toolbox_is_devoid_of_radcontrols.aspx). One of the strangest solutions I've ever seen. 
Here's my experience, somewhat different from other people's around: there's no fucking XP SP that installs a single trace of any version of DNF! Then, DNF is not a critical update so I wouldn't rely on Autoupdate for that. There's no fucking IE version (not even 8) that installs DNF. But, in time, many apps (other than IE) probably managed to distribute some version of DNF, so you could hope for a decent 2.0. I'm talking only about XP. From Vista on things are different, it comes with 3.5 (not SP1 though, IIRC). On the other hand, it is very easily distributable using setup and deployment tools in VS.
&gt; setup.exe will automatically install the appropriate runtime if it's missing Yeah but that would mean an extra 50 megabytes in size if you want users to be able to use your software without an internet connection.
But then this poses another question, maybe something more philosophical, when is something really something? :) How do you manage to get to the essence of something? How do you get rid of all the transitory facets and 'conjunctural' polymorphisms? Is that even an useful pursuit? I'm not challenging what you say, I'm asking myself too.
Holy fuck 50 megabytes
Keep in mind that's a rough estimate.The last time I checked, the .net redistributable's size was around there.
Personally, I would make it free for students and free, open-source projects. $200-300 for commercial use. EDIT: Ultimately, I think it will be similar to the pricing structure of [MonoTouch](http://monotouch.net/Store)
$1-99 for personal (none-transferable) and $200-300 for commerical (transferable) sort like Jetbrain's license structure. 
I agree that would make it approachable and then I could actually try it out without a significant investment, then if my software worked buy it for distribution
On the other hand I wouldn't mind this one either if the free for students and open-source isn't an option.
$0.00. It's interesting, but pay for app development? It reminds me enough of Apple Antics to make me slightly nauseated.
If anyone hasn't tried the new Razer Engine yet it's definitely worth taking for a spin.
yay, now for the long road of converting all our views.
Can it be run side-by-side with the default ASP.NET engine?
With MVC 3 are there still compatibility issues with user controls written for ASP.NET Webforms? I really want to get a new project I am on onto MVC but I need to be sure I can use 3rd party user controls developed for webforms. From my research I have gotten mixed reviews on the reliability of web forms user controls in an MVC project.
Thanks for the heads up, it looks pretty sexy.
I don't think it works too well, but once you get going on mvc you won't want to have the webforms baggage at all.
Yes, if it doesn't find your .cshtml then it will fall back on .aspx.
You can still use them with the traditional code, you don't *need* to convert to Razor... Edit: as I see you've realised above :-)
I tend to agree, the problem is we use a few 3rd party servers that integrate chunks of functionality with custom user controls. The controls come pre-made from the vendor so switching over to MVC would be a couple hundred man hours or more. Of course the developers love MVC and have no trouble spending the time. However convincing management and other leads of the same is a bit of a sticking point. It's not too bad for us, most of our functional code is using JSON services and JQuery anyway so the delivery layer will be purposely thin making MVC less of a sell in the first place. 
reading, its fundamental. 
I have mixed feelings about Webforms compatibility in ASP MVC. On the one hand, it would allow people in your position to ease the transition to MVC. On the other hand, it would allow webform's main technical problems (i.e. formstate and the event handler model) to stick around. If it runs, it won't be "transitioned" because management won't see the point of paying for that, and the bad habits of webforms will continue. Allowing formstate etc. in MVC apps really shouldn't be encouraged in any way. We're in the new world of jQuery getting data over ajax from web apis that are rest-y urls now. For new code, not having Webforms user controls is a feature not a bug. Basically: Eeew, you got webforms in my MVC. Webforms was a dead end, and now webforms is dead. I hope your upstream vendor works with you on this. 
I doubt the upstream vendor will. 95% of our application is JQuery consuming WCF services exposed as RESTful JSON endpoints. The delivery application was initially MVC2 but when it became clear that these controls were web forms only we were forced into webforms to use the controls. It's not a terrible impact since we aren't planning to have much backend code anyway, it just makes it more difficult for us to manage and test the backend code we will write in the app. Honestly my main issue is that my dev team loved working in MVC and were quite excited about using it for this project. It was a crap day when I had to deliver the news that we have to go with web forms to support these 3rd party controls. 
I know, but I want to convert, just not looking forward to the big job.
&gt; A domain-specific language is a notation, **usually graphical** Wait, what?
Leave it to Microsoft to turn the concept of DSLs into a drag-and-drop interface that looks like UML.
I'm a MS programmer and that statement made me cringe... 
I found that going from my local copy of code to GoDaddy was a bit of a pain. I'm used to controlling my own server environment (I have a MSSQL server and two IIS servers that I control at work), so deploying to someone else's environment was strange and required me to make quite a few changes to my code and web.config. When you say that your code fails horribly, how exactly does it fail? All I can see is the source code for your page -- is that how it's failing horribly? If so, it's acting like there's no server-side processing at all. Is GoDaddy your host?
It's been a couple of years since I deployed an asp.net site to shared hosting, but I always had good luck with [7host.com](http://7host.com/). In any case, you'll want to go with a host that specializes in asp.net hosting, and that gives you a control panel that replicates as much as possible the functionality of the IIS MMC plugin. The problem you have above is almost surely due to the host not supporting asp.net, or you not having configured it correctly. 
This might help you locate a hoster: &lt;http://www.microsoft.com/web/hosting/home&gt; Edit: Also, if you haven't done significant amount of work with your website, try building it using MVC instead of WebForms. Its generally regarded as a much better platform for web dev.
Godaddy is my current host, and my hosting is set to support ASP.Net 3.5 which is what I'm currently developing in. When I publish my [files](http://imgur.com/ySVgj) to Godaddy and open them in a browser such as IE or FF, it purely displays code as you see when opening that link. My guess was that there needs to be some alteration in the web.config file, but I've never done this before so it's purely a guess. If you'd be willing to chat sometime, I'd be more than willing to pay you for the help. This problem is kind of putting a halt on my development and job search at the moment. Edit: Directory/Anon browsing is enabled btw, so if you view that same source but the /web.config instead of the /Default.aspx, you can see how it's set up.
+1 to MVC. I have some old WebForm code that I still need to maintain, and it's painful to even look at since I switched over to MVC.
I'd be happy to help you debug the issue. I'll message you my contact information. Also: Your site is identifying itself as being hosted on on Apache. My GoDaddy hosted site identifies itself as being hosted on on IIS7. I think that's your issue.
Yeah, that's just plain wrong. I'm currently working on a DSL and it's code-only for know but I was researching the possibility to add a graphical designer on top of it and this article does a pretty good job of explaining that. The way I see it I start by making an internal DSL in C# and later I *may* add a graphical DSL for Visual Studio that generates code that uses my DSL.
What particular project do you work for? Some from-the-horse's-mouth would be cool in this subreddit.
+1 more. I'm going to do my best to make sure I never again have a job where I have to develop with WebForms now that I've switched to MVC. I'm writing an MVC app that will be going live later this year and I plan to use the VPS hosting from http://www.softsyshosting.com found at the link above.
As opposed to what? Some lex &amp; yacc app built with autotools? 
Page isn't being processed. My guess is that either your host's ISAPI filters are all jacked up (unlikely) or you are using a Linux host. Btw, part of your hosting package is paying for support. Don't be afraid to shoot them an e-mail! edit: just saw shat blackice912 posted. you are definitely running on a server not running ASP.NET
MVC is a pain in the ass for small projects that don't require all of that routing and controller code, and global.asax is just another place to screw up the configuration (as if web.config isn't messy enough already, especially if you use the Visual Studio designers). With Microsoft's recent fuckups, particularly with reporting controls and entity framework, I'm trying to move beyond ASP.NET altogether but WebForms is still adequate for many projects.
Sorry - I wasn't clear. I'm not a programmer from within MS, I'm a programmer using MS technologies. I fail.
A DSL does not *require* to be graphical or some obscure script either. Take LINQ for example.
For small projects there is little or no need to touch the default routing at all.
Your resume site is not going to get hit a ton. You can get a cheap windows azure account and eliminate a lot of deployment headaches as you can deploy to azure directly from your IDE. 
No - but the concept of a DSL is more broad than what they seem to have built here. In fact, I'm not even sure what they built here has anything to do with DSLs. Could you not use these tools to create any API at all? Why does it have a separate project template? It would be like if MS added a project type called "Strategy Pattern Project." It just doesn't make a whole lot of sense to me. Maybe I'm wrong, and this is actually a really valuable contribution to the DSL pattern, I don't know. But it seems pretty strange and unnecessary to me.
The problem isn't that Microsoft made this; I haven't looked at this in any depth, but it looks like it could be useful. The problem is that Microsoft decided to muddy the waters by hijacking an existing term with a specific, well-established meaning that applies across the discipline, and use it as a label for something else entirely. This will make it even more difficult for the subset of MS programmers who don't have any experience outside of Microsoft's insular realm to have an intelligent conversation with developers on other platforms. It's embrace &amp; extend at the natural language level. The intent isn't necessarily evil, but it's inconsiderate and irresponsible to the entire community.
TL;DR: LINQ = the unholy spawn of DataSets and XML. I used it for a few years, I can summarize LINQ development this way: you spend weeks to save a few minutes of coding.
Couldn't disagree more. IEnumerable&lt;T&gt; as the base type for virtually every collection type is immensely useful. I mean, geeze... List&lt;object&gt; theList = new List&lt;object&gt;(); foreach(object A in someCollection) { if(Something(A)) theList.Add(A); } //vs. theList = someCollection.Where(A =&gt; Something(A)).ToList(); only multiply that out for when you're working with disparate collections of disparate types and need to do some processing. Linq as a time-saver and code beautifier (if understood) can't be overstated for me.
agreed. linq is fantastic.
totally agree. You can do some amazing things with LINQ that would normally require some intense T-SQL (db) or algorithms (lists). LINQ makes my life so much easier.
Your ignorance is showing
I came across by chance and find it fantastic: I'm using it to solve Sudoku puzzles.
[ray tracer in LINQ](http://blogs.msdn.com/b/lukeh/archive/2007/10/01/taking-linq-to-objects-to-extremes-a-fully-linqified-raytracer.aspx) 
That's neat.
You obviously don't get it. You should be able to learn enough LINQ in an afternoon to put it into practical use. It saves me hours of typing &amp; coding every day.
You might want to check out WebMatrix
I had to get that coffee mug! LINQ to SQL is great. Unfortunately, LINQ to Entities removes some of the operators like Single&lt;T&gt;() (hint: use First&lt;T&gt;() instead)
This looks very cool, thank you for the reference! Maybe I can use that lightweight IIS 7.5 web server to replace Cassini.
Umm... I have access to the `Single&lt;T&gt;()` extension method when applying it to an object set. For example, if I my ObjectContext is in a variable called `context` and I want to get a particular Product with the id of 1, I can do: context.Products.Single(p =&gt; p.Id == 1)
By the way, doesn't LINQ specifically refer to the new syntax. For instance, in the example above, wouldn't the LINQ version be written like so: thisList = from object a in someCollection where Something(A) select A; I know they both produce the same results but I thought the term LINQ specifically referred to the new syntax.
Actually, they don't produce the same results - and that's a bit of a big deal, actually. Due to late binding, your example produces an IEnumerable&lt;T&gt; where the elements will not be bound until you try to access them. You can write a hugely long query, but the business parts of it won't be executed until the resultant objects are accessed - .ToList() forces this. Understanding this is kinda big for using Linq in production code. As for the query syntax... it's just an option - both method syntax and query syntax are fully supported as 'linq', and both end up compiling down to pretty close or exactly the same bytecode. 6 in one, half-dozen in the other.
Oops, I forgot the ToList call. I always forget to do that since I need to wrap the whole query in brackets to get it done in a single statement. That's why I hate using the query syntax; the fugliness caused when you have to wrap the query in brackets just so you can call Count, First or Any. The only good thing about the query syntax is that it makes complicated queries more readable in my opinion. Compare: from r in Formula1.GetChampions() from c in r.Cars where c == "Ferrari" orderby r.LastName select r.FirstName + " "+ r.LastName; With: Formula1.GetChampions() .Where(r =&gt; r.Cars.Contains("Ferrari")) .OrderBy(r =&gt; r.LastName) .Select(r =&gt; r.FirstName + " "+ r.LastName); The second version has a higher signal to noise ratio in my opinion. Btw, how come these queries produce the same results (I checked in LINQPad). Shouldn't the first one give every racer's name whether or not they drive a Ferrari since the name is fetched from the 'r' variable? But back to my pedantic question, I always thought the name LINQ (language integrated query) was referring to the new query syntax specifically because you have a query right in your regular C# code. Whenever I write queries using the actual extension methods, in my mind, it doesn't feel like I'm actually using LINQ. It feels like just using some common extension methods. But I guess a name is needed for all the extension methods LINQ is based on.
use LINQ to SQL requires almost no tutorial. Basically load up one of the LINQ to SQL mapping files (.dbml) drag your SQL tables from the server explorer into it. Some connection string magic may be necessary if the connection string is different in production. Now just var db = new MyDB(); var item = (from i in db.Items where i.Cost &lt; 15.00 select i).FirstOrDefault(); item.Cost = 10; db.SubmitChanges() Now profit (the only weird thing maybe connection strings if your final db isn't local or something, if thats the case you will just have to tweak the connection string in app.config. There are more complex ways to do these things but this is an easy way to get started)
Let me google that for you. j/k. I use the SQL Data Adapter. Here is a rough example of how they work. http://dotnetperls.com/sqldataadapter I'm not sure if it's best to use, but it gets the job done.
Since it sounds like you are using the latest and greatest Linq2Sql is likely the path of least resistance. http://weblogs.asp.net/scottgu/archive/2007/05/19/using-linq-to-sql-part-1.aspx You can also consider nHibernate. Most developers in .NET don't really use System.Data and query databases directly due to a number of possible security and data gotchas. However if you do want to do "old school" this will do the trick: http://dotnetperls.com/sqlclient BTW: Its SQL Server 2008 and Visual Studio 2010. It's also important to know if you have SQL Server 2008 or SQL Server 2008 R2 though only in some circumstances. 
Check out the entity framework. As nice as it is to learn the very basic functions and objects of System.Data, it will hurt you later on if you try to replicate already available functionality with it.
Do you have anything specific in mind? Or do you simply wish to enable database connectivity in your application? There are three "main" (Microsoft made) ways to connect to a database sensibly in .Net * Roll it yourself in [ADO.Net](http://www.codeproject.com/KB/database/DatabaseAcessWithAdoNet1.aspx) (In-line SQL statements, or stored procedures) * [Linq2SQL](http://weblogs.asp.net/scottgu/archive/2007/05/19/using-linq-to-sql-part-1.aspx) - using the Linq programming paradigm to create queries, which are then turned into SQL statements by the compiler * The [Entity Framework](http://msdn.microsoft.com/en-us/library/bb399182.aspx) - a powerful ORM solution, that reverse engineers a database structure into a colection of "entities" to program against. My advice would be to use the Entity Framework, as it's probably the easiest to pick up. (There are countless other database/ORM solutions out there too, Subsonic &amp; nHibernate for example)
I would check you LINQ to SQL and the Entity Framework and pick the one that is better for your needs.
Thank you, as you can tell I'm relatively new at this database stuff :)
My google fu is strong, but everything I kept finding wasn't what I was looking for it seemed. Thanks for the link, much appreciated.
Well I'm learning as a side project. My boss mainly uses stored procedures and I'm being weened into development on the SQL side of things finally after mucking around in the UI side of life for much too long. From your description it sounds like Linq2SQL is going to be my best bet. Gracias.
Thanks for fix on that. We're using 2008 R2 I just learned.
Well, they look a bit different, but in fact the queries are the same. In your first query, the where c line is what limits the results that are moving forward to your select statement. from r in Formula1.GetChampions() //let's call our current enumerable curList from c in r.Cars //curList now is an IEnumerable&lt;IEnumerable&lt;T&gt;&gt; where c == "Ferrari" //Removes entries from the the outer IEnumerable whose inner IEnumerables don't have Ferraris orderby r.LastName //you're ordering by the outer IEnumerable select r.FirstName + " "+ r.LastName; //and selecting from it, too. This just goes to show that the where clause works about as you'd expect. Perhaps it would be clearer to do: from r in (from c in Formula1.GetChampions() where c.cars.Contains("ferrari")) orderby r.LastName select r.FirstName + " "+ r.LastName; which is a bit more explicit in what it's doing. As for your pedantic question, I did a bit of research and I think you're right - what I've been unthinkingly calling Linq expressions are, in fact, Lambda expressions that use Linq.
I use softsyshosting for my vpn. I develop both MVC and WebForms. IIS 7 has a large learning curve in my opinion when compared to 6 but it is a vast improvement. Depending on your set up it's most likely an ISAPI problem. This article is really helpful. http://chee-yang.blogspot.com/2009/10/configure-windows-7-iis7-for-isapi-dll.html
Have you checked out Aforge @ Google http://code.google.com/p/aforge/ The project includes very powerful and useful imaging libraries which I have used to create camera software my employer. 
So, we haven't heard of wait handles?
Ew, yuck. Polling? Really? Using background worker is much cleaner and more versatile: BackgroundWorker bgw = new BackgroundWorker(); bgw.DoWork += new DoWorkEventHandler( (sender, e) =&gt; { for (int i = 0; i &lt; 10; i++) { Thread.Sleep(1000); Console.WriteLine("threaded work!"); } } ); bgw.RunWorkerCompleted += new RunWorkerCompletedEventHandler( (sender, e) =&gt; { Console.WriteLine("done"); } ); All in one method, isn't that nice?
From a web/web application developer perspective: I came from the LAMP world (PHP/Perl, MySQL/PostgreSQL) to .net. I found ASP.NET MVC to be straight forward and getting going with even a small website is quick. I haven't done any plain ASP.NET but it looks much more complicated/abstracted than the MVC approach. So if you aren't familiar with either I'd highly recommend MVC. Just read about ASP.NET view state if you have any doubts about MVC! Good books: * ASP.NET MVC 2 in Action is good but some parts are brief over views and the overall tone is "this is how we do it" which has pros and cons. It suffers from trying to cover too much so in some areas the coverage is light. Highly recommended as an introduction. * C# in Depth is great. I'm currently reading: * Dependency Injection in .NET * The Art of Unit Testing If you're on a budget: Manning runs a lot of sales/deals so if follow them on twitter and/or subscribe to the daily email and you can usually pick up these books for 50% off. All of these books are from Manning (not intentional, no affiliation, etc).
I forgot one detail: ASP.NET MVC 3 with the Razor view engine has the cleanest views I've done yet. It is really nice. So if the other view engines look ugly to you, take a look at a Razor example.
What's the oldest bug in your company's bug tracker, tbsdy?
Whats a bug tracker?
...or the guy hasnt upgraded since 2005.
I just confirmed this is still a bug in .NET 4.0. It has an easy enough (though not pretty) workaround, though. The reason this exists, I believe, is because Windows Forms applications contain an (ugly) default handler which you are supposed to replace with your own. But they didn't make it smart enough to not replace your 1st handler with the 2nd, rather than just the default one.
**Watch This Shit.** It's excellent.
I wish I got it up earlier - this ends tomorrow (10 FEB 2011) at 2100 PST
Why u no let me DOWNLOAD these videos / slideshows /presentations for later viewing, Pluralsight???!
My company has a pluralsight subscription and it is **Awesome!**
I want one...
You can download the samples...
[WPF](http://msdn.microsoft.com/en-us/library/aa970268.aspx), perhaps? You can use C# or VB.NET.
downloading them now, will let you know when I've got them all downloaded. Where shall I upload them? They're all WMVs
WinForms is simpler but more limited, but if you're already learning XNA and WP7 stuff then you should be ok with WPF. 
256MB
Uuh... not sure, lol. 
http://btjunkie.org/torrent/ASP-NET-MVC-3-0-FundamentalsASP-NET-MVC-3-0-Fundamentals/42391a2e005f59134a724b56d32443f47bdd7ab473f5
For windows development on the client using Microsoft tools, WPF is pretty much the current standard for new projects so its most certainly a good bet. 
What does XNA have to do with WPF? I thought XNA was just a .NET wrapper around DirectX.
As others have said WPF what you should learn. WinForms is not getting updates, fixes so it will still be available for quite some time but WPF is more advanced and will be the tech of choice. From my small experience with WPF, it is extremely powerful and flexible but the tools are a bit behind so expect to mess a bit with XAML (the XML language in which you define the UI) and do a bit of head-scratching with the more advanced data-binding scenarios. It takes extra effort and is in no way indispensable but it's a beautiful thing to make a WPF application using the Model View View-Model pattern. Basically in the end you have literately zero lines of code in the UI part and all the logic is kept separate. This is simply impossible to do in WinForms as the forms are basically a bunch of code hidden in a file and there's a ton of things you just have no other way to do but via code in WinForms. In any case my main argument is the following: WinForms is a dying platform, WPF is on the way up. I personally refuse to invest time and money in dead stuff. 
You're correct, but WP7 uses both XNA and Silverlight, which is a subset of WPF. I believe @daoom is assuming that WP7 implies the original poster has some exposure to WPF. 
What Randolpho said. If he is already doing WP7 (and can handle XNA), then he should be able to easily get the hang of WPF. 
Oh, I did not realize that WP7 implemented XNA. Thanks for the clarification.
SEED ;)
No problems. Basically, there are two APIs a programmer can use for WP7: Silverlight, for event driven UIs (typical use) or XNA for loop-driven UIs (typically games). Language is .NET, so pretty much C# or VB. 
a million upvotes to you sir!
A quick search leads to [stackoverflow](http://stackoverflow.com/questions/2769040/request-for-the-permission-of-type-system-web-aspnethostingpermission-failed-wh) 
Thanks, but I went through all that and it's still not working. Looks like I might need to change the LoadUserProfile setting, anyone know where to do that for SSRS? It's easy to change in IIS but I don't know where that setting would be for SSRS.
A NuGet Package sounds delicious.
I do a lot of BI stuff and I think it's only tangentially related to software development.
The ActiveDirectoryUserGroupsPath value in your web.config is probably no longer a valid LDAP mapping is my best guess.
That would've been my guess too, but the value (OU=BD Collections, DC=BDNET, DC=COM) is correct...
Their first project will be a complete rewrite of our job board (http://www.nurse.com/jobs/) from ColdFusion to ASP.NET. Sorry for the commercial post, but this guy's success (http://www.reddit.com/r/django/comments/f1c64/im_hiring_a_django_dev_in_san_francisco/) inspired me.
Cold Fusion. Still gives me nightmares.
Approx pay rate ballpark? How large is your current team?
If you are starting off fresh I'd recommend to take ASP.Net *MVC*.
I second this. My company has moved to ASP.Net MVC 3 and we all love it thus far.
I often wonder why a 4 year CS degree is always desired. I have no degree and have/do work(ed) with a number of non-degreed yet quite accomplished developers.
I second this. My company has moved to ASP.Net MVC 3 and we all love it thus far.
If you need a contract / telecommute, hit me up.
The most talented devs at my company are those without degrees. Not saying this is always the case, but it's definitely quite common.
 When you shop for a used car, do you get the car fax?
I thought that's what a resume with relevant experience was for?
Thirded. After programming with MVC for the last nine months, I don't ever want to work with Web Forms again.
 Do you take what the sale posting takes as genuine (2011 toyota, low miles, only $5999 it's a steal! ;) ), or do you ask for more credentials? I've bought used cars both ways, and I feel a lot better getting the car fax. I'm a developer with 15 years professional experience and I don't have a degree, so I understand how a degree doesn't matter much. I also understand it doesn't hurt to ask for more credentials when making a large purchase. It makes perfect sense that a degree is desired but not required. 
Desired, but not required, being the key. I tried to apply for a senior .net software engineer position with UPS a few months back. Their online application system wouldn't even let me continue with the application after I answered "No" to the "Do you have a bachelors degree in computer science?" question. Fine then, I'll take my 14 years of experience elsewhere.
They better have fixed the Search Box!
Hopefully there are some speed improvements. I've been using Visual Studio since 6.0, and 2010 was the first version that felt like it took a step back from the previous version. 
This? http://connect.microsoft.com/VisualStudio/feedback/details/576745/find-and-replace-dialog-grows-wider
VS 2010 runs screams fast on my quadcore 2.53Ghz Xeon with 12 GB of RAM.
Yes! :D
No :( It has shitty onboard video.
I can only suggest you place a breakpoint on the following lines and debug the page. I think this is where the problem lies. FormsAuth.LdapGroups adAuth = new FormsAuth.LdapGroups(adPath); SortedList groups = adAuth.GroupList(); You could try: SortedList groups = new SortedList(); groups = adAuth.GroupList(); That way when you attempt to iterate through the list, if its null, it will just skip past the foreach. This may prevent the error, but that won't solve your problem. Your best bet is get a coder to look at this. But I'm sure you already know that, not to mention the associated costs! Best of luck!
Seems to be working fine, after about 10 minutes of doing my usual stuff.
Am I the only person that gets kind of mad because the regular expressions that you use in VS's find and replace dialog [aren't regular regular expressions](http://msdn.microsoft.com/en-us/library/2k3te2cs%28VS.80%29.aspx)?
I had to vote this up... :-)
You should probably use a delegate for that. public class Foo { public void DoSomething() { var data = new object(); var bar = new Bar(); bar.Process(data, this.ProcessingFinished); } public void ProcessingFinished(object data) { // do post processing } } public class Bar { public delegate void ProcessingFinished(object someArgs); public void Process(object data, ProcessingFinished finishDelegate) { // do some stuff var finishData = new object(); finishDelegate(finishData); } } Also, there is such thing as an asynchronous web service in WCF, so you probably don't want to force serial behavior on something that is asynch by nature for the purpose of a web service.
Nope, just have a regular SATA hard drive. I asked for SSD but apparently our equipment supplier hasn't caught up to that tech yet.
You've dealt with the differences between NULL and an empty string, right?
instead of this - For I As Integer = 1 To 6 System.Threading.Thread.Sleep(500) If ResponseData &lt;&gt; "" Then Exit For Next setup an AutoResetEvent which can be signaled inside the GotSomething callback then you can replace that section of code with waithandle.WaitOne(thewaithandle, 3000); which will either wait for the handle to be signaled, or return after 3 seconds 
&gt;Oddly enough, if I put MsgBox("foo") on a line between the sleep and the check for ResponseData, it works fine... Not that it's the correct way to do it, but try putting a DoEvents() where you had the MsgBox(). *Edit* I see it now. Dur. You aren't getting your events because you are calling Thread.Sleep(). When a sleeping thread gets an event it goes on it's message cue until it wakes up. The message box 'fixes' it by processing events after the sleep. The correct way to do it is to use callbacks, but a dirty way that would work is to replace those calls to thread.Sleep() with something like this (sorry I'm a C# guy): private void ThreadWait(int ms) { DateTime Timeout = DateTime.Now.AddMillseconds(ms); while(Timeout &gt; DateTime.Now) { DoEvents(); } } 
Not that there's anything wrong with your post, but is there any particular reason you aren't asking this on [Stack Overflow](http://stackoverflow.com)?
Unfortunately, there's no such thing as DoEvents in ASP.NET - at least not as far as I've researched. It's present in the winforms version but not in services or webforms.
Tried that; no luck.
Yes; as a matter of fact I explicitly declare it to be an empty string in the code, and the DLL also explicitly handles empty strings.
No luck. But then again I may have just been stupid with the code. I'll try it again tomorrow when I'm less bleary-eyed.
Mainly because I didn't think to post there. ;-) If I can't get it working tomorrow morning, I'll post there as well. I've always found Redditors to be very helpful, so it was my first thought. Traditionally I've posted to the MS newsgroups, but a couple of years ago they removed a whole bunch of groups so that none of them seem very relevant to anything I need info about.
 There's no such thing as MsgBox() either in ASP.NET unless you link in WinForms (i'm not talking a js alert() box). How are you showing a message box? What it sounds like is that you are getting a WS request, passing some info to a DLL to process, and then return the results in the request. The problem is the call to the DLL processes asynchronously, so your WS request finishes before the async processing in the DLL finishes. There are a few ways you can go about this. The straight forward way is to take your code that calls the DLL to process, and put it all in a *new* thread and wait for it to finish, similar to what you are doing now by calling thread.sleep(), but it will work like you expect if you create a new thread instead of using the main thread like you are now. When you call thread.Sleep() on the main thread, all event processing stops until the thread wakes up, but that's not true on a background worker thread. The other way to do it is probably the right way - your API may be wrong. Since the processing is asynchronous anyway, your WS should have two calls instead of one. Right now you have something like RequestDataAndReturnResults(). What you really need is something like RequestData(), and ReturnResults(). Your WS API should be async too. 
Install took a while, but other than that all good.
To modify snarfy's example a bit, what if you tried something like this instead of your For / Next loop: DateTime expr = DateTime.Now.AddSeconds(3); while(DateTime.Now &lt; expr &amp;&amp; String::IsNullOrEmpty(ResponseData)) { Threading.Thread.Sleep(1); } Basically the thinking here is you are spending far less time sleeping and more time looping. I wouldn't think you'd want to sleep for 500ms anyway. Sleeping for something less will keep your processing more responsive. It's something you could try at least.
about fucking time. I wonder if old OCX's can finally be used again.
Given all the things already posted here that haven't worked, I would be looking for as full a sample as you can post (not sure how secret or proprietary your code is) to try to diagnose this. You should have good luck on Stack Overflow though, but I'm sure it will help to have working and non-working sample code.
well, your way of doing it is terrible regardless. the way i suggested is far more proper.
What a monster, I wish my servers where that powerful.
What is the MS Connect ticket number for the OCX bug? 
I think I see what's going. I'm willing to bet that library of yours is COM based. If that is the case, you need to pump the COM messages in order for it to work. This is done for you with the DoEvents command, as well as the message loop hidden inside of the MessageBox. Unfortunately we are now straying into old magic. Here is what one person did, though I don't know if it will help you. http://stackoverflow.com/questions/2443867/message-pump-in-net-windows-service http://stackoverflow.com/questions/974567/are-there-just-one-message-pump-or-many
I don't know about the rest of the IDE but I saw a *huge* improvement in build speed. The solution I'm currently working on went from noticeable waiting time to near-instantaneous. Launching a web app in debugging is also faster with IIS Express.
I don't know. VS2010 is unable to add OCX controls to forms. Searching the internet says it was fixed in "the next patch", but hasn't been deployed yet. I had SP1 beta, and it still wasn't fixed there. I'm hoping it's fixed now.
The NuGet [discussion board](http://nuget.codeplex.com/discussions) might be a better place to get help with this. That said, it seems to be working fine for me.
Thanks for the link!
If you aren't already a Stack Overflow user, you owe it to yourself to register. I cannot emphasize enough how much it has caused me to grow and improve myself professionally. There is no better alternative, period. Oh- and I just landed a new job with a ~30% pay increase over my current position after a company sought [me](http://stackoverflow.com/users/143327) out on Stack Overflow. [Fuck yeah](http://i.imgur.com/Bx8sl.jpg).
It's on the front page - http://www.reddit.com/r/dotnet/comments/fz2oo/filling_in_pdf_forms_with_aspnet/
Next time submit a ticket, and if you are energic a matching blog post. Even if Microsoft knows about a bug they aren't going to fix it unless you scream louder than everyone else with bugs. 
 [Project using Netduino](http://channel9.msdn.com/coding4fun/blog/Some-Netduino-some-MIDI-a-little-breadboarding )
And here I was wondering how I was going to build my scare theshit out of the cats when they get on the counter device. Yay! Thanks for sharing.
Hire affordable Dotnet Nuke developers from India.Are you paying too much? Here's how to outsourcing better for less.ExpertsFromIndia company can provide you with the lowest cost Dotnet Nuke developers.The most amazing outsourcing bargain ever offered.Discover the secrets of Outsourcing Dotnet Nuke Development services from an Offshore ExpertsFromIndia company 
Hire affordable Dotnet Nuke developers from India.Are you paying too much? Here's how to outsourcing better for less.ExpertsFromIndia company can provide you with the lowest cost Dotnet Nuke developers.The most amazing outsourcing bargain ever offered.Discover the secrets of Outsourcing Dotnet Nuke Development services from an Offshore ExpertsFromIndia company 
After 1.5 days of using SP1 this are my impressions: * Building projects is much faster * I used to have mysterious lock-ups during builds, haven't seen that issue anymore * IIS Express integration is great. Starting an ASP.Net debugging session is much faster. I'm glad to say "bye bye" to the Development Server (it used to crash with no message time to time).
I'll pay attention once they can do a pure POCO model. Not this crap: &gt; public class ProductContext : DbContext &gt; { &gt; public DbSet&lt;Category&gt; Categories { get; set; } &gt; public DbSet&lt;Product&gt; Products { get; set; } &gt; } 
Which other ORMs offer a pure POCO model? I've never really used POCOs for data access, at work we are using [NetTiers](http://nettiers.com/) which is interesting to say the least.
Oh Find() method, you so sexy.
NHibernate does.
Those aren't the entity definitions, and the entity sets are just sugary ways of seeding queries or letting the DbContext know about created entities, via DbSet.Add. I'm pretty sure that this isn't the unique method of doing either of those tasks. The benefit of the sets is that it makes it unambiguous which C# classes are mapped to the entity model. This doesn't much matter if you're flying solo, but on larger schemas and larger teams this is likely a wise thing to make explicit. 
I'm being forced to use DbSet&lt;T&gt;, which smells bad to me. What if I decide down the road to switch to NHibernate? It just isn't abstracted well enough to do it without having to purge your codebase.
No, again, that code is an optional part of the data context. None of it has to be there, and you could create queries without it. In your actual entities, EF lets you define everything in your POCO classes in an implementation-neutral fashion: public virtual ICollection&lt;LineItem&gt; LineItems { get; set; } ...and that's what people mean when they use the term POCO.
I've abandoned making native mobile apps. Long live HTML5!
Now I only need ReSharper...
Similar here, but it's with CS degrees. Very few have them, and most top engineers that I know have degrees in very unrelated fields (geography, history, chemistry, etc)
I didn't really know anything about [the company,](https://www.expensify.com/about/company) but after reading about it, I see that the shot-caller there, "CEO" David Barrett, seems to have an obsession with minutiae. Yeah, there are times when it pays to obsess about every little thing, and given that his company does only one thing--expense reports--perhaps this is the correct focus for him. That said, I am so fucking glad I don't work for that asshole. There are times broad strokes are required, and sometimes things need fine attention to detail. Only an ignorant asshole would claim that .net is rubbish for anything &amp; everything. He pretends that it's fine for some things, but it's a backhanded compliment. He jokes about eating squirrel when he should be eating crow.
 Because at Expensify, real programmers use bone knifes and bear skins.
Wait, I'm confused, is he implying that .NET is bad and somehow Java is good? Or is this more a general hate toward OO based development stacks? His comments reeks of ignorance on the .NET platform. I code for Java, .NET, Python, Perl, PHP and a number of other platforms and I treat any technical person who completely dismisses any technology particularly on such obviously uninformed opinions with great suspect. Development platforms are tools, not religions, please get over yourself.
I recently interviewed with Expensify, and didn't get the job. It was kind of a long shot to begin with, since I'm not a web guy, and literally had to teach myself PHP and Javascript over two nights in order to do the programming challenge. I actually talked with this guy, and .NET was one of the things he asked me about. To be perfectly honest, I agree with some of his arguments here, but I'm really not so sure I agree with his conclusion. Of course, that might be because I've spent the last 6 years doing almost nothing *but* C# (.NET isn't a language, by the by), so personal bias might be a Thing here. It's all about tradeoffs. For what they do, it probably doesn't make sense. For some other enterprise, it's probably just what the doctor ordered. I'm usually against blanket statements like this, unless we're denouncing Perl, at which point I lose the capability for rational thought and just start foaming.
i think what he didnt like about it was really the visuall .net stuff. not really .net in general (ie drop and drag interface creation, filling in actions etc). It's like cookking in a mcdonalds kitchen because everything is done for you, you just push what you want.. no thinking is required. Of course programming .net doesn't necessarily mean youre doing visual basic or visual c# or something. This could either be the ceo not understanding the "visual" stuff or the reporter not understanding the "visual stuff" which resulted int he article talking about just general .net when it really only makes sense if youre talking about visual .net
I call flame bait. 
apparently this CEO can't program. I'm sorry but what can't you do in .net that you can do in another language? Really?
Fuck assembly language! And those loses who buy pre-made transistors for their motherboards? Posers! Real people code the way nature intended - with levers, pulleys, and hand carved paths to make water flow down a mechanical system that relies on the ocean and not the electric grid.
[Queen made this guy a theme song](http://www.youtube.com/watch?v=rNBWf54RvsI)
.NET supports Java. C++. Python, inline assembler and the like - it's not really language specific. Basically what happens is that code gets compiled into CIL that isn't quite machine code. When a machine loads the code for the first time it converts the section it's looking at into machine code that's optimized for the particular computer in question. This makes the load time a little slower but creates an overall improvement in speed in the long run. There are exceptions to this, but that's pretty much the long and short of .NET. I'm not exactly sure what his gripe is - you have some pretty heavy control over the operating system and can go down to the hardware level. Most of the limitations I'm aware of in .NET are because of hardware, not software. You are generally restricted to what the CLR allows, but that's not exactly a big restriction. Other than "I'm used to typing / instead of \ in my file-paths so obviously anyone who does something a different way is wrong" he didn't point out any actual flaws in .NET Take note that .NET is not specific to windows - you can run it on linux, an iphone, and the android. 
Does this include python, ruby, and java developers? ... they're all capable of developing in ".NET".
&gt;Programming with .NET is like cooking in a McDonalds kitchen. It is full of amazing tools that automate absolutely everything. Just press the right button and follow the beeping lights, and you can churn out flawless 1.6 oz burgers faster than anybody else on the planet. &gt;However, if you need to make a 1.7 oz burger, you simply can’t. There’s no button for it. Whhhaaatttt? How does this analogy even work at all? Does he think .Net is missing something other languages have? 
&gt;i think what he didnt like about it was really the visuall .net stuff. not really .net in general (ie drop and drag interface creation, filling in actions etc). It's like cookking in a mcdonalds kitchen because everything is done for you, you just push what you want.. no thinking is required. If it's that, then he's never heard of WPF.
&gt;You are generally restricted to what the CLR allows, but that's not exactly a big restriction. Not if you start adding in some unmanaged code. 
Punch cards, they use punch cards.
Yes, the ability to make 1.7oz burger. Apparently every other language can do that.
Edit: What types of restrictions are you talking about here?
Does he know the difference between a platform and a language? Nevermind about all the other complete misconceptions in that article. I'm embarassed on his behalf. 
It's missing really important stuff needed for... *expense reports* (snicker) Are you KIDDING ME?
"inline assembler and the like" - you're referring to IL? If not, please elaborate. Big difference, no?
Making burgers, apparently. O_o
That's the great thing about the Internet - everyone is free to pontificate about shit they couldn't have less of a clue about.
im still not seeing c#'s limitations, especially compared to whatever else. so much uses c#, winforms, webforms, XNA, wpf, silverlight, theres mono and even things you wouldnt expect like the Unity 3 game engine. Its all over the dartboard, and as versatile as the .net framework is. Just not seeing the case here.
I do C# every day, and trust me, there *are* things that are harder to do than others. I don't deal in web stuff, so I can't speak to that, but generally speaking, the lower you go, the more...unusual the code starts to look.
I do c# every day too. What? Low level stuff? YOu can easily do [serial communication](http://msdn.microsoft.com/en-us/library/system.io.ports.serialport.aspx), and [bit shifting](http://msdn.microsoft.com/en-us/library/aa691377%28v=vs.71%29.aspx) if thats what you mean by 'lower'.
The place where I most often encounter minor difficulties would be in driver wrapping. Fortunately, I was able to get away with doing it in C++/CLI.
Ah, I've never had to mess with that in particular. Mostly Serverside web programming, game programming, and serial/sensor/embedded here. And c# has been so nice in all the above situations. I even have an arduino that runs on c#, so cool! ..but if this company does expense reports? I mean... c# shoudl be just fine. I think this CEO is def in the wrong. I mean what is better? Common Lisp? Snowball? COBOL? Assembler? lol.
Almost all of their stuff is web-based. They chose to go the PHP/Javascript route, which is perfectly valid. And they're a bunch of smart people who made a decision to use a particular kind of technology. I'm just not on board with the idea that making that decision gives them the ability to write off one of the other choices as intrinsically bad.
yeah but javascript works great with c# too. I use it every day at work. I've even made extensive amounts of jquery widgets for our webforms and mvc stuff. Before that it was the Atlas stuff. so javascript is a wash... ...so php? php is the mighty c# destroyer? if you do c# you're a fucking tard but php is the ultra versatile tool of champions? OH PLEASE.
Why would anyone hire language-specific developers to begin with? In 2011, if anyone calls themselves a ".NET Programmer" or a "Java Programmer" or a "Ruby Programmer" they are missing the point entirely. The rule for hiring good programmers is to hire people who have demonstrated an ability to solve problems, apply some critical analysis to the decisions they have made in the past, and learn new skills and approaches as they become available. Note how I didn't mention anything about technology. Hire developers for their cognitive abilities not for the arbitrary qualifiers they've placed on a resume.
I can kinda see what he's talking about though. He's talking about the developers that will spend more time in the designer view than in code view, dragging and dropping stuff in. Making heavy use of the shitty out-of-the-box data binding. And when they do go into code view its to paste in some crap they found on codeproject. I work with a guy that does this and he is by far the laziest, most unimaginative developer I know.
Well, there aren't that many "restrictions" to begin with, but I've had to go into unmanaged code to do stuff like interface with hardware directly while working on control software for automated machinery. 
Like I said, I don't do any web stuff, so I don't really know anything about making Javascript and C# play nice together, although I can't really think of any reason why they wouldn't.
The article before this one: ["The Hunt for Engineers: Expensify and the surprisingly difficult challenge of finding the right people"](http://blog.expensify.com/2011/03/18/the-hunt-for-engineers-expensify-and-the-surprisingly-difficult-challenge-of-finding-the-right-people/) I wonder how much hard he's going to find it to hire someone after this so-to-be-infamous rant
This. Blog writing needs to be provocative but this one is just trying to push buttons a bit too hard. But hey, it got the attention. Personally I mostly don't care what systems a programmer has used before if he's capable and willing to learn and continues to evolve his skillset. If he chose any one tool *and* stuck with it for over 10 years while the industry goes forward there's a potential problem. Use the right tools for the right job. If you're making burgers at McDonalds, don't go out at night hunting for squirrel meat. 
He's saying with Interop there are zero restrictions. The only thing I've ever run across that I can't do with C# is to compile an OCX so another programmer could use it in VB6. So I just made an ActiveX DLL instead.
&gt; what can't you do in .net that you can do in another language? Get a Protection Fault due to bad pointer math.
Someone should launch a competing service. You already know his programming costs are higher than industry average because he's not using .NET.
these retards use PHP and they're making fun of other languages??
I've been making double quarter pound cheeseburgers for a while now. My cat is quite happy.
Successful CEO Troll is successful.
It's good to see the comments light up on a .net topic on Reddit sometimes:)
Then the CEO is missing the point of the direction of many different development platforms. The overarching drive for almost all development systems has been to create a clean break between the Visual Interface and the code driving it. Adobe, Java, MS and others all have technologies around this. The idea being that (and rightly so) your developers should never be building any UI to begin with. Leave that to the IA's and the UX folks to deal with. However to cater to this crowd you need tools that show UI concepts in more than just a giant ASCII file. Now I will agree that earlier versions of these types of systems were fraught with danger as behind the scenes you are generating reams of code that would need to be tweaked and understood to get the most out of a system. This is excatly why these UI systems moved to a tag like architecture where your UI and basic logic can be represented as tags from a framework without code generation. Rather that worry about wiring up, many of these frameworks work by convention relieving the need for "black magic" code that makes things work. So basically all I took away from this guy's rant isn't that he doesn't like .NET, its that he doesn't like frameworks and has a NBH (not built here) attitude. Sure it's great if your programmers can go bare bones are write your own filter and sort methods (and sometimes you need to) but 99% of the time why re-invent the wheel?
I've been programming .net since the first beta, but I've always felt pretty much the same way about webforms programming. It's kind of its own world; webforms skill just helps for doing more webforms, it doesn't transfer very well to other web platforms. Fortunately now I can use MVC and that's not a problem anymore. I'm using MVC to mash together html, css, and javascript, just like people do on any other platform.
I finally caved. After years if hearing about these tools. I did the 30-day trial while starting a new project where I had to do a ton of heavy refactoring. Microsoft should buy them and integrate all those neat things into the next VS.
Au contraire. A really *talented* programmer can make a computer explode in *any* environment. I have been that programmer.
 I can has cheeseburger?
yes.. that... or bad reporting.
his logic is full of truisms, bad metaphors, and smoke and mirrors. like talking about direct x vs open gl or backslashes for file paths. 
I thought that this was a great April Fool.
Yeah, I'm not usually a big fan of the internet April fools jokes, however some of the programming ones really make me laugh. My favorite was the "Goes To" Operator from last year. While (x --&gt;0) {...}; Got a few coworkers with that one. 
TFS is a dog, rejoice being rid of it. Just use git or mercurial "secretly" in the team, for day to day work, and keep things centralized on the Arcad thing like the boss wants. If you have done your unit tests, build scripts etc in a way that is dependent on a proprietary MS product, then that is your bad. "Integration" in the MS world is nothing but a lock-in ploy. A large organization is going to be using more than just .NET, for example you guys seem to use AS400, our company has a lot of Java, UNIX and Mac stuff going on, and we do a fair bit of stuff in Python. We ditched TFS in favor of git for source control because we have better integration, and less lock-in. TFS is basically VSS with branching and merging, ideas that work well in DVCSs, tacked on as a hack. Just to add a bit of support, check out this survey from Martin Fowler: http://martinfowler.com/bliki/VcsSurvey.html I don't know anything about Arcad, but compared to modern DVCSs, TFS is the very definition of stone age. .NET is great, c# is great, visual studio is great, but don't let yourself get locked into the whole MS enterprise TFS, MS Build nightmare, you just end up losing flexibility, and losing compatibility and integration with other ecosystems.
Don't. Hide your build server away. Then let them wait for your next build, and then let them wait for the one after that (If its as bad as you think it will take months and their will be loads of bugs). The get your old server out of the bunker, and roll out a new build with all the bugs fixed and identified by the unit tests. Management will understand after that. Or Quit, leave them in the shit and move on to somewhere where you are listened to as a developer.
Have you had any experience with the new TFS Workflow Foundation build? It's much easier to work with then MSBuild scripts. I do understand where you are coming from thought. Can git or mercurial integrate and automate .net unit tests. Is it capable of using Database projects to dynamically generate and deploy database schemas on the fly? Can it build my projects using different modes like release debug etc... Stop and start windows services.. refresh app pools? Does it support checkin policies with permissions, multiple checkouts and a merge window that makes sense(I suffer that nightmare using tortoise for my personal projects). There are a lot of benefits that people who don't use the software can't possibly see, but I'm sure the same could be said about the other way around. Regardless I can't see how an AS400 visioned piece of software could compete with TFS.
First off, it sounds like you don't know Arcad offers and how it would either benefit or hinder your team. I recommend you do some research and see what this produce can do first. After that, start talking with your managers about what your team will gain and lose in the migration. Second, you can extend both git and mercurial using scripts. It's not black magic or a headache; it just takes some scripting to coordinate everything you mentioned. * Script to run unit tests. * Script to MSBuild your build your database projects * start/stop windows service with any scripting language. For example, in PowerShell its Get-Service -name IISADMIN | %{ $_.Stop;; $_.Start(); }. Same thing to refresh app pools. 
Sit down and seriously figure out what it will cost you. Call and ask arcade software if need be. Once you figure out what you will lose (lost automation, training, etc.), calculate the man hours necessary to fix that. Then go to management with a hire request(s) to make up for the extra time as well as a revised (a.k.a. pushed back) release schedule. The alternative is for your team to just have your own tfs.
Well, I think you're going to need to do some intelligence gathering on your own and engage in a bit of internal politics in order to gracefully weather this. If you guys are doing substantial Microsoft based work for them, then it will be worth a little work to help this turn out well. At this point, it sounds like a done deal, and you probably aren't going to change anyone's mind about adopting Arcad. Given that it's an AS400 shop, it may be the best thing for the organization overall. That said, you can take upon yourself the "critical" responsibility of ensuring that the Microsoft based systems experience "continuity and reliability". Publish your intent to ensure this smooth transition to your management and even their management if you feel like grandstanding a bit and can get away with it politically. You might get immediate feedback that they never intended to have the Microsoft teams use it anyway. If so.. yay! You may also get shut down right away with a terse reminder to just adopt the tools and shut up. Skip to the last paragraph if that happens. If not.. continue. Request a product presentation / demonstration so you can get a feel for the product and how it's going to support the business's Microsoft based development needs. Get a checklist of features you need supported and get them to show you how the product supports it. Don't be antagonistic or pad the list; be honest and positive. But don't give them any freebies either. Do whatever research about the product you need to fill or validate the gaps as well. When you're all done with this, you will have enough material to put together a fairly complete analysis of whether or not this product will support the Microsoft based teams. At this point, you'll have to man up and publish an honest recommendation. If their product can do it, then jump on the bandwagon and make it work. If not, then state that instead and be sure to point out all the places where the gaps will have to be covered with manual labor (read: wasted money). Present this analysis on schedule and with firm recommendations either way to the original group to whom you published your original intent, along with any other supporters/informers you've gathered along the way. If necessary, set up a meeting to drive to a resolution. The bottom line here is that you and your team(s) could be left in a situation where you're left with horribly broken development processes and tools and you could get the idea from management that they don't care about that. In that case, you've clearly established their apparent or implicit intent: they they would really rather not have any Microsoft development in house at all. If that's the case, you can stay and suffer, or go somewhere you'll be appreciated. It would be a just and appropriate fate if you could arrange to become a contractor/consultant who gets richly rewarded to keep those systems going because "we just can't keep good .NET people for some reason", but I digress.
I think you might be mentally merging the separate concepts of version control, build automation, and continuous integration. In your case TFS does all of them for you and for some that is great. What the commenter mention with git and mercurial are just the version control portion of what TFS does for you. You would need to fill the other roles with an appropriate tool. On my team we use Subversion for source control, rake with albacore for build automation, and TeamCity for continuous integration. This replaced TFS in our environment and for the most part we couldn't be happier.
&gt;Can git or mercurial integrate and automate .net unit tests. That's build/integration testing, not revision tracking. That said, there are numerous systems that do just that which integrate with %THIRD_PARTY_VCS%. &gt;Is it capable of using Database projects to dynamically generate and deploy database schemas on the fly? That's building. Yes, there's a checkout from VCS involved here, but that can be hooked up to *any* VCS. &gt;Can it build my projects using different modes like release debug etc. Again, building, not VCS. &gt;Stop and start windows services. Building/deploying, not VCS. &gt;refresh app pools? Not a VCS task, but a build system task. &gt;Does it support checkin policies with permissions, multiple checkouts and a merge window that makes sense(I suffer that nightmare using tortoise for my personal projects). Git/hg/bzr all do this. I'd be surprised if Arcad didn't. As for Tortoise, it's a shell around *multiple* VCSes. You're probably thinking of *Tortoise SVN*, which has all the problems that Subversion does. The versions for git and hg aren't as awful. Of the things you've listed, precisely one of them is *actually* TFS's responsibility. The rest are other features in Visual Studio's development suite, for which any VCS can be plugged in (with some work--for git and hg, there are [extensions](http://code.google.com/p/gitextensions/ "git") [for that](http://visualhg.codeplex.com/ "mercurial"), so you don't have to write your own). Hell, I'd ask Arcad if they have a VS plugin. tl;dr: Learn your tools.
tbh, don't debunk them just because they're not microsoft. A company that specializes purly in SCM system can actually do some good (and cost a bloody lot, but being in a big company that's likely not your concern)
Every point you've making here, is that .. it's more work to accomplish what you actually need to get done if you just don't use TFS. It doesn't matter if your favorite vcs doesn't do and shouldn't do X. You still have to do X, and some integrated systems, like TFS , lets you do that without the hassle of learning a bunch of other tools that needs to be integrated, gets out of sync updated, and break your integration every 3 months.
To me, this concern you have re TFS is exactly why it should be avoided. More to the point, why bother with an overpriced build server when there are beter free options. Additionally it seems crazy to me that TFS would be used to as a web portal platform... If the build server is down, how can you properly deploy fixes to your application that runs on your build server? I just can't get behind TFS...
Well I really appreciate your replies. Perhaps in some ways I overreacted and maybe I have indeed let myself be a little too blinded by the Microsoft world. Many things about it are great but it isn't all there is nor is it always the best there is. I am definitely going to be looking further into some of the tools some of you have mentioned, as well as take some of the ideas you have suggested when discussing our options with management. I am still a little worried that is that this is software built with the AS400 in mind and there seems to be very little information on-line explaining what it actually does. A meeting with these people on my end is in order, along with a bit more of an open mind. Thanks a lot, this is truly why I love Reddit.
This was extremely helpful, thanks.
My concern is that it's software that's developed more with the AS400 in mind.
Well if the build server was down then builds would simply have to wait until it's back up, or if it was a desperate time then simply build &amp; deploy manually. We rarely ever have to build immediately at any given time.
Interesting... might be time to broaden my horizons.
&gt; mentally merging the separate concepts Just for fun - new word for today: [conflate](http://www.thefreedictionary.com/conflate)
I understand where you're coming from; I've been there. But.. yeah... it's time to open your mind a bit. My other post is a good strategy, but don't forget to also connect with a few of the programmers on the AS400 side once in a while. They will have a different perspective on things and will likely find your perspective interesting too. Besides, if you make "them" into "us", then it's going to be easier to make this into something more constructive than mere "us" vs. "them" / "old" vs. "new", etc. 
But the point I'm making here is that TFS *isn't* doing that thing. It's something that TFS is plugged into that's doing that thing (in *every mentioned case*, that's Visual Studio's build system). There are Visual Studio plugins that make it possible to drop in a replacement for TFS as the VCS tool of choice.
(assuming you don't live in the boonies) What people ask in interviews varies a lot. If you are moderately good everyone and their brother will be begging you to be hired by them - even in today's economy companies are desperate to hire talent. No matter what happens, keep learning and always assume you know nothing. As for the interviews - go to a couple and see what you are lacking. If you do poorly in some don't be discouraged - see it as a learning experience and a potential to fill in areas you are weaker in with knowledge. This way no matter what happens you'll come out ahead. Also remember that there are plenty of interviewers who have no business interviewing people. Just as it's hard for companies to find talent - it's hard for talent to find companies that aren't worthless. If you have doubts as to the competency of the person interviewing you they may exist for a reason. - Patrice with technologies you don't normally use. - Do you have a library that takes care of things for you? Write some practice code that doesn't use it. How embarrassed would you be if you couldn't write a standard datagrid during an interview because you always rely on telerik or infragistics? - Have friends who program ask you how things work. The key here is to be able to clearly and concisely answer the questions in one or two sentences. - You didn't mention SQL. Don't neglect SQL. - Look at sections of the code the senior developer users. Some of it doesn't make sense? Figure out how it works. - Don't be afraid to interview the interviewer to find out their level of knowledge. Ask about their development cycle and how they get their resource requirements. Ask about how long other developer's have been working there. Ask why they have an open position in the first place. Ask about how they continue their training to make sure they don't stagnate. You are interviewing them as much (maybe more so) than they are interviewing you. - Stay positive.
Have a quick look at this post on [Scott Hanselman's blog](http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx)
In my experience, the tests are primarily to make sure that you aren't lying on your resume. If you tell them up front that you have experience in these other languages, and talk about what kind of projects you have worked on, not knowing C# is not going to hinder you very much. I had not written a single line of C# when I interviewed for the job, I said so, and answered their questions in my language of choice to prove I could solve the problems. When you know how to program, language is generally just syntax.
Generally speaking, if you're worried about detailed .NET questions, then you're probably weaker there than you should be. That's the bad news. The good news is you have several ways to work with that: 1. Get certified before you move on. Cover the gaps in your knowledge, rock the test, and feel like a boss. :) You won't know everything after this, but it will do wonders for your confidence. This is probably the most certain path to success, though it does involve some actual work. It shows initiative though when you can say during the interview "yeah, I felt like I was weaker around C#/VB, so I use the certification test to identify my weak areas, studied up for the test, and then passed the test to prove to myself I know those areas now". 2. Actually, there is no #2. There are multiple ways to do this, but really this is just the most direct route to get it done. Either you're going to work on your skills or your interviewing skills, or you're going to leave and probably wind up with close to the same job you have now. If you're pigeon-holed as a "web developer" and want to move on to more complex projects, then you'll have to prove yourself a bit; though please forgive my pretensions if I'm assuming too much. The key I'm getting at here is to do whatever it takes to build your confidence. Enough about that. As for good ways to prep for the tests, Microsoft themselves used to put up a sample exam and they also put up outlines of what to know for exams, etc. It's been a while since I've looked at this, but start here for that kind of material: http://www.microsoft.com/learning/en/us/certification/mcpd.aspx#tab2 I would start with the MCPD for VS 2010. If you want materials that are cheaper and a little more focused on individual programming languages, then I would look at using Brainbench for that: http://www.brainbench.com/xml/bb/common/testcenter/subcatresults.xml?cat1=9&amp;cat2=26&amp;cat3=18 Brainbench isn't as widely recognized, but they give you a public way to publish your knowledge within a subject, taking them shows initiative, and the process of completing them will give you confidence. The Microsoft tests used to be VB or C# focused, but those are just considered pre-reqs now. I haven't taken the new tests, but I assume they aren't going to focus on basics as much (e.g. overloading vs. overriding) as much as they are going to focus on getting real work done on ASP.NET, etc. (which sounds like a good change, but would be a mixed bag IMO). Anyway, don't hesitate to spend a little money and time investing in yourself. No one else will. Enjoy!
Just google "C# interview questions pdf" and you'll find a bunch of them. (With answers) And yes, they have asked me those very questions several times in actual interviews.
This appears to be free of charge and might help, a good way to see where you're weak: http://www.microsoft.com/learning/en/us/offers/test-your-knowledge.aspx
Thanks for the replies everyone, I'm quickly checking this in the morning before I head off to work. But i'll reply a bit more this arvo. I'm in Australia by the way.
I made a custom build system that works great, using PowerShell, robocopy, [ControlTier](http://doc36.controltier.org/wiki/FAQ), TeamCity, SVN, TortoiseSVN and [ankhsvn](http://ankhsvn.open.collab.net/) .. TortoiseGIT and [VS.NET Git Extensions](http://code.google.com/p/gitextensions/) also exists .. I've even found a way to track all changes by ticket number, associated with our ticketing system (SpiraTeam) with SVN Comments (using SharpSVN) and a homebrew SQL Server data auditing system I wrote (using a combination of SQL triggers, SQL Server Broker, and stuffing the WSID connection string variable with the ticket number from our application).. There are so many ways to skin a cat. 
Thanks for the pointers! I'm pretty good at assuming I know nothing :) Also thanks for the reminder about the interviewers and asking them questions, I think thats a really good idea. (started a google doc and adding these little tidbits to it, yours is the first) I do know a little SQL, we have a ...ahem... few stored procs that run our legacy system. And by a few I mean 2500. I think I know a lot about programming in a lot of languages, just not a lot in one language. If that makes sense. So I'll just see how I go Thanks again for the reply! (Fun fact, in Australia the boonies is called the sticks as in, You live out in the sticks) 
Nice! I know most of the 'Everyone who writes code' section, probably a bit under half in the 'Mid-Level' and about 3 or 4 of the 'Senior Develoers' section. So I obviously need to learn more but it does help me learn where abouts I sit.
&gt;When you know how to program, language is generally just syntax. This is my general thinking as well. But I think I have to take the test, get a certain mark then I'm eligible for an interview. But if I do get the interview i'm definitely not going to lie about anything. I do think I learn things quickly and I have good stuff to show that can impress them without me needed to lie. Its just the test section has me worried
Thanks for the detailed reply. Yeah I have been a bit pidgeon holed for the last few months, as i'm the only one that knows Flex and has design skills. Problem is though I'm not the biggest fan of Flex, which is one of the reasons why i'm looking to change jobs. The older exams as you described (overloading vs overriding) I think I would do good at, but the newer ones i'm worried. Unless of course the stuff I have been doing at work is what will actually be asked. It's hard to say what i'll be good at, I only have one point of reference and that is the company i'm working at now. So i'll take the practice tests and see where I land! (I always enjoy anything I do, otherwise whats the point?)
**\*Feels stupid\*** Googling it would make sense. I think i'm just a bit jittery bout this test. Not thinking straight. Good news is the [first result](http://www.scribd.com/doc/510555/C-Interview-Questions) that came back I think I know about half of those questions. And the job i'm going for is mid-level, so maybe I'm just being to hard on myself? EDIT: I also think i'm going to make much use of [anki](http://ankisrs.net/) over the next couple of months :)
Pretty much what i'm looking for. Though this is for already certified people and the questions are given weekly. Can't hurt though! I'm definitely going to sign up
Flex is very much in demand, but it seems like there are a couple things missing: 1) your passion for it (makes coming into work difficult), and 2) a plan to move your skills to the next level. I guess you're working on #2 there, but long-term it sounds like Flex isn't something you want to get particularly deep around. Also, I'm betting that if you're good on deep OOP concepts, are good with database design and SQL, and have the other fundamentals nailed (remember I don't know your background), that you ultimately won't have any problems brushing up for the exams. That's just my opinion of course, but it's not actually rocket science; it just needs some work to get into.
Careful with that link you posted: &gt; `4.` What’s an abstract class? &gt; A class that cannot be instantiated. An abstract class is a class that must be inherited and have the methods overridden. **An abstract class is** essentially a blueprint for a class **without any implementation**. &gt; `10.` What’s the difference between an interface and abstract class? &gt; In an interface class, all methods are abstract - there is no implementation. **In an abstract class some methods can be concrete.** In an interface class, no accessibility modifiers are allowed. An abstract class may have accessibility modifiers. I haven't read through all of it nor am I familiar with all topics covered but I'd confirm everything I read in that document before making it my official cheat sheet.
Thanks for the heads up!
Yep, I am working on #2. Thanks for the words of advice
Someone was bored.
Because Java and C# are that different...? I'll hold off if the licensing is $400-1000 per year
Although I'm very much turned off by the license fee, MonoTouch and Mono for Android are both sweet technologies. One interesting thing a co-worker noticed is that their OpenGlEs bindings appear to be identical, meaning that porting from one platform to another -- for games, at least -- should be a breeze. 
One that I really like to use and isn't mentioned is: #If DEBUG Then 'In VB anyways, not sure about C# #End If 
If you like #IF DEBUG then you'll love the conditional attribute. Much more powerful and I think easier to use http://msdn.microsoft.com/en-us/library/aa664622(v=vs.71).aspx 
&lt;http://msdn.microsoft.com/en-us/library/aa664622(v=vs.71).aspx&gt; Despite what the formatting help may tell you, just enclose the url with &lt;&gt;
A little side note, you can't use #IF DEBUG inside MVC views. 
Studio performs acceptably now that it's predominantly WPF? You could have fooled me. Damn thing can barely keep up with my typing. Maybe when I get a Sandy Bridge i7 and 8GB of RAM...
My biggest problem with VS 2010 was that it continually crashed on me whenever I locked, then unlocked my workstation; at least until I found out that I needed to update my graphics drivers - it's fixed now. Otherwise, performance really hasn't been an issue and I'm working with some fairly large code bases (XP, 4 GB RAM, standard 3 GB dual core processor). 
Yeah, I'd wondered about driver issues. I've tried falling back to software-only rendering and turning off some of the richness, but it hasn't helped noticeably. I think there's also been some duelling extensions Unfortunately, the PC is locked down so I can't just look for new drivers. Maybe it's time to open a new front in my continual war with the corporate IT dept. 
There's actually an issue with gdiplus.dll in concert with the integrated Intel video driver, so if that describes your machine, definitely have a look into it. I fixed my machine by upgrading the video drivers and it was a dramatic change. Additionally I had another developer on site with the same problem and her issues also went away with this upgrade. I suspect that gdiplus is the real culprit here, though getting my video driver to the latest version fixed it. So, if you find that your machine has a newer video driver from the vendor available, then I definitely would bother to hassle with tech support to try that out. My VS instance was crashing a couple dozen times per day before that. Now, I can leave VS 2010 up for days.
['nuff said.](http://stackoverflow.com/questions/202079/wpf-versus-winforms)
Turns out the drivers are about four years out of date :( I've started the paperwork to get then upgraded... Maybe by threw time Studio v next is out. 
So, nothing much to talk about in December... slip by six months and it's just in time for Win8 and/or tablets?
More details can be found [here](http://msdn.microsoft.com/en-us/vstudio/gg316360.aspx).
Cool... it's like a non-monadic implementation of F#'s async workflows, for C#.
Naturally this is released just as I'm finishing a library jam packed with the old async stuff.
I wonder if it still breaks MVC
[Apparently not](http://social.msdn.microsoft.com/Forums/en-US/async/thread/05606a63-0474-4461-8672-e5ae92956cf9), although it may depend on the order in which the installers are run. (I don't use MVC myself but I saw that thread in the Async CTP forum and thought of this comment.)
Awesome, Thanks! I had installed async ctp and then a month later decided to install the latest version of mvc. It failed silently and it took me ages to figure out why it wasn't showing up. Wanted to be a bit more careful this time as the uninstall was a bit painful.
One little detail however, if you are using ActionFilters to handle culture change, it might not be the most appropriate way. Especially when you are using Data Annotations. I recommend overriding the Initialize method of the Controller class and setting it there. Cheers.
Dot net website development or dot net custom software development, India is and has remained rich resource; and India based ADS proves the point by providing professional dot net development services.
 If you can't figure out 4/26/11 is a Tuesday, you already failed the test.
This kind of thing can happen to anyone =\ It sucks, but there's nothing you can do about it now, so don't be too hard on yourself. Chalk this one up as a lesson learned?
oops
If only there existed something like a chart where you could look at a year/day combination and find out what day of the week that a particular date fell on. Oh yeah, it's called a calendar.
Witchcraft!
Stylecop is important in this area http://archive.msdn.microsoft.com/sourceanalysis http://stylecop.codeplex.com/ It's a standard that is machine-testable. You can set it up so that style violations prevent a build, should you want that. There's a lot more to good code than consistent style, but it's a start. Going further, you're going into ideas like SOLID. http://en.wikipedia.org/wiki/Solid_%28object-oriented_design%29
In my mind Stylecop is a pale imitation of FxCop. Most of the rules that it has are pointless and some are downright counter-productive. I wouldn’t consider using it again without the use of heavy customization.
Stylecop and FxCop cover different things, which is by design. If you want what FxCop does, use fxCop. Ideally, use both. Stylecop is enforcing for a common style, which by definition isn't highly customisable. I don't see that they're counter-productive, even if they're unfamiliar to you. Style isn't a question of right and wrong - *de gustibus non est disputandum* Even if you don't like StyleCop, and opinion is divided, it definitely merits a mention in any list of c# coding guidelines.
 StyleCop is very customizable with a large set of additional and alternate rules available via the open source community. Style can certainly be detrimental. For example the style rule that says you shouldn't prepend fields with _ or s_ leads to field names that are easily confused with locals. This is especially important with static fields which need to be called out so that you can check them for thread safety. 
Some style rules can be detrimental - you go out of your way to make examples that are pessimal. However the majority of style rules are not like this, both ways are valid, but which to chose is are mostly matters of familiarity and taste. e.g the various rules for c/c++/java/PHP/C# over where and when to put { } braces. It makes no odds as long as you follow consistent, common rules. Most objections that I have heard to stylecop (and the default rule-set, thanks for pointing that out) are ill-founded for that reason - mistaking unfamiliar with wrong. e.g. the rule that fields do not have any _ or f_ prefix does *not* lead to fields that are easily confused with locals, since there is also a rule that you use "this." wherever it is applicable on fields. I can see that this might be an issue if you have threading and a lot of static members, but then, don't do that ;) 
&gt; since there is also a rule that you use "this." wherever it is applicable on fields. That is just needless verbosity.
Now you are just giving opinions. You don't like it, but really you just aren't familiar with it. "this." is a prefix, but one that isn't part of the word.
The purpose of the this keyword is to deal with ambiguous identifiers. If you use a simple one or two character prefix you achieve the same end without the need for two additional tokens. Neither of those statements is an opinion. 
The first statement is an opinion. What "this." causes the compiler to emit in the presence of references that would otherwise be ambiguous is not up for debate, but "intention" and "purpose" of using a construct in a particular case is. The designers of stylecop have re-purposed this construct, and the value of doing so is their opinion. Your second statement contains the opinion that fewer tokens is better. In the majority of cases I suppose it is. The inclusion of the "this." rule in stylecop rests on the opinion that it is not always so – that separating the prefix into distinct tokens rather than making one token have two parts is a benefit to the reader, the syntax highlighter and the intellisense system. I'm not saying that this is fact – it is not, it is a matter of taste that you are either familiar and comfortable with or not. But if you mistake your aesthetic opinions for fact, you are going wrong. 
$399 isn't bad considering writing one app that works on Windows, Linux, OS X, Windows 7, Android and perhaps Windows 7.
Full disclosure: I'm the author, so this is just as much blatant karma-whoring as it is trying to get the word out. Nonetheless, I'm proud of it and wanted to share with my virtual peeps.
Does this work with WP7? I can't find any info on WP7's ETW support.
Unfortunately not; WP7 does not provide native access.
The reason .NET is rarely used in startup environments has very little to do with the platform and far more to do with Microsoft's enterprise-leaning licensing and the fact that .NET is not nearly as sexy or edgy a development platform as Ruby or Python. One could also make an argument for the speed of development and ease of deployment afforded by these platforms--two very important considerations for a startup that wants to get something to market as fast as possible.
tldr; &gt;As first reported by InternetNews.com, Attachmate, the systems and security management company that completed its acquisition of Novell for $2.2 billion in April, began layoffs this week. The exact number remains unknown, but from the sound of it, virtually the entire Mono team has been let go.
I'm assuming that too. I don't get it, Mono seems ubiquitous with .NET. Just like that.. \*poof\*?
You know what would be brilliant? If Microsoft would step in and take this team on to their staff and gave them the freedom to promote and develop .NET on every platform. I know Microsoft has a vested interest in all things Windows and it would appear that this would be counter to their interests because it's all about running .NET on anything but Windows. However.... the longer term better bet for Microsoft isn't Windows anymore. iOS has proved how easily Windows can be displaced. How many iPads now take the place of Windows desktops? And, in the process, Microsoft has completely lost a toehold with those users. But what if they could extend .NET to other platforms by courting developers for those platforms (including iOS, Android, etc.) with the kinds of tools they're best at producing? The days of pushing Windows on every desktop are long gone. It was achieved, forgotten, and will probably be surpassed someday. But if they can extend .NET to every device instead.. well, that's a bigger vision and gives them entre to the entire market instead of just where they're already entrenched. Alas, I probably hope for too much, but I can dream. Should they venture it, I'll take Microsoft's bet on cross-platform .NET.
I'm not sure there is anything to get. It's not part of their strategy. I just hope it's part of someone's strategy and/or that an open source effort will continue to carry it.
Typical. Its like writing 5k lines of code managing all your worker threads only to discover the async ctp during your lunch break.
Novell makes money from selling Mono, so I seriously doubt they are going to outright drop it. http://www.infoq.com/news/2011/05/Mono-Future
I was talking to Microsoft the other day and the gentleman I was interviewing stressed that Microsoft sells platforms, not tools. He didn't say it outright but he implied that there was no way he could support any sort of cross platform version of .NET that ran on non-MS technology. 
I hope they can see that pushing .NET as a platform is just another way for them to do that. In my mind, Sun screwed up by failing to utilize Java and the JVM for their own benefit. They didn't bootstrap any products onto other platforms with it. What good is WORA without that? OSes as we know them may never go away, but I still think the interoperable platform of the future is a portable virtual machine. Sun made a good push and didn't get all the way there. It's dubious that Oracle will. Microsoft could easily do it though and it would give them a long term way out of the Win API hell their apps are in now (IMNSHO anyway).
... exists to sell copies of Media Streaming Services. If you haven't noticed, you aren't seeing Silverlight get direct access to OS X like it is for Windows. 
Unfortunately Microsoft doesn't see the need to move past a Windows only ecosystem. That seemed to have died with the failure of .NET Micro and the inability to port Silverlight onto the Nokia S60 os.
WTF... .NET Micro is a failure? They were running (IIRC) a cut down CLR in 128K of RAM and it was a failure? Actually, I just looked at it, and it's 64K and the page makes it look like they're alive and well. http://www.microsoft.com/en-us/netmf/about/gettingstarted.aspx Any idea what the real story is? WORA for .NET is probably a laughable idea in Redmond. I don't doubt that. Never mind me I guess; I'm just dreaming. Edit: Or actually, maybe that's the wrong dream. WORA is kind of a failure for Java too, if only because it's not realistic. I guess I'm hoping more for '.NET Everywhere', which is actually achievable I think, and it could probably be done rather quickly if MS snapped up the Mono team.
Come on, how hard can it be to write a C# front and back end using LLVM? Maybe like 2 or 3 weekends. No loss here, right? The real effort will be in the libraries that come with the language...
Micro is a commercial failure for Microsoft. The hardware vendors were too price sensitive and thus mostly unwilling to pay the licensing cost associated with the platform. The technology appears to be sound and people otherwise did like it, hence its conversion to an open source project. 
Well, even if they never see a cent from Micro per se, they still win. Having .NET on those devices automatically means less market share for iOS and Android and gives them a way back on to those devices with their own other products and services. 
Micro is used for stuff like electronic watches. I don't foresee iOS or Android competing in that space any time soon. 
Good point. I'm thinking that Micro really doesn't factor into their .NET strategy anyway. Having it being open source is probably the best of both worlds for them.
Isn't ARM Windows 8 going to bring more to the table than .NET Micro did?
On my own. They do provide some money for training though, however it means that you have to stay with the company for a full year more whenever you use it.
Miguel will annouce what's really happening on Monday.
I'm still not satisfied, among my issues just creating a sample project: 1) you can't map char(1) database fields to boolean object properties. If you do have char(1) it must be mapped to a string, char and char? are not supported and will throw a really weird exception. 2) if you want to get around issue #1 you could wrap your mapped property in an internal proxy property, but you can't use that field in any LINQ queries 3) Using the fluent API, you can't have unmapped properties in ComplexType property ex: Ignore(p=&gt;p.Address.County) throws an exception 4) CodeFirst DbContext and .EDMX models can not exist in the same project, you have to put them in different projects
This is a nice replacement for the unethically no-longer-free Reflector. It also already is quite a bit nicer than the open source ILspy. 
Pretty sure Reflector was never used for ethical purposes. ;-)
Any one got a complete lists of reflector alternatives? 
Well, since Reflector is gone, there is a definitely a place for a free alternative with a decent GUI. However, their EULA says that the free license is temporary, until the final version is released. So they may charge for it in the future, at least they reserve the right to (nothing wrong with that.. I guess) I **really** don't like the fact that "anonymous statistics reporting" is on by default. The GUI looks decent enough, it's pretty slow to start but ok afterwards. I definitely miss some features from Reflector, like the Analyzer pane which allowed me to easily traverse between symbol usages (without being on the symbol) Good job JetBrains, I hope you keep it free! (I wonder if someone's working on something like Reflexil)
LOL... I suppose he's talking about the company's promise to keep it free (which they didn't) Props to the original creator of Reflector though (Lutz Roeder), any other product (and any other company) would have just made a new paid version with lots of new features, but since the old Reflector is so usable - no one would ever buy the next paid version. Amirite or wat? :-P
I guess I should start reading all these EULAs I'm agreeing to. I hadn't realized that it might not always be free. Their marketing makes it seem like it will always be free. Hopefully it will and they're just covering their bases because the lawyers tell them to.
I have no idea what you're talking about. (walks away slowly whistling while holding an old copy of DVD Decryptor)
Really there is no reason NOT to have JetBrains products. Talk sweet to them and they'll make you a nice package deal for ReSharper and dotCover, which I consider VITAL to daily development. I can't live without them now. And I'm perfectly happy that way. EDIT: I swear I'm not a JetBrains employee either.
I wish I could afford ReSharper :-\
Yeah you wouldn't want to end up in a humancentipad, would you? I remember seeing a blog post from someone at JetBrains saying that they intended to release a free standalone tool, but that it would also be incorporated in ReSharper 6.
I think this is a response to Telerik's announcement/release of the "free forever" [JustDecompile](http://www.telerik.com/products/decompiling.aspx). RedGate lost points, and Telerik won them. EDIT: It's obviously also a response to RedGate starting to charge for Reflector.
1. JetBrains has no intention to make dotPeek a paid-for product. It would be plain stupid to follow the steps of Red Gate in this regard. 2. Certain parts of EULA may feel a bit "intimidating" for two reasons: first, it is derived from EULAs to other products, and most of these other products are not free; second, Early Access Program builds of JetBrains products are usually made time-limited in order to prevent receiving user feedback on obsolete builds. I can't straight away say whether dotPeek EAP builds will be time-bombed. Anyway, official releases of JetBrains are unlimited in time. 3. Regarding anonymous stats reporting, we're not collecting any personal data but generally speaking, you're right - it's not the best of all practices to keep it enabled by default without grabbing a user's attention the moment it's enabled. We'll decide how to improve in this regard. 4. Re: Analyzer pane, take a look at [ReSharper's Find Usages](http://www.jetbrains.com/resharper/features/navigation_search.html#Find_Usages) that's equally available in dotPeek. Jura Gorohovsky, .NET tools marketing lead, JetBrains
While this may seem like a direct response to the Red Gate decision, it's not exactly true: we wouldn't have been able to develop a decent decompiler engine in the time following the Red Gate announcement on Reflector: we've been working on the decompiler since last summer. Actually, we've [hinted on developing a decompiler](http://blogs.jetbrains.com/dotnet/2011/02/reflections-on-recent-news/) the exact same day Red Gate published their open letter, and [made decompiling available through ReSharper 6 EAP builds](http://blogs.jetbrains.com/dotnet/2011/02/resharper-6-bundles-decompiler-free-standalone-tool-to-follow/) two weeks later.
i've been encountering problems while coding for which roles would fit perfectly. many times i have different types of objects for which i need the same behavior, but they are not conceptually related and therefore shouldn't be part of the same object hierarchy. also, it would be inappropriate to create smaller classes with this functionality. roles seem to be perfect to solve this problem.
Don't you describe exactly what functional programming solves? A way to have different types share a same behavior through functions.
Hmmmm...... Looks an awful lot like an attempt to create mixins in C#. 
i'm not entirely familiar with functional programming yet, so i can't answer your question. i did start with an F# book recently, but haven't had a chance to dive in fully. functional programming seems really cool though.
Yes, it does look like mixins, doesn't it? Yet, there are some differences to how conflicts are resolved... In this regard, it's more like traits than mixins.
Give it a try then, and report on your results...
are you the author?
Yes I am. After a little incursion into Scala, I couldn't help but imagine and try to implement how traits would be in C#. I just call them "roles".
These were free a while back and are great videos - check them out.
Totally rewritten in MVC3, in fact. 
Unless all your content is static, you're going to need some sort of server to run your .Net backend code. You might be able to hack something together with Cassini, but I don't know how well it would work. Same with SQL Server / Oracle, though you are right in that Access would work -- provided that you're using the .Net Interop and not some sort of bridging service. The long and short of it is that it'll probably be easier (and cheaper in terms of man-hours) to buy yourself some server space. Are you a student or a professional?
I think IIS Express might be able to be run from CD so it might be worth looking into that. Instead of access what about looking at converting the SQL databases to SQL Compact 4, think there might be a tool out there. Edit: Here is a tool but which will convert to 3,5 http://www.codeproject.com/KB/database/SqlCompactCoptUtility.aspx 
wow, very cool. if i get a chance to mess with your roles, i'll let you know how it goes.
Honestly, I don't think I would bother. If you feel compelled to highlight samples of your work in a portfolio, then I would do that on a static site with screenshots, maybe some code samples, etc. That way, you showcase your experiences and skills and reduce the chance of issues with the site becoming the focus of discussion. Personally, I think your resume, references, ability to discuss your experiences, ability to talk to specific skills, etc. are far more important than a working site. If you show up with a whiz-bang site, and can't talk to the work there, you'll just be viewed with suspicion; like maybe you didn't do the work after all.
If only there was, like, some sort of global network where you could host your sites and then access them from anywhere...
Yup, don't bother with a CD option. Try hosting you projects on a cheap host for the month - there are a few I think that offer 30days free ;) Jazz up the CV, and bring a few screen grabs with you on the day and away you go. Best of luck with the job hunt!
This does sound like the best option. Not that I wouldn't be able to back anything, but it is true they would be more focused on experiences.
Thanks for the tip!
I am a professional, 4 years spent maintaining apps and about 1 year's worth of experience making brand new ones. I am best at functionality, then design. I seem to have trouble with the technical bits like IIS, setting up a server, getting the dns or whatever... but my co-workers have helped me with that, thus far.
These are interesting tools... In your link it states SQL Compact doesn't pick up stored procs. But I do like the idea of avoiding Access... crappy db, haha.
I've stated I wanted to avoid paying for space to host my sites, but it seems that may be the best option if I decide to continue with the idea.
Thank you all for the advice! 
See, this is why I wouldn't hire you. The fact is that web apps are, well, web apps. They're supposed to run on the web. They don't run all that well on a DVD. You just need to bite the bullet and set up hosting. 
See, this is why you shouldn't be in control of hiring.
You used to be able to put websites on discs, back in the classic ASP days. Aside from saving money, this also lets me control who gets to see my work. Finally, in addition to the fact that some of these applications are not public domain, I don't see why this wasn't a reasonable idea. Reasonable, but not practical as I have now learned thanks to vplatt. 
You definitely can do what you need, but you need the latest and greatest software. You will need SQLCe 4.0 (SQLCE 3.5 doesn't work nearly as well for asp.net) and IISExpress. With these tools you can have a completely self contained environment that just needs .NET to run. 
&gt;why not make things clear and call these “updates” something like .NET 4.1 or so? Simple major/minor versions Maybe because this is a tiny update not worthy of a major/minor version number increase? It just adds a couple of features to WF and only the people needed those specific WF features will bother with it. If they had called this .Net 4.1 over such a small thing, people would have been pissed.
Sometimes it's best *not* to use reddit's suggested title.
They cover a lot of stuff you'll never use and seem to focus on some of the dumbest areas. It's good to know about localization but some of the questions are needlessly obscure or detailed. The first one's about the framework in general. I just passed it (didn't cheat). The next one isn't quite as bad, either ASP.Net or Forms Apps. I did both. I also have the Enterprise Administator cert and I'll actually use 20% of the knowledge I was tested on in any case. One good thing is they don't use 'trick' questions and if you study the MS Press stuff that's as close as you'll get to the exam. That is if you do it honestly. 
Not to be an ass, but I didn't realize people still considered Microsoft certification valid anymore. There are far too many "certification mills" out there whose only purpose is to help people with no experience cram for those tests so they can look better to prospective hires. Back in the 1990's they were important, but in today's world they have certainly lost a lot of luster.
I was administrator of a certification testing facility for a while - dev cert tests were very very rare. Microsoft certs seem to be mostly useful to/used by technical people - System Engineers and Database Administrators. Real life experience also strengthens this point - Devs need to know how to dev, not how to pass an exam (which is very easy because all students know that all the questions/answers are available online)
never seen it before
I've seen that happen. I just do a compile on the project when it looks like the pre-compiler is lagging.
As replied with the exams online, I do have my questions about the validity of hese exams. On the other hand I like to learn the book and then use the examns to test. I noticed a number of quesions that are in the exams that are not in the book. Also there may be questions in the real exam that are not in the internet exam. What exam are you taking? I'm taking 70-515 next week (web development in ASP.NET 4.0) 
Like I said, it's a pre-compiler issue. So if it is already lagging or stalled, forcing it to re-evaluate that line that you removed and put back isn't going to help. IIRC, the pre-compiler will unload when you run the regular compiler. When the compile is done, the IDE reloads the pre-compiler. There should probably be a way to manually reload the pre-compiler when it starts erroring out. If I get some time to look into it, I'll post that particular solution.
Haven't seen it, but I haven't installed the sp either. I've heard nothing but complaints about the service pack.
^ this. The certs themselves aren't that useful to get jobs or anything, but sometimes they get your business some form of competency rating which can lead to work and or special licensing from MS.
Yeah, Microsoft Gold Partner or some nonsense. Oh look! We have a new logo for the website!
I was taking the 72-562 ASP.NET 3.5 since that was one of the exams on a list of things I could take for free from dreamspark. I am just an undergrad in college so I thought I would give this a go. But since tuesday is soo close and considering how I haven't gotten through half of the microsoft press book I decided to cancel it. I do own a Sam's teach yourself ASP.NET 4 and thats what origenally got me interested in ASP.NET
Cheap ass bastards dont offer time or money for training. All on my own on my free time.
ASP .NET 4 certainly has some nice feature, but the exam is hard to learn in a few days. Where I work, they estimate around 3 weeks for the 70-515 exams (that means around 15 full workdays). It is possible to get through the book faster, but when you want to do the exercises and case studies it seems to take at least 2 weeks (for people used to program in ASP.NET). I'm going to take it tomorrow. Wish me luck :)
Hope you passed XD
Yes, I passed, thanks for asking. Thankfully I took the online exam first, as many questions where not covered in the book. The test experience was not so great this time as halfway through the exam the pc gave an error and stopped my exam (but I could continue). But all in all I was out there in about 45 minutes.
what resource have you used to take the online exam just wondering 
I used the certsuite program with a vce file I found on the internet (I you look you should find it rather easily)
With the introduction of T4 into Visual Studio, shouldn't we generally be considering moving away from tools like CodeSmith? Anyone out there tried this approach?
 Using CodeSmith in your project is just asking for it to fail catastrophically. 
Microsoft has tried this. Seriously, ASP.Net MVC View generation is done via T4. There's some guy who made available a T4 template for ASP.Net MVC to generate strong-naming for all the places where "magic strings" are still used (view names and the like). Devart has recently released a VS T4 editor with intelligense and all the modern facilities for free. Some other company had a commercial T4 editor out for a few years already. If I where to generate code, I would use T4. If I'm using Visual Studio, I won't mind depending on it but I would mind depending on some third party tool. That said CodeSmith has been in the game for a while (I gave them a try back when it was free) and are probably here to stay.
Care to explain why? I'm curious how a code generator could make a project fail catastrophically. I personally don't use a code generator but there are tasks where using one is the best option.
 Most languages have the ability to generate code for you (c++ templates, C# generics, C macros, etc). You are better off using those facilities and writing clean, generic code than using a 3rd party code generator like CodeSmith which will happily spit out a mountain of garbage. All too often the 3rd party changes their meta language in incompatible ways which break your entire project when you upgrade. You end up spending more time fighting with their meta language than you do designing a solid class library. CodeSmith is great if you are a consultant and get paid by how many lines of code you produce, but beyond that it's pure garbage. I've used it on a number of projects at the urging of my co-workers, and after those projects failed miserably I'll never touch it again. It can't replace well thought out development methodologies no matter how much you want it to.
What you "spit out" depends on the templates you use. If you write or use garbage templates, you'll get garbage.
&gt; It can't replace well thought out development methodologies no matter how much you want it to. Code generation has nothing to do with "development methodologies" and is never a replacement for well thought out methodologies. Think of it as more like a template facility you use at development time. It won't give you everything, but it will usually save you from writing by hand tedious and repetitive code. It's a labor saver, nothing more. I've used CodeSmith, MyGeneration/EntitySpaces, EntityFramework, CodeCharge, and even Python+Cheetah for code generation tools and the code generation approach has proven itself time and again but ONLY if there is proper discipline around the generated code. Specifically, generated code: * Must NEVER be changed by hand. * Must be extensible through overridable methods, partial classes, etc. enough so that behavior is customizable and extensible. * Must be created in a repeatable configuration. This generally requires that the templates/settings for the generators must also be treated like source code as one must be able to regen at a moment's notice. * Must itself be captured in a RCS like TFS and reviewed before check-in to protect against unintended effects. You could argue that good design should obviate the need for code generation, but that never works 100% in reality, because with all these statically typed languages we use, it's actually hard to make them dynamic enough to cover everything that logic in a code generation template can easily address. And FWIW - I am NEVER paid by the amount of LOC. That would be silly.
&gt; C# generics That isn't even remotely close to why people use code generators in .NET. So you just hook up a generic class and instantly have a DAL? Or call a web service to parse WSDL and turn it into an object model by saying MagicalService&lt;T&gt;? You are very ignorant to the types code generation. 
I use code generators all the time, but they are for a specific purpose (Linq2Sql, WSDL, even .designer files are code gen'd), but I will never use a tool like CodeSmith for doing generic custom generation again. You end up spending more time creating your own version of Linq2Sql than you do creating the app which was supposed to use it. You need a DAL? Buy Telerik/Devart/whatever instead of CodeSmith.
You're basically advocating code generators over which you get no control of the templates. You seem to think that developers can't handle modifying templates, but that they're somehow going to be able to handle getting the job done without templates. That doesn't really make sense.
Actually Devart uses T4 templates for which it gives you a apparently nice editor for you to edit said templates. I'm not sure but I think what snarfy means is that if you start using something like CodeSmith, you'll end up with the golden hammer anti-pattern and use it for everything when there are better options. It is true that generics and lambda expressions can do some things that you couldn't do any other way than by generating code in the past but there are of course exceptions and in those exceptions there are tools that cover a good part of them (strong-named resources, strong-named services, strong-named DAL). One thing's for certain, I haven't had to make/use a code generator in *years*.
Code generators? People are still using code generators? Protip from someone who has done this since before code generators were "the thing"; they get you in trouble. Generators make your project more complex and difficult to troubleshoot and chances are you are ignoring existing framework or IDE features that already do the job without resorting to a code generator that has no real knowledge of your application without spending ages inside of template designers when you could be writing working code that is clean and easy to read/port. From the simplest website or client application to high performance multi-layered enterprise applications that integrate across platforms I have never needed or allowed the use of any code generation except for VS templates and the built in tool set. Projects were done quickly, tested cleanly and had much smaller footprints as a result. It would be a very hard sell to convince me that a code generator would actually make my life easier. It was a hard sell many years ago when people first tried to get me to work with these types of tools, and given the pleathora of other tools and capibilities available it's an even tougher sell today. Seriously Kids: Friends don't let friends use bulk code generators
Yes, people are still using code generators. I'm sorry, but I've got work to get done, and the last thing I want/need to do is to spend hours writing code that I could get knocked out with a custom template. I've used various templates throughout the years, and even wrote my own. The quality of the result all depends on what you want.
As I said, if you feel you need a code generator to save you time, you clearly are not taking advantage of the tools and technologies available to you. Code generation is not an excuse to be ignorant to what your tools and frameworks can do for you however heavy use of generators often makes it easy to turn a blind eye to much better solutions. 
I do take advantage of the tools and frameworks provided to me. Just because I use a Code Generator, doesn't mean I'm ignorant of the code-base. 
Oops on the Devart product. Good option to have though. Re: Code gen as golden hammer - that's definitely true. The act of organizing repetitive code into templates is instructive though if you're paying attention. Before we had generics in .NET, I used a generator that would generate strongly typed classes for an object factory (I think it was based on EasyObjects). After generics, I was able to throw a few thousand lines of generated code in the garbage along with the template that generated it. But there are other things that still aren't so easy to use the language to get around that are still repetitive and boiler-plate ridden. Thankfully, they're becoming more the exception, but still.
Seriously, Im not trying to be a dick, if you really think you are saving time with a tool like Code Generator then you are fooling yourself. Tools like code generators make up for a gap you have: * Technical * Skills * Design * Integration Somewhere you have a gap in one of these areas. If you claim competency in technical capability and I will assume Skills as well then I would guess you might need some review of design or integration. Technical could still be a candidate however as things like legacy systems or business restrictions that limit technical capability fall under that category. Seriously, its not to brag, you really don't need those tools, a well thought out design methodology and smart use of the VS2010 tool set will actually get you just about everything you could ever need with minimal code generation. TBH, when I have run across the use of these tools, the systems end up being needlessly complex, hard to work through, and can be even more buggy. 
Don't worry, you couldn't have known unless you used it. You'll probably hear more of them as they have released their T4 editor for free. I haven't used it as I said, I haven't generated code outside outside out-of-the-box tools that generate their code like Entity Framework. And yes generics and now lambda functions (generic delegates) can save you from generating code in a ton of cases. I'm making an internal DSL based on that. Instead of having developers write clunky XML files (another golden hammer right there) and generating code, I made some fluent functions that allows them to define pages and functionality in the Global.asax that I interpret at run-time. All strongly typed, strongly named. Very easy to extend. I wanted something like Dynamic Data but without the "you need to add that? go in the template and...". The only part where code is generated is done by Entity Framework (actually Devart's version as I need Oracle connectivity). 
No, I realize you're not trying to be a dick. I think the biggest misconception about code generators is that they are some sort of silver bullet. They aren't, nor were they ever meant to be. Things like business rules and restrictions are not generated by code. You'll have to write that out by hand, just like you always have to. I'm a bit wary of templates that try to fill as many gaps as possible, especially design - as that always changes. You're right in that nobody really "needs" these tools, but then again, nobody really needs frameworks like NHibernate or Entity Framework. You could, technically write it yourself, and use raw ADO.NET. Have you even used Code Smith? If so, what templates did you use? You admitted, yourself, that you use T4 templates to generate code for you. What do you use them for? 
There's a pretty cool video on what MS are doing with T4, powershell and nuget to automate ASP MVC scaffolding generation: Steve Sanderson : Scaffolding – ASP.NET, NuGet, Entity Framework Code First http://channel9.msdn.com/Events/MIX/MIX11/FRM13 I'm fairly Ok with "scaffolding" - i.e. run the tool once and get a reasonable starting point which you take over from there. and with T4 and powershell it's pretty flexible.
I'm just skimming the video but that sounds very Rails-y. Very interesting and thanks for the link.
I wouldn't be surprised. A lot of ASP MVC is Rails-y.
Best start looking in minecraft then !
Hire dot net developer from India for versatile dot net development at viable rates. From companies to corporate giants, everyone prefers to hire .net developers from India to get varied .net development solutions and services as required and at reasonable prices too. Consult for free quote on dot net development work.
All three of them.
No way in hell are the view counters on those forums correct.
Sucks when you realize you're backing the wrong horse.
I read the thread and the most vocal people on there are really blowing things way out of proportion. The video wasn't a technical tell all, it was a short 10 minute marketing video. It didn't cover every aspect of Windows 8, but simply showed off the new tile system. The person in the video mentioned that you can use HTML5 + Js to build tile apps. Now he never said that was the only platform, but that you can. Which is probably a way to get more non microsoft web developers on the platform. People are just inferring that this is a sign that silverlight and .net are going away in favor of HTML5/JS. That's absolute rubbing, there is no way that will happen. The more vocal crowd in the thread start spewing crap like "I will move my multi million dollar investment away from microsoft if HTML5 is the standard", sure they will. Then you have people who start saying that microsoft shouldn't pander to open standards and instead BE the standard. This exactly the kind of thinking that has a lot of the world's developers hating microsoft and it's about time they adopt open standards. With all that said, I think all this fuss is about nothing. They just showed a video that has a new UI for Windows 8 and said "you can write apps for it in Html5 + JS" I don't think they mean apps as in full fledged desktop applications, but desktop apps, aka widgets. So all this fuss has been about writing little desktop gadgets.......sigh.
I saw the video and I'm pretty sure that even if you have to use HTML5 to code the tiles, it won't "standard" simply owing to the fact that it has to be able to interact with the platform in a way that code on a web page doesn't. 
Talented developers understand project goals first, and choose the appropriate development platform second. I'm no technology futurist, but I've heard, on rare occasions, technology *changes*. You'll notice talented devs spend a lot more energy on acquiring new skills than they do whining about change. It's as if Microsoft said, "if you're a crappy developer, let us know by whining in the Silverlight forums."
TIL that there are actually 1000s of Silverlight developers!
What plans? Anyone here seen those those published Windows 8 plans? No? ::shocked look:: Me neither! /s I've seen a demo video and it in no way deprecates WPF, Silverlight, nor even the Win API. All they seem to have done is taken the Metro UI tiles and implemented them in HTML5. That's it and we don't even know if that's really true. It's a demo; anything can change between here and RTM. They're just jousting at windmills..
&gt; choose the appropriate development platform second. I don't know - I'm trying to remember the last time I had free choice of development platform... I think the target system was a 386 running DOS. As an employee, my shop has already chosen its direction. As a consultant, I'm usually limited by my customer's choices as well. I don't think the complaint is that things change - if you've been coding for any length of time, the reason you know a bunch of languages and enviroments is because it was necessary to learn the new stuff. The complaint here is that Studio 2010, Silverlight and WPF **were** the new stuff that MS has been pushing - until these Win8 announcements.
Another article (from ars, IIRC) mentioned that *legacy* (read "full featured desktop") apps were going to be supported on an "if runs, fine, if not, tough" basis. The implication was that full fledged desktop apps are dead. True, or even possible? Seems doubtful now, but 20+ years ago I was told I was wasting my time programming PCs - all the jobs were and always would be in mainframe. Maybe they were right after all - what better place to run your cloud than on the big iron?
I know two companies (Oil/Gas) use Siverlight. 
You should be able to search for the control or loop through and look for it by ID. var rpt = pnltest.FindControl("Repeater1") as Repeater; if(rpt != null) { foreach(MyFancyItem item in rpt.Items) { item.FancyThing(); } } 
That's roughly the way I did it years ago. Back then I ran into weird problems on my pages when I dynamically created controls via a repeater. ViewState optimization would actually remove controls out of the ViewState even though I was using them and trying to retrieve them on the post-back. I don't remember the exact reasons for this, but heads up if you start getting strange problems.
Boo fucking Hoo. What a bunch of short-sighted little bitches.
I suppose it wouldn't matter how you are accessing the control if its being removed anyway. 
isn't that how they always ran? it's up to the developrs to update their software. They can't make everything perfectly backwards compatible.
Inherent problem with dynamic controls is you have to rebuild the entire control collection for the viewstate to matter at all. I think everyone goes through a phase where dynamic controls seem awesome, and then you realize how awesome life actually was in the before time.
I'd rather windows dropped certain legacy support (with full upfront notice and around year deprecation time) and create something better than to constantly try to fit new designs in an architecture that doesn't support them. 
If you are dynamically adding the Repeater, then you have to add it again when the page posts back, in the page load event at the latest. This is because when the viewstate loads, asp.net can only load the state of the controls it knows about. It's been a while since I've dealt with web forms, but dynamic controls were never fun. You really need to know about the page life cycle. It might act like it's winforms, but they have to do some crazy things behind the scenes to get it to work that way.
well. thats what theyve been doing. eg. notice how windows xp programs work on vista/7 on a "may or may not" basis.
Dynamic UIs are awesome and should be totally achievable within OOP. That said, the house of cards that is ASP.NET (and any other component oriented web framework for that matter) just doesn't make it easy. Doing this kind of thing in Java/JSF is even more of a nightmare.
Good topic. I absolutely love the ingenious idea to run applications in a virtual machine and have the painting go to an actual windows in the real OS. That is the best way to have 100% compatibility (as long as input mechanisms don't change that is). This does require more resources, but RAM gets cheaper and we are getting more and more cores. Whoever thought of that gets an upvote from me :D The only real issue then becomes security but IMO that should never be sacrificed. Plug-in the virtual registry and filesystem they claimed to have in IE # (can't remember) and you have a nice sandboxed application that actually works. 
Yeah disregard. Turns out the user has to fully logout of windows and log back in. Windows caches the user token and it won't update group membership (which is what the roles.getrolesforuser uses instead of actually reading out of AD).
I've been a dev for over 4 years now. So far I've burned through php, java, c#, and html+js (in that order). So either all these Silverlight devs are straight out of college, or they somehow thought it'd be a great idea to place all their job security in a brand new platform backed by a single company... I honestly don't know a single other dev who is so invested in one single language that they'd be freaking out like these Silverlight devs.
Oh, Resharper... The reason I can't code with notepad anymore... Sigh.
You mean you could code without intellisense on notepad before resharper? DEMON!
Silverlight has a good adoption rate for intranet web applications. It makes sense, you have a controlled environment so you know people have the plug-in and it's easier to build RIAs with it than HTML5/JS/CSS (or so I've heard, I don't know, I took the the AJAX road).
If JetBrains made resharper for notepad, I'd probably pay money for it.
Right now we don't get shit -- maybe a book here and there, and expected to pick it up in our off time. We've just recently undergone some restructuring though, and I know training is an issue our new director wants to push, so we'll see how that goes.
I think you accidentally the link. I've been waiting to see this and elastic tabstops make their way into VS for a hot minute.
Bah. thats right. I looked at the text entry field... here ya go http://research.microsoft.com/en-us/projects/debuggercanvas/
Thanks, http://research.microsoft.com/en-us/projects/debuggercanvas/
Note this is for Visual Studio Ultimate. Unfortunately I can't afford and my company won't spend the money on the MSDN subscription and/or the cost of Ultimate. So I will just admire from afar.
 Where has this been all my life, no more "Go to definition" for me, Thankyou for posting this.
Nothing to stop you installing the trial at home on a vm, then when it expires create a new VM (Or less legally crack it, if you use it at work i see no reason why you should not "trial it" at home)
True, I may give that a shot actually.
This is something I struggled with in the past, I'd recommend reading up on "reflection". Alternatively, how are you getting the data into the repeater in the first place, If it's a dataset can you not manipulate the data there and update into SQL that way then reload the panel so the new data comes through, What are you trying to get out of this, if you can ellaborate a bit i'm sure I can help.
Click link: http://www.microsoft.com/downloads/en/details.aspx?FamilyID=e2a1a098-995e-4468-816d-7fdbe0a64f38&amp;displaylang=en Enjoy VS ultimate in around 50 mins with a semi decent connection :)
If JetBrains made resharper for **anything**, I'd pay money for it.
Great, another reason to steal the Ultimate version of the IDE. I always wondered why MS likes to charge for their development environments...
Seriously. What is in the $12,000 version of visual studio that's so hot shit to be worth that price?
Test &amp; Lab Management, Load Testing and maybe Intellitrace. Maybe not 12k per seat hot, but still god damn handy to have.
This is fucking brilliant. I recently had a project trying to unravel a legacy app that defied to be understood because of the clusterfuck of method calls between classes. It took two senior developers an entire afternoon to whiteboard the program flow. And now I find a tool that will do all this for me??? WOOHOOO! 
After trying this out, I can definitively say that this is THE SHIT. Makes me so glad I have an MSDN account.
From the forums: "Hi Brian and Joel, thanks for the feedback. IntelliTrace isn't the reason we require Ultimate, and if that was the only tie we had with Ultimate then we could have shipped a version that simply doesn't support that feature. The reason we require Ultimate is so that we could re-use the underlying technology for the Dependency Diagrams to identify and display the right fragments on the canvas. This re-use is what made it possible for us to release an out-of-band power tool in an efficient manner on top of Visual Studio 2010. It's unlikely that we'll be able to make this version of the power tool available in Pro, but the best way to help us make Debugger Canvas available in other versions of Visual Studio is to let Soma know that you'd like to see this kind of user experience built directly "in the box" as part of Visual Studio. In the mean time, if you don’t have Visual Studio Ultimate then you still have two options to try Debugger Canvas for free: 1) Install the free Visual Studio Ultimate Trial, or 2) Install the free Virtual Machine containing Visual Studio Ultimate. The second option is probably the most convenient since Visual Studio Ultimate is already pre-installed on the machine. All you need to do is copy the Debugger Canvas VSIX into the virtual machine and install it. Kael Rowan | Research Software Design Engineer | Human Interactions in Programming | Microsoft Research" 
Life refactoring? Take my money now!
It's shit like this that made me switch to MVC. 
Also to note, this update brings the "-moz" and "-webkit" CSS3 styling. It's like Microsoft is acknowledging the existence of other browsers. Awesome! :D
I haven't installed SP1 so far because so many people said it was a mess. Is it better now?
Long as hell to install on my machine at work. I think I'll start the upgrade tonight and let it run through the night. Haven't heard a lot about the mess. If you have some specific problems, let me know and I'll report it to Microsoft.
&gt; It's like Microsoft is Microsoft isn't anything. Parts of Microsoft are. Developer Tools division make Visual Studio and .Net. Windows Division make Windows and IE. They've been trying to shaft each other recently...
Ohhhh nice. I know that the developer tools division as always been great with opening up API and letting us know how things are doing inside. Windows Division, not so much.
The funniest thing is if the Windows Division wins, Microsoft will lose tons of money because the higher language developers will just move to linux. I've said it before and will say it again, if there is no advantage in having windows clients, then there is no need for a windows client, which means no windows servers. 
Yeah, the product tie-ins cut both ways, so that sucks for them. They've never competed on a tie-in free basis on a level playing ground. That said, you'd be daft to believe that they would allow HTML5 to usurp Windows servers so I think we'll see a combination of advancement to Windows servers in Windows 8 and increased product tie-in around specific Windows server products; particularly around improved security, SQL Server, and SharePoint. They can always fight the fight by adding value rather than dependencies, and I do look forward to that.
Developer Division wants .NET everywhere. Supporting HTML 5 is just something they need for ASP.NET development.
For me SP1 was a huge improvement in terms of stability. 
True of course. I was more addressing the idea that if HTML 5 replaced Windows clients, that could of course reduce the advantages of tied-in product suite all the way from the client to the server. Even if that happened, they have other ways to differentiate
Honestly most sites worth anything present the code in multiple languages. But it's really not that hard to translate, I seem to remember reading about a code gen library that translated between VB and c#.
DevDiv's crown jewels is .Net. So WinDiv is now soft-peddling that. They've just got the JavsScript religion instead, now that they've got IE9...
In case you're interested, Reflector does this translation when you have it reverse full assemblies. Really, since you're just learning, it's a better exercise to manually translate the code yourself. There really is no quicker way to really learn .NET programming.
And you'd be wrong... it's used ethically as a learning tool, as way to check your assemblies to make sure they're properly obfuscated by the product you're using, to retrieve lost source code from assemblies, to understand what a business partner was expecting you to do with their objects or to find a bug for them when they haven't published the source or PDBs and it's 3 AM there while you're trying to get useful work done, etc. etc. etc. 
No, it's for real. It's a very very rich environment compared to HTML w/AJAX and much more productive on the UI front. It's perfect for intranet apps. Where companies use to abuse the IE DOM in Javascript for intranet apps, they should use this now. It's a much less broken model for rich web apps. That said, it obviously isn't too useful on the big bad Internet. MS could change that pretty much instantly if they make SL a standard and open sourced the client, but I'm guessing they won't.
So, how did it go?
&gt; If you have some specific problems, let me know and I'll report it to Microsoft. Since SP1, using regular expression search often locks up VS for an unexpectedly long period of time (~1 minute or so.) Some notes: * It seems to happen only when there aren't actually any more matches to be found. * The regular expressions aren't very complicated, but I see the problem most often (always?) when using excluded characters, e.g. [^ g] * It locks up the UI prior to a dialog with "Cancel" being displayed, and to the point that the UI is completely unresponsive. Repeated clicks on the VS window will cause a bubble saying something like, "An operation in VS is taking a long time to complete..." to pop up in the Windows tray.
Have you tried first to disable all and every extensions to make sure they are not messing with your VS?
because they made over a billion dollars doing that.
I prepared a portfolio with print-screens of the site and code print outs, and it looks great! I haven't started interviewing yet though. That week was a bad week at work and I was ready to walk out but now I'm hanging in there a bit more to see how things pan out with my husband. It's kind of a long story... But now I won't be bogged down with having to prepare this and update my resume when times are tough. Thanks again for the advice =) 
Thanks for the recommendation. I upgraded this afternoon.
I don't use any extensions.
Can anyone explain the benefit, in C#, of replacing using a type's Value property with two functions Bind and ToIdentity that basically do the same thing?
Give me a regex so that I can reproduce the problem on my end in my code. 
No thanks. I'll just submit it to Microsoft Connect myself.
Perfect. On the other hand, I found some Connect report that the Regex searches crash VS2010 in some cases. Maybe it's a "Less used" feature that didn't spent a lot of time on. At least it sounds like it.
The stated reason is to avoid boilerplate code. The Bind() is what you want to happen, while the .Value call is defining how you want it to happen. Monads seem to be more about defining what you want to happen than the how. The fact that both seem to result in similar amounts of code could be related to the fact that the language isn't purpose-built for Monads. A purer functional language could possibly improve on this. Disclaimer: I don't really understand Monads yet.
tinyclr.com / netduino.com Not a failure, it is just organic growth with a thriving community.
Awesome guide. I've never heard of beyondrelational.com, is there a reason it is hosted here? Does anyone have a more official link for this document? I would like to pass it around at work :)
Found the answer myself. Available on [this page](http://msdn.microsoft.com/en-us/concurrency/bb895974.aspx) (Search for "Coding Guidelines"). Otherwise the direct link is [here](http://download.microsoft.com/download/B/C/F/BCFD4868-1354-45E3-B71B-B851CD78733D/ParallelProgramsinNET4_CodingGuidelines.pdf)
Hahaha, I think it's the same key code on Dvorak FYI.
Very nice! How is it for performance?
[Relevant](http://xkcd.com/378/)
I don't think so, all the CSS files in the theme directory will be sent to the browser, in alphabetical order.
Are the css hacks really theme specific?
I usually don't keep CSS hacks in my theme folder, I usually have it in the following folder structure: Assets/CSS/reset-min.css Assets/Images/*.* 
There is a way to do what you are describing, but it isn't part of the themeing system per-se. It's a browser file, and it goes into the app_browsers folder. You can override how controls render on a per-browser basis. There are also some hacks that you can express directly in the CSS that work due to quirks in the parsing systems. Starting a property name with * or _ come to mind for IE hacks.
Well they must feel silly now then. The only people who should be concerned are Win32/MFC programmers. 
Love C# and VS2010. We r using it to build a service to make "stored queries" for you Amazon SimpleDB which will then allow you to use jQuery to access your DB, and hence write the whole app in JS. [serverCyde](http://servercyde.com) (xpost from [/r/javascript](http://www.reddit.com/r/javascript/comments/i8bru/servercyde_secures_connections_to_simpledb/) )
this would be exactly why I stayed the hell away from WPF and XAML. The postulation at the end "does this mean .NET is going away?" is a little silly of course. WPF and Silverlight were really small parts of the overall platform in the first place. People got all excited because it was Microsoft's stab at Flash/Flex. Too bad the client would never get any kind of penetration in the market that was meaningful. Though what do you expect when you come to the game almost 10 years late?
You took the opposite out of the article than I did. I understood that XAML will become the standard Windows way of describing GUIs, which is not a reason to stray away from XAML in the slightest. Giving native code and .NET code the same GUI framework is a good thing, in my opinion.
No, I think the HTML5 will be the standard way of describing GUIs. XAML can eat a dick.
If you want every single window to be a web page, go use ChromeOS. Using the web rendering and scripting stack to create GUI's for true desktop applications makes no sense.
all im seeing is a shuffling of resources, that does not speak very well to the stability of the tech, esp since XAML is going to get spread out across 4 different teams developing for 4 different systems. Either they are killing off XAML or we are in for a mess in a few years with 4 different versions of XAML. 
But if they succeed, and integrate XAML into all their platforms, the results will be awesome. Using the same GUI Framework for desktop apps, RIAs, consoles, phones and tablets will be great, especially if it doesn't matter if you are writing managed or native code.
I haven't been keeping up on developments. Has MS said that it's dropping or reducing support for Silverlight / WPF / general .net / Win32 / any other existing app development platform?
There hasn't been anything public that I know of. The only real conclusion I can think of is Microsoft wouldn't be that stupid. IMO it is like this. if there is no reason to have a MS client, then there is no reason to have a MS server. In other words, if the go full html/js for UI, that reduces any requirement for corporate to have their users on windows (depending on other dependencies...if that makes sense). If they have no need for windows clients, then we don't need windows servers = no microsoft but for legacy. They have been really fucking stupid and slow for the last decade, but I can't bet they are that dumb. However, they haven't even come out with any official counters that I have seen. Scott Gu keeps pushing things and saying what is on the way, but IMO silverlight is dead unless you need the full goal of HTML 5 now and can force it on your users. WPF + MVVM rocks and is much better than win forms, but it wastes a ton of resources....then again I post this in firefox 5 that is using 1.3 gigs of ram with less than 5 tabs open. 
You've missed this mindless drama. MS briefly showed Windows 8 with Windows Phone 8-style interface (Metro), *complementary* to the classic Windows 7 UI. They drop the bombshell that apps that use Metro-style UI *can* be made with HTML/JS. MS decides to say no more and Silverlight developers everywhere get their panties in a bunch interpreting MS's lousy communication as "Silverlight/WPF" are dead, long live HTML/JS everything (gasp!). For a better idea of what is more likely to happen read this [excellent article](http://arstechnica.com/microsoft/news/2011/06/windows-8-for-software-developers-the-longhorn-dream-reborn.ars) about Windows 8 leaked alphas getting reversed engineered to see what's likely happening and MS is not saying (hint: things will be OK or even better). Edit: News about Scott Guthrie moving to WinDev from DevDev make sense now. Management is no longer letting the Windows division stall moving Windows closer to .Net. Us .Net devs should rejoice.
There is no way they are removing support for WPF and Silverlight. They just simply said you can build "apps" with HTML5. The word apps in this context is very misleading, it could mean full blown applications or desktop widgets on their new UI. The fact is, people are speculating and blowing things way out of proportion. Microsoft only said what they are adding to the os, they never said they were taking anything away.
I agree with you completely. It is mindless drama and I couldn't believe the reaction from the silverlight community. 
This interesting and related to the OP's topic. http://www.riagenic.com/archives/683 Microsoft is moving the XAML team from developer division to windows division.
... from a guy who charges $34.95 for extension methods.
I think that getting the CLR and the JVM to play nice together in one app sounds pretty hard actually. Or are you just questioning the value of using C# on Android? If so, I assume that you are not a C# programmer as Java seems like going back to C# 1.0. Java 7 will help though. The real value though is being able to re-use most of your back-end (web services, XML parsing, database calls, business logic, etc.) across Android, iOS, and Windows Phone 7. Actually, the first MonoTouch app I wrote reused a bunch of data access code and other plumbing that I had originally written for an ASP.NET app. So, I guess you could add Windows, Mac, and Linux apps to that list too if you are a Mono user (which I am).
I've discovered a lot of Linq methods just by exploring intellisense whenever I need to do some sort of operation on a collection. I've rarely used `Any` even though I probably do right code like `collection.Length &gt; 0`. I think it's because `Any` isn't a very good name for a method which checks if the collection has any objects. `Any` is a great name when you're using the overload that checks for a things that match the predicate but it doesn't work as well for the parameterless version of the method. That's my 2 cents anyways.
Length is a property so I don't think you are enumerating through the collection when you access it. It should be updated as items are added or removed from the collection.
For those who don't know who Roy Osherove is [@royosherove](http://twitter.com/royosherove) http://weblogs.asp.net/ROsherove/ http://osherove.com/blog http://5whys.com/ http://artofunittesting.com/
what bullshit, Ruby is garbage
I really like comments like this one: please, try to be constuctive.
Are the people who use Ruby garbage too?
Yeah, I always assume .Count() is expensive but .Length is a stored value, I know that internally it can be anything, but I'd never implement something expensive as a property and always hope that the guys who wrote the collections classes feel the same. never used Any(), seems like I have some tinkering to do :) Everytime I used LINQ I got fast code, I fell in love with dotnet all over again after 3.5
I have other thoughts on this. I've worked for quite a bit in other languages, perl, php, objective-c and ruby as well as my day job, c#. But, if you choose to look around, there are plenty of counterparts that effectively make use of the new skool ideas that live in RubyLandia. I guess it's because I've never felt the need to do things "the Microsoft way", and I'm not just talking about being an Alt.Net type either. There are some really fantastic things about the .net culture. Things like Nancy, ServiceStack, Razor, LINQ, Rx, are all very much the new way of thinking, but in a productive tooling environment that kicks ass. Maybe it's just me, but I've worked for the enterprise for a few years now, but have done the startup, the small business, the mISV, and I just don't see the value in trying things 8 different ways until I succeed. The niche place where Ruby has success, is at the startup, iterate fast, change what I need to and move on, forward and onward and not much risk if you have to go another direction quickly. There are drawbacks are when OSS projects are baren for awhile and it takes a wise Mage to lead the project for long periods of time without burnout from the community, their family, or even just the lack of respect sometimes. This is everywhere though, and not a Ruby specific thing. Gems, PEAR packages, Nuget packages are all the same, and they can at times lead to dependency hell, and are not a panacea. It still takes you to be able to fully understand all of the pieces of the puzzle and understand what will and will not work together. TLDR; It's a Rant Hit Piece against .Net for reasons not justified.
I am a bit befuddled by the piece as well. I'm not sure why he just didn't call it, "I like the Ruby community better." or, "I found open source tools." It just sort of meandered about and came to no real insights beyond the fact Ruby is largely open source. I thought all the cool kids were moving from PHP/Ruby/Python to Scala/Haskellanyways. And I thought F# gets a decent amount of respect despite being a .NET language. 
I agree with a lot of this as well. Just seemed strange to me for such a respected individual in the .NET community to come out with something like this
Nice try, Zed.
I don't disagree with it either, but I think Roy's main point is being missed here; though I can see why because I don't think he's expressing it very well. Msft caters very well to the needs of individual developers and to its partnered development community. And that's it. They do not, for the most part, cater very well to the needs of grass roots communities. They do not, for the most part, cater very well to the needs of open source projects. It seems like he wanted those things to be true, but I've yet to see a software vendor do both successfully. 
Thanks guys your are definitely right, I modified my blog post :)
"Appreciating the power of a true community" really doesn't seem like a hit-piece to me, it's just genuine excitement over something novel that's really missing in the .net space. I've noticed that respected technologists usually get over-excited about what they're working on at any one time. Their imagination goes into overdrive, they take on the role of advocate, and they use this to generate insights that prompt the rest of us to think about these issues. This shouldn't be read as an *endorsement*, it's really just a bit of useful theatre used to illustrate an experience and point out the values in it. I thought he achieved that goal remarkably well.
I'm a C# programmer and I just don't like the idea of paying for licensing for a semi-java based platform. I've always seen java as an open source platform independent language and I believe Android was based upon the same concepts. I think C# could be very powerful for Android but based on the cost of the licensing I would opt to write it in java. It's similar to what one of my buddies was telling me about, someone ported x windows to the droid as an app w/o 3D support. I think it is a great idea since it would be very easy to port basic linux apps to it but you will run into performance issues since it is not a native app. I'm not knocking it I just don't see it as a better alternative to the Android SDK.
I am guessing you did not read the whole series. The Identity&lt;T&gt; example illustrates the concept of a monad but does nothing usefull (as you point out). By the time he gets to parser combinators the value of Bind and ToReturnType should be more obvious. The basic idea is to encapsulate boiler plate in the monad instead of having to repeat it endlessly in your code. TL;DR The point is DRY
Note: I am the main author of the library. I think it is known in the academic recommender systems community, but I'd love to see more adoption by application developers. Tell me what you think of it. It is my first C# project, so I am particularly interested in hints from the C#/Mono gurus out there.
This is really neat! Bookmarked for future use.
Zed's dead man. Zed's dead.
You might also want to look at [Chirpy](http://chirpy.codeplex.com/). It doesn't do everything that this does, but it does cover a lot of the same ground.
I always feel a bit creeped out about having anything in a project that requires another developer to install an extension to visual studio to use to also use the project. The syntax highlighting and all that are nice, but just a personal preference about using an extension to generate code automatically like this just doesn't seem right to me.
I'm really happy to hear that Miguel and his team are back in control of Mono. They can get back to doing what they do best.
Is this more of an MVP pattern rather than true MVC?
Yes and no... It's kind of weird. He's binding the MVC framework on top of the WebForm and... it works. In any case, to make your code testable you need to use a pattern with WebForms otherwise you are cooked for testability. Just another way to do it I guess. I would need to use it personally to see up to where it goes.
Ok, that makes a little more sense then. Thanks!
If your skills put you at the leading edge of your field, you may be referred to as a 'gun'. For instance I believe that I am a 'gun' at faping.
I think it means, "gun for hire", which for me is just someone that doesn't need a lot of direction, help, and just gets work done.
I've never heard of a GUN developer, so as the others have said maybe just an adjective. Or it could be that it is a typo and the manager wanted a "GUI" developer.
I think it is short for "top gun" from what I'm seeing via google. It also appears to be an Aussie term. Maybe a modernization of "guru", but with a slightly different (non-neck-beard) connotation.
Maybe they meant GNU developer :)
&gt; For instance I believe that I am a 'gun' at faping. Clearly you're not a gun at spelling.
Maybe it means the same substantive meaning as "rockstar"--i.e. nothing really.
I did pretty good, one handed.
If you bought ReSharper 5 in the last few months (after April 1st I believe), you can upgrate to v6 for free.
'Gun' is [Australian slang](http://www.thinkingaustralia.com/thinking_australia/about/aussie_slang.asp) for someone who is exceptional in their field.
Clearly you need more practice at fapping and typing then.
I've written a lot of .NET code for guns, am I the only one out there doing this?
I know they're trying to simplify things but drag and drop coding seems to breed some truly awful developers.
as much as I hate the idea of this product, I would rather inherit a lightswitch project than a Access/VBA one.
As a developer who's already been through the ringer and is now in management, this looks to fit my needs to throw together utility apps that will scale later.
&gt; Basic applications can be written without a line of code. I've been hearing that line since the 80's.
and it's true, but when serious work is required they hire a developer to continue their brilliance...
Ugh,
So password the sites you want to restrict, and send out passwords only to those you want to grant access....
Agreed, it really makes you feel like you are working on a website instead of some weird abstracted monstrosity.
That looks like a lot of fun.
This looks pretty swell. I enjoy working with C# (do it for a day job), and it would be nice to work with a familiar environment. I was recently looking at playing with the ADK (Android Development Kit - based on Arduino). The main problem for me is to learn Java for the Android side and C/Arduino for the Arduino side. While this isn't so bad and I have written a few trivial apps in each, it would be really great if I could just focus on one language. Do I really trust Microsoft to do the right thing though?... Hmmmm.
Use GhostDoc to speed up the XML commenting and then Sandcastle to generate the documentation. The only downside I've had with Sandcastle is it's speed when compiling is slow.
Ghostdoc is pretty nice - it compliments the builtin stuff in visual studio which isn't bad at all. Once you've stubbed your method, go above and give it a '///' and VS will automagically set up the XML documentation blanks for you to fill in
FWIW, I believe MSDN is generated from this feature
That's what I'm doing now, all the xml comments. Edit: Holy shit, Ctrl-Shift-D !!! :D
Good code should document itself.
FUCK THAT FUCKING GHOSTDOC SHIT. GODDAMN. SOME FUCKING RETARDS OVERSEAS USED THIS TO AUTOGENERATE THEIR "DOCUMENTATION". YOU KNOW WHAT FUCKING COMMENT IT PUTS ON A METHOD LIKE TOSTRING? "Toes the String". HOW ABOUT BULKUPDATE? "Bulks the update". HOW FUCKING USELESS IS THAT??? IT PROVIDES NO FUCKING USEFUL INFORMATION THAT I COULDN'T GLEAN FROM THE METHOD NAME &amp; PARAMETERS. IF YOU'RE GOING TO ENTER A COMMENT, AT LEAST LET IT BE FUCKING ENGLISH THAT YOU FUCKING TYPE. ANYONE THAT USES GHOSTDOC TO GENERATE COMMENTS WITH ITS FUCKING USELESS LINGUISTIC PARSER NEEDS TO BE AS FAR FROM ANY FORM OF TECHNOLOGY AS POSSIBLE. Oh you said you fill in real comments afterward? Sorry, I have a trauma-related capslock reflex whenever I see "Ghostdoc". ReSharper generates empty comment fields, too. (And I can't imagine using VS without RS anymore.)
Unit Tests
I used [DocProject](http://docproject.codeplex.com/) back in 2008/2009 but there hasn't been new release since then. Customer wanted documentation about the code so I used [Sandcastle Help File Builder](http://shfb.codeplex.com/). We were already using stylecop (with resharper plugin of course) so generating documentation was pretty easy. Personally I don't see much value in those generated documents unless you are building common reusable library for other people. Even then the documentation tends to be like this: /// &lt;summary&gt; /// Connects to the server /// &lt;summary&gt; public void Connect(string address) { // code here } Good examples are lot better than dummy documentation.
I like the cut of your jib good sir.
Yeah plenty. I really don't understand the down votes on original comment. Does any one really disagree thatwell structured clear code with sensible type/variable/method names and a logical flow is the nicest and easiest code to maintain? And that the code that is most enjoyable to read or work on generally requires very few comments or documentation? I would wager that anyone who disagrees with the sentiment of the original comment is likely a FUCKING terrible coder who I would avoid hiring.
I fully understand where you're coming from here - and yes I've worked on and managed some fairly large scale projects/systems. What I was getting at with the "good code documents itself" aphorism is that code - at least on a micro scale (that is function by function line by line) should be sufficiently clear that it documents itself. We've all come across methods that are 300 lines long, with numerours levels of indentation, stupid variable names, magic numbers etc... This is not good code and is always frustrating. Code on a macro level - complicated class heiracies, interfaces between modules, messages etc... etc... definately begs for some level of documentation. The need for documentation is not something I was meaning to dispute at all. It's just that the level at which documentation is required for sufficiently complex frameworks/systems in my experiance is never satisfied by using automatic generators (The xml documentation devs enter in VS in my experiance can be helpful... but never explains things at a sufficiently high enough level considering the entire system as a whole from a new participants pov). It's been a long day but hopefully that makes some sense? &gt;While your ideas are not unique, they are restricted to the type of code you are working against. Not entirely sure what you mean by that?
you may have a point here - but I have a trauma-related downvote reflex whenever I see a text all in CAPS ;)
I do like the fact that it fills out the parameter comments nicely. I did notice the "Toes the string" bit, but it didn't matter because I ended up rewording it anyway.
What kind of address is that? ;)
Yes but it shouldn't stop you from documenting. Reducing the dependency on documentation by making the code flow as clear as possible with good naming and clean code doesn't excludes a bit of documentation. Good code comments don't explain what you are doing (that should be clear) but should explain why you are doing things. There's also the fact that some features require more complexity which should be explained. Of course, given the choice of taking on documented obfuscated code (abbreviations, acronyms, meaningless variable/function/class names, magic numbers and codes instead of well named constants and enumerations) and well written undocumented code, I'de rather punch the one who wrote the obfuscated one. I like to think well written code needs *less* documentation. If a method is called CalculateTotalPrice, there's not much need to write much documentation to express what it does. Also properly cutting down function code into multiple functions that each do their thing is very helpful instead of multi-page horrors where you have to read hundreds of lines of code to understand what's supposed to be done.
What if your code is exposed to others, like third party libs? Do you expect somebody to drudge through the entire source (if it's available) to understand how your code works? Do you read through mscorelib and not the MSDN documentation on .NET? The way your comment comes off, it seems like you're saying documentation is *never* useful if the code is concise and clear? Perhaps, I misunderstood. 
I don't get the downvotes on this comment. The idea of documenting code (perhaps using some autodoc tool) is a nice one, really it is. Unfortunately, code documentation _needs_ to be maintained along with code. Refactoring can change what methods do. Have you allotted enough time to maintain the documentation as well? Would you say that you currently have enough time to maintain your code, your unit tests and your documentation on top of all that? And if so, is your magic unicorn shop hiring? I work where people often want that fix yesterday. I try to deliver clean, simple code that what I'd expect it to when I look at it again 6 months from now. I skip over documentation because that poem you scribbled in the edge of the book isn't the novel I'm interested in reading. If you're publishing an API, auto-documentation isn't the worst thing you could do, but the best documentation in the world won't fix broken method/parameter names.
Docu-whatnow?
 Ghostdoc is great. It doesn't always leave comments like "Toes the string". Here is a comment it made for TypeConverter.ConvertFrom /// &lt;summary&gt; /// Converts the given object to the type of this converter, using the specified context /// and culture information. /// &lt;/summary&gt; Sure it just copied the base class's comment, but it's still useful, and free. ReSharper is only free for 30 days. If you leave a comment that says "Bulks the update" you deserve to get bludgeoned.
I've pre-ordered [the starter kit](http://www.ghielectronics.com/catalog/product/297). I can't wait!
And what would that be?
The right thing, you mean? Microsoft have a habit of beginning projects and then losing interest, I'm a bit fearful of Gadgeteer not taking off and being dropped after investing time/money into it. Seems like a bit of a gamble when the Arduino and other platforms are already so established.
Yeah this is a good point.
Tell us all about it when you get it please.
The article does a good job illustrating the difference, but there is one key point it's missing. Viewstate, ASP.NET MVC apps are inherently faster because of the lack of Viewstate. You are saving bandwidth by not having to shuttle all those extra kb back and forth. In addition, you are saving rendering time since the framework doesn't have to re-hydrate all the controls/execute the page life cycle.
What article? All I saw was an introduction to MVC, and a pretty anemic one at that. Your single paragraph on viewstate and the page life cycle offered more insight than their entire missive.
If I'm not mistaken, I read it somewhere that you can do the webform without any use of viewstate.
You can turn it off, but you still have the page life cycle to deal with. Also another big factor in the MVC vs Webforms debate is extensibility. MVC is open source and build in a way to allow you to change any part of it. If you don't like the way controllers and actions work, rip out and roll your own. The entire framework was built with hooks so you add customization and it's open source so you can even compile your own custom build (note you can add loads of customization without compiling the source). Webforms is pretty strict on the customization you can do.
Thanks. You're right it's a very high level introduction and doesn't cover any of the technical details.
Not to mention that "events" in WebForms are absolutely god-awful, and should not even be in a web application framework. Since switching to MVC, I haven't looked back. I hated creating controls in webforms, and they are an absolutely breeze to do in MVC.
I normally did my project in web forms, the last project I worked on I tried out MVC for fairly data heavy app, and frankly, doing webforms is like writing code in assembler in comparison to the magical things MVC does.
I can't wait to try it out. I'm doing MVVM WPF right now, which is quite nice too.
Sure, but with WebForms you can throw together a CRUD application in 10 minutes with a GridView and SqlDataSource. WebForms has always been more about rapid development over elegance and saving a few bytes, and it still fills that niche well. Get much more complex than that and you're better off working with MVC.
With mvc scaffolding, you can get full CRUD in 2 minutes (including data access), then modify the list views to use an open source telerik grid that supports sorting, paging and filtering. Honestly in terms of basic RAD development, mvc is on par with webforms if not faster. Webforms does have more server controls though.
I was mainly referring to the native components but the MVC scaffolding package looks nice. Telerik MVC is only open source under GPL v2 so you have to be careful about that if using it in a commercial application.
I am currently running Mono 2.x on my Debian Lenny server and I have to admit that acquiring all of the necessary dependencies, especially mod_mono was a huge pain. I spent about 10-12 hours just trying to locate a set of instructions that would walk me through downloading, building, and configuring Mono for deployment. I felt like I truly earned the victory, but the actual process seemed haphazard and scattered. The mono-project website kept referring to the mod_mono apache plugin and kept stating that you could download it from the mono-project site, but alas there was no link. I discovered that it was hosted over at Novell. I would think if the process was a bit more streamlined for other Linux distros I would be more supportive. Everywhere I turned the responses seemed to be "Just install Ubuntu, it is preinstalled and you can just use it out of the box." Kind of kills the open source nature of the whole idea if you have to switch from one Linux OS to another because it is preinstalled or easier to work with. Just my two cents. 
With webforms, it was possible (with a little work) to keep ViewState on the server. Doing that makes the request/response cycle a little faster, but it doesn't make webforms any more pleasant to work with.
Mono 2.6 is in the lenny backports repository. Did that not work? (Obviously you still have to configure it, but I'm surprised you had to find, download, and build everything you needed.)
Interesting. It's just worked for me on all the distributions I've tried. (Fedora 15, Debian 6, Ubuntu 11.4)
Installing Mono from the repository was easy. It was tracking down mod_mono and configuring it to work with apache that was a huge pain in the ass. I found an Ubuntu tutorial and used that for my Debian install and it worked fine. I thought this was more of an "I love Mono, but tracking down all the pieces was a pain in the ass" vent.
Installing Mono was easy, but tracking down mod_mono and getting it and xsp to play nicely with Apache was a pain in the ass. I love Mono and being able to serve up .NET content without using IIS, but finding and configuring all the pieces was a concerted effort.
Wow, I should have paid more attention to Mono. I always thought it was just a half-baked way to run .NET applications on *nix. Don't get me wrong; I love *nix. I just had no idea the Mobile stuff was so robust. The iOS IDE/compiler (at a quick glance) looked a lot more interesting than having to acclimate myself with Objective-C.
I'll be doing a series of posts on this soon, to make it easier. All it takes is a little bit of knowledge of the terminal and how to use a package manager! You can read the first one at http://coderinserepeat.com/blog/archive/2011/Aug-14.html. Like it says, the following tutorials will be focused on getting ASP.NET up and running! Any and all feedback is appreciated!
Well, actually it is not such a good point. Unit tests are always just examples ...
I use Doxygen: http://ismll.de/mymedialite/documentation/doxygen/annotated.html I am not 100% happy with it, but it mostly does the job. API doc generation is in my opinion the weakest feature of (portable) C#. I mean, why does it have to be so hard? Java does this right since the 1990s.
Use something like nhaml (no idea if it's the best port, but it's the only one I know offhand, I bet one of the iron languages has a good one) for the DDL syntax. What you have is pretty close, but you don't need to write your own parser here. I would consider using it for the DML side as well. I think the benefits of focusing on the value you're trying to provide outweighs the lack of precise control over the file format. You can then focus on your commands and their implementation. As an FYI, I probably wouldn't use this because during development work I'm auto-generating my schema as I go with a Fluent nHibernate AutoMap. Once it's nailed down, I prefer something that supports refactoring, such as Fluent NH's ClassMap&lt;T&gt;. I understand these features are built into the latest NH, but FNH does what I want so I haven't looked at them yet. For whatever reasons, this is a traditionally under served part of the .NET ecosystem so it's nice to see people working on it.
Hi, thanks for responding! My gut reaction is that I don't think any kind of markup, even something that's condensed like nhaml, would be able to beat the NDBGen syntax that's already defined. As it is, the existing syntax is much more concise than the equivalent nhaml markup would be - and since the NDBGen domain is much more specific, I don't think there's really a need for much more extensibility than there is. Even if there is a need to specify much more metadata than is available now, I think I'd prefer to have that specified in a separate document so as to keep the DDL itself as concise as possible. For the DML, using markup like nhaml might make a little more sense, but I purposefully kept the syntax as close to the DDL syntax as I could, and using markup would lose that familiarity. Additionally, the current DML syntax lends itself pretty well to using whitespace the format the input such that it looks like a table, which is (IMHO) much easier to read than any kind of markup. Writing a parser isn't an issue as it's already done - in fact, part of the extensibility of the NDBGen platform even allows for 3rd party extensions in the form of additional metadata tokens (and generators for those tokens). I'm not sure what context you mean by "refactoring" - it is possible and relatively simple in that you can just regenerate from the NDBGen inputs. However, there isn't currently any integration in the IDE for refactoring commands or changing other parts of the code that rely on the generated pieces. NDBGen doesn't have any way to generate migrations scripts right now either. I think it's also worth noting that my current employer has been using NDBGen in one form or another for about 2 years - I guess what I'd hoped to get out of posting this here was some feedback in regards to other similar products - and based on your comments, I'd assume that better support for refactoring and database migration would be a must. I'm not familiar with Fluent nHibernate AutoMap, but I think that NDBGen could be used with it. I think the purpose of using NDBGen would be to be able to use the syntax - and all it would take is creating a generator that would create whatever models and configuration code that you'd normally hand-code, and Fluent nHibernate AutoMap would take it from there. Right now, NDBGen only has a LINQ-to-SQL model generator, but that's just because that's what I've been using. Sorry this is a long and rambling reply, but thanks for taking a look! Let me know if you'd be interested in using this with Fluent nHibernate, I'll look into what it would take to write a generator for it.
I am on my phone so more later, but to expand on refactoring, what i mean specifically is that with fnh i can have a mapped type, change a property name, and presuming i use a safe rename, the next time i run my app the schema will be updated to reflect that change. Later: This might make more sense in light of my other comment that describes my workflow. When I get to the stage where I have ClassMaps, if I need to change MyUserEntity.LastName to Surname, e.g. I can change it everywhere I need just with a simple rename refactoring on the property.
Could you clarify how you would see this working with an NHibernate workflow? Here's the high level of how I tend to work. 1) Start an application from the domain model. During this time, I'll be running unit tests using sqlite since I am really close to the "metal" and don't need to worry much about concurrent operations or anything beyond the basic SQL features. Fluent NHibernate will be [configured to automatically create mappings](http://wiki.fluentnhibernate.org/Auto_mapping) for all types marked with a certain interface and to [export their schema and script it into the database](http://wiki.fluentnhibernate.org/Schema_generation). This will usually end up being called from a SetUp method in a unit test. 2) Eventually the model will clarify. At this point I'll switch from automatic mappings to [ClassMaps](http://wiki.fluentnhibernate.org/Fluent_mapping). This gives me finely grained control over the schema including naming, data types, keys, and associations. The tests at this stage start to turn to more complex integration tests that need to run against SQL Server. I'll probably run the same FNH config to export the schema here. 3) We start deploying. Since this runs through CI, by this time we assume a [solid build system](http://www.jetbrains.com/teamcity/download/index.html) is in place and one of the primary concerns here is schema management. This will script the schema of a known-good build that's passed all levels of testing and add this to source control in the appropriate location. You can then package this up along with your binaries and etc to create releases. At this point you'd use redgate or whatever tool for deployment. During development, tests will generate their own fake data via the app's API. In production, I like to have a "deploy default data" button somewhere in an admin panel that executes a [transaction script](http://martinfowler.com/eaaCatalog/transactionScript.html) against those same APIs to create the default data.
Again, I'm not familiar with NHibernate, so I'm mostly guessing here. I think NDBGen could allow you to skip directly to using ClassMaps - NDBGen lets you define all the same things, and it could generate the ClassMaps (and the underlying classes) for you. For the database scripting, you can either use the existing SQL script generator, or use whichever generator you currently use with NHibernate.
I'm always surprised to see people doing code analysis that don't have a CI solution. TeamCity is free and so easy to set up it is almost ridiculous not to use it. Doing code analysis and coverage on commits instead of compile time seems like a no brainer to me. I always do those two items at intervals before the commit and always once before I do a final commit. Having them in the CI system for everyone to see if you don't do that keeps accountability up and keeps day to day development moving smoothly
Generic request timeouts are a bad idea anyways. It's far too coarse of a setting. 
&gt; Doing code analysis and coverage on commits instead of compile time seems like a no brainer to me. I always do those two items at intervals before the commit and always once before I do a final commit. Sorry I didn't understand. You say you do code analysis on commit but then you say you do them before **final** commit? We are using TFS and it runs the code analysis, stylecop and unit tests during CI build. Problem is that CA is so slow (something MS forgets to mention). If we don't run it locally at all then the build will surely fail every time. The full rule set has so many rules that you cannot remember them all.
Hmmm...arguably true, but if I'm reading this question right, there is nothing preventing a poorly written handler from spinning indefinitely, consuming gods-know what resources, etc. If true, this is a severe oversight.
But there is also nothing preventing a quickly returning handler from leaking memory, consuming gods-know what resources, etc. While I whole-heartedly believe in client-side request timeouts, I find server-side ones to be more troublesome then they are worth. 
I see your point, but that opens up a dangerous inversion of control scenario: say I publish a page to the world. There are no constraints that would prevent anonymous tool script kiddie X from writing a requester that does not specify any timeout, creating a rather efficient way of DOS-ing my server, since I have no way of canceling that request due to timeout.
Why/how does he expect the framework to terminate HIS code running in the controller? The client should be the one setting the timeout. Besides, this functionality is useful for long running polls or async methods. If you 
Hardly anything you'll do bar firewalling people off, will prevent them from DOS'ing your server
Fair enough, but I think you'd agree we shouldn't make it even easier to do so. :)
Point taken.
I found the cause for this, methinks: This method is in the WrappedAsyncResult class, which the MvcHandler class uses via BeginProcessRequest: public static IAsyncResult BeginSynchronous&lt;TResult&gt;(AsyncCallback callback, object state, Func&lt;TResult&gt; func, object tag) { BeginInvokeDelegate beginDelegate = delegate (AsyncCallback asyncCallback, object asyncState) { SimpleAsyncResult result = new SimpleAsyncResult(asyncState); result.MarkCompleted(true, asyncCallback); return result; }; EndInvokeDelegate&lt;TResult&gt; endDelegate = _ =&gt; func(); WrappedAsyncResult&lt;TResult&gt; result = new WrappedAsyncResult&lt;TResult&gt;(beginDelegate, endDelegate, tag); result.Begin(callback, state, -1); return result; } where "Begin" is: public void Begin(AsyncCallback callback, object state, int timeout) { bool completedSynchronously; this._originalCallback = callback; lock (this._beginDelegateLockObj) { this._innerAsyncResult = this._beginDelegate(new AsyncCallback(this.HandleAsynchronousCompletion), state); completedSynchronously = this._innerAsyncResult.CompletedSynchronously; if (!completedSynchronously &amp;&amp; (timeout &gt; -1)) { this.CreateTimer(timeout); } } if (completedSynchronously &amp;&amp; (callback != null)) { callback(this); } } 
For long running polls you can set the serverside timeout to be longer, but for general pages you may want to prevent bad code from running away with the proc. It makes perfect sense...
Do the combo-boxes need to be selected in order from 1-5?
No, it doesn't matter which order they are selected in, the main thing is the selection needs to disappear from the other comb boxes and reappear when it's not selected anymore. I kind of have it working with multiple if statements, but it's dirty and it gets confused and I get multiple entries.
Best way to solve this problem is instantiate a list of strings called masterItemList. This variable will contain all the different value shared by the combobox. Then create another string list called selectedItemList. This variable will contain the current selected item for each combox. So each time the combo box is changed clear out selectedItemList and for grab the selected value for each combox. Next for every combobox add every value in masterItemList that is not in selectedItemList and remove every value that is NOT SELECTED for that combobox that is in the selectedItemList.
I would Create a List&lt;T&gt; and then at runtime populate the list and use linq to select into the comboboxes from the list where value not in ComboBox1, 2, 3 ect
I friggin' love lambda expressions.
&gt; I'm fairly new to VB.net... Linq may be a bit much for him. Perhaps some code samples would help.
Resharper is... how shall I put it... Juicy.
The dirty way would be to create an IF for all comboboxes IF ComboBox1.SelectedItem = ("apple") THEN ComboBox2.Items.Remove("apple") ComboBox3.Items.Remove("apple") ComboBox4.Items.Remove("apple") ComboBox5.Items.Remove("apple") END IF Helpful http://msdn.microsoft.com/en-us/library/19fc31ss(v=vs.80).aspx
Sure, I'll knock something together, please hold the line (may take a day before i get round to it as more pressing needs atm)
/// Preprocessor directive ftw! built into visual studio, why do you need more than that?
lol @ 2:18
Good content, less than stellar execution :(
I know a guy based in Denver, Colorado. He's good. I'll PM you his name/email. 
What does the client like about DNN?
Cool. Got it. Thank you.
Open source, windows based, it's what they know. Aside from SharePoint, do you have any other suggestions?
Umbraco beats DNN hands down. if you want to get a bit more technical there's Kooboo Look in Microsofts Web Platform Installer there is many good opensource .net CMS. DNN is a poor excuse for a CMS. Editing documents is ugly and painful.
Further to that. Use umbraco! find it at http://umbraco.com/ huge community at http://our.umbraco.org/ It seems to be microsoft and the .net communities prefered opensource CMS
Thanks I have it bookmarked. Seems like it's hard to find .net cms developers. DNN or otherwise.
Umbraco while not perfect is better than Dot Net Nuke
are my eyes seeing in negative now , or was that visually painful?
I wanted to read and write into app.config appSettings section by using type safe methods like: var foo = settings.GetValue&lt;int&gt;("setting"); So I wrote small lib that does exactly that. There is more information in my [blog](http://catchblock.com/blog/?tag=/appsettings) and in the [wiki](https://github.com/tparvi/appsettings/wiki)
Not a bad idea. You get something a little cleaner than this if you are willing to endure the ceremony required to use strongly typed config, but I've never seen that used in a way that didn't make me cringe. This is definitely one of the parts of the API that would've benefited by being designed post-2.0. Which is particularly odd because I am pretty sure 2.0 deprecated the 1.x series's config system for another one that offers basically the same non-generic API. Edit: you might want to think about TryGetValue options as well. What happens here if the setting is undefined? You might be able to clean that up with a constraint such as GetValue&lt;T&gt;(string name) where T : new() or something, but that can be a tricky road to navigate if you aren't careful. I'd look for something other than output parameters though. Take a look at how F# handles output parameters for what I think is a better approach to that pattern.
[Design Guidelines for Developing Class Libraries](http://msdn.microsoft.com/en-us/library/ms229042.aspx) [N-tier architecture](http://en.wikipedia.org/wiki/Multitier_architecture) [Model-view-controller](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller). MVC is a design pattern, not a framework. There are frameworks that implement it, but I've been doing it so long I prefer not to use them. MVC is [very old](http://en.wikipedia.org/wiki/Smalltalk). Learn [T-SQL](http://msdn.microsoft.com/en-us/library/bb510741.aspx) and basic administration. Learn how to write stored procs, db functions, triggers, constraints, etc. You do not have to be a DBA, but you should know some basics. Learn how to write an [ETL](http://msdn.microsoft.com/en-us/library/ms169917.aspx). 
Clean Code by Bob Martin The Pragmatic Programmer Code Complete by Steve McConnell These aren't specifically C# books, but you know that part.
For books on c# for the "somewhat fluent, proficient" c# coder, try Effective C# by Bill Wagner C# in depth by Jon Skeet
In addition to all the great resource others have proposed, I would recommend finding a .NET user group near you and attending. Most user groups meet monthly and offer presentations on the latest trends and topics. What's more important is that the people presenting are experts in their field and you get to see how they work and what tools they use. In addition you get to network with a group of peers who can also talk to you about experiences. Also, try to find a code camp near you. There are many code camps all through the US and these are free events where you can go to learn about new technologies. For example in southern california, there is code camp coming up in october with lots of great sessions. http://www.socalcodecamp.com/sessions.aspx 
[Scott Hanselman's blog](http://www.hanselman.com/blog/) is always good.
I'd like to warn against MS SSIS ETL, since it's all graphical "programming" with no feasible way of updating a package's actual xml. More reasons: http://ayende.com/blog/2637/ssis-15-faults I've had to use it at work, and it's mainly a pain. Although I guess it would be good practice/preparation for the kind of crappy "enterprise" technologies that many companies use.
Learn an MVVM framwork and Prism / Unity if you are going to be doing a lot of silverlight / wpf. I didn't, and I'm kind of regretting it. Also, unit testing. MBUnit is good, so is Nunit. Enterprise development sucks, but with C# it sucks a little less. Also consider getting Re-sharper. It's the best tool for re-factoring and enforcing proper convention.
You have the perfect opportunity to practice, get a new DB and work on the transition of data from access. I think the best way to find the best way of doing something is being very attentive to what you're doing/planning - if it feels wrong/stupid/too long, look for a better way, C# is so ubiquitous, there are resources, libraries and guides for *everything*.
Unit testing is something that we don't do here and that I really really need to work on. I have Resharper here but I'll check MBUnit and NUnit out. Thanks!
I've thought the same thing while I've been working here. Spent a lot of time checking out different languages/getting myself familiar with things we don't work with here. I totally agree with the feel approach too. Thanks!
MBUnit is nice, but doesn't always play well with resharper, just a heads up
Wow I sense some tension between those 2 guys lol
ScottGu's blog. Live it, love it: http://weblogs.asp.net/scottgu/
It is probably worth noting that there is a method of accomplishing this built into the framework. Custom configuration sections can load strongly-typed and -named structures, including complex hierarchies. The API is gross, but I usually template around using it directly.
Work on a open source project and get some MS Certifications. 
Absolutely true - we've deployed many SSIS packages and it's really only advantageous in very simple, very temporary data transfer scenarios. It's a nightmare when you're maintaining/updating packages over the long haul. Far better to use the bulk import API if you need speed of transfer and control over data mapping.
oh good timing. I'll need something like this soon. bookmarked
&gt; Edit: you might want to think about TryGetValue options as well. What happens here if the setting is undefined? It supports optional values e.g. var value = settings.GetValue&lt;int&gt;("Setting", 123); If the setting is not found then default value (123) is returned. You can also specify custom conversion function. TryGetValue might be also be usefull (althought I have setting.HasAppSetting()). Thank you for the comments!
This is a good note. I should actually add this information into the documentation. I'm not really a fan of custom sections so I usually just use the appSettings and connectionStrings. If I need to store complex settings I use plain xml files. They are easy to serialize/deserialize using generic methods and by marking the class with ISerializable attribute.
No problem. Here's something config-related that you might want to think about. Unfortunately I can't post the whole thing because it's from a project that is still under wraps (we hope to open source it at some point). https://gist.github.com/1200013 Hopefully that link works, let me know if not and I'll see what I screwed up.
For those who don't know it, the CCR is another way of implementing threading and parallelization in .NET, developed first for use in robotics by MS Robotics. However it generalizes very well to all .NET concurrency and threading applications. It's something you would use with or possibly instead of the Task Parallelization Library and it's freely shipped with the [MS Robotics Studio 2008 R3](http://www.microsoft.com/robotics/)
P/invoking feels dirty as hell, but it lets you do so much awesome.
Support for P/Invoke? Isn't this just WPF then?
I think making Silverlight capable of what WPF is may be part of their future strategy for it... but I guess we'll have to see how it fits with whatever is announced at the Build conference next week. 
A single framework? That would be good specially since WPF has been lacking support for some time now.
I agree. I just think it's kind of silly that we started off with two frameworks, and are merging back into one.
I really need to start using these more in our .NET 4 apps....
I've been using this handy app for a while now, and it is AWESOME.
I used to use this but now for most stuff you can just add an entry in your config file and it will cause the app to just drop the email message in a folder on your test machine instead of sending it. This is assuming you are using .net to send the message.
What entry in the config? This could be useful. 
I would also like to know how you did this.
This shouldn't be a surprise to anyone really. A language that supports dynamic object types has to do this, otherwise it kills the whole purpose of having dynamic in the first place.
I _think_ they originally didn't want the language to have a dependency on a library type. They must have backed away from this principle as the language evolved because I believe later paterns like iterator methods, dynamic type, and maybe even the C# 5 async stuff actually uses the real types.
Eric Lippert on the subject: http://blogs.msdn.com/b/ericlippert/archive/2011/06/30/following-the-pattern.aspx
foreach/IEnumerable were in C# 1.0. dynamic didn't come until C# 4.0.
The article is about C# 4.0.
I was sure that I was going to come in, show everybody this awesome Eric Lippert article on it and everyone was going to think I was awesome. Then I see that you are the awesome person. Have an upvote!
I was sure that I was going to come in, show everybody this awesome Eric Lippert article on it and everyone was going to think I was awesome. Then I see that you are the awesome person. Have an upvote!
That's true, but it has been implemented like that from the beginning. I thinks it came in handy for dyamics, but I doubt they had dynamics in mind way back then.
It's like this in your config file: &lt;configuration&gt; &lt;system.net&gt; &lt;mailSettings&gt; &lt;smtp deliveryMethod="SpecifiedPickupDirectory"&gt; &lt;specifiedPickupDirectory pickupDirectoryLocation="C:\temp\App\EmailPickupDirectory\"/&gt; &lt;/smtp&gt; &lt;/mailSettings&gt; &lt;/system.net&gt; &lt;/configuration&gt; 
I just posted it up this thread in a comment
I would say they did since JavaScript could already do dynamics (object graphs) back then. It was simply a matter of moving farther away from the traditional C++ compiler design.
Is Java also going to be using "lambdas as expressions" like C#?
Did a quick search but couldn't find anything because the feature of what would be normal lambdas in C# is called lambda expressions in Java, I think. Maybe someone will happen by and tell us.
Async is pattern-/ducktype-based.
You have taken more feature rich way for handling configuration settings. I didn't have that many requirements or complex scenarios in mind. Typical use case for my library is below public class MySettings { private AppSettings settings; public string Name { get; private set; } // Ignore, never read or write this property [IgnoreProperty] public int Timeout { get; private set; } public MySettings() { this.settings = new AppSettings(FileOption.FileMustExist); this.settings.WriteInto(this); this.Timeout = 100; } public void Save() { this.settings.ReadFrom(this); this.settings.Save(); } } The library reads and writes the settings using public properties. Most of the time that is all I need. Good to see other approaches and alternative ways to handle configurations.
It certainly looks like a waste to have forked to merge again but I suppose in between there was a serious change of strategy.
Because p/invoke probably isn't going to work all that well under OSX. That's going to be tricky.
You don't need a completely different framework for a few specific features. Kind of like the .Net 4.0 Client Profile and Full SDK where in one you have less features. Build it targeting the Full SDK profile and you get all the features without having to change a whole bunch of things.
You could be right, but the last time I looked at it, I thought it was half pattern based (getting the Awaiter) and half not pattern based (required Task&lt;T&gt; return type for async methods.
http://macdevcenter.com/pub/a/mac/2004/04/16/com_osx.html
The article author's beef is not with the behavior of foreach as much as the VS2010 online docs; in particular the entry for foreach in the C# Reference. For myself, he kills his argument with the last sentence, "Perhaps the Visual Studio 2010 online documentation is not the definitive source of the C# specification." He is not completely wrong though, the [C# Language Spec](http://msdn.microsoft.com/en-us/library/ms228593.aspx) is ["the definitive source for C# syntax and usage"](http://msdn.microsoft.com/en-us/library/ttw7t8t6.aspx). The spec explains clearly enough how foreach is evaluated at compile time. As an aside, while the article author's code compiled successfully, he should have received some warnings according to the spec.
Any word on if Microsoft will be streaming the sessions later? 
I read that the keynotes would be streamed live, but the main sessions would be posted the following day. 
Well, according to a coworker, the keynotes will be livecast and the daily breakout sessions will be available by the end of the day they were presented. We should be in a great position to know pretty much everything that everyone there will know pretty quickly afterwards.
Thanks
this is very cool, unfortunately I encountered few crashes during play :/ 
Very very interesting. I've been reading about WinRT and can't make out if it's truly another base API as is claimed or is another CLR-like layer. If it's really another base API that runs in parallel to Win32 then I'm very curious to see how you develop for it in .NET. Are the API classes/methods exposed in a .NET wrapper? So much to read and explore... thank goodness [they made a developer preview available](http://msdn.microsoft.com/en-us/windows/apps/br229516).
Here is some more info, from the source... the "[Windows Developer Preview Guide](http://download.microsoft.com/download/1/E/4/1E455D53-C382-4A39-BA73-55413F183333/Windows_Developer_Preview-Windows8_guide.pdf)."
&gt; WinRT is the new OS-level API layer. This is the new native API for Windows, it isn’t a new layer on top of Win32. :D
Good to hear that Ars Technica's assessment of Windows 8 was spot on while all the Silverlight developers where flipping out due to Microsoft's initial botched announcements. If anything, this makes .Net stronger.
Sort of interesting from a .net point of view, but I can't wait to see these iphone/android inspired features they're talking about. Sounds like things will be a lot simpler with this release.
WinRT is actually based a an updated version of COM. I'm assuming that it uses some variant of the CLR Callable Wrapper, but I don't have the details yet. http://www.infoq.com/news/2011/09/C-Component-Extensions And in case you missed it here is some more info about WinRT. http://www.infoq.com/news/2011/09/WinRT-API
The most common thing said after the keynote was "Wow, Microsoft didn't fuck it up"
Pusing win32 back to being a 2nd class citizen is going to make a lot of people happy, and a lot of people very upset. I, however, do wonder what the mono and wine teams take on this is. By making the spec this open, it seems like a lot of the hard work is being done for them. It seems like cloning the interface for winRT should be quite simple.
is it just my computer or does resharper significantly decreases the performance of VS. When i installed Resharper 4 or 5, my VS instances would hang time to time.
This goes beyond "not fucking up". This finally fixes the issue where the Windows team promised and repeatedly failed to provide a modern (at least .Net friendly) Windows API. The situation with XAML was also ridiculous: they make a modern, advanced GUI framework and the Windows implementation (WPF) has serious performance issues due to lack of integration. Sticking the development tools head honcho into the Windows team paid off (as Ars had analysed).
I wouldn't say that Win32 is a second class citizen. It is just a different option, one that will still be vital for a wide variety of applications. For example, you are not going to build Windows Services with Metro. Which in turn means you won't have IIS and anything built on top of it. I'm pretty sure WinRT will not run .NET. Instead it will run a .NET-like runtime much like we see in Silverlight.
Actually the reason is that they didn't have generics. They didn't want to cast value types like Int32 to an object and back again, which is necessary when using IEnumerator.
For anyone not familiar with what the PlayStation Suite it (I had never heard of it), [here's the Wikipedia article on it](http://en.wikipedia.org/wiki/PlayStation_Suite)
&gt; What we call "bindings" Mirosoft now calls "projections". I was just fine with 'bindings', with 'projections' being something completely different. Why?
I believe there is a distinction... A projection is where you write the code in C++/WinRT and it's projected into the other languages (you don't write anything for the other languages) automatically. Typically 'bindings' refers to an interop layer the binds the native code to the language you're making the binding for. In C# this means writing a bunch of p/invokes.
I think the C# was a typo? If not, are they licensing monodroid?
Off the top of my head I would say a Factory is the way to go then public interface IDomainFactory&lt;in T, out R&gt; { R Create(T original); } public DateFactory : IDomainFactory&lt;DomainDate,string&gt; { public DomainDate Create(string original) { throw new NotImplementedException(); } }
Nice, I hope to watch some of this next week.
**What is the pattern?** * View: Anything that deals directly with user controls * Model: Anything that deals with raw data and the logic around it * View-Model: This is the glue code that ties together the view, model, and any services (web service, file system, etc.). **What was done correctly?** The Commands region is exactly what I would expect to see with this pattern. **What was done incorrectly?** You are mixing the model code with the view-model code. This is a recipie for disaster. Your view-model should never duplicate the properties on your model. I am working on a project right now that does that and everything is incredibly brittle. Consider this scenario: Student FirstName (get/set) LastName (get/set) FullName (get only, returns FirstName + LastName) StudentVM FirstName (get/set) LastName (get/set) FullName (get only, returns FirstName + LastName) Problem 1: You need to keep the Student and StudentVM objects synchronized is hard. People are going to expect to be able to manipulate the Student object directly and have that be refected on the screen. Problem 2: Calculated Fields If you change the FirstName property that will raise a notification that the FullName property has also changed. To use your design you would have to either forward events from the model to the view-model or duplicate all of that logic. **How do you fix it?** public Student Student { get { return this._student; } set { if (this._student != value) { this._student = value; base.RaisePropertyChangedEvent("Student"); } } } Now shove all that juicy validation logic into the Student class where it belongs. Your data binding expressions will change from {Binding FirstName} to {Binding Student.FirstName}, which is exactly what they were designed to do. Once you have done this let me know and we can talk about your unit tests.
Josh Smith wrote a horrible article. He completely mis-understood the pattern and made it much, much more complicated than it needs to be. This is the stuff you should study. Getting Started with the MVVM Pattern in Silverlight Applications http://weblogs.asp.net/dwahlin/archive/2009/12/08/getting-started-with-the-mvvm-pattern-in-silverlight-applications.aspx Understanding the Model-View-ViewModel Pattern http://channel9.msdn.com/events/MIX/MIX10/EX14 Deep Dive MVVM http://channel9.msdn.com/Events/MIX/MIX11/OPN03 
Hey there grauenwolf, thanks for taking the time and reviewing the code. I originally did allow my View to have direct access to the Model via the ViewModel as you proposed in your fix but I encountered an issue. I had a screen where the user could update the student's details but I didn't want changes made in that screen to affect other screens until the user clicked the save button. When I gave my view direct access to the model, I noticed the search results screen getting updated as soon as the user typed some text in the update screen. But I do agree that the duplication is annoying plus I also had to move my validation out of my model to accommodate the above change. Do you see a way around the issue? I'll be reviewing the links you've left in the other comment later. Thanks for them. P.S. Here's a [copy of my solution](http://minus.com/mbjSeolk5W) if you're interested. I did some funny business using events to get my StudentsSearchViewModel to inform the MainWindowViewModel to open a new window when the Update button is clicked. I have no idea if that's MVVM-approved technique but it works.
&gt; I had a screen where the user could update the student's details but I didn't want changes made in that screen to affect other screens until the user clicked the save button. Ah, that is a tricky problem with no good solution. Options I've seen: 1. Do it as you did, with the view-model having a copy. As you say, leads to duplication. 2. Use the IEditableObject Interface. This provides a CancelEdit method to undo the changes. No code duplication, but the search screen will update at the same time. (This isn't necessarily bad, it depends on the UI.) 3. Make a copy of the object. When they hit ok, overwrite the original with the copy. The problem here is that it is real easy to miss a field as the application grows. &gt; I have no idea if that's MVVM-approved technique but it works. There is no such thing as "MVVM-approved". This is just a pattern, a starting point when you don't know what to do. It is perfectly acceptable to deviate from the pattern, especially if you can explain why you are doing so. 
i like this for creation (i.e. reading from the data store) - but does the factory pattern address the other half of the problem, namely serializing domain objects back to the storage format?
Roslyn is going to be pretty awesome. Not a lot of people might be able to properly use it (without shooting yourself in the foot), but once you get your head around it you can really do some great stuff with it.
Back in the 90s I tried to get a few MS certs and the company even paid for the courses. Turned out that with me in the same course were also long term unemployed people which had no experience with computers. The teacher was equally clueless as well and after a couple of days started to check back with me if something he said was right.
The thing is, the better your partner status with MS, the more they help you doing business and this help can be tremendous. It's less about the status you get vs. the outside world but rather within Microsoft. It's getting to browse MSDN online vs. having a bug within the SQL Server and talking to one of the guys on the phone that made the thing to figure out a way to deal with it. They also help with sales etc.
I usually went with the official stuff from MS Press. Everything should be in there.
If you're sending data to a client, they are ready to receive any number of messages. You're probably making the assumption that each chunk of data you send arrives at the client in those same chunks. In reality, what happens is that chunks can be joined together or split. The receiver of the message has to be prepared for this. Have the server send some kind of delimiter between each message, and then the client can look for the delimiter and grab all the data before it.
Thanks alot, tested it and it was exactly what was causing the problem.
Thank you for the tip.
Have a look at http://braindumps.org/ They have a bunch of useful stuff from people who have taken the certs. 
I usually study the books (MS press), and than take a braindump test, i noticed there are things in the exams that are not covered in the books.
"With great power, comes great responsibility." - Uncle Ben ;)
Buy and read the official MS Press book, do the included test exams and once you are comfortable do the test. 
&gt;You need to keep the Student and StudentVM objects synchronized is hard. I had the same problem and solved it the same way. Coming from the web side of things moving data from a VM to a M was common to me (and there is no better alternative) but in WPF changing the M from VM property setters and wiring events worked fantastically.
Thanks for the article. I started doing MVVM with WPF based on Josh Smith's articles and couldn't figure why he went for such a complicated solution to bind the commands. I had something that was clean and worked well with a crapload less of code.
Thank you.
Thank you.
Thanks.
This stuff looks really hot. Async in particular solves a lot of problems that many people are [not] aware they even have.
It's almost time for v5 now? I still haven't moved from 3.5 to 4. Interesting stuff nonetheless.
If you don't know you have a problem then you don't have a problem.
Have you been making Web apps or Windows apps? I Web development async is less a priority in most cases because you are already on a async model where you treat each call separatly (specially with AJAX).
There's still 4.5 coming up before 5.0. Jumping from 3.5 to 4 is not that big of a leap.
Is this Async stuff basically "nice"-ing up what you would have done with a Threading.Thread? It looks like it could be even cooler by keeping local variables in scope without doing the intricate delegate dance with threads.
There's a difference between an async client and an async server. A async client that calls a blocking server would be harder to scale since you're using up worker threads that could instead be used to handle other requests. 
Oh I agree but I doubt it's a very common case as opposed to lots of small web requests. Whereas in Windows app you have to do lots of operations in async otherwise you tie-up the UI.
Diminishing returns are diminishing. Generics in C# 2.0 helped just about everyone. Linq and lambdas in C# 3.5 helped a lot of coders. Async in C# 4.5 will help some coders. This is a natural consequence of doing the important stuff first; it's better than the alternatives.
yes and no. it doesn't imply multi-threading although the two go hand in hand. async just means that you do some work, save your state, and then come back to continue where you left off later. It's closer to 'nice'-ing up Dispatcher.BeginInvoke.
yeah just dont test your code then. problem solved.
I think web apps will be helped the most from this. Yes, you're already in an async model, but you're using one thread per request. Most of the time that thread is blocked on IO waiting for a query or loading a file. With async and a version of ASP.NET that supported it, you could be serving other request while the IO is blocked. Thus better utilizing each thread.
.NET 4.5 will come with C# 5. Confused? Yeah...
Ah, thanks for the clarification.
I'm still on 2.0 and got excited at the prospect of optional parameters in C# =(
At BUILD, Microsoft stated you can build Metro style apps and Desktop apps. Desktop apps work exactly the way they do today, WPF, SL and C++ native apps. WPF isn't dead, it's still very much alive within microsoft. It's just not touted as loudly, hell even winforms is still alive. ASP.NET MVC4 uses winforms to add extra tooling to Visual Studio in the form of Recipes. Personally I would build a new desktop app with WPF. Metro apps are geared more towards general consumers. Sure you can build a metro style app for a business. Imagine a point of sale application based on metro with touch, that would be very popular. But for everyday office workers that need a keyboard and more form based applications, then a traditional desktop apps works just fine. Those you would write in the same technologies you use today.
You hit the nail on the head. Basically we have known for years that one-size-fits-all platform development simply is untenable. It makes stuff that should be simple unnecessarily complex. We mitigate this with tools, templates and frameworks but its far better to have a platform that is more dedicated to the types of applications you need to build. It allows the development tools to be more streamlined and allows the platform to make certain assumptions about the application itself without requiring code or configuration to explain it to the runtime; this effectively decreases complexity of simple applications. While this can create new challenges it seems MS is mitigating those issues by basing applications off a common core framework that is just wrapped in different ways based on the application type. 
WPF is still a safe choice for complex multi-window applications. Silverlight isn't quite dead, but foresee most LOB Silverlight apps being ported to Metro.
Silly question - does anyone here know if WinRT/Metro will be usable outside of Windows 8? If not, then it's not going to be relevant to corporations for a good long time. Given that, and given the low relevance of Metro's UI principles to the corporate environment, I don't see a place for Metro in any corporate environment. That aside, we're developing complex LOB apps in the browser using Ext.Net. We have tons of WinForms apps too. There are a couple of WPF apps around here as well, but the general incompatibility of the two just serves to remind everyone why we should stick to browser independent web apps instead. Also, VS 2010 is proving to be slow, crashy, and a memory hog - so that hasn't exactly sold us on WPF. I mean, if Microsoft can't use it to provide a stable product, what hope do I have of doing that? AFAIC - "Next generation" web apps are where it's at for LOB apps. 
Yeah, I think you're probably right. If only I didn't have to use VS2010 to write ASP.Net MVC3.
WinRT/Metro will not appear outside of Windows 8. Technical issues in back porting to Win 7 aside (which would likely be very significant), Microsoft would never cannibalize Win 8 sales, nor would they want to technically support 2 SKUs (7 and 8) with Metro/WinRT capability, nor possibly damage it's brand with the inferior performance of Win 7 (likely, based on the Win 8 preview). It's just not going to happen.
What's wrong with VS2010?
People have been foretelling the end of desktop development for years. Hasn't happened. I won't believe any claims about the death of the desktop until a version of windows ships without DOS. 
It's a nice product but, like I said, it's "proving to be slow, crashy, and a memory hog". Our current solution has about 6 projects in it, with about 2 of those projects being on the large side (1000+ classes each). Examples: - My IDE opens and consumes about 250 MB of RAM, and then grows to about 700 MB within a couple hours. - It's not uncommon for VS to suddenly crash without a trace of why during TFS gets. This is particularly painful because it will mark its internal cache with the current versions of the files so it thinks it has them already, then it will attempt to get the files. It crashes here, so that it doesn't actually have the current versions, even though it thinks it does. I have to do a get latest against current version with the override that causes files to be retrieved again even though I have the current version (can't be bothered to look up the exact language on the dialog right now). - Before I figured out there was a GDI+ bug that interacted with our Intel video drivers, VS 2010 would crash every time I unlocked my workstation. I had to close it before I locked the workstation or it would crash. It easily crashed 20+ times a day then. It crashes about 5 times a day for me now between the TFS issues and for other unknown reasons. - Also, when keeping VS windows open on two monitors, the IDE can take 20+ seconds to put focus on whatever I click on. So, edit some code, move mouse to the solution window, right click on file - wait. Switch back to code window, click - wait. Enter debug mode, hit F10 to step over current line of code - wait. And then it's fine for a while. And then it does it again. - The new extensions are nice, but I've had to disable them all because it's not clear what problems were caused by them vs. the IDE. I just try to get work done now and not stir the nest too much lest VS send my machine into a tailspin. So, nice product with nice features - but it's a headache right now. And yes, I have SP1 installed already. 
So, WinRT/Metro will remain irrelevant for a long time to come. Too bad... This is yet another case of them marrying new tech to the OS purely for marketing reasons and without any consideration for customers of their existing tech. IE 9 anyone? Any barriers to their bringing these technologies back to their existing supported platforms are artificial in the sense that they erected those barriers themselves through design decisions. OTOH - They're still way better at the compatibility game than the likes of Apple, so I guess I should just count my lucky stars.
I'm sorry you're experiencing so much trouble, but I can only ask are you running from a beta build or something? I've been using VS2010 exclusively since it shipped, and have never had a whiff of the trouble you have. I will grant that it's memory heavy, but not nearly to the extreme you're stating. I frequently have two or three large solutions open, averaging two dozen projects each, and I never get worse than 100MB per instance even with a dozen files open. Do you frequently open dozens upon dozens of files and designers? That would certainly explain the slowdown as well. 
I'm not sure I agree about WinRT being irrelevant to any but the very largest corporations, who are already known to be slow at adopting anything. I think there's going to be a surprising driver for Win8 tablets using WinRT from the healthcare industry. Right now healthcare IT can't get enough of tablets, particularly iPad. My company is involved in two such projects, with plans for two more. The problem is that most of those HIT companies tend to be either Java heavy (typically the big corporations that can eat the longer development cycles that typically come in a Java shop) or C#/.NET heavy (pretty much everyone else). That tends to cause problems when you want a sexy new iPad app, given that you *must* have a Mac to develop against them, or an expensive C# =&gt; iPad conversion compiler. A lot of people have been doing the latter, in fact, but the Metro UI has been proving to be a success for WP7 -- too bad the marketplace and browser suck so badly or WP7 would give iPhone a serious run for its money. But my point is that I think the C# shops that want to run sleek tablet apps but are averse to the cost of a converter or can't hire Objective C talent may just give Win8 a serious try. 
What scenarios or machines are you imagining Metro running on that would require Windows 7, rather than simply upgrading to Windows 8? If the first keynote wasn't a complete lie, then the performance profile of Windows 8 non-Metro will be superior to Windows 7, which should be motivation enough. I think the big issue, though, is why would someone *want* to use Metro on an older machine.... it's pretty useless with a mouse. And if if you have an existing Windows-compatible touchscreen, with Metro, you can't have much of a raised surface on the edges of the touch surface, or you can't open the Charms or easily swipe to different apps. Also, how many of those screens are multitouch vs. single touch? I honestly think its lifeblood is going to be new devices. I think it *will* be a slow start, but I don't buy that it will be "irrelevant" during that slow start time. That's going to be a good time for independent devs to get apps ready for the app store. I'm sure it won't be a guarantee of easy money, but it's an opportunity to sell apps to possibly 10's of millions of people.... eventually.
I think he means "without a command line." Everything up to Windows 7 has a command line, and then there's PowerShell...
I want to like it, really I do. I like the themes and the extension manager, and the changes in DotNet 4 are great. **But it's so goddamn slow** My PC can run three instances of VS2008 without breaking too much of a sweat. Start VS2010 and it grinds to a halt. We're still on 32bit XP, so we're maxed out on memory. I jumped through the hoops to get the video drivers updated to see if that would help. Not noticably. Got the Windows Automation 3 API installed... a little better, but not much. I've played with the hardware acceleration settings, deleted .suo files, got rid of extensions... We're still starting new projects with 2008 because of the perf problems. There are plenty of [people with quad core i7s](http://social.msdn.microsoft.com/Forums/en-US/vseditor/thread/a6d500a2-d4ea-43e2-8460-9283ea5c1d89/) that are having similar problems, which doesn't fill me full of hope. Bloody Eclipse is more useable most of the time.
No, in fact I usually have less than 20 files open at any one time. I do not use any designers at all because they have a tendency to dramatically slow VS and cause it to crash. If it makes any difference I am using VS on XP for primarily VB development. And much of the misbehavior has been since I recently switched over to web development from WinForms. So.. I don't know. I would gather logs and send them in, etc. if it would help but I don't even know who would be able to use that data. I'm not going to spend hours of time on the line with Microsoft when I have to get real work done for my client. I'm hoping they're on the job with these issues somehow already. I can't be alone on this one. Oh, and for the record, I've never even downloaded the beta - much less installed it.
Well, Metro will certainly be relevant on those new devices; especially consumer oriented ones. And that's exactly what's going to keep it irrelevant to most corporate environments. Edit: And turn the question around - what exactly about Windows 8 would make it relevant to anyone but tablet users? The answer I see so far: very little.
I agree about the corporate environments - it's a consumer-oriented product for sure.
Yes and no. Windows backward compatibilty is pretty damn amazing, without a doubt. That said, when apple picked intel over power pc, at least they supplied Rosetta so that binaries didn't have to be rebuilt. It doesn't sound like this is being considered for Windows on ARM. Win8 is still clearly a full blown desktop os with mobile window dressing. You won't be running it on a phone 'a la IOS or android. You likely won't be running it on a tablet with the same skinny specs as the IPad or android (256mb-1gb ram). You'll be running Win8 on a "Tablet" with the same specs as an lower end notebook. The point being that you should have resources to support Rosetta (or Transmeta, remember them?) like emulation. Their compatibility game has been great historically, but the future doesn't seem as bright. 
Tablets certainly are relevant to systems around the fringes of the organization. The most mobile individuals, whether they be doctors or sales folks, need and will get tablet-ized versions of their apps for on the go use. But the bulk of the rest of the users will still be using complex LOB apps to get the rest of the heavy lifting done. Simplistic UIs like the ones the iPad and Metro provide just cannot keep up with those needs. We need a lot more competition in the tablet space to bring some balance back to the market, so I do wish the Metro well there. OTOH - I see Android already taking the fight to Apple, and this is way before Microsoft is ready to really try. Metro may even eventually provide the better UI experience, but with Android providing so many more options, I don't see Metro's adoption ever keeping pace with Android. Apply everything I just said about Metro to WP7 and the same is true there. Microsoft really dropped the ball by letting Apple and then Google run amok on mobile for so long. To me, it feels like they're too late to make a difference; though I guess it's better for them to try now rather than let it go entirely. 
Exactly my pain as well.
Ditto. It seems to be a lottery - you can get lucky and VS2010 works fine for you, or... not. 
Don't worry - [it'll all be fixed in vNext](http://blogs.msdn.com/b/visualstudio/archive/2011/09/16/addressing-visual-studio-performance.aspx). Hmm. Where have I heard that before? 
Digging around some more, it looks like there are some [useful improvements to WPF in 4.5](http://msdn.microsoft.com/en-us/library/bb613588\(v=VS.110\).aspx). So it doesn't look as dead as it had appeared. Which is good news. 
&gt;Our current solution has about 6 projects in it, with about 2 of those projects being on the large side (1000+ classes each). 1000 classes? What kind of software needs that many classes in single assembly? I would imagine that even compiling takes forever.
&gt; We're still on 32bit XP Using 10 year old OS no wonder you have problems. The memory management etc. are far better in Vista/Windows 7. This is usually a sign of bad management. Developers have to use old machines, old tools etc. all in the name of "backwards compatibility". After a while the move from VS2008 -&gt; VSxxxx requires so much effort and money that it isn't viable option.
The old [WPF Toolkit](http://wpf.codeplex.com/) hadn't been updated since Feb 2010, and hadn't even had a release for v4.0. I was pleasantly surprised when I found this. 
You don't *have* to but your productivity would plummet if you went the text editor + command line road. With MVC 4 and the recipe thing they are touting the VS IDE will be even more indispensable. 
I wouldn't have called WPF dead. More like lacking love. Good to see new stuff being done to it. VS2010 has quite a bit of it made with WPF and the reason WPF wasn't used more inside Microsoft was some sort of conflict between the Windows team and the dev tools team. This should no longer be the case since they put the head of the dev tools team into the Windows one in order to finally give us a .Net-friendly Windows API.
No, it's not in the name of backwards compatibility; it's in the name of "it ain't broke so don't fix it". They have a contract with a large outsourcing outfit that supports the desktop environments and it will require a non-trivial variance outlay for them to switch over. They spend 10's of millions of dollars with Microsoft every year on overall licensing to support a global enterprise. They are far from being the largest company to do this and I'm not even sure they're in the Fortune 500. This is far more common than you might care to realize. At any rate, I *hunger* to move to Win7; it's just so much nicer. But until the powers that be around here move off of Win XP; here we are.
Actually, I just re-checked, and I'm wrong about that; the two projects I was thinking about aren't even included as source in the solution anymore. Those assemblies are just referenced instead. So, total, between all the projects, we have less than 300 classes I think. It's actually worse than I thought then because if VS were dogging just on those, then it might be understandable. And to answer your question: the largest assemblies here are the core enterprise logic and database access layer assemblies. Much of that is generated though, so it's all good.
Just wondering why the core enterprise logic hasn't been divided into several assemblies? Seems kind of odd thing that you absolutely need all the 300 classes every time. I'm currently working in migration project and we are supporting legacy interfaces and new WCF interface. The project doesn't have that many classes but we have already separated the old and the new into own assemblies. No need to keep the extra weight around. What I have heard and seen it seems that in enterprise environment many applications are built like the wall of china. They are huge and once they have been built they cannot be taken down. They keep on using own db layers instead of nhibernate, own logging infra instead of e.g. log4net etc. After year or so the "core" is so huge the very existence of such framework/library dictates everything.
In our company we have at least one project still using VS2008 just because customer doesn't want to upgrade (they have their own developers using VS2008). I have always said that developers should be in charge of the tools. We know them and we are the ones using them. Kind of same thing with operating systems. Even if there are 10 000 workers using XP the developers should be able to use what they want. One way to fight these things is to create simple 2 page report which shows the cost benefits. I know few guys who have done that in order to get second 24" monitor. Kind of silly but that is what management understands.
It's available as a NuGet package as well: http://nuget.org/List/Packages/Extended.Wpf.Toolkit
I meant until command line applications are no longer supported. That's when I'll believe desktop application **may** not be supported in the future. 
Well, apologies if I haven't been clear enough, but like I said before - those classes are already spread across several assemblies and since this is a new project, work is often done across several assemblies at a time. At any rate, any development system that can't handle hundreds of classes at a time is a toy. VS 2010 isn't supposed to have these problems. I know the VS team is looking into solutions now, so this has been acknowledged. Your assumptions about enterprise environments are right; they are huge and cannot be taken down, but your assumptions that everything could be cured using NHibernate, Log4Net, etc. are ridiculous because you don't know nearly enough about the environment to know that would improve anything and you do not have enough information to make a cost-benefit analysis. Those tools have a cost and an overhead as well; they're not silver bullets.
I am hoping filterspam means that if you don't see a problem and your users don't have a problem, there is no problem.
I think the real ball drop was insisting back in WP6 days that "Windows-like" on the phone was still a good idea. They should have done Metro then. 
Thanks for the link. AutoMapper is a god send for me
Just out of curiosity, what's your use case for it?
Why VB?
yeah sure. but once you have millions of users, stuff you dont see tends to show up. doing async 'right' is pretty hard without something like async. people think they did it right, but 9 times out of 10 they have serious flaws.
Start with [WPF](http://en.wikipedia.org/wiki/Windows_Presentation_Foundation) if your doing .NET start reading up on how to do a UI with WPF or silverlight (WPF light)
no reason, its just faster for me to develop. CS.net is also acceptable.
I never would of though of doing it in WPF, thanks.
seriously, just use C# syntax, VB is almost never used professionally and when it is you are hated by every developer that comes after you. 
When you have to copy values from one data/model object to another AutoMapper helps a lot. Rather than write all the C# to manually transfer values, AutoMapper will copy identically named properties, while giving you the flexibility to handle odd cases and do deep copies. This happens a lot in any kind of app like ASP.NET MVC where you bind UIs to model objects, but get values from other sources, like web services or ORMs etc. It can greatly reduce plumping type code.
Right now in our production system I'm using it to map our DAL to ViewModels and the such. Code is easier to read and is far more consistent
Wait, what? View-models aren't support to have data, just are just supposed to provide access to the models and services.
Most of the time I see it being used as a work-around for a deeper design flaw. For example, people will use ORMs to avoid the "object-relational impedance mismatch". Then they will use AutoMapper to deal with the "ORM-DTO impedance mismatch". If it is a Silverlight application they may then need to use it again to deal with the "DTO-Model impedance mismatch". In Silverlight the path looks like this: DataReader --&gt; ORM --&gt; DTO --&gt; SOAP XML or JSON --&gt; DTO --&gt; Model In short, it makes copying data from one class to another nearly identical class easier, but the fact that you need to do so in the first place should be considered possible design flaw.
Oddly I've never had a problem with that kind of code, it's easy. And the ViewModels are never one-to-one with the domain objects. So I look at AutoMapper as kind of cool, but unnecessary. 
Well, it handles the cases of not one-to-one pretty well, most of the time. But yes, certainly you can do everything without it. 
Reading up on WPF patterns for scrolling, zooming, drag-and-drop and resizing stuff will probably prove useful. Drawing polygon shapes might be also needed, you could look into that. If the program scope is getting larger - UI patterns as MVVM are worth looking into.
After a long sojourn in the database world, I've been working on a n-tier .NET app again recently, and I am *shocked* by how much layering and boilerplate goes on. Indirection on top of indirection, which supposedly is a good thing, since it insulates one layer from another. But when you control the whole stack as we do, I just don't get it. I'm also struck by how much code generation is used--basically a style of functional programming--and yet implicit typing is outside the method (C#) is not allowed. So changing anything requires you to touch the code in 10 places rather than 3. Sure, some of those places might form part of a real contract (the 3 out of 10), but in the other instances, it's just noise.
ViewModels aren't supposed to be one-to-one with domain objects, but I've seen it happen. Even worse, I'm working with code where the view-model literally shadows the model. Every property change on the view-model has the marshalled to the model and vice-versa. Basically I think the problem is people want to use the "forms over data" pattern from VB 6 and WinForms. That would be OK, except they also want to do this MVVM thing so they end up with bizare hybrids.
I agree. Greg Young calls this out in his cqrs video. Its long, but worth watching. http://cqrsinfo.com/video/ 
I screen scrape using PHP, and have done a little bit using C# .NET 4.0 Regex isn't designed for HTML. Get a HTML parsing library. PHP has xpath, I've heard good things about Agility HTML Pack or whatever it is called for .NET .
Thanks!
You can use the WinForms browser control in a pinch... it's slow and clunky, but it works when you don't have the time (or inclination) to do it "the right way."
[Here](http://msdn.microsoft.com/en-us/library/t7w4afa2\(v=vs.90\).aspx) is microsoft's C# webcrawler sample app. I've never looked at it so I have no idea if it would work for your needs. What you really need is something like [libcurl](http://curl.haxx.se/)
This is the [HTML Agility Pack](http://htmlagilitypack.codeplex.com/) he mentioned. I actually work for a web hosting company myself and we've used for exactly your purposes.
The best HTML parser is a browser. Make your scraper a service that gets called from a webapp via Ajax, load the pages to scrape into the DOM and use jquery to parse then send the data back to your server.
What a great idea!
Deploying web applications to Azure takes quite a while (Seriously eating into your 15 minutes there). Also, this article does not mention session state. If your web app uses session state, but you are not yet storing sessions in SQL Server, then sessions won't be shared across instances.
Excellent, thanks for the link.
Appreciate all the tips everyone, this gives us a lot to work with.
Thanks, that fulfills my quota of great ideas for the year :)
Oh and use ServerCyde.com to build it without any server code at all.
I hope you mean ASP.NET, because very few people are willing to pay for classic asp work.
indeed - in fact it didn't even cross mind. Asp.NET, JQuery, SQL - etc.
Where are you from? I know some places that are local to me that are looking for contractors.
I'm in Denver, thanks. 
You can try [CyberCoders](http://www.cybercoders.com/) I've had some luck with them in the past.
Au contraire, I get paid nearly double to work on legacy, classic asp sites. Nobody does that shit anymore, so it's hard to find experienced developers willing to work on it. ;)