Is there any possibility of upgrading or otherwise bringing new technologies to bear on your current projects? A bulk of the newer stuff (async, tasks, etc.) can combine nicely with older front ends, and mvc and web forms can live side-by-side with a little bit of work. If not, I'd suggest either side projects (be sure to be clear and open to avoid any legal issues with your current employers) or throwing your resume out there - depending on your priorities! Job safety for a person with a family is vastly more important than for someone unattached! :) Good luck!
so my roommate is an engineer without any programming knowledge. he was working on a small C# application which retrieved data from a database and needed my help- apparently, he had used some sort of weird database access tools built-in to .NET. i looked at his code and was like, "wtf is this shit? no one does this." but nicer.
Honestly, unless you are looking to make serious modifications to the guts of how your Kbase works you might be better off with another platform for this solution. What are you really trying to achieve here besides some technical needs? What is your budget for software licenses if any? P.S. Interesting, looked at KBPublisher, the UI and concepts it uses are very similar to Oracle's WebCenter Interaction suite (aka AquaLogic, aka Plumtree) which is actually a good thing if it gets into to the ballpark of functionality that product has. 
Yeah who needs ease of use and rapid deployment anyway? Let's all go back to binary!
Microsoft doesn't make tools just for professional software engineers. It also makes tools for normal people who just need something done now. And honestly, how the hell do you expect to demonstrate something if you hide it behind a half-dozen abstraction layers? By the time you've written your 3rd abstract interface for the DI framework the reader will have forgotten why he was reading the article.
Of god, another true believer. Which church of design pattern do you pray to? I know at least six incompatible versions of MVVM alone. 
wait. you want to resize other windows? You are crossing the line into malware. You can't control other applications. This sounds like one of the questions [Raymond Chen](http://blogs.msdn.com/b/oldnewthing/) gets asked. Even the evolution of it. Went from listing apps to , well i really want to resize them. What is the purpose of the app?
I don't think this will fit your needs as this is a very basic solution but we used this FAQ toolkit from MSDN - http://archive.msdn.microsoft.com/toolkitfaqs - to build our internal knowledge base. We just used that as our starting point and built off of it as we needed to. Might be worth a look, if you are able to do the same. 
1. You cannot entirely eliminate code-behind without cramming all of your view logic into the view-model, thus losing the separation of concerns you were trying to achieve. It is really, really easy to accidentally turn a view-model into a general dumping ground. I've started to abandon the MVVM pattern for that reason. 2. No design pattern should be religiously adhered to. Design patterns are examples of ways to solve a problem, but they are not always the best way for a given situation. 3. Creating a full ViewModel for a one-off screen, especially a dialog, is simply retarded. 
I am not sure about tutorials, but, the process is really straight forward. Actually, the most annoying part is packaging them up for installation. I've found that the thing to do is just make a normal web app in visual studio and then reference the DotNetNuke dll. All you have to do is add user controls and instead of inheriting System.Web.UI.UserControl or whatever is the default, you just import DotNetNuke and inherit PortalModuleBase. When you compile, you just end up packaging up your ascx file and your dll. That's all there is to it... everything else is just standard asp.net.
That's the point, you don't need or want to know
Menus, wizards and code generation; haven't realized how much of it we use as .net developers until this post.
Agreed, I try to stay away from it myself. Sure the wizard will get you started quickly, but then you have to spend so much time learning how the frameworks actually work. Learning from the ground up is much more satisfying (and a lot less frustrating) for me.
I suppose it depends on whether or not your DI infrastructure is capable of graphing out the transitive dependencies. A merely competent container can dump a list of registrations. A good container can dump the graph. A better container can dump the graph without even instantiating any of the registered components. Find or build one that can do this and you'll be free of DI's only real downside. Having done it recently, building one is well within reach. Heck, I did it in spare time here and there between tasks (we are in fix mode before release at work.)
I work on user interfaces that are a bit more complex than the simple CRUD-style forms that can be handled purely with data binding.
&gt; If you're doing it right, you don't need view logic. No shit, but they're already religiously adhering to one that sucks. To the extent that other patterns are applied is a workaround. It wouldn't be retarded if it were part of a streamlined workflow supported by the IDE. The pattern be praised! The pattern be praised! MVVM solves everything!
[Part One](http://blogs.msdn.com/b/ericlippert/archive/2012/03/26/null-is-not-false.aspx) and [Part Two](http://blogs.msdn.com/b/ericlippert/archive/2012/04/12/null-is-not-false-part-two.aspx)
You can check this slide for an intro for firebird http://www.slideshare.net/mindthebird/why-firebird-fact-for-decision-makers
Haven't checked out SharpDevelop for years; must give it another look. 
It should be obvious, but MS have been completely quiet on the matter (all talk is about the Web and Metro SKUs). Doesn't inspire much confidence.
The current beta of VS Express for Windows 8 doesn't run on Windows 7. I strongly suspect the same to happen with the release version.
at least the comments were amusing.
How is the Telerik product?
I recommend subscribing to the DZone RSS feed. Over the last couple of years I've slowly been adding various feeds which cover the area's I'm interested in, adding various blogs which I recognise as being consistently decent. So now I get 100+ blog posts a day to read whilst I wait for compilation to complete, or if I just need a time-out. I also use Evernote to 'save' articles I think are decent or of interest, which averages out at 1 in 10. I've probably got 2000+ articles now covering unit testing to project management and everything in-between. There are also a lot of eBooks/PDF's out there which I harvest into Evernote/Dropbox so I can read them at my leisure on a tablet. A lot of the topics I subscribe to I don't necessarily use in my day job, like Node.js or Google Go, but sometimes just being aware of a technology and it's capabilities has been useful. I also find it useful as a way of measuring what languages/platforms are gaining in popularity, i.e. the rise of Javascript/HTML5 over the last twelve months as iOS/Android development seems to have hit a tipping point.
Can't make it work. ???? TestInput/EBOOT.BIN ???? ms/EmulatorConfig.xml System.IO.FileNotFoundException: Could not find file 'C:\...\soywiz-cspspemu-c1cc651\ms\EmulatorConfig.xml'. File name: 'C:\...\soywiz-cspspemu-c1cc651\ms\EmulatorConfig.xml' at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions o ptions, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) at System.IO.File.OpenRead(String path) at CSPspEmu.Core.PspStoredConfig.Load() in C:\Users\Sasha\Desktop\soywiz-cspspemu-c1cc651\soywiz-cspspemu-c1cc651\CSPspEmu.Core\PspStoredConfig.cs:line 98 
Just looking at EntitySpaces, it loses the price comparison against EF &amp; nHibernate.
There was a poll on PluralSight recently asking which .NET ORM readers preferred. [Here](http://blog.pluralsight.com/2012/04/18/and-the-winner-is-our-net-orm-poll-results/) are the results.
We use EF 4. It has its issues, but gets things done quickly AND maintainably. 
NHibernate, I like the fact I can use more than one query syntax (Linq, Creteria, HQL), we use LINQ for 90% of our stuff but for the parts that it fails at it's nice to be able to sue the same tool to run the querys. I also like the second level cache that comes out of the box and the NHib Pro tool.
It's less amazing when you spin out complex reports that aren't tied to how you present data in your main application. Not saying that there's no place for NoSQL K/V stores, am saying that neither NoSQL nor RDBMSes are golden hammers.
Fluent NHibernate Linq-To-SQL (through PLINQO) NetTiers
[Dapper](http://code.google.com/p/dapper-dot-net/) Screw frameworks and hiding the persistence layer. I want simple SQL and quick translation. 
Only if your time is free. Comparing EntitySpaces to either EF or NHibernate is a bit of a joke to be honest. Granted, they're all capable tools, but ES is lightning fast greased pig that goes virtually anywhere. Edit: Hmm.. I lied. EF really isn't nearly as capable actually. And do you really want a ORM that Microsoft can sunset on you at any time? Linq2SQL anyone? 
I'm in the same boat as use, but with Dapper instead of PetaPoco.
I don't. I use SQL to project my data into exactly the right shape for the particular page or window I'm working on and a simple reflection-based mapper to copy the data from the data reader into the objects. Aside from dynamic queries, I find no advantage in using ORMs. If I'm not fighting with it to generate queries with decent performance then I'm struggling to make the classes the ORM defines to not look like crap spit out by a high school student. Seriously, it is like the guys who invented ORMs never even heard of immutable objects, let along FXCop.
I wanted to use NHibernate for a current project, but getting it to deal on-the-fly with new databases is a royal pain. I am going to have to go commando unless I find a framework that accepts database plugins at startup.
Any company can sunset their ORM at any time. I'm slightly more confident that EF is a first-class product vs. Linq2Sql, which always seemed like more a hack. Disclaimer: I don't use any ORMs, so I can't opine on performance or features (or the lack thereof).
Not exactly. Both EntitySpaces and Telerik sell their ORMs and those are first class products to them that get intensive support, updates, and other TLC. Compare that to the level of attention Entity Framework gets inside the mammoth Microsoft and you'll see that it's not a huge concern for them. It doesn't generate revenue for them and there isn't a lot of reason to keep it around (apart from potential customer outrage) when the next cool idea comes around and they want to build it into Visual Studio and sell more copies of that rather than continuing to support their tried and true solution of yesterday. Don't get me wrong, I'm not trying to say that one shouldn't use anything by Microsoft or that they'll eventually abandon their technologies in all cases, but I am saying that one should use the best tools available. EF is a reasonable choice for many projects, but there are many better choices out there if you look at the real differences. I've been in a position to suffer many times just because of the choice of ORM/data layer. It's an extremely important decision on nearly every project I've been on. Given that, I like to ensure we're minimizing our long term pain as much as possible. EF is better than nothing, but not the best. Of course, the best choice for every project will vary, but I'm talking about the overall package in this context.
like ef 4.3 codefirst + migrations?
Was using SubSonic but moved to Entity Framework 4. Will probably be moving to a micro ORM like Dapper, Massive, PetaPoco though. 
I'm of the unpopular opinion that ADO.NET and stored procedures have no competition when it comes to control and performance. I've been on multiple projects where the team spends just as much time dicking with ORMs; when they could have just created their own entity classes and parsed the data themselves.
MSDTC and TransactionScopes work fine, although there are a couple of problems you can run into around the order in which an nhibernate session and transaction scope are created, but other than that they work fine (as it's the connection object that does all the enlisting)
Those results seem a bit weird. AutoMapper plays a very different role in a project than EF/NHibernate.
I wrote my own code generation app that uses generated, or custom SPs to produce libraries of business objects. I have a ton of flexibility but all of the code is easily debuggable. Also of high importance, I'm not tied into any 1 BO / Table crap.
We use EF 4.3/5 code first w/ migrations when we have to go relational - you gotta try the migrations, they are fantastic I never want to use NH again, however there is one thing from NH I miss in EF: custom user types, IUserType basically
In that scenario I'd say you've picked the wrong DB, no sense storing relational data in a non relation db, just makes what you've said true.
I use nHibernate with Fluent.nHibernate and some custom extensions (CreateStoredProcedureQuery and some custom reflector insted of ResultTransformer). I usually don't do strictly ORM - what I do I do queries to Models. I only load ORM 'objects' just for update. nHibernate let's me do all of that and more, it's 100% configurable, without any generated code. I write it all, so it works as it should. 
I use Dapper+stored procs exclusively now. You get the speed of raw SQL without having to write boilerplate data readers over and over again
Isn't that the only thing TFS is good for? Serious question, I always heard TFS was awful compared to other source control tools.
Pick a better ORM. That's kind of the purpose of this thread. Developers have to choose their problems. In this case, you can go with the overhead of getting an ORM initially set up, or you can take the issues caused by maintaining a manually-written mapping layer. Small and fixed data models don't benefit as much from an ORM, since a human can write and verify that small body of code once and never have to think about it again. This approach doesn't scale well to large data models that frequently migrate, though, where the ORM's complexity is miniscule in comparison with the problem of updating and validating all that manual SQL and mapping code when dozens of tables changed schemas in complex ways. So there are lots of reasons to go with either approach in specific scenarios. However, a lot of ADO.NET dead-enders (on projects where ORMs are completely appropriate) appear to have a Not Invented Here worldview on the topic. Worse, they believe that writing this kind of boilerplate data access code *is* their job, when they should really put more time and effort into their actual problem domain. No one should find professional pride in writing the same code over and over.
Yes. Dapper is not a full featured CRUD ORM. It's more if a component to build an ORM on. Check out dapper.rainbow. http://nuget.org/packages/Dapper.Rainbow
We love it, but we're coming from Vault, which seriously sucked. Also, it seems to integrate with VS2010 the best, which is what sold us on it. The only real shortcoming is merging across branches by work item is a slightly manual process. It still works though. I just can't say 'merge this work item from Dev to Test'. I have to look up the changesets for the work item, then merge each of those individually. The database versioning tools seriously rock. Took some getting used to, but we love those. I'm not sure what else is out there that works as well with VS2010 and SqlServer. I'm sure there are great tools, but TFS works really well for us. 
Yeah, I'm trying to find a good way to have .NET database versionning. SVN really sucks for that... You're saying TFS rocks for it?
I guess that's true. But see [Sam Saffron's post about inserts using dapper](http://samsaffron.com/archive/2012/01/16/that-annoying-insert-problem-getting-data-into-the-db-using-dapper).
Well, maybe not rocks. It takes some getting used to. You have to work in VS instead of SQL Manager. You have to be disciplined about it. But it does work and provides some very powerful functionality (like refactor-renaming of things that will change and verify all references to that object, schema comparison functionality, and creating deploy scripts). But yeah, it works far, far better than SVN for that (And I really like SVN; not bashing it at all). I've heard good things about the RedGate SQL Management Studio TFS plugin that will auto-checkout objects for you so it behaves more like traditional source control for code. But we haven't used that here as it costs some $$. 
ORMs often have the same amount of boilerplate code, they just happen to be in the form of XML config files. Stuff like EF Code First is a little better, you still cannot do things like make some fields read-only. That's really important when you are trying to expose an Object Orientated API instead of just a DTO. 
on the dynamic/expando object stuff - it almost seems like an underrated part of .NET...anyone who thinks it's a toy is welcome to see my world right now - that combined with dynamic XAML and databinding makes for some fun stuff.
After perusing the code, I don't see this going anywhere. Which is sad because I think there is an open space for another nosql db written in .net that isn't ravendb.
I understand that. To be honest, I mostly abuse ORMs for data mapping anyway. On occasion, the provided query language can be insanely useful as well. Usually though, there is a limitation to how much you can do with that before the overhead kills you and you have to drop to sprocs anyway. I'm curious though - what do you mean by this statement? &gt; it is like the guys who invented ORMs never even heard of immutable objects, let along FXCop. Most of the ORM authors I've seen are brilliant programmers, so I don't know what you're getting at here. Care to enlighten us?
Not to be sarcastic, but I don't find performance issues stemming from synchronization issues due to accessing a collection from multiple threads to be particularly shocking. Actually, it should be expected, and I wouldn't fault any ORM for that issue. Without knowing more about the particular issue, it smells like a case of premature optimization. Simply re-querying the database and tuning it as appropriate would likely have performed much better. Granted, one should reduce the number of round-trips to the database as much as possible, but assuming that a requery would be absolutely necessary, then a full fledged RDBMS is almost always going to be better at that than a non-trivial in-memory object graph query shared between threads; latency issues in a tight loop notwithstanding.
It wasn't premature optimisation, it actually improved performance a fair bit. However you are right, it wasn't the ORM's fault we were mistreating it. We should have used a proper threadsafe caching technology. But it was the "cheapest" performance fix we could think of at the time. I probably should have pointed out the main pain point was really the external tool and versioning hell it was creating for us. As the tool didn't nicely support multiple versions and we have many many projects that all used slightly different versions over time and no one was paying to upgrade them (what ain't broke....).
Essentially, in MVVM, the view and model are more tightly coupled via databinding. From wikipedia: &gt;The view model of MVVM is a value converter meaning that the view model is responsible for exposing the data objects from the model in such a way that those objects are easily managed and consumed.
In most ORMs you would be able to use an object graph driven from foreign keys such that you would have a User =&gt; Test (you didn't mention this, but it's implied) =&gt; Question =&gt; Answer(s) navigation possible. Even in EF, you can return a shaped dataset such that only the columns you need are available. Also in your example, you would like to assume that the ORM would be sensitive to the needs of the domain and somehow have read-only fields be read-only etc. That IS possible, but usually only at an entity level. So, for example, we might say the primary key field is read-only to the ORM in order to allow an identity or sequence based column to take up the job instead. And that's just the point: an ORM is entity centric and your designs would need to shift accordingly to use them. Now, if you're using a layered architecture, you can get the same semantics out of your business layer. So, for example, you could have an UpdateAnswer() method and let the method signature speak to the developer instead. If you want to make it really crisp, you could have that method talk to a stored proc. The ORM tool can take care of the overhead of calling that as well so you're not manually writing code to marshal data into parameters, etc. Concerning things like the State class, there are multiple ways to cache something like that. It's a much bigger discussion than just about ORMs. That said, it's not necessarily the job of the ORM to do that. In your example, it would be pretty safe to stuff the States singleton into memory and make it read-only. Choosing the right kind of collection to stuff it into is much more important in that situation. And I haven't tried in a while, but I'm pretty sure I could find a feature or two in EntitySpaces or Telerik's product to automate this; heck maybe even in EF, but let's not get crazy here. :) Anyway, there are multiple pros and cons for using ORMs; they're not silver bullets after all. They just save a lot of code and that's what I like about them. They even make it possible for a single source base to be retargetable to different database back-ends. Yes, I really have done that before and it is possible. The ORM didn't make it 'free' per se, but it made it a week or two of effort instead of months. What I don't like is when developers load up huge unnecessary collections of objects, abuse lazy initialization, don't look into the need for new indexes, don't normalize properly, etc. but those are all mistakes they make anyway if they don't know any better. ORMs don't make those guys more effective. They just screw up faster (and hopefully learn faster) when they have an ORM available. Take care!
&gt; And that's just the point: an ORM is entity centric and your designs would need to shift accordingly to use them. And that's the problem. If your intention is to build a robust API then you have to use a wide variety of styles, not just entities. And if you have a really locked down API, one that offers downstream developers exactly what they need, no more, no less, then you will very rarely be able to use an entity. 
Multiple projects, multiple versions of the tool. Only 1 could be installed at a time, but you needed to use the one that was used to originally generate the code for the project.
it wasn't a dll, it was an installed Exe + other stuff for generating code. But didn't live side by side happily (potentially some of it's dependencies were gac'd, I can't remember).
Well, they do work now. Like any framework though, they require some adjustments. Are there things I hate about web forms, MVC, and / or other UI frameworks? Yes, plenty! Would I work without them? Nope. That would be silly at this point. I see ORMs in the same light.
Sweet. Thanks.
&gt;So, in both MVC and MVVM, the views are templates that consumes data available from the controller/viewmodel and the model. Each view is a template which consumes data available blah blah and the model itself. ftfy 
Look into Redis. It's incredible. There is no native Windows version (MS is working on one) but you can find a couple open source ports that allow it to work on Windows. 
About fucking time. Considering all the hate for VSS, I can't believe Microsoft couldn't come up with better features/improvements for TFS sooner. Up until 2010, it was absolute garbage. 
Sorry, I meant more tightly coupled than MVC. That is, a viewmodel doesn't usually abstract the model as much as a controller would.
I call it tricycle because it doesn't go very fast, people will probably laugh at you for using it, but the goal is for it to be super simple to use. How did I do? The idea being that it will be pygame or love2d for .net Hello world: class Program { public static void Main(string[] args) { using (var w = new Tricycle.GameWindow(640,480)) { while(w.IsRunning) { w.Clear(System.Drawing.Color.MintCream); w.DrawString(0,0,System.Drawing.Color.Chocolate, "Hello World!"); w.Update(); if(w.Keyboard[System.Windows.Forms.Keys.Escape]) break; } } } }
Why use it over XNA? Just curious.
It's simpler, and uses concepts most .net developers are already familiar with, such as bitmaps and system fonts. XNA is certainly a better platform, but the aim here is for simplicity for .net developers already familiar with winforms. 
Irrelevant unless you are scaffolding against a database. Use what you are experienced with. Just make sure that it's a different layer and that you are coding against an abstraction and not an implementation. That way, you can update your data layer when necessary (new ORM every 3-4 years) and you can test without hitting the database. That's it.
I also use view models in my ASP.net MVC projects. With the automatic model binding it's pretty convenient to use a view model as a parameter to my controller actions.
You might be well-served migrating your current framework to XNA. See if you can keep the interface the same, but use XNA as a backend instead of WinForms.
http://dl.dropbox.com/u/2126236/Breakout.zip here's a demo of it in action. more of a demo than a game, but still pretty responsive for being all done in software.
Well, remember, unlike OpenGL or DirectX, this is all done in pure software. At the very last stage, you have 15,000 game objects. Each one is getting copied to the back buffer each frame. Keep in mind that the blits are also alpha blended. 
Oh? How's it working for you? I like it, for what little front end coding I do these days. It took a bit of convincing to get everyone to buy into them, however; it does add another layer into the mix.
So, this subreddit is going to become a place for advertising now? Or did I just happen to miss a way to see this material without paying $28.00?
You lost me at "$28 Buy Now".
I'm about to start taking a look to the code so I cannot have any opinion about but... why do you think that this project is already in a dead end?
Great blog Craig!
Google could've and should've gone C# instead of Java for Android. It's so much more pleasant a language to write applications in.
I've been using this for a while now, and it's been great.
downloading...
And the PlayStation. 
The point of acquiring startups with an existing codebase is not to throw away that entire codebase.
I'm a C# developer who's been slaving away for months in XCode working on an app. XCode/Objective C is great and all, but I would have been finished a long time ago if I had known I could have done this in C#! Oh well, at least I'll have another bullet point for my resume.
It's not the only point. Some technology acquisitions are for killing the competition, some acquisitions are for integrating the acquired technology to your existing products, but the overarching premise remains: Once you've acquired it, it yours to do however you please
No worries you can still use all of the objC API from monotouch, for some parts of the API the C# classes are a thin wrappers around objC classes. So what ever you've learned so far is applicable to monotouch as well.
Sure, I'll come on down as soon as you move Austin to a state that isn't insane. I'm not moving my kids to a state that could put them in jail kids for skipping class or talking back to a teacher. You want more senior programmers, talk to your state legislators.
Or perhaps ask if you could work remotely. I would but internet connectivity is so bad where I live I'm pretty sure it'd reflect badly if I attempted to work for someone remotely.
can you post the solution please?
Austin is actually an incredibly liberal place. The people that live there are in the middle of a vast ocean of crazy...it's purify's and distills the liberal.
mad that it works, or mad that it works better than java?
Hi, yes with a streamwriter it should work. But just typing it in a clean aspx doesnt work. Try in a browser and smclick view source. Also works with div inside p.
I live in Finland and I just saw an article about the same issue (the article was about european countries). There just isn't enough reason to move because each company (at least if you look monster.com or other big job sites) looks the same. Job description is same, salary is the same and benefits are the same. The situation inside EU is a bit better because it is easy to move between countries (you don't need visa, work permit). I believe most US based companies do not offer visas. I think in the next 5-10 years we are going to see the change. First of all companies have to hire people directly instead of hoping someone to read their job ad and apply. Secondly US based companies are going to offer more visas and thirdly working remotely is going to increase. There are already companies who state in the job ad: Location: NY (Or anywhere).
Indeed, the second sprint has a WP that doesn't feel like a flimsy piece of plastic I'm all over that. I'd kill for a CDMA lumia.
I agree with you 100 times on this. It seems like the MS .NET ecosystem is designed around giving developers what they want while Oracle's vision of java is a means to hurt the kid who made fun of him 20 years ago.
That's a pretty good point, but even bad translation tools would probably cover &gt;80% of the work. Decisions like this are very hard. And mono was not at all in the state it is now. I'm just saying you aren't throwing away the entire codebase to go from Java to "Java 2" (C#). It isn't even that hard to translate the code by hand.
I haven't done one yet but if you haven't started [here](http://msdn.microsoft.com/en-us/library/dd885119.aspx) you likely should. The information appears fairly straight forward. Integrating with VS should not be a huge hurdle. The file handlers for the OBJ format will likely be more challenging unless you already have a .NET or Win32 library that does the work. 
Not a problem. I already looked at the link you posted, earlier today, and actually played around with trying to find where to add the hook. I've written an obj visualizer before, it won't be a problem to add in once I find how to place a WPF control inside a document tab :p
Generally what you put into the ASPX page will be what gets rendered out in the browser. A lot of browsers try to auto correct what they see as bad html though. Make the request via fiddler and look at the response body.
North Texas is pretty safe.
Except for the swath of big hair conservatives. The capitol is there after all.
I actually passed this on to our HR dept. We'll see what comes of it.
Hi the link to vspackage is the firet step. Start the project wizard snd Then choose custom editor. The sample is a bit complex (rich text editor, cOmmands undo etc) but you'll should get it up and running quickly. There are a bunch of magic guids and registry locations for rfiletype registration especially if dealing with xml files. We have built several vspackages for 2008/2010, so go ahead and ask.
You might have run across [this](http://msdn.microsoft.com/en-us/library/dd885242.aspx) already. If not you might find it useful though I doubt you will find a direct example anywhere. However if you do....I could use it. I am going to be working on some VS extensions this summer.
Partial or full? I'd rather you try and learn. Work to it piece by piece and post your code. Eh, I give up :P. It was fun to do. [Full solution](http://pastebin.com/c0Wwbr4t).
Yea, you are correct. I had meant PlayStation handheld devices but I could've been more clear in my statement. They haven't gotten very much traction but it's still amazing how many platforms Mono is able to support.
Microsoft isn't willing to talk about their long term plans for the express editions.
Perhaps your browser is correcting it.
These are the lines that are throwing the errors "Dim commandBuilder As New OleDb.OleDbCommandBuilder(StudentsTableAdapter)" and StudentsTableAdapter.Update(Me.student_data_DataSet, "students") both are throwing the same error. I took some quick screen shots to show : http://imgur.com/a/dddHP
I looked briefly at this last night, but didn't have the time to really dig into it. Barring more specific help that might emerge on here, I think if I were you, I would look into finding a good tutorial and walking through that. There are many ways to do data access in .NET, so try to find one that's intuitive and productive at the same time. If you want to hit a tutorial that does things from the level of datasets like you're doing now, then something like would probably be good. That's a fairly low level technique these days and most projects I've been on only use that technique when they're forced too, but it's completely valid. http://www.homeandlearn.co.uk/NET/nets12p1.html If you would like to get a little higher level and starting using an object relational mapping tool, then there are some great Entity Framework tutorials out there too. There's a lot of other VB.NET resources listed here as well: http://stackoverflow.com/questions/2041715/vb-net-tutorial-for-beginners-especially-for-database Sorry, I don't have time to jump in and just fix it, but I guess fighting your own battles is just part of the game. :)
Did you try 'Me.StudentsTableAdapter' when dimming the commandBuilder?
An out of memory crash like that generally indicates a loop somewhere where you keep adding to the stack. Is the actual error an out of memory error or a stack overflow exception? 
You're not disposing the previous Picture.Image each time around, which is more than likely keeping it around in memory even after you replace the instance.
I don't think you have a memory leak. Most likely you have a fragmented Large Object Heap because you are shifting a lot of memory around here: Picture.Image = Image.Clone Try to come up with a solution that doesn't constantly create cloned images in memory. Maybe you could draw over the top of a fixed image, in another layer (with transparency).
Ah, that was it! Thanks!
I haven't used vb6, but have used C#and .NET. I think that the error message is telling you that studentsTableAdapter isn't a OleDbDataAdapter. You don't give the definition for the studentsTableAdapter class, but I think that it should be derived from the OleDbDataAdapter base class. To do this add an Inherits line to your studentsTableAdapter class definition, like this: Class studentsTableAdapter Inherits OleDbDataAdapter etc... See http://msdn.microsoft.com/en-us/library/0wcc7ds7%28v=vs.90%29.aspx for more details.
ah, not what I meant at all, even though I understand that it sounded like that (as you've probably already have understood English isn't my primary language) what I meant is that the code I have now works, and doesn't eat alot of memory and isn't slow either. Now, this application is just for personal use, but of course I improve it if I can and know how to!
thank you
Picture.Image should be cleaned automatically by the garbage collector once there are no longer any references to it. I've found when dealing with images that the CLR sometimes doesn't call garbage collection fast enough. You can call it manually with GC.Collect();
Okay, then that must've been the problem in the first place. :)
You know how I knew; you apologized for your perfect English.
We're that obvious, are we? xD
Try specifying the right doctype.
This is the wrong way to handle this situation. This is exactly the reason IDisposable exists. When people force the GC to do stuff, 99.9% of the time it's the wrong answer to the problem (and won't give you very consistent results anyway).
Whether you go for safety or "something exciting" depends a lot on things you haven't talked about. What's your tolerance for risk? Can you go without substantial income until your business takes off? Do you have a solid business model in mind? Etc. etc. There's nothing wrong with a change of scenery, but I'm more inclined to line up my ducks and just know if I have a solid plan in mind. I don't think I would ask on here. Actually, if you have to ask on here, then maybe you should stick with regular employment. Sorry if that's harsh, but I think you'll see where I'm coming from if you think about it. And, why do you feel your age has much to do with how many years you'll be in the tech industry? Ageism is a problem sure because everyone thinks they want young dumb resources they can work to the bone, but there's plenty of demand out there either way right now and if you do start your own business, then you wipe out the issue altogether for the most part. 
http://emotibot.net/pix/3843.gif
Are you using source control? It could be that someone modified the project. Once you pull the latest changes all it really does is put the updated files in the directory, then visual studio will detect that the file on disk is different then the file it has opened.
Source control? I can get that one just by adding a file to a project that's shared across solutions when I have both solutions open in separate VS instances. *edit: Okay so that's a little more convoluted that it seemed at first.*
I found SQL Accessories' Compare tool to be my favorite so far.
Funny thing about Louisville, we have speed school right down the street with a great co-op program. You grab those guys/girls before they leave town and you've made a great investment. I've also seen companies like HCHB, QSR and Samtec go really lax on their dress codes and provide perks to attract talent. Human capital is just as important as anything you sell. I've talked to some of our contractors who work out of Chicago, and they have to fight keep talent by providing the best environments possible.
It happens when something other than Visual Studio modifies a file which Visual Studio has open. This could be changes from your source control system, merge tool, the file being open in another editor, etc. Other apps do this as well when they ask if you want to load external changes made to an open file (e.g. Notepad++). Unfortunately, the counter-intuitive way this is worded means that Discard is "yes reload the changes" and Overwrite is "no just leave it as is."
Not just any file - I'm pretty sure this only happens when a project (.csproj) or solution (.sln) file is modified outside VS while being open.
When I do game development, XML Serialization becomes quite handy before I actually get to the point where I can work on a level editor. Being able to generate a template from code, then copy and paste the heck out of it, making tweaks here and there, is the next best thing to having an actual level editor.
ftr, i do actually understand why this dialog occurs. it's just a ridiculously designed dialog /thatsthejoke.gif
Good writeup for those who found their way to C# without going through C/C++. While this is not necessary knowledge to build things in C#, it's tremendously helpful to understand what the CLR is doing on your behalf.
Likewise. I only have "Add SQL Server", "Schema Compare", and "Transact-SQL Editor". The actual SQL Server Object Explorer is pretty sexy though. I thought it was crappy at first, because I couldn't right click "indexes" in the browser and add a new one. Once you go in to design mode, you can add them there. It's a pretty big departure from SQL Server Management Studio.
I hear ya. Allocating less (reusing more, etc.) and disposing properly is definitely the right path to take. But tell that to the app at my work. :) It supports a common user action that (to switch from one data set to another) needs to tear down one gig worth of data and then bring up a different gig worth of data. You can imagine what happens when you try that without a forced collection between the two. :) EDIT: And yes, it is disposing things correctly. :D
Yes. You probably forgot to install the MSVC runtime.
Are you sure about that? Since C# and VB are compiled to an IL it should be theoretically possible to run them on any platform, whilst a proper interpreter exists (which you may assume).
Did you output a release or debug build?
IL already has system-dependent incompatibilities. WPF != Silerlight (web) != Silverlight (phone) All compile to IL, but none are compatible with each other. I've learned from hard lessons to assume incompatibility unless MS states otherwise. When there is compatibility they bring it up every chance they can.
AWESOME CAPS ARE AWESOME HELP
Why don't we have these OOTB?
Bzzt wrong. Lots of the non-UI APIs have been changed or removed as well including anything that could potentially block a thread like reading and writing files.
It's the other way around you have to worry about. Will VS11 apps work in various versions of windows? Microsoft goes to great pain to make sure old apps work in the new Windows. Not only will VS 2010 apps work, Visual C++ 1.0 will work too.
You may also want to find out what you touching the content does to their relationship with the original vendor. It's not uncommon for any warrantee agreement for fixing bugs will be null and void if another vendor touches the site.
I moved to Dallas from Phx, loving it. the Tech market is SOLID
Why would you be working on it if you have no idea what you are doing....?
I mean I just broke into the industry out of college and I've already seen this all over the place. Surprised you haven't. o.o
Hmm I have but by people who can already develop in various disciplines and languages. For example, I don't do .net services. But.. I do code in .net in various project types and disciplines. If I was asked to create a service, it wouldn't be much of a learning curve at all. The OP, and I might be wrong, but I get the feeling, doesent know .net... At all.
MSDN is all you need for .net. Because of how thorough MSDN is it honestly makes .net one of the most trivial things to learn, which is good because that bitch is biiiiig.
Not always compiled but probably. Here's hoping he can get the latest source for it though. Had too much drama in the past with out of date source code, recompiling and losing functionality and gaining bugs &gt;_&lt;
I've always found it kind of obvious honestly, and I'm fresh out of college. I assume he should be even better at that since he holds a job. Right?
But you have studied ... not just "oh IAMA .net developer today!" if you get where im coming from?
I wouldn't call an Associate's degree studying haha. I'm doing my Bachelor's right now and hoping for more indepth content but I'm skeptical. I dunno. I've taught myself C# and Android Development as well as some basic stuff like HTML/Javascript/CSS and am in the process of applying AJAX/JQuery. Just a matter of google + reading + application. I dunno. Maybe I'm different. I just always kind of assumed this was commonplace in this area of study since I've run into it many times in only 6 months of working.
Didn't even know this was a thing. Nifty. I dunno. We have the internet. Sure, it's full of shit but there's some damn good info out there. Just gotta search for it. After going for college and seeing how much this "Education" actually costs, I said fuck it and found my own education haha. Too bad it doesn't give me that damn piece of paper. But if you have the passion and want to be successful in this field, you almost have to be one, what with all the changes and additions that occur. You probably know this site, but TED Talks are a good brain-meal!
 class Exchange { public string Bic { get; set; } public string Name { get; set; } } abstract class SecuritySimple { public string Description { get; set; } public Exchange Exchange { get; set; } } } class Security : SecuritySimple { public string Isin { get; set; } } class Stock : Security { } class Bond : Security { public DateTime Expiry { get; set; } } class Trade { public decimal Price { get; set; } public decimal Quantity { get; set; } public SecuritySimple SimpleSecurity { get; set; } } class Option : SecuritySimple { public bool Call { get; set; } public decimal LotSize { get; set; } public DateTime Maturity { get; set; } public decimal StrikePrice { get; set; } } ... //very few Security security = (Security) SimpleSecurity; 
Log4net. Never let me down. Ever. 
http://nlog-project.org/
Unless I missed something...yet another delegate/lambda article that misses the best part: you can make a function that returns other functions. The following may be slightly wrong in syntax since I haven't used it recently, but here's the basic idea. delegate string soldierAction(string name) function soldierAction makeSoldier(string act) { return delegate(string name) { return name + ", " + act; } } So: x = makeSoldier("throw grenade"); y = x("Jim") Now y holds "Jim, throw grenade" I don't use this that often but every now and then it's amazingly useful.
same
I work mainly with Sharepoint, so just write to the ULS log there. 
I think I remember the kick off post that this is based on! I had signed up on code plex with the intent of being a contributor but never got enough free time to really get in to it. I'm glad this is coming together though! I'm going to install this in my work machine on Monday and give it a whirl. Good job! 
Hi Mechakoopa, thanks for checking out Sando! It's very cool to hear that a real developer outside of my team is going to be trying Sando. Hope you enjoy. If you run into any problems let me know and we'll get right on it. 
Log4net but I hear good things about NLog
My point was that I almost never use “Find in Files”. And I would say that Resharper does have search UI, as long as you're searching for classes/members, which is what I do quite often.
Freedoodle brings up a good point that I had forgotten... sometimes there isn't a clear structural navigation path between the code you're looking at and the code you want to find. In this case searching makes more sense than navigation, IMO. Thanks for the comment Freedoodle!
I use this too, especially since other 3rd party apps use different logging systems this allows me use what I like (which is nlog).
Something I adapted for my own uses. System.IO.StreamWriter sw = System.IO.File.AppendText("app.log"); try { string logLine = System.String.Format("{0:G}: {1}", System.DateTime.Now, msg); sw.WriteLine(logLine); } finally { sw.Close(); }
I'm searching, but I'm not getting any results. Literally, zero results. Nothing is coming up in the Code Snippet window. I thought it might be indexing the solution still, but there's no process activity on devenv.exe Then I thought maybe it only indexes files that have been opened, so I tried searching for a class that I knew was in an open file, and still nothing.
http://tekpub.com/ has been highly recommended to me.
Wrox P2P Professional ASP.Net MVC3 is a top notch book. Read it cover to cover (it's quite concise) and you'll be ready to go.
The MS hands-on MVC 3.0 tutorial is actually quite good: http://www.asp.net/mvc/tutorials/getting-started-with-aspnet-mvc3/cs/intro-to-aspnet-mvc-3 Its descended from the famed NerdDinner tutorial from MVC1, which was also an excellent learning resource.
I don't think you'll get better training/knowledge of the subject then rolling up your sleeves and build something with the technology and struggle through all its rough spots. 
[TekPub](www.tekpub.com) and [PluralSight](http://www.pluralsight.com) are both excellent, for-pay ASP.Net MVC resources. It's way out of date now, but I learned MVC from [this](http://www.amazon.com/Professional-ASP-NET-Wrox-Programmer-ebook/dp/B002JMV6RI/ref=sr_1_14?ie=UTF8&amp;qid=1337033733&amp;sr=8-14). Also, since many folks using ASP.Net MVC also uses the Entity Framework, I would recommend [Julie Lerman's opus magnus](http://www.amazon.com/Programming-Entity-Framework-ebook/dp/B0043D2DS2/ref=sr_1_1?s=digital-text&amp;ie=UTF8&amp;qid=1337033874&amp;sr=1-1), which is first-rate.
Would would they make something better when the can put out shit and people will buy it anyway?
Hmmm... this is definitely not expected behavior! Sorry for that! What language are you using? Note that we only search and index C#, C, or C++. If you are working on an open source project please point me to it and I can do testing on my machine. Otherwise, here are a few things to try: * Open a different solution and see if Sando works on that one. * Let me know if there is anything special about your code that is not necessarily standard. My suspicion is that the parser is failing, and thus nothing is being sent to the indexer to index. * Let me know if your files use standard extensions (e.g., ".cs" or ".cpp" ). I'll try to figure this out for you and sorry for the issues! 
Unfortunately it's for the company I work for, so I can't exactly show you the code. It's mostly C# with a bit of legacy VB code (nobody touches that with a ten foot pole anyways unless they have a week to spare). On the other hand, it's also a monster of a solution, over 300 projects and in desperate need of refactoring. It tends to break indexing features on most visual studio extensions it touches, resharper included a lot of the time, so don't feel too bad ;) It works like a charm on some of our smaller projects, so I might download the source this weekend and try debugging it for you. (Anything to get out of helping people move this weekend!)
Tangentially related, is there any way to get Sando to return more than just the first ten results? Trying to refine a query to get something that might otherwise be result 11 or 12 is kind of frustrating.
Does anyone use MonoDevelop whilst developing on Windows? Is it possible to install Add-Ins (like TestDriven.Net) and Extensions (like Productivity Power Tools, NuGet and SpecFlow) for Visual Studio on MonoDevelop?
You can write add ins for it, but i don't think VS add ins are compatible. I use sharp-develop under windows 8 because I can't let go of winforms, but am thinking about trying monodevelop3 with the unity work that i've been doing lately.
&gt; Debugger Canvas is a new user experience for the debugger in Visual Studio Ultimate. I don't understand doing things like tying this and other tools (wasn't Pex Ultimate-only in VS2008?) to specific SKUs. I guess they have to justify the added expense (for places that don't just have MSDN site licenses) somehow. Code bubbles seemed kind of interesting when they were first shown off a while ago and I'd like to get to play with them.
I found them to be quite annoying... 
Something everybody gets wrong: reference types don't always get put on the heap, and value types don't always get put on the stack. Where they are allocated is completely irrelevant to their definition. The only important point is call and assignment semantics (that is, value types are copied when passed to a function, reference types aren't). There was an article a year or two back that went into more depth on this. It might have been by Raymond Chen. **EDIT:** I was wrong. It was Eric Lippert, and he has two blog posts ([1](http://blogs.msdn.com/b/ericlippert/archive/2009/04/27/the-stack-is-an-implementation-detail.aspx) and [2](http://blogs.msdn.com/b/ericlippert/archive/2010/09/30/the-truth-about-value-types.aspx)) talking about this.
This requires ultimate because it needs intellitrace, IIRC. While it isn't great that certain SKUs are required, they had to use the version with the features they needed. So, the real question is why is intellitrace only available in ultimate? 
Erase everything you had and use: public int IamaLazyFuck() { return 0; }
Since it is an explicit cast, you have to declare *some* type for `motherFucker`. However, you can add a `using motherFucker = System.Func&lt;int&gt;;` at the top. That way it doesn't have to be a *new* type.
I'm definitely going to be trying it out as well, starting tomorrow on a &gt; 20k LoC C# project I'm in the process of learning as well as anything else I touch.
I don't think either monodevelop (cross-platform) or shapdevelop (windows only) support VS addons. Sharpdevelop does have out of the box support for nuget, nunit, fxcop, stylecop etc. It's better than VC# express, but we've had issues with sharpdevelop being buggy. Right around ~4.0 it was really slow on intellisense updates but that appears fixed now.
I believe this would be the correct type hierarchy, but it does not get at the problem of the existing code. The problem is that you had old code like this: var frequency = Hashtable&lt;string,int&gt;(); foreach( var security in exchange.Data() ) { if( !frequency.HasKey([ security.Isin] ) { frequency[security.Isin] = 0; } frequency[security.Isin]++; } Or external apis with interfaces this: FetchReportFromProvider( security.Isid ); Not as easy as it looks.
I could not get this to work with Resharper. I really want to use it but it just won't work at all. 
I have used NLog on multiple projects and am quite happy with it. I definately reccomend it.
But there is no sidestep for that, with or without type hierarchies.
Exactly. Its a refactoring problem, not a modeling problem.
I use MonoDevelop with Unity especially if there is going to be a lot of small changes, possibly even to the project file. Visual Studio is great but when you start to add in awesome extensions the footprint grows noticeably.
This is a good tutorial to start using webapi within web forms apps. 
The core ideas are still the same. A solid foundation is important. Outside of the templating language, 95% is the same.
This is a quote from his earlier article &gt; Microsoft Fakes decouples Dependency Injection from unit testing, therefore changing the value proposition for Dependency Injection to instead be weighed on its own merits of whether or not it adds value to the problem domain in question. But I'm not sure how it reconciles with this from [Microsoft](http://msdn.microsoft.com/en-us/library/hh549175.aspx) &gt; In general, we recommend that you use stub types to isolate from dependencies within your codebase. You can do this by hiding the components behind interfaces. Shim types can be used to isolate from third-party components that do not provide a testable API.
Easily: Dependency Inversion != Dependency Injection != Container. Added: Inversion vs. injection aside for the moment, more than anything else I wish Microsoft would stop reinventing tools and terminology over and over again, particularly before the last rev gained any real traction. Next year I am sure they'll replace Fakes with something else. I'm never one to stand still but I'm also not one to wastefully chase the latest unfinished shiny thing that just replaced the last unfinished shiny thing.
I ditched Web Forms for MVC as soon as the first release candidate came out, so I may be a little biased here. Ultimately, I think the deciding point comes down to just how "close to the metal" you need to be for that particular web-app. If you need complete control over the markup that is being generated, then MVC will be the superior choice since very little HTML is being generated by the framework. What little is being generated can also generally be overridden by providing templates for what the framework *should* be rendering. If you are doing a lot of AJAX and REST stuff, MVC also tends to be simpler/easier than Web Forms . For example, if I want to create a REST service then I can simply create a new controller in my MVC project (or just use the new Web API that is being released in the next version of MVC) and just push JSON back and forth between the client and the server instead of writing and hosting a WCF service. If I'm doing a bunch of AJAX stuff, I can have the same controller actions that are returning HTML also return JSON to be consumed by the browser. Plus I can use jQuery on the client instead of Microsoft AJAX, which makes my life a little easier as well. Hope this helps a little, I can give some code examples when I have some free time as well if you want some more concrete examples.
Just as another choice, we've been using Ext.NET with great success. It's a .NET wrapper over and extends Ext JS. You can still use either MVC or web forms with it, but if you're using Ext JS for virtually everything, then the choice between those matters much less. Though, I haven't used it with MVC yet, so YMMV there. 
**MVC** is a design pattern, not a technology, it has been around since the dark ages of programming. It is just a seperation of the Model (classes/objects), View (presentation) and Controller (logic). **ASP.NET** is Microsoft .NET web platform. **ASP.NET MVC** is Microsofts implementation of MVC in their web platform. **ASP.NET WebForms** is the more 'classic' ASP.NET we are used to, consisting of controls, page lifecycles, code-behinds, etc. Not trying to be a snob, just wanted to clear that up so it is better understood. Now a lot of good points have been made here, so I will say my part: MVC is easier, faster, better for maintenance, more marketable, easier to separate, etc. I could go on and on. There is a reason almost every web technology out there implements some sort of MVC (Java Struts, Ruby on Rails, etc.) it is a great coding model and has been proven for years. I spent a good 6+ years doing professional WebForms, and since learning ASP.NET MVC, I have never looked back (besides some open-source maintenance stuff). Leaving page lifecycles in the dust alone is enough reason for me to never go back. The good thing, is that anything in your old code-behinds that isn't control-specific in WebForms is completely the same in MVC, so you don't have to relearn .NET, just how the MVC pattern works. I highly advise you to make the jump! Let me know if you have any specific questions, I would be happy to answer.
Well... that wasn't deep at all.
Nice sentiment, but like filing an issue in Microsoft connect, nothing is going to happen. VS11 is almost/already at RC. Release in its current form is imminent.
I hope we can get this metro phase behind us pretty fast. I don't like it on the desktop. Only for touchscreen it may be nice, but I'm still missing the possibility of placing 2 apps next to eachother
No! Lets boycott windows 8 and visual studio 11 Microsoft needs to know that it cannot keep treating customers like livestock
Yeah! Let me just quit my job! I didn't need to eat anyway!
EVERYONE SWITCH TO LINUX
Madness.
Yes, I recognized the erroneous subject title after I'd posted. Thank you for the clarification that might help anyone I mistakenly misled.
Understood, but by not providing a functional free product, they either push potential developers towards another platform or they invite piracy.
Sure, but how many match the quality of VS Express for developing in C#? While alternatives do exist, they often require far more setup and generally don't "feel" like VS.
It was my first project to make use of the MVP pattern. Once you and the rest of the team get used to the slightly different way of developing, it's actually a pleasure and everything is much cleaner and you can split up the tasks of view, model, presenter, data service, etc. to several team members. This way there's a lot of automatic knowledge sharing included as a bonus. You still have to be focused on how you make the presentation layer/view - every approach can get messy if you go for a quick fix. But I really like how you can use e.g. an ASCX file as the view, so no real need to build up the control tree server side - or fiddling around in an overridden Render-method (ugh!). I've been developing with SharePoint for almost 8 years (God bless), but this approach has really opened my eyes. I really hope I can continue on the MVP path in future projects.
That sucks. I use VC# Express almost every day and having such an immensely capable piece of software available for free was almost too good to be true. It saddens me that Microsoft is moving away from the ethos of building an ecosystem that allows people to Get Shit Done™. I don't see why Microsoft feels the need to cannibalize its desktop buisness in favor of Metro since it seems natural to me that the traditional mouse and keyboard desktop will continue to coexist alongside the newer touch-centric devices. At some point, a large part of the world needs to use a computer to do real work and a mouse and keyboard interface may seem stale, but it's a damned effective way to handle complex tasks.
interesting. first time i've heard about Firebird.
Hang on, isn't Express supposed to be an introduction to Windows/MS stack development? You've not explained why you think it's a bad decision so I can't really help with your problems. If the current MS paradigm is towards metro style apps then that's what MS will try to move developers towards. I can't blame them for it. VS Express exists only to get people hooked on the current strategy-du-jour. If you're getting something for free, then you're not the customer, you're the product. By relying on free dev tools from a company, you should expect to follow their current philosophy. If you don't like the direction of a company and it's free tools then move to another stack. If you really want to develop dot net console apps then stick with VS 2010 - which is an IDE that's second to none. 
No matter how hard they push, they cannot force success. Silverlight flopped on the web, lesson learned?
try asp.net Mac, it's completely different from the castle project's implementation. If you like c#, You'll dig asp.net Mvc. It's actually pretty lightweight and gets out of the way while still loosing you to be productive. Is model binder is simply amazing
Will this be extended to search XML files that are part of a solution?
As someone who hires a lot of .NET developers, I don't place any value in a certification. I don't give preference to one candidate over another. Something I do look for is a link to a Github account, any open source projects they work on, do they speak at code camps, user groups, participate in hackathons, etc. That speaks volumes more to me that you know how to apply your knowledge rather than read a book and take a test. Not saying they are worthless if you have the other bases covered, but I think there are more valuable ways to learn/apply knowledge of programming/.NET in general. When i talk to college students, experience trumps a GPA/certification any day of the week.
Most companies will only care about your certifications if it helps the company toward an MS partner competency. Since it's impossible to know ahead of time what certs a given company will care about, I'd say wait until you get a job somewhere before pursuing a cert. MS is making a big [marketing pitch to hiring managers and candidates](http://www.microsoft.com/learning/career/en/us/career-cert-benefits.aspx) that a candidate who holds a cert knows what he/she is doing, but I've yet to meet a hiring manager that gives preference to a candidate who holds a certification.
I've had and internship for 6 months now. I do quite a bit of .NET programming in there. I graduate in 1 year and I'm hoping to keep the internship till then, so what I'm worried about is that 1.5 years of experience might not be enough to get a good job straight out of university. That's my only reason to look into the certifications.
Sorry, but the answer is no. As someone who hires developers I care least about your education/certs and care most about *what you've actually produced*. So, my advice to you is to get involved in some open source projects or participate in a code camp or hackathon to get some work into your portfolio.
Will definitely look into it. Thank you for the help. 
SharpDevelop is fantastic. I'm happier with it than I was with the real thing. But they're also [removing the compilers](http://msdn.microsoft.com/en-us/windows/hardware/hh852363.aspx) from the SDK, which SharpDevelop and other IDEs depend on. So we'll probably have to either stick with an older SDK, or SharpDevelop will need to use another compiler such as Mono's.
Metro is not a proven or widespread platform. In fact, as of today, it has 0% OS market share and not more than a hundred developers with any notable experience. Developers are not sheep to be corralled, in fact they're quite the opposite -- we like to jump fences, just because. This move will backfire.
thanks for the info, does it have to be so small or can it be any size?
Look into [Nancy](http://nancyfx.org/), it's heavily inspired by Sinatra if you are worried about bloat with the MS version. [FubuMVC]9http://mvc.fubu-project.org/) is another one to look into as well.
This is a good idea and I think we should do it. One user has already requested this and I just prioritized this feature as 'high' since you have also requested it. http://sando.codeplex.com/workitem/141
I think you'll be fine. I had 0 when I graduated and got a job right of school. Hell I only have about 2 years now, you learn fast once your ojt
I'm listening...I'd like to get in on this
I'm not sure this guy knows what he's talking about. AFAIK, the Express edition of VS11 removes the ability to create non-Metro applications. If you still want to create old-school apps then you'd need a full paid-for version of VS instead of Express.
Also, perhaps I'm the ignorant one, but isn't it Moonlight that is dead and not Mono? As I understand it, the article author got it way wrong.
&gt; But Microsoft has Killed Silverlight. Killed it so badly that even Mono, the Open Source interpreter of pretty much all .Net apps, has declared it dead also I think he means that the Mono team has killed Silverlight / Moonlight. Mono is still alive and very well.
&gt; Extension methods have no support for polymorphism You could do this: public static class RideableExtensions { public static void Ride(this IRideable animal) { Ride2((dynamic) animal); } private static void Ride2(IRideable animal) { animal.Mount(); animal.Start(); } private static void Ride2(WildHorse wildHorse) { wildHorse.Catch(); wildHorse.Mount(); } } The cast to dynamic should cause the most appropriate Ride2 method to be called. Or if you wanted a compiler error if you didn't have a method to deal with a particular type of IRideable, you could use the Ride extension method to call a Visitor.
Uh, am I the only one who bought Expression Blend and a bunch of Silverlight books, only to have Microsoft forget about the technology? Sorry guys, I feel betrayed. This sucks.
It would seem to me that extension methods are more like mixins than anything else.
Or stick with VS 2010 Express.
And Silverlight 5.1 was released this month, so it is rather premature to say Microsoft killed it.
 public class Test { private MyLazy&lt;MyType&gt; _myObject = new MyLazy&lt;MyType&gt;(new MyType()); } public class MyType { public int Prop; } public class MyLazy&lt;T&gt; where T : class, new() { readonly object _myLock = new object(); private readonly T _myObject; public T Value { get { lock (_myLock) return _myObject; } } public MyLazy(T obj) { if (obj != null) lock (_myLock) _myObject = obj; else lock (_myLock) if (_myObject == null) _myObject = new T(); } }
Those MSDN subscriptions? Somebody pays for them.
&gt; If so, please let me know which ones writetehcodez correctly says: &gt; if it helps the company toward an MS partner competency In my experience this is a full cert, for MCPD all 3 or 4 exams. Again this only helps if the company is trying to achieve or maintain Microsoft partner status. 
I am not sure maybe has something to do with it not running in Administrator mode? Just a guess.
perhaps it needs repairing as some dlls or other (that you probably don't use) need reinstalling, but it checks for them on start....perhaps a config error?
if you work for a company most of the time there is a team license or they are bought per developer. if you are indie you pay for it and then write it off as a business expense on your taxes. Nearly every visual studio user I meet has thier copy through MSDN either paid by themselvs or by a company. The cost of a professional subscription is generally cheaper than a standalone license for Visual Studio professional or better. 
I have my shortcut set to always run as administrator, and I don't get a warning triangle. There may be something to this.
Type in the CLI `tasklist &gt; %TEMP%\tasklist.txt &amp;&amp; notepad %TEMP%\tasklist.txt`(can also do the same for `systeminfo`) Also take a screenshot of `resmon`, particularly memory usage. Should try to make sure it's not related to: low memory or strange 3rd party processes. 
I *never* run VS as administrator, and I haven't seen this.
TIL people still use Hungarian notation... I use the name of the control as a suffix, and the purpose of the control as the lower camel-cased name. eg. nameTextBox, userCountryComboBox
Have you tried switching the icon size to normal and back to small (in the taskbar)? Normal icons have additional real-estate where apps can render stuff - this is disabled if you are using small-icons so this might be a problem with this...
I do the same, for the same reasons. The people who come up with "best practices" don't have to write and maintain my code. I do.
I only use Hungarian notation for controls. It may be just one of those things that stuck with me but it just makes sense to me. Especially if you're planning to put the control type into the name. txtFirstName seems to be less wasteful than firstNameTextBox. I could see an argument either way when it comes to intellisense though. For me, I find it easier to type 'txt' and all the textbox inputs are shown to me. 
I don't think I've come across a best practices for UI controls other than Hungarian Notation. Like others have said it's more important to be consistent. Personally I don't mind Hungarian Notation as long as it's only used for UI controls. May god have mercy on your soul if you use it anywhere else though. :-) P.S. Can anyone list any official best practices they've come across for UI controls? Just curious what others there are.
But how will I be able to tell my LPCSTR from my LPWCSTR?
Fixed! Make sure it's not in a function() and it's just straight up jscript
Actually, I think this is false, unless I've misunderstood you. From Eric Lippert in the article: &gt; the C# compiler by design never produces the same binary twice. The C# compiler embeds a freshly generated GUID in every assembly, every time you run it, thereby ensuring that no two assemblies are ever bit-for-bit identical.
There is a incredibly small chance that it could generate the same GUID, so in theory it may generate the same binary output; so it cannot guarantee a different binary result :)
Hahaha, good point - it's a small chance, but possible! I had forgotten about that property of GUIDs.
Update: 22 employers are participating (so far), including Evernote, eBay, HomeAway, WhaleShark, etc. http://door64.com/painpoint 
Last I heard, the operating system ensures that the same GUID is never generated twice.
Fair enough. I would also note that MVC is also taking off in big ways, and ASP.NET is generally getting to be a bigger and bigger share of the market as well; even apart from Sharepoint. 
Portions are random, other portions are based on a incrementing counter. And then there is the timestamp portion.
Hope this version can compile vb.net to arm code so i can run my programs I make on a cheap android tablet.
It has to be small.
The best kind of correct,
No ISO download :-( 
try this http://download.microsoft.com/download/6/9/7/697096F6-4EEA-4704-AF2D-F3BAF57C7634/VS2012_RC_ULT_ENU.iso 
Forwards compatible? How does that work?
&gt; To that end, the framework has been built to be extensible, but currently provides a limited set of options. The only hosting option at the moment is on top of ASP.NET. The only view engine supported is Razor. It uses JsonFx for handling JSON, and a very rough system built on the WCF DataContractSerializer for XML. And the only IoC container I’ve built support for is Ninject. And this makes it better than MVC 4 because...?
You can use it for however long you like. The tools may have time bombs built in, or some other official date in the EULA. Either way, you don't' have to stop using the RC when the product is RTM'd.
What does the markup look like in that row?
 &lt;tr class="ItemRow"&gt; .ItemRow { background-color: #d4d4d4; empty-cells: show; }
I apologize...this may be more useful: &lt;tr class="ItemRow"&gt; &lt;td width="7" valign="top"&gt; &lt;img width="7" height="1" alt="" src="./images/spacer.gif" border="0" /&gt; &lt;/td&gt; &lt;td&gt; &lt;span id="rptProducts_ctl03_lblHospital"&gt;HospitalNmame&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span id="rptProducts_ctl03_lblCatalog"&gt;BrokenRow CatNum&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; $0.00 &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; &lt;a id="rptProducts_ctl03_lbEditProduct" href="javascript:__doPostBack('rptProducts$ctl03$lbEditProduct','')"&gt; Edit&lt;/a&gt; &lt;/td&gt; &lt;td width="7" valign="top"&gt; &lt;img width="7" height="1" alt="" src="./images/spacer.gif" border="0" /&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr class="AlternatingRow"&gt; &lt;td width="7" valign="top"&gt; &lt;img width="7" height="1" alt="" src="./images/spacer.gif" border="0" /&gt; &lt;/td&gt; &lt;td&gt; &lt;span id="rptProducts_ctl04_lblHospital"&gt;HospitalName&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;span id="rptProducts_ctl04_lblCatalog"&gt;Working Row CatNum&lt;/span&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; $0.00 &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt; &lt;a id="rptProducts_ctl04_lbEditProduct" href="javascript:__doPostBack('rptProducts$ctl04$lbEditProduct','')"&gt; Edit&lt;/a&gt; &lt;/td&gt; &lt;td width="7" valign="top"&gt; &lt;img width="7" height="1" alt="" src="./images/spacer.gif" border="0" /&gt; &lt;/td&gt; &lt;/tr&gt;
Give us a valid one and an invalid one. Let's see what the difference is.
Awesome extension. I've removed all toolbars from Visual Studio since I rarely have a need for any of them. The menu bar was the only thing left bothering me and it wouldn't go away even in full screen mode. With the extension installed, full screen mode only shows the tab well and the status bar. Would have left a comment for the creator to get rid of the status bar as well but can't be bothered\* to sign in to do so. \* Actually, I did sign in but was then asked to create a MSDN profile (only asked for a display name) and agree to some terms and conditions. Lost interest by that point and closed the tab.
Company likes repeaters...good question really. I'll try the space issue but since they're coming from the DB I'm not sure how I'm going to correct that.
Go on....
&gt;Each and every technology has its pros and cons and there is no silver bullet! I feel this statement is abused in the professional world. While in a strictly literal sense it's true, what bothers me about it is maintainability. The more technologies you introduce into a product, the more developers you need or the bigger skill set you need. In the current market it's hard enough to find a developer who completely competent in one language, let alone multiple languages. I'll take the hit in using the wrong tool for a job if the tradeoff is having maintainable code. I find it's often the best and brightest of us who go down the multiple technologies path. I agree that it's a great way to expand your own personal skill set but we forget all too often that the code we write isn't just for us. Technologies come and go and 5 years from now you'll likely be off on some other gig meanwhile leaving the company with the need for a very particular type of developer. Edit: Completely unrelated note, decent article. Just be wary of load concerns when dealing with Node.
I gave that suggestion a shot and it is still acting weird. Any other ideas?
Only other thing is what everyone else is saying. There's an extra TD rendering out somewhere in the TR that is off.
aka [SignalR](https://github.com/SignalR)
If you import a project/solution into VS2012, it will still be compatible in VS2010. Considering the changes in the files themselves (a version number bump in most cases), I would bloody well hope so too!
I have but I've never been able to get it working right in .net If you have any good tutorials or anyway to show me how to get it to work, that would be greatly appreciated.
The disadvantage of this approach is that you need to remember what type of control you are using for the data you want to get. What if you change textbox to combobox? I find it easier to think in terms of the data that I need and I do not really care what control is used to input it. If I need to get name value I type name and I see "oh I'm using textbox for it"
Writing chat clients is the real-time version of "hello world".
Try logging the most recent page/data structure that is fed to the repeater. Then just sit there refreshing until the error pops up. Then check the log to see if there's an inconsistency there. It might be present in non-IE browsers, but it may not be visible. Is your HTML well-formed?
In this post I am going to describe a way to manage NHibernate sessions in WebAPI applications using ‘session-per-action’ pattern. This includes working NHibernate configuration that uses contextual sessions and SQL CE 4, simple model and mappings as well as some WebAPI specific bits (action filter and use of HttpConfiguration).
can you copy the whole HTML table, it does not need to be a row next to each other to create this problem, last time this happened to me, it was bad html tags and extra or missing TD. Also see if the problem exists in the compatibility mode in IE
That's nothing. Last week I saw a link on reddit to a 428 year old post that was once nailed to the church door. 
VSCommands Extension + "Warn if not running as Administrator" ?
I didn't think of compatibility mode...I'll try that tomorrow. I think we're on the right track with a bad tag lurking somewhere, the page is a mess so it's going to take some time to go through.
I'm speaking in terms of their behavior, and comparing them to constructs in other languages. Of course syntactically they're just static methods, but they behave like instance methods.
So, what are your questions?
This subreddit is fine. Are you using Wpf or Winforms for your app? I guess for beginners I recommend Winforms because it can be easier to deal with at first. Anyway, the Resize event is fine, but you'll find it takes less code to just use anchors: http://www.techrepublic.com/article/manage-winform-controls-using-the-anchor-and-dock-properties/6165908 
Most likely you need to look into the anchor property for your textbox if I am understanding what you are asking correctly. Also, stackoverflow.com is a good resource. See here: http://msdn.microsoft.com/en-us/library/system.windows.forms.control.anchor.aspx
If you are using SVN with Visual Studio VisualSVN is a good integrated client (for 50 bucks).
You can ask questions to your heart's content with no points, but if you want to rate or moderate you need to earn points. You can answer questions on other areas of expertise, however, in order to gain the necessary points.
I'm pretty new to Visual Studio so most of the object names and properties and methods have changed. So I have no clue how to go from "user opens file" to passing the filename to a file read routine to putting the text file into the textbox.text property. If I'm missing some of the code I can't learn how to do X. Basically I'm brand new to VSE (VB). Some of the questions the MSDN articles I've seen don't answer are: * The Microsoft VS textbox is limited to 65k characters. How do I find out my text file is small enough to load? * MSDN article shows how to read one line. I want to read all lines and send them to my textbox.text property. How do I do that? 
Here's a [youtube video for ya on what you want to do](http://www.youtube.com/watch?v=JJJtsnmkzXY) That being said, I don't anticipate these types of questions being very popular on here....
I also posted some additional details on the Roslyn Forum: http://social.msdn.microsoft.com/Forums/en-US/roslyn/thread/c8199688-f6b4-4b42-9a3a-34f5f60491cf
I wonder if this might be the basis for a more powerful build system.
Whats the purpose of the "Professional" SKU now?
1.If the MaxLength property is set to 0, the maximum number of characters the user can enter is 2147483646 or an amount based on available memory, whichever is smaller. http://msdn.microsoft.com/en-us/library/system.windows.forms.textboxbase.maxlength.aspx 2.while ((line = sr.ReadLine()) != null) http://msdn.microsoft.com/en-us/library/db5x7c0d.aspx 
It does many more things, much like it does today versus "Express" editions. 
Anyone who is serious about learning WCF and needs a good starting point, needs to follow this tutorial: http://www.code-magazine.com/article.aspx?quickid=0809101&amp;page=1 The author does an absolute amazing job of breaking down WCF to its most basic parts. It also breaks the reliancy developers have with the "Add Service Reference" tool. At the very least, it sheds light on how "Add Service Reference" works.
I was thinking to myself: if you're having problems branching in TFS 2010, then you're doing it wrong. Your comment helped me figure out he was probably using TFS 2005.
Just do it yourself, it's not rocket science
OK, apparently it is.
VSE2010 just has a subset of features that the full blown vs2010 has, the actual code written would be the same. Basically what I'm saying is there isn't a need to use a specific subreddit for VSE. You may want to read a book on vb.net, these type of questions would be answered in the first few chapters.
Ok, Now do it manually without the wizard :)
you should be able to get some more info about your 500 from the event viewer. Start there, might be something simple.
I do WCF on a daily basis and the two are somewhat related.. Definitely find those references to GlobalWidgets in your config files and change them to the new namespace. That would be my first guess. If WF is anything like WCF, the configuration has to be spot on and is/can be very complex.
I suspect you need to correct the namespace or class name in your .svc file. 
In-memory hosting is one of the hidden gems of ASP.NET Web API. Let me show you an example, how a lightweight Web API server can be temporarily established in memory (without elevated priviliges, or cannibalizing ports like self host) and used to perform integration testing, allowing you to test almost the entire pipeline, from the request to the response; including attributes/filters, message handlers, formatters and controllers.
Well, crap... I really wanted an MVC version Umbraco. I guess I'll just have to continue maintaining the v4 WebForms sites I have...
This is going to be very bad for Umbraco as a whole. I am not a CMS expert by any means but I played around with v4 and it was a really nice product, but when your competitors have already started to move to MVC and you're scrapping everything and starting from scratch that's going to be a tough hole to climb out of. I feel really sorry for folks like SirRealle who have put so much time and money into what they were touting as the future just to have the rug pulled out from under their feet.
That is what I ended up doing a lot. Debugging WF requires some dirty tricks. One trick I have often used to get a handle on the execution flow and structure of a new piece of code is to use log4net and add method start and end debug log statements to every method I care about (if you are using any DI at all this is even easier as you can use an interceptor pattern to log all classes loaded through DI). If needed I'll output the values of relevant input and output values as well. This tends to be useful in figuring out where things are going and what your context is. As for WF itself, the book I used was Pro WF from APress( [.NET 3.5](http://www.apress.com/9781430209751), [.NET 4.0](http://www.apress.com/9781430227212) ). It also has a very good starting manager sample that gives a solid overview on how to start up and manage WF instances. That should hopefully help you track this down better. 
Sounds interesting. There must be a better way to embed your code/text/screenshots. What is that, an embedded PDF? I can't even read the text.
I'm not sure if it's a happy spray of rainbows or a sad spray of vomit. I mean, he looks happy to begin with...
But now you can fearlessly [refactor](http://i.imgur.com/wGUTG.gif)!
I think the OP is saying "IoC/DI/Mocks/Unit Tests/etc" are over-hyped and useless. To which I reply; then you're using them wrong. :P
It IS impressive vomit.
You sorted them by usefulness, ascending. How thoughtful of you!
Well I wouldn't have coded it all if they were useless. I stick by my reaction to seeing the code, however.
As it is r/dotnet and not r/funny, it would be interesting to see what exactly is that you dislike in your new code.
How? Well written code following DI principles using a good IOC container surrounded by well written unit tests looks beautiful, is easily refactored, and is easily added on to. Not sure what exactly is vomit inducing about that.
Well I replied to him (now at the top) so take a gander if you want to see the rants of a very tired and frustrated programmer :)
Thank you. I didn't want to spend the time saying precisely this. Only less eloquent. 
1 using a factory feels wrong, surely you should just be asking for the unit of work in a constructor and having your DI library figuring out how to build it? I normally abstract my UoW out and use a global ActionFilter - something like this http://wekeroad.com/2011/03/21/using-entityframework-with-aspnet-mvc-3 but with property injection instead of the service location call to get the dbcontext (or equivalent) 2 I wrap calls to forms auth in a action result, ending up with the following &gt; public ActionResult Login(string username, string password) { &gt; if(username != “user” || password != “123”) { &gt; ModelState.AddError(“username or password incorrect”); &gt; return View(); &gt; } &gt; return new LoginResult(username); &gt; } 3 haven't found a way to solve that nicely yet =( 
In the beginning... There was only action methods and a data context, and the action methods queried the data context, and it was good. Then multiple action methods made the same queries, so the queries needed to be moved into a central place. People call this holy land a "repository", and the action methods implement the repository and it was good. (note here: most ppl say to make separate repositories for each entity, but I didn't do that because I want only a single transaction and save() call) Then the repository grew and grew and needed to be separated, yet still use a single transaction &amp; savechanges method, hence the unit of work class which gets passed to each repository (and in fact the unitOfWork also has properties which instantiate the repository so rather than saying new UserRepository(unitOfWork) I do the inverse and say new UnitOfWork().UserRepository.GetUsers() and in the getter for UserRepository I create it and pass in the UoW the first time it is called...) Then the factory thing... yeah I gotta find a way around that because I don't need it at all. I just want to be able to make multiple UnitOfWork instances if I need to (I don't feel that its right to singleton this up, or at least I don't want to be forced to). Gonna look into some tricks to fix mocking code, thanks for the feedback though. BTW I really *like* the idea of automated unit testing. I'm trying to write my own app and I don't have resources to do full manual tests every time I do a refactor, and I also don't want to just toss new code up to github and cross my fingers knowing that I didn't test it all. Most every major application (.net or otherwise) that I see the code for on git hub is also built this way!
See my response above for how I'm solving UrlHelper. It's not pretty, though. This is what I've refactored the mocking code down to. Still ugly though (and I'm not even returning a real User entity yet, which would make things even longer). // mock data objects mockDataService = new Mock&lt;IDataFactory&gt;(); mockUnitOfWork = new Mock&lt;IUnitOfWork&gt;(); mockAccountRepository = new Mock&lt;IAccountRepository&gt;(); // setup the child objects mockDataService.Setup(x =&gt; x.CreateUnitOfWork()).Returns(mockUnitOfWork.Object); mockUnitOfWork.Setup(x =&gt; x.AccountRepository).Returns(mockAccountRepository.Object); mockAccountRepository.Setup(x =&gt; x.Login(It.IsAny&lt;string&gt;(), It.IsAny&lt;string&gt;())).Returns(new User()); // controller invoke var controller = new AccountController(mockDataService.Object, mockAuthService.Object); I'll spare you the code to invoke the action method and test the result, nothing special about that.
Shouldn't this work? mockDataService.Setup(x =&gt; x.CreateUnitOfWork().AccountRepository.Login(It.IsAny&lt;string&gt;(), It.IsAny&lt;string&gt;())) .Returns(new User()); 
Wow that worked! You mean you don't have to Setup() the child objects? Who knew!
Useless? No. Over-hyped? Immensely. 
This image is relevant to my interests.
Hmm...ok, I think I'm beginning to grok your particular situation...permit me to fill in the gaps with wild speculation and guesses: So your "repository" appears to just be an interface or contract declaration, based on your statement "action methods implement the repository". (I think this may be the wrong pattern; I'll get into why in a bit) - based on the naming conventions you're using, I'll also assume that you're using the Entity Framework. You've also stated fairly flatly that you're aware of the SRP violation in that UnitOfWork class (it's now responsible for repository instantiation as well as performing the containment of your queries). Personally, I concur that the Entity Framework is not the prettiest or most optimal implementation - in my opinion, it leaks abstractions like crazy. Ok! First off, declaring your repository pattern in terms of a contract buys you very little; in fact, I'd argue it forces you to perform duplication of work (DRY!) if you're re-implementing it in multiple places - if this is not the case (maybe I'm misunderstanding), ignore this part. Also, creating these repositories dynamically may not be the proper option, either; if the repository itself maintains any semblance of stateful behavior, you're going to want to explicitly control the lifetime of that repository instance. In simple terms, these are prime candidates for Dependency Injected items, preferably with some sort of LifetimeScope (the actual term varies depending on container used, but the crux is you know exactly when the thing will be new'ed up and roughly when it will go out of scope/be marked for collection). Even better, to better contain the abstraction, split off the querying logic into a Specification pattern (think LINQ operators in pseudo-class format, possibly with the injected repository of interest), then deal solely with chaining these specifications together until you're ready to "do shit". Then you pass the final aggregated Specification object to the Repository you've been injected with, and get back some IEnumerable&lt;T&gt; (or ints, etc, whatever for non-result set queries). Now your abstractions are at least "less-leaky", and it also becomes a piece of piss to individually mock/test these interactions: mock your repo object, inject that (you can even do this part by hand) into a new Spec object, and ensure the right repo methods are called. Another thing to note is to be very cognizant of *what* you're testing for every test; SRP applies here just as critically! If you have twelve Asserts in your test, there's good reason doing all the mock setup is painful - you're just plain doing too much. I always aim to have a *maximum* of three Asserts in any test, and even that would pain some purists. At any rate, I hope this is at least constructive feedback; I'm more than willing to offer other suggestions if you'd like. 
Thanks! That clarifies a lot. jerkimball's [most recent reply](http://www.reddit.com/r/dotnet/comments/v1zrs/how_i_feel_after_updating_my_codebase_to_use/c50zvgh) (as of the time of this posting) has some good points to consider, and covers just about everything I'd say. Doing IoC/DI and unit testing correctly is HARD, especially if that's not the way you 'grew up' programming. It throws even the best of us up against things that we do "wrong" (read: wrong for this methodology) on a regular basis, and makes for some really hard adjustments in the way we think about application structure. However, once you've made that mental adjustment, the benefits of building your application properly for IoC/DI/UT/ETC/YADAYADA are really nice. Keep at it and you'll thank yourself in the long run!
I probably used the wrong terms saying "implement" instead of "instantiate", etc. Here is the UnitOfWork: public class RBlogUnitOfWork : IUnitOfWork { protected internal RBlogContext db; public RBlogUnitOfWork() { db = new RBlogContext(); } public void Dispose() { db.Dispose(); } public int SaveChanges() { return db.SaveChanges(); } private IPostRepository _postRepository; public IPostRepository PostRepository { get { if (_postRepository == null) _postRepository = new PostRepository(db); return _postRepository; } } } I could have just stopped after adding SaveChanges() and Dispose(), but I like the fact that the code goes through a single class to access repositories (the asp.net site has examples like this too). Repository: public class PostRepository : IPostRepository { private RBlogContext db; public PostRepository(RBlogContext db) { this.db = db; } public List&lt;PostSummary&gt; GetPublishedPostSummaries(int skip, int take) { var query = from p in PublishedPostQuery // defined elsewhere... select new PostSummary { Title = p.Title, DatePublished = p.DatePublished.Value, ...etc }; return query.Skip(skip).Take(take).ToList(); } } I like to do all my actual SQL queries here so I never return IQueryable. This way I know that if I have large SQL queries being sent to my SQL server I only have one place to check, rather than hunting down linq queries in controllers to see what they are doing (I still use LINQ in action methods, but it's all in-memory at that point). I am hating the code less now that I have the mocking cleaned up a bit, but I still need to find a way to get rid of the factory, because I like being able to do this in the action method: using (var db = new UnitOfWork()) { summaries = db.PostRepository.GetPublishedPostSummaries(0, 10); } Again, I could have just done a new PostRepository() and passed in a context/UoW but I like keeping it abstracted, plus this syntax is nice for when I hit multiple repositories at a time (the property getters on UoW instantiate it when needed). Thoughts? 
It's not "bad", per se - one could argue you're a little too familiar with the relationships between your classes, but that would be pedantic (Law of Demeter: basically, lots of dots in a single line implies you're asking rather than telling - you "know too much" about the internals of some associated class). A way to fix that would be to propagate those calls upward to the specific UnitOfWork classes - so instead of: using(var db = new UnitOfWork()) { summaries = db.PostRepository.GetPublishedPostSummaries(0, 10); } You'd have something a bit more like (winging it without a lot of thought here): // not shown: one could resolve this unit of work via Container, auto-injecting a repository in it, // else pass it in during construction for proper IoC using(var db = new PostUnitOfWork()) { summaries = db.GetPublishedPostSummaries(0, 10); } Where PostUnitOfWork.GetPublishedPostSummaries could simply be (in this very constrained example): public List&lt;PostSummary&gt; GetPublishedPostSummaries(int skip, int take) { return _repo.GetPublishedPostSummaries(skip, take); } Anyway, as I said, that's purely pedantic;To your original point of trying to remove the factories...lemme think a bit on that and get back to you. Unfortunately, I gotta do some actual work today. ;)
Posted a possible answer, I'll check back when I'm in front of an actual computer to see if that works for you.
Figured out the problem: myself. http://stackoverflow.com/a/11057293/216553
is it much different than what happens in a Redirect or even View result?
Helpful, but I wish it wasn't 32MB and impossible to easily navigate.
It shows how it is possible to cast an object into another in pure C# environment. This is very useful when using objects that were created by multiple dynamic compilations and although they are exactly the same, the CLR and compiler thinks they are different (I had this exact problem when trying to create the [REPL C# Editor to edit another REPL C# Editor ( i.e. 'Script the Script')](http://diniscruz.blogspot.co.uk/2012/06/repl-c-editor-to-edit-another-repl-c.html) )
I also think that this will allow the creation of very good 'type safety' explanations since I have found that a great way to explain type safety is to show what it means (and how it can be broken). Part of the issue here is that this should be not be possible (note that I'm not doing any unmanaged calls), the CLR should be able to detect and prevent this type of activities (in this case stack manipulation)
Agreed ... hopefully my work system will handle it a bit better.
Nice 32 mb PDF there ya fucking stupid cunt
Using NamedPipes pops into my head first. There are other IPC techniques you can look at.
maybe, but first I need to run code in the 2.0 CLR (executed from the 4.0)
Do you have access to the 2.0 CLR GUI source code?
You certainly do not need the hosting API. If I understand this correctly, you're going to allow the operating system to spin up the respective instances of the CLR, which is advisable. Since these are two different versions of the CLR, they don't naturally know anything about each other. I like sheepdog69's idea of named pipes.
This question got me thinking, so I'll reply here: the same technique you're using could in theory be extended to make a "hot-deployable" site - a sort of plug-in based architecture that scans for new "patch dlls" copied to some folder. Upon detecting a new dll, it'd add it to a loaded list, and effectively you're adding new content dynamically with no app pool reset, etc...huh.
Write a small piece of .NET 2.0 code that does the DLL injection into the target CLR, then have the .NET 4.0 app use some sort of IPC to talk to your .NET 2.0 shim and tell it what you want done.
Smells like MVC meets [Action/Executor Pattern](http://msdn.microsoft.com/en-us/library/cc984279.aspx)
Should have named it YALE (yet another looping event).
Not the only question left is how long **you've** been lurking.
From memory here, so you'll need to fill in some gaps: Right click, configure web service. There will be an option like "default collection type", which will probably be set to string[] - change this. You may also want to take the opportunity to include other types from other assemblies here.
I believe this is because there is no List&lt;T&gt; and under the hood everything gets serialized to a common collection type before it goes out of over the wire and so for collection types coming in you need to pick which one you prefer things get serialized to. Going off of memory here.
This. Out of curiosity, Is there an issue with unifying your collection types for your webservice? Why would you want to return a string[] in some instances and a List&lt;string&gt; in others? Unified collection types follows standard best practices and, even were disparate types for collections allowed, would make consuming the service a bit awkward from a client perspective. 
I'm actually sort of curios as to how OP recreated the error. I created an old webservice in ASP.NET and defined a service interface that returned a list and string array in code and it compiles fine. I then added a web reference to that service from another project and was able to consume it just fine. It should get serialized into a common format when creating the response, which is defined in the WSDL as a sequence. &lt;s:element name="HelloWorld2Response"&gt; &lt;s:complexType&gt; &lt;s:sequence&gt; &lt;s:element minOccurs="0" maxOccurs="1" name="HelloWorld2Result" type="tns:ArrayOfString"/&gt; &lt;/s:sequence&gt; &lt;/s:complexType&gt; &lt;/s:element&gt; &lt;s:complexType name="ArrayOfString"&gt; &lt;s:sequence&gt; &lt;s:element minOccurs="0" maxOccurs="unbounded" name="string" nillable="true" type="s:string"/&gt; &lt;/s:sequence&gt; &lt;/s:complexType&gt; It doesn't create a new complex element to describe a sequence of strings, it just reuses the ArrayOfStrings element to define a sequence of strings of any sort. Because of this, and client consuming it can only have one way to cast strings in the proxy that gets generated when you add a web reference: // In the Reference.cs file public string[] HelloWorld2() { object[] results = this.Invoke("HelloWorld2", new object[0]); return ((string[])(results[0])); } 
Are you overloading the method? You can't do that in web services, IIRC
Update: 35 employers registered for THIS FRIDAY's job fair (June 29) in Austin. http://door64.com/painpoint
You can also alter the type of an object directly, by manipulating the type handle: http://porg.es/blog/casting-in-dot-net-via-object-mutation
I think using it inside a using block will remove the necessity of Dispose I am not 100% sure though. http://msdn.microsoft.com/en-us/library/yh598w02(v=vs.71).aspx edit: added link
Sorry that was a thinko, should have written "using block", not "Dispose block".
When it goes RTM. I have had horrible luck installing/uninstalling beta versions of .Net and Visual Studio. If you want to install it on a VM just to warm up to it then that would be cool.
I won't use any version of .NET until it goes RTM however I do setup a VM with the new version (and IDE if there is a new one with it) and play with a few projects. It is good to be aware of any major new features in the platform and how they can help you. This way you can speak intelligently on it when it comes time to convince someone that it makes sense to upgrade or build a new system using it. 
Like jbhelms and Manitcor, I wait until the new version goes RTM... and often much longer... before I start using a new version of the framework.
How big a code base are we talking? How long does it have to last? Are you expecting any changes in the future? In most cases, I'd recommend you rewrite your code. Start here: http://msdn.microsoft.com/en-us/library/ms973813.aspx
Yup, rewriting your code is the best option, most tools out there will do a semi ok job but things like logic of the previous coder is something that can best be converted by rewriting. Usually you discover what he/she intended to do and what he/she did. Also if you are new to .NET its the best and fastest way to learn. But if you are keen on using a converter: http://converter.telerik.com/
Ill revisit it then, but still see little point in it. Maybe it will click who knows! :)
What he said. Here's the problem. I am assuming from your question that you are not very familiar with .NET which means you're essentially putting yourself into the following conundrum: 1. Do I use a converter and "trust" that it did a good job? 2. Do I learn VB.NET because it's closest to ASP3 and convert? 3. Do I learn C# because it will make me a better developer in the long run and convert? #1 is really out of the question. You will be creating a much bigger headache by doing this than by learning and converting. You will also likely find better ways to do things in .NET which you'll be able to upgrade to which a converter will just straight up translate. #2 IS an option but if my assumption is correct in that you are a beginner, then VB will not help you in any way with understanding c-like syntax. That is, you'll be at a disadvantage when it comes to Javascript, etc. #3 is the way to go.
Rewrite. Most likely, all a converter will do is a mediocre job of translating your VBScript into VB.NET, without re-implementing everything "The .NET Way" - things like Validators, MVC, DataGrids, etc. I've dealt with a couple ASP.NET apps written in Classic ASP style. Unfortunately, they work "well enough" so I can't justify getting them rewritten properly. But the code is just hideous.
It's not the biggest that I've worked with but it's fairly long. And it's gonna have to last for a while since this page is going to be the main page to test/communicate with all the servers 
+1 for the bastard webforms 
This is awesome
I found this out the hard way. EF isn't magic and it's not a substitute for understanding SQL. 
And without the UI configuration editor.
Actually, cascading deletes from EF, or really any ORM product is just a bad idea all around. In this case, cascading the delete is going to require that you create triggers on every table where you want cascading deletes to work. Anyone who has admined SQL Server or another DBMS will attest to the troublesome nature of triggers; they can easily cause a lot of extra load on the server and make troubleshooting very messy. In most environments I've worked in, deletes are never automatically cascaded and most DBAs are normally going to just ignore you when you tell them that you're going to introduce triggers just because your silly ORM product requires it. Instead of taking this approach, you could instead load all the objects that will need deleting into memory and then individually delete them (approach #2 in the article), but that's a bad idea from a performance standpoint as well; because you have to load them first. Not only that, but you'll have a lot of extra code around deleting children of a row in an entity you may not know much about and it will be easy for that code to become incorrect over time as new dependencies are added which would extend the need for the cascade to occur on even more entities. Instead of all that, just use a stored procedure AND call it from a central business domain class; not your data access layer, which is where ORM use belongs anyway - if you mix the two, you come up with situations like the above. If you want to delete a product from inventory (made up example), you just call that stored procedure from your Product's DeleteProduct method and the method can either allow the stored procedure can handle all the other housekeeping as well, or it can call other business domain classes as well that would have even more things to apply (keeping in mind that each and every call to the business domain creates even more traffic to the database server). Bottom line - your ORM is not a business domain tier. Neither is the database server. Let each one do what it does well and keep the interfaces between tiers relatively clean and you'll avoid most of the snarls that ORMs can lead you into.
This is running as a Visual Studio extension. I'm just about to start user studies/testing as part of my thesis work, so this is in a pre-distribution stage at the moment. After feedback and some polish this should be ready for to play with.
From chrome browser history. SO is to filter for relevance, but other are possible
Might be problem in some workplaces so should have the ability to disable.
It took me a while to get used to it. I come from a C++ background so I always hesitate to let the compiler write my algorithms for me, and LINQ was no exception. Once I got more comfortable with it, I enjoyed its conciseness. It took the Entity Framework for me to give LINQ a chance, but now I use it to do basic, boilerplate List&lt;&gt; operations like finding a particular object or set of object.
This looks very interesting. I will definitely be checking it out when I get into the office Monday. 
Yes good point. Some projects I've worked on had good task breakdowns and it is always clear about the 'why' and those are linked into the commits. This addressing something different. You just finished a task involving implementing drag and drop which involved a lot of research and experimentation. Two weeks later someone wants to do something similar and asked you how you did it. How likely is it that you will remember the steps and resources you used? This is more in spirit with how the Mylyn team will checkin their task context when they do their commits on any task.
Still not seeing the point of this event based stuff. Is the theory that you can somehow schedule workloads better than the OS can? How do you take advantage of multiple processors/cores in this realm since speed is not what is increasing these days?
Careful where you point that question, it's awfully loaded. &gt; Is the theory that you can somehow schedule workloads better than the OS can? The idea is that your application yield as much time back to the OS as possible. Instead of polling for something to happen, you simply yield to the OS, and wait for the OS to bring your program back to the front when it has work to do. &gt; How do you take advantage of multiple processors/cores in this realm since speed is not what is increasing these days? Your work loads are what utilize the threading, not the scheduling system.
After reading that article is seems like he can just buy the [Samsung Slate](http://www.samsung.com/us/computer/tablet-pcs/XE700T1A-A01US) and load the consumer preview on it. The one in the article had the developer preview on it, not the full blown windows 8.
You know about the simulator right? If you're just getting started it should suffice
I'm doing my work on a converted Acer w500 tablet, if you can find them they're stupid cheap because everyone wanted the Android one. Plus it comes with a dock, picked mine up as a floor model for a couple hundred dollars. It comes with windows 7 installed so you don't even need a CD drive to install the consumer preview, just use the web installer. 
Yeah, looks like the slate is the best option so far. I have Win8 on dual boot right now and use it primarly. It's just in reality stuff just tends to behave different, at least from my experience, plus I don't have touch screen. So it would just be nice to get real "feel" for it.
Yes, I read about the w500, but I can't find any up here in Canada right now. I will keep an eye on it though. Thanks for sharing the 1st hand experience!
Yes but don't all of your workloads now have to come and go through this one thread that the message loop is running on?
Do you have an iPad or android tablet? If so, you can use the [win8 testbed](http://www.splashtop.com/win8). It's basically a multi-touch remote desktop. It works surprisingly well but it's not as good as a real tablet. And you need to install Win 8 on a computer somewhere. I just bit the bullet and upgraded by dev machine and a spare laptop.
Great, thanks! For starters that might be an option. Happy cakeday ;)
Why Entity?
When working with Entity Framework or Linq to SQL (SQLMetal), you generally use the designer to create your data models. You can click on the little icon at the top of the solution explorer to "see all files" but you don't really need to because you shouldn't be editing it manually.
I typically use LINQ to SQL. It's a hell of a lot easier to work with than Entity, and usually faster too.
I shouldn't be editing what manually, the designer file? I don't even see a designer file. I'm currently uninstalling and reinstalling web developer studio, so I'll see if I can get a .designer.vb file now.
I'm going to look into that next than. I'm about to just get our system admin to install php to iis.
Are you dragging your table objects from the Server Explorer window onto the Designer window (the DBML file for Linq2SQL or whatever EF uses). Or are you just doing "Add -&gt; Class" and building classes that mimic your database? I've never had a problem by dragging tables from the Server Explorer window onto the designer window. The act of saving that file causes Visual Studio to rebuild the designer file. 
Good to hear! 
Entity framework is for large applications where you want to model your code in a slightly different way from the layout of the database. Sounds like you don't need it
Yeah, that's what I've been doing. I've had this issue for a while, I actually uninstalled and reinstalled web developer and that got the entity framework to work correctly. 
love it!
Cool. I hope I didn't come across as condescending. I just know what its like to be frustrated.
Oh no, you didn't. This is more of a learning experience for me than something I HAVE to get done for work. I know I'll be back in here with more questions.
Fuck yes. I propose a community built code generator site for all things rest, c#, entity framework code-first, etcetera. Im down... Just sayin...
You could look at ado.net, which allows direct SQL to be executed.
The async/await is pretty much the biggest change. It's a good thing that .Net is going more modular so stuff like EF and ASP.Net MVC are coming out independently from the CLR. Some of those modules do take advantage of the latest CLR (like async in ASP.Net MVC 4). I think C# and .Net are hitting a level of maturity where we'll see less and less change from one version to the other like this. But the noise will be on the higher level frameworks (EF, ASP.Net...).
It seems like what you suggest might be achievable with an extension method. Something like: public static class DelegateExtension { public static void Subscribe(this Delegate originator, Delegate dest) { ... // hook 'em together somehow } } 
This is really useful. I pretty much already do without solution explorer by using the ctrl+, shortcut that lets you search for a type or file name and it's pretty fast for me.
I'm not really sure as I haven't encountered this before. What I am suggesting is for the compiler to add code so that when an event is called as an IObservable for example in a LINQ query, the compiler would add a call to Observable.FromEvent. Just a little more syntax sugar. The behavior with multiple subscribers would be the same as with code that uses Observable.FromEvent I believe Rx and IObservables would be more usable if code looked like this: var mouseDown = from evt in image.MouseLeftButtonDown select evt.EventArgs.GetPosition(image); instead of this: var mouseDown = from evt in Observable.FromEvent&lt;MouseEventArgs&gt;( ev =&gt; image.MouseLeftButtonDown += ev, ev =&gt; image.MouseLeftButtonDown -= ev) select evt.EventArgs.GetPosition(image); If LINQ was invented first, events would be IObservables from very the beginning.
Yeah, events should be IObservables from the beginning. But LINQ had to be invented first
Thanks for the comment Tobias... I'm glad that I'm not the only one who disses the Solution Explorer ;) I also use the "open type or file name" dialog. It's great when I already know the method or class name but if I can't remember it exactly I use Sando. Sando also works better when the method name is generic (e.g., like "Execute"), as I can still search for the concept and, because Sando searches the body of the method too it will still find that method even though the name is generic. An example below: public class FileOpener{ ... public void Execute(File file){ //open the file file.open(); .. Sando would still find this method, while the open type dialog wouldn't, because Sando searches the method body. 
When I get hired to learn and maintain a large code base, I prefer to use PowerGREP, an external tool superior and more complete than Visual Studio. For example, try searching multiple solutions at the same time in VS. 
Hi mycall, thanks for your comment! I hadn't run across PowerGREP before, so I really appreciate you pointing it out to me. PowerGREP looks like a great tool for performing Find &amp; Replace operations on directories or even just searching them. However, PowerGREP appears to be based on regular expressions. Their documentation says, "Do not worry if the regular expressions look complicated..", but this in fact does worry me a great deal. I don't want to have to use my brain power to create a regex just to find the code I need to work on, I want to use that brain power for actually changing the code itself! Hope this helps clear up some of the differences between Sando (google-style queries) and PowerGREP (regex-style queries). Note that people who are regex masters (like yourself) may prefer PowerGREP, while those of us who are slightly dyslexic (like me) may prefer Sando. ;)
Thanks. My concerns are vendor lock-in or framework abandonment, both of which I can get from MS.
If you're going ORM and have some budget, you might want to look at llblgen as well.
Also think of skill portability. If you decide to change jobs, you're probably better off knowing EF.
My current methodology is stored procedures that I wrap with typed datasets (xsd) and call their methods from table adapters and datatables.
Exactly what we feel too. Well put. 
I don't have any experience with Telerik's OpenAccess, but I've tested their other controls and in general I didn't like them (I find them too unprofessional and lacking in many features). You may want to check out DevExpress's eXpress Persistent Objects (XPO). We use it for a pretty substantial in-house application and it works flawlessly and saves us countless hours and headaches. Also, the wider DevExpress set of components is top notch and integrates seamlessly with XPO. In my opinion, it's the best overall framework on the market.
Thanks. I'll take a look at it.
I've used NHibernate, Entity, and, more recently, OpenAccess. Microsoft makes using Entity very easy. If you just need simple create, read, update, delete, it's the best choice. I haven't been working with EF for very long and I already feel fairly confident with it. OpenAccess might be better, but I didn't pick it up quite as easily. It's still pretty new to me, but I'm not immediately impressed. NHibernate is my favorite, but it took a couple painful months to learn.
The whole collection is also available as [a torrent](http://www.ndcoslo.com/userfiles/ndc2012.torrent)
Whichever orm you go with, make sure there are decent profiling tools for it. You will spend a lot of time making sure it is doing the right thing. I would still go for nhibernate, because it's the most powerful and open source. So you have the option of patching if you need to. This proved to be really useful on one project I worked on.
The mapping-by-code option is nice too, is fluent still active these days?
[You can use existing stored procedures](http://nhforge.org/doc/nh/en/index.html#sp_query). Check out the [NHibernate Mapping Generator](https://nmg.codeplex.com/) for generating code from an existing schema. In terms of pain, I can't speak for the parent, but the LINQ provider for NHibernate has poor support for many of the extension methods so you end up using the criteria API which is somewhat arcane. The criteria API also ends up being faster but ties your code to the ORM. Which DBMS are you using? It's got a few bugs with Oracle, but nothing compared to EF. If you are using MSSQL, stick with EF. FluentNHibernate solves a lot of headaches in terms of configuring NHibernate, but it's got a pathetic amount of documentation. On the other hand, you barely need it considering it is fairly simple to use. The Telerik ORM is free, has a profiler, and (for what it's worth) a visual designer. It has much better LINQ support than NH, and is about as fast.
I'm very wary about using third party ORMs, unless you have a specific need that can only be implemented with something other than EF, I personally wouldn't use any of them.
ctrl+, is the reason I fell in love with VS2010. The next best functionality is if we could right click on a file tab and we would get the option in the context menu to be taken directly to that file in solution explorer.
DevExpress components are no picnic in the park either. Some of the implementation is far from intuitive. While controls such as their grid have a million features, the complexity it introduces is sometimes not worth the headache.
They do have a learning curve, but so does anything on that scale. Once you get the hang of it, you see that all of their controls have the same basic design principles and it becomes a breeze from there on. Also, like you said, the controls are extremely feature-rich, so it really is worth the time.
Hi Anish, Thanks for leaving comments! That stinks that you're not getting search results.... here are a few things to check. 1. Do you have a Solution open? Sando only searches the open solution. 2. Are you searching C#, C++, or C code? Sando only searches these files (for now). 3. If the above two aren't the problem... are you working on a public project and/or can you get Sando to fail on a public project? If so, let me know which project it is and I'll see if I can replicate the problem here and thus get a fix to you. Thanks again for the comment and I'm glad to meet another search-oriented programmer that loves things like crtl+,
Hey - any interest in gathering and tracking requirements and documenting the systems? There is as much programming on top of that as you'd like. The third position is tech support. All three are listed here: http://www.sabelsystems.com/careers/featured-opportunity
True, but in NHibernate you had to write code like this (again, couple years back): IQuery query = session.CreateQuery("FROM Account WHERE username = :name AND pass = :pass "); query.SetString("name", username); query.SetString("pass", pass); This is what felt like inline SQL. 
And LINQ is any better?
You don't have to use LINQ with EF. In fact, I don't. var acct = dbContext.Accounts.Single(a=&gt;a.UserName == name &amp;&amp; a.Pass == pass); 
True, but it still looks like inline SQL to me.
If you wanted the current page to use a querystring parameter being passed to it, you can modify your code to: * include the &lt;asp:TextBox&gt; as you guessed * in the code-behind, assign the value from the querystring to the control. * be sure to HtmlEncode this value. It may contain dangerous/bad/attack values. Somewhere in your code-behind: protected void Page_Load(object sender, EventArgs e) { search.Text = HttpUtility.HtmlEncode(Request.QueryString["q"]); } Your form control can be like this: &lt;asp:TextBox id="search" runat="server" /&gt; All that said, taking input from an untrusted/validated source like the querystring is vulnerable to Cross Site Scripting XSS injection. HtmlEncoding isn't enough. http://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet
Thanks. I am experienced with protecting against user input, though this is an internal tool so it isn't *as much* as an issue.
How is that not LINQ? And in NH, it would be something like session.Query&lt;Account&gt;().Single(a=&gt;a.UserName == name &amp;&amp; a.Pass == pass); 
By LINQ, I meant var acct = (from Accounts where UserName == Name select p).Single(...); That does feel inlinish.
Downloaded but didn't install. Based on the advice I got here, I think I'll go with EF.
Still a valid comment regarding the weird throwing
This seems like a good way to make stateful MVC style web apps using the Hub as a controller layer.
Each may have been a better choice of words.
Firstly, it depends how you've written the application - I use Code-First, but I create my own databases and don't allow my application to do it for me as I find it a bit yucky. Secondly - it depends on the shared hosting. I've never used GoDaddy, but if they allow SQL Server traffic through the firewall (nasty) or at least via a VPN (much better) then you should just be able to connect using SSMS and run any scripts you need. I'm pretty sure you can then get your existing database to make you some database creation scripts, or you might even be able to ask GoDaddy to restore a backup of your local db over your live one to create all the schema objects. Best bet though is to ask them - I'm pretty sure EF will still create the tables in an existing database, I don't think it'll insist on creating the database itself as that'd seem like quite a limitation. As long as your user account has dbo privs over the database it shouldn't be a problem, but you won't know until you try :)
Thanks -- I looked into and eventually wound up using the database backups, just putzing around trying to get the connectionString to work now. And yes, it is MSSQL.
Seems like someone has given this some thought already: http://www.mono-project.com/EntityFramework I imagine the task would be much simpler now.
nHibernate was open source several years ago and EF is only just catching up. If MS had just added some tooling for nHibernate we would be years ahead by now.
That stuff has been there since the beginning of time. Hopefully it'll get updated with analysis of the open source Microsoft stack. But more likely we're just going to have to wait for Miguel to post something on his blog about it, hopefully an eta. I'm also keen on seeing an eta by Microsoft regarding the design view and then Xamarin for getting it into monodevelop. This is what I am truly excited about!
You are correct! I had them open in different windows and got sloppy, my bad!
I like to give little tests on subjects they have no idea about. I had a few different simple concepts that I could ask. For example, write and read a message from MSMQ, or read and write an ini file, or something like that. I would ask the interviewee if he knows a specific subject, and assign him with the task he knows nothing about. I gave him a computer with all the tools he needs, internet connection, and an hour of alone time. After an hour I would check whats going on. Usually at first look of the code produced I could measure how good the developer was. The point was to see how quickly the person learns and what quality is his code when working "under pressure". This method hasn't failed me once but some places didn't like this method and wanted me to go back to interview questions, which I hate.
At my last company my boss hired someone who could talk the talk but not walk the walk. We told him not to but he was desperate for bodies and figured it was for the better. I gave him an extremely simple task (actually one that inspired the second task of the interview test I described) and it went terrible. It got to the point where I told him "if A equals B then do C", followed by "type if", followed by "double equals"... After that I went straight to my manager's office. He was a try/buy that moved from another state for the job and my boss couldn't believe he was that bad, so he had him pair with 2 of the other developers who both had similar issues with him. He supposedly had a masters in comp sci from NYU, 10 years development experience, and he actually thought everything was going very well. When his firm contacted him he was in tears (from what I heard) because he didn't understand why he wasn't working out. The incompetence of the majority of candidates never ceases to amaze me. I felt bad for the guy, but if you lie on your resume that bad, and accept training from your recruiter to talk the talk and then attempt a job, there's only so much emotion I can output for him. On a similar note, never work for a body farm. I can't believe how many people think it will actually work out. The only thing I hate more than someone who intentionally goes for these places so they can get a job without being capable is the people who run these places. Luckily once an employer realizes the complete worthlessness of the "talent" coming from one firm, they typically don't work with them anymore. /rant
Do you let them know that it is okay to scour the Internet, because if I wasn't told that I wouldn't touch the Internet with a ten foot pole. 
Yes, I let them know they have full internet access and can use any resource they have including past code. Since the subject is completely new to them, I don't care if they have existing components for logging or what ever, I'm after seeing how well they can learn something new and general code quality.
Do they have a release date yet for Resharper 7? I just got 6 not too long ago, I'm hoping for a free upgrade!
R#7 is to be released sometime within a month. You qualify for a free upgrade if your v6 license was purchased on or after June 1 this year.
we bought some licenses shortly before june and a quick e-mail to Jetbrains resulted in free upgrades for us. Your mileage may very, but Jetbrains is a company I love dealing with
I agree. Unfortunately, it's bringing all of the great parts of IntelliJ IDEA to Visual Studio, and introducing performance like IntelliJ IDEA. :(
I agree that it's inexcusable but experience shows that it's usually a combination of factor contributing to typing lags, not exclusively ReSharper. We'd love to know if ReSharper 7 is better for you in this regard - you might want to try one of the newer [EAP builds](http://confluence.jetbrains.net/display/ReSharper/ReSharper+7+EAP) to find out.
I'm definitely willing to try it out as I think it's an awesome product. If I recall correctly, the default settings reflect best coding practices. Many features are turned on by default. It would be nice if there was a fast and minimal configuration that was easy to load without going through a million checkboxes. I'd rather opt-in the features instead of having to opt-out all of the poorly performing ones. With the default settings I felt like I was typing on a terminal over a 300 baud modem. It doesn't help that VS 2010 itself performs like a dog compared to previous versions. I don't have my exact machine specs atm but I remember it's a quad core xeon (16 procs/threads) with 24 gigs ram. It should have no problem running a VS plugin. 
The performance is horrific though at the moment. Which makes sense, since all of it is beta right now, the OS, VS and ReSharper itself.
Can you please provide us with a performance snapshot to investigate your performance issues? You don't even need to get a profiler for that: in v7, there's a new command under ReSharper &gt; Help called Profile Visual Studio that simplifies taking performance snapshots. Thanks!
Sure, this is a popular request these days. Just got to think it over and implement. Can't commit to a schedule right now but what you could do is vote for the corresponding [feature request](http://youtrack.jetbrains.com/issue/RSRP-62012)
Guess who coded this method game.. 
Nice, simple baseline implementation with quite a bit of extensibility factored in. Nice! My only quibble is that it's begging for code sprawl in a many-developer environment; having the register interface both immediately accessible and allowing for virtually any lifetime scoping would, in my past experience trying something similar before di containers became popular and feature-laden, lead to many hard-to-diagnose bugs wrt the quantity and lifetime of "dependencies". That said, if you were to wrap this interface and make it internal, making in the various lifetime control methods you point out, it could be a very powerful and easy-to-introduce way of adding dependency resolution. You have my upvote, sir.
I was going to call you out but I later found that it's in the comments that they announce EF6 will come with the required goodies to support enums in .Net 4.0. Good catch and good news.
Took six versions? That's pathetic. 
Actually, EF6 is fourth version (there was jump from 1 to 4). Moreover, EF 5 already has Enum support, it's just tightly coupled with .Net 4.5
Now with even more ram usage...
Yeay... another expensive version upgrade just a view months after we bought a bunch of ReSharper 6 Licences... No thanks man, i won't do this error again!
I did the same thing. They were quite accommodating when I asked nicely. 
Oh really? Any evidence please?
Upgrade to 7 in 9 months then, and there's your yearly expense ) No really, we're not forcing anyone to immediate upgrade.
If you email them they'll probably give you the upgrade for free.
I am in the same boat as you. Luckily version 6 runs like a dream.
just empirical evidence where every previous version required more than the last.
I was going to suggest this approach as well. A combination of MembershipProvider and RoleProvider.
Membership provider is a solid security framework and IS the best practice for secure development (that or some other mature security tool set, most are not free however). Always try to avoid rolling your own auth system. The capabilities of the provider framework are dictated by the provider you use. There are a number of providers available out-of-the-box including: * SqlMembershipProvider - Uses MSSQL (might work with others, never tried) and leverages a pre-established schema. Provides some opportunity for tuning and additional fields through joins on a attributes table. Only supports Roles (no groups) and only members may be in roles (no roles inside of roles). Great for a simple application without a complex taxonomy. * ActiveDirectoryMembershipProvider - provides full integration with active directory. Note that this particular provider does require the AD admin to add some fields and types to the AD store. You have the full capabilities of active directory at your disposal including complex grouping and structure. Note that some things you may want to do in your application flow may require you to use ADSI to update the AD store or read an extended value. This should only be needed in classes that handle things like login or user registration and possibly a common item or profile page Now you may find things lacking, if you do you may write your own security provider. These are not too hard to write and are not huge however can be complex depending on what your data source looks like. I have written simple providers that read text or xml files and very complex providers that tie together multiple directories and services. One thing to keep in mind is that the membership API exposes a lot of methods and fields for security processes, user data, context, etc. If the provider you are using does not support a feature in some cases you will get null in others you may cause a runtime exception. If the application you are writing is meant to swap out providers easily in the future you need to ensure your code handles for this and does not invoke methods or try to use objects that are not available when the provider does not support them. The API at this point is a little dated however quite functional, if you have any trouble shoot me a msg. [Reference if you havent seen it yet](http://msdn.microsoft.com/en-us/library/yh26yfzy.aspx)
For the C# folks out there, I've learned a ton from James Michael Hare's posts: [blackrabbitcoder.net](http://blackrabbitcoder.net) I also like [The Morning Brew](http://blog.cwa.me.uk/).
ah, forgot about the morning brew. great one ty! 
Just curious - what is your fancy new RSS reader?
It hung on startup for 10 minutes, no CPU or disk, so I killed VS. Then I rebooted VS and it came up, but there was no error / syntax highlighting. All the resharper font color settings were mising. I reinstalled RS7 but it didnt help. It is finally resolved this morning. I had to install RS6, then RS7 again.
/r/newversion
Guess it's not super fancy. Just new to me :) http://www.feedreader.com/ Like it cause it's pretty simple, and notifies you in the task bar when there are new posts.
Looks fancy enough for me! Thanks, will check it out.
ServiceStack.net !
that's great if you don't mind IIS and want basic HTTP functionality; WCF does a lot more than that. I will admit that the learning curve is steep; way too steep for basic HTTP services.
Downvoted. This site/domain is just a content/spam farm. 1. Bottom of the page- "Amazon Deals" 2. Link 'badges' from 1999 on the right menu bar. "Blogdigger", "Blog Links", "Blog Top Sites", "Blog Fusion". 3. "Posted by imranghani ". If you were a real developer, you'd put your name on it. 4. Search box is titled "Web Search Engine". Sorry, a real site would just title it "Search". Reported as spam link farm site via Blogger toolbar. 
Ugh, no. JSON sucks for .NET clients, and HTTP sucks even more. Give me WCF over a binary transport any day. And get IIS out of the equation if at all possible.
I recommend asking the client developers what they want. On the server side the difference between XML, JSON, SOAP, etc. is usualy trivial. On the client, it is a huge difference in effort.
Are you serious? Maybe you have been doing the HTTP requests with WebRequest class and manually parsing the JSON? Using JSON over HTTP is really easy with ASP.NET Web API. Looks something like this: var client = new HttpClient(); var customer = client.GetAsync&lt;Customer&gt;(); No need to update proxy classes, having all the configurations for client and server. You can of course use binary transport but JSON over HTTP is something that everyone can work with. You can also self host if you don't like IIS.
I have not used or even heard of this new provider. Runs to google....thank you!
VS2012 and assorted upgrades are, for me, more stable than any previous releases (after that one hick-up with VS2010 SP1 a few months ago, and the hanging await issue). Safe now. The advantages of starting now are Asynch, Asynch, Asynch, Razor, WebApi, custom asych-routing, easier-to-do-minimalist-MVC. (For me.) So I am serious about it now. Also, get a quick start on learning how to clean out the next generation of bloat from all the starter projects and streamline your directory structure for new projects, and nail down your less/sass/etc build and packaging routines, etc. etc. I say, load it up, and clean it up now and you can use it much more effectively for the next couple of years. And, Asynch, too. Oh yeah, and Asynch. You're talking web, right? Yeah, Asynch. Get them little thread-pool threads connecting/disconnecting like solenoids in a 1950s computer. However new you are, hands-dirty is always my rule of (dirty) thumb. Make one each of several solution-types, write an asynch web request engine, and load test them all yourself to see what kind of performance you can get!
Yeah it's weird it's not being promoted more. I was just done making my own custom provider with EF and good strong hashing. A week later I hear about this. That said it works like a charm. Grabbed it from Nuget, gave it a connection string and off I was. About time they updated the crappy old SqlMembershipProvider.
Thanks! Actually not too much hate if put in perspective but we're working on that )
feel free to help me out! announcements of new software are of interest to many people, hard to track across many reddits, and clutter them. it's nice to collect them in one place with comments from users.
Personally, I would stick around; I mean, you get to learn a new language/platform on someone else's dime! I've always believed that the best devs are those that are experienced with multiple languages; you often learn things that are more broadly applicable. Not to mention that it makes you even more marketable...
I say go for it! It's not like you're going to suddenly forget your ASP.NET skills. Tenuously-related anecdote: I was pretty fluent in Spanish in college, but then didn't use it for many years. Recently spent a weekend immersed in Spanish again, and was surprised at how quickly it came back to me. Your fortune cookie says: "The path of least resistance is the path of least success."
Does it have to be Java, or just JVM? I'm a C# developer learning Clojure, and it rocks.
I go back and forth between Java and C# all the time. You are probably going to get absolutely zero out of Java training. Do a few code reviews with a seasoned Java developer on your team, and you'll get the idiomatic differences pretty quickly. The largest nuisance coming from a C# perspective is the lack of properties and checked exceptions. There are some other interesting differences, for example plumbing with streams in Java is fun, but XML is a major hassle. The cognitive dissonances between the two languages build character, promote plasticity of mind, and will give you better insights into both languages. Also, check out Joshua Bloch's "Effective Java" book.
Stay, learn Java, then become really good at converting apps between the two. There is a career in there.
I started Java initially and now working in Microsoft .NET. Its always gives a better understanding of the technology and helps in making right technological decisions.
Same here, Java all in high school, Java throughout most of my CS courses in college, and I work mainly with .NET now. 
It's not all that bad. I would welcome the change every now and again. Go for it.
public boolean CSharpIsJava() { return C#.equals(java); } System.out.println(this.CSharpIsJava()); Output: True
&gt; [Better] to die with honor rather than fall into the hands of [the] enemies (and likely suffer torture) [Seppuku](http://en.wikipedia.org/wiki/Seppuku)
C# is a much better Java.
learn java!
Platforms and languages are only tools. They are not a religion and are certainly not a career. Take the opportunity to learn some new skills.
Ah yes, "thread agility"; I've been stung by that before... I do like your framework, however. What sort of usage license are you going with, out of curiosity?
Depends where you're from, but where I'm from, it's a .Net market. I know in Washington it's a complete Java market. So I think you should look at your market and decide based on that.
As someone with significant experience in both Java and C#, I don't consider Java different enough to be "expanding skill set and learning new things". You'll be learning the same things, with slightly different implementation, and inferior tools (imo). Now I don't know what your market is like, but if I were you, I would look for a new (higher paying!) .NET job. Besides, more often than not, it's depth that'll make you stand out, not breadth. 
I first learnt about the MVC pattern programming in Java, using JSP. I was so happy when MVC was released, I had been using webforms for 3 years prior.
When MVC came out I was overjoyed to be able to walk away from Rails forever.
I've been on Castle Monorail for the longest time. Made the leap to ASP.NET MVC for the better tooling around the time MVC2 got released. I'm also using the Play Framework if I need to deploy to a Java server (Scala is pretty damn sweet). I'm not that fond of Ruby, to be honest. Prefer Python and thus Django for my personal hobbyist projects.
[Python Tools for Visual Studio](http://pytools.codeplex.com/) :)
That's cool - another good anecdote about how diversity in knowledge can make you a better dev!
I've worked with a dynamic LINQ query once and found this very helpful: http://weblogs.asp.net/scottgu/archive/2008/01/07/dynamic-linq-part-1-using-the-linq-dynamic-query-library.aspx (The post has a sample code download link) I have to mention that the query most likely will be hideous to look at (if it can be done of course) with all sorts of stringly-typed stuff in there. Hope this will get you there :-)
Visual Studio help was improved so much that I use it constantly now. It gets even better when you have it installed as offline content.
It's a great feature, but definitely nothing new, has been around since Visual Studio 2005 at least.
ah my bad then, or maybe i am coming late to the game, using Visual Studio since 2003 and found it only yesterday :(
I don't like the VS help, it takes way to long to open. I usually rebind the f1 key to an other command.
Code Academy just launched their new [Python course](http://www.codecademy.com/tracks/python). It sorta works in the same way that rails for zombies does where you can learn " in browser ". 
I had toyed with that before hand and while I can create a dynamic update to a specific table, I can't dynamically assign the table. I came up with a short piece of code that dynamically creates the SQL query itself but I dislike having to go "back" to using SqlConnection and the like versus finding a linq'y way of doing it.
I'm almost certain this is new. It now takes you to the MSDN website instead of spinning up that god awful helpviewer which is the behavior in VS 2010 I remember with VS 2002 that clicking F1 was pretty much a guarantee you just wasted five minutes of your time as it updated itself and slowly pulled up the documentation
I just tried it and it is indeed better, thanks for the info!
What a really poorly written article.
About as much as bing killed google search sure. 
I couldn't find it on MSDN.... 
Washington is a huge market, so I don't know. I know that Amazon is there and they are huge, and it's all java.
MSDN comes out next week. 
EF Code First gives you a similar experience. You add the property to your class and it will generate a DB Migration script for you. Note that is isn't a SQL script, it's a class with "Up" and "Down" methods - just like in ActiveRecord for Rails. 
Throw in VLC player. One size fits all. Mono Framework/Eclipse? Any sort of git-like add-ons? Edit: the Excel sheet that has Registry locations for all GPO settings
This is pretty sweet. Some of the links are broken but most of the ones I clicked on were there. This is one of the great steps Microsoft is making towards encouraging development. Linux really took a chunk out of that market and stuff like this is what will bring people back. I like seeing it. 
I think ASP.NET MVC is at a stage where I don't think it matters whether you learn Rails or ASP.NET first. I think MVC 3 was such a huge step forward that it's pretty much comparable to Rails/Django/whatever now-a-days. Back in the MVC 1 and 2 days, Rails was still ahead but MVC 3, along with Razor, NuGet, etc. have changed that. For the first time ever, I actually have faith that they will keep improving AND do it while following standards and commonly accepted practices. BTW anyone interested in MVC frameworks, I highly recommend checking out [NancyFx](http://nancyfx.org/) and [FubuMVC](http://mvc.fubu-project.org/). Both are awesome projects. They differ slightly from the ASP.NET version but they are definitely worth checking out, even if it's just to learn.
Just an FYI - Microsoft provides a decent set of tutorials for ASP.NET MVC as well: http://www.asp.net/mvc http://www.asp.net/mvc/videos (the Pluralsight training is pretty good)
http://www.hanselman.com/blog/ScottHanselmans2011UltimateDeveloperAndPowerUsersToolListForWindows.aspx
Either or. Just list some of your favorite productivity and development tools.
It should be available for download on the 15th. The RTM term is confusing, I admit.
Yeah I like LinqPad a lot.
So I'm not familiar with NuGet for anything other than downloading project templates - what does it bring to the table? What sort of components are available on there and how would you use one in a project?
you can choose between local help and online help which is the good n old msdn web page in your default web browser on vs2010.
Bing could replace Google for search. The cost of switching is nearly free, making it a rather competitive market. Switching email addresses... not so much.
I recommend you get very, very familiar with it ASAP. It's basically a package manager for components with support for running scripts. Lets say you want to add an IOC framework to your project or an ORM framework. Run NuGet, search for the component, click install. Boom, the latest version of that component is downloaded to a nice location in your solution, references are added to your project and depending on the component, the project's configuration file is modified, files and folders required to integrate the component are added to your project. There's even a Nuget console that runs Poweshell that can run commands on those components so if for example you want EF 5 Migrations to create a new migration file, I type in "Add-Migration v2.1" and the component will run and add the necessary files in my project so I can migrate my DB schema to version 2.1. Why do I think this is so important? Because more and more, that's how you'll most of the Microsoft sanctioned components from ASP.Net MVC itself, Entity Framework to JQuery. Having to wait for a new version of a component to come with Visual Studio is already becoming more and more rare but they are aiming at the .Net Framework really only being the core and all these nifty tech to come separate and release at their own leisure (ASP.Net MVC was kind of the trendsetter). I haven't seen it yet in use but you'll also be able to get [recipies](http://haacked.com/archive/2011/09/21/writing-a-recipe-for-asp-net-mvc-4-developer-preview.aspx) via Nuget but I expect people to offer cool stuff with it. I just made a quit search and [this guy](http://www.luppes.com/foodtruck/Tutorial) made a kind of scaffolding tool that takes a database schema, asks you a few questions and generates a bunch of views/controllers to CRUD it. Reminds me of Rails!
fiddler, notepad++
How does this compare to LinqPad? http://www.linqpad.net/CodeSnippetIDE.aspx
Also the [Visual Studio plugin](http://visualstudiogallery.msdn.microsoft.com/295fa0f6-37d1-49a3-b51d-ea4741905dc2) for O2 breaks my VS2010 by turning all the [dialog boxes black](http://i.imgur.com/Y2fBP.png) (e.g. create project, view extensions, etc...). And http://tiny.cc/O2Platform is broken. Also, pretty amazing stuff.
First one I install is the [O2 Platform](http://diniscruz.blogspot.co.uk/p/owasp-o2-platform.html) which (amongst other things) gives me a bunch of installers and the [C# REPL Script Environment](http://www.reddit.com/r/dotnet/comments/xjpsr/c_repl_script_environment/) (see this [comment](http://www.reddit.com/r/dotnet/comments/xjpsr/c_repl_script_environment/c5otm5k) for the difference between O2 REPL and LinqPAD) Disclaimer: I'm one of the O2 Platform developers :)
or a NuGet package
Why do we keep getting these shitty blog posts here. Your posts aren't about anything we couldn't read on the Microsoft website.
why not just use IIS and WCF?
Is this subreddit even moderated?
Thanks for your comment. This is the client part. It can be used to test any rest service, say for example one that is hosted on IIS and built with WCF.
$49 single license, $149 per enterprise license, and $949 for enterprise. Good luck with that... [Free](http://code.google.com/a/eclipselabs.org/p/restclient-tool/) [Free](http://code.google.com/p/rest-client/) I could go on and on....
Thank you very much! Your comment just made my day.
haha, well written my friend. learned something and laughed even more, its the reddit way.
I like how quickly you read that article and commented enthusiastically. I also like how you are not an obvious spamming sockpuppet or something like that.
Let people use whichever tools they prefer. The only essential tool is Visual Studio
Looks good but I'm still learning WPF and its already been relegated to legacy exams...
I have the web developer 4 cert. and took the beta for HTML 5 and CSS 3. If I pass that one I can upgrade right away. Its sucks if you are half way into web or application developer 4 though :-(
I would recommend checking out PluralSight (http://www.pluralsight-training.net/microsoft). They have a ton of content for C#, MVC, ASP.Net, Software Practices, Architecture, and tons of other topics. I've found that the videos are a bit of a time commitment, but worth it in the long run. They have a free 30 day trial and I believe some Microsoft courses are free as well. It's been hugely helpful in getting me up to speed on certain technologies, then moved me into learning more about best practices and optimization. I hope that helps.
How so?
Useless or not, if I were given the choice between two devs with roughly the same amount of experience in say ASP.NET or something, the certified (with an ASP.NET cert of course) one would score higher on my list. (I have to admit though, if I had to pay for them myself -screw them certifications- they do not come cheap at 150 euros.) Edit - clarification.
Oh my, the double negatives kill me. :) So you are telling me all of them were horrible? 
Javascript, HTML5 and css3 being transferable skills may possibly mean this gets a little more respect in the community. Although if it's easily passed with a few hours study maybe not. I wouldn't think MS value this one as highly as their SharePoint/BI/Project exams though.
Do you need to use WCF? you could go for something like the new WebAPI framework instead.
I have used wcf a few times just looking to expand my knowledge. Its not always wen related.
Yeah and I spend my day job maintaining a bloated over engineered mess that was created by someone who went on one of his courses. You shouldn't need to keep going back to a book... Simplicity is a feature IMO.
And I'm guessing you don't use any reference material at all? Google is over-rated. Us hardcore geeks code by hand in a vacuum, right? I removed the F1 key too. ; ) www.servicestack.net has its place. REST has its place. WCF has its place. Reference material has its place. Use the right tool for the job/team/product/budget. The OP asked about WCF resources, and you suggested to avoid the best book out there on the subject bar-none, and that was the extent of your advice... but I guess the classic definition of bad code is any code you didn't write yourself... sorry to hear you struggle in your day-to-day as a result. I think that is a better problem to have than the majority of legacy systems that many developers maintain. At least the guy before you made an attempt to do it right? I dunno. tbh, I've had someone say similar things about my work... I struggle to understand how enabling security is 'over-engineered' if you are writing code for a business. or transactions, or queuing... okay, if he wrote some custom channel interceptors and some crazy stuff, sure that might be over-engineered... or if the system was so trivial it needed none of those, maybe then too... buuut that's what happens when ruby developers are left with ownership of c# code.. it's all over-engineered at that point. Simple != Easy.
How could just talking about Linq kill your interview? There has to be more than that. 
I've been interviewing a lot lately, previously at Microsoft, and lately at a startup (I'm hiring 35 engineers over the next 2 years). I have a theory of what's happening. Just some thoughts, I wasn't there... The way you need to answer a question in an interview isn't the way you'd solve a problem on the job. Your goal in an interview is to prove that you have fundamental software development skills and not just a monkey at a keyboard. Getting answers 'right' isn't enough. If you strictly discuss high level concepts it could mean two things: You 're either a VB programmer type (or more commonly these days, a JS/PHP webdev), and don't know how things work under the covers. Or you might be really good, and know that the higher level abstractions are more productive, and you might know exactly how they work. If you don't demonstrate that you're the latter, i.e. show that you don't just know how to us LINQ, but also that you could have implemented the operators yourself, then it's hard to tell, as an interviewer, that you're not a copy-pasta developer. Here's what I would like to see when discussing LINQ: 1) talk about the big-O of certain operations. Sorting, joining, etc. 2) talk about how some of the operators would be implemented, different tradeoffs you might consider such as code complexity vs. efficiency, etc. 3) talk about why you consider LINQ a better solution to a problem than writing your own imperative query. 4) compare how you'd do something similar in different languages and show how C# syntactic sugar translates intothe method call equiv. Every good developer knows many languages, and can pick new languages up quickly...demonstrate that! And most of all, constantly speak what is on your mind. Interviewers aren't mind readers...your thought process is more important than the correct answer.
From reading the post it sounds like you were using your LINQ abstraction as a [golden hammer](http://en.wikipedia.org/wiki/Golden_hammer). 
*Yeah, I'd parse that HTML using some RegEx*
I've had Resharper suggest to convert some of my imperative code to loops. It is pretty cool to collapse 10 lines of code into one tight line. But it makes it apparent that you aren't doing magic with LINQ - it is just a convenience. Like an ORM, it can take away some of the drudgery, but you have to understand what is going on under the covers or it can bite you in the ass. As far as job interviews, I bet it just tied to whether the place is a Microsoft shop or not. If they are, you better bring it up or you will look out of touch. If they aren't, there is no point in bringing it up.
Came here to say this.
Signing up with Microsoft's BizSpark will give your company access for up to 3 years.
Ah, my bad. I guess that's why technet is cheap comparatively.
2-5 hours each day
I'm in Seattle. It's a very mixed market, between Java and .NET. You'll find lots of startups and such working in Java.
You can also try Microsoft's Website Spark http://www.microsoft.com/web/websitespark/
Dreamspark license is for non-comercial work only.
Not sure.
Try EditedFormattedValue.
If you qualify, become a Microsoft Registered Partner, and then order the Action Pack Design &amp; Development, which includes Visual Studio Professional.
My company has been with BizSpark for more than 3 years. They'll extend it. :D
I think the question was about "improving skills and knowledge", not "surfing reddit". ;)
looks like I got it - this is awesome! thank you very much *edit - okay this looks like it works! Private Sub dgvFilter_EditingControlShowing(ByVal sender As Object, _ ByVal e As System.Windows.Forms.DataGridViewEditingControlShowingEventArgs) _ Handles dgvFilter.EditingControlShowing Dim tb As TextBox = TryCast(e.Control, TextBox) If (tb IsNot Nothing) Then RemoveHandler tb.KeyUp, AddressOf tb_KeyUp AddHandler tb.KeyUp, AddressOf tb_KeyUp End If End Sub Private Sub tb_KeyUp(ByVal sender As Object, ByVal e As System.Windows.Forms.KeyEventArgs) Dim c As DataGridViewCell = dgvFilter.CurrentCell Dim s As String = c.EditedFormattedValue.ToString Me.lblFilter.Text = s End Sub
Glad to hear it :) I only discovered it like 2 days ago myself...
I guess it all depends on which startup you look at. :)
He. I know, it really is a time-sink. But in all seriousness, stuff adds up. Books, stack overflow, man-pages, articles, programming rss feed (tons of new stuff every day). When I only did C, new things didn't happen that often. But then C#, Java, Javascript frameworks, nosql databases, Linux administration, monitoring systems Nagios alone could eat a month out of my time, Python (and the frameworks: flask, bottle, bruebeck), wsgi servers, and others uWSGI, gevent, gunicorn .. message queing systems .. I could go on. Your feed fills up, and the magic number is 1000+ unread, no matter what you do. 
We just started using NCrunch on our line at work and it's a pretty awesome to see real-time feedback of your tests breaking as you modify code.
It's amazing how much of that crap is of no real consequence at all until the very moment you need to set it up or program it. Then it's critical. Then you forget all about it until you need to change it or fix it someday. Blech... It's a good thing developers can learn and forget crap like that at a speed which most people don't really believe until they experience it for themselves. I'm not saying we're superhuman or really special, but I find most people do not push themselves in this regard at all.
This software is a little too "gimmicky" for me. There's value in understanding what code is breaking unit tests, but it comes at a cost of performance. If you're a keyboard jedi using resharper and testdriven.net, you can develop rapidly and receive feedback in a faster way by writing and running tests in a more traditional way.
I'd agree with getting the Express edition, but this is correct. If you are student, you are likely able to get access to MSDNAA and get Visual Studio Pro for free. You have to download it though. If you want a physical copy you have to pay like $10 or $20 dollars.
Here's a list of stuff I had installed on my work laptop right before it died. Our IT dept actually inventories our software so we can reinstall. Here it is: * .NET Framework Async CTP * Adobe AIR * Adobe Anchor Service CS3 * Adobe Asset Services CS3 * Adobe Bridge CS3 * Adobe Bridge Start Meeting * Adobe Camera Raw 4.0 * Adobe CMaps * Adobe Color – Photoshop Specific * Adobe Color Common Settings * Adobe Color EU Extra Settings * Adobe Color JA Extra Settings * Adobe Color NA Recommended Settings * Adobe Default Language CS3 * Adobe Device Central CS3 * Adobe ExtendScript Toolkit 2 * Adobe Fonts All * Adobe Help Viewer CS3 * Adobe Linguistics CS3 * Adobe PDF Library Files * Adobe Photoshop CS3 * Adobe Setup * Adobe Stock Photos CS3 * Adobe Type Support * Adobe Update Manager CS3 * Adobe Version Cue CS3 Client * Adobe WinSoft Linguistics Plugin * Adobe XMP Panels CS3 * Anki * AutoIt v3.3.8.0 * AutoIT-Recorder * BrainWave Generator * Bulk Rename Utility 2.7.1.2 * CamStudio * CamStudio Lossless Codec v1.4 * Crystal Reports for Visual Studio * CutePDF Writer 2.8 * Delphi 7 Second Edition * Dia (remove only) * Directory Submitter 1.0.29 * Dotfuscator Software Services – Community Edition * F-Secure SSH Client * Fences * Fiddler Syntax-Highlighting Addons * Fiddler2 * FileZilla Client 3.5.3 * Gnaural ver. 1.0.20110606 * Google Drive * Google Update Helper * IBM Installation Manager * IBM Rational Team Concert * IcoFX 1.6.4 * IIS 7.5 Express * Intel® Active Management Technology * Java(TM) SE Development Kit 6 Update 24 * Java(TM) SE Development Kit 6 Update 29 * jv16 PowerTools 2011 * LinuxLive USB Creator * MagicDisc 2.7.106 * McAfee Agent * Microsoft ASP.NET MVC 2 * Microsoft ASP.NET MVC 2 – Visual Studio 2010 Tools * Microsoft ASP.NET MVC 2 – VWD Express 2010 Tools * Microsoft ASP.NET MVC 3 * Microsoft ASP.NET MVC 3 – VWD Express 2010 Tools Update * Microsoft ASP.NET Web Pages * Microsoft ASP.NET Web Pages – VWD Express 2010 Tools * Microsoft CAPICOM 2.1.0.2 SDK * Microsoft Office 2003 Web Components * Microsoft Office Enterprise 2007 * Microsoft Office Office 64-bit Components 2007 * Microsoft Office Visio Viewer 2007 * Microsoft Silverlight 3 SDK * Microsoft Silverlight 4 SDK * Microsoft SQL Server 2008 (64-bit) * Microsoft SQL Server 2008 Browser * Microsoft SQL Server 2008 Common Files * Microsoft SQL Server 2008 Database Engine Services * Microsoft SQL Server 2008 Database Engine Shared * Microsoft SQL Server 2008 Management Studio * Microsoft SQL Server 2008 Policies * Microsoft SQL Server 2008 R2 Data-Tier Application Framework * Microsoft SQL Server 2008 R2 Data-Tier Application Project * Microsoft SQL Server 2008 R2 Management Objects * Microsoft SQL Server 2008 R2 Management Objects (x64) * Microsoft SQL Server 2008 R2 Native Client * Microsoft SQL Server 2008 R2 Transact-SQL Language Service * Microsoft SQL Server 2008 Setup Support Files * Microsoft SQL Server Compact 3.5 SP1 Query Tools English * Microsoft SQL Server Compact 3.5 SP2 ENU * Microsoft SQL Server Compact 3.5 SP2 x64 ENU * Microsoft SQL Server Compact 4.0 x64 ENU * Microsoft SQL Server Database Publishing Wizard 1.4 * Microsoft SQL Server System CLR Types * Microsoft SQL Server System CLR Types (x64) * Microsoft SQL Server VSS Writer * Microsoft Sync Framework Runtime v1.0 SP1 (x64) * Microsoft Sync Framework SDK v1.0 SP1 * Microsoft Sync Framework Services v1.0 SP1 (x64) * Microsoft Sync Services for ADO.NET v2.0 SP1 (x64) * Microsoft Team Foundation Server 2010 Object Model – ENU * Microsoft Visual C++ Compilers 2010 Standard – enu – x64 * Microsoft Visual C++ Compilers 2010 Standard – enu – x86 * Microsoft Visual C++ 2010 x64 Designtime – 10.0.30319 * Microsoft Visual C++ 2010 x64 Runtime – 10.0.40219 * Microsoft Visual C++ 2010 x86 Runtime – 10.0.40219 * Microsoft Visual F# 2.0 Runtime * Microsoft Visual Studio 2010 Express Prerequisites x64 – ENU * Microsoft Visual Studio 2010 IntelliTrace Collection (x64) * Microsoft Visual Studio 2010 Office Developer Tools (x64) * Microsoft Visual Studio 2010 Performance Collection Tools SP1 – ENU * Microsoft Visual Studio 2010 SharePoint Developer Tools * Microsoft Visual Studio 2010 Ultimate – ENU * Microsoft Visual Studio Async CTP * Microsoft Visual Studio Macro Tools * Microsoft Visual Web Developer 2010 Express – ENU * Microsoft Web Deploy 2.0 * Microsoft Web Platform Installer 3.0 * mIRC * Mobipocket Creator 4.2 * Mozilla Maintenance Service * MSVCRT * MySQL Workbench 5.2 CE * NetBeans IDE 6.9.1 * Notepad++ * NuGet * NVIDIA Display Control Panel * Quincy 2005 v. 1.3 * SciTE4AutoIt3 12/29/2011 * Security Update for Microsoft Office system 2007 (972581) * SEMA-Client * Setup1 * SharpDevelop 4.0 * Site Map Builder.NET * Skype Click to Call * Skype™ 5.8 * SolveigMM AVI Trimmer * Sql Server Customer Experience Improvement Program * Telerik Extensions for ASP.NET MVC Q3 2011 * Telerik RadControls for ASP.NET AJAX Q3 2011 * Telerik RadControls for WinForms Q3 2011 SP1 * Telerik RadControls for WPF Q3 2011 SP1 * TeraCopy 2.12 * The Guide * The Regex Coach 0.9.2 * Visual Studio 2010 Prerequisites – English * Visual Studio 2010 Tools for SQL Server Compact 3.5 SP2 ENU * Vuze * WCF RIA Services V1.0 SP1 * Web Deployment Tool * Windows Grep 2.3 * Windows Live Communications Platform * Windows Live Essentials * Windows Live ID Sign-in Assistant * Windows Live Installer * Windows Live Language Selector * Windows Live Photo Common * Windows Live PIMT Platform * Windows Live SOXE * Windows Live SOXE Definitions * Windows Live UX Platform * Windows Live UX Platform Language Pack * Windows Live Writer * Windows Live Writer Resources * Windows Movie Maker 2.6 * WinMerge 2.12.4 * WinPcap 4.1.2 * Wireshark 1.6.5 * XAMPP 1.7.4 Tons of free stuff in there, this is from the view of a Polyglot, I do a lot of stuff with different languages and platforms, not just .Net
Thanks for the incredible list. I really, really appreciate the time you took.
Please post another reply after using NCrunch in anger. Let NCrunch run the tests and save your Jedi tricks for the code.
I envy that. I have trouble keeping up with .NET alone.
I have found that by knowing it exists, makes me capable of making better decisions. I might not remember how to set it up, but I did once, and can again. To me programming is not learning a language, it's learning the foundation of it, and then applying that knowledge to learn many. You should specialize, or, you will have to, if you want a decent paycheck. But you are right, it's not easy at all, and having someone ask you to add features to something you haven't touched for a year is horrible, all I can think is "Who was this idiot who wrote this. You can refactor the crap out of this, this code should not be here, why didn't he (and he is always me) separate his concerns better" Anyhow. I wouldn't do anything else.
Are you me? *"Omg.. who wrote this shit?! What idiot would... Oh."* Every. Damn. Time. :)
I did not know that, where does it give feedback?
A tool window labled "Test Explorer". By default it runs the tests on every build. It looks as NCrunch may be a bit more sophisticated, but I don't think it will be enough to survive.
Right. Stuff like using two-way SSL protected messages over TCP. 
Ahh cool I will give it a look. Wish they'd of kept VS2010's skin to be honest, it's the biggest downer. 
The test runner for VS 2012 has a pluggable model and should support most or all unit test frameworks. 
The lack of decent documentation is my biggest gripe. All this power and no way to access it.
Bizspark is a phenomenal deal. You also get a bunch of Azure credit. You do have to be a legitimate company, though. Not sure how they measure it, but they do some vetting. I went to a startup conference where a Microsoft person spoke. She said "if you are in a startup, don't give us any money, we don't want it" This also gives you licenses to all the Office stuff as well. 
Why would a developer need VLC?
wrong sub
LOL...Sony VAIO. BTW maybe your hard drive needs a replacement.
The configuration that I needed help with is specifically for .NET development, so I chose this sub.
Step one is buy yourself a nice 120gb SSD drive. It will make your computer feel fresh. Then buy an external enclosure for your existing drive so you can connect it. Seriously, I have a four year old machine , nothing fancy. Four gb of ram and a dual core proc. my machine goes from post to visual studio plus outlook plus all my tray utils in under 15s
Can't stress the SSD enough!! Made my 4 year old laptop faster than my brand new desktop! (at least until I upgraded my desktop... It's freaking fast now!)
Anyone hear any news yet? Or is everyone F5'n msdn's website like myself? :)
got it and Windows 8 today
Anyone know what their plan is with Expression Blend? Expression Blend 4 doesn't work with VS 2012 or TFS 2012. It seems like Expression Blend 5 is focusing on Silverlight/Metro apps. I can't find any info on whether they still plan to support WPF with Blend.
I've been looking for this for awhile but it looks like they just posted about it today, here's a page with the download link: http://blendinsider.com/technical/announcing-blend-sketchflow-preview-for-visual-studio-2012-2012-08-15/
Yeah you tend to need to upgrade to the latest W8 release. The error messages could be a lot clearer though...
What? Win8 is RTM?? I thought for sure they would cave on metro first and we'd see it later in the year.
No, string.join is faster than stringbuilder. Concatenate is the slowest.
Well... this is easy to say without seeing the context, but, I think you need to think about how users access content. Does everybody who goes to this page need to see all 15 tabs? If not, you can break those up into different pages with less stuff. Another approach, of course, would be to make the information on each tab not exist unless that tab is active. This can be done by making the tab content into user controls and then controlling when what controls are loaded.
What you may find on pages that have lots of panels and controls within those panels is that the viewstate can reach upwards of 1MB. That means every single time an AJAX call is made, the entire viewstate must be sent across the line and then sent back. So in a worst case scenario we are talking about a simple button click generating 2MB of traffic. As others said the best approach would be to break the content up if possible but in the short term you should evaluate which controls truly need viewstate enabled and turn it off on any control that does not need it. Also to confirm viewstate size is a problem, copy the viewstate out of the page source and save it to a txt file.. take a look at the size of the file. I'd be interested to know how big it is.
Though 99% of the time i install sql on my desktop i am starting to develop the opinion that the actual sql server should be somewhere else. even a vm on your machine is fine. But sometimes i need more than one (dependig wher ei wrk) and it just gets messy. I currently have the tools but not the server.
This is the approach I would follow. I would use ajax to get the content where possible (load on demand) and also implement a caching strategy.
Saved page as HTML only: 2 MB Size of ViewState in page: 413 KB I've disabled ViewState on some of the gridviews, but will attempt to do so on more controls.
Personally, on a page like this, the first place I'd look is the viewstate. With that many DOM elements, depending on how many tags are runat=server, the viewstate might be freaking enormous. Since that is sent with every request/reply, it can really show things down. A massive viewstate would cause the behavior of fast over intranet and slow over internet too. You could replace runat=sever tags with html tags if they are not used in the code behind. You could disable the viewstate on an element it is not needed (if you are initializing it every pageload). You could also put the whole damn thing into server cache. This will actually give you a pretty big improvement on every page when correctly implemented. It can be a bit tricky to implement server stored viewstate and support back/forward but it is not impossible. There tons of tutorials on how to do this.
Read the article. For concatenation they're using the "+" operator. They are comparing the time between: 1. + 1. stringbuilder.append 3. string.join
After the debacle that was update panels, I don't mind this not being included. Async loading using MVC partial views and JQuery isn't really difficult at all.
Ah, my apologies. I think it's actually the other way around. string.join uses stringbuilder.append. I'm by no means an expert on this, but if I recall correctly. Concat is just oldhat, and legacy code (that really should be updated). But rather than actually appending the strings, it creates a new string instance each time it's combined. Then again, I assume that's why the stringbuilder object was created. For all I know the string object may be better at other functions that I'm not aware of. Perhaps just assigning it a string constant that's never modified would make more sense than creating a stringbuilder object that never actually does any string building. For quick string modifications it's no big deal, but for big loops the constant memory allocation and deallocation starts adding up. 
I think you are missing the point, this is more akin to facebooks BigPipe than loading in content via ajax. https://www.facebook.com/note.php?note_id=389414033919
Microsoft and clearer error messages....lol
Most apps these days leverage an Object Relational Mapper like LINQ to SQL or Entity Framework. You spend less time getting the data access portion of your app running and more time focused on solving the business problem at hand.
ADO.NET (DataTables,etc) is old and busted. Entity Framework is the new hotness. 
Can you have the tabs load asynchronously? That way you'd only be showing 1 tab at a time.
Entity Framework seems to be where it is at for data access these days but there are plenty of legacy apps out there still using ADO.NET. I would say use EF if its new and DataTables are fine for most cases.
First understand the basics of SOLID design. Now write your own Data Access Layer (DAL). There are tons of articles and even complete books dedicated to the concept. Then use what ever Microsoft technology you find easiest to implement within it. Datatables are not a bad starting place because they are easy to understand if you know basic database concepts. The key is that your DAL is a proxy for the current flavor of the month. If a new flavor comes out that you like then change the DAL to use it. Better yet look into Dependency Injection to use the flavosuitablele for the task. I did this about 11 years ago and it *was* difficult in the begging. But after about 3 years things just became simple. I haven't cared about what Microsoft has pushed since then. I still usually use datatables as DTOs because of their functionality. But somtimes I use a simple datareader. At other times it is an xml datasource. But the apps that consume them don't know what is actually happining because they always use a IDataReader.
Dunno, I'm just visual studio pro + MSDN... 
Upvoted for compression; if you don't have the time/money to implement a third party component, look into IIS' native compression module. See here for more: http://www.iis.net/overview/DynamicCachingAndCompression
:( Why does Microsoft treat me like a hobo :S I even have an App Hub account that I pay $100 a year for? Do they want me to pay $10000000000 a year to make shit these days. If you know an MSDN subscriber you really hates Windows 8, let me know :P {There should be a lot :D}
Yeah I am sad :*(
Have you tried contacting MSDN support? Sometimes they can fix or at least explain what is going on. I ended up having to do this when Azure came out as the web pages did not correctly show which account levels got free Azure accounts. 
This is a great conference, but WAY too expensive for what you get out of it. You can follow a few of the top speakers' blogs to get much of the same info.
WF provides a license to deploy the design surface for the workflow with your application. Now whether that is easy for a user to use or not is questionable. When I looked into for the clinical laboratory market, the decision was to implement custom objects that the user could work with so that the workflow was domain specific. Having familiar shapes like "Patient", "Test", "Report", etc. allow the user to work intuitively rather than trying to interpret abstractions. A lot of work up front but it's extremely powerful.
What do you mean by workflow? If you mean the logical flow of a program, the task really requires a developer. AppFabric and Workflow Foundation are both tools that can give developers a leg up when designing workflows or SOAs, but they aren't meant for just your everday users. They are really just libraries or collections of libraries that developers can reference in their projects. Companies everywhere are always searching for ways business users can get more involved in the application development process. At the end of the day, the computer runs on code and someone needs to write it. The best way for a business user to get involved is to work closely with the development team and lay out specs as precisely as possible.
Feel like writing a case study on using WF in that context? I could make it worth your time.
Been looking for an answer for this for a while. Microsoft seem to only want to push WF so far. Been meaning to dip my toes in K2's stuff but something that could rehost a workflow with domain specific templates wrapped over it would be gold. 
Your link is busted. [Here's what it should be](http://clear-lines.com/blog/post/Naive-Bayes-Classification.aspx).
Admittedly, my approach in the article above is something of a hack, which should eventually be addressed with improved design/deployment methodology. But the solution as described solved the immediate problem in a bad situation. Would love constructive thoughts, and/or feedback on exactly what perils this approach would introduce. I am self taught, and will take all the constructive criticism I can get from thsoe who know what they are doing . . .
&gt;The long term solution for me is obviously building a proper admin module What do you mean by this?
Well, in my case, setting the Db conn and folder paths required by the application should really A. occur during a proper installation, whcih I don't have build yet, and B. be modifiable through the front-end by someone with sufficient priveleges. I have not built these two pieces yet, and it is unlikely to happen for a while. That Admin front-end is what I mean by "admin module" In the meantime, it IS possible to go and manually modify the connection and folder path info in the resource files from which the setting are populated (or, for that matter, the XML Config file where the settings live in the compiled project), but like I said, this is a hack solution. Ultimately, a proper installer + administrative control panel should mostly mitigate the funky conditional compilation. Except possibly when I compile for a field laptop, where everything is different. 
Of course using StringBuilder will be quicker than JSON serialization, due to not having to lookup the type of each property. As the author stated, the readability/maintainability and convenience far outweigh the cost and I wholeheartedly agree with him.
Any webservice. Just in planning stages, I have written webservices before to accept files, I have also done Ajax % dials just workig the 2 together has left me a little confuzzled.... that said thaks for the links i will check them out!
Okay had a play with the code provided, VS2010, doesnt support WCF3.0 :( All i need is to select to zip file from a local server programatically and upload to a webservice on a remote server with some kind of feedback as to percentage done.. I'm starting to think it's not easily acheivable, ie witout a lot of googling and hacking.... unless any other ideas? **Edit, one idea i had is to compress and split using a zip library into 10 parts for each file then reconstruct at receiving end that will only give me increments of 10% though, it will allow for syncronous upoads which may be useful though for speed?**
By the way, I don't see any musings on life. It's all programming. I'm squinting at you right now.
I know. I started one myself for myself as a FAQ/Code Snippets database. I wouldn't feel comfortable putting my thoughts and knowledge out there. Especially with anonymous commenting enabled! 
If you can associate the upload with a guid or something, then you can read from the stream a fixed number of bytes at a time and report back to a static dictionary or something the progress. You could then use long polling, or better yet Comet, to get the progress on the client side. Long polling means you just hit another webservice that reports the progress at regular intervals. However Comet is a framework that I believe keeps http requests unterminated so you can keep getting data back client side. I'm not sure how well this plays with IIS, and its more oriented for web apps, but its strictly speaking a better option because you don't have to keep sending full http requests and is more of a push mechanism than long polling.
If you blog about your struggle to learn (which is, in essence, what *I* am doing), and even more important, post your snippets and the references which have helped *YOU*, you just might have the answer someone else is looking for as they learn. The blog thing isn't about being a sage giver of advice. It's about sharing what you are learning. Also, like I said, I learn more from putting the post together than I am probably teaching anyone. Last thing - Having all your stuff on line enables you to find your own work later. If you already have one started, I strongly recommend continuing to post. Odds are good you will see little or no traffic for a long time. But slowly, people will find their way. Hell, there's a guy on twitter who does nothing but post links to little code snippets on his blog. He has something like 4-5,000 subscribers to his blog rss feed. Throw caution to the wind, man! You know more than you think you do, I guarantee it. 
Couldn't this also be done using [XML Transformation?](http://www.hanselman.com/blog/SlowCheetahWebconfigTransformationSyntaxNowGeneralizedForAnyXMLConfigurationFile.aspx)
One of the best comments I heard about certification is the experience of going through the book and labs to do the exam. There is value in learning something over blindly memorizing answers (which I think is increasingly hard to do now). Somewhere along the lines of if you want to get into a junior position or work as a consultant then this of a big benefit. If you are experienced and need to brush up after a hiatus, its good to do.
The ? : is called the ternary operator. It is a shorthand for an if then statement. Take the following code int x = (y == z ) ? 5 : 7; which is the same as int x=0; if(y==z){ x=5; } else{ x=7; } 
The ? and : operators are basically shorthand for if / else Instead of doing int i = 0; if(some expression == true){ i = 1; } else { i = 2 } you can do this: int i = (some expression == true) ? 1 : 2; At the end of both these statements, if "some expression" is true, **i** will be 1 else **i** would be 2 Hopefully this makes sense, but here's the MSDN article about it: http://msdn.microsoft.com/en-us/library/ty67wk28(v=vs.80).aspx
As everyone has mentioned, that code is vulnerable to sql injection attack. Example of how to build a parameterized query: http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlcommand.parameters.aspx 
Did he really Profile 1 iteration? I don't even...
For the first problem, you have a semicolon outside of the quotes. (just after SelectedValue) qry = qry + " np.category_2 = '" + ddPCategory.SelectedValue + "')"--&gt;;&lt;-- + "' or "; To help prevent this, consider using String.Format(). 
Hopefully all of your data logic resides on the database side. dotNet languages (i.e. c#, VB, etc...) should only be used (in my opinion) for GUI purposes and having business logic in place. With that said, here's what I would recommend: There is nothing wrong in using DataTables. They are great if you are accessing data for temporary use. They are easier to use and manage than DataSet. Upgrade your applications framework to .NET 4. Take advatage of some of the cool things they have in place, i.e. LINQ. Always program to an interface ;). This will help you program to a functionality. There's a great example of this here: http://stackoverflow.com/questions/383947/what-does-it-mean-to-program-to-an-interface
&gt; if(some expression **== true**){ :(
Extremely limited and ignorant post, not matter how much I love LINQ.
Colloquially, in a discussion not concerning syntax of languages, the ternary operator is the conditional operator. Just like a vulva is a vagina when not talking specifically about female anatomy. Deal with it.
Really easy, the design principles are simple.
[Does something like this help](http://stackoverflow.com/questions/11856099/network-interface-sub-type-net-framework-4-0)
because parsing text files is soooo hard to do.
So parsing C++ source code must be equally trivial right? Now, do you actually have something meaningful to add, or are you just interested in being snarky?
Use triple slash comments, property comments should start wuth gets or sets. The design is clear, although i would use a differnent word than directive. Keep it up
[This SO thread might prove useful](http://stackoverflow.com/questions/431755/get-ssid-of-the-wireless-network-i-am-connected-to-with-c-sharp-net-on-windows).
No more sprocs, huurrray!
Torrent or Usnet
try to learn one concept or something a day. You can get the basics and a decent understanding in about an hour or 2
Yeah, I cringed a bit too at that, but given the rest of his explanation, it's understandable in context. FYI to OP: if(some expression == true) is equivalent to: if(some expression) i.e., if( (5 &gt; 3) == true ) == if(5 &gt; 3)
As others have said, don't do this - the potential for SQL injection is very real. Also, as explained in other responses, ?: is the ternary if/else operator. Now, the Evals - to me, that sounds like you've got a data binding scenario going on; very likely that SQL query is populating a DataSource object, which is being bound in all probability to a DataGrid of some sort. In this context, those Eval statements are basically saying "Hey, go to the active DataContext, and give me this information I'm going to specify inside the quotes." Here, they are simple column names, but there's a lot more you can do: [Data Binding Expressions](http://msdn.microsoft.com/en-us/library/ms178366.aspx)
The profile wasn't very realistic. Any reflection based solution would benefit from a type cache, since the profile didn't use multiple types like you'd have in the real world. He needs to go get actual sample data and simulate that. How many types? How big of an object graph, etc to be able to draw conclulsions.
I was trying to keep it simple and easy to understand - you're both right - I like to think my real code doesn't look like that!
Silverlight is basically dead. The new version of Lightswitch can apparently output html5, making it even more attractive for simple crud.
Not sure if you need the latest version or just any edition but I think I have a VS 2008 Pro sitting around that I picked up in a conference that I attended a while ago. PM'd you.
You're complaining about being able to specify the location when your screenshot shows that you already have multiple hard drives?
This drove me crazy when tried to install it to my larger HDD since my C drive is a SSD thats pretty small and full. I gave up installing on that PC (until I upgrade my SSD.) I recall this problem being present on VS10 too.
To be fair its installing a lot more than just visual studio. It adds .net 4.5 and that has to live in your windows directory. i can't account for 6 gigs but i believe they will be in that same vein.
I'm curious. What happens if, before the install, you create a symbolic link with the folder pointing to a folder on your other harddrive and then install? Would it remove the directory before attempting to install? Might be worth a shot, you can always uninstall if it takes up too much room. Say for this example: mklink /J "D:\Program Files (x86)\Microsoft Visual Studio 11.0" "C:\Program Files (x86)\Microsoft Visual Studio 11.0"
vs install dumps all setup packages in a **hidden** directory in c:/programdata. 2 gigs of junk in there, thank you very much, microsoft!
The stuff it's putting on the C drives isn't going in the program files directory. It's going in half a dozen directories, many of them already in use for other related tasks.
If you are limited on disk space that's not really an option. 
I'm not sure if that would work. Much of the shared VS lib footprint is exposed as links already in the windows sub-system. Not sure how a link of a link would behave when trying to make an assembly reference. Technically it should work, would it? I never tried. 
The .net runtime is (or at least used to be) &lt; 100MB.
Actually, no. First, the installer copies the packages in C:\ProgramData\Package Cache. Then, the self-extracting installer unzips itself into %TEMP% sub-folder. The extracted installer package is ~200 MB. Then, Windows Installer copies it into it's temporary folder in c:\i-forgot-the-name. Then it saves it in c:\Windows\Installer. Now, it puts the files in c:\Microsoft.Net\Framework\v4.xxxx AND c:\Microsoft.Net\Framework64\v4.xxxx. After that, it NGENs both copies. So, the peak disk usage is more than 1 GB! 
Or the fact that you can't read.
Does this even work in IIS 7? I thought this was only available on server 2003 with IIS 6.
Creating a user account per app pool is considered "more proper practice". But if you don't have that, this command seems useful.
*Input Error: Can not find script file "C:\WINDOWS\System32\iisapp.vbs".* Yeah, IIS 7 seems to have replaced it with C:\Windows\System32\inetsrv\appcmd.exe
It's not very difficult to create a new app pool for each web app you're creating in IIS when you set it up. When you're entering a name for the site, it creates a new app pool by default, and you have to go manually set it to be something different. When you're running 2 sites, say "Site1" and "Site2", these app pool names will show up as the username in Visual Studio when attaching to a process.
I have a better way, I think. Run [Process Explorer](http://live.sysinternals.com/procexp.exe). Go to *View/Select Columns*... menu, pick *Command Line*. Now the grid will list the arguments that were passed to each process. w3wp will list the app pool that was passed to it.
 appcmd list wp (elevated prompt)
I think that many people run multiple applications under a single site-- the web tab of the application properties leads you this direction. This is standard practice at our shop, although I personally run one app-pool per app.
burry this into oblivion.
I just find it funny - there's a background operation underway, so the foreground blocks on a modal dialog until the background operation is complete. It kind of undermines the useful backgroundiness.
Came for the DotNet NSFW. Was not disappointed.
If you ever get the chance to write a porn site you should. There are so many little complexities you never thing about when writing corporate type sites. One thing that comes to mind was I had to write code to keep people from stealing images, but allow the members to download the full sized images. Second thing I learned is that strippers/models, at least the ones i deal with, are not that bright :(. You would laugh if you could see the email chains of me explaining to them how to reset their passwords on the site.
The common practice if you have control of the usage of the link is to hash the query string: http://sample.com/sample.jpg?hash=LAST_BUILD_NUMBER http://sample.com/sample.jpg?hash=HTML_FILE_LAST_UPDATED http://sample.com/sample.jpg?hash=SHA1 If you have no control of the usage of the link, then HTTP headers are the best way to control them, which sucks because it doesn't grant retroactive revocation of the link. 
Please do an IAMA.
CDN ignores query strings on blobs. Also: "As of 1.4, no purge function is available. This feature is under development. The best freshness control is to set good cache expiration headers as described in this document and the Windows Azure CDN documentation on MSDN." http://blogs.msdn.com/b/windowsazure/archive/2011/03/18/best-practices-for-the-windows-azure-content-delivery-network.aspx
Or they might be high on meth. The point is, you never know...
No, not really... From the app certification requirements http://msdn.microsoft.com/en-us/library/windows/apps/hh694083.aspx We understand that in some cases, apps provide a gateway to retail content, user generated content, or web based content. We classify those apps as either Storefront apps, whose primary function is to aggregate and sell third party media or apps, or Streaming apps, whose primary function is to aggregate and stream web-based images, music, video or other media content. In some cases, it may be acceptable for a Storefront or Streaming app to include some content that might otherwise be prohibited in a single purpose app. If your app provides a user with uncontrolled: (i) access to online social networks, or (ii) sharing of personal information with third parties, including other gamers or online acquaintances, then you must assign it a Windows Store rating of at least 12+. For such activity to be considered "controlled", your app must include parental control features that require parental permission to use such sharing features, and you must identify those and explain their functionality in the Notes to testers.
Hi, Yes there is a small progress bar up there (probably not very prominent in the video). I am resolving a few perf issues and hopefully it should be better once the app is released. Thanks
very nice
No surprise that raw handlers are the fastest, but I was pretty pleased to see how tight most of the other frameworks are in terms of serves/second.
Make sure you read the comments.... e.g: &gt; "When I saw your test, I knew that ASP.NET WebForms would perform very well. Having done some work back in the days on the ProcessContentMain method that is doing most of the work, I know that the hello world scenario is optimized to death. *What you are doing here is very close to the internal test case that is used to prevent perf regressions on the core pipeline.*"
Which one do I change for the main editor background color?
Text Editor → Plain Text → Background 
Oh, only about 30.
No reason to change. I love the dark theme very much. The only thing I don't like about the UI so far is the menu choices being all caps.
http://dotnet.dzone.com/articles/are-visual-studio-2012-all Also, there's an extension to do it but the name escapes me. 
I thought it referred to the bits that make up the program. 
Thanks for this!
I always thought it referred to [BITS](http://en.wikipedia.org/wiki/Background_Intelligent_Transfer_Service).
I'm doubtful that's how most people have used it over the past decade, but given that it's a plausible source for at least some of the usage, have an upvote.
I didn't care much for the dark theme, but I like the light theme. I wouldn't call either an eyesore though.
I think you should be able to schedule a VBS script to run that can trigger a call to the asp page. Try something like this: Set IE = CreateObject("InternetExplorer.Application") IE.visible = 0 IE.navigate "http://whatever.com/blahblah.aspx" do while IE.Busy loop HTTPGet = IE.document.documentelement.outerhtml IE.quit Set IE = Nothing
That is how it works now, I am just weary of loading browser windows on a production server. Seems weird. Here's what I'm dealing with: Set WshShell = WScript.CreateObject("WScript.Shell") WshShell.Run "iexplore http://example.com", 9 WScript.Sleep 30000 'Close browser WshShell.SendKeys "%F" WshShell.SendKeys "C" I like your script. The SendKeys thing was especially weird to me. Thanks!
The best way you can thank me is finding the nearest cat and feeding it some bacon.
IMO the correct way to fix this is to port the ASP pages to WSH scripts or similar and run them from whatever machine you want as a scheduled task rather than hitting a URI. Barring that there are wget and curl ports for windows you can use. * CURL: http://curl.haxx.se/download.html * WGET: http://gnuwin32.sourceforge.net/packages/wget.htm
No Powershell.
You can write a .net console application using HttpWebRequest. You can make the request for the page without having to pop up any sort of browser window. Then you can schedule the console application to fire using the Windows Task Scheduler. [Example on this page](http://msdn.microsoft.com/en-us/library/system.net.httpwebrequest.getresponse.aspx)
I was thinking something along these lines as well. Or just do something with CURL.
I back up dakboy below. I switch between various UNIX flavours and windows and I very much like powershell. I'm not 100% crazy about some of the syntax but its liek a UNIX guy was told to make a shell for windows that other UNIX guys would like.
This is the legacy code I am dealing with, I didn't write it. Probably switching it to angrycat's script above.
I'm glad, just somehow the news escaped me.
Came here to say this... but it got drowned out in a lot of places. MS need to work on their communications sometimes.
Is there a command line tool for compiling with Saltarelle? That guide forces me to use some VS and I am a mono/unix developer and I love the command line.
I've recently switched over to 2012 premium and so far I love it. I do suggest tossing this extension on though: http://visualstudiogallery.msdn.microsoft.com/366ad100-0003-4c9a-81a8-337d4e7ace05 
I've been finding myself writing a LOT of javascript lately. This could really help things out. 
Is this a paying gig or are you just looking for free work? This all feels very scammy.
We use it to reasonably good effect. I'm the most senior dev on the team and don't gain too much from the trainings, but I can see that they are largely accurate and well-organized, and they have helped our team come up to speed on difficult technologies like Castle Windsor, NHibernate and WPF. For online training, we feel that it is a good investment.
I think they have a free trial don't they? Could be worth checking out for a free 30 day trial.
When I tried the trial it was 10 days OR 2 hours worth of video content. Still, I signed up soon after that and still retain my subscription.
You (and most people) need to get better at selling your ideas. Nobody cares about your pet hobby projects. These days the devs you're looking for are all fully booked with paying gigs. You said the word "I" 7 times in your post. Not once did you mention what the poor soul who helps you gets out of this. Read: http://www.amazon.com/How-Win-Friends-Influence-People/dp/0671723650
Mostly making it compatible with UAC.
You need to realize, from one developer to another, that this all feels very... trivial. These aren't hard problems to solve, and if you have any passion as a developer, you would solve them. Beyond a certain price point, passion is the currency that matters most and you're basically telling the rest of us that you don't give a shit enough to solve these problems. Why would we care if you don't? I'm not saying you're a bad person or developer for not wanting to work on these, but really, if they don't warrant your attention, then I fail to see why I should pay attention to them.
Like everyone else it is most certainly worth it. I get it as a benefit of my work, but I would pay for it if I was required. Much more classroom like than just using a book, but without all the bs that comes in a classroom. 
I've had a 7 month subscription with the site. Currently I've let it expire, but I may pick it up again. The tutorials are good - though I think $30 /mo is a bit overpriced. Definitely don't go for the "practice files included" pricing tier.
How does this website stack up against lynda.com and other alternatives? 
It's better than Lynda if you're someone who's posting in the dotnet subreddit. Lynda was great for things like office and adobe creative suite, imo. Pluralsight is good for the micrososft stack, and they're getting new videos all the time. TekPub was great and interesting. Although the best resource that I've used has been safari books online. 
Holy lord. Finally! Thank you!
Can't believe this has not been suggested, Use an automated testing script, i reccomend WATIN http://watin.org/. Basicly alows you to script clicking any buttons etc on a webpage, package it as a console app ans schedule it to run.
&gt; Reasons why you wouldn't want to do that: one less class. Repeat that for 60 classes, and you have polluted your code base with a bunch of code that adds little to no value. Why not extract them when they actually introduce value? No?
How do you identify the point when they actually introduce value, though? After a lot of people already made a lot of hard-to-find mistakes by comparing "AB-CDEF-GHI" with "ABCDEFGHI" using string comparison? I would say that it is based on your domain. If you are making banking software, AccountNumber is a good value object, Name is probably not worth it. But if you are making a phone book, Name and Phone probably should be value objects. Also, having a lot of classes in OOP code is somewhat expected.
First download Visual C# 2012 Express: http://go.microsoft.com/?linkid=9709939 Then visit: http://msdn.microsoft.com/en-us/vstudio/hh341490.aspx Of course a book will always be good too.
In particular, the [Lessons Learned](http://msdn.microsoft.com/en-us/library/jj591568) is an interesting read.
Does your image have to use specific file name? One of the solutions I worked with before was to SH1/MD5 the filename. So all your filenames would look like this: [SH1_HASH].jpeg
Luckily it fixed itself. it took about 70 hours, but the cdn did refresh. I agree that your solution would work all the time though.
I still think going the VM route is more cost effective since you can host 2-3 small sites on a XS VM instance. As long as you don't mind setting up &amp; managing the server.
You are getting yourself into a world of hurt. Friends don't let friends develop on sharepoint! 
Not sure what you're after here as there is a ton of material out there for free: http://technet.microsoft.com/en-us/sharepoint/ee410529.aspx Additionally, you can get Sharepoint through your MSDN subscription, install it on a virtual server, and go. Installing SharePoint 2010 was probably as easy as installing Office 2010, and maybe a bit faster to boot. Now, that said, SharePoint development isn't the easiest thing, but then there are forums out there, more books, etc. It's a large ecosystem, and the only real advice worth anything is to close reddit and just do it.
I've had a subscription for about a year and I'm a huge fan. I should state that I have 2 hours of commute time that I mostly spend watching PluralSight videos. They do require a pretty hefty time commitment. One nice feature is that you can cache videos for offline viewing through phone or tablet. Hope that helps.
I have a macbook pro retina and I do all my programming in microsoft technologies. Windows 8 is absolutely beautiful on the retina screen (I run windows 8 in a vm, but considering dual booting). Visual Studio 2012 is really fast and the only thing I've had to get used to was different buttons for copy/paste and no delete key (you hit function backspace to delete in windows) 
I'm not exactly sure what it is... but it isn't a MacBook
That was a good article. Finally realised the use for delegates in the observer pattern. Would be fun getting more examples where to use delegates.
Exactly: like any service, in general people just want it to work without hassle - and they'll pay for that.
Have you used Linq? Lambda expressions are just anonymous delegates. Take a look at the following: http://www.jeremybytes.com/Downloads/LearnToLoveLambdas.pdf http://www.jeremybytes.com/Downloads/GetFuncyWithDelegates.pdf
Well I'd say that since universities generally don't teach anything regarding C# or delegates and you constantly have an influx of new devs coming in out of college, I don't mind people seeing stuff like this. There are certain second nature concepts when you've been doing .NET for 10 years (although as a 2.0 feature, these would be more around what, like 2005) that are completely foreign to people just starting out.
this is clearly just someone trying to boost their resume or whatever by rehashing knowledge that is either given for the reader of dotnet or readily available in thousands of other spots. i'm sorry, the world just doesn't need another article on delegates. and whoever is telling these indian devs that spamming the world with intro to C# 1.0 features is somehow increasing their value needs to cut that shit out too. 
That's all well and good but *this exact same link was posted to this exact same subreddit just 3 days ago*. This subreddit certainly does not to rehash basics of the language, again, with the the exact same article every *3 days*. It's not even a particularly good article.
I'll admit I didn't actually read it.
ChadMoran is right, Apple hardware is really nice (albeit expensive). My wife got a mac and I was really impressed with the quality of the machine. After much back and forth I decided on the retina. Here are the advantages as I see them. It's fast, I couldn't find a comprable pc laptop with 16 gigs of ram, a fast processor and a solid state drive with the form factor I want. Sure I could get those specs on a pc laptop, but it always ends up bulky. The mac is very lightweight and easy carry. It doesn't get hot. My biggest complaint with my previous dell (which is 2 years old) is that it always got too hot. it was a laptop but I could never use it on my lap. I commute on a train daily and I got sick of having to put a book between me and the laptop. I wanted to a linux os to mess around with and play with nodejs and ruby. I realize I could run both on windows, but I want to be a well rounded developer and see what the hype is all about on the other side of the fence. This point obviously is not that big of deal since I could have run ubuntu in a vm on a pc (which I did in the past). Lastly, the screen is gorgeous, but I can honestly say when making the decision to buy this thing, the screen was the last thing I considered.
Thanks for the generous explanation. I had read some reports of the macbook retina getting hot, so it's interesting to find that it is not a problem for you. 
I answer this on the forums for this but this is how I got it to work for my MVC project: Build tab: Pick the main assembly or assemblies you want to profile in the bin. Click Next. Check the boxes for the items you want to track (default is everything I think). Click Next. Check the boxes for the items you want to use. For web app kindly make sure the 'Overwrite assemblies blah blah blah' option is selected. Click Next' Check the 'Embed TCP/IP blah blah blah' option. Take note of both the Encryption Key and the Listen Port. Click Next. Click Re-Compile and wait until it is done. Switch to the Remote tab. Remote tab: Leave the 127.0.0.1 in there (assuming you are debugging locally) and enter the Port and Key that you noted earlier. Click Open Viewer. Open a browser and load the site. Voila!
This is really neat. I'm going to try it out and see how I like it. I'm interested to see how it scales with project size and application complexity.
i really just want the solution explorer back the way it was in 2010
It seems that if you're a student, there's a 90-day trial. https://www.dreamspark.com/Product/Product.aspx?productid=21
Anyone know what happened to the link to the version that runs with studio 2010? The link I had isn't valid anymore.
For those who are wondering. This is from the FAQ about being free after the preview: &gt; **Will there continue to be a free service option once the preview is over?** &gt; There will continue to be a free level of the service when we transition out of preview. There will also be paid levels of the service for users who need more than what the free level provides.
Read Clr via C#, covers both intricate details and syntax.
This is what prevented our company from even putting resources towards evaluating it. Too many "what if's."
I've been working on this on and off for the last few months. It's my first open source project of my own and I'd love to get some feedback.
And what is that? I'm curious why you would say what you said without expanding the least bit on why. Are you some kind of fan boy with no credibility at all? If no.. then feel free to expand on your statement and defend it. Tell me your preferred source control system and why it is so superior to the "completely fucked in the head" system (assuming that is TFS)
Because I've seen it fuck up time and time again. At the moment for instance, it decides to ignore random files my work mate checks in. Not being able to switch branches, every branch has to be checked out to it's own directory. This discourages branching. Needing constant contact with the server. Slow at everything. Extremely expensive. Especially considering the free alternatives. The terrible issue tracking software it comes with. The even worse build system it comes with. The absolute nightmare to upgrade. &gt;I'm curious why you would say what you said without expanding the least bit on why. It's pretty common knowledge amongst those that have used different SCM's. The only ones that like TFS seem to have only ever used TFS, or they don't really get branching/merging. I'm no fan boy. My current favorite is git but I liked svn before that. At the moment the git-tfs bridge is the only thing making life bearable and keeping management happy.
&gt;Are you really having an issue with the branching and merging features of TFS? Yes, You need a separate mapped workspace for each branch. This discourages branching and merging. My current project needs separate branches for customers modifications (a separate WTF), using TFS a would be forever merging and loading instances of visual studio. With Git (and SVN and most others) a do a switch which takes about a second. &gt;You think GIT has superior features? Yes, Absolutely. &gt;Are you sure that your organization has implemented TFS correctly? &gt;Seeing it "fuck up time and time again" .. OK noted? What the fuck? No idea. I've observed similar things at several companies. If it's that hard to set up correctly then it is a problem with TFS. &gt;Contact with the server! DING! You finally identified a tangible difference. One is a central source control repository (TFS) and the other is a "distributed" source control repository. (GIT) I'm not talking about for checkins etc. That was bearable with SVN. I'm talking about needing to connect every time I open a file and setting the file read only. &gt;Your next statements make you look foolish. "common knowledge amongst those that have used different SCM's. The only ones that like TFS seem to have only ever used TFS" I'm yet to find anyone with a lot of experience with SCM's and advanced branching/merging scenarios that like TFS, let alone think it's superior. &gt;Are you serious? Further you say they don't get "branching and merging" which is a key feature in TFS. I still find it more of a bolted on feature. Looking up the history of a file for instance likes stop where the file was branched. And as I mentioned before, no switch command. Many people use TFS (and git and SVN) as a glorified file share. &gt;at my last company I configured the source to marry well with TFS Why does the source have to be configured to marry with TFS at all? Or do you mean the ms build CI configuration? &gt;It took two weeks of reading white papers to know the best practices for configuring TFS. Have you done equivalent research? Have you set up projects in TFS? Are you talking source control or the build server aspects. If it's the latter then yes, I've done a great deal of reading. The suggested ways of setting up build server violate just about every rule in the book.
I'm going to chime in in your support. I've used both and have had to revert ;) back to TFS due to managerial requests. You see, for management, it works great for them. They get fantastic oversight into what's going on and this all happens under the mostly connected Microsoft ecosystem. Reports go out via SSRS, it has a web portal. Can sync "work items" to sharepoint via VS. But it stops being fun when you have to use it. The designer I work with has just given up. Using it outside of VS is too much for him, doesn't work with his workflow. We had heaps of issues at the beginning working with images and dlls as only one person can have that file checked out. So frustrating. Of course management kicked back and gave their suggestions including that we were "doing it wrong". That's just the tip of the iceberg for me. I'll stop here :)
File &gt; New Project &gt; ASP.NET MVC 3 Web Application 
As I don't have the complete specs I'll refrain from shouting which tech to use. What I do suggest: - Based on your questions I'd advise to get some experience developing an asp.net webapplication. Once you have a basic understanding (of webforms vs. mvc, EF, IoC etc.) you'll be able to make the decision what to use and how to use it. - Document every feature in your old app. Work this out into usecases. (it's easy to forgot those small features not many people use, been there)
If you want to minimize your work and just want it running on the new platform, rather than doing a full rewrite: Use MVC, which is a lot more like classic ASP. Don't use Razor, the new view engine...go with the old one, which uses the same tags as classic asp. The main difference is that MVC has a "controller" for each page where you can put business logic, populate variables that will display on the page, etc. That way you don't have so much logic mixed in with your html. But it's still possible to have logic in the view, and you can leave it there initially then move it to the controller gradually. You will need to convert your vbscript to a .net language...I prefer c# but vb.net might be an easier conversion. Data access can work pretty much like you have now...the basic .net stuff isn't that much different. If you're calling stored procedures, just keep them, maybe write a simple wrapper around the data access stuff to abstract away the boilerplate. If the old code builds sql by mashing strings together, make sure you use actual sql parameters, so you're not vulnerable to sql injection attacks. If on the other hand you're up for a full rewrite and updating the UI to current standards...still use MVC, replace the frames with ajax, and take a look at knockout.js, jquery, and jqueryUI. You'll end up with a much nicer site. The best MVC book is probably [Sanderson's](http://www.amazon.com/Pro-ASP-NET-MVC-3-Framework/dp/1430234040/ref=pd_sim_b_1). 
I agree with most of this, but I would recommend Razor. It makes for easier to read code and is the standard any more. 
I think it is more complex because there are so many ways to accomplish something, web forms seems to have a lot more ways to wire stuff up and it doesn't hide as much of the complexities of the web that WebForms does (like understanding the underlying standards). I guess I am trying to say a lot more moving parts. Not harder, just more moving parts.
It's what I use for all my new projects, I just figured it might require more work for a conversion from classic.
/thread hijack here Can someone explain MVC like I'm 5? Development is just part of my job, so I stick to what I know, and am often behind the latest tech. Generally what I do is crud stuff. I pull stuff out of a DB using SQL adaptors and the like, and I write it to screen. I get data from html forms and put it back into the DB. Usually using jQuery to load pages into Divs and keep it nice and dynamic. How would this be different if I was doing it MVC?
You're basically right about the view. It can emit more than just HTML if you want. You've got the same level of control over it as you do with ASP. The way I think of the model and the controller is that the model is just that, a model of the world as your application sees it, and the controller is responsible for turning user intent (things like hyperlink clicks and form submits) into a change in the state of the model and assembling the correct pieces of the model to turn over to the view. From a tech perspective, the model is whatever code is needed to turn source data into business objects, and the controller is where you manipulate the model classes. That's my view of the MVC pattern. I'm not a purist by any means, I'm a "break out the duct tape and get it done" kind of developer so my perspective may not be 100% correct.
In the end it is about the pattern and the architecture is so much more flexible than web forms. I found once I went MVC I don't want to return to web forms. While I have been a Microsoft dev for many years I have always felt like they go to a lot of trouble to obscure you from the realities that every other platform deals with (like even something simple like http verbs). MVC embraces open source, modern ideas that don't tie you down to just Microsoft and in general makes you feel like you are developing in world that is not composed of just Microsoft (of course you get all the awesome tooling at the same time). 
To me it would mean you can take a list of reasonable requirements and code an application in C# without outside help.
That was perfectly said.
&gt; I guess most job postings don't really describe in detail what you should know. You said it right there. The fact is, most job postings are utter shit and do very little to describe what you'll actually be doing. Talk to the company if you're really unsure. If I had to guess, "extremely proficient" would include an understanding of advanced language constructs like threading/parallel processing and expression language, as well as design patterns like IoC and n-tier. In addition, an "extremely proficient" developer would be able to help and guide more junior developers. Essentially, what they probably mean is someone who can work without asking a lot of questions and is more or a less turnkey operation for the business. Just my 0.02¢.
jon skeet is the only person extremely proficient in C#.
Most of those things apply to other languages as well.
Don't worry about having encyclopedic knowledge of C# and the .NET framework. I have worked full time as a C#/.NET developer for 10 years and I still have to occasionally Google "switch-case code example", and such. If you made it this far, you know how to get the job done, picking up things you didn't know along the way. Pick a job posting that sounds interesting, but what you need to really find out is what the work environment is like. Google "the joel test" for a checklist of what you should be looking for.
I would read that as, "do you know all of the language constructs and how to best leverage them?". I think it would also be assumed that if you've become "extremely proficient" in any language that you know how to write maintainable code. 
It's way more complex to determine/define what "proficient" means, than that. As others have said, 'getting it done' is a far cry from 'getting it done well.' Also, personally, the "on your own" would make me walk away from any development job. I like to collaborate when I work. :)
Most job postings are by recruitment agents that: A) Don't care. B) Don't know. C) Don't care that they don't know. D) Drop buzzwords and other exciting sounding things to fluff both candidates and employers. We've also moved into an age where many people lie. Someone who has done a 5 min "Hello World" app will put on their CV that they are experts. The result is job postings that ask for a king but only offer a peasant's benefits, knowing that they must overstate their requirements because the candidates will (most likely) be overstating their skills.
To me, being "extremely proficient in C#" means you understand generics, delegates, events, iterators, nullable types, extension methods, operator overloading, anonymous methods, lambda expressions and LINQ to Objects and can readily develop and/or maintain applications that use such features. However, the person posting the job might mean something entirely different.
^ This. Memorizing syntax isn't as helpful as having great design, communication, and planning skills. A robot that just does what the client asks vs asks that one question to find out what they need? I would rather have the 2nd one, and have them look up switch-case code example.
Wow. I don't use a single one of those tools/frameworks listed. I mean, we use NUnit for our APIs but we rarely write new ones so it's also extremely rarely used...
I can't solve your time management problems, but one of these best ways to practice is to work on a personal web site that uses the technologies that your wish to show off in your resume. How many times have you been asked, "Do you have any code you can show us?" in an interview? All you have to do is link them to the URL. Post your source on codeplex or github. 
No ReSharper? Wow, that's one of the best tools a dev can have for .NET
man, doesn't everyone?
missing resharper, servicestack stuff, mono stuff
[You know what all these things mean](http://stackoverflow.com/questions/9033/hidden-features-of-c)
This survey sucks and whoever wrote it needs to beat a fast retreat and rethink their strategy because from where I sit the only upside of this is for InfoQ to help them build up a registered user base. 
Oh trust me, future surveys are definitely going to be handled differently.
It means apply as long as you know your way around the language/framework. Pretty much every employer lists unrealistic requirements and hope for the best.
I'm pretty sure he meant, "without having to ask a colleague for help".
I believe Silverlight is in legacy support mode, not sure on light switch
I just installed VS2012 too, and I had no idea what Lightswitch was. The tooltip only mentioned XAML and added HTML support, making me think that it had something to do with Metro apps.
There is an [HTML5 Client](http://msdn.microsoft.com/en-us/vstudio/htmlclient) version of LightSwitch currently in development http://blogs.msdn.com/b/lightswitch/archive/2012/06/11/announcing-the-lightswitch-html-client.aspx Don't start any new development in Silverlight, its days are numbered.
The reason you find this is about asp.net is because you're not good at it (asp.net, that is. Not development) I can (and have) thrown a functional site or API up in asp.net on IIS in an easy matter of hours. I came from the LAMP world, and now I personally find PHP to be limiting and frustrating. I've worked with professional developers on several platforms (java, .net, ruby, and php) where some teams can't ever put up anything correct in *any* amount of time. I've found this means nothing about the platform, and a lot about the team. I've worked with two people who could put up an actual application in a half-day on a platform they haven't ever touched. Incredible. This isn't because the platform is great, it's because those people were just that great. You (and I) aren't that good. So some platforms seem like a waste of time. However, that doesn't mean that every platform is the right choice for every problem. Knowing multiple platforms well will help you decide when to use what tools.
It sounds like you just have more experience with the LAMP stack.. "IIS configuration is a huge time-sink," what in particular here? You can almost pretty much just install IIS, set your .NET Framework version and everything should work, most settings except for worker process settings will be pulled out of your applications web.config file. If anything it should be easier to configure IIS as all the available settings are visible in the GUI, whereas Apache you must refer to documentation to seek out basic configuration options. This is why I think it's just your experience that makes it feel like for you IIS &amp; ASP.NET Development is hard. "especially when moving from a development environment to QA or production" - sounds like your projects just aren't setup correctly to allow for this kind of movement, it should be as simple as changing lines in web.configs, which can be automated from within VS. " missing assemblies/references and any variety of other strange build errors impede progress at every turn. " This sounds very specific to your environment, using 3rd party libraries that need to be installed on the machine (usually due to licensing) is a cause of this great pain. Otherwise usually its as simple as not targetting the correct .NET Framework version or simply not having it installed. It usually is as simple as bundling the assembly with the the web app. "I can toss a PHP micro-framework on an Apache server and code a functional API/service in a matter of hours" - I can install WinServer2k8R2, IIS, install VS2k12, and deploy a basic website in less. I can do close to the same in a LAMP stack but only because I have experience in it, I find it much much easier to get up and running from scratch in the Windows environment. I think you just need to get used to the differences in setup and configuration. And it sounds like your environment is not really that ideal for the way you like to do development.
Everything you said, with one minor addition re deployment mini frameworks: These exist for .net as well, and some are pretty good; check out...I think it's called DropKick.
or "your pc needs a NIC card"
Ther very first sentence, "Language INtegrated Queries are SQL-like C# queries that can be used to manipulate collections of objects" is incorrect.
But what about Linq2SQL? ;D *shoots self*
&gt; As an example, if you want to return the result of some LINQ query as a return value of a method you cannot declare the return type of the method as var because the scope of the anonymous class ends in the method body. In that case you will need to either define an explicit class or declare the return value as dynamic. Or... set the return value type as object. 
SQL and LINQ are both syntaxes for manipulating [sets](http://en.wikipedia.org/wiki/Set_\(mathematics\)). Considering all of the extension methods, I can see why the author feels that way.
If you write your joins correctly, LINQ to SQL will generate decent, parameterized SQL queries. I have no problems using it for the boilerplate stuff.
LightSwitch is evolving not going away at all. I could say the same about silverlight. There a newer technologies that leverage those skills but i would say its more WPF than silverlight. LightSwitch will use HTML 5. LightSwitch was made to stop all the evil access non-programmers. DEATH to ACCESS APP!!! DEATH to ACCESS APPS!!!! sorry, if you never worked in a company with rogue access app makers then you don't understand my pain.
This is for a Winforms project. As it is, I am trying to break way from Winforms and jump into more web stuff + Javascript, so it is good to know there are better solutions in that realm. But for this one, had to be Winforms (not my choice - work environment requirements).
It's frustrating, yes, but I've gotten okay with it seeing where MS is trying to go. Basically, they are following Apple into the 'apps' world. In MS' current ideal, you'd build a Win RT app sold through their app store for Windows 8 with back end services on Azure. At very least the app store makes it very easy (in theory) to get your game or tool in front of millions of potential clients. Whether it works out (and whether killing SL in the process) was worth it remains to be seen.
My mistake. I assumed it was for a Webforms project.
I can say that I'm 100% behind Azure. I've moved my company's site into it and I'm currently rewriting some code to make other apps work with SQL Azure (no rowguid support, go figure). And Office 365 kicks ass - there's no way I could ever again recommend to a small business client that they buy servers and do their own Exchange and Sharepoint.. 
Yes, in fact in my experience, LINQ to Entities will generate SQL that is a verbatim representation of the LINQ expression. I have actually tuned the generated SQL of a LINQ expression by making the LINQ SARG-able, which in turn made the generated SQL SARG-able.
LightSwitch is for RAD style programming of database backed applications targeted mostly at non-professional developers.
I've had some code so poorly written it had literally tens of thousands of potential issues. Sometimes it's tough to get a good signal to noise ratio on static analysis.
That's what junior programmers are far. Not only does it give them wide exposure to the code base and the confidence to make changes, they learn first hand why it is important to clean up as you go along.
There are some key concepts you want to get down if you really want to make the most of .NET * OO design and basic patterns Design patterns are used over and over again in OO based systems. A good understanding of what they are for, and how they tend to be used will be helpful when trying to understand key framework extensions and 3d party libraries. I like to point people at [Head First Design Patterns](http://www.amazon.com/First-Design-Patterns-Elisabeth-Freeman/dp/0596007124). The opinions on design patterns in this book are a bit dated and the examples use Java syntax but they are all relevant to the .NET world and will go a long way to understanding how class names and object structures are used in OO systems. IMO One of the biggest concepts you'll need to understand in OO currently is the [Inversion of Control](http://en.wikipedia.org/wiki/Inversion_of_control) pattern (also referred to as dependency injection) and the frameworks that provide it. Most modern .NET applications leverage some kind of dependency injection to simplify development and make unit testing and porting of classes easier. NOTE: I understand many folks in the PHP world feel that PHP is a full OO system. While they have made strides in this area it is not a fully typed OO system. It's a procedural system twisted to provide some OO features. * Syntax This is easy, just review MSDN docs and samples. The biggest different you will see in the .NET world is a different opinion in general on casing of object and method names. * Frameworks This is the part that seems the most overwhelming IMO. The language itself is fairly easy but understanding the huge amount of 1st and 3rd party libraries, frameworks and tools can be daunting. Since you come from the PHP world I am going to assume you are most interested in web based applications. What I would recommend is to pick a set of tools for your web stack and learn them. Once you understand the key pieces of a web application and how they interact you can start picking and choosing different components to meet your needs. I am going to suggest you start with the following stack to get started with a web application, this is the same stack I use for most of my clients making smaller functional websites or simple content driven systems. * [.NET 4](http://msdn.microsoft.com/en-us/library/vstudio/w0x726c2(v=vs.100).aspx) (you can do 3.5 but really just go with the latest) * Core Web App - [MVC (3 or 4)](http://www.asp.net/mvc/mvc4) * Dependency Injection - [Unity 2.0 or 2.1](http://unity.codeplex.com/) * Data access - [Entity Framework](http://entityframework.codeplex.com/) * Application Security - [.NET Membership Provider](http://msdn.microsoft.com/en-us/library/yh26yfzy(v=vs.100).aspx) (there is a newer slightly better framework by MS but I cannot recall the name at the moment) * Consuming 3rd party services - [WCF](http://msdn.microsoft.com/en-us/library/dd456779(v=vs.100).aspx) * [Exposing your own services REST](http://blogs.msdn.com/b/mvpawardprogram/archive/2011/09/12/using-mvc-as-a-rest-service-that-is-accessed-by-jquery-javascript.aspx) - MVC (since you are already using it for pages) * Exposing your own services using multiple protocols/data formats - WCF * XML Processing - [Linq](http://msdn.microsoft.com/en-us/library/bb387098.aspx) and [Lambda's](http://msdn.microsoft.com/en-us/library/bb397687.aspx). Also be aware of [XmlTextReader](http://msdn.microsoft.com/en-us/library/system.xml.xmltextreader.aspx) and [XmlTextWriter](http://msdn.microsoft.com/en-us/library/system.xml.xmltextwriter.aspx) for targeted high speed forward-only processing. * Configuration management - build in web.config with [CSD](http://csd.codeplex.com/) for complex configuration structures beyond what appsettings can provide. Key Concepts for Modern .NET Apps * [Generics](http://msdn.microsoft.com/en-us/library/ms172192.aspx) * [Lambdas](http://msdn.microsoft.com/en-us/library/bb397687.aspx) * [Linq](http://msdn.microsoft.com/en-us/library/bb308959.aspx) * [Closures](http://csharpindepth.com/articles/chapter5/closures.aspx) * [dynamic typing](http://msdn.microsoft.com/en-us/library/dd264736.aspx) * [threading](http://msdn.microsoft.com/en-us/library/dd460717.aspx) Some basic tools to help you: * [dotpeak](http://www.jetbrains.com/decompiler/) - provides detailed assembly information and some decompilation. * [Assembly binding log viewer](http://msdn.microsoft.com/en-us/library/e74a18c4(v=vs.100).aspx) - helps troubleshoot dependencies by logging internal CLR calls to dependent libraries. * [MSBuild](http://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx) - Build management and orchrstarion. This is the system used internally by Visual Studio for building projects. It's a command line tool so you can build projects even without visual studio. A basic understanding of MSBuild makes it fairly easy to use any IDE or text editor you like for .NET development. I do however like VS2010 or 2012 as it goes a long way in helping you code and understand .net. Edit: Now with more links.
The Head First series is really good, I learned C# using this book. It is focused on GUI programming though, if you are looking for web stuff then you would probably be better with something else. [Head First C#](http://www.amazon.com/gp/product/1449380344/ref=as_li_qf_sp_asin_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1449380344&amp;linkCode=as2&amp;tag=patrickmorris-20)
Actually the first sign is when you find yourself or your team using cooked up, hyped up terms like "code smells." 
For the moment, not only free, but using only core .net 2.0 assemblies or stuff composed with those. 
You're serious? If it's a private method, you can simply do a text search in that class to see if its being called or not. In Visual Studio, right click and choose "Find All References". 
Wow. It's not that hard to spot private methods not being used in a class with a simple text search. If dead code in your classes is really a problem, your programmers are being extremely lazy and/or there is no peer review going on. Usually, I see public methods of classes that are not being used and therefore not being maintained. Those are the harder ones to identify and determine if they should be deprecated. 
Charles Petzold has a wonderful book available as a [free download](http://www.charlespetzold.com/dotnet/).
Text searches are not enough if you have overloads or chains of private methods. And non-trivial projects can easily have hundreds of projects and thousands of functions. 
Are you looking to learn the .net framework or C#? If you want to learn C#, I'd recommend the book Professional C# from Wrox. I had the first edition when C# was released way back when. If you're trying to learn ".net" it's a different matter entirely. The .net framework is gigantic. There are parts of the framework that I've never touched, and probably never will. Other's have provided good suggestions for learning to make web apps. If that's not your goal, tell us what kind of apps you want to write and we can tell you which parts of the .net framework are relevant. Manticor's advice about learning Inversion of Control is excellent, but frankly, I'd ignore it at this point. If you're already overwhelmed, it's just going to overwhelm you more. IoC is an advanced concept that you don't need to be concerned with just yet. Get the basics of C# down (including using interfaces) and worry about IoC later.
There's a few series' available for free via msdn. Click [here](http://pluralsight.com/training/MsdnOffer/Courses) to see more. If you like how these videos are and their style maybe you could sign up for the free trial and take it from there. There's also Tekpub which offers video tutorials. It's high quality videos as well and a more fun conversational style where Rob Conery asks the author questions vs pluralsight which is more the author speaking. Tekpub has a bunch of free series' too. Click [here](http://tekpub.com/channels/free) for more. If you are into c# I would personally recommend the c# series on Tekpub. It is by Jon Skeet who is the Chuck Norris of C#. Google for his name to find more.
I agree. However in some cases typing everything isn't really useful. E.g. with knockout (and other javascript libraries) you might end up having to type a lot just to see how something works. Also few typos mean that all you have is empty browser screen and cryptic error in the browser's console window.
Well said. 
WCF is not that bad, and anyone learning .NET NEEDS to learn it because you are going to build a service or trouble shoot a binding eventually whether you like it or not. 
Pluralsight gives you access to 20 MS courses if you have an MSDN account. 
Here are the basics (syntax, language features, hello world type programs): [MSDN C# Tutorials](http://msdn.microsoft.com/en-us/library/aa288436\(v=vs.71\).aspx) These are more about the framework, winforms, webforms, etc. [MSDN Visual C# Tutorials](http://msdn.microsoft.com/en-us/library/aa301562\(v=vs.71\).aspx) And here is something a litte more modern (webforms is at least 12+ years old) [Intro to ASP.NET MVC3](http://www.asp.net/mvc/tutorials/getting-started-with-aspnet-mvc3/cs/intro-to- aspnet-mvc-3) 
agreed. But that doesn't mean that you should use it if you can avoid it. And I wouldn't recommend someone who want's to learn C# to bother with that crap. Edit: Great Post by the way.
How is mono working out? Are the apps slowed down by the integrated VM? 
Wow, thank you for spending the time to write out such a complete list. People like you make me quite excited to learn .NET as you are proof that there is a robust community of developers to learn from. Thank you.
This is a great tool , I want to use it for Security Analysis
Don't know how it works on Android, but for iOS apps, Mono does AOT (Ahead Of Time) compilation, which basically converts all the CLR bits they need to iOS/ARM binaries so there's no JIT VM. May still have some overhead, but seems like it's negligible enough.
the MVC project in VS will throw together a test page. So you can create a new MVC app and check it out. Using the answers everyone else give you may be able to understand whats going on.
http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx
if you reject the idea that there can be patterns common to bad code, i think that's an indefensible position. if you simply object to using a term to name this collection of patterns, how would you propose communicating about them? the phrase "patterns common to bad code"?
&gt; the phrase "patterns common to bad code"? Anti-patterns. 
If I'm doing a simple statement like a where clause I'm going to use a lambda expression. If I need to use joins I'm going to be using Linq as its easier to read and code through
To respond to the question, "How do you know if your code is bad?", I would answer "anti-patterns". There might be degrees of badness here. "How do you know if your code is the worst?" "Anti-patterns." "How do you know if your code is not the best?" "Code smells." 
Ah, cool, that's probably just the built in windows authentication then. It should just work as long as the requests are not considered cross domain, when your app makes calls to your WebAPI service the browser should fill out the right headers for it to work. If you use fiddler to sniff what's going on you should see the service reply with a 401 challenge and the browser respond in turn. That same interaction should occur no matter if it's a page or an ajax call as long as it isn't considered a cross domain call.
Sounds about right! Thanks for your input!
I wasn't even aware of such an ASP.NET construct! Will look into it, thanks!
What's the point?
Agree with this. I've upgraded several projects without issue. As ever, take a backup first though eh ;)
I've had zero issues moving a .net 4.0/mvc3 app to VS2012. For a few months the dev team was split between VS2010 and 2012 and it worked fine. It helps that the proj and sln file formats are compatible, which was not always the case with previous releases.
No issues here either. I've been on 2012 since release as a guinea pig and everyone else is still on 2010. Haven't heard of any problems at all with projects/solutions. ASP.Net Web Forms.
I've see n a number of suggested alternatives which are probably more "proper" than my solution. I will admit that while I saw this as a fast and flexible solution to my problem, I ended up pursuing it as much out of sheer interest as practicality. Your suggestion, and those of some others are probably better from a "production" standpoint. However, I am totally self-taught, so I often have to learn things the hard way before someone comes along and points out what should have been obvious . . . :-)
It's probably fine, but you're going to have to test it. I had an issue, but my issue was one with using a sandboxed appdomain, and I saw an issue with a project I don't work on, but that was due to using reflection on a BCL internal class. So long as you're not doing anything weird, you're probably fine.
Only issue I have with 2012 is the new TFS interface keeps tripping me up. Some things I like, some things I don't.
Mine was gone at "Plz.LinqStahp" But yes, bravo, this is hilarious.
Yes it does. le derp 
WebAPI is just a way to implement a "Restish" web service in .NET using the MVC pattern. You can certainly use WebAPI to implement the Respository Pattern. But, are you really okay with just wanting to spit the data from your repository out on the wire? I generally use WebAPI to wrap business logic on top of the repository. That way I don't have to go around re-implementing business logic, or carting a library around from project to project. The business logic is implemented in the web service and when it changes (assuming the interface hasn't changed) then all the clients of that service automatically get to use the new business logic. 
Don't hate on Resharper just because you don't understand the LINQ... Really it makes a nice opportunity to learn.
Yep, it's giving me trouble too. I'm running it on a VM, sometimes through remote desktop, and it doesn't always seem to register button clicks. It's very unfortunate the check-in button is directly underneath the pending changes link. I clicked the link, nothing happened, then clicked again, only to see the first click register right as I clicked the check-in button. Also, the database projects have this bug where double clicking a file in the solution explorer opens the wrong file. It seems trivial until you are working with multiple, similar files. It's very easy to edit the wrong file. It feels like VS2005 in terms of market readiness. At least the migration is a breeze.
You know, you don't have to do everything ReSharper says.
I found this funny despite being a rage comic. Resharper is great, but this is usually amusing. It's great fun to try and make the LINQ expression larger!
Sometimes I really really hate resharper suggestions. Single-line expressions are not better, they're just less readable.
/r/ProgrammerHumor ?
Give CodeRush a try? I actually like it better than resharper.
ReSharper is [$349](http://www.jetbrains.com/resharper/buy/index.jsp). CodeRush is [$2199](http://www.devexpress.com/Subscriptions/DXperience/chooser.xml) I'll try it but I don't know if the boss will buy it.
I went to the first Build and would highly recommend it.
"This file is no longer available because of claim by Microsoft." ?!
The fuck! It ain't a copyright material, or anything. :( Any way, any solutions for the problem?
Yeah, it is pretty weird. BTW, I was talking about actual issue with VS debugger, one which installs an app for debugging and forgets about it.
I won't be able to make the dates for Build this year, does anyone know if they provide a livestream of the speakers?
You can build it to simulator
Automated IP-infringement filtering false-positives FTW.
Tried that too. Same result. In simulator, it uses my own start screen setup, so that install icon is synced to my main start screen too. :(
kind of a dick move whoever downvoted you for asking a question. I'd like to know more about SCrypt too.
I did some research on Scrypt a few months back. Scrypt was developed by the [tarsnap guy](http://www.tarsnap.com/scrypt.html), and conceptually is similar to BCrypt, in that it's a key derivation function with a configurable "work load", but designed so that massively parallel attacks (basically someone with a lot of GPUs working together) are not as effective. Scrypt does this by some algorithmic trickery that (apparently) makes it difficult for an attacker to optimize (memory-wise) their attack, which means they have to have more resources (more GPUs, more RAM) to crack than an equivalent BCrypt hash. While I've read Percival's paper and I believe Scrypt probably is sound, I can't claim to completely understand the whole system, so my summary above is based on my understanding of others' opinions, rather than something I've proven myself. That said, I use Bcrypt in .NET projects, but that's because the standard implementation has been out for a few years and is decently-tested. When it comes to this stuff, if you're not a security researcher who understands this well (I'm not, and I don't), it's usually best to trust the wisdom of the experts (or at least the wisdom of the crowds).
performant? Does that mean fast? Because scrypt is suppose to be slow.
My guess would be CQRS. Here is an example: http://www.martinfowler.com/bliki/CQRS.html
Thanks for posting this. I always thought that Bing maps were more visually attractive than google maps and given the choice I'd rather make visualisations with Bing. Edit: Why the downvotes?!
If you use Firebug or WebInspector, you will see the class names that the ajax toolkit assigns to the elements. Like ajax_ _slider_h_rail or ajax_ _slider_h_handle. You can override those with your own style rules. You should also be able to specify your own class names for those elements in the markup for the slider extender. Here is a decent writeup (not mine): http://aspadvice.com/blogs/garbin/archive/2007/12/10/SliderExtender-layout-and-custom-appearance.aspx
To add, this is the same for all of the .Net Ajax Toolkit controls (tab container, etc). They assign their own class names unless you explicitly name your own. Either way, you can add/overwrite style rules for those classes to gain the look you want.
thanks so much!!
Ah, sorry, I didn't mean to over-explain. :-) Performant just meant that it is an implementation with the best performance possible given the hardware. I meant it as a contrast to other .NET scrypt implementations, which have 12 times higher execution time for the same work on the same hardware.
IIRC Build is sold out.
SQL
have you seen the pricing per month for Azure?
Is XNA totally dead now? That would be a shame imo.
Well, it turns out that writing generators without the use of gotos tends to be even more messy... Anyways, the point was to show how you (manually) can go from a function to a generator (in other words, how the yield actually get compiled). Then I had planned to create DLR-code that does this for expression-trees automatically, however, the post in it self became too long, and I decided to do the DLR-part at a later date. That said, I appreciate your feedback, and I'll go through the code-bits tomorrow, and try to tidy up a bit, so it's more easily understood what happens.
I have; it's why I use AWS.
If you are going to go for the C# approach, get the CSVHelper from the NuGet gallery. Parsing well formed CSV files can actually be more work than it seems. https://nuget.org/packages/CsvHelper/1.8.0 You shouldn't have to open the files and resaved them as .csv, the file extension is irrelevent so long as the file is actually in csv format.
I'll look into this, although it looks like the filehelpers library has better documentation.
There's definitely a tool for SQL Server Express that does this, it comes with the toolkit (google sql express toolkit) It doesn't allow to do a lot of processing on the data apart from choosing the data types, column names, etc... When I needed to use it, it crashed repeatedly on import, later - after I wrote my own importer - I found out I had a reserved SQL word as one of the columns in the CSV. I guess that was the reason for the crashes. Nevertheless, the tool itself was pretty decent
.NET includes a powerful and easy to use CSV parser called TextFieldParser. It is in a weird namespace, but there is no reason why you cannot use it from C#. http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.fileio.textfieldparser.aspx That said, I wouldn't use .NET at all. Instead I would use SQL Server Integration Services. This has lots of tools for doing the kind of data manipulation you need.
I'm looking at the toolkit but I don't see much mentioned about my needs, do you know the name of what it is?
I also recommend checking LINQ. (Dump is LINQPad's method, which is also worth checking out) var csv = "a,b,c\na,b,d\nc,a,d\na,b,c"; var items = csv.Split('\n'); var grouped = items.GroupBy(a =&gt; a); var distinct = grouped.Select(g =&gt; new { Name = g.Key, Count = g.Count() }); items.Dump(); grouped.Dump(); distinct.Dump();
[DTS Wizard](http://social.msdn.microsoft.com/Forums/en-US/sqltools/thread/546f4407-0aa4-4b04-96f3-e6f0ba39a9d1/)
To me the first thing I thought was this sounds like an SQL Server Integration Services task (SSIS). Why couldn't you just do that? http://msdn.microsoft.com/en-us/library/ms174181(v=sql.105).aspx
Assuming you are using a non-express version of Visual Studio you could probably copy the core vba stuff into a vb.net library and tweak it. Then you could just use that library with your regular C# stuff.
I hadn't heard of SharpDX, but I have been using SlimDX for a few years now. Will definitely look into using SharpDX in future projects. It seems to have a lot of advantages.
First 20 minutes are intro fluff about how he dislikes patterns. He points out he likes anonymous delegates and more recently lambda functions since they're a cheap way to create them (basically, he likes functional programming). Illustrates Strategy pattern using lambda functions. Walks from one method, to 3 copy-pasted methods, back to a single method that takes a lambda function that acts as a filter. Doesn't get far enough along to realize he just implemented .Where(). Points out no one should ever expose IDisposable to the public - instead you should use a private constructor and: public static void Use(Action&lt;MyDisposableClass&gt; action) Which handles the life management of the disposable object, and the caller just says what they wanted to do with it. Also points out this is useful for transactions. Last 5 minutes is conclusion fluff about disliking patterns again. I think he's a Java programmer at heart avoiding saying that he really wishes Java would get lambda functions.
This Article is Bad and you should feel bad
Looks like the kind of thing that could have made an excellent article (something that can be used a quick reference).
I agree. Also the article, while not exactly in depth, is actually quite accurate about the required change in mindset.
[Action/Executor](http://msdn.microsoft.com/en-us/library/cc984279.aspx) is a more formalized version of this pattern and uses less confusing naming. Rather than a bunch of handlers I prefer to write a single action agent class capable of calling up and running any action while using Unity as a directory of actions. 
Okay, you want specifics why this article is terrible? First off the core of this article is that wpf/mvvm is based on class oriented development. This is nothing new in the .Net development world. In windows forms development this is accomplished using databinding. Also, MVP development has many of the same concepts as MVVM. Second, this article does not talk to the inversion of control that occurs with MVVM. That concept alone is much more complex concept to comprehend. Inverting the control to the view-model is the most challenging part of learning the framework. However, again this is not a new concept to .Net (see dependency injection). Finally, this article lacks any real substance. It has a basic registration screen, however, it fails to show the most complex work of how to bind the UI to the business object. Sincerely, Enterprise MVVM developer 
I was having this same issue when playing with a demo metro app I downloaded through MSDN. I have a feeling that this is intentional, albeit aggravating. 
Want needless complexity? Look for 95% of MVVM examples on the web! Of course, someone tries to do a simple, useful, straightforward example, and it's dumped on...good example of why WPF is headed to legacy land.
Where is the example? I see two pictures with no helpful information. If there was actual source or examples it would be a lot more helpful. A person cannot read this article and understand MVVM, I actually propose this misrepresents the critical changes in MVVM. If this article talked about the inversion of control that happens in the view-model you would have an excellent article here. However, talking about class oriented design patterns really does not apply to MVVM. I am a proponent of MVVM and it disheartens me when I see these sort of misleading/uninformative articles. If you removed MVVM out of the title and left WPF this article would be alright in my eyes.