this is what I get for not reading the other 2 posts as from your 3rd post it seems like you are writing your own aspect handling code. I haven't used PostSharp in quite some time though I will take a second look as honestly I don't think all this ceremony is needed to get an aspect working its certainly not this much work in unity. 
Make a compiler thingy in it as well then, call it Adam (or Laura).
I keep running into a related issue. I need to call some synchronous methods from an async method. It seems like `ConfigureAwait()` and `Wait()` are the answer. Is there a better way?
Also I should mention that if your properties or methods have side effects then this also doesn't work. Next revision of the library will handle calling things only once (I just finished the beta code, still need to run it through some tests)
FYI, I did the caching so properties/fields are only ever accessed once. Available on [nuget](https://www.nuget.org/packages/Devshorts.MonadicNull/0.2.1) now. 
I had to double check it wasn't posted on April 1.... entire roslyn source under an Apache License? Oh my, how times have changed (for the better).
I don't know much about it, to be honest. I know what I saw in the keynote, which was an old Northwinds app they put a metro interface on top of. I also (thankfully) am not in the position that I have to worry about WPF applications, so I didn't look much more into it. I'm not sure I can say anything specifically about winforms. The impression I got from every session is that Microsoft is pushing interoperability and compatibility, including porting old applications forward. I'm sorry I can't be more helpful. I'm can only relay the news.
Most of this stuff has been open source for quite a while, no? I was hoping for mscorlib.dll and friends. 
A shame the core stuff isn't though. Xamerin (IIRC) still has to reverse a lot of stuff through reflection.
Don't you mean Zune II? * *ducks* *
Good as in MS Bob or Windows ME? ;)
I liked Bob. It was really easy to uninstall.
Thanks for the laugh.
Toss the templates in the Db and throw in a wysiwyg editor in the app. No more redeployed for email changes.
WPF was mentioned in the panel discussions: http://www.infoq.com/news/2014/04/WPF-QA http://www.infoq.com/news/2014/04/XAML-Panel Make sure you take the official survey: https://www.surveymonkey.com/s/WPFBuildSurvey
WinForms is in maintenance mode. They will fix it if something breaks, but that's about it.
Still looking for more info on that. So far it seems that WinForms is immaterial, as only the non-UI parts can be brokered. But that's largely speculation.
&gt;Don't use Access databases for applications. Never. Ever. Do. This. Never. Your words mean nothing, developer! Why, I can hear Joe in accounts receivable developing an application that will be widely adopted within the company at this very moment! Mwahahahahaha!
Ehh, Access is still better than MySQL.
do you have any insight on OleDB itself? I had an application that used OleDB to talk to (at the time) an access DB, but was set up to interact with any database, as long as you had the right connection string and driver available. everything worked great until there were a large number of users, but even after they had moved to sql server, it had similar connection issues.
What is the recommendation for local databases then. Most of my apps are heavily data driven and require a way to store large amounts of local and remote data.
LocalDB, SQL Express or SQL Server Compact. All have their pros and cons, but at a minimum support T-SQL and most importantly ARE NOT ACCESS.
If you have any questions let me know. I'm pretty sure that I attended every desktop session at Build. And if I missed one my side-kick probably saw it.
It's sort of like a service pack except it contains new features. So you install on top of your VS2013.
In addition to the Microsoft stack offerings, there are things like SQLite, too (which has great .NET support). RavenDB is a NoSQL offering that provides an in-process datastore. 
I use a retina MacBook Pro for all my dev work when I'm not at my desk. I have basically the same requirements as you. I fully expect people will disagree. But I think laptops are shitty and Apple seem to be the only company capable of putting together a half-decent product. Unfortunately I need a mobile computer and the MacBook makes it a tolerable experience.
In summary - unless you absolutely need portabilty, build a desktop computer.
16gb is enough for native windows, I get by easily with a 16gb MBP using Fusion. Keyboard layout is really important, and learn all the keyboard shortcuts. Add R# for even more shortcuts. I would do an ultra book if possible, you aren't gaming and don't need all the 3D stuff. Get the 256mb SSD if you can, all the tools take up space over time. I would seriously find a retina class display as you'll be staring at a lot of bugs for hours trying to find the one line that's keeping you awake -- might as well make it easy on your eyes even if your brain is tapioca. 
For development, I couldn't handle using an Ultrabook, just too small of a screen, even with the high resolution!
There's no need to disagree. Apple makes the best Windows laptop on the market when it comes to a combination of quality and performance. They are pricey, but at the end of the day, IMO, it's worth it.
Sounds like a [Lenovo ThinkPad W540](http://shop.lenovo.com/us/en/laptops/thinkpad/w-series/w540/) does just what you need. The T, X and W series are legendary for their sturdiness, if you don't mind paying the price. Also, notice that you can customize it beyond 1080p.
Totally agree. Its the subtle features too, such as backlit keyboard. Maybe all laptops have this now but that alone is a feature I can't live with out now.
The Dell XPS 13 is pretty nice, though the top of the line version only has 8GB ram. As mentioned elsewhere, ThinkPads are always good choices, as are MBPs.
Throwing in another vote for a rMBP. 
This is definitely worth noting. Powershell is ridiculous even with the largest setting on my mbp.
I use a Lenovo X1 Carbon and like it a lot. 16GB RAM + 256GB SSD. resolution is 1600x900 on a 14" display. it's not 1080p but it's served me pretty well.
I normally rave about the Thinkpad T or W series. I've had one or the other for almost a decade, going back to the T41. I have a W520: love it. I think I'm going to look for something else though, since they did the unthinkable with the W540: they messed with the perfect keyboard. They changed the one thing that everyone loved on the Thinkpad. They changed it for the worse. 
you should read [working with legacy code](http://www.objectmentor.com/resources/articles/WorkingEffectivelyWithLegacyCode.pdf) (PDF) by Michael Feathers. he addresses exactly the scenario you're in. also, by legacy code, he means code that can't be safely improved upon because of lack of tests and documentation - ie your scenario.
The only thing i dislike about the MBP is how noisy it sometimes gets.
Just call the synchronouos method directly like this: async void Foo() { …some stuff MySyncMethod(); …some more stuff } If that's too slow (so GUI will hang), make a crude async version of MySyncMethod like this: async void Foo() { …some stuff await MySyncMethodAsync(); …some more stuff } async void MySyncMethodAsync() { return Task.Run(() =&gt; { MySyncMethod(); }); } As long as you're "in the async flow", you should (almost) never have a reason to use Wait. The same goes for ConfigureAwait, which is used to say "when the wait is over, you don't need to return to the thread we were running on just before". Note that new tasks started with Run will *not* inherit the thread; it's only for when an await returns.
What's so bad about it? My main gripe with Lenovo keyboard is the Fn key in the bottom left, which is where I expect the Ctrl key to be... I miss my copy/pastes most of the time :/
Another vote for either a Thinkpad W-series or MBP. The Thinkpad has 4 memory slots so you can go up to 32GB of RAM, as well as being able to swap hard drive &amp; battery if/when you need to. The MBP is limited to 16GB and unless you get a 2012 model, the drive isn't (easily) swappable. If you're doing .NET development, do you really *need* 1GB of memory on the video?
I am thinking of getting a Surface Pro 2 for my development. Besides not being an i7, what are the drawbacks? Do you have it setup with external monitors?
It's just alt-3 for # on my UK rMBP. I find it quite easy to hit.
How anyone can program on a single monitor is beyond me. I went dual 10 years ago and 3+ since then. Using my laptop is painful. Good luck, though.
I didn't know that, thanks!
Nothing really, I use it with multiple monitors without issue and also code with it on my lap when sitting on the couch. It's specs are actually in line with what a lot of companies consider a dev machine anyway. 
Looks cool. And you've put in a lot of effort :) Just an FYI though - I don't know how correct I am - so please check this up. Using Unity 3D for non-gaming application is forbidden using their std and pro license. You need to contact them for such cases.
You can't....for exactly that reason. BUT, you can write a service that looks for minecraft.exe periodically and kills it.
Boot camp or parallels?
You don't have to write a program for this, you can add a script to the windows task scheduler that kills minecraft. 
&gt; it does seem to drain the battery life It most definitely does. Most apps have their main loop sit idle until there are messages to process, then process those messages and return to being idle. Game engines however have a target frame rate (60 is default in Unity, but it's configurable). Regardless of whether or not your app receives any messages it will still update and re-render everything at this frame rate. You can lower this frame rate, but you would do so at the cost of smoothness, since *everything* is done within one of those frames, including processing clicks and animating UI elements. EDIT: That said, I'm not at all saying you should stop using game engines for general apps. They have advantages, especially for interactive applications. But one should also be aware of the kinks and drawbacks.
I'm very open to feedback and improvement, so please let me know what you find.
Wtf, how rubbish.. that doesn't solve anything. He can play his games, but only whenever I want him to. You don't just uninstall Java.. I hope you don't give other people this kind of advice..?
My kid is old enough to install and uninstall other programs. Making him unable to uninstall programs is not the right way of dealing with this problem. Also, hence the "I just want to improve my programming knowledge"
This could actually work, in a way. Is there a possibility to enable and disable this script at anytime?
That's exactly what my program does atm.. And I really don't believe this can't be done... WPF has OnUninstall methods and etc, but I can't get this working.. Overriding them doesn't do the trick.. Or is there something I'm doing wrong?
well, you can try to camouflage it with some microsoft-looking name and microsoft as an author also, you can install all the required assemblies manually and just "copy" the executable (but that would still require some camouflaging, since you could easily distinguish that in process manager)(or you could make the program service)
UPDATE: After awesome constructive critique I received here, I started from scratch and rewrote pretty much everything using ASP MVC and Razor as view engine. I ditched webforms, used Entity Framework, and a bunch of awesome libraries like jQuery. **Holy cow what a difference this all has made!** So far, voting and commenting is not implemented, but submissions of new self and link posts is working. I bought another domain and by the looks of it, this thing can become something one day :p I will start a new GitHub repository and push the source code asap. Once again, thank you all for your comments, hints and tips :) I owe you a beer :)
Not bad. What I was planning on doing was making it into a console app that runs on startup.
Well than tell me what you would do.. I don't see any other option.
I have something like this already. A small WPF program that constantly looks for minecraft signs and kills the programs. I could try to use it as a service though :) I'll give it a try. Thank you.
I wonder if this could be solved by overriding the main loop and telling it to only redraw if changes are made to the UI. 
Its just an exe. Minecraft is also just an exe that isn't installed and therefore not on the list. Additionally, you can just remove the registry record for installed apps and they won't be in the list anymore. Make sure you remove the one with installation details, not one the app uses.
You absolutely can... That list is simply stored in the registry and any admin user can modify it. An uninstaller can be any program as well, asking for a password and failing would be no different than a user cancelling.
Sold!!!
I work on moreterra, mapping software for terraria
Seriously? I honestly thought it wasn't possible. Huh, learn something new every day. :)
I do, personally. 
Another major flaw of Unity3d -- it is single threaded.
I like to contribute to existing projects. My user name is the same on github and codeplex. I've even contributed to the nuget gallery. There're plenty of .net OSS projects. Someone write's them.
My GitHub account speaks for itself, very active in the .NET community and have published several projects as open source, many of which are foundation to certain company systems. It's not an 'active' community compared to a language that is purely open source, but it's getting better. Roslyn being open source this past week is a huge shift for MS IMHO. 
I do, although many of the libraries I've written are inspired by the things I miss from Python * [Strongly typed paths](https://github.com/nemec/pathlib) * [Command line argument parser](https://github.com/nemec/clipr) At work we use a ton of open source libraries, too, like Fluent Validations, Specflow, Log4net, Json.Net, and official stuff like asp.net which is now open sourced.
Sorry man.. My bad i guess.. I checked and couldn't find. Should have been some other engine then or older version.. I'm not sure.. Sorry again
Unity is distributed without source code access and the main loop is on the native end. So it would not be possible.
Making him play Minecraft after entering a password is also no the right way of dealing with this problem.
I contributed to the Castle stack and iTextSharp in a minor fashion (bug reports, patches). Not so much these days though. Castle is pretty much stagnant and I don't agree with the adoption of the AGPL license for iTextSharp.
Agreed. I work on OSS stuff as a hobby, but it's either Python or JavaScript. .Net heavy use in the business environment, MS' dev platform and the limitations of only targeting Windows (for the most part) make it a mush less likely choice for an open-source project that is anything more than a library.
I try to, biggest contributions I've made so far are: * [__AttemptIt__](https://github.com/TWith2Sugars/AttemptIt): A computation expression based on railway programming * [__TypeScript Support in FAKE__](https://github.com/fsharp/FAKE/pull/385)
Yes you could configure the task to run every day at say 7pm and run it every 5 minutes for 12 hours. 
Yes. I maintain [Gepsio](http://gepsio.codeplex.com), an open source project to parse and validate XBRL documents.
You can't use GTK# on mobile but the best approach to mobile development is a native UI rather than something that will end up looking wrong on all platforms. Its clear you've spent a lot of time on this project so kudos to you for that! I just couldn't ever see myself using something like this, I would rather use GTK# for desktop and then Mvvmcross for mobile..
I open source a few bits and pieces. I open sourced a Xamarin.iOS App I wrote over christmas which was well received. I'm currently writing a .Net library for NiceReply which I shall open source as well. Most of time at the moment is writing documentation for it though. I hate OSS without useable docs! 
&gt; It's been my experience that most .NET developers are not that heavily involved with the OSS ecosystem Unpopular Opinion Puffin: A lot of .NET developers work for corporations which don't allow sharing their code. I was contributing to Open Source for a good 5 years about 16 years ago, I've done my time. I help out on Stackoverflow occasionally when something new pops up that is obscure, and if my employer allowed it, I'd pop any utility I write on something that's not github (hate the name). Long Live Freshmeat! Love Live Source Forge!
I am working on this: http://albatrossshell.codeplex.com Gunning for the first stable build in a couple month.
I'm with you there. I normally prefer to do things other than program with my free time and have zero desire to either pay for a full-fledged version of VS.Net+R# or fight the sadness of using a hamstrung free version of VS.Net or, worse yet, MonoDevelop or something, to scratch an itch that I can share with the world. I've contributed as much to Python and Ruby OSS projects as I have to C# ones in recent years.
What about windows 7?
Well someone has to right? I mean a cursory glance at CodePlex / GitHub / BitBucket projects in .NET reveals a fairly rich landscape of OSS options. My own story has been one of submitting patches to various projects as needed by my employer for things. I also find myself the maintainer of a few OSS projects because when I needed them at work they didn't exist, and the organization I was working for was large enough that promoting reuse between divergent groups across the agency allowed me to publish it. As for not being anywhere near the scale you see in other places, I'm not sure that's entirely true actually... if you look at the ecosystem vs. something like Java, etc., it's not far off actually. I haven't run into much that their WASN'T an OSS option for on this side of the fence... Besides maybe good PDF libraries. I have yet to find a non-commercial one that is really good...
&gt; What about windows 7? It's going to be a mixture of the same or worse - certainly not better in any regards.
Most of the shaders, geometry, audio, and platform namespace runs on one thread. This became a performance issue with my cabinet game I was working on.
I absolutely agree with you. I do the same exact same thing. The only reason I would think about switching is for an added touchscreen. Trackpad++ also really helps if your running macbook with windows 8.1
the new mac pros aren't worth it IMO. you can build your own killer desktop machine with the insanely fast $300 i7 chip, 16 gb of ram and 512 SSD for under $1000. I'd do that and buy a macbook air if I were u. Or just go with a retina. 
Log4Net allows you to change how and where your logs go just by changing the configuration. It's more flexible then calling your custom tracer.
But you need to write an appender for each target, right?
[If you don't find one that already fits the bill](https://logging.apache.org/log4net/release/sdk/log4net.Appender.html) yes but if so that must be one hell of a exotic appender. On top of the built-in ones, there are a ton of custom, ready-made ones available for almost every imaginable thing. And even if you end up writing your own, you maintain the possibility to switch it out with a bit of configuration. On a side note, I personally prefer NLog as the configuration is a bit cleaner. For extra flexibility I drop Common.Logging on top so I'm not even calling NLog directly and could switch to Log4Net or another framework without having to touch my code. 
Oh, yeah, cool, I had my own abstract class to do something similar.
This looks really cool. I was hoping to spice up my ASP.Net MVC apps without having to write a ton of Javascript. Anybody use it and have feedback on it?
Yes! [An Option type for C#](https://github.com/tejacques/Option) [Run Async Code from synchronous functions, safely](https://github.com/tejacques/AsyncBridge) [Hot reloadable strongly typed config files](https://github.com/tejacques/ConfigManager) [SignalR helper Library for Mobile/AngularJS](https://github.com/tejacques/callr)
I haven't done it myself but you should take a look at DotNetOpenAuth. Also here is an article, although dated at this point might be able to push you in the right direction http://scatteredcode.wordpress.com/2011/12/01/dotnetopenauth-oauth-and-mvc-for-dummies/ gl!
Yes, I do... I'm the author of [MimeKit](https://github.com/jstedfast/MimeKit) and [MailKit](https://github.com/jstedfast/MailKit) which are part of the new .NET Foundation announced at Build 2014 :-) 
Love your stuff! On a tangential note, I hope the .NET Foundation has better results since you (Xamarin) are involved as opposed to some of the the previous efforts like Outercurve Foundation have managed to do so. 
Did you check http://www.nuget.org/packages?q=linkedin?
Thanks! So far it is going alright. Go it to sign in and set up their basic info pretty easily. Now the tricky part: getting the information from their profiles into my database.
Yeah, nothing seemed to really stand out there. Wanted to see if someone has done thing before and recommend a package that they liked. If not, trial and error it is!
Thanks! I hope so, too.
https://github.com/owin-middleware/OwinOAuthProviders This might be helpful. I haven't used it myself but came across it while playing with asp.net identity. 
This is interesting in that it actually seems to be built by Facebook (I don't mean React, I mean the .Net integration bits). 
Good stuff. I notice you are using Dapper, what type of gains do you see with it over the entity framework? 
Yeah, somewhat indirectly. It's built by me and I work at Facebook, not on the core React team though. Because this project is related to some of Facebook's work (React itself), I needed to release it with an appropriate license and follow Facebook's guidelines for open-source releases :) Most of the projects under https://github.com/reactjs are in a similar situation.
Thanks! I haven't done much in the way of speed comparison. At work we use EF for simple things, but we have found that EF blows up when queries get too complicated. I like using Dapper in examples like this because I find it easier for people to follow what's going on when things aren't hidden behind EF magic.
Ah cool. Well, glad that there are people in FB giving C#/.Net some love :)
Browsing on my phone is tricky but this looks great! Thanks!
I'm assuming you are doing dotnetopenauth? I ran into the same problem. You can use the code below, though you may need to customize it a bit depending on the functionality you require. using System; using System.Collections.Generic; using System.IO; using System.Linq; using System.Net; using System.Net.Http; using System.Text; using System.Web; using System.Xml.Linq; using DotNetOpenAuth.AspNet.Clients; using Newtonsoft.Json; namespace YourNamespace { public class CustomLinkedInClient : OAuth2Client { static readonly string[] UriRfc3986CharsToEscape = new string[] { " ", "!", "*", "'", "(", ")" }; const string AUTHORIZATION_ENDPOINT = "https://www.linkedin.com/uas/oauth2/authorization"; const string TOKEN_ENDPOINT = "https://www.linkedin.com/uas/oauth2/accessToken"; const string BASIC_PROFILE_ENDPOINT = "https://api.linkedin.com/v1/people/~:(id,first-name,last-name)"; const string EMAIL_ADDRESS_ENDPOINT = "https://api.linkedin.com/v1/people/~/email-address"; private readonly string ConsumerKey; private readonly string ConsumerSecret; public CustomLinkedInClient(string consumerKey, string consumerSecret) : base("linkedIn") { ConsumerKey = consumerKey; ConsumerSecret = consumerSecret; } protected override Uri GetServiceLoginUrl(Uri returnUrl) { var requestToken = Guid.NewGuid().ToString(); var builder = new UriBuilder(AUTHORIZATION_ENDPOINT); builder.Query = CreateQueryString( Tuple.Create("response_type", "code"), Tuple.Create("client_id", ConsumerKey), Tuple.Create("scope", "r_basicprofile r_emailaddress"), Tuple.Create("state", requestToken), Tuple.Create("redirect_uri", returnUrl.AbsoluteUri) ); return builder.Uri; } protected override IDictionary&lt;string, string&gt; GetUserData(string accessToken) { var extraData = new Dictionary&lt;string, string&gt;(); var profileDocument = QueryUserData(BASIC_PROFILE_ENDPOINT, accessToken); var emailDocument = QueryUserData(EMAIL_ADDRESS_ENDPOINT, accessToken); extraData["id"] = profileDocument.Root.Element("id").Value; extraData["name"] = profileDocument.Root.Element("first-name").Value + " " + profileDocument.Root.Element("last-name").Value; extraData["email"] = emailDocument.Root.Value; return extraData; } private XDocument QueryUserData(string uri, string accessToken) { var builder = new UriBuilder(uri); builder.Query = CreateQueryString(Tuple.Create("oauth2_access_token", accessToken)); using (var client = new HttpClient()) { var response = client.GetAsync(builder.Uri).Result.EnsureSuccessStatusCode(); using (var stream = response.Content.ReadAsStreamAsync().Result) { return XDocument.Load(stream); } } } protected override string QueryAccessToken(Uri returnUrl, string authorizationCode) { UriBuilder builder = new UriBuilder(TOKEN_ENDPOINT); builder.Query = CreateQueryString( Tuple.Create("grant_type", "authorization_code"), Tuple.Create("client_id", ConsumerKey), Tuple.Create("client_secret", ConsumerSecret), Tuple.Create("redirect_uri", returnUrl.AbsoluteUri), Tuple.Create("code", authorizationCode) ); using (var client = new HttpClient()) { var response = client.PostAsync(builder.Uri, new StringContent("")).Result; if (response.IsSuccessStatusCode) { var result = JsonConvert.DeserializeAnonymousType(response.Content.ReadAsStringAsync().Result, new { access_token = "" }); return result.access_token; } else { throw new HttpRequestException(response.Content.ReadAsStringAsync().Result); } } //var requestUrl = builder.Uri; //string response = client.UploadString(requestUrl.ToString(), "POST", ""); //if (string.IsNullOrEmpty(response)) // return null; //var result = JsonConvert.DeserializeAnonymousType(response, new { access_token = "" }); //return result.access_token; } private string CreateQueryString(params Tuple&lt;string, string&gt;[] args) { var builder = new StringBuilder(); foreach (var tuple in args) builder.Append(Escape(tuple.Item1)).Append('=').Append(Escape(tuple.Item2)).Append('&amp;'); return builder.ToString(0, builder.Length - 1); } public static string Escape(string value) { StringBuilder builder = new StringBuilder(Uri.EscapeDataString(value)); for (int i = 0; i &lt; UriRfc3986CharsToEscape.Length; i++) { builder.Replace(UriRfc3986CharsToEscape[i], Uri.HexEscape(UriRfc3986CharsToEscape[i][0])); } return builder.ToString(); } } }
&gt; but we have found that EF blows up when queries get too complicated. I ask because I use EF most of the time just because it is so easy. Especially with the code first addition. I haven't run into any problems myself, but I have that worry in the back of my head. By too complicated Im assuming using joins and the such.
Indeed, once you start pulling lots of data with some joins EF gets excruciatingly slow. (Like 10x slower in some cases.) If you inspect the queries it's generating and run them manually in Sql Server Management Studio they actually run fast. The problem comes in with all of the extra change tracking and overhead that the framework 'gives' you. If you don't need that stuff (and I recommend against it) then Dapper is usually a better choice (IMO).
I should mention that in the example in the video EF probably provides nearly identical performance to Dapper.
If you join collections you obviously get a high data overhead. This is also true for raw SQL. As with everything: You need to understand the framework you're using and know what you're doing. Then it's perfectly fine to use EF and you can easily avoid slow queries.
As I said, the queries aren't the slow part. The problems comes in with some of the entity tracking overhead that EF provides. EF is fine with joins if you are pulling small collections with a few joins. But pulling large collections with a small number of joins can cause a slowdown. Dapper doesn't do any Entity tracking. So, the only overhead you get with it is the cost of converting your result set into strongly typed C# objects.
Ha, interesting! I never considered that it was even an option to disable change tracking. Thanks for the tip. I'll have to give it a shot.
Asp identity is def the best way to do oauth 
Nice, I've also managed to get multiple services to place nice with DotNetOpenAuth in absolutely no time. Except [reddit](http://stackoverflow.com/questions/16616354/cant-get-the-network-credentials-to-work). arghhh
Thanks for the sample! This is my hail-mary here. Can't seem to wrap my head around the other examples out there. Gonna try this now and let you know
I use an Alienware m18xr2 for work and gaming. I recently upgraded to 32GB, but it's mostly wasted. 16GB is sufficient and SSD is a must, especially when dealing with large VS solutions. I love the keyboard on it. Full size, has a numeric keypad, good action, etc. 18" screen is nice, too. Other things I like are HDMI/VGA/mini-DisplayPort outputs, good speakers, WIRED Ethernet port (I just laugh when people in my office complain about WiFi). 
Where are you getting OAuth2Client? I can't find the reference.. 
I don't know how anyone can do development on a tiny laptop screen period. 
God, that's great to hear! I'm on the edge of buying a MBA for .NET and Java development, but wasn't sure if running .NET in a VM would have decent performance. Do you happen to know if you could do this with a MBA? Specs would be i7 (1.7 up to 3.3 boost), 8gb RAM, 128 SSD, and 13" ofc, since 11" is too small. My plan is to run Windows in a VM (parallels) from my usb 3.0 external HDD (to save some space on my SSD). Usb 3.0 performance should be the same as the current SATA performance with an internal HDD. Thanks in advance!
The form is created this way: GK7000.Touch user = new GK7000.Touch(); user.ShowDialog(this); user = null; All of my User Controls are added to a panel: panTouch.Controls.Add(video[i]); This panel (panTouch) is added to another panel (don't ask why. This is an old project that needs to be 'cleaned up'): this.panBack.Controls.Add(this.panTouch); and this panel (panBack) is added to the actual form: this.Controls.Add(this.panBack); The form is closed with the following line: parent.Close(); The 'parent' in the previous line is the Touch form: Touch parent; public UCKlok(Touch ucTouch) { this.parent = ucTouch; }
this is indeed the answer: if you don't call Dispose() explicitly on the form after ShowDialog(), the form is simply 'hidden' after Close(), so all objects are still 'live'. Simply call Dispose() on the bigger form after it's closed and you should have no problem. 
Thank you for your reaction. I close the form with the following lines: parent.Close(); parent.Dispose(); But this does not do what it should do. when I re-open the form, I get an ObjectDisposedException for every object that should show on the screen. The strange thing is that I check wether the object already exists: if (foto[i] == null) { foto[i] = new GK7000.Foto.UCFoto(); } and it says that it DOES already exist, even though I used Dispose()...
When you say 'reopen the form', you simply call ShowDialog() on the same instance again? That indeed doesn't work, you have to recreate the form again (as you destroyed it). 
Hmm, that's indeed strange! Then I don't know, sorry.
No. Dispose only does housekeeping within the object your calling it on. Any external reference to that instance must be set to null manually otherwise that reference continues pointing at the now disposed instance. 
What do you mean with 'external reference' ? is a User Control that's added to this Form seen as an 'external reference'?
the array 'foto' holds a disposed 'GK7000.Foto.UCFoto' object. Dispose() does not release memory, garbage collector does. Dispose() only says, hey clean up after your self. So you need to remove the reference from array too.
It depends if you have some variable that survives the dispose still pointing at the control. The code fragments you've posted are too chopped to get a good insight into exactly what the mistake might be. 
This worked! checking if the instance in the array is disposed or not does the trick for my problem :) Thank you!
Well, when the main program is closed, all of the arrays etc are gone too. The real purpose of this program needs the arrays at any time, so right now, I don't see this as a necessity to fix right away. While this is fixed, I'm having trouble with a 'same kind of problem', but the solution's totally different. I've implemented the MouseGesture library to my project. And whenever I load the Touch form, I make a new intance of MouseGesture. But when I close the Touch form, the mousegestures still exist and it afflicts the rest of my program. It's the same kind of problem, but this time I NEED to get rid of the MouseGesture instance. There's no other solution. private MouseGestures.MouseGestures gestures; private void InitializeComponent() { this.gestures = new MouseGestures.MouseGestures(this.components); this.gestures.Gesture += new MouseGestures.MouseGestures.GestureHandler(this.mouseGestures_Gesture); } I literally have no idea how to get rid of the instance.. I've tried gestures = null but without succes..
Well, imagine a situation that users machine reaches the limit of available memory because you keep the forms in memory so the application becomes not usable after a certain period of time. You do not NEED to get rid of the instance, you need to stop handling the mouse gesture, so if there is a += there probably is -= Good luck.
Thank you for your help! :) I made a method that deletes the mousegestures eventhandler. It seems to work, partially. the mousegestures don't work anymore, but so do the normal clicks and mouse movements.
And why is it a "better" way?
&gt; Jon
&gt; Jon See, you've done it again
Not my code!! Found it at while ago. I'm just a fan of web development hence the OWIN, Nancy, SignalR with mono. Awesome. :-)
sorry, was traveling all yesterday. it's in DotNetOpenAuth.AspNet.dll. it may have moved since then though, not sure how up to date my nuget version is, wrote this about 6 months ago.
Pretty obvious on one hand - but then you think they might of had a Linux load balancer, use Akamai somewhere, etc... Good to hear they weren't affected
&gt; they might **of** had a Linux load balancer, use Akamai somewhere, etc... Don't get your prepositions and auxiliary verbs mixed up kids.
Forms implement the IDisposable interface, so you can (and really should) wrap the call to ShowDialog() in a using block. You can do anything you need with the form's control data inside that block. 
along with "most" Microsoft services. Comforting and specific.
Yeah, the iPhone and voice recognition have removed any possible spelling and grammar ability I had.
I get the impression that they're trying to figure out just how much interest is out there for WPF. Also that they expect Common XAML to be the way to go.
If you have more than 1 computer, you could have the other computer check for the presence of a "minecraft.exe" process running and terminate it. Sysinternal utilities like pslist.exe and pskill.exe can be scripted to accomplish that. That way, there is nothing (well, nothing easy...) on the monitored computer that can be done to stop it. 
He (Miguel) is deleting comments he doesn't like.
I think events is the big one, where say you have a _tmr timer object declared. I'm in a method, and I want to wire up an event handler. In VB.net, I'd declare the variable at the module level, along with a WITHEVENTS keyword. Then, I'd see the trm in the navigation combo box, and in the right hand combo I'd see the 2 accessible events declared on the Timer class. http://i.imgur.com/tWbMFI8.jpg Selecting tick will generate the following method: Private Sub tmr_Tick(sender As Object, e As EventArgs) Handles tmr.Tick End Sub Which is the equivalent of: tmr.Tick += tmr_Tick; private void tmr_Tick(object sender, EventArgs e) { } I see that this is available in Winforms Designer properties: http://i.imgur.com/Ght8Si8.jpg but not over on the code side: http://i.imgur.com/OjlVzsp.png 
So? It's his blog, he can delete whatever he wants. And given the number of death threats and other hate mail he's received over the years I'm not too surprised that he's being somewhat proactive on moderating the blog.
For me, it's more about discoverability. Timer's a sort of bad example because there's like 1 event. But take a Windows Form, for example... http://i.imgur.com/1FOk4iy.png Lots of different events, and seeing them side-by-side usually helps you glean meaning and infer use. I find myself really missing it, especially for new 3rd party components that I'm not yet familiar with... 
Thanks for the override tip, by the way. Productivity with C# seems like a steep slope for me, but I imagine it will improve with time.
An odd aside from Miguel: &gt; [5] Modulo private. They use private everywhere, and that is just plain ugly. I have been wracking my brain trying to understand why on earth anyone would consider that "ugly." It's a basic tenet of object-orientation!
The philosophy is more centered around writing code in C# than all of the clicking and pointing in VB. You can still see that whole list just typing `this.` in C#. The Autocomplete that pops up will have all the methods, properties, events, etc. of "`this`". As you highlight them, it gives you the help text as tooltip too.
He means the explicit use of the "private" keyword instead of letting things default to private. Take a look at the mono style guide.
Gotcha. Thanks.
Death threats?
A lot of Linux users really, *really* hate Microsoft and anything coming from Microsoft.
That seems overly pedantic to me... Maybe I'm just used to it though. My company's code standards require it to be specified.
Microsoft Azure offers the option of running linux instances. If you were using some technology secured by OpenSSL's TLS on those services, you were exposed (I'm assuming you'd have patched by now).
I get that, hell I used to be one if them, but death threats.. like, really? I've been following/participating in mono development for many years, and never heard if any death threats to Miguel (also wtf, down voting a question?)
Microsoft family safety. It's free. Also why do you hate minecraft but everything else is OK?
Thanks, I will give it a try :) I don't particularly hate minecraft, I hate the fact that he's addicted to it.
Others might include MS themselves.
And his fanbois are modding down comments like this apparently. 
Uh, yes? Do you use the addition operator? Hilarious!!!!!!!!
OK so when is Xamarin going to be included in VS for free? :)
Sure, they'll make it free... as in a free part of VS Ultimate edition. 
Good thing I have 14K sitting around
Paste the error
Its a whole web page. I'll take a screen shot
[here you go](http://i.imgur.com/fYgBU5w.jpg). it doesn't really make sense to me at all. and also, this is the only error I've gotten at all.
Disable unobtrusive validation or Google the exception and add the reference to jquery
This is great! I've learned a lot from poking around in the framework code over the years.
alright hopefully adding this into my config file works: &lt;add key="ValidationSettings:UnobtrusiveValidationMode" value="None" /&gt; edit: this kind of worked but now i have another error. its 4am and i think i can handle it from here. if i'm wrong and i can't handle it, I'll be back lol. Thanks for the help.
MvvmCross. His idea of using one design/designer to create multiple native UIs always leads to least common denominator packages, and I know for at least some of us, we use Xamarin mainly because they don't do that.
Dolphinitely yes! 
React still requires you to write JavaScript. It really does make writing reusable components a lot simpler though. You never have to worry about manually modifying the DOM as React handles all of that for you. I use React every day at Facebook (all of our new JavaScript development uses it) and I really enjoy it. I'm currently working on adding Mono support to ReactJS.NET so I can use it on my own site :)
Sure I'm not going to do away with writing some JS but the idea of, like with Angular, throwing away my server-side models and controllers to do them in JS is not very enticing. &gt;You never have to worry about manually modifying the DOM as React handles all of that for you. That's exactly what I'm looking for. Thanks, I'll test it out. 
You can do it either way actually. The benefit of embedding it is that you have access to all of the same domain layer stuff (repositories, entities, all that). I'd argue that you are usually better off having the WebAPI stuff in it's own project in the solution though. Then you can have the DTOs for the API in their own shared project if the app that it's embedded in needs access to it as well. If, however, there is only one app that ever calls the WebAPI, I'd argue the opposite, that you're better off just embedding the API in the MVC app in one go for simplicity. I don't think that's your case here though.
Why make each and every customer JIT compile some barely optimized code when you can precompile it and run it through some advanced optimizers? Performance matters on mobile devices. Customers really notice that sort of thing, especially when it comes to startup times. So Microsoft is doing whatever it can to give developers free performance boosts. 
Good point about the DTOs... In this case the DTO's project will be used by other apps that use the Web API?
Well, they could but in that case you'd have to actually provide that compiled DLL out to them as a dependency. If you happen to run an internal Nuget server, that's not too hard. Otherwise, you'd have to manage that dependency manually. Or you can have custom DTOs for every place you need it, or just work with JSON strings directly, but I tend to go with a shared DTO project for just this reason. In my case, we run all our stuff through a build server, and when you build the WebAPI project, it takes the DTO project DLL and exports it automatically to our NuGet server as a package that others can pull down. You just have to find a way to handle versioning numbers (e.g. does this DLL actually need republished or not? Manual version number bumping is one option here, but there are auto scheme updates you could expand upon...)
isn't there the cost of marshalling?
Basically what Facebook did. They had a large investment in PHP (urgh I know, but re-writing it all would cost and cause headaches) and they wanted performance. It was cheaper and easier to write a system that compiles that PHP into C++ and reap the benefits of native code. I'm excited to see if they bring .Net native to ASP.Net. Hopefully just make it a JIT setting where a freshly published .Net web application gets compiled into native on first run.
i responded in another thread about this project and while i haven't had a chance to put it to its paces, the more i think about this, the "biggy"-er a deal i think something like this could be, especially if we can handle/override the write-thru event and add thread safety. even a simple lock on the in-memory list would open this up to so many high performance multi-threaded situations. my biggest question would be how to guarantee atomic transactions so the in-memory list (probably json viewmodel, right?) would be in sync with the json in the db... that and any other relational tables you might want to update in the exposed write-thru events ;) it would be awesome to have my viewmodels automatically cached and synced with relational tables that the viewmodel depends on ala' MyBiggieList.UpdateAndSyncToTables(MyJSONThingy). i love this kind of out-of-the-box thinking and quite frankly with the explosion of the document store paradigm, i'm surprised something like this isn't already out there. i had read about this 'purse' project that has some interesting ideas, but it uses a concurrentdictionary so it reportedly wouldn't scale as well http://keivan.io/2014/01/introducing-purse/ and it doesn't offer have any concept of write-thru.
Love it. We're working on some of it. The Locking/Thread safety on the file-based store may be tricky. :-) 
Subscribe. Would like to know this as well.
I'm going to have to go with "Not enough information to solve this problem". But I'll give it an assumption-filled guess. 1) Is this WebForms or MVC? (I'm assuming webforms.) 2) Is this a built in control or some sort of Ajax control (IE UpdatePanel from AjaxControlToolkit)? (Assumed built in autopostback control) If you're making a full postback, there really isn't much you can do. The rendering of the page somehow went FUBAR enough to throw an exception that you don't have the logic to recover from, you're hosed. Your Global.asax.vb file has a number of cool tricks you can pull off, including an event you can create a handler for called Application_Error, but if you've already sent a full-fledged post, the view you posted from is probably gone or corrupted by the postback lifecycle.
I would investigate using ajax. You could have a callback method that creates the alert box. http://ajax.net-tutorials.com/basics/introduction/ 
You're correct, it's WebForms. Luckily, the exception has nothing to do with page rendering. It's this button &lt;asp:Button Width="120" runat="server" Text="Locate" id="cmd_locate" OnClick="cmd_locate_Click" /&gt; which calls Protected Sub cmd_locate_Click(ByVal sender As Object, ByVal e As System.EventArgs) //try catch block here: exception is thrown and caught successfully. In the catch block, just prompt the user the exception was successfully caught.
Unfortunately, asp:Button does a full postback to allow your cmd_locate_Click call to happen. So what happens is that the browser sends a view state back to the server, which gets parsed, and eventually magically triggers your event. That's the bad news. The good news is that if you're tricksy hobbit, you might just be able to pull it off in spite of this. You could, in theory, have an if condition in your markup that adds a script block based on a boolean value. If it's true, it adds the script block with something like: window.onload = function() { alert("Exception thrown!"); } 
Look into using websockets. Pusher is a very simple implementation I have used for realtime server/web-client chatter. 
Here's what the sub does: the user types in a user name and password and IP address into a form. They click "locate" and these credentials are passed into an SSH client which does stuff on the backend, without the user's interaction. If a bad password or IP or whatever is entered , an exception is thrown and I just want to say "something went wrong" and that's all. It sounds really bad but this is only being used internally, so user experience is pretty much out the window at this point. 
Okay I'll give this a try when I'm back at my desk Wednesday. Thanks. 
Will do. Thanks. 
Clever. Thanks 
Seconded. Although I would go with rabbit, signalr and angular. Events, events, events. A web server should never be sshing into anything.
Tell that to people using tablets and mobile phones. It's even a problem for some desktop apps if they have to compete with apps written in C++.
I don't know what phone you have but at least in Android you can see the apps start slower than iPhone apps and WP apps.
I would go with SignalR. It basically maintains a connection between the server and the client so that at any moment the server can call a JS method on the client.
The View should be unchanged, but should display the newest values according to database. Meaning: Request data from database, pass to View, let the view display it properly.
Your goal is code reuse and your view is really a template that gets filled in with data from your backend system. As long as the structure and what you would like to display in your pages regarding stocks is the same for each stock, you only need one view. Just make sure that the view model you build encapsulates all data that you need to display on the page (i.e. stock information, your stock review, etc.) Are you using an api or service to get stock information?
here is how I would go about it. - For the charts, I would use a client side plugin. google "stock charts js".You could route the information through the controller and use custom charting, but, this would be easier. - For the news I would grab a news feed server side and pass that to the view in a traditional MVC fashion. - For your daily opinion I would use a markdown editor client side and read/write it to a database server side. 
If it's only used internally and user experience is low priority then you can do a few things. * Add a label to the page and set the Text property to the error message in your catch block. * Use a JS alert * Create a custom popup, initially have the pop-up hidden and in your methods catch block make the custom popup visible and set its text. * Use page methods like others have mentioned.
Yes, do it dynamically. You could probably have one view for the generic stock page and simply populate it with the data you need. Also, create a simple admin interface where you can bring up a stock and all its related info and type in your comments/thoughts etc. All of that should get saved back to the database for display in the view the next time it is requested.
Data should be inserted and pulled from a database. The view should display that data dynamically.
I have the same technology stack. Our pain is more on the angular side so I'll be looking into ngDocs - thanks! Regarding the server side, it sounds like your pain point is more around navigating the code. We've addressed this by buying [ReSharper](http://www.jetbrains.com/resharper/) licenses. Another comment mentioned sandcastle which is a good option strictly from the documentation side. We don't have good documentation either on the SQL side, but we built the thing from scratch so it's not much of a concern for us. We also use entity framework so we have documentation for the entities in the classes. For unit testing with angular, we're using [karmajs](http://karma-runner.github.io/0.12/index.html). We have [gruntjs](http://gruntjs.com/) that is running our karma unit tests any time the code changes, as well as doing minification and uglification. We also use it for my favorite part of our javascript frontend - a command that will run the app in "front-end only" mode and fake returns for calls to the server. Our setup is mostly based on [ngBoilerplate](http://joshdmiller.github.io/ng-boilerplate/#/home) with some tweaks and additions. Hope that helps or gives some guidance. I'd be happy to go into more detail on any of the pieces above. 
Thanks for the reply. I found the best ngDocs builder for my requirements is [grunt-ngdocs](https://www.npmjs.org/package/grunt-ngdocs). It will generate a static site in whatever target directory you specify, which can be served up by IIS and included in the source control so every dev has local help. It also came out of the box with the old style of angular documentation. no need to make template files ( i dont have time for that. I barely have time to be on here right now! ) You still need to make a nodejs project to run grunt-ngdocs , but everything else I tried either generated PHP, or required extensive template customisation or was just broken ( im looking at you dgeni, the undocumented documentation tool :\ ). grunt-ngdocs took all of 30 mins to get going and generating usable documentation. As for the unit testing with karmajs, is it hooked into the build and run on check in, or do you have to run it yourself? I would love to be able to setup whatever is the equivalent of a git 'post commit hook' and test code as it is checked in, but we use Team Foundation Server as our repository, so im not even sure this is possible. 
NLog + Graylog
&gt; Bankers rounding tends to get a lot of hate because it goes against the grain of what we are taught to do as children Rounding to the nearest whole number is exactly what I learned to do as a child. I didn't realize this was unusual. If you want to always round up, you use ceiling.
You are missing the point, you dont round to the nearest whole number, you round to the nearest whole even number, say you have the numbers 53.5 and 50.5, what i was taught as a child would dictate that upon rounding i would be left with 54 and 51, but with math.round we get 54 and 50... we rounded up to 54 because it was the nearest whole even number, but we round down to 50 on the other even though the decimal was 5 because we already rounded up once. *EDITED for accuracy* GOLD? Wow... My first gold... Thank you who ever you are!
Was no one else taught this in fifth grade? With a 1,2,3,4 as the last decimal, you round down. With a 5,6,7,8,9 as the last decimal, you round up.
Thank you, i will edit my post to be more accurate
That is rounding up, which is different. The crutch of the matter is when the decimal is .5 With banker's rounding, you don't always round up when the number is .5 The fact that this differs from what we were taught a children is what makes this non-obvious.
I haven't seen it mentioned, but if you want Math.Round to "behave" like you learned in school, you can use it like this: Math.Round(50.5, MidPointRounding.AwayFromZero)
I see, so anything below .5 is still down as convention, anything above .5 is up as convention, but .5 itself flips between down and up?
After doing some reading, it doesn't look like I'm going to be able to run Graylog2 because I'm in a strict Windows environment. It's a shame though, because Graylog2 looks great.
Among new jacks on Stack Overflow, I believe they don't know what they're asking for when they call Math.Round(). When it comes to developers on million dollar systems, it beggars belief that developers are unacquainted with the roughness of floating point maths, much less unaware of how rounding works.
SignalR without a doubt
 ? Math.Round(50.6) 51.0 This behavior doesn't change regardless of what other roundings I've done. 
This, SignalR will take 10 minutes to set up this scenario
A strict Windows environment. Might as well plan for failure now. Relevant: I've been building software on windows primarily for 25+ years. Logstash (and GrayLog as well) are some of your best choices. Write to files and then collect and combine. The file system (local) has the best uptime and response time of anything the box can see. And it's the last thing to die typically on an OS crash. So use it. Splashing Linux is mandatory in nearly every system these days, there is just too much good software that was born and bred in that platform that sucks when you try to run it on windows. 
Torrent them (pirate bay?) find one you like and pay for it, take the hit on the crap software.. and learn from your mistake.
Also can you not email support, i'm sure you can get money back under the distance selling laws if it's not fit for purpose.
Fair enough :)
I edited the decimals, its 50.5
Y'know what, all this time, and I honestly didn't even know that Math.round behaved this way. Then again, I'm generally working with data that has a much higher precision.
That's an excellent point. Getting a linux box up at work is certainly worth checking into, but it's not going to be easy. I can ask for it, but if the guys who keep the servers up can't maintain it (linux probably isn't in their skillset) then I'm probably going to be out of luck. Thanks.
I had some weird issues in the past with it so i changed all my code to check the rounding character and if &gt;= 5 math.ceiling and if &lt;=4 math.floor. This just explains into words what i was encountering.
&gt; Bankers rounding tends to get a lot of hate because it goes against the grain of what we are taught to do as children, but it has very practical and solid real world applications. I don't mind it that Banker's rounding exists, I just think it is a poor choice for the default rounding mode. It is a very harsh violation of the principle of least astonishment, because the vast majority of software engineers have a background that is... well... engineering, not finance. If you care about the accuracy of the final number you aren't rounding intermediate steps (like money always does), so the Banker's method holds no benefit for you. 
The algorithm itself seems to be recent so I guess implementations are sparse and reduced to a simple example (I'm having the same issue some state of the art nearest neighbor search algorithms right now). If you want a more or less complete implementation I know redis [has one](https://github.com/antirez/redis/blob/unstable/src/hyperloglog.c), even though it's in plain C
The virtual appliance model was born out of operations teams that can't support Linux. Surely there is a container that can run under HyperV that would suit your short term needs. Then either train or hire a college kid to manage your Linux box. They'll know what's up. 
It depends: what tools do you have to aggregate the error logs/events, and what does your environment look like? If you're in an enterprise environment and have [SCOM](https://en.wikipedia.org/wiki/System_Center_Operations_Manager), and an ops team who are already invested in this tool, it might be worth considering the Windows Event Log as the place to write your info, warnings, and errors to. SCOM can monitor and pull your event logs together, and provide notifications out to stakeholders.
Facebook is integrated serverside. http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on 
This might work, my current environment is an intranet full of windows servers, some virtual some real, a Microsoft SQL cluster, and a slew of windows PCs of variable power and memory. I'll talk with one of the network managers about SCOM, that if it's that simple that would be amazing.
I talked it over with my Boss and Linux is a no go. All of the work I'd have to do to just try and find a way for this to work now would take less time than just making one of the other solutions (EL, nLog, log4net, etc) work the way I want it to. Thanks for your response all the same; I certainly do wish Linux was still an option.
You can roll your own or you can subscribe to a pay service like http://raygun.io or one of it's alternatives. I was going to roll my own but ended up using New Relic. It is way too pricey as you pay per server but I found out that the free subscription is enough. The big downside is it the free subscription only keeps errors for 24-hours. In any case I have Elmah on my web apps so I monitor with New Relic (plus it monitors the servers themselves) and when I need to dig into historic data I get the application's Elmah error logs which persist as long as I need to. I may not get sexy trending graphs of errors but I don't miss a thing and it takes very little effort to setup.
Log4Net has a memory appender which will hold things in memory. You can then keep count of items in memory and dump once in a while. I do this but I then dump to a WCF service that dumps to my database. Not 100% sure but making unnecessary WebService calls is worse or just as bad as making unnecessary SQL calls.
I have to wonder, if your end result can't be skewed much, why are you rounding at all? Shouldn't you do you calculations as losslessly as possible, and round your final result?
&gt;Shouldn't you do you calculations as losslessly as possible, and round your final result? Yes
Since no one mentioned it, for C#: [Doxygen](http://www.stack.nl/~dimitri/doxygen/). I use it but that's only because I didn't really like Sandcastle. Database documentation, I've only really used [SQL Doc](http://www.red-gate.com/products/sql-development/sql-doc/). It was OK but has a cost to it. There are a couple others out there to do DB documentation though so do a search.
Let's say you are using a distrubted system that performs equations on math and stores the results in a database. This is done many times a second and the money is stored. For another example, let's say we run a retail shop and need to give people change on the spot, but need to give a discount that doesn't divide evenly into cents. Let's say that we run a national chain and this happens millions of times.
looks of good advice here, but the new hotness would be serilog to seq. I also wrote a sink for serilog to write to exceptionless which is a nice service. All are open source and free to use, although there are hosted versions of Seq and Exceptionless with little friction to get going that are free.
thanks for the doxygen link. SQL Doc looks great, I hope I can convince the boss to buy it. I have searched for these things, and found a few options. It always helps to have some recommendations from people who have actually used things. It took me a whole day testing out js documentation tools to settle on grunt-ngdoc, and because I'm doing this of my own accord at home, thats time with my kids i'm giving up, which is worth more than gold to me ;)
In the first example, I wouldn't be passing rounded values around. In the second example, I'd give them as close to exact change as possible - no whole number rounding. If you need to generate a report of these transactions, would not the correct approach be to round only the final result?
In the first example - good man. In the second example, you can't give them fractions of a cent. If the customer is due $2.055 after discount, you'll have to round something to give theme exact change. edit: Honestly, in my experience, it's mostly useful when policy is dictated over logic. When you are a cog and can only do your small part in making the big picture not turn to total shit (or at the very least not make the problem worse).
Regardless of what service you choose, make sure you have an answer to this question: "Where do I log that the logging service is down/rejecting messages?"
Fair enough. I think I mistook bankers rounding only to apply to whole numbers, and not fractions of a fraction.
We use loggly.com. I think the price is great for the service. We too are a .net stack.
Are you aware of the fact that 4 is less than 5?
Love the new relic tools
Our setup where I work work like you mentioned here. Although each machine were the exceptions occur does not access the web service directly, instead we send an MSMQ message to a certain machine that then takes them and logs them. This is better because then you can have "service windows" for you logging application without missing any log messages being saved to the database.
Always something to keep in mind, great idea.
I'm a big fan of splunk. There are a ton of options and you don't have to change how you log your data to use it. Just install the forwarder and it gets your data. The splunk interface is very powerful.
I am glad to see it updated as well, I thought I read that the author had said he was bored with it and moving on. I still have a soft spot for SM, even though I switched to Ninject a while ago because that's what my team preferred. Also, you lost me at "public static class IoC"
Are you aware that the oauth integration occurred in 3 or cant you google ?
Have you used this with WebApi and MVC 5? We can only find a nuget package for StructureMap.MV4.
So this project is dead? That smells like I should go with Ninject instead.
I'm sorry, what part of this is WTF?
&gt; In Magento, files are grouped together based on functionality, which are called modules in Magento. 
And? I also group things based on functionality. 
Well there are areas in MVC which are similar to modules As far as conversion, I heard that it's the ninth circle punishment to deal with Magento data, it's apparently extremely oddly put together
Yeah me too, I'm using StructureMap.MVC4 and it seems to work okay.
"public static class IoC" is what the StructureMap.MVC project gives me. It's besides the point of the post, of course; apply it to whatever architecture you're using.
I don't think StructureMap is dead. I believe Jeremy Miller is giving up on FubuMVC (see his post here: http://jeremydmiller.com/2014/04/03/im-throwing-in-the-towel-in-fubumvc/) but not on StructureMap as far as I know. But Ninject, Unity, Castle Windsor are all fine choices too; nothing wrong with those. I just happen to prefer SM is all.
See that's how long it's been since I've used it. Surprised their MVC project goes the singleton route... I find that icky.
I went to read your article at work and your site got blocked by our firewall because of [Reputation-Viruses](http://i.imgur.com/4kgYCcq.jpg). Had to use google cache. 
Some of my most successful posts are very specific and come up near the top of search engine results for very specific criteria. If you've never encountered this error then sure, it's irrelevant... to *you*. But for someone like the dozens of people I've seen on StackOverflow and Telerik's forums and elsewhere who've struggled with this specific error, it just might be helpful. 
Exactly our implementation as well. 
Honestly, I have no idea what you're asking. You start by talking about MVC and then switch to a SQL Server question which has nothing to do with it. SQL Server Data Tools is what I've used for deploying DB Migrations... I'm pretty sure you're looking for a database migration tool?
Mate, don't let some cunt on Reddit take the jelly out of your doughnut. How many successful blogpost do you think I got? Now, I just meant it as a laff - you worded it so specific, it was a self contained joke. Just laugh with me about it, and dont take it so seriously. :)
I'm worried for our industry. Job security for me! 
MVC is a web technology. Sql is a database. If you want to deploy your project, you need a server with IIS on it. IIS is the Microsoft Web Server. You copy your project folder to C:\Inetpub and then go into IIS and set up a web site for it. Then you need to buy a domain from GoDaddy or Network Solutions or something, point it at the IP the server is on, and you'll have your site. NOTE: I can tell by your question that you won't understand anything I just said. The first thing you need to do is google 'IIS set up web site' and then start googling the rest from there. There are shitloads of articles on all the things I said.
What nuget package do you use for your WebApi project? We had to download the plain Jane StructureMap and build the start up files ourselves.
I just picked up murach's asp.net 4.5 and the book's primary focus is on webforms. I grabbed it because I need something entry level to hold my hand through ASP. Is there a better (print)resource to do the same thing but target MVC? 
I am sorry, I was in a rush. Let me try and be more descriptive. I notice that when I create an MVC application for the first time and run it through Visual Studios it creates a database for me with a number of tables. I was wanting to know how to make the application create tables in a database that I have already created though SSMS. Once this database is created I believe, correct me if I am wrong, that I can easily publish this application. (We have a server in house, no need for GoDaddy or Network Solutions) Further to getting the application setup, are there any good resources out there for learning ASP.Net MVC ? 
I am sorry for trying to learn another technology. I too am worried for this industry if nobody is willing to help the people who are trying to make it. 
I was a little rushed, I apologize, please see below for my response, hopefully you can provide some insight
Thank you good sir
This anti-pattern seems to be the most frequent scenario I have seen. Bystander apathy: A state where a decision is known to be wrong, but the people who notice this do nothing because it affects a different group of people
Eh? What's the anti-pattern, and how does this apply?
A lot of responses you gave against the scenarios of bankers rounding had to do with eliminating the cause instead of the symptoms. Sometimes you work for a massive company and people just don't care.
So am I applying an anti-pattern, or are they?
You are in the right. They are applying the anti-pattern.
Okay, thanks for clarifying. FWIW, I feel part of a software engineers responsibility is determining what the consumer wants, and producing that correct result. Granted a banker probably doesn't care if I end up giving them an average, but I know I can get them a "correct" result by rounding each step, or only by rounding the final result. Since *I* know what's right, I'll produce the correct result.
I was "forced" to use Splunk at my Windows shop instead of graylog like we wanted at first. I'm not saying Splunk is better, but it's fairly decent and has an ok "free" plan. If you're a Windows shop, license costs shouldn't be too much of a problem. :)
Bind the datasource of the grid to a collection of some objects with properties mapped to the columns. 
I like that video and beer. cheers
I really like the default git features in visual studio 2013. They work automatically with any git repo. No setup required. No extra extensions or plugins needed. As far as ignore lists, go to http://www.gitignore.io/ and type visual studio in the search box. It will generate a gitignore file for visualstudio projects. 
Visual Studio creates its own [.gitIgnore](https://github.com/github/gitignore/blob/master/VisualStudio.gitignore) and [.gitAttributes](https://gist.github.com/anonymous/11095561#file-vs2013defaultgitattributes) Perhaps check out [Hanselman's post on Git integration in VS](http://www.hanselman.com/blog/GitSupportForVisualStudioGitTFSAndVSPutIntoContext.aspx). I love the Git tools integration into VS. Have never had to open a command line, ever. It's [missing a few features](http://msdn.microsoft.com/en-us/library/dd286572.aspx), but it's got a lot of them. I've never been left wanting. Here's [Martin Woodward giving a demo](https://www.youtube.com/watch?v=5tKvWxxAUSg#t=115).
I don't use the built in Git tools in VS much, I prefer to use [SourceTree](http://www.sourcetreeapp.com/). It's made by the people who make BitBucket also so has some nice integrations with it.
Get git extensions. Install the tools for vs. Greatest git toolset ever.
Awesome. Thanks!
I'm planning on installing SourceTree. Curious how it compares with the built in tools
I'll check it out
I was wondering if the Hanselman post was still accurate. Things change so fast
Good thought. It's VS 2013. Not much has changed on the Git integration over the updates that have shipped since it's released. 
Just wish there was a way to pull remote branches in VS.
Change log from VS 2013 Update 2 "Push to or pull from a selected remote repository in Team Explorer without having to use the command line" 
My initial assumption here is that "selected remote repository" means one you already have checked out (I should have said "check out remote branches" above), but that has been possible for a while. I just checked my install of update 2, and I don't see a way to check out remote branches. Ideas? Edit: nevermind - I found it under "New Branch."
The built in tools are helpful for quickly checking diffs, seeing which files you have modified, and things like that. SourceTree is the best Windows git tool I've found for actually visualizing commit logs and branches.
From my experience, the Git tools in VS work well for simple things. Merging, Committing, Branching, Pushing and Pulling. The more technical things like reset, revert, undo, etc. aren't stable or don't exist. And sometimes if you run into problems or errors, you'll have to use either the Gitbash or a Git application of your choosing to resolve the problems.
I have posh-git in PowerShell running in ConEmu for most git tasks. I use visual studio's tools where I think it makes the most sense. File history for example. ConEmu allows me to have a powershell window in fullscreen and posh-git adds auto complete and a lot of other stuff to git in powershell.
I'm not hearing anyone talk about routes, if you are planning to have a URL like /stocks/{symbol} you could setup a route to map that to a StockController index action. Using the route key "symbol" do a service request with the given symbol. If the service returns no result, return HttpNotFound(). If it returns a result, create your view model and return View(stockModel); In your views/stock/index.cshtml create the generic rendering for your StockModel object. It could contain object properties for the stock values. Then, for a dashboard, You could have a composite view that loops through a list of stock model objects and calls render action for each StockModel object in the user's profile. If you need different views of the stock, call a different action, for ex: detail vs summary.
the missing file is not physically present!
Check \users\you\documents\visual studio\backup files, too.
Were you using source control with the project?
yupp, but I didn't commit even once, or so i know!
If you're using source control, you can source control &gt; view history, and find the file, copy the contents back in. You can also find that history and branch/dump it to a different folder and pluck your file out. If it was there, it was in source control and it has a history - you can pull it out. You can check in your stuff and *then* go view the history of the project and find the file in source control, copy contents and tinker away again. Rule of thumb: Always check in, often. Even the smallest stuff. It lets source control keep that running history for me to rewind if I need. 
Just to be clear, the file is missing in solution explorer, the physical hard drive folder, *and* source control? If so, can you find it in your trash can, recover it, then re-include it in your project?
I am not very versed w/ source control, I may have enabled it out of ignorance. While checking the history of the file, the prompter says it has no history. Also, in team explorer, clicking changes returns an error raised by libgit2. Category = Unknown(error). "No error message has been provided by the message library"
I'm not sure about the source control part as it is returning an error.
Well, I'm not sure about converting the Metro WPF to Desktop WPF. But there is this library that I like using to get that Metro feel on Desktop applications: [MahApps.Metro](http://mahapps.com/).
you can also log into tfs your tfs account and look to see if the file exists there 
I understand your frustration. The industry trend for non-enterprise development is to deploy on services like Azure and AppHarbor (for .NET) as these services allow you to focus on your application without the overhead of managing servers/hosts or ensuring those hosts are running supported configurations. I recommend looking at MSDN, and also checking out the following link: http://www.asp.net/mvc/tutorials/mvc-5/database-first-development/setting-up-database This will let you design your database first (a lot of people like this approach, and just as many seem to like code first - it all depends on how you like to solve problems).
I don't think I've used it in a WebApi project, now that I think about it. But following the same pattern as the MVC4 one should work okay.
I don't think StructureMap.MVC4 is put out by the StructureMap team. Here's the repo: https://github.com/webadvanced/Structuremap.MVC4
Interesting. No viruses or exploits as far as I know. I don't know how to dispute and/or get more information from Cisco.
Awesome! Thanks for watching.
Thank you for the reply, it has proven very helpful My next challenge is to add authentication to the application. 
I'm happy to help. When you start a MVC5 project, you can choose the authentication method. If you choose an intranet Application, it will create a single sign on application using your local Active Directory.
Move all your application logic into a portable class library. Place your UI into 2 separate projects for Metro and desktop that each reference the PCL. You will still need to recreate the UI but can keep the logic in one place.
I thought about that actually. The problem with that approach would be that I'll have to maintain both versions. What I was looking for was a library or something like that would act as the middleman between my metro app UI code and desktop WPF code without any changes. I am aware that such a library most probably doesn't exist, but a man can hope for easier life :) Anyways, I'll do what you suggest. It'll be better in the longer run because then I could also make a public API. Thank you.
I looked at MahApps.Metro. It looks like that's what I am looking for. I can use it in binary form with my proprietary app. Thank you.
if Nopcommerce has the ability to import data via CSV file, it can be exported Magento without much hazzle. we need to understand the attributes of the entity (products / customers / categories ) and come up with a common frame, e.g magento SKU's are unique, mandatory. and we need to understand how Nopcommerce maintains store related information, price structure, inventory maintenance structure. if needed, we can also create webservice to do it online . if you want, please drop a mail to info@marvelcommerce.com , let's see how we can help you out . 
Well, if you never did a commit, as you said, it doesn't have a history in the source control.
Soft India Web Solution offers best Practical training in ASP Dot Net in jaipur, you can visit here to http://issjaipur.com/MCA.aspx for more details.
If you've never committed or checked-in the file, it doesn't have a history/copy of any changes in source control. If you have, you can right click on any file in the solution explorer window, choose Source Control / History. Lastly, you can use a program like [**Recuva**](http://www.piriform.com/recuva) (same folks who make CCleaner) to undelete files. It may take a few minutes (and narrow it down to *.cs if you can) -- you'll have more luck if you haven't had a whole lot of disc access since then (less chance of it being overwritten). Good luck.
Problem is that XAML is not necessarily 100% compatible between WinRT and WPF. If anything else, just look at the namespace declarations: WinRT has the "using..." and WPF uses the "clr-..." notation. For this reason alone you cannot share the XAML files between the two versions. At my work we have an app that has a WPF, a SL, a WinRT and Phone SL version... the code base is fully shared (with a ton of compiler switches) but we have to keep separate XAML files for each platform.
Thank you again. I understand selecting the authentication method when you create the application. But, here is my problem. When I run the application for the first time (This is after following the tutorial) and try and register a user. It allows me to do so, but it still creates a separate local database for users. I want this to be part of the database that I have created. 
No problem. Make sure your App.config contains the connection string for the SQL Server instance you want to use: http://msdn.microsoft.com/en-us/library/ms254494(v=vs.110).aspx
If you're using any of the tech mentioned above, it's time to start looking for a new job.
Interesting pattern. What about Case statement?
That's kinda neat! Thanks for sharing.
Nice project but with all those lambdas going around, I'm a bit concerned about performances. I found myself in dealing with very convoluted boolean expressions (5 to 6 combinations of different states per case) and I wouldn't mind using some tools to make that code more readable, but performances are critical.
I find myself using peek definition all the time. Probably the new feature I've used most in 2013.
Your example is comparing apples vs. oranges: Let's clean up your if statements: if (operation != null) { if (operation == Operation.Add) { return x + y; } if (operation == Operation.Subtract) { return x - y; } if (operation == Operation.Multiply) { return x * y; } if (operation == Operation.Divide) { return x / y; } } return null; is the same code but now equal to your own when then code: var calculator = new RuleSet&lt;Operation,Func&lt;int,int,int&gt;&gt;(defaultResult: null); calculator.When(Operation.Add).Then((x,y) =&gt; x + y); calculator.When(Operation.Subtract).Then((x,y) =&gt; x - y); calculator.When(Operation.Multiply).Then((x,y) =&gt; x * y); calculator.When(Operation.Divide).Then((x,y) =&gt; x / y); return calculator.First(Operation.Add)(1,2); // returns 3 With the difference that your when/then code executes all lines, and the if statements only execute all lines in the worse case scenario (that none match). IMHO one shouldn't use libraries like this, as the language is powerful enough to express what you want, no need for external libraries for this. 
Yeah, I've also used it to clean up messy logic in the controller of a MVC app before. I'll probably add a section to the `README` with recommendations for where it can be useful. Thanks for the idea!
Heh, for my calculator (well, sort of) I have a function That builds a class and then compiles it, allowing it to have a pretty sweet Performance. ~9 seconds for 54,000,000 calculations with a cos or sin function call as well, including the Generation time.
Sure, my version of the code sample evaluates the four lines to load the different rules, but it will return as early as possible from the `First` method similar to my example without the library. As I mentioned below, this library really shines in complex scenarios, so I'm going to add a section to the `README` with some better examples. By my own admission, the calculator example is highly contrived.
I haven't thought too much about the performance here (like I said, it was a weekend project). I rarely work on software where the performance of every single line (or near enough) of code is critical, so I prioritise readability over ultra-performance.
Nope :) in that case just steal ....
Learnvisualstudio.net is actually a pretty great resource
Thanks
Do you want to learn Visual Studio (the IDE) or C# (the language) or .NET (the framework)?
The use case for this type of library wouldn't necessarily be to be a drop-in replacement for long if/switch statements. It would be better suited to simple rule engines, where the "when" statements are altered by the users at runtime.
Forgive my ignorance, but in which situations would you use this? Is it for web caching, in a cluster environment?
Not ignorant at all! It's for any data that needs to be cached in a single place across multiple instances of one or more applications. So you could do web caching (OutputCacheAttribute) using it, or you could do object caching or your data access layer in it, or you could even do you Session State management in it (since you need a central Session State when you have &gt; 1 instance). Does that help to answer your question? Here's an explanation from my website: http://www.getdache.net/about
Do you have benchmarks test compared to, for example, OutputCache in MCV or the MemoryCache (http://msdn.microsoft.com/en-us/library/vstudio/system.runtime.caching.memorycache)
Good question. OutputCache/MemoryCache will *always* be faster than Dache in single tests, because they are **in-process** AKA in your app's memory. Dache is an **out-of-process** cache so serialization/network overhead apply. I have a pretty decent write-up on this at http://www.getdache.net/about but no official benchmarks. The reason for the lack of benchmarks is that they are two different things and not really comparable.
I would say not having the administrator do boring work and then having the problem of transmitting passwords to users would be good motivation to go with an invitation token instead. That's pretty easy to do, add a GUID field to the employee table, generate GUIDs for the employees have your application send out emails with a link containing their corresponding GUID to each employee. That link should lead them to an controller and action that allows them to setup a password (i.e. setup a new ASPNETUser) for the employee matching that GUID. That said if you are in a company network with Microsoft tech, chances are you have a domain controller. Which means you can authenticate users based on their Window identity and not have to bother with passwords at all (see Windows Authentication for ASP.Net). To go further, I would not add the employee Id into the ASPNETUser table. I would rather add an "Username" field to the employee with no FK relationship because authentication is something I want to be able to switch without having to change much of my application. Plus that's what the AspNetUserClaims table is for. For reference, I've built a system that uses the invitation system, good thing the admin doesn't have to handle users by hand as there are almost 1000 users worldwide. They are authenticated by an SSO so they don't have to mess with a new password but I create users to link their email with the SSO account username.
I can see all kinds of places where this would be useful, especially in managing load of bunch of worker servers. Damn you now I need to learn more! :) -Bone
Awesome, glad you see the practicality of it. Take it for a spin, or just get more acquainted with distributed cache in general! Check out Redis, Memcached, CouchBase, etc.
He could do it a bit simpler by taking those rule lambda functions as expressions instead and compiling and caching them on first run. Your way will end up faster specially after the initial run but I'm not sure which is slower: building a class and compiling it once in runtime or compiling a few small expressions. I'm thinking using a post-compiler and injecting those expressions as static methods during build would provide the best results (with the inconvenience of requiring tooling i.e. an EXE that runs in the after build event).
The IDE, and how should I start to work on a big project as opposite to a simple program.
When Microsoft release the update that allows windowed metro app, I dont see the point of wpf apps anymore. Metro apps will become the new windows app. Of course the API will need to be on par with what wpf offers.
Sell me why I should use your product over some of the existing, mature products like Memcache or App Fabric? 
Huh, I haven't come across expression trees before (I work mostly in Ruby), but that looks like a nice way to improve the performance here. Thanks!
Hmm, the generation of the class and compilation takes almost no time :) If you want to take a look at my program, it's [here](http://github.com/Banane9/EquationAnalyzer) I'm not perfectly sure what you want to do. Generate the expressions into static methods and then injecting them into there? What?
It's about one order of magnitude slower (given that you cache the built ruleset). On my PC, one million RuleSet evaluations took 243ms while a switch only took 37ms. Unless you're in a *very* tight loop, it probably won't matter a bit. I used [this](https://gist.github.com/nemec/87793ae54bdfe16b7057) LINQPad script to calculate it.
Excellent thing to demand. I challenge myself with this regularly, in fact... After all, why build something when there are things out there that solve the problem already? Dache is newer than the competitors, but it has 3 major advantages: 1. Free and natively .NET - your only other real options for native .NET are nCache (megabucks) or AppFabric. AppFabric has many issues, one of which is using exceptions as flow-control instead of exceptional circumstances. I actually built Dache because I used AppFabric and our whole team hated it. AppFabric will throw exceptions to throttle connections, it will also arbitrarily throw them as the internal cache updates, and on top of all of that it will only use 50% of the server memory for caching. Dache has none of those problems, and uses 90-95% of the server RAM for caching. Also, it runs on Windows. Redis, Memcached, etc. are awesome but you need to stand up some LAMP tech for them. 2. Need for speed - Dache is very, very fast. I don't actually have enough hardware to yet max out a single instance, but I can project it based on benchmarks at about 150,000 operations per second. nCache delivers about 40,000 a second, and AppFabric delivers about 60,000 a second. Dache is faster, and speed kills (your app). 3. Neat features. I offer fun things like interning. So, if you cache an identical object multiple times, you can intern it to save on memory (all cache keys point to the single instance). I also offer a working memory trim that happens at a polling interval vs at garbage collection events (nCache and AppFabric). [I also offer an incredibly simple client and API](https://github.com/ironyx/dache/blob/master/Dache.Client/ICacheClient.cs). You can learn to program with it in minutes, literally minutes. AppFabric's API is very unintuitive (and requires many undocumented patterns like try-catch-retry). nCache is not too bad but overly complex. Dache also has the ability to use your own custom Serializer. AppFabric also offers this but nCache does not (at least not last time I talked to them which was about 1 year ago). Let me know your thoughts on those points. :)
Under the Solution Explorer (View -&gt; Solution Explorer), there should be a button called "Show All Files". Click that button and go to where the file should be. If it appears grayed out, simply right click it and hit "Include in Project"
I am using Dache in a new project. Thanks! I'd also be keen to contribute to the monitor/board
You need more tests, look at how MassTransit handles distributed testing. Also, binary serializer? Isn't it a pig? Jsv or protobuf would be nice, but I think even json.net is faster than that. Can't tell if its really distributed or just out-of-proc, a la memcached... Why the distinction between TryGet and TryGetLocal? Seems like implementation detail to me. Is there a factory I didn't see? What's your concurrency story? AppFabric is safe by default. Its a big deal if consistency is a factor. Kudos for file-based configuration, AppFabric's powershell stuff is atrocious. Have a look at Coherence for inspiration, the best distributed cache out there. 
I agree that I definitely need more tests. The binary serializer is a pig but it's the default - you can inject your own custom serializer as you please. :) It's distributed... It shards at the client to the servers. Good point re: TryGet vs TryGetLocal, maybe I just pass a bool for cacheLocally... That'll be a change I'll do. Thanks! This implementation is 100% thread safe. Yeah I can't stand the Powershell either. :S Coherence eh? I'll give it a go. Thanks for all of your feedback!
&gt; your when/then code executes all lines Sure, once. If you're calling this more than once, the when/then statements *should* be cached somewhere first, at which point only the final line is evaluated more than once. It will take slightly longer because it needs to evaluate the lambda before returning, but just one lambda doesn't take much extra time (I timed it in a comment elsewhere here).
Have not tried them but they look good. Just a lot more expensive than other sites.
[Top 50 C# Interview Questions](http://www.itechaleart.com/2013/05/top-50-c-interview-questions-answers_10.html) I'm in same position as you and I came across this. Felt it was pretty good.
You start on a big project... absolutely the same as with a little one.
They have to make money somewhere I guess.
True. Gives Readers the pleasure of having (almost) no ads :)
&gt; 18. What is the difference between Array and Arraylist? Really? How old is this guide? Be careful about many of those answers. Many of the questions are outdated and oddly worded. Make sure that you actually know the correct answers, and have general knowledge of the changes between c# 2 and 4.5 (target the versions that you are interviewing for).
Whenever I look for work, I always use www.indeed.com. Wish I had 5+ years experience with C# /ASP.NET MVC to be a senior dev, because I'd love to relocate to Singapore. I only have about a year of C# /ASP.NET MVC, and 4 years of a mix of SAP ABAP and proprietary languages. :)
I don't like the limitation of only being able to publish apps to appstore. You can't even make the distribution package without an app store account. As long as that persists there will be a need for desktop wpf apps, no matter the API parity.
Looks really interesting thanks. We're currently using Appfabric in a fairly large way. What's the story for node maintenance? Appfabric lets you shut down a node with the "Graceful" flag, which migrates regions to another node.
Recruiters.. there's basically no issue getting a .net job in any larger city. We and the java guys have it easy as fuck
Jobs look for me
Banane9 is right. Sorry clearly not a universal phrase. So in the interview they would give me a sheet where they've got a snippet of code, few functions within a class with some syntax and logic errors.
The system is backed by .NET MemoryCache which I believe uses locking as opposed to versioning. I maintain thread safety and consistency of data via pessimistic locking.
Looks useful, I always wondered how it was done :) Thanks!
&gt; So, if you cache an identical object multiple times Although I assume I could look in the source, how are you creating a hash of the value to store, and if you are using anything similar to MD5 how have you prevented collisions?
Awesome question. The data reaches the cache host as an array of bytes, so I'm using a prime number multiplier against the bytes in the array, iterating over them, to generate a consistent hash. There is the possibility of collision for sure, which really can't be avoided in a system with infinite strings as cache keys. If you can recommend a better approach I'd love to employ it for a better experience! The relevant code: &gt; /// &lt;summary&gt; &gt; /// Calculates a unique hash for a byte array. &gt; /// &lt;/summary&gt; &gt; /// &lt;param name="value"&gt;The byte array.&lt;/param&gt; &gt; /// &lt;returns&gt;The resulting hash value.&lt;/returns&gt; &gt; private static string CalculateHash(byte[] value) &gt; { &gt; int result = 13 * value.Length; &gt; for (int i = 0; i &lt; value.Length; i++) &gt; { &gt; result = (17 * result) + value[i]; &gt; } &gt; &gt; // Return custom intern key &gt; return string.Format("__InternedCacheKey_{0}", result); &gt; }
I bought the "Pro ASP.NET MVC 4" by Adam Freeman. It's quite extensive and straight to the point. No mumbo jumbo.
You are welcome! Thanks for watching. I can't say this is the only way it's done though. For bigger images you'd probably want to take pixels in chinks of 4 or 8 and convert them into a single character.
In the US, the best way to get your resume/CV to an employer is through a recruiting agency. Do they have recruiters in Singapore? 
Also a damned good question. Dache falls flat in a few ways: 1. No support for set operations... Things like Reddit and Stack Overflow use tech like Redis and take advantage of ordered sets to product the "list" of posts in order of newest / most relevant to oldest. Dache does not yet support that and you'd be insane to try and make Dache work with it. 2. No active/passive, unless hosted in a hardware environment that provides fail-over at the hardware level. Other options do offer "high availability" AKA active/passive. Working on that feature currently. 3. No persistence. If you want to use Dache as your DB / data source / source of record, it is volatile memory... Reboot the box and your data is gone. Other options like MongoDB offer persistence. I'm working on this also, but don't currently have it. 4. Support. It's hard to get support for open source products. I mean I am happy to help but that may not win over your CIO who wants to be able to buy a 250k support contract with nCache or Microsoft or whoever to be able to have a hotline to call if anything explodes. Sometimes peace of mind is worth money to people.
It's the secret sauce behind Linq and how it generates SQL with EF. And MVC also uses to reduce the use of magic string by turning @Html.Editor("NameOfMyProperty") to @HtmlEditorFor(el =&gt; el.NameOfMyProperty). In code you can easily read that tree and you can compile them on runtime.
I was thinking something like Postsharp or a similar AOP framework to read the expression and generate a static method in the assembly. If the compilation is fast enough like you say, and that's a one-time cost, it may not be worth changing.
Two things you'll need: 1: A solid understanding of the difference between Value and Reference types. This ALWAYS comes up. Brushing up on OO in general is a good idea; but there is a 99% chance questions about reference and value types will come up. Botching those questions is a bad look. 2: A few funny programming anecdotes. You're interviewing for an entry level position, which means your interviewers are more likely to care about your fit with their culture than your current programming prowess. Also: If you don't know the answer to a question, tell them you don't know and explain how you would quickly find the answer. You get bonus points if you say something along the lines of "I am fascinated with the language and study MSDN documentation in my spare time". As this is an entry level position, your interviewers are more likely to be concerned with your potential for growth than your current skill. It would help if you made the above statement true.
It's also a good idea to work the phrase "I work very hard to be sure I never make the same mistake twice". 
Thanks for that, very helpful! Already been told it's a three hour interview with debugging and a chat - unsure how formal but preparing for both eventualities. Value and Reference types is a great shout - will definitely brush up on that. You're definitely right about the "Say you don't know" as face value only works if you're presumed to know more, in this case it would look terrible. Not so much MSDN more reference books Head First and ASP/C# 4.5 and Stack Overflow to check out similar issues. Cheers for the detailed response!
I would suggest looking at these better, since you have asp.net experience. I think actually the one you're looking at is deprecated or will be deprecated very soon. I believe MS is moving all development exams to MCSD certs. That said I suggest the MCSD ALM maybe for your case, at which point, become a MS silver partner (which this qualifies you for) Edit: oops forgot the link http://www.microsoft.com/learning/en-us/mcsd-certification.aspx
In general, no. Unless you have a specific need for the exam/certification, your time is better invested in a project you can show people. Like, I'm going to take the full MCSD exam stack in the near future, but that's just because I plan on delivering training, and you can't be an MCT without one of the upper-level Microsoft certs. Cynically, when I review resumes, I put the ones with certs at the bottom of the stack. I, and a lot of other developers, take certifications as a sign that somebody can take tests, but can't actually do good work.
Then, where to start, to get a freelance project?
You also need a Microsoft cert for Partner Status if you have a company or consulting firm. But I think in general you're right. I'm taking mine for purely partner reasons
Oh forgot, join this, and they will give you a 3 for 1 coupon. So the three exams for the cert cost you $150 instead of $450 Edit: oops forgot link http://borntolearn.mslearn.net/
Put something up on Github. Use that as proof that you're a good developer who cares about their craft. A small project won't take much more time than exam prep, and you won't be paying a testing fee for the privilege. 
Well, it depends on how you look at certifications. They ARE NOT: * A guarantee that a person knows the material. You can find the answers to the test on line, so even my grandma can pass. * A proof that a person has in-depth knowledge of a certain technology. If you study for the exam, you will gain a very decent overview knowledge, but depth will come by doing projects. So an interviewer will usually not be too impressed by them. But they are great for a few other reasons: * A certificate can help you land a job in a technology you don't have work experience in. * A certificate can help your resume to make it to the to of the 'to interview' pile. * If studied correctly, it demonstrates that you know what a technology is about and will make the correct design decisions. (Everybody needs to look up details, so don't worry about that. We all use StackOverflow.) I have a few and they've never been more than a 'foot in the door'. But I keep studying for them for 2 reasons: * When I schedule an exam, I have a deadline for myself to study a particular technology and gain the much needed insight into it. * They have helped me in the past to get projects with technologies I haven't worked with before. And I like doing new stuff. So ... ultimately, it's up to every person to decide if it's worth it to them. But to me, it has been ...
Well, your real problem is that you're looking for work. Do you know **why** you're being passed over? Are your rates too high? Do you interview poorly? Etc. Something else that occurs to me is that a lot of shops don't like to deal with freelancers/small shops. You might be better served by seeking employment with a consulting firm instead. I don't know the German market, but that's certainly true here in the US midwest area.
I usually don't even take the exams, but the stuff I learn preparing for them has been immensely valuable. 
Why would the time be wasted? If you already know the material then it takes no time. If you don't, then it is probably worth learning.
That is a very early stage of our project. I am working on UI this stage. I am thinking to use a similar style with outlook. What do you think about this idea?
There is nothing to prevent that from happening.... But really, a web service is just a way of transferring data across a network. Once the data is picked up by the web service it can do anything it wants with it (save to database, text file, send it back). The only real limitation is what you, and what you feel capable of pulling off.
The tests for the MCSD a pretty humbling. Don't understand the hate. 
From what you are saying - last man wins, in other words you are not offering any consistency. Check out appfabric docs on the subject, then you'll see what i'm talking about.
Back in the late 90's they were a cake walk. I am learning, much to my surprise, that they are much harder now. And with the 2-year continuing education requirement they seem to have some teeth to them.
&gt; You can find the answers to the test on line, so even my grandma can pass. Are you so sure about that? I haven't seen the new tests yet, but the prep books cover a hell of a lot more material than I was expecting. And honestly, if your grandmother can memorize complex CS topics well enough to pass the test that puts her head and shoulders above most candiates I've interviewed.
I wouldn't recommend taking the test with studying. Edit: meant without. 
I don't know if postsharp would be the right thing for that. But I only took a quick glance. I kinda don't see why one would change the already existing language construct like that anyways. And generating the class with static method on first call and then using the result would not make it faster than directly writing it. And it wouldn't work anywhere, but in a desktop application.
I personally do this with multiple webservices. I basically implemented crud functions as a part of the webservice. 
Multi inheritance in C#? You don't, unless you count interfaces. Or am I missing something?
This is easily possible with something like WCF and EntityFramework. Both are widely used and well documented. Alternately, you could use Web API to host a REST service. It's more lightweight than a WCF service and arguably more versatile. Again, this is all very well documented with plenty of examples.
Yes, that is the right answer. I have been asked by an interview, How to do Multi- inheritance in C#? I answered: "No, C# doesn't support Multi inheritance like C++, but you can do it by interfaces"
My opinions: Some sort of dock-able navigation pane would allow more options. It should probably also be something a user could collapse. Also, drop the gradient and get some higher-res icons. Have you taken a peek at how this will look in Metro?
The reason I hate WinRT and love WPF is that WPF has DataTrigger/MultiDataTrigger and MultiBinding. Basically features that can make your app more data bound (MVVM is the name of the game after all) and the VisualStateManager class sucks in this regard. Until they add that to WinRT it will be hard to port my apps to to Metro. 
Yes, I looked some metro UI for WPF. Personally, I don't like Metro a lot.
Have you seen my project I mentioned above. There is a collapsible panel on left, and main content on right. The main content will be a list of contacts. 
Yes, it's built into ASP.NET.
I've never seen them myself, but I'm fairly sure that you can find the answers. Here's how I 'know': I've overheard a slacker colleague tell another colleague how he was using the answers he found online to get a pay raise (our company has incentives for certification). He got 100% on 3 certification tests in a row (not even smart enough to get an answer wrong on purpose). He's as much of a slacker as you can imagine, so I'm sure that if he studied, he would never take the effort to learn the material well enough to get a 100% result. When this happened, I really started to re-evaluate the value of a certificate. But as I said, there is value in them if you study the material.
can you give me the link ? or even better documentation? 
Here's a few links I've got bookmarked: http://msdn.microsoft.com/en-us/library/vstudio/dd831853.aspx http://www.microsoftvirtualacademy.com/ http://channel9.msdn.com/
There are two different internal ways to do it. The older system is called Membership , the newer system is called Identity Both are still perfectly useable, Membership is probably easier to impliment , abd currently better supported by 3rd party modules ....as long as you don't want openID integration etc If you want to enable, for example, "log in with facebook" etc, then you need to use Identity instead Documentation for Identitiy is still a little sketchy and until the recent v2 release it was missing a few core features (password reminders etc)
Okay - thanks for the tip, didn't know about multi-inheritance. Public - accessible to be called throughout the application. Static - not accessible to external calls and doesn't need a new instance to use. Void - returns nothing/has no value.
I have two MS certifications, and I'll be damned if I remember 25% of the material that was on those exams. If you are learning the material for practical purposes and are planning to take the exam as a consequence of practical experience, then I agree the time is not wasted. If, on the other hand, you are studying material solely for the purpose of taking an exam then the time is most certainly wasted. 
It's the membership provider. I'm not going to google it for you, but it's very easy to set up, and works fairly well. 
http://www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity
ASP.Net's new [Identity](http://www.asp.net/identity) system is the first good solution that was built into the framework. There are some rough edges on certain items still (for instance, while they have claims based authorization, it's a bit awkward). There are alternatives out there like [Membership Reboot](https://github.com/brockallen/BrockAllen.MembershipReboot). It has some extra features built in, BSD licensed, etc. Main downside is it's a bit more difficult to get up and running but not much.
I have been asked that a lot of times, that sounds like a trap for interviewee.
How long ago was that? I'm thinking that part of the reason Microsoft switched to 2-year renewals is so that they can cycle the list of questions more frequently. I wonder how long it takes to compromise a particular exam.
Thank you for the heads up web API it is
The built in identity API in MVC 5 is pretty brilliant. I've been using it for a company project as my first little dabble into Asp.Net and C#. It's fairly extensible as well. So far I've modified it enough to include groups and roles to give advanced user permissions. There are tons of tutorials online.
People are downvoting but this is probably true. once you have a certain level of experience and enough contacts.
Can someone please explain how this is different from ngen, which has been around for, oh, the past 15 years?
One of the comments on the page asked something along those lines: With regards to NGen, .NET Native compiles completely down to native code that doesn't depend upon the CLR installed on the machine. NGen isn't always fully native and requires the CLR and .NET Framework to be present.
Yeah. Honestly I get recruiters calling me every 5 minutes. It's actually a little ridiculous. If you just put yourself out there, make sure your LinkedIn profile is decent and actually work on a few technologies that are relevant, finding a job is not difficult unless you're in BFE
Wow - per the FAQ both generics and reflection are supported. Looking forward to this on the desktop.
For what it's worth, Mono's had the ability to statically compile the runtime into the executable for a long time too. Not sure if that also does AOT compilation though. 
I believe you'll need to concatenate your select string, inserting column to average as a parameter won't work.
What IDE's are you famailiar with? Have you worked with Eclipse? There are many similar concepts, but also a couple that are different. A tip would be to google "Going from &lt;insert IDE x&gt; to Visual Studio" or something, to get a grasp of the basic concepts.
Mono is for the true believers
The spots that we've used in the past that you didn't mention: Dice, Craigslist, recruiters, and canvasing the local college. The last one actually has done the best for us for entry level. For higher levels, recruiters followed by just badgering people we know to join us.
I got a new job and a big corp. The code base I got stuck on is the worst code I have ever seen. Misspelled words, misused objects, unknown state, 32,000 line business layer all wrapped into 1 object. Just terrible! Rather then bitch n moan and fill out my resume' again I decide to attack the beast head on. We wiped out their 2,000 failing unit tests that didn't test anything. I shift-deleted the 15 empty .csproj files and 45 empty code files. I setup xml transforms for our configs, organized every config entry, nugetized all of our references, re-wrote our logging layer, implemented postsharp aspects, we as a team are re-writing the unit tests using a combination of Effort &amp; Moq, implementing dependency injection and using structure map. All this came in the last 3 months. Now we are actually starting our redactor of the code itself. So why is this a win? Well because I have never had experience with any of the new techs I mentioned above, Unit tests, Effort, Moq, structure map, dependency injection, WebApi and nuget! So in three months I have quadrupled my world of knowledge and all because I got put on some shitty project with a team willing to re-work everything the right way! Exciting time for me.
When I reached the whining about the 'mistake' that one shouldn't use iterative statements but instead should use linq statements to 'manipulate' collections, I had enough... sorry but this is IMHO just a list of 'mistakes' which only appear to be 'mistakes' in the eyes of the author. 
OleDb doesn't use named parameters, so you have to use "select name, avg(?) from table group by name" instead. And 'an exception' is useless. give the exception, message and stacktrace next time, it's essential info :)
The title should've given that away. 
I don't see anything in your link about memory management, so I'm unclear on what exactly the program might be doing. It's almost certainly doing something more complex than simply forcing a GC pass though.
I didn't say it's not good, I just find it not a mistake to use iterative code instead of a linq query, on the contrary. Linq operators enumerate their input at least once, often more than that, which makes the query often less fast than a loop would be. 
The exams he took were some .Net 4.0 exams in September and October of 2013.
&gt;NuGet packages as a natural part of build &gt;NuGet packages replace assemblies as the natural unit of reference Now that's interesting.
http://brockallen.com/2014/04/09/introducing-thinktecture-identitymanager/ I don't know why there hasn't been an official version (not the crappy built-in one that only works locally).
I've worked with one certified dev who had obviously memorized the book, learned nothing and on top of that had no clue about object oriented programming. I still think they aren't useless, if he's a good dev (i.e. capable of learning), the certification guarantees a certain level of general knowledge of what the framework offers. So certified devs know the existence of things they haven't had the change to use. That should help them make better decisions on how to solve different problems instead of being stuck with the small part of the framework they have previously worked with.
well in your previous post you said that you take those certifications as a negative sign which I don't think is right as people might have various reasons to have them, most stuff on resumes is just a filler to be honest, not just certifications
&gt; when people write something on their resume it means absolutely nothing It means a *lot* of things. Nothing ends up on a resume by accident. If I update my MCSD cert, it doesn't automatically *appear* on my resume, as if by magic. I have to take the active step and *put* it there. If I see certifications on someone's resume, it means one of a few things: * They're proud of their ability to complete multiple choice tests * They think I'm easily dazzled by acronyms * They've assumed this acronym provides them with a competitive advantage and are trying to out-do people who didn't pay hundreds of dollars to take a test * They're lazy and send the same resume to every job application * They're hedging their bets against HR The *only* acceptable reasons to put certs on your resume are the last two, and even then, it's a little hinky. When you submit a resume along with an application, the resume should be *specific to the job on offer*. I don't want to know why you're employable, I want to know why you're a good fit for the job listing I posted. The only time when it is *always* acceptable to put certs on your resume is when *the job you're applying to lists it as a requirement*.
What's the issue exactly? 
LINQ isn't no good, but it as well as Action&lt;T&gt; and Func&lt;T&gt; can make debugging harder. When searching for bugs in large loops, it just much more efficient to put the break statement inside an if clause than to put a conditional on the whole thing. I've seen times where the IDE slowed the operation to a crawl because it was doing a lot more work. A horrible scenario is when adding the debug conditional slows the process down to where the bug disappears. I've had a few of those and lost many days trying to fix the issue. However, if you are just looping over a collection to turn it into a collection of something else, then by all means use LINQ since it is very good for those type of things.
For example: passing in a ?bool to the helper @Html.CheckBoxFor() no longer works since it accepts bool only. There's many instances of this across the app. 
Create a tri-state widget with yes/no buttons. You can click either twice and it will be null. I've done this for my MVC apps and it works great. You can create an HTML helper extension named CheckBoxFpr that accepts an expression of Bool? and you won't have to change the code in your views (although I do recommend you change them to a more accurately named helper method) The other option is to use drop downs. BTW, you shouldn't use your entities as viewmodels. You should create a separate viewmodel class and either map the properties manually or use automapper. You could then use a regular bool in your viewmodel.
I usually go with Service Stack these days. Much simpler than WCF.
How is `@Html.CheckBoxFor()` related to EntityFramework? Also EF never converted nullable bool to bool by default. This would be horrible, because those two **mean different things**.
Nope. LINQ expressions are much more expensive than normal loops because of all of the delegate calls it has to make. Most of the time this doesn't matter, but in performance sensitive code you should be wary of using LINQ.
Can you tell me what this 'automapper' is? Guessing it's a third party tool? 
I've noticed just recently that, with Chrome, if you hold down the refresh button, it gives you three levels of refresh- the last being a hard, remove everything, make sure it all comes from the server refresh. 
Not to mention you'd be alienating users of Windows 7, which, depending on your user base, there might be plenty of for quite a while.
Yeah, you can get it in a NuGet package. You create map definitions for your classes. It can automatically map properties of the same name and type, but you can define custom mapping logic for specific properties. Here is a tutorial on how to use it http://jasona.wordpress.com/2010/02/05/getting-started-with-automapper/ As you can see from the tutorial, it can even be used to map classes that may only share one or a few property names or even that share none of the same property names by using a custom mapper. It's a fantastic tool. There is probably a T4 template somewhere that will help you quickly create viewmodel classes from your entity classes too. If you can't find one, you could write your own, which would be a really good thing to learn how to do if you don't know how yet. Look up MVC Scaffolding for a good start with that.
Their ability to parse out Javascript files with a /// REFERENCE tag at the top of your javascript is downright spectacular nowadays, too. Even junk I roll my own, if I add a reference to another JS file - it shows up in the intellisense, lickity split. It beats the old hybrid way they did it with having a notation file, and I really really like it for frameworks like JQuery and its infinite amount of plugins. 
Disclaimer: I am not the primary author of app in question. Single developer built the project over last four years. I have been on the project for one week &amp; I'm trying to understand the source. Lead dev recently migrated the App to EF 6 from 4 and I'm discovering some resulting bugs. I'm trying to differentiate between EF bugs and just plain bad architecture of the existing app. I don't understand why the original dev used nullable bools all over the place, it seems like a bad choice. So do I refactor the database or the views is my question. 
Is getting the source of this third party library an option? If so, you could implement IDisposable and deal with it that way. If not, I'd say you need to go to the third party developer and have them address it. 
You might get better results posting the same thing in /r/suggestalaptop.
thanks, I'm new to reddit.
+1 for the carbon
I'm here years and didn't know that existed!
I've been using Asus Eee PCs for years. They're a lot cheaper than that and plenty powerful enough for software development. I just ordered an Asus X200CA for £299... 
I don't like using 10 inch screens with an IDE :/ I did it for a couple years, I wouldn't go back.
I like to use a mid range laptop. I do this so my computer is not way more powerful then my customers. This allows to really test my customers experience. 
Why not save the money and install Windows 8 on your Macbook through Bootcamp? I have a 13" Macbook Pro and use Windows 8 on it 95% of the time. The only mod I've made was put in 16GB of RAM.
My advice to you would be to try to get your hands on a second hand professional model. I can think mainly of two models, HP elite book and pro book. They have good build quality and are made for easy maintenance. You can almost certainly buy a new battery at the same time you buy it. That said this might set you back about $300 and will make a serviceable laptop for programming.
I have a Lenovo t440p which I love. If you want a slimmer profile use a t440s. Both are beefy machines 
I did the same thing, except Im on windows 7
Lenovo Thinkpad X1 Carbon. Light weight, durable. Can take a little beating. :)
Yes! I just got the Yoga 2 Pro, mainly because of the screen (3200 x 1800) - it's as useful as having (at least) 2 separate monitors, at least for me. It's not my daily development machine, but when I'm out of the office, I find it very useful. 
I got an MSI G Series on NewEgg. Love it. Favorite feature is all the video out puts. 1 HDMI, 2 mini display ports. I can run two WQHD one 1080 monitor no problem. Maybe 3 but I only have had it hooked up to two. High speed USB charging. I forget how many USB but at least 4 maybe 5. Really thin but in part because no DVD. 10 key for numbers. SSHD makes programs launch instantly. It might have been $1500 but it's a sweet rig. The laptop display could be better but I'm comparing it to a WQHD monitor... So it might be fine. 
So far, I have created some wireframes, I am not very happy about those WPF interface. Nowadays, the UI played the key role.
But your customer prolly don't run dev software.... I could have illustrator, photoshop, wamp, visual studio, VM, office, who knows what else. Besides testing app performance by feel isn't really the best way... IMO 
That's sweet. Is it a double wide?
-1 for the carbon. Low voltage CPU, integrated mem (max 8gb), HDD is a pain to get to, no dock. I just picked up an x230. Dockable, 16gb mem, ~3lb, best battery life out there. It's a nice modular laptop that's the size of a small ultrabook.
Yes
I agree it is not the best performance test and having the other applications is not a bad thing. I use the hardware as a gauge nothing more. I deal with large datasets 100k+ records so knowing how well a loop is going to perform is hard to say by programming alone. My solution is not perfect but in 12 years it has not failed me. The other side if I spend a butt load on a computer I would be upset if it got damaged.
seconding this. I have a Yoga 13 with an i5 3337U and 256GB SSD, 8GB RAM. Works well.
It sounds like you're not using visual studio?
I'm using Visual Studio 2013, and IIS. Whether or not I'm using it *correctly* or *efficiently* is another matter - what makes you think I'm not using it?
Because if you're using Visual Studio, then it should just be a case of just hitting F5 within Visual Studio for it to compile, attach to IIS (or IISExpress) and then launch your default browser. 
Other people have explained how to test your website using IIS Express from Visual Studio if you are working on a web project, if you are working on a bigger solution containing multiple projects or multiple websites this might not be the preferred way of doing things. You might instead use IIS Manager to manage your websites, if you have your website set up in IIS Manager you can specify the 'Idle time out' for the worker process on the application pool for your website. This would keep the process form dying (any change in code still requires the process to reload your website). A neat tool for attaching the debugger from visual studio is the 'Attatch to IIS' feature of [VSCommands](http://visualstudiogallery.msdn.microsoft.com/a83505c6-77b3-44a6-b53b-73d77cba84c8) for visual studio 2012, you can configure it to always attach the debugger to your process. 
I have 2 suggestions for you. The first one will make rebuilding your project / restarting the IIS after the build much faster. Just change this in your web.config: &lt;configuration&gt; &lt;system.web&gt; &lt;compilation batch="false" optimizeCompilations="true"/&gt; &lt;/system.web&gt; &lt;/configuration&gt; But please only use this during development and remove that on the public site. The second one is a property you can set on a Page. Just use __CodeFile=__ instead of __CodeBehind=__. If you do this, your code will not compile into a DLL but will be compiled by IIS when you visit the page. This makes it easy to change few lines of code and see the changes immediatly by just refreshing the page. But also obviously don't use this in a productive environment. Edit (after I read your post again): It seems you use the process attachment thing for debugging. You can go to your project properties, click "Web" and change the option under "Servers" to "Local IIS" and specify your IIS path in the "Project Url" field (eg http://localhost/myproject). After this you can just press F5 to run Debug and it will automatically launch an Internet Explorer window with your site and be attached to the debugger.
I think your position is a little extreme.
I'm stating it extremely, but I stand by the key point: only list certifications in your resume if the job you're applying to lists them as a specific requirement. I'm *not* saying certifications are necessarily bad, but they are *not* something that helps a candidate rise to the top. All they tell me is that you can pass a test. They don't tell me that you can write code.
I saw some monitors that were basically two monitors in one frame I forgot the dimensions. Dell makes one. 
Something's not right. You should expect to simply F5 in your web project and have your solution build, and a browser launched and your project navigated to. No manual attaching is necessary when configured correctly.
I've discovered that with a little work you can get mono + nginx + webapi hosted under linux, which is pretty awesome. 
Oh, i gotcha. No, it's just the resolution of the Yoga that I'm referring two, it's like having two monitors because you can fit so much on its (13.3") screen.
You are having problems with nomenclature. Straightening things out will help you quite a bit. You don't choose between learning ASP.NET and learning MVC because MVC is ASP.NET. Please allow me to explain. When ASP.NET first came out there was just one way of creating web apps with it but over time the platform diversified and now there are many. The original ASP.NET way of doing things is now known as ASP.NET Web Forms, although some people still call it ASP.NET and this adds to the confusion. MVC, which you should call ASP.NET MVC to avoid confusing it with the software pattern is another alternative. So, think of ASP.NET as the base upon which Web Forms and MVC are built. And that's why you can't really build web apps with ASP.NET, you build them with either ASP.NET Web Forms or ASP.NET MVC. So, if you buy a book about ASP.NET you're probably buying a book about ASP.NET Web Forms and instead of learning a core that will help you learn MVC better you would just end up learning a completely different framework that won't help you learn MVC. Stick with ASP.NET MVC. If [this](http://www.apress.com/9781430257523) is the book that you're learning from then chapter 6 is a chapter about models. ASP.NET MVC is agnostic regarding models so you can feed it whatever data you want although [POCO](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object)s work best. I haven't read that book but the chapter probably deals with the Entity Framework, which is Microsoft's own way of transforming relational databases into objects and vice versa. If the chapter deals with the Entity Framework, perhaps you could learn about it on the [Microsoft website itself](http://msdn.microsoft.com/en-us/data/ee712907). Just remember that the Entity Framework is just beginning to stabilize, meaning that it is still growing and changing from version to version. By the way, is everyone using ASP.NET WebForms or are they using ASP.NET MVC? Because if you're using MVC and they're using WebForms then you bought the wrong book. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Plain Old CLR Object**](https://en.wikipedia.org/wiki/Plain%20Old%20CLR%20Object): [](#sfw) --- &gt; &gt;__Plain Old [CLR](https://en.wikipedia.org/wiki/Common_Language_Runtime) Object__ or __POCO__ is a play on the term [POJO](https://en.wikipedia.org/wiki/Plain_Old_Java_Object), from the [Java EE](https://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition) programming world, and is used by developers targeting the [Common Language Runtime](https://en.wikipedia.org/wiki/Common_Language_Runtime) of the [.NET Framework](https://en.wikipedia.org/wiki/.NET_Framework). &gt;Similar to the Java context, the term is used to contrast a simple object with one that is designed to be used with a complicated, special object framework such as an [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping) component. Another way to put it is that POCOs are objects unencumbered with inheritance or attributes needed for specific frameworks. In .NET terms, the word is most often used in the programmatic sense, to differentiate a non-Serviced Component (see [MTS](https://en.wikipedia.org/wiki/Microsoft_Transaction_Server)) from a "standard object". It can also be used in a [tongue-in-cheek](https://en.wikipedia.org/wiki/Tongue-in-cheek) manner, referencing the perceived complexity and invasiveness of Java-based programming frameworks such as the legacy [EJB2](https://en.wikipedia.org/wiki/Ejb#Legacy). &gt;POCO is often incorrectly expanded to __Plain Old [C#](https://en.wikipedia.org/wiki/C_Sharp_(programming_language\)) Object__, but POCOs can be created with any language targeting the CLR. An alternative acronym sometimes used is __PONO__, for __Plain Old .NET Object__. &gt; --- ^Interesting: [^Plain ^Old ^Java ^Object](https://en.wikipedia.org/wiki/Plain_Old_Java_Object) ^| [^Plain ^old ^data ^structure](https://en.wikipedia.org/wiki/Plain_old_data_structure) ^| [^Plain ^Old ^C++ ^Object](https://en.wikipedia.org/wiki/Plain_Old_C%2B%2B_Object) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ch478v0) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ch478v0)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Do you consider all the idle cycles used by your CPU a waste? Go with the solution that will help you NOW. Don't worry about optimization (which I think is what you've implied here) until there's a true need for it.
MVC, don't bother with the antiquated web forms.
No WPF in mono? Aww :/
I tend to prefer to run my development apps in IIS Express that way I can quickly build and debug.
Thank you so much for the information. Your explanation of the situation was very helpful and I want to stick with MVC. I may need to select a better resource for building a sample application, and if you have any recommendations in that area let me know. The book that you linked is the one that I am using. The programmer I work with the most is just now beginning to push out MVC stuff and that is the direction we are going. Most of our sites are just ASP.NET Web Forms at this point.
You can't so just give it up.
Your second paragraph, fine, but I don't agree with the first one. I list any number of things on my resume that aren't directly related to my ability to code -- my unrelated college degree, for instance.
If your work has a budget. Get a set of accounts on Pluralsight and start from the ground up. Books don't help me. I'm all about audio visual. YouTube works well but pluralsight is, in my humble opinion, going to blow your mind forever. Know it, learnt it, love it! Try to get a clear understanding of what the following keywords mean... - .Net - AspNet - Webforms - MVC - WebApi Make a demo of each one to grapple with the basic perhaps? Pluralsight is best friend. Your colleagues may be using many of these technologies and you can help with each in a different way. 
Well, I can see why you'd think that, but a lot of HR folks disagree and as mentioned before it has benefits if you want to get MS partnership or whatever. Even if you don't think it's a plus I think it's weird to consider it *negative* or to tell people to never put it on their resumes.
Thanks very much! You're right - I am working on an EXTREMELY large project. The solution contains project references to several other projects which themselves have all kinds of references to other resources. We do use IIS, and IIS Manager is something I've been using - I'll look in to the Idle time out, thanks! I'll definitely look at the Attach to IIS tool too. This is exactly what I was looking for, thanks. :)
Instead of downvoting, I'm going to ask you why. Why?
Skip web forms because it's a piece of shit.
I tthink the guys behind ServiceStack are using nginx on Ubuntu. It seems web development under Mono is solid right now.
1. Why are you attaching to debugger? Only do that if you ... uh... need to debug. How do you debug in python? 2. If you insist on attaching to debugger, there is a plugin that lets you go to Tools &gt; Attach to IIS and it takes just a few seconds to link up to the w3wp process. 3. If you're changing a cshtml file, you do not need to rebuild Also, those of us in .net land know how to program so that we don't have to try over and over again to get something right. We're just awesome and it works the first time :P
Do you have any links or a blog post about using this? I'm in a php shop now working off of a mac. I have parallels installed when I need to do anything critical, but I would love to be able to do what you have. I have monodevelop already and have created some small apps, but I have a webforms background, not winforms. If nothing else I want to be able to do this to keep my skills sharp. (pun somewhat intended)
It's [right here](http://www.piotrwalat.net/running-asp-net-web-api-services-under-linux-and-os-x/). 
I don't think you want to use Azure Push Notifications really here, but Azure Service Bus, which is a messaging bus. Then you just listen for messages. Push notifications are really just for mobile apps, as they tend to utilise other mechanism for efficiency.
I don't have an answer for you but you might be better off posting this in /r/csharp
Good read and I mostly agree with the author. I've also read the other linked article: http://blog.jerrynixon.com/2012/05/windows-8-why-i-choose-xaml-metro-over.html which I agree with as well, but the comments on it made me cry.
Why I use HTML5: It runs on just about every platform.
This works correctly in VS2012, however, one of my devs was complaining about OP's issue in VS2013 as well, that simply hitting 'f5' no longer works. After some short research i did find this post about it: http://stackoverflow.com/questions/19766965/how-to-debug-with-iis-not-express-in-visual-studio-2013 which basically says as a workaround, opening the project through IIS might somehow bind VS2013 to work correctly... my guy nor myself have tested it but could be worth a read.
This works correctly in VS2012, however, one of my devs was complaining about OP's issue in VS2013 as well, that simply hitting 'f5' no longer works. After some short research i did find this post about it: http://stackoverflow.com/questions/19766965/how-to-debug-with-iis-not-express-in-visual-studio-2013 which basically says as a workaround, opening the project through IIS might somehow bind VS2013 to work correctly... my guy nor myself have tested it but could be worth a read.
I can't believe I didn't know about this before. Now if they only had paste as relative path lol
Oh, nice. Another feature I was missing from IntelliJ :)
Nice thanks!
Thank you for the recommendation. I actually have a MS DreamSpark account through my university email and which advertised a pluralsight login. I wasn't sure what it was but sense you mentioned it I went ahead and activated it. So far these videos are exactly what I need. Thanks a bunch!
WPF is good, but he forgets to mention the most important point: HTML5 = platform independent. Plus rollout to live environments is so much easier. The only platform that is not 100% ready for HTML5 is mobile, but WPF is not mobile either.
Does it have to be the TransferUtility? You could just use PutObjectRequest with a stream.
Can't run it in Windows 8.1
And why a .exe, make it a web application?
HTML5 does all of those things and more when MVC is involved, throw in some jquery a pinch of Ajax/SignalR and a nice CSS kit and it far supersedes it. Infact I shall go as far as to say, if anyone choses XAML over MVC powered HTML5 then they undoubtedly need their head xamling
EDIT: OP delivers. Turned into web app (with updates to come). If you like the desktop app, still available at [this page](http://elucidator.co/innominata/innominata.exe)
Try the new web version I threw together. Should work on all platforms.
That bitcoin popup thing is really annoying (on mobile) 
Fixed. Give it another try, everything should be fine on mobile.
That's better. But now the buttons don't line up! 
I guess I don't copy and paste nearly as much as others. 
While I've used the S3 .NET sdk, I've never used file transfer. Best idea/hack I have is to copy the file to a folder in the temp folder, and make the file name a guid. If the upload fails, the next retry will have a new guid. Once the program exits, run a process to delete everything in your temp folder.
I know, and I have no idea why &gt;.&lt; Any ideas? &lt;button class="btn btn-primary" onclick="history.go(0)"&gt;&lt;i class="icon-white icon-refresh"&gt;&lt;/i&gt; New Name&lt;/button&gt; &lt;a href="donate.php" class="btn btn-primary"&gt;Donate&lt;/a&gt; 
Because Microsoft doesn't want to you to do that.
a.btn { margin-top: 6px; } your style.css line 122 remove that margin-top or set it to 0 or set the same margin on the other button. Also you are using one &lt;button&gt; and one &lt;a&gt; which bugs me when I look at your source but doesn't actually matter. **EDIT:** also your new name button is broken. Use "location.reload();" onclick instead of that history bit since that doesn't actually refresh the page. Or something else, but history.go(0) doesn't work for it.
Thanks, fixed both :) However, I don't need the entire page to reload, just the PHP. I'm thinking of going back to history.go(0) since that seems faster.
history.go(0) uses the pages cache though so it doesn't give it a new name (at least in firefox). Look into using jquery.ajax or something to make the request and then use javascript to overwrite the name instead
hm, that's odd. I guess I'll stick with location.reload(), then. For Chrome, history.go(0) works, but I I need firefox user compatibility as well.
PHP... you foul beast, begone from this fair realm of dot nettery
I'm currently using their library, but haven't run into any issues. Try posting on their GitHub: https://github.com/aws/aws-sdk-net Or their forum: https://forums.aws.amazon.com/forum.jspa?forumID=61 
I posted here because it's useful to .NET coders (I am one myself) and because it used to be a .NET application (downloadable [here](http://elucidator.co/innominata/innominata.exe)). And remember, this is a small application. There's more formatting in HTML than there is actual PHP code, since it's only using PHP for the random functions.
I'd look into using jquery to make a get request and have php respond with json to serve just the name. Much faster, and a good learning exercise if you haven't used Jquery/Json much
&gt; I still don't see how to view the generated names? Generated names: [Enian] [Lucion] [Alchiate] [More Names] [Donate] The website should look something like that. In this case, Enian, Lucion, and Alchiate are the names.
WPF (XAML to be exact) is in fact very mobile, but unfortunately only any good for Windows Phone. And for Windows Phone, having developed in both HTML/JS and XAML/C# (and even XAML/C++ but not much), for me, XAML/C# wins hands down. Additionally, even the simplest HTML/JS app (like a default project or something) felt slower than XAML/C#. I'm not exactly sure why though, as some of the apps I have are HTML/JS and don't have that feel to them. I'm rambling here a bit, but tl;dr is that XAML is in my opinion better than HTML5 for mobile when it comes to ease of development. Admittedly, there's not much you can do with this code outside of WP platform, while HTML5 code could potentially be reusable across platforms (and even web). 
thanks, I will check them out!
Yeah, good idea. Will do. 
Thanks for the response. I'm already dealing with temp files so it's like how hacky can we get?! 
Okay... I'm in a picky mood today sorry: The H1 tags are not closed properly and you have a superfluous &lt;/div&gt; that's why you get the weird grey bar at the bottom, why are you loading in so many unneeded scripts on top of bootstrap (Cycle.js for one is erroring and un needed) Why are you using location.reload() use ajax and jquery instead to target a container div. MVC asp.net is where you need to be!
SignalR will do it, in fact it's the only real option : all the configuration required(very little): http://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/using-signalr-with-windows-azure-web-sites and overview: http://www.asp.net/signalr/overview/signalr-20/getting-started-with-signalr-20/introduction-to-signalr
That HTML5 is slow compared to XAML is probably due to the fact that HTML5 needs to be compiled by the browser, which will always be slower than the C# JIT compiler.
I own both of Adam Freeman's ASP.Net MVC 4 books (Beginning and Pro), and feel your pain. I got hired as an ASP.Net developer, but only knew C#, JavaScript, SQL, and some old ASP from years ago. When I arrived, they were using MVC 4. Going through the Beginning book, like you did, was helpful until the author decided that it was best to move away from teaching the subject matter that his book was titled after, and instead start teaching about "dependency injection" and a tool called "Ninject". Not knowing, nor having ever used, dependency injection, I got very lost and eventually never picked the book back up. Instead, I went to the MVC site and watched the videos there that walk you through completing a restaurant review site. I have only glanced at the Pro book, because I think it's still a bit beyond me. Definitely give the videos a watch over at http://www.asp.net/mvc, that site is definitely a treasure trove of useful info. Good luck!
So what's the point of the DependencyResolver? I'm not an experienced MVC or even ASP.Net developer by any means, but that book confused the jibblies out of me when it started going on about dependency injection, Ninject, and all that jazz. I just don't understand what the point of doing it was, when (I guess) you could just as easily create some DAO methods to interact with the database and build objects there (if I'm understanding the point of that chapter, anyway. It's been a while). Cheers
wait, isn't html5/js interpreted? 
Agreed...
I threw together the web app quickly and just copied it from another template I had on hand rather than coding from scratch.
Yes, but that's the desktop version - not very up to date. The web version is updated with new start/end strings frequently. (in fact, I just added two more now). As well, 200+ names isn't too shabby :P Also, can you pastebin that or something? It's a fairly large comment.
In case nobody got it so far, Innominata means "no name" in latin.
Not sure about the s3 connector specifically, but the code on the .net SDK is horrific. There are lots and lots of weird threading and background batching things that go on, so much so that a client of mine recently were forced to downgrade to the 1.5ish revisions because the latest code drops have performance problems that manifest every ~30/40 requests not present in the last revision. Frankly, I consider the SDK pretty harmful in its current state, and encourage the brave to take a look inside and measure the wtfs/minute rate. And if that wasn't bad enough, it's a what not to do guide to open source; no tests, snapshot code dumps, out of date docs, terribad code, weird csproj links that break resharper and regular intellisense. I'm not helping, but I feel your pain ;) [Edit: yes, we've sent some pretty serious bug reports and repros]
I know a division of the company I work for switched from pure MS to a Linux mono stack for a web application and the biggest change they noticed was a speed increase. 
&gt; Posted this in response to one of your commenters, but i wanted to make sure you saw it. Yeah, please don't do that.
Very glad to help :) If there's anything else you'd like to know I'm always happy to help. @kahneraja
Nope, I haven't ran into any, sadly. The Pro version of the book may be better, but I'd have to check when I get back to my office tomorrow to see. The videos were about as "vanilla" to MVC as I could get.
But that is not wpf. but that is a very useful resource thanks!
I had the same reaction with the dynamo driver. Having worked at amazon though I can't say I'm not surprised
I like using SimpleNote. It's simply a plaintext version of Evernote. Sadly, nobody's made a really good Windows-based client. The web interface is fine, but on OSX there's nvAlt which is easily the best note-taking application ever.
Well without knowing anything about your services, I'd definitely say the second example. That's the least dependent one, you can easily change implementation to call say superClientService without effecting the consumers of EstimateService. That really is the most important point about DI and decoupling is to reduce the amount of work/breaking during refactoring. One rule I use is that refactoring should always break unit testing, but never production code
Eh, am I crazy? Personally I think without knowing anything about your services, I'd definitely say the *first* example. The likelihood of needing two ClientService objects is probably pretty slim - you are likely going to want to inject that dependency instead of having it hardcoded into the class constructor itself. You are coupling EstimateService to ClientService in the second example, causing more work/breaking during refactoring.
sorry, but this answer it totally wrong and shows a lack of understanding around proper DI design. You want to to go with the first example, expose dependencies to support mocking and testing. If you want to support DI you're likely doing it wrong if you use 'new'. If you want to read more about DI, i'd suggest. http://www.manning.com/seemann/ edit: clarification on why new is bad. One of the big pieces of DI is that the container will maintain lifetime for your objects. If you are using the new keyword you're ripping control from the container and saying you know better, which is not true. 
The second, with a caveat. Any place that you touch on the services in your constructor, wrap those calls in the simplest method call that you can possibly make. Use a mocking framework to sever your external dependency at those points. Further, consider refactoring so that you're not coordinating calling and performing logic on multiple service method calls in a single class. Perhaps your *EstimateService* could call *ClientRetriever* and *FacilityRetriever* and pass those results to an *EstimateGenerator* class?
we make use of unity in large applications. Unity 3 is great and a big advancement over unity 2. Also it supports windows phone and the likes so if you're doing any cross "windows platform" development you can use a single DI enhanced codebase for phone/web/store/desktop development. Not going to get PCL support from windsor, can't speak to ninject. 
sorry man, i can't sit idly by and let these people tell you that if you're trying to DI you should put new object instantiate inside of a class. It's LITERALLY the exact opposite of "dependency injection"
Oh I remember reading about this. Are you using this as membership for a site? or as a front-end for IdentityServer?
It loses all the formatting, doesn't it?
I never claimed that my approach had anything to do with dependency injection. To do TDD with this sort of structuring, you need a mocking framework. You do not need a DI framework, because you never actually touch those dependencies.
One of the best I've seen: [MyWSAT](http://mywsat.codeplex.com/) 
&gt; Specifically, I'm trying to reduce dependencies and make things easy for unit testing. I'm also using Unity for dependency injection. Good idea. &gt; I felt it was bad practice and redundant to copypasta code from these services into EstimateService, so I started going down the path of injecting the services with Unity. Another good idea. &gt; The services are basically the queries I want to pull packaged into nice objects or enumerables for the Web layer to consume. This "EstimateService" pulls bits of info from each of the other services. And now you are at a crossroads where you have a service for each root entity, and constructor injecting all of them is giving off a smell, but you know that you shouldn't be 'new'ing them up, because then you'd have hard dependencies on those specific implementations of the services. Whenever you get to a situation where you can go left or right and both seem wrong, back up and listen to the pain point. The root problem here is that your services as you describe them are query warehouses. As you are discovering, when you need a single query that just happens to reference that root entity passing around the entire warehouse for the root entity becomes rather cumbersome no matter how you do it. For advanced solutions, look up CQRS, but don't go as deep as Event Sourcing. You usually find that you need business logic only when doing Create / Update / Delete operations, so there really isn't a need to make Reads jump through all the same hoops. For a 'lets get it done' solution, just make peace with a constructor with more than one or two parameters and stick with the DI. It's really not that big a deal. 
Yep, it was dynamo that stung them too. Pop quiz - what doesn't need its own connection pool? If you guessed "outbound http requests" you're on to a winner ;) In fact, doing a "shit free" implementation of a dynamo client actually made me loose respect for the dynamo team. It might be fast, but they can't design APIs or none asinine authentication for shit. Ah well ;) 
Yeah, I like the syntax highlighted. Evernote does all that, but inserts blank spaces.
I have been considering just letting the constructor be "ugly" since its no real extra work on my part. Unity happily serves up the objects it needs. I'll do some reading on CQRS!
You know whose .net driver is incredibly well done? Mongodb. I am using it now and it's just pure joy, they did such a good job with it.
Now I want to look at Simplenote's API. It'd be easy to apply highlighting to the code on render. 
What version of SharePoint are they using? Developing in SharePoint changes everytime a new version comes out. For the most part knowing .Net is good enough. Without knowing the version I would say get familiar with the SPSite, SPWeb, and SPList objects. Look up best practices for SharePoint coding. For example there are several ways to query a list, but in 2007 at least CAML queries are generally better (I only have 2007 experience). 
I'm shocked. Considering this is coming from a Microsoft evangelist.
I tried a different approach and it works great. In my opinion, it's uglier. If anyone comes along later and has an idea of what ridiculously simple detail I'm missing, I'd appreciate it. // source must match a value in tbl_Sources switch (Request.QueryString["source"]) { case "google": cookieValue = "GoogleAds"; break; case "bing": cookieValue = "BingAds"; break; } switch (Request.QueryString["utm_source"]) { case "google": cookieValue = "GoogleAds"; break; case "bing": cookieValue = "BingAds"; break; } EDIT: This version isn't "better," it just doesn't have the .ToLower() problem. Well, it's working now, so I probably won't revisit it unless we start running ads with several more companies, but I really appreciate the helpful feedback!
I second pluralsight. Previous boss wanted me to do some Sharepoint dev, so I used pluralsight to ramp-up. I never ended up doing the sharepoint work though.
Yeah, totally agree. As ever, its just about writing idiomatic code with enough signposts to help people fall into the pit of success If doing the right thing is natural and obvious, as an API designer, you win. But not enough people think outside in when they're designing clients and libraries and end up falling on the crutch of documentation.
OP, have you looked at the AvalonDock project on CodePlex?
I came here to make this comment. Best of luck.
Yeah, API design is a true art. When it's right you don't even realize it, but when it's wrong it's all you can think about
You can do something like this... //interface to define shared services //any time you want to add a shared service do so here first public interface ISharedServices { IClientService ClientService { get; } IFacilityService FacilityServic { get; } IResourceService ResourceService { get; } } //shared services implementation public class SharedServices : ISharedServices { public SharedServices( IClientService clientService, IFacilityService facilityService, IResourceService resourceService) { ClientService = clientService; FacilityService = facilityService; ResourceService = resourceService; } public IClientService ClientService { get; private set; } public IFacilityService FacilityService { get; private set; } public IFacilityService FacilityServic { get; private set; } public IResourceService ResourceService { get; private set; } } //just inject the shared services public class EstimateService : IEstimateService { private readonly RcContext _context; private readonly ISharedServices _sharedServices; public EstimateService(RcContext context, ISharedServices sharedServices) { _context = context; _sharedServices = sharedServices; //use like this _sharedServices.ClientService.DoSomething(); } } Now this assumes you have 1 set of shared services and a whole bunch of other services like EstimateService that use those but aren't them self included in the shared services. Pretty sure you would end up with a circular dependency if you tried to add IEstimateService into the SharedServices. There might be some way around that with Unity although I'm not really sure. Anyone else have any ideas? 
Here's your issue: If the query string value source is null, then the ToLower() calls will throw null ref exceptions. This fiddle will show the issue: http://dotnetfiddle.net/Mpr5oc And here is how I'd probably end up writing it: http://dotnetfiddle.net/470L2O No case statements and should be easier to add newer values to.
Thanks for all the replies. I do currently have Windows 8.1 on my MBP, but I'm giving it to my wife since her's had a crash with a two year old and a hot wheels car. I think I'll take a look at the Yoga and the X1.
Begin by typing it correctly: SharePoint :)
Ah, SharePoint. It's just like you're working with actual ASP.NET. Except for the 90 billion ways it isn't, but tries to look like it is.
At least with ASP.NET you can write your own handlers and completely bypass postbacks, web forms, etc. (and nowadays use other web frameworks). In the older versions of SharePoint (not sure if it's any better now), you were stuck with their way or nothing. Figuring out clean ways to do migrations was a struggle as well.
SP dev in 2013 is now basically an iframe into a standard web app + rest frameworks. Has different challenges but at least it's more in line with web dev.
http://stylecop.codeplex.com/
Yup love those guys, and far from expensive too, can't beat $29 a month for over 1500 courses
If you are not using http://redditenhancementsuite.com/ then you should be! Assuming you can install on your machine this is how I turned it off.
 HorizontalAlignment="Center" VerticalAlignment="Center" This makes the canvas become centered in your parent element, but since it has no set width or height, it goes all the way down to 0*0px. As soon as you take that out, it will assume default positioning according to the parent element (edited for accuracy) The link to the pdf goes 404 on me. What are you trying to do?
Can we get a TLDR ? And why is he using a Mac ?
&gt; In the PDF we're basically making a game and the canvas is the main screen I think with other forms at the bottom. OK, so is the second screen what you want to accomplish? You're saying you're not sure if it's supposed to be this wide. You're putting a canvas inside a grid. Grid, by default, makes the children elements stretch across the top-left cell. However, your canvas has a ColumnSpan property, which additionally makes it span across the other 2 columns. &gt;Do you think this will come with time? Absolutely. There's quite a lot going on that you'll need to wrap your head around. You'll get the hang of it as you play more with the layout, and figure out which parameter does what.
Thanks for your response. I love your scalability for different values anticipated and, while it's overkill for this particular area, I'm going to keep it in my mental toolbox. I'm going to ask you and the other person who helped me the same questions, if you don't mind: Do methods always fire like that, even in conditional statements, or was it this specific method? For strings in C#, does "google" == "Google"? Was the ToLower() unnecessary? 
Upon review the screen is meant to be that wide I think so that's my bad. You seem pretty pro at this by the way and at the moment I'm overwhelmed by all the options I can choose. Is there a specific book/resource/strategy you could recommend to learning this in depth? I will stick with the Head First book for now though. Thanks again for the help. 
I dunno. http://www.wpftutorial.net/ sounds OK, but I never learned from one resource in particular myself. I just played around with it a lot.
Did you learn from an array of resources? Any particularly good ones? Sorry for the constant questions lol.
I am doing exactly this right now with a webforms app. I'm going to try a variation of this. http://blog.beabigrockstar.com/google-signin-for-asp-net-mvc/
I have it working with OpenID but I need to change it to OAuth2.
Usually MSDN and StackOverflow for all I remember. These should be your go-to resources for .NET programming in general, not only WPF, though. Google is most often helpful, if you know what you're looking for.
Woe is you. Sorry about that.
~~In the spirit of ZMQ documentation I will respond to your perfectly reasonable question with this insufficient response:~~ ~~Abandon Hope.~~ See my other top level comment... the docs are actually pretty darn good, in my opinion.
I can't. If I do, I lose my job.
That's a tough break! Assuming that there is no native binding for C# that you can get to work, here are the "long way round" approaches you can follow: * Using the COM interface or some other IPC/RPC black magic, invoke ZMQ functions in the Python bindings via a shim interface. * Build the C interface (there must be one, right?) and write a wrapper utility around that to call it safely from C#. By the way, I'm assuming you've tried the NuGet `clrzmq` bindings found [on the official zeromq project github](https://github.com/zeromq/clrzmq)?
&gt; By the way, I'm assuming you've tried the NuGet clrzmq bindings found on the official zeromq project github? Yes. That's what I started using. I find the documentation to be severely insufficient. Unless I am really not looking at the right place.
Wait, I dug around a bit more, in what way is the documentation lacking? * [Basic useage and 'hello world' examples](https://github.com/zeromq/clrzmq) * [Detailed implementation examples for C#](https://github.com/zeromq/clrzmq) * Extensive, exhaustive, and explanatory (non-generated) [documentation for the entire project](http://zguide.zeromq.org/page:all) including C# code examples throughout. I wish all open source projects were this well documented!
Yeah, I used a tool to view the contents of the dll, but that still doesn't explain how the pieces fit together. For example. I've been trying to figure out how to poll a server on a ZMQ socket. In Python, say your it's myZmqSock.poll(timeout). In .Net it's completely different. The poll method is not part of the Socket class. And you have to set it up to receive events from a special polling object or something. It's not very clear and the documentation is very limited.
http://zguide.zeromq.org/cs:mspoller - does this help?
Great read 
I wish it did. What comes in the clrzmq package doesn't reflect what's in that example. The namespace is not ZeroMQ, it's ZMQ. There's no ZmqContext class, instead it's ZMQ.Context. I've also noticed that some of the examples given has objects that call certain methods that sometimes are unavailable to the objects I have because they're in some other class. I'm not in front of my dev box right now, but I'll check to see if the socket has a ReceiveReady event. I'll see what I can do from there. But all in all, the documentation does not match the API that I have in the provided clrzmq package. It's weird.
The entire concept seems... Obtusely complex. Why not create a standardized way to do inter-process communication and offload your long-running CPU-bound C# code to that? Why mess around with putting C# in a comment, which isn't going to give you any tooling support, plus now you have this CPU-bound task running *in process*... The whole concept of edge.js seems to violate the main spirit of node.js
It's really dumb. Twenty layers of crap to make a database call. "you were so preoccupied with whether or not you could that you didn't stop to think if you should. " 
And imo, enums should be plural because they're a list of possible values. However, if it's not a flags enum, the actual field/property/variable for it should be singular, since it stores one possibility.
Yeah that's quite bizarre!
The readme for the project takes a look at the performance hit of interprocess communication. https://github.com/tjanczuk/edge/blob/master/README.md#what-problems-does-edgejs-solve I have not verified their claims, but it seems that it's much slower than the two running in the same process. In terms of why its in a comment, it's just so that you can view the code easier inline. You can also import files directly which allows you to take full advantage of syntax highlighting. I'm not saying that I would implement this in my own app, I just thought it was a neat concept coming from a C# background originally myself. 
&gt;What problems does Edge.js solve? &gt; &gt;&gt;Ah, whatever problem you have. If you have this problem, this solves it. --Scott Hanselman (@shanselman) That's hilarious
I bought a personal licence because I use it at home, but I use it at work as well because it's more convenient that way (and I don't have to worry about the licence server bugging out and giving people multiple licences because they have three versions of VS open because *why bother upgrading your solutions, right?*)
Umm... I'm developing a reddit-like community in asp.net mvc with sql. Opensource. Not sure if that would be what you're looking for though :)
The tests aren't there to explain what the code does; they are there to make sure it does what it should.
They must explain what the functionality is that is trying to be achieved.
Unit\integration tests. No IIS or browser required.
And this does both. Tests the code and Shows what It's supposed to do directly in the Definition.
What do You mean exactly? Adding a Name Parameter to the Attribute would be trivial. Sorry if I didn't understand You, English isn't my first language :)
I wouldn't bother, you aren't really gaining anything over including examples in the XML docs. By the way, take a look at Code Contracts for C#.
The values 5, 6 in more complicated scenarios might be things like 2 * PIE or UPPER_THRESHOLD. I don't think you can use constant names like PIE or UPPER_THRESHOLD in the initialization parameters of an attribute (IIRC). 
Well, It's definitely easier to only test the return value, than to specify conditions for *every* other Thing That might influence it.
I think these kind of tests are better handled by code contracts. In anything but trivial cases this wouldn't be very useful. Your example can be inferred from postconditions. Most tests I write require mocks and sometimes quite a lot of setup. Attributes simply cannot cater to that. What I do like about however is that you bring the tests close to the code it tests which I think is a good thing. I hate the common use today with separate solutions. In my opinion tests are a part of the code itself.
I wrote up a quick mini implementation That works for [Assert.AreEqual] on static methods That only take and return Basic Arguments. [InlineUnit](https://github.com/Banane9/InlineUnit)
Came here to say code contracts. It won't solve the exact axample from OP, but many other trivial cases. For the rest, use proper unit tests. I have very few unit tests that can be expressed in one line, and I've written a few thousand. 
You're not really saying you don't need unit tests if you have code contracts, are you?
Aha! But then you're blurring the line between the test and the code behind the test. What if you need some setup code? Pre-initailized objects which you can bring in from some attribute syntax you say? Soon you'll end up with what is references to the unit tests instead of the tests themselves. Some sort of meta-language for functionality documentation. But that's not necessarily a bad idea. Example: Attempting to dispose an object that is already disposed: [AssertException(expected typeof(InvalidOperationException)), initialState=MyObjectFactory.New().AlreadyDisposed()] public void Dispose() { } You'll need a bunch of factories and mocks. But at least you've brought the tests closer to the code. And that's probably a good idea. Example 1: // Returns an object where the non-null property from each object is copied to the new object. If conflicting values, person1 has precedence public Person MergePersons(Person p1, Person p2) { } 
You can use values defined as `const` but that's it. No `static readonly` or anything else. 
That's what I wondered too.
Finite resources. There is never enough time to write all of the tests I "need". For example, I know that there is an integer overflow bug in his code. But if I recall correctly, code contracts can catch that sort of thing, freeing me from having to do so.
[Zimbra Community](http://www.zimbra.com/products/zimbra-community/benefits.html) (formerly Telligent Community formerly Community Server). It's very Enterprise-y though. We are using an old Version (Community Server). It's not the easiest to configure and personalize with a small team (we are only two devs) but it works.
In reference to the forum, I just setup a new forum for a client using YetAnotherForum (YAF). It's free, open source and has an impressive amount of features. http://yetanotherforum.net/ I don't think you're going to find a one-size-fits-all framework out there that has everything you're looking for. Your best bet would be to setup each particular piece and then sub domains (like forum.site.com and blog.site.com, etc.) then put in some glue code, or a main landing page which integrates all of the different functionality.
I believe the deployment wizard has a place to put in user credentials before saving the "deployment instance" for lack of a better term. Have you tried doing a simple FTP deploy? Also, try going to the host's knowledge base or customer forum to search for answers because odds are that you're not the first person who's been in this situation. 
I noticed that if i click "Manage styles" then all the the classes are present -- Not just select ones. When I click "Apply Styles" the list shrinks to just to items that have a green check next to them...
Does OneNote work? Or does it have the same behaviors? I know it's similar in features.
I use LINQpad, since I like being able to run the snippets and play around with them. It is basically "plain text" but has syntax coloring. It won't auto-format VB snippets (which I actually prefer. I find lowercase VB to be very readable.) You can save and run snippets from C#, F# and VB; in program, statements and expression form. The registered version supports intellisense for C#.
I used to write projects that connected to both SQL Sever and Oracle databases, although not at the same time, just different for different customers. We used stored procedures for everything and it was a bit of a pita for most projects. I would recommend very detailed integration tests if you were to use this route. However, we didn't have any issues actually connecting to the databases, if that's what you are asking.
What is your criteria? Do you have a bunch of T-SQL stores procedures currently written? Do you have no budget? Post Gres would probably do tout just fine and save you a bunch of money. 
I've used MySQL, MongoDB, CouchDB, SQLLITE, and all of Amazon's DB services (S3, Dynamo, Simple, etc.) All of them work well enough for "production", but that's really such a broad term. It all depends on what your environment is, and what you need to do. Mongo is "web scale", as the joke goes. But, you know, do you really *need* millions of concurrent users? Are you ever going to *get* to millions of concurrent users if you're working around its limitations? MySQL works pretty well. I've heard good things about Postgre. Those are full on servers, though. You'll need to admin them like any other server. SQLLITE is just in-proc. It works well enough for client duties. To be honest, SQLServer is pretty damn good.
We've used SQL Compact Edition 3.5 and I really wish I hadn't. You know you are having problems when Access starts looking like the better option. What are your experiences with SqlLite ?
Back around 2004 Oracle was a pain in the ass. You couldn't just connect to a database by DNS or IP address. Instead you had to register the database connection in some random text file. Don't know if that's still a problem. MySQL was easy enough to setup. But if you made any mistakes in your SQL it would rather corrupt your data that raise an error. SQL Server Compact Edition didn't offer a way to check which version the database file was created with. So you had to call the upgrade function which would either upgrade the file or throw an exception. Annoying, but easy to work around. For many, many years I would use Access files for my lightweight database option. I don't know if that is still viable, but it worked great for a long time. 
I'd use SSRS and BIDS/Report Builder and write reports against the database, rather than have the front-end churn out print-ready HTML. That's what it's built for.
I too use Oracle, and SQL Server. If you have a bunch of T-SQL you need converting to PL/SQL then Oracle SQL Developer is your friend. Yes TNSNAMES.ORA is still a pain in the arse (some random text file). While I was always the SQL Server guy, I'm beginning to appreciate Oracle more and more.
&gt;While I was always the SQL Server guy, I'm beginning to appreciate Oracle more and more. How so? My experience of working with Oracle for 2 years was that it's really fast but lacks many conveniences of SQL Server. 
I'm still using Windows 7. Is there somewhere I can go to get more information on making plugins? I'm not looking to do something very feature-heavy.
Its more performant, isn't it? 
Yes, per the other comments, Oracle is more performant, but a pain to set up. But the set up only needs to be done once. Oracle is also difficult to scale up without a knowledgeable DBA. That is: SQL Server is more idiot proof. I would never use Oracle in a prod environment with an experienced DBA approving the configuration. (My experience with Oracle is from about 10 years ago, but I can't imagine they've simplified anything in that time.) I've also worked with SQL Server CE and SQLite and given the two, definitely go with SQLite; it's about twice as fast.
I, myself, need to read into SSRS/BIDS more -- one of the more tedious parts of a development job is creating reports, and if something can shorten/simplify that lifecycle. My problem has been things tend to fall apart when you want to create a report that list more than just a .List(able) dump.
I have a feeling you are right! I've seen something called MonoX, which looks ideal and i may pursue this, but they've they insist on using their own membership, rather than being able to re-use your existing one. It may be possible, but i think I'll need to investigate it further. Thanks for the yaf suggestion!
Thanks for the suggestion. It might be a bit too specifically focused to goals, but I'll take a closer look and see if it something I can possibly modify and create a branch of if appropriate. Thanks again
But often you have multiple different mocks per type, depending of the test you're running.
It is usually separated in another project so you can **easily** remove the tests from the actual deploy on the production system. If you have the tests in your project you will also deploy them.
But `static readonly` are no constants, so they can't be used in attributes.
I think this would make the code really much bloated and obfuscates what the code does. Often you have many different parameters for many different cases. Often you have more than 10 tests to test something thoroughly. You always want to write 10+ attributes over your method?
Check out Telerik reporting. Essentially it's SSRS on awesome, doesn't require additional functionality dependencies from SQL server, and has much better editing options. Convince your company you need the ultimate Dev craft package and get all the Shiney tools :-) 
MySQL / InnoDB. Very easy to setup, and having MVCC means significantly better concurrency. Non-locking yet transactionally consistent SELECT.
I've been really happy with telerik reporting as well. It is easy to use and quite powerful. 
I'm a little surprised that I haven't heard much about PostgreSQL here, but that's my vote for non-MS DB. Although I'm using MSSQL at my current job, I'm the only real .Net developer and we have a lot of other projects (Ruby and php mostly) that all use Postgres as their DB. My project connects to it both in application code and through a linked server. I like Postgres for a lot of reasons. First off, it's a very familiar to MSSQL. There are some minor differences (public vs dbo, no ISNULL (use COALESCE), and its case sensitive) but I've found that the transition is pretty quick. Second is that Postgres is a very full featured database. It has things like replication and partitioning that you'll only find in Enterprise MSSQL. And of course the third thing is that it is free and open source. Considering how MSSQL can easily run you into 6 figures for licensing, I don't think this is something to take lightly. One thing that I will say is that although Postgres is cross platform, it is really shines when it runs on linux. It can be run on windows, but it isn't nearly as fast, and probably not as stable. I don't think there's a problem with running a local or dev instance on windows, but for production I would make every effort to get it on a linux box (we have it on redhat at work). In general though, a non-MS DB that runs great on a windows box is somewhat of an oxymoron.
Unfortunately, most guides aren't actually outdated, the IE plugin model is. [Here](http://stackoverflow.com/questions/5643819/developing-internet-explorer-extensions) is a StackOverflow question with many good answers. You might want to try [CrossRider](http://crossrider.com/).
Sweet jesus! That Stack Overflow answer seems to me like I'm gonna have my hands full! I'm on mobile now so can't navigate the CrossRider website well but is there any "gotcha" to using it?
If you expect to get the same performance from SqlLite as you would from a full SQL server (SQLSERVER, MYSQL, POSTGRE), you're gonna have a bad time. It's not really concurrency-focused. You're fine if you have a few threads hitting it, but I wouldn't recommend using it to back a web app or something. It's good for client apps with single users.
I've never used it, but I wouldn't be surprised if the abstraction did leak sometimes, it almost always happens with frameworks like that.
You can use this disgusting syntax in your Oracle connection string to avoid that text file. SERVER=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=MyHost)(PORT=MyPort))(CONNECT_DATA=(SERVICE_NAME=MyOracleSID)))
It's being used in a client side application to buffer data we collect before uploading it.
That'll work. It's easy enough to abstract out if I need dynamic connections.
Just evaluating options for a new project. 
How was CouchDB for you? Did you use it while it was hosted on a Windows server or was it hosted on a Linux machine? 
Oracle took over an open source project called SQL Developer that is similar to Toad. IME it's buggy though.
We use SqlLite for that very purpose, and it does it's job well. Just try to keep your schema simple, and like I said, watch out for too much concurrent I/O.
Note: I only read the controllers. First thing I noticed: Use async operations and the async/await operations. You use it sometimes, but not everywhere. For instance in the home controller, to send the message, you should use await smtp.SendAsync(); You should also not catch Exception. You should catch the specific exception you want to handle and let the rest go higher. On the controller, you should have a exception filter to convert unhandled exceptions to a HTTP 500 (so you don't leak stack traces) and log the problem. You also have commented out code hanging around. That is a really bad idea because nothing is checking that it compiles or no longer works. All of your public methods and classes should have XML documentation (http://msdn.microsoft.com/en-us/library/aa288481(v=vs.71).aspx) and comments. Your code is not self-evident. Your using statements should be sorted. My personal preference is to have them inside the namespace as well. (Turn on Code Analysis). There is no logging that I could see. This will make live site issues awful to debug. Use named constants where appropriate. Example is: ViewBag.SelectedSubverse = "user"; "user" should be a constant somewhere. Your logic is sometimes tightly coupled with your controllers. Biggest violation there was the account controller. Breaking items into multiple DLLs is not the worst thing in the world. You should also have 1 class per file unless it is something trivial or semantically nested. And finally, and this is by far the biggest, I did not see any tests at all. That will cause you a lot of problems. That said, for the most part, I did not want to gouge my eyes out while reading the code, so it is in pretty decent shape.
I think it's worth it to learn. We used to have all our reports hand coded with classic ASP pages, and they were a mess. Virtually impossible to edit/update. If someone wanted a new column, or an additional calculation, OMG plan on a week of pulling hair out. Now as we've been moving report after report to SSRS, we spend most of our time coming up with the Query, once the query is there, and we are selecting the columns we need, the report pretty much builds it's self, we are done. Export, parameters, permissions can all be handled easily, and almost without even doing anything in SSRS.
If the code is internal and not distributed then I strongly disagree with the arbitrary "anything public gets an XML comment" statement. If the code is not self documenting and the API is not natural to use then your code is a smell and should be fixed Comments should describe WHY not WHAT. However, if your code is going to be consumed by a 3rd party, then I agree that all public should be commented. 
Toad is great, but it looks like crap.
&gt; The verification consisted of seeking back to the start of the stream, and then reading the stream to verify its contents. That's the problem. Both `ToArray` and `GetBuffer` are usable after `MemoryStream` is disposed, but `Seek` is not. Package reading a `MemoryStream` up into an extension method: static class MemoryStreamExtensions { public static string ReadString(this MemoryStream ms) { return ms.ReadString(Encoding.Default); } public static string ReadString(this MemoryStream ms, Encoding encoding) { var bytes = ms.ToArray(); return encoding.GetString(bytes, 0, bytes.Length); } } The test is similarly: [Test] public void WriteToFile() { objectToBeTested.WriteToFile(testString); // you don't need to seek to the beginning, just use the overloaded ToString method.... Assert.That(writableStream.ReadString(), Is.EqualsTo(testString)); }
*sigh* had he just studied it a little more he would have found out that ToArray etc. are, by design, very useable after a Dispose call. In fact, there is no actual need to dispose a fully managed object like a memory stream that you're going to throw away anyway. The same goes for his new creation, which is completely unneeded in light of the above.
This is really not the right place for this. Try [stackoverflow](http://stackoverflow.com/) I also think you'll have to be more specific when posting your question. For example, are you using MVC and the entity framework? Don't answer me, just post that kind of details in stackoverflow. Hopefully someone will have an answer for you there. Wish you luck.
I've been using DevExpress XtraReports for a few years now, and have been very happy with it. I designed everything around building reports in the running app (in the end user report designer) as opposed to in code (of course there was a lot of code to build this initially). This has made building new reports and making changes incredibly easy. In a prior life we built all of our reports in Active Reports, but 100% in code so making any change was a major pain in the rear. 
Thanks for the info. I had assumed the underlying byte array was NULL'd after it was disposed. I'll update my blog article (and probably my unit tests) accordingly. 
Did you try the database with some fields and adding one? Sometimes the emails with wrong times cant update and fill out the entities!!!! Some sign up fail with browser and not email table complexity? 
About 80 man hours so far.
Indirection is the word you are looking for. Most problems can be solved by adding a layer of indirection, but I agree, too many layers and you just create new problems.
There's a learning curve and some options are almost hostile in the un-intuitiveness but you can churn out some reports quickly and, if needed, do almost any customization as well as call them from a page/app or just host on the report server. 
I think they keep it around precisely to enable this kind of scenario. It's a much more useful behavior, anyway :)
I didnt mention it but i have also checked on the log in page and there isnt any option to use google there either.
So essentially what the new null coalescing operators `?.` will allow you to do?
When is that available anyhow? I've been waiting for nearly 8 months!
Thank you very much for taking the time to comment and go through my code. I will check out each of your remarks when I'm back at my dev machine. For now, I would just like to point out that Markdown.cs is not my code (there should be a comment/license starting at line 0). This part is markdownsharp project which is apparently in use at stackexchange and it is pure hell to modify due to all the regex mumbo jumbo. Once again, big thank you. I use unit testing in school projects and will include it here asap, along with much needed error handling code. 
It should be on the right hand side of the login page (at desktop resolution, underneath on mobile) - labelled as 'Use another service to login' That is assuming you've done all the setup (setup IIS Express to use SSL etc). This article explains it: http://www.asp.net/mvc/tutorials/mvc-5/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on
I know, right?
I agree. I'm just sorry the doc that states this is buried at the bottom of the page for the specific function. When I look for information like this I expect it to be in the class-level doc. Oh well. Thanks again for the response. I updated my blog giving you a shout out.
You mean the new null coalescing operator in the newest .net version some lucky people will use in production? ;) After a quick glance I can't find supported .net versions for this library, but if it'd work with .net 2.0... well, still not as nice or as clean as good ol' ifs, but may be nice for a bit complicated situations (I'm thinking ADO.net / EF).
Well, they use lambdas, so it requires at least .Net 3.5 for that.
&gt; Scott Guthrie, who is now the Executive Vice President in charge of Microsoft's Cloud and Enterprise business, also was a key **propoonent** of the idea from way back, Somasegar confirmed. Heh
You probably want to look into scaffolding, where you generate views for your EF entities. Point here is, you can use scaffolding to "auto create" the basic list, create, edit, etc - mvc views and then fiddle/fine tune them. Look up "Creating a Student Controller and Views" on this page: http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application On side note - if you are familiar with Web Forms, you might want to reconsider if you should use that technology instead if you are familiar with it. If time is not issue (=you have time to learn as you go), then go for it. 
This operator will not be part of .NET, as the framework has nothing to do with it. It is simply syntactic sugar and will be part of C#6.
Can we just call WebForms terrible? Because WebForms is terrible. I can't stress this enough- WebForms is everything wrong with Microsoft's approach to web development *and* client-side development all in one platform.
Well, the web was never designed for dynamic documents, so congratulations, you're technically correct. That's the best kind of correct. .NET's implementation of MVC, however, doesn't depend on crudding up the client with things like ViewState and the hideous Ajax.NET scripts, which gives it a huge leg up over WebForms. Also, since you can use it to expose methods as HTTP end-points, all of your application behavior is accessible via standard web protocols without any heavy duty abstractions in the way.
Webforms works. It's easy to write. Easy to maintain. There are many reasons to like MVC but none of them are "it's not webforms". The right tool for the right job. MVC is not for every project.
&gt; Webforms works. It's easy to write. Easy to maintain. The first point is arguably true. The latter two, however, are simply *wrong*. WebForms is too abstracted from the guts of HTML, the "control" model it uses to represent UI widgets is, as a result, confusing and unpredictable. Then you run into the complexities of server vs. HTML controls. And let's not even start on its data-binding model, or the event-driven programming model for a situation that isn't event driven *at all*. Or the way it generates element IDs. WebForms is the wrong tool for every job. It's a case of Microsoft doing things differently just for the sake of doing things differently- at the same time they were cementing the .NET Framework, Struts was cementing MVC for the Java platform. For all that Microsoft copied Java to make C#, they strangely refused to copy that. Instead, they insisted on trying to make web programming like VB6 programming with an event-loop implemented over HTTP. Further, for all the warts on .NET's MVC implementation, the underlying pattern *is* the right tool for any UI project. Even if you're using Web Forms, you *should* be using an MVC pattern to govern your UI (something that Web Forms makes more difficult than it should be, because Web Forms *hates* object oriented programming).
My bad.
Nothing special, just an ODBC driver. That's what was in place when I came aboard though, so there may be a better option out there.
It changes the order in which class resolution happens. Putting them inside is a tiny bit safer. http://stackoverflow.com/questions/125319/should-usings-be-inside-or-outside-the-namespace
I've built hundreds of webforms sites, none of them use viewstate, or the Ajax scripts. 
You don't have to use them, but that doesn't change the fact that they're products of horrible design decisions. Also, if you're not using ViewState, then you're likely doing something marginally wrong- because there are places where it's the *correct* solution to use, especially if you have any concerns at all about data integrity. It's a product of terrible design decisions, but it shouldn't be entirely eschewed. Ajax.Net is, on the other hand, an abomination that should be stricken from the records of history and spoken of only by its dark cultists, the squamous folk with the "Innsmouth Look". The normal run of man should shudder to even hear the words, and in their minds eye they hear hideous voices calling out- "Teke-Li-Li! Ia! Ia! Ajax.net ftaghn!"
Glad I could help :) Let me know if you have any other questions.
You said I was trying to create window contents that have constant dimensions, by using the `StackPanel` I'm making them dynamic or there is another way ? By the way `DockPanel` and `StackPanel` are great.
This is the main problem with webforms. People have no idea how to use it and start foaming at the mouth. It has a bit of a learning curve, and if you don't take the time to understand everything under the hood you'll get confused and angry. You're a perfect example of this. Almost everything you said show a lack of understanding of webforms. I personally prefer MVC to webforms, but I've used both enough to know that they are different tools for different jobs. &gt;WebForms is too abstracted from the guts of HTML, the "control" model it uses to represent UI widgets is, as a result, confusing and unpredictable Yeah, that's the point. It does a lot of the work for you. It's not confusing or unpredictable at all. It only becomes unstable if you try to change the inner workings without knowing what you're doing. &gt;Or the way it generates element IDs. You can set the id to static with a simple property. &gt;WebForms is the wrong tool for every job. Nope &gt;you should be using an MVC pattern to govern your UI (something that Web Forms makes more difficult than it should be, because Web Forms hates object oriented programming). wat? Webforms hates oop? Are you kidding? Using EF, you can bind a gridview to objects and have all the scaffolding done for you. Including adding, deleting, editing, sorting, and pagination. Literally with no code behind. Just using EF and servercontrols. Do you know why? Because webforms LOVE OOP. 
Now, I admit to being a bit hyperbolic in my hate- it's not as bad as I'm making it out to be. However: &gt; Yeah, that's the point Getting too abstracted from the presentational data structure is *bad*. It shouldn't be the point. HTML is already massively abstract. We don't need another layer on top of that. &gt; You can set the id to static with a simple property. Not on repeated controls. You can have *some* say in what the ID was, but by the time they started giving you decent control of that in WebForms, I had run away to MVC. &gt; wat? Yay, you've described the same databinding that you could do all the way back in VB3. Which gets back to my point- WebForms is the VB of the Internet. It's great when you're working within the simple path the tool expects, like any scaffolding tool. But in any effort of notable complexity, it starts to break down. That's the underlying problem with any overly abstract scaffolding tool- it makes easy problems *super* easy- but hard problems become increasingly painful in proportion. But still, WebForms is not well-designed OOP. The very act of dropping a datasource into your WebForms introduces coupling- there's now a strong link between your presentation layer and your persistence model. Even when you use an ObjectDatasource, you've still got a strong link between your model objects and your presentation objects. You can't do something like an MVVM design easily in WebForms, and wiring your application atop a service-oriented architecture is painful, and I say this from experience. API-driven applications are easier to implement, easier to support, *way* easier to test. MVC makes it easy to build API-driven applications, with razor (heh) thin views to support the presentation. 
Set a margin to the outermost container and then set the window's sizetocontent = true
&gt;You can't do something like an MVVM design easily in WebForms, and wiring your application atop a service-oriented architecture is painful, and I say this from experience. Of course you can. It's super easy. You're not required to use server controls by any means. And Pagemethods makes api-driven applications super super easy. I've built several webform applications on top of a service-orientated architecture using knockout.js and pagemethods. Doing that really isn't too different from MVC. Of course, for that type of project, I would recommend MVC over webforms hands down. Unless you're working inside of a large webforms project and you need to add a few pages that are api-driven. Which is what my experience was. 
I do admit that I haven't kept up with WebForms. Way I understand it, it's basically a subset of MVC anymore. It just strikes me as too little, too late. 
Yep. Generated code is nice when it works. If it doesn't, then it can be a PITA. I've built a few apps with it. Both HTML and Silverlight. Other than a few broken projects and having to rollback, I still enjoy it.
This. A MacBook makes a fine Windows machine.
Ahh okay, thank you. I agree that one is just asking for problems if they create classes with the same name as BCL ones. Especially if it's likely that they will be used together.
I just think that the high level of abstraction causes a lot of confusion, and turns a lot of people off. It's meant to be more user friendly, but that easily gets lost when you start trying different things. There are things in webforms that are better and things in MVC that are better. Overall, I would use MVC over webforms, but its' up to the developer to pick the right tool for the job.
&gt; it's basically just MVC with a crappy UI design tool now You really couldn't be more wrong with this.
1. Troubleshooting is a bitch. There are ways to troubleshoot, such as using trace.axd, and you can VS to the process for some things, but there are others that have you completely befuddled. 2. It's good for what it's good at: slapping an interface on a database. If you try to go past that, it's not really all that flexible. You can gain a lot of flexibility by implementing a WCF service, but at that point, you've lost the "turnkey" aspect. 3. Its implementing technology is Silverlight, which is deprecated. We can hope that in the future, they may expand the HTML5 implementing technology, but we shall see. 4. It's not that fast. Between Silverlight and all the server callbacks required, the interfaces just don't seem "snappy". That's perfectly fine for some applications, but weigh it in your decision to use it. I definitely wouldn't use it in anything public. That being said, for some applications, it makes sense.
Quick, what's the event-lifecycle of an HTTP request. Oh, that's right, events have nothing to do with HTTP. I keep coming back to this because it's one of my biggest annoyances with WebForms: events suck for server-side web programming.
You are the only one talking about events. Both Webforms and MVC are server models. Nothing to do with client-side events. They are both used by the server to create responses to requests via HTTP. Events have nothing to do with either of them. It's absolutely bizarre to me that you're criticising a server model by talking about client side events. 
&gt; Events have nothing to do with either of them. The server side programming model of WebForms is explicitly event driven. I am not talking about client side events at all. When you click a button on a WebForm, the browser makes an HTTP request which triggers an event chain on the server- Init, Load, PreRender, etc., including the button event.
&gt; I am not talking about client side events at all. When you click a button on a WebForm ... You are talking about a HTTP Post. You just don't seem to realise it ... When you click a button on a webform you are simply submitting a completely standard HTML form and issuing a completely normal HTTP post. Just like you do in any MVC (or other) web application. 
This is getting boring and embarrassing now. I like webforms. I like MVC. Being the cleanest, most elegant, most efficient solution does not make MVC the best. 
&gt; Being the cleanest, most elegant, most efficient solution does not make MVC the best. …
thx i've tried on stackoverflow and everysite i know cause it was vip task but i solved it by myself so thx and sorry for any trouble :-) web forms btw
&gt;The very act of dropping a datasource into your WebForms introduces coupling- there's now a strong link between your presentation layer and your persistence model. Same thing happens if you use HtmHelpers on your views.
No, what's missing was "easiest", which also applies to MVC, at least for anything non-trivial (and honestly, for a lot of trivial things, too, with scaffolds).
Not really. In your view, you're strongly bound to the Model object. The HtmlHelpers are just that- helpers to streamline certain bits of HTML generation. The View has no awareness or understanding of where the Model comes from- that's the Controller's job. You can pass the View a lazy-evaluated queryable, and voila- simple, elegant data-binding without any leakage between the layers.
Now you're really showing your hand. I'm gonna guess you have around 3 years of experience in 1, maybe 2 companies. Most of your work is MVC but you have to maintain some other stuff that uses WebForms and it frustrates you because you can't see why people would ever think it was a good idea. Close? 
Huh, how would You do That? O.o
&gt; Close? Not even. I've been using WebForms since 1.1. By 2.0, I had an initial "wait, this is awesome!" experience (.NET 1.1 had a lot of not-good elements to it). Then I improved as a programmer, and realized that no, actually, it wasn't that good. Back around... 2011, I'd say, I started a big push at my company to abandon WebForms for new development, and after some initial "OMG THIS IS DIFFERENT AND WEIRD" not a single co-worker wants to return to WebForms. That's also why I'm out of date- because none of us have any interest in going back to WebForms, because we prefer the simplicity of MVC. If anything, my hate for WebForms arises from too many years of experience using VB6, because WebForms is so close to the same style of programming conventions, and VB6 is awful. ASP.NET MVC is not the best possible implementation of the MVC pattern, but because it *is* an implementation of the MVC pattern, you can build your UIs using the same conventions you'd use in any other programming environment. WebForms is a Galapagos situation- it's a little island populated with weird species and there's nothing out there like it. *And there's a reason why there's nothing else like it*. There's a reason why every other web programming platform on Earth has migrated to an MVC-style approach. There's a reason every client-side programming platform has been an MVC-style system since forever.
I know Web Forms/Pages very well, which we have to go with right now with time constraints. My thought that MVC would help with "future proofing," but that's probably the wrong idea. It's just not the way the web moves. By the reading and trends 5 years ago, you would think everything would be in Ruby today, and that's not the case. In the end it came down to a learning curve. If it were just me, I'd probably just take the plunge, but I have other team members who aren't willing too. I don't think anything beats Web Forms for RAD - even though I've heard the same about MVC. That said, I have about 8 years of code snippets that I can use, so I can move pretty fast. I really only wanted the cleaner output of HTML, which makes using thing like JQuery so much easier. Web Forms love to give me fits even when changing the ClientID to static.
Yeah, StackPanel by default will stretch its children in one dimension and stack in the other. The size of the StackPanel itself is dependent on its parent, but you can still specify constant dimensions for one, if you need it. Then you'd position it by specifying a margin and which side to align to.
I'm following along with the example in [http://www.codeproject.com/Tips/548375/Simple-Tree-Structure-Menu-in-MVC-with-Razor-Eng](http://www.codeproject.com/Tips/548375/Simple-Tree-Structure-Menu-in-MVC-with-Razor-Eng) After creating the two classes it states to create the controller and for Data Context Class it has the baffling "and following the Instructions to have one in place". When I look at the options there is one for Menu (which would seem the obvious choice) but then I get the following error message: Unsupported context type. FYI, I did build the code prior to attempting to create the controller. Thanks, 
Honestly, I would avoid the Data Context stuff and create a clean separation of concerns (i.e. no data logic in the controller). I usually end up with a pattern like : View -&gt; Controller -&gt; Services -&gt; Repository(i.e. EF)
I'm still pretty new to MVC plus I'm following along with an example. But regarding Services, what do you mean by that? Thanks,
As stated earlier, you should avoid using directly data logic within your controller. Problem is, most examples you will find on the internet will use heavilly some T4 templates which directly build controller by scaffolding on the data model. Which is dirty. Poilmo suggests to add an intermediary layer, and he is 100% right.
I'm still learning the ropes as well, so anyone please chime in, but in my prototypes I've stuck ViewModel classes that interact with repositories, build and populate model objects and can be passed from one view to another by the controllers. This has worked well for me but I'm unsure how well it abides by the "separation of concerns" principal. 
will do later today!
I have always had issues with strongly named assemblies. Log4Net being one of them. I don't strongly name any of my assemblies.
Click Once is the only reason we use it. It's a pain in the ass that doesn't offer us any tangible benefits other making Click Once happy. Every once in a while it gets all fucked up in source control for no obvious reason and we waste a bunch of time making it work again.
What database are you using and where are you hosting? If you are using SQL Server (or another commercial product), yes, you will need a license. The specific costs depends on your environment. For Visual Studio, you do not need a license to develop or deploy software. There is limitations in terms of the features available but there are no limitations on what you can do with the code you produce. As for your questions regarding scaling, its hard to answer without knowing more about your app and your traffic but typically speaking, you don't want to optimize prematurely (outside of the basics like caching, minification, bundling, etc.) since the gains you think you may get may not be the bottlenecks in your application. The best thing to do is measure and instrument your app and see where the performance issues are. Use tools like [MiniProfiler](http://miniprofiler.com/), [Glimpse](http://getglimpse.com/), etc. to see where the biggest performance hits are and then work on optimizing those.
If you were to look at the chain this guy has: View = UI/Display Controller = Data and Interactions that the display has Services = The code implementing those interactions. This is pretty much the "API" tier for your application. It represents what the application actually does. An action on the controller might call more than one service/method, but will just as often be a 1-to-1 mapping. Repository = Persisting the state of the services. You can thing of "Service" as how you plug into the "Model" aspect of MVC. It's not something that often gets shown in demos, however, because they skip that tier and just directly access a repository, for the sake of brevity, or (more annoyingly, because it's almost always a false promise) to demonstrate how "fast and simple" some new technology is. 
That was... unexpectedly soon.
So... has anybody ever upgraded a major enterprise projects from a previous version of .NET to a newer one? Looking at upgrading from 4.0 to 4.5.2 and, as a QC person, wanted to know of some of the things we may need to consider when doing this. I figure we may obviously get some broken builds that we can work our way through, but I'm more concerned about the stuff that isn't so apparent at first. Are there any strategies people have used when upgrading .NET frameworks and testing that their applications still work? 
I've migrated a large-ish app (250kloc, running over 30 servers) from .net 2 to .net 4.5.1 over time, and the most pain I've had was webforms related. Most everything else just worked seamlessly. It's been remarkably easy.
I can't really speak on your hardware need's but if you are concerned about licensing, you may be a perfect candidate for Microsoft's [BizSpark](http://www.microsoft.com/bizspark/) program. If you are unfamiliar with the program, it is basically Microsoft's way of giving your start-up access to pretty much all tools and licenses you will need (IE. Visual Studio, MSSQL, Windows). I don't know if the rules have changed but if I am remembering correctly, I think they will give you full access to the program and an "Ultimate" MSDN subscription, for three years or a revenue cap set by them(I think 3 million). 
No love for WPF.
There's no support for XP or Server 2003 in .NET 4.5, so keep that in mind. 
The problem we have is that Common.Logging was upgraded to EntLib 6.0 and the nuget package for Common.Logging includes a dependency on EntLib 6.0. So when any of the teams ref that package Nuget comes along and brings down the EntLib 6.0. But many of the teams have projects that are dependent on EntLib 2.0 (For what ever god known reason..). So we have ProjA refs Common.Logging and ProjB refs EntLib 2.0. All is good on the dev box. But now when we hit the build server that runs MSBUILD both projects are compiled into a global_bin directory. Which ever project was compiled last brings along the EntLib reference. Life is good until you deploy and get a runtime exception about version mismatch. 
I would be interested in any "lessons learned" from this. We are about to make the move from 4 to latest with a large (500k loc) enterprise app. 
I assume by "In your view," you mean "In an aspx page." I like both frameworks. Each have their place. I'm just saying in MVC, things aren't always as cleanly separated as we'd like to think. No matter how you want to word it, if you use HtmlHelpers, a Razor view is closely coupled to the model. If you change the name or type of one of your models' properties/members, you break the view (unless you change the helpers too).
4=&gt;4.5 changed the behaviour of the TPL and unhandled exceptions, that's the most obvious thing. But it became more permissive. Not less.
By view, I mean "the component responsible for rendering the output". And a view *should* be strongly coupled to the model! That's the point. A view displays a model. The reason views can be strongly typed is because a view is bound to a model. But it shouldn't be bound to a data source- it should know where the model is coming from. The power of EF and lazy queryables is that you can hide those details from the view. 
Ya that's done. But it doesn't solve the MSBuild using a global_bin for all the .dlls which causes entlib6.dll to overwrite the entlib2.dll 
OK, then you're calling the "code behind" *and* the aspx page, collectively, the View, since they're both responsible for rendering the output. Others consider the "code behind" a fat controller, and the aspx page itself the View. In that sense, the aspx markup doesn't need to know anything about the model, and the controller (the code-behind) gets closely coupled to the view. It's really up to the skill of the developer to maintain the separation of layers in Web forms. In fact, it's not at all difficult to muddle the separation of layers in MVC. MVC does make that harder though, which is a good thing.
No. Just no.
I think the term you're looking for is MVVM, assuming you're populating the base model using EF and not just using EF as the base model directly in the controller. Makes unit testing a MVC app a heck of a lot more fun too :-)
synced or imported? 2 different beasts for import just create a method in one of the controllers that will generate a CSV for download and the client can import the CSV into Outlook. http://stackoverflow.com/questions/4847596/what-are-the-csv-headers-in-outlook-contact-export That may need to be updated for 2013 As far as sync, you need to have a listener on the server and client, and put into a contact add workflow on both that when a contact is added it gets pushed to server/client. Of course that the super basic overview, you need to handle edge cases (network errors, etc), errors, and a bunch of other things. Not to mention you need to build an Outlook extension. Resources are available, mainly check MSDN Office Developer page
At least is doesn't have the dpi issues winforms was facing.
[But of course](http://msdn.microsoft.com/en-us/library/office/ee693002(v=exchg.80\).aspx).
I read the Octokit thread a while ago. I thought it was one of the dumbest arguments ever for the most part because it's an easy fix. Basically I agree with Phil Haack for the most part. The CLR team will hopefully, one day, come up with something better but for now it's the only game in town. Plus tons of items (99% of which are from Microsoft) require that you sign them for them to be compatible with their various apps, then there is the GAC, etc. So if you're doing an OSS library that might be used in any of those situations you sign the assembly, freeze the version number on the library itself, then just update the version in the NuGet file. I've been doing that for years now. No redirect issues, no issues with people who need a signed assembly, yay you're done.
Usually your ISP will have an SMTP server you can use. If for some reason it doesn't, you can install an SMTP server locally (remember to add 127.0.0.1 as an allowed relay) via Add/Remove Windows Components. Use System.Net.SmtpClient to send mails.
Take a look at the WebMail helper or if that doesn't work then the System.Net.Mail namespace. However, this isn't really the place for questions that typing "email asp.net" into Google would solve.
Tip : reverse the comparison when one property is never null and the other one might be. Also use .Equals with OrdinalIgnoreCase instead of doing .ToLower. "google".Equals(Request.QueryString["source"], StringComparison.OrdinalIgnoreCase) Simple way to eliminate the null reference exception. Edit : Also, instead of using Request.QueryString["..."].IsEmpty() use !string.IsNullOrEmpty(Request.QueryString["source"])
Asuming you are using Windows Server 2008 you need to install the IIS 6.0 Manager feature ontop of the normal IIS role. There you can setup a SMTP server (if you need help with that there are tons of tutorials on the internet). Make sure to correctly setup your firewall to block access to the SMTP port! This is especially usefull if you don't want to bother with credentials. Then just use System.Net.Mail.SmtpClient. MailMessage M = new MailMessage ("sender@test.com", "recipient@test.com", "Subject", "Message"); SmtpClient S = new SmtpClient("localhost"); S.Credentials = CredentialCache.DefaultNetworkCredentials; S.Send(M); This will usually do.
Depends. You could do a find and replace, use a global style with a setter, ...
It's an XML file, so you could build a program to open them, XQuery the nodes you want edited, edit them, and save the changes. Depends how much work it'd be to do it manually.
Isn't that only for Exchange Server though? 
I never considered that Outlook could be used outside the context of Exchange Server. Sorry, I've got intranet/LOB blinders on.
A good starting point might be something that [tails](https://en.wikipedia.org/wiki/Tail_\(Unix\)) the IIS log file. That would give you Users, IPs &amp; last hit location plus more. 
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Tail (Unix)**](https://en.wikipedia.org/wiki/Tail%20(Unix\)): [](#sfw) --- &gt; &gt;__tail__ is a [program](https://en.wikipedia.org/wiki/Computer_program) on [Unix](https://en.wikipedia.org/wiki/Unix) and [Unix-like](https://en.wikipedia.org/wiki/Unix-like) systems used to display the __tail__ end of a text [file](https://en.wikipedia.org/wiki/Computer_file) or [piped](https://en.wikipedia.org/wiki/Pipe_(computing\)) data. &gt; --- ^Interesting: [^Head ^\(Unix)](https://en.wikipedia.org/wiki/Head_\(Unix\)) ^| [^Sed](https://en.wikipedia.org/wiki/Sed) ^| [^Filter ^\(Unix)](https://en.wikipedia.org/wiki/Filter_\(Unix\)) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chcvybw) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chcvybw)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
It's a super-minor update that only contains a few fixes, there's no reason they'd add features to WPF...
Code project examples aren't always the most complete. If you want to see a complete end to end example you could try something on the microsoft site like [this one](http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application). This explains the data context as well as how to use entity framework. As others in this thread have indicated the demos aren't always practical for real world applications, but they're still a good starting point. Learn the basics and then worry about things like enterprise application design patterns.
You could use a build system that bitbucket invokes that would build your site deploy to iis. Currently we use appveyor to do this for us and it's pretty quick to get set up.
We do the same strategy with nuget as well.
Take a look at [elmah](https://code.google.com/p/elmah/) for a simple error logging module that requires very little configuration. You can also log your own custom events/errors if you want to capture a little bit more. For a snapshot of current users, remember that the web is stateless. If a user has just requested a page, they might request another one in a few seconds... or never again. So the "who's online" question is a little bit hard to answer. Based on your expected user activity, you can probably afford to write, each request, into a database table, and then SELECT from that table where LastActivity is greater than 5 minutes ago. You can do that in your global.asax "beginrequest" event. Bear in mind that if you get a lot of user activity, this is not a scalable approach.
I need to learn more about it but I really think that this can replace WCF for all my needs.
I've been playing around with this all afternoon and it looks like a great solution. Thank you!
It is different that Protocol Buffers in that it carries with it the schema. This allows for scenarios that Protocol Buffers cannot support.
Indeed. Learn to love DockPanels and StackPanels they really can do a lot of the hard work for you with the right use of DockPanel.Dock and LastChildFill - I'd recommend reading [this layout tutorial](http://www.codeproject.com/Articles/140613/WPF-Tutorial-Layout-Panels-Containers-Layout-Trans). Helped me a lot when I was starting. WPF layout is all about choosing the right panel for the job, setting margins where you need them (and the occasional dimension) and letting the WPF default fills, etc do the hard work for you.
I can't help but wonder what you are trying to actually accomplish. You could do it in code-behind and sniff for every qualified tag and add it systematically. You could do a giant find/replace and do it that way. You could use an app-level style (but that might be problematic). The reality is, I can't imagine what you are trying to do here. But Visual Studio has lots of stuff including regex find/replace if you have to do it. Best of luck
Now go to /r/linux and submit the same link with the title "embrace, extend and extinguish".
Thanks, it's great.
You talk about the JSON schema, but JSON doesn't have a schema. So what is distributed? Pre-determined layouts?
If you want a simple solution to get it out of the way, you could always add the detection code to global.asax under Application_BeginRequest. Make sure you comment the code so other developers understand why it needs to be there and what it relates to.
A Pre-determined layout is a schema...
In the order of processing, that will come before the view calls for the cookie to update the &lt;a href=? EDIT: I tried it and the problem is completely identical. The cookie is properly set, but not before the View finishes rendering. I'm getting solidly into duct tape territory to get this Frankenstein's monster website working, but I'm considering using some jQuery to grab the cookie and suffix it to each URL, because this is getting crazy.
Really missed an opportunity to give it a name like **Seashell**.
Unfortunately I'm working on this project at work so I'm cramming in learning the basics and worrying at the same time. Also, it's hard (at least at my level of google-fu) to query answers that are basic only vs enterprise level! Every question I have seems to have multiple answers (plus google doesn't seem to do a good job of searching by versions (e.g., MVC, EF) so I have to spend my time trying to figure out which example will actually work for me.
I've built sprocs and then function imports to handle data access but it's incredibly hard to find information (apart from the very most basic instances) about using them. I don't know if it's just a lack of decent documentation out there or my lack of knowledge of MVC/EF that's causing me to not be able to search for the correct terms.
+1 for XtraReports
i might suggest you read this book ? it has been written by the main contributors of the asp.net mvc project within microsoft it's a quick read (a few hours ? 4-5) http://www.amazon.com/Professional-ASP-NET-MVC-Jon-Galloway/dp/1118794753/ref=sr_1_13?ie=UTF8&amp;qid=1399652020&amp;sr=8-13&amp;keywords=mvc+5 
Oh come on guys, that was funny. Plus it's the first correct use of the term I've heard in years. Microsoft loves Hadoop and they always extend that which they love.
In a file?
If i understand your question correctly you'd want to place "ModelBinders.Binders.Add(typeof(Guid), new GuidModelBinder());" in the Application_Start() method found in the global.asax.
You're close. 
No. Place it where you like.
Thanks!
But that's precisely how it reads out, except it's easily google-able.
Was the id not in the original view model? You could always use ViewBag or Viewdata if appropriate 
Why do you need a special binder just to be able to pass a guid to an action? In MVC5 atleast, you can do this: public ActionResult Details(Guid id) { return View(id); } in routeconfig: routes.MapRoute( name: "Details", url: "details/{id:guid}", defaults: new { controller = "Home", action = "Details", id = UrlParameter.Optional } ); Notice the {id:guid} route constraint. This might also be useful for you -&gt; http://blogs.msdn.com/b/webdev/archive/2013/10/17/attribute-routing-in-asp-net-mvc-5.aspx 
Yes, the ID was in the original view model but only as part of the model, not the value itself. The view then uses this syntax: @Html.DisplayFor(model =&gt; model.PeriodID) to get all the fields that I want to display. It now seems that for me to get all the fields I'd have to do an extra query which would seem to defeat the purpose of EF. 
On the index view the Details action is called by @Html.ActionLink("Details", "Details", new { id=item.PeriodID }) Should I not be passing an id (the Guid) and rather the item itself?
Been using http://dotnetfiddle.net for this purpose for a few months now.
I would change it back to View(tbl_spm_periods) Ensure the EF entity has the ID populated (you could always take it from the parameter) In the view you should be able to do Model.ID to populate what you need. Just be sure to validate your ID on any post actions to ensure it has not been changed!
Thanks. Will try this. I'm sure I could have figured something out but I'm trying to stay within the convention of the MVC and EF frameworks ... otherwise what is the point of using them.
Just jumped on a laptop so I can type better. What I would do is: public ActionResult Details(Guid id) { tbl_spm_periods tbl_spm_periods = db.tbl_spm_periods.Find(id); // At this point tbl_spm_periods *should* have its PeriodID populated from EF, if not you could do tbl_spm_periods.PeriodID = id for example if (tbl_spm_periods == null) { return HttpNotFound(); } return View(tbl_spm_periods); } You can then use Model.PeriodID in the view where you need it. Hope this helps
&gt;I LOVE the clean HTML that MVC puts out, and I mostly get the concepts, but I need a great example to reverse engineer, make small changes to and see how things "tick." I think that's how we all have learned some things. http://ddmvc4.codeplex.com/ http://www.asp.net/mvc/tutorials/mvc-music-store 
Perfect! Thanks.
There is also [ScriptCS](http://scriptcs.net/)
Thanks!
Reminds me of this: https://play.google.com/store/apps/details?id=animaonline.cshell
If it relies on Mono, what makes this better than the existing tool that ships with Mono?
I'm not 100% sure, but I don't think cookies are available via the Request object during the same request in which they are added to the Response object. If this is the case, you can fix this by doing a check for the cookie and then falling back to the query string parameter if the cookie doesn't exist in the request.
Do you mean at the level where the tags are being drawn? I tried this in `Baz.cshtml`. I'm going to write in pseudo-code to be brief. for i in listings { /* cookie detection and creation code here */ &lt;a href="cookie.Value"&gt;text&lt;/a&gt; }
I guess. I don't know the rest of your code. Instead of binding directly to the cookie value, create a variable that you set from the cookie if it is available or the query string value of it is not. I'd write some code for you, but I'm on my phone and not feeling well.
I hadn't considered asking the URL param directly first and then the cookie second! Man, I feel like that's painfully obvious now, but I just needed a second set of eyes. (I work on this project solo, and sometimes obvious stuff slips past me.) I'll post a reply on Monday and try your approach. I hope you feel better! Thank you so much. 
Except you'll need to google c# shell to keep from getting c shell (csh)results.
If you're already on Windows (and chances are, OP is), you can use Powershell: get-content -tail 10 -wait
Anyone know any other scripting IDE's other than Linqpad and ScriptCS?
I do this at work with my personal license since my job wouldn't pay for it when i first started there, they are going to be soon tho =) as far as i know you are allowed to run on 2 machines at once 
Except there's already a projected named cshell that's been around for a couple decades. seashell would be original.
I just use Linqpad[http://www.linqpad.net] :)
I finally got around to trying out CrossRider and the first thing Malwarebytes did when I downloaded my test plugin was flag it and quarantine it. :(
Same. Nuget is very easy to self host and so very useful. You'll want to use package restore for git projects
That's so 2011. 
If you're using EF, you're already screwed.
Put the context in a base cales??! Well there's all my unit testing out of the window... One of the points of UnitOfWork is that I can mock the IUnitOfWork interface in my unit tests so I can cover more code without having to 'unit test the database'.
Perhaps you'd like to explain why rather than just making a worthless empty comment?
I have used Oracle SQL Developer since 2007, when it was shit. It's now pretty good. I don't know how it compares with Toad, because a. I never liked it and b. I refuse to even evaluate software where they won't tell you $$$. It's still free.
In what way? It's really very little work. The Repository and Unit of Work classes are very few lines of code and very simple / easy to maintain. The ViewModel classes just expect an IUnitOfWork - which when the program is running, is a concrete UnitOfWork injected by the DI kernel. During Unit Testing, it is a mock of the IUnitOfWork interface that provides the ViewModel with the minimum amount of test data needed to verify whatever the test is verifying. Pretty simple, works perfectly.
Opinions are like assholes everyone has one and nobody wants to look at the other guy's.
What I don't like about this is that if you have hundreds of different types of queries, you need a class for each one and it balloons out of control.
I think I've finally (nearly; as close as possible) perfected my own uow/repo implementation recently, but one thing I don't understand about EF (because I haven't used it extensively in the last year or so) is an error being thrown when I call "`DbContext.Set&lt;T&gt;`" that says something like "this entity is not part of the context."
In 2014, this is still an issue. What is your solution? Microservices and eventual consistency still make sense for more solutions than people realize (especially wrt async).
Do you use partial classes to add new DbSet properties or are you talking about Code First?
I didn't know you could have variable names called where. I alway use predicate.
&gt; He didn't mention anything about making sure you execute queires before they leave the repository These days, you should try to return using Async versions for your EF calls (Task&lt;T&gt;).
EF has its downs, for sure. I hate hacking the XML files to fix Microsoft bugs -- its a ball of mud sometimes. Unfortunately, its the industry standard (for now), so I just grin and bare it and make things happen.
I forgive you.
Curious that no one mentioned EPiServer, one of the top eCommerce-oriented CMS made in .NET.
That seems like a waste. If the purpose of the code is to talk to the database, that's its "unit of work". Mocking out the database eliminates the usefulness of the code and thus the test.
But I like making my data upload functions take a hundred times longer. Why upload 13,000 records in 0.2 sec when you can save 10-15 lines of code and upload it in 20 seconds?
I agree 100% with the first half and not at all with the second half. The solution to the repositories is to go ahead and make them atomic operations. You can do this without resorting to countless command objects. And ideally my repository is just a thin wrapper over some stored procs. It may be one or a bundle in a transaction, but either way there shouldn't be enough code to justify testing in isolation from the database.
I was taught the impedance mismatch is basically set theory vs. graph theory, although there are[many more reasons](http://en.wikipedia.org/wiki/Object-relational_impedance_mismatch). ORM is ok for CRUD stuff as the scaffolding is automated, Active Record style, saving time doing the mundane typing. I find the best way to win this problem is not to play. Moving away from databases for integration, using them instead for event storage, lets me use different architectures instead of the crappy layered architectures that has been drilled into me over the years. Nevertheless, what I want to do and what my boss wants me to do often differ and I just grin and bare it.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Object-relational impedance mismatch**](https://en.wikipedia.org/wiki/Object-relational%20impedance%20mismatch): [](#sfw) --- &gt; &gt;The __object-relational impedance mismatch__ is a set of conceptual and technical difficulties that are often encountered when a [relational database management system](https://en.wikipedia.org/wiki/Relational_database_management_system) (RDBMS) is being used by a program written in an [object-oriented](https://en.wikipedia.org/wiki/Object-oriented) [programming language](https://en.wikipedia.org/wiki/Programming_language) or style; particularly when objects or class definitions are mapped in a straightforward way to database tables or relational schema. &gt;The term *object-relational impedance mismatch* is derived from the [electrical engineering](https://en.wikipedia.org/wiki/Electrical_engineering) term *[impedance matching](https://en.wikipedia.org/wiki/Impedance_matching)*. &gt; --- ^Interesting: [^Object-relational ^mapping](https://en.wikipedia.org/wiki/Object-relational_mapping) ^| [^Relational ^database ^management ^system](https://en.wikipedia.org/wiki/Relational_database_management_system) ^| [^Java ^Object ^Oriented ^Querying](https://en.wikipedia.org/wiki/Java_Object_Oriented_Querying) ^| [^Object-oriented ^programming](https://en.wikipedia.org/wiki/Object-oriented_programming) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+chf9jut) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+chf9jut)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I understand using Task for tracking the progress and result of an asynchronous operation. I don't see where command objects fit in.
In their example, separating the INSERT/UPDATE/DELETE "commands" (behavior driven) features from the SELECT "queries" (data driven) features helps to simplify your logic. Since behavior is but sequences of states, it requires a UnitOfWork, while simple queries do not. That said, you can pass around the command object, which contains its own state, inside the Task Result object, so it can more easily bounce between different concerns or services atomically.
It's fine for CRUD, but the problem is that I've never had a non-trivial (which is to say, not a tech demo for ORM) app that was just simple CRUD. Introducing the tech early on is like starting an application in Access. I'm also a fan of the Event Store pattern (moreover, I'd say I'm enamored with it). It's a fantastic idea for some domains, and I've implemented it and used it in production on several projects. For others, the benefits are outweighed by the drawbacks. And, fundamentally, it's reinventing the wheel. Which is to say, any modern RDBMS is a transaction log that also stores the current state so it can easily be queried. To an extent, saying that you don't want to be locked into that technology is like saying "I'd rather use a bicycle, because I don't want to be locked into a car... of course, I'll need to add a few wheels to the bike for stability, and it'll need an engine (I'll have to build that), and it should have a nice enclosure to protect from the elements, and of course it should have some signals..." All of this because you don't want to commit to a certain make/model, or because you don't want the heated seats. I don't mean to direct this rant at you. It's just a general rant.
Man, I'd be willing to forgive the performance penalty. I'm very pragmatic about performance, which is to say: do it right first, optimize it when it's *necessary*. But, yeah, when you add on the terrible performance, it's just like "WHY ARE WE STILL ACTING LIKE THIS WAS A GOOD IDEA!?!?!"
I meant passing around both command and event objects. Commands are future tense and Events are past tense, of an action. Events trigger Commands. Different services can use the same command differently and respond to the same event differently. It is encapsulation with time sequencing as part of the vocabulary -- this makes undo/redo of Tasks possible, although those are beyond the scope of this article.
It sounds like you might be new to all of this... So, try DotNetNuke. It doesn't get much like love on reddit, but part of why is that it natively does a lot. There is an events extension that does the kind of announcements you're talking about and the content management pieces are very easy to train. 
Kentico CMS can do all of that and more and it's a joy to work with. It isn't cheap though.
I kinda sorta understand, but I'll have to revisit this idea on another day.
Well this is the trade off between integration and unit tests. I find integration tests are more thorough, but unit tests are faster and less fragile. Which are more useful overall though, I have no idea.
I know I'm being pedantic, but real integration testing occurs when you combine subsystems from separate teams. Just calling a database you full control from code you fully control doesn't have the sorts of challenges that real integration tests have.
Last time I checked Mono on Windows doesn't come with the tool you mention
You got me, I am new to all this (been doing code for desktop for 15 years web not so much). I have played around with ASP.NET MVC and like it a lot. Usually when I learn new things I find a project that I have personal interest in and do it. At this point I know what I want and am at the point of gathering tools and resources to get it done. I will look into DotNetNuke and see if it will serve my purpose. 
Don't even need that. IQueryable&lt;Entity&gt; GetAll(); And then perform your `Where` filters using LINQ (I can't see that method doing much else).
Don't like XML? Use Code First (with Fluent config). I write tons of repositories using CF and none of them require me to write a line of XML (save for putting a connection string in web.config).
I wish I could use Code First. EF6 even now supports porting database to Code First. Unfortunately, my work culture is very DBA centric. Maybe for my next job.
Tests that hit the database run substantially slower than those that are in memory. I use fake repositories (in memory) to check the basic stuff (did an object get added to the database etc) and real repositories against a test db for the complicated/tricky stuff (did the stored procedure update everything).
GetAll() is pretty much only used for retrieving an entire table that needs to be cached. E.g. Lookups. Where() is used everywhere else and saves 8 characters over GetAll&lt;xxx&gt;().Where(). Not a strong argument I know :)
0.2 seconds is noticeably slower when you are running a lot of tests. I'm not really interested in an argument over mocking databases. If it doesn't help you then don't do it. I find that it helps me for a number of reasons including, but not limited to, speed.
How different to the desktop version do you want the mobile version to be? (These days I just use a different CSS stylesheet on the desktop version of the site, and bingo, mobile version.)
I'm not sure if you're referring to one repository / solution, with one project that can supply different mobile / desktop views. Or one repository / solution that's home to multiple projects (the desktop / mobile project) which you then want to deploy to a seperate subdomain? It depends on your project architecture, but in my experience (one repo / solution -&gt; many projects) spinning up another site allows you to specify the name of the project you're trying to deploy (using the automatic git deploy is amazingly simple). So I have 2 sites - domainname.com and api.domainname.com which comes from one repository that contains a solution with all the shared code for each project. That means in the Azure config, all you have to do is provide an app setting called "Project" with the value of "\whatever\folder\structure-you-have\Project.csproj" and that is the project that will be deployed to that site. There's a dozen other benefits to using another site for something like this over a virtual directory, think scaling / usage stats etc (in my experience anyway) Hope that kinda helps?
Application\_BeginRequest _should_ fire before anything else.. BeginRequest is at the very start, it should get called way before the controller and the view. Edit : I think I understand your problem suddenly. You're working with cookies which gets passed by the client, so it won't be readable by your application until the next request. Instead, try populating some sort of collection on the request itself, either by ViewData or Request.Items or similar and do it on every request, regardless of the cookie. You can for instance make it read Request.Items unless there is a cookie present. At least I think this might be the problem.. 
The best thing about C# is the syntax makes it easy to work in Javascript and Java if the need arises. Don't get too attached to the language, get attached to the process and paradigms required to solve problems. Thats how I see it.
To add: It's not cool. Ruby was cool a while ago, it fell out of favor a bit. Now Python, Lisp, Haskell, JavaScript (or CoffeeScript, Typescript, Dart and generally node.js) and Go are the cool languages. In a year or two there'll probably be different (old and new) languages that are cool. In my experience there is way more hate for PHP than there is for C#. Also Java as C#'s evil stepmother gets quite some flak.
You're not backing up your claim that *new* developers hate DotNet. I think it is false. I think new developers don't *know* DotNet because they learn Java at college.
I agree the reason new developers don't know about the benefits of using DotNet is because they don't learn about it in college. Of course not every new developer is a "hater" but the majority would say they also don't see a reason why they should learn. They see Microsoft as a dying company.
I think part of it may be related to the way it is packaged. With most languages you will get a compiler and/or run time environment, go out and find an ide that you like, learn how to compile and run your applications and all is happy. With Microsoft solutions, often times they are presented in very much a hold-your-hand fashion. You download your choice of free ide (web developer, or studio or whatever) and it generates your solution, projects, and everything, builds and runs them. You are never forced to learn the actual things taking place. Disclaimer: I am amongst other things a .NET developer, and am not anti Microsoft. 
Yes, choosing your language and framework can be like choosing your favorite team. There's a lot of factors involved like experience, who's cool or not, and personal preference. And maybe using the word "hate" was a little exaggerated, but it does seem like DotNet is becoming the least favorite team.
Wouldn't you say having these things done for you one of the many benefits of DotNet?
I guess it can help a new developer get into the technology, but I feel it also hinders in the long term. It's kind of like too many trainer wheels on a kids bike, they never really learn how to ride the bike. The workings of things like the build process and dependency management is not really exposed at all. 
Well, almost every .Net programmer I know is convinced that programmes who dismiss .Net do so because the alternatives are free. That is simply not correct, we do so because the .Net ecosystem is constricting, both technically (Windows only) and culturally (everyone uses SQL Server and is completely ignorant of any alternatives). That doesn't mean that we hate Microsoft or .Net, in fact, C# is almost universally a well liked language and many of us would welcome a serious development &amp; deployment option for Linux.
As a C# developer I find SQL Server or any other relational DB almost never a right choice.
I agree 100%. When I say you aren't forces to learn... I mean from the Microsoft environment. When you jump to configuring build servers, from just working in the IDE, is when your lack of understanding of the build process becomes evident. If vs exposed some of the process and configuration a little more, that jump would be much less painful. 
I think this fact combined with the way a lot of fresh graduates have this absurdly wrong idea that they are now well informed about software development counts for a fair bit of it. The first job I took out of school was a .net job and there was no end to the shit I got from my friends about it who were all doing php and/or java. 
Well, lot's of developers don't really get to in-depth with their tools. They just build stuff that they get paid for. Also, the "new hotness" is also part of it...hacker news is literally killing me with stories about GO...which probably has 50 people using it, but hey, it's the "new hotness". 
You claim that xml files are not human readable? .sln and .csproj files have fully documented specifications. Just because you have not taken the time to learn about them does not make them hard.
I've met plenty of people who passionately hate .net/C#. Not one of them has actually used it.
You are uninformed. Look up the Mono project for cross platform .net. 
You misunderstand me, they're not hard to read, but they are nearly impossible to write (since they're designed to be easily read&amp;written by machines, not with humans as the prime consumers). For instance, there's several &lt;ItemGroup&gt; tags in csproj files. It's easy to see what each of them is by looking at them, but if you had to write one from scratch yourself: How many ItemGroup tags do you need? What do you put in each of them (References, File Paths, Content Paths, Service References). What is optional and what isn't? And so on. And if you compare this with java, where all you do is "javac someclass.java" to get the compiled file of that class, with no need for anything similar to a csproj file, you can see the difference between a compiler model that was meant to be used in batch scripts and simple text editors and stuff, whereas msbuild is pretty much dependent on visual studio to produce something. The point being that, while there is tooling "behind the scenes" in VS that you can use independently of VS, and that every seasoned .Net dev will have to use at some point in his career, it's not something that was designed with "using it without ever touching VS" in mind. I mean, the same goes for eclipse project files, but the difference is that they build on top of an independent system, instead of being standalone. That's not a bad thing, but to some people it is.
Windows is not as good of an environment when compared to Linux and OSX. Power shell just doesn't cut it. Visual Studio is very restricting and not even as close to as good as other tools out there. You can install resharper which makes it better but it's still doesn't compare. Nuget isn't as good as other package managers (although I here it's better than the last time used it). Don't get me wrong. I love the C# language but am disappointed with the tool set and other factors surrounding it. 
I think you're completely discounting the majority of people (outside of Windows) who are just in the *nix camp. Most web developers (again, outside of .NET) work on a Mac but host on Linux. They are fairly compatible platforms so things that generally work on the server will work fine on your laptop and vice versa. Windows isn't, so support is never as good. As far as C# is concerned, the majority of hate I've encountered towards it was just hate towards .NET in general. Some people got burned a long time ago by breaking changes and never got over it. It can be hard to trust Microsoft after some of the shit they've pulled in the past. I've never really encountered hate for the C# language itself though. It's a rock solid language that I can't see many people actively hating.
There's two kinds of programming languages, the ones that everybody hates and the ones that nobody uses. 
The obvious one: LINQ
Lots of complaints I've seen are from kids who still believe that Microsoft - and by extension the .net platform they produce - are evil monopolists who use their overwhelming market power to kill off competition. You know, they stuff they did in the 90's. Now, Microsoft are big open source and heterogeneous computing proponents, large parts of the framework and compilers are open source, and their development tools are, in my opinion, second to none. Of course, lots of the anti-MS brigade are serial language groupies, jumping from language to language based on nothing more than what's trendy: Ruby not the new hotness any more, let's use Clojure! Screw Haskell, I'm 0.2% more productive in Erlang now (after six months of learning the new platform). Clearly, I'm oversimplifying things - I'm a big proponent of right tool for the job and pragmatic enough to know that .net isn't a perfect fit for everything. But C# is such a *nice* language and Visual Studio a *nice* place to spend all day cranking out code that I'm willing to stay there most of the time. Plus, I'm old and relearning a new way to do the same job three times a year doesn't appeal any more. [edit for spelling]
Yes I recall the long and arduous task of figuring Java out after learning C# in college, what a feat!
If Microsoft made first-class .NET tools available for non-Windows platforms they could change this. Thy should have done this years ago. Unfortunately they persist in supporting only Windows even as the future of Windows itself becomes more precarious. This undermines developer support since we get the feeling Microsoft is gambling with our careers. When I see Visual Studio for Mac and Linux, and compilers for Android and iOS I will believe Microsoft is genuinely committed to .NET having a future independently of Windows.
&gt; JavaScript Who would've thought, huh?
As much as I love C#, there's no killer feature IMO. Databinding ? You can find it in angularjs or knockout. A fancy ORM ? look at Active Record in ruby. LINQ ? awesome, but lame haskell/F#/OCaml. I think the advantage of C# is its diversity and completeness. 
Interested, got any links? Tech talks?
You got examples of the shortcomings you ran into? I'm not saying they aren't there (powershell certainly has some), but this reads like /r/programming groupthink. Visual Studio not even close, really?
As a developer moving from a lamp stack to c# , I don't hate c#, just iis. 
It's fair. I hate Ruby and have never used it. 
Well, I should have known this would start a shitstorm, but the question was very opinion based. This is my opinion, and I have met a lot of other that feel pretty similarly. Moving on, that's correct, because it's the ONLY IDE you can use for a .NET language (I guess you can use mono but that's not really an option), and Windows is the only platform you can run it on. Using windows is already as short coming. I am comparing to other IDEs mainly IntelliJ which I use for everything other than C#. It's restricting in that you requires the .csproj and .sln files to be checked in and moved from place to place, these files in and of them selves make me shake my head, the only way to really even be able to build (easily) is using VS. I am comparing a lot of tooling to Java, I prefer gradle and it is far superior than nuget. For one example I can write my own custom build tasks, I don't have to muck around in XML (another short coming of VS and C#). But many other languages can have this comparision as well. For example Node w/ grunt and npm. Another issue is price, for what you get with the cost of VS you can pretty much get for free with any other platform/language. As for your statement of "the best IDE I've ever used from a pure productivity perspective," if that were true why do people install Resharper? It's because VS falls short.
&gt; it's the ONLY IDE you can use for a .NET language (I guess you can use mono but that's not really an option) There's also SharpDevelop. But have you considered that there aren't other IDEs because no one believes that they can do it better than Visual Studio? Visual Studio is great, and there's lots of money to be made in extensions for it as opposed to reinventing the whole damn thing. &gt;requires the .csproj and .sln files to be checked in and moved from place to place, these files in and of them selves make me shake my head, the only way to really even be able to build (easily) is using VS Are there not equivalents to these in other environments? Makefiles, build.xml, POM files, etc.
For the solutions you're building, that is.
&gt; If Microsoft made first-class .NET tools available for non-Windows platforms they could change this. They ~~acquired Xamarin recently~~ are about to acquire Xamarin or become a major stakeholder in the company, and open-sourced the compilers (Roslyn). I think things will start happening there. If not from MS officially, from MS people expanding those initiatives on their own.
I'm still pretty new, but I think the coolest feature is the whole "managed code" concept, so you can write parts of a single program in any .NET language, from C# to Visual Basic and even to Python. DLLs can be made in unmanaged languages, but they've never been so intuitive.
Extension Methods i think is a pretty good one i cant think of any non .net languages that support this and linq i guess falls into this since it is primarily based on extension methods 
licensing would be the only thing I can think of. Both for visual studio to develop in, and the costs to run a windows server. As opposed to linux and PHP which is completely free. 
Your comment gave me pause for consideration. I wonder if the reason those tools don't exist under the MS umbrella has more to do with licensing / business restrictions than it does their desire to stay in windows. After-all, don't we have .Net because of a lawsuit when MS attempted to enhance Java?
Yes, exactly. It could depend on the business domain, but in my domain (business consulting) relational DBs are the correct choice 100% of the time.
I'd have to say the opposite. I think the additional tools make getting into the language easier. Once you're there, it's easier to pick and choose what you want to learn about without being hindered by "If i don't figure out x,y and z in that order I can't build". Of course, the flip side as you pointed out is that you can go an entire .net Career without ever learning about MSBuild. 
What does Visual Studio offer for .NET that Eclipse doesn't offer for Java, or PyCharm doesn't offer for Python? (serious) *edit: wow, crucify me for asking a question. Saw this cross posted in r/all sheesh*
Like... from its standard library?
I've no good reason to dislike the language. I've spent less than an hour looking at it. The Ruby On Rails enthusiasm was over the top the first few years. That has since died down. Most of my work on done writing standalone programs so I haven't had much need to look into and learn a new cross platform vm based language. One of these days I'm going to build a 'cloud' thing. At that time I'll probably have to change my tune and try something new. 
Also interested. Last time i played with mono was about 4 or 5 months ago and I eventually gave up on it due to complications and an encroaching deadline.
A very obvious one : performance.
I had it the other way except without the pain. I had Java in college and when I stepped into C# I was like.... "Wow, this is so much cleaner... wtf have I been missing!"
I'm a new developer. I work in C# because that is what I was taught. I'm not proficient enough in any other language to say whether or not another language would be better or not. All I know is that I really like the familiarity and understanding I have with my language and ide. I would imagine fewer people/ places teach Microsoft technology, because you have to pay more for the "same thing".
For me instead of having separate sites for desktop and mobile, I just use responsive design. It works better because you only need to maintain one site and you just need to hide certain content for mobile devices. If you have separate sites, users won't always be redirected to the mobile site because mobile device detection isn't perfect. EDIT: Fixed grammar
The debugger in VS is the most robust debugger ever made.
Windows Azure has a free SendGrid service for up to a certain # of emails. You just consume the API, and call it to send emails. No SMTP configuration or workarounds required!
That's not exclusive to .net but it's implemented very well with multiple languages that actually have distinct use cases.
Can you provide a source on Xamarin being acquired? I only saw rumor.
I'm pretty sure by "service" he means the business logic. In my projects, the business layer is a regular class library that the controller can call.
Releasing in June? Boooooooo, i want satisfaction NOOOWWW :P
Heh, yeah. From hated as much or more than PHP to being top-of-the-line cool :D
Objective-C supports extension methods. I think I could replicate LINQ with Obj-C extensions and blocks (effectively Obj-C's version of lambdas). Of course without the syntactic sugar, but to be honest I don't like using the SQL-like syntax in C# either.
&gt; I understand why normal people (not developers) "hate" Windows I don't understand, and I don't see it. the general public use windows. sure you get apple hipsters but everyone I know uses windows with no complaints. This must be an age thing. I am in my late thirties. 
so, on reddit I see these python and php developers bashing .net because it's too "complicated" but I don't see this in my career.
Check out this link. http://msdn.microsoft.com/en-us/library/ee707339(v=vs.91).aspx Since the auto generated classes EF outputs are partial classes, you can manually create a new part that is decorated with the MetadataTypeAttribute. This will allow you to define a second class that defines the metadata for the auto generated class that won't be overwritten by the EF tooling.
Do you hate ruby or the ruby community? I'm asking this because I used to hate ruby, but then I had to use it at work and now I think it's a cool scripting language. I can't stand the ruby community though, probably because they've so many hipsters and brogrammers that are also apple fanboys. Definitely not my cup of tea. 
I would say the parallel stuff. But what sells me on C# specifically is that I can call c++, that I can pass pointers. I work with c++ code as well and being able to integrate is wonderful.
i think it has been available since march. Should be available again soon !
Apparently it hasn't been finalized yet. Several podcasts I've been listening to were talking as though it was a done deal.
Because it's usually tied to the Windows brand? I think hate is a little extreme, on the rare occasions I met someone that hated C# and .NET I knew that this person would fit in one of this two categories. 1) Someone that's passionate about other languages and technologies, which usually culminates in also being a msft hater for some reason. 2) Someone that doesn't actually know what makes a good programming language. You can hate msft all you want but C# is probably one of the best programming languages ever created, it's an improvement over Java and C++ and bundled with Visual Studio it's probably the most powerful programming environment for professionals. Anders Hejlsberg did a fantastic job on that one. That said, besides being always associated with Windows Server we've to consider that this is the mobile age and C#/.NET is not well positioned for that new order, despite Xamarin efforts. New developers will obviously look for what is in vogue at the time they start learning and today this is mobile apps (Objective C and Java) and open source stacks targeting the cloud. .NET is not a first class citizen on Linux, which powers the vast majority of the cloud, and it's not a big part of mobile as well (my beloved WP has only something like 5% of the global market share). .NET developers are cornered on the Windows side, which now is kind of a corporate niche. Unfortunately .NET is not as relevant now as it once was and that gives ammunition to the few haters you're seeing. But again, looking at the bigger picture I don't think programmers are hating C# and .NET more now. Many are simply ignoring it because C# is not a part of what they need to accomplish these days.
Make multiple types of Search (probably *don't* use inheritance here), and then method overloading on the controller to differentiate between the variations. The client-side can just send you JSON, and MVC will do the "magic" to convert it into a concrete type.
I can't think of anything in Javascript to prevent you from doing similar things. But I'm not that experienced in it.
Thanks. However I must be doing something wrong as it's not working. In the EF generated class (in file tbl_spm_periods.cs) I have the following: namespace SpreadMaster { using System; using System.Collections.Generic; public partial class tbl_spm_periods { public System.Guid PeriodID { get; set; } public short PeriodNo { get; set; } ... } } and in the manually created class (file tbl_spm_period.metadata.cs in folder Models --&gt; MetaDataClasses I have have the following: namespace SpreadMaster.Models.MetaDataClasses { [MetadataTypeAttribute(typeof(tbl_spm_period.PeriodMetadata))] public partial class tbl_spm_period { internal sealed class PeriodMetadata { [Display(Name="Period #")] public short PeriodNo; } } } Note that I also added the following using statement: using System.ComponentModel.DataAnnotations; When I open the view (e.g., Index) it shows "PeriodNo" rather than "Period #". Not sure what I'm missing. Thanks again.
Goes deeper than that I think. &gt; Pretty much any functional language has them. But not every (many?) _object oriented_ languages have them or a comprehensive set of built-in functions to handle many query use cases. (EDIT: That said, I suppose it's not, by definition, _"exclusive"_) &gt; The only benefit LINQ brings to the table is the syntactic sugar of making these expressions look vaguely like SQL. This may be useful to some. Like you, I prefer the lambda syntax. But I think the _big benefit_ they bring is the Expressions Tree API that let you reflect on the _content_ of that expression and break it down into its constituent parts allowing things like Linq-to-SQL and the Entity Framework (and many others) to exist. Or to allow users to write their own [null propagating operator](https://github.com/devshorts/MonadicNull). This to me brings a _fundamental_ feature to the runtime that allows for a wide range of possibilities in their use (or abuse!) than simple "syntactic sugar".
But that would be self-defeating. The .NET development platform is free. They make their money by selling O/S licences. There are already projects like Mono to target other O/S's, but don't expect them to actively support projects that would steal their revenue. Recently, they are making great efforts to make .NET open source. ASP .NET MVC and the Roslyn compiler are both open source and free. They are actually doing a better job in this regard than Java, and C# is light years ahead as a language IMHO. In addition, you get the support of MS which is something you won't ever get from Sun/Oracle. 