The last MCSE Azure Certified Architect I knew made 170k. In Indiana.
Yep I said this in a similar thread half a year ago and I got flak for saying it, but it does hurt your odds.
Invest time in choosing your sessions carefully to make the most of it. Have backups as some sessions will be booked up by the time you get there (but not usually). Be prepared to take lots of notes and photos/videos. And most of all... Enjoy yourself!
If I see somebody with a ton of certifications, I instantly think they haven't been working (like actually working or had nothing to do at their current job) and have had free time to take exams. May or may not be true, but that's my first thought every single time.
Sounds like you have the answer. Couchbase is way better than Mongo, has a SQL-like query language, and their .NET API is simple and easy to use. Enjoy!
&gt; what counts: open source code, lmao at that....
Anecdotal warning... In almost ten years in the field I've never met anyone with an MS dev cert. Though, for a person with limited real world professional experience, I could see it being a differentiating factor during the hiring process. Education (especially for more entry level jobs) tends to lean this way... But once you have some years on the resume, real world experience is way more relevant than education. Source: Sr. Dev, college dropout, whose education is never discussed in interviews... Again... anecdotal.
Thanks for the tip! &amp;#x200B; It's my first time with document databases and I just happened to pick mongodb due to popularity. The query syntax feels convoluted at times so I'll definetely take a look at Couchbase based on your input.
What is funny about that. A good git repo is better then any resume.
here's the part where I say, it's a quick way to gauge skill. then you go, I've been writing code for a decade and have zero open source code. i dont like coding in my spare time. then i go, that's 100% ok, but two equal candidates, truly equal; the one with open-source gets the edge.
I think have a portfolio of projects with a summary of how you‚Äôve used the technologies would go leaps and bounds farther than a certification, especially if being a developer is what you‚Äôre heading towards. I‚Äôm sure it wouldn‚Äôt hurt, but it wouldn‚Äôt bring that much more in terms of attracting an employer. You‚Äôd probably impress the recruiter more than the hiring manager.
I hate to say it but this is true. I do a fair bit of hiring, especially with contractors and when I see a wall of certifications, I usually look right past it. Show me experience, tell me a good story.
I would have to disagree... A good git repo doesn't necessarily equate to experience in a working (paid) environment. That is to say operating under business processes and procedures, ticketing systems with stories signed off on by stakeholders, etc. Much of the job description of a "programmer" exists outside of the concept of writing code. Source: my git repo has never been discussed in a successful interview.
That's also to say... Developers aren't hired to code. Developers are hired because they have a particular skillset. Among those skills being the capability to code. Coding isn't the primary function. Assisting in the resolution of a business problem is the primary function... It just so happens that a developer's skillset in coding can help facilitate this.
I consider myself somewhat of a scholar... Yet I've never gotten my masters degree or any certifications. Instead... I write a ton of code (including open source projects). Every time I've shown an employer my code projects, I get instantly hired. :) Employers care way more about your background than they do about certifications. In my opinion... Skip the Masters... Skip the certifications... Start getting involved instead. Build a portfolio of code projects that show your expertise and commitment to the industry.
I have my MCPD "diploma" framed. I don't know if the tests have changed in the past decade but it was very hard to aquire. My coworker who studied the same as I failed 2 of the 3 tests. The only difference was at the time he had less experience as a developer.
Testable is the first thing that pops to mind vs webforms.
I don't see that anyone has mentioned it yet, but The Little ASPNET Core book is a good start. Author is Nate Barbetti or something close to that.
Microsoft's C# 20483 90 day online training is $500 where I am. Do you think this is worth it?
I love all the comments in this thread thus far. Please keep them coming.
Some sessions are just impossible to miss like The future of C#, Net Core roadmap, etc.
ITT: Different hiring managers care about different, arbitrary things.
Hey! Cloud Advocate for Microsoft here! The sessions are nice and everything but one of the thing you might not get the time to do again is networking. Both with the product PM as well as other attendees. So, look at the sessions... get yourself some questions you want answered then head to the floor and talk with the right people. Oh and don't forget to visit our lounge area! We've got some cool stuff setup again this year! üòäüòä
I have met .NET certified developers that would not be able to properly code a hello world.
Certification is just a paper. Though it is a proof that you are keen on that technology, but it doesn‚Äôt really say about the expertise at all. One benefits I have known is that, hiring company would choose you over the other non-certified applicant if both of you passed (all the exams and technical interviews). Other than that, if you are inside of company, performance and ‚ÄúTWWW‚Äù really matters over these papers!
Download the app as early as possible. Manage all the time and classes you will going to attend to. Always go to the booth and talk to the developers and creators if you are not in the session. Get more shirts and freebies as much as you can. Btw, enjoy the drinks and the drinks, it is awesome! Lastly, do not forget to bring back Microsoft Jacket, I missed that last year! Enjoy!
Probably the AppDomain unhandled exception handler was used to catch these, not a try catch block. Though I don't know what happens if the unhandled exception handler throws an exception; the sane thing would be to crash the application and NOT route it back to the unhandled exception handler. I assume this is how it works based on how the article author thinks it's not a standard .NET thing but a third party module.
Choose a sure shot way towards your success in Developing [ASP.NET](https://ASP.NET) MVC 4 Web Applications MCSA-Web Applications certification exam with Microsoft 70-486 dumps of Dumpspdf. We provide you 100% passing assurance Developing [ASP.NET](https://ASP.NET) MVC 4 Web Applications success with 100% money back assurance. An exclusive collection of valid and most updated 70-486 Questions Answers is the secret behind this assurance. So, feel free to get benefits from such valuable [70-486 Dumps Questions 2019](https://www.dumpspdf.com/70-486.html) and enjoy brilliant success in Microsoft MCSA-Web Applications exam. Get the huge discount.
As someone hiring developers: A certification is a nice thing that proves that you have at least some determination for self-improvement. Unfortunately it does not prove that you are a capable developer so if you do get one, do not overemphasize it in your cv or in interviews. That makes you sound like a hack. One thing people still haven‚Äôt mentioned (I think): Microsoft partnership benefits are tightly coupled with certifications which means that C# exam and developer certification might be valuable to your future employer to make them eligible for better partnership status. My team recently had to pass some exams for our partnership and even though we have very senior developers I think we all learned something new.
If you are going to invest, buy access to the test exams. They are a good way to assess which things you already know and which you have to spend time on. 500 for online course sounds pretty steep.
It depends on you. I've done training, and I've done self-study. Both were great and I've had great results with both. I've also done both of those half-assed, and experienced like results. You should invest in the learning method you KNOW you will commit to. If spending $500 on training will ensure that you will pay extra careful attention and hang on every word, then do it! The face to face / human engagement factor can help a lot! OTOH - Online training or books are awesome too because if you don't understand something the first time, you can revisit it as many times as you like. I've often used this for more difficult material. It's invaluable as well. So, long story short, we don't know you. You have to pick this path for yourself and decide. None of us could do anything more than advise.
&gt; Every time I've shown an employer my code projects, I get instantly hired. :) &gt; In my opinion... Skip the Masters... Skip the certifications... Respect. That said, not everyone can deal with a lack of structure. Do the Masters or certifications if you need guideposts. All that matter is that you finish. Then be proud. Experience is king sure, but all that matter is that you get there, not what tools you used along the way.
And I have the original MCSD; you know, the one with the WOSSA tests. They seem to have gotten progressively easier over the years. But then again, that old school Windows specific stuff doesn't warrant much attention these days unless you're a C/++ programmer for Microsoft.
&gt; open source code You have to admit, this is a relatively new phenomenon in the .NET community. Sure, it's great, and I'll greedily read that up on a candidate to save some interview questions, but the experiences behind ANY code the developer has written are still king; FOSS or otherwise.
When I worked for a rail consultancy the company cared a lot about MS certs. That's because they would put them on your outwards facing CV they give to clients and it made them look good and helped them retain their Microsoft Silver Partner status. People that I worked with there passed their exams 10 years before and had done nothing new since. They were still saying they had those certs. I've been on the recruitment panel in a couple of organisations since then and every MS certified developer who has applied has actually been one of the worst in interview. We interview them because their application looks good, give them a technical test and they do something weird - either over engineering it to a bizarre level or not even choosing a language related to the cert they have and end up messing it up. The people I have worked with who have the certs make a point of putting post nominal letters after their name in their email signature and it is top of their LinkedIn profile. But they are for old certs and the developers seem not to keep up to date with latest trends. I'm not saying don't do them. But if you do do them - make sure to refresh them after 3 years, don't use fake post nominal letters like they're a thing, and don't rest on your laurels for the 3 years between renewals because we will probably be on .NET Core 4 or 5 by then and everything in DevOps will be YAML.
I recently completed my MCSA : Web Applications. All I can say that it matters little in the work environment having received nothing but a few pat's on the back from my colleagues. The knowledge however i got out of the study process was invaluable. Booking an exam date was merely a way for me to put money and time commitment to learning and forced me to study in the evenings.
Yes! Learn Python!
What?! They had a jacket last year??? Where and how does an attendee get it? The only thing I've seen given away is the shirts, socks, and rarely hoodies.
I used the at as a template when I got started. It worked really well. Unfortunately, it doesn't mention adding a new table. In other sad news, I'm having an issues getting the view to work that is retrieving the data? https://www.reddit.com/r/dotnet/comments/bgrofq/issue_retrieving_data_after_adding_a_table_to_a/? Any ideas on what the problem might be?
I got the table added, but now I'm not able to get the view to look. I just made a another thread about it: https://www.reddit.com/r/dotnet/comments/bgrofq/issue_retrieving_data_after_adding_a_table_to_a/?
Choose a sure shot way towards your success in Implementing a Data Warehouse with Microsoft SQL Server 2012 MCSA-SQL Server 2012/2014 certification exam with Microsoft 70-463 dumps of Dumpsadviser. We provide you 100% passing assurance Implementing a Data Warehouse with Microsoft SQL Server 2012 success with 100% money back assurance. An exclusive collection of valid and most updated [70-480 Download Dumps 2019](https://www.dumpsadviser.com/70-463-dumps.html) is the secret behind this assurance. So, feel free to get benefits from such valuable 70-463 Exam Dumps and enjoy brilliant success in Microsoft MCSA-SQL Server 2012/2014 exam. Get the huge discount.
If your employer will pay for the exams then I'd say do them. I got Microsoft certified myself and can't honestly say it may any difference. Studying for the exam was decent and I learned a few interesting things, but the certification has never seemed to make any difference other than a recruiter saying, "Oh, that's nice".
The put it in the table and all finished in just 2 mins :)
Overall, how are you liking using MongoDB? Are there any big issues to look out for?
[removed]
So, say i want to build an experimental community site for a game, client side blazor is the way to go?
Certification can help your company achieve MS Partner. As others state, studying the material is otherwise far more valuable than actually having the cert as the exam answers are published online.
I had a certification as MCAD about 17 years ago, when [Asp.net](https://Asp.net) was new myself and people I worked with picked up c# in beta and started playing with it and then went from there. Alone certifications can't open doors, but its one of the many mixes, years of experience, BS in CS, etc. I always take it in consideration as a bonus not a negative if I see a resume come my way for new position/hire. &amp;#x200B; How Many years of experience do you have? Even if someone used Testkings to pass certs, but has few years of experience the exposure of the techniques if retained helps in my opinion, even when Testkings are cheating. If you know or feel the technique is out there and you can google + little bit of common sense wins over reciters/definition kings/resume writers. &amp;#x200B; But please over all know how to use the Debugger in Visual Studio, browsers and SQL Server and be able to understand code and the fundamentals. I have run into so many developers who can talk circles around me, they can create a class that interfaces with an inheritance, encapsulate object that derived from using Polymorphism on existing object while it has been abstracted. But any flaw and they are digging and digging and reading , without know to set breakpoints and watches to follow the logic through to breakage and see what happened. &amp;#x200B; Remember there is an old saying there are People who do , then their are people who Teach.... you share knowledge you and I become smarter you teach me from a book reciting paragraph after paragraph we mostly come away know nothing really. Example I know a person who is good with SQL Server and SQL, but they have certifications in almost everything as they once was a trainer for certs so knew how to pass, and they will be the first to say they have a Cisco Certification and couldn't do the first thing with an Actual Cisco Switch, and they have barely ever coded but to help the company have enough Certifications to retain partner status they just got their MCSD.
Like others said, they‚Äôre good to learn stuff in a structured way but most people hiring who know about em know that they‚Äôre close to nothing compared to past work experience so really it‚Äôs only good if your under qualified
[removed]
Are the sessions going to be streamed? I'd love to watch it while I work, but unfortunately can't take the time off work this year.
Linq has pretty clear semantics however. If you start using anonymous functions instead of lambdas (in order to perfom imperative operations) that is a good indication you are breaking those semantics.
I believe it was the last couple of years. Not sure if all sessions were streamed. I don't see a live stream link on the interwebs yet, though
Conferences are all about networking. One goldmine that is often overlooked is the smoking section. Lots of good conversations out there.
How hard is it to get in? Does it sell out quickly?
Don't waste time in sessions. They are all recorded. You can download them and watch them on the plane home. They have a big expo hall. Hang out there. I was able to spend almost 40 minutes shooting the shit with Anders Hejlsberg (mainly about TS) with the guys at the Angular booth. It's one of the highlights of my entire career.
I don't see an actual useful error message here. You're going to have to find it to determine what the problem is. If this is running on a server or otherwise not in your development environment under Visual Studio you can use the remote debugging tools to attach a debugger and more easily see exceptions that are happening.
If you're really new to C# it might be worth it. vplatt's comments are also spot on. I think learning and training has immense long term value to your career in what you learn even ignoring the certification itself. Probably far more than $500, but it may not be such an immediate or direct affect, but instead your job performance will be better over time leading to better raises and promotions. If you're looking for immediate vindication or payoff you may be disappointed. Some employers would spring for the training, and in that case if its just your time on evenings/weekends and they foot the bill it seems like a no brainer. Doesn't seem like the case here but I'd keep on the look out for such a perk.
I was running the debugger in VS and everything seems to be working fine. It retrieves the data with no issues. It's when it is trying to load the view that nothing is happening.
I was running the debugger in VS and everything seems to be working fine. It retrieves the data with no issues. It's when it is trying to load the view that nothing is happening.
Thanks for this, I was looking for a comment like this. What did you use to prepare for the exam? How long was the process?
It's super expensive and sells out but not right away.
Teaching is the best way to learn. Pick a topic you are really interested in, go to the show, take enough notes to go back to your own company and give a presentation about that topic.
So no lottery? Basically try right away and get in? Wish Google would copy.
I have less than a year of experience as a Software Dev, it was hard to find an entry-level position. I have four years of overall I.T. experience and I just graduated with a BS in Computer Science in May 2018. The problem is I'm no spring chicken. I'm 34 going onto 35 soon.
For large corporations it tends to make sense due to the way IT is traditionally structured. Everything gets shoved onto the same SAN and the same backup appliance which now does block level deduplication. The controls you can put in place around it also make sense. Some CSR who the helpdesk accidentally gave admin rights to a network share can delete your files while your app is still in charge of its DB blobs, which are likely soft deletes with a sql agent job to clean up later. We did split our blobs into a separate file group so they could store it on a different SAN. These documents were also needed to be preserved for legal reasons for beyond 2 years, so no matter what it had to have a backup that could fit the size, and have supporting documentation about how the files were generated. For someone running a mysql node on a Digital Ocean droplet/AWS, no. These are two different markets which have two different architectures.
I used the official exam ref series for exam 70-483 https://www.microsoftpressstore.com/store/exam-ref-70-483-programming-in-c-sharp-9781509306985 For 70-486 I used MSDN following the topics that were listed in the exam requirements.
Can you just give them the wsdl? That should be self documenting for all the endpoints and operations.
Except for the query syntax I like it a lot for this little trip scheduler I'm doing just to practice. A lot of freedom to create any kind of documents that suit your needs but I don't know if I would use it for a lot of relational data. &amp;#x200B; The other thing I found difficult is try not to think like you're do when using any RDBMS because it will complicate your documents' schema. &amp;#x200B; At first I was trying to have one collection per document because in my RDBMS mind it made sense but here I didn't need a collection for buses since they didn't make sense outside of the scope of their parent route. So I just embedded the array in the route since my buses aren't a phisical representation of the real thing, they're just a descriptor of how many services are per day for a given route. &amp;#x200B; This are my thoughts so far but I'm just starting learning it.
Oh, I forgot to add that the driver documentation is a little bit daunting at times since it doesn't provide a lot of examples (sometimes none) for the more advanced functions but you can leverage that by reading about native mongodb functions, learning what they do in mongo cli and peaking the driver definitions from within Visual Studio to try to translate them. That did help me a lot in this particular case.
I will byte the trolling :) Because the full .Net is so FAST in implementing the Span and friends APIs ;) On a more serious note, I am using AvaloniaUI with .net core and it's way better experience than WPF.
So the data call fills the table you added in code? But the view itself does not.. Are you running a Http call to consume your data on the view side?
It's not generally required but some structured learning definitely helps if your like me who likes some structure on studying and has a habit of procrastinating learning until I really need to (usually the $$ spent really helps on the pressure to learn on my end). The cert in the end, pass or fail may not really matter much depending on the employer wants but the learnings on that process of studying definitely helps out as a developer. Some can do all these without certs and some can't so it generally depends on you're style of learning. Remember that your goal is to learn, think of that certification as a motivational stepping stone to achieve that goal. Sometimes if lucky some employers give extra add ons to your salary for your certs, but don't bet on it as it's rarely the case as most of the time experience counts more.
I went to build last year for the first time with some experienced conference folks from work - the sessions are great as well as some of the labs, but to echo what most people are saying here ... it's really about networking! Go to the expo hall, introduce yourself to the people working @ the booths. The non-sponsored booths are all Microsoft employees -- they can really hook you up! Want to be an alpha/beta tester? Introduce yourself! We got to have dinner with the IoT team and got some awesome early access to Xamarin toys. The sessions are recorded and you'll be able to find the source code online -- but the networking is key! Wish I could go again this year! Have fun!
You can also simply go through these samples when you feel like it https://github.com/dodyg/practical-aspnetcore
Wow that's embarrassing! Was it the MCSA certificate? When you say they wouldn't be able to properly code a hello world, do you mean they wouldn't be able to get it to compile?
Thanks for the tips! I think I might give it a go. I've heard horror stories from a lot of people, but like you said, the freedom to create any kind of document is at least good during the prototype stage.
If you use api gateway then it isn't an issue. Api gateway can take care of the web socket connections and your backend could be in a lambda and you achieve the same scalability as if you weren't even using web sockets. [https://aws.amazon.com/blogs/compute/announcing-websocket-apis-in-amazon-api-gateway/](https://aws.amazon.com/blogs/compute/announcing-websocket-apis-in-amazon-api-gateway/)
Nice and surprisingly good result.
Is the exam multiple choice or are there any hands on stuff like labs?
Too bad they don't have that program anymore. It was the real deal, more like a PhD thesis than a certification.
From what I remember you need a few employees with some certificates to qualify for "microsoft certified partner" which in turn qualifies you for quite decent discounts. Once you qualify for the silver package your company can get something like 5 enterprise licenses and something like 6k azure credits a year for something like 2000 dollar. A single new enterprise license is 6k. By having 2 certified professionals and managing 120 partner points you can potentially save the company thousands of dollars. I doubt this is worth the time investment for those in the U.S. though. Programmers are so insanely expensive in the U.S. having a bunch of them spend weeks to get the certifications would cancel out any monetary benefit
I've done it with your suggestion! &amp;#x200B; Thanks a lot! This drove me crazy for a couple of days.
psql for PostgreSql is an interpretive command line utility. Don't knock it until you try it ;)
[removed]
That's why I was confused. OP spoke of GUIs, the opposite of CLIs.
I'd be interested in the answers as well. But I can tell you how I do it. The documentation will depend on the type of web service you are providing. For a Rest app, Swagger is the best documentation I've seen. There may be ways to automate the swagger documentation (I know there is for asp, but unsure about WCF). You can configure a wcf service behavior to expose help pages to your service. For a soap service, you may still use swagger to document your app, but it will be manual work, and swagger is not really made for soap services. You can expose an auto-generated WSDL, which can be used to generate clients or documentation. For other WCF services (duplex services and others), it's fully manual documentation. Don't forget to precise the binding types to interface with your sercice. I'll usually give a DLL containing the service contracts and all the models exposed, and document the models and service contracts in triple slash comments directly in the code.
Obviously this is outside the scope of the original discussion, but why do you believe US programmers are expensive. Obviously, the talen can be found elsewhere for cheaper, but I would just argue that means those people are most likely underpaid.
&gt;but why do you believe US programmers are expensive It's relative to the undiscounted price of the products under discount. The cost of those products is more or less the same everywhere. Where I live getting paid something like 40k as a 20-something is seriously impressive. Though probably limited to the west coast it seems like somebody making 100k+ in the U.S as a software developer isn't uncommon. If both parties required equal amount of time investment to reach a "silver certified" status then it would cost the U.S business more money. Furthermore, while they're studying / preparing / taking exams they're not only not making money, those developers are costing money. In a lot of cases it just isn't worth it for U.S based companies to have several developers working on something that doesn't net direct business value to save something like 20k. On the other hand even if 3 local developers took an entire month of time (160h spread over several weeks) to prepare and pass the exams it would still be worth it. In the U.S developers cost more to employ, but at the same time their services also generate more. But the content of the benefits package included on reaching "silver certified" doesn't change, it's static.
actually you can use the server-side only on some parts of the applications. i.e. you can use razor pages + blazor service side widgets here and there.
Did he know there was a CLI option?
Thanks for the heads up. Sounds nice!
Practically, certs are useless unless the organisation is trying to maintain a specific microsoft partnership level or if it's a consulting place where your CV will be passed around to less technical people. Otherwise it might be a tiebreaker if you're looking for a developer job and interview as well as someone else. I'd pick people with a github and some sort of code available over someone with a cert any day though. I'm involved in hiring / managing developers.
This also looks great! Thanks!
Try comparing your code to this repo. https://github.com/joshberry/dotnetcore-angular-ssr Obviously version of .net core is off but all the rest should be very similar.
That's cool. A few years ago I was playing with spark on hdinsight in azure, I couldn't get over wiring Scala and let thinking how much easier it would be if I could just use c# and linq.
I'm almost at the same position at my organization, and have wondered the same thing with little to find. There are some things I've learned though. IIS has a default number of 5000 concurrent connections by default which can be altered to over 100,000. You can also tell signalr what protocol to use (websocket, http long-polling) that could make a difference in network consumption as well. &amp;#x200B; Here's the docs for asp.net signalr: [SignalR Performance](https://docs.microsoft.com/en-us/aspnet/signalr/overview/performance/signalr-performance). Asp.net core signalr would be about the same I'm guessing, if not faster.
There's also Azure SignalR for these as another alternative but pricing might be another thing to consider (didn't check yet to compare it's costs vs your basic web api + SPA model).
I'm personally interested on it myself both for intranet apps (since this model removes validation redundancy by a lot). Also Blazor server side is opt-in wherein you can use it on an existing MVC / Razor pages site that only needs minor interactive parts of the page which is a great solution for those apps without having to resolve to JQuery which is a pain to maintain as the app grows.
That would be an architectural design thing though if anything else. With some planning ahead especially if you plan switching in the near future to client-side you'd most likely need to decouple stuff like those from the UI anyways which is best practice. Having tried switching back and forth from Server-side to Client-side and vice versa on our company's experimental tests wasn't been that much of a problem, provided we didn't have hard dependencies on the server and everything is talking through interfaces. This is where DI shines imo, switch out the interface implementation depending which mode you are running (e.g. server side calls directly to services bypassing API calls, and client side implementations calls through an API layer behind the scenes).
Do you still feel this way? I'm considering getting a 2019 license.
May I ask where you live? I am a US based dev and even when I was first starting out I felt seriously underpaid (I was making 45k butbwas easily working 50-60 hours a week. I have been doing it for a while now and frequently work with offshore talent. If these same devs were based in the US they would easily make much more. Not sure what that says. Are they underpaid? Is it relative to their environment? Please keep in mind these devs are very well paid relative to where they live for people doing the same work.
Your post has been removed. Self promotion posts are not allowed.
3 is convenient and easy but it can only be used in the controller To be able to throw an exception from a service and have it set the status code and message you would need to configure the ExceptionHandler middleware I like to have a custom Exception that has a HttpStatusCode property Then configure the middleware to do whatever you want with the status code/message A good article that helped me in the past was : [https://www.strathweb.com/2018/07/centralized-exception-handling-and-request-validation-in-asp-net-core/](https://www.strathweb.com/2018/07/centralized-exception-handling-and-request-validation-in-asp-net-core/)
I've been using this one: [https://github.com/rdvojmoc/DinkToPdf](https://github.com/rdvojmoc/DinkToPdf) &amp;#x200B; Works really well for me, really simple to setup and go. Although keep in mind that some CSS properties are not supported in some of these libraries. For example, formatting a text in two columns didn't work, I used a table instead (which sucks, but since the files rarely change - not so bad).
I'm currently using puppeteer-sharp with headless chrome running in docker container.
Got a few choices, depending on your stack. If you've got Docker and / or some money to spend on this, I would highly recommend [Browserless](https://github.com/joelgriffith/browserless). It's similar to another comment here, you can use Chromes really damn good HTML to PDF conversion as a service. I'm actually doing a talk on this at one of the Global Azure Bootcamps on Saturday. The nice thing about Browserless is that it hides some of the issues with having to use Websockets and instead gives you a REST API instead. Also in the Docker realm is [Athena PDF](https://github.com/arachnys/athenapdf) which uses wkhtmltopdf underneath the hood. One thing to remember for any of the (many) wkhtmltopdf wrappers out there is that the CSS support is not great. You'll get decent CSS2 support but CSS3 isn't that great. A more flexible all in one solution is [JSReport](https://jsreport.net). It has a lot of options and bits you don't maybe need, but again you can use Chromium and get templating for free. The only other one I can personally recommend is iText. But that will cost you a whole lotta money for not much benefit over the above.
Thanks! I‚Äôm now exploring JSReport but it seems that the css does not included when converting to PDF. We‚Äôre not using docker and just a simple application. Thanks for the suggestions!
Thanks! Will try to explore this. I need to create a report that includes a lot of text and table with a lot of formatting like merged cells, background color, bold text, etc.
That's odd, when I trialed it out I didn't see that issue. I know there are a bunch of ways it can convert to PDF with it so it might be the rendering engine it's using, or it's not waiting for the page to finish loading which I've seen in a few of these solutions.
something like this? [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/hosted-services?view=aspnetcore-2.2)
Yes, everything works fine in production. My files are pretty simple, but include merged cells and dynamic tables.
Cool! Thanks! Will try this out. Can I get back to you later for further questions if something goes wrong? :))
I'm now trying it and got an error finding a DLL System.DllNotFoundException: 'Unable to load DLL 'libwkhtmltox' or one of its dependencies: The specified module could not be found. Per documentation, it says that it needs to copy on the root folder of the project, so I did. But still gives me this error.
As far as I remember, the steps were like these: * Create a CustomAssemblyLoadContent class on the root folder, the contents should look like that: [https://pastebin.com/qqB88B3Z](https://pastebin.com/qqB88B3Z) * Then, add this code into your Startup.cs: var context = new CustomAssemblyLoadContext(); context.LoadUnmanagedLibrary(Path.Combine(Directory.GetCurrentDirectory(), "Lib\\\\libwkhtmltox.dll")); services.AddSingleton(typeof(IConverter), new SynchronizedConverter(new PdfTools()));
Wooahh!! Thank you so much it worked!!!
They changed their mind because it was causing too much confusion. Blazor is the name for components and server-side / client-side refer to where they run. [https://github.com/aspnet/AspNetCore/issues/8931](https://github.com/aspnet/AspNetCore/issues/8931)
You don't. It's primarily for unit testing but not every single thing needs to be tested nor do you need to do all that for every app. You know best about your code, pick the right amount of abstractions to trade-off productivity with correctness and maintenance.
Nothing "wrong" with web forms and Telerik, and most organization resist costly training of developers in new tech, particularly if they are contractors. The only compelling thing I can think of (and sorry, have not used Razor) is if they want a responsive web design that adapts well to phone, tablet and desktop resolutions or they want more dynamic content. I've seen a lot of sites move to Angular / Bootstrap for those reasons.
I installed chrome and called it via Process APIs: https://developers.google.com/web/updates/2017/04/headless-chrome#create_a_pdf_dom
Now that I‚Äôve been using it for a few weeks, I can say it‚Äôs a definite improvement over 2017. It‚Äôs faster, more stable and I feel more productive using it.
Wait - I must be missing something, didn't Microsoft develop [Mobius](https://github.com/Microsoft/Mobius) for this very purpose? Unless this is positioned as being a _next generation_ binding, or enables more functionality that `Mobius` did not/could not cater for.
It sort of says at the top why Mobius was deprecated: &gt; Mobius development is deprecated and has been superseded by a more recent version '.NET for Apache Spark' from Microsoft (Website | GitHub) that runs on Azure HDInsight Spark, Amazon EMR Spark, Azure &amp; AWS Databricks.
[Rotativa](https://github.com/webgio/Rotativa) is another wrapper for wkhtmltopdf
So... They moved the point of confusion üòÇ
I use [wkhtmltopdf](https://wkhtmltopdf.org) you can find some wrappers on github or just call the executable from your code
You can manually render a cshtml file inside a function and get the resulting string. I usually use that for sending styled emails because it means I can leverage templates, shared styles, and render them in the browser while I work on them. Once you get the string though you can write it out to a pdf or any other file you want. https://ppolyzos.com/2016/09/09/asp-net-core-render-view-to-string/
&gt; Oh, sweet! &gt; Looks at code. &gt; Double used everywhere. &gt; Oh well.
Thanks! This isn't quite what I'm looking for since it seems geared toward running a background task with the web server running. I guess I was thinking there would be something that I could run without my web server running, but still get my database connection and such to run some arbitrary code.
Precision.
Exactly. Never use double when precision is needed. From [here](http://net-informations.com/q/faq/float.html): &gt; "Decimal can 100% accurately represent any number within the precision of the decimal format, whereas Float and Double, cannot accurately represent all numbers, even numbers that are within their respective formats precision."
ZETPDF is the fastest PDF SDK FOR .NET applications, you can develop high performance .NET applications having the ability to Create, Edit, Convert, Protect or Print PDF documents, without requiring Adobe Acrobat. You might wanna have a look on it.
It makes the server stateful. You have to use a sticky session on your load balancer. It also means that you cannot have concurrent requests for a given session (like a client requesting multiple apis when loading). So it is less scalable. &amp;#x200B; I mean, the best way to handle client state is to leave it in the client. Putting it on the server is a bad decision.
Double is middle man. It's accurate enough.
Using this [https://www.nuget.org/packages/Select.Pdf/](https://www.nuget.org/packages/Select.Pdf/) There is a free version, that can do a lot. Used wkhtml with different wrappers before, but this one is far more better.
I found a discuss at [https://github.com/aspnet/AspNetCore.Docs/issues/8118](https://github.com/aspnet/AspNetCore.Docs/issues/8118) seems like there is still no best practice on web api error handling, sigh
You are right, `BadRequest` doesn't throw an exception, it just produce a http result. I think it would be great if the framework provide some basic http exceptions so we can create our own exception class.
Thanks!
Are you calling signinasync?
Bloated and slow is a relative term nowadays, since computing power has come so far, and new software with new features assumes you have the hardware to take advantage of it. Before I got a decent PC, yes, it was very slow and bloated. Most feature rich development software is on low spec hardware. So I built myself a top of the line PC with plenty of SSD's and 64gb of ram. Now nothing is slow at all. I used to hate Android Studio and refused to even try working on an Android app. Now, I actually enjoy it. If you are serious about programming even for a hobby, invest in a serious PC.
It‚Äôs been a while since I‚Äôve worked with SignalR, but I do know that its default transport is websockets, which help to make the horizontal scaling issue moot right? Since generally you‚Äôll open one connection and that connection will be open for the duration of your stay on the site anyway. Yet horizontal scaling will still be effective since new clients can be directed to any open instance. You can configure vanilla Signal R to only accept websockets as a transport, to remove the horizontal scaling sticky session considerations of something like longpolling, and I‚Äôm assuming you can do the same with Blazor? The concurrent requests issue is interesting, though I‚Äôm assuming that‚Äôs also a non-issue? Because the server will just be receiving short little events that may result in multiple asynchronous API calls, which the server will be able to deal with and also stream asynchronously / in virtual ‚Äúparallel‚Äù back to the client who triggered the events, right? Or am I mistaken? I absolutely agree that a stateless server is ideal, but until client side blazor is ready, I think this is a good compromise. Really the saving grace for the whole system is that from what I know, there is _no_ change, aside from configuration, between a server side and client side blazor app, and that both systems are also backed by true server side rendering for any routes that you want, which is really elegant / cool to me.
Funny enough, I have been researching on this for a personal project for days now. I am not 100% on your use case, but I tried every library mentioned here, but only one actually gave me what I wanted )with small caveats) For most of these, the server side rendering worked great if I was building a pdf file in the background but I just wanted to share a pdf version of the html on the screen. Based on that, by far, the easiest and best one I found was [jsPDF](https://github.com/MrRio/jsPDF). No joke, I was able to have a download prompt for the html on my site and really really close to what was generated (some of my custom font stuff is wonky, but working on it) with just this javascript: var doc = new jsPDF(); doc.html(document.body, { callback: function (doc) { doc.save(); } }); I was using css-grids, display: flex and other stuff that I thought all html parsers would choke on, and they all did, but jsPDF was pretty much spot on. So yeah it's clientside, and hopefully thats not a deal breaker, but for me it was a bonus of making the pdf generation distributed.
Nope, HTTPContext.ChallangeAsync
Interesting. Any documentation I can read of?
it's all there in the readme file. https://github.com/dj-nitehawk/MongoDB.Entities/blob/master/README.md if you have any specific questions or need further clarification on something let me know.
We are using something like this: product-some-name-service. This would be a service called some-name :)
It really isn't. You should never use double for financial or other high-accuracy calculations.
I name then the same as the solution file. Which I name in Net naming convention.
Probably unpopular opinion, but in this case: Don't use linq. The fastest way to do this is to make sure you only loop over the list once. &amp;#x200B; \` int count = 0; int sum = 0 for (int i = 0; i &lt; Childs.count; i++) { // filter and do math }\`
One way could be like CompanyName.ApplicationName.WebSite for web sites or CompanyName.ApplicationName.WebAPI for api project and so on.
Good Stuff.
I'm wondering, will be there an idiomatic API for F# too?
What does the author mean by "flowerboxing"? It says not to do this under the comments section
This would be a lot more valuable if it provided a rationale for all these rules. As it is, I'm pretty skeptical about a lot of it. For example, number 31. &gt; Do not compare strings to String.Empty or ‚Äú‚Äù to check for empty strings. Instead, compare by using String.Length == 0. That sounds like cargo-cult, and actually can introduce a bug. Is there any concrete reason to avoid direct equality testing? I've heard that `.Length` is faster, but have never seen any concrete evidence produced that there is a measureable difference. Direct equality comparison works perfectly fine for nulls, but using `.Length` will obviously throw.
May exist already but I tossed these into a playlist. &amp;#x200B; [https://www.youtube.com/playlist?list=PLp\_Ibxl\_W6LClYwq2C5fhMS0FOx8wVyne](https://www.youtube.com/playlist?list=PLp_Ibxl_W6LClYwq2C5fhMS0FOx8wVyne)
Or ya know, string.isNullOrEmpty()
/****************** Commenting like this ******************/
Which does practically the same thing &gt; return (value == null || 0u &gt;= (uint)value.Length) ? true : false;
What does your "movies" model look like?
Yes, how to do the math its not the problem , the problem its how to load the less possible amount of data from db , less processing time , etc. Maybe some kind of Partial include? .Include and instead of segments , just Id,Wordcount,parentid ? Or do a View in mysql that does the same math but in the database directly? if i Include(x=&gt;x.Segments).Where(x=&gt; x.Status == StatusEnum.Complete) CompletedRows = x.Segments.Count(); CompletedWords = Sum or any method like that with all segments and the property wordcount &amp;#x200B; Or in a view I can get the same result by doing the same query and also Sum... &amp;#x200B; But the most important if this is SIGNIFICANTLY slower than having triggers that update a column
I prefer string.IsNullOrWhitespace()
 `public class Movie` `{` `public int id { get; set; }` `public string title { get; set; }` `[Column(TypeName = "text")]` `public string description { get; set; }` `[Column(TypeName = "Date")]` `public DateTime releaseyear { get; set; }` `public int? directorId { get; set; }` `[ForeignKey("directorId")]` `public virtual Director director { get; set; }` `}`
I always liked the old convention (I think it's from Delphi) of prefixing function paramters with something like "a" or "an", it makes differentiating parameters from local variables easier when reading the code. For example public void SetSomeValue(int aValue) {} But it never caught on.
Well, yeah, but only if you also want to test for null. It's not exactly identical to checking for an empty string. (at least in C#. VB is a different story...)
Dink started out good, but has some printing issue for me. Switched to SharkPdf, another wkhtml2pdf wrapper, but works really well in .net core.
IsNullOrWhitespace() does the same thing as isNullOrEmpty() but also checks if the string is only whitespace characters. Offhand I can't think of a past situation where I wanted to check whether a string is null or empty but not rule out whitespaces.
C# already has written coding conventions, maintained by Microsoft. Why do we need more?
Why would we use his coding standard when there‚Äôs already a book of coding standard from the people behind .net ? https://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613
Because we need more things to argue about on the internet.
That is pretty much my reaction, use defaults from visual studio and write code instead of inventing non issues.
Single node or multi node cluster?
Good, didn't make sense from user standpoint. I guess it was a marketing driven decision.
Why are you not using LINQ syntax? Something like: &gt;`context.movies.Join(context.threads, movie =&gt;` [`movie`](https://movie.id)`.id, thread =&gt; thread.movie_id, (movie, thread) =&gt; new {id =` [`movie.`](https://movie.id)`id, titile = movie.title, threadId =` [`thread.id`](https://thread.id)`).Where(movie =&gt; movie.id=2)`
Yup, I can only think of times where I've been burnt, or had to fix other people's code because they/me used empty instead of white space, and the user put in a white space and submitted a form.
The use of IsNullOrEmpty() over .Length has been recommended since dotnet 2.0 https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1820-test-for-empty-strings-using-string-length?view=vs-2019
You can use a view or stored procedure with a **window function** to get both the Completed and Total counts at all levels of granularity with a single scan of the table more or less. It's like running one query buy getting several different "group by []" at the same time. It denormalizes the aggregate values in the result set, but its easy enough to pluck those back out. https://mode.com/sql-tutorial/sql-window-functions/ For C#, .Select() and .Aggregate() in LINQ would allow you to do this as well. It's the .Net equivalent to Map/Reduce, and since you're trying to sweep a data set and collect a few different aggregate values (sums and counts) against different sets (i.e. group by's). The aggregate is slightly tricky if you're not familiar with it, but not a huge deal if you are already familiar with LINQ. For C# and a map reduce style approach, you probably want to pull the full data set out, fully denormalized from SQL. Your AggregateResult may want to keep a few dictionaries for faster runtime for when it sums or adds or whatever... https://stackoverflow.com/questions/12936501/linq-select-and-aggregate-within-a-single-iteration 50k rows in either SQL or C# in memory is no bigs in my opinion. If you use SQL window function its less to send over the wire. IMO I'd do it in SQL, but it should be fine to do in memory in C# unless you are severely memory constrained (like a micro container instance with &lt;1GB).
No we don't!
Can we do: *If Not String.isNullorEmpty(str)* ?
I don't have a clue what this means honestly.
uh, sure. if (!string.IsNullOrEmpty(str)) { /* ... */ }
Can you please provide a link to it. I need to create a ‚ÄúStandards‚Äù document for my employees. If I could just copy one that would be great. Also is there a coding conventions document for design patterns?
[Coding Coventions](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions) Design patterns are pretty situation specific, I'm not aware of any documented conventions for their use.
One of the reviews say all the rules can be found on msdn but that the book provides additional commentary. Do you know the link for this material?
Is this all the same material that is found in ‚ÄúFramework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries (2nd Edition)‚Äù
[https://docs.microsoft.com/en-us/ef/core/querying/raw-sql#limitations](https://docs.microsoft.com/en-us/ef/core/querying/raw-sql#limitations) &amp;#x200B; 3rd bullet point &amp;#x200B; &gt;The SQL query cannot contain related data. However, in many cases you can compose on top of the query using the Include operator to return related data (see Including related data).
I disagree.
Actually those are two separate things. You can use "this." to explicitly specify you are referencing a member, or you can omit it to infer it if there is no local variable with the same name. By default VS will encourage you to omit this. when possible. I prefer to make it explicit to make it more clear at a glance it is a reference to a member. The other thing is naming conventions. I make all my private and protected members start with a lowercase letter, while public ones start with uppercase. Using an underscore is a common convention as well (and would also make it easy to determine inferred member references). It also works with VB.NET where variables are not case sensitive so you can't make a private field with the same name as a public property just with a different casing.
&gt; Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries (2nd Edition) Yes, most of it is going to be basically the same. The book will go into a lot more detail, the link is more of a quick reference.
I see coding standards as helpful guides rather than tablets of stone. For a while I implemented Rule # 28 but found it cumbersome and unnecessary - well named methods and arguments are much better than XML documentation peppering your code.
I‚Äôm going through this right now and have just gotten to the ‚ÄúLanguage Guidelines‚Äù. They recommend using ‚Äúvar‚Äù when the right side is clearly implies the type. Could you please explain why?
It is redundant to declare type on both sides.
I find that‚Äôs still moderately common in the Java that I see.
Would using .Trim() to remove white spaces upon saving a form value if there was only a space saved in the form input field? I've never actually tested this before.
relevant? https://xkcd.com/927/
As u/cotanpi states it is redundant. But it is interesting you bring this up - as it is one of the few spots I deviate from the standard. I believe var should either always be used or never, and while I prefer to use var everywhere - I leave up to the team to decide and I'm cool either way. I'm not a fan of leaving whether or not the right side "clearly implies type". That's subjective and just going to introduce style discussion into code reviews - which I certainly don't want.
:)
Perhaps do a tracing session with Sql Server Profiler. You can enable audit tracing (failed logins). This might give you additional information.
Nice. Since the LINQ query support is already there, any plans to produce an entity framework provider?
 &gt; Try to use int for any non-fractional numeric values that will fit the int datatype - even variables for nonnegative numbers. Why on earth? why cant i use ushort or uint for things that can not be negative?
Visual Studio runs in Mac as well.
That's a very different Visual Studio, but yes.
For enumerables, LINQ will be slower than not-LINQ simply due to how it works. For queryables such as SQL I am not sure. But usually it doesn't matter unless you are using a lot of LINQ in code that needs to perform well to enumerate something. In that case you would notice a performance problem and one of the things you can try is to rewrite it to use less or no LINQ to improve performance.
Yup. If you have a string var foo = " "; And spit out foo.Trim() you get ""
Is the SQL server configured to allow Windows Authentication? And check your SQL log for denied connections.
Thanks. That's good to know.
This is my go to trick for checking SQL connections. The UDL check: https://blogs.msdn.microsoft.com/farukcelik/2007/12/31/basics-first-udl-test/
https://www.connectionstrings.com/sql-server-native-client-11-0-oledb-provider/
Any firewall changes recently? Are you SSMSing from the same machine that the app is running on? (It looks like you are but wanted to check) &amp;#x200B; As far as I remember, SQL Server uses ports differently for non-interactive sessions : [https://www.itprotoday.com/sql-server/sql-server-tcp-and-udp-ports](https://www.itprotoday.com/sql-server/sql-server-tcp-and-udp-ports) . &amp;#x200B; As the other commenters have also said, worth checking the access log. If you're having firewall issues you won't even see the failed logins, which is a big giveaway.
The log helped me out. Turns out it's a bogus error message -- I had a typo in my code for the database name. That's also why it worked when testing it in other areas -- I didn't have the typo there. &amp;#x200B; Silly mistake, but thanks for the help anyway!
The log helped me out. Turns out it's a bogus error message -- I had a typo in my code for the database name. That's also why it worked when testing it in other areas -- I didn't have the typo there. &amp;#x200B; Silly mistake, but thanks for the help anyway!
Sometimes you just need a second set of eyes for the little things.
Exactly!
Tee hee - that is the other option :) Didn't think you'd changed the connection string. Glad you sorted it out!
The query builder is cool, but I like the simplicity of Func&lt;T, bool&gt; filters a bit more. It‚Äôs been a while since I did any mongo stuff. I should get back into it.
This is not "Coding Standards". It's not even a style guide. It's a set of syle conventions only. The advantage of these conventions is that a codebase doesn't get multiple opinionated styles. These should not be in a document but enforced by the IDE (e.g. Visual Studio settings or StyleCop). It's not a productive use of human time or memory to have a document like this. A better coding standards guide or style guide would give recommendations that lead to intelligible and productive coding. Recommendations for scoping, encapsulation, degree of abstraction, and so on.
Just found this today, and it really helped my situation. Thought i'd share.
Never seen this. Looks interesting.
jsreport does support CSS we are using it a lot
Thanks for your input!, maybe Im way too new to programming and have never used Select and Aggregate :(. will research into them . The server its a B2S24 GiB8 GiB. I have never done a system that have this amount db usage. Imagine it will be at least 125 modules in the first project , with 50k rows each . Maybe more The Totals Rows and Words , I added them as columns and are never changed . Each Module is a CSV file imported and each Segment is a row of that CSV . The submodule are people that do things with the segments , when importing i create a Default submodule that is the child of the module and parent to all segments . Here when creating all the rows i already create module and submodule with the Totals since they wont change. &amp;#x200B; Can you please help me with the query? With 1 I can extrapolate the others . Updating models on top , and my normal query
Got a B2S **VCPU**2 RAM 4 GiB Disk 8 GiB from azure. Hi , thanks for the info , will study it now ! The Modules and Submodules Total words never change The module is a file from CSV , submodules are splits of this file and the segments are the rows in the file... When the submodules process the segment they go from 0 to 1 in Status , and those are "Completed" Maybe im too new to using Linq , entity , mysql, etc. but have never used Aggregate and Select. Will look into them. This are my models: Module: public int Id { get; set; } public int TotalRows { get; set; } public int TotalWords { get; set; } \[NotMapped\] public virtual int CompletedRows { get; set; } \[NotMapped\] public virtual int CompletedWords { get; set; } public virtual ICollection&lt;Submodules&gt; Submodules { get; set; } &amp;#x200B; Submodule public int Id { get; set; } public int ModuleId { get; set; } public int TotalRows { get; set; } public int TotalWords { get; set; } \[NotMapped\] public virtual int CompletedRows { get; set; } \[NotMapped\] public virtual int CompletedWords { get; set; } public virtual Modules Module { get; set; } public virtual ICollection&lt;Segments&gt; Segments { get; set; } &amp;#x200B; Segment: public int Id { get; set; } public int Status { get; set; } public int SubmoduleId { get; set; } public virtual Submodules Submodule { get; set; } &amp;#x200B; Query im now running for getting submodules (list since im returning them to angular) \_context.Submodules.Where(x=&gt;x.ModuleId==id).ToList();
Hats off to the developer of this library. It is a great idea and I think many C#/MongoDB devs will find it really useful. The legance of Linq and the power of MongoDB are a great combination.
.Aggregate() in LINQ allows you to loop once.
There's surprisingly little here that I disagree with, which is probably because its strongly based on the regular Microsoft coding standard with a few modifications for patterns that the community in general has kind of adopted over the years. Now, if only someone could convince the stylecop guys to update all their rules to follow these instead of the "letter of the law" of the original Microsoft standards so I don't have to always modify those settings to turn off things like "using statements in namespace", etc....
Rotativa!!! It converts your html page to pdf! It is so unbelievably simple! [tutorial](https://www.c-sharpcorner.com/article/creating-pdf-in-asp-net-core-mvc-using-rotativa-aspnetcore/) . Second section includes 2 files you need to download [here](https://gunnarpeipman.com/aspnet/aspnet-core-pdf/) . JUST MAKE SURE you download the core version!
&gt; Each Module is a CSV file imported and each Segment is a row of that CSV Hold up, that seems different than this explanation: &gt; Modules 1-N Submodules &gt; Submodules 1-N Segments Please clear this up. I don't get it.
I'm not going to write your code for you. I posted links for two different paths, take some time to try those out. I'm still confused on exactly what your data structure is, and the more you post the more confused I seem to be getting.
The module is a file we get from a client, The segments are the rows The submodules are different persons that process batches of rows, first when I import I create 1 default submodule to set the rows an SubmoduleId , After that the admin will Split the rows into new Submodules. For example we get a 2000 row file , i import it into 1 Module , with 1 default submodule and all the rows assigned to it . The admin then has 10 people working so he splits the file into 9 new submodules and the default one with 200 rows each
Try something like this: select distinct sum(wordcount) over partition by (submoduleid, completed) as words_per_submodule_and_status, count(*) over partition by (submoduleid) as rows_per_submodule, sum(wordcount) over partition by (moduleid, completed) as words_per_module_and_status, count(*) over partition by (moduleid) as rows_per_module, -- this might work, multiple the completed bit by the wordcount, not 100% sure, may have to cast completed to number or something sum(wordcount*completed) over partition by (moduleid) as words_completed_by_module, from allmyrows
We pass HTML to headless Chrome running in a Docker container. Headers and Footers for the document are tricky and requires creative HTML; but it works fairly well.
That has never happened to me, I'm too superior for that... \*nervously look around\*
It's likely because the use of uint may result in many casts when working with other people's code or libraries. It depends on your use case but I suppose the advice is to prevent potential for future issues unless you're guaranteed to only need an unsigned value.
Did this: &amp;#x200B; `var query = _context.Submodules.Where(t =&gt; t.Id == id)` `.Select(e =&gt; new Submodules{` `Id = e.Id,` `Name = e.Name,` `Status = e.Status,` `Token = e.Token,` `ModuleId = e.ModuleId,` `Gender = e.Gender,` `TotalRows = e.TotalRows,` `TotalWords = e.TotalWords,` `CompletedWords = e.Segments.Where(a =&gt; a.Status == Abr.Recorded).Sum(y=&gt; y.Wordcount),` `CompletedRows = e.Segments.Where(a =&gt; a.Status == Abr.Recorded).Count()` `}).ToList();` &amp;#x200B; Now the problem is this translates to: `SELECT \`t\`.\`ID\`, \`t\`.\`name\`, \`t\`.\`status\`, \`t\`.\`token\`, \`t\`.\`moduleID\`, \`t\`.\`gender\`, \`t\`.\`total_rows\` AS \`TotalRows\`, \`t\`.\`total_words\` AS \`TotalWords\`, (` `SELECT SUM(\`a\`.\`wordcount\`)` `FROM \`segments\` AS \`a\`` `WHERE (\`a\`.\`status\` = 1) AND (\`t\`.\`ID\` = \`a\`.\`submoduleID\`)` `) AS \`CompletedWords\`, (` `SELECT COUNT(*)` `FROM \`segments\` AS \`a0\`` `WHERE (\`a0\`.\`status\` = 1) AND (\`t\`.\`ID\` = \`a0\`.\`submoduleID\`)` `) AS \`CompletedRows\`` `FROM \`submodules\` AS \`t\`` `WHERE \`t\`.\`ID\` = @__id_0` &amp;#x200B; There you can see its using 2 selects to the Segments table... should be a select Count(\*) , Sum(Wordcount) and then get that into their respective variables
It's a cluster
I wish there was a solution that didn't require nodejs
You should really think about globalizing that connection string somehow so it's only in one spot
I did - the typo was in that one spot
Ahh gotcha
If you're planning to use EF you should learn and use LINQ. If you prefer writing SQL by hand there's no reason to use EF, just use Dapper instead.
Appreciate it!
Don't box flowers. They should be left exposed to air and light or they'll wilt. Also try to avoid stacking them or you might get a stack overflow.
You don't have to inject interfaces. You can I next a concrete class. The object can be configured prior to injection. Second reason: for easy refactoring. It is very easy to refactor later if you decide to use interface at a later point, as no class deal with the concrete instantiation. The "For testing" argument is BS.
will look in to it
yep this is also possible: ``` var author = DB.Collection&lt;Author&gt;() .Where(a =&gt; a.Name == "Test") .FirstOrDefault(); ```
`uint` isn't CLS compliant, but I don't think this actually matters any more in any real world scenarios.
Thanks a lot! Will check this out!
thanks! the official driver is a bit intimidating and i found myself writing the same code (sometimes unreadable) over and over again. hence this library :-)
Why should I use this as opposed to linq with the official mongo driver?
convenience and code maintainability. have a look at this sample code. it's more clean and human friendly than driver code imho. https://github.com/dj-nitehawk/MongoDB.Entities/blob/master/Examples/Program.cs
I'm pretty sure you're both wrong
Testing for empty string using length was faster, and recommended, in VB6 and earlier but then you weren't using instance methods which works on null. Early .net recommended testing by comparison to string.empty as it was interned. Later versions provided all the helper methods like IsNullOrEmpty().
Does this use `find` or `aggregate` under the hood? Previously I was using the `IQueryable` api from the library, but we were having (what we could only guess were) performance issues with the aggregation framework. Their DSL uses `find` under the hood, which we have switched to for the time being.
Have you tried using name=‚ÄúShowDate‚Äù on the html input type
`&lt;input type="text" id="ShowDate" name="ShowDate" placeholder="Select Date.." data-input&gt;` That should do it. Helpers are there to do just that, help generate proper HTML. If you open your browser's dev tools and inspect, you'll see that it's just standard HTML being generated by TextBoxFor and EditorFor.
Same approach here. I use `var` everywhere. It is not a big deal as usually you don't really care what the type is but more what the API is, which you can clearly see by the methods or properties that are used. And in any case, VS (or other IDE) will show you the type when hovering over it.
Use the html attribute ‚Äúname‚Äù. When you do a postback .net will bind the value of that html control to the model property with the same name. If you have any questions let me k ow.
Your source is really extensive: https://github.com/norgelera/poco.mapper
Is this an opensource library because I see no source. Its licensed under BSD-2 which would mean I should have access to the source but there is none. Additionally usually a mapper is used to map two existing datamodels. The idea that I have to add attributes to one side of my model in order to map it to the other one is a non starter. That would mean I have to modify an existing datamodel which is generally not something I want to do.
I name my namespaces in standard Company.App formats, and name all my repos to match the root namespace of my app. Adjust namespace accordingly to however you guys need to split things up.
Great article. I think he makes a couple of small errors here: &gt; The brute-force task described above is easily parallelized. We could, for example, spawn 17 threads (0-16), each testing all keys with the first byte fixed to a value from 0-16. &amp;#x200B; There would be 16 threads, one for each combination of 4 bits, ie 0000 to 1111.
All string literals are interned. This has always been true. Whatever advantage `String.Empty` has, that's not it.
There‚Äôs the readme file, what more do you want? /s OP what does this do that the well established AutoMapper doesn‚Äôt already do?
The question is strange, what are you trying to do? Is "ShowDate" in your model of type DateTime? In which case why would you want the input type to be text? Have you included the Script reference for flatpickr? and the JS initialisation code. Otherwise why not use the default dt picker?
This is correct. The name attribute of inputs is used in form posts to name the field. If you use this in multiple places, make your own editor template for the date picker, e.g. ‚Äùmydatepicker.cshtml‚Äù so you can use editorfor in the future like this Html.EditorFor(o =&gt; Model.ShowDate, ‚Äùmydatepicker‚Äù). Google asp.net mvc editor templates to learn more
Sound very interesting, I'd love to play!
Looks like a great idea for our next games night!
Sorry, forgot to upload the source in GitHub (you can see it now). The repository is saved in Azure DevOps tho.
Not really much. This does not really mean to be replacement for AutoMapper. I think it's simplicity over AutoMapper for projects that only require simple mapping solutions is what makes this nice (I think).
Sorry, forgot to upload the source in GitHub (you can see it now). The repository is saved in Azure DevOps tho. &amp;#x200B; Well, it all comes down to preferences. If you prefer to create mapping configs similar to AutoMapper over just adding attributes, then it's also okay. Not much of a problem actually. This is meant for those who just need a simple model mapping solution without actually.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/csharp] [Extend a CLR event to improve your monitoring system](https://www.reddit.com/r/csharp/comments/bhjpg2/extend_a_clr_event_to_improve_your_monitoring/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
I would recommend Umbraco as good .NET CMS Refer: [https://umbraco.com/](https://umbraco.com/)
That‚Äôs wonderful. I hope that some hero cards might have also a slight negative effect or a drawback. Adding rockstars is not always free ;)
yeah this exposes the official driver's `.AsQueryables` in a more convienient way. have a look at these [code samples](https://github.com/dj-nitehawk/MongoDB.Entities/blob/master/Examples/Program.cs) and you will see what i mean. btw would it be possible to share some code that can reproduce the performance issues with aggregation you've experienced. would be interesting to see what's going on as i haven't noticed anything. i have a couple of apps in production with over a million records and everything seems to be running smoothly.
Hi. I just tried Rotativa and it's really great! I just want to ask if there's a way to auto download the pdf without previewing the view page/pdf?
Good bot
Thank you, KryptosFR, for voting on TotesMessenger. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://botrank.pastimes.eu/). *** ^(Even if I don't reply to your comment, I'm still listening for votes. Check the webpage to see if your vote registered!)
the latest is enough. however if you will develop another application on 2.2 you would need one for 2.1 and one for 2.2, but you only have sdk's for 2.1 so you can keep just one.
Thanks. I forgot to mention that I have some Xamarin projects as well. Would they be affected?
Possibly related: [https://www.hanselman.com/blog/ScriptsToRemoveOldNETCoreSDKs.aspx](https://www.hanselman.com/blog/ScriptsToRemoveOldNETCoreSDKs.aspx)
I use it quite a bit, esp for moving data - do you work in c# or f#?
I am guilty of building trees in linq and am the demon lord. A lot of time gets spent trying to think of names for these stupid things, seriously. That's why I don't do it lol just take it out into a helper class (esp when passing data around by id's!!) You can roll your own custom for that too which is really nice for caching. The no naming part of it is the best part I reckon
Our office is crazy about board games. We'd definitely want to try this ASAP. Good work!
Microsoft is the bomb straight up. Too many haters for no reason
I see your a master of words, I would love to see your work.
Our problem was just that we were dealing with way too much data. Our best guess was that aggregation was doing something different enough inside of mongo to make the materialization of the data take much longer than find. So we switched and just left it.
Yeah, I'll wear that. I was gearing up to argue the finer points but after finding https://stackoverflow.com/q/151472, I'll pull my head in. Ain't nothing simple.
Yeah I don't get it either. I think it's just trendy to hate MS at this point.
Which is where? I could send you a prototype to try it out:)
I can organize prototyping soon:)
no. as said you can just look at MAJOR.MINOR.PATCH, you need to keep the latest MAJOR.MINOR version, but you do not need ALL patch releases.
This looks really really good. Will give it a spin this weekend. Despite the knock against Mongodb we have always found it great for proof of concept. MVPs and small to medium apps
&gt; Ain't nothing simple. Truth. Also why I abstain from these kinds of performance micro-optimizations until I can measure the problem, which is usually never. Compilers and execution environments are so fancy that no mere mortal can predict what something like this is going to do. But I do know what I think is readable. So personally, I always use `""` instead of `String.Empty`.
I'd like to see modelling moved into databases. Using C# to describe what essentially field attributes is **not the best human-machine interface** to such. Plus, relationships etc. can be more easily described. I suppose this is back to the idea of CASE tools to some extent. The idea wasn't wrong, just the implementation and cost. Navigation can also be table-ized.
We're (ServiceStack) maintaining a number of Vue, Nuxt and Vuetify .NET Core Project templates at: &amp;#x200B; \- [Vue Project Templates](https://docs.servicestack.net/templates-vue) \- [Vuetify Project Templates](https://docs.servicestack.net/templates-vuetify) \- [Vue/Nuxt Project Templates](https://docs.servicestack.net/templates-nuxt) \- [Vue "lite" Project Templates](https://docs.servicestack.net/templates-lite) &amp;#x200B; I'm especially excited about our "lite" project templates which are a "pure" .NET Core App with hot-reloading without needing the complexity of npm/Webpack.
&gt;Most DevOps stuff online revolves around Linux and I know the 5 videos (hopefully just so far) in this series are focused on the code rather than infrastructure - but I'm glad I have a few hours of content to watch and hopefully gain insight from! Let us know what you think. We're going to release 8 videos in total
Rider took a bit of getting used to after using VS for so long, but I really like it. Ive done all these things on Rider on OS X. I do have the all products pack, so I dont know what comes with a bare rider license.
Visual Studio for Mac, Visual Studio Code or Rider are all good options on MacOs. I mainly use Visual Studio code + the C# extension. Rider is pretty nice too. I've recently started playing with that. I used to run a Windows VM just for Visual Studio for a previous job I had. I think the tools are mature enough on MacOS to not have to do that anymore. I'd love you here your thoughts are you try it out
So I brought a 2015 Macbook a few years ago and one of my aims was to run a Windows VM via Parallels for Visual Studio + Resharper. It works really well and I think you'd be fine doing this. However, I've actually moved to entirely Rider on OS X. The reasons for this are two fold: * Performance (including battery drain) * Most of what I want to accomplish are easier in Rider for me (such as Linq refactoring), especially since I've started (read: forced) to use IntelliJ for work. There are no bad choices, and I would warn even using Rider you may need to spin up a VM now and then to do some missing things - for me, that's typically some SQL work in Management Studio, scaffolding Identity into a project, which you can't do in Rider or some Azure stuff which plays much nicer with actual Visual Studio. ***TLDR: There are no bad choices in IT only trade offs.***
Yep, we have a playlist here [https://www.youtube.com/playlist?list=PLlrxD0HtieHgaH7L8UwhPztKDsdZBGZsj](https://www.youtube.com/playlist?list=PLlrxD0HtieHgaH7L8UwhPztKDsdZBGZsj) :)
I'm a big fan of pluralsight as well. The only other thing I'd recommend is looking into [the ASP.NET Documentation](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2). They keep it pretty up to date, it's open source, and it covers most of what you need to know.
Ah thank you, I didnt know that all you needed was the name= property.
Yeah thats correct. I used flatpickr cause I didnt know there was a default dt picker!
Are you kidd'in? You expose official driver Linq and say that you realize it? Not atomic relations e.t.c. This is shit, sorry
Expected unicorns and other silly stuff, found useful diagrams
Ok here's a game I can play with my dad. I'm gonna jump on to that prototype as soon as it drops, already subscribed!
We run one at work (dev company), I sent a link to the organiser and he liked it too!
I might suggest making your hero cards more generic characters than specific people. It is your game and do what you want but generic characters you could probably do some pretty cool artwork.
If you have prototypes my friends and I would love to test for you. We get together every friday and play games.
That's so poetic.
I can definitely allocate some bandwidth to this :-)
Enjoy the peace of mind that an awesome development machine can bring
Whit all the new features in vs2019 I find my self using it less and less. I have switched to Rider for .NET Core development which is much faster then vs and has integrated. You could use Rider for the full framework as well but there is no designer for desktop apps. Rider also does not currently support azure functions. This is supposed to be coming in the 2019.1 release as far as I know along with some sort of designer.
Of course, almost all the problems can be fixed if you throw enough resources at it. Unfortunately you do not always have control over what dev-machine you can use.
Use Rider
32GB RAM
Using Rider
false premise, I don't have any lag with or without it
Klonopin and vodka.
I turn off VS features that I don't need because I'm using R#: Code lenses, full solution analysis, etc. My VS lags less (if at all) than my co-workers without R#. Also, I feel that the Enterprise edition is slower than the simpler versions. So i try to avoid it.
Do you honestly need resharper with the newer versions of VS?
Disable it Was too much on our large production projects
Half for hyper v Half for VS The hogs on my comp
With the recent upgrade to vs2019, I've got it disabled. There are a few things I miss, but will ultimately be cancelling my subscription. Resharper + vs2019 = unusable on my box.
I've never had any trouble with lag from using resharper.
Same very never understood the claim that it lags VS. Literally never noticed.
For me it only lags - even for big projects - when the file is like 10k lines long. Smaller files in the 1-2kloc range are fine.
1. Uninstall R#. 2. Install Roslynator.
Only lag I see is in loading. But I have a 2 year old machine with heaps of ram.
And an SSD/Core i7!
I mainly use it for it‚Äôs test runner. VS is still lagging in that area imo
Works fine for me
by uninstalling it..
For SQL work, have you tried SQL Operations Studio? It's sort of a cross plarform SSMS.
Doesn't lag for me in vs2019 for some reason. On 2017 it was unbearable. So much lag per keyboard click,
With solution wide analysis turned off I only seem to get lag when I first open a solution. Once that's settled I don't have any issues. I think the main thing is disabling solution wide analysis.
NCrunch baby! Though that can slow down your machine a bit too if you're running too many tests in parallel / not using grid node. But I highly recommend it, it makes writing code so much nicer to get near instant feedback on test coverage / if you broke any tests.
I‚Äôve tried using it in the past several times, but dear fucking lord does it bog down VS.
I still use it, it's jump to code/views is still better than the default implementation, as is code formatting. I also can't get vs to fix namespaces folder or solution wide when I decide to move a mass number of classes to somewhere else. There are probably others I'm forgetting but I dislike coding at home because I don't have ReSharper installed (I don't install it for the sake of trying out latest versions of vs without it). I'm still waiting for the day I don't need it but for now, I still prefer using it
it's been over a year since I worked on a c# project, but it was a huge project (200+ projects) and I just disabled resharper and didn't really miss it after getting used to living without it. I agree tho on jump to file is a lot better in resharper but it wasn't worth the massive lag that resharper caused
10k lines... I guess the lag is just a hint by R# to do some refactoring...
If I remember correctly vs enterprise has a better test runner also
With Scotch
If you are using pages that require a master page, then I believe that you need to set a default one in the page directive and then change it to whatever other master page you require in preinit.
Resharper has a really good guide on their site that I followed and it works really well now. One example is excluding analysis of certain files, like js libraries.
Yeap having tried enterprise VS at work it has a great test runner. You could see on the code realtime what's not covered on tests, passes, fails, and running tests. Also shows which line on a failing test hit in case of exceptions. Also instant feedback as you type which is great. Kinda miss it while using my personal pro vs at home. Though i can't justify forking cash for the enterprise license.
That's the route I took. I couldn't remember all the hotkeys anyway. And now my projects open in about 2 seconds instead of nearly 30.
Buy a cheap workstation.
Hello brother.
At work it was this. At home I have 32gb as well. But on my MacBook I have been using rider and it is actually amazing. I‚Äôve considered switching to it on windows as well.
My projects are in the single digits on any one solution, so it's not so bad. I can definitely imagine how a large project would become unusable
i9, 32 gb of RAM, and an m.2 SSD
Using Rider on Linux, macOS and Windows. We do mostly web API / web MVC / console apps - so it works.
It's nice, but if you're the only person on the team that uses it... your team mates will run tests that work fine in MSBuild (or on the CI/CD pipeline) but fail to run in NCrunch. I've moved over to Rider now. I can turn on "test on build", select a subset of tests to run, and still see line coverage in the left-gutter. It's just 'different' but it's working fine now that I've learned how to drive it.
You mean Azure data Studio?
I've switched over to 80% Rider (in macOS / Windows) and 19% VSCode (macOS / Windows / Linux) and 1% Visual Studio. Sometimes I don't need Rider's power (I'll use VSCode), or I need something specific that only VS does (Nuget consolidate packages UI).
Threadripper, 32GB memory, solid state disk.
I was someone who was addicted to ReSharper but at the same time extremely frustrated with the price I have to pay to use it. Over few months I have reduced the dependency on ReSharper significantly. The VS in-built features are quite comparable to ReSharper. VS 2019 has gone a long way to help me reduce the dependency further. In addition, using ReSharper for such long time has helped to create a mental map and I tend to fix the code without it for most of the time. That said, I still enable the ReSharper plugin every now and then to see the green tick on the top right.
Disable and use vs 2019
I only find it slow on opening a project. I keep trying not to use it but after an hour without it I miss all my keyboard shortcuts I have learned over many years of resharper use
I made the switch to rider a few months back. So far no regrets.
Start using [ASP .NET Core](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2). There's a built-in [MVC framework](https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.2) you can use, which is pretty similar to Laravel. I created a .NET library called [Coravel](https://github.com/jamesmh/coravel) that brings in some features that are familiar from Laravel, but not present in .NET Core (at least in a very accessible manner).
Heard good things about Roslynator and CodeMaid
What in particular would like to see improved?
No lag, but VS just crashing too often. Switched to Rider, much better. But it's debugging is not perfect.
Just upgraded yesterday - it‚Äôs pretty sleek üòé
Yeah that's true, it can be a bit tricky to setup, and sometimes tests will seem to fail for no reason but pass on rerun (I suspect it's probably something like shared data and running tests in parallel). I completely disable it for the integration style tests that use a DB backup for example, as I had a lot of trouble getting it working with copying files to build output etc. With that said, it saves me a huge amount of time when refactoring or writing new code, and can also be a pretty good way of finding performance issues on particular methods based on the line indicators. I haven't tried Rider yet, but that sounds pretty cool.
My current shop is moving away from it with VS2019 towards .editorconfig + Roslynator + CodeMaid. I personally can't stand the lag it brings and I lose my coding zen waiting for it to catch up with me so I never even installed my company provided license.
Test runner is great; generate code (especially ctor and adding a new member to the ctor signature, equality methods); and _accuracy_ of rename refactor are irreplaceable for me. Rider is pretty great, it sucks at running Xamarin Forms projects though, and is somehow missing a few of the refactoring that r# has.
Disable CodeLens or use JetBrains Rider (Resharper as a standalone IDE).
Your post has been removed. Self promotion posts are not allowed.
By uninstalling it.
Is the functions comparable to visual studio?
Put a breakpoint at the first line of the post method in your controller and step through. If it never hits the breakpoint, it's probably a routing issue. If it does, stepping through should tell you where and what the problem is
Make sure you have httpget attribute on your method and specify the route attribute as well.
Well the POST is successful because I can see the records being added through the azure portal
It has the proper routing attribute. When I change the connection strings to point to a local db everything works fine
Pretty sure only the next version will be officially compatible with vs19
CodeMaid is fairly decent
I installed visual studio 2019 and it was really fast with no lags. Installed ReSharper and it went back to same old, lag on loading project, hanging. Finally uninstalled ReSharper and installed roselynator and codemaid. It does almost everything I need. All I had to do was to add some keyboard shortcuts. I would not want to install ReSharper again.
There are several resharper features that substantially improve my efficiency. As a result I‚Äôve done a fair bit of configuration for both VS and for resharper to make it usable in the relatively large solutions that I work on. One thing that helped a lot was turning off code lens - while it is useful, for me the biggest use case was finding references and that was easy enough to keybind.
It does not solve the lag.
&gt;Mongo still can't see essential difference
Nice work getting your PR merged. It's a great feeling when the repo owner doesn't ignore your PR!
Core i9 but yea
Coravel, Nice!
I reddit. So do you. Duh... (Submitted during work hours, no?)
!RemindMe 7 hours
I will be messaging you on [**2019-04-27 13:18:07 UTC**](http://www.wolframalpha.com/input/?i=2019-04-27 13:18:07 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/dotnet/comments/bhr20p/those_who_use_resharper_how_do_you_mentally/elw9pn3/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/dotnet/comments/bhr20p/those_who_use_resharper_how_do_you_mentally/elw9pn3/]%0A%0ARemindMe! 7 hours) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Split your solution. We now use several git repositories and use a private nuget package server to share code between them. We do this for other reasons, like faster CI/CD and being able to work on a prerelease version of a library while the consumers of that library can stay on a stable version, but it also has the side bonus that resharper doesn't bring visual studio to a grinding halt.
If your files are 1k lines long you have other problems besides VS performance
I personally did: &amp;#x200B; \- Uninstall R# \- Install Rider
Regular cursing
I use Azure Data Studio for most things but it's taking some getting used to and is missing functionality (plus the workflow / tabs is a bit weird to me). It's excellent for quick changes but for heavy duty production / migrations work I do need SSMS (for redgate etc). But for most developers managing say a local database, its excellent.
r7, 16gb RAM, 970 Evo plus.
Which base image are you using, server core or nano server? I'll have a look at it next week to see if I can get any insight. My expectation is that it's to do with the remote debugging protocol taking a lot longer to send messages back and forth over the networking bridge (it essentially runs a remote debugger, like you would for a remote server). Also, are you using vscode or vs2019?
Yeah, apparently they changed the name
As soon as R# started getting slow with VS, I sadly uninstalled it... Then happily moved to Rider which I find faster (and cheaper) than VS even without R#. It also has so many QoL features that my VS 2019 colleagues are often jealous (mostly opting not to move because they're concerned about moving to a tool they're not familiar with). In my opinion though, if you're not working on a project with C++ interop or something else which Rider fails on, JetBrains have snagged the lead this year.
Have you tried disabling the SSL certificate verification within Postman? (File -&gt; Settings -&gt; General) Probably not the case as it's clearly HTTP, not HTTPS but it might be worth a try. Failing that... Try using Fiddler to capture the request and response to see what is going on.
Download the Resharper release candidate, it works much better than the officially released version and as far as I can tell has no issues.
Perhaps post the resulting HTML, since this is probably not .NET related.
&gt; Because you‚Äôre overriding behavior in a way not intended by the original developer, there are no guarantees that your patch code will work if they release a new version of their code. This is the classical "can I do that" vs. the more problematic "should I do that". In every case, the answers starts out as "you probably **could** do that in some way" and you will normally end up on "NOPE" or "never again", most times.
Doesn't solve all your problems, but https://blog.jetbrains.com/dotnet/2019/04/10/code-coverage-macos-linux-rider-2019-1/
+1 Mapped it to a keyboard shortcut. Pretty much use it only when I explicitly want something, otherwise it's always off.
what this library offers you is convenience and better looking/ readable code. nothing more... nothing less... ;-)
ikr! take a look at all the nice features that are coming to VS 2019, resharper is looking less and less relevant, IMO. https://youtu.be/KsGnywKg1vU
I assume you do only .net core right?
Holy damn what are you working on?
Think you'll need to specify IDs for each navbar and add a data-target attribute. See https://stackoverflow.com/questions/20699940/bootstrap-two-navbars-collapsing
I would ask the same question. I9 9900K, 32GB RAM, NVMe SSD... and it slows everything down to a crawl. I appreciate the features, but for me writing code is primarily about writing. I cannot stand any lag when I type or navigate the files.
Yeah... What it basically says is turn all the features off. So why use it at all?
Must say this is cool but I don't know if I dear use it
This is something I still miss on VS. Moving classes or renaming namespaces is so much manual work.
Correct. I have the Windows VM encase of legacy, but it's another reason to be a daily driver. The new Core + Docker standard seems to work really well on a Linux / OS X type of setup. But obviously your mileage may vary.
By reminding myself that i am facing worse problems.
thank you, Im not sure how I missed that amidst all my searches.
Yes and no. 1. The lack of WinForms support in Rider is a pretty big one, especially for the client that I work at. They have an approx. 11 year old application written in WinForms. 2. The lack of database first support in Rider irks me sometimes. 3. I find the WPF support in Rider to be clunky. It's not as fluid as Visual Studio. 4. I prefer Visual Studio's NuGet UI. 5. I find Rider vastly more responsive than Visual Studio. 6. The rename project refactoring in Rider is a godsend. 7. The built-in Resharper support in Rider is awesome. 8. The lack of IL code viewing in Rider is a pain. 9. The lack of edit-and-continue functionality in Rider is a pain (though it's in the 2019.1 EAP)
Great article, come back for a second read and sadly Mark's site is down. Does anyone have a cached copy?
Those who doesn't install/use R# are one of those people: 1. don't know what functionality it brings and states that another set of extensions could have similar functionality. 2. are old fashioned / old school dev nijas who know every extension and namespace so one very important thing R# does is obsolete. 3. works in companies that saves money on worker and do not want to buy R# because they spend a lot of money for visual studio (or insert any other stupid reason) 4. works on huge monolith and companies do not want to upgrade their workstations 5. those who accept hate to R# and their only argument is "no" 6. those who can't afford it This was only my observation so I can be wrong. I assume that point 1 is most popular through my colleges. Some of them states "I don't know if I need resharper", "I've disabled something that vs states is slowing down but now where is my instellisense - what? Vs cannot do that?", " Wait, how did you do that? What? I cannot do it without R#?", "Wait you can search through decompiled code to see usages in external libraries?", "I didn't know I can do that". PS I do not feel lags - there are some tips on Internet how to tweak resharper performance. PS 2 Resharper is going to be separate process in future so all of those blames that it slows down would not be related anymore).
Just use Rider. Much better IDE anyways.
10k long? Dude, you need to start refactoring.
Sorry ..meant the GET method
Iirc, WinForms support and an IL viewer are also in 2019.1.
Because your VS lags ? Mine don't lag at all.
Ya so as mentioned above, the controller actually doesn‚Äôt get hit, so it makes me think it is environmental
In VS, on the application output window, there will be an entry for each request that comes into the server. Can you share the entries from the GET request?
 For those who prefer Reddit over newsletter, and would like to track progress - here is [/r/outofmemorygame](https://www.reddit.com/r/outofmemorygame/)
It feels like Hungarian notation or something. You have an IDE that can tell you if variables are function scope or class scope. In my projects, we use `int _classScope' and `int functionScope`. It's readable and I see it more often. The `_` helps :)
I use Rider instead. It has Resharper + every other Dev tool I need in a single IDE without the clunkiness of VS.
yes vs code
Browsing through Coravel now. Very nice!
It depends on hardware, solution, extensions, etc. That's why I compare to coworkers working on the same solution.
Nanoserver 1803. Linux containers also have the issue but they're much, much worse. Like 10s latency minimum for an exception, often 20+. I am using VS 2017 Pro, but a colleague tried 2019 and said that it was about 20% faster.
Idk if that is all that far off the beaten path, are you doing .Net Framework code or Core?
A more-than-a-decade vim user here. I'd tried to code C# using Neovim + Omnisharp, I finally gave up and now stick with Rider + [IdeaVim]. Omnisharp didn't work well on Vim unlike on VS Code. The connection between Ominsharp backend and Vim had frequently disconnected, and it was common to fail to load referenced assemblies. It was about a year ago and it may work well though. I've used both .NET Core and Mono. [IdeaVim]: https://github.com/JetBrains/ideavim
Omnisharp is what I use for Emacs. I haven't notices any disconnect issues, but really wish MS would make a debugger available.
AFAIK there are no (or few at least) options to measure .NET code's coverage on Linux or macOS. While I write the most of C# code on my macOS with Rider, I measure my code's coverage on Travis CI (it recently started to offer Windows environment) or Azure Pipelines.
https://github.com/dotnet/coreclr/tree/master/src/System.Private.CoreLib/shared/System/Collections/Generic https://github.com/dotnet/corefx/tree/master/src/System.Collections/src/System/Collections/Generic
Ok, this I will have to try.
nCrunch provides real-time testing and code coverage. If that's all you're missing from ultimate it's a fraction of the price.
Yeap having the real-time testing and code coverage really helps doing TDD a lot. Thanks for the suggestion, will be checking it later.
https://github.com/sestoft/C5
Or you could just use Reflection...
I've tried a lot install omnisharp in vim on windows 7 and using it from powershell but without positive results, so lets back to vscode
This is not the same. If someone creates a library and (for example) you want to integrate it with your logger, you might need to modify some private class methods inside DLL. Good luck doing that with reflection.
By using CodeRush instead
I use vim everywhere. There‚Äôs great plugins for most editors and I use cli vim for many things as well. I don‚Äôt think I‚Äôd be nearly as productive without vim, everything i do is just slightly faster.
Have a look at https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture and https://devmentors.io/distributed-net-core
Not off the beaten path, but it's a robust editor, and lacks the relative hand holding IDEs like VS and Rider do. Personally I occasionally use it for dotnet core work, but not framework. I do use it exclusively for JavaScript (generally React)
I discourage devmentors course - guys having "funny" chat half of the time, and when it get to technical stuff they get super speed without proper basic explanation what is going on (even though some concepts are crucial and/or complicated). I was disappointed.
I'm using vscode with the Vim extension for work, back at home I only use Vim
Which parts do you think they skipped over without going into enough detail? I've watched up until part 12 of their series and I felt like their explanations of concepts we're pretty thorough. The parts that seem skipped over to me seemed to be more in regards to the framework that they rolled for a lot of their common functionality shared across the individual microservice API projects.
Oh, I love Code. I think it is a great tool. I use it occasionally as well for some specific scenarios where it beats out Emacs. I was going to be very interested if someone was using it for framework. I have been working on some sliases and functions to reproduce some if the "behind the scenes things" vs does. (modifying config when adding files, etc.). Was hoping someone might be able to share how they solved some of those things.
The book listed here is a great book. I‚Äôm using it now to also learn Microservices
I could see this in a mocking framework
In our project we have disabled the client side evaluation of EF Core. When client side evaluation happens, it throws an exception. Much better than performance leaks; i do not know why it is not the default.
Sadly, no. Because people type "node" not "node.js". Google Trends have a feature to search by topic: https://trends.google.com/trends/explore?date=all&amp;q=%2Fm%2F0bbxf89,%2Fg%2F11b74lkfxh,asp.net%20core
Well it still doesnt work because it seems I was already doing what the SO page was doing. I am dynamically creating the IDs for each navbar inside a loop. Heres my full code: @foreach (var item in Model) { &lt;tr&gt; &lt;td&gt; &lt;nav class="navbar navbar-collapse navbar-dark"&gt; &lt;a data-toggle="collapse" href="#@item.Title"&gt; @Html.DisplayFor(modelItem =&gt; item.Title) &lt;/a&gt; &lt;div class="collapse navbar-collapse" id="@item.Title"&gt; &lt;img src="@item.FlyerUrl"/&gt; &lt;/div&gt; &lt;/nav&gt; &lt;/td&gt; &lt;td&gt; @Html.DisplayFor(modelItem =&gt; item.ShowDate) &lt;/td&gt; &lt;td&gt; @Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) | @Html.ActionLink("Details", "Details", new { /* id=item.PrimaryKey */ }) | @Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ }) &lt;/td&gt; &lt;/tr&gt; } It works the same with or without the data-target attribute btw. Only the first table element has a working navbar which is my main issue.
I thought about this, but I feel it would just encourage people to write bad code and avoid proper patterns like dependency injection and use of interfaces
https://piotrgankiewicz.com/2018/07/05/net-core-microservices-dshop/
I recently had to deploy a new .net core web app and spent hrs googling how to overcome certain issues I was having. Due to the lack of clear instructions on how to do so. Those trends may not be a positive ones.
You've selected three different categories to compare these similar types of technologies: **Software Developer** for Node.js, **Computer Software** for .NET Core and **Search Term** for ASP.NET Core. I've just used one for all, the Search Term; it's simple yet more unbiased. Yes, people use Node keyword too, but the result leads to errors. For example, the **second top query** we find by using just Node is **lymph node**, nothing related to Node.js. So, for getting more accurate results, we shouldn't categorize them differently (even we don't know those algorithms sorting the searches) and use casual names that may mean something else.
I understand your pain. It's expected as .NET Core is just **three years** old, but Node.js is almost **ten years** old. So, Node.js is far more mature than .NET Core. In the early days, Node.js had similar problems. All new technologies had these, from Golang to Swift. .NET Core is evolving very quickly though and gaining a lot of love from the developers compared to other technologies. Give it some time; these pains will be non-existent.
big fan of .net core but we have to be honest here. Javascript has always had better learning resources compared against ANY .net framework.
or nodejs &amp;#x200B; [https://trends.google.com/trends/explore?date=all&amp;q=node.js,.net%20core,asp.net%20core,nodejs](https://trends.google.com/trends/explore?date=all&amp;q=node.js,.net%20core,asp.net%20core,nodejs)
Search Term is the most biased of all because it count only for the people who entered "node.js" in the search bar. If you select the "Topic" ASP.NET Core, the result almost change. The "categories" you mentionned are only google automaticaly naming a topic. Simply searching for "node.js" is not enough. If i add a "node js" term, magically node is still ahead. You can't count on a keyword to count popularity on a subject. The stackoverflow survey that you linked show the same thing: https://insights.stackoverflow.com/survey/2019/#technology-_-other-frameworks-libraries-and-tools node is still ahead, sadly.
Thanks, this is exactly why you can't rely on the search term.
I do agree; they really love that language and always try to spread that love by helping each other. Their tremendous efforts are paying off. People used to laugh at JavaScript, now it's compared to rock-solid languages like C#, Java etc. Its community is doing a **fantastic** job. I'm afraid the next generation will go after either JavaScript (maybe TypeScript too) or Python, because the best learning resources are being produced in these.
What the hell are you talking about? There is no field - there is no instance. Reflection 101 is used to gain access to internal state of an object, but not change implementation of an existing method declared. That's not even 201 reflection. Dynamic method via Emit reflection is the closest thing and I've met very few who are comfortable doing it. The code posted absolutely rewrites the getter method instead of allowing state
Edit and continue is in 2019.1 too.
Microservice architecture and .Net Core are entirely orthogonal aspects. Learn each individually if you're not finding much about microservice architecture using .Net Core specifically. The same core concepts, challenges, patterns, etc. apply irregardless of language or runtime platform.
You cannot just use one source and draw a conclusion. Specially search terms trends since they are very touchy (do people search for "Node", "Node.js", "Node js", "Node javascript", "express"? + "node" as a meaning outside of IT). You have to combine multiple sources and trends and then maybe you will be able to start to draw a conclusion. I did the job for comparing React, Vue and Angular popularity: https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190 but it's way easier in this case cause these libraries use the same language and platform. Anyway, here a counter example with Stack Overflow that show .NET Core popularity trend behind Node: https://insights.stackoverflow.com/trends?tags=.net%2C.net-core%2Casp.net-core%2Cnode.js%2Cexpress ![Stack-Overflow-Trends-2019](https://i.ibb.co/gZ338H5/Stack-Overflow-Trends-2019.png) It's very difficult to find good numbers for backend web framework popularity trends. It's already easier to compare languages and as you can see C# is declining while JS (+ TypeScript) and Python are rising. So it would be very surprising to see a framework rising significantly (.NET Core) while its platform (C#/.NET) is declining. - https://insights.stackoverflow.com/trends?tags=java%2Cpython%2Cc%23%2Cjavascript%2Cphp - https://insights.stackoverflow.com/survey/2018 - https://insights.stackoverflow.com/survey/2019 - https://octoverse.github.com/2017/ - https://octoverse.github.com/projects#languages - https://redmonk.com/sogrady/2019/03/20/language-rankings-1-19/ - https://redmonk.com/sogrady/2018/03/07/language-rankings-1-18/
Maybe your question wasn't good enough? If you ask a specific question you'll usually get an answer
Saying .NET Core is 3 years old vs Node.js is 10 years old is fallacious. ASP.NET Core is the successor of ASP.NET which has been around since 2002. Node.js started in 2009 by a single then unknown developer (vs Microsoft) and was totally new.
I thought it was pretty specific. It was dealing with custom routes and returning objects.
If you learn about the [.NET Generic Host](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/generic-host?view=aspnetcore-2.2) then you will be equipped to start hosting services cross-platform. Caveat: You also need to study microservice architecture which is its own complicated subject.
These are legitimate use cases but illegitimate ways of doing it. MSBuild uses the DETOURS library to intercept win32 calls for IO observations. But they don't gamble inside BCL. They just hook into the exit points of the BCL without disruption of BCL itself. That's what comment OP was trying to do anyways... Toggle off side effects just before they happen to guarantee the most realistic test scenario without actually having side effects.
I‚Äôve seen autocorrect fail even with everything configured properly
Yep, I'm sick of hearing 'oh I can auto format in VS' and things of that nature.
Do you have an example...? I've deployed them to Azure and on-prem without any hiccups and I certainly wouldn't call myself an infrastructure/devops/whatever word they are using these days engineer.
Nice Job!
Sometimes I use Emacs with Omnisharp for writing C# (on dotnet core). My typical workflow is having keybindings for frequently used commands and "helm" for the rest. I also use "projectile" for navigating through files and directories as well as text search. Emacs doesn't support debugging so I use VSCode for that. VSCode is better for refactoring and overall code navigation in my opinion but for writing code I feel more productive using Emacs.
Check out [https://github.com/dotnet-architecture/eShopOnContainers](https://github.com/dotnet-architecture/eShopOnContainers) It is a pretty complete example application.
FineReport, it's a reporting tool supports .NET Core and can export reports in PDF. My company uses its enterprise version. I feel that it's easy to use and the functions are powerful. I think you can use its free version for personal use with the activation code from their [website](http://www.finereport.com/en/product?utm_source=reddit&amp;utm_medium=media&amp;utm_term=0428_2&amp;utm_content=0428_2). And its what I found the diffraction between FineReport and Crystal on their website: [Compare FineReport and Crystal Reports](http://www.finereport.com/en/reporting-tools/crystalreport.html?utm_source=reddit&amp;utm_medium=media&amp;utm_term=0428_2&amp;utm_content=0428_2) Hope this will help.
It may be the successor but only in name. The framework is entirely different. Deployment is different.
I was recently working on a project, it was mostly frontend on React and firebase but for payment handling I had to create a back end API. Long story short, I wanted to use dotnet core api but due to lack of support of firebase in C# I just used nodejs as back end and it is really fast to get it running. I love dotnet core but we have to be realistic here the support is not as good as Java, JavaScript or Python.
e.g. Episode 1 [Intro, HTTP requests flow, Infrastructure with Docker] - one can expect that they will cover in at least some details how to setup Docker, some basics, etc. so fresh person could understand it. They just showed existing scripts with barely any explanation what, why and how. Episode 3 [Subscribing RabbitMQ messages, API gateway] - I barelly get any RabbitMQ understanding nor API gateway concept. They just showed it, coded few lines etc. It is maybe ok for people who knows the topic a bit already, but for a freshman it was nothing more than a teaser or "presentation". Definitely not a "course" nor "tutorial". p.s. I have 10y exp in web development, but I have none in microservices, and I didn't get much from their course.
You do know .Net Core is more or less a complete rewrite?
Rather than screwing around with Microservices, go straight ahead with https://dotnet.github.io/orleans/
Stackoverflow would be a good place to ask if you have a very specific question that you cannot find an answer for in the documentation.
Rich ecosystem? It's improving but compared to the Python and the JVM worlds the .NET ecosystem is puny.
.NET Core will only 'arrive' as an equal to other open source communities when .NET libraries are being ported to Java.
I tried Vim and it's definitely doable. My reason for not continuing was my unfamiliarity with Vim rather than and deficiencies with that approach. If you're a Vim power user I'd imagine you can be highly productive.
Yea. I found that I don't need as many refactoring tools when working with text becomes easier. Though there are still things are easier with the dedicated tools.
Let's just say tests are second-class citizens in the code world. /s
I appreciate your enthusiasm for sarcasm, but to become a master you mustn't use /s. *I'm a human being, and this action was performed manually.*
It hasn't but it's catching up
I'm not saying there's no other ecosystem richer than .NET Core; I'm just saying only at the age of three, its ecosystem is rich enough. No doubt there're more mature and richer ecosystems out there, especially the community-driven technologies such as - Python, JavaScript, etc. Richer ecosystems don't imply that other technologies' ecosystems are poor. Maybe .NET Core's ecosystem is not at that level yet, but it's doing amazing, and hopefully someday it will reach that level. I've respect for all technologies; they are here and many of them dominating for a good reason, cheers!
I suppose I could see late binding being beneficial for the repository pattern. It would be easy to test something by just swapping the app.config to your test repository, etc. Otherwise, I'm not seeing how late binding is beneficial for avoiding redeploying your application.
it would be useful for doing feature flagging and A/B testing for new components, as well as allowing you to deploy the same build in dev and prod environments?
I would say you are correct in general. There could be cases where the classes can be added as plugins or something later on without recompiling the application, but in general it might be more of a case of ‚Äúhere‚Äôs all the options available and you can choose which one to use.‚Äù For example, an application could have support for several databases and you can select which one to use, or which logging method, etc. But often they are still built-in. It‚Äôs still better for the user when they can just choose which one to use without recompiling anything after making those changes. New functionality might still require it.
Okay, that makes sense. So my conclusion is accurate for the most part then in that late binding is generally not going to help you avoid redeploying a solution? It's mostly for switching between classes that already exist in a project for testing purposes? &amp;#x200B; Also, how could you add a class as a plugin to an existing application that's deployed? I apologize for my ignorance on this, but I haven't heard of doing this before.
For the late binding example, I would much prefer there being a class which makes a decision on a configuration setting than directly specifying the type. That way you have more robust options for decision making and fallback. Instantiating a class type directly from configuration settings seems a bit dangerous to me.
I never liked this pattern, always thought its over complicating your design and objects seemingly materialize out of nowhere... with a large enough project, making it hard to trace where it comes from. Architecture astronauts should not be allowed to design stuff like these.
You can drop in new dlls without recompiling the whole project
I work on application which has multiple "modes" of operation including different components loaded with different transports possible up to absolutely separate business logic and workflows set up using late binding in ninject. Part of this is controlled by configs (which transport type is enabled for that session) but others are controlled by users - which modes and what target is selected.
For me, the biggest benefits of DI are: * ability to not care about what concrete implementation is used to implement interface; I just request an implementation of some interface and the rest is done by container; * ability to - in case of correctly architected solution - swap implementation without modifying the rest of the code; that is, you still need to recompile, but you don't need to change your factories and such, as you just define what should be provided for the interface in DI container configuration and the rest is taken care of; of course, some test should be run, but when it is done properly, it works like a charm; * have some singleton management (singletons are evil, but they can be tamed pretty well) with DI container * it can be useful when tying things together, for example, if you have MVVM framework project and you need to bind view interface to actual view implementation; then, you can swap it for a test view, you can swap it for some other platforms or just swap it, when you create different interface; still with option to quickly revert in code without actually reverting the codebase. &amp;#x200B; So mostly, it is convenience and good architecture for me. It sometimes forces you to do things seemingly in more complicated ways, but you will benefit from it in the future, at least in case of mid- to large-size codebases.
You can avoid a recompile and full deployment when the new IMessageWriter implementation is in a new separate assembly. Then you only need to deploy the new DLL file and update the config to the new type. You could use a configuration service that reads from a centralized location like a database so that you would not even have to touch the config file. I have something like this running in production since 2006. We have added many plugins over the years without changing the core app. It‚Äôs not something needed for every app; chose the right tool for the job.
I hadn't thought about using a database config. That makes more sense than the app config to me if you were to do this. &amp;#x200B; I don't like the idea of deploying the separate assembly though because most likely that new class should be in the same assembly as the one you're replacing. I suppose sometimes that would make sense.
&gt; It's mostly for switching between classes that already exist in a project for testing purposes? It's quite often utilized for data-driven strategy patterns, selecting a concrete implementation from several available at run time based on your data.
I read that book recently, the authors discuss how late binding isn't always necessary, but it's beneficial in cases where you want to replace one DLL or let clients select dependencies via configuration. It's discussed again near the end of the book.
A couple of other benefits are: 1) The decision around the instance lifetime can be made in the container config. i.e. is a transient object created new each time, is there one instance per http request, or is it a singleton that lives as long as the app? This is now not the class's concern and a singleton has no special code for that; it is in the container config. Of course there is a downside too: you can get this wrong and have a singleton depending on a transient object. 2) Easier to configure caching. e.g. you have an interface ```csharp interface ICustomerRepository { Customer GetCustomer(int id) } ``` And an implementation `DbCustomerRepository` that reads from some data store. All fine. You can then write a caching implementation ```csharp public class CachingCustomerRepository: ICustomerRepository { private ICustomerRepository _inner; public Customer GetCustomer(int id) { // not perfect code but you get the idea, // this class does caching only // and forwards the real read to inner var found = cache.TryGet(id, out result); if (!found) { result = _inner.GetCustomer(id); cache.Add(result); } return result; } } ``` So you can set up the config with either `ICustomerRepository =&gt; new DbCustomerRepository()` or with `ICustomerRepository =&gt; new(CachingCustomerRepository(new DbCustomerRepository())` And then the caching is all in the config. e.g. could be off for some tests.
I wrote an app for a client that ran in different sites and interfaced with multiple types of plc. Each had different configs, wrote to different memory addresses, and ran about 7 instances per site. I was similar to this, but the config was pulled from db on load and the container used a generic factory to instantiate. The change isn't always from needing a new implementation; it can be from needing several based on circumstance.
How do you like to accomplish dependency inversion without dependency injection?
Yes this is an issue. The bar is high for .NET Core because everyone is used to perfect documentation plus they constantly switch configuration (JSON to XML etc.) Too much esoteric configuration will kill .NET Core if they don't fix the problem. I doubt more than a small fraction of .NET devs know how to properly configure a dev pipeline nevermind a prod one. It's two or three times as much as before.
&gt;Also, how could you add a class as a plugin to an existing application that's deployed? Say I want to write a plugin for an application. For simplicity, let's say it's a basic command line application with a bunch of commands that implement an ICommand interface. ICommand is part of a class library that the developers of the application have made available publically (let's say on Nuget.org). My plugin project will reference the nuget package for the class library containing ICommand, and I can write my own concrete ICommand implementations. Let's now assume that the developers of the console app have designed it with late binding in mind. I can drop my plugin DLL with my custom ICommand implementations into some known location (maybe next to the exe in the install folder). And the next time I start up the console app, it scans for assemblies containing ICommand implementations. It picks mine up, and presto, my custom command is now available in the console application. Come to think of it, I just finished reading the 2nd edition of that book, and I think a very similar example is covered at some point.
This ^
Are you just talking about late binding in general... for example a factory pattern? A factory pattern doesn‚Äôt require dependency injection. I‚Äôm specifically talking about the use case of late binding in regards to dependency injection. Maybe I‚Äôm not connecting the two properly in my mind.
Yeah, I should probably wait until I‚Äôve read the whole book before I think about any of this too in depth. My analytical side takes over so it‚Äôs hard to progress until I can follow along properly.
Theoretically the benefits and convenience of DI are easy to comprehend, but unfortunately in practice I‚Äôve found that convenience to be dangerous, resulting in classes that require every service in the world and constructors with fifty arguments. Convenience constructs, like everything but probably more so than most, must be used in moderation.
I can‚Äôt imagine it‚Äôs being done correctly if you have a lot of arguments in your constructor. I‚Äôd imagine the class needs to be split up. So you don‚Äôt use dependency injection very often? How do you accomplish unit testing?
Oh yeah you're absolutely right, the code bases I'm thinking of are very far from having been done correctly. But that's exactly what I meant to highlight with the difference between theory and practice: clearly in theory, DI has significant and broad benefits \*when used correctly.\* However, like many other similar technologies that work to abstract hard things in to less-hard things, when used \*incorrectly\* they tend to make things worse than the would have been otherwise. Sadly, at least in my experience, I've found the correct usage of DI tends to be the exception not the rule.
Dependency injection says nothing about how classes (or libraries) are deployed, but by not depending on concrete classes, it creates the opportunity for your inversion of control container to jump in and read in libraries that have been dynamically dropped in, if you so wish - without making any changes to your logic. It should be noted that dependency injection doesn't need any fancy framework - as you've noted, interfaces and factories will do the job for you. The 'extra dynamic stuff' comes from the more advanced IoC container you may choose to use to manage it - its like a super-factory.
I guess it‚Äôs more like using a huge ‚Äòmagical‚Äô framework like spring vs doing a manual constructor injection with no framework involved? Not sure. What I‚Äôm sure about is once I watched my software from outer space, this astronaut will never again not use an IOC container. But I tey to keep it simple though...
Its all about dnSpy.
The main reason I believe, above testability, lazy loading etc is that now the project the Salutation class is in doesn't need to depend on the project that the ConsoleMessageWriter is in. It also more clearly declares (and self documents) exactly what dependency the Salutation class has - it doesn't depend on ConsoleMessageWriter and all it's methods and dependencies, only on something with an Exclaim method with the right signature. When this finally clicks you realise you can write your business logic with NO third-party dependencies and minimal use of the .NET framework. Good luck maintaining the code of guys that still think this is rocket science.
You're a bad person for letting me add these to my top tier interview questions. Even worse, at some point someone will ask me and I will have no idea :) &amp;#x200B; Seriously, I love these little nugets (.NET nuggets).
I went last year and really enjoyed it. I didn't do any workshops. I wouldn't pay out of my own pocket to go though, my company paid for it.
Awesome thanks for the feedback!
SO can give a lot of bad advice. A good book or perhaps ef vids on pluralsite, that site is good for beginners but on more advanced topics like the n+1 problem in efcore and writing food joins, not so much
I don't know anyone that uses DI to help them deploy
All off these are terrible interview questions.
I feel like much of this is the opposite of useful information. In so far as these things are no circumstantial that they might be more subject to change than coarse grained knowledge.
Does anyone actually do this?
Why are singletons evil in your opinion?
Some of them might be useful to see how someone thinks. But not hiring on the basis of not knowing the answer? Nah. &amp;#x200B; We have enough applicants who can't state what boxing/unboxing is. To pass, you just have to say 'casting a value type to Object'. (Bonus points for mentioning System.ValueType/System.Enum/Interfaces, or stack versus heap, extra credit for getting the stack vs heap argument correct).
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions#variable-scope-in-lambda-expressions
I'm wondering the same...
SafeExec assumes that all actions will take in one parameter, which is pretty limiting. If you have access to modify SafeExec, I would change it to accept a Func&lt;IActionResult&gt;, and then in the caller just pass in the following ``` SafeExec(() =&gt; { return your_thing; // lambda will have access to buildHierachy }) ``` If you do not have access to change SafeExec, you can create an overload that throws away the param parameter.
Oh awesome... thanks, man, I really appreciate it.
Very rarely i would say. Normally a CI/CD pipeline produces a full application artifact (docker container, zip file or something) with all required files includes. You should never just replace some particular files on a production server.
Then there‚Äôs no point in putting depending code in different assemblies even though most people do. To me doing that just makes things hard to find. Another point is you only need to inject classes with real dependencies. You do not need an interface for every class.
I have a reporting app that does this. A Windows service runs the reports. The logic of each report is in a dll that implements something like IReport. When I add a new report I can drop in a new dll and I'm ready to go.
You are right. People totally overuse the "multiple project" per Solution feature. That is what folder are invented for. In my opinion multiple projects per solution have only these two benefits: &amp;#x200B; \- It speeds up incremental build in visual studio since VS only rebuilds assemblies with changes. That still means you should do a full rebuild of all projects when you create a production build. (I dont even know if msbuild supports incremental build on the command line) &amp;#x200B; \- I helps preventing circular dependencies. If you have everything in one project it is easy to add a circular dependency by accident. With projects VS will complain.
Than you created a plugin architecture. If that is what you need (a business requirement), than this is fine. But it adds complexity. Do you have a CI/CD pipeline or do you copy the file manually? How do you ensure your test system has the same version of all dlls of the production system?
Did not know about this one but it's perfect for a project I'm working on. Thanks
Please never do this. These are nice examples in a book to show a feature, but in a large codebase (bigger than fits a single persons head) this has problems: &amp;#x200B; A application with dependency injection consists of two "phases". A registration phase where you register all services and a resolution phase where you resolve instances to run the application. In the first phase, no dependency injection is available, so you have to do everything "the old way". In your example this is easy, just read a configuration file. But this now means your configuration system does not use dependency injection, which means you can not replace dependencies, which mean you can not test this code (or its hard, at least). Lets pretend you want to replace your configuration file with a database. Well your database layer is probably only available via dependency injection (by injection IDb or something). So you need extra database access code that works without DI just for this configuration system. &amp;#x200B; Having multiple implementation of a service in your codebase means you can not reason about the code without knowing which implementation will be picked at runtime. Every time you click "Go to implemention" on a method, VS will now ask you which implemention you want to see. Sometime is obvious, but sometime not. You now need to search for totally unrelated piece of code somewhere in your codebase, which decides which implementation will be picked at runtime.
Imagine you have a interface like IGetExternalData and there are two implementions: FetchDataFromAzure and FetchDataFromAWS. And you want to cater for situation where one of the service might be slow or down or your credits have run out. A naive way is to either inject both implementations and they try one and if it fails, try another one or implement yet another class like FetchDataFromExternalSource:IGetExternalData that tries Azure first and if it fails then try AWS. This approach will slow things down. &amp;#x200B; Another way: lets say you have one background task running periodically that gets the IGetExternalData from your container, tries to call it. So lets say your current concrete implementation registered with DI container is FetchDataFromAzure . If it can get response and it passes checks like response time, availability and number of credits left etc, it does nothing and all calls to IGetExternalData return Azure implementation. But lets say it fails with insufficient credit or something, it can then switch the register FetchDataFromAWS for IGetExternalData . So now all callers will get AWS implementation. This is obviously very simplistic example but i hope you can appreciate that even though your known types are known at compile time, you may still need to dynamically change them at run time, examples like fall back email, sms sender etc.
Too much magic. Like static classes, they hide. They're also extremely hard to use injection with, and an implementation is pretty much set, once created. I generally consider singletons to be an anti pattern. They seem to solve a problem, but really just screw things up. There are (vanishingly few) places where they can help. Mostly, though, they're artifacts of a more primitive era.
If I heard about a company doing this, I think I would start running and not stop until I hit the next state. I'm sure there are elegant examples of this, but with all of the garbage code I have seen, this sounds like a straight up nightmare.
Advanced DI frameworks like autofac also allow applying cross cutting concerns and behaviour to objects through aspect wrappers. I can for example call a log tracer every time an interface method is called without modifying implementation object
Not sure how reliable tempdata would be. If it's not too big of a performance hit you could always save the data in the DB then do another call when you go back to your wizard page. If it's available you could just take your viewmodel and store it in a cache like redis. That way you could quickly retrieve it without needing to save anything in the database when you go back to your wizard page.
Unless you are interviewing for a position that requires you to have very in-depth knowledge of the framework, don't bother asking these. Knowing this and being a good software developer are (in my opinion) two different things. At best, you'll get lucky and hire the 1 dev in 10000 that knows \*some\* of these. At worst you'll piss off a great developer for your company because he thinks the people interviewing him (and maybe his manager?) have no idea what is important in software development.
Not OP, but singletons can be really difficult to actually deal with. If you use a static class it's quite messy to deal with any instantiation issues because a failed static class is failed till the app pool recycles. If you're creating an instance you have to manage concurrency issues, which are surprisingly painful. It's OK if your singleton is one instance forever because you can create it at start up, but if you're ever going to tear it down and recreate or you want to wait until it's utilised one at a time is a much harder implementation. Effectively a DI container allows you to reuse a bunch of really complex edge case logic when you're working with singletons.
You should never just replace a file by hand on a production server, but there's no reason at all why you can't add or replace a DLL in a project through some controlled process. You might also want to enable or disable certain functionality via config that's more complicated than just a branch in your code path. Or predeploy an upgraded version before go live so you can ensure that the new version is available before you flip the switch. One and done is fine for small things, but it doesn't scale very well.
You should separate your layers into separate projects and provide interfaces between those layers. Code that is all wound together willy nilly is hard to test, hard to change and just a major pain in the ass. Even if you never substitute a DLL or reuse the code, if your changes touch your entire code base, you'll end up in a massive mess. That's discounting the requirements to interface things out for testing or the fact that trying to do dependency inversion on something like a controller without DI is just awful.
That what is already mentioned in other replies and I would add, that singletons tend to be misused as a globals 2.0, where programmers put all the functionality they don't want to deal architect in proper object-oriented way. The very nature of being able to access singleton from everywhere leads to code leakage and encapsulation breakdown. The rules are almost the same as with using globals - avoid as long as you can, otherwise you can end up with spaghetti. Good use case for dependency injected singleton is some kind of manager, that you are 100% sure it must be instantiated exactly once. Its methods must be thread-safe or marked as not being such and it should handle its failure modes internally, throwing an exception when there is some. Caller should not be responsible for handling error states *(i.e. retrying to connect to something and so on)*. Architecturally, I allow singleton initialization in general program initialization routines, where I can guarantee, nothing else will use the singleton during that period *(or I put an internal check to guarantee, that it will be initialized before first use -- this way, you can also auto-initialize, but it may not be wanted all the time - e.g. latency while connecting can slow down your critical part of the code)* and I allow singleton being destroyed explicitly in shutdown routine.
Architecture exists to keep things predictable and changeable. If you think DI is getting in your way, then you're working on a small, throwaway project that probably has very few/no tests. This practice is fine if you're working on small, throwaway projects, but if you're on something that will live longer than a year, you should be doing DI.
or in this printer: [Xprinter XP-58IIH](https://www.lazada.com.ph/products/xprinter-xp-58iih-usb-thermal-cash-receipt-printer-compatible-w-epson-esc-pos-mode-and-star-mode-black-i142176251-s162086114.html)
If you register a stateless class as a singleton with DI, do you consider that a singleton that is evil?
Like pipe friendly functions, monads etc.
Stateless singleton is just a static utility class, isn't it?
No. If I have a repo class for e.g that makes db calls and returns some poco, I can register that as a singleton with DI because it is stateless and it doesn't need to be transient or per request. It isnt a static class either.
But then, the repo class is not stateless per se, it has to hold some connection to database, or are you opening the connection every time? Or are you using some other singleton injected to your repo to obtain the connection? Anyway, services and managers (api connections, database access,...) are in my opinion a good use case to be singletons as long as the implementation is thread safe and can recover from failures.
Yep, so ado.net has connection pooling, so I open and close connection every time. So I guess we agree on the singleton is evil mantra unless when it isnt.
Sure, I apologize if it sounded like I am full-scale singleton hater, I am using them often in my architectures. It is the same as with `goto` statements or globals. They are evil, unless you know what you are doing and have a good reason to use them. But I've seen so many cases of utter abuse of singletons, which caused the code to be a spaghetti mess nobody understood anymore, I always warn before using them prematurely.
While people may overuse multiple projects feature, properly dividing your problem domain is a way to achieve architectural stability by limiting number of interconnections between your classes and modules. When you divide a part of the functionality to other project, it forces you to think about how these things communicate. You will definitely reap the benefits later, when changing a part of the code with correctly designed interfaces does not require to trace all connections between classes.
Totally, I was having a joke :)
You can't specify fields in interfaces either. But you can specify properties. ``` public interface IMyInterface { MyType MyProperty { get; } } ``` With this example implementing types must have a `get` accessor for the MyProperty property. You could then also add a `set` accessor to the implemented property although it's not part of the interface contract.
I wouldn't use them as interview questions, well I might chuck one or two in just for fun, but really I was just messing :)
I was just messing. I've been hiring devs, or being hired as a dev for decades :) &amp;#x200B; I do ask some esoterica questions, they're kind of fun. I prefer interviews to be fun. If no one in the room is smiling I think you've got bigger problems that will outweigh any technical issues. So I'm kind of combative but in a pillow fight way rather than a street fight with knuckledusters. I do go fast though. When I interview it's a pretty solid onslaught of questions. I find it helps coalesce their experience into either book smarts or experience smarts. Generally I'm looking for the latter, but with enough of the former to indicate they're interested in self development. People who have done something answer in a slightly different way to people who have just read about it and its easier to discern if you apply moderate pressure. I completely agree with you though. I watched bits of some tech interviews for Google/Facebook/AirBnB type companies over the weekend and they're a mixed bag. I hate whiteboard interviews. I don't code on a whiteboard, so my muscle memory won't work there, and you'll be really pissed when I pull out a circular saw so I can copy paste lines around. It's such an alien way of making code I've considered whether a company knows what it's doing when they want me to write fizz-wank in marker pen.
I was scared for your interviewees but good to know you‚Äôre not one of the bad interviewers.
Thank you, and likewise :)
WHat do you mean with "post work sessions"?
Imo, those shouldn't be in HTML. HTML originally wasn't designed for UI, but for rough typesetting.
With Node.js EVERYTHING was new: - new language (nobody used JS on the backend before) - new ecosystem, libraries and tools - it's not even based on the same principles as other popular stacks EVERYTHING needed to be invented and it took years. And it's still a mess, Node.js is still not using fundamental features from the language it is based on like ES6 modules and Promises. On the opposite, take for example ASP.NET MVC vs ASP.NET Core MVC (was supposed to be named ASP.NET MVC 6). - You still use C# - You still use NuGet - You still use Entity Framework - Same principles - You still have the whole ecosystem: Newtonsoft.Json, NUnit... - ... You can migrate code from ASP.NET MVC to ASP.NET Core MVC, it's officially documented: https://docs.microsoft.com/en-us/aspnet/core/migration/?view=aspnetcore-2.2#aspnet-to-aspnet-core So yeah, the comparison is fallacious.
Yeah that's the approach I was thinking of, but you should be aware there are some performance and garbage collection consequences to pulling in variables from an outside scope like that (specifically until the Func is garbage collected, none of the other variables the Func uses will be).
If you've got a mac use that. I've been using Rider with macOS for a while and it's definitely preferable to running Visual Studio in a Windows VM.
Not quite the same thing, but dotnet only serverside pre-rendering is pretty much the scenario that serverside Blazor is tackling.
Lots of problems with this benchmark and the comments on the post already cover it. System.Threading.Channels should be the fastest, that's what it's designed for and proven out by the dotnet benchmarks.
Conferences are 95% about networking. If that's what you're going to do then it's great. Otherwise all the videos and tutorials are online now so it's a waste to travel just to see them live.
At least turn off the features you aren't using.
Have you tried Rider?
I saw that comment, made some mistakes, working on fixing that benchmark now. disregard the results of System.Threading.Channels. The other results should be valid. Thanks.
Honestly, Update model from database rarely worked as expected in other versions for me. I usually have to delete the table and re-add to get everything to generate correctly in database first.
A course should be specialized. The same reason you didn't get RabbitMQ and Docker, well why wouldn't they explain .Net? How about C#? If they spent time to break down every technology they used, it would be 10\* longer. You should go learn Docker, then go learn RabbitMQ, then use the course to learn then in .Net. They don't know what you do or do not know, and it would be a waste of time to people that already do. A course should do one thing well, as there are plenty of courses that can cover the other topics better.
Maybe you are right, maybe I am. I am just saying that I was expecting more knowledge to be shared during this 1hr long episodes. Anyway, guys did the course for free, so I cant complain. I am just saying that I was expecting more knowledge and less small talk.
We indeed need a network-friendly GUI/CRUD UI standard. Bending HTML/CSS/DOM/JS to do it has been a crazy ride that's still crazy.
Would there be a hope that a future version of HTML6, could support these UX paradigms responsively for different platforms (e.g. I doubt tabs are the best UX on small screen sizes).
On top of the comments already there, you also shouldn't use Task.Factory.StartNew(async ..., TaskCreationOptions.LongRunning) It will create a dedicated thread and then immediately stop using it as soon as you await anything, making creating it completely pointless and also negativity affecting performance. You could use Task.Run instead, but just invoking an async method will start it and give you a Task back anyway.
It's really hard to make one-size-fits-all , such as semantically encoding our intention and letting the browser compute it. It's better to let the server determine that because, first, it's more consistent because one is not dealing with different simultaneous brands and versions, and second, have a wider choice/control of layout engines. Many "productivity" applications don't really need a mobile version anyhow. Spending time up front to make it mobile-friendly is perhaps a poor financial decision in terms of up-front cost and probabilities. A degree of YAGNI should be applied.
Don't use System.Net.SmtpClient. The async implementations are buggy, and will not always throw the errors that the SMTP server returns. MailKit is a good package for sending email if you really need to use SMTP. If you're sending from outlook.com you should probably use Microsoft.Graph instead anyway though.
https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.ignoredatamemberattribute?view=netframework-3.0
Thanks for the correction. I implemented all the suggestions (including [Task.Run](https://Task.Run)). System.Threading.Channels now comes in first place in the 100,000 jobs benchmark
&gt;CSS isn't a nightmare if you know what you're doing. Rocket scientist: "Rockets are not hard if you know rocket science." The issue is *unnecessary* complexity. CSS takes a lot of training and/or experience for a good many people. I've seen long discussions where many many people complained about CSS's learning curve. We often just want usable UI's, not to make perfect logos for Pepsi. That's shouldn't require UI Rocket Science.
Don't return the `ApplicationUser` object directly. Instead, create a `UserModel` object that converts from `ApplicationUser` and only has the properties you want exposed. For example: public class UserModel { public string UserName {get; set} public string Email {get; set;} public static operator implicit UserModel(ApplicationUser user) { return new UserModel { Username = user.UserName, Email = user.Email }; } } Then, instead of returning an `ApplicationUser`, return a `UserModel`.
Thank you! Also could you explain to me what exactly is that public static operator implicit method? Is it i like a constructor?
`operator` methods are ways to set up handlers for operations. For example, what if you wanted a way to add two `UserModel` objects together? Adding two objects is an operation. So you can define an `operator +` method that controls what should happen if you perform the '+' operation. [Here's a reference to the operators you can overload](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/overloadable-operators). In this case, the operation is a type conversion, from the `ApplicationUser` type to the `UserModel` type (this is because the parameter (inside the parenthesis) is `ApplicationUser` and the return value (before the parentheses) is `UserModel`). The `implicit` keyword means the compiler will automatically perform this conversion when necessary. So something like this will work: UserModel model = new ApplicationUser(); You can also use `explicit`, which will mean you must explicitly do the typecast yourself: var user = new ApplicationUser(); var model = (UserModel) user; All operators must be defined as `public` and `static`.
You'd need to post actual code and results for much more help. They should not be throwing exceptions. If debugging you should see messages for each. You may want to try including an actual message. If you're not running them in debugging mode it will just quit after the first debug fails so others after won't be hit.
MSDN is the first place to start when you have questions about a particular method built into .NET: https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.assert?view=netcore-2.2 https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.debug.fail?view=netcore-2.2 In particular Debug.Assert's documentation points out you need to run in Debug mode for the calls to do anything. It also sounds like BOTH methods are expected to display an error message (Debug.Asset says via a popup window but it sounds like that is a copy paste mistake from .NET Framework docs... .NET Core has no built-in cross platform GUI support) and not throw an exception. It looks like Debug.Fail is intended to output a message for logging or display on stderr (or an error dialog box on Windows) depending on what the TraceListeners do with the data. If you are doing anything with TraceListeners they could be the ones throwing an exception. What is the exact exception and message you're getting?
`Debug.Fail()` immediately signals that a critical error has occurred, throwing an exception which halts execution. Use this when something that should *never* happen, happens. Don't catch this exception type. Why use `Debug.Fail()` instead of just throwing an exception? Because `Debug.Fail()` only executes in debug builds, not release builds. `Debug.Assert(bool condition)` checks to see if `condition` is true or false. If it's false, it'll print a message to the log. If it's true, nothing happens. Use this if you want to be told if something is false during debugging.
We remove edmx when we inherit old projects, we then generate a code-first datacontext from the existing db.
If you simply do not want to have the column returned from the database, I am not sure if this can be done easily in Entity Framework. You CAN use .Select to select a specific column or columns in a tuple but I am not sure if that produces the SQL you want. EF is not really meant to work like this, you generally work with the complete object/record on the application side. If it is fine that the application can see the hash (which it should be anyway since the database allows it to query it) then you just need to strip it out (unndunn's solution is a way to do that and will work fine).
&gt;EF is not really meant to work like this I mean i'd consider this just normal back-end work with a database...whats the most "SQL"like way to work in .Net-core then?
EFCore uses underlying System.Data.X packages. You can just use one of those directly if you really want. EFCore is just so much nicer though imo. I only use the underlying stuff if EFCore can't do something specialized I need.
Finally we can replace string.Empty with "womble" once more. Rejoice!
also dnSpy
I'm not an expert but seriously, CSS isn't a nightmare. There's a learning curve with it just like every other technology out there. That doesn't make it a nightmare.
It takes a lot more learning, thought, and debugging than it should for most non-mass-market applications. Many are eager for better or alternative standards. We'll dance and praise the Sanity Gods when it arrives, and burn an Oreilly CSS book as a sacrifice to them.
It may have been mentioned in the comments, but the things that stood out to me were 1. Benchmarking fundamentally multithreaded code with 1 thread. 2. Benchmarking only 32-bit 3. Based only on the results of the above making definitive statements like "ImplXxx is fastest... The second and third fastest are ImplYyy and ImplZzz."
In the meantime we have CSS, sass, less, components etc so it's not a huge deal really. And a library like vue makes things even easier. I don't know what you mean my mass-market-apllications either. I'll be just as happy as you if someone can come up with a viable alternative that will be embraced around the world by web devs. However that's probabaly not gonna happen anytime soon. So we learn CSS and other languages and frameworks and try and write the best code we can to go along with it. I neither like nor dislike it, it's the tool we have to style our apps, but it's far from a nightmare.
Accept possibly for constantly changing frameworks, UI issues are the biggest pain points in web applications in my experience. And the problem with libraries like Vue is when they work as expected, they are okay, but when they don't, one spends a lot of fiddle-faddle getting them to work. Or, fudging them with custom CSS overrides, which often have unintended consequences. (Disclaimer, I haven't tried Vue myself.)
No .Net core :/
Klonopin dipped in whipped cream with a shot of vodka?
Can I ask how you handle stored procedures and functions, if the existing EDMX has them mapped? That's been a stumbling block for us in getting rid of EDMX files, I'm hopeful you found a solution!
Apparently, key API is missing which should be added in .NET Core 3.0
Give it a whirl, vue is really nice to work with and easy to learn. It's no silver bullet but it makes composing with components, managing state, and handling events so very nice.
Your post has been removed. Self promotion posts are not allowed.
Your post has been removed. Self promotion posts are not allowed.
It works you just have to run rerun all t4 transforms from the build menu manually after you update
For an http request? Http clients can send whatever header they want to, so they can impersonate any kind of client they choose. But I think generally the different browsers send different specific headers, that you can distinguish, I think.
Afaik [MonoMod](https://github.com/0x0ade/MonoMod) has .net core support, so it might be worth checking
!Remind Me 3 Days
That was my feeling when I first got an already existing behemoth of an project with unit tests and DI. I was so confused about the magically appearing objects. Then I saw the light. The objects did not materialize from the aether. It was me or my colleagues who configured the system. Of course, that old behemoth used Prism, which was an over-engineered old-school-Microsoft, with call stacks more than 100 calls deep. Which was part of the problem. But with more focused DI frameworks the system is quite manageable and transparent. Now I have fully embraced the DI and it works flawlessly.
I am successfully using DI for a toy/hobby project without any unit tests :) It allows me to gracefully evolve the code base adding new and more complex functionality with modifying only the essential code which absolutely needs to be modified. To be less abstract, I am doing a game. I started with hand-coded text output and I switched to MonoGame graphics ... without touching anything in the game. I did a new implementation of IGraphicsOutput, registered it in my Main ... and that was it.
Try looking up the results from the stackeoverflow survey 2018 and see you w different language differ in popularity, usages etc.
Vb.net... if you are already doing c# then don't bother with vb. They are effectively the same but one is clearly for insane people. I worked with it for years and ended up quitting my job just to get away from it. F# is a different kind of language. Worth checking out.
Which one is for insane people.. Just curious.
For me it's VB. Once I moved to c# I could not understand why anyone would want to sit in VB
Ah ok, I have been very curious about F#. I just haven't had the time with all the learning I've been doing to tinker with it. C# so far is my preferred language out of all the ones I've tinkered with, and over the past four years I've tinkered with a ton of them in trying to decide what I wanted to use to make a career.
VB
I cannot count the hours spend handling errors and setting up custom error pages over the years. ASP.NET MVC didn't make things easier with the HandleErrorAttribute (IMO). I've put some words about the process in this blog post.
I thought this was a joke reply to start with. It depends on your perspective. You could argue they are both for insane people, just different types of insane people. VB.net isn't worth learning if you know C#. F# is a functional language, which is getting more fashionable, but the syntax is pretty illegible as with most functional languages, and you can accidentally make performance drop through the floor if you don't know it well enough, and if you work with it, it's hard to find skilled developers when hiring. We just banned it where I work and took lessons learned from it like immutability
I understand the dillema you are in... Based on the language you choose, you will have a different range of job options in very different industries. C# is nice to start with as it is very general purpose and forgiving. Also it seems like everyone is looking for a c# dev in a full stack role lately. But it can and will get boring. Good thing programming is pretty universal irrespective of the language you use. You can always move on to something new if you get bored of it. :) Go would be another good one to try out.
No.
As others have said, I would just stick with c# I started out on vb as I had a background in vb6 and vba so it was only natural for me to start there but I wish I had just gone straight in with c# from the beginning. There aren‚Äôt many job opportunities in vb where I am but it may be different where you are. All vb jobs around here are maintaining legacy systems. For reference, I was around when the first version was released and I picked the losing side (in my opinion)
I thought maybe that'd be useful, then I saw it's a paid for extension, right down the bottom.
Any chance you could post the rendered html?
Yeah it's useful, but not money-useful.
VB.net is dead and thank goodness. F# is quite hot. I have a friend working at an F# shop. It's a different paradigm but quite elegant. There are jobs in it and, I believe, the number is growing.
F# is absolutely worth learning. It will improve your C# a lot as well. It could just be that you will like C# a lot less once you learned F#. It just has so many more and useful features.
[https://www.reddit.com/r/outofmemorygame/comments/bj0r0f/discussion\_types\_of\_the\_app/](https://www.reddit.com/r/outofmemorygame/comments/bj0r0f/discussion_types_of_the_app/) \- feel invited to the first discussion :)
If you are going to goto the trouble of learning another language, I would recommend Python - not another .net language, but definitely very popular - and good way to show a bit of flexibility in your skillset.
Just to add, for anyone that might read the comment: `Task.Factory.StartNew(..., TaskCreationOptions.LongRunning)` is very useful for, who knew, long-running tasks - like listening on something in your app, when you absolutely don't want to block your main thread and the task can be blocking for a unacceptable amount of time. (eg. listening for UDP packets and afterwards reading a bunch of data from serial IO doing some serialization on it and passing it to the main job queue to process.)
&gt; that new class should be in the same assembly as the one you're replacing Who say's something about replacing? Just imagine you could * drop a "`CompositeMessageSender.dll`" and a "`MobileMessageSender.dll`" in the folder * let the `CompositeMessageSender.dll` get options from a config file like "`compositeSenders.json`" * eg. `{ "senders": [ "App.Core.MessageSenders.EmailSender", "App.Plugins.MessageSenders.MobileMessageSenders.SmsSender" ] }` * now you replace the line in app.config that says "`&lt;messageSender&gt;App.Core.MessageSenders.EmailSender&lt;/messageSender&gt;` with `&lt;messageSender&gt;App.Plugins.MessageSenders.CompositeMessageSender&lt;/messageSender&gt;` Now you can, just by restarting your application once (or having it reload the config on changes) use a composite plugin, or even add a new Window / Menu or whatever to your application
this is especially fatal if you use member variables inside your delegate, because it then encapsulates the whole ApiController or whatever class just instantiated the delegate. Now just think about pushing a () =&gt; [this.Name](https://this.Name) to some singleton/static storage place. Suddenly you might wonder why the GC won't collect your bunch of classes and you have a memory leak. &amp;#x200B; this is why i almost always use local variables / store member variables in a local variable if neccessery. **IF** i cannot control the method to take an extra parameter, eg. Action&lt;TState&gt;
[removed]
[removed]
You would be surprised. In the market now and still see jobs asking for vb.net experience. My guess is that there‚Äôs legacy apps / people who are dug in the vb ways for corporate line of business style apps. Not saying all of them are evil, but at my last job had some ‚Äúarchitects‚Äù who were all vb.net guys. They didn‚Äôt like generics or linq statements. It was a short lived job after realizing they were not budging or open to leveraging newer features of .net as a whole even though we moved the software to these versions.
Ick. Takes up too much screen real estate. That would drive me nuts. Of course, the same sort of drive towards an orderly screen keeps me from opening more than a few files at once, anyway, under most circumstances.
'my' 'this' is a true statement...
&gt;Decompile the app using ILDasm, patch the IL code directly and assemble it back using ILAsm. In many ways, this is better as you can create a strategic surgical incision rather than a full-on ‚Äúmake from scratch‚Äù approach. The downside is you have to implement your method entirely in IL, which is a nontrivial adventure. If patching the binary is an approach you want to do, check out dnspy. Makes it easy and trivial.
\*IT DEPENDS\*...seriously it's all about what you need for a particular role.
German companies often value education more than experience, compared to other countries from my experience. It‚Äôs the only place I‚Äôve been asked to provide my university certificate even though I have over twenty years of experience working with Microsoft technologies.
Check if they know .NET Core. We are almost at .NET Core 3.0 and if you still don't know .NET Core, that's a red flag that they don't invest in their skills.
Or use Couchbase
Gotcha. I‚Äôll forward the feedback to the team.
Thank you!
I didn't think [VB.Net](https://VB.Net) was too bad...at least compared with vb6.
[VB.Net](https://VB.Net) really is only worth checking out at this point if you happen to be supporting existing projects.
.NET Core is the easiest thing to get the hang of once you're familiar with the rest of .NET. This is really silly and a bad answer.
Well hopefully you know to look for an actual language, because ‚Äú.net‚Äù is as vague as ‚Äújvm language‚Äù.
95% of the skills transfer from framework to core, so that‚Äôs silly of you to say.
This was my go-to reference for years just to handle 404's properly in ASP.Net MVC. Craziness. https://stackoverflow.com/questions/619895/how-can-i-properly-handle-404-in-asp-net-mvc/2577095#2577095
I think /u/nirataro is trying to say that if you've not even heard of .NET Core at this point, you're one of those 9-to-5 clock punchers who isn't paying attention to technology and therefore isn't invested in their careers. As a hiring manager, I'm looking for people who genuinely understand that you don't learn a language and ride it into the sunset in your career. This vocation evolves quickly and if you aren't actively engaged in keeping current with it, I don't want you on my team.
More like, you might have a table in your DB - Account - with a column AccountType with values 'BronzeStar', 'SilverStar', and 'GoldStar'. You application needs to calculate membership benefits, and how it does so depends on what type of Account it is. Somewhere you may have something essentially like var account = _accountRepo.Get(id); IMembershipBenefitsCalculator x = _container.Get&lt;IMembershipBenefitsCalculator&gt;(account.AccountType); return x.CalculateAvailableBenefits(account); You don't know what the concrete type is until run time. It's late-bound.
I'll have a open view for experience&gt;education
Tanks, I am aware that it's all languages. Just wondering if you have special insider tips.
Or Cockroach.
I don't really know .NET Core yet because I mainly work with slightly older .NET frameworks and I've been investing in my skills elsewhere (learning ML, actually).
Perfect. Will look into that.
An interesting tidbit - we decided to give up on docker for local development (too many little issues ATM) and are now running the app directly from VS using Kestrel. Exception paths are *still* slower than the should be (400-500 ms), so I'm wondering if this is a general issue with how either Kestrel or Asp.Net Core behaves with a debugger attached...
Next exercise: code all of them yourself.
yeah, it is a pain if the filenames are really long, it will hide the X to close the tabs so it kinda sucks in that regard. I wish microsoft would just make it so you could show all the tabs at once... is it that hard?
Are you a new dev? Just focus a lot on C# and forget everything else. F# is cool but I'm not aware of anyone actually using it in a business setting. (I'm sure they're out there, but it's rare.) F# might buy you a few points if it ever comes up, and you could talk about the benefits of functional programming, but it's just extra brownie points. I wouldn't even list VB on my resume. Programmers have been known to judge people based on how "cool" the stuff they work with is, and VB is definitely not cool.
I am nearing the end of the free trial... I wonder if it will just stop working or just give me a shareware annoyance?
It's this. [VB.Net](https://VB.Net) is just fine, but the reputation is tainted by the horror that is VB6. I've noticed that a lot of VB6 programmers that move to [VB.Net](https://VB.Net) also continue with the same VB6 type patterns which don't help. (Color me guilty up until a few years ago on that one.)
Same. My company extensively used VB6 in the 90's and into the early 2000's and so it was a natural move to just go with VB .net. This created the problem where I took with me the same VB6 type patterns which I was slow about moving away from.
I made the opposite experience.
No sloppy mistakes, a consistent formatting. The remaining stuff can be evaluated in a meeting much better, but if they're unable to pay attention to details for something like this, then I'd dismiss them already.
definitely learn F#, it will make you a better programmer
I learned [VB.Net](https://VB.Net) from the start and was hired to rewrite some VB6 apps and in some cases maintain legacy apps. I can definitely tell in .Net code from a stylistic perspective when someone comes from a strong VB6 background.
I think there is way to map them with the datacontext but the only example I have is one that just uses SqlQuery in a method on the datacontext. public virtual int? DoThing(string pVal) { SqlParameter param1 = new SqlParameter("@p", pVal); var result = this.Database.SqlQuery&lt;int?&gt;("SPNAME @p", param1).FirstOrDefault(); return result; }
At my last job, it wasn't a development job, they had a new piece of software that was developed in VB6. When I found that out I was flabbergasted. The strange thing was the programmer making it was not some old grizzled seasoned vet, he was relatively fresh to the programming world yet he basically used old tech and old practices when programming.
If you want to learn another .Net language your only real option is F#. The other language is just redundant and legacy. F# will provide you with a different perspective on programming that could help you grow. Although, if you are wanting to learn another language to help you get a job the legacy language would be better than F#.
Then it's trivial to catch up to it already.
It's time to invest in it. It's much much faster than .NET Framework especially on the web stack.
That's the point. The cost of transfer is minimal. Make the leap and get to know it.
I'm going to work with it soon at my job. The point is I don't have unlimited time to learn all new technologies at once. If I'm going to build a new application, I'll use Core and I'm sure it will be straightforward to do so because I'm a .NET developer.
You are in for a treat. There are so much new APIs, especially in .NET Core 3.0.
&gt;The goal of microservices was best described to me as "simplistic divide &amp; conquer": divide each separate component or domain context into its own little project that conquers its own separate little task. An OOP class can do that, and maybe also a stored procedure. Microservices seem best suited for dividing teams up who will make and manage functionality shared across multiple applications or application-like services, not merely for technical modularity alone.
mother of all hipsters...
The caveat here applies to Windows .NET Developer. Only at .NET Core 3.0 right now they can do anything with .NET Core. If you are a .NET backend/web developer, it's been 3 years since 1.0. That's enough time to check it out and invest some learning on the topic. It's a really really good framework.
I am not familiar with GridView, but I suspect GridView is only fetching a page of data at a time. So only that page is available when you are going to alter the data. I would look for a PageChanged event or something similar to subscribe to, so you can operate on each page of data as the pages change.
If you want to learn a new language which is alongside C#, consider the wider aspects of software engineering and what languages/technologies most commonly go together. &amp;#x200B; Web: C#, Javascript, Typescript, HTML, CSS APP/Software: C#, XAML Server: C#, SQL Games: C#, Unity, MonoGame, SFML &amp;#x200B; It's best to think of things this way, instead of forcing yourself into an arbitrary .NET enclosure.
It depends what experience level you are looking for. If its someone fresh out of school, they will most likely be doing most learning on the job. I would not expect fresh grads to be able to talk about anything more than whatever is done in school, data structures, algorithms and programming problems. Maybe some applications they wrote. &amp;#x200B; Someone with some experience should be able to build a .NET application from scratch. Should understand EF, Stored Procedures, Dependency Injection, Unit testing, MVC, APIs. Also, have some understanding of architecture and caveats. For example, they can tell you why repository pattern may be bad with entity framework.
Which is what I‚Äôm saying. There‚Äôs 0 reason not to hire a dev who‚Äôs only dove framework. There‚Äôs only a few API changes that actually matter.
The first is a field, the second is a property. The difference is the field has no code behind it, while a property has code that runs whenever you get or set it. Generally it's recommended to use the property for public use and fields for protected or private use (though there are uses for properties there in some cases). Your code specifically auto-generates code for the get and set so that it is functionally equivalent to just having a field. So why use a property? Well later you may want to add code behind the property so this means you don't have to change a field to a property. This can cause issues if the field fulfills the interface (now you have to change the interface and everything that fulfills it) or is inherited from a base class and so forth. If you just use default get and set the code generated ends up looking like this: private int someProperty; public int SomeProperty { get { return someProperty; } set { someProperty = value; } } A common thing I do with properties is something like this: private int something; public int Something { get =&gt; this.something; set { if (this.something == value) { return; // no change } this.something = value; // Do something expensive here } } Sometimes you want to run code after a field changes, properties make it trivial. This makes for efficient code, as if you had a field you would have to poll it periodically to look for changes, which can be wasteful. You can also OMIT set or get from a property to make it only settable or gettable. A property you can only get and not set is sometimes useful. For example if I have a Dictionary I want to allow a caller to modify but not outright replace, I can have a property get the Dictionary but not allow it to be set.
No one who is open minded to change would still be a 'VB guy' so yeah that is to be expected.
It really depends on which surface of the .NET API you are working on. If you are a Windows .NET developers, then yeah. However if you are a .NET backend developer, it's a whole new world of APIs already in and coming fast.
I‚Äôm not sure what you‚Äôre talking about here. &gt; a Windows .NET developers What does this even mean? Someone who uses Windows as their OS of choice changes nothing about the code they write with Core. You might be talking about a desktop app developer? Though that‚Äôd be ridiculously incorrect term as plenty of desktop apps run just fine on Core. With Mono, you can run most of WinForms, and then there‚Äôs plenty of libraries like gtk# which will work cross platform. And while there‚Äôs new things coming in Core 3, you‚Äôre really getting over zealous there. It‚Äôs pretty standard update, 90% is crap that only a few actually use, but the new 10% is cool features people will try out. It certainly isn‚Äôt some life changing update.
It's useful when you don't want to consume a thread from the thread pool for an extended period of time, but when you resume from an await you will resume on a thread from the thread pool anyway (if you use the standard synchronization context) and not the dedicated thread that was created, so if you have e.g. a long running loop full of awaits, it will only use the thread until the first await. It gives synchronous code a way of running on a new thread and exposing a Task for control, rather than a Thread, but that's about it. It's mostly just left over from the days of TPL before async/await.
nah, missing fedora and pipe
This seems like it would have a lot of issues with multi-threaded environments or environments where there's more than one MongoDB server? The DB class's static methods, and the Entity extension methods, all rely on a singleton instance.
learning a specific framework in your free time is kinda pointless imo, its much more important to learn general skills that apply everywhere and then learn the specific framework you have at work... at work. This is such a bad mentality to have...
If your bread and butter involves in mastering a specific framework, it pays to continue to study its next evolution. .NET Core is not .NET Framework 5.0.
ok, as you say, reading your other comments it doesn't make much sense to continue this conversation
RemindMe! 5 Days
I will be messaging you on [**2019-05-05 17:50:25 UTC**](http://www.wolframalpha.com/input/?i=2019-05-05 17:50:25 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/dotnet/comments/bitkyt/hacking_net_rewriting_code_you_dont_control/em5l6ym/) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/dotnet/comments/bitkyt/hacking_net_rewriting_code_you_dont_control/em5l6ym/]%0A%0ARemindMe! 5 Days) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
it is thread safe and async capable. the static DB class contains the driver's mongoclient object and the recommendation is to use it as a singleton. it takes care of connection pooling to the database. extension methods work on instances of entities so no worries there. all is explained here: http://mongodb.github.io/mongo-csharp-driver/2.0/reference/driver/connecting/
Thanks!
Why repository pattern may be bad with EF?
Thank you! This helped me!
It wasn't very hard to understand that he meant that desktop application APIs, while usable on Core, have not changed significantly. However [ASP.NET](https://ASP.NET) Core is a larger departure from the older [ASP.NET](https://ASP.NET) library.
&gt; When I don't configure anything I get one column per reference on my Document Table, which seems not necessary for my use case. Why? That seems right.
I disagree. ‚ÄúA Windows .Net developer‚Äù can mean a ton of things. If he meant desktop apps, he should probably know that .Net can be used to make GUIs on other OS‚Äôs, even before Core. There‚Äôs really on a handful of actual changes I‚Äôve seen that have effected my development in anyway. I know most of it is far better written, but thankfully Microsoft is quite good at ensuring the modern Framework APIs have the exact same functionality in Core, so the developer experience doesn‚Äôt change much.
 From stackoverflow: The single best reason to not use the repository pattern with Entity Framework? Entity Framework *already* implements a repository pattern. DbContext is your UoW (Unit of Work) and each DbSet is the repository. Implementing another layer on top of this is not only redundant, but makes maintenance harder. &amp;#x200B; Link for more: [https://softwareengineering.stackexchange.com/questions/180851/why-shouldnt-i-use-the-repository-pattern-with-entity-framework](https://softwareengineering.stackexchange.com/questions/180851/why-shouldnt-i-use-the-repository-pattern-with-entity-framework) &amp;#x200B; I use a service layer that serves my controllers. It keeps that controllers clean and web layer does not care how database access is implemented.
Finally, support for Azure functions and Razor!
I‚Äôm stubborn, I stuck it out until 2011 üòÇ
Have you considered doing it yourself using something like the closedxml library? The syntax in this example looks very similar to handlebars / moustache. Maybe you could use a c# port of one of those for the templating.
Sorry i didn't mention Word. I am having word templates and need to generate word document as output. This is a great example from from their site [https://docxtemplater.com/demo/#loop-table](https://docxtemplater.com/demo/#loop-table) &amp;#x200B; You can have a word doc in format and pass json to get the final document.
Not sure what you are basing this off of. R is NOT fast, and when it needs to be it calls a c library or similar... the same libraries that \*might be called from [ML.NET](https://ML.NET). &amp;#x200B; Where python ml framerworks/ wrappers (like keras) have the edge is a large end-user base.
Where is the best forum to discuss/ ask questions give opinions about [ml.net](https://ml.net)? Obviously github is good for posting issues.
Good luck hiring anyone at all.
Yeah if OP wants it that way he needs to use class inheritance to only have one Documents property across both classes.
Very exciting!
Stoked! üòÅ
Is it just me that finds this question confusing?
I was able to stop using ReSharper until I wanted to look at source code for certain methods that ship with .Net (aka decompile) with one key. But this new version seems faster so I'm just going to readopt ReSharper.
There is nothing here that would cause an element to collapse or expand. Your problem likely lies in whatever JavaScript you have to do it.
The documentation says href works if you use an anchor tag. That is not the problem I think. https://getbootstrap.com/docs/4.1/components/collapse/
Like the other guy says you need to check the output HTML. The ids have to be valid HTML ids or they probably won't work. It's a "title" which suggests to me it might have spaces and other things that are not valid for HTML ids. https://www.w3schools.com/html/html_id.asp You may only need to generate unique values so you might just use a counter and make ids like #item1, #item2, etc. Of course they show up in the url bar so using a nicer looking id might be desired. But it has to follow those rules in the link above.
This is something I did not know about. Thanks for bringing it up!
Thanks for following up - that solves one of my problems :)
Fixing some old code like that today. The contents of a tab strip / multipage were converted to be created at tab click time for "efficiency", and the tab control would have persisted them once created, but nooooooo (Belushi reference), it chose to toss them away each post back. (‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª)
This is post is so dated. Mean Girls is as old as web forms. Half the people on here probably don't even know what a postback is.
Stop trying to make postback happen
ViewState: "Come to the dark side."
Hot take: WebForms are underrated. I wouldn‚Äôt want to work in them but I‚Äôve seen enough shitty MVC code and come to the conclusion that some people just can‚Äôt be trusted with a sharp knife and they would be better off just using WebForms.
WebForms were great for 2001. They were ok for 2010. They are legacy now, still code that you shouldn‚Äôt shit on, because the options in those times were... not great. Any new WebForms projects in 2019, however, should proceed directly to the bin.
Viewbag?
I've tried to use the viewbag, but it's always said that "viewbag" does not exist in the current context
Tell that to Blazor devs.
Every time someone mentions Blazor I have VBScript induced PTSD flashbacks
IMO the mediator pattern is service locator with extra steps.
ViewBag: ‚ÄúAnarchy is the natural order. Both the dark and the light are foolish‚Äù
Very cool, thanks for the detailed info. Linking the shorthand =&gt; get to a lambda is a very nice - that'll make it easier to remember. Regarding the properties in an interface - is this a good idea to have a class that only contains properties as an interface? I think I mentioned somewhere in this thread I'm trying to enforce non mutability as much as possible with my Data objects. Also, any suggestions on a clean way to init the first instance of the data object without creating constructors for each one?
oh my god you guys i finally got my company to give up the old web forms site in favor of mvc my work life has never been better. there is hope, fellow programmers on bigass, old, business-critical systems.
Interfaces just specify a contract of what methods a class that implements it is required to have. So it really just comes down to what purpose is the interface for and what methods it will need to define. A property is just taking a method or two whose only purpose is to get and/or set a value (from the point of view of the caller at least) and packaging it up.
[Pepperidge farms remembers](https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.page.ispostback?view=netframework-4.8)
WebForms key flaws are that it is difficult to test and maintains application state between requests. It also does not give developers sufficient control over the markup rendered on the page making it more difficult to use popular front-end frameworks/libraries. &amp;#x200B; The modern web has become stateless and development has become test-driven. Also, as much of an application's logic as possible has moved to the client while still meeting business needs. Testability is so important to modern development and devops practices, that this was a critical flaw for webforms. The client-server-database model has transitioned to the client-api-datbase-model.
my new company using webform with old style aspnet tag.. But most of them hardly moved their mindset to razor page or mvc style..
I got my current job 1.5 years ago thinking I was going to be working on new and awesome tech like core (which I was working on before I was laid off)... And then I was placed on the legacy support team. Been grinding ever since
NOOOOOOOOOOOOOOOOOOOO!! &amp;#x200B; üò¢üò¢üò¢üò¢üò¢ &amp;#x200B; The amount of memories where this was a thing is too real.
Google on hardening iis windows 10. You will find articles from owasp and cis. See what applies to your setup. Maybe this article will help: https://techcommunity.microsoft.com/t5/ITOps-Talk-Blog/Windows-Server-101-Hardening-IIS-via-Security-Control/ba-p/329979 I strongly believe that there can not be a default setup that acts like a one size fits all. You should always research what you should do security wise to defend against malicious intent.
Thank you. Do you have a good article on this topic? Doesn't matter whether it uses SQL or EF Core. I did a search on google, but didn't find anything appropriate. I am using probably the wrong terms in my searches. &amp;#x200B; So, it would like this &amp;#x200B; |Id|FileName|Blob|ApplicationDocumentId (FK)|ApplicationPhotoId (FK)|ReviewDocumentId (FK)|| |:-|:-|:-|:-|:-|:-|:-| |1|TestFile.pdf|0x083832085|4|NULL|NULL|| |2|Anotherfile.pdf|0x831018|NULL|5|NULL|| And therefore my document class like this? public class Document { public long Id { get; set; } public string FileName { get; set; } public byte[] Blob { get; set; } public long ApplicationDocumentId { get; set; } public long ApplicationPhotoId { get; set; } public long ReviewDocumentId { get; set; } }
This is great, perfect for me to go through.
I like to split into different projects so I can commit/update much faster - feel the commits are made more meaningful
Postback. Hello darkness my old friend...
The ids would have to be nullable, because only one should exist.
You are right, thank you. I upadeted the code snippet above.
I hope the money is good..
Very good with a good company that treats its employees well, which is why I haven't left. And to make it worse, I could laterally move in the company at this point to get on one of those teams but the one I'm on has such good and smart people. Do I work on new tech with a substandard team or legacy tech where the team is phenomenal? Choices choices
They're saved wherever you tell it to save them.
This.
Not when you are adding a project to a solution. They should be saved in the solution folder.
When you add a unit test project to a solution you can specify where it should be saved.
Yeah, I am just starting a project moving away from webforms - I'm using a .Net web API project with vue for the front end - its a big change, and enjoying the learning process.
added a multi-threaded benchmark project to the solution to prove that the library is thread-safe: https://github.com/dj-nitehawk/MongoDB.Entities/blob/master/Benchmark/Program.cs
C# itself is huge. If you are looking from job point of view, you could learn .Net Core, DI, LINQ, very commonly used frameworks like MediaTr, Fluent Validations etc. If you want to learn some different ways of doing things, F# is cool. I am a .NET developer and few years back, i just wanted to learn something different. I learned scala and python. Even though they are different languages, it acually helped me a lot in understanding C#. I learnt a lot on functional style of programming and lot of new language features in C# are inspired from existing languages.
I'd also like to get away from Resharper, but especially the Introduce Variable shortcut is preventing me from it. I know Roslynator has a similar one (called 'Introduce Local Variable'), but it works slightly differently from the one in Resharper. In the end, it was enough for me to not switch to Roslynator, but it might be good enough for you.
Always go for the good work enviroment (imo)!
If you right click on the solution, go add project, it adds the project to the solution with the existing project. At least that's how it s been to date. Maybe you are right and an option has been added. I'll look into it, thanks.
If you add an existing project, then the location of the project remains unchanged. If you add a new project, then you can specify the location of the new project in the dialog. Both options have been there for many versions already and remained unchanged in VS2019.
Would be interesting to see a comparison of this versus Visual Studio Code.
How fucking dare anyone out there make fun of Web Forms after all it has been through! IT‚ÄôS A FRAMEWORK! What you don‚Äôt realize is that Microsoft is making you all this money and all you do is write a bunch of crap code. LEAVE IT ALONE! You are lucky it even compiled for you BASTARDS! LEAVE WEB FORMS ALONE!..Please.
People that sh*t on webforms don't understand the intent behind webforms and how the dev space was different 10-20 years ago. At the time most companies didn't have "web developers" that can mock about in their web sandbox all day and learn 500 new frameworks, tools, paradigms, languages, all required to create one application. We had honest to goodness full stack developers that were responsible for absolutely everything, from SQL to desktop, to web, to setting up servers, etc. On top of that most of us came from VB6 development tracks. WebForms was absolutely revolutionary in allowing people like that develop perfectly capable, modern, web applications. You can go from writing VB6 apps to writing web applications with very little learning curve. Nothing in life is perfect, but you could do 95% of the things with 5% of the effort with WebForms. I won't go into the downsides as most are obviously aware.
Partial postbacks made WebForms quite awesome for a long long time.
The problem is no one wants to convert perfectly working apps from webforms to MVC just for the sake of making the developers happy. Personally, I can't blame them either. If it were my money, I wouldn't do it.
Does it work with Blazor?
What to use then?
@model: "Pay no attention to them. I am inevitable"
\#Agreed - Honestly, how is this (Blazor) a *thing* ?
Doesn't seem to be working out of the box with Blazor yet.
ITT: Experienced programming wizards speak of dark technologies young people like myself know nothing of
I recently did a printing for a Brother label printer through Bluetooth. I used their native library which I bound to Xamarin. Perhaps your printer has a similar library?
No.
I thought the promise is WPF
Legacy. Just the fact that you're aware and interested in the other world out there is enough. It's when you get complacent in legacy code that you should start to worry.
Very good point. I think I'm getting there and a little afraid of moving to a different team that might not be as good but would be better for my career. Argh!
This just triggered my PTSD
What's wrong with blazor? Haven't had time to properly look at it but writing c# on the client wouldn't be the worst thing. I love typescript already
Nothing. Use it, play with it, if you like it and it works for your project, awesome. If you don't, MVC is right there. The hate comes because its new and shiny and devs don't like new and shiny.
Are you me? Good company and 80% remote work but really old tech. Request to rewrite into MVC was denied and .NET Core isn't even allowed on the corporate network yet. Webforms is here to stay on my mission-critical legacy application. My answer was to get creative since there was no ability to ditch legacy while also having a mandate to "modernize" the UI with a richer client-side experience. Server controls and client-side in webforms is... yeah. The resulting hodgepodge is having aspx pages as nothing but rendered views without any server-side web controls. * C# 6+ syntax sugar thanks to [Roslyn DOM compilation](https://devblogs.microsoft.com/aspnet/enabling-the-net-compiler-platform-roslyn-in-asp-net-applications/) via Microsoft.CodeDom.Providers.DotNetCompilerPlatform. * Web Api [controllers in my webforms project](https://docs.microsoft.com/en-us/aspnet/web-api/overview/getting-started-with-aspnet-web-api/using-web-api-with-aspnet-web-forms) via Microsoft.AspNet.WebApi. * Modular js bundled via grunt/[webpack as a multi-page application](https://webpack.js.org/concepts/entry-points/#multi-page-application). Repeater server controls with strongly-typed data binding sometimes handle the initial page data-bind but at least it puts me in control of the HTML that plays nicely with Bootstrap. From there, client side js handles calls to the web api controllers to perform what used to be post-backs. Partial page updates that were done with UpdatePanel server controls have all been replaced with vue.js components and client-side js. **Should I feel dirty?**
I want a vs code versus visual studio and rider.
"Are you me?" I hope not. Cause otherwise I'd be talking to myself. :D "Server controls and client-side in webforms is... yeah." My analogy is it's like mixing oil and water. We're making strides to update to better tech with things like react and SOA-like. That said, your "hodgepodge" is very similar to what the middle term architecture is like, except it's Kendo UI as the main front-end framework. Boggles my mind why they chose to still use a webforms project architecture but don't actually use webforms and limit the back-end code to the Page_Load event only. It's all .aspx pages hitting webapi. They could have just done MVC. And you can have webforms and MVC work in teh same project too. Wonder why they won't let you do that as well. And yes, you should feel dirty. But it's not your fault. They dumped the mud on you and said deal with it. weird analogy but I'm going with it. :D
"Applies to .NET framework 4.8" Some of us still live this hell every day.
Wait, we don't do this anymore?
&gt;making it more difficult to use popular front-end frameworks/libraries. The idea is that you could build applications with what's already in the "kit" in a consistent way between developers or consultants, and WebForms does provide sufficient UI controls to cover most of the practical CRUD needs. It's just that it's harder to include some fancy dancy JavaScript gizmo. That's not necessarily bad because JavaScript gizmos are often a big source of future failures and security leaks. Sometimes visually fancy UI's are merely ways to impress clueless managers or customers in the short term, and then dumping the longer-term side effects on somebody else. For internal projects that don't have to impress some Dilbertian PHB, it's fine and simple: Git-er-done. Note that one can use WebForm pages *without* using Microsoft's widgets. I've made my own set of methods for such so that I can control the HTML when I need: &lt;% ui.myFieldHelper("Employee_Name", required:True); %&gt; It's somewhat similar to Razor pages, except I make the UI and field helpers instead of Microsoft, and thus can tune them to the shop conventions to avoid typing or pasting lots of repetitious busywork code.
I came from one of those environments. Heck, we still have a Telerik Devcraft Complete subscription. Here are a few items to consider: &amp;#x200B; 1. Vendor support : Sure, Microsoft hasn't said they are dropping support for it. They never do ([VB.Net](https://VB.Net), I'm looking at you). It just stops receiving features where the more modern stacks get all of the love. 2. Responsive sites : It's difficult to create mobile ready sites with webforms. MVC and Razorpages make it very easy to integrate frameworks like Bootstrap for a responsive experience. 3. Talent addition: Most developers looking to change jobs and see 'webforms' as your primary stack are probably not going to want in. You will have to pay more to attract talent to a non-favored stack. 4. Talent retention: New stacks are developed to improve not only user experience, but improved development experience. When your developers learn MVC or Razor pages, they're going to see it's more enjoyable to code in AND development time is faster. 5. Coding Practices : If your company hasn't changed updated their web stack in a very long time, I'm willing to bet healthy coding practices have declined as well. They generally fall hand in hand. 6. Multi-platform support : Once you learn MVC, you can easily transition to [ASP.Net](https://ASP.Net) Core, which allows you to run on Linux, MacOs or windows. Webforms does not offer this in it's roadmap and probably never will. &amp;#x200B; Hope this helps.
&gt; If you right click on the solution, go add project, it adds the project to the solution with the existing project. The problem seems to be that when you go to this menu option sometimes the location defaults to your current solution's directory, and sometimes it's elsewhere. It bit me a few weeks ago when setting up a new solution (VS2017).
&gt; We had honest to goodness full stack developers that were responsible for absolutely everything I use to be one of those. Our current arrangement is very wasteful, it seems to me: and IT make-work jobs program. It takes an army of specialist to do what one or two GUI IDE developer could do before. I would do the analysis and coding, and was quick and efficient and users liked the results. But deployment was indeed a heachache, and the primary reason why web applications replaced desktop GUI IDE-based apps. However, I'm not convinced it has to be a mutually-exclusive choice; we just need a GUI-friendly over-HTTP standard. Thus, I conclude our current standards are screwed up: we tried to force HTML/CSS/JS to give us rich GUI's like the 90's had, but it creates a big mess to do it; and now we accept that big mess as normal.
&gt; I prefer code first, but sometimes you inherit projects that come database first. Depending on how much you hate it and how much time you can invest in it, you *can* build out models yourself using code first style annotations (and/or OnModelBuilding fluent configuration) to interact with an existing database. Just pointing it out because I've run into many .Net developers who believe that you have to use database first/edmx with an existing database.
If you have a security scan appliance make sure and run it against the app on the Windows 10 machine. I seem to remember having to make some changes inside the app (been a while since I switched).
\&gt; and devs don't like new and shiny Correction - .net developers don't like new and shiny. Js developers demand something new and shiny every month.
Thought it was something I had setup wrong.
Yeah it's very basic just 1 api call, because we have to physically put it there. The public facing call is using Azure API management, that service is really cool
I mean, MVC is right there so... no?
Luckily you can have both aspx pages and mvc controllers in the same project.
JS developers hate new and don't more than any other community. They have at least 5 articles a day to tell you about it.
&gt;JS developers hate new Total Nonsense. As a node developer its actually something I like about Js development. There are always new features and packages coming out that are accepted by the community. Theres about a hundreds articles each day about new stuff
Yeah, I followed the instructions in the MS Blazor docs and works fine in VSCode and CLI but errors are thrown in Rider.
Same here.
 You may be an exception. However, the overwhelming majority [disagrees](https://www.google.com/search?client=firefox-b-1-d&amp;q=js+frameworks+hate).
It promised C# on the front-end. It delivered a new form of Razor views.
Indeed, this is what we've done when MVC5 came out. Now we have a web app that has a seamless marriage between the two. Sadly however, that's where the road ends. There is no upgrade path to Core from here.
I am not even close to the exception and your link is meaningless but if you want to play that game [here.](https://www.google.com/search?q=new+features+fron+end) I said as a node developer to indicate I use JS on front and back but youa re wrong there as well. there are constant new features being added to the node ecosystem in packages and existing frame work updates - lots of new shiny stuff. what people don't like is too much change but yep Js developers love new shiny stuff being added to what they already know
&gt; devs don't like new and shiny. I don't mind it but prefer something with some age around it if I have to support it at any serious scale simply because there will be 1000s of posts and tons of already available content and examples in the chosen platform.
I've been messing with this same issue. I suppose because it's fairly new, there isn't a lot of documentation that addresses this. I just decided to roll with it for now, it works pretty much the same, you just have to find the code in a different place. I'm interested to see what kind of responses you get to this question though, sorry I couldn't be any help.
Sooooo... Only 2 tips, and both of them rather known? I understand it's a series of articles, but come on, give us more :)
What I did for adding Identity to my existing application was use identity server 4 code as a scaffold and move the neccessary code I wanted across. http://docs.identityserver.io/en/latest/ Its a good learning excercise too.
That's because the scaffold generates Razor Pages and not classical MVC. Razor Pages are quite new, with a MVVM approach, using MVC under the hood. You should checkt out the ASP.NET Core documentation: https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-2.2&amp;tabs=visual-studio
That meme is probably even older than WebForms lol
Right now I'm pretty much on a hurry cause I have to create a working prototype by the end of next week and I don't have time to get familiar with Razor but after that I will be able to move to Razor
Thankyou, you are totally correct :-) My apologies :-)
Right now I'm pretty much on a hurry cause I have to create a working prototype by the end of next week and I don't have time to get familiar with Razor but after that I will be able to move to Razor but i also liked the old way and I just got conformable with it. What I was thinking of doing is crate a project with identity on version 2.0 that uses the old system, and then I would update the project to version 2.2 but but version 2.2 template comes with some redesigns and additions that I like. Like bootstrap 4 and privacy controls for gdpr. I know how to implement them but right now I don't have the time to do it, I just want to make the prototype for a platform.
Tldr; just use CloudFlare.com (it‚Äôs free, takes 10 minutes to set up), and setup up a firewall in Windows to accept only IPs fromCloudFlare + your remote logins.
If your using git you could just stash them?
Make a new branch. I always branch, I never develop in master.
I don't use Tab or Enter to select an Intellisense suggestion. Instead, I save one keystroke by typing, the next character that will come after the selected word: usually it's: * space * ( * . (dot) * ; And I prefer F2 to Ctrl+R+R. I believe you don't have to select the word before renaming it, but simply move your cursor on it.
Webforms and winforms are in the same state of ‚Äúdeprecation‚Äù right now. Like you, people who don‚Äôt understand their value always say that their dead. But they still have immense value to get things done quickly. You don‚Äôt always need the latest/fanciest toy to do a quick DB CRUD interface. You don‚Äôt need a fancy tool to show users 5 buttons that trigger server tasks. Rapid winforms/webforms usually look like shit, but they‚Äôre damn good at making things quickly
If you use tfs, try using shelvesets.
It depends what source control you're using. I'm not sure why you want to avoid saving the "entire project", but if you're not really sure what you're doing, you can just copy the entire folder the solution is in somewhere safe.
As the other answers are implying, Visual Studio is just going to execute a version control command on your behalf (git, TFS, svn, etc) so its really down to what flavor of source control you are using. If its a git repository, you'll want to create a branch for your experimental implementation so that you can switch to another branch and try a different approach, rinse and repeat. Branches are 'free', in that you can have as many as you want, merge them, reset them, fast forward them, delete them, all with little to no cost (cost as in your time and effort).
Am a .net developer that is always looking for new things to play with
Lock down your firewall to only ports you need like 80 and 443(if SSL needed). If you need RDP try to lock that port down a bit more like to IP or just have it open when needed. I would suggest doing this at the network level not just in Windows. &amp;#x200B; Also look at the App Pool settings, if you need the app running all the time make sure its not set to recycle it when inactive. I usually set up how many active treads are running too. &amp;#x200B; In the end IIS is pretty much the same as a WebApp, you just have greater control and Windows 10 is pretty much just a bloated version of Windows Server.
I was in a similar situation and ended up following this tutorial: https://www.youtube.com/watch?v=-50ntzz18XU For which you can see the code files here: https://github.com/ChrisKlug/asp.net-core-2.0-auth-demo
So by bin, do you mean compile it?
What do we say to the God of Viewstate?
If cloud is an option you could look into doing this with an Azure Function, this would allow you to avoid the WebAPI project all together. It can be setup to run on a scheduled basis and it would be pretty simple to have it make API calls to **Software A** and **Software B** concatenate the results and then store the JSON somewhere. &amp;#x200B; The main disadvantages I could see with trying to do this with a WebAPI are: 1. You have to deploy/host the WebAPI somewhere. 2. If its just one endpoint that you are creating it seems a bit overkill to have an entire WebAPI project just for this. 3. You would still have to come up with a way to make the call on a reoccurring basis to trigger this logic within your WebAPI project. Depending on how you do it you would need to make sure its setup to be "always running" in a sense so that it regularly pulls this data according to your schedule. Speaking from experience before cloud was an option we did a lot of this kind of stuff with console apps and a Windows Services. It worked ok but we ran into issues where something during the scheduled run would fail and it wasn't able to perform the retry logic that we needed. There were also times where debugging could be difficult just due to the nature in which it was deployed. Being on a server like that we had to rely on the infrastructure guys to handle the setup and deployment of the console app. &amp;#x200B; Hope this helps :)
bin == garbage
Sorry, but I have to call **SOA a reoccuring fad**. It was to be the Next Big thing with SOAP, COBRA, XML-web-services, and now microservices. It will fail\* now for the same reasons it failed then. Converting something back and forth between app-language -&gt; external format -&gt; app-language requires more code, testing, and is more things to break. Keep data in the existing app-language (EXE) and there's no conversion needed. As far as inter-app communication, we have files and stored procedures that do the job perfectly fine 90% of the time. If you have an actual need for a SOA, then make one, but wait until you exhaust simpler approaches. \*as a mainstream technology. I won't deny legitimate niches.
Need to understand why this needs to be a web service? Does the output need available via an api? Who are the consumers? Does the output depend on the input or can it be cached? What about auth? Too many unknown variables to make an informed recommendation. In general, if your console app is well-architected the business logic is separate from the hosting logic. So it's not difficult to extract it from the console host and wire it to an ASP.NET host. You're just changing the process model.
You likely don‚Äôt want to move to Razor. It‚Äôs got some neat ideas, but that generally isn‚Äôt the way to go for larger apps. Microsoft‚Äôs documentation suggests that you use MVC for anything but simple apps. Razor is new WebForms, and webforms was never a good thing.
Ok. Its still better than postbacks in webforms.
I get it....I was making a joke
Seconded entirely! In fact I‚Äôve often written applications that have both console and web service interfaces. They are just *interfaces* after all!
C# also supports local functions
In modern versions of the language you can also define that as a method inside your method for cleaner syntax, replace your line with bool IsActive(IStatus foo) =&gt; (expression) PS: if being pedantic, all methods should be PascalCased, not wimpyCased.
We use EFCore powertools.
This will really blow you away, you can add the method to a class like the following and then just call it in you where: &amp;#x200B; `public class OrdeMenuTradingPeriod` `{` `public IsActive()` `{` `return this.Status == (byte)Enums.Status.Active;` `}` `....` `}` &amp;#x200B; I like to call this approach object oriented programming...
&gt; "is there a reason why?" MS's EF programmers wrote tools that programmers would use. Their databases probably are a few dozens tables cooked up for test cases. They are programmers, not data people. Out in enterprise land, databases are thousands of tables created by a team of data modelers + another team of DBAs, both with their own standards, procedures, and other industry standard schemas. In large enterprises its 100% always data first.
The ideology for "code first" is about integrating database "development" into the workflow. Giving you the ability to version your database and treat it as just more code to be handled with the usual rules (repos, pull request, branching, etc...). It is not a technical limitation but the intended design of the product. If you're looking into doing database first then maybe give the database-first approach a look but... consider other options because, to my understanding, it's not their priority. I understand you might prefer db-first, but I do suggest you read up on the benefits that code-first (just google "entity framework database first vs code first" and you'll get a ton of info) to make an informed decision... and if I were you, I would actually pick a small project to try it out. In my experience, it really does simplify a lot of things (database versioning, deployments, etc..) and having it integrated into the "standard" workflow allows for faster/cleaner iterations. Also, as a side note, do note that EF doesn't really cover everything. You will still need database management on the side.
Screw the DBAs and the data modelers with their thousands tables. &amp;#x200B; Its usually a total cluster fuck anyway.
if you need to use parameters, define a method that returns Func&lt;T, bool&gt; Func&lt;T, bool&gt; StateIs&lt;T&gt;(StateEnum state) { return x =&gt; x.State == state; } return list.Where(StateIs(StateEnum.Active));
Does anyone know of any good videos that explain Func&lt;T&gt; well?
I really doubt there are any. This is all brand-new stuff.
&gt; wimpyCased Well that‚Äôs something I‚Äôve never heard before.
https://stackshare.io/dot-net/in-stacks
Maybe this could help: https://github.com/aspnet/Identity/tree/master/samples/IdentitySample.Mvc
Definitely helped me, thanks, I never thought of doing that either, but I really like it. It means you can add context around what your lambda expression is trying to do. Nice one.
[removed]
They're predicates: https://docs.microsoft.com/en-us/dotnet/api/system.predicate-1?view=netframework-4.8 You'll notice some linq statements take predicate and others func T, bool because of how the language has evolved (and screw consistency!).
Nice. Like the approach.
No good in EF my friend.
Hard to make a distinction whether core or not
Really good post, I honestly didn't equate AOT with energy savings, but seems kind of obvious after reading, thanks üôÉ
Take care, as if you define an Action, that Action will execute in memory always. If you use Entity Framework, you have to define Expressions, like so (othetwise the query will not translate to SQL): ``` Expression&lt;Func&lt;Order, bool&gt;&gt; isValidOrder = o =&gt; o.Date &gt;= DateTime.UtcNow.Date; ``` If you take a look at the LINQ overloads in your DbSet for example, you can see that there are methods that work on IEnumerable that accept Actions and Funcs, and there are methods that work on IQueryable that accept Expressions. Expressions are data, not methods, so they can be analyzed and translated at runtime.
You are correct. I just approved .NET Core - [https://stackshare.io/dot-net-core](https://stackshare.io/dot-net-core)
&gt; wimpyCased camelCased?
IMHO it works totally fine in Entity Framework. It's just that people have forgotten how to program using OOP... It's all about the services and pushing around anemic domain models.
I can hardly stress enough how important this is. Going the expression way will also give you many options to slightly change the queries EF creates, if for instance it creates a query which execution plan is poor but you know how the query has to look to perform properly
.NET Core != ASP.NET Core
Unless you're using TFVC, then creating branches will make your team hate you.
Doh. I'll check again tomorrow. Sorry about that!
Whichever one you want to call it.
You don't need a video, because it's basically the same as private TResult MyFunc&lt;TResult&gt;(parameter, otherParameter, thirdParameter) { return somethingThatIsTResult; } `Func&lt;T&gt;` and `Action&lt;T&gt;` are basically Methods with return value or no return value respectively. (Also there is `Func&lt;T1, T2, T3, TUpTo16, TResult&gt;` and `Action&lt;T1, T2, T3, TUpTo16&gt;`)
&gt; They're predicates Technically true but ... A Predicate is just any function that takes a parameter and returns a boolean, not only `Func&lt;T, TResult&gt;` but also every other `public bool SomeMethod(object value)`
Those red lines indicate a syntax problem /s
I appreciate your enthusiasm for sarcasm, but to become a master you mustn't use /s. *I'm a human being, and this action was performed manually.*
Thanks!
cool tip, would be nice to see more of this here
 menu.OrderMenuTradingPeriods .Where(isActive) .SelectMany(period =&gt; period.OrderMenuTradingPeriodDays) .Where(isActive);
I like your way, lets stick with that.
Worth mentioning this is supported from C# 7.0 Bill Wagners early post on this is here describing what they were looking to accomplish: http://thebillwagner.com/Blog/Item/2016-03-02-C7FeatureProposalLocalFunctions
Link to stackoverflow question is here: [https://stackoverflow.com/questions/55948259/downloading-file-from-azure-does-not-download-full-file-same-works-fine-in-loca](https://stackoverflow.com/questions/55948259/downloading-file-from-azure-does-not-download-full-file-same-works-fine-in-loca)
Not really the same though, because a lambda captures the context it's defined in as a closure.
If it walks like a local variable and talks like a local variable then it should look like a local variable. It can't be called from any other method so it doesn't deserve a big first letter Just my opinion though, you do what you like
[Bing.com](https://Bing.com) runs on dotnet core [https://devblogs.microsoft.com/dotnet/bing-com-runs-on-net-core-2-1/](https://devblogs.microsoft.com/dotnet/bing-com-runs-on-net-core-2-1/)
It isn't a local variable, though. It isn't semantically, it isn't technically, it isn't really in any way - the only thing it shares with local variables is... well, locality.
On Microsoft's site: [https://dotnet.microsoft.com/platform/customers](https://dotnet.microsoft.com/platform/customers)
Predicates were introduced before generic Func and Action and mostly are left there (like in some List&lt;&gt; methods) just for compatibility. No need to use them specifically in Linq. Beware of one thing, though - Predicate&lt;T&gt; is different delegate than Func&lt;T, bool&gt; but their method signature is the same, so they are compatible _as delegates_ (you can call a List method with either Func or Predicate) but they are unrelated types! So you cannot assign Predicate&lt;&gt; to compatible Func&lt;&gt; field or variable (or the opposite). This is why it doesn't make much sense to use Predicate in new code.
While that's true, regular functions also "capture context" from the containing class. Lambdas that take no parameter and get all their variables from surrounding scope generate bunch of garbage each time they are constructed. (which is why i *almost* always prefer open delegates to closed ones, ***except*** for Expression&lt;Func/Actions&gt;s obviously)
The Viasfora extension also supports coloring braces instead of the background and has a great feature in that holding Ctrl will highlight the scope you are in where the cursor is.
Every book on .net core is good (as it doesn't matter what os do you use), in case of WASM - you may want to look for Blazor (it utilize mono and c# for spa apps written in c#).
I move this become the proper term. All in favor?
Omg. Now I‚Äôm embarrassed I didn‚Äôt figure that out years ago :/
&gt;Giving you the ability to version your database and treat it as just more code to be handled with the usual rules (repos, pull request, branching, etc...). Huh, never thought of it like that
[Delegates.](https://www.youtube.com/playlist?list=PLAE7FECFFFCBE1A54)
Aye
mind explaining? for research purposes
Farfetch
illGladyPayYouTuesday
The fuck out of here with that shit :P Don't make me call Popeye.
I haven't used EF in a good while, but I distinctly remember being bit by this at runtime. It'll compile just fine with a Func&lt;&gt;, but once you hit it in code, it explodes.
Ah yes, I guess he did say which kind of source control he was using. PSA: just use git, don‚Äôt use TFVC.
In TFVC branching is too hard, in git its too easy
Learn as you go. Write little stuff and progress into bigger stuff. When you use code examples from the Web, make the effort to understand them. Don't just copy and paste and hope. You can learn a lot by reading code that you're actually using in your project. I don't believe in just reading code in general because that's too abstract. But when you're reading code that you're using and adapting, that's concrete and you can learn a lot from it.
The only 'must know' I would say is be able to create a very simple CRUD application from scratch without having to google every step. Anything on-top of that is learing as you go with googling / trial and error.
 private void Page_Load() { DooDooDaddy's code here!!! }
None. F# knowledge will be enough.
Personally, I am not switching to EF Core until this is done: https://github.com/sjh37/EntityFramework-Reverse-POCO-Code-First-Generator/issues/5
async/await.
Yeah you \*need\* none. It's just easier if you have a grasp of the basics...ASP.NET Core especially is \*very\* Node.js like.
Get F#uck out of here
Only if we also move to using the term HeftyCased.
I was thinking BestCased. However, this measure doesn't allow for conditions.
And dependency injection
Here are the solutions I would consider: 1. Have the search button open a popup or new tab. The wizard page is still present and populated with no effort on your part. The popup's JavaScript can insert the selected entry into the wizard page using the window.parent object. 2. Save the form data in a cookie or cookies as the user fills it out. Populate the page with the cookie whenever the page loads. When the user selects an entry on the other page you can alter the cookie to add the selected item. You can then clear the cookie when the user submits the finalized form. You can also use an expiry date or make it a session cookie to ensure the form is cleared out in a reasonable period if time if the user leaves the site without submitting. 3. This last approach only works if you have a reliable way to identify the user (though it can be as simple as a session id). Store partially entered form data server-side in a database and just fetch it back when the user reloads the form. You should of course be expiring this data like the cookie method if the user never submits it (there are ethical and possibly legal considerations if you want to permanently keep this data).
Only thing I can suggest is don't FlushAsync the body until the end. If you do it will wait on flushing to the client when it could be reading more data from the file while that's happening.
I completely agree with you. This is how I started and I learned very quickly
Zero. You can learn .net core and C# simultaneously.
None really but if you're doing ASP NET Core then dependency injection is often used, so nice to know, LINQ is nice and so are delegates. Async / await is also used a lot.
You will want to know IoC / DI and understand how that works with various frameworks that implement them. [ASP.NET](https://ASP.NET) core is built around IoC / DI principles.
None. The only way yo learn any programming is to do it and keep failing.
I'm not the person you responded to, but I'm pretty sure database projects with .scmp files are the current solution to this with Visual Studio. You do all of the work in the database, then you do a schema compare database--&gt;project in order to persist schema changes in a solution file that it sharable via git, and then the exact same schema compare from project--&gt;database will generate and run the update. Very similar to how I understand migrations in EF Core, except the database projects are obviously a bit more mature and offer full support for things like stored procedures, while EF Core obviously can't migrate those in a unified codebase. So it really strikes me as a "now we have to have two places to manage the schema changes, depending on the nature of the change" solution, which isn't really preferable IMO.
Cool, I'll definitely check it out to see if it gives me everything we'd need to get started down that route =) Thanks for the recommendation!
Zero. I'm a full time dev who was dropped into my seat being told I'd be doing c#/.net development when my background was beginner c++ and python. Just learn as you go. O
https://refactoring.com/catalog/introduceParameterObject.html https://blog.novoda.com/refactoring-introduce-parameter-object/ https://refactoring.guru/introduce-parameter-object https://softwareengineering.stackexchange.com/questions/329688/is-introduce-parameter-object-actually-a-good-pattern
The client and server are separate. You're going to have to use AJAX or a traditional form post if you need to trigger something on the server.
Brilliant!
Yeah we just have [ASP.NET](https://ASP.NET) not Core. If/when someone submits it I will get it approved.
always had great experiences with OVH
8 parameters to a method is definitely a code smell, but there are several ways to handle it. The first is what you are saying: create a class to wrap parameters. Just wrapping all of the parameters may not be the best choice, however. Ask yourself, are a few of the parameters related? If so, I would wrap only those parameters in a class. If there are two sets related parameters, create two classes. Another way to refactor a method with too many parameters is by breaking it apart. Taking 8 parameters my indicate your method is doing too many things. Are a few parameters used in one part of the method but nowhere else? Try turning that part of the method into its own method, and moving the call to the new method from the inside the original method to where the original method is called. Combining the two refactoring methods above may lead to a better program model.
I regularly do this. Makes a lot of things much easier. Can create overhead for a low number of parameters but you first need to call these methods quite often before this starts to become noticeable. Using this approach you can boil everything down to `TOut Handle&lt;TIn, TOut&gt;(TIn input)` which makes it easily applicable in generalized integration and unit tests, is serializable and so on...
Step back and think about what you're trying to do. Javascript runs in a web browser. Your .net code (in this case) runs on the web server. There must be some communication between the two. That's what AJAX is for.
If you have to use TFVC, also use a local git repo. Have a git branch mirror the TFVC master, but do all of your branching and merging with git.
Yes, there will be a [live stream](https://www.microsoft.com/en-us/build)
I learned on the go
In the docs -&gt; [This page configures the services that use CORS](https://docs.microsoft.com/en-us/aspnet/core/security/cors?view=aspnetcore-2.2) there are two options for configuraiton Cors. One is explicit, the other [As you have it](https://github.com/aspnet/AspNetCore/blob/dc718f66027e126b3eb6c3aabb0f907b44dc7a7f/src/Middleware/CORS/src/CorsServiceCollectionExtensions.cs#L20) sets some default policy. I've no idea what that is. &amp;#x200B; See if you can use the other overload from the first link I posted to explicitly allow Cors for your endpoint.
Azure has been nothing short of awesome.
57.3%
At my last job we used tfvc but when I moved to a different company they used git and once I got used to it I absolutely think it‚Äôs superior to tfvc.
Given your understanding of the problem with Js/React, I'd dive right in to C#/.NetCore. You're aware of potential pitfalls and confusion of language vs framework, but there's probably not a lot of avoiding it anyway. C# is fairly straight forward for the most part. .NetCore is fairly dominant now so starting with it makes sense. You could start with this book if you wanted: https://www.amazon.com/Programming-Language-Covering-Microsoft-Development/dp/0321741765 Its starting to show some age, but it is where I started. It does do a good job covering stuff like value vs reference types, nulls, basic operators, special types like string, structured exception handling, etc. that could be valuable, but you can probably infer most of it if you have learned any sort of OO before. There's some stuff in there that's simply out of date, from small things like string.Format which has given way to string interpolation, and bigger stuff such as no coverage of async/await or a bunch of newer language features that may be better or more accepted ways to handle things these days.
I've used Azure - you're right, it is great. But it was getting cost prohibitive and all I need to do is host websites.
Hi, thanks for your response. I take it that you mean move the configuration to `AddCors` instead of `UseCors`? Here's what I tried and it still didn't work. Same issues. // In ConfigureServices services.AddCors(options =&gt; { options.AddPolicy("AllowAll", builder =&gt; builder .AllowCredentials() .AllowAnyOrigin() .AllowAnyHeader() .AllowAnyMethod() ); }); // ... // In Configure app.UseCors("AllowAll");
Microsoft often also streams on twitch.
Better start with Haskell first.
Instead of copy-pasting, I've found writing along makes me learn a lot more. Also makes remembering where you set things up easier, which helps debugging. Also helps knowing with what plugin does what and where it's used.
I've used ovh (.nl) in the past. Maybe it's different for other people but it was one of the worst customer experiences I had. They don't reply when you contact them. Even when after days you let them know they didn't reply, they still don't answer. I had to move my domain name to a different company to resolve the issue.
As long as you understand the basics of OOP and C# you should be able to just dive right in to .NET Core.
This is good advice. Also, write tests that assert what you think that code does. When it doesn't align with your mental model, debug those tests on the example you picked up from the web and find out why.
OVH is French (I use .ca). I agree that it takes some time for my tickets to be answered but I rarely require support. I‚Äôm pretty sure they are a smaller team but they typically always take care of whatever I need even if it takes a few days. they consolidate my VPS bills in to one invoice and their DoS and DDoS protection is exceptionally intuitive. I began using their service because they have a good price point and I stay with them because I‚Äôve never lost data, I‚Äôve never noticed any down time and the attack protection kicks in immediately. My only qualm is that there are no VPSs in the USA. The NA data center is located in Quebec, Canada.
No, it does not work fine in EF, as this can't be translated to SQL and will be evaluated in memory by EF Core, or not run at all in EF6.
It's becomes cheaper if you use it the correct way: you have to share your databases and App Services accross multiple sites. Basically you can host as many sites on a single App Service. This advise is of course useless if you only need to host a single website. Same for databases: you can host all your databases and pay only for one if you use elastic pools.
Well, with .net core 3.0, they're adding in EF6 support so you may not have to switch to code-first if you don't want to.
Yep exactly but be really specific. From their example: services.AddCors(options =&gt; { options.AddPolicy(MyAllowSpecificOrigins, builder =&gt; { builder.WithOrigins("http://example.com", "http://www.contoso.com"); }); }); &amp;#x200B; Ugh the formatting is awful, anyway, be specific, reduce the footprint of the problem, so add your 3000 route explicitly and work outwards from there. Disable all authentication first. So allow anonymous access. If it works, we've learnt something. Try it with authentication, but add a basic controller with a simple GET method. If Cors works with that, we've learnt something. So we're just dicing up the problem into all its constituent parts and assembling them until we find the parts that don't work together. &amp;#x200B; Also, a big one I forgot to mention. Make sure you're catching and logging full exception traces to a file. I'm guessing there will be some information there. If you have access to more than one machine, or can spin up a VM, see if you can hit the URL from a browser running outside the machine. This should invoke the dev exception page which includes a load of useful information. If you're not seeing the dev exception page, change your Startup class to only use the dev exception page app.UseDeveloperExceptionPage(); &lt;=== change the if statement with this in to always use it. I'm also making guesses here, but hopefully fresh eyes might give you some avenues to explore.
You need to know how to create a class, variable, method, and for loop. If you can do those 5 things you are ready to use .Net Core.
I‚Äôm working on a job queue that will publish updates (whenever an item is started, finished, errored etc. ) regardless of whether someone is connected to the hub or not. The business logic class handling the job queue should be able to use a hub class to publish updates per item stage. If that makes sense to you, is there something similar in your repo I can look at for inspiration and clarification?
And using the refactors your IDE is capable of as much as you can. Huge time savers.
I WANT BLAZOR
My humble opinion. Depends on where and how you use this information. 1. If method is not available to be called from API level, there are 2 options: if it is possible to join parameters into meaningful, maybe reusable, object - do it ; if meaningful combining is not possible, creating separate object might worsen readability and even won't be reused in future. 2. If it is available through API, calling it something like xxxRequest is helping at least with reusability. In case request structure changes, there will be much less recompiling.
Heroku.com with that buildpack https://github.com/jincod/dotnetcore-buildpack
&gt; for inspiration and clarificati [https://github.com/kiksen1987/TopSwagCode.SignalR/blob/master/services/TimedHostedService.cs](https://github.com/kiksen1987/TopSwagCode.SignalR/blob/master/services/TimedHostedService.cs) Try looking here. This is a background service that runs every X seconds and does some work. You could add logic that takes Messages of queue and publish progress.
I had read that elsewhere but was unable to find the source, so thanks for that. It's still unclear as to whether it's truly portable (which would be the biggest plus of EF Core, since even though my team is the .Net stack, the company as a whole isn't the biggest fan). Because it's listed alongside the .Net Core 3.0 products that are still windows-locked, and I'd imagine EF6 would function the same. But it's still something to consider for sure. So again, thanks!
I can't really make sense of what you're asking, but once you bind something to ```InSingletonScope``` it'll only intatiate it _once_, the first time it's required. This can be in the constructor of a service or in by calling ```Get&lt;T&gt;```, it doesn't matter.
Mind if I ask what kind of naming conventions you would use for a branch like this? I'm thinking about using whatever_BACKUP, or whatever_TEMP. (Note: I probably won't continue to develop on this branch, just have it as a back up and eventually delete it when I know I won't need it anymore.) Just curious how you name them.
I'm trying to avoid making a copy of the project folder. It's about 400MB. Not huge, but why double up the needed disk space when the only changes between the two are probably like 2K worth of code? Does that make more sense?
Yea you don‚Äôt usually keep the branches once you pull it into master. So the idea of a backup branch doesn‚Äôt really make much sense with git. I typically make a pull request (I use azure dev ops m, which is free btw) to pull in the working branch. Once I complete it by doing a rebase, I delete the branch and create a new one for the next thing I need to work on. All the while master is maintained at all times to be deployable, build and run. So you guard master from any bad or broken code. Anyway back to naming, I usually do something like ‚Äúmy-next-feature-branch‚Äù so I try to be as descriptive yet brief as possible. Also I don‚Äôt squash my branches when I pull them into master, this keeps all the history from the working branch which I like. I commit roughly every two hours on average so I can always roll back to a previous state pretty easily.
You may also want to look at what the method is doing, and if this method could be wrapped in an interface, and you set properties or pass in a parameter object to construct a concrete implementation of the interface. This would clean up your code, but more importantly it could decouple the consumers of the method from having to mess with all of those dependencies when calling the method. Being able to do that will depend heavily on how things are structured though.
Here‚Äôs an article to get you started with the workflow in visual studio. https://docs.microsoft.com/en-us/azure/devops/repos/git/gitquickstart?view=azure-devops&amp;tabs=visual-studio#commit-your-work
This but my background was PHP JavaScript lol
My first short thought is bringing dev ops to your database. One of the main needs is to have all the database work done from the code.
Yes, that makes sense. If it was me, I'd make a git branch, but I'm not sure if you're using git, since you haven't given any source control details.
I use www.CloudFlare.com(free) + www.ToggleBox.com to host an ASP.Net website that delivers ~5M pages/month, for $10/month on a 1cpu VPS.
As I understand your goal. You need to crate an event system with separate handlers for each event type that will send updates to each connected clients to signalr hub.
I guess, I'm curious if new instances are still being created on the Service object, since i'm not declaring it as anything. I may use this service object across multiple classes, and in each class i call the static method that "Gets" a instance of the service class.
Just because people are writing articles about new frameworks and libraries doesn't mean anyone is actually using those frameworks and libraries. No one is using 99.999% of the shit that is published.
It will be c# on the front-end. They are setting it up for when web assembly gets better support and for them to figure out how to get the .net framework to run performantly with small enough file size. In the mean time they offer server rendered components that will be simple to switch to the front end code, which you can use today if you want to use experimental technology.
&gt; and now microservices Oh yeah that failure that is microservices. Only the technology that powers the most popular websites in the world, nobody would ever use that &gt;_&gt; &gt;As far as inter-app communication, we have files and stored procedures that do the job perfectly fine 90% of the time. Good god.
But you declared your service as ```.InSingletonScope();```. So calling ```var service = SomeClass.StaticMethod&lt;Service&gt;();``` will result in the static method on your class asking the container for an instance of Service. The container will return an instance of the singleton, it won't create a new one just because you called it from a different class using a static method. This all ofcourse assumes you're using the same container. Every time you create a new container, the singleton will be recreated for that specific container.
I am aware of all of this. I'm speaking of the fact that what Blazor originally gained all the popularity for has not been achieved. Nor have Microsoft shown any clear plans on how to achieve it. So offering "server-side" Blazor feels like a slap to the face, because it is. Moving code between front and back-end is not an exciting use case and it's one that no one really asked for. Compiling C# to WebAssembly is what's exciting and I'm going to start praising MS when they achieve that.
It‚Äôs a thing you can do right now. It‚Äôs just prerelease and not widely supported and has some use issues. But it works today. The server side is so you can start developing in the new paradigm for when the client side goes out of pre release. If you are saying they aren‚Äôt making progress it‚Äôs because you aren‚Äôt paying attention.
Wow. That is very cool... Thanks for posting that.
I don't understand why nobody is explaining what .net core is, and why for saying "zero experience is required". C# is just the language, .Net is what makes the language "work". The difference between your example of JavaScript and React is that JavaScript has its own standard library, and React is a separate component added onto its already standard library. C# is not a library, it is a syntax over .Net (core/framework), so JavaScript is pretty much C# and .Net (core/framework) combined. &amp;#x200B; No matter what, you'll be learning .Net with the language at the same time, it's the same as just learning JavaScript by itself. So as the others said yes, just learn it, you will be learning the standard library as you learn the language C#. It's basically impossible to not :)
Be early to everything you want to see! Rooms fill up crazy fast, make a schedule. Go into sessions you normally wouldn‚Äôt.
The telerik party is usually pretty good: [https://www.telerik.com/build-2019?utm\_content=89810707&amp;utm\_medium=social&amp;utm\_source=twitter&amp;hss\_channel=tw-4083531#party](https://www.telerik.com/build-2019?utm_content=89810707&amp;utm_medium=social&amp;utm_source=twitter&amp;hss_channel=tw-4083531#party)
Yup! If you notice though, the service was not declared as anything. The only binding was to a HttpClient object that is used as a constructor parameter in the service class. I think what I've found is that if i dont bind the service, but still "Get" a instance of it through the container, a new object will be created each time. I made a change to Bind the service as singleton, and now when i call the "Get" the container knows its been initialized and does not re create it. Next question if you are able sir. If i Bind several services right at start up, is that code smell? The app uses several, so my thought was to just bind them asap.
They are making progress but it's heavily marketed at a phase where it doesn't really offer anything to professional developers. Sure for a hobby project you can use it but I'm not about to make promises to my managers about a technology that's in preview and likely to remain there for this upcoming year at least.
Can anyone recommend a good free course on ASP.NET? (I'm looking into backend development)
..... which is why they have the server side version which is out of pre-release and can be used in production today. And they are making it as easy as possible to transition from server side to client side. What exactly is it you are complaining about with this?
This is totally normal. You only really need to late bind if you want to change a binding at some point. With dependency injection, you usually have a class or 2 somewhere called the "dependency root". This area of the code is used to set up your dependency bindings. Then somewhere the "root" dependency will be constructed/resolved. In Core Web API, you create all your bindings in the Startup class. Then each controller acts as a "dependency root", where you define a service argument in a method or constructor param and the IOC container will inject it. In WPF, you might create all your bindings in a view model locator class, and then each view model acts as a dependency root with services inject via constructor/method. In a console application and you have a large object hierarchy, you might define your bindings in Main and then also inject your "root" object(s) explicitly in the same method.
all of them? no. a great share of them. Yes they are .
C# in depth is up to the fourth edition which covers up to C# 7 and some potential version 8 features, if you aren't aware. That amazon link actually suggests it as a newer version too. I've been waiting for it to go on sale to pick it up!
Yeah, sorry, I'm using gitlab. I'm also on a team, which means I guess I have to tell all the other devs, hey about that commit I made last week, yeah, just ignore that, lol!
I work on a team, and we use gitlab. I guess I should have said that, my bad. I work on my own branch to begin with. I'm not even allowed to push or merge to Master.
Interesting. So how do you merge your code into master?
What do you think. Net core is?
C# is a language .net core is a framework. So i imagine your talking about .Net framework if so your in luck because the similarly is so close they created .Net Standard
Zebra technologies
First of all, thank you for your help today. I figured it out! # My Solution for Future People The problem did end up being the authentication. There's just no way around it, if you use **only** Windows authentication, CORS will not work. The preflight request will be rejected by IIS before it ever gets to ASP.NET Core. Why browsers can't authenticate on the preflight request ... I don't know. But they just don't. So, to solve the issue I needed to enable both anonymous and Windows authentication in my `web.config` file. This will allow the preflight requests to get through IIS and to be handled by the CORS middleware. To then protect your routes/endpoints, you must use the `Authorize` attribute. I added it to my lone GraphQL controller. Enabling both anonymous and Windows authentication behind IIS will introduce another problem. I can't remember the exact error message but it was something about missing a default authentication scheme/challenge scheme. To fix this error, you need to add the following line to the `ConfigureServices` method in `Startup.cs`: services.AddAuthentication(IISDefaults.AuthenticationScheme); It took me forever to figure out why `AddAuthentication` did not exist on the service collection. I needed to add a reference to `Microsoft.AspNetCore.Authentication`: dotnet add package Microsoft.AspNetCore.Authentication `IISDefaults` exists under the `Microsoft.AspNetCore.Server.IISIntegration` namespace. By the way, I don't really understand authentication schemes and whatnot, so I don't know why this works ... it just does. Here is what my ending (and working!) configuration looked like: `web.config`: &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;configuration&gt; &lt;location path="." inheritInChildApplications="false"&gt; &lt;system.webServer&gt; &lt;security&gt; &lt;authentication&gt; &lt;anonymousAuthentication enabled="true" /&gt; &lt;windowsAuthentication enabled="true" /&gt; &lt;/authentication&gt; &lt;/security&gt; &lt;/system.webServer&gt; &lt;/location&gt; &lt;/configuration&gt; `Startup.cs`: public class Startup { private readonly string DevCorsPolicy = "_devCorsPolicy"; private readonly string ProdCorsPolicy = "_prodCorsPolicy"; public Startup(IConfiguration configuration) { Configuration = configuration; } public IConfiguration Configuration { get; } public void ConfigureServices(IServiceCollection services) { services.AddMTSGraphQL(); services.AddAuthentication(IISDefaults.AuthenticationScheme); services.AddCors(options =&gt; { options.AddPolicy(DevCorsPolicy, builder =&gt; builder .AllowCredentials() .WithOrigins("http://localhost:3000") .WithMethods(HttpMethods.Get, HttpMethods.Post) .WithHeaders(HeaderNames.Accept, HeaderNames.ContentType, HeaderNames.Origin) ); options.AddPolicy(ProdCorsPolicy, builder =&gt; builder .AllowCredentials() .WithOrigins("http://test.example.com", "http://example.com") .WithMethods(HttpMethods.Get, HttpMethods.Post) .WithHeaders(HeaderNames.Accept, HeaderNames.ContentType, HeaderNames.Origin) ); }); services .AddMvc() .SetCompatibilityVersion(CompatibilityVersion.Version_2_2); } public void Configure(IApplicationBuilder app, IHostingEnvironment env) { if (env.IsDevelopment()) { app.UseDeveloperExceptionPage(); app.UseGraphiQl(); app.UseCors(DevCorsPolicy); } else { app.UseCors(ProdCorsPolicy); } app.UseMvc(); } } One thing that I learned which stumped me for a while was that you can't use `AllowCredentials` and `AllowAnyOrigin` at the same time. You need `AllowCredentials` when you use Windows authentication, so you have to specify each origin that you are okay with accepting. Hopefully this helps someone down the line.