Haven't had a chance to try it yet myself, but I've had my eye on [spec#](http://research.microsoft.com/SpecSharp/) for a while. It's "Design by Contract" for C#.
Whoa, fascinating. Thanks. Being able to check this at compile time is definitely more appealing.
List already has this: List&lt;T&gt;.ForEach(Action&lt;T&gt;) Putting it on IEnumerable doesn't feel right to me. IEnumerable types are not necessarily finite in length (see yield return, etc.) While it's true that you could have a foreach operation on an infinite collection, with the intention of the breaking out at some point, that's not really "each." That's "some." &lt;/rant&gt; But seriously, it's really cool to see people doing things like this with c# 3.0. (Quite possibly the most underrated language available right now.) 
It seems I didn't do enough research prior to creating this code. Microsoft already has a suite of "Dynamic Data" controls being cooked up. Here is a post describing these controls: http://weblogs.asp.net/scottgu/archive/2007/12/14/new-asp-net-dynamic-data-support.aspx I have not yet tested them, but they appear to do everything I was attempting to create on my own.
Theres not a lot of information out there about creating providers for LINQ. This one is the most comprehensive I have found yet.
"we are going to see “better support for **Web 2.0** technologies like REST, POX and ATOM”" (*sigh*) Don't tell me Microsoft's falling for this horse shit now? 
People put a lot of work into a not-very-funny punchline here. Oh jesus. Someone mentioned [[DebuggerStepThrough]](http://48klocs.blogspot.com/2007/10/debuggerstepthrough-considered-arrogant.html). I need to hop on a plane and start punching throats now.
From the comments... &gt; Too bad nullable types do not behave like SQL nulls. No shit. In the relational world, null has a different meaning than null has in the object world and you treat them differently. I'm not complaining, because I'd much rather say (x == null) than object.IsNull(x) to check to see if x is null. (Protip: in the database world, null != null.) I can't moan about the implementation of nullable types all that much, other than the fact that calling .ToString() on them will coalesce a null value into an empty one on you. And since it's a struct, you get a .Value property exposed on the nullable type which is kind of odd to see.
In SQL Server, a SQL statement like 'NULL=NULL' evaluates to false. however 'NULL IS NULL' evaluates to true. So, for NULL values in your database columns, you need to use the 'IS' operator instead of the regular '=' operator. The problem is, in Linq to SQL, there is no such 'IS' operator since 'IS' is already used as a C# language keyword.
Examples of how to format LINQ code for readability.
slick, thanks for the link
WCF 4TW!
Interesting article, but... nablasoft.com? Really, guys? I worked with a guy who wanted to name his consulting company Zig Zag "because when other people zig, we zag." I had to have a little sit-down with him and explain that [Zig Zag's already known for rolling papers](http://www.zigzag.com) and you do the math on whether potential clients want consultants or Cheech and Chong. In light of Nablasoft, it doesn't seem so bad now.
Interesting. I've never had a problem with MS VS service packs.
Just get [ViEmu](http://www.viemu.com/). It's awesome and well worth the money for any professional developer.
They are not hacks, they are standard knowledge if you have been coding for a couple of weeks.
Me either, but along with RhinoMocks, I've heard complaints on forums of people's installations of VS.Net 2008 being annihilated by SP1.
Wowzers. I'm going to hold off on SP1.
For whatever it's worth, it installed on my machine without a hitch. It took a freaking hour, but no problems whatsoever.
&gt;yield return streamReader.ReadLine().Split(new char[] { ',' }); I always hate it when I see this used for reading CSV files. The layout is way more complex than that, making a split on the comma useless for most real-world applications. There's another project out there somewhere (maybe codeproject too) that I found a while back that gives a nice implementation of the full CSV "spec", will read it into a datatable, etc. You can query a datatable as IQueryable using Linq BTW. Can even use the old ODBC Jet driver as long as you don't have more than 255 columns in the file.
The function CaluculatePrice doesn't calculate anything in the first place. 
hmm, it ended up being 7.1MB download. I thought they would do better. I emailed them about using a better encryption like .7Z but they refused. Oh well.
That is the developer runtime. The end user runtime is 4.7mb.
oops, that is the size of the OSX version.
Sorry no. Microsoft has permanently lost developer mindshare by supporting strong IP , to the point of sabotaging their own flagship product - Vista. Why should any of us labor to make Microsoft more wealthy when they want to make the computer *less* useful, for the sake of their top level partners. The future of Software is a completely open stack. It no longer matters how cool your software is, if we can't trust the executives in charge, we can't trust the development direction they advocate. Microsoft is the next Sun Microsystems. And this is coming from someone who was well paid to write Microsoft Software and used to love Windows. &gt;Mark my words, in as little as 2 years, Silverlight will be a key component in how we build our applications. Mark my words in as little as two years Microsoft and Windows will be less relevant than ever. 
This should be included by Microsoft in the framework IMO. I've seen this done by untold people. Kudos on releasing it. I'll check it out and the license.
Nice looking but incredibly sluggish on my machine. (which, admittedly, is quite old (slow P4, 1GB RAM, XP SP3))
Could someone enlighten me as to what this offers over Windows Task Scheduler or Chron? 
"In my focus on LINQ to XML, Open XML, and now SharePoint, it’s pretty rare that I have to directly use a SQL database." I guess I'm not understanding this correctly. What's so bad about directly using a SQL server? I've been looking at LINQ lately and more and more it appears like a giant wrapper around something that already works just fine. It's virtually a language of its own so if I'm going to learn a language, why not SQL? (just wondering, not hating) 
LINQ to XML != LINK to SQL != LINQ He is saying that he doesn't directly use SQL often anymore because he is either pulling data out of XML or SharePoint. LINQ to SQL is just an ORM. If you like to work with stored procedures and views you won't really benefit from it. LINQ by itself however, will be useful for you to learn if you want to do some data processing on your application server after you've pulled your data from your database server.
That function is one of my favorite "old standby" criticisms of the design of the .NET BCL. So much of the BCL is just horribly thrown together.
&gt;I don't like .NET because it is like every other language and doesn't play well with other languages. Wow... just wow... That is really profound.
So this douchebag should go program all his shit in assembly.
I did the same thing with First() and Single() - extension methods called FirstOrNull() and SingleOrNull() that emit null if provided empty sequences rather than chucking an exception. Extension methods are good times.
Isn't that wasteful to have to count the sequence just to check if it's empty? Is there no more efficient way?
i have
is anyone pissed off that there's not an open source equivalent to visio yet?
I think I did a while back, but I don't remember.
Error: Server forgot page.
Not me. Although I do love dotnet. Fortunately, I have you guys to give me all of the really neat info in regards to C#, .NET, the CLR, and other great things.
Even if it *is* only gst posting, I appreciate the effort. I've caught a few interesting tidbits here and there that have helped me.
I have, but gst is an unstoppable posting machine and there's nothing wrong with that.
I havn't yet, but I havn't really posted anything, I am a knowledge leach :(
The Microsoft utility is a god send.
via: http://devlicio.us/blogs/tim_barcz/archive/2008/10/21/mass-transit-part-2-of-n.aspx
It's great! It's called crack! -Tyrone Biggums
via: http://www.rhizohm.net//irhetoric/blog/70/default.aspx
One of the powerful features of LINQ is that it can be used on any List&lt;&gt; or IENumerable collection. Retrieving a list of installed applications on a computer using the C# 2.0 method involves several lines of code (20 in the example below), while the LINQ method results in 10 lines of code (a 50% reduction). Not only is the LINQ method more concise, it executes faster, as well. 
&gt; No existing exception adequately described my problem &gt; I'd argue against this because of InvalidOperationException. Invalid operation should cover most exceptional cases True, so most custom exception classes should inherit from it. (Not that I disagree with to post totally. I rarely create custom exceptions.)
The author of the article doesn't explain why "Syntactic sugar for null checks" is a better solution than non-nullable types, nor does he really explain how these "null checks" are supposed to be validated at compile time. 
I'm guessing the blue ribbon up the top was a left-over from the days when Microsoft's internet strategy was labeled "Microsoft DNA". I'm not too impressed with the redesign - but it is an improvement (which isn't much of a stretch w.r.t to the old logo). It reminds me again, that I wish that Mono had been named .ORG 
It would be better because it would leave us with fewer confusing subtypes. Also, those null checks could be done in a very similar way to type inference in F#.
Same here. Even signed in.
Bad choice of name. I thought this was going to an article about somehow embedding Delphi into Mozilla's Prism platform (which would have been intriguing simply because it implied witnessing the workings of a mind in the throes of insanity).
1. Here is the [download link](http://www.microsoft.com/downloads/details.aspx?FamilyId=922B4655-93D0-4476-BDA4-94CF5F8D4814&amp;displaylang=en) 2. Here is the [VS2010 Website](https://connect.microsoft.com/VisualStudio/content/content.aspx?ContentID=9790) also: System Requirements * **Minimum 75 GB available HDD space** (wtf -&gt; really??) Also how about Microsoft actually start using some damn batch torrents to download files, rather than force people to babysit individual packages.
1. Here is the [download link](http://www.microsoft.com/downloads/details.aspx?FamilyId=922B4655-93D0-4476-BDA4-94CF5F8D4814&amp;displaylang=en) 2. Here is the [VS2010 Website](https://connect.microsoft.com/VisualStudio/content/content.aspx?ContentID=9790) also: System Requirements * **Minimum 75 GB available HDD space** (wtf -&gt; really??) Also how about Microsoft actually start using some damn batch torrents to download files, rather than force people to babysit individual packages.
Son of a.. I just got 2008/3.5 rolled out I'll let you know when I'm planning to wash my car next so you'll have an umbrella handy.
I wonder if the minimum HDD space is a typo, if you look at what is downloaded: 353.3 MB - 7353.3 MB*.
I'm seriously considering learning java. The releases are too soon and the ide is just too expensive to upgrade every year and half.
The grass isn't much greener over on Java's side. Big vendors and Java are competing to drive the amorphous language specification. There's cool stuff happening over there (Clojure's pretty dang sweet) and Eclipse is a pretty nice IDE, but it's not like Java's a wart-free platform.
I am guessing it is - actually I got it last night and I will install later today. Will let you know (assuming you haven't done so already) what the deal is.
&gt; It would be better because it would leave us with fewer confusing subtypes. C# already has syntax for denoting whether a data type can be null or not. Expanding it to include objects would just make the language more consistant. &gt; Also, those null checks could be done in a very similar way to type inference in F#. But isn't that just the same thing as an implied non-nullable type?
It won't be released for 1.5 to 2 years, so don't sweat it.
**Update Oct28 2008 3:15pm EST** Finally got this beast going. You need at least **25 GB** *not 75* (so far) because after extraction, you get a 25 GB Virtual PC image that has all you need. I almost thought I needed a new laptop hard drive just to extract the files :-)
Crazy, they are already talking about C# 5.0 too
CTP = Comunity Technology Preview. Visual Studio 20**10**
Knowing the reddit groupthink, despite there being free Silverlight implementations for Linux like [Moonlight](http://www.mono-project.com/Moonlight), even endorsed by Microsoft themselves, this probably wont stop most people here from claiming the Silverlight is a closed platform with no web penetration and hence is a stupid platform to develop for. Me, myself, I think it looks quite promising. That being said, I think it is interesting how they highlight video to the extent that they do, when the one thing I have heard complaints about, is that the Silverlight media-player lacks key error-handling features and kinda leaves the developer on his own.
My problems with silverlight 2.0 have nothing to do with any kind of closed platform. My problem is that it's broken out of the box: http://silverlight.net/forums/p/20844/78325.aspx No session support for WCF.
Go ahead and learn java. You'll come running back.
Nothing wrong with the submission, but for clarity I'd add ASP.Net to the headline, not just MVC.
This is good stuff. I was intending to look into this stuff anytime soon now(tm) and this is just up my alley. Bookmarked!
Where the hell were you last week when I needed this exact information!
my bad
I'll forgive you ... This time. Seriously though- Fantastic Article.
I'm more in the "they should all either be nullable or nonnullable" camp. The whole idea that some things are nullable by default while others aren't and having all of this crazy syntax to back it up seems silly. Instead the system should be made to be more consistant. 
Fair enough. So does that mean you'd be in favour of a wrapper type like the Maybe monad in Haskell? Perhaps something like: Nullable&lt;string&gt; x = Nullable.Null; Nullable&lt;string&gt; x = new Nullable&lt;string&gt;("Foo"); string x = Nullable.Null; // type error Nullable&lt;string&gt; x = "foo"; // type error
Apparently not... 
I am just happy to see some competition.
While that's pretty cool, I'd argue that the linked tests on memory usage and performance is even more interesting. You might try submitting that in the programming reddit and hope it doesn't end with too many hissyfits :)
If Mono ends up on Andriod without too many hitches I think I'm going to definitely get an Andriod phone. I love programming in C#, but Windows Mobile so far is just crap.
..and with [mono on iPhone](http://tirania.org/blog/archive/2008/Mar-10.html) and [mono on Wii](http://www.reddit.com/r/programming/comments/7numy/first_monobased_wii_game_on_the_shelves/), where isn't Mono going to be.
Open source beyond ROTOR?
I fucking hate when people use the word über. It's über not cool.
This is pretty cool stuff. Going at this pace I might have to do mono vs MS CLR runtime performance tests sometime soon.
I haven't had time to start playing around with Mono but this is good news. I need a reason install Linux on the work pc's.
Waiting faster for the window message pump doesn't count for a reason to switch to SIMD and Linux
You won't upvote your own submission?
Last I used the framework it was on Preview 3; it has added so much cool stuff since them! I love that pretty much everything is self-configuring using reflection; down to UI scaffolding and automatic form validation with UI feedback. Toss up now between MVP (which still supports cool stuff like grids) and MVC, which I really want to try again. 
This thing seems to get better by the release and it's not even version 1.0 yet. I have an unused domain I've wanted to get working on for quite a while, and I guess this might be a good enough reason to get started.
This is a huge issue for me. I teach basic computer programming and so much of my day is spent with students, leaving time for me to learn newer technologies limited. In addition, I make the personal decision to have a work/life balance, and not all of the "life" part is computer related. It also makes me worried for my students, and the next generation of software developers in general. If those of us with experience and base knowledge have to run full speed to keep up, how does a new developer without that knowledge even get on the treadmill? I want things to be easy, safe, and simple because I know that makes for better software. The proliferation of models and frameworks doesn't seem to help that... And the lack of shared terminology and technique. For example, I spent some time learning WPF recently and I like it [although many things could be much improved]; Silverlight is based on the same XAML/.NET CLR, but certain things, like data binding, are done completely differently. Why? No good reason that I have seen, but now that's two different things to learn when it could have been one.
For the release notes go: http://www.mono-project.com/Release_Notes_Mono_2.2 
actually, same link but [2.4](http://www.mono-project.com/Release_Notes_Mono_2.4)
Ach! You're right! Crap.
Development guidelines and recommendations for organizing .NET applications with Autofac IoC.
Well, I'm starting a C# project in ASP.NET, and this decides it for me: I'm going to push for ASP.NET MVC instead of classical ASP.NET.
I agree that ASP.NET programmers should know JavaScript now and should be learning about the new frameworks - particularly jQuery. However, when ASP.NET first came out, many ASP classic developers were still having panic attacks over what Netscape 4 did to them and their JavaScript. I don't think ASP.NET protects you from HTML *that* much. I think the author's complaint here is a little overblown. Also, if you're doing non-AJAX pages, ASP.NET is just fine. And it's really only under certain business conditions that you need to have a small, lightweight page. That needs to be kept in mind. It's also a bit unreasonable to imagine a scenario where a VB programmer new to ASP.NET is going to make a ton of custom controls the way the author described. So while I agree that ASP.NET cranks out large pages, I strongly suspect that most of the time this is not a big issue (especially for newbies). And sure, when you're doing AJAX-intensive pages, you don't want to have to truck over the entire database - I get that. And yeah, the update panels are weird. But there are other ways to go about doing AJAX in ASP.NET. The update panels and the AJAX toolkit in a way protect you from knowing how to use good ol' XMLHttpRequest - and ya really gotta know how to work that. I wish the author would go into more detail about "leaky abstractions" - I'm not sure what he's trying to say there. I'm new to ASP.NET MVC, so I'll have to look into that more before commenting on its inclusion in this article. I hope the author is right that ASP.NET MVC is the way to go.
I always write my master-pages, templates, user-controls etc using plain XHTML and stuff like that, so I refuse to be put in the "for VB programmers who don't know the web"-category, but I gotta say: For some things I really love ASP.NET and for making the web not suck. Just setup your form and don't care about state, subscribe to events and generally just focus on your business logic. It's great! However, sometimes when I need stuff not provided by ASP.NET and need to step *slighty* out of the box, I find myself spending 100s of lines of code adding odd viewstate variables, redefining page event life-cycle events and adding public static classes to access the simplest thing which would require *one* bloody line in PHP. For the domains that ASP.NET does well it is *great*, but when you need to escape the standard model, it's hard to justify all that extra work for what should really just be a simple line of code.
Any idea when ASP.NET MVC is actually going to be released?
&gt; However, sometimes when I need stuff not provided by ASP.NET and need to step slighty out of the box, I find myself spending 100s of lines of codes adding odd viewstate variables, redefining page event life-cycle events and adding public static classes to access the simplest thing which would require one bloody line in PHP. And *that* is the biggest problem with ASP.NET. The framework makes it mind-numblingly difficult to do things that it wasn't designed to do. I love most every other aspect of the .NET platform, but traditional ASP.NET is such a straitjacket that I dread having to use it. ASP.NET AJAX is just a crap patch over top of ASP.NET. ASP.NET MVC is alright, but I'm not sure if it's good enough. By default it includes jQuery for the client-side stuff, which makes me happy. I'm not holding my breath though.
I dunno for sure, but here's a helpful link: http://aspdotnetmvc.com/ 
This is simultaneously interesting, and a glimpse into a circle of enterprise hell previously reserved for Java programmers.
If you know ASP.NET well, you can cherry pick when to pay the postback price and when not to. I pretty much never do, and I still get alot out of it. If you want to write very simple testable no-postback plain-HTML pages using ASP.NET, you can do it (even without the MVC framework). You don't HAVE to use the built-in controls; they make some things MUCH easier, but they have a price. How is that unexpected? This guy seems to be saying: I'm ready to quit ASP.NET because some people (not me!) don't know how to make it work well. 
My experience to a T.
Let's use new RuleAssert syntax to make our unit tests more efficient and easy to maintain.
&gt; With this approach, we don't have to bother about writing description I happen to disagree with this one. I *want* my unit-tests to tell me not only that it failed, but what assertions failed. For larger projects, once your set of unit-tests exceed a certain amount, getting a plain-text explanation of what is wrong with your code is something I appreciate. Also not sure I find the alternative syntax much better or more readable. My initial impression is that once tests go beyond the most basic level, cramming them into lambda expression will only get uglier, not better. As for replacing the whole "verbose" "visitor" with "v", how about: Visitor v = visitor; Bear in mind, I use regular Visual Studio Team systems edition's unit-testing framework, and have no exposure to NUnit at all.
That was the most uninformative, confusing yet inquisitive blog entry I ever read. I hope Oslo becomes something and doesn't fizzle away. It would be wonderful never to hear the term CRUD again.
As far as I can see, all these buttons uses HTML &amp; Javascript exclusively. I don't really see what's .NET-specific about it.
Maybe it's just the hour of the day, but I thought the JNI rant was the most amusing one ;)
This is pretty cool. I've never considered using the DLR for extensibility, but by the looks of that sample code it doesn't really take much more code than general reflection to get it going.
I'm interested in hearing feedback concerning development frameworks other use. Primarily interested in .Net (CSLA, Spring.net, etc.) Do you feel time invested in learning them is worth the effort and speeds development later on? 
Do you mean, only Microsoft's framework? As far as I can see, .Net is the future for a lot of microsoft's stuff. If i'm not mistaken, .Net is not only been implemented on Windows' PC but also on the mobile platform (windows mobile); so if you are coding in windows, .Net is the way to go. As far as development goes, .Net can be deployed very fast and the learning curve is not as high as other framework (say, Cocoa in Mac OS).
Don't think I explained what I'm looking for very well. Sorry about that. I'm a .Net guy and will continue to be so in the near future. I'm looking for recommendations about application development frameworks (like [CSLA.net](http://lhotka.net/cslanet/) or the [Spring framework](http://www.springframework.net). Most of these types of addon framework products offer modules or portions that you can use or not use as you see fit (data access, transactions, messaging, etc.) I've read about these few but never worked with them directly and am curious if anyone else has or if there are any other similar frameworks out there. 
Not a single overall framework, but sure, I use lots of frameworks. log4net, iBATIS, nHibernate, a couple of the Castle projects, and nServiceBus to name the most significant. I have a default architecture, but it hasn't been my experience that such a thing as a single monolithic application framework is the way to go.
did you get tired of waiting for Fluent NHibernate or something? Or did you really think the world needed yet another ORM?
That's quite a difference in performance. Might keep it in the back of my head should I need to write Powershell scripts working on massive amounts of data.
One of the comments in the linked MSDN article shows how to wrap VB's when for use in C#.
The problem with VB is that it's not good to program in. The way it handles boolean evaluation is annoying, null and conversions will make you crazy, End With and End If are much more difficult to see in the smattering of words than punctuation marks like brackets, and what's with the Dim x as y?
OLEDB is really horrible with Excel files. It's a data type nightmare if you're trying to write cell data back to the sheet. 
I was more interested in the C#/Java interop parts discussed there. If there is a good implementation of that coming around, that would be quite cool.
Why not just use F#?
I guess that's BDD?
This is actually coming from MS so maybe it will catch on this time (in the .NET mainstream).
SharpDevelop is great... as long as you aren't a web developer. I really hope they can incorporate the same functionality as Visual Studio (step through debugging, integration with IIS or Casini, etc.)
Yeah, it's too bad since it has a lot of cool features.
That was cool, but I wonder if there's any practical application?
I'm slowing warming up to LINQ, thanks.
My impression so far is that Silverlight haven't gained *that* wide adaptation, but it's definitely looking like a good platform. But with Adobe having the edge here as far as mindshare and market-share goes, Microsoft seems hellbent on constantly improving Silverlight. I would love to see the gaming part of this explode, as that would probably be one of those things to increase user-adaptation and make Silverlight more sexy to me as a developer.
No offense intended, but don't write technical articles in a language that isn't your native/first language. This article is gibberish.
Nice article, but the poor command of English really made me want to give up after the very first sentence.
http://img134.imageshack.us/img134/192/81515442gw0.png
I honestly do not see the benefit of throwing out strong typing in C#. Except that debugging and fixing rookie code will keep me employed for years.
bullshit 
There are good reasons for it. Instead of throwing out strong typing, instead think of it as syntactic sugar for doing the method Invoke() code you might have. Using dynamic objects allows you to greatly reduce the amount of boiler plate code needed for dynamic invocation. You should not use it superfluously. You should only use it where you would normally use dynamic invocation, otherwise it will increase bugs because with dynamic invocation what would be compile time errors are only caught at run-time. 
I think the primary reason for it is not to give up static typing and suddenly make C# a dynamic language, it is more to make it easier to write C# code that interacts with things that are already dynamic. For example doing COM interop from C# is quite painful right now. With dynamic typing it will become a hell of a lot cleaner. Other scenarios: processing xml, interacting with objects from javascript or languages running on the DLR (e.g. IronPython), interacting with REST apis, etc. Anders Hejlsberg gave a very interesting talk on what's coming in C# 4 at PDC last year: http://channel9.msdn.com/pdc2008/TL16/ (can download or watch online).
Every .NET application needs powerful logging that is easy to configure. 
I probably shouldn't comment on this after drinking but...why the hell is the logo of ASP not a snake.
That is an excellent question. It could be a riff on the [Visual Studio "figure-8/infinity" logo](http://blogs.msdn.com/blogfiles/marcalt/WindowsLiveWriter/TeamSystemSessionsaufdemLaunch2008_EB0C/Visual%20Studio%20Team%20System%20Brand%20V%20Logo%20Rev_2.png). Maybe a snake eating its own tail, Ouroboros-style, [but twisted in a figure-8](http://www.travelnottour.com/images/ouroboros.gif).
Because they want people calling it A.S.P., not "asp" (as in the name of the snake that rhymes with rasp). 
I think in the long run (2+ years), JavaFX and Silverlight will push Adobe by the side regarding technology. I think Adobe will remain top dog regarding designers; but with the *hordes* of Microsoft developers just starting to use Silverlight, the tide will definitely change against Adobe.
Not directly .NET-related, but I figure most of you .NET developers host web-solutions on IIS, and just assumed this might be interesting to you none the less.
My company is moving from IBM based system development into Microsoft based technologies. Primarly WPF and WCF written in C#. We are required to have X number of developers certified to obtain partnership level Y with Microsoft. When I asked if I could help out by getting some certifications, my company said they will pay for the test (assuming I pass) but not any courses. So I'm wondering a) is it worth taking a course or just getting a book? and b) Will I even gain benifit above and beyond just reading MSDN and figuring everything out on my own (aside from padding the resume)? I have a computer engineering degree, and have experience with C++ and C#, just not the new 'foundations'. 
Don't even bother.
There is minimal personal gain from taking the tests. The big thing is that your company reaches a partnership level with MS. You can pretty much tell developers that have taken the exams and have no experience to back it up. As to your first question, it depends on how best you learn and memorize. You'll want a test prep book at a minimum. A course could be beneficial in networking with other developers.
The job I have now is technically a VB.Net developer. That's my title. I was hired to rewrite a VB6 app in .Net. I started in Vb because that's what they said they wanted. After I was here a few months I realized they didn't care, so one weekend I ported it to C#. I had come from a C++ background and so I missed my semi-colons. All that said, I think the guy is right. Go to C# if you're coming from VB background. Otherwise you'll be writing VB6 apps using VB.Net language.
This is the kind of stuff I want to see on reddit. A good, technical article with some key insights. I say this one deserves a resubmission in the general programming reddit as it would probably be interesting to more than just the dotnet crowd.
Here's where to download: http://www.microsoft.com/downloads/details.aspx?FamilyID=53289097-73ce-43bf-b6a6-35e00103cb4b&amp;displaylang=en The pdf for the guy's book seems reasonably priced. I may buy it just for the hell of it. I'm looking at you Apress! For some reason it's showing up in pounds (sterling) now instead of dollars... Hmmm http://www.packtpub.com/asp-net-model-view-controller-1-0-quickly/book 
Or you could get a taste of ASP.NET MVC with a free ebook chapter (full tutorial) from another book. http://weblogs.asp.net/scottgu/archive/2009/03/10/free-asp-net-mvc-ebook-tutorial.aspx
Another announcement can be found here: http://haacked.com/archive/2009/03/18/aspnet-mvc-rtw.aspx
Danke! I bought the other guy's book. I figured if it sucks it's only $20, so who cares. I'll read it on vacation (lots of long train rides :)
Only wish they could have supported the 1.1 framework in it. i hate having to have visual studio 2008 and vs 2003 both installed at the same time.
Any idea when Silverlight 3 will be out?
Wouldn't it be easier to just use WPF, the few year old .Net framework that came out around the same time as Vista that Silverlight is a subset of??
The only thing I can guess is that Silverlight runs on Mac's and Linux (through Moonlight) maybe this means these apps can be installed on those machines also.
Well, there's a few things in WPF that just aren't in Silverlight 2. I haven't looked too deeply into what they added to Silverlight 3 but at the end of the day it's still a subset of .Net and WPF. If I was going to write a desktop application, why would I want to live in the limited sandbox of Silverlight? A good example would be sockets. With an actual WPF .Net app I could open a socket on any port to any server. With Silverlight (at least 2.0) you're limited to what ports you can connect to and that's only if a cross domain access file of some sorts. That means a pop3 or imap mail client is right out. With the full version of .Net I could do it. Hell, I wrote some code to do just that back in .Net 1.1. Now I'm not saying that this isn't kinda cool. Say you wrote a Silverlight game. You could add an "install this game to your desktop" button and still get paid for any sort of ads you've put in your game without paying for the bandwidth every time someone wants to play a quick round.
just curious, what ya still usin 1.1 for?
Overview of technologies that would affect development in the next 5-10 years.
I ran similar tests and got mostly the same results. 4 or 5 for dynamic but no more.
Mocking library + IoC Container == Mock Container. It simplifies writing unit tests for complex pieces like MVC Controllers.
Amazon has just announced their "Elastic MapReduce" cloud computing service. Could Windows Azure catch up to this offer?
not if it runs vista. if i can use spare azure cycles just to run vista on my machine then, yes it can be successful
You could try Cloud OS, then))
i used to use spring.net years ago, but moved on to windsor and have been using it ever since. spring.net is a really large framework that supports a lot of good ideas and technologies, but it's a little old school in terms of adoption of new .net features and idioms. windsor on the other hand, like the rest of castle, is very modern and takes advantage of new features in the framework quickly. i haven't used unity, but from what i've seen, it doesn't look awful. other options for consideration would be: structuremap, ninject, and autofac.
People used to use MS EntLib's IoC, now Microsoft has release another IoC called Unity which can be used independently from EntLib. I've heard it's pretty good. 
Spring.Net is a pain in the butt. Unity (MS EntLib's Ioc) is nice actually, but not as full featured as other Ioc. I love StructureMap, but Windsor is also VERY good. http://elegantcode.com/2009/01/07/ioc-libraries-compared/
We just switched from spring.net to Autofac for perf and maintainability reasons. Anything that requires xml or strings is a giant pain in the ass.
Wow - thanks guys!
I guess it helps to understand the framework before bitching about it. Every time I think the framework fails in some way, after a bit of research, I discover good reason behind things. One of the cool features about Visual Studio 2008 SP1 is that you can step debug through the .NET framework source now.
One advantage to the certification is that, if you train with one of the official books (highly recommended way), you won't learn to do things in a concrete way but you'll get a good overview of what's available to you. So when you do get down to having to make something, you'll know your options. Otherwise, in my opinion, the industry does value those certifications, specially in the consulting business.
I found the answer to this, yes these applications can be installed on a Mac. I'd assume once Moonlight supports this these application can be installed on Linux.
I'm having problems passing a C++ BSTR to the C# method. Everthing works great with integers, but when I try to work with strings strangeness happens. The C# "tStr" parameter comes out as a zero length string. But when the C# method returns the string "test return", the c++ program prints it just fine. Can anyone suggest where I may be going wrong? C# Code: using System; using System.Collections.Generic; using System.Text; using System.IO; namespace ManagedDLL { public interface ICalculator { string StringTest(string tStr); }; public class ManagedClass : ICalculator { string ICalculator.StringTest(string tStr) { Console.WriteLine(String.Format("|{0}|", tStr.ToString())); return "test return"; } } } C++ Code #include "stdafx.h" #include "tchar.h" #import "..\..\CSCPPTest\bin\Release\ManagedDLL.tlb" raw_interfaces_only using namespace ManagedDLL; int _tmain(int argc, _TCHAR* argv[]) { // Initialize COM. HRESULT hr = CoInitialize(NULL); // Create the interface pointer. ICalculatorPtr pICalc(__uuidof(ManagedClass)); BSTR MyBstr = L"I am a happy BSTR"; BSTR MyOutStr; pICalc-&gt;StringTest(MyBstr, &amp;MyOutStr); wprintf(L"The result is %s\n", MyOutStr); // Uninitialize COM. CoUninitialize(); return 0; } 
I answered my own question. If I modify the C++ in the following way: BSTR MyBstr = L"I am a happy BSTR"; into LPSTR MyBstr = (LPSTR)"I am a happy BSTR"; And the C# interface code: string StringTest(string tStr); into string StringTest([In, MarshalAs(UnmanagedType.LPStr)] string tStr); Everything works.
As a heads up, you don't need the tStr.ToString in the string.format method. It does that automatically, even if it's a different object type (such a date). On the same note, tStr already is a string, making it doubly silly.
Yeah, that ToString() was a remnant of some stab in the dark desperation. I believe at one point I was trying to pass it as an Object and use ToString() to just dump whatever was present, which as it turns out is nothing :) I still have no idea why the BSTR parameter didn't work.
I write C# programs daily. I figured it would be a piece of cake to get a certification. But I bought a book just to see what I'd be getting into. That's when I learned that I had never even touched a large segment of what was tested. For me specifically it's the security aspects of the .NET framework. It's a big portion of the test, and I never use it in my daily work tasks. So it's worth it to pick up a book just to learn what you're missing from your skillset.
I love these kind of articles where C# is actually explored as a language. Not saying I'll adopt this style, but thanks for posting anyway :)
hacker++ for you
[stackoverflow](http://www.stackoverflow.com) is your friend
Interesting concept but it seems to miss one of the key points of educational content today. You need to provide provisions for integration into standard LMS's either VIA SCORM or their native adapters. Being able to develop content and it's context is certaintly part of the challenge but you need to be able to deliver it over the major delivery platforms and it needs to be able to work with their gradebooks, course management and more. Being .NET you can certainly write your own integrations but I would expect a platform like this to at least provide the basic framework for handling that along with possible some of the more standard integrations already done such as SCORM 1.2 and 2004 Rev3
Not to sound rude, but I honestly don't see the point of this. You take what is a commonly accepted datatype and create code-fragmentation and for what? People wont type out a normal GUID, but no way they would type out *FEx1sZbSD0ugmgMAF_RGHw* either. This seems about as useful as Url-shorteners, and I honestly think the whole hype around Url-shorteners is getting pretty silly already.
Migrating projects from 1.x to anything above it is the biggest migration you can make in a .Net project. From 2.0 and above it's mostly added features and the rare depreciated but still functional method.
Let's try to reiterate and summarize some ideas about the Component Driven Development, IoC containers and evolving enterprise applications in general.
We are currently using Microsoft FxCop utility as part of the continuous integration process. It statically analyzes managed .NET code assemblies and reports any potential design flaws or issues. This tool is not the most flexible one to extend, but it is a nice one to get better insight in the code without wasting a lot of time...
nversion of Control (IoC) is an approach in software development that favors removing sealed dependencies between classes in order to make code more simple and flexible. We push control of dependency creation outside of the class, while making this dependency explicit. Usage of Inversion of Control generally allows to create applications that are more flexible, unit-testable, simple and maintainable in the long run.
I hadn't even heard about CLINQ before I saw this post, so thanks for submitting. It looks pretty cool on a technological level, but for most of my work, I'm afraid it wont come in very handy. Still: It can't possibly hurt knowing about it, and it might save me some time in the future.
These would be great if the implementations didn't suck.
It is a recipe for disaster. This is the favored process of those who don't have a clue what they want to do, but want something fast. It works best when money is no object, as money gets thrown down the hole into myriad blind alleys and dead ends.
&gt; those who don't have a clue what they want This describes 99% of clients in my experience.
Is it a web app? If so, you can change the web.config to use identity impersonation. 
Add this line under &lt;System.Web&gt;: &lt;identity impersonate="true" userName="{username}" password="{password}"/&gt; This will apply to your whole application, not just a specific bit of code. Also I probably wouldn't use your main user account. See if they can create a new one for you which has read/write permissions, but not full rights.
They did good. Just give the IUSR user read access to the folder where your ASPX pages are (tip: those aren't scripts).
Sweeet!!! Thanks, I'll give that a shot. This is great, I've been on forums all day and no one could help me.
did you try stackoverflow too? they're much more active than .NET forums
Never heard of that one. I'll check it out. Just stackoverflow.com?
This is pretty cool, and I can see lots of uses for this (generating classes with built in data validation etc etc) but I can't come up with a single example where I could use it and it hasn't already been built, like in Enterprise Library. Might be useful for a Mocking framework or if you are into aspect oriented programming? Totally off-topic: Does anyone here know if there are any good Mocking frameworks for C#, or is this yet again something the Java world has and can (sic) mock us for lacking?
Rhino Mocks or Moq seems popular.
In case the links don't work: A link to the torrent http://isohunt.com/torrent_details/49367867/%22The+net%22?tab=summary
Agreed* Personally, I like to keep these type of non-search-engine-friendly pieces of text OUT of my urls. *Although I think url-shorteners are actually quite useful for sites like twitter.
Lokad Shared Libraries project includes implementation of the MockContainer that significantly simplifies testing of Model-View-Controller elements in separation. It does this by automatically generating and injecting mock objects, should the tested class ask for them in its constructor. These mock objects are persisted in the local container instance as singleton, so that additional expectations could be recorded against them. Expectations are verified when the container is disposed...
With respect, how is this significantly different from [Moq](http://code.google.com/p/moq/)? I only ask as I am just getting into MVC and IoC.
I own this book and highly recommend it.
I have tried, unsuccessfully, many times over the years to harness the same type of power out of SSRS that I can achieve in Crystal Reports (which I loath). Eventually I gave up on both and started using XtraReports by DevExpress. I haven't tried it with MVC as I just have started tinkering around with MVC, however I have abandoned all hope in SSRS and don't use it at all anymore and are migrating all of my Crystal Reports to XtraReports.
This sounds almost like a plug but your account looks legit. Why is XtraReports better (not that I think Crystal Report or RS are fantastic)? Ninex: Thanks for the warning. I hope you find a workaround. Maybe you can just show the report from the RS web site in an iFrame?
Honestly, I guess in a way it is a plug, but my company has used DevExpress now for about 6 months and I love it. &gt;Why is XtraReports better? Pro's: 1. It is much more intuitive (although I do admit the learning curve is a little steep) 2. EVERYTHING is programattically accessible and able to be manipulated. 3. Data Fields are like form controls, they have an entire event system around them. 4. If your architecture allows for it you can change datasources without having to change the actual report and you can catch that change in the code and manipulate labels at runtime, etc. 5. There are FAR more "controls" than is offered by SSRS or CR. 6. There is an end user report designer just as there is for SSRS. Cons: 1. It is not free. 2. It does have a steep learning curve because you want to do things like you do in other report designers and it is really a mix of form development and report development. 3. This could be a just me thing, but I have a hard time making things "pretty" per se. But in full disclosure I have that problem with forms too, I just don't have a creative bone in my body. I should also say that I only have experience with these 3 reporting packages so I have not used things like ActiveReports or Teleriks reporting tools. Edit: Formatting to make readable and forgot to add #6 pro
Sounds interesting. My current opinion is Crystal Reports = PRO:powerful but buggy. CON:Server is stupidly limited to few users. It costs SSRS = PRO:good for simple stuff. Great server component. Free if you already have MS SQL. CON: a pain to make anything other then a freaking table report (how a loath that designer), impossible to keep them consistent looking from one output to another.
I worked on a project for the city of Cincinnati and they had a large set of AS400 reports that they were wanting to convert into crystal reports for their new SCADA system. I was assisting the report designer on that project and it was a cluster! In fact, it was already almost a year behind schedule when I had gotten involved. Because all the AS400 system did was compute these values and put them in tabular format the report designer couldn't replicate that funcionality so he had to do a butt load of sub reports (IIRC) and layered them on top of eachother to only show the relevant calculated field. In contrast. if I had used XtraReports back then I would have used the OnPrint event (using native C# rather than Crystal Reports language), calculated the field and returned that as output and we would have never had the issue. Things probably could have been done easier inside of CR, but I didn't know how and neither did this guy and he had made a career out of CR development (not that that necessarily means he was an expert).
So far there is two solutions. * Make the report an attachment * An iFrame
Has anyone used this, or any other Undo/Redo framework? I am interested in it, but I'm worried about the amount of work it might take to integrate this into an existing project. Does anyone have any advice or experience with this?
I'm all for reducing boilerplate code to keep things simple. Too bad about the performance hit from reflection. Guess I'll have to learn about caching soon.
Too bad you can't use extension methods for this.
It's too bad whatever elegance was gained from using reflection will just be lost in the caching mechanism. 
Don't take word of mouth when it comes to performance, use a profiler and try it out. The GetType method is the costliest operation in that code. With anything .Net 2.0 and above, run it twice on the same type and you'll get a pleasant surprise. If you dig into the documentation you'll see Microsoft was nice enough to have built in caching for that method since 2.0. For the rest? It's cheaper but your mileage may vary. People complain about reflection performance (and it is costly) but so is getting data from a DB, some file or worst the network. It all depends on what you want to achieve, what you gain (easier to maintain code?) and what you loose (won't support thousands of simultaneous users you'll never have?). Look at your code with a profiler and you'll learn a lot. I know I did.
Moq is a mocking library. MockContainer is a helper on top of IoC and Mocking libraries (Autofac and RhinoMocks). It helps to autogenerate mocks and stubs without requiring developer to do that manually. This speeds up writing unit tests.
Also check out searchdotnet.com - Customized .net google search
fucking awesome
I really really want Silverlight to succeed, but I have a hard time seeing it happening.
It's not succeeding?
It lost a [high profile customer](http://news.cnet.com/8301-1023_3-10098963-93.html) recently. I honestly don't know of any sites that are actually using it.
netflix is pretty big. and check out the mlb.tv forums - theyre flash implementation hasnt been too good either.
Huh. I didn't know netflix used Silverlight.
That is old news.. when they switched back to flash, they encountered many problems as well -- I think MLB is just incompetent.
It's a decent flash alternative, and there are a lot of big .NET clients worldwide. I see it and WCF as attaching value to the .NET platform, rather than trying to steal existing flash users.
The caching can be encapsulating at least. Implementing a vanilla visitor pattern requires touching every visitable class.
Was this supposed to be a free download? Smells warez-y to me.
It's implicit that a table has more than one row in it, therefore making the plurality redundant. 
That is true- but it seems like such an incredibly random thing to automatically change. Especially when it goes around doing things like changing Species to SPECY. It just seems that the potential for annoyance far exceeds the potential for usefulness.
I've LINQ to SQL'd qutie a few different data models, both with various amounts of plurality and inconsistency in the naming convention, and was quite surprised at how often it got it right more often than it got it wrong. It can be pretty annoying if you aren't expecting it though.
Heh - Yeah I'm mainly bitter because I'm just learning LINQ and I thought I had another reference somewhere with different pluralization. It just never occurred to me that it would do that automatically. Took me longer than I care to admit to straighten it out. Anyways thanks for the info - I was genuinely curious if there was more to it than just naming conventions.
Can someone give me a little more info on this? I've always had a bee in my bonnet about tables being named in the singular, but almost everyone I've met likes the plural. What is LINQ doing?
Summary: "In the previous research article we've talked about deploying CouchDB servers in the cloud and locally. Now it is time to outline a simple .NET adapter for communicating with these servers."
what is this. Wha wha wha, I don't feel leet enough when I am using my IDE. Guess what...you want to do command line scripts and all that with MS stuff? The tools are all there, grab the sdk and look at some of the detailed docs. Take a look at the marco tools provided or if you want to do quick command line stuff, VS has it's own command line short-cut. Alot of people chose the wizards because it is an obvious path. The UI allows them to not have to remember esoteric commands if the user does not want to. However if you do want to do that you can quite easily you just need to set it up. Note: I develop in multiple platforms, this is int MS supporting more than just pissing on someone who apparently cant read the docs or learn how to use the tools he has. 
I would start by doing some .Net golfing. Write a blog engine, a URL shortener, a twitter client. There really aren't any "fun to read" .net books out there. It's far more enjoyable to just start writing software. Visual Studio holds your hand enough that you can guess your way through a lot of boilerplate stuff. 
&gt; I presume most .net stuff ends up being closed-source Well you shouldn't, because there are heaps of open-source .NET projects. The biggest repository would be [codeplex](http://www.codeplex.com/), so you should go check that out. And icey's advice is good; instead of just reading try and make some small projects, and refer to the book/online tutes when you come across roadblocks.
You're doing it wrong. Start writing a program and study the parts of the textbook that apply.
Another note would be to read the full TOC to see what 'advanced' stuff is covered. Mostly in a book that is exam prep, you won't get shit like that. MCPD and MCAD are old certs anyway (.NET 1.1, we are now about to be on version 4). General Notes * KISS * determine what it is that you want to do and figure out a way to do it. * Most frameworks are huge and incomplete! 
Pick up Head First C#, maybe? You didn't really specify whether you're using C# or VB, so I have no idea if it's appropriate . . . It's a good book, though, especially if you're fairly new to programming (and I really don't know from your post whether you are). Very project-based, very interactive, very easy to read. On the down-side, depending on the edition you get, it has more than its fair share of errata. I [wrote a little program](http://forums.oreilly.com/content/Head-First-C-/2438/Use-Corey-White-s-errata-parser-to-find-corrections-easily-/) while working through the book a while back that collated the various errata lists and made it easier to deal with them, but O'Reilly has since improved the way they present errata, so it's not really as necessary now. If I'm totally off base and you're actually a pretty experienced programmer who is just new to .Net, then I agree with onebit -- just write programs and use the book you have for reference. Or, if you prefer more interactivity, you could check out Stack Overflow. They have questions for all language, but they definitely lean towards the .NET world. Watch for .NET questions and then try to answer them, doing whatever research is necessary -- teaching others is always a good way to teach yourself.
Complain about how everything works and think about how you could implement it in LISP ten times more effectively. That's a joke... It's hard to make studying programming more interesting. Just know that and be proud that you have managed to get as far as you have.
"What has helped people get over these 'study blocks'?" I've been studying for and writing MCTS exams lately and yeah, after a while my head gets jammed with the shit and I'm reading but not absorbing anymore. Some of the harder and more complex concepts I'd have to take time working with and see it in action but it's mainly time. Get away from it for a bit and absorb it a bit at a time. Another thing is you can only do so much with textbook examples. As mentioned here, at some point you have to attack it from the other direction. Pick a personal project and incorporate things like multi-threading or whatever concept is getting you stuck. Imagine the boss says, 'we want this app multi-threaded!'. Well get to it! :) A DJ buddy of mine has over 100,000 mp3 files and needed a ranther unique solution to cataloging, syncing with multiple online backup sources, ID3 editing and a number of other challenges. I learned a shitload from that project. 
You want to learn .net and you want it to be fun? I've got a little treat for you http://creators.xna.com/ Note: You'll still need to learn about asp.net lifecycles on your own, but you can incorporate pretty much everything else (webservices, remoting, etc) sans winforms with that site.
I've bought tons of books - ASP.Net, PHP Black Book, Java, CSS, JavaScript, MySQL, etc. I always flip through the index to what I need, then start Googling the rest. Every book I've mentioned is in mint condition without a crease in it. Some people need to sit and read an entire book to understand that concepts, but others can just skim a few pages and understand it. I believe the best way to learn is to have a project and use the book as a tool, not a teacher.
http://www.codeproject.com/ is full of great C# projects with source code. As for how to stay motivated, as onebit says, write a program and use the book for reference. Making a game is always fun and the graphics libraries in .NET are a godsend.
If you want to make it interesting, play Russian Roulette when you press compile.
What sort of applications are you (eventually) going to be developing? If it's web apps, might as well start using [ASP.Net MVC](http://www.asp.net/mvc/) since it's [open source](http://aspnet.codeplex.com/Wiki/View.aspx?title=MVC) (and a pretty nice framework to boot). You can't really get access to the .Net framework itself to step into the underlying blood and guts (well, [Reflector](http://www.red-gate.com/products/reflector/) aside), but there is [Mono](http://www.mono-project.com/Main_Page) if you want to get an idea of how they might have gone about it. Decide on a small project for yourself and make it happen.
You need to read and learn the basics. Start by creating a small website, or dissecting an open-source one. I would also advise to change your home page to iGoogle and add RSS feeds to lots of different .Net blogs. DotNetKicks and DZone are good too because they aggregate articles. Read the higher ranked ones and begin studying any concepts or words that you don't understand. Re-integrate what you have learned into your small website. Keep changing and re-structuring and playing with it until you get comfortable and then come up with a project you want to put on the internet and use the concepts you've learned. Never stop reading and don't assume anything. If one website uses string concatenation ("hello" + "world") and the next one uses string.Concat("hello", "world"), then Google it and learn about the benefits of both. Also, keep an open mind. You will meet many people in the workforce that have habits that can't/won't break - take the time to learn what they are doing, research other ways to do it, and then once you discover a better way, have a civil argument about it. Civil arguments are great because it forces you to state your position and defend your argument. If you find yourself becoming tongue-tied then continue researching. Rinse and repeat. Edit: One more thing. Download Reflector from Red Gate tools. It allows you to analyze Microsoft's source code. Get familiar with the framework and the naming conventions. Sometimes what to call a method/class is harder than actually writing it. Everyone has there own way to structure a project/solution, so continue playing the "name that tune" game until you come up with easily understandable and readable names. Finally, save all of your code! In 6 months, re-read it and see if you can follow what you are doing. Think of better ways to rewrite it and then do it. Check back and see if it makes sense in another six months.
I'm really not a fan of codeproj, for every good example of something on there, you see a million examples of horribly written code. I found the best way for me to learn was to get a basic understanding of how things worked in .NET and then get an internship. Mentoring under a good senior dev will help you more then any book could.
Better yet, play it with C++ and make sure to aim at your foot - not your head!
Wrap your mind around interfaces, abstract classes and delegates. .NET uses all of these OOP data structures, A LOT! Delegates and events are tricky to grok, but they will reward you with their utility. While we're on the subject, tattoo the Design Patterns by the Gang Of Four on the back of your hands so while your coding away you will always be reminded of them.
Do first, ask questions later... That's good advice.
...as I say, I'm studying this as part of a larger, more generalised training course - I'm not convinced I want to become a professional developer but having the knowledge about how to program a computer at any level is a personal goal. Using Visual Studio is good times. Start pulling apart some source code you reckon... That sounds interesting...
That reminded me of a joke. - googled *c++ foot head* and got [this](http://herbert.the-little-red-haired-girl.org/ascii/ascii/goodjokes.txt)
Thanks for your help - I'm glad there's some genuine folks that lurk in here.
I can't tell you how you learn best, but given that it sounds like you're ready to claw your eyes out with a textbook in your lap (like I would be), I'm just recommending that you start with somewhere specific and do a little something with it. Visual Studio and the .Net framework are both pretty nice, but you can easily drown yourself in knowledge if you're trying to learn everything that can be learned. I get paid to develop C#; I have to forcibly ignore learning most of the tech stacks that Microsoft releases because there's simply too much to learn. As someone learning to program, I might even recommend starting with [Python](http://www.python.org/) first. If you have no idea about a small project for yourself, you might consider going through some problems from [Project Euler](http://projecteuler.net/) or [Programming Praxis](http://programmingpraxis.com/) (though the latter will probably be a big stretch for you if you're just learning programming now).
Thank you. - That is *exactly* what I was hoping for. - Some inspiration on some projects. I have tooled very briefly with python, I really like how flexible and straightforward it [seems]
I was thinking more like this: "In C++ it's harder to shoot yourself in the foot, but when you do, you blow off your whole leg." — Bjarne Stroustrup.
Well think of it like this: would you walk into a workshop and see a bunch of tools and machines and think what can I build with these? Or figure out what you want to build, a table for example, and then use the tools to make it? You're first iteration might not use the proper tools or even in the proper manner for the job, but you also might get what you want done. 
Nice analogy. I guess the difficulty I have is that (aside from being a master at excuses) I've been shown the workshop, how to use the tools independently from eachother and a few materials to work with but have no idea what to build. This thread has been more valuable than I imagined. - I'm trying to digest the information and find a direction and make a start. I think a website is a very good place to start - add functional tools that will make my life easier and go from there. (my first half-baked idea is a file indexer that will take all the music, movie, application, picture, etc. files on the server at home, parse them all into a SQL database, and then I can decide what to do with the meta-data (any suggestions?) I've got the hardware in place to do that already.
If that is something you want, then it is a great start. Mainly because you get to treat it as a real project with you playing the part as both the developer and stakeholder. Also it is or could be a implemented as to touch basically all main aspects of systems in windows: windows native client (regular and/or WPF forms) and asp.net interfaces communicating with the back-end database and the windows service driving the indexing. Even with adding a database to the application you can learn the different ways to make it generic (by making a DAL that can store into MySQL, Sql Server, Oracle, etc). Or use their Entity framework or something like CSLA. There are many good abstracted DALs out there. Don't be afraid to use them, because if you ask anyone worth anything, they will say writing data access code is pointless. Besides, you know the output, you know the input, use code generation for the rest :D One application that I have been wanting to create for a while is a movie cataloging system. One where it would detect/find the links to IMDB along with the ability to track who I gave the disc(s) to like a renting system since my memory forgets details like that. Running with the music catalog you could come up with a better way to not only categories music than explorer, but you could come up with a visual graph linking artists, band members, or songs to similar or other connected entities. Heck, some websites already do that. See if you can communicate with their services. If they are other platforms, that will give you experience in communicating with other systems from .NET. That may or may not be as useful, but if you cataloged it properly, you could then build a simple player based on something like Windows Media Player or VLC and use the data you know to have a shuffle that goes based on one of those relationships. Heck you could even go lower and talk to DirectShow directly and don't even bother with other players. You could add a duplicate checker to your indexer to find the same files on the system in multiple locations. That was one of the applications I wrote many years ago. It was simple, but it taught me a few good lessons in aspects that I never had to deal with before. I extended that application to partition files into 'perfect' DVD5s so I wouldn't have to waste as many discs burning off downloads or backups. Another odd application that I wrote when I had time to play was a Steganographic image processor. Extremely simple, but knowing how to encrypt and decrypt data was a good talking point for my job interview fresh out of college. In high school, I basically started developing to make my life easier. I went to college without a plan, decided on CS and was making good grades. Turned it into a career and at 26 I am making more money than my father. The single most important skill a developer can obtain is the ability to create the application to do what the user wants. It doesn't always matter on efficiency, the platform, or how pretty things can be (even though you should try to create a format and stick with it). The user or stakeholder only wants the application to do what it is intended, and it must do it. For the rest, it is all like a business. If there is a need, fulfill it and hopefully make something of value doing it like money, experience, or happiness. 
http://submain.com/products/ghostdoc.aspx 
oh snap.
Speaking of XML comments... I currently use [doxygen](http://www.stack.nl/~dimitri/doxygen/) to generate docs from the XML comments. Anyone know anything better?
[Resharper](http://www.jetbrains.com/resharper/download/) Great tool all around for VS.NET
If you want to tell us things you don't know about, adding a list of already known things might be handy :) A few (hopefully not too obvious) handpicks: * [.NET Reflector](http://www.red-gate.com/products/reflector/) * Some people like [Resharper](http://www.jetbrains.com/resharper/), but it costs money. Anyway much better than Coderush Xpress for C#. * [PInvoke.NET](http://www.red-gate.com/products/pinvoke.net/index.htm) if you write lots of code against plain unmanaged DLLs. 
Unfortunately, it has a tough time with massive (1 million+ LOC) solutions. 
I've not dealt with 200,000+ LOC solutions yet so I haven't noticed.
I need to be fair to Resharper, it is a great tool, and I still use it (and love it). However, I have to restart my IDE about twice a day in order to deal with Resharper out of memory exceptions (I have 4gb of ram on this machine).
The new 4.5 refresh has fixed lots of bugs, perhaps that is one of them. You could compile some projects that rarely change into their own assembly solution and remove them from the solution (put them in the GAC).
Once you've used it, you won't want to code without it. My company offers it on the developer image of our machines. If I didn't have it I'd probably just buy it myself. 
[NHibernate](https://www.hibernate.org/343.html) is an OR mapper port of Java's Hibernate. I've been using it on my latest project. It has support for legacy databases, but you're better off if you have the option to redesign your schema.
I was trying to leave off libraries since that would be a whole page by itself. I've used NHibernate and SubSonic, both are great OR/M libs (although opposite in nature).
I assume you know Visual Studio is 32-bit app and with all its plugins can use only 2 GB RAM, thus exception.
My point was only that I have enough RAM on the machine
My favorite right now is CodeSmith http://www.codesmithtools.com combined with the NetTiers http://nettiers.com or PLINQO http://plinqo.com templates. Disclaimer: I'm a member of the NetTiers project. Edit: Quick and dirty fix to the links.
I feel completely naked without it. I love it!
I'm surprised they used a Flash player to display this video.
Also available in decent quality video and audio and longer playtime at http://channel9.msdn.com/pdc2008/PC20/ (delivered via the more relevant silverlight rather than flash!)
The official source didn't; the original silverlight version at msdn is more palatable (link in my recent comment)
Naw I was happy I could actually watch a video by MSDN because it wasn't silverlight.
The official source is the oredev conference 2008, second day, .NET track (oredev.org) http://archive.oredev.org/topmenu/video/net/scotthunteraspnet40roadmap.4.5a2d30d411ee6ffd28880002662.html
Update 2: I got it working with a BSTR instead of an LPSTR. You have to call "SysAllocString" when assigning the BSTR. Like this: BSTR MyBstr = SysAllocString(L"I am a happy BSTR"); Posting this in case anyone else is going through the hell I went through to get this to work. Fuck C++ btw
I am definitely playing with this and sharing the results with my team. One thing we're bad at is writing unit tests -- everyone's afraid to just dive in. The auto-generation of unit tests based off "reasonable input" might make it that much easier for me to get "Test-Test-Test" into my company's dev culture. 
Parameter is also known as a *formal argument*.
Using Mono on virtual cloud server machines would allow us to run lightweight .NET application and data gateway servers (basically, your building blocks for smart enterprise applications) in a cost-effective and elastically scalable environment.
I guess the implicit news here is that .NET 4.0 will have it's own runtime instead of being bolted on top of the 2.0 CLR. This is probably one of the things I like best about .NET. You can have ininiite parallel runtimes and don't worry about compatibility :)
Best thing about VS 2010 is the debug and release web.configs.
And it's about time.
It was a wise move by Anders even it was a learned lesson from implementing J++ in the 90s.
Thank you, thank you, thank you.
Wow, online templates is such a good addition to existing awesomeness. 
I haven't fooled around with the beta yet, but looking at Scott's blog-series here, it seems to be subtle improvements all over. Hopefully it doesn't come at the same cost as the 2003 -&gt; 2005 upgrade, where 2005 was noticeably slower. Can't wait until this hits final.
Stupid questions... did you try dumping the image to a file to make sure you are pulling it from the database correctly? Your test page loads the ashx pages without specifying a path. Are you calling your test page in the proper place? I'm not sure how your database is laid out or if there are any other obvious missing bits. What we need to do first is figure out what part of the code isn't working. edit: Some nitpicky stuff... Please give your controls their own ids. Please use string.Format instead of concatonating strings. Please use summary tags. Please do an int.tryparse to make sure you are at least getting a number. As it stands now you aren't even repalcing ' with '' and are opening yourself up for sql injection.
using wireshark or any other packet sniffer look at exactly what is going on. dump the packets both sent (from a visitor) and sent (from the server)...... i always use a packet sniffer when these sorts of issues come up.
Don't know much dotnet, but analysing this is language neutral. 1: check if the handler is called correctly: Change mime to "text/html" and output some text. check if you see the html page. 2: check if the blob is correct: Save to blob to a file in the handler. check if the file is correct.
Try putting the content-length header in.... Edit: as per my example on stackoverflow, works fine for me, so I'd suggest it's the database or the call to it.
In this case I would avoid DataSets entirely. They add nothing but overhead and obscure the process. Using a DataReader instead will make the process much more transparent and easier to debug, as there will be fewer layers of abstraction which can obscure the process. Something akin to this should work, although my example is somewhat simplified. It's C#, but I trust you should be able to port it to VB.Net. SqlConnection con; // get your connection and connection string somehow SqlCommand com = new SqlCommand("SELECT blob FROM table WHERE ID = @ID", conn); com.Parameters.AddWithValue("@ID", id); con.Open(); SqlDataReader reader = com.ExecuteReader(); reader.Read(); byte[] blobData = reader.GetAsBytes(0); con.Close(); // setup response-headers response.Write(blobData); As for the actual data you get, if you get the full image or not will depend on what datastore you are running and (assuming SQL Server) what version of SQL Server you are running. If you are running anything older than SQL Server 2005, using the regular field-extraction DataReader interface instead of the ones specifically targeted for BLOBs will only get you the first 8000 bytes, not the complete BLOB data. This should really be dead simple. I would test targeting your browser directly at the Webhandler, instead of trying it trough a web-page like you do now. Less things you have to worry about, the better ;)
I was just thinking to myself how nice it would be if I could use VS on my two non-uniform sized monitors.
Awesome, haven't noticed that before! Overall, I'm very pleased with the new version, beta seems rather slow and clunky... hopefully the next release will be optimized a bit better.
Microsoft does at least one thing right - Visual Studio. No doubt about it.
Yep, that was me - glad you got it working
About friggin' time!!! 
To add to this, don't be afraid to release your source code (if you want) on to codeplex or some other repo (google code). If folks like it, you'll end up getting some valuable feedback.
I actually recommend staying away from xna until you get a firm grasp of OOP and the .NET Framework. XNA, although 'simple' in terms of getting a simple game running, is way too much to soak in for a newbie, and might discourage you from actually FINISHING something. Start small, then work your way up. 
LINQ is basically taking the table, and converting it in to an entity (class). They entity represents one row, so having your entity name plural would get confusing. Look at it this way: Clients.FirstName Clients.LastName or Client.FirstName Client.LastName What makes more sense? Making the table names singular makes things easier to handle when generating the code through LINQ-to-SQL.
It would have been great if the author, instead of just bitching about the limitations of VS, would have written up his methods of HOW he handled them. 
Are there any good demos / sample code floating around that makes use of this stuff? The only things I seem to find are very simple in nature, nothing that has any real-world applications. I'm looking for a Beer Store type app. Thanks.
Javascript snippets? fuck ya!
Just waiting for someone to release the ultimate jQuery snippet set :)
Well when I have the time I'll be building some.
I personally think that the .NET Certifications are worth it. It teaches you stuff you may not have known or teaches you different ways you can utilize it. It is a great all around learning tool while also being a great thing to have. I personally think that if the company is paying for it, why not? It might take you like a year to do all 3 tests. Or even less if you actually read a lot each night. Like, I am a student and I read the first book (Around 600 pages) in about 4 months. It really is not a hard read or very hard to grasp, it is a lot of 'Here is what this does and that is how you do it." You should have no problem reading it and getting through it fairly quickly. 
The missing piece? If you aren't writing (or reusing) **many** HtmlHelper extensions in your MVC application, than you have more than input forms missing. Basically any HTML that's going to be repeated should have some sort of helper to produce it. In my experience, I ended up using almost none of the built-in helpers. One example is making a "textbox" control that will render differently when the form is set to read-only (just a text span) or edit mode (a input textbox). There is also the issue with relative paths so I wrote my own image control where I just pass the name of the image file and the helper generates the proper path using a relative path method.
DevPartner is pretty good, will show you how much time your code spends on what lines of code / per function etc as well as the number of times said code is called. Which I'm sure the TS profiler does, but you might want to check that out What problems are you having? In my experience, the typical bottleneck by far is down to database hits. The actual C# code flies like you wouldn't believe on any reasonable specced PC/server, I/O is normally what kills responsiveness.
dottrace profiler is good, but is costs some :-)
Well, replacing your unsafe code with managed code sure is a good start. For the rest, it depends on what your application uses. Do you have databases? Access files? Network resources? How about reflection? The first rule of optimization is to start where it matters most because you can spend months optimizing *any* code. Using a profiler to find what takes the most time in you application is a great start.
Take a look at [Eqatec Profiler](http://www.eqatec.com/tools/profiler). It's free and does a good job. Also, you'll find lots of tips at [Stack Overflow](http://www.stackoverflow.com/).
Download [Improving .NET Application Performance and Scalability](http://www.microsoft.com/downloads/details.aspx?FamilyId=8A2E454D-F30E-4E72-B531-75384A0F1C47&amp;displaylang=en)
Actually I found that cloning arrays I could get a significant performance increase using unsafe code and pointer arithmetic. I do have quite a bit of reflection but that is part and parcel of the genetic programming framework I am writing on.
I'm not saying get rid of reflection or unmanaged code. Just that they are good targets to concentrate on optimizing. Before you start optimizing reflective code, be sure to read the documentation in detail. Some people will come up with custom caching solutions for reflection data when many elements are already cached by the .Net framework (i.e. getting the metadata for a property/method is automatically cached since .Net 2.0). On the other hand, you may want to keep those GetType() results as they are very expensive to get.
Thanks titusjan - I think Chpt 5 has some of the things I am looking for
not really .NET, but roughly in the same category as wireshark is the iReasoning MIB Browser: http://tl1.ireasoning.com/mibbrowser.shtml You can use it to send SNMP requests. I'm in the middle of an SNMP project now and I'd be SOL without it. It'll also receive traps. Also handy for SNMP work is Cisco's SNMP OID Navigator, an online tool showing you what the different OIDs are, and what the various values they return represent. (Many return values are integer enumerations that you have to look up.) http://tools.cisco.com/Support/SNMP/do/BrowseOID.do?local=en
Come on. This is the dotnet subreddit. Poster should know better than to use ASP and ASP.NET interchangeably.
MVC is an ASP.NET technology. What are you complaining about?
Then why did you call it ASP MVC? You should not use ASP and ASP.NET interchangeably. The describe to totally different technologies.
Anybody who knows what MVC is knows what technology I am referring to. There is no such thing as non-dotnet ASP MVC. I am sorry this upset you, but to me this is not a big deal and should not have caused any confusion.
Dumbfuck, there is no such thing as (Old) ASP MVC.
Yes. There is no such thing as ASP MVC. It's really not that hard. ASP is not the same as ASP.NET. If you are talking about ASP.NET, refer to it as such. The title should read "Telerik releases ASP.NET MVC wrappers for jquery controls..." See? Was that so fucking hard?
Lol, pull that stick out of your ass, see, was that so hard?
To contribute something to this thread apart bicthing about semantics, I think I'll have to check this out :)
While we're here, can developers out there *please* stop using the terms "Visual Studio 2008", ".NET 2008", "NET3" or even just "2008" interchangeably? One's a framework/platform, one's an IDE and there's no such thing as ".NET 2008". On a side node, damn I hate the name ASP.NET MVC. There were MVC frameworks for ASP.NET before it came out.
Well look at you. So what if you still haven't solved Fizz-Buzz yet, you are the champ at correcting people on meaningless marketing terms. I'm glad you found your place in life.
Life is too short to worry about what stupid name marketing slapped across the product this year. Seriously, how the hell is anyone supposed to keep track of things when version 1.0 is called "Visual Studio.NET" and "VB.NET" while version 3.5 comes with "Visual Studio 2008", "C# 3" and "VB 10"? And don't even get me started on the Iron languages. 
While we're at it, stop referring to U.S.A as "America". There are 2 continents you know (North and South America). How about "United States"?
Maybe (of the monad fame) is a really simple construct in C# that had completely freed me from all cases of NullReferenceException in my code, while making it cleaner and more efficient...
You can check out the: http://code.google.com/p/lokad-sdk/source/browse/#svn/trunk/dot-net That's the IoC-powered Excel Add-in that uses Windows.Forms MVC for UI composition and reuse. Other articles from here might also help: http://abdullin.com/xlim/
How is this different from nullable types in C#?
For those unfamiliar with them: Nullable&lt;int&gt; someIntWhichMayBeNull; int? shorthandNotationForNullableInt;
Only value types could be nullable. You can't have class references as nullables, and there is no pipeline syntax around nullables.
Nullables support only value types (like int) and do not support any classes. Maybe&lt;IDisposable&gt; someClassReference; Additionally, nullables don't have pipeline and chaining syntax along with testing helpers. 
Why add another needless layer of complexity for such a simple task? Just learn how to use the null coalescing operator (??) and/or inline if-thens. Console.WriteLine(number != null ? "True" : "False"); Console.WriteLine(number ?? "Null Value"); The null case is a useful thing, why do people like abstracting it away?
Exactly, that chaining syntax (allowed by the IEquatable thingy - I presume?!) makes it very powerful and clean code.
IEquatable{T} is just a helper for unit tests (i.e.: passing a complex model through a MVC view and checking that it had not lost any value). Chaining syntax comes from the explicit methods declared on Maybe.
 Imagine a large real-world project that spawns multiple components, tiers and faces challenges more complex, than writing output to the console. If developers know that this project uses Maybe to declare potentially empty variables, then they are completely freed from checking for nulls and even thinking about that. This actual usage of _Maybe{T}_ might happen in just one or two methods of the project. However, when developers use them, they will know immediately (and not from the documentation) and will be forced to handle them because of the syntax. Things like that reduce development friction and allow complex project to be delivered efficiently and with really small teams.
Yeah I did wonder if I was correct in saying that. So those chaining methods are just a few hard-coded helper functions that accept a Func parameter to actually do the work, and then return themselves?
Here's the part I don't understand: &gt; If developers know that this project uses Maybe to declare potentially empty variables, then they are completely freed from checking for nulls and even thinking about that. Not exactly... they still have to check the HasValue property otherwise accessing the Value will throw an exception. And all the HasValue property does is check if null. So essentially you are replacing number != null with number.HasValue The only purpose that I see is that the Maybe&lt;T&gt; wrapper reminds a different developer that the value may be null and forces him to perform the check. But that's something that could be solved with proper documentation instead of extra code. Just my take on things...
In the simplest scenario (of Maybe monad) - yes. When things get more complicated (Result monads), more pipeline helpers are introduced to allow things like adding extra failure details (i.e.: looking up localized failure description from the resource string), filtering out some failure scenarios or adding additional reasons for failure, combining results with Maybe-returning functions etc.
&gt; So essentially you are replacing [null with HasValue] HasValue is rarely checked against directly. Take a look at the piece of authentication code below. There are two possibly failing functions in it, that return _Maybe{T}_: Maybe&lt;AuthPrincipal&gt; LoadPrincipal(string key) { return ParseStringToAuthInfo(key) .Combine(u =&gt; _service.BuildAccountSession(u)) .Convert(sa =&gt; new AuthPrincipal(sa)); } Method signatures are like: static Maybe&lt;AuthInfo&gt; ParseStringToAuthInfo(string encodedString); Maybe&lt;AccountSession&gt; BuildAccountSession(AuthInfo authInformation); &gt; something that could be solved with proper documentation instead of extra code. I believe the code should be self-documenting with compiler-time checks for errors, whenever it makes. Documentation, unfortunately, does not do that.
Hm, this preview is based on jQuery, but future versions won't. I think I'll sit this one out for a while... I'm satisfied with the few hacks I had to write to get one or two of the actual controls that I'm using to work on MVC.
But aren't .Combine() and .Convert() simply replacing 'number != null' with 'number.HasValue'? They either have to handle nulls or Maybe containers and one isn't significantly easier than the other. Do null values break the lambada syntax or something?
http://www.postsharp.org/ Aspect oriented programming tool. Make your own attributes and change your code at compile-time.
When will synctoy 3 which uses sync framework 2 going to come out though is the question. I use it regularly
You forgot to post a link. EDIT: but I [found it](http://forganizer.codeplex.com/)
haha, I filled it out on the first one, but then went to 'text', so it was automatically put to 'self'
I wrote it, it's work in progress. Feedback welcome.
You wouldn't talk about a Persons collection, so why would you talk about a Persons table?
Resharper should run it it's own process then...
If you are going the .NET way, using Microsoft Office Communication server might serve as a good start for the SIP/VoIP bit. I'm not going to claim it is a direct joy to program, but it has all the parts around IM/VoIP/SIP and whatever you need already handled and all you would need to do is code an application on top of that. As for regular telephony frameworks or libraries Office Communication server might provide what you need, but I honestly don't know. If you need to look for additional frameworks or libraries I would advice you to look for C/C++/COM parts you can write .NET wrappers around as well, besides pure .NET components. After all the .NET COM marshaller and PInvoke capabilities aren't half bad.
I made good use of Asterisk for the phone system + mono to allow me to include some .Net. Basically, I use asterisk's manager API to allow mono to control the phone system, extract information, etc. Pretty powerful at the end of the day - and if your budget is a factor, a compelling arrangement.
Unfortunately he has [decided to change the license](http://blog.getpaint.net/2009/11/06/a-new-license-for-paintnet-v35/) from MIT to a much more restrictive one.
Something to do with someone releasing the software and not following the original terms. Although I'm not sure how this fixes people that want to infringe.
Does anyone know if it's possible to use Paint.NET libraries in a 3rd party app? Is there an API?
Why link to some pissant late 90s freeware/shareware site? Link to [the god damn website](http://www.getpaint.net/doc/latest/en/WhatsNew.html).
oops, your right.
They followed the original terms. The MIT license can be summarised fairly cleanly as "do whatever the fuck you want" (which, IIRC, is the WTFPL ;)) - so people were grabbing the Paint.Net source, recompiling it (perfectly fine) and selling it (immoral, but again, perfectly fine). The issue seems to be that while he's happy to release his source, he doesn't actually *want anyone to use it* - and seeing as they can't contribute back to the original software (he doesn't accept changes), I personally don't see the point in releasing it at all.
Yeah, I'm not sure why he got so pissed either. Seemed a bit strange, but whatever.
On a similar note, one thing I hate seeing C# devs do is this: if (foo is Bar) { ((Bar)foo).SomeBarMethod(); } you pay the cost of two type checks instead of one (with as)
That would be me. :) Guess I learned something new..
I think Resharper picks this up :)
Because you might have a case where `null` is a valid value. Maybe allows you to show whether or not you actually *have* a value.
Try it with Code Contracts and it gets even better. The Pex VS interface leaves a bit to be desired; I find it quite confusing and often end up creating duplicates of tests.
Will do. Thanks.
Oh noes, MS goes open source!1one. On a serious base, should we expect to see more .NET / Mono applications for Linux with this move from Microsoft and tools to help Windows developers to package Linux software? Ref: http://www.eweekeurope.co.uk/news/novell-plug-in-lets-linux-developers-use-visual-studio--2462 
Why the new one? This one has such little traffic, and I'm gonna assume that anyone reading the dotnet stuff on reddit is probably pretty open to using whatever gets the job done the best, be it from Microsoft or some other party.
it's not to compete but to compliment. different moderator and different gist. no harm intended.
Doesnt Windows 7 Library features solve this problem? I've added my various network shares to their relevant Libraries, and can now search across-shares.
It sure does, and I love it. This is for older Operating Systems and was more of a learning experience, plus we don't have Windows 7 on the network this is used on.
I've had an [Option&lt;T&gt; type](http://sasa.svn.sourceforge.net/viewvc/sasa/trunk/Sasa/Option.cs?view=markup) in my C# Sasa class library since forever. It's also more compact than the version described in this article, and permits the use of the null coallescing operator ??.
I should have worked for Microsoft :-)
Not to be a dick but who would downvote this? It's code released under an open source license and it fills a need people have been asking for.
It would be easy enough to do. I didn't do it because then there would be an inconsistent behavior between SortDescriptions and using an IComparer. That being said, if you were to do that (and maybe disable IComparer support), then you can be sure that items are always sorted correctly. If they're always sorted correctly you can increase performance in a number of places using a binary search. I didn't do it because in my case, the binary search wouldn't be guaranteed to work but if you did this, you would. So it would increase the performance of adds/updates etc... possibly enough to counteract the performance hit of creating those bindings.
This is cool, I just came across BDD and was hoping to try it out. Thanks.
&gt;Tired of querying in antiquated SQL? I loled
heh. in spite of this the tool is very handy.
This actually looks pretty neat. With a bit of basic reflection-code, I can see this being wildly useful.
It was nice knowing you, CodeSmith. 
Reflection-code, DB-schema reading code, you name it. It even has step debugging and everything.
I saw this a while ago but haven't had a chance to play with it yet. Some of the demo videos look awesome. But has anyone tried it in the real world?
Yep, and it's pretty weak. Without third-party add-ons I found it to be totally unusable.
What's wrong with CodeSmith? I'm asking because I'm thinking of switching away from T4.
CodeSmith costs extra money. That's not saying anything is wrong with it. If you want a better editor than what VS provides, you still have to purchase an add-in. But having a tool that's already integrated in VS is pretty neat.
Free vs non-free. CodeSmith is fine if you have money, and probably better than T4 since you get what you pay for.
FWIW Windows 7 ships with a built-in [dynamic language](http://en.wikipedia.org/wiki/Windows_PowerShell). 
How about making Silverlight 3 fucking work first.
I use T4 occasionally for things like generating permutations of generic arguments, but I don't like that the code generation happens when you save the file. Really C# needs code generation as a first class part of the language. Say what you will about C++ templates/MACROS, but they are expanded as text before the compiler. They can be ridiculously powerful, but of course can be abused.
Look into Microsoft Speech server for the IVR stuff. Same goes for Office communicator for Voip/Sip/telephony integration, as indicated by someone else here. Since both products are from MS, I bet they can be tied together using microsoft dev tools. i.e Build IVR system + Voip. 
Meh, NHibernate works fine and it's free.
I reviewed Entity Framework and NHibernate for my employers a while back. I did a quick sample project in each. It doesn't seem like much, but it did give me a pretty good idea about how development will go. (Most of the other developers had already decided they wanted to use NHibernate before I did my research and presentation on the two.) NHibernate is terribly unforgiving. At first you see all of the work they put into supporting legacy databases, but that doesn't really extend to badly designed legacy databases. If you start with NH and a legacy database, you will either drop NH or redesign your DB. It's one or the other. Entity Framework is built into Microsoft's development tools. It's easy to use. It isn't as flexible, but supposedly MS had a path set working more towards something like NH. Like I said, the other devs made the choice to use NH so that's what I've been using for a while, but the few teams that decided to use EF switched after NH's learning hurdles became too much of a problem, and they were pleased with the switch. With the addition of LINQ to .NET, a lot of small tasks you would do in SQL now become easier and faster locally at the client. Plan to use both, and you'll be really pleased with the results. edit: that last one is talking about linq to objects ; not linq to sql
We used EF over a year-long University project, and while it has plenty "gotchas" (as does C# in general, at least, to my mind), the experience was overall relatively pleasant. I'd recommend it over raw ADO.Net any day (but then, I'd recommend a barium enema over raw ADO.Net :/).
I've been using PLINQO lately, which helps to offset some of the shortcomings inherent with out-of-the-box Linq-to-Sql. I've had to modify the templates a bit to create simpler, less-dependent classes, but it's working like a charm. I haven't checked out EF in a while, so I'll probably revisit that soon. 
&gt; barium enema over raw ADO.Net :/). Yeah, we didn't get any complaints from switching to an ORM rather than straight ADO. 
LLBLGen is the only one on the list that's not free. 
For what it's worth, one thing to remember that getting NHibernate is a bit of a bear to get going in medium trust. If you are running your app on a shared web host that is something that will come back to bite you. I've used all four. Right now we are using LLBLGen and have been for about two years. It gets the job done - nothing fancy. For quick and dirty projects LINQ to SQL is what I go to just because it is pretty easy to use, but something about it always seemed not very maintainable (just a gut feeling - no real reason behind that). NHibernate is what I used personally for projects outside of work, and it does everything I want besides two things: LINQ support and medium trust. If it weren't for those two things I can't imagine why you wouldn't use it. Entity Framework has a lot going for it, but it just didn't feel as solid as NHibernate. Much better LINQ support, and it works in medium trust. But other than that I couldn't see a lot of reasons to migrate away from NHibernate.
Maybe I'm missing something, but if over 50% currently has .NET 3.5 installed, wouldn't that also mean that over 50% also has .NET 2.0 and 3.0 as well?
Yep, from the source article: &gt; Observations: &gt; Version 3.5 has been making great strides recently. &gt; Right now .NET 3.5 covers 52%, .NET 3.0 covers 59%, .NET 2.0 covers 70%, .NET 1.1/1.0 covers 78%
Maybe dashcommerce
This one? http://dashcommerce.org/
I've been meaning to try nopcommerce (http://www.nopcommerce.com/). requires .NET 3.5 though...
[lots of drama around dashcommerce right now](http://forums.asp.net/t/1500595.aspx?PageIndex=1). It was the standard for doing ecommerce stuff for a while, but right now I don't know. Rob Conery (who started Dashcommerce) is working on a new MVC version. [http://mvcsamples.codeplex.com/](http://mvcsamples.codeplex.com/)
nopcommerce looks like it's feature rich, but I'd rather avoid WebForms hell.
There hasn't been a lot of posts on it lately, but [Kona](http://blog.wekeroad.com/category/mvc-storefront) was looking pretty good the last time I looked at the source. 
Is this part of the mvcsamples? http://mvcsamples.codeplex.com/ EDIT: Looks like it is... but I'm a little concerned about it not having been updated since last April.
Yeah, it doesn't appear to be actively developed anymore. I'm guessing Microsoft cut Conery's time to work on the project and he hasn't done anything with it after hours. It would be a great starting point if you're not looking for a turn-key solution though.
Znode is one to check out - but the front-end is webforms http://www.znode.com/ 
Nice, but pricey. Singlefront Edition starts at $5,994. Multifront Edition starts at $25,000.
&gt;I'm guessing Microsoft cut Conery Microsoft actually cut the entire Conery. He isn't working for MS anymore for undisclosed reasons.
That's too bad. I'm sure he's not allowed to work on it knowing MS.
Sweet. I can really see myself using this.
Glad to hear it. Let me know if you need any help.
Are you on the project? I was thinking about interviewing someone for InfoQ.
Yep. I'm overseeing it. I'd be happy to answer questions.
A similar approach (and one that lends itself more to Xaml is JScriptConverter). It uses JScript.NET's eval method to handle the problem, in my opinion - it is more elegant as you can write a binding as such Width="{Binding Height, RelativeSource={RelativeSource Self}, Converter={StaticResource JScriptConverter}, ConverterParameter='values[0] / 2'}" You can find it at http://www.11011.net/wpf-binding-expressions 
I'm glad that more is out there, however it always requires expanded binding syntax when you have more than one value. Also, I'd be interested in having a performance comparison between the two methods. There doesn't appear to be any caching and reflection is being used. We actually get compiled versions of the scripts and cache them just like a normal compiler. If you have a grid with 1000's of items this becomes very important.
Rob talked frequently about how MS allowed him to keep SubSonic. I always figured that with Kona it would be the same. I did however see Rob getting frustrated with Kona's codebase over time. He blogged about his progression to TDD and DDD and how he rewrote Kona as he changed his way of coding. I always thought that he just became tired and frustrated with the project. I think that he has a reddit account but I don't think that he is very active around here.
Yes it requires expanded binding syntax for MultiBindings. I guess in all multibindings using any converter I've just come to deal with that. JScript.NET does not compile the code (it's interpreted) however it does cache type resolutions and the like. There is a one time compile for the JScript (setting up the environment) but from that point on any reflection is only the type being performed by JScript. I honestly think yours would end up being faster in the long run, (though slower for one time conversions as you pay a compile penalty) however it kind of breaks some of the model of WPF (the converter should only know the values its passed) I've seen places where people used the Linq dynamic api to parse and then cache/compile a LINQ expression into a delegate. It's cool but those parsers are often incomplete I contributed code to one for a while but everyone just gave up eventually. I think your converter is awesome, and I understand why you did those cool things you did, I'm just kind of a purist when it comes to Avalon.
effective c# and more effective c# certainly don't hold your hand. Both those books are quite good. I'd grab those books along with the Framework Design Guidelines. In a few months the CLR via C# Third Edition should be out. You should be good to go.
Thanks, I'll take a look tomorrow.
If you're interested in C# specifically (as opposed to the .NET framework in general), Jon Skeet's [C# In Depth](http://csharpindepth.com/) is gold. It's focused particularly on the changes in C#2 and C#3, it's short, and it's extremely lucid and readable. Absolutely doesn't hold your hand. It's targeted at experienced C# developers interested in learning the language more deeply, especially the new additions. One of the best programming books I've ever read. If you're hesitant about it (or even if not), you should also check out [some of the articles](http://www.yoda.arachsys.com/csharp/) on the author's web site.
Thanks, I already like what I see at his sight. I'll check out the book tomorrow.
You can't go wrong with this: http://www.albahari.com/nutshell/ Also checkout LINQPad program.
IronPython in Action. http://www.ironpythoninaction.com/ :-)
I have a book in pdf , PM if you want it :). [its this one](http://i5.tinypic.com/86hffh3.jpg)
2nd'd
No doubt a good book, but the topic was C# book suggestions :)
Hence the smiley, but yes - a damn fine book. :-D
Good one, thanks.
Thanks dude.
Nice one. Bookmarked :)
So I know I linked to the product page - I did that because it has the install silverlight crap on it. Go to the bottom and click the [try things out](http://www.huntinmaps.com/hpdemo) link, or just click that one if you already have silverlight. I'd really love any feedback you can provide!! EDIT: Added the real link to the demo... duh. 
Cool. Could you drop me a note at jonathan@infoq.com?
He fails to mention the power of predicate parameters in things like Array.Find... this is another amazing feature of C# which allows 'loopless' behavior.
http://www.ekashu.com/ are all right
heh...that you, Andy?
Yep. Narwhals
Seifert Technologies offers the latest and greatest! .Net 3.5 Check out http://www.seifert.com/it_mainstreet.html www.seifertsupersample.com Our programmers will bring your vision to life. Have questions? email eCommit@seifert.com or call 330-833-2700 Opt4
I've been trying to figure that out myself. Most options are either expensive up front, or cheap but can't scale up. I was looking at Azure, using SqlAzure plus Tables for bulkier data. Then I found out Tables has a fee per storage transaction, and as far as I could tell that includes reads. For my apps that would get expensive. Right now I'm thinking Rackspace. There's CloudSites, which is similar to shared hosting and has SQL. It starts at $149/mo but that can run multiple websites, which works for me. There's CloudFiles for the bulk storage, which has no per-transaction fee and according to their sales chat guy has pretty low latency. They've also just put CloudServers into beta for Windows, with decent pricing, if you want something more like Amazon's EC2. Of course they've also got dedicated servers if you want that later. Amazon's an option too, of course, but the economics don't work out as well for me, unless maybe if I go with Sql-Express, and I 'd rather not. Also their sales dept on another part of AWS hasn't responded to my queries, while Rackspace gave me a real-time chat with a human. I think they even have phone support. Of course if you don't expect traffic or don't mind changing hosts, regular shared hosting would be cheaper. I don't know who's good.
I use gogrid for my personal projects at the moment, its easy to deploy, and they give you a F5 load balancer for free :-)
Interesting. How's the performance and reliability? I'd be interested in whatever you'd like to share about your setup.
Depending on your precise needs, a windows 2008 VM with 512 mb (measly, I know) can be deployed for ~ $68 a month. Their billing is based on the "server-ram-hour" and is essentially $0.19 / gig ram / hour. Support on the application side is up to you - they literally just provide a virtual machine and networking. You remote desktop in and go. I can say this about performance &amp; reliability - they have yet to go down on me. Haven't been using them for a terribly long time (about 6 months) but have been happy so far. If you are looking to deploy more / bigger servers, be sure to look into the prepaid plans, they cut the cost by at least half.
linux vps + mono
Does MVC matter? I don't really see why the choice of using certain classes makes a difference in the host.
For straight up shared hosting, I use Applied Innovations. They are cheap, and reliable, but you don't get direct IIS access. 
&gt;Does MVC matter? It depends on IIS 6 vs IIS 7 and whether integrated pipeline is enabled. It isn't always a matter of just uploading the compiled code classes since routing is involved. 
Thank you
Don't know why you got downvoted, it'd likely be a cheaper way to go, if you don't mind using one of the opensouce databases. How well it works I don't know...if you have experience I'd be interested.
Why in the world would anyone do this? Just add the DLL configuration keys to your application's config and voilà. Your DLL will use those. I call bad practice on this article.
It seems they are rushing like mad to create Silverlight into something really useful. I would rather each stage be defined better and work, than to have it constantly changing. I'm curious; what are you having trouble with?
Have you compared these to other code generation techniques that utilize the data access from Enterprise Library? 
Integrating several controls with Silverlight. They keep overriding one another and fucking up event handling so I've had to write custom event handlers for things like the mouse scroll wheel.
When using Ent Lib, we always hand coded our DAL using stored procs and DAO classes, divided into subject categories by logical domain. We avoided dynamic SQL in our programs (I think it was a bad taste from old VB code). The only auto gen code we used were typed datasets. 
Sorry, I didn't clarify. I never intended to mean dynamic SQL, but business objects using stored procedures. I meant using something like a 4GL, T4 templates, or CodeSmith to generate code to create either a custom ORM or DAL (such as NetTiers) that uses the EntLib. Another one that some have used, but I never got a disconnected review on was CSLA, which I was notified by CodeSmith because it comes with templates to generate that ORM. I'm curious if you ever used that either. One commonality I keep reading about the different ORMs is that they are overkill and/or force you down a path that doesn't work as easily as you require or stops you from doing things that are easy and more maintainable. I've noticed this with people as well :D 
Nah, my fault. I meant to imply that we didn't look into any code gen technologies with Ent Lib and application blocks, which is the basis for many of our older project's data layers. Honestly, I'm not too familiar with the items you mentioned. I'll have to look into them. When I came on, the two choices were EF and NH. They had already looked at some other commercial products, but those fell through. I'd have to agree that using an ORM does have a cost association, in design and maintainability. Some of our projects require fairly large bulk writes to the database. NH (and most ORMs) don't handle this type of scenario very well. So we hacked our save routines to use SQL BulkCopy and our entities, totally losing the ability to persist our entities for those parts of the program, in favor of a fast write. There were actually more of these types of compromises in my last project than I would have liked, ideally.
Not cool.
For anyone else who tried this in VS2005 and had nothing happen, there's a comment at the bottom that explains why: &gt;T4 postdates VS2003 and isn't available for it. To get it in VS2005, you need to install the DSL Tools Runtime Redistributable and it is there right in the box in all versions of Visual Studio 2008.
I'm making my second project on EF. The first one had some really silly caveats but I'm rather happy with EF 4.0. I really wanted to jump into NH but the XML extravaganza was a problem with the team. I haven't needed to generate anything custom but I'm looking forward to make my custom T4 generation templates when I stumble upon something that EF doesn't manages well.
I've had a couple of dedicated servers at Rackspace since 2006. They're expensive, and the service has definitely deteriorated in the last four years, but they're still better than everyone else I've tried. Having said that, I am looking at less expensive alternatives. I've got a few sites up on a VPS up at ORCSWeb, and so far it's been fine (cheap, fast, support is reasonably responsive). I asked my Rackspace rep about CloudServers, and he told me to wait until it was out of beta before hosting any production sites on it, FWIW. I had a dedicated server and a VPS account at MaximumASP for a couple of years, too. The only problem I had there was with their shared mail service, which was complete shit at the time. The lack of customer service around the mail stuff ultimately led me to find a new host (Rackspace), but in retrospect they were pretty solid otherwise.
Another MVC solution is sutekishop. It's open-source and built using TDD. http://code.google.com/p/sutekishop/ Secondly, I heard Umbraco (a CMS) is switching their code base to MVC in the near future. There's some modules out there for e-commerce solutions or you can write your own. http://umbraco.org/
Thank you, I'm definitely going to check out Suteki Shop.
Another one to look out for is the Orchard Project, just recently announced at Mix 10. Uses MVC 2.0 and is being developed by a number of experienced developers. It's still in the very early stages, however. http://www.orchardproject.net/
Here is the [C# Edition](http://dl.dropbox.com/u/5618789/1590598849_Apress_-_Pro.C.Sharp.2008.and.the.dot.NET.3.5.Platform.4th.Edition.Nov.2007.pdf)
I don't mean to hate on VB.net, but why do people prefer it over C#? I have a strong distaste for the language, it just seems unnecessarily verbose to me. Thoughts? Does anyone that learned VB.NET after C# actually prefer VB?
I've had more experience with VB.Net than C#, so I might be biased: Since VB is more "english" words than circly brace in syntax, I have to perform less finger gymnastics to write at speed. Also historically, background compilation was a big plus for me. This is not so much the case anymore however. I totally understand people have preferences, but I try not to get too caught-up in the war. =)
I'm guessing VB.Net is nicer to read because it's so verbose. Plus it has some helper functions in the for of the "My" class which helps less experienced developers get stuff they need instead of searching them in different objects. For older developers, the #1 reason is probably that the migration from VB6 to .Net was enough of a shock so sticking with a language that looks kind of familiar was comforting to them.
Programming in C# tricks me into thinking I'm programming in Java, C++, Javascript, etc. Then my head feels nice and swollen. I had to program a little in VB.NET recently to accommodate an existing ASP.NET web site for my employer though. VB.NET is just too "wordy" for my taste.
Some people just don't like curly braces and semicolons. Looking at [the differences between the syntax of the two languages again](http://www.harding.edu/fmccown/vbnet_csharp_comparison.html) I can't help but think that VB.Net looks like a slightly more verbose Ruby or Python. I'm also sort of thinking that VB.Net is the XML to C#'s JSON, what with VB.Net's insistence on forcing you to be explicit about what construct it is that you're closing ("End Get" for property getters? Really?) where the close pointy brace is a catch-all in C#. I worked VB 5.0/6.0 before moving on to C# and .Net. I wouldn't go back to VB.Net because of the syntax, yet I happily work in Ruby and Python despite all the *end*s. I can't explain it.
got my answer from somewhere else, it's a function called Application.StartupPath()
Actually wait about 3 weeks and get the 2010 copy.
I'm not sure what the problem is or if you are doing anything wrong, but if the grid view doesn't support a LINQ query directly, you should be able to easily convert the linq query to a List or DataTable and bind the grid to that instead. 
It seems that gridview's only do sorting when you use a standard SqlDataSource. Without it, I get an error for an undefined sort method. I tried converting to a DataTable yesterday, using this: DataTable dataTable = CarrierListNew.DataSource as DataTable; dataTable ended up being null. CarrierListNew is the name of the GridView (obviously?).
I think (and I could be wrong, I haven't used a GridView in a while), that you have to write your own Sort event handler if it's not a SqlDataSource.
I haven't used GridView in a while either. I really hated that thing.
You'd have to create the table manually, e.g: var Query = from MyTable in MyContext.MyTables select MyTable; DataTable table = new DataTable("MyTable"); foreach(var Item in Query) { DataRow row = new DataRow("my row", ...); table.Rows.add(Row); } ... dataGrid1.DataSource = DataTable; You might also get away with simply using a list: var Query = from MyTable in DataContext.MyTables select MyTable; dataGrid1.DataSource = Query.ToList(); It might seem ugly/painful but it's better than mixing up ADO and LINQ (they will use different db connections). This way the ADO usage is all in memory and only used as a wrapper for the datagrid.
Thanks, I'll give those a shot.
So what do you use, and how easy is it to replace the default behavior of the GridView (sort, pagination, in-place editing, etc.)?
see below... edit: yes, I'm under the impression I have to do my own sorting.
I've been using ListView, it let's you define your own structure, I usually use a List of some object type as the datasource. You can do paging with it, format it to have in place editing, but I don't know about sorting, you probably have to write the event handler on your own as well.
Thanks much. Added to my reading list.
I'm currently using MVC with my own hand rolled controls. I've replaced sorting and pagination to account for the basic grid requirements that I have. Editing, on the other hand, I've stayed away from. I typically just show them an editable pop-up form with some jquery/ajax magic. If you need more functionality, there are plenty of other grid solutions out there. Example: http://www.extjs.com/deploy/dev/examples/grid/array-grid.html 
Why not? dataGrid1.DataSource = (from MyTable in MyContext.MyTables select mystable).ToList()?
You could also have used an ObjectDataSource, if you really had to. However you are probably better off with the LinqDataSource
So here is the REAL question: SQL and Stored Procs **in the code** or left in the database? Me: I prefer to separate my SQL from my code and leave all database work on the database and make calls via a Data Access class with CRUD hitting stored procedures on the database.
Thx much! Haven't tried MVC yet, although I'm familiar with it from Rails. Installed it today, will experiment with it, but not sure if I could pull it of in time (about two weeks - but I already have too much to learn).
Indeed. I had been searching for a couple of days, and it seems I was finding stuff that was all about how to do it before thy introduced LDS. I suppose that once it came out, and the problem was solved, there was little reason to talk about it.
A lot of linq's most powerful features require a little work on your part to make handlers and classes to deserialize data into. It seems like extra work when you look at the example but in some cases the effort pays off big time. Linq is awesome stuff, the query system will match up objects in ways you would only half heartedly think should work. Press F5 to step through and you find out that it works perfectly, you will shake your head in disbelief, this appears to be normal when working with LinqtoXML. APress puts out a pretty decent Linq book.
C# in Depth might be a bit more technical. But the author makes compares 3.5 to previous versions whenever possible. To begin with, I would recommend [C# 3.0 in a Nutshell](http://www.amazon.com/3-0-Nutshell-Desktop-Reference-OReilly/dp/0596527578) if you want to get a higher level overview of the framework. For ASP.Net, I would recommend to read [ASP.NET in a Nutshell](http://www.amazon.com/ASP-NET-Nutshell-Second-Andrew-Duthie/dp/0596005202/ref=dp_ob_title_bk) to get started.
Woa - yeah.... I wouldn't recommend just diving in to it if you have a deadline in two weeks. It will take you at least that long to get the hang of things.
Agreed. May use it for phase 2 in a couple of months.
Use a closure instead of a boolean literal.
 var result = from u in db.Users where u.user_id == (Guid)Session["user_id"] from c in db.sc_Carriers where c.shipper_id == u.Company.company_id &amp;&amp; c.hidden == (show_hidden == "1") select new { company = c.CarrierDetail.Company.company, full_name = c.sc_Manager.comp_fname + ' ' + c.sc_Manager.comp_lname, sort_name = c.sc_Manager.comp_lname + ' ' + c.sc_Manager.comp_fname, comp_email = c.sc_Manager.comp_email, dot_num = c.CarrierDetail.dot_num, c.carrier_id };
Determine if show_hidden == 1 Set a variable to true or false based on the previous check Compare c.hidden against the variable 
Ah, sweet! Thanks much.
This is the one I ran with, seems the cleanest, since I have other things to set based on 'show_hidden'.
To clarify: Do you want to return the latest record for each type? As in, 4 records returned, one for each type? Edit: [Stack Overflow](http://stackoverflow.com/questions/470440/linq-how-to-select-only-the-records-with-the-highest-date) to the rescue. var q = from n in &lt;object collection&gt; group n by n.type_id into g select g.OrderByDescending(t=&gt;t.posted).First(); 
Yes, that's exactly what I'm trying to do. I'll give that a shot. Thanks much! 
Thanks again, that did the trick. Tonight's goal, will be to understand how that works.
Wouldn't using the LINQ method "Max" or "Min" be more efficient than sorting each entire group?
Can you give an example? I'm guessing you mean Max(posted) to get the latest date? In case it's not obvious, I'm quite the noob when it comes to LINQ.
Possibly. Cracking open VS to test this. Edit: This will work if you implement IComparable on the class you want to call Max() on. Code follows later in the comment thread.
You could do this: var q = from n in &lt;object collection&gt; group n by n.type_id into g select g.Max(t=&gt;t).First(); But you would have to implement IComparable on your class, and make the Comparer sort by the date. Code for an example follows. class Test : IComparable { public int type_id; public DateTime posted; public string identifier; public Test(int a, DateTime b, string c) { type_id = a; posted = b; identifier = c; } #region IComparable Members public int CompareTo(object obj) { Test that = (Test)obj; return this.posted.CompareTo(that.posted); } #endregion } class Program { static void Main(string[] args) { List&lt;Test&gt; temp_list = new List&lt;Test&gt;(); temp_list.Add(new Test(1, new DateTime(2010, 1, 1), "A")); temp_list.Add(new Test(1, new DateTime(2010, 1, 2), "B")); temp_list.Add(new Test(2, new DateTime(2010, 1, 3), "C")); temp_list.Add(new Test(2, new DateTime(2010, 1, 4), "D")); temp_list.Add(new Test(3, new DateTime(2010, 1, 5), "E")); temp_list.Add(new Test(3, new DateTime(2010, 1, 6), "F")); List&lt;Test&gt; Output1 = (from x in temp_list group x by x.type_id into g select g.OrderByDescending(t =&gt; t.posted).First()).ToList(); List&lt;Test&gt; Output2 = (from x in temp_list group x by x.type_id into g select g.Max(t =&gt; t)).ToList(); } } Edit: Please excuse the awful variable names.
Best way to do that is to connect [LINQPad](http://www.linqpad.net/) directly to your DB and play around with it. 
You mean in SQL: select top 1 * from Users where user_id = 1 Order By timestamp desc. ?
I meant using LINQ, but that is example is handy to have around. My sql is very rusty, haven't used it for about 10 years.
Building the DLR (the dynamic language runtime that supports IronPython and IronRuby) into .NET 4.0 and adding the dynamic keyword to C# are good enough for me to say 'yes'. I take his points about the status of IronPython and IronRuby in the IDE and in the framework install... I agree they should be in there, but MS is def. not shying away from dynamic languages.
TL;DR: You can't use them in expression trees in methods that consume them and like constants, they get embedded in the caller by the compiler.
As far as I can tell MSIE does not support getter and setter properties, so these are not available in Visual Studio for IntelliSense either. While the standardized syntax seems to be Object.defineProperty (which Firefox doesn't support without [this](http://code.google.com/p/vice-versa/source/browse/trunk/src/Object.js?spec=svn14&amp;r=14)), I must admit I still miss the more "elegant" feel of the getters/setters in C#. This way also has the drawback of not being able to access private members, something which often makes the whole point of controlled properties moot. As for enums... In the supplied link I see that you have to *very redundantly* supply the actual values three times. In the prototype, on the object and in the VSDoc. Is there any browser compatibility-reason for this, or is this just the way Visual Studio requires things to be? Do any of you guys have any specific issues with regard to JS and Visual Studio? Feel free to share.
I was on this same quest, until I broke down and went with Shopify.
open source Visual Studio plugins
I like discountasp.net - they nail all the details because they only do .net hosting. I think I had everything setup in less than a couple hours (no waiting 24-48 hours while things get going on their end).
I wouldn't bother sending in your feedback. I tried windows 7 when it was in beta. and I submitted suggestions and bugs and participated in threads about other suggestions on the website... I think in total maybe 5 of the issues were addressed out of the hundreds, and half of them were actually bug reports about a bug on the website itself.
No way, didn't you see those folks on teevee? Microsoft **cares** about the little people, and *values* their ideas. In all seriousness, when sending feedback to a team with such a wide and disparate audience, don't forget that their goals for a user experience may differ from yours. I think MSDN has done a great job with their "light" version and their work toward browser compatibility.
&gt;a wide and disparate audience, don't forget that their goals for a user experience may differ from yours. To clarify, I only submitted 2 suggestions, there were hundreds maybe thousands of other submissions. Looking on the windows 7 taskforce they've now marked a few more submissions as fixed, most of them just people commenting that the "glare on this icon looks wrong" The legitimate submissions like having large file moving operations to queue rather than run simultaneously were never discussed. Which makes me scratch my head, why are they asking for feedback from actual users, if they just right off the top say "yeah well our goals don't match up with what our actual users are doing, we'll just do our own thing"
I always wonder if the people they picture in these documents have anything to do with the project. If so, it'd be cool if they credited them. Very handy btw, thanks
It is not visual but albahari's C# in a nutshell book tends to have very clear examples and explanations. [Google Books Link](http://books.google.com/books?id=_Y0rWd-Q2xkC&amp;lpg=PA103&amp;ots=R7HBOdYH0j&amp;dq=albahari%20c%23%20generics&amp;pg=PA96#v=onepage&amp;q&amp;f=false)
You're probably overestimating how difficult it is. Back in C# 1.1, if you wanted a list, you had two choices: you could use an ArrayList, which provides no compile-time guarantees about the types of the objects that it contains; or you could write your own specialized list class (IntList, StringList, MyClassList) that would only allow you to add objects of a certain type. This is clearly a bad choice, as the concept of a list is logically independent of the items themselves. Generics are a solution to this sort of problem, as they let you write classes with type parameters. So instead of having to write a separate "list of strings" and "list of ints", you write just one generic "list of ______" and then let the person instantiating the class fill in the blanks. In the case of System.Collections.Generic.List&lt;T&gt;, the type parameter T is the "blank," and anyone using the class would provide whatever type they wish to constrain the list to, i.e.: var listOfStrings = new List&lt;string&gt;(); would create a list to which only strings can be added. Just let us know what parts of this don't make sense, if any. 
O'Reilly's "C# 3.0 Language Pocket Reference" section on generics explains the concept pretty well. I "grokked" generics when I found I needed a method to process any asp.net web control that had the text property. Half an hour later of trial and error and consultations with the Google and I had a method which accepted generic arguments. The method had a constraint that the class type of the arguement could only inherit from the Control class. This is cool feature of generics.
Generics are fucking awesome and easy as taking a shit. Just copy and paste this bullshit right here: Dictionary&lt;string, string&gt; dictionaryOfString = new Dictionary&lt;string, string&gt;(); Dictionary&lt;string, int&gt; dictionaryOfCounts = new Dictionary&lt;string, int&gt;(); if(!dictionaryOfStrings.HasKey("someshit")) { dictionaryOfStrings.Add("someshit", "someothershit"); dictionaryOfCounts.Add("someshit", 1); } else { dictionaryOfCounts["someshit"]++; } foreach(string eachkey in dictionaryOfStrings.Keys) { Console.WriteLine("Key: {0} - Value: {1} - Count: {2}", eachkey, dictionaryOfStrings[eachkey], dictionaryOfCounts[eachkey]); } 
You might want to check out Jon Skeet's C# In Depth. It covers generics pretty well, as well as a lot of other useful features. To date it's easily the best book I've read on the subject.
I just started to implement a generic method first and a class afterwards. You will need some time but its really not that hard. Just begin with it and read the msdn documentation.
I think the simplest way to understand generics, is as follows: With this generic class: public class MyGenericClass&lt;TSomething&gt; { TSomething myValue {get; set;} } When you do: var myClass = new MyGenericClass&lt;int&gt;(); Imagine what the compiler is doing, is taking a copy of your generic class, and doing a literal "Find &amp; Replace" - replacing every occurrence of "TSomething" - and simply replacing it with whatever you pass in, when you instantiate it, so, the guy in-between the angle brackets &lt;**int**&gt;. So, if I'd passed-in **string** instead if int, it'd do a find-replace, and you'd end up with a class available: //This is generated by the compiler, and lives somewhere weird you don't need to know about public class MyGenericClass&lt;string&gt; { string myValue {get; set;} } This isn't 100% right - but conceptually, I think it walks down the correct path...
Thanks MasonOfWords, that is a very clear explanation. Enough for me to get started. :-)
hurray?
I use [DiscountASP.net](http://discountasp.net/). Great customer service and have never had a problem with them. They also give freebies for community or user group sites and such, which is very nice of them.
I really like Viux.com, great customer service
http://www.rackspacecloud.com/ these guys are pretty good. they have some good re-seller options too.
Shame about the lack of actual cloud functionality in their current beta trial though. No snapshots, no ability to provision extra RAM/HDD, etc.
If you don't mind the company, GoDaddy is quite cheap. Starting at $5/month you can get ASP.NET 3.5 hosting with one SQL Server Database (which you have to share with hundreds of other customers on the same server). For $15/month you get your own private SQL Server Database plus email boxes.
Have you thought about Microsoft's cloud - [Windows Azure](http://www.microsoft.com/windowsazure/windowsazure/)? Was going to try it for a new project I'm working on, but I'm not at the deployment stage yet so can't actually recommend it. But it's free to sign up.
[winhost.com](http://winhost.com) I just started with them, they've got support for most of the latest .NET products. 
http://www.orcsweb.com/
I've been using Server Beach for dedicated hosting and I love them.
I use http://www.crystaltech.com 
Yeah - I've only used them for the straight-up hosting they do. The "cloud sites" http://www.rackspacecloud.com/cloud_hosting_products/sites
Ajax Toolkit
I downvoted you as he asked for free controls.
Agreed. $999 is pretty far from free!
The ASP.NET AJAX Control Toolkit? http://www.asp.net/ajax/ajaxcontroltoolkit/samples/
yes
I use that in almost every project, which is why I said in my note that I'd like for everything people submit to be compatible with it.
I agree completely and with Linq to SQL you can turn the stored procs into functions of the data repository. It is a beautiful solution.
The toolkit is meant more as an instructional aid for MS's ajax framework than as an actual control library. I don't think they're releasing a toolkit with ajax 4.0 support.
The first .NET 4 .dll was release in April : http://ajaxcontroltoolkit.codeplex.com/releases/view/43475 I'd be willing to look at replacements though. I mainly use Accordian, Calendar, CascadingDropDown, FilteredTextBox, ModalPopup, and Tabs. There are probably jquery equivalents for all of these, but no one has packaged them up in to simple-to-use ASP.NET controls... at least that I'm aware of. EDIT: Quick Bing search turned this up: http://httpcode.com/blogs/PermaLink,guid,6ebe1898-3ed8-434c-a54b-72cc8432e948.aspx
Architecting .NET applications by Dino Eposito was very useful to me, but be warned that his architecture patterns will have you reconsider lots of stuff you always took for granted.
I'm not joking when I say the following: If you already know programming, and just need to pickup C#, VB.Net or ASP.Net, spend the $25 or whatever on the "Teach Yourself X in 24 Hours" books. They are usually broken down into tasks, like connecting to a database, and do some Just In Time learning!
Going from C to C# is going to be a bit of a jump. For the project you are describing, I would highly recommend looking into WPF (Windows Presentation Foundation). You can create a new WPF Forms Application, drag your buttons, text fields, etc. onto it, double click on your button, and it will create an event method all wired up. In the event method you can retrieve values from your form elements and make your database calls. There are thousands of examples on the interwebs on how to do this. [Here](http://www.wpftutorial.net/HelloWPF.html) is a simple 'Hello World' app tutorial created using WPF. If you are needing further assistance, let me know.
FYI, you don't need to learn LINQ to perform what you are needing. LINQ is excellent if using Entity Framework (ORM created by Microsoft) and if you are parsing results in a list, dictionary, array, etc. However, you can just as easily perform standard 'for' and 'foreach' loops over lists or arrays just as you are used to in C or C++.
There are all sorts of resources as you have found out. I see you say 'GUI based database app' - are you talking about a desktop application or a web application? I would recommend a web interface as it is cross-platform and doesn't require install/local database/etc. Right now the newest thing (and easiest IMO) is Asp.NET MVC: http://www.asp.net/mvc I recommend this book: http://www.amazon.com/Pro-ASP-NET-MVC-Framework-Second/dp/1430228865/ref=sr_1_3?ie=UTF8&amp;s=books&amp;qid=1278940788&amp;sr=1-3 (I did not read this edition, but the 1.0 edition). You don't necessarily have to use LINQ, you can use older ADO, stored procedures, or any combination of the above, but in my opinion, LINQ-to-SQL is the easiest to work with. This is the first explanation I read of it back in the day, and it was easy to understand and got me underway: http://weblogs.asp.net/scottgu/archive/2008/01/07/dynamic-linq-part-1-using-the-linq-dynamic-query-library.aspx There are also some good video tutorials here under the 'data' section:http://www.asp.net/web-forms I also really liked this book when learning: http://www.amazon.com/LINQ-Action-Fabrice-Marguerie/dp/1933988169/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1278941155&amp;sr=1-1 As a shameless plug, I also have a video course on learning how to do this at http://c-sharpener.com - but that is Asp.Net WebForms and not MVC (just another way of doing it). If you have any more specific questions, please ask! I hope I made some sort of coherent sense?!
I would say WPF is overkill, just use Windows Forms. C# is very similar to C++. Look at this tutorial http://dotnetperls.com/datagridview-tutorial
Judging by the demographic who will be working with this application, a web application feels a bit overkill. Having to find a site to host it, dealing with configuring IIS, and having to learn web development may be a bit much for the OP at this point. Going from C to a C# web application is overwhelming. I would say make a windows form application (as easy as dragging and dropping elements) and then move to a web application if there is the need.
There is no need to use LINQ when using C#, but LINQ to SQL can make your small application almost too easy. A bit out of date (i.e. mentions Orcas which was the code name for a beta release) but has pretty pictures: [Scott Gu on LINQ to SQL](http://weblogs.asp.net/scottgu/archive/2007/05/19/using-linq-to-sql-part-1.aspx) As far as learning C# (which is really more learning the .NET way of doing something) making your friend's application is how I would get started. Just start Visual Studio, pick the right project type and start hitting it with a wrench. When you get stuck google or ask here or at stackoverflow. The thing to remember is that you are at a more abstract level than C and use that to your advantage. Oh and the acronyms are meaningless, google them and then forget them. "All professions are a conspiracy against the laity." Apart from [Scott Gu](http://weblogs.asp.net/scottgu/default.aspx) you may want to look at [4GuysFromRolla](http://www.4guysfromrolla.com/) or [The Microsoft Dev Blogs](http://weblogs.asp.net/aspnet-team/default.aspx).
Thanks for the help. You are right about a web-based app being more portable and cross platform, but really that's not what I need right, as that would be overkill. But thanks, I'll still be looking at all the links and figuring this stuff out.
&gt; LINQ is excellent if using Entity Framework What does this mean?
Understandable - the great thing about .Net technologies is that other than the display layer, everything is basically usable across all platforms whether is is Asp.Net, MVC, WinForms, WPF, WCF, Silverlight, etc.! I have a lot less experience with WinForms so I can't give many recommendations there, but I still recommend using Linq-to-SQL (or Entities) as your data layer for it's simplicity and understandability.
How do I: Winforms A to Z *[part 1](http://windowsclient.net/learn/video.aspx?v=52573) *[part 2](http://windowsclient.net/learn/video.aspx?v=52579) &gt;In this two-part video series, Pat Tormey shows how to build and deploy a complete Windows Forms SQL Express Application in less than 30 minutes, with reports! &gt;In "How Do I: Windows Forms, A to Z, Part 1", he showed how to create a MDI form, add an About Box and a Login form, how to configure application properties, and how to wire up application events. &gt;In "How Do I: Windows Forms, A to Z, Part 2", this part, he shows how to add grid controls, how to bind those controls to a data source, how to generate reports, how to digitally sign the application, and, lastly, how to deploy the application using ClickOnce Deployment. there are a tone more videos on that site
WPF is overkill, especially for a .NET beginner.
Thank you for the feedback. But you're right about C# being abstract...I am constantly blown away at all the realllly cool and easy features that are available. I can do foreach loops, declare generic object types, no need to free() stuff!!, have multiple outputs from a function!?, sort arrays with array.sort (wtf???), and sooo much more cool stuff that im constantly blown away with.
LINQ-to-SQL is integrated into Entity Framework. If you have a class called 'Animal' wired up through Entity Framework, then you can do an SQL-like query to select all Animals where type is 'Cat' for instance. Normally you would have to a parametrized SQL statement, stored procedure, or load all animals and iterate over them to select which ones match your criteria. LINQ-to-SQL with Entity Framework is really nice, but requires some work to get it wired up.
Windows Forms apps built into WPF is incredibly easy to learn and is robust in features. The biggest complaint someone may have is picking up some of the XAML annotations, but you don't even have to look at them if you don't want if you are willing to use the Toolbox to drag and drop elements and use the Properties window to set up each element.
wait until you learn about Generics... you will freak out with how easy they are and how much they can do :)
Not quite. LINQ-to-SQL and Entity Framework are two different technologies with the same goal. They both let you generate classes from a DB model and query your data using LINQ. EF has a few more robust features specially in terms of mapping and Microsoft seems to be taking a bit less care of LINQ-to-SQL in the way of new features in favour of EF. LINQ queries in EF are actually called LINQ-to-Entities. LINQ is also wonderful when manipulating collections of objects (LINQ-to-objects) saving a lot of looping to do some tricks. In general, I will advice against using the marketing friendly syntax for LINQ queries (var cat = from x in animals select...) and use the methods straigh up (var cat = animals.Single(a =&gt; a.Name == "Cat")). That reminds me, for a C# newcomer, reading something about lambda expressions and functional programming will prevent a lot of head-scratching. Once you learn the ropes of that, things get really interesting.
I agree with your statements, however with .NET 4.0, Microsoft has pushed hard to make it so that Entity Framework is the ["recommended data access solution"](http://blogs.msdn.com/b/adonet/archive/2008/10/29/update-on-linq-to-sql-and-linq-to-entities-roadmap.aspx) in place of ADO.NET LINQ-to-SQL. The LINQ-to-SQL statements do work with Entity Framework as well as LINQ-to-Entities. If using SQL Server 2008 and .NET 4.0, Entity Framework is an excellent and robust option for an ORM. If LINQ is on the OP's roadmap for things to learn, I do agree with ours that learning lambda statements is important. I utilize LINQ over a foreach loop for simple tasks such as saying: List&lt;Animal&gt; cats = animals.FindAll(x =&gt; x.Type == Animal.Cat);
Try the [DevXpress free control library](http://www.devexpress.com/Products/Free/WebRegistration60/). Most of them are for WinForms, but there are a handful of nice ASP.NET controls to utilize. Another option would be to use some of the excellent JavaScript frameworks (YUI, jQuery, etc.) and build simple ASP.NET control wrappers around JavaScript functionality. The biggest downfall is you won't get the nice code-behind page like you would with a standard ASP.NET control, but you can hack around that utilizing some AJAX.
Drag and drop interface is a bit clunky and not as good as Winforms yet, you need xaml to make a ui exactly to your spec. All he wants is a simple form based app that connects to a database. winforms/c#/sql server compact edition will do the job, anything more just adds to the development time. I personally prefer WPF but it has a learning curve and is just unnecessary for this project.
The #1 thing I loved about C# over C++ development was that I didn't have to worry with pointers and passing items by reference. The options to perform those tasks exist (utilizing the 'ref' keyword on a property: public void Insert(ref List&lt;T&gt; instances)). The other thing is the verbose exceptions that are thrown. Nothing more frustrating than having a null pointer exception in C++ and simply getting a segmentation fault when running your program.
I can see your argument. Sometimes it is hard to get into the OP's mindset when it has been so many years since I was really learning .NET. WPF is my personally preferred framework for creating windows applications, but WinForms is the much easier to use tool for the job.
You don't need LINQ, you need [ADO.NET](http://www.csharp-station.com/Tutorials/AdoDotNet/Lesson01.aspx). ADO stands for Active Data Objects. It is a set of classes that allows you to connect to any database (MS Access, SQL Server, MySQL, Oracle, Postgre, whatever) and make the same calls no matter what the source. The object model is pretty simple. You have a "Connection" object. This is where you specify exactly which type of database you will connect to. You have a "Command" object. This is where you put your INSERT, UPDATE, DELETE, or SELECT query. You have a "Result" object. This is where the result is stored. You iterate through it collecting what you need. The "Command" object needs a "Connection" object. The "Command" object has some "execute" methods that return "Results" object. 
If array.sort is of interest then you may find LINQ of interest. Much of the 3.5 update to .NET was to support LINQ with [Extension Methods](http://msdn.microsoft.com/en-us/library/bb383977.aspx) and [Lambda Expressions](http://msdn.microsoft.com/en-us/library/bb397687.aspx) merged in to create the syntactical sugar that is [LINQ](http://msdn.microsoft.com/en-us/vcsharp/aa336746.aspx).
LINQ was part of .NET 3.5 - released in 2007. It is still available in .NET 4. You will probably find it hard to get a good job these days without decent LINQ to [SQL|Entities|Objects] exposure. YMMV though.
.NET 4 also brought Parallel.ForEach which speeds things up on multi-core/proc systems. It's pretty sweet!
Objects are always passed by reference so your ref List&lt;T&gt; instances isn't really neccessary. 'out' would still make sense though.
I don't know if not knowing LINQ is a dealbreaker, but knowing LINQ is incredibly nice to write minimal code to complete complex tasks. I once wrote a line of LINQ-to-XML to parse a REST service that would have been several dozen lines of code using XmlDocument class in conjunction to parsing the document. I love the efficiency of LINQ's expression trees.
I'm not sure why everyone's talking about LINQ-to-SQL. It's deprecated and soon to be obsolete. You're supposed to use LINQ to Entity Framework now. The best way to get started is using Microsoft's express environments and tutorials. http://microsoft.com/express Features nobody's mentioned that are worth looking into include: getters/setters, named parameters, anonymous classes, functional programming, type restrained generics
If you don't know much SQL then ADO.NET is probably your best bet. The trick with using LINQ to anything is to be comfortable with SQL. I have found that WinForms programming falls short when you need to pull data from more than one table at a time and display those results in a DataGrid or a collection of databound textboxes. Microsoft's built in components are good at dealing with single table queries. Might be worth your while to learn some SQL then write some queries as the SELECT,INSERT and/or UPDATE commands to ADO.NET. You can accomplish an incredible amount of work with just .NET 3.5 and WinForms. Hope this helps.
Correct me if I'm wrong but only Visual Web Developer 2008 will let you connect to a SQL Server on a network. All of the other Express software limits you to a mdf (Microsoft Data File). Here's hoping SharpDevelop finally returns their database component!
Web apps with their stateless nature are tricky to work with. MVC is a whole other level above ASP.NET.
Don't forget the Parameter objects. At work I saw a SQL statement with tons of triple single quotes concatenated together plus checks for apostrophes in strings. And this is an ASP.NET app! For shame! The only reason I haven't fixed it is that I'm a C# dood and the "SQL" is written in a VB.NET app. Plus the developer is marrying a patent lawyer.
Well it's not too much of a sin to build your query with String.Format string myQuery = String.Format("SELECT * from {0} where {1} = {2}", tableName, fieldName, fieldValue); Edit: Sorry, for ASP.NET you are correct. You really must use parameters. I don't really build many web pages. I'm an application developer building apps for in-house use so I don't really have to worry about SQL injection attacks.
Does it remove apostrophes?
Funny I don't remember any SQL injection sanitization in this guy's code either. Thanks for reminding me!!! Maybe I will re-write it anyway!
No it doesn't. Another good reason to use parameters.
Linq to SQL in a web app is NOT easy to work with. I recently started a project on linq to SQL and quickly migrated my DAL to NHibernate because all of the time I WASTED debugging obscure L2S issues. NHibernate is still difficult but it's way better than L2S. Even MS has abandoned L2S im favor of EF. Anyway, my recommendation? Don't touch an ORM. A little SQL never hurt anyone...atleast not for little projects like this one.
If you have an IRC client I recommend visiting ##csharp on freenode. I idle there and would be willing to help guide you.
I cannot recommend this channel enough.
Everything is passed by value by default. Objects are reference types, which are passed by value.
I have to disagree, I find Linq-to-SQL to be very easy to work with - also working with it is the same in a web app as opposed to a WPF/Winforms app. NHibernate is a great alternative as well. Also, L2S was not abandoned, MS decided not too after the backlash it recieved. I agree that learning SQL first is probably a better idea, just make sure you learn it correctly to avoid injections - be sure to parametrize or use SPs.
Thanks to you and all the kind gentlemen here, I've set up the database and put in a few controls etc. and I'm on my way to creating the application. I'll be sure to ask questions when I need help. Thanks again!
Just wanted to chime in and say, definitely use LINQ to SQL for the data access. The LINQ part of 'LINQ to SQL' is going to teach you part of the C# language (LINQ to SQL, or in-memory objects etc. is essentially the same syntax, just the provider it's applied to changes). WinForms is also a good choice - WPF is 'better' in some senses, but such a learning curve. You didn't mention if you had or wanted a Visual Studio IDE, but the [free Visual Studio 2010 Express edition](http://www.microsoft.com/express/Downloads/) may help you - and you can always try the Pro edition for 30 to 90 days (extra 60 days for registering, I believe). I will have some more time later and can point you at some good starters.
Ok, so [here](http://www.java2s.com/Tutorial/CSharp/0460__GUI-Windows-Forms/Catalog0460__GUI-Windows-Forms.htm) is set of examples of how various things in Winforms are done. It's got no explanation in this section but the earlier sections about other C# related topic do. If you were to download Visual Studio 2010 Express, run it and select File-&gt; New Project -&gt; Windows Forms application, then this tutorial-by-example would pick up from there. Here is a [LINQ to SQL 5 minute overview](http://www.hookedonlinq.com/LINQtoSQL5MinuteOverview.ashx). Not enough exactly to get going (how are you going to design the DB schema? Are you cool with using the free sql server express edition?). For asking questions, obviously you could here again, but I would recommend searching StackOverflow.com (so site:StackOverflow.com and you question on google/bing etc.) or the MSDN forums are very good, noob friendly places (well you're not a noob, but C# noob at least!) .. [here is the WinForm forums](http://social.msdn.microsoft.com/Forums/en/winforms/threads/) and if you're getting no love at all, you can PM me - I do have lots of WinForms and C# knowledge and have done ungodly bad and good things with them over the years and am glad to help.
Re: Linq2Sql: One table == one object is a deal breaker for me. If I have an Invoice with a ProductId, I don't want to have to traverse to another object just to get the ProductName.
I have Visual Studio 2010 as a MSDN lisence from Microsoft so that wasn't a problem for me. I have started to use LINQ, thanks to the help here, and it's phenomenally easy for me to access database. 
No problem, glad we could help.
An open source .NET web crawler written in C#. It uses Lucene.net as its searchengine. 
Uh, wait a sec... I go to the site, sign up (with my junk email account) and the "source code" .zip I go to download turns out to be a 114MB file called "DEMO_2.5.zip". I think it's fine if you have a commercial product to sell, but this is just misleading.
If you have VS2010 and have the freedom to use .net4.0, I would really recommend looking at entity framework 4 over Linq to SQl. Its supposedly the replacement for Linq to Sql and has some very cool features like lazy loading! 
Linq to EF (version 4 at least) is brilliant. Saved us from a whole rack of issues at work (thank you lazy loading!!)
Use Entity Framework; switching shouldn't break too much of your code and its worth it as the underlying data access stuff has been fundamentally improved.
PDF libraries in .NET to create, modify PDFs. It helps to insert images and does all manipulation programatically. Its free and opensource. 
Looks nice. Thanks for pointing this out!
Could someone explain to me why I would want to replace the current view engine used by MVC with Razor's?
This is pure blogspam. Someone found 2 random PDF libraries and just copied/pasted the basic description of them. I personally recommend [itextsharp](http://sourceforge.net/projects/itextsharp/). I tried using PDFSharp, but the performance was horrendous. It literally took MINUTES to render a pdf with a few tables. I haven't tried the other one, but I don't think I'll have to. 
From the look of it: simpler code! Plus you get a powerful helper engine so you can define templates inline without required code-behind. (under heading "Declarative HTML Helpers")
This looks really interesting and much more clean! I like it and i'll try Webmatrix by the way. Thank you!
Frankly, the Web Forms model is just plain antiquated. Compared to whats available to other modern frameworks the web forms view engine is shit, mostly syntactically but also functionaly. All the legacy crap in ViewUserControl and View is really bothersome. Also, IntelliSense support and the way that VS formats ASPX files is enough to drive any developer mad. Try maintaining a large view file some time and you'll pull your damn hair out.
This is the single most exciting development (okay, maybe IIS Express too) to come out since MVC 1.0 was released. I can not WAIT to replace my shitty ASPX files with cleaner stuff.
I have maintained large view files (well, I split the huge ones out in to ViewUserControls), and I haven't pulled out my hair yet. I've overcome a lot of the shortcomings of the ViewUserControl/ViewPage by using MvcContrib/FluentHtml. As far as the view engine itself, I've never had any big issues with it.
Could you use a view instead? I've just started playing with Linq2Sql, and I was counting on being able to do that . . .
I think you can. I was about to say that seems cumbersome to me, making all those views, but then I thought about it some more and I guess I can't argue that it's any worse than making stored procedures.
I'm just starting to look at MVC. Does anyone have any recommendations on books or online information (besides asp.net/mvc)?
Now lose the IIS dependency.
You can use Mono + Apache for ASP.net and ASP.net MVC.
I'm reading the Sanderson book on MVC2 right now, and so far it's been great. Far clearer and easier to understand than 2 others I've read. He uses NUnit for Unit Tests, Moq for mock objects, NInject for DI/IoC, and LINQ2SQL for data access, which are nice complementary technologies to go with MVC.
I also use winhost.com and have had no complaints, the reason I like them is they offer a very nice package for no contact hosting. Learning programming was a hobby for me and I didn't want to shell a years worth of fees for my hosting in advance. They only offer hosting for one domain under the cheapest plan so if you switch domains you will need to cancle your existing plan and get a new one,i found this pretty strange.
SMS Server SDK allowing developers to easily write SMS applications, using just their phone and a PC. This project is actively developed by Microsoft India Research team.
Isn't Microsoft supposed to favour Entity Framework over LINQ2SQL?
That's my understanding as well, but apparently there was an uproar and MS isn't going to phase out LINQ2SQL just yet. Either way, after I get through the Sanderson book, I want to take a look at EF . . .
EF is really interesting. I've been staying away from LINQ2SQL as I was expecting EF it to live longer and evolve faster (and in a sense it has). Version 1.0 had some huge flaws (not letting me access the foreign keys without jumping through hoops, ridiculous!) but the next one is quite nice. I wish the guys behind it where as dynamic and community oriented as the guys behind MVC. There are a few LINQ2SQL that are still missing in EF and I wish I could use.
Yeah, there was a big backlash in the blogosphere toward the older EF versions, but apparently MS has responded by incorporating a lot of what the community wanted. I know one or two people that actually use it professionally and they think it's great . . .
I used EF on a project about a year ago, and it was a huge pain, but I gave the latest a try last week on something, and it really come a long way. I actually enjoyed using it.
I use it professionally. 1 project with EF 1.0, 2 with EF 4.0 so far. It may not be perfect but it sure beats writing ADO.Net by quite a margin. You could potentially mess up a project faster with EF if you don't know what you're doing but with a good base knowledge on how it works and what's happening behind the curtains it's a very powerful and time-saving tool. The backlash was very deserved. They could have made a much better first release using some of the community feedback like they did for EF 4.0. MVC2 + EF4 + AutoMapper make one hell of a good combo. Razor can only makes things better.
Never heard of AutoMapper, but looks pretty cool. Thanks for the tip . . .
Once upon a time I was ripping my hair with the MVVM pattern because I had to copy data between view models and EF 4 objects. I really, really didn't want to write and even less maintain code to copy data from one type to another. After some digging I found the gem that is AutoMapper. It does *exactly* what I needed. Now I only have to maintain an exception list for properties I don't want copied. Enjoy.
Are you using .NET 4.0?
Oh yes. I'm loving functional programming. Bye bye ugly loops, hellooo lambda expressions. Even multi-threaded code looks sweet.
[Razor](http://weblogs.asp.net/scottgu/archive/2010/07/02/introducing-razor.aspx) post is also interesting. I am curious is Speed and Neatness the main reasons or are there more?
I *just* updated to MVC 2. Come on, dude.
I feel your pain, but that's the field we work/play in :)
Json object binding. *drool*
Also, MVC3 is backwards compatible, so no worries on dropping in the new binaries and using the new features ;)
This confused me, actually -- it seems like this is new, but its been working in MVC2 for me for a while . . .
Razor is very interesting, other than that I saw only a few things that were improved for me over MVC2. I'd really like to see a native sitemap provider for MVC. Theres a codeplex project called MVCSiteMapProvider that works but a solution from microsoft would be more integrated. Also the json binding has been working for me too in MVC2, so I am not sure what they are talking about there either. Always with the upgrades though, I just am about to finish a major MVC2 site, at least it will be easy to upgrade if something interesting comes out of it.
&gt;Also the json binding has been working for me too in MVC2 That is what I mentioned earlier. Glad to hear I'm not crazy...although arrays of models or collections of models fail...maybe they fixed that.
I'm still working with MVC 1 Preview 4. Man, this is depressing.
Neatness seems to be a big priority in ASP.Net MVC. And that's the way I like it.
i think that is what they are talking about. 
God I hope so, I have some pretty gross lookin' things that I'm doing right now to overcome that...
What, you didn't like the bonus hidden index field? Because it really was a pretty terrible way to go with things.
lol ya, I've had to write a custom binder or two to make that stuff work the way I expect, maybe thats the difference
I looked at the link and visited FubuMVC's site. I still have no idea what this buys me over stock ASP.Net MVC.
http://www.microsoft.com/visualstudio/en-us/products There ya go...Have fun
they're pretty much the same. originally the express editions were also payware, and the only difference is that they were seperated by language whereas the full version of visual studio included everything. *however*, some stuff like compiling for windows mobile isn't in C# express (afaik -- of course, you can always just do it manually, outside of VS).
One major difference between the full version and the express version is if you have a solution with mixed windows forms and web projects you are only able to work one one set of projects at a time. You need to reload the application based on the type of projects you want to work with.
Unfortunately, I don't know of a comparison chart for Express vs. Professional, etc. One limitation of the Express editions not yet mentioned is that their support for add-ons is limited. According to [this post on the VS blog](http://blogs.msdn.com/b/visualstudio/archive/2009/12/09/building-and-publishing-an-extension-for-visual-studio-2010.aspx): &gt; If you want to build extensions for the Express Editions, you’re limited to toolbox controls, item templates, project templates, and custom start pages. As I understand it, "build extensions for" can be replaced with "use extensions in" and the sentence is still true. Tip: Once installed, go to Tools -&gt; Options and click "Show all settings" at the bottom of the dialog. The Express editions by default hide some settings that *are* available.
That compares the paid versions of Visual Studio with each other, and has no information on the Express editions.
JSLint is a JavaScript program that looks for problems in JavaScript programs. It is a code quality tool. JSLint takes a JavaScript source and scans it. If it finds a problem, it returns a message describing the problem and an approximate location within the source.
Yep, which means no ReSharper (which I find hard to live without when I'm working on C#)
All but one of the Express editions do not allow for server-based database connections ONLY database files. The 2005 Visual Web Developer Express version allows for server based database connections. Also there is no support for some of the MS Foundations like Windows Workflow.
If I remember correctly in VS Express you can only have one project in a solution.
The main (only?) difference is that Express versions can't run plugins and Visual Studio add-ons. using Express is not a problem, but if you were a pro, you'd want Resharper or CodeRush etc.
I know so little... You can compile C# code outside of the 'Studio? Fortunately, this program won't be for windows mobile. Unless it is considered to be super-awesome and people start throwing money at me. Unlikely. ;)
Can you tell me a bit more about plugins, or direct me to a site that does? I doubt I would need them but it's always good to be informed. I see the two you mentioned there, so I'll go Google them. Thanks. What I'm looking to do was in another "link" I submitted, asking for advice on Excel w/VBA. The program is an engineering utility, where the user enters information and the program would spit out answers based on equations from the literature. Nothing too complicated, but would definitely need a back-end database to store chemical component properties and such.
Excellent answer, thank you!
Something else you might want to try is the new [WebMatrix](http://weblogs.asp.net/scottgu/archive/2010/07/06/introducing-webmatrix.aspx) Microsoft is putting out there. It's a very dumbed down version of all of the Visual Studio stuff which might make it a little easier to get going. I've only used it a little bit, but it might be a helpful tool to keep in mind.
of course! the .NET framework comes with the C# compiler, csc, built in. you can either call it from the command line (it's in c:\windows\microsoft.net\framework[64]\\[version]) or use it from a free, third-party IDE, like xacc.ide.
Whoa. Slow down. You definitely need a back-end database to store chemical component properties? Are the users going to be maintaining these properties or will they stay the same? Don't rush into needing a database. "Database" is a technical liability - like a car.. Not an asset, like real estate. Um.. there are some other common plugins.. TestDriven.Net, Visual Studio Power Tools.. I don't really know.. I use Tdd.net and r# and that's about it.
Are you a student? Check out [DreamSpark](https://www.dreamspark.com/default.aspx). Do you own or work for a privately owned business that develops software, makes less than 1M/year, and is less than 3 years old? You might want to become a member of Microsoft's [BizSpark](http://www.microsoft.com/bizspark/). If you quality, you can get free software licenses for most of Microsoft's software library. I have literally saved tens of thousands of dollars. 
Initially the properties (molecular weight, boiling point, etc.) would be constant and would not change. I would like to allow people to add their own compounds at some point in time, but initially, no edits required. :) I have a lot of experience with databases. As long as VSE will allow me to use them, we're good to go. But, you make a good point with regards to using the database.
That is not correct at all.
http://thepiratebay.org/torrent/5494125/Microsoft.Visual.Studio.2010.Professional.x86-KOPiE because 100% guarantee you that no one at microsoft will care that you didn't pay for this. Because if you decide you like c#, you'll probably run it on a microsoft operating system. Microsoft's developer tools aren't one of their core businesses, but they do drive their core business.
FreeTextBox is the most-used HTML editor for ASP.NET. It is used in major Open Source projects such as Community Server and DotNetNuke as well as excellent packages like Smarter Mail. 
I'm pretty sure everything he said is incorrect. I'd double-check his answers if I were you.
Will do. S/he sounded really smart. I am easily misled. :) Good thing is I can get the Pro version for my son, who is in school, via the DreamSpark program. At least I assume at the moment I can. He's in middle school but has a school email address so that should just about do it, no?
I wish I could upvote you more. :) I signed my son up for Dreamspark (which is real, by the way, I think he will really enjoy learning to program) and of course, I can borrow his computer whenever I want. ;) Thank you thank you thank you!
You're welcome! It's one of those things I found a couple of years ago that I simply can't keep secret from other people. 
I'm too lazy to scroll through the whole thread, but.. at the moment I use XML files, the serializer and deserializer and LINQ in C# there is a SQL Server express but I found that to be annoying... 
A Web or CMS developers requires the Embedded HTML editor to get input from the User in a formatted manner. These Editors are based on Javascript and they could easily be integrated in to the Web Application written in any programming language. More than that these are opensource and they have been used in many open source CMS and blogs.
I've been using Castle ActiveRecord for over a year now and I find it very easy to use, better than vanilla NHibernate, but this looks like it might be a good contender? Anyone got any experience in using it?
I'm very interested in using Razor, but (I don't know whether this is just my install) it doesn't have any intellisense or code-colouring?
I haven't tried out EF4 yet (actually, never used Entity), but I tried out Workflow Foundation 4 yesterday, and my god is it an improvement over WF3.
Beta 2 should have intellisense support, at least according to scott guthrie's blog.
Hah, yeah that wouldn't be hard though. My entire machine grinds to a halt whenever I try and open any of the workflows in our project! Sadly it's not compatible, but then I try and avoid workflow-related work as much as possible. May try and convince the boss to rewrite in WF4 if any significant changes are required to our workflows.
I use Vici.CoolStorage. Much easier to use. EF4 can eat a dick.
Yeah, I've used it for a few small web development projects. For small(er) databases, the designer works well, although I can imagine it would be pretty cumbersome for a very large database. Of course, if design surfaces aren't your thing, then EF probably isn't either. The big improvement in EF4 is the foreign key support (which means it's actually usable now). If you take a look at the latest EF4 CTP, you'll see they're working on a code-first, POCO approach which is much leaner and easier to work with. It ain't perfect, but it's getting better.
haven't used it yet, but I will if nhibernate doesn't get their new linq provider out soon.
Way to contribute to the discussion in a meaningful, helpful way.
Yup, I'm using it for a WIP at the moment. I like it. Then again, I don't have much to compare it to apart from linq2sql. 
Yeah, the code-first approach is what I was really eyeballing - it's something that I do with ActiveRecord and use unit tests to actually generate my database schema - very rapid and fun to program
Why do you choose an active record pattern over a domain model using an OR/M? I'm wondering because in the past I used an AR pattern using code generation off an existing database and another one using typed-datasets. My last job we used AR using a custom 4GL. However, these patterns leak the data model into the domain layer. All those products did have a database independent implementation using a strategy pattern. I'm not completely sold on OR/Ms though because I don't like 'magic'. Almost every complex project hat I work on that has some automagical thing that happens either breaks or won't allow me to do what is necessary to get the job done. On a difference note the last time I used AR via typed datasets using the designer in Visual Studio I had extreme problems after a certain amount of time. It simply wouldn't allow any editing [read crashes] and the other problem was there was a lot of customization which would take a very long time to reimplement. That's why I am sort of afraid of anything that depends on a designer. The code-first approach might fix that but I haven't looked at the last CTP [yet].
&gt; However, these patterns leak the data model into the domain layer. If you care about performance that is impossible to avoid. Even basic questions like do you load child records eagerly or lazily have a huge impact. 
I won't use EF because it is almost completely incompatible with stored procedures. I ended up writing my own active-record framework that is specific to the way we use stored procs. It is completely non-portable, but quite effective.
Well, honestly if I wanted the best performance I wouldn't use a domain model at all. I would use a transaction script and have it deal with only the data that is ever required. Domain model is typically chosen with maintainability as the primary purpose which leads to separating domain logic from the persistence data model.
I believe that we are in agreement.
I'm curious...incompatible how? I use it with sprocs ... haven't experienced any issues...
Last I checked, which was awhile ago, you have to write your stored procedures with EF in mind and use a very limited subset of their functionality. For example, you can't use * output parameters * scalar return values * multiple result sets * result sets where the columns returned may vary There is also no good way to handle procedure versioning. You can't pass in non-domain parameters like "ModifiedByKey" to the stored procedure. Instead you have to create pseudo-properties on the data model to hold the value. If this has changed please feel free to correct me.
I concur.
In my particular usage of ActiveRecord, it's a purely code-first approach. I don't touch icky designer stuff either. It's a database-agnostic implementation that I currently have pointed at a MySQL database on a lamp virtual if for no other reason than my machine is noticably slower with SQL server installed! I agree with your point below about it being better to have a single sproc [or similar] to update the data rather than allowing the OR/M to commit each object singly, but what with connection caching and 'dirty' flags optimizing which objects really have changed, is there really that much performance improvement? I'll admit to not having performance tested to a great degree, but I'm fairly confident that I can get 50tps on my creakingly old pc even taking into account the virtual lamp machine overhead. Whack an SSD in there and that will scale dramatically - [check out this bad boy](http://www.anandtech.com/show/3849/micron-announces-realssd-p300-slc-ssd-for-enterprise). If I'm honest, I think the speed of which I can develop is much more exciting to me than producing a quick-as-the-metal application. Incidentally, I'm not sure I understand your first question re: AR vs DM - to me they are basically the same but it's just a difference of coding? I.e. in ActiveRecord all I do is: MyEntity fred = new MyEntity(); fred.Save(); versus: MyEntity fred = new MyEntity(); DB.MyEntityLayer.Save(fred); I just prefer the former's code style. Please correct me if there's something more important/fundamental I've missed.
I'm certainly interested in John's reply to this, especially the multiple result sets one - would be fantastic for deep-loading entities
You're right that it has been limited, but EF4 supports returning complex types from sprocs. You can have it create the appropriate class for complex results. It also supports scalar values. Can't speak to the non-domain params, but [here's a good writeup!](http://blogs.msdn.com/b/somasegar/archive/2010/01/11/entity-framework-in-net-4.aspx) on the EF4-specific improvements. As I said, it isn't perfect, but it's a looong way from the very limited initial release. 
I am using it. EF4 implemented Self Tracking Entities which are great for frameworks using WCF or any n-tier design. There are nuances with Self Tracking Entities that make them frustrating to work with at times. You can't just say Remove(entity) from a collection and must do MarkAsDeleted action instead. Collection properties are IEnumerable, so you must write Extensions to handle common Lambda functions. The STE do feel more performing than NHibernate when it comes to managing properties that are collections (or Navigation Properties as Microsoft calls them in EF).
Don't waste your time on the 2.0 Certs unless they are pre-reqs of some sort. If you need to do certifications then try and focus on ones that will teach you what has changed in 3.0+ versions of .NET. The .NET 2.0 certs will likely be the easiest to get since you know it well. 
I wouldn't recommend taking anything older than the 2008/v3.5 tests. You will just be wasting your time studying obsolete tools &amp; technologies. Besides, you said yourself that the new project will use at least v3.5. Take the 2008 tests for reasonably up-to-date tools &amp; technologies, with the benefit of lots of 3rd party study guides available. I prepared for the v1.1 MCSD with the MS self-paced training kit, and I didn't think it prepared me well, although I did pass every test on the first try. Take the 2010 tests for the very latest tools &amp; tech, with the risk that the new project might not use v4.0. There are no real 3rd party study materials out yet, so you will have to be self-directed, using the exam topics outline as your study roadmap. That's what I'm doing this time.
&gt;what has changed in 3.0+ versions of .NET. Which is what? Not much at all. ..ASP.NET 3.5 and 2.0 is the same. Well they have added one Control(Datalist) on the toolbox that was not there in 2.0 , and the Framework obviously there are classes that you could not find in 2.0. now you can Silverlight in 3.5 and other cool stuff. The AJAX stuff is preinstalled also... but yeah not much changed.
Not to mention Workflow Foundation and Windows Communication Foundation.
hmm lets see. WCF, WPF, WF, LINQ, Entities, Unity Framework, Lamdas. Automatic properties, etc etc. Yes the base language has not changed, as a matter of fact .NET 3.0 and 3.5 use the .NET 2.0 CLR and really are just additions in the tool set. However these additions are being used in a lot of projects and they all have concepts, rules, usage and patterns that need to be understood in order to use them effectively. In .NET 4.0 we got a new CLR that includes support for dynamic variable typing, new debugging support (including live production system debugging and stack dumping without the need to use COM based tools WOO!) among a host of other features. The base language and syntax skills are of course easily transferable (though LINQ and Lambdas may trip you up at first). MS wasn't making new versions of the framework for fun. Tons of features have been added since the initial release of 2.0 and they aren't features you will be able to pick up and use effectively in an afternoon. 
FYI, APress and Wrox now have some titles out on .NET 4. O'Riely also has some rough cuts available as well (great way to get good books early and at a discount). Granted these books focus more on how to effectively use the tools not necessarily how to answer the questions on the test. 
I originally got the .Net 2.0 MCPD and upgraded to the MCPD 3.5. The upgrade was much easier than the original cert (just one test). Like others have said, I would go for the .Net 3.5 cert now (no point in going back to 2.0) since that is what you are using for sure, plus there is more study material available for you. Once you have your 3.5, it will be easy to upgrade to 4.0 when the 4.0 upgrade test becomes available.
I have been eyeballing that too. Going to start a new project once MVC3 beta 2 comes out, and i will be working with entity framework with the code first approach. 
Why would you be on preview 4 if MVC 1 is released?
I just had to deal with that in a project at work, the way i got around that was to use the Sys.Serialization.JavaScriptSerializer.serialize() on my array of JSON objects from the Microsoft MVC AJAX library. The controller method that excepts a string. Finally i deserialize the string with this handy function public static T Deserialize&lt;T&gt;(string obj) { System.Web.Script.Serialization.JavaScriptSerializer oSerializer = new System.Web.Script.Serialization.JavaScriptSerializer(); return (T)oSerializer.Deserialize&lt;T&gt;(obj); } 
Yep, I did something similar actually but I put it in a ActionFilterAttribute so the deserialization is (mostly) transparent to the developer -- he just has to decorate his method with the attribute and it sticks the value in the parameter. Here's the code I'm using, I wish I could take credit for this idea, but I lost the original source. http://pastebin.com/URwKS9Ww
well as far as the base language is concerned, the difference between .net 1.1 and 2.0 seemed much greater to me. also, those certs don't cover those things, necessarily. the WPF has its own cert,a s does the ADO.net stuff. So does Silverlight. As far as the base, 70-536 and the webform/ webapp ones, theyre really similar. I agree he shouldn't mess with the 2.0 stuff, but someone with 2.0 certifications aren't completely left behind. the WCF was the biggest change I'd say, and other stuff, WPF (whcih is really XAML as far as language is concerned) )is practically its "own thing" I mean you might as well add MVC adn silverlight in there. yes, they've build a lot of new technologies on the framework but the *framework itself* changed very little, and **that is what the core certs cover** and by that i mean the 70-536, 70-502, 70-526
yeah, WCF, that was the biggest change I'd say in the base framework. I forgot to mention that.
I was looking at a similar solution.. but this looks pretty solid, might try something like that tomorrow. Thanks. 
and this is why I never put much stock in those certs in the first place though I do realize it is required for certain levels of vendor or ISV partnership. 
Well, I worked at A fortune 50 tech company for a while, and they are a shorthand way of demonstrating a standardized skillset. Yeah, I'm all about the portfolio, not the cert- but they do demonstrate a certain level of competence. They aren't the end-all be all, but they are a noble bit of time well spent also. I have mixed feelings, as well as a few certs myself. I put them on my resume, sure..but I REALLY focus on the portfolio.
same here, in a lot of ways actually. based on your responses I would not be surprised to run into you some day depending on the industry. 
Thanks Adam, I was under the impression that the 70-536 was mandatory as a pre requisite to do the other exams. Guess i'm wrong, good luck with your studies!
One project of the same kind per solution, I think. For example, you can't have a class library and an asp.net website in the same solution.
botnets assemble!
They used the "this" keyword as a function param. my brain just BSOD'd. I never knew you could do that.. It looks like they are referencing that particular instance's class type. Wow, I just realized I suck at generics.
It's actually for [extension methods](http://msdn.microsoft.com/en-us/library/bb383977.aspx), not generics.
aka duck typing
Do you have stored procs for legacy reasons? I have abandoned store procs for some time now and I'm quite happy not having that burden. I had in mind to use them where I had heavy data handling or to solve some performance bottleneck but I'm currently fine with 100% pure LINQ-to-Entities. I haven't even used views yet. I am very careful about my LINQ queries so I don't go OOverboard or do silly things I've seen people do like unnecessary JOINs in LINQ. 
I have (1 project with EF and 2 with EF 4). It's far from perfect but 1000 times better than doing ADO.Net directly. If only the project reacted quicker to user feedback like ASP.Net MVC did, it would be perfect. The EF 1 release was ridiculously lacking essential features.
Before I answer your question, answer a couple of mine: 1. How do you handle history rows? 2. How do you handle audit fields? (e.g. last modified by and last modified date) 3. How many different applications are hitting the same database? 
I don't use 1., for 2. they are provided like any other property of the object I'm inserting/updating/soft-deleting. 3. I have one. I share my repository library (an assembly with the EF model and the classes with all the LINQ queries and basic data logic exposing it) instead of sharing stored procs.
My situation is very different. History rows are not just nice to have, they are a legal requirement. And I have literally dozens of applications touching the same database, so any changes to table schema must be isolated from the applications. So until they find a way for this kind of stuff to place nicely with ORMs, I would say my use of stored procs isn't a legacy requirement.
That's cool. There are probably ways to work around it like handling the history rows at the repository level (I've done it before but like you using stored procs) and ORMs make schema changes impact applications less (you code against your model, not the DB schema). That doesn't mean you have enough reasons to change something that works well.
Doesn't duck typing imply polymorphism? I don't see the dynamic keyword being used anywhere.
[check this](http://lambda-the-ultimate.org/node/2754). yeah, it isn't duck typing.
I wouldn't say my current model works well, merely that it works. That's why I'm essentially creating my own framework on top of the procs. &gt; There are probably ways to work around it like handling the history rows at the repository level People would forget. Or they wouldn't notice when a table that didn't used to have a history gets one. I'm thinking triggers are probably the best way to handle this.
People would forget if you had to manually do it (something which I would never recommend). But if your repository had functions to add/update/delete instances, you could put that logic there. I highly recommend not allowing the UI and business logic components to access the model directly but via a library. That library will encapsulate functions like specific queries (Get*XYZ*ByID()) and any data logic (Add*XYZ*()). Feel free to add audit, soft-delete or any speciality in that library. You can then reuse that same library from any app that wants to access that specific DB.
I see your point now. The only sticking point remaining is that you have to do a new rollout of all the apps whenever the underlying database schema changes. 
You could rollout new versions of your common data access library and only update that component as long as the methods and their signatures haven't changed. Of course, this is less practical than replacing several stored procs using a SQL script in the blink of an eye. You can map stored procs and views to EF but I haven't played with that yet.
Use a preprocessor directive for different marshalling sizes of the array, create two assemblies with either array size using a build script, build switch that choses method in appropriate assembly via reflection depending on the command? Seriously though, just get an unsafe pointer from the C++ part and Memcopy the bytes there when needed. This is taking the C++ hate too far.
I'll agree that there are plenty of times where trying to do something just because you want to give Strousroup the finger is stupid and counterproductive. However, the whole management and reflection system in C# *should* have some standard way to do this, because it seems like something that would be used quite a bit. We use C# here because taking the vast majority of memory management issues away means we don't spend as much (or any, in practice, really) time dealing with things like buffer overflows/underflows, memory corruption, fragmentation, or the hundred other things that you could care to name. It's not a panacea, certainly, and it does have several disadvantages. However, after almost 6 years of building, using, and extending a system whose managed footprint is above 95%, it's been totally worth it. That's largely why I'd prefer to use a standard solution. It's worked awfully well so far, so I'm loath to try and roll my own if there's a preexisting wheel out there.
Maybe I don't understand, then. What's the difference between having the object marshal itself in a certain way, and saving the object in a plain old c# byte array and writing it to a certain unsafe pointer when needed? It's just a method instead of an annotation? Or am I missing someting?
Part of the generic layer is the actual marshaling to and from byte arrays that get pinned and pushed into unmanaged code several layers lower. Not having to write that same code for *every. single. message* is a pretty big deal, given the amount of hardware we deal with. Part of marshaling obviously involves the size of the structure. That's what the SizeConst field defines in the attribute. I'd prefer to be able to just set that size conditionally, but I'm beginning to think that I'm not going to find a happy ending there.
[This answer](http://stackoverflow.com/questions/201255/marshalasattribute-sizeconst-net) from Jon Skeet suggests that you should be able to use reflection to change the SizeConst at runtime... surprisingly! Although I guess that `SizeConst` is only used at the actual point of marshalling, so as long as it's set by then it should be okay. 
Alas that would require a QA cycle for every affected application.
Can you change the MarshalAs type to UnmanagedType.LPArray or even a NULL terminated string?
Just because you might be able to change it, doesn't mean you should.
Sounds like PostController should have a public ActionResult AddComment(Comment newComment) method. You'd post your new comment to that and have it finish by calling your GetPost method with the PostId (that will be contained in your comment, since comments tie back to posts, yeah?).
Personally, I'd have a Comments controller with your standard Create method. It depends on how RESTful you want to be.
That's what I started out with, actually. But I'm struggling with the main portion of the View being tied to the Post model, and then the sub portion using a Comment model. Setting up the form and all that to post to the comments controller was a piece of cake, but it knows nothing about the comment model. That's why I went to the PartialAction, but it barked about the RedirectToAction back to the Post. PartialAction really feels like the right way to go, but maybe I'm missing something on its intended use. My other thought was to create a PostNewCommentModel or some crap like that to handle the whole thing. That would probably work out, but it still smells to me
What is a PartialAction? I'm not sure what you're talking about there. 
Sorry, I may be using the wrong terminology. I've been calling PartialActions the things that MVC 2 renders with Html.RenderAction or Html.Action. Instead of using the parent view's model, they execute a separate controller action. That seems to be the way to go for the comment and it'd have a nice separation of concerns I'd think. And it worked too, until I tried to redirect from the damn thing. It seems like it's main use is for things like a side bar shopping cart or "recent comments" - things on a page that aren't necessarily related to the view. 
Ah yes, that what I suspected, though I wanted to be sure. Is there a way I can see your code? Once I see it, I can probably get a better idea and make a suggestion.
If I'm understanding you correctly... Don't worry about your PostModel being part of your "Create" View. You could use many different objects inside that model to show different pieces of data on your view, and that's fine. However, when you end up doing a POST of your form to your Create controller action, you'll only have to have to pass the Comment object in to the method. Your form should be able to bind it "automagically" for you. public ActionResult Create(Comment comment) Why create a whole new PostNewCommentModel? Are you also thinking about creating a PostEditCommentModel or PostDeleteCommentModel? Pee-uuuu! That smells worse, if you ask me. ;)
Yeah, that also worked until I started worrying about validation. When I went with a SetModelError, saying for example the e-mail address wasnt a valid address or maybe the comment looked spammy, I started getting into weird issues because the "model" I was working with was not the ultimate model being displayed
Well, this is purely fictional right now. My real app has some specific implementation details related to my company I'd rather not get into. I will try and throw something together this weekend that matches up with what I'm trying to accomplish
Understandable. 
I can't say much without looking at your code a bit to get a better idea of your thinking. This sounds to me like a common sticking point people have with MVC where the separation of concerns feels wrong because you have to include types in your view that are tied to closes to other areas. It's also a problem when you want to have different models for your view based on context. This is where DI tends to come into play but I will avoid that topic at the moment. If you want someone to take a look at what you have you are welcome to send me a private message.
Yeah, I'm not too worried about DI. I've been using that for a couple of years now. It's weird, it seems like the "hard" part of MVC for most people has come easy for me, but some simple tasks I just can't get a good grasp on. [So here's my project as it stands](http://dl.dropbox.com/u/70476/SillyWebMvc.zip). It kind of works, but I don't like it one bit. It's all dummy in memory data that I threw together, but it has the gist of what I'm doing I've commented out the route that feels like it should work, but I can't master it. I really appreciate this. It's been a while since I've felt this silly when learning something.
you have the right idea, I will have to dig into my books a bit as my memory is a bit fuzzy on the validation part of things. I remember a feature in MVC that will allow you to map your form fields directly to properties on the model and include validation in the process. I agree with your feeling on the redirect. While it likely works I think you can instruct MVC to return a view of your choosing as opposed to the one matching the method name on the controller. You could also just call the controller method directly and push its return type into the return of NewComment if you wanted. Likely not the cleanest way to go about things but avoids a client re-direct. 
Did you update your graphics drivers? &gt;Forcing hardware graphics acceleration off can resolve WPF rendering issues that are due to driver issues, but before doing so, customers should ensure that they have the latest graphics drivers installed. Outdated drivers are a common source of WPF rendering issues (see KB 963021 for additional details).
I've been doing the following for a year and it has worked well for me. It did take me a while to get the recipe just right. * Create your *Comment* controller * Add you Create(HTTP GET)/Create(HTTP POST)/View/Delete actions * Create a CommentEditViewModel and a CommentViewViewModel (you can get away with just one but I don't recommend it) * In those view models, add properties for each field your comment should have * Decorate your properties with attributes from System.ComponentModel (or something like that). Stuff like [Required], [Range(1, 50)]. [Read all about it](http://weblogs.asp.net/scottgu/archive/2010/01/15/asp-net-mvc-2-model-validation.aspx). * In your Create action, receive as parameter a CommentEditViewModel. With your attributes, you won't even need to SetError manually. One line of ASPX code will even allow you to add client-side JavaScript validation! * Add your view and make it strongly type for CommentEditViewModel I'd suggest your read about MVVM. My opinion is that it really makes MVC work. Edit: RenderPartial() is awesome for complex pages (like a portal showing lots of different infos). So you can split a page into small, simple morsels which in turn require small simple actions which in turn use small simple view-models. Plus as a bonus is seems to render each partial page in parallel so you get theoretically better rendering performance. 
Yes, that was the first thing that I tried. Before I got the latest-and-greatest for my Lenovo, I'd pull a BSOD by trying to open up the in-studio extension manager (really!). So my system doesn't blue-screen, which is neat. But having to kill VS2010 because I can't see what I'm typing anymore isn't super delightful.
Ah, the MVVM was the key to unlocking it in my mind I think. I ended up with basically this as my model: PostCommentsNewCommentModel { string Title; string Content; string PostDate; IEnumerable&lt;Comment&gt; Comments; NewCommentModel NewComment; } Then in my controll I had my [HttpGet] Index() that displays everything, and [HttpGet] Index (PostCommentsNewCommentModel model) that handles the adding of new comments. I wasn't 100% the best way to do something like this though: if (ModelState.IsValid) { if (_userRepository.IsEmailBlocked(model.NewComment.Email)) { ModelState.AddModelError("", "Sorry we can't take comments from you anymore"); PopulateModel(model); // sets the post data and comments return View(model) } } That look about right for error handling? 
Timely
I had this issue at first too. A patch fixed the issue for me, but in the interim you should be able to disable hardware acceleration (I think that's what I did) and the issue disappeared. If you remind me tomorrow I can look at what I did specifically.
It's a sad state of affairs though that an IDE of all things crashes or glitches due to graphics drivers...
I would move the validation method to view-model. But calling your Create/Add action method "Index" makes me frown. Please rename it to something that makes sense and I think the element that you're missing is telling your form post method to submit to Create/Add instead of the default (the current action). Also: always send form data via POST.
Try [Mono](http://monodevelop.com/).
[Qt Creator](http://qt.nokia.com/downloads/downloads)
What environment? Also just looking for a editor or a full blown IDE?
I'm on Windows the vast majority of the time. I'm really just looking for an editor, since the project already has build scripts and whatnot. I was really hoping there was a syntax setup for Notepad++, but I can't seem to find one, and I usually prefer to use an existing solution before trying to make something myself.
Emacs. And no, I'm not a "twisted wreck of a human," I just happen to have enough self-discipline to make a long-term investment learning a powerful tool that will pay for itself a thousand times over throughout my life. This is my honest advice to you, but if you don't like my answer and the only way you can come to terms with that is by calling me names, I suppose I can't hold that against you.
I love that you counter my unabashed ad-hominem with a sideways crack at my self-discipline. Truth be told, I've tried on multiple occasions to learn to use Emacs, and every time I've come away convinced that it isn't worth the effort. If someone told me that I could learn how to fly by letting them whack me in the kneecaps twice an hour for six months, I'd tell them that I'll just suffer the cost of gas for the rest of my life, thank you very much. I have a well-documented history of dislike for Emacs the tool. Emacs as an idea is something I'm in favor of. The problem is that the implementation is ugly, slow, actively hostile, and steeped in a culture that shuns any criticism. The problem with making something that makes it possible to do everything is that you end up with something that makes it hard to do *anything*. I'm to the point where I'm capable of using Emacs to edit Python files, run them in the REPL, save them, and then realize that I could be using something that doesn't actively punish me for not knowing how to use it. I honestly believe that people who have dedicated themselves to getting intimate with Emacs initially do it out of some kind of masochistic urge, and in the end are convinced that it was a good investment because of cognitive dissonance. If you can use it effectively, more power to you. Continue to do so at your pleasure. But trying to suggest that somebody should actually spend the months or years necessary to use it before being afraid of hitting the wrong combination and completely ruining everything is insanity, pure and simple.
Ironically, VS 2010 isn't actually that great for C++/CLI because it doesn't understand the "CLI" part either for IntelliSense, a regression from 2008.
We don't use VS 2010 at work, so I haven't run into any of that trouble, thankfully.
That's a whole lot of baseless assumptions about my motivations, mixed in with confident assertions of the lack of value to a tool you admittedly haven't taken the time to learn. Your theory about my reasons for suggesting Emacs doesn't really merit a response, though I will say that the cute hypothesis that I can't admit learning Emacs was a waste crumbles in front of the fact that I mastered Vim, loved it, used it for six years... and had no hesitation giving it up as soon as I noticed that something else (GNU Emacs) might serve me even better. Emacs doesn't specifically cater to people unwilling to learn its intricacies, it's true. But I'm the kind of developer who would explore the intricacies of *whatever* tools I use (what, aren't you?), and Emacs rewards such exploration better than any other editor I know of. Emacs specifically caters to experts, and you'll appreciate this when you become one yourself. It emphatically *doesn't* punish novices, with the stipulation that those novices are actually willing to learn. One of the most beloved Emacs features is its extensive and thorough documentation system. Press a couple keys and you have immediate cross-referenced access to whatever documentation you need for a given keyboard command, menu item, interactive function, or variable. And if that isn't enough for you, it'll also give you a link into the relevant Emacs Lisp source code in case you want to explore or modify some bit of behavior. Emacs wants you to be an expert, but more importantly it wants to help you become one. It isn't "insanity" to suggest you learn a new tool. Your strawman about "hitting the wrong combination and completely ruining everything" doesn't withstand even modest scrutiny -- or should I spell out that, very broadly speaking, it's a good idea to use your old, familiar tools in production while you experiment with something new in a safe environment?
Here's a demo of using VS2010 for those who have missed out. Class:: **INTELLISENSE NOT SUPPORTED FOR C++/CLI** Field. **INTELLISENSE NOT SUPPORTED FOR C++/CLI** Method( **INTELLISENSE NOT SUPPORTED FOR C++/CLI** "string"); Thanks, VS. 
If using .NET, you can choose to compile against .NET 2.0. It would be hard to find a computer that doesn't already have it installed. Your other option is to use C++ and statically link all of the runtime libraries. 
I've just checked and .net v4 seems to be the only targeted framework in VS2010 at the moment, but I'll figure out how to add v2. Thanks very much for the pointer.
Huh? When you create a new project there should be a drop-down listing .NET 2.0, 3.0, 3.5, and 4.0.
AFAIK tou can use ILMerge to merge assemblies you need into one dll or exe.
That's what I've read too, but .NET 4.0 is the only option in my dropdown box. I don't have any more time to look into it today but I'll have another go next week.
Thanks, I'll check out ILMerge.
Right click on your application on the right menu, open the properties and choose .Net 2.0 as targeted frameword. Remember to remove unused imports (right click on the editor, under Refactoring) and delete the resources that don't exists under .Net 2.0 (like Linq for example)
Odd. Perhaps you don't .NET 2.0 installed on your machine.
ILMerge only works on managed assemblies so it's only good for merging .net dll-s and exe-s.
You might be on an XP installation that hasn't been updated then. Try installing .net 2 manually.
From what I remember multi-targeting support is not enabled for 2010 express editions at project creation in case you're using those. But after you create your project, you can right click on project name in solution explorer, do properties-&gt;application-&gt;target framework. You should find previous versions in a drop down list. Or look at [this](http://blog.meidianto.com/2010/07/01/vs2010-tips-13-how-to-do-multi-targeting-in-visual-studio-2010-express-edition/)
I'm not sure how up-to-date it is or what features it works with, but mono has its AOT compiler that might do what you want. http://www.mono-project.com/AOT
Isn't that what he wants to do?
From what I understood he needs some type of native bootstrapper for a .net app.
After you create your app, you can create a setup and deployment project (installer). It includes an automatic .net runtime downloader, and I believe you can also include the runtime statically in the installer. 
ILMerge works great, especially with GILMA (gui interface for ILMerge) to save you from having to type out a long ass line.
Just out of interest... why? The "antiquated" batch files apparently do the job. What's the perceived benefit?
I just can't agree enough. To me, it looks as if there were 2 conflicting cultures in the Unix world. One is the elegant and simple engineering that created the Unix kernel, C, pipes in the command line, Lua programming language, bash shell, etc. The other is the "guru" mentality that thrives on making things the most esoteric and incomprehensible possible, as if their job stability depended on it. For them, "Keep It Simple, Stupid" is not sound advice. These are the ones that created Emacs, C++ template meta-programming, APL, all the command names, etc ...
Well, I am proudly on the "don't make me think!" side of this debate; one those abject things that you Unix gurus call "lusers".
What makes you think this is a Unix vs. Windows thing? If I didn't use Windows I wouldn't be in this subreddit to begin with.
I questioned this at the time too. The batch files need to be run in a specific order, each with a couple of inputs. The other option was to create one more batch file which collects all of the required inputs and then daisy-chains them all together. I think the main reason we're now going for the GUI option is because the powers that be think it would be easier for the non-tech savvy employees to click on radio buttons than type into a CMD window.
Fair enough. "Usability" is a perfectly good reason as far as I'm concerned.
I was looking for a way to cache data in my apps and didn't wanted to go down the Enterprise Library road and found this. For Web apps System.Web.Caching is certainly a good answer but this one works in all cases as it doens't depends on ASP.Net.
[Cross post](http://www.reddit.com/r/codeprojects/comments/ddhpp/universal_com_callable_wrapper_which_virtually/) For lack of multiple-choice posting to subreddits. Looking for pointers, volunteers, criticisms, etc. This is meant to virtually port .Net classes into any language. Trying to keep it below 800 lines of code, including documentation. Edit: I said 'replacement for mono, dotgnu, etc', but that was not correct at all and was a rather a bizarre statement to make. If anything, I'm hoping next to make a clone of my wrapper to be compatible with mono, dotgnu.
Yes, I said 800 lines of code, damnit!
Looking through it now. Thanks!
snide remark -&gt; com sucks.
If your employer is going to pay for it then go for the class room environment. 
A long time ago, I worked for an employer that was a Microsoft Certified Partner. That meant the company simply had two Microsoft Certified Professionals. Well, they pissed one of them off, and he quit. Our partner renewal was coming up. We needed one quick -- as in, two weeks. So he called a meeting of everyone asking who would be able to do it. No one volunteered. He then volunteered me, since I just get shit done. Awesome. So at the time, you only needed to pass one exam from a list. I chose the easiest one, which was about Windows XP. Aside from the multi-language support stuff, I knew all that needed to be known anyways. So I bought one of the Microsoft Press study guides, and looked it over for ideas on what topics to expect. I then read up my reference books on the relevant materials, and took the test the next week. Passed. Done. We can keep that "Partner" feather in our cap. Easy enough.
I've passed 5 exams using nothing but MS and 3rd party study guides (e.g. Exam Cram). If you are a self starter, the classes are not necessary.
Does it really help your employer getting new clients or sell more wares if the company is Microsoft partner? I always wonder if this is some kind of scam going on in the industry because recently one of my employer's largest client just got sold on Oracle Apex crap and guess what the consulting company that sell them that solutions is? a Oracle partner. 
You get software benefits.
Upvote because you don't know what the heck you are talking about.
I have my MCPD-E certification for 2.0. I took the 5 exams required over the course of 13 months. My company was willing to pay for pretty much whatever I wanted, but I wanted to go the book route. I got the exam books and bought the Transcender exam prep software. I drilled practice exams and re-read chapters I did poorly on until I got 90% on several exams in a row -- this was between 5 and 10 practices per exam, I would say. You can "report" to yourself via practice exam results. Don't be satisfied until you hit whatever target you set. PM me if you want to know more about the tests themselves. I won't give away questions but I can talk about the style of the exams.
I'm assuming the "Exam Cram" is a set of books? Are they a better read than what's coming out of the Microsoft Press set, because those are mind numbing!
That's pretty much how I got my MCPD:EAD, also.
Yes, it is a series of books by Que Certification. For the .NET 1.1 MCSD, I used the MS self-paced exam prep books for two tests (Windows apps and ASP.NET apps), then got really bogged down in the XML Web Services book. I got the Exam Cram book for that test and found that it condensed the material really well, so I also used Exam Cram for the Solution Architectures test. I used a Sybex study guide for the Sql Server test. I passed each of these tests on the first attempt. I am currently studying for the 2010 tests using nothing but the exam topics listed in the test descriptions and MSDN online, because there are so few 3rd party books available for them yet, and the MS ones did not impress me last time I used them. It feels like an effective approach, but I have not taken any tests after studying this way, so I can't endorse it as a personally proven one.
Your employer may be comforted by the idea that you are certified but they shouldn't. It just means you have an overall knowledge of a technology but it does not validate that you have any practical experience and that you know how to use it. I've come across a few "certified professionals" that where quite incompetent but must have read the MS Press book, crammed it into their brains and passed the exams. Remember, it doesn't certify that you're good, it just certifies that you know some stuff. Of course, if you have experience in the tech in question, it's never a bad move to get certified so take the opportunity. A real way to check for quality (and hopefully constructive criticism) would be to have an audit by an expert but that would cost way more.
I personally am very confident in my skills -- I've been around the block for quite some time. I've been underpaid by tens of thousands for a very long time due to a salary freeze -- I've since demanded comparable compensation. Even though the "real IT world" sees these certs as somewhat of a joke, it's a nice leveraging piece of paper in the HR world.
In the case of one of my previous employers, getting certified meant an automatic bump up in salary. It makes sense: you get certified so they can claim more money from customers for your services. Plus it gives a certain added value to your CV.
Can you just share a master page between the two?
Note: you'll still need the .NET framework installed to run an ILMerge-d executable.
Me too, have for years now. They do a good job. Not blazing fast, but good and reliable. 
For reference and for those interested, here is my bunch o' commits: http://github.com/josteink/IIS-server-side-stats-page It works, but could use some touching up.
&gt; forcing me to use the command-line That's enough for me to understand the circle jerk on par with politics. I never understood the bullshit proposition that people have that typing equals productivity. Then again I don't work in trivial applications where you check out a single file at a time.
Holy god you use Vault willingly? I use Vault at work and want to die...luckily we are in the process of moving to Mercurial. The UI for Vault is a lot more sophisticated than most of the alternatives but some of the concepts in vault are bad (sharing? why would I share between branches? and lets not talk about merging please...)
It's not so much that the cmdline is bad, it's that integration with VS makes much of the source-control process automated and safer.
Nope. I tried it awhile ago, and couldn't get it working on Windows. Used Mercurial instead, and haven't looked back.
the git-bash thing integrated in msysgit is pretty cool if you know your way around bash. Especially stuff like find . -ipath "./SomeFolder/*.cs" | xargs git add (it's recursive, so beware) you can use all kinds of regular expressions. I know git add has wildcards, but those don't seem to work all that well (with git exiting with no message whatsoever upon an error). Also, use DiffMerge oder P4Merge as Diff-/Mergetool. Sadly my company uses a horribly set up svn (one repository for all projects, no trunk/branch/tag setup, heck, we're not even allowed to do branches at all) and using git-svn has lead to quite some trouble, so I just use git for private use at home and love it. the cheap branches, the easy setup, the staging, including git add --patch and all the other features I miss in svn. Then again, they used to use VSS, so I'm grateful for the SVN ;)
The main advantage of a command line is that they are trivially scriptable.
mercurial is a better dvcs for the windows environment, mainly because the tooling is better than git (as you are finding out) - tortoiseHG + VisualHG is a good start for visual studio.
We use SVN for all of our Projects, .net or not. We use tortoise svn (GUI that integrates into explorer) on all of our developers machines. Has been running flawlessly for years now and tortoise svn is powerful while remaining unobtrusive. We originally had TFS but it was screwing up our commits with respect to merging code.
Git is the one thing I miss most since moving to .NET development full-time. I think Git could be a fantastic benefit to .NET, but teams are usually already familiar with TFS or SVN. There are plenty of C# projects using Github, but Git hasn't gained the same traction with C# as it has with other languages. For those interested, here is a link to the most active/popular C# projects using Git: http://github.com/languages/C%23
I really really like the idea of git but I've tried it and doesn't seem practical. Maybe I am daft but I never quite understood how to actually use it effectively. I'll stick with TFS even though branching and merging is a hassle. 
I think there is a good market for this, there are plenty of cheap or free source control alternatives but nothing that uses TFS. Could be because of the licensing costs for tfs, is it per user? It would be a killer service to run a few ec2 instances and provide some freemium offering.
to answer my own question, looks like you would need an external connector license for each server, approx. $10k.
Mercurial + BitBucket.org is a good combination. I don't see that git + GitHub has anything over it for any OS. Hg tracks some very important projects, e.g. Python, so feel safe that it's plenty capable of anything you throw at it.
seconded.. i found git clunky on windows. Mercurial works nicely with windows however
I use git for deployment of a website at the moment. In fact I just committed a patch into my testing branch and merge it into the master one, and in a few moments I'll pull the patch onto the webserver. It's become trivial to me. Took a while to get the process right but I'm going to miss it. I'd use git for my projects because the branching is unparalleled (and I mean that by a large margin) but we have to use TFS for reporting, team work and so forth. TFS is a tax on my flow to be honest. The TFS server is interstate so things like undo are a major pain in the arse. But that's another issue ;) I'm a linux guy as well so I prefer Git Bash which comes with GitExtensions. Just make sure you put the right entries inside .gitignore and add it to your repo (*.bak, obj, pdb, vspscc, Thumbs.db etc). You can ignore binaries but then go ahead and add them anyway where needed. Like another commenter I used p4merge as my diff tool for both git and TFS via VS2010. I do use gitk when I need to know where I'm at though. 
In TFS, branching is easy, it's the merging that's a pain.
I've never used git, but I have used all of these: RCS PVCS CVS SVN SourceSafe Team Foundation Server Perforce You will have to tear Perforce from my cold dead hands. I'm not going back to anything else. Sorry git. Perforce is excellent, and free for OSS use.
We are currently using MSYSGit with our .NET environment at work and I really dislike it. We're using TortoiseGIT to use it instead of the git bash (I feel funny using command line on a windows machine), i am a stickler and think if i'm working in windows i should just be able to right click and run my command. Things that bother me about it, it seems like a hassle to just push and pull code, having to commit it first to your local and then pulling and then pushing. And then if it spits out errors, you're in bigger trouble. It's incredibly slow. I miss being able to just push one file up, instead if i want to push i have to push all the files. I just don't think GIT is ready for Windows yet. 
FluentNhibernate is on github, and there has been some discussion on the nhibernate developers mailing list about moving to git.
Someone at work with a similar attitude towards Perforce (running home Perforce licenses even!) was surprised at how much he liked using Git. (Certainly more than he liked being stuck with SVN.) He still loves Perforce, but now he will admit that working in Git is probably just as good on a day to day basis. If you outright ask him, he'll still wax poetic about the advantages of Perforce for a quarter hour, though.
[VS2005 had rendering issues, too.](http://img150.imageshack.us/img150/5419/awesomefreezelb5.png)
Nice, but I'd name the extension methods "LoremIpsum" instead of "FakeLatin". 
Until I hear some stories about the Entity Framework that aren't horror stories, I'll stay away. Trying to implement EF in a project was by far one of the worst decisions I've ever made in developing software. It's sad when using NHibernate for .Net is a better solution.
Just curious where EF screwed ya. I was starting a small side project and I decided to use EF for it and so far it's been alright. Not perfect, but compared to NHibernate and other solutions is seems to have its nuances but nothing that would keep it from being used in production. But then again, I'm only in the prototyping stage so I could be setting myself up to get hosed in the future.
NHibernate is one of the best ORM library in .NET to build data access code faster. We identified best open source alternative to NHibernate. According to the requirement pick any library and build the data access layer in .NET.
What was your horror story? I've successfully released 3 projects with it. EF 1.0 did give me a few unnecessary headaches solved by a few workarounds but EF 4.0 runs smooth for me. It's *far* from perfect but it works. My goal was to save time and so far so good.
I looked into something like this many months ago, and I think that AForge.net was one of the recommended libraries. Please post your results; I'd be interested to see what you eventually decide on.
I can recommend IPP (Intel Performance Primitives). It's not a C# library, but it comes with C# samples that call the library via P/Invoke. The library is extremely fast, it's optimized by Intel for many different processor architectures, e.g. using SSE1,2,3 optimizations when possible. It has all the basics for image processing/analysis
Check out pegasus imaging (I think they might have been bought so they have a different name). We used a barcode tool of theirs, but I think they have some imaging software as well.
The .NET Bitmap class is very powerful for working with images. If your images are small, you can iterate over the pixels using methods. If your images are large or you need speed, you can lock the bitmap in memory using LockBits, and then you can iterate over the bitmap with pointers in an unsafe block, and it's slicker than shit. I'm sorry, I actually know a gooda bit about but I'm drunk and tired :)
Try OpenCV for C# this is what you are lookng for
The Microsoft EF tools are horrible. It's a v2 product. If you do finally cajole them it into working, it'll be horribly slow and *completely* inflexible. Avoid. NHibernate is absolutely the way to go - either that, or the CodeFirst CTP (v3) is showing some promise.
This seems really awesome if you are creating lots of new projects all the time.
I personally LOVE [Fluent NHibernate](http://fluentnhibernate.org/).
 I looked at EF and nHibernate and ended up writing a small, in-house entity framework based around LINQtoSQL instead. I have a lot more control this way. I really didn't need a lot of what is in EF. It's overkill. I have an EntityBase&lt;T&gt; class that has some generic boilerplate code in it for CRUD methods, and then specific entities e.g. ProductEntity&lt;DataLayerProduct&gt; that is templated around the data layer generated by LINQtoSQL. Since each entity is custom, whenever a tricky relation happens I can always override the functionality if needed. If not, the entity class ends up being a few lines of code that gets most of it's functionality inherited from the base class. 
Wow this is awesome! Finally an easy way to try out and install different .net packages. 
Which version are you using? I used the 1.0 I believe, which somehow jumped to 4.0 (love MS sometimes&lt;/sarcasm&gt;). Anytime you needed to update the ORM it meant completely dropping it and rebuilding it. No easy way to get it to autoupdate between build/test/dev/live servers either. So you had to drop and rebuild it each fucking time. It was a god damn nightmare and likely means I'd rather just build my own fucking objects and skip the ORM shit altogether (I fucking hate NHibernate as well, LINQ to SQL/Objects/etc is a fuckload better).
http://www.reddit.com/r/dotnet/comments/dmbcs/entity_framework_ctp_40_code_first_approach/c11qpte
Even in 1.0 you didn't need to drop the model to update it. It will also be horrible for the system to auto-update in any way. It's up to you to update the project binaries like in any normal application. If ORMs aren't doing it for you, nobody is forcing you to use them. Also, don't have a cow man. Try some breathing exercises or soothing music.
It had something to do with silverlight and the silverlight plugins I had to use. I've had 8 developers that tried it experience the same thing. I'm not sure that my experience was that different than theirs (everyone said they'd quit before using it again, one of the rare points of unity among developers I've seen).
oh i forgot it also allows DM's by clicking on someones handle
Doesn't work here.
how do i disallow the location thingy?
Haha, dont use location based chat if you want to disable the location!
Wha...what is this?
This project has been moved to sourceforge: [http://sourceforge.net/projects/universalccw/](http://sourceforge.net/projects/universalccw/)
Lokad.CQRS for Windows Azure is a an Open Source framework and guidance on efficiently building solutions for the cloud. It fits distributed and scalable enterprise scenarios as well as small and cost-effective solutions. The project is based upon the R&amp;D effort of Lokad (winner of Windows Azure Partner Award 2010 by Microsoft) and is shared with the community in hope to make your .NET cloud development better!
I am always leery of relying on VS for this sort of thing. I think if you are doing releases from VS, you're just asking for it. What I would do is create a separate msbuild file that references your csproj/sln files (depending on the granularity of how you need to compile, etc) and does all of the packaging for you. You can get a free version of TeamCity or use an OSS CI server like cruisecontrol.net to then give you push-button deployments, if not to production then at least test and staging.
I'm curious about what benefit you see in *not* referencing these DLLs. To me, that's taking the DI mentality a bit too far. Decoupling components is good in so far as it keeps you from baking incorrect/transient assumptions into your code in a way that's painful to reverse. Beyond that, you're just playing a pointless game of Mousetrap, and potentially losing performance or type safety. The thing to remember is that your application likely still has *real* dependencies on these libraries, i.e. everything is fucked if they are absent or broken. Why would you want to find out about this later than you have to? Project references have nothing but beneficial attributes, in this case. You can use them and still leave your application abstracted and extensible without too much effort.
The reasoning behind not referencing the DLLs initially was to ensure no one got lazy. It was nice to get and keep everyone on the team in the right mindset from the start of the project. So for us, it brought some initially benefit from the forced separation. We haven't had any issues (that I remember) with DLLs being broken when they're included in the UI. Since the interfaces are well defined, it's been safe enough for us to code against them and assume the infrastructure logic was unit/integration tested. We *have* had issues with the DLLs being missing, which is the root of my question. Referencing them is definitely one way of ensuring they're included with the proper projects. To allow us more flexibility, I was hoping to create a work flow where we "publish" the infrastructure DLLs separately and the dependent projects reference the published location. Your point does stand that this may be overkill. 
Cruise Control is definitely on my list. There are some political issues that are preventing it in the immediate future. Have you found that defining MSBuild files separately pretty straightforward? When I initially looked at it, the Xml and debugging we annoying enough that we went with PSake for our build scripts. If things are going to change for us, now would definitely be the time. 
Well, I've been using the XML build stuff (ant, nant, msbuild) for almost a decade, so it's pretty second nature to me and I don't have a lot of issues with it, but I think that's just an experience thing. If you find psake or rake or whatever is easier for your situation, go for it. It's about the end result, not the process, after all.
Is it free? I dont even...
That's the first question I had in mind as well. Pushing the source is all well and good, but a free (albeit limited) playground to try asp.net apps will be awesome. Every single host I've tried that promises free asp.net hosting turned out to be a load of crap. Not bothering to signup until I find out whether its gonna be free.
Hi, there will be a free plan to start out with, including web hosting, a database and a subdomain under appharbour.com. If you need more power you'll be able to scale up easily. That won't be free of charge - but it will be competitively priced. During the beta we won't charge you anything though, so no reason not to sign up :-)
ya some more details would be nice, I am interested in what it is exactly? Pushing the source sounds nice, but I'm not sure I fully understand what it is and why it is different than a normal asp.net host free or otherwise. I would add a page with a few more details and if I like it I will definitely sign up.
At its core, it's hosting for .NET web applications in the cloud. We have sweetened that up by simplifying deploying; instead of transferring your site via FTP, you can just push your source code (when we go live, this has to be with Git, but we are going to support other SCM's too). This is then build at our servers and served afterwards.
I am very interested in this. One thing that I would definitely be look for is the availability to run background tasks. Specifically, the ability to have a script periodically download tf2 gaming logs / demos from another server and process them into a database. Then the main app will use that and other things.
Have you used EF4? Its quite easy to setup and use. I find that performance is quite good actually.
When can we expect to hear something if we signed up?
Lucene and Solr are popular and widely used searchengines. Often there is a question, which one to choose? This article explains about this detail. For .NET programmers, choosing Solr would be the best choice.
* I typically pick up the highest rated C# book on Amazon. I haven't read one since .NET 2, so I don't know what to recommend to you. * See #1. I guess it all depends on whether you are going to do WinForms, ASP.NET, or dabble in WPF. * [This book](http://www.amazon.com/Microsoft-NET-Architecting-Applications-PRO-Developer/dp/073562609X/ref=pd_sim_b_14) is a really good source of information about the standard principles and designs of systems. I really wish I would have picked this one up ASAP. * I'm currently using [StructureMap](http://structuremap.net/structuremap/index.html) for my DI and [PLINQO](http://plinqo.com/) for my ORM. I will probably end up switching out PLINQO with [Fluent nHibernate](http://fluentnhibernate.org/) or [netTiers](http://nettiers.com/default.aspx?AspxAutoDetectCookieSupport=1). * I've rarely seen any languages used outside of C#/VB.NET. I recommend you learn both C# and VB.NET. It seems that most examples and open-source projects are written in C#. Learn one of the languages first, then get the [C# &amp; VB.NET Conversion Pocket Reference](http://www.amazon.com/C-VB-NET-Conversion-Pocket-Reference/dp/0596003196) to quickly learn the other. In no time at all, you'll be able to write in both languages. * I'm not sure about your last item about the Apache Commons components, but there are a lot of useful open source apis available on [CodePlex](http://www.codeplex.com/), so go check that out.
Why? I mean - I love .Net... But Why?
Why not? It's always good to learn new things and to add to your resume. I've recently started learning Java for Android development. 
The primary language used in the .NET arena is still C# however some people are doing things with F# and there is a lot of VB out there too still. Since you are likely familiar with .NET 2 and developing with the tools I would start learning about the new stuff added from 3.0 on. A key thing to know to help cut down on the confusion would be to remember that 3.0 and 3.5 aren't really new framework versions. They are all .NET 2.0 with additional libraries and some language features. With .NET 4.0 we got a new runtime and compiler so there is a bit that is different there in particular with some language features and debugging capabilities. Microsoft has added new features to have a more complete development stack many OSS project's features that have gained popularity in the .NET or Java worlds have been incorporated into a one native library or another. Some of the features you will want to read up on: * ASP.NET MVC - Replaces ASP.NET webforms and abandons all that was bad about them. (Note web forms is still supported however myself and others are pushing against using it in new development). * Windows Communication Foundation (WCF) - Service delivery and consumption infrastructure. Allows easy exposure of POCO's to service endpoints defined purely by configuration. Can support exposing a single class's features over multiple transports and data formats at the same time among other advanced features. * Windows Presentation Foundation (WPF) - I have only played with this a bit. It's framework for creating and developing client side visual interfaces using object and event chaining (as far as I understand it anyway). It has tools for creating very slick UI controls (Expression Blend) and underpin's Microsoft Silverlight platform. * Windows Workflow (WF) - A workflow engine embedded in the .net framework. Visual Studio includes integration so you can visually design and debug workflows. Had built in persistence, state management and auditing capabilities. It does require a bit of wiring to get everything working right but it's pretty slick when it does. It's no competition for a paid for workflow system from a deployment or management scenario however it supports all major features of a WF engine. * LINQ - An extension to the .NET framework allowing for Lamda based and SQL like querying of objects and object collection taking heavy advantage of generics. (Note if you didn't play with generics in the past, learn about them now, they are used all over the place now) * Entity Framework - A built in ORM solution, I have only toyed with it a little bit so I am not fully up to speed on it yet. There are a number of opensource projects both from Microsoft and other parties providing a range of services. The OSS arena for MS development seems to be expanding at a pretty decent rate. Poking into most projects you will find many of the more popular projects are ports of Java projects: * nHibernate - port of Hibernate * Log4Net - Port of log4j * Spring.NET - port "sort of" of Spring There is so much more, having a better idea of what kind of development you are doing would help narrow things down. Beyond that I would say just pick up some books or start reading about some of the things I mentioned above, while reading about these technologies you will run into other new features you will want to look into. PS MSDN documentation is almost decent now so don't pass it by during your research. 
&gt;ASP.NET MVC - Replaces ASP.NET webforms and abandons all that was bad about them. I second this. WebForms was easy to set up, but really, really hard to maintain once the projects got very complex. With ASP.NET MVC it is also much easier to do unit testing. &gt;Entity Framework I still don't know what to think about this one. I've heard a LOT of horror stories about it, but the verdict is still out on version 4. 
Various reasons, some technical, some personal. I don't want to turn this into a Java vs. .NET-post.
I have heard some bad stuff about EF3 as well. I have been avoiding using it until someone else has felt the sting. IMO LINQtoSQL worked just fine, it just wasn't ORM which is what they keep asking for. 
Thank you! &gt; This book is a really good source of information about the standard &gt; principles and designs of systems. That's exactly the kind of thing I was looking for.
I ended up using PLINQO for LinqToSql to give it that ORM feel, and to overcome its inherent limitations. The problem I have with it is that it's a huge performance hog when it comes to returning large record sets. And if you want to remove your dependency from it, get ready to write a lot of code to abstract it out. I managed to do it, but it still feels a little clunky.
Thank you very much :-) &gt; having a better idea of what kind of development you are doing would &gt; help narrow things down Not sure yet. I expect to be working with integration and custom application development for small and medium businesses that are already committed to MS. Is MS still in love with SOAP? If I recall correctly, the .NET SOAP stack worked fine by it self when I last used it, but did not integrate well with other stacks, e. g. Axis.
I have tried to simplify my use of ORM by only creating objects around data structures that may have a high degree of interaction from the user or system (IE allowing changes to the data as opposed to just reading). If I am just reading data for display purposes I tend to stay away from anything close to ORM particularly if I am returning multiple records simply because of the overhead involved in marshaling all the objects necessary. Granted in some cases there is no way around it but rather than apply ORM like a blanket across an application I use it in cases where it makes sense to take the performance hit in trade for higher level functionality provided by the ORM. 
You're welcome, happy to help, I know where you are at I have switched between Java and .NET many times in the past. With WCF SOAP is just another message format over the HTTP transport. It is still quite popular however things are shifting as with WCF in play you start to use transports and message formats that make the most sense for the task at hand. For example system to system integration where data contracts and interfaces are known (say an internal enterprise system) does not need the overhead of the SOAP interface which tells us way more about the service and the data than you would need in that case so you might use NET.TCP (a binary transport and message format). There are a number of built-in transports and data formats you can use and WCF (like most new .NET features) is very extensible allowing you to plug in new formats, transports and even security and caching mechanisms. 
So, do you just use raw ADO.NET? PLINQO allows me to create read-only classes for my result sets, and allows me to return multiple result sets from stored procedures, but I still find that it's a little slow. Honestly, it's not bad, and I should probably return paged results instead of allowing the user to return ALL the results for larger data sets... 
I have been using LINQtoSQL mainly, still has some overhead but not as bad as full blown ORM though straight up ADO.NET with properly parametrized queries is still a valid use case in some instances. I will certainly look in PLINQO it sounds interesting. Lately though I haven't had to deal with it much as my work in the past 6 months has been against someone else's service stack so I don't get any data directly from an RDBMS so I am likely a bit rusty. 
REST-style services are all the rage now in the Java world (and for good reason IMO). What do the .NET-people think about that?
It's an integrated part of the development environment when working with ASP.NET MVC. When generating a new controller the IDE can generate all your rest endpoints as a starting point. MS doesn't push REST heavily but it is well supported by the stack. Personally I think REST is good in concept and have applied it successfully in some cases however, like most things in software development, I think it is a red herring to try and conform an entire application around REST if you have technical or business cases that make REST more of a pain than it is worth. IE try not to make REST the hammer for all of your nails. 
&gt;I am likely a bit rusty Been there, done that. Don't fret, it's like riding a bike.
You're a very helpful person :-)
&gt;I think it is a red herring to try and conform an entire application around REST Yes, but isn't that kind of a moot point when you've abstracted things out enough to where you can implement your top service layer to use REST, SOAP, or anything else?
Nothing is preventing you at that point to use whatever model you want and in many cases people adopt something like REST whole hog and do make it work. However I tend to feel that there can be cases where trying to fit everything into such a model will result in abstraction acrobatics or a perversion of the model at some point. Both of which are also solutions to the problem but should be taken with the pros and cons they bring. Like most concepts like this I like to try and apply an 80/20 (adjust the numbers to your liking) rule. You want to pick a methodology for your application that will cover 80%+ of your use cases and realize the remainder will need to do something different to be most effective. This can vary by project, smaller projects or self contained applications can be far closer to the 100% mark on the chosen methodology than a complex project with multiple (and sometimes conflicting) business requirements and reliance on multiple technologies and back end systems to operate. 
from time to time I can be. Other days I'm just a jerk ;-) Glad I can help. 
You can also develop on Android using .net, a mono port is in development.
You might also see if a .NET User Group or [ALT.NET community](http://altnetpedia.com/Groups.ashx) meets in your area. There are also some online groups for both that welcome newcomers. The groups can be hit or miss though. I've been to some interesting discussions and some that are essentially marketing material for &lt;insert MS product here&gt;.
EF3? There was EF 1.0 then EF 4.0. I don't remember anything in between except fucking nightmares.
Go with Apress Accelerated C# 2010 or the massive Pro C# 2010 and the .Net library 4.0 (also Apress and the better of the two IMO). http://www.amazon.com/Pro-2010-NET-Platform-Fifth/dp/1430225491/ref=sr_1_1?ie=UTF8&amp;s=books&amp;qid=1287781526&amp;sr=8-1
Plus it's so easy to return pages results using the .Take(*X*) and .Skip(*Y*) commands.
Spot on. I'll add that WPF is a much more modern replacement of the still-alive WinForms UI framework. It allows composing controls easily and very HTML-ish like, supports a rich system of templating, UI triggers based on data and events. It basically allows you to implement MVC/MVVM patterns for Windows apps. It's the framework that gave me the most effort to master but in the end I was very happy with the result: a rich interface with 0 lines of code (but lots of XAML, the XML structure that you use to define a UI) and all my code in a separate, independent, testable class. The binding model is incredibly powerful but not easy to master. PS: I have been using EF for over a year. After I have overcome some of it's limitations, I have grown to love it. It's far from perfect and really needs to mature but I have none of the performance nightmare scenarios everybody seems to be having. Either I'm lucky or people are using it wrong.
For AJAX functionality, ASP.Net MVC is great at exposing JSON REST services. They are just actions in a controller but instead of returning a HTML view, they return POCOs that gets serialized into JSON (or an RSS feed or whatever else you write a serializer for).
I don't know what the first book you read on .net should be, but the *second* book you read should be *CLR via C#*. It goes into a lot of the stuff that is going on "under the hood" that should be very useful - maybe not right away, but it is good background knowledge to have. You can look on amazon to read the table of contents to see what topics are covered.
Yeah, I've had that happen a few times as well. Basically, all the docked windows will "pop out" or become undocked and float. It did seem to occur after running a debug session. It hasn't happened to me for a while. I think it may happened concurrently with unhanded exceptions in the application I was working with. Are you using Resharper? We've also been experiencing extended periods of VS freezing. It will sometimes freeze while opening the code or designer for up to a minute or two. It appears to be Resharper inspecting the code for hints and errors. 
Boring. If you write your WCF interface correctly, the code to expose it as REST isn't very different than the code for exposing as SOAP, TCP, or MSMQ. 
Since no one asked, what kind of work do you want to do? If you are web developer my answer is going to be very different than it would be for a Windows GUI developer or back-office app develoepr.
Now that you mention it, i remember that there's actually a decent user group in my country.
I know more about who I will be working for (small to medium businesses that need integration and custom apps. Few users, lots of data). I expect lots of little web apps, some desktop apps, some DB work and plenty of data shuffling. Not very glorious, but useful.
&gt; For that, there's no better book than C# In Depth Well, the Amazon reviews seem to agree with you :)
Thanks.
Sounds like my job. For web apps, ASP.NET is probably your best bet if you don't know JavaScript. You can pick up the easy stuff fairly fast and you can build sites a page at a time. ASP.NET MVC requires a lot more up-front planning than you probably want to do for a "little web app". That said, ASP.NET MVC is better for your long-term career or if you already consider yourself to be a highly skilled web developer. For desktop apps, same story. While WPF is better for your career, WinForms is much, much easier to learn and thus more suitable to "get it done now" applications. For data shuffling you will want to learn about WCF and the new multu-threading tools in .NET 4.0 (Parallel LINQ, Threading.Tasks, Threading.Parallel, and Collections.Concurrent). There are no trade-offs here, all this stuff is easy to learn, immediately useful, and cutting edge. 
WinForms is dead. Microsoft has no intention of doing any enchancements for it and even serious "crash you app" bugs have been ignored for years.
For books you really should start with "Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries (2nd Edition)". This book has the design rules that Microsoft follows when creating .NET libraries and lots of commentary on why the rules exist and what parts of .NET they screwed up on. If you have the expensive version of Visual Studio (or the free program FXCop), it will actually enforce many of these rules for you. http://www.amazon.com/Framework-Design-Guidelines-Conventions-Libraries/dp/0321545613/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1287831446&amp;sr=1-1
Thanks.
http://sankarsan.wordpress.com/2010/10/23/entity-framework-ctp-4-0-many-to-many-mappings/ :\
And not a tear will be shed. I have curses WinForms so many times. Just opening a form with the designer, not touching anything and closing it would mess things up. Having a designer which was basically a code generator was a bad, bad idea. Having XAML as an intermediary for design purposes before generating code is a much better approach. And yet on a monthly basis I have to explain to clients not to start WinForm clients as it's dead, never going to get any enhancements and will eventually no longer be supported by Visual Studio. The problem is that Microsoft brings out the trumpets to announce new products but when it decides to kill off old ones, it just does it with little or not announcements.
If I can keep everything in the same language (c#), I won't have to keep switching my mindset as I go between projects. That would be awesome.
If you don't mind /unsafe when compiling, you can do the same pointer tricks in C# as you can in C and C++. Of course, on the flipside, once you go down that path, you'll find yourself having to define structure layouts and pin objects to prevent the runtime from moving them, so you lose most managed code benefits. Why not use C++/CLI and C# together? 
Using an unsafe block you can do the same memory manipulation techniques you'd use in C. But I don't know if that is even required. Managed C# is still very fast. 
Yeah, C++/CLI is a great. We moved just about all of our low-level stuff to it.
You may find Memory Mapped Files to be of use. http://blogs.msdn.com/b/salvapatuel/archive/2009/06/08/working-with-memory-mapped-files-in-net-4.aspx?wa=wsignin1.0 
Are you doing this for fun? Because if you actually need something like this, just use SQLite. If you're doing it for fun or to learn C#, then just give it a go. You'll mostly be IO-bound anyways. The main pitfall you'll run into is memory, as a GCed program pretty much necessarily has a larger heap. That said, there's a lot you can do to keep your memory usage low and constant in .Net.
I will look into it C++/CLI. THanks
Mostly for fun. I first thought of it because of something that came up at work though. I'd probably have to end up using a commercial version of some DB because of licensing issues though. Plus, I need a very small subset of any DB and I'm not sure using a DB will be the best performing option(considering disk space &amp; speed ) for this. 
yes, Sqlite with Entity Framework - it will be easy, and you will get some good hands on experience with Entity Framework.
For the record, SQLite doesn't have an open source license; it is public domain.
All in all, another good release of visual studio. My (minor) complaints - 1. Context menu scrollbars even when there is enough screen 2. Why blue, and why did they hard code it? 3. In the older VS versions, intellisense didn't always work and had a lossy feel to it. In this version it seems to always work and feels lossless, but also seems much slower. 
[Scrollbar Issue Hotfix](http://blogs.msdn.com/b/visualstudio/archive/2010/10/14/hotfixes-available-for-scrolling-context-menu-problem.aspx)