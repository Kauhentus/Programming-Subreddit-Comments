* Visual Studio * Resharper * LINQ * Rx * TPL more specifically async/await. * such easy interop with F# or un-managed code. Hell I'll throw in a cheaky one here. You can use VB.Net when you've got to do a bunch of XML crap on XML, the kind of thing where the 'API Guy' didn't make a remotely consistent API. You can include XML litterals and use LINQ, neato!
I'm and "old" developer and I'm starting to get displeased with Microsoft. I've been programming professionally for 17 years. I started out in the UNIX world and migrated to Windows. I started with Visual Basic 5. I fell in love with it pretty quickly. They drastically simplified the process of making Window based applications. Their event model was simple to understand and powerful enough for most applications. Their IDE was powerful and intuitive. I migrated from VB to C# and fell in love with it. It retained all the good things about fast VB development, but added all the lower level complexity of C++ development as optional. Lately though I've been upset at their migration from WinForms to WPF, ADO.NET to EntityFramework, and the Windows 8 Start menu and Store. They are changing too much too fast and it's going to fail. 
No, I assume they are in the second group. They don't use .net but they don't hate it either. And what breaking changes?
&gt; MS can make any changes it wants to its tools and libraries at will which can break your code and cause more work for you This is really unfair. The language team at MS has really gone the extra mile at times to prevent breaking changes and has even delayed or avoided new features because of it. I can't think of even one time where I've had to rewrite something due to a breaking change in .NET and I've been using it since version 1. But the few times I've had to do Java development, every single time it's been a challenge to get jar files compiled because some library was not compatible or not the right version. Java is much worse in this respect. The reality is doesn't even remotely resemble your argument, and is often quite the opposite. 
&gt; What I don't understand is why new developers act the same way. I know why people start developing in Java, PHP, and all these other programming languages, because it's free. But when it comes down to business, I don't think they're better (.NET is free too.) But I think it's just a fashion-like thing: the new developer wants to be in the new movements, the new communities, not in the communities where the old fossils like me live. It's understandable though, as most people will be somewhat new to the technology of that community instead of communities like C, Java, .NET where a lot of people have a lot of experience and a newbie has a lot of hard work to do to stick out of the crowd in a good way. I'm not concerned anymore btw. If a new developer thinks s/he's better of in a new community around a new technology like Node, suit yourself and more power to you. There's then more work left for people who know what they're doing and thus the work that needs to get done is done by more experienced developers instead of newbies who _think_ they're great coders but in reality suck in every way possible. 
Delegates, LINQ, and I know everyone doesn't agree on this one, but type inference. Of course all dynamic languages have it but I think it makes c# much easier to read over java. edit: I should have worded this differently. Because dynamic languages don't have type checking, they of course naturally don't have to declare types. However, for static languages, I think it is a really nice feature that others don't have.
.NET platform is free, and tooling is available for free for startups. http://www.microsoft.com/bizspark/
I'm curious about this, too. Perhaps the switch from .NET 1 to 2? (I started on 2, and haven't come across any breaking changes while upgrading)
Wow very well put!!
&gt; *edit: wow, crucify me for asking a question. Saw this cross posted in r/all sheesh* You aren't being crucified you fucking baby, you're getting the answer you asked for. How the fuck that turned you into a martyr, I don't know.
You missed the part where i had a score of -6 for asking a legitimate question.
I think the big problem is the cost of Visual Studio too. Combined with .NET Visual Studio is an absolute beast, especially with the right mix of plugins. However, you need to dish out at minimum $700+ for the edition that has any sort of decent extensibility support. Although with VS Online, they seem to be getting a nice entry point. And if Xamarin rumors are true, one would be hard pressed to find a solution better than Visual Studio
It is my educated opinion that Eclipse is slow, ugly and counter-intuitive.
Ah yes, you're right. How would you differentiate between a test that hits the database (or other services) and one that doesn't? Is there any terminology for this? Is it just a unit test and a "bigger unit but not quite end to end or integration test"?
Not *any* developer would switch to .NET for this, but we have basically the only production-grade functional programming language out there. Haskell and Standard ML have terrible tooling, Ocaml has terrible documentation, etc. You can do nice things with those, but they have nowhere near the level of support that mainstream OO languages have, while F# does.
Dynamic languages don't have type inference - hell, if you want to be pedantic about it, they don't even have *types* :)
.NET is more than just C#.
&gt; .Net is complicated/too big. This I actually sort of agree with. Knowing everything in .Net is pretty much impossible unless your last name is Skeet. LMAO that guy has superhuman memory. That's why Visual Studio is great. However, I think laguages within it's class like Java, have a similar amount of components
Eclipse probably isn't the best example of a Java IDE. IntelliJ runs circles around Eclipse, and to be honest Visual Studio is half-baked until you install ReSharper, made by the same company that develops IntelliJ.
Dynamic languages have types, they just don't have type checking. Two different concepts.
I guess from vb6 to .net
There are quite a few tools available, but Visual Studio with/without TFS is by far the easiest. I believe with Visual Studio, SLN &amp; CSPROJ are tied to Visual Studio for managing projects, not specifically for Build management. You can externalize all build procedures to a separate build system. However, that would make you do double work, unless you wriite an extension to automate it
Well I know for one, in the recent 4.0 to 4.5 change/upgrade when you installed the 4.5 framework, it had a few "hotfixes" for 4.0 as well so that if you were developing a 4.0 app for a 4.0 system that *didn't* have 4.5 installed as well, you could wind up with weird, unreproducable bugs on your production environment that worked fine locally because of the hotfixes. They have done some weird stuff like that in the past as well, but since 2.0, they really have done a much better job of making things compatible and easily upgraded to newer frameworks.
Ohhh god, Eclipse for some god awful reason always runs ridiculously slow on all my machines. Anything between an i7 8gb laptop, and a i7 16gb desktop, and aparently everyone I've talked to has same issues. Visual Studio is somewhat slow to boot at start, but once it loads even with Resharper solution-wide analysis just flies through. IntelliJ is phenomenal though, blazing fast. I don't know what JetBrains does, but their products are phenomenal
He also apparently missed the part about "Please remain civil and on-topic"
I know the WPF push, but that has been going on for a few years hasn't it? I believe it has to do more with better responsive design, I will admit that WPF apps look great compared to WinForms (no disrespect to WinForms guys :)) As far as ADO, isn't entity ADO under the covers? Win 8 store, I'll have to agree with, it's very restrictive, but you can't deny it's a great "idea" to be able to build one codebase for tablet, PC &amp; Phone
I think it has everything to do with the engines in browsers making it work faster. 
Visual Studio is getting much better, but ReSharper still pays for itself many times over. 
I was actually surprised when reading up a little bit on R that it has a base in fortran as well.
I was being facetious really. Because they are so similar in many ways, and written by the same guy apparently. C# has gotten even better over the years, plus the .NET Framework gives you access to so much. But coming from learning MS in college, and then constantly working in it, I enjoy other languages as much as possible.
If you think that is a crucifying, you should probably widen your intellectual circle to include more people that do not share the same opinions as you do. Or you should watch that Mel Gibson movie if only t to get a notion of how utterly horrible a crucifixion is.
I don't think EVERYONE uses SQL Server. Even Entity has extensions for MySQL, and Microsoft ported Redis to Windows, not to mention hundreds of others. 
Intellisense still needs work with objects living in your XAML files. Often they'll fail to update or just go missing, filing the error list and littering your code with red squiggles until you recompile.
Phillips! Robertson!!! I think it is important to take a step back an realize they are just tools. It is like arguing whether French or English is better. For certain things, like describing snow, I have no doubt that Inuit languages are probably the most efficient. But if you have to learn the entire language just to get across what is roughly "half-melted snow", you have to think about whether or not it is worth the time to learn. That said, I can understand people wanting others go buy into their language of preference, as it means it will still be in demand and their skills will be worthwhile. That said, there is also some security$ to be made in being specialized in an area where others aren't, but this isn't typical of fresh graduates, as 1 year of cobol experience is probably not going to land you a contract with a major financial institution, no matter how "good" (you think) you are.
I think it highly depends on a project, you can't discount 20+ year old proven technology. Granted it has it's downfalls, and some projects, even business/enterprise applications are a better fit for certain NoSQL DBs, it highly depends on what it is you're building and what data you have. I think it's very constricting to limit yourself to one technology, and not even consider what else is out there. THe only time this should be an option is with a hard headed customer :)
90% of my c# coding revolves around console and service apps, so my view is a little skewed. TPL. The way Microsoft made async/parallelism so damn easy to implement and manage. "Shoot, I could really use a method/property that....Oh look, they implemented that already." Linq as a secondary feature. You can argue the whole syntactic sugar aspect, but they did a darn good job with it. 
*unusable
No Unit Tests.
You are comparing building a project with building a single file. .net has command line tools to build single files too for example: csc /out:myAssembly.exe myCode.cs works the same way as your java example. 
I posted a thread for just this specific issue, and I had a lightbulb moment when [someone suggested reading the url params before checking the cookie value.](http://www.reddit.com/r/dotnet/comments/255mzm/cookies_views_and_render_order_question/che20xl?context=3) My tendency to overthink things is a constant liability. So far, checking params first and then checking the cookie is working without the issues I described, so I think I've got it. I really appreciate your help.
Complaints I saw were usually about the quality of the language. Though with ECMA 6, TS/CS and stuff many problems people had were probably alleviated. Plus new bloods that grew up with those "features".
Ya, I learned javascipt back in the days when netscape was fighting with the original IE (you want to talk about web standards... my god that was a tough time haha...) I had my intro to Java Script and never really recovered from the frustration from those days. The browsers having better JavaScript engines is my understanding having attended a few mobile developer conferences where they talk about web apps a bit to those of us not as web inclined. Getting onto all this web stuff has been a todo for years, and I even took a PHP course which was a non starter. I think I need to think up a project to get excited about to getting going on javascript again.
I'm suprised there is no mention of katana.
I don't understand why I'd want my runtime to build as a nuget package. Help me out please?
This is a great programme - got my company off to a good start - now $1m+ turnover with no investors and no debt. The entry requirements are not too stringent and Visual Studio 2013 is the best IDE out there. The "graduation" process is painless too - after a number of years, you get to keep all the licenses you got essentially for free. Yes, it's an onboarding programme ("go on, the first one's free"), and Microsoft hope they'll have you for life, but if you are a software dev coming straight out of University, this is an excellent way to set up your first business. I am very grateful to Microsoft for setting up this programme - it gave my business the initial boost it needed. Yes, I whinge about Microsoft's mistakes on Reddit, but I applaud their successes too. BizSpark? Big success.
..unless you are a consultant or have a revenue of &gt;1mill or your company is &gt;5 years old. In any case, the program is terminated after 3 years and you are locked in with expensive technology ([section 8.9](https://www.google.no/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=2&amp;cad=rja&amp;uact=8&amp;ved=0CDEQFjAB&amp;url=http%3A%2F%2Fwww.microsoft.com%2Fbizspark%2Fshowitem.aspx%3FLocalizedItemId%3D11592&amp;ei=NCBxU4vmFozZygOWjoG4Bg&amp;usg=AFQjCNG3qBiELIPaw5IGern4ZfMpgrNljw&amp;sig2=nkr6HzQJLhJcZqSBIXmowQ&amp;bvm=bv.66330100,d.bGQ)). I'm not critizising the offer itself, but this **not** _free_ as LAMP is _free_. 
Well, technically you're correct. However, if you have that much revenue and/or longevity I don't think the cost of developer tools and server licenses are your biggest monetary concern any more. If they are, maybe you should rethink your business model. 
https://31.media.tumblr.com/fc73c134f49433879e8b1f73f380cf42/tumblr_inline_n0hs1roiKF1s3cs22.gif
What about hosting? MVC, SQL server etc.
Throw a race condition at him and watch him have a mental breakdown.
Meh, I just thought labeling himself a martyr over a couple downvotes was ridiculously melodramatic.
If you host a repo that's reachable by your servers, app installation becomes a whole lot easier - you pull it, it configures for your environment and all your dependencies resolve.
Thank you for explaining in a nutshell why the state of open source in .Net is kind of dire.
This is something I've come to learn after a few solid months in .NET. Visual Studio is hands down the nicest IDE ever made. I came to the environment hating IDE's and static typing, but C# and Visual Studio honestly couldn't have done a better job showing me the appeal. I'm still a text editor and dynamic language kind of guy, but I get it. Even still, the elephant in the room will always be the complete complete lack of flexibility. Want to develop using something other than Windows? You can't. Rather use Vim than Visual Studio? You can't. Sick of NuGet? Tough. Flexibility can definitely be dangerous, but there are developers out there who will always struggle with the rigidity imposed by the .NET stack. Mono, Roslyn, Git support in TFS...the list goes on and on. The times are changing for the better, but they haven't changed yet. 
[Gratis vs Libre](http://en.wikipedia.org/wiki/Gratis_versus_libre). This is still very important to some.
You get Azure creds
It is the same thing as OWIN and is so central to this that there isn't really any reason to name it specifically.
I find Intellisense in VS2013 bugs out too unfortunately. I was hoping they would have fixed it up in update 2 but I can't see it mentioned. Every once in a while it just stops working, usually fixed by a restart.
The D programming language has something called Uniform Function Call Syntax (UFCS), which allows any method or function to be called however you please as long as: 1. The method has at least 1 argument. 2. The type of the first argument matches the object it's being used on. It behaves similarly to extension methods (without the need for a static method/class and the 'this' keyword on the first param). Example (D): int times( int n, int x ) { return n * x; } int a = times( 5, 2 ); //OK. a = 10; int b = 5.times( 2 ); //OK. b = 10; float c = 5.2.times( 2 ); //Error, float has no property 'times' UFCS is a bit more complicated than that, but that's the basic gist of it.
Now this is the platform we always wanted and until recently, never thought we'd have. After go live with all of these features, c# and the .net framework will be hard to beat as a full featured, run on most devices platform. Exciting times ahead.
And I bet you ended up with a better paid job or at least a "nicer" job? 
&gt; WinForms to WPF Both of these are supported technologies and in fact a recent bug fix relating WinForms and maybe WPF too with high DPI screens was released along with .NET 4.5.2
What does this have to do with open source? I don't get it. 
Storytime?
~$150/mo
That's one of the biggest impediments to advancing the field of quality assurance. We don't really have the terminology needed to have a conversation.
We have a Cobol guy that we are trying to get onto c# and he does this. Drives me nuts, I just hit f5. He builds, copies files manually to a different machine using rdp, then runs and uses msgbox in a catch to debug. Everything he does is wrapped in a try catch. There are not enough drugs in the world.
To add on to what you said, a couple of deployment servers support nuget packages now. We've tested a couple and it's definitely simpler overall to set up and get deployments working. We've been testing this out at work along with embedding nuget into our apps for plugins (surprisingly easier than I would have thought).
Hopefully you had an answer to that for those implementations.
Do any of the developers in your example groups who hate C# use VB?
You say that like it's a bad thing. Having Azure means you don't need a full time sysadmin. That $150 of credit is like a $70,000 employee + stock options you don't have to dole out.
Well considering the recent actions MS has taken (DotNet Foundation, Project Roslyn, and etc...) it does seem they want to stat moving to other platforms other than Windows
The first Ruby entrepreneurs / contractors showed up at the same time as the Web 2.0 term became popular. I was to hipster to look at it at the time. In the years since I've seen some great sites and systems that have been built with Ruby. So I'm glad they've survived the initial hype. 
Isn't it called mocking vs live-snapshot testing?
I was blown away reading all this. They get it. They really do. 
It's very difficult to google conference conversations when you need to fix a problem fast :)
Haskell's type classes are close enough.
So my background is in telecoms - it's 2008 and I've worked for a few big carriers in R&amp;D. The crash comes and like many others, I'm made redundant. Up to this point, I'm a big VIM/LAMP fan, a bit of Perl etc. I never liked Eclipse, but used it where necessary. I decide to set up my own business while I look for a job. $50 to incorporate is all the investment I need (I will be using my own desktop to develop) and immediately my company gets a gig working on the MS stack. "Great... MSDN license fee (sad face)" I think. "No! BizSpark!" I discover. Essentially a free MSDN license for startup businesses. Well, I've never been so productive. I'm using Visual Studio, SQL Server, ASP.NET, REST, but the BIG revelation is C#. GOOD GOD this is a nice language. So I pick up more and more work and eventually have to start hiring staff to pick up some of the load. I Google for local contractors, steal friends from their current companies and eventually start employing. Ticketing uses Atlassian Jira. We customise the default workflow. It is only at this point that I discover JetBrains Resharper. Now, this is like a turbocharger. The "green light" mantra kicks in - every code file must have a Resharper green light. Code quality improves, the testers are rejecting fewer tickets in the "Testing" state. Hmmm - builds are becoming a problem. TeamCity is the answer. Press a button and out spits the CUE. So 6 years later and everything is awesome. Yes, I have to pay for MDSN licenses now, but even despite Windows 8's craziness, Microsoft are the good guys all of a sudden. They've got their developer relations fixed, I'm looking C#, in a convertible with the roof open sourced and Roslyn driving. The End --- OK - so no road is that smooth. There were bumps along the way, but if you're looking to set up your own business, BizSpark is THE way to go.
What's not production-grade about Scala?
F# *is* .Net
Isn't adding methods to objects (from anywhere not inside the object's class definition) the entire goal of extension methods? Or is there a use case I'm not aware of?
I sure hope so! I was really excited about Silverlight back in the ~3.0 days. But they never really focused on the cross-platform side of it. I'm excited about their recent actions, but it's a cautious optimism.
use [bootstrap](http://getbootstrap.com/getting-started/). No need for a separate url.
This is some great stuff. Good job .NET core and ASP.NET teams!
Not a troll, I swear: EF may be good from the programmer's end, but it's probably the worst performing ORM out there. We were using it in a relatively small product and ended up having to rip it out due to performance reasons. Now we either use straight SQL or Dapper.
It's gotten a lot better on performance. For a lot of operations, EF6 is close to SQL on performance. It definitely has its weak points. 
Unless you add it to the protoype, no? That's what I initially meant. But good point on the public access.
Yes. If you have to pay for an upgrade, not really though.
In most cases, probably not worth the cost or hassle. Kinda depends largely on what you actually do though. If you want to take advantage of the new Windows Phone 8.1 and Windows store dev platforms, you need VS2013 but in most other respects there are mostly relatively minor incremental improvements.
It's worth it just for edit and continue debugging in x64.
I've committed to Ruby, Python and Java projects in my free time, because first-class developer tools are free free. The web apps that I've developed on my own have not been in C#, despite the fact that I'm so much more comfortable in that than anything else (because no, I do not have a business model and no, I am not interested in lying about having one). I've only contributed to C# projects on the work dime, and it was enough of a pain in the ass getting sign-offs from manager types that I'm not about to try that again. I know that VS.Net Express is free (and it's bundled with NuGet, which is cool), but I miss enough niceties from the for-pay version of VS.Net (not to mention R#) that I can't be bothered to look at C# code outside of work.
First thing that got disabled in our team, slows things down quite fast. Re# does a good job for these things too.
How about you install [VS 2013 using Chocolatey](http://chocolatey.org/packages/VisualStudio2013Ultimate) in a VM and give it a go. `C:\&gt; cinst VisualStudio2013Ultimate` 
Because we're getting teached WebForms at school and that it's too difficult so everyone in my class rather wants PHP. Wished they skipped the abomination called WebForms and directly started with MVC.
My company won't fork out for Re#.
Oh, I'm sorry for you. The first thing I pushed when I joined my current company.
Chocolatey, what a stupid name.
You don't represent the state of open source for .NET. As of today, there are over 130,000 github projects in C#. https://github.com/search?q=language%3AC%23&amp;ref=simplesearch Some of the best .NET programming libraries and VS extensions are open source projects. 
Why? 
As ciaran036 said, if you're a windows phone, etc. dev then upgrade. If you're a web dev, it didn't add too much really. The next couple of versions look like they're going to add more on that front. At least based on comments that Mads Kristensen has been making.
I think I am going to let the water settle a bit before diving in. I am interested in the idea of it, but as with most things adding this into or daily toolbox is a long way off.
Get a personal copy, it's only like a hundred bucks
I've never used it. What are the benefits at a glance?
I'll give it a shot when it supports console apps. Honestly metro first approach was weird. Sure they need max perf on devices, but if you want devs to learn your new tools - start with toy examples. 
Here is how you could do it without recursion or repeated enumeration of the list: public static List&lt;Folder&gt; NestList(this List&lt;Folder&gt; list) { var nestedList = new List&lt;Folder&gt;(); var folders = new Dictionary&lt;int, Folder&gt;(); //unrolling multiple enumerations of the same dataset //you shouldn't enumerate the same object repeatedly if you don't need to foreach (var folder in list.OrderBy(p=&gt;p.ParentId??0).ThenBy(p=&gt;p.Id)) { //list.ToDictionary(k=&gt;k.Id) folders[folder.Id] = folder; if (folder.ParentId == null) { //root case, set folder level to 0 folder.Level = 0; //list.Where(f=&gt;f.ParentId == null).ToList() nestedList.Add(folder); continue; } var parentId = (int)folder.ParentId; //Due to the orderby clause we can ensure that parents are always processed before children if (!folders.ContainsKey(parentId)) { throw new Exception("list contains child folders with references to parents that do not exist"); } var parent = folders[parentId]; //nested case, set folder level to parent+1 folder.Level = parent.Level + 1; //ensure childrent set is correct if (parent.Children != null) { parent.Children.Add(folder); } else { parent.Children = new List&lt;Folder&gt; {folder}; } } return nestedList; } 
You can actually install it on the same machine as VS 2012 without it breaking anything.
Just go watch the videos www.jetbrains.com/resharper/, I almost guarantee you up and buy it. It's really THE thing that makes .net dev awesome. Visual studio is really nice too but paired with resharper it's an unstoppable experience 
Because I can't say how much he would value the new features, how much disposable income he has etc.
This is a little different in that every leaf in this list has children==null whereas in the OP version at the top level the children property of folder objects with no children are empty lists. It is also much faster for lists with more than a couple thousand elements: static void Main(string[] args) { //setup some test data var list = GetList(); var sw = new Stopwatch(); sw.Start(); var l1 = list.NestList(); //original sw.Stop(); Console.WriteLine("Elapsed={0}", sw.Elapsed); var list2 = GetList(); sw = new Stopwatch(); sw.Start(); var l2 = list2.NestList2(); //renamed function above sw.Stop(); Console.WriteLine("Elapsed={0}", sw.Elapsed); if (Equal(l1, l2)) { Console.Write("good"); } else { Console.Write("bad"); } Console.ReadKey(); } static bool Equal(List&lt;Folder&gt; l1, List&lt;Folder&gt; l2) { if (l1 == null || l1.Count==0) { if (l2 == null || l2.Count==0) { return true; } return false; } if (l2 == null || l2.Count==0) { return false; } return l1.Zip(l2, (f1, f2) =&gt; f1.Name == f2.Name &amp;&amp; f1.Level == f2.Level &amp;&amp; Equal(f1.Children, f2.Children)).All(b =&gt; b); } static List&lt;Folder&gt; GetList() { return Enumerable.Range(1, 10000).Select(f =&gt; new Folder { Id = f, Name = string.Format("{0}", f), ParentId = (f % 7 == 0 || f == 1) ? (int?)null : f / 2 }).ToList(); }
Are you referring to the EF generated class? If I do that won't it just get overwritten the next time I update the model from the database?
No, your tbl_spm_period.metadata.cs file needs to be in the same namespace as your EF generated Models or your metadata won't be applied. Once you've added that and your get;set; as yarsiemanym pointed out, you should be good to go
Maybe to some people, but not enough to make it stick.
Well, today I've just finished a project that uses MS SQL, this is typical enterpricy, legacy, messy solution. Meanwhile I was working on a project with RavenDB and that made me think that document stores are the default option anytime DDD is used (of course default doesn't mean the only valid, just... first to consider). I'm also at the beginning of a big, private project that will use several different DBs in diffeent bounded context - Neo4j, git (yes, git as a database), and some document store again. Or maybe SQL, but that part will be just a supporting domain anyways.
For anyone that cares, it looks like strong naming is no more in ASP.NET vNext. See here: http://davidfowl.com/asp-net-vnext/
I'm assuming you have either windows or forms authentication set up. You can restrict access to folders in the web.config. Restrict access to the folder so only certain users may have access. In the web.config: &lt;location path="[path to folder]"&gt; &lt;authorization&gt; &lt;allow users="[username]"/&gt; or &lt;allow roles="[role name]"/&gt; &lt;deny users="*"/&gt; &lt;/authorization&gt; &lt;/location&gt;
&gt;I'm assuming you have either windows or forms authentication set up I do not. All users as well as their security rights are stored in a sql table. So only users that have certain security right can view certain records. So user Susan can see record id 26, but can't see 55. But both 26.pdf and 55.pdf are stored in the same folder. 
How are your users logging in?
I have a login page (login.aspx). When they click a button, the code behind looks at the sql table, makes sure the password matches, and if it does, then the user can go to another aspx page. Every aspx page makes sure that the user has proper credentials or the user gets bounced back to the login page. So all aspx pages are secured. 
If you put all the files into a folder that no user has access to, you should be able to check the user against your table to see if they have access to the file then write it into the response stream. http://stackoverflow.com/questions/4088962/net-mvc-fileresult-equivalent-in-web-forms 
Isn't this for MVC only? I have webforms. EDIT: Reading comprehension issues. Thanks for the link. I will study it.
ontario canada schools are teaching MVC first as of last year including WebAPI in the Web Services classes 
that can easily be said about many other languages/frameworks as well, java comes to mind, many of the php frameworks out there are pretty big too ie Zend
But they'll pony up for Ultimate? Makes sense.
So you want to combine login info with roles in one table?
If not just use built in Identity, it generates a user info table, and a role table, plus you can extend as much as you wish
Exactly. Some of us work for companies where you had to get an Act of Congress just to buy 1 license for a $300 software. Mind you, this is a Fortune 500 company, in the finance/banking sector.
That's is a nice use of the dictionary there but seems to need to be able to process parents before children. What if that isn't possible? What if parents have higher id's then there children. For example if we allow moving nodes around. Also what about if we are using non-sequential GUIDs as Id's? 
How are you defining the roles? If by ID, you could reference it through a database-duplicated enum to have structurally sound code, but it will be detached logically from the database that way. An alternative would be to use flags (e.g. 0x0001, 0x0002, 0x0004) - they can be stored as ints, and you can use a somewhat flexible data structure for it (e.g. a Site table with a FlagsRequired column that sets one of the flags). Code wise you can do a bitwise AND over it and see if it returns true - which can be useful for non-hardcoded pages with flexible permission requirements. Example code: if (user.PermissionFlags &amp; page.FlagsRequired == page.FlagsRequired) { //do stuff } Notice it's a bitwise AND and not a boolean AND. You can't do an equal-to operator between the two, because it will return false when the user has more permissions than necessary. If you are doing this through ASP.NET, you can save the user in the Session. I haven't done cookie reauthentication before, so I don't know how to do that "right". If you are doing it in a simple program, you can have an instance of the user class in the main class, that can be referred to by the rest of the code.
Yeah but it's only for one version. I had a personal copy and a small time later a news version came out and I couldn't use the key anymore.
More interested in the cloud-optimized and deployable .net stuff. I don't have anything to gain from the native compilation.
The html editor is completely new in 2013 and web essentials is only forging ahead on 2013
Basically, the prototype is the class blueprint. So giving it to one object's prototype gives it to all objects of that class type.
Aha, thanks :)
Agreed. It is a nice tool with a stupid name.
Being able to order the incoming data such that parents are always before their children allows for some cute optimizations that I used here but it is entirely unnecessary: public static List&lt;Folder&gt; NestList(this List&lt;Folder&gt; list) { var nestedList = new List&lt;Folder&gt;(); var folders = new Dictionary&lt;int, Folder&gt;(); var childSets = new Dictionary&lt;int, List&lt;Folder&gt;&gt;(); //unrolling multiple enumerations of the same dataset //you shouldn't enumerate the same object repeatedly if you don't need to foreach (var folder in list) { //list.ToDictionary(k=&gt;k.Id) folders[folder.Id] = folder; if (folder.ParentId == null) { //root case, set folder level to 0 folder.Level = 0; //list.Where(f=&gt;f.ParentId == null).ToList() nestedList.Add(folder); continue; } //using childSets dictionary allows simplification of case where parent folder hasn't been crossed yet var parentId = (int)folder.ParentId; List&lt;Folder&gt; siblingList; childSets.TryGetValue(parentId, out siblingList); siblingList = siblingList ?? new List&lt;Folder&gt;(); siblingList.Add(folder); childSets[parentId] = siblingList; } //breadth first search guaranteeing parent level is set var queue = new Queue&lt;Folder&gt;(nestedList); while (queue.Count&gt;0) { var folder = queue.Dequeue(); if (childSets.ContainsKey(folder.Id)) { var children = childSets[folder.Id]; folder.Children = children; foreach (var child in children) { queue.Enqueue(child); } } if (folder.ParentId != null) { folder.Level = folders[(int)folder.ParentId].Level + 1; } } return nestedList; } This version is unable to discover orphaned folders, but that could be added with an additional loop (in extension method form here): ... if (childSets.Any(pair =&gt; pair.Value.First().Level == 0)) { throw new Exception("list contains child folders with references to parents that do not exist"); } return nestedList; }
It works. Thank you. There are issues with latency which I expected. I am using BinaryWrite, but it takes time to convert the file to memory stream. This is preferable because the browser automatically renders a PDF out of it. WriteFile is faster, but it prompts the user to either download or use Acrobat to view it. I guess the user will have to pick the poison? Yes I am in the process of studying MVC, but the existing app was written in webforms over 10 years ago. 
As I said below, it works, but the conversion to byte[] takes time. Here is what the code looks like. Is there a way to stream this, so the browser does not have to wait until the conversion is done? Response.ContentType = "Application/pdf"; var bytes = convertToBytes(dir + fileName); Response.BinaryWrite(bytes); Response.End(); EDIT: When I say "stream," I mean sending the stream in chunks, not all at the same time, so the browser has the first few pages open as the rest is being sent.
Hack with it :) It can support console apps! The issue is around the preview having static coded instructions only to look at projects with Win Store Guids. Remove that using Reflexil and bam :)
That's a pretty silly statement. R# makes you more efficient (when you have the keyboard shortcuts memorized) by automating lots of really mundane tasks (code generation, file generation, file cleanup, etc), and it identifies potentially incorrect aspects of your code (unreachable code, multiple enumerations of IEnumerable, etc). Those are just two examples and there's many more. If you're in any way serious about development in .NET then R# more than pays for itself. 
Your license is valid for the major release version you bought it for. So I assume you bought a 7.x license then 8.x came out a short time later. I haven't found a real compelling reason to upgrade to 8.x yet though.
I hope it doesn't suck like the current version. It is orders of magnitude slower than ADO.NET for basic data loading.
Any videos of it out yet?
I ended up purchasing a personal license....one year they had a really great deal around xmas time I had to pull the trigger. 
I am a bit interested in vnext. The asp.net update. 
Me too! The end of the world Mayan calendar sale. I got a ton of stuff then
fuck yes... the amount of new stuff especially the new web tooling is definately worth it 
depends what kind of projects you're working on. I haven't used visual studio 2012 since i started doing a lot of azure work but, the toolset for 2013 works quite well for this. Yeah it has some nice features but i'm not blown away by them or maybe they've just become so ingrained in my day-to-day i forgot 2012 didn't have them. Sometimes i forget which features are visual studio native or an add-on/extensions.
Maybe said company is a Bizspark partner/member/start-up. :o
30-day trial you can download. Overall, I like it. It makes some suggestions about my code to improve (for me, most of the time). It also has some neat inspection options to /u/yumz's comment below sums it up nicely. &gt; R# makes you more efficient (when you have the keyboard shortcuts memorized) by automating lots of really mundane tasks (code generation, file generation, file cleanup, etc), and it identifies potentially incorrect aspects of your code (unreachable code, multiple enumerations of IEnumerable, etc). Those are just two examples and there's many more. If you're in any way serious about development in .NET then R# more than pays for itself. 
Get everyone to jump into the chats on Jabbr! https://jabbr.net
I doubt advanced features like compiling expression trees or codegen will work. Will check it out though.
It really was a bit of a let down. I had had resharper through the companies I worked for. Then I won a personal license and it took so long to arrive I had like one month left before v8 came out. v7 also doesn't support vs 2013 which I use now so I'm without again. 
I did get it, got it like a few days before the new version was announced. Ok, to be fair I won the license but I couldn't enjoy it long. And if I had paid for it, I wouldn't be very happy. 
Contact reps from Microsoft to ask then to take an interest and get involved in this sub reddit. They could do giveaways, AMAs with people like Hansleman (not sure I spelt that right), you get the idea.
That's in the ultimate version, right? I can't find it in the Professional edition.
Re# is what slows things down really fast...
I work for a Microsoft gold partner. We get full MSDN sub's.
Yeah I work for a fortune 500 company. People think they throw money about, but it's the complete opposite of that.
Me neither.
Of course some of the advanced features arent even available for the Win 8 Store app native compilation so just sit pretty. Check out some of the vnext stuff
If you are comfortable with .net you should try something like nancy. Using .net for a startup is fine. There will always be haters no matter what language/framework you use. The important thing is staying productive and shipping features.
You could take this further and create a bootstrap script and a vagrant file to spin up a Linux machine with the mono/nginx combo. If you really want to get cooking use chef provisioning with vagrant.
Let's see * make .NET OSS * MS needs to be more open and transparent * provide a program for startups to use MS Stack for free * keep adding new features to Azure * change people's preconceptions about MS MS has been doing quite a lot on the first four points, but only last one really matters. Not really sure if much can be done about it till next generation of devs are introduced to MS technology stack, but we will keep on trying!
JabbR is for chatting but dot net devs hang out there :) We log in each day and leave a tab open and just pop in and out. It uses SignalR
Security senses tingling. Jeff Goldblum taught me to consider whether or not I should do something before figuring out of I can. What data is being served to whom over http?
This should help: http://www.iis.net/learn/extensions/url-rewrite-module/importing-apache-modrewrite-rules
Out of curiosity and not in anyway insidious - what about this is making your security senses tingle?
You see around the place irc channels with jabbr bots that link into the chat, they've been around for a while now!
Look at bizspark to power your startup. Three years free azure hosting and software
Thanks. I ended up finding the same link earlier. 
If I'm handling the session cookie over http, an attacker could capture that and impersonate my user. If I'm sending an image that only appears on one page, an attacker can analyze how often that page is viewed and learn something about the user that way. It is considerably easier to modify js files sent over http without raising any flags.
This is not what you think it is 
Since it's for Metro I'm not interested a bit.
Actually your 3rd point is what really matters. Unfortunately, MS will never make windows server licensing fees free so to ever host your .NET in production you're a slave to that licensing (not to mention licenses for Windows workstation OS's, VS, SQL Server, etc). Ruby, python, Java, Scala, Node.js, all run on free stable production ready platforms. The financial barrier to entry is significantly smaller.
I've updated my code based on what you posted and it's still not working. In the EF generated file (SpreadMasterModel.edmx --&gt; SpreadMasterModel.tt --&gt; tbl_spm_period.cs) I have: public partial class tbl_spm_periods { public System.Guid PeriodID { get; set; } public short PeriodNo { get; set; } ... } In my annotation class (Models --&gt; MetaDataClasses --&gt; tbl_spm_period.metadata.cs) I have: namespace SpreadMaster { [MetadataType(typeof(tbl_spm_period))] public partial class tbl_spm_period { [Display(Name="Period #")] public short PeriodNo {get; set;} ... } } Also, I added the namespace System.ComponentModel.DataAnnotations. Thanks for your help.
Yeah, but it's not a huge barrier. You can get .NET hosting for under $10/month with unlimited SQL.
Their support is really awesome, if you bought it right before the new version came out you should have emailed them, they would've upgraded you for free
Django and Rails are pretty nice frameworks (and not having to shell out-of-pocket for IDEs and being able to get dirt-ass-cheap hosts is cool), but obvious caveats apply - you need to change how you think and you're losing accrued knowledge not just of the language, but the ecosystem. You'll be sinking some time in to learn how to do things the idiomatic way in the language/framework you decide to go with. Whether that's exciting or aggravating is up to you. In theory, you're not going to be handcuffing yourself to failure by choosing one or the other over Asp.Net MVC. Practice is a stickier matter.
I've tried, didn't receive an answer though. 
Try tweeting at them, they are pretty responsive that way 
At small scale I agree (although you have to pay for your workstation Windows license too don't forget). I have experience with several tech companies that have made the switch from MS after some success because they didn't want to cover licensing fees on top of the rest of their operations budget.
Ruby is not cool anymore.
Isn't that what the cloud is for?
&gt; provide a program for startups to use MS Stack for free Sooo.....bizspark? 
What does this mean for a developer of .NET?
What you've described there, and please forgive my ignorance, sounds like an argument for "everything should be https always" rather than for this specific scenario? What I mean is that applies to any connection over http, does it not?
any and everything by https://twitter.com/julielerman especially the book (http://www.amazon.com/Programming-Entity-Framework-Julia-Lerman/dp/1449312969/ref=sr_1_1?ie=UTF8&amp;qid=1400081310&amp;sr=8-1&amp;keywords=entity+framework) and her pluralsight courses official stuff is good too... http://msdn.microsoft.com/en-US/data/ef this is just ok. http://www.entityframeworktutorial.net/ 
Huh? Cloud hosting still costs money :) You can't just get a $10 account and get infinite scale of your app.
Grow the community in what way? I'm subscribed to this sub but in general I find it a bit too pro-Microsoft / anti-non-Microsoft to take without a grain of salt. When I subscribed I expected to see more things along the lines of "advanced CLR hacking" but instead I've mostly seen a lot of questions better suited for stackoverflow.com; I don't think I've ever seen this sub scoop /r/programming for any big .NET topic. So, what should make this sub stand apart from /r/programming (general, but deep discussions based on a lot of experience), /r/csharp (specific language features/questions), and stackoverflow.com (how-do-I...)? I think once you can clearly answer that, and moderate towards that, you'll see the community grow naturally.
It depends on the way that you are using web forms as to how big the jump will feel. If you used a lot of controls, drag and drop, etc. then it's a big jump. If you were already doing html by hand, separated out your logic, etc. then it's not as big of a jump. Either way it will take longer to develop just because you're not used to it. As far as "necessary", that would depend on your specs but 99% of the time it doesn't matter if you use MVC or Web Forms. I probably wouldn't make the jump myself for something mission critical and a compressed time frame for delivery. But I don't know your team or how well they handle change. We made the jump when we were building a new platform for our internal applications but it's a rolling project for us that is never truly done, so we felt safe making the change.
Ah, now I understand.
Looks to be where they are stashing the code for ASP.NET vNext, which was [just announced at TechEd](http://techcrunch.com/2014/05/12/microsoft-previews-asp-net-vnext/). It looks like there's more in-depth information on the "Home" repo in that collection, [linked here](https://github.com/aspnet/Home). One thing I *really* like is that they apparently opened up ASP.NET Identity, which up until now was closed source (although they had promised to open it). From the [repo](https://github.com/aspnet/Identity), it's unclear whether this includes the existing release version code as it only has 85 commits. I'm guessing the current ASP.NET Identity codebase would have way more than that many commits. Anyway, this is all pretty awesome new stuff. Thanks for sharing this!
They actually have a program for startups that provides all of this for free. It's called [BizSpark](http://www.microsoft.com/bizspark/). Before that it was the Empower program that cost $300.
Ruby is a good language, it's just beyond its hip days. If you want to learn something fashionable right now I would go for Rust or Go.
EF was fundamentally a bad design so I can understand rewriting it. From what I've been hearing, System.Web has quite a few sins to answer for.
Thanks so much for the input. I was going to take a week or so and create a small vanity project and see how it goes. We're very strict about separating our layers and I personally do not use the drag and drop features unless its for a quick prototype/demo on a very fast turnaround (24-48 hours from request to demo) but that is out of convenience, not reliance. I guess my relief at your answer shows what what my gut was telling me. I know MVC is considered the "proper way" to do things and that I need to step it up and evolve, but I'm leery of doing it on an MC site.
What astounds me is how simple some of the code it. Makes some of my stuff look frightening by comparison.
Programmer of 20 years here. If you're not at least a little scared of how much you don't know, you're not a good programmer. Don't worry SO much about reading X books or keeping up in Y tech (although keeping an active interest in learning is always a good thing). Mostly, just suck it up and ask what someone means if they use a term or concept you don't know about. Some people will be jerks about this, but most are glad to have someone willing to learn. Do a small project on your own to learn it if it makes you feel better. Do this repeatedly, forever. You will always feel like this, except in a decade or so there will be some wide-eyed new guy who secretly thinks you know everything. Then, answer his questions.
I felt the same when I started my first job after graduating (MEng CompSci) even though I had been programming since I was 12. (Only been working for 2.5years) Its one thing to code for yourself, another to code in a experienced team, for someone else. Lots of new things I had to get my head around 1. Build &amp; Deployment Systems (Never had to worry or thing about these) 2. Properly using Version Control (I had used VCS before but never properly for personal projects) 3. Enterprise Frameworks, like Spring, and others that I had never used Its a lot to take in, and apply best practices. I have been lucky though. In my first job, every team I worked on, I found a natural mentor who helped me massively. Especially as I moved into new languages. Main tips I have. 1. Always asks questions, you will learn more that way, question, decisions around tooling and architecture, because a lot are made out of experiences and learnt. 2. Be enthusiastic with your pipe dreams, if they are work related and your managers good, take them to them, and discuss them, they can tell you why they might be bad, or that they would like to do it, but the business priorities don't allow it (Working in banks I hear this a lot) I don't read much in the way of books, but I do have some core ones, Gang Of Four (Design Patterns) To get deeper into programming, I found writing my own compiler/interpreter to be very useful, also playing with C and assembly by writing my own basic kernel taught me alot about the computer, OSs and programming Finally read this: http://www.hanselman.com/blog/ImAPhonyAreYou.aspx
I agree with this comment completely. There is always something new to learn and so much "stuff" that can be known. It's a great field, you never really get bored! 
I agree with the others here ... The feeling you have is normal and actually a good sign. A hunger to learn is worth more than anything else. That being said, if you want to become a more complete .Net developer, take a look at the following things ( roughly in order of importance): * Read the book 'Clean Code' (you can easily find a PDF version for free through Google) * ReSharper. A good understanding of this plugin will enhance your productivity so greatly it will make your head spin. * design patterns from simple stuff like visitors and singletons to advance patterns like CQRS. * Dependency Injection frameworks (Ninject, castle Windsor, structuremap) * A unit testing and a mocking framework (I like Moq and mstest, but Rhino, nUnit, etc. are all OK too) * AutoMapper * Service layers. Start with the MS stuff: WCF and WebAPI, then take a look at ServiceStack or Nancy * If you like data layers, make sure to look at nHibernate as well. Maybe also a NoSQL database like RavenDB * Frontend javascript frameworks such as Angular, Ember, Knockout, Backbone Furthermore, it's always great to know how certain framework components are working internally. It makes it easier to use them correctly. A great learning resource (although not free) is PluralSight. Don't feel discouraged if you can't keep up with with all new developments. None of us can ... But it's important that you just have a good idea what certain frameworks and projects are for and what their strengths and weaknesses are. You can figure out the details when you have to use them... Enjoy your journey into development. It's a fantastic profession if you're the right kind of person (continuous learning is not for everyone).
I really appreciate the reply. And luckily my job pays for a full PluralSight subscription for all developers.
Thanks for the reply. Do you have any direction in regards to resources for the writing of my own compiler, etc?
Theres lots of them. https://www.google.co.uk/search?q=write+your+own+compiler
Doh. Thanks again. :)
A general thanks to everyone who has commented so far. As I mentioned previously, I'm rather fearful of large subs, and I was kind of hoping that I would be met with understanding and civility here. Alas, I was. :)
It's very hard to attract new people when most newbie questions are met with 'why would you do that', or 'that way of doing it is awful/stupid/wrong and you should feel bad.' be less dickish!
With what they have just announced with ASP.NET vNext, it seems now using Sublime or any other editor will now be a much more complete experience - K/Roslyn (am still figuring out how all the pieces fit together) will take care of the "intermediate" compilation step (performed transparently in memory). This is going to drastically lower the barrier of entry IMO.
I don't think there is a practical way to do it but merging with /r/csharp or restricting /r/csharp to c# specific things would increase the numbers. Really doubt /r/csharp would voluntarily reduce their users though.
Yes I've seen this a lot. Ant it's in every programing or developing community. I feel that is a really easy way to discourage others from getting involved and losing a new prospective community member.
Thanks! Julie seems to know much on the subject. I'll be doing a lot of reading this weekend.
I really liked this: &gt; "Creating change is never easy, in fact it's scary. We had to plan for change. And the reality is that the Developer Division isn't a battleship that we have to steer and move. It's three thousand canoes that we have to orchestrate, turn and maneuver."
One CS prof I had didn't use a text book... We had to google everything. Point... If I didn't have access to SO and Google I would be fired for not knowing how to do anything. 
I would like to hear how other people use elements of the framework (eg EF), what worked, didn't work etc, but in an open way without getting your ideas trampled on! It could also be a place to discover new tools frameworks etc and what people have used them for, without it turning into a dumping ground every no tool. I'm not familiar with all the other resources mentioned but I know that stack overflow wouldn't be suitable
Agreed. Producing simple, straightforward and easy-to-read code for such a complex system is hard work. 
Thanks, worked well for me.
The first commit is 3 months ago. I'm *guessing* the master branch is the current release, and the 85 commits not yet merged are ongoing development. It's very exciting to be able to see this stuff.
I think it means more widespread acceptance of .NET as more than just a corporate platform. Perhaps it won't ever be as flavor-of-the-month as node.js or rails, but hopefully it gets a bit more cred as a result. 
The key to anything is perseverance. Learn and do.
Who said you should? I feel like he's arguing against a point that no one made.
Yup. I dont know in which direction it is going but so far my goal is to implement all features reddit has. It is a huge project but hey, I got nothing better to do while I am studying :)
This is Webforms, not MVC. At least the first part before ads took over my entire screen on mobile.
I guess most people didn't get to the last 2 sentences. Didn't know my post was tl;dr.
But then that's one of the situations that the Express versions of VS are for really I guess...?
Everyone else has pretty much given all the advice you'll ever need, but one thing I always thought was that University/College education is like learning to drive a car: The real learning starts after you pass
I feel like this a lot. I tell my boss if I don't understand something or I am lost. He has a ton of knowledge to pass onto me which he does. Every day I feel more competent. 
Just because it isn't razor doesn't mean it isn't MVC. I stop reading when the ads showed too.
Please, remove that color change feature in "things we learn", it's so annoying
My bad, I did not see enough due to ads.
I think you may be missing the larger picture here. The Oracle libraries are only incidental, and just led me to the problem I'm describing here. The main issue is that my application's namespace becomes unavailable as a datasource if I switch my Target CPU to x64. You can test this yourself by going through the following steps (I've only tested on VS2010; it may or may not still be an issue in newer versions): 1) Create a test project name TestApp 2) Don't do anything with the form. Just go straight to the code and enter this below your form's class: Public Class testClass Property testProp1 As String Property testProp2 As String End Class 3) Build your project as is. 4) Go to your datasources and add a new datasource. Select Object, and move to the next screen. Expand the tree and you should see your application's namespace along with a 'testApp.My' namespace. If you expand your application's namespace, you will see the classes Form1 and testClass. 5) Now cancel out of that and go to your project's Compile options. Look for the Advanced Compile Options button. After clicking that, change the setting of Target CPU to x64. 6) Clean and Build your project again 7) Now go back to adding a new datasource. When you get to the class selection and expand the tree, your application's namespace is gone. All that is available is the testApp.My namespace. This is the issue I've been banging my had against for the past few days. My actual application still works with it set to AnyCPU, but I like to clear up warnings just in case they lead to other issues down the road.
Can't agree more. I think I learned more in the first 6 months out of college than I did in the 4 years I spent in college. A significant part of that was things that I may have "picked up" in college, but I didn't **understand** until I saw them applied in a real system.
&gt; The world is run by people who are just doing their best but are just making it up as they go along. And many of them are called "parents".
Seems cool, good luck!
Thank you :)
Just a bit of a issue here: &gt; int expectedTotal = (a + b); Now, this is a _pretty trival_ test here, but in general, I try to avoid duplicating the _logic/algorithm_ of the method under test because if the logic/algorithm is incorrect, then the test will pass with the same incorrect result. Consider this: public double ConvertRadiansToDegrees(double radians) { return radians / 180 * Math.PI; } With a unit test of: double radians = Math.PI; double expectedDegrees = radians / 180 * Math.PI; double actualDegrees = ConvertRadiansToDegrees(radians); Assert.AreEqual(expectedDegrees, actualDegrees); Run the test, it passes. All fine and dandy right? Well no, the conversion equation is _incorrect_. (it should be `"radians * 180 / Math.PI"`) In essence, you've testing _nothing_ yet the test is still passing. In addition, you've added logic to your test which (in theory) can contain bugs and may incur maintenance overhead. Had your test been instead: double radians = Math.PI; double expectedDegrees = 180; double actualDegrees = ConvertRadiansToDegrees(radians); Assert.AreEqual(expectedDegrees, actualDegrees); Where all logic is eliminated, then the test doesn't care, no bugs can be leaked from the implementation, and you can be sure that if this test passes, then the method under test is working (at least for that specific input/output) So as trivial as it is, I would have rewritten that test to be: int a = 10; int b = 20; int expectedTotal = 30; Moving on, a single test doesn't say much either. Consider if the `Calculator` class were this (again, this is a _very trivial_ example, but if this is supposed to be a teaching article, I think it's missing a nice "best practices" part/section): public class Calculator { public int Add(int a, int b) { return 30; } } The test would pass but any other values might fail. (Now yes, you can't test every possibility seeing that there are (Int32.MaxValue - Int32.MinValue) ^ 2 possible combinations, but if you add 1 or 2 more tests, especially some special values like `0` or negative numbers it can go a long way to increasing confidence in your test) Finally, I would also suggest naming the test differently: public void Test_Add() Doesn't tell me anything about the test, the conditions of the test, and the expected result. Especially if we're going to be running the test several times for different inputs, then having something like: Test_Add_When_Given_a_As_10_And_b_As_20__Returns_30 Test_Add_When_Given_a_As_0_And_b_As_Negative_5__Returns_Negative_5 Test_Add_When_Given_a_As_0_And_b_As_0__Returns_0 And so on. You can see in your test results window a nicely set of documented tests that tell you _what_ "Add" is supposed to do and can easily compare/contrast different inputs and expected outputs. I'm also a big fan of nested classes: public class Calculator_Tests { [TestClass] public class Add { [Test] public void Given_a_As_10_And_b_As_20__Returns_30() { } [Test] public void Given_a_As_0_And_b_As_Negative_5__Returns_Negative_5() { } [Test] public void Given_a_As_0_And_b_As_0__Returns_0() { } } } This gives you a big benefit of organizing shared logic between your tests. For example, the instantiation of the `Calculator` instance is _irrelevant_ for these tests. It should be in a separate initialization method. _But_ if that setup was unique/different for the `Add` methods compared to the `Multiply` methods, then you can separate those concerns with the separate testing classes for each method. This is even more beneficial if your unit test runner/results window has decent support for nested classes letting you nicely organize/group tests by class (`Calculator_Tests`) then by unit/method under test (`Add`) then by the inputs/outputs of each test: Calculator_Tests -&gt; Add -&gt; Given_a_As_10_And_b_As_20__Returns_30 -&gt; Given_a_As_0_And_b_As_Negative_5__Returns_Negative_5 -&gt; Given_a_As_0_And_b_As_0__Returns_0 -&gt; Multiply -&gt; Given_a_As_10_And_b_As_20__Returns_200 -&gt; Given_a_As_10_And_b_As_0__Returns_0 -&gt; Given_a_As_1_And_b_As_Negative_5__Returns_Negative_5 -&gt; Given_a_As_0_And_b_As_0__Returns_0 -&gt; Divide -&gt; Given_a_As_20_And_b_As_10__Returns_2 -&gt; Given_a_As_20_And_b_As_0__Throws_DivideByZeroException Now imagine having that level of test coverage and description for your tests across your application: your unit tests have effectively become the de-facto documentation as to how each of your units are supposed to operate _and_ how they are expected to fail. In addition to that, it significantly reduces the risk of your "documentation" becoming out-of-sync with your behaviour. You are _testing_ and _validating_ that your documentation matches with how the code _actually executes_. EDIT: &gt;Just a bit of a issue here: Geez, I should have just written a big blog on this instead.
I know how you feel. When I started in 2007, I didn't know anything about databinding or how to use ADO.NET, stored procedures, ASP.NET, HTML, CSS or JavaScript for that matter. I just pretended like I understood to not seem incompetent and then googled the topic the first chance I got. From my experience, a successful programmer is the one with the right tools to get the job done, you only acquire those tools from exploring and experimenting and I experimented a lot, and watched lots of screencasts. Now I'm in my 7rd year in the IT industry and got to work on projects across various domains.
Wow. If every reply to a post was as complete, the world would be much better. Thank you for all this insight and for taking your time to improve on what was originally posted in the article. I don't know if you have a blog or website, but I wouldn't mind if you posted this as a comment in the blog post with a back link to your own domain. Just wonder if it would be as good to you as it would be to my blog, though.
Kanban vs Scrum.
It means we can issue pull requests.
Don't worry about "proper way". There are specific tools for specific jobs. As someone with a LONG background in webforms, I was very resistant to MVC. After learning the internals of MVC (and it took a while to get used to), I'm liking it a lot. There are downfalls to MVC (heavy reliance on javascript and client-side DOM manipulation), but we're just going to have to get used to it.
Don't be afraid to tinker. My .\Documents\VS2012\Projects directory has several hundred (and many more in the previous version directories) temporary projects that I have created and not bothered to delete yet. Just today I played with entity framework for the first time (I've been using NHibernate for the last 4ish years and hadn't bothered with it yet but I was watching some of the vnext talks on channel9 and decided to check it out). 
If you want to visit the game directly, just check out [Code Hunt](http://www.codehunt.com).
The dude in the striped shirt really needs to switch to decaf.
Thanks so much for the input. I'm gonna go web forms for this project and possibly migrate later after I have a handle on it.
Do you have http compression turned on in IIS? Check the headers on the response, is it GZIP? You should be able to turn off compression on a per-directory level, then serve all your secured file streams out of that directory. *Edit: re-reading this, it does seem like the most likely cuplrit is that IIS is set to http compress dynamic responses, but not static files, otherwise you would have had this problem before. The browser can't start loading the pdf until it uncompresses the file, but it needs the entire file to do so. [Check here for tips on configuring HTTP Compression](http://technet.microsoft.com/en-us/library/cc771003(v=ws.10\).aspx)*
Scott Hanselman posted screen shots of vNext and one of the windows was Visual Studio 2014 so... that may be coming soon.
Thank you. I will look into this.
Browsers are hard to trick. Very smart and witty.
Which is why CDN's offer shared SSL certificates. Files are fetched and cached over http, then served to the visitor via the CDN on a custom or shared SSL certificate. Security errors do not show up, because the files are eventually served in https.
Need to have a better free edition. 64kb is not enough to test with!
On a sidenote, Response.End isn't the recommended approach since it introduces a lot of overhead (it actually throws an exception). See for example [here](http://stackoverflow.com/questions/7867238/alternative-to-response-end) for some alternatives. 
WHY IS THE TITLE WRITTEN LIKE THIS?
yeah and $299 for the most basic option is still really steep for hobbyist programmers or people who are still getting their feet wet. 
I wanted to get pumped about it, but I ran into oddball issues early in the arithmetic section. It gives a terse list of inputs and the desired output and asks you to put together the formula that will fulfill that. OK, cool. I knock something together and I'm off to the races. When figuring out whether the result was correct or not, it changes around the values it's using for inputs and outputs and, not surprisingly, my formula which satisfied the first set of inputs does not satisfy the second. Playing a game where I satisfy a set of requirements that I'm not informed of until after I've done a certain amount of work to satisfy the old set of requirements hits a little too close to my day job for comfort.
It's a convention on the entire internet.
Also called *common sense*.
$299 and no VS support. Just a kick in the groin. I worked with Xamarin but the amount of bugs and lousy support made me uninstall this again quickly.
Does the pricing "per platform, per developer" mean per platform that you develop on, or per platform that you deploy to?
It hilarious how similar we are. I'm 26 and have been working for about 8 months in the field as a C#/.NET dev on the new development team at my company. If you want to learn from reading, C# in Depth(3rd Edition) and C# 5.0 in a Nutshell are both great books and references to have. For building your confidence I would go through the MSDN tutorials on MVC and then grab a pluralsight subscription and code a long with their MVC applications, MVC has changed a lot so make sure they are teaching the version your using/learning. If you decide to get pluralsight, use it to learn Javascript and JQuery, otherwise search the net and find tutorials for those. If your going to be using a lot of MVC then learning how to use Bootstrap will be a boon as well, it can really wipe out a lot of the time needed to create something from scratch, and the look is solid. Grab yourself a domain name and a hosting space and publish your own web app. Make it with adds and skip the free stuff (like free azure hosting) , as you will be more motivated to make it worthwhile if you have skin in the game. When you make this app, don't just slap it together, follow every best practice and make the thing so pristine you could eat off of it. Things get better with time, find someone you work with who doesn't mind answering questions. Then ask that person questions only when you feel like you have given a good shot at finding the answer yourself. Learn about data access. Even if you know how to write LINQ you should at least be able to write a simple stored procedure, as LINQ has holes and some of them can only be filled with sprocs. I learned a lot by following my earlier advice and finding a second person at work who happened to be a DBA, she was/is an amazing help.
Ha! Such truth... "Hey Boss, what do you think of this?" "I think we should fight that requirement and not implement that" "Oh...okay" : /
A very logical evolution. MVC controllers and view engines were already environment-agnostic. One of the things slowing down MCV/WebAPI in terms of performance, flexibility and ease of development was the archaic HttpContext. It is a mess to simulate the context in unit tests, it ties it down in terms of hosting environments and as the article states, the memory footprint isn't exactly negligible. First Cordova and now this announcement ... Exciting times.
Yea. I wouldn't have been so dismissive of Katana and Owin had the previously explained how bad HttpContext really was. I damn near dropped by lunch on the floor when I heard how expensive that object was just in raw memory.
You might give Zimilate a try. You can create a code block in a note and then turn pretty print on or off, which is handy. It's similar to Evernote (save web pages/files/images etc) but it lets you organize your collections hierarchically and with tags. IMHO the web clipper is better too.
I need to catch up on these changes. They are pretty extensive. Almost to the degree of when I jumped from webforms to MVC. [I found this, which helped](http://blogs.msdn.com/b/cesardelatorre/archive/2014/05/12/the-future-of-net-in-the-server-asp-net-vnext-optimized-for-cloud-and-server-workloads.aspx). [I found the bits here](https://github.com/aspnet/Home).
I'm looking forward to the long ass list of breaking changes. It's going to reveal a lot about what they are thinking.
From what I see it looks like I'm going to adopt the "Scorched Earth" migration policy. No Web.config. Start-up amalgamated into one static class. New Identity Provider (this time it is complete, with password reset ect). Looks like this update will be very delete key friendly.
I like deleting code.
Is the dropping of the system.web reference on mvc6 true?! Hello Helios!
This stuff sounds cool, although having to rewrite a bunch of code to be able to update does not sound very cool.
How much do you HttpContext now? In all of the videos that seems to be the major sticking point.
Not a ton since I prefer to make things injectable where I can. 
Everything is moving at the speed of light, burns you out quickly.
MVC5 isn't a huge jump from MVC4, just jump to MVC6 as soon as you can.
Sounds like the end is near
So in theory you're already on the happy path.
I'm still on MVC 4 since 5 doesn't run on Mono (Mono hasn't implemented the async ASP.NET stack and MVC 5 depends on it) 
PowerShell deployment scripts? What's wrong with publishing via MSBuild? It's already scriptable. Do we really need yet another way to do deployment? 
A thousand simultaneous requests would cost 30 megs of ram. Doesn't really sound that expensive on modern ram heavens. It sounds like a cool thing that they should be doing - removing technical baggage, and hopefully speeding everything up in the process; but I believe they should focus more on ado.net. If they somehow increased its performance (like cold starts taking a better half of an afternoon), while making httpcontext consume 100 kb per request, i'd take that deal. 
right ? Recently i started using their new identity, and guess what happened to me today: created app from template again and it is different from what i created one month ago! Phuck
Page requests might not be so bad, but once you get a bunch of AJAX moving around you could find the request overhead dwarfs the actual payload. And this is C#, a language whose most significant performance problem is running the GC.
Not mentioned, some weird ass JSON based files are replacing the MSBuild compatible project files.
Ado.net != entity framework.
I write .NET ORMs for a living, perhaps I can help you solve the problems? Connection pools are only problematic if connections aren't disposed properly / too late, but perhaps you run into other problems which are easily fixable?
&gt;New Identity Provider Seriously another one?
That's the point. IIS, command-line, Linux, it doesn't cares where it's hosted.
I honestly didn't think they'd do it this soon with MVC though. I am pleasantly surprised.
Yea... I found that one too... I was like *dafuq*
"This soon" is quite relative. There haven't been any groundbreaking changes in MVC since MVC4 and this is obviously early stuff that will take some time to reach a final release. WebAPI can already be self-hosted but MVC is getting a big refactoring to make it possible. I'm looking forward to have the flexibility of Node.js with my favourite language and framework.
That's good and about time too.
Good question. I think the web framework components are non-GAC, but I don't see anything definitive on it yet.
[Loupe](http://www.gibraltarsoftware.com/loupe) can help you see what EF calls are being done, which will help you identify where you should be eager loading. 
The thing that bugs me, especially at colleges and universities is that of the few students who have heard of ASP.NET, they always associate ASP.NET with Web Forms and I hear things like "ASP.NET is drag and drop" and they have never heard (or bothered to lookup) the more commonly used stuff such as MVC which isnt "drag and drop".
Will loupe show me more than mini profiler regarding linq queries.. 
Try http://www.hibernatingrhinos.com/products/efprof
I installed loupe and set it up, but I did not see how I view the results. Is there a controller I need to go to or something? 
I just installed the NuGet package 
There's an agent you need running. It's been awhile since I've set it up, so off the top of my head I can't give you steps, but their docs are pretty good.
I just had this conversation the other day with a friend. Anyone who thinks, "I can do what you do - all you do is Google!" is wrong. Google and SO is our friend, but take pride that there is a lot of skill in knowing what to search for, and more importantly, interpret the results. It's also a little bit of, "Oh, there's the answer, now I have to fit it to my scenario." Not everyone can do this.
what does it mean?
I have no idea. All I know is that my wife hates it, so naturally I wear it a lot.
I agree. I love my job and take pride in what I do. For me work is really never easy. However, the best part is that I have never been board at work. Ever. 
Or [Glimpse](http://getglimpse.com/) with the excellent Glimpse EF plugin.
I'm still using them. But there are clear signs IMHO that the end is coming.
Stigmas are hard to shake. That said people are ignorant in general. First of all the drag and drop aspect, I never found it to be feasible for anything web related to begin with. Second of all webforms is a genius framework that has allowed me to be extremely productive over the years. A lot of younger folks don't know/remember the web dev space say 10 years ago. We didn't have the client side tooling that is available today. Back then you either roll your own everything or you can use the magical server controls that do all the magic for you.
Hah me too! It came crushed into this cube shape, you needed to let it get wet, and it would un-ravel into a shirt. I think I was given it at a dev talk at MS TVP about 8 years ago. Think I used it last time I painted the kitchen.
Go for web and MVC. Internet will be here in the future but desktop is declining.
dot net rocks
You can't have ASP.NET without ADO.NET but you can have ADO.NET without ASP.NET though I admit that the later scenario is on a major decline for good reason. *edit* I got dinged on my report card for not include the .NET. So there you go fella's who are hyper critical... there you go.
Was working a WPF job after 8 years of web dev. I think there are certain niches that will never translate to the web, like things that need access to attached hardware. While I think there's definitely a lot more web options, if you're doing it "right" your UI is very thin anyway. So you'd be doing most of your work in services or class libraries. I think its good to know both, but I'd prioritize thin (ASP) over thick (Xaml).
What about YOURS?
Yes.
Hanselminutes
Completely depends on what your client needs. If they need a performance dependent application, then a native WPF application will run circles around anything you can do with Javascript in a browser. If they just need some cpu light tasks, than web (ASP.net) has many advantages such as being able to be mobile friendly / platform independent. You still have to worry about your client code / display issues for different browsers. I'd recommend checking out Typescript if you go the web route, it will save you lots of headaches from javascript :)
.NET rocks is the obvious one - though I'm not that into it anymore. I always found SE-Radio (http://www.se-radio.net/) to be way way better - content wise - it's just not .NET specific.
MVC / Owin / alternative frameworks like Nancyfx and Service Stack are probably going to be more lucrative job wise - especially as WinJs has some momentum to it too. There's going to be WPF around, but certainly less popular.
[ADO](http://en.wikipedia.org/wiki/ActiveX_Data_Objects)?
Such a mixed bag. UI layout is 100 times easier on desktop and dont get me started in having to support all browsers. Its some tough growing pains. All I can think about when I do front end web dev is 'desktops solved this 10 years ago and made it so much easier! Who the hell designed css?'
WPF (and WinForms) are still the recommended platforms for developing desktop applications. And many companies still want those for the improved performance and UI capabilities. Plus desktop applications tend to be cheaper to build. WPF is also directly translatable to Universal XAML, the platform for Windows 8.1 and Windows Phone 8.1. The web may be winning on the desktop, with the invention of the app store were seeing a huge resurgence of native applications. Knowledgeable of desktop apps will also put you in a better place for learning native or C# based Android and iOS. In short, there will be plenty of work to go around so do what you like best.
* [Dot Net Rocks](http://www.dotnetrocks.com/) * [RunAs Radio](http://www.runasradio.com/) * [Hanselminutes](http://hanselminutes.com/) * [PowerScripting Podcast](http://powershell.org/wp/powerscripting-podcast/) I also gave [Coding Blocks](http://www.codingblocks.net/category/podcast/) a try but it didn't really "grab" me.
I don't mean to be overly contrarian, but CSS is actually pretty ridiculous. No centering mechanism. Clear tag is totally stupid. Floats: stupid. Seriously, think about what you have to do to get a grid. Think about margin auto 0px. Absurd and stupid. 
I hadn't heard of SE-Radio, I'll have to give that one a try.
To add to this, css without something like less is so annoying. To think that a language was released without the ability to have even something as rudimentary as variables makes me cock an eyebrow. I could never do a project with pure css again.
CSS isn't a language :-/
It's less to do with CSS as a whole, but the ridiculousness that HTML got it's origins from. It's a derivative of SGML (oy, I'm dating myself). HTML/CSS are experiencing growing pains. HTML5 and CSS3 are giant leaps ahead in the game of "Well, this is no longer markup for technical writing, it's a mobile application space - let's commit to that" -- and it will only get better. If you understand where HTML and subsequently CSS came from, you'd know why it's a pseudo-hot-mess right now. But with 20+ years wrapped into it, nobody is going to just up and change to something not HTML/CSS, so the game is to grow it, while not orphaning the millions and millions of devices still in play.
What would you call it then? Style descriptors? Regardless of what you call it it is ridiculous that you need to copy paste things like color values so much. Less shouldnt even need to exist.
Variables demand CPU time or pre-compiling, neither of which was viable when CSS was standardised. It's only very recently that web programming has crawled out of the dark ages thanks to the mix of functional platform constraints and deep inconsistencies in presentation software (browsers). 
Understanding how javascript works, right down to its prototypical twig-and-berries is (in my opinion) a very good feather to have in your cap as a developer. Someone who knows SQL (more than just dragging diagrams in an EF model window) and can optimize it well, who knows javascript and HTML and CSS, and who knows C# -- is a solid developer. Someone who can tune all ends of the spectrum, instead of hiding it behind familiar facades. Javascript is powerful as all hell.
"Mastering" is kinda broad... If you're on the cutting edge of WPF there are lots of scenarios in visualisation and bioscience that become quite interesting and lucrative. That said, as a young developer you're unlikely to hit them. If you've got to choose, go with the web - though I'd caution against learning "MVC" vs learning broad based web technologies and decoupled system design. The skills you'll pickup are more broadly applicable, and give you better chops for making serious interconnected systems, while also broadening the resume. With a reasonable application of MVVM to ASP.Net MVC your app should be pretty indistinguishable server-side from a client app, and most of your interface time will be spent working with JS and web display, not the backend... That'll position you well to pick up the web fad du jour to keep the resume sharp, while also building apps that'll survive and thrive over the long haul. Feeling confident with webservices, various data access technologies, and how front-end libraries interact with them will make you more valuable than knowing how to prettify buttons in XAML. Those skills will translate well into making serious desktop apps in any language, while the other one ties you to the presentation layer.
I never said javascript wasn't good, but performance wise (all up to the browser as well) its not close to native code. You also don't have access to the file system, so depending on what the application is supposed to do, you might not be able to do it just based on sandboxing alone. The needs / purpose of the application is where you'll need to decide if its worth it to do it server or client side. Thanks for the downvote though.
Back end developers are expected to deal with a hell of a lot more than just exposing a few REST services. The hard work comes from tuning databases, moving around massive amounts of data, working with dirty feeds from other companies, and so forth. Exposing our database via a REST API is so easy in comparison that its practically an afterthought. That said I think high end web programming is actually harder, it just tends to pay less for whatever reason.
Presumably, OP wants suggestions for podcasts to listen to.
Reminds me of the cancer imaging software I helped write in Silverlight. Once it was done they wanted a rewrite in HTML5. To get the same feature set they were looking at 5 to 10 times the development cost without the guarantee of comparable performance. I won't say it would be impossible to port, but damn it would be expensive. 
For someone old enough to have written lots of code in MFC and even VB, I can tell you it's not worth it to marry yourself to *any* microsoft technology (even .NET). 
But asm.js... Why use crummy technology and reinvent everything in javascript? Keep your chops sharp, but don't get too sucked in to the latest fad. It might get replaced by a single js file. 
I've seen sheets before, and CSS is no sheet. 
And the troll speaks.
From an employment perspective, I think we're sitting on a bubble at the moment w.r.t web as a delivery platform. Web only devs will surely become a commodity and as a result those jobs will pay less than non-web programming jobs due to saturation of the employee market for those skills. The real money, if that's what you're chasing, will always be in enterprise application development and low-level database work (DBA, performance tuning, business intelligence, ETL, etc.), regardless of what the delivery platform is. 
Most web apps are enterprise apps.
I'm really fond of the design theories behind XAML, and invested a lot of time and energy into it early with big hopes for WPF &amp; Silverlight. Silverlight hits all kinds of sweet spots, and really could have been a gamechanger if it was handled properly. A clear component strategy for sharing assets between Silverlight and WPF, along with cleaner story for lightweight integration into standard webpages... I think it's a little tragic that silverlight didn't get more of a push to the open web early on. With the kind of resources MS has I think they would have done much better delivering a clear official Linux client and pushing it into the open source browsers on their own dime. I think it came just a bit too soon to benefit from the new embrace of open source that MS has made. 
Oh sure, but that sucks - I like building software that gets used by real people and I (personally - obviously, opinion) think nothing is more frustrating than working on dead-end stuff that never gets out. Everyone values different things in their jobs, but I can't / won't work for organisations that don't value shipping. Don't want to be the richest guy in the graveyard.
My experience has been 50/50 with clients who choose desktop vs web for their enterprise. Sadly, a lot of my past clients were stuck with VB6 apps before they upgraded to something new. 
Browsers should switch from HTML/CSS to XAML. /s
It dpends on many things. Here in Colombia using ASP.NET or Java EE and Spring for enterprise apps is the norm.
Can you get budget to externally host? A lot of clients we work with have restrictions do to internal politics, they host with a reputable external ISP (we use IHOSTASP.NET). Shared accounts for .net with full SQL server etc are about $9 per month. Probably easier to sell $100 Per year than a whole server :) 
I tried that approach. They are hypersensitive about security. "Budget" is an excuse for "we don't understand this," really. I bought a year of hosting just to show them. When I did a demo, "We love it! Where is it hosted? Oh no no no no, we can't do *that*!" This is the second company with the exact same attitude as my previous company. I ended up buying a server and putting it in my office at my last job and saved them $4 million a year through automation. I'm not doing that again (mostly because I work at home, and that would be nearly impossible). One of these days it'll push me to start my own company... but for now, I want to make an impact where I am. There are people using Excel and MS Access who *need* me.
&gt; I think there are certain niches that will never translate to the web, like things that need access to attached hardware. If your target is Windows, ClickOnce+WebSockets will do the job. Any other platform, you'll need to get the user to activate an agent (I actually built a web app that manages connected hardware).
Wcf and I think webapi can be self-hosted from an exe or windows service pretty easily. Also Google serviestack, Nancy, owin, openrasta. 
How do you get a web app to talk directly to a C-language DLL (P/Invoke?)
Do you think SCSS is going in the right direction?
You could install mono and use XSP, is really only meant for testing but it could demo your app. Download --&gt; http://origin-download.mono-project.com/archive/2.11.4/windows-installer/mono-2.11.4-gtksharp-2.12.11-win32-0.exe Then start by launching --&gt; C:\Program Files (x86)\Mono-2.11.4\bin\xsp4.bat --port 80 --address 0.0.0.0 --root "C:\Path\To\Your\ASP.NET\Site"
I thought WinJS is being ignored by most MSDN developers.
&gt; Don't want to be the richest guy in the graveyard. IMHO, they do have the best headstones, with fun epitaphs, to mandeer by.
After using Silverlight, HTML5/CSS3 is so hacked (especially context sensitive menus)
aka "follow the money"
A lot of what your working on after 2 years is still kind of new... language features, framework features or applying them to a use case in an unfamiliar domain. After 2 years switching languages or platforms seems like a daunting task but after 4 years you'll feel differently. 
This. Especially since MS stack is more and more OSS. Its a complete waste of time!
Both have been on life support for 12+ years, along with VBScript and JScript.
I think some descendant of Unity3D could be a possible replacement for the web in the distant future.. once everyone has a mobile Oculus Rift + kinect + 3D Scanner/Printer. I can only dream.
Asp.net MVC 4 pro from apress and professional MVC 3 from wrox taught me most of what I know. That and building my own side project. I like books and tutorials from microsoft to start. Pluralsight apparently has great videos but I've never used it. You learn by doing though. Think of any feature you want to implement, get it out of your head that it's not possible then figure out how to do it. Personally I made a blog site with a rich HTML editor, ajax and jquery used to configure roles, a reddit style comment voting system using recursion in the razor views and a simple image management system to use images in the blog. Then when you do that, implement dependency injection for your controllers and use Moq to mock objects and write automated tests for all your methods. Then watch the money pile up when you get a job with all that knowledge. A lot of what I just said is in that mvc 4 book I mentioned.
We don't get to pick our web standards unfortunately just like we don't get to redesign our chip architectures (I'm looking at you x86). You get what you've been handed and that means HTML, CSS, JavaScript and http as the standard for cross platform development.
Yeah but with all the stuff like Bootstrap and JQuery it's much more tolerable. I don't care that people think it looks "samey" or that it's not super-efficient, to be frank; the less time I'm spending on frontend crap the better.
[CSS is awesome](http://i.imgur.com/opidUPS.jpg)
Come on. Doing it on the fly may have been an issue (although really? When you could have Javascript or embed music? I doubt the variables need much more CPU time than the rest of CSS rendering too), but there's just no way that pre-compiling was "not viable." 
Much like HTML, the hyper-text markup something something.
The last time I looked I was surprised at just how many WPF jobs I saw... seems a lot of financial outfits are using a lot of it.
That's not entirely true. The primacy of the request and statelessness that are at the core of MVC lead to designs that are somewhat different than they'd be in a desktop "thick client."
No matter how nice it was for the developer, I think they should have realized getting people to install a plugin to view Web sites was a tough sell.
That doesn't make sense. The MS stack is a waste of time because they're open sourcing parts of it? So you should switch to Python?
Much ADO about nothing, in my opinion.
It seems to be - community is preferring c#/xaml, all the ms apps (especially 8.1 apps) seem to be winJS at the moment though (mail, cal, etc, all the metro stuff)
Oh I agree there. We leave the project before it dies of old age, but knowing it will never ship still stings.
Sort of. There's a complex relationship. * Javascript - The original language created by Netscape, currently trademarked and owned by Mozilla. Technically this name refers *only* to the Mozilla implementation of the language, but colloquially it refers to all implementations. * ECMAScript - The official name of the standards-based language, under the purview of W3C. * JScript - Microsofts implementation of ECMAScript/Javascript, with the word "Java" removed because they were afraid of being sued by Sun.
&gt; desktops solved this 10 years ago. Don't forget 10 years (and more) ago 'desktop' meant Windows. Or Mac. Or Linux. Or something else. Now, 'desktop' means much less.
Directly? You don't. Our architecture worked like this- a self-hosting WCF service is launched via ClickOnce. We wrapped all of our calls to a variety of device drivers using this pattern (it basically supports every spectrophotometer ever made, in both an "tethered" mode and a "batch" mode).
Ouch, kinda of a crappy situation. I hope it works out for you. 
I dont think I would ever do a project without jquery. Its so essential I dont know why anybody would avoid using it. 
Yeah I don't listen to any so I was looking for suggestions. I mostly read blogs from microsoft and whatever gets shared here. I want to get a more broad sense of whats happening in the community and what I should be looking out for.
A rose by any other name...
Searching what you said, and looking at [this](http://blogs.msdn.com/b/carlosag/archive/2008/04/14/hostyourownwebserverusingiis7.aspx) seems very promising.
Thanks for the reply. I actually am super interested in learning more about the data access side (the app I'm creating is built around an Oracle 11g DB).
I'm not trying to imply that CSS is awesome and/or can't be better, but it's just not *that* bad. And I think people are missing the context we're comparing it to here, which is WPF. Try aligning a checkbox with its text after setting a non-default font size in WPF/XAML. It's a nightmare (spoiler alert: it involves very specific negative margins) and Microsoft is in complete control of its environment with WPF, so it doesn't even have the excuses that CSS does.
We had the same solution at one point, but our product also had a locally hosted web app. We started experimenting with a fat client that essentially hosted an IE instance and provided a couple of Java script extension points. It seemed like a better solution but I left before we finished. 
It sounded promising in 2008, but I don't think it's going anywhere. Owin, NancyFX or self hosted web api is the future. The next version of MVC will run on Owin.
Do your users have admin rights on their desktops? If not, you will probably encounter issues running an application that opens port 80 (or any other port) for incoming connections.
Telecommuting is the best option to tackle work and home more effectively and reduce stress. It is really worth called to be the next generation working model due to its demand. It has several benefits for an individual job seeker to an employee and also the whole organization. It can cut costs for the organization,which can used for other business deals. Find how it is so value here http://goemployed.com/corporate-cost-cutting-ideas/ . 
Exactly. To be a Flash killer Silverlight needed to "run everywhere", quick and easy. MS went with a windows-first solution that retained artificial market boundaries and missed out on the growth of Apple and Chrome. HTML5 is awesome, but pursuing an honest "Flash done right" strategy would seem to be a long-term win for their tooling and platform.
Managing state cleanly in a thick client app, and complicated event handling in stateless apps, if fully abstracted (for testing, lets say), should converge into roughly the same patterns, shouldn't they? That's why I qualified the statement with MVVM: if every view has a corresponding abstract model, most of the global state should be injected through DI or parameters. Dependencies on server or client state should be abstracted out, resulting in a UI rich in interface but thin in business logic. In practical terms it's a bit of a PIA to unit test using live server contexts, too. I have a lot of code that lives in services, apps, webapps, and websites simultaneously - with clean service layers and DI it's generally an anti-pattern if there are concrete/unspecified dependencies on execution context.
Remember the state of web development and the tooling available at the time... The concepts of hyperlinked, easily editable, semantic documents was aimed at making information sharing simple with no special tooling required. Being able to accomplish pre-compiling was obviously *possible*, but making it a practical necessity for publishing CSS on multiple platforms would have been a no-go as part of the standard. Or, to put it another way: since this could be accomplished entirely outside the CSS file anyways, why wasn't widely available for so long and why is it still not standardised? The CPU and memory resources required for variable manipulation would absolutely have been a problem on the early web, especially when you consider the deeper facets of CSS (linking between sheets, advanced filters). Not insurmountable, but kinda ridiculous given the aim of CSS and the constraints that imposes, and still not part of the standard.
Windows Azure? The hosting is straight forward, the cost can be quite low, security can be iron-tight, and it's billed on-demand. For simple access to most of the MS stack it's a pretty solid alternative.
I know these things (and you're 100% correct in your thinking), and I'd like to use Azure. The problem is fighting perception from Luddites that if it's outside of our firewall, then it MUST be insecure. It sounds horrible, but it's actually a pretty good place to work except for the technology piece. They would be 100% satisfied if I sat at home and worked on MS Access apps all day - which I could do blindfolded, but that's boring and does not help me expand and use my skillset.
But the same could be said of, say, C, which *was* available. And I still am not convinced the runtime penalty for variables is that serious since, again, JS has them.
Look into [Asp.Net vNext](http://www.asp.net/vnext) 
IIS has had a hostable-web-core for some time, sounds like your best option. Web API 2 / Owin is also self-hosting, and there are a few articles out there on it - and the nuget packages for VS will let you pull down the hostable web core stuff for API2/Owin.
CSS standardised in the 80s, JS was made in 1996 and was a "big deal" for memory usage. Also, you're not talking CSS or JS variables, you're talking both. And variables tend to be a precursor for CSS math and formulas... C availability has nothing to do with the goals of making SGML editable with every text editor under the sun. IDEs were nothing like we have today, and people couldn't download as easily.
It's not about not having familiarity, it's about abstracting the relationships and dependencies... Having the way you interact with Session, or some property bag, hidden behind a predictable interface (UserSettings, PrintSettings). Units of Work or CQRS break interactions between UI and system, increase separation of concerns, and tend to limit environmental interaction to a small core of interactions. Generally the worst case scenario is you end up making "WebEnabled" concrete implementations of your abstract base classes. At best you clarify your core business logic to clearly reveal relationships between views and state. 
Ya, LINQ to Entities is really out of style.
You must be thinking of ADO.NET, not ADO then; more specifically, "ADO.NET Entity Framework".
Yes, ADO.Net. My mistake. I just figured that was the obvious ado.
I hope you used DAPI for certificate secured connections and good obfuscation at least. I've seen so many self-hosted WCF services with vulnerabilities it makes me worried to use them.
Release-only bugs are the most maddening of all. :)
I have a feeling it's because you're scaling it relative your monitor's DPI. The printer is much higher. I have no guess as to how to fix this from the 3 the lines with no context you've posted.
But really, you probably have a hard time picking out the right abstractions if you haven't done both things. 
&gt;My current HUGE org is moving to java, and while RedHat may be open source, the support contracts aren't even close. So, you're moving to an Oracle environment?
Anyone else feeling overwhelmed at how fast they are releasing new stuff? Are there really devs out there that can do their "real jobs" and keep up to date on this stuff at the same time?
You might be able to sideline IT bureaucracy by talking to the Sysadmins/Developers around the company that specialize in platforms like SharePoint or SQL Server, which require a windows server for hosting. If you get lucky, they might know of some underused server sitting somewhere that you can use. Nobody ever wants to tell IT they don't need a server anymore, so lots of projects end up with things like 'the box that used to host the old version of the db but which we don't use anymore'. Also, if your company has SharePoint running on the intranet, you might be able to use Sharepoint to host an ASP.net web application, though you would certainly need the SP admins to trust you enough to give you an admin login to their server.
Bootstrap doesn't solve any of the problems he outline
Thanks for replying! To clarify the image is first saved onto a file, and being nothing more than a screen cap (1366x768) I can understand the limited quality. Perhaps I worded it poorly. But my question is more about why when printed from the shell it has better quality than from within my app
And remember, member variables exist, not everything needs to be a property, private properties should be avoided. Member variables can also be readonly. Code is a lot easier to reason with when you know the values aren't moving under you.
.text-center .container .pagination-centered .center-block ...seem to get the job done for me as far as centering. 
...Or you're using WPF, in which case, everything is a property. (Unless it's a DependencyProperty.)
WinForms too. 
&gt;I’ve had situations where I had the choice between a static method, a public readonly static field and a static property that isn’t really a “property” of the class; That's easy. If you can make it static, then it should be static. We've even got an FXCop rule to remind us.
Either use properties or a shitload of converters.
Yeah, I got mine after some talk at university. I remember it was almost transparent when I unraveled it from the cube. Had no idea it was a shirt at the time.
He's talking about *which* static option to take.
this Tell-Dont-Ask principle brings up some points about when properties are a smell: http://martinfowler.com/bliki/TellDontAsk.html
blogspam
I did my own login script using SQL, but thanks for all your ideas :) they may be useful in future
This guy pays $150 per month to host a blog? Seriously? I pay $18 to host http://whoaverse.com and it is blazing fast with 80 concurent connections. Am I missing something? Is his blog so popular that there are constantly &gt; 80 people browsing it?
Oh well, time to switch to Java.
I use azure for everything. If i need a console app, i spin up a network of VMs, and write massively parallel console.writelines. If i need a website, i make sure that it has 14 failover clusters all over the world, just because it's theoretically possible. If I have any static content, i make sure that my visitors enjoy being shoved in the face with CDN bytes faster than the speed of light. I love the cloud. I eat and shit the cloud. I met my wife in the cloud, divorced her and married the cloud instead. That being said, some services in azure are better than others - and cheaper too. Unlike OP, i tend to shy away from VMs for web hosting. Why? Because it's not the Azure way. If you need a webpage - blam! Azure websites! More perf - blam! Shared azure websites! More perf? Dedicated! More??? Go for broke with WebRoles at fraction of cost, as compared to VM. Web Roles scale infinitely for common web tasks, and you'd be a DAMNED fool if you spit in the way of all that convenience. I do have a quite a few Azure VMs however. Their performance is mediocre, as compared to own metal. Mostly it's slow as shit c:\, which is backed by paged blobs, and therefore has a LOT of latency. A lot. Like you wouldn't believe, omg it takes 10 minutes to start iis. Fuck you microsoft! I digress, but VMs are a bit shit. Also you have to manage them, which is like taking the whole point of PAAS and shitting all over it screaming "kazakhstan numba one" - a bit funny, a bit racist and sooo 2006. Azure is zen. They put VMs in my zen garden to annoy the fuck out of everybody. Ooh, amazon has it, let's copy their successful business model. No. Fuck that. Azure is about - here you go, CHOKE ON THESE BYTES you stupid machine. You give it code - it produces output. Beautiful. Simple. Sexy as fuck! I forget the point of this rant, i am running a bit of a fever. I said good day sir!
It was his old expensive host which was $150, right?
Why? Are the new alternatives bad?
His egg timer went off.
I think we may work for the same company. I've been trying to move them off Access for years with no luck. 
I have $150/month Azure Credits that I can use, so right now I use the more expensive solution, but still doesn't cost me anything. The old host wasn't $150/month, but it was almost that much which had to come out extra out of my pocket, so for me it was more expensive. Make sense?
Remember, I use WebSites, not a VM. The WebSites run on a Microsoft managed VM though. I went with WebSites and the Standard tire and selected the Medium instance.
Or I could host it on github pages but that wouldn't be as fun. Yes, frequently I have more than 80 concurrent connections which is why I had setup to do auto-scaling on my previous host. And I don't pay $150, I take that out of my Azure Credits.
Check out [Video Tutorial 3](http://pluralsight.com/training/Player?author=scott-allen&amp;name=aspdotnet-mvc5-fundamentals-m3-identity&amp;mode=live&amp;clip=0&amp;course=aspdotnet-mvc5-fundamentals) and [Video Tutorial 6](http://pluralsight.com/training/Player?author=scott-allen&amp;name=aspdotnet-mvc5-fundamentals-m6-ef6&amp;mode=live&amp;clip=0&amp;course=aspdotnet-mvc5-fundamentals) from Pluralsight. Scott Allen explains how to do what it is you're looking for I bet. ^\* ^Video ^#3 ^is ^about ^the ^asp.net ^identity ^system, ^but ^it, ^iirc, ^goes ^over ^some ^basics ^of ^Entity ^Framework.
Sounds like they were doing it wrong. The GAC was built to avoid dll-hell. It is and was pretty easy to script out installer invocations for custom and core gac dependencies when spinning up new servers. Prior versions of assemblies still worked with while new applications could move forward through the versions of .NET, dependencies deployable and intact. It sounds like vNext will provide similar functionality with the boilerplate already there.
I interviewed for an ASP.MVC position. I Got the job. I showed up two weeks later they asked me if I would fill in for a guy that quit on another team. Wanting to make a good impression I said yes. I ended up spending 4 months working working with VB6 and com objects. The worst part of my day was firing up Visual Studio and seeing the 1987 copyright. 
Ah. Interdev. Run. 
There is a very large difference with vNext: each app can have its own runtime (including just a subset of the framework). The GAC is machine-wide and tied to a specific framework version. Migrations, debugging, etc. should all be a lot cleaner in comparison.
ASP.NET itself is able to format your objects as json/XML, what else do you need?
Why don't you add them?
Not my job to fix his broken architecture. It's not wroth the time for me.
Ok. You need to just grab Kendo DataViz or something to play with until you need to purchase it. Have a WebAPI controller that exposes your data as json for the charts. You can see the chart binding to remote data here. http://demos.telerik.com/kendo-ui/dataviz/line-charts/remote-data.html its really that simple. Just use Javascript to generate the graph. Sparklines are cool too. http://demos.telerik.com/kendo-ui/dataviz/sparklines/index.html. Follow the tutorial here but instead use your TemperateInfo class or something similar. http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api. PM me I will help you over Skype.
Sounds like a client-side problem. I'd tackle it with jQuery/jQuery UI and drag&amp;drop. That said, the experience will likely be lacking with mobile. 
If you're new I recommend forgetting about webforms, using MVC, and reading a good HTML/jquery tutorial.
I wish, this is for a class. Professor gives us challenges for extra credit and says "I don't care if you have uncle at microsoft who solves it for you, I just want the solution." given it satisfies his requirements. edits: besides, i've read almost every drag and drop tutorial i can find html5 and other.
This is exactly what I need, please keep this up long enough for me to figure out how to get it working in my webform.
GAC assemblies are versioned, though, and there can be multiple versions at the same time. Versioning does suck a bit since for instance .NET 4, 4.5, 4.5.1 and 4.5.2 all have version 4.0.0.0.
Been a .net developer since v1.1 and haven't ever used the gac in a professional sense (strong naming, gac util) once. I wonder if I'm unique? I came from a vb6 development background and as soon as I heard about private assemblies I never looked back. Anyway, by the sounds of it , it won't be missed...
I played around with vNext yesterday and it's pretty cool. It's a lot like developing with NodeJS, but with .NET code. It's still quite buggy as some of the dependencies that I specifies could not be found, but that may be because they are not published to nuget yet. Those dependencies were, however, included in another package install of the core packages. I really like the way it uses nuget package dependencies instead of references, especially since I am already utilizing an internally hosted nuget server for in-house packages. I'm excited to see what it becomes once it is out of Alpha and the core libraries can be used in Windows 7 and Server 2008R2. 
Use Web API for both input and output. Have the data clients call a REST URL on your server to give it the data, have your server have a REST api URL to retrieve the aggregate data. You don't need any of the rest of the MVC scaffolding. Just nuget the Web API 2 stuff (or create a new Web API project) and make some REST API urls, call it good. 
&gt; now we have nuget causing it. How so? That is to say, what have you experienced that has caused this? Nuget's been pretty good for me...
Thank you, I think this is the right solution for me.
One I ran into was fluent nhibernate, nhibernate and something else. Fluent and something were on different versions. For a long time raven db and other packages that shared a json package were in conflict. And managing packages at the project level is a (thankfully avoidable) recipe for disaster.
It was typically only used be library developers, and even then more often than not it wasn't used 
You misspelled scala!
What are you using, Microsoft.Scripting.Hosting?
tl;dr: Write a property when it *is* a property.
It's a custom scripting language. Each line of the script is parsed into an Instruction object, which contains two main parts: the operation that the instruction performs (set velocity of object, move to position, go to next frame of animation, etc), and a List of Expressions which serves as the arguments for the instruction (an Expression evaluates to a number, and can be a number literal, a mathematical expression, or a comparison expression). An ExecuteScript() function steps through each instruction and does whatever the instruction specifies. The scripting itself works for the most part, I just need to figure out how to make it execute the script in a different thread so it doesn't lock up the main program thread (the script should run at the same time as the main program logic).
&gt; how to make it execute the script in a different thread so it doesn't lock up the main program thread [Async and Await](http://msdn.microsoft.com/en-us/library/hh191443.aspx) is what you need.
Task Parallel Library. You can find it on NuGet. Also check System.Linq.Expressions to speed up your script by compiling it. edit: I would suggest you upgrade. .NET Framework 4.5 is [supported on Windows Vista SP2](http://msdn.microsoft.com/en-us/library/8z6watww%28v=vs.110%29.aspx).
Ha, I beat you by 0.1 versions. But no, I have never used it either. Tried to, but could never justify it enough to use in production.
System.Reflection.Emit for even more micro-optimisation fun!
I feel C# is much easier to understand out context.
I would! But that's only because I haven't touched C# :P I'm sure it's a lot more powerful. Doesn't the .NET code compile the same way given the (essentially) same code? (this is more of a question I actually want answered)
Thanks for the gold before, but sorry I've never used access forms so can't really be any help. To be honest, if you're dragging text from a webform to an access form, instead of writing it to the same access database, you're probably doing it wrong. 
There are certain features in C# that make the language itself better than VB.Net. Another great thing about C# is that it's syntax uses curly braces and has a lot in common with other languages so it is easier to switch between the languages. It's easier for me to switch between C#/JavaScript than it's to switch between VB.Net/JavaScript because the syntax differences. And to answer your question: Yes, all the languages using the .NET Runtime (F#, C#, VB.Net) are compiled to [Common Intermediate Language](http://en.wikipedia.org/wiki/Common_Intermediate_Language).
 Private Sub Play2_Click(sender As Object, e As EventArgs) Handles Play2.Click If MyListbox.SelectedItem = MyListbox.Items.Count - 1 Then MyListbox.SelectedItem = 0 Else MyListbox.SelectedItem += 1 End If Shell(MyListbox.SelectedItem, AppWinStyle.NormalFocus) End Sub I'm going somewhere An unhandled exception of type 'System.NullReferenceException' occurred in Microsoft.VisualBasic.dll Additional information: argument 'Pathname' value Nothing.
I wouldnt say C# is more powerful. It does compile down to the same IL. It may be more concise in a lot of places
My boss did. The other applications in the company are VB6/VBA, and he chose VB.NET because it's much easier to learn coming from VB than C#. I don't agree with the decision, but I live with it, and really it's only moderately annoying to work with.
Am one of these, but am 'retooling' - any new code I write will be in C# and I am translating existing code as I get the chance. I should mention that the notion of '.vb.net components' has no meaning - once something is compiled, it doesn't matter a hill of beans what it was written in. Also, apart from the odd static code analyser, I cannot think of any 'VB.Net exclusive tools'. In pure technical terms, there is no reason at all to choose one over the other. The number of things vb can do that c# can't is very few, and dwindling with every release of .NET. The main reason to choose C# over VB is that the compiler is a lot stricter - you can't pass an uninitialised variable by reference, just for example. In practical terms, vb has such a stigma around it that you can't recruit developers (who are any good at any rate), and 95% of te code you'll find online at SO or Codeproject is C#. /r/damiankw - neither language is 'more powerful' - they are expressive in their own way. The world has decided that C# is the language we should speak, and I'm fine with that.
Yeah I get that, personally I do a lot more php than anything else but I don't find it too hard to change between it and vb.net when I do it. I guess it comes down to a lot of preference to the coder themselves if this is the case. I would like to get into something more serious but vb.net has done me fairly well over the last ten years or so, though it is getting harder to find references of more advanced things to do. 
Fuck no.
&gt; I should mention that the notion of '.vb.net components' has no meaning - once something is compiled, it doesn't matter a hill of beans what it was written in. Well, depends. Maybe I used the term "components" incorrectly. But I mean, if you have created a large set of classes and "helpers", usually it's a big step for companies to convert their codebase. I suppose you could just use vb.net dlls in C# projects. &gt; In pure technical terms, there is no reason at all to choose one over the other. Pure technical, no reason indeed. both compile to IL, and vb.net classes can use C# classes and vice versa. But I don't think its very practical to actually mix vb.net and C# in the same solution. Maybe its just personal, but I think it would make things pretty confusing &gt; Also, apart from the odd static code analyser, I cannot think of any 'VB.Net exclusive tools'. I don't know how many 'VB.Net exclusive tools' there are. But there's Resharper for example, they have language specific licenses. So I can imagine if a company just bought a bunch of vb.net licenses, they could be hesitant about switching to C# and have to buy a new licenses. 
in my opinion vb.net is far easier to read. thats just because i hate the semicolon and the curly braces.... i cant identify them properly if i just look at the code... sure you can say then you formated it bad but hey ... i did not write the code i am looking at some other guy did it 
I switch between Java (Android), VB.NET and C# all the time. The only real problem I have is shifting back and forth between the variable declarations (trying to type dim in Java or C#) and comments. 
Yep, that was the exact same problem I was facing when I still used VB.Net
Private Sub Play2_Click(sender As Object, e As EventArgs) Handles Play2.Click If MyListbox.SelectedIndex = MyListbox.Items.Count - 1 Then ' if last item is selected MyListbox.SelectedIndex = 0 'select 1st item (index = 0) Else ' MyListbox.SelectedIndex += 1 ' select next item (select first if nothing previously selected) End If End Sub Private Sub MyListbox_SelectedIndexChanged(sender As Object, e As EventArgs) Handles MyListbox.SelectedIndexChanged ' when item selected in list change If MyListbox.SelectedIndex &lt;&gt; -1 Then ' and one item is selected Shell(MyListbox.SelectedItem, AppWinStyle.NormalFocus) ' shell selected item End If End Sub Private Sub Clear_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Clear.Click MyListbox.Items.Clear() 'clear the list box End Sub
&gt; But I don't think its very practical to actually mix vb.net and C# in the same solution. Maybe its just personal, but I think it would make things pretty confusing I have a large solution that's mixed, and I don't find it too bad. Of course someone new might get a bit confused. To complicate things further, I'm about to add a small F# library to the same solution. 
Try using SelectedIndex instead of SelectedItem to get the integer value of the selected item in the ListBox. I also added a check for when the SelectedIndex is -1 meaning that there is no item selected. Private Play2_Click(sender As Object, e As EventArgs) Handles Play2.Click If MyListBox.SelectedIndex &lt; 0 Then 'no item is selected MyListBox.SelectedIndex = 0 ElseIf MyListBox.SelectedIndex &gt;= MyListBox.Items.Count - 1 Then 'last item is selcted so start over at 1 MyListBox.SelectedIndex = 0 Else MyListBox.SelectedIndex += 1 End If Shell(MyListBox.SelectedItem, AppWinStyle.NormalFocus) End Sub also I couldn't get Shell() to open a music file for me, but it works with .exe files just fine such as Shell("C:\Windows\System32\calc.exe", AppWinStyle.NormalFocus) This code will also cause an error when there is no items in the ListBox and you try to set the selected index to 0, but I will leave that to you to decide how you want to handle that case.
I feel the opposite way. VB.NET is much more verbose and explicit than C#. It makes it more difficult to make a mistake. For example, imagine a "using" statement nested within an "if" statement. The bottom of the C# will have 2 curly braces at the bottom. If you scroll down and only see the end of that code, the curly braces are ambiguous. Was the "if" inside the "using", or vice versa? VB.NET explicitly says "End Using" and "End If". There's no way to confuse the two if you are unfamiliar with the code. Also, no terniary operator! For the purposes of clarity, would it kill somebody to actually write out "if...else..."? I have to look it up every time I see it in C# to make sure I understand it correctly.
If you try to increase the value of SelectedIndex above the number of items in the ListBox you will get a ArgumentOutOfRangeException exception. If the list is empty and you click Play2 then it will try to increase SelectedIndex to 0 then you will get that error. You don't have to add them manually, just make sure that you add an item before you click Play2 or add a check for the number of items in ListBox.Items.Count being less than 1 before you change the SelectedIndex.
Nice trick thanks For the moment the code play the items one by one (when i click play2) even if the previous is not finished yet I'm working on that so i do'nt have to click when an item is over 
VB.net makes it much easier to make mistakes. Its more verbose, yes, but it is *not* more explicit. It features numerous assumptions and automatic type coercions that frequently stymy junior developers long after their code has gone to production. The example you give is valid, if you don't know the rule that when there are no curly braces defining a block after a statement that requires one, like if or using, only the following statement is included in the block. Implicit blocks are a feature of c that c# inherited, and are typically considered bad. Most style guides require explicit blocks even when an implicit block would still work. 
The type coercion thing is a compiler option included for legacy VB6 project compatibility. You would have to turn off "Option Explicit" and "Option Strict" in order for it to perform type coercion. While technically, it is a feature of the language, I cannot think of a reason why somebody would start a new project with these features off (Option Explicit and Option Strict). There was a huge existing code base of VB6 code out there that Microsoft had to build in a compatibility layer for, and this feature is it. &gt; The example you give is valid, if you don't know the rule that when there are no curly braces defining a block after a statement that requires one, like if or using, only the following statement is included in the block. The example I gave wasn't even what you were talking about, although what you are talking about is an easy way to make a mistake in C#. The example I was talking about is the following: using (MyType obj = new MyType()) { if (true) { } else { try { } catch (Exception ex) { } } } The equivalent VB code would be... Using obj as New MyType() If True Then Else Try Catch ex as Exception End Try End If End Using The C# has 3 ambiguous nested curly braces at the bottom. If you have a large block of code containing that structure, it becomes ambiguous because you can't see which curly belongs to the "try", the "if" or the "using". In VB.NET, there is no question regarding the different closing statements. When you have multiple, identical nested statements (3 ifs for example), then the conditions being tested are the only source of ambiguity in VB.NET. edit: formatting 
Let's give an example of where the VB.NET compiler gets confused: ('New' is a valid enum value, but it thinks it's a call to the constructor as calling a method in VB.NET can be done without parenthesis. You therefore have to write [New], which is kind of odd, considering the compiler knows it's an enum and therefore can't have a ctor) Public Enum Foo New ' BOOM Shakalakaa Old End Enum And there are many more silly things with VB.NET's compiler where it gets its knickers in a knot and gives up, especially overload resolution. That said, they fixed a lot of these silly things in the most recent compiler which even got smarter so a lot of the line concatenations aren't needed anymore. That said, VB.NET is a language that will always trail behind C# as everything MS publishes is in C# nowadays: examples, tutorials, their own OSS code... So choosing VB.NET over C# is not really wise, if you look at the future, even with Roslyn around the corner. Roslyn will give feature parity but that's about it: all the rest is still going to be C#. ^(removed the trailing ,)
&gt; I see what you mean, but I don't find it ambiguous, because it's very easy to tell which brace closes which block. I suppose it's one of those things that comes with long experience in C-style languages, though. If it's all on the same screen, it's fine in either language. My point is, imagine 20+ lines of code between each of those curly braces and the code spanning 2 or 3 pages in your editor. No amount of experience is going to let you see what's not on your screen. Do you constantly scroll up-and-down to see which braces match, or do you *think* you remember which ended the using and which ended the if? With VB.NET, there's no question. &gt; I'm in the process of trying to wrangle one of them into shape, and I know for a fact that there was an active decision to turn those off. You can't force people into not making poor choices. People can always make decisions to write bad code in any language. I'm guessing they had their reasons though, hopefully it wasn't simply to please their legacy programmers. The only *legitimate* reasons I can imagine for this are: + incorporation of legacy code + incorporation of legacy software developers (&lt;-- either lazy, refuse to learn modern ways, or simply no time to adopt modern ways) It is unclear to me why skilled software developers would start a new code base with these features off. As far as the pro-tip goes, that's great! I clicked on the "formatting help" link and it did not show markup for *code*, so I simply thought it wasn't supported. Thanks for the tip!
OK, I can see that as a complaint. I would say in either case the indenting is usually the visual clue that I use to match things up though. Which in your second example is a bit more clear as to the issue you're talking about. That said, you would still run into similar issues in VB if instead of a using and try block they were nested if statements though. I would actually argue in either language that if your code block is that large that you should refactor. But if it wasn't an option, I would say that code folding in the IDE would potentially sort of negate those issues. Or at least make it bearable.
This sounds bad. Cant you create a new solution and publish this library as a package
I hate C# written like this. Mere mortals should not use K&amp;R style braces. Those guys were gods. Have respect!
&gt; My point is, imagine 20+ lines of code between each of those curly braces and the code spanning 2 or 3 pages in your editor. No amount of experience is going to let you see what's not on your screen. Do you constantly scroll up-and-down to see which braces match, or do you think you remember which ended the using and which ended the if? With VB.NET, there's no question. Although 20 lines of code should be no problem for most developers, I see your point about larger code files and determining blocks. I would caution you that even with explicit "End &lt;block type&gt;" statements, that's a problem. And experience provides many answers: * Make your code more modular. * Reduce cyclomatic complexity (goes hand-in-hand with modular code). * Adopt code style conventions like good indentation to make it more obvious. All of these will reduce the size of individual sections of code, making that section more readable and more maintainable. Doing this is an absolute necessity for any but the most trivial of code projects. &gt;You can't force people into not making poor choices. People can always make decisions to write bad code in any language. Very, very true. No language will keep you from a determined suicide. &gt;The only legitimate reasons I can imagine for this are: &gt;* incorporation of legacy code &gt;* incorporation of legacy software developers (&lt;-- either lazy, refuse to learn modern ways, or simply no time to adopt modern ways) Given what I know of the project history, it was most likely the latter. &gt;It is unclear to me why skilled software developers would start a new code base with these features off. I think the problem may have been your use of the word "skilled", and that ultimately may be the major issue with VB.NET. VB has long had a more natural language-like experience as a design goal, and that makes it accessible as an entry-level language for new developers or people with a different background exploring software development. And I applaud that effort; anything that helps people who have never developed understand the basics of programming (step-by-step execution, data, branching, and looping (which is a subset of branching but I digress)) is a good thing. But too many VB.NET developers start there.... and end there. They never move toward larger things and end up content to build arcane spaghetti code with multi-hundred-line methods that have hyper-nested if statements, never questioning how bad that is. I have seen junior developers start with VB.NET and eventually become senior developers, but it's unfortunately rare. The vast majority of VB.NET developers I have encountered never become better than junior developers, even after 10 years. I shouldn't blame the language for that, it's not really fair, but... I kinda do. 
&gt; I shouldn't blame the language for that, it's not really fair, but... I kinda do. You are touching on a very real problem with the culture of VB.NET. It is both a blessing and a curse. VB Classic made a lot of people fool themselves into thinking they were programmers. Many were simply script kiddies that didn't understand the value of strong typing, modularity, inheritance, etc. It was a very informal path for entry into the world of software development. New employees could demonstrate their proficiency at writing Excel macros, then the next day his boss would put him on a Windows Forms VB project and change his title to "Programmer". If you can separate the legacy overhead of the VB ecosystem, modern VB.NET in the hands of a skilled developer is very productive and maintainable. The usual response to somebody mentioning VB.NET is captured by OP in the text portion of this post: &gt; Would anybody actively choose VB.Net over C#.Net in a project these days? Many people stopped paying attention to VB.NET, but it is in every way as capable as C#. There used to be a feature impaiity, but that has been remedied for quite some time. There's a big difference between how large organizations, small organizations, and software teams deal with software development. Large organizations tend to be entrenched in legacy technologies and people with legacy skill sets so the compromises they make focus on that. Smaller businesses have a constraint on resources. Independent software teams don't have the same constraints as either. VB.NET addresses some of these constraints, especially when it was new and there was still a huge VB6 code base out there, and there were many 40+ year old VB programmers that were staring into the abyss regarding their future career prospects. VB.NET provided an excellent bridge to a much more modern platform and set of skills. While I do appreciate VB.NET for its strengths, as a career move, it's not the best place for me to be. I would prefer to spend more of my time in the C# realm simply to have more options available to me career-wise. However I have fallen into building software for a part-time coder / businessman. He runs a business and knows VB.NET. He can prototype almost anything, but getting it field-ready for production is a bit of a different matter. He has no time to learn anything new (dealing with clients, making sure we get paid), and even changing from one framework version to another causes him extreme pain. My predecessor died on him, and his business was adrift for a few months and he was in a panic because he didn't know how to maintain anything. These days he wants to make sure he can maintain anything I build if something happens, hence we stick with VB.NET for his comfort. He writes a portion of the code base himself (a client app, I build all the backend stuff). It isn't the greatest code out there, but he's gotten it all working well through brute force. Occasionally he calls me in for some consultation for new features. Fortunately I do not have to maintain that portion of the code. Beyond that, I have extreme autonomy with what we build, which is a good thing. Knowing the .NET stack is much more important than the syntactical differences between one language and another. I've spent years learning the intricacies of .NET. I used to code C# and am confident it would be a matter of days / weeks before I felt 100% at home in that environment again. If I were to switch to Java, learning the language would be the easy part. It would take me months to feel at home with the class hierarchy and features of the framework, and probably a year or two to be an expert (if not more).
&gt; That said, you would still run into similar issues in VB if instead of a using and try block they were nested if statements though. Yes, in that situation it is at parity with C#. &gt; I would actually argue in either language that if your code block is that large that you should refactor. Oftentimes, a good approach, sometimes not though. Help from the IDE is always a good thing, but the IDE is not a feature of the language. We've been talking about language features. Some IDE features do compensate for language deficiencies though.
&gt; plenty of other stacks use XAML for layout What else uses XAML? I thought it was just specific to WPF...
I basically agree with everything you said; in the hands of a skilled developer, VB.NET can sing. But that's also the case with *any* language. VB.NET doesn't provide that, the .NET Framework provides that. VB.NET is just a single view into that framework. And I applaud that, if nothing else. I love that there is VB, C#, C++ (ish), even IronRuby, IronPython, and Jurassic/Javascript.NET. That's all a good thing, translating from one language to a single bytecode and using a single underlying API. And the great thing about that is the interoperability. I can have a VB.NET front end that uses C# .DLLs for the business logic and data layers. That enables you to split your team according to their strengths and preferences and still have the project work. I am of course, happily ignoring post-gold maintenance and developer turnover, but another great thing is that refactoring to translate from one language to another is *also* pretty easy to do, as there are very few innate differences between the two aside from syntax. But that's what gets me. I don't like VB.NET's syntax. I don't mind the stuff you've mentioned, basic block stuff... but the stuff that's been tacked onto VB.NET as the .NET framework gained new features like generics and lambdas has been... less than good. Awkward. Of course, I'm a big fan of javascript and its lambda syntax is almost identical to VB's... and just as awkward, IMO. So that's it. It really boils down to syntax preference. 
I'm pretty sure it means per platform that you deploy to. I have a business license(re: work pays for it) that lets me create Android apps, and I can use the development environment on up to four machines.
Well there is always going to by syntax preference at play, a lot of that is based on what your past experiences are. As a pure language feature discussion, I think VB.NET removes some of the ambiguity and possibility for mistakes that C# allows more easily. Maintenance is a huge part of the software lifecycle, I think some of the language features of VB.NET helps prevent some of those mistakes from happening due to its verbosity and explicitness. For me, this is a valuable feature. From a purely visual aesthetic, I think C# looks more elegant.
My boss has dictated that all new projects be in VB.Net because, coming from a VB6 background himself, he wants to be able to have the ability to go in behind us if he had to and understand what's going on. Reasonable, I suppose, but in practice he has never had to do that. I'm slowly turning him towards C# mainly for selfish reasons. I cut my teeth on VB.Net but simply find C# a more 'elegant' language for me even if it is functionally identical.
That seems an odd way to go about pricing, given that the main appeal of this product is the ability to develop for more than one platform. I guess it's aimed at corporations, not independent developers. To develop in Visual Studio for Android and iOS would cost $2000 per year plus the cost of Visual Studio.
That list is from 2011. Any libraries you find in this list that are up to date might be worth your time, since it lasted so long I suppose. Scott Hanselman does an annual "ultimate list," along with his posts featuring techniques and new tooling. Granted, some of these cost money, but it is worth your time to at least be aware of them. [Here is his latest Ultimate list.](http://www.hanselman.com/blog/ScottHanselmans2014UltimateDeveloperAndPowerUsersToolListForWindows.aspx)
I'll disagree with you saying vb.net removes ambiguity. I think it just moves the ambiguity around. For some tradeoff examples; parentheses are ambiguous in vb.net, `Nothing` is not the same as `null` ( an empty string _and_ an unassigned string are both equal to `Nothing`), there is no caller-side indicator of modifiable (out) parameters, and the ternary operator and null-coalescing operator both look like a function named `If` None of these are deal-breakers, but they're just as ambiguous and dangerous as `}` vs `End Using`. I'm not saying c# is better, because it also has warts - just different ones. (Although in full disclosure I certainly prefer c#) 
It all compiles to IL, but in terms of developing new language features, C# seems to be much more active. Also, VB doesn't have an as operator, which is absolutely infuriating. Additionally, the ternary operator executes both the true and false condition, which can cause runtime issues.
ya, its kinda silly. It's more to provide a more convenient GUI for who ever we create the database form for. Right now my idea is to copy the text in a textbox when I click on the textbox and have it paste into the text box in access (the access code I already have). I just need some java or something to copy the text in the textbox when it is clicked on. Thanks again for all your help.
I thought the list was there: http://www.nuget.org/
I started writing C when I was 10. I switched to C++ around 13 a few years before it was standardized and have been writing JS since the late 90s (and C# since mid 2004). 1tbs is so ingrained into me that I have a difficult time parsing Allman style code (it is just plain wrong). I suspect the same is true for many others. 
On my phone, but see if this helps: http://stackoverflow.com/questions/7393788/entity-framework-code-first-creates-discriminator-column The selected answer has a link about table per hierarchy. If I recall that explains it a little.
Web Essentials is now supported on Visual Studio Express! http://madskristensen.net/post/web-essentials-on-visual-studio-web-express 
... that is awesome!!
Thanks for the heads up. I think my problem is that I am deriving my subclasses from a concrete class (which I would think would work). I am guessing it should work if my concrete subclasses all inherit from an abstract base class?
So old. How can I down vote this twice?
You need Target per entity inheritance, you're using Target per entity Hierarchy inheritance. The former maps an entity each onto its own table/view, the latter all entities onto the same single table/view. So your codefirst setup is incorrect. 
&gt; The main reason to choose C# over VB is that the compiler is a lot stricter - you can't pass an uninitialised variable by reference, just for example. There is no such thing as an uninitialized variable in VB.
You can integrate Bing maps into your apps... But I don't know if you can add custom elements like subway lines.
C# is far worse than VB about type coercions. VB uses separate operators for addition and concatenation while C# just tries to guess the meaning of + based on the context. 
VB's version of the as operator is TryCast. I think this is better than C#'s version because it is far less prone to abuse. Literally 19 of ever 20 times I see as in a C# program it is being used incorrectly simply because it is easier to type than the correct cast.
I don't really need the bing map element, just the "subway lines". I guess a more relevant question would be what is the best way to include a graphical element within an app? Sorry if I'm not really using the right terminology... Essentially, I want to create something like this: http://www.youtube.com/watch?v=c8EyFrblAqE#t=46 
Thanks for the steer - I'll have a look into it.
Definitely exists on a regular 2013 installation to C, check the solution to make sure it's not a pre-build/post-build command hard-coded into the actual solution properties. Should find it under Build Events if it is, then you can just change the path
If I was going to build something today, I'd build on OWIN (katana). http://www.asp.net/aspnet/overview/owin-and-katana. Provides a nice abstraction that should allow minimum rework when vNext is released.
I know, Excel. Yurk and everything. However, our employers and clients uses it and it connects to something we all love and enjoy (?)... WCF. That and oData. 
Some people write scripts to change how their monitor renders code. Some people just rotate their monitors Pi/2.
Hey. I'm an ASP.NET MVP and I'll share what I can with you. First, focus on OWIN. This is going to be the main way to build application in the future. MVC 5 is not compatible with OWIN. The next version will align with future direction. As for release date, I can't talk specifics but I can say that things are developing quickly. 
Whoo, I worked on this.
MVC 5, but avoid using HttpContext.Current, and you should be fine.
There is no clear information on this. All they said is "months" - so I would not count for it on 2014. Most likely early 2015.
Yep, it sounds like they're going to take the ASP.Net pipeline and integrate OWIN support. Right now, you can't really take an ASP.Net MVC/WebAPI project and self-host it apart from IIS.
Even with a vertical monitor this extension is a nice feature. It basically reduces the space lost by empty lines, without removing their benefits.
What kind of ridiculous rule is that? Print all source code in a PDF? What university do you attend to?
1. Make screenshot of Visual Studio having the file open. 2. Insert screenshot into a word document. 3. Save the document as a PDF. 4. Repeat. :-)
Yes. I was being facetious.
Yes, but you can't (easily) switch between self-hosting and ASP.Net using the same configuration settings. Say I use IIS/ASP.Net to host my API, but I want to self-host during automated integration tests so that I don't need to install IIS on the build server.
Agreed. We are required to hand in a .rar file with the whole solution anyway (even though team foundation wont work). It text is in danish, so it wont be much help, but trust me - i asked several times to be 100%. CutePDF was my starting point as well, but like i said, its gonna be a huge pdf when all the css, less, cs, cshtml, etc, etc files. And i'm looking to avoid doing a ctrl+p on all files.
I just wish VS supported Cordova without needing Windows 8. We can't have Win 8 at work. 
Facetiousness is funny, keep up the good work!
*shoves appreciation in face*
Additionally to what /u/AngularBeginner said, you should definitely take a look at the `+` operator as well! ^^I'm ^^joking
&gt; Or you could just put the opening brace on the same line and save space and make your code less prone to errors at the same time... Hell no.
That's still ridiculous though. :P I graduated from danish university as an IT Engineer quite recently and I never had any hand-ins other than a zip-file containing everything that mattered. 
EF has nothing to do with ASP.Net other than the fact that both are often used together. It's just a NuGet package.
WinForms will not be part of it. Console Applications will be. Your question and your title are unrelated. EntityFramework on Mono will support EntityFramework in Mono applications. That's it.
Writing in pen and paper in an exam is something reasonable, even in 2014. But printing source code as a PDF is not.
Me too. Java both times. C# exam was to compile the code we get on pen and paper and writing out what output should look like if the exam was compiled with a real compiler. The horror. This was in 2013/2014. A major uni in Sweden.
Completely agree, it sucks. Waste of work.
Especially when no one will look at it. Maybe just to check that its there, but other than that, they will just open the solution.
I learned on K&amp;R style, but personally like All man style for everything these days. Far easier to find blocks of code, especially when properly indented, which vs does for you.
I haven't seen a statement yet where they've clearly committed to keep EF working on mono like they have with asp.net vnext. If it does work on mono, then yes it will work with any mono supported interface technology.
Books. Pro asp.net mvc was a good start for me. All videos that you can find on asp.net too. I dont think there are any "next level tutorials" after that. You're on your own :)
Hmm, I might be able to handle Pro ASP.NET now. Back when I had absolutely no clue about ASP.NET, I tried reading that book and found the first hands-on app to be completely overwhelming. It felt like the book was throwing the kitchen sink at me and expecting it to install it in my house. I was wondering if there was an ASP.NET equivalent of the wonderful [Michael Hartl's famous Rails Tutorial](http://www.railstutorial.org/book) for Ruby on Rails. I noticed that the Pro ASP.NET is for MVC 4.5 and not the latest MVC 5. Does most of the book still apply to MVC 5?
Pluralsight has some great videos. Pretty sure some of the asp.net ones are even free for anyone. I'd recommend using their trial before buying a book
Is there more to MVC programming than filling out the pre-filled MVC templates?
My bad. I hadn't seen it yet and came across it, just thought I'd share. 
[ref keyword.](http://msdn.microsoft.com/en-us/library/14akc2c7.aspx) [Delegates and Events](http://msdn.microsoft.com/en-us/library/orm-9780596521066-01-17.aspx) XML Literals are a VB thing, but Linq XDocument stuff gets you close.
The ref keyword is incompatible with properties in C#. 
Yeah, the same kind of event handling that Delegates and Events in C# does. [Like this.](http://stackoverflow.com/questions/4762020/vb-net-to-c-sharp-help)
Oh, and here's the real kicker: He agreed that caching would be the way to go, but his solution? *Roll my own singleton*. Because yeah... I totally want to build my own cache, complete with managing timeouts, refreshing, and all of that, when System.Web.Caching/System.Caching already do that for me. 
That's exactly what I thought. I've used System.Caching in load-balanced configurations where, yes, while each server would have to build its own cache (we didn't bother with doing SQL caching), that server-side instance of the cache is shared by all requestors. It scaled just fine-- we had over 1000 users hitting that service, and the memory usage never spiked over ~500k. I think I'm going to take this sample app and show it to him. I'm starting to wonder if he is confusing System.Web.Caching with Session. 
How is it possible to have so many clueless Architects around?
This guy is one of those grizzled old types where, in his day, you flipped the bits by hand, and YOU LIKED IT THAT WAY. Everything he talks about seems to focus around how *something* (though he can't tell you what) is a bottleneck, and how, obviously, what your app is doing is bringing a shared resource to its knees. 
i think this guy have to be either fired or retrained. his job, like ours is to learn something new every day ! 
He is. As long as this is a single event, don't worry, people have bad days, and one can forget that Session and Cache works differently, and also confuse the names. You are objectively right. If he doesn't learn from this mistake, and accept your explanation, he should be fired. This is kiddy grade stuff.
Sidenote: In .NET 4.0 (and later) you can use the *MemoryCache* class from *System.Runtime.Caching* for this.
Small proof of concepts are a great approach when testing assumptions. Just because someone has an architect title doesn't make them a great programmer. Its unfortunate you have an inflexible guy designing your project, and because of that don't be surprised if he is wrong a lot.
Starred! And signed up!
As a side note, the standard implementations of SessionState have some [pretty bad performance impacts](http://stackoverflow.com/questions/3629709/i-just-discovered-why-all-asp-net-websites-are-slow-and-i-am-trying-to-work-out). Every request locks the session, locks are slow and this means that each user can only be executing a single page at a time. I'd suggest totally avoiding it if possible. Most of the time people are just using SessionState for authentication, which can be done using ASP.NET auth rather than a session. 
Awesome! I hope you'll find something good and usable in the repo :)
I have to say I am impressed with how much you've done all by your lonesome :) Then again, the UX is already done, you just need to color in the page with a new ASP.NET flavour. And I completely understand how oversimplified I just made that out to be lol. Theres a lot to making a system such as this, and I can see it in the result!
Thanks :) I agree about the UX and I do plan to change it asap. I did spend quite some time developing this and it was rather painful at first. I am still learning and I will probably need to refactor a lot of the code as I discover better ways to do things. Also, pull requests are very welcome ;)
We've just started getting into it at work. Right now, it's more of a caching layer in front of a SQL database. It definitely takes a shift in perspective from normalized SQL structure. Denormalizing into aggregate roots and eliminating references where possible takes a minute to get comfortable with, and figuring out where to draw the lines between a denormalized, contained entity and a separate referenced aggregate takes a few. But I will say this, it's definitely very fast thus far. Putting it in front of a data warehouse has allowed us to speed up requests by an order of magnitude or two. An interesting article regarding how Raven does its storage and indexing under the hood: http://ayende.com/blog/164066/ravendb-acid-base
I really appreciate your feedback on this, I'm trying to get my work in on this as well. So far, no go since there isn't a ton to back it in support and its not the easiest to set up
Facebook is built on MySql. I think you'll be fine on scale. Also, liking the idea of something might possibly be the worst reason you could ever choose a technology. More mistakes have been made in programming for this reason than for any other. I am speaking from personal experience, as in, my own mistakes for that very reason. You should educate yourself on document databases a bit more before you decide to choose one. It's not all honey and roses. Despite what popular culture in the programming world would have you believe. It has it's purpose, just like RDBMS. They are not interchangeable.
Well this is definitely good to know. When you are talking about scaling, I assume that you are focusing on speed of queries and not maintain code right? 
That's more or less why I'm asking this. To see how people have used this in their dot net experiences. If you have some bad points or good ones I'd love to read them 
No, I'm talking about the ability to handle a very large number of database operations (in the millions) and handling load across multiple DB instances. Raven just couldn't keep up and kept crashing for him.
I've been working on a pretty big project for over a year with RavenDb. We picked it because our implementation was not overly relational (more like object persistence than a database) and we liked the performance. Also: - optionally embeddable in our own service (that's what we did) - redundancy/scalability (replication/sharding built in) - extremely (almost obscenely) .NET friendly. Queries are LINQ and so are map/reduce index definitions - open-source/commercial license - fully transactional Can't think of any specific ravendb drawbacks over other nosql solutions. But of course if you go down the nosql road and you realize later that you actually have to have some relational data it can be problematic. Although ravendb in particular does provide some help for this like loading bits of several document from an single index, or to specify a document parent-child relationship for deleting, etc. 
This is the best example so far, so thanks for taking the time to type this up. I'll have to spend some more time checking out the implementations of raven and sql
So it had isolation and concurrency issues basically then. That's more the answer I was looking for, was looking for feedback on how that worked with dot net. Edit: I have no idea why I'm being down voted for this
Does this mean for instance that you can only call upon on instance type per session? Or could you do all the relational algebra in linq?
No tool is smart enough to save a programmer from their own bad code. And no tool has an "is scaleable" switch. The most importantent part of making a system scale is your code.
http://www.codeproject.com/Articles/483055/XML-Serialization-and-Deserialization-Part
RavenDB has a very low consistency level ('Eventual') as well. First define what you want to do with your data, which consistency level is required, then check which databases match that requirement, then pick the best one for your application. Chances are you could easily store the data you'll be storing in a single Postgresql instance on a single linux VM.
&gt; fully transactional That's a fallacy. They have no full ACID across replicas, only to the node you write to. At best it's Eventual Consistent, which isn't compliant with ACID. So even though it has 'transactions', it doesn't give you what you think it gives you.
Yes. It's eventually consistent, which is a benefit IMO. I meant "transactional" in that writes are atomic and guaranteed to be committed (to the active node). There's also the concept of a session-level transaction and DTC support. It gives me what I think it does.
&gt; you can only call upon on instance type per session? No. &gt; could you do all the relational algebra in linq? Yes. 
&gt; I meant "transactional" in that writes are atomic and guaranteed to be committed (to the active node). Yes, but that doesn't mean anything, it's not guaranteed you're going to read from that same node after that and it's not said when the change is propagated to the other replicas. Or If that ever happens, e.g. due to a partition. 
PEOPLE! Stop down-voting things you don't agree with. There is lots of room here to debate what it means to be scale-able and how to go about it. Let's not attempt to hide comments that could lead to a great learning discussion. 
I think so. Like I said: &gt; It has it's purpose, just like RDBMS. They are not interchangeable. And both are perfectly scaleable if you know what you are doing.
I don't think C# really has a lot more features than VB.NET. However, its syntax can be much more elegant. For instance, [lambda expressions are more concise in C# than in VB](http://visualstudio.uservoice.com/forums/121579-visual-studio/suggestions/3741764-allow-c-style-lambda-expression-syntax-in-vb-net).
I've been using [PhoneJS](http://phonejs.devexpress.com) for Cordova support at my work.
IT WORKS GUYS !
Can you provide a use case for the scenario that you are describing? Or are at the base provide an example?
I am using the Kendo MVVM which is based on/ modelled after Knockout. The Knockout vs Angular argument can only be solved by testing and playing around - see which one you like the most to get the job done.
Coincidentally, the (new) guys in my office that want Angular are the same ones who would rather hand code a grid than deal with Kendo. Of which, I am also a fan. 
&gt; To see how people have used this in their dot net experiences. Well, you're focusing on all the wrong things. Document vs RDBMS has nothing to do with the language/framework you use. RavenDB or Mongo, Microsoft or MySql, the choice should be with the purpose you want to use it for. Which is outside the scope of this conversation. Google is your friend.
It's totally a personal preference. I have tried both and personally found Angular made more sense to me and felt like a more complete solution without additional libraries. I also liked their documentation better. It's all personal preference. 
I really love Kendo and use it's MVVM and templates quite a bit. I cobbled together a way to use it with the Kendo MVC razor helpers by using the Kendo Deferred scripts inside a script tag with type="text/template" and loading the script up in the angular controller by calling Eval on that element's html(). This way, i can bind event handlers and such to functions in the $scope. It actually works quite well and I can leverage the best of .Net MVC, Kendo, and Angular.
I'm doing the same thing except with knockout view model events. The [Kendo Knockout library](http://rniemeyer.github.io/knockout-kendo/) hooks up some of the Kendo controls to Knockout view model/bindings.
I actually prefer Kendo's observables to Knockout's. I haven't found a reason to use Knockout along with Kendo. 
The all singing, all dancing library seems attractive. But that's kind of my point. ASP.Net MVC, all of it, not just the controllers, seems to handle much of what Angular is selling. This seems to be a cycle with programming libraries. 
Kendos MVVM is enough for me too
The thing is in 5 years we will either be saying "Oh god why so much C#" or "Oh god why so much JS"
JS is a pretty poorly designed language. The biggest problem is it isn't a compiled language. Have you ever tried to re-factor a large .js app vs a large C#? That's not to say .Net and C# are the end all be all. But if you have already decided to go with a .Net stack and the team has strength in C# it wins in my book. There are certainly other scenarios were a JS heavy architecture would be preferred, like if you want to have less load on the server and offload that processing to a client browser. 
&gt; hipster conference fodder I'm totally stealing this 
Knockout and AngularJS can't really be compared, as they're different things. Knockout is a small micro framework for model binding, while AngularJS is a huge framework for various of stuff - model binding just a small subset of it.
Using breeze.js along with knockout would achieve the same goals. Durandal + breeze + knockout is all together what compares with Angular. The durandal team is merging with the angular team apparently to provide a similar experience with both.
Frameworks like angular really allow you to get away with less javascript. I'm in process of converting an MVC app to an angular app and not only have I had a great time doing it, I've reduced bandwidth between the client and the server as well as pushed a lot of the processing off of the server and onto the client. Total page weight on them is about the same since what you gain by pushing down json view models instead of fully databound html, you lose from the extra JS you have to write. Just personal experience but working with Angular it seems like the stuff I'm writing is ending up consistently faster and less chatty. I'm really a fan of it.
Angular is designed to be a SPA. Single page application. You load up a single main page and everything else is just partials. You could load those through MVC if you wanted, or just straight HTML. Angular is better suited for applications vs regular websites, and meshes great with web api / rest based backends. With angular you move most of the work to the client instead of the server.
I've heard these arguments before. SPA is another buzzword to me. A SPA algorithm is simple enough a staff developer could accomplish this in less than a days work. Knockout templates work fine for me. Even to get simple URL routing and browser behavior a lightweight plugin like PagerJs fits the bill. &gt; Angular is better suited for applications vs regular websites What does that even mean? I get that most of the code lives on the client, but are we redefining what a "web application" means just because Angular said so? I thought I've been building those since classic ASP.
Hmm. A full offline app and you're using a web client? 
You write to master M, but a partition occurs after that and you can only connect to the newly elected master N in the reachable subnet after the partition. Your data isn't there, while M acknowledged the write was successful. Even if there's no network partition, reading data after a write based on a query will likely not return your data just written as the reads are based on indexes created on stale data, typical for eventual consistent databases. I.o.w.: if your app needs to read data back it has just written (e.g. you post an order and the user now wants to see his order overview) you yourself has to make sure that actually is correct. There's also a high chance of data loss, when partitions heal. RavenDB doesn't have proper code to overcome typical issues when that happens. Most NoSQL databases don't, btw. 
My latest smaller projects were simply Knockout, linq2SQL data models, and Web API 2. I used some jquery plugin for validation -- but it reduced the code across both client and server, immensely.
I haven't watched this video yet (about to head to work), but I played around with vNext a few days ago. I think it's going to to be pretty awesome. If you've ever developed with NodeJS, it is extremely similar. 
I've used both and I prefer Knockout over Angular. It's a cleaner design. Ultimately, all of these crappy frameworks come and go. Don't get married to them. Use what works. I don't like angular because it's too big and tries to do too much. I feel like it's not popular because it's good - it's popular because it's google. 
Rendering discreet DOM elements and binding them to data from an httpResponse was happening long before someone coined the SPA phrase. I rolled my own json view model binding with Newtonsoft serialization before knockout came along. 
&gt;If assholes could fly, this place would be an airport ... Not applicable here, but I've been dying to use it and not had the opportunity yet.
Thats great. Do it however you want. Hell recreate everything from scratch if you want. I'm not going to argue with you over it. I told you why its popular, and know its not the first to do it, it just does a great job.
Use typescript instead of straight Javascript. It compiles direct to JS, you can even use straight JS if you must, but you still get compile time type safety and it makes it so much easier to work with for large projects.
I was quickly annoyed about the administrator mode.
But thats a security feature... how often do you have to update your host file? Just run notepad++ as admin to change it.
Its a dev box not like it runs in production. As a developer I change it often enough to get annoyed and not that often that I forget to run notepad++ in admin mode :)
I've no problems using straight javascript, you might be referring to another commenter in the thread area. Typescript is a good answer to those looking to make the learning curve into JS a bit easier (coming from C#) -- but I say just dive in and understand the wonderful world of that prototypical language. It's very powerful and flexible.
I win?
I was more commenting in addition to your comment :), I think Typescript makes it much easier to convert, and still allows you to do everything with regular JS that you'd want, while making sure you don't kill yourself over typos or wrong types.
&gt; I'm sorry, did the middle of my sentence interrupt the beginning of yours? Also not applicable but leaving it here since it also is a line I want to remember so I can use it appropriately in the future. 
I agree that you shouldn't overload your servers, but server RAM and CPU, especially in data center environments is cheap. Devices, I think, are the focus point of dialing in client optimization. PCs may be the target for data entry and CSR type worker bees, but tablets and phones have finite battery and RAM specs. I don't want to give all my processing and javascript JIT compilation to a client device that's not optimized for that workload. 
I recognize that. I just think that that's a lot of work for something that would be easier with a native client. And the opposite is true, we have AAA game titles for PC and consoles that won't function offline. 
I like
A compiled language is superior because it does its lexical &amp; syntactical evaluations at compile time - with the added bonus of telling you where you messed up at the same time. It can also be optimized to processor architecture. Of course, his reason ("Because people write bad code") isn't really a strike against interpreted languages so much as shitty and/or ignorant programmers. (That's ignorance as a state of being, not a vice. We are ignorant of that which we do not yet know.) Design patterns exist in JavaScript - we're only just now starting to figure out how to use them. Let's learn how to do it right and stop writing shitty JS like it's 1999. 
here's a couple: [Facebook Abandoning HTML5](http://www.service2media.com/blog/facebook-app-not-slow-if-built-with-a-hybrid-platform/) [Why LinkedIn dumped HTML5 &amp; went native for its mobile apps](http://venturebeat.com/2013/04/17/linkedin-mobile-web-breakup/) Yes, web apps ease deployment concerns but the trade off is optimized performance &amp; UX. 
Notepad++ was great. Until I discovered SublimeText
Well I'm not going to find a citation on subjective topics like *easier*. Anecdotally I can say as I've bounced from Win32, WPF, Silverlight and web app development, web app dev is significantly more time consuming and difficult to dial the same behavior a few simple properties of a desktop object yield.
I was just asking him to backup his claims. I give up though as its not worth my time if he can't see there are good uses for web applications over native ones. Edit: Just look at all of his responses in here, he made this thread to get support for his thinking that angular is junk against ASP.NET MVC even though they are completely separate.
I love hostsman, can't live without it.
Last year, the VS Team committed to quarterly releases. Not too sure what their point of "again" is.
I'm just saying given two very large, C# &amp; JavaScript code bases, both done properly as if Douglas Crockford and Jon Skeet wrote them, the C# code bases will handle major re-factoring easier because of the compiler and tools like resharper that leverage it. 
I win?
You are perceptive. I want it all. Support me. Condemn me. Super! It's reddit, not my corporate discussion portal or stackoverflow. We're all trolls on some level here. I did actually pursue democracy in my office. We had a demo day where we all brought our js lib of choice and the guys who brought Angular showed the service piece as the only opportunity for .Net to contribute. They showed a similar stackoverflow and google trend. Valuable, but not bulletproof. Indeed, I have *not* spent productive time on an Angular app. A bit of pluralsight, some reading, and yes, pretentious elitism hours spent at conferences. I am indoctrinated in .Net (this is the sub for that). My DHTML skills started with ColdFusion (not .Net, but very similar to classic ASP(.net1.*). My js skills were weak for a few years but grew thanks to jQuery. Last year I got to design &amp; build an app basing it largely on the MVC4 project template included libraries (I'm aware of the difference between NetFx assemblies and public js libraries). I extended some of them and grabbed others along the way as well. I see Data Annotations, .Net OO patterns, Razor, bundling, minification, and pre-compiled assets feeding a two-way client binding mechanism as a pretty good deal. Perhaps if I were to have started in Angular instead of KO, I would have a different perspective than I do now. Third party libraries inherently break the pragmatic rule of not using wizard code you don't understand. KO has it's share of "it just works". Choosing &amp; configuring libraries is the tradeoff for not building it yourself. KO seems to support a lighter footprint than Angular, which has had me sold for a while. I didn't intend for this thread to flare up, but it seems a lot of folks are interested in this topic. What's not to like about that? I can't help it if I want to throw some attitude in along the way. FWIW: There's some great feedback this thread has produced. There's a great community here that provided some perspective I didn't have before. 
No thanks, I am not a writer. I was just wondering why InfoQ is making a point of VS being updated so close to last release, when the team has previously announced their update schedule to be quarterly. I suppose people have to write headlines to get noticed, something catchy. 
I didn't realize!
You might do better posting in r/nodejs as most people are probably using .net in some fashion.
/r/nodejs ***** [^report ^a ^**problem**](http://reddit.com/r/LinkFixerBotSnr) ^| [^delete ^comment](http://www.reddit.com/message/compose?to=LinkFixerBotSnr&amp;subject=Comment%20Deletion%20%28Parent%20Commenter%20Only%29&amp;message=%2Bdelete+chthufg) ^| [^source ^code](http://github.com/WinneonSword/LFB) ^| [^contact ^developer](http://reddit.com/user/WinneonSword)
I don't think this is a ASP.NET type discussion as this could be any framework. You'd probably be better off in a programming or generic sort of subreddit.
Just took the cert today. Had to go to a Prometric test center that doesn't allow cellphones or internet and you had to provide two forms of ID. That test 70-483 is actually pretty tough (I passed :)). I would not suggest someone with less than 3 years of C# experience taking that test without a lot of studying or you are just stupid lucky. 
Has Microsoft ever sued a developer effort like Mono? From what I can tell, Microsoft has been helping the guys at Mono quite a bit. And over the last years, Microsoft has been quite open to the open source community, publishing code and documentation all over the place. I think Microsoft wants projects like this to stay in business.
I'm not sure I understand the problem correctly... The linked JavaScript file is also very weird, as it contains HTML. It does not matter where in your HTML you include a script-tage - the script will be loaded and executed. In this script you would manipulate the DOM. So placing your script-tag at that location is really weird. And please don't make cross posts after not even 15 minutes... Make cross post if no one can help you in your original post after a longer time.
Oh, I see. My apologies about the cross post, I wasn't sure if I should wait, or do it anyway to get more coverage...I wasn't sure if the question belonged here or in /r/JavaScript, since the JavaScript works on its own, but not in my MVC 4 project. The JavaScript file itself doesn't include any HTML (other than creating the new table, tr, and td elements. The pastie link that I posted was the full .html file with the JavaScript embedded within, which works. In my MVC project, though, I have the script in it's own .js file (minus the HTML tags present in the pastie.org link), and am referencing it with the appropriate script tag. I mean, it works, there's output on the page, but it's not inside the div in which I called the &lt;script&gt; tag. Is there a way to target the script so that it only displays within a specific &lt;div&gt;? If it helps, here's the breakdown on the project and the files that are called: _Layout.cshtml gets called first when a View is requested: http://pastie.org/9233792 Elements.cshtml is the View that got called by the controller: http://pastie.org/9233797 Elements.js is the JavaScript file called inside the Elements.cshtml View: pastie.org/9233798 As I said, the script works, but the output isn't in the correct location...it's outside my entire page layout, when it should be inside the 
Mh, more then suing at best they can release a new version of the .net framework and put it under a closed license. That would be however improbable... even if microsoft will be capable in the long time to regain a big part of share, like &gt;51%, in the os (mobile + desktop + server) side. I think, now that the big part of .net is under Apache License we can stop fearing this types of behaviors 
The problem is line 13 in your script. You created a grid and append it to the **body** of the document - this means you add it to the end of your body. This is not what you want. I'm not that familiar with JavaScript, but I think something like this is rather what you want: First add an additional *div* where you want your grid to be added to and give it a unique id: `&lt;div id="periodicTableGrid"&gt;&lt;/div&gt;`. Now in your script you get this element first, and then add your grid to this element: `var elem = document.getElemetById("periodicTablegrid"); elem.appendChild(grid);`
According to a recent webinar I watched the .Net framework is moving to a Nuget based model to make the framework more more modular and with the goal of supporting mono and other non-windows platforms. Project codename "K".
See everyone always says this, but I can't see the evidence for it with .Net. It was an ECMA standard back in 2005, no one cared. Microsoft originally tried to fork Java, they wanted to create a bunch of extensions that let you make 'windows like' applications, without the massive bloat that even AWT had. The thing is, I quite liked them. I liked them more than JNI too, at the time I was making something based around a microcontroller talking over RS232, it was much easier to make my front end logic in MS Java, and the 'core' logic in portable Java for want of a phrase. Sun sued the crap out of them. Meanwhile, Microsoft haven't done anything so aggressive with .Net. Mono have made lots of cool stuff **that only runs on mono** and it's cool! I quite like the C# shell thing. MS haven't sued them. Clearly they have behaved better than Oracle/Sun. What MS need to do is be smart about the long term. I'm often amazed how other people see them and the 'cost', I was at a London event a few weeks back, talking with some Node.js guys, they asked me if using .Net was expensive because of the windows tax. I was surprised to say the least, in my experience of node, my c# runs an order of magnitude faster. Some people dislike paying for software, even if it saves them more in hardware. I think this is MS's biggest obstacle. They need to ensure that people will continue to buy their software and tools even if the free ones gain traction. I remember people commenting about Netscape and such, what a selective memory they have, I remember IE4 as being amazing. I could do so much cool stuff with it I couldn't with others, I could play a video or music, I could even interact with the system via activeX (a bad idea, but cool none the less, simple, web delivered fat clients). The worst thing I think MS have done, is use un-documented APIs for their own products, giving them better functionality or performance than their competitors, but just compare how say Apple do that on their iOS devices. It's not really that evil, it's just placing your devs above 3rd parties.
The author of the blog has just listed a bunch of features vNext has and does not make any comparisons to Node and I think he has only included it in the title to improve search hits and bait people to read the article. &gt; Another notable point is that Roslyn and vNext are open source. This is a new approach for Microsoft. Is this because of the success of Node.js and the proof that a community can bring many benefits to a platform? The ASP.NET stack is already open source for a long time, before NodeJS gained popularity. Same with other frameworks.
We looked at RavenDB when we were investigating persistence options for our application's "configuration data". The data includes user accounts, user settings, and client configuration and settings, etc. A lot of this data is very hierarchical and is nicely modeled in documents. In addition, the data is rarely changed and is often cached in memory by the running application. Thus we concluded that a document database was probably the best approach. One nice feature is being able to "save" and "load" an entire document at once without dealing with multiple relations and tuples as you would in a typical relational database. So RavenDB works extremely well for this use case. We aren't concerned with scale, so only one node was necessary. At the end of the day we decided to not add extra infrastructure components since we already had a beefy SQL Server. However we _really_ like the client API and usage patterns built into RavenDB. So we built our own "document database" API, inspired by RavenDB's client API, on top of ADO.NET and XML data stored in SQL Server. It works quite well and allows us to leverage our existing SQL Server infrastructure investments. TL;DR: RavenDB is a really good document database. But SQL Server can also be a capable document database. It depends on your use case.
Thank you. Exhausting would be correct. Nerve wracking would be the other. That is good to hear that it isn't all bad. The MTA doesn't look so bad. Some certs in that I may want to do. The MCSD seems to be moderate to difficult depending on who you talk to though.
Microsoft's most strategic product in my mind is Visual Studio. It's such a vastly superior product to all of it's competitors and it's so low down in the development stack that it can have a huge impact on technology decisions. As long as they can maintain the huge productivity lead they currently enjoy over the competition, it makes a Microsoft stack much more attractive to the enterprise world. If you can increase the productivity of a whole lot of people, it's easy enough to cover the additional license costs. 
I feel like VS isn't their main goal. Azure will be their money maker. 
As an amateur ASP.NET developer (2 years experience) are you using Knockout.js or are you using Knockout MVC? I'm only now starting to learn how to integrate JS and jQuery into my applications and could definitely use some pointers on this topic. Any feedback is welcomed. Feel free to reply or DM
Oh, I'm not at all saying that VS is their cash cow. Quite the opposite really. What I'm saying is that it's so far ahead of it's competition and such a fundamental piece of the whole technology stack that its able to sway decisions about the entire stack. You are right that Azure is where they're going to make their money. Azure is the reason they can support mono without shooting themselves in the foot financially.
God I hope not. I'm convinced that Node.js is a practical joke that went way too far.
Can't see the hipsters taking to a Microsoft technology
Have you checked out Pluralsight? It's mostly .net stuff.
And he could have made the comparison. vNext certainly took inspiration from the advantages Node.js has.
Most of the mentioned tools are either rubbish or seriously outdated (either old JDK versions, old C# versions or their demo's are dead, and no one is gonna pay cash monies without being able to test it first). They also suffer from other problems, like the fact that idioms don't translate 1:1, and what are ya gonna do when you hit tricky covariant types? IMO, if you have Java that you want to use from .Net, either convert it by hand (that way you know its correct and you aren't going to end up with weird bugs that are impossible to find), or use [IKVM](http://www.ikvm.net/) and keep the Java in Java (which works pretty well, plus its FOSS).
Converting it by hand I'd imagine would be best.
Thanks I bought that. 
That's interesting. Gives me some keywords to look into that I'm unfamiliar with. In some areas I'm terrible, others super advanced.
F#? :)
It's a great platform for lightweight API development.
If by ".net architect" you mean "solution architect," think twice. Some of the most ignorant people I've ever had to work with were solution architects. Lots of technical knowledge, but amazingly little knowledge of the task at hand, i.e., the actual project. They do seem to make a lot of money, though.
Get the book "Design Patterns" and adapt them for C#. Understand which patterns are no longer relevant, which ones can be duplicated exactly and which ones need significant adaptation.
The company I work is trying a similar thing called k2, at least I think it's similar. The problem is the approach is fundamentally flawed. For anything but the simplest crud apps your data model is different from your UI model. Design your ui around your users tasks, not the database structure. 
I really liked this book. It talks about some of the internals of .Net http://www.amazon.com/gp/aw/d/0735667454?pc_redir=1401202785&amp;robot_redir=1
Maybe [Visual Studio LightSwitch](http://msdn.microsoft.com/en-us/vstudio/htmlclient) is that what you are looking for.
A company my area is using it for a sports betting site. Can't wait for the hilarious results when the realize there is no fixed point arithmetic. 
Haha love the delegates comment, I'm in the same boat. I know what they are, how they work, how to use them, etc. But can never figure out when to use them, I just never see where a delegate would fit better than something else.
You wouldn't be using delegates much nowadays because we already have lambda expressions (which are delegates by the way with a pretty syntax). There are still some cases though where you'd write a delegate or a lambda expression. For example, If you find yourself writing interfaces having only a method, then in most cases a delegate will be appropriate.
This fills me with horror, both as a consumer and a developer. Frameworks that try to do this inevitably fail hard. 
You might want to use a custom style like [this](http://mahapps.com/) The default style for WPF controls aims to resemble the one native to the OS you run the app on, but some parts of it (ListView comes to mind) haven't been updated since Windows Vista.
Have a look at http://mahapps.com/ pretty neat stuff for metro design.
Cheers, I have not seen this before, will be definitely checking this out. 
Well .net architect is still a pretty general title when trying to get to a job description. I don't think most companies really know what that exactly means. This pluralsight course defines it pretty well. http://pluralsight.com/training/Courses/TableOfContents/developer-to-architect
Not related to your question, but I still need to say it: if (is_404(serverError)) { ... if (isIgnoredError(ex)) return; **Please** stick to the common C# naming guidelines. Don't have camelCase method names. Don't have method names with underscores. The better alternatives are `Is404Error(..)` and `IsIgnoredError(..)`.
Can you explain what you mean by "reference a resource in your page that does not exist"? If it were an image, I would have expected a 404 to catch it, so I think I may not be understanding what you're saying. Also note that the serverError.Message is the following: _Exception of type 'System.Web.HttpUnhandledException' was thrown._ I do email the message of the exception, along with a stacktrace. Part of the reason why I'm having issue is because literally *everything* I'm seeing is generic. The only useful piece of information I'm getting is the URL that's generating the exception, but that only helps me if I have some idea of what's going on. Otherwise I'm just going to have to start wrapping things with try/catch blocks randomly and hope I can catch the problem.
I think the part that makes me slap my forehead is knowing you missed that is_404 and isIgnoredError are using completely different naming formats (although for a very specific reason). Thinking you know how this code should be formatted when you know nothing about the company, or the dev group that produced it, is the height of arrogance. This will be the last response you get from me unless you deign me worthy of an actual response to the question at hand. 
He was just trying to help, you can take it or leave it.
Build your own! WPF control development is exciting and rewarding. Totally worth the trip down the rabbit hole. You'll come to learn a lot about how the framework really works and you'll be able to build interfaces that fit any requirement. Learning good design may take a little more time. If you don't want to learn about design, you can copy whatever you see in the wild.
&gt; what do you recommend as a way to identify the specific error? If you're already doing this then please disregard, but it isn't clear from the post - My recommendation is to log the error as close to the actual exception as is possible - e.g., by adding exception handling to your page and control events instead of the catch-all global.asax. There are compilation utilities that can assist in this if you think it's too much work to do manually (Postsharp for one). Letting the exceptions bubble up to the global.asax handler will work, technically, but I don't believe it's good practice and you're almost assuredly to lose some pertinent information.
I agree with everyone thinking this is a bad idea. I just hate to think there isn't a better way and this is how it will be for the next 50 years.
Wow. Go fuck yourself.
Well, you know, he's right. Those are not C# naming conventions. If I saw code with those names, I'd immediately distrust it and have great suspicion about the qualifications of its authors. One look at that code and you know C# is not the authors' expertise. Smells bad, bro.
The correct thing to do was just ignore it. You're a terrible person for your response and asking generic questions about your shitty application on reddit. 
bro, I was just trying to be helpful and let him know specifically what about his posting style was causing him to be received badly. He can take it or leave it, why are you getting angry dawg? don't be this guy bro: http://www.youtube.com/watch?v=vgdlE3uhYpk You'll die early and the welfare system will have to raise your children.
Are you real?
Conventions are good, no need to get your panties in a bunch. Using conventions IS effective because chances are someone else will have to mess with that code someday.
I like your style. Not your coding style, obviously, but the cut of your jib. You and your huge rooster, sir—carry on.
plot twist: a different convention is being used. double plot twist: said company hired people who can read code with differing capitalization conventions...
you're supposed to get angry and slam your face into your desk, tell me why I should die in no uncertain terms, and then go draw a rage face comic and bask in the sweet sweet karma of superiority. This turning it back on me shit needs to stop! :)
Just because you can doesn't mean you should. There is a C# standard that is used by the vast majority of competant developers, I assure you this is not because they can't decipher Im_SoRAD_IUseMy_OwnCONVENTION case.
I just... It's a conundrum, and I'm unsure as to how to proceed. You see, _normally_, I don't have an issue with people misspelling things on the internet. I do it, they do it, we all do it. *however* When you're insulting someones ability to do their work, you should perhaps not misspell the word you're using to describe said inability. So I'm torn. Should I be fair since everyone makes mistakes, or should I make fun of you for your obvious inability to spell the word correctly coupled with your inability to either proofread or notice the spellchecker screaming at you to correct it. The asshole would tell you there may be a reason why different coding conventions outside of the One True Way(tm) confuse you. But I'm not an asshole, so I won't say that.
You're talking about from a web control rather than an actual request that comes through IIS? If so, that narrows it down a bit (and I wasn't aware of that behavior). In general we don't use webcontrols (the exception being the favicon and a few fileupload controls), so that helps immensely. Thanks.
what about the minority of competent developers who don't use it? What if I'm one of them, does that mean you're attacking a minority, and should you ethically be allowed to continue?
Why? You have sleepless nights over the xml in proj files now? The xml in proj files is easy to parse and easy to verify. I truly don't see why another format is needed to store project config data while xml already works. 
Just because it's common doesn't mean it's good. :-) What I really meant in offering caution with that approach was that I don't think it should be your *only* line of defense. The fact that you experience this on only one or two pages, for instance, suggests it's something on those particular pages. A more robust logging implementation should get you more accurate stack traces in that situation. Webforms is an aging, convoluted thing these days and I don't like to give it any wiggle room to ruin my day. Check out PostSharp. I've used it in production and can recommend it. The idea is -- you add custom annotations to methods (or entire classes, files, or projects) and at compile-time it inserts code that you associate to certain events with that annotation. Exception handling is a common use case for it. In simplified terms, you mark anything you want as [EmailMe_OnError] and your logging implementation (housed in a separate file) is compiled along with it.
Uhhh... No. Json is actually easier to parse. No namespace, no attributes, no xpath... Just poco and success.
I'll take not being a shitty programmer over occasionally misspelling a word in a reddit comment every now and then. If you are too dense to understand the value of standards and conventions, I'm just glad you don't work for me. Compensate however you feel necessary. 
If you are competent you use conventions, if you don't you clearly are not - at least not in all aspects of development. Seriously, if you can come up with ONE good reason to use whatever the fuck standards over industry standards I'm anxious to hear it.
It's so cute watching the young developers get passionate about things that don't matter.
You say that as if having people "work for you" somehow means you know what you're doing. And yet, we hear so many horror stories about incompetent management in our industry. Coincidence? or conspiracy. I'll let the reader decide who has the larger penis (hint: it isn't me).
You can also use custom resource dictionaries instead of a framework like MahApps. [Here's a project which has a NuGet package available](https://metrowpf.codeplex.com/). [Another example](http://brianlagunas.com/free-metro-light-and-dark-themes-for-wpf-and-silverlight-microsoft-controls/).
Where I am working we have been developing a toolkit over the past 6 years which we call Custom Forms... The idea is pretty simple: 1. to the browser event model a field behaves as an `&lt;input type="text"&gt;` (though it may present a different UI to the actual user, the actual field always acts as a text box would) 2. when the browser submits a form a `Dictionary&lt;string,string&gt;` is gathered from the set of text box like inputs 3. these can be saved into the database as a group called a form. The central idea is to "paint with broad strokes." With this base there are 2 ways to mold a form into what we want: ##field modifiers Field modifiers are any trait you can add to a field that do something. Some examples: * constrain inputs to dates and add a ui to select them * add validation to a field to mark it as required * add a set of possible answers to a field to let the user choose from (ala radio or dropdown, etc) We currently have several hundred of these. Some of them are so common (datepicker, dropdown, checkbox, radio, password, numberbox, table, listpicker, etc) that we present them as base field types for further composition (even though they themselves are compositions on top of the base field). Not all of them work together (you cannot for example use a numeric min or max with a datepicker) so in the UI for configuring them (which is also done in the CF framework) we don't enable them to be enabled at the same time. ##form modifiers Form modifiers take the data as a whole and make it do something. Examples: * authenticate a user * send an email * store the form to a database (yeah I lied above, the idea only has 2 steps but it doesn't really do anything with just them) * perform crud operations * expose the form as a class to do business logic on * do some sort of database query for a report Again these are composited on top of each other to do whatever needs to be done. There are many of these as well (it isn't countable... not all of them are coded in C# as we may expose generic interfaces to do things like map fields from a form to fields in a table (which may not be 1-1); some are in xml, some are abstracted away into forms of their own... On top of this we are starting to build smarter controls where the user can choose a task they want to do and automatically gets the proper fields in some basic configuration. For example say a user wants to have a search against a table of upcoming events (events being a parameterized report we can generate; that one with about 20 possible parameters we though of when writing the initial query and an additional couple dozen columns on the dataset itself). The user could manually add however many fields they desired as dropdowns or text boxes or checkboxes, etc and then layer on a form modifier to take those fields and make it a search. Or they could add a control and say they want a search for events and one will be added to the page by looking at the dataset and choosing from the available choices perhaps the top 10% of the parameters which provide the most variety (place each possible answer to a parameter into a bucket and choose the parameters with the most buckets; then follow different algorithms to figure out what field options should be there). This provides a search form with a couple different choices that tends to allow high searchability with little necessary extra configuration. Once the searcher is added, the user can configure or add additional fields as desired (ones that don't meet with the form modifier would be ignored). All of this allows us to build rich end user (our user's user) experiences without needing to do thousands of hours of custom coding for our users and without building an interface that requires our users to be developers on their own. I have considered discussing making this available beyond our users as a general framework but it has a number of hard edges (the project is a bit larger than the combined set of code thus far released for vNext and certainly has its share of bugs). I know of nothing in the market like it and unfortunately cannot get much further into details. Point is, it is all about structuring the problem you want to solve, not the implementation details. If you can figure out where the broad strokes should be and what problems can be split into smaller problems and solved via layering and composition, it can be done pretty reasonably (contrary to some of the other comments here).
Yes please
Look at task manager and your resource usage. I would also suggest a .net profiler to see where all the time in code is.
If you've attached to the process, there is a "pause" button in visual studio. If you press that while your application is "hanging" then you could get some useful information as to where It's spending its time. 
Any suggestion on a good profiler and maybe a snazzy user guide to get me going?
Another tool that might be useful is [Process Monitor](http://technet.microsoft.com/en-us/sysinternals/bb896645.aspx). You can use it to monitor disk &amp; network I/O. I use it all the time to debug problems like this.
Are you using dynamics? IIRC they ruin debugger performance.
Ah see? That is a valid point. What about making the config variables more verbose?
&gt; Thinking you know how this code should be formatted when you know nothing about the company, or the dev group that produced it, is the height of arrogance. You are absolutely right that I know nothing of the company or the developer group that wrote this code, and surely you can decide to format the code the way you want. In the end the only important point is **consistency**. But I do know C#, I do know .NET, and 98 % of all C# code you find Online is formatted in a very similar way. Having a consistent naming convention helps C# developers easier to find in into your code, seeing what's going on without always falling over odd irregularities. Especially the naming convention for methods is very solid in **every** code I've ever seen, and that is Pascal Case - for public and for private methods. Personally, when reading this code, I would be very confused at first and wondering where the **delegates** `is_404` or `isIgnoredError` come from, because that is what I would expect when seeing a camelCase name. The underscore is just cringeworthy. Also, please note that I did not say **do this**, I asked you to **please** follow the common standards, as it is only in your own interest. I will never have to deal with your code, I don't care, I just tried to be nice and helpful giving you a solid advice. Hopefully you will rethink the way you responded to this.
We already have that in MSBuild. They just need to expose it in Visual Studio. And even if we didn't it would take all of ten minutes to add it to the format. You don't have to throw away everything else for such a minor change.
Attributes and properties are the same thing.
When I was a kid, I used to take things apart. I used to tear off things like EM shielding, heat sinks, old wire wound resistors that would get in my way of getting an LED or two off. Now that I understand how it all works, I'm aghast at my previous behavior. I used to do the same thing for XML namespaces until I got why they are there and why they are useful. We do the same thing in JSON now, but it is far less standardized. I think we are all poorer because xmlns is so misunderstood.
Anything in your watch list? Up to date with patches?
I was looking around for something like this all of yesterday. Thank you very much! 
Delete all breakpoints from debug menu. 
How will JSON solve merging branches in large projects while it doesn't have a formal verification system like XML does? besides, merging proj files is really not that hard as the format is dead simple. But please enlighten me how json solves merge problems while in XML makes you suffer through merge problems. 
With 'parsing' I meant interpreting what's inside the file, I should have been more specific. So that you can deserialize the json data to an object is actually irrelevant. You still need code to interpret what's inside the object. As that's already there, namely for XML in the current project system, why move to another format? What does the _format_ bring to the table for e.g. a library project? The format for proj files is rather stable since 2010, and easy to manipulate in memory and interpret what's inside. It's also a rich format so it's not just 1 poco and you're done. E.g. tool info associated with a file, dependencies between files, it's not just 1 object, it's a full tree. So interpreting that tree of objects, deserialized from json, is harder than some linq to xml on the xdocument. (I wrote a proj manipulator for my code generator, so I know how hard it is, it's easy) (edit) but I do understand why in asp.net vNext they want a non-xml, very simple system, as they expect people to add files to the project outside vs.net. Today web projects are often 'the files in this folder', so having a vs.net / msbuild driven project file in xml is perhaps a bit daunting and a simple json file with very little room to specify a lot of specifics is easier. The thing is though that for projects which do use vs.net and msbuild, it's a stupid idea: there you often have a lot more complexities, specifics per file, dependencies etc., things you need to be there in the proj file. If you want to specify all that in a json file, you'll get the same complexity as you have now in the xml file. Fun thing is: most devs never see the xml the proj file is made of, as it should be. It's the same old story over and over again, like with make 20+ years ago. Some people found make a complex system so they came up with alternatives which started out simple (otherwise, why bother) and after a while they were too limited for the complex scenarios so additives were added, resulting in complex systems which didn't solve the problem they were started for. 
you can generally tell a young developer because they tend to worry about things like the capitalization on variable names. And telling me "every code [you've] ever seen [is Pascal case]" reinforces that idea. To give you context, this is coming from someone that will work in C#, VB, .Net, Powershell, Ruby, Python, Bash, PHP and Javascript all in a single day (and Coldfusion, but we don't talk about Cf...). There isn't a whole lot that gets me to dismiss a developer faster than someone who chooses to fight over syntax, "maintainability", "scalability", "readability", or any other "ilities". You can see this in how I've chosen to respond to the people in this thread. I just can't take someone seriously who has a problem with Camel case vs Pascal case. My response is quite simple. Come back and talk to me after you've gotten some experience under your belt. Simply stating an opinion in an authoritative manner isn't enough to impress me.
&gt; To give you context, this is coming from someone that will work in C#, VB, .Net, Powershell, Ruby, Python, Bash, PHP and Javascript all in a single day (and Coldfusion, but we don't talk about Cf...). This is a really really bad excuse. Each languages has it's standards, and one should stick to it. I would never use PascalCase naming in JavaScript, I'd adjust myself to the conventions used in JavaScript - this way it is easier to read in the context of JavaScript. And this is a very easy task, nothing fancy or difficult. I switch languages with different naming patterns regularly on a daily base. I do not treat JavaScript as C#, and I do not threat C# as JavaScript. &gt; There isn't a whole lot that gets me to dismiss a developer faster than someone who chooses to fight over syntax, "maintainability", "scalability", "readability", or any other "ilities". You can see this in how I've chosen to respond to the people in this thread. I just can't take someone seriously who has a problem with Camel case vs Pascal case. I never fought over it. I just gave you a good solid advice. It is your choice about accepting it or not, but being so defensive about it is silly. I did not attack you personally. Also having clear and maintainable code is often no "ilities". It increases overall code quality and thus reduces bugs or makes them easier to spot and fix. &gt; My response is quite simple. Come back and talk to me after you've gotten some experience under your belt. Simply stating an opinion in an authoritative manner isn't enough to impress me. I have plenty of years and experience under my belt. Yes, partly it is an opinion - but fairly not mine alone. It is shared by most of the C# developers, written down many times and even suggested by Microsoft and Anders Hejlsberg himself. I did not say it in an authoritative manner, I asked you to please do it. I gave you an advice. There is no reason to be so defensive about it and there is no reason to be so offensive about it.
Nope, not running fiddler.
I watched their first demo video, looks interesting!
Oops, did that too! I should add it to the list.
I should have plenty of power :( I7920, 12GB Ram, SSD, GTX460. CPU is only at about 10-15ish % when debugging...
i believe i have put 2 variables in watch list, but the issue persisted before i added them. Patches are up to date.
I don't believe so
Thanks, i'll check it out!
At work my official browser is IE9 (could be worse I guess) and we still have visual studio 2010 so we see these kinds of problems too from time to time and can never explain them. Sometimes the debugger integration with IE can do this with no provocation, using chrome instead fixes it (because no integration). Sometimes cassini is just slow for no reason at all, running the debug session through VS Express 2013 Web (because it uses IIS express) often helps in those cases.
True. I really don't give a damn what format the file is in, but exclusionary files plus the integrated package stuff makes my life much easier. If the project json format is the way to get that across the board then I'm in favor. 
Yeah, it seems to me the project.json was always intended for every type of project. See the MVC "vNext" project structure: https://github.com/aspnet/Mvc/blob/dev/src/ It's a bunch of class library projects using the project.json files, just like web application samples. It should be noted that both web and library projects are also using a .kproj file which is similar to the current .csproj. This file is now **only** for Visual Studio though, and not necessary to build/run.
What version of VS are you using? I noticed that my debugging speeds took a hit when I'd let VS have Browser Link enabled. Try turning that off and see if you gain any speed improvement. here's where you disable it: http://i.imgur.com/jFVPn1L.png
Silverlight, WinRT use XAML, plus the Windows Phone-specific Silverlight uses XAML.
&gt; I never fought over it. change "fought" to "discuss at length". I'm also not here to argue over the semantics of a word. &gt; I just gave you a good solid advice. That was never asked for. You have no idea the context under which this code was written, it's both outright rude and *hostile* to do such a thing. You don't get to step back, throw up your hands and say 'bro, I was just trying to be helpful'. helpful is not creating a tangent about whether or not the capitalization of a method has any bearing on anyone's skill as a developer. You owe me an apology. &gt; I have plenty of years and experience under my belt. I doubt it. Maybe? The idea that the capitalization of methods is somehow more important than me tracking down a ridiculously generic error seems as if your priorities are off. It's exactly the kind of thing you expect to see from someone who doesn't have much breadth of experience, having worked in mostly a single environment with 1 tech stack professionally, possibly another 1 or 2 in your free time. &gt; It is shared by most of the C# developers, written down many times and even suggested by Microsoft and Anders Hejlsberg himself. Why don't you go read up on Hungarian Notation, who popularized it, and why it's not all that well regarded anymore. I seriously doubt Anders Hejlsberg would agree with your actions in this thread. I would be shocked if he thought criticizing code out of context for capitalization was actually a worthwhile endeavor. There is a clear difference between the existence of such a style, and believing it should be enforced industry wide, and I think you're attributing too much to Anders specifically because you need the argument from authority.
I hope they knew it since the begin... really I hope. Anyway if they do not know such thing, probably their site would be a disaster in any language.
unfortunately, this happens the same in any browser :/
Visual studio does support wild cards in project files. It really blows out the load time though.
If you know MVC, it's probably faster and easier for anything other than a trivial "web app that's just used to edit a database" app. Without knowing the requirements, there's no rule- just web forms is terrible and I hate it, so I double any estimate involving web forms, not because it's twice as hard, but because I hate it so much.
IMO is webforms / MVC just a front end, what about a 2/3 tier application where you can fairly easily switch out the presentation framework? When I see direct database calls straight in the code-behind or in a controller, I die a little inside.
You break a project down into smaller and smaller pieces until you get to the smallest possible work packages, you estimate each work package, and then you add it all back up and build in a fubar factor, which is always there. Or you just eye ball it, say a nice round number, and risk losing the deal if you are way over or just pissing the customer off with being significantly under. Second method is more common, unfortunately. 
I start everywhere (indexing tool), enter "hosts", press enter twice to have [EmEditor](http://www.emeditor.com/) (far superior to Notepad++ imo but proprietary and paid) open it. I press save and it tells me I need admin permissions so I press enter again.
The first approach assumes 100% enlightenment I presume? If it is exactly the same web stack, with well defined integrations I get it. But how common is that? I always have new problems for each new project. A new integration is a common requirement but requests of functionality I have never implemented are not uncommon. In this case that approach is hard.
1000 hours, give or take an hour here or there. WebForms is a different model; it is neither worse nor better. 
Maybe I don't want to use visual studio.
Then you can already use wild cards. What's your point?
That just makes it harder to type. Comments generally include stuff like sample values.
Try adding a reference to a library is a .csproj without using visual studio. I have to know where it is on disk. I have to get the public key token. I have to know the processorArchitecture whatever that is. I would much rather type "Assembly": "1.0" and be done with it. From what I understand they wanted to avoid a dependency on msbuild. It's not "change for change's sake" which seems to be the prevailing opinion here. It's about getting .net running everywhere, simply. As for all this nonsense about json merge conflict nightmares, it seems like few are actually considering *how* likely it is to happen. What changes more in a project? Adding or removing individual files? Or Adding and removing dependencies and targets? Which one is more likely to break the build?
Like every single tutorial of Entity Framework? Each Model, each DbSet is a table.
Right but I'm looking to combine multiple tables into a single entity. 
So the gist is as long as I'm defining FKs entity framework will push an update transaction to both tables? Does it actually combine both tables into a single model on code generation? 
Pretty much - depending of course what kind of entity (and child entities) you have defined, but I'm not sure what you mean with "combine them to single model": stuff maps like 1-entity -&gt; 1-table. If you have one entity with child entities (eg. Order with OrderLines, you'll have two tables = "Orders" and "OrderLines"). If you are just starting with EF, I would highly recommend looking into doing things "Code First". If you are familiar with sql and databases, but not EF - grab "Entity Framework Power Tools" extension for VS and use the "Reverse Engineer Code First" to basically create a "Code First" approach from an existing db. What you can do with this is, you can build a db first, with all the relations and then learn from the generated "Code First" code, how stuff is defined properly for EF. http://visualstudiogallery.msdn.microsoft.com/72a60b14-1581-4b9b-89f2-846072eff19d
Unfortunately all databases already exist so I'm doing database first. What I am ultimately trying to accomplish is to create a single controller/view set (standard CRUD) but the data come from and be pushed to multiple tables in the database. Example: I have these two tables w/columns: **acnt.user_account** * account_id INT IDENTITY(1,1) NOT NULL * user_id INT NOT NULL **&amp;lt;--FK** * user_name VARCHAR(32) NOT NULL * password_hash VARCHAR(256) NOT NULL * *etc...* **acnt.user_info** * user_id INT IDENTITY(1,1) NOT NULL * [name_prefix] VARCHAR(256) * [name_first] VARCHAR(256) * *etc...* and within the MVC application when a new account is created I need to be able to populate BOTH tables from a single "registration" view.
How can the author compare a web framework with node.js? node.js is no web framework. node.js exposes a common javascript interface for various eventloops on various platforms (libuv), a very basic http server(http_parser) and some other common functionality like an Event Emitters and a punny code parser. The community just builds on top of that. One could probably compare [express](http://expressjs.com/) with ASP.NET. If you want "node.js" on .NET just write a wrapper around libuv(the c library which exposes a common interface to various event loops on various systems).
Website or desktop app? Mvc or webforms? Making some assumptions about your answers to the above, try this : Set the textbox's autopostback to true, declare an onValueChanged or onTextChanged event handler for the textbox When the textbox has a value entered into it, it will then call your new function and do whatever you want. At this stage, it should be working and you should now look at validating the input on the textbox What happens if somebody enters a figure including commas (12,000) or a letter or other punctuation (£5k) 
You could create a model to represent the data as a single object (i.e. UserAccountInfo). Then put your CRUD operations in a data layer class. Your data layer would have a function Add(UserAccountInfo user) which would contain logic to populate both tables. var userInfo = new user_info { name_first = user.FirstName, *etc...* }; Your only headache will come from the way your tables are defined. EF will see user_info -&gt; user_account as a 1-to-many relationship. Buuuut that is just a small detail and something your data layer can hide from your views/controllers. var userAccount = new user_account { user_name = user.UserName, *etc...* }; userInfo.user_accounts.Add(userAccount);
json config files is easy to understand when they have plain structure, something like key-falue .ini file. But when you have deeply nested configs it's a hell to understand what is a parentess means in current context. For example, Ext.Js has json configs for their web controls, and constructions like '{{{[{[{' is a common case. My opinion that &lt;configuration&gt;&lt;system.web&gt;&lt;httpHandlers&gt;&lt;add ... /&gt; is more easy to understand, than all of these parentesses. Also, for configs parsing you don't need the best performance or saving space, like you need it when send your data over the network. What are the benefits for json I only see that you don't need to escape '&lt;' sign in expressions (by the way there are other symbols, that you must escape), and json has the easy-to-understand semantic for holding arrays
EF7 should work with any .NET technology. Console, WinForms, XAML, ASP.NET, or otherwise. The EF team is just as committed to mono as the ASP.NET team -- they share the same CI servers. (I'm a dev on EF at Microsoft.)
It's going to be a Web app, predominantly using Webforms. I will try your suggestions and let you know, thanks :)
http://www.red-gate.com/products/dotnet-development/ants-performance-profiler/ this one is pretty good.
&gt; xmlns="http://schemas.microsoft.com/developer/msbuild/2003" Ok let me get this straight. What they should do is rewrite msbuild to work in mono? Sorry but it looks like [coding up a builder that leverages roslyn is only ~400 lines of code](https://github.com/aspnet/KRuntime/blob/dev/src/Microsoft.Framework.Project/BuildManager.cs). I know which one I would pick. Anyway I confirmed with the devs, you can drop files in compiler/resources and they will be embedded. You will be able to override this with a glob (but I am unsure how). Lastly, everything msbuild should be supported by the time this is released. It just won't be the default.
ORMs like EF don't work that way. If you stray from the Class==Table design patterns you'll spend all of your time either fighting with he ORM or manually mapping data back and forth between entities and models.
Another very nice one which has an incredible downloadable demo to showcase what it has to offer is ModernUI on codeplex (http://mui.codeplex.com/). There's a project template, a NuGet package and available source code to use to incorporate everything into your own work.
I have just been looking at this, Seems really good, this will be amazing for other parts of my application as well! Thank you
That sounds like a ViewModel. What are you trying to do with this class? Hook it to the UI?
Use MVC, if possible. Also to get this straight you want to update a field based on the value of another field updated at client run time? That's VERY easy, a bit of JavaScript..... Let me know if this is what you want and i'll pop something on.
If you are incredibly proficient in MVC it might be slightly faster. I doubt many people have this level of proficiency.
Ctrl + ] will take you back up (or down) to the matching bracket. Just so you know :)
Like I know what you were saying. And it's true. However, the language has to pick something when you have multiple +'s together. Now, you shouldn't be mixing and matching your +'s, but really, keeping it as one operator (+) should not cause problems.
So I had a lot of problems with this since SendGrid is POSTing the request using content-type multipart/form-data. As such, here is a solution to receiving emails with WebAPI2. Hope it helps someone and they can save the headache.
Thanks for the reply! It's good someone from the dev team was able to confirm this.
Does this help you get started? ------------------------------- &lt;%@ Page Language="VB" AutoEventWireup="false" CodeFile="Default.aspx.vb" Inherits="admin_testing_Default" %&gt; &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt; &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt; &lt;head runat="server"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form id="form1" runat="server"&gt; &lt;div&gt; &lt;asp:TextBox ID="TextBox1" runat="server"&gt;&lt;/asp:TextBox&gt;&amp;nbsp;&lt;asp:Button ID="Button1" runat="server" Text="Button" /&gt; &lt;br /&gt; &lt;asp:TextBox ID="TextBox2" runat="server"&gt;&lt;/asp:TextBox&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; ---------------------------------- Code behind: Partial Class admin_testing_Default Inherits System.Web.UI.Page Protected Sub Button1_Click(sender As Object, e As System.EventArgs) Handles Button1.Click Dim text1 As String = TextBox1.Text TextBox2.Text = text1 * 2.5 End Sub End Class 
What?! It's totally hip to be square. Actually it turns out that most people are not very cool or hip. There are a lot of superficial punches thrown at the community but when you get to the real root of it I am hearing technical as well as religious reasons for not using .NET that I think vNext takes care of. Running on mono (regardless of you opinion of mono) will expose religious arguments for what they truly are. Having a quick and responsive development loop will appeal to pragmatic developers. Not requiring VS for dev will give all those people without windows (surprisingly not everybody plays PC games) convenient access to .NET . I think this is going to be a big deal and has huge potential. I remember I was at a meet up a few years ago and some guy was ranting about how terrible Microsoft is as bits of chicken flew out of his mouth. He was upset because they made a competing product to his that was superior and their inferior product did not sell. I don't think people find that guy cool anymore. Who respects the person that throws M$ around in a serious conversation?
I agree w/ cheesekun. Generally speaking, most data lends itself well to normalization, and whenever possible, you should stick to normalization in a relational schema of some form. However, there are instances where a document database lends itself well to a problem. For instance, if you are working with an Item Management system and the item attributes are widely volatile and the schema is ever-changing. Normalizing this data is difficult or nigh-impossible. You can attempt a EAV (Entity-Attribute-Value) schema model, but it's not really normalized. In instances such as this, a document database to store Item meta data becomes highly appealing. But, 9/10, you want to stick with a relational model, in some normalized form. You also do suffer a performance hit with Document DB, which is another thing to consider. 
Assuming the same knowledge level on each platform (even if that is no knowledge in either) the MVC estimate should be lower (by a large amount) then the Web Forms estimate. You want to make sure that you explain using older technology is more expensive from a time/effort standpoint. More importantly if they want to tell you that they have decided you must use 'Web Forms' instead of 'MVC' that is a huge red flag that they will be a difficult group of people to work with. 
For that size of project, given the dev team has equal experience with both, I'd call it even. For smaller projects, Web Forms might be faster initially but can require more maintenance and support effort over time since it takes more work and discipline to maintain structure. That's been my experience, having worked on a fairly large Web Forms project that was essentially re-implemented in MVC later.
Probably the biggest thing you can do to become a better, more advanced developer is to begin teaching others. Speak at user groups or conferences, blog regularly, etc. It will force you to learn things in much greater detail, other people will correct you or teach you things you hadn't considered, etc.
Yep, that's similar to the way I have it now, with the only thing being the textboxes have an onTextChanged as suggested by d-signet. I don't want to push a button to do it as I want it to be done as automatically as possible. But thanks for your suggestion :)
Put as less logic as possible in the controller. Make the controllers simply act as coordinators of services. Their unique responsibility is to receive inputs, validate them, invoke the proper services and use the returned data to assemble view models to be passed to the view. While doing this, be sure to accept your dependencies via the constructor of the controller (dependency injection) with the help of a DI Container (like Castle Windsor). Try to put as few logic is possible in the eventual custom Action Filters. This doesn't guarantee you that your solution will be compatible with vNext but will sensibly reduce your surface area exposed to the changes. Anyway I foresee that Web API will be the biggest part of the system to be changes since it loses its special breed of controllers. TL;DR: Be SOLID and your code will be marginally affected.
Avoid using `HttpContext.Current`. It will be removed. Same with HttpHandler and HttpModules. System.Web will be removed, but most parts get a replacement API. So if you stick to MVC and WebAPI you'll mostly be good to go. But *vNext* won't be ready until earliest summer 2015 - and even then: The old versions don't suddenly become obsolete.
I wonder why they call it version "14", instead of the next free number 13. Visual Studio 2013 is version 12.
There was also no Office 13.
For fucks sakes I just upgraded to 2013, I really don't want to toss another $500 into the pit.
Microsoft is schizophrenic when it comes to versioning. You'd think with as many products they've had go through so many versions, they'd know more than anyone how to do it well but they're still changing schemes every 16 minutes.
They switched to a yearly release cycle starting with VS2013. You should have paid more attention. The good news is that since they shortened the release cycle, there should be less changes to make it worth upgrading. I am still using VS2012 since 2013 didn't offer anything that 2012 couldn't do for me.
Because numbers, and people's superstitions. 13 is an obvious one in western culture, but I've also heard of other numbers being skipped (I want to say 9 for China?) in other products.
They actually reduced the price since they've moved to an annual release..
BrowserLink + Web Essentials' Browserlink addons are a pretty damn big reason for web developers
Better task debugging was the big thing for me. +64 bit edit and continue
64bit edit and continue have saved me so much frustration.
I didn't know about this. Is it as awesome as it looks?
I know it looks neat, but it isn't worth the update cost. I will just wait until VS2014 when I will get all of the 2014 features + the ones from 2013.
Ah, well I am still stuck supporting mostly 32bit codebase until we get other components updated.
I really assumed everyone that had a paid version of VS just got it through their MSDN subscription. I would never do it any other way...
In a word: FUCK YES. Okay, maybe two. 
Also on the plus side, now the version numbers will be synced with the edition! Yayyy no more trying to figure out what version of MSVCxx corresponds to what version of VS.
VS14 has the new Roslyn compilers and the new JIT engine, too. Some of the refactoring extensions I've written using Roslyn have been super nice. They're like next-level snippets... except they refactor. I suppose it all depends on what you develop, but I love this new stuff. 
Speaking of.. go try it out, C#6 goodness and ASP.NET vNEXT!
What is the version of .NET &amp; the CLR? I'm guessing it's 4.6/4.0.
I was at a talk with Mads Kristensen where he mentioned that they skip 13 at Microsoft because the number is "bad luck".
I am using VS2013 for about half a year now. What does this do exactly? I haven't bothered much with it to be honest. I just checked and it shows "No current connections" under each project even though debugging works just fine. What exactly is the advantage of it and are the probably mayor steps involved to get it to work worth it? I usually just debug with IE, which works fine just running the solution. To test with Firefox I manually launch it and use Firebug if I need to debug some FF-specific scripting issue.
I'm still waiting for .Net Native desktop...
But not for projects running on local IIS. You have to use the VS development server, which is unfortunately not an option for the 50+ project solution I am usually working with.
MSDN is very expensive if you don't really need it. As an individual, a Windows license and a VS license will last you years but a annual MSDN subscription will cost way more then that.
Probably stands for "2014" following that the name always was the year it was released / promoted in.
yet vs14 will come in 2015 ;) 
&lt;nitpick&gt;MPS, not schizophrenic&lt;/nitpick&gt;
Because everyone abused TechNet. Most of the TechNet software was only for installation troubleshooting, the TOS didn't even allow development use. 
Just remember, your smarter then your recruiter.
I actually found this project last week. I'd be curious how optimized it is considering how inefficient some of the handlers and controller scopes are handled. There is a lot of array scanning and regex happening, which can really impact fast APIs. It's a good start, but I'd be worried of just taking the NuGet and running with it without looking deeper.
I normally get my copy of VS through Dream Spark, however for VS2013, I *acquired* it through other means because I downloaded a trial of VS ultimate and fell in love with Code Lens. I like seeing "*n* references" above properties, methods, and classes. I don't even use Intellitrace really. Though I don't spend a lot of time in the debugger. Wish someone like JetBrains would come out with a Code Lens alternative so I wouldn't have to *acquire* VS through other means and use the copy I can get with Dream Spark free/legitimate.
I was told that it was to keep the version number in sync with the year now that we're on a yearly release cycle.
I think this site: http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc is VERY helpful in learning the basics. It's a very different process if you're used to none MVC structured layouts. I'm going through the same thing. You might also want to try pluralsight.com - they have a ton of .net stuff, including MVC. They have pay content, but you can always do the trial to see that.
I'm also having a little trouble. I've got a few models built and used the provided scaffolding to generate CRUD pages, and have even added additional features on one of my detail pages. I'm not new to the MVC coding pattern, but I am new to Entity Framework. I've got a model that stores transactions, basically. A date, a price, a foreign relation to another model, and whether or not it's a purchase (could've just used negative numbers, I suppose...). What I'm having the most trouble with is generating reports. I'm very comfortable in SQL, and know how to write the reports I'm looking for (revenue, expense, profit, etc). What's the best practice for retrieving information that you don't have a model to represent? I have most of my desired reports in the form of stored procedures. But it doesn't seem to have a way to just return a single row's worth of data unless you have a model for it to fit in. I don't feel like a model is necessary because I'm not representing a real table. Inserting/updating/deleting aren't concepts that will apply. The hack that I've chosen is to split up report queries to return exactly one item. One column and one row (AVG(), SUM(), etc) and do a db.Database.SqlQuery&lt;Int64&gt;("dbo.StoredProcName").FirstOrDefault&lt;Int64&gt;() (Yes, I very frequently work with values over 2 billion). But I think this is a pretty bad way of going about it, honestly, and I can't get two pieces of info at once. I can easily write a query that shows me my total expense, total revenue, and does simple subtraction to get a net profit as well. But instead, I have to make 3 calls to my database and run 3 different stored procedures that were generated by copy/pasting the query that can pull all that data, and instead tell each to pull just one. 
I didn't have that issue. I could download it over night and I installed it already.
Did you try using view models?
I wrote a reddit-like platform in c# asp.net mvc 5, its open source. It might help to look at it? Pm me for link to github if interested.
My mistake, I didn't know that the internal full product name we're currently using wasn't official.
Yeah it's working now. I should probably delete the original post.
not op, but i would really like to take a look at it
No. I haven't. I'm reading up on them now with the Music Store tutorial on asp.net. Thanks for the tip!
-- sent via pm
Viewmodels are the way to go. You basically create a class with properties of your choice, instantiate it and populate in a controller with data from your query and dump it into a view. For instance, I use a view model in my reddit-like platform to display all data related to a single comment. The model contains collection of child comments (comments that were a reply-comment to a comment).
Wow. That's exactly what I need. I'll be happily refactoring my stored procs and my view data.
I found [this book](http://www.amazon.com/Pro-ASP-NET-MVC-Adam-Freeman/dp/1430265299/) by Adam Freeman quite helpful.
I would :)
Have fun :)
I sent you the link, check your inbox.
I bought this book a while ago and I love it!
ty
Awesome nick :) Link sent.
You might want to consider the load you're going to be putting on your server by doing the calculations server side every time the text box changes.. 
You must unlearn what you have learned. - first pages should have display logic and input logic, no business logic. What you think of as a page you need to transfer to the controller. Your URL actually calls the controller not the page. Second, the authentication should happen in the authentication controller. You can have logic determine where to navigate to if not authenticated but this shouldn't be handled on a page. I think you need to make an empty project and start from there. I am realizing its hard for me to explain in a post like this.
Could I get the link ot look at it? 
I wish people would stop calling it viewmodels. Viewmodels are things you use in MVVM, and more closely related to a controller than an MVC model.
Microsoft calls it that. Start a template asp.net mvc project and look at account view model file it generates.
Still, it's just needlessly confusing to people that come from a WPF background. Microsoft dropped the ball there.
I'd also like to see the link. (Looks like it might be more efficient just to post it :)
May I also have the link?
Sent.
Sent.
You might qualifiy for the MS Partner ActionPack (https://mspartner.microsoft.com/en/us/pages/membership/action-pack.aspx) for $500 a year. You get 3 MSDN subscriptions with VS Pro. The ActionPack MSDN subscription are not as a good as a the normal one, but it's a lot cheaper.
Then do so. :-)
As a response to PhatBoyG. The project has been tested in a heavy production environment. It adds less than 1 ms (including 0.3 ms for actual call recording) per request to evaluate the rate. The gain is that there is no array scan - it uses dictionary instead, so it's way much faster. It can use Regex as the project provides support for Regex, but the preferable way is to use just the part of API URL to compare StartsWith - extremely fast. Even with Regex - when it's compiled Regex, and surely it should be so, it is still a quick operation. At the end of the day, nothing is free in this world, so if the throttling is a desired part of application, then we expect a performance-wise expense. Therefore the goal is to minimize the expense, not to avoid it.
Have you used Resharper before? I am wondering how the refactoring stuff compares to R#...
Pluralsight. Best $29 a month you'll ever spend. Also microsoft virtual academy is very good and free. Once you feel comfortable get resharper if you're working in a paid version of VS (express doesn't have plugin support) Welcome to the dark side!!! We have cookies lol
One thing I will say is don't get discouraged. A visual studio license is really expensive for a reason - it's incredible software that lets you do SO much. I learn something new in it all the time. I would make sure you know some of the common keyboard short cuts like F12 and how to work with breakpoints. Have you done MVC in PHP or python at all?
You don't place script references where you want the output to show up. JavaScript is not PHP, and appendChild is not synonymous with print, echo, or Response.WriteLine. Scripts aren't run in place and do not return an output, or string, that gets injected into the DOM. They are meant to sit alongside the HTML and manipulate it directly. Place your JavaScript reference at the end of the document, and rather than appending to the body, append to a div with an ID as /u/AngularBeginner recommends. HTH.
+1 for SOLID. Classical design patterns still hold up well in vNext. No surprise there. The cleaner the separation between ASP.NET and logic/data the better off you'll be for any transition.
Great for UI work where you have a lot of tiny edits to get things looking "pixel perfect".
I buy MSDN every 2-3 years. Often enough to get new stuff when buying, seldom enough to save thousands.
Check out this [site](http://www.nicoschuele.com/posts/teach-yourself-to-code-with-c-and-net) that was made by a redditor. It covers pretty much everything that you need to know.
Will firebird have support for the VACUUM command like in sqlite?
Aren't you technically only allowed to use the products during your active subscription?
Some of my latest projects have been using knockout for mvvm. I've taken to calling my models model views, as in a denormalized database view. Then the model for the page is the view model.
+1 for buying Resharper, though Intellisense support in VS is getting better lately.
If your used to working with just html and have a choice in the technology I'd suggest maybe checking out knockout.js. It takes maybe a day to learn and a couple of weeks to be proficient with. Then your controllers become a fairly dumb data source that creates the model (as someone else mentioned)
Pluralsight is great, but you might also want to check out the [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/#?fbid=SY7d77OHuNz). It's a free library of courses made by Microsoft evangelists. I think it even included some Pluralsight courses as well, which are free if viewed from this site. 
Oh absolutely, resharper just adds that extra oomph
I like the design, but why is it written in ror? :/ lol
Nice! Didn't know this one
Don't forget the awesome test runner it has.
You could also setup migrations using FluentMigrator
Once you join the darkside your training begins. Once you have learned enough to be dangerouse you are given your ReSharper light saber and released into the world. Good Luck
haha EPIC!!
It's very surprising to read a blog post about a C#3 feature when C#6 is the upcoming version. But the blog post is trying to make a point using very bad code. Having a class who's purpose depends on the properties to be set before executing is simply bad design. If the class needs values to work properly, then they should be passed in the constructor. The constructor should take all value it needs to *construct* the object for it to be usable. So the problem with the code has not really anything to do with object initializer. Something more valuable to read about object initializer is written by Phil Haack: http://haacked.com/archive/2013/01/11/hidden-pitfalls-with-object-initializers.aspx/
You certainly have a point, but unfortunately if you give people a cool, shiny new feature, expect a lot of code to be written poorly using it. It's a fact of life. Things like "what is the minimum set of properties that need to be set for this object to be meaningful" are often ignored to meet deadlines, and so code like that in the example is written. Of course, it happened before this language feature was added, but now we've got better syntax for our crappy code.
That unfortunately is true. ;-(
This post has me thinking about what a bad idea code migrations are for production databases. I don't want my website to have admin rights on the database.
You should go File - New - Web Site and choose a simple web forms application. It will add all of the authentication stuff for you. You can then modify it to your hearts content.
Would like to see as well.
Sorry! By "does the validation" I mostly meant "check the ModelState" but definitely you should trust what you receive from the client (client side validation can be hacked). In addition, certain business rules can't be enforced without proper services, in this case I prefer those services to be used by the controller rather than by some obscure model property attribute (attributes don't support DI). Yes, it does clutter the code of your action but this is a price to pay to keep the code as lean and SOLID as possible. (sometimes a custom model binder can help)
I need to ask: can't you just tell your boss you don't know how todo this? 
I wasn't clear enough, my boss want me to get involved on ASP.NET because by now I'm just a simple Web Designer, and I told him I'd like to be a developer. That's why. I'm a really fast learner so I guess I'll do fine, Thank you guys for the answers! 
Please do yourself a favor and go a step back first. Start with simple console applications when you want to learn programming.
What version of vs are you using? They made some cool changes with 13 so that a web project can include mvc and aspx pages so that pay doesn't really matter anymore. Personally I like mvc and using bootstrap for css and things like jquery and angular js for getting dynamic content into the page. I like SPA's also. If you are doing an offline app look at local storage or indexedDB. I agree with another post that the best thing for you to do is start a new web project and it will already include the auth code and a database that you can then modify.
Indeed. Automatic migrations for development DBs? Fantastic. For production? Dangerous.
Thank you for posting this. I've been struggling to master Async programming.
Sure, check your inbox.
It's called "entity splitting" and you can do it with code first too: http://msdn.microsoft.com/en-us/data/jj591617.aspx#2.7 And an example for model first: http://www.robbagby.com/entity-framework/entity-framework-modeling-entity-splitting/
Yep, IMO it's the "bible" of the current ASP.NET MVC publications. Freeman is a wonderful author. Very clear and his "Sports Store" tutorial app (which I think he's included in at least the last 2 editions) is an excellent place to learn the technology. 
I am also interested in smaller freelancing projects. I guess elance or similar sites could help but rates there seem to be awful.
Is mvcmailer **a must** for this task?
Nope, however I can get the MVC to send mail is a must. Just running out of options and time at this point
Freelancing sites are a soul crushing game where you'll constantly be underbid by people in borderline third world countries where their cost of living is pennies on the dollar compared to yours. I've yet to find a decent alternative, or any good advice for getting started any other way that wasn't just people spouting "network!" like a drunk seagull. I live in a small city where there's not really much of an IT scene outside of 3-4 companies so there's not really much of a chance to network.
Then just use http://msdn.microsoft.com/en-us/library/system.net.mail.smtpclient(v=vs.110).aspx Example (gmail): http://blogs.msdn.com/b/mariya/archive/2006/06/15/633007.aspx
That part can be hard. ... the only advice I have on networking is to look into INETA meetings, or other tech based user or social groups. We have a monthly .NET INETA meeting, a SQL users group, etc .... 
You might consider building some small pet projects as well. When I originally decided to start my own shop, I started by writing several small apps that I thought might make me a few extra $$ each month. This was before the mobile explosion, but that would probably be the direction I'd go if I did it today. The one word of warning I'd give you, is that doing freelance work at the office (if that's what you intend to do), could go really bad ... 
I that case, take a look at my clasubmit method where I send simple email via microsoft smtp client: https://github.com/whoaverse/whoaverse/blob/master/Whoaverse/Whoaverse/Controllers/HomeController.cs
I agree. I just got a new startup idea which can solve this problem :)
I'm gonna echo the sentiment another poster had - you should be very cautious about doing freelance while being employed. At the very least you'll want to limit working on it until after hours. The issue is around intellectual property - usually employers have some level of ownership on the IP you produce while employed with them. You'll want to look at your contract with your employer (and any HR-related info they provided you), as well as the laws for the state you're in as they pertain to moonlighting.
I'm using VS 2013 Professional I've got a serial key as a student, do you mean that VS2013 make it much easier? Should I start with offline VB and then transfer to web forms coding or just learn web forms coding and master it?
I realize you're ranting and didn't ask for feedback, but there are many free resources out there for .NET developers. The two most commonly used are MSDN (Microsoft's reference documentation, highly valuable for specific language reference) and Stack Overflow, a Q&amp;A site. It sounds like you're looking for tutorials and the like; I can't help with anything general, but typically you can find blog posts and the like that do walkthroughs for most technologies and open source frameworks that are out there. Overall, it really helps to have something specific you are trying to accomplish.
If you have a computer, check out this Youtube user's channel. He has a great set of video tutorials on learning C#. He also has a ton of other tutorial videos. https://www.youtube.com/user/thenewboston/playlists C# Beginners Tutorials Playlist https://www.youtube.com/playlist?list=PL0EE421AE8BCEBA4A 
I think you're grossly misinformed and you're a bit heavy handed on reprimanding "the DotNet Community" because of your ignorance. MSDN has a ton of free content. http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started Microsoft even has free video training. http://www.microsoftvirtualacademy.com/training-courses/developing-asp-net-mvc-4-web-applications-jump-start There is a ton of great content (free) out there...you just have to know where to look! (Or Google). Instead of coming out and demanding free content (and doing it in a condescending way), why not ask the community for links to free references. You'll catch more flies with honey, than you will with vinegar. 
That`s perhaps the biggest gripe I have with .Net. Every fourm, blog, cms, what-have-you reinvents the wheel when it comes to user identity. It makes it really hard to mix-and-match. I wish some of these open source projects would just use areas.
Only have one row editable at a time. The rest of the table is then static text until being edited.
*duplicate deleted.
 &gt; In internet where they can rip off every movie that releases within a few hours,why don't they do the same with education.Why not? They do do that with educational content... But obviously creating quality content and maintaining a website with large amounts of video content isn't cheap, so you can't expect everything to be free. Otherwise there are plenty of alternatives that are free, such as [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/)
Ah okay, didn't get this impression from your earlier posts. Nevertheless, I'd start with easier stuff.
I was going to say this as well. Most of the places I have worked at in the past have this in their contracts. Not to mention if you have extra time at a job that you are getting paid for you should be doing pet projects/r&amp;d for that company not something that you want to do on the side. There is always work to be done and if its nothing official them make something up to better the organization; you have unit tests? complete documents? if you say that there is nothing to be done then my guess is that you're just not looking hard enough for it.
&gt; You'll catch more flies with honey, than you will with vinegar. wise words
it's really not that hard to do: } // try } // if } // using
That is a very poor practice, as you cannot debug comments. If somebody updates the code and fails to update the comments, a bear trap has been left for the next person in the code.
Microsoft even offers some free PluralSight videos: http://www.asp.net/mvc/pluralsight
Actually employers can put anything they want in your employment contract, including putting claims on IP you generate outside of work hours. Unfortunately there's only a small list of states that have laws that explicitly forbid this practice. [Here](http://www.brightjourney.com/q/working-company-intellectual-property-rights-stuff-spare-time#a-20126) is a list of states with such laws.
I don't necessarily disagree. I just think you're making a big stink over the issue in general when it's not a big deal for people used to working with braces. For the record, I am working on a mixed codebase of VB.NET and C# (and T-SQL), and have done so for years. I find the syntax for VB.NET to be overly verbose and gets in the way. My opinion.
VS2013 doesn't necessarily make it "easier" but it does allow you to use whatever web technology you want. This means you can have an MVC site with aspx pages mixed in. Probably not useful in your case but good to know. Just start a new web project in vs and look at the auth they use. It uses oauth2 which is the current standard and gives you a lot of flexibility. Right out of the box users can login with Facebook and other sites. Razor makes it easy to hide page content based on login also.
I don't know, but we have a good laugh about it sometimes at work. There's just something funny about Visual Studio calling someone a tool when we're under some stress.
I've seen some code that should be marked "This code was generated by an idiot". Sometimes, its code I wrote.
Because only tools (the human kind) use code generation. 
I usually end up with too many SQL server installs. It has nothing to do with VS directly but it def slows your shit down if they are all running. 
There is a plugin ... Search: source code HTML 
I read this briefly so it may not be the problem but I don't think it's possible to generate a PDF on azure. I ended up hacking together a printable version. 
I think this is one of the most pointless posts I've ever seen.
In addition to the advice given out by everyone else, start building up your GitHub and your Stack Overflow profiles and get involved in open source development. As someone that looks at hiring freelancers from time-to-time, I won't even consider someone if they don't have a GitHub/SO profile and I know a lot of people are the same way. 
Because the code was generated by a tool.
I hope they will add support for ASP.NET vNext in VS 2012/2013 also. Short product release cycle is good, because it provides much more feedback for developers, but I tired to upgrade my Visual Studio :(
I run a small .net based agency in Australia, send me a PM if you'd consider some type of remote work.
unless you need to maintain old website I say you move on to mvc
Yeah but I'm thinking 10 years from now.
That's awesome, thanks so much!
I'm lucky - my company gives me access to Pluralsight. I'm digesting as much as I can! Resharper - is that a library? We do have Professional at work (I only have Express at home).
Resharper is a productivity addon for visual studio http://www.jetbrains.com/resharper/ Let's just say if you use the one month trial, you won't have a choice but to buy it (pretty cheap for what it does) but you need pro or up as express doesn't allow addons
People don't realize two things. 1) how much they could do on their own if they are a little bit tech savvy. 2) how much they pay me to google shit they could do on their own. 
Keywords (protected, virtual, etc) Generics LINQ SOLID Basic OO Everything else is APIs. Good luck, you're in for quite a ride. 
I would add to the list basic design patterns, some kind of subversion control and (maybe, probably not) async programming.
I feel like attributes might not be the best way to do this. Reflection is the wrong answer almost every time. F# has [static type constraints](http://msdn.microsoft.com/en-us/library/dd233203.aspx), maybe C# has something similar? It might be good to know which parts of the problem you "own" and which parts are set in stone. If you can shy away from attributes, I feel like you might use a generic interface linking one type to the other instead.
Obviously the part of .NET you are going to use at work, WinForms, WebForms, WPF, ASP.MVC or whatever. No one expects you to know all of them but you should know the parts that matter for the job well enough to be able to solve most questions with Google. I wish I new more about TPL (Task parallel library) when I started, the exact same thing can be said about LINQ. All in all just a solid knowledge of the language is probably good to have.
Type constraints perhaps? internal IEnumerable&lt;TExternal&gt; Get&lt;TInternal, TExternal&gt;(int id) where TExternal : TInternal; 
i think you might have better luck here if you ask the question in terms of what you're trying to achieve, rather than in terms of how you're going about it. it sounds like you want to somehow specify non-inheritance relationships between types without maintaining a data structure maintaining those relationships (like a Dictionary e.g.); but this is sort of wandering outside the boundaries of a type system based on inheritance and interfaces - this should give you pause. can you share the problem you're trying to solve?
A favourite question where I work is about exception handling. i.e. the difference between throw; throw ex; throw new Exception(ex), etc.
I had to build a similar system. It was an object mapper for low level to high level objects. Now /u/dust4ngel has a valid point: There may be an easier way for you to go about it if you tell use more details. In my case I didn't really find a better way, so here is what you can do: var method = GetType().GetMethod("Get", BindingFlags.Instance | BindingFlags.NonPublic); // convert to a generic method using your specific type. var generic = method.MakeGenericMethod(typeof (TInternal)); object foo = generic.Invoke(this, id); Of course the return type is then object and you have to do some casting. It isn't really the best way (method name passed as string), slower than actual method calls, .. but it is the simplest way. Another way would be to use dynamic/Code generation to have the correct method created on the fly but that creates just another set of issues that make it even more complicated.
TExternal is not a TInternal, they are related but not by inheritance. TExternal is a POCO in one domain and TInternal is an EF type.
On top of my head, I usually ask about: General knowledge-inheritance, polymorphism, difference between overriding and overloading, singleton, when/why to use inheritance vs interface, abstract class (what/when to use etc). C#-linq, basic reserved words (protected, static, public, private, virtual, etc), using, how do you make web method. Maybe learn about extensions, generic, lambda expression, wait, and async as well if you wanna be super safe but I don't usually expect graduate to answer this. Would probably more impressive if he/she does though! Personally, I usually expect graduates to be able to answer close to 100% of the general knowledge/OOP questions but am pretty forgiving when it comes to the .NET side of stuff.
You are very much right in your observation. This is exactly what I am trying to do. I am trying to map domain POCOs (TExternal) with an internal representation of that POCO in my case an EF type (TInternal). The issue here is not the relationship, that can be expressed in a multitude of ways I just happened to put it in an attribute. The crux of the matter is the call to EF that is managed by `Get&lt;TInternal&gt;(int id);`, since without TInternal i cannot do `context.Set&lt;TInternal&gt;.Where(...)` and I am left with `context.Set(typeof(...)) and no way to express my logic. 
In [this](http://www.reddit.com/r/dotnet/comments/27y2b0/generics_and_instances_of_type/ci5jpv1) reply I give more details. It's a similar problem to yours. I actually quite like that solution, since it exactly what I tried to achieve. Since my case involves DB calls and network communication I am not overly concerned with the added overhead of reflection. I will give it a try!
Have you looked at automapper? That might help with some of the type conversion stuff. But apart from that I think this is a case where stupid code, however repetative, is much easier to maintain than 'smart'. I'm also interested to know what your domain types are. Are they for third party consumption or only your app?
&gt; /.../ I feel like you might use a generic interface linking one type to the other instead. Care to expand on that? I am not entirely certain I know what you mean. 
&gt; automapper No I have not. I will look into that. &gt; I'm also interested to know what your domain types are. Are they for third party consumption or only your app? Both, it's part of a data package that is used both internally and by customers.
Could I please ask you a question? As somebody involved in the recruitment process, what do you make of unconventional CVs that describe things like open source contributions; blog posts; community contributions and potentially microsoft certifications as opposed to the CV of a person who has a degree? Thanks. 
I don't really care about ms certification. However, open source/community contribution is pretty big on my book. I'll probably track down the contribution to check whether it's legitimate and to see the guy/girl's coding style/contribution(s). If it's legit, I'll probably prefer that guy/girl compared to a fresh grad with a degree; assuming similar performance during interview. Ninja edit: I said MS certification doesn't matter but that's because I'm not in HR and is usually one of the technical interviewers in the room and am looking at it from technical perspective. MS cert would be beneficial if the company is a gold partner [because they needs X number of certified person in the company] and tend to sway HR more than technical people [we know it's bs]. 
I forgot the most interesting part. &gt; But apart from that I think this is a case where stupid, albeit repetative, code is much easier to maintain than 'smart'. To some extent I agree with you. However when new objects are added the method has to be expanded. I don't want that. 
Thanks for the response! Could you please elaborate on why you do not value Microsoft certifications such as [Programming in C#](http://www.microsoft.com/learning/en-gb/exam-70-483.aspx)? From my *naive* perspective it would appear as though such a qualification could prove that the candidate possess much of the knowledge that you describe in your first post and could increase their chances of obtaining an interview. 
&gt; half a dozen complex technologies at a simple problem like writing "hello world". Heh, maybe we could debate that :P but I certainly see where are you are coming from. Thanks for the words Catharsis. I am 18 at the moment and hope to land a junior C# developer position come the Fall using an unconvention CV like I described. Previously I was completely unassured but given this conversation, I am more so so thanks.
It's rife with cheating. Preparatory courses often give you the actual question and answer to the exam itself. 
http://ericlippert.com/2009/11/12/closing-over-the-loop-variable-considered-harmful-part-one/ I lie, it was in C#5 this was fixed.
&gt; polymorphism Jebus. I've been developing full-time for the last 12 years, I honestly cant tell you what the hell the term means without Googling it. I never see the term used in day-to-day development. Inheritance, overloading, interheritance vs interfaces sure - no worries, use those terms every day. Throw that at me in an interview and I'll be staring at you wide eyed and stammering, wishing I could reach for my phone. I don't know, maybe it's just me... 
You are not a fresh graduate. The question is there to gauge what you have learned in university conceptually and how much of those concepts you remember. I probably wouldn't be that worried if YOU forgot the answer to polymorphism just like I wouldn't be that worried if a graduate can't answer some of the beginner 101 .net questions. Conversely, I wouldn't be so lax if you can't answer those beginner 101 .net questions.
If I were interviewing you for a junior position, I would ask what your hobbies are, what motivates you, and some basic problem solving questions before I asked about C# questions. For C# questions, I would expect you to know [most of everything on this list](http://msdn.microsoft.com/en-us/library/aa288436%28v=vs.71%29.aspx), except I would not ask about platform invoke, com interop, unsafe code, or OLE DB. That list is just the tip of the iceberg of .net development, and it's quite old, but still relevant as it is the basics. 
Plymorphism is usually our #1 question, because it can really show the candidates depth of understanding of abstract concepts. i.e. if they just equate it to inheritance, it'll probably be a short interview.
1. Async/await and Tasks. 2. Unit testing using Nunit.Framework and Moq. Moq can be tricky for beginners so if you understand that it'll really help. 3. DI frameworks. Check out Ninject. We use castle-windsor a lot, but Ninject is easier to learn. (Also, know the difference between DI and IOC). 4. Interacting with databases, both directly and using an ORM (see Entity Framwork, NHibernate, or Dapper.)
Great read for threading in c# http://www.albahari.com/threading/
I hate interviews where they're looking for their preferred definition of something as though that's any kind of indicator how much a person knows about that thing.
I'm there with you. I'm very good at what I do, and most of the stuff listed in this thread is just not something I've ever needed. If I ever knew what it was, I sure as heck don't now. 
We absolutely are not looking for preferred definitions. I was saying that polymorphism is *not* inheritance. Polymorphism is one of the most fundamental and important concepts of true object oriented programming, so, yeah, it's kind of important to know what it means. It also shows how good the candidate is at explaining abstract concepts.
FizzBuzz, value vs reference, class vs interface, SVN, GIT, SOLID, LINQ, EF, MVC, Decorator, Repository, unit test, mock. Longer list: http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx
I've been doing this professionally for almost 15 years now. I consider myself a lot better than the average developer. I still have no idea what answer you're fishing for. The term "polymorphism" has never once come up in single conversation with another developer, yet every one I've worked with understands it perfectly. I guess if you were asking practical questions about the implications of its use I'd do just fine but if you asked me "define polymorphism", I'd probably stammer something about inheritance and you'd incorrectly assume I'm a bad developer. Maybe that's not you but it is lots of shitty interviewers out there.
Kinda off topic for this post, but where do you find junior positions?! All the ones I ever find are senior-level positions and I'm far from senior-material dev. :(
If you're looking for evidence that they know what polymorphism is, why not ask them to complete a task which requires demonstrating it? Putting them in front of VS and asking them to solve an actual problem will surely get you a better result than a pop quiz for the definition of various terms that rarely get used outside a comp sci lecture. It also short circuits any miscommunication over definitions of terms. Getting them to actually do something in VS will also give you a better idea of how they work and solve problems. 
I once bombed an interview because I couldn't figure out the exact answer the guy was looking for. The question was "what is the difference between AC and DC electricity?" It was a question I was very comfortable answering but this guy just kept scowling at everything I said and trying to lead me somewhere with followup questions. All the other interviewers loved me but that one guy prevented them from hiring me because he didn't think I knew the difference despite a dozen different answers that weren't the exact one he was looking for. He wasn't even a technical person.
Imho for a new graduate who maybe used the language for only some months is almost impossible to answer all these question. For what I saw for junior new graduates usually they ask only question of base oop, some fizzbuzz like and then only cultural fit. As junior all the rest should be learned in the job... Otherwise you are trying to hire a medium-expert dev in a position you can underpay him
&gt;I once bombed an interview because I couldn't figure out the exact answer the guy was looking for. I completely agree this is a common trait of poor interviewers. I also saw it on a list of things interviewers should never do. When I interview, I always use questions as a jumping off point to a further discussion, otherwise it's the equivalent to filling out a form. (See http://27bslash6.com/interviews.html for an example.)
http://msdn.microsoft.com/en-us/library/hh925568(v=vs.110).aspx#net_a
I sent the github repo link to your inbox.
Yep, I saw this as well, does not cover 3.5 client profile
There has to be a balance between know your stuff by heart and be able to find the answer by googling. IMHO interviews that require by heart knowledge of narrow subjects are pointless for most positions. For example I keep reading about SOLID etc. Most would not remember what every letter stands for, but if we discuss the particulars of a notion I am sure a lot can come out of that. Memorization does not dictate ability IMHO.
Just my 2 cents but this list is absolutely ridiculous, especially for a junior position. I've worked with .NET for 12 years now. I've used the volatile keyword once, only because the MS reference implementation of a Singleton uses it. I have not used async/await because we haven't had the pleasure of stepping up to .NET 4.5 just yet. I can't tell you off the top of my head what every letter in the SOLID principles stands for. I've never had to get down and dirty with ReaderWriterLock/ReaderWriterLockSlim, a simple lock has been more than sufficient. While I understand where you're going with GetHashCode, I hardly ever had to override it in practice. Long story short I would probably not quality as a junior developer at your company. Then again I've been very successful doing what I do for many years, producing very successful software solutions.
Ahhh, i understand what you're asking now. Doesn't look like they specified until 4.0. I think the only way you could tell is by comparing the size of the .Net install, with Client Profile being the smaller of the two. 
There is no need to check for 3.5 client profile. There was never an official .NET 3.5 client profile redistributable. Only either the full or a combined version. Check for the presence of `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\NET Framework Setup\NDP\v3.5` and you're good to go.
True. All those details are too much for a junior position and most likely won't be asked. Knowing the basics of OOPs, a few data structures, design patterns and a few sorting algos should be enough for this step.
Is rewriting your master page logic to work with MVC out of the question? I'd just redo it if possible. I can't imagine whatever is going on in that master page can't be recreated or updated itself. Also, if you can't update then why switch to MVC? The razor view engine is a pretty big benefit and I don't think you'd want to ditch that.