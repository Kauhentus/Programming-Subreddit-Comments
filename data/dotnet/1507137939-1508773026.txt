Chain is the only ORM I know of that allows you to use a singleton for the database. https://github.com/docevaad/Chain And internally it will still create and dispose connection objects.
Nice!
Interesting library. I'm a fan of [Flurl](https://tmenier.github.io/Flurl/) and I like how your fluent API, intentionally or not, somewhat mirrors theirs.
This looks very similar to what I did a couple of months ago using Castle's DynamicProxy. We wanted a very fast way for devs to be able to consume REST APIs if they were given the interface and the models.
Even when wrapping it in a using block? The end of the block calls SqlConnection.Dispose() which calls Close(). 
Using block calls close — so it is best to use a using clause if you can. Read the caution statement here for reference. https://docs.microsoft.com/en-us/dotnet/framework/data/adonet/sql-server-connection-pooling#adding-connections
https://github.com/dotnet/standard/pull/444
Can you just do standard LDAP queries?
This was a major blocker for us in migrating a pr
Heavy js frontend (react), c# just back end, normally webapi and not MVC. Unless its a quick poc project or maybe admin section. 2017 is nicer than 2015 but crashes a pot more. That said I spend more time in vs code.
Same as @bzBetty. We are using Dotnetcore with WebAPI and a react frontend (which I dont touch :D ) On the side I am playing with WebAPI and VueJS. Think NodeJS is fine for quick Prototypes, but I dont want to work with it for large projects. IMO Javascript pwns the frontend and Dotnet core for the backend. 
Yes, especially for the past year or so. I've been doing a lot of WebAPI + Angular2/4. I really like VS 2017, but I use that only for back-end code. I use Visual Studio Code for all my front-end work. There are some really nice plugins for VS Code that make my front-end work a lot easier. I also have been writing a lot of knockoutjs lately, but that's because I work on a older MVC project now.
VS2017 is fairly stable for us. But it let's us play with the .net core and standard stuff a bit easier. And about 50/50 on the js and c# front. C# for backend plus xamarin apps. We are starting to use mvc core now that it is at 2.0. Typescript with Vue.js for Web front end. Edit: oh, and we use node for utilities and internal stuff but nothing production.
2017 doesn't just crash on my computer, it freezes windows now. No add-ins running, SSD drive, ugh. On topic, 50% of my codebase is Js (typescript).
Interesting Medium post [here](https://medium.com/@reicheltp/dev-diary-4-why-i-left-xamarin-behind-35817ccd07b2) from someone who ditched Xamarin for React Native.
I've been working on switching to JS in the past couple months ever since vs turned into a steaming pile of crashy shit.
Working on middleware section for quite some time now. Most of it is c#, web api most. Maybe 10% on js. Lucky for me some one take care of front end for me.
TypeScript anywhere we have to use JavaScript (web browsers), C# for the rest of the stack.
I'd personally say that's unlucky, these days working front end is a lot more pleasing than it was a few years ago.
It depends. For me i'd say i'm lucky 'cause the company i work for start changing their mind set and start to request my team to connect their old equipment to the web. So it is a great learning experience for me. Js is fun too, i want to work on it more, but too bad getting all the middleware ready is first priority. =(
My last two projects were multi-year and huge - using lots of JS/Typescript. Somehow I turned into a front-end developer in the last 5 years. Current project is React on the front and Web API on the back. I am probably doing 80% JS and 20% C# now, after literally almost no C# for the previous year.
Now using node.js for backend.
I work on a pretty large website, and my job is roughly 60-40 C#-TypeScript. Some members of the team have one side or the other swing as high as 80% C# or TypeScript.
What all are you doing in that space, if you don't mind my asking? I've been having a hard time with my homebrew auth stuff and finding core isn't exactly turn key for everything.
Get out of here
Particularly, exposing some old hardware libraries to web so that we can control it via web api. Consolidating some of the old services like SOAP, COM object, etc under one RESTful service to standardize all incoming request. Defining web framework for new services, etc. My team are the one who prepare a platform for developers to quickly develop the app / service they need without them develop the app / service from scratch. That's basically what middleware means.
No JavaScript on the server for me. VS 2017 is better in some ways, but there are some things that feel slower. I switch back to 2015 to Publish web projects, the dialogs in 2017 are different enough to make me a little hesitant to use them.
Nothing, we are building WPF, UWP and Xamarin apps. Our Web projects tend to be done in JEE instead, maybe .NET Core will change it.
&gt; 2017 is nicer than 2015 but crashes a lot more If it is anything like 2017 you will want to change the rich client experience and graphics acceleration off and the UI will magically work better.
I work on a lot of JS Single-page-applications now, mostly with angular 4. That said, I don't write JS. I write TypeScript, which, to me, makes writing JS a lot better. Now that I'm so comfortable with TypesScript, I don't know if I'll ever choose to write plain JS again, unless there's good reason. 
There is a dotnetcore port of the Novell LDAP client here: https://www.nuget.org/packages/Novell.Directory.Ldap.NETStandard/ 
I still use C# and MVC and Kendo UI and a slew of custom built widgets with MVC helpers built the way Kendo does it. I make SPA work with MVC Razor so I can take advantage of visual studio more and don't have to rely too much on a JS SPA framework that will keep changing over the years
No JS. I work on backend applications so no JS required. As for VS2017 vs 2015, I prefer 2017 just because it supports C# 7 out of the box. No other reason than that, really. 
I'd start with your concatenation here. You start **onchange** with a **'** and close it with a **"** before you append Eval... onchange='&lt;%# "javascript:cellChanged('" + Eval("SlotTimeValue") + "', this.value, this);" %&gt;'
Sorry, my tired brain may need more than that. I honestly can't see the issue with that concatenation. EDIT: I've even changed it to this: onchange="javascript:cellChanged(' &lt;%# Eval("SlotTimeValue") %&gt; ', this.value, this);" Which looks OK in the editor, but throws the same error.
Ahahahaaaaaa... excellent! Anyone remembers how we were promised that semver and nuget solves this? **It wasn't funny!** 😀 The number of times I was fixing this to random juniors (and more) all over the company...
It looks like there is a 3rd party bringing [hot reloading](http://livexaml.com/) to XAML .. its currently in an emulator with hardware support in the works. I see Microsoft buying this company or tech.
I'm still confused to how it became a problem in the first place. Clearly I am wrong, but I thought that originally .NET would just use whatever damn library you give it so long as the name and optional signature match. 
Attention: speculation ahead. It became a problem when winsxs was invented (before .net, or thereabouts). WinSXS is similar to the GAC, but for native code, and **way** more baroque and demanding (you need a real certificate to sign stuff, linking is complicated, you need a proper installer to deploy etc). Anyhow... WinSXS hat brought the idea that one "must match assembly strong name to the letter", as a reply to the DLL hell. The same idea was taken with .net, for better or for worse. The funniest for me is the noise around any approach being the best evar in avery conceivable way. In the meantime, I have heard how assembly signing is "fundamentally broken" and should *never* be done and whatnot. Microsoft used WinSXS for the native libraries they ship, with VS2005/8, then gave up entirely. It's funny, really... in the end, even the dll hell isn't hell - if people manage to deal with (in)compatibility right... It's constant blaming of technology when in fact our understanding and use thereof is *way* worse than any technology shortcomings... 
Lucky. I love WPF, but it is dead where I work.
&gt; onchange="javascript:cellChanged(' &lt;%# Eval("SlotTimeValue") %&gt; ', this.value, this);" Does this work? onchange="javascript:cellChanged(" + Eval("SlotTimeValue") + "', this.value, this);"
I would say the amount of total code is around 50/50, but the js part usually consumes 80% of the time.
Nope :(
They're totally different things. C# for server-side code, JavaScript for front end/client-side. JavaScript development is a total nightmare at the moment with people trying to force server-side behaviours through it via node or other frameworks.Those people are idiots.
I'm trying to push for more C# api backends + js front ends at work. It's a slow change but we'll get there
Your problem is you're trying to add JS with " ' and " because you need to do EVAL, which isn't possible. Set the onchange event in the code behind. Give your text box and id and do tbId.Attributes.Add("onchange", "javascript:cellChanged('" + SlotTimeValue + "', this.value, this);" Where SlotTimeValue is that value. If this is in a repeater or something (guessing from the eval statement) then you need to do this in the item data bound event of the repeater/grid 
I know a lot of people have frequent crashes with 2017, but for some reason I haven't had a single one. Used it on my old gaming laptop, and I'm currently using it on a shiny new desktop with completely different specs and still no issues. 2015 would freeze all the time at some "internal process" that would never finish.
Same for me, except it's Angular instead of React.
Same here. Recently began switching our view layer to react at work along with moving away from our monolith legacy app into microservices some of which are in .NET Core. I would now say I spend about 80% of my time on the front end these days. With these smaller microservices I no longer need a full fledged IDE like visual studio and have made the switch over to vscode and would never look back. 4 months ago I probably would have defended Visual Studio to the ends of the earth. But in comparison to vscode it's just soo buggy, so heavy.... I've had to file multiple bug reports for the IDE. I've switched my vscode icons over to "Studio Icons" and reconfigured some of my vscode shortcuts to match visual studio so it still has the same look and feel :) !
I like to play around with the razor syntax but frontend has been js for every major project I've worked on. Backend is usually C# MVC. As for VS, I absolutely love 2017 it boots fast, even on my ancient laptop and personally I haven't had a single crash. I think I'm in the minority when it comes to crashes, but if you can keep the thing running I think we can all agree it's a pretty great tool.
Why 
Which plugins you use ?
OLinq has nothing in common with topic, sorry ^^
It is indeed. But i advise to give ObservableProperty a try. PropertyChanged.Fody is mainly a boilerplate generator for boring and messy code. You save code lines but must use a specific syntax for expressions and still use property names (refactor killer? will it work with obuscation?) ObservableProperties are damn simple: - declare in 1 line: StringProperty foo { get; } = new StringProperty("initialString") - add lambda or delegate in 1 line: foo.ValueChanged += (s, e) =&gt; myLambda - bind them in XAML: Text="{Binding foo.Value}" - bind them with each other in 1 line: foo.Bind(bar), foo.BindBidirectional(bar) - chain them for complex expression in 1 line: bool1.And(bool2).Not() or int1.Add(int2).IsGreaterThan(int3) - Intellisense and documentation everywhere - no code generation - never implement INotifyPropertyChanged again - ultra lightwheight, no dependency
Verrrryyyy slow. I doubt my team will ever get there. WebForms4Life! Surprised we're not writing COBOL tbh.
...username checks out?
Man we have 2 webforms projects and it's the worst!
If you're using .Net Core, Microsoft has a NuGet package for JsonPatch. https://www.nuget.org/packages/Microsoft.AspNetCore.JsonPatch/ Core 2.0 already includes it as a dependency in Microsoft.AspNetCore.All.
Correct, it was mentioned in the article :). Didn't know that .All package includes it by default, though.
Ah, I see that now. He linked out to it but didn't refer to it directly by name. I'm a dingus. And yeah, .All in Core 2.0 is pretty great.
90% WPF projects for me this last year. 
Looks like there's a preview of the port effort on MyGet: https://dotnet.myget.org/feed/dotnet-core/package/nuget/System.DirectoryServices
All dockerized C# apps! I haven't done js in a while now. 2017 all the way. The fact that it doesn't reload the entire solution every time I change git branches will probably end up saving me days in the long run
Choosing a newer framework is a nightmare (angular specifically). This: https://www.udemy.com/understand-javascript/ and http://youmightnotneedjquery.com/ and this series https://github.com/getify/You-Dont-Know-JS did a ton for me. I've been maintaining my own js helper library that I can tailor per project instead of worrying about frameworks. Javascript itself has been improving, has been around for years, and is native to the web. Shrugging it off as a web developer would be a big mistake.
If only there was a way to do C# everywhere :\
Thank you!!!!
VS Code is surprisingly awesome! I love it!
this is mandatory now to compete on UI tech.
Vuejs here. 
I'm guessing what you are seeing typescript syntax as being similar to C# is due to lambdas and class oriented object structures? If so, that is actually ES6 (the new JavaScript standard). Typescript mainly just adds types on top of all that. That being said, I like typescript more due solely to the fact that it makes my code editor actually predict what I am typing. 
Typescript is basically ES6 (new javascript standard) with types added. So those classes and things you see are actually JS. 
Eh we have our own in-house framework and are moving to Vuejs. Why? Try hiring a developer and teaching them a custom framework.
Web Assembly. Check it out. Could change the game...or not at all. Depends on adoption and execution. 
WebAPIs with Vue frontend. Current team are all full stack. Run test driven development which is great...except for JS. JavaScript testing sucks and feels nearly useless. 
Same. But I call it Node.ts. :) Still using .NET for side projects.
But the type safety is a gift from heaven, especially when working with juniors. 
I am still using Visual Studio 2017 though, for both node.js and .NET projects. Somehow VS2017 is more responsive and consumes less memory than VS2015. On *nix environments I use VS Code.
Awesomic!!! Is there support for SAML? I believe I read there would be support at September 2017
There's a couple on xamarin that might be useful
Path Intellisense and TypeScript Hero save a lot of timer when coding with TypeScript. I highly recommend those.
Yay. Now we can update to ASP.NET Core 2.0
I definitely see the trend as being more JS every year for all web dev regardless of whatever might be used on the server. No escaping the SPA world if the app calls for more client heavy stuff.. TypeScript is your friend though..
Of cause you shouldn't do that, you also wouldn't do "Select * from Blogs WHERE Author= " + "John Smith"
I know that, but it's not just types they added. The syntax is slightly different, in fact TypeScript simplifies a lot of JS syntax. It doesn't feel like I'm writing JS anymore, it's a superset of JS. I can write elegant functions in TS, whereas writing those same functions in JS would bloat them with verbosity. I also think you completely missed this part: &gt; I write TypeScript, which, to me, makes writing JS a lot better. 
2017 used to freeze and crash but since one of the updates this summer it's all smooth sailing for me. That said I'm also spending more and more time in VS Code working with Vue.
More like 'Things I didn't know about LINQ'.
Yeah I just started the migration process, and there's shit all over the place that's angry with me.
2017 is MUCH better than 2015.
The aggregate version is pretty nasty to read.
No
I'm sorry, this may come off as elitist. But it seems really lazy to me that your first step in deciding to learn is to ask others to prepare the material for you. There is a sea of goods learning material just one google search away. It's a well known and documented topic and I doubt this post is necessary. 
I’d start here and then read all the other guides linked off of it. https://docs.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/ 
Read everything by Stephen Cleary including Stack Overflow posts.
I think that what he really wants is a curated source of best practices. Which may be harder to find among the "sea" of learning material. I don't really understand the problem here. Why is it bad to ask this question? To answer for C#. Try Stephen Cleary's blog and book as a good start, imo. On phone so I don't have specifics that are easy to get.
I believe you have to contact them and its a paid plugin. See [here](https://github.com/IdentityServer/IdentityServer4/issues/1256#issuecomment-312638724) for more
I've found [Microsoft Docs](https://docs.microsoft.com/en-us/aspnet/core/) are surprisingly useful for this, they are making an effort at keeping the docs updated with the on-going changes of the framework and the tutorials are actually well put together.
Hm. Fair enough
Thx a huge lot. I will.
Maybe check [this video](https://channel9.msdn.com/Events/dotnetConf/2017/T317)? I also really enjoyed [this one](https://channel9.msdn.com/Events/dotnetConf/2017/T322). He breaks MVC down to it's barest elements.
If you like video tutorials, Jeremy Clark's four part *Task and Await in C#* is a good starting point. His playlists are here: https://www.youtube.com/user/jeremybytes/playlists IMO, Stephen Cleary is a bit more advanced, so you would read his material after learning the basics.
are there any free alternatives to AdminUI for User Management with this , i really like the look of this for SSO but I am a solo developer and can't afford $800+ CAD /yr for the AdminUI end of this product is there a way to write my own Management UI for this or is this a bring your Security system kind of product , i couldn't find anything in the docs about user management 
I did a lot of webforms and some MVVM, I found the switch to MVC pretty easy :) Start by creating a site with one of the templates that has a few pages in it. Instead of the view (aspx webform) inheriting from the controller (codebehind) they live in different folders. This forces a better separation. The MVC Controller builds a view-model with data in it and a view is used to render the data. They are not tightly coupled the way aspx and code-behind are. MVC doesn't have an abstraction like postbacks, if you post form data, the controller needs to rebuild all the data for the view. MVC uses model binding to abstract the access to request variables, so your controller method can have a parameter that matches a query string value and the framework (via route config etc.) will bind the value to the parameter. 
What's the point of a development community if not to point people on the right track?
I feel ya but this is the place to ask questions like that.
I just looked the other day and it was all 1.1. Perfect.
I've only seen some for v3, but if you make it data driven, having a UI isn't mandatory.
I wished I had skipped directly from classic ASP to ASP.NET MVC. All the stuff I learned in classic is directly applicable.
I don't know what they are like now, but years ago I used the pluralsight videos when i made the switch, the MVC videos at the time were great, had a great break down of each small subject into fairly short comprehensive tutorials. I haven't looked at them in 5+ years though.
When you are learning MVC forget about webforms. Follow Mosh on YouTube. He has a great MVC tutorial at Udemny also. The MS docs is great as well. 
Its so expensive. Anyone using it?
It's like going from winforms to wpf, gotta forget what you learned.
I had a webforms background too. I had trouble finding a satisfying introduction to MVC 5. Most tutorials had two problems for me. I tried Adam Freeman's Pro ASP.NET MVC 5 book, but right off the bat he was using dependency injection, mocking, and unit testing. These are all great things, but too much to take in at the start. 1) They presented too many details and options too soon. This was the problem that I had with Scott Allen's courses on Pluralsight. I needed more simple examples to play with at the beginning. 2) The tutorials use templates from the start. The templates are helpful, but they generate a lot of boilerplate. It made me uneasy seeing all this extra code and scaffolding that I did not understand. It is hard to tell what is necessary and what is optional. What helped me the most were some tutorials I found by a guy named Venkat on his kudvenkat YouTube channel. The beauty of his tutorials is that he starts with a blank MVC project and takes baby steps in each video. His examples build on each other, doing things that you normally do on a web page: display simple data to the screen, display some links, handle user clicks on the links, display some data from the DB, take input from a form and update the DB, etc. Along with each video lesson, he has a corresponding web page that summarizes each one. This way you can do a quick review without having to go back to YouTube. The only problem is that they have a little age on them. Most of it looks like MVC 3 and 4. This is no big deal starting out, but if something doesn't work right for you, you might want to look at the user comments in the YouTube video and on the web page. Someone usually comments on the tweaks you have to make for it to work with MVC5. After getting a sense of what was happening in MVC with Venkat, I then switched over to people like Mosh Hamedani, Adam Freeman, and Scott Allen. https://www.youtube.com/playlist?list=PL6n9fhu94yhVm6S8I2xd6nYz2ZORd7X2v http://www.pragimtech.com/mvc-video-tutorial-for-beginners.aspx 
This demo might help: https://deck.net/async
I just used this blog post for that purpose: http://gigi.nullneuron.net/gigilabs/working-with-asynchronous-methods-in-c/ There are three posts in the series and I found them to be very easy to follow/understand compared to most of the stuff I've found.
The Sum() version is more readable for me.
X-Post referenced from [/r/xamarindevelopers](http://np.reddit.com/r/xamarindevelopers) by /u/ctartamella [Implementing a .NET Core Configuration Model in Xamarin](http://np.reddit.com/r/xamarindevelopers/comments/74t3cn/implementing_a_net_core_configuration_model_in/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Yeah, still don't get it..
You're gonna want to learn more about how client side code works. Learn JavaScript and Ajax and that will help a whole lot.
 https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop
The migrations are applied to the database, not the project. At home, once you've changed the connection string to point to your local database, you can run 'update-database' and it will build the database for you. If you look at the tables in the database, after it's been created, you'll see one for migrations, thats where EF keep a history of the migrations that have been applied to it, you should never edit this table manually though. I like to use SQL Server Management Studio (SSMS) for database management.
Have a look at decoupled CMSs like http://contentful.com
After building WebForms apps for 10+ years, the hardest thing for me to wrap my head around was the fact that the WebForms page lifecycle and event-driven coding model is totally thrown out the window in MVC. No more postbacks, no more event handlers. I have to "put on my MVC hat" and change my entire coding mindset when I'm doing MVC. At least my C# skills translated, but everything else is completely different. Took me about 6-9 months to really make the transition. I love MVC now. I dread supporting our old WebForms apps - it's like riding a bicycle around after driving a sports car. 
Thanks man, that's pretty straightforward!
Shameless plug here, but I've just been writing a mini-series on asynchronous programming in C# over the past week: http://gigi.nullneuron.net/gigilabs/writing/c-asynchronous-programming/ I just published the last article (common mistakes) a few hours ago. I plan to write one more article on TaskCompletionSource, but you'll only need that in very specific circumstances. The series is mostly based on my own experience, so I explain the various concepts in the way that I learned them myself.
[@bzBetty's latest tweet](https://i.imgur.com/7WHYYwZ.jpg) [@bzBetty on Twitter](https://twitter.com/bzBetty) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
You say in more than one place not to expose synchronous wrappers for asynchronous methods. You have this backwards. You shouldn't expose asynchronous wrappers for synchronous methods. The code calling your synchronous methods should decide if they need to be made async with Task.Run(...) and the like. And if it is in the context of a web app, you pretty much never want to do that.
No problem, EF migrations can take awhile to get 'good' at. There are a lot of little caveats and what not that you'll run into, especially when working with multiple branches that have their own migrations If there are new migrations that your branch didn't know about when you made the migrations, you'll typically want to get the branch up-to-date, then recreate any migrations you made. EF stores things like the DB scheme in migrations and if they don't match up or get out of sync things start to break. I'd also recommend disabling automatic migrations if you haven't already, I have no idea why something like that is even an option... They mostly just cause headaches down the road. Best of luck in school, don't over think things, there will be plenty time for that later lol.
If this is a side project so you can get up to speed on .NET Core then fair enough but if this is for a customer then I'd say creating your own CMS is a bad idea. There are loads of off the shelf solutions that do the job that have been battle tested and come with support and large ecosystems.
Or Squidex if you want a .Net Core option.
Thanks, I've fixed it now. Good catch.
&gt; You say in more than one place not to expose synchronous wrappers for asynchronous methods. You have this backwards. You shouldn't expose asynchronous wrappers for synchronous methods Both are bad. Synchronous wrappers for asynchronous methods can be quite problematic, even causing deadlocks. 
For testing, is it not easier to have HTTP calls in a proxy class abstraction that you can then mock out? You seem to be testing HTTP rather than application logic. Perhaps I am missing something here.
You can use this to create an HTTP client which can be injected in to other clients. For example, the consul client. You can also configure it to return real data taken straight from the real service. This way you can run end to end tests over your entire application, right up to the boundary. No more failing to deserialise in the client, or missing parameters because you didn’t convert an example http response in to a c# stub response.
Thank you.Yesterday, I was just searching for TPL vs Async/Await. 
Been there. Deadlocked on a .Result call. That sucked. 
&gt; Parallel is CPU-based. Asynchronous is I/O-based. Don’t mix the two. Minor objection. There are times when it makes sense to kick off a bunch of parallel tasks from the UI thread, then await on a Task.All or Task.Any. For that matter, it could even be a single CPU intensive task that you're awaiting from the UI. 
&gt; ConfigureAwait(false) can work but is not recommended. You missed the point on this one. ConfigureAwait is highly recommended for library authors. The fact that it might prevent a deadlock is beneficial, but even if it didn't you should still use it because of the performance benefits from not carrying around context you don't need. Ref: https://www.infoq.com/articles/Async-API-Design/
That's one of the reasons why I always use ConfigureAwait(false) in my libraries. If you're consistent, you can cover for mistakes made by the UI developers.
I'm rewriting that part now. Are structs really better in this case considering caching would require values to be copied rather than just referencing?
Does it exist?
No, it is not in that folder, but I do not even know what that is. 
I am guessing, since it says splash it is related to my splash screen? If so here is the code for it. using System; using System.Collections; using System.Collections.Generic; using System.Drawing; using System.Globalization; using System.IO; using System.Linq; using System.Reflection; using System.Resources; using System.Text; using System.Text.RegularExpressions; using System.Threading.Tasks; using System.Windows; using System.Windows.Data; using System.Windows.Documents; using System.Windows.Input; using System.Windows.Media; using System.Windows.Media.Imaging; using System.Windows.Shapes; using System.Windows.Threading; using Excel.Log; using Player_Workbench.Properties; using Image = System.Windows.Controls.Image; namespace Player_Workbench { /// &lt;summary&gt; /// Interaction logic for Splash.xaml /// &lt;/summary&gt; public partial class Splash : Window { DispatcherTimer dt = new DispatcherTimer(); public Splash() { InitializeComponent(); ///Iniialize the Timer dt.Tick += new EventHandler(dispatcher_Tick); ///Set Time Interval to 1 second dt.Interval = new TimeSpan(0, 0, 1); ///Begin Timer dt.Start(); } int i = 0; /// &lt;summary&gt; /// Timer Intervals displaying Loading Bar progress and Text. /// &lt;/summary&gt; /// &lt;param name="sender"&gt;&lt;/param&gt; /// &lt;param name="e"&gt;&lt;/param&gt; private void dispatcher_Tick(object sender, EventArgs e) { if (i == 1) { loadingbar.Value = 10; loader.Content = "Sharpening Blades"; } else if (i == 3) { loadingbar.Value = 20; loader.Content = "Pondering the existence of Gnomes"; } else if (i == 5) { loadingbar.Value = 40; loader.Content = "You never go full Bard"; } else if (i == 7) { loadingbar.Value = 50; loader.Content = "Looting Corpses"; } else if (i == 9) { loadingbar.Value = 75; loader.Content = "You rolled a 1 and fell in a hole"; } else if (i == 11) { loadingbar.Value = 90; loader.Content = "Polishing Armor"; } else if (i == 13) { loadingbar.Value = 100; loader.Content = "Taking a full rest"; } else if(i == 14) { ///Closes Splash Screen, Opens Main Window MainWindow mw = new MainWindow(); mw.Show(); this.Close(); } i++; } Image CreateBitmap(string uri) { return new Image() { Source = new BitmapImage(new Uri(uri)) }; } Image[] GetImages() { var imageUris = new[] { "pack://application:,,,/Splash/splash_image_1.jpg", "pack://application:,,,/Splash/splash_image_2.jpg", "pack://application:,,,/Splash/splash_image_3.jpg", "pack://application:,,,/Splash/splash_image_4.jpg", "pack://application:,,,/Splash/splash_image_5.jpg", "pack://application:,,,/Splash/splash_image_6.jpg", "pack://application:,,,/Splash/splash_image_7.jpg", "pack://application:,,,/Splash/splash_image_8.jpg", "pack://application:,,,/Splash/splash_image_9.jpg", "pack://application:,,,/Splash/splash_image_10.jpg", "pack://application:,,,/Splash/splash_image_11.jpg", "pack://application:,,,/Splash/splash_image_12.jpg", "pack://application:,,,/Splash/splash_image_13.jpg", "pack://application:,,,/Splash/splash_image_14.jpg", "pack://application:,,,/Splash/splash_image_15.jpg", "pack://application:,,,/Splash/splash_image_16.jpg", "pack://application:,,,/Splash/splash_image_17.jpg", "pack://application:,,,/Splash/splash_image_18.jpg", "pack://application:,,,/Splash/splash_image_19.jpg", "pack://application:,,,/Splash/splash_image_20.jpg", "pack://application:,,,/Splash/splash_image_21.jpg" }; return imageUris.Select(CreateBitmap).ToArray(); } private Bitmap GetNextSplash() { var lastSplash = Settings.Default.LastSplash; var resources = Properties.Resources.ResourceManager.GetResourceSet(CultureInfo.CurrentCulture, true, true) .Cast&lt;DictionaryEntry&gt;().ToList(); var splashImages = resources.Where(x =&gt; x.Key.ToString().StartsWith("splash_image_")) .ToDictionary(x =&gt; int.Parse(Regex.Match(x.Key.ToString(), @"(\d+)$").Groups[1].Value), x =&gt; (Bitmap) x.Value); var nextSplash = splashImages.OrderBy(x =&gt; x.Key).FirstOrDefault(x =&gt; x.Key &gt; lastSplash); if (nextSplash.Key == 0) { nextSplash = splashImages.OrderBy(x =&gt; x.Key).First(); } Settings.Default.LastSplash = nextSplash.Key; Settings.Default.Save(); return nextSplash.Value; } private BitmapImage Convert(Bitmap bitmap) { var ms = new MemoryStream(); bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Bmp); var image = new BitmapImage(); image.BeginInit(); ms.Seek(0, SeekOrigin.Begin); image.StreamSource = ms; image.EndInit(); return image; } private void main_splash_Loaded(object sender, RoutedEventArgs e) { Random _random = new Random(); int rInt = _random.Next(1, 4); string[] imagePaths = System.IO.Directory.GetFiles("../../Splash"); BitmapImage bitmapImage = new BitmapImage(); main.Source = this.Convert(this.GetNextSplash()); } } }
Yeah, so that contains images right? In the project properties, publish tab, make sure the files are set to include. 
I have the image embedded in resources. I will give your suggestion a shot and report back, thanks for the tip!
I’ll have to take a look at that for my library code. So far I just ensure that my methods are async through and through, once after the newbie lesson of mixing async and sync using Task.Result. Half the battle is discovering the async options in libraries I was already using, for example Dapper. 
Then what files is it trying to access from the splash folder?
So I went in there and do not see a way to add anything additional. https://pasteboard.co/GNUCIq5.jpg
The only files it is looking for are the image files. But they are embedded as resources.
I also when into each image property and made sure the output was set to copy always.
Might want to mention Thread.wait() as well. I see a lot of devs use that in their tasks. I don't think they realize its doing more than they intended.
What is imagePaths doing in the last method?
Honestly, you've done the important part. I wouldn't fail a code review for missing a CA-false call, I'd just deal with it next time around. It's like finalizers. In theory you don't need them, but it's nice to have the failsafe.
Have you seen TPL Dataflow yet? It's a dream to work with if your problem can be reduced to a series of messages.
Do you mean Thread.Sleep(), or Task.Wait()? Either way, both are covered in Stephen Cleary's list.
Absolutely. You can run I/O-based tasks in parallel, and offload CPU-based tasks from the UI thread. I was mainly referring to treating I/O-based tasks like CPU-based tasks, such as by using Parallel.Foreach(). The cause of the confusion is the overloading of the word "parallel", which according to the classical definition means concurrent execution on different processors. You can run I/O-based tasks concurrently, but there's no CPU involved while they execute.
I just discovered Dataflow recently myself, and need to read more about it.
Nice, and thanks for sharing. I'll fix it.
Razor is MVC and if you use MVC you should use Razor. EF Core against SQLite should get your data layer started. If you want other options and more of a real-world challenge, skip MVC and use WebAPI backend and a React/Angular/Aurelia frontend.
Entity Framework and MySQL BLOB storage should be all you need. No need to bring in a heavyweight CMS. You can roll your own in under 500 lines of code.
&gt; Let’s create a new console application, and in `Main()`, we’ll have my usual workaround for running asynchronous code in a console application: As an alternative, you could use the latest VS2017 versions and set the project language to Latest, then do: `static async Task Main() { /* ... */ }`
For his simple example, his way decreases code (in the end, he still needs the readline, else the console would close (if debugger is attached) In the end it would end up quite the same, but losing some Error-handling
Thks! This real-world challenge does sound like a real challenge. I will dig into it. But, is tho still possible with .Net? And, what about saving posts in XML instead of in a database? I saw a few people doing that too...
That is correct, I'm simply making the example more accessible by not needing to use C# 7+. Ways of running async in Main() are covered in an earlier article in the same series: http://gigi.nullneuron.net/gigilabs/working-with-asynchronous-methods-in-c/
Looks promising. Thanks. 
Believe it or not, guys in banks already do that :)
A bit of the documentation is maybe a bit confusing. It says that the main thread waits for the result, but that's not exactly right. I didn't test this in a full framework project, but in a dotnet core 2.0 console app (and I bet the full framework is the same), the thread that finishes isn't the main thread... static void Main(string[] args) { Console.WriteLine("{0}: Calling", Thread.CurrentThread.ManagedThreadId); Run(); Console.ReadLine(); } static async Task Run() { Console.WriteLine("{0}: Starting", Thread.CurrentThread.ManagedThreadId); var tcs = new TaskCompletionSource&lt;bool&gt;(); var fireAndForgetTask = Task.Delay(5000) .ContinueWith(task =&gt; { Console.WriteLine("{0}: Completing", Thread.CurrentThread.ManagedThreadId); tcs.SetResult(true); }); Console.WriteLine("{0}: Awaiting", Thread.CurrentThread.ManagedThreadId); await tcs.Task; Console.WriteLine("{0}: Finished", Thread.CurrentThread.ManagedThreadId); } } I see: 2: Calling 2: Starting 2: Awaiting 4: Completing 4: Finished I think this is Task.Delay spinning up work on the Task pool, so it'll get completion on a different thread from the pool. And since Run() is async void, and Main never waits on it, the main thread isn't really what's waiting. Still, good examples, just figured I'd mention this.
&gt; Asynchronous programming has two main benefits: scalability and offloading. If you block, then you are hogging CPU resources that could be better used elsewhere. A blocking thread isn't hogging CPU resources, it simply stalls and the thread scheduler will phase it out. Your phrasing suggests it's causing a CPU bound problem but that's not the case: the code relying on the work to be performed by the thread that blocks is blocked too, and _that_'s the problem. The CPU isn't blocked nor are there any cycles burned by it due to the blocking. The OS thread scheduler (windows schedules by thread, not process like unix kernels) will see the thread stall and phase it out, scheduling another thread on the CPU instead. IMHO your phrasing is a bit misleading. 
VS runner is implemented completely wrong way. Paths to VS are hardcoded in lib. For VS before 2017 you should get installation paths from well known registry branch. For VS 2017 you should use documented COM interfaces to enumerate (possibly side by side) VS 2017 installations.
WebAPI is part of ASP so your backend would be .net but the challenge part is using a javascript (use TypeScript) platform for the frontend. Lots of new live sites using this kind of stack. You can stick your data in memory, txt, xml, json, relational database, document database, anything you want. MVC is fine, not even obsolete yet, but it's falling out of favor for building whole sites. Plus the mix of C# and view template can encourage learning some bad habits.
Just make sure that `Bar()` doesn't rely on some resource that could be disposed. If you having a `using` block wrapping a resource and return a `Task` rather than awaiting it, you'll cause the thing to be disposed of before it's executed. I've seen this happen before with `SqlConnection`s in code.
I use a normal setup to authenticate and after the login I redirect to a view that loads my front end framework. To me this was the simplest setup and have not yet come across any drawbacks I can think of. 
Cool! I will do some research about this. Any advice regarding data? I mean, since all those options are available, for a "mini" CMS, which one it would work better? I saw that comments can be handled by third party solutions, so the content will be restricted to mostly text, images and video links.
Thank you for your tips. I guess my main reason for normalizing is that there should be only 1 definition/storage/version of everything, without duplication. I should be able to go to a table / datastore and find where something like an e-mail or phone number is uniquely defined, so that then I can 1) either change it; or 2) easily see all the other tables/objects where it is used. Hence I have a problem with document databases because most do not seem to support data normalization.
Thanks for pointing this out. As for the code examples, I suppose you're referring to the example with the deadlock? The extra async/await are intentional, as I mention in the article. It doesn't deadlock if you omit async/await.
As long as you don't need work on UI (or source) thread assuming call started from there. 
I'm sure you're right, it makes a lot of sense that it won't be the main thread that resumes, because console applications work such that they can pick any thread from the ThreadPool. I'll review the article later, thanks for pointing this out.
Look for Cory House. 
The only way I've found to do that is to make a copy of the Frame, make a counter, check copyOfFrame.CanGoBack(), and increase the counter while going back and while casting the source of the Frame as a Page, and checking if it matches the Page you want it to be. Alternatively, make a static copy of the specific Page and navigate to that.
It may help to back away from the framework and understand principles of information security. Passwords need to be hashed and salted (very important). Ssl should be set up for network communications. 
You could look at https://github.com/OrchardCMS/OrchardCore It allows all of that.
Entity Framework and SQL Server are the tools of choice.
Data duplication isnt the devil. Example you have two users who have the same phone number - should this be a reference to a shared phone number table or just stored twice? I'd store it twice and probably in the user table otherwise you're asking for trouble when one of the users wants to update their phone. use a separate table if the user can have multiple or you already have every value they could select in the db. 
That is what I thought at first as I have a lot of background with these. But it looks rather complicated. Especially these: 1) creating all those entry forms / views / plumbing for complex hierarchical types (potentially 100s of those), and most importantly 2) dealing with continually growing schema in EF is less than optimal. Migrations are ok I guess but might be too complicated.
You might give Microsoft Power Apps a shot. It looks like the successor to visual studio light switch. https://powerapps.microsoft.com/en-us/ Never used Power Apps myself but did use lightswitch. IMHO with these RAD frameworks you trade easy maintenance for agility so keep that in mind as you mature your product.
Tank you. I was aware of SSL, but I'll look into hashing and salting of passwords.
You mean just call the same method but instead of returning a view, return the authentication information? I'll try that. Thank you.
You may want to look into System.Reflection. Using this library can help you automate scaffolding when model types change.
From the side of REST api, maybe you can look at OData v4. Visual Studio has plugin and it automatically creates CRUD Web Api for you, even for relationships, you dont have to write single line of code. In the web ui side, DataTable is working fine with OData (supports CRUD operations, can be paid plugin) AFAIK. So you just have to set your entities.
&gt; MVC doesn't have an abstraction like postbacks, if you post form data, the controller needs to rebuild all the data for the view. But if you don't want the page doing a full refresh every time something is clicked or changed, don't you need to rely on some sort of javascript to do AJAX? Isn't that still considered a "postback" or "partial postback"
I kinda disagree, winforms and wpf are still pretty similar in the sense of marrying the design file with the code-behind file. Its very direct still. MVC decouples all of webforms concepts much more aggressively.
Assuming that you don't use `ConfigureAwait(false)` in your event handlers or view-models, the real risk is accidentally passing a mutable, UI-bound object to a background thread. 
Cheers mate.
You need save the state of the view. That is why most people have gone to using mvvm because that way you actively choose which information is essential data of your view and what can be rendered according to that data. If you do not use mvvm I guess the only would be observing the contents of your container frame and save those content control objects in some sort of stack.
No just an example in general, as people often think 'let's put await on the last line' while it's unnecessary. :)
I'd start by creating a separate dummy aspnet core MVC project and choose the 'individual accounts' authentication option, and look into the details of the stuff in the template. 
Because node is another tool in the mature .net toolchain. 
Basically there are 2 more-less easy ways to do authentication for API as I know: 1. Implement everything by yourself: re-implement JWT authorization for your API (e.g. https://stormpath.com/blog/token-authentication-asp-net-core) 2. Use IdentityServer4 as separate process to generate tokens for you. Use default settings for IdentyServer and do something like: ``` public static IEnumerable&lt;ApiResource&gt; GetApiResources() { return new List&lt;ApiResource&gt; { new ApiResource("api", "Initial api") }; } public static IEnumerable&lt;Client&gt; GetClients() { return new List&lt;Client&gt; { new Client { ClientId = "client", AccessTokenType = AccessTokenType.Jwt, AllowAccessTokensViaBrowser = true, // no interactive user, use the clientid/secret for authentication AllowedGrantTypes = GrantTypes.ClientCredentials, // secret for authentication ClientSecrets = { new Secret("secret".Sha256()) }, // scopes that client has access to AllowedScopes = { "api" } } }; } ``` And add authentication to your api: ``` services.AddAuthentication(options =&gt; { options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme; }) .AddJwtBearer(options =&gt; { options.Authority = "http://identityserver:5000/"; options.Audience = "api"; options.RequireHttpsMetadata = false; }); ``` More information - https://identityserver4.readthedocs.io/en/release/quickstarts/1_client_credentials.html 
Thank you for the insight, as a newbie this part it's kinda hard to grasp. I'll look more carefully into bot options, but I really like the Identity Server route. 
I guess I would need Visual Studio to generate these templates, right? I'm using .NET Core on Linux, and I don't have Visual Studio. But thank you for the tip, I'll see what I can do about it.
In the company where I work .NET Core and Node are being used fairly equally, sometimes in the same project. .NET Core was a blessing for people who enjoy working with a Microsoft stack, and I think it's only getting stronger. Of course Node it's going to be way more popular, it uses freaking JavaScript, but from what I've heard (never worked with Node) that can also be used against it.
You should be able to install the templates and do it with the dotnet command
Awesome! Will try it! :)
Have it reached beta yet? I haven't seen any announcement anywhere. The communication on this project is terrible.
OrchardCore has something similar to this. Look it up.
You can use ASP.NET Identity for managing your users. Identity is not the simplest thing to get your head around. Here are a few links that although a bit outdated since .Net Core 2.0 came out explain all the steps required to get up to speed with Identity: http://www.blinkingcaret.com/2016/11/30/asp-net-identity-core-from-scratch/ Because you are using ASP.NET core for your Web Api you can use JWT tokens: http://www.blinkingcaret.com/2017/09/06/secure-web-api-in-asp-net-core/ Or you can use cookies, although if you do this you'll need your login page to be outside of your SPA. If you have time read http://www.blinkingcaret.com/2016/01/06/what-authenticated-asp-net-mvc/ I think it will help clarify what it means for a user to be authenticated in ASP.NET, and why for your app it does not matter if you use JWT, IdentityServer, etc. Another useful resource might be http://www.blinkingcaret.com/2016/01/13/security-without-authentication-mechanism-asp-net-mvc/ where I explain how you can simulate a user being authenticated. Disclosure: I am the author of all those blog posts. If after reading those you still need help send me a private message. It's funny, I'm doing something very similar to what you described right now. Although instead of Vue I'm using Angular. 
YMMY :-) - integrating https://github.com/dotnet/BenchmarkDotNet early on should pay off quickly. In general though, yeah, some amount of copying is usually preferable to heap allocations. (Hidden costs and less obvious ones - copying the references around anyway, object header, heap fragmentation and compaction time, GC pauses on long runs...) The thing with the heap is that it can appear "free" in microbenchmarks and toy use cases, but the cumulative effects of a lot of heap allocations eventually slow the program down overall.
I've been through a situation similar to yours in some ways. At one point in my career I was working in a .NET shop, then moved to a JavaScript shop doing Node, had some similar sniggering around the mention of MS technology (although lightheartedly and not immature), then have since gone back to a .NET shop. I have no worries whatsoever about .NET jobs being hard to find. .NET is stronger than ever, and with Microsoft's move to open source and .NET Core the future is extremely bright. At the end of the day, do what you feel is right. I work with .NET because I like the robustness of statically-typed, compiled languages and C# / .NET just happens to be a great platform which supports that. I love C#, I love .NET, and writing solid software in a modern programming language is important to me. In my experience there are very few people who move from a solid statically-typed background to Node and stay there for long. I can't imagine writing any back-end JavaScript code with anywhere near the level of confidence of a statically-typed language. The Node / JavaScript ecosystem these days is laughable. It's totally quantity over quality. It's run by amateurs with no respect for enterprise-grade concerns, backward-compatibility, or re-use. I would sum up Node with the tagline "Node - reinventing the wheel... badly". I don't know about you, but I don't want to spend my time solving old problems. I want to break new ground. And I don't want to wrestle with a shit language that was written in a week. The only way I would come close to even considering writing JavaScript on the back-end would be via TypeScript. On the front-end, too.
I see. Thanks for the link to benchmarkdotnet. I'll be sure to check it out. But should I still use structs even though most of them will be &gt; the recommended 16 byte size will be exceeded in most of my cases? As-per https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/choosing-between-class-and-struct
Those are good guidelines for general programming; if you're aiming for stellar perf you'll need to break most of them at some time or other, though.
Yeah you could use Disqus or something to plug in a comment system. You can start with an XML store to rough out the data and datastore or go right to SQL. If you want a live site you'd want a real database so getting into EF Core and SQLite would be a good bet because you can easily migrate that into any database system. If you want to just deploy a web site CMS you can use something like Orchard. (shrug) Have fun
https://github.com/aspnet/JavaScriptServices Why not both at once? &gt;:-)
I've seen many languages/frameworks/paradigms come and go. I don't think .NET will be going anywhere any time soon. It's a robust and mature tech stack that hasn't stagnated. Also, you look at the spats being had among the internal development of Node et al. I'm not suggesting Node is going anywhere, but there have been actions that suggest they could politically tear themselves apart. Node and .NET complement each-other in the context of a .NET toolchain. With that firmly in mind I see no reason why one couldn't and shouldn't happily learn both. The JavaScript skills between Node and Client-side development are largely transferable. Having both on your toolbelt only serves to make you a more robust developer with the right tools for the job. .NET has historically enjoyed a strong support in corporate settings, it also didn't take long for it to become a viable option for the smaller enterprises. Combine that with the veritable array of Cloud-based hosting solutions, the cost of hosting a traditional .NET application has lowered significantly. Add in the move toward wider OS support beyond the traditional Windows/IIS/MSSQL stack and we'll surely see those costs lower and viability of adoption increase. Tl;dr: For now I think .NET is a safe bet. Learning both .NET and Node to increase your available ecosystems is an even better bet. I get the impression .NET Core/Standard is coaxing the developer down this hybrid path as the "happy path" of development.
&gt; The Node / JavaScript ecosystem these days is laughable. It's totally quantity over quality. It's run by amateurs with no respect for enterprise-grade concerns, backward-compatibility, or re-use. I would sum up Node with the tagline "Node - reinventing the wheel... badly". Having been badly traumatized by the browser wars of the mid/late 90s, where implementations of JS were radically different between browsers but also between versions of the same browser, I have taken to calling JavaScript by a different name - SPL, or Satan’s Programming Language. Explicitly designed to drive developers insane, SPL is a language that I go to extreme lengths to avoid using.
dotnet CLI ftw! :3
Similar to which he part? I would drop orchard core into our custom apps as a reference? 
I (sadly) still see jobs advertised for ASP classic. I don't think you need to worry.
&gt;Explicitly designed to drive developers insane Malbolge?
Oh man, I guess I've hit the jackpot! These articles are great, I've just begin reading the one about JWT Tokens and can't wait to try it out! Thank you! :D
I don’t know if it’s just because I’m old school or what, but just speaking as a web user, I do not enjoy using SPA when I run into them in day to day web use. Obviously there are exceptions to this, but to me, most SPA apps remind me of how non-native apps feel on a phone...they feel sluggish to me, and there is something missing when transitioning from view to view usually that is far less satisfying than making discrete requests. But to answer your question, it depends entirely on what it is you’re making. The line in my head where it makes sense to use an SPA framework is where I know I’ll be rendering a page where the user needs to interact with data in multiple ways, multiple times, in a single “view.” Basically I imagine in my head how difficult managing application state entirely on the server would be if I had to do it, or if there are any other limitations that would require keeping most work on the client. Anything that requires some sort of nontrivial AJAX updating or real time components usually push me to a SPA design. I’ll admit that I’m biased towards keeping work on the server, mostly because I value static typing and a fully unified code base from data to the html. But I legitimately think that _most_ sites that are built as SPA are built that way because it’s the cool new thing, and not because it makes sense. They introduce a lot of problems that have already been solved by traditional web pages, like page history, search indexing, routing, etc.
i agree that i think SPA is overused, just because its new. thanks for the input, theres nothing wrong with server side generated pages.
Fair enough. Consider this a MVP. It works for the solutions that I need opened with VS right now and that's why I published it. It definitely isn't the _right_ solution by any means. A PR is always welcome if you have the time :)
Raised an issue: https://github.com/shrayasr/Iko/issues/1 to keep track. Thanks :) 
Thanks so much for your reply. &gt; I work with .NET because I like the robustness of statically-typed, compiled languages and C# / .NET just happens to be a great platform which supports that. I love C#, I love .NET, and writing solid software in a modern programming language is important to me. In my experience there are very few people who move from a solid statically-typed background to Node and stay there for long. I can't imagine writing any back-end JavaScript code with anywhere near the level of confidence of a statically-typed language. I'm fortunate to be in the only team in the office that works in TypeScript so I do get some of the benefits of a somewhat statically-typed language. &gt; The Node / JavaScript ecosystem these days is laughable. It's totally quantity over quality. It's run by amateurs with no respect for enterprise-grade concerns, backward-compatibility, or re-use. I would sum up Node with the tagline "Node - reinventing the wheel... badly". This is probably my biggest issue with it. I like getting good with my tools. I'd like to be the guy who's worked with a set of robust tools for a long enough time to know the inns and out. I'd like to be someone who understands the quirks and warts of the CLR. I feel like I could never get that with the JS ecosystem because everything changes so fast. I don't get time to get proficient with one aspect of the stack and before you know it, the new version is out and it has so many breaking changes that it makes a lot of what I learned redundant. Also, JS skills as a whole are pretty useless without framework knowledge. I got lucky in getting this gig even though I was a big programming fundamentals kinda guy. The advice I'd give others though from what I know now is: learn React/Webpack etc. Things I know about prototypical inheritance or hoisting are rarely if ever a factor in doing my job. Also, every young buck in SV thinks of reinventing their own patterns for software development with their libraries. I'd like to be able to get value from the wisdom of the ancients, such as the GoF patterns. But I feel like those concepts are useless when the entire architecture of your app is based on a pattern who's only source material is a Medium post by some guy working for a startup. :( 
I agree about the NodeJS ecosystem: libraries are often unreliable and poorly documented, and they often don't play well together which is a problem when you need them even for relatively basic things (i.e. Promises). In the last year I've been using .NET Core and although it's been a bit immature, I've had an awful lot less frustration because the central framework covers most of the things I need. I know some people like the 'freedom' of NodeJS, but I'm in business and I want to get things done effectively, and being tripped up by core pieces of an ecosystem was not effective. I documented my feelings here: https://winterlimelight.com/2017/03/25/what-happened-to-enterprise-frameworks/
OK, I did mention this in an earlier article in the series... not as a mistake but in how to work with async in the first place :) Going back to the hogging part you mentioned... do you have any good references that I could read on how the blocking behaviour works exactly, with regards to the CPU and thread scheduler?
The problem is how shared hosting providers treat windows web apps. Every asp.net web app runs in an app pool. Every web site on shared hosting gets its own app pool, which means resources. When you start up a new app pool, it runs the JIT (just in time) compiler. .Net is just like Java. The code you compile is only halfway compiled, into an intermediate binary. Then, when you run it on a target environment, it compiles it the rest of the way. It takes time. In an enterprise environment, you have dedicated servers, and typically you just leave the app pools running 24/7. But not on shared hosting. They shut your app pools down after about 5 minutes of inactivity. So after 5 minutes, the next person to hit your web site will be sitting there waiting 15+ seconds before they actually see anything. I think it's complete bullshit. I've been using ASP.Net for years at work, in an enterprise environment. I love it, and I've gotten really good at it. But when I do work on the side, building web sites for various small businesses...when they want an application built, I can't steer them towards ASP.Net, because if they don't spend at least $80/mo for hosting, they'll be stuck with a 5 minute app pool life time. So I'm pretty much stuck writing/supporting ASP.net at work, and PHP for SMB development. I much prefer ASP.Net, but in reality, it's just not feasible. PHP is fast as hell, running on hosting that costs $5/mo. I think I'm about to start learning Laravel, so I can start using PHP the same way I use ASP.Net MVC.
Ah, ok. Makes sense, thanks!
i enquired on their app pool restart since my db is cached which takes time to do the initial load and is stored in the application cache, so gets cleared on app pool restart. arvixe does it once a day. the first load is very slow though i notice even when the app pool is not restarted it takes ages to load. even when i do two requests say 4 mins apart, so i dont think the app pool is my problem. I just think the shared hosting sucks for a fast app. though im only guessing since im comparing it to my local environment which is running on a high end i7 with 24 gigs of ram
It sounds to me like you've gotten everything good you can get from your current job, and there are good things to learn from working with JavaScript that are worth knowing (mostly bad things). Time to move to a new job :)
Isn't ELMAH open source?
I started with node in 2014 and while I haven't given up on node, there is just no damn way someone on planet Earth can write 40 queries in node with endpoints as quickly as I can do it with .net there are just way too many intellisense and ways with linq etc to make creating a repository pattern a unit of work pattern. Create pocos and use automapper and have custom dtos with a strongly typed c# language that it's just laughable to me to compare the two. I started with perl and switched to classic asp then to php.. but once .net c# came out I sometimes did RoR and Java and the then python.. finally node. Node has it's place but when my last boss who was "VP of software" who knew zero .net tried to dump .net for node saying he was an expert.. I could not believe that lack of design patterns. The duplication of code. Not saying people don't write node better than him, but geez the fragile sphaghetti code.. I am glad to have spent the time with node but I'm glad to be back in a shop that builds tons of .net .. with angular 4 and micro services. I suppose so what you enjoy but keep one eye open on direction the job market seems to be heading. 
Ya I was in search of a new contract and in the interview the guy said they still have a lot of classic asp.. I was 3rd person of 30 to get it right that single tick is a comment, but I couldnt recall the on error resume next nor the com components. Ya.. and another gig had 450 fox pro exes.. 
Node is JavaScript. JavaScript is client-side. JavaScript is a horrific mess at anything that attempts server-side behaviour. It came about because people who did client-side development wanted server-side behaviours. These guys have/had no clue about things that back-end devs stress about every day, like security, reliability, uptime, maintainability....so they built a system that has none of those things. It's back-end development for front-end developers who don't want all the boring learning, experience and knowledge of LEARNING back-end development. And it's buggy and unreliable as hell because of that ideology. It's a complete clusterfuck and will hopefully die off soon before it pollutes visual studio much more with its crash-prone extensions. "hey guys, the NPM package that handles basic multiplication in 99% of our libs (because for some reason THAT requires a whole damned library) has got a rootkit installed in it!" ....oh ffs! .NET is a server side language that handles everything properly, and is used MASSIVELY in the industry by anybody who actually knows what they're doing, and by big businesses around the world. Aswell as the benefits i already mentioned (which are #1 priority to most companies) , you can literally lift your classes out of a NET website project and drop them into a mobile app, a web service, an API, a console application, a windows service, an XBOX game.....just change the UI with whatever functionality you want from it and you're good to go It's going to be here for quite a while. 
By compulsively checking the status of [WebAssembly](https://www.hanselman.com/blog/NETAndWebAssemblyIsThisTheFutureOfTheFrontend.aspx) Node caught on because people wanted to leverage their front-end programming skills in the backend. What if we went the other way? Have people leverage their back-end skills in the front-end. I think we're getting pretty [close](https://github.com/dotnet/corert/issues/4659). Even without WebAssembly, though, I wouldn't be too worried about .Net going the way of the dodo. For trendy startups, Node might be the go-to, but serious businesses still really on enterprise backed Microsoft technology, C# amongst them. And C# isn't just used for web-dev.
Exactly my concerns. 
Most important requirement is how exactly your complex schema will grow; depending on situation, the following approaches could be used: * app should allow new business objects/fields/relationships definition in the run-time (without developer involvement) - in this case some kind of CRUD-engine is needed and flexible data model like entity-attribute-value. Data schema is also may be stored in the same database, and UI should use this metadata to construct lists-forms automatically or with high-level layout designer. Development of app like that might be rather expensive and time-consuming. Many existing CRM/ERP software already implement some kind of this 'custom business objects' engine. * domain is well known and it is ok if any changes are applied by developers. This is common case; all business objects are represented in a usual way with database tables. First CRUD stabs (say, MVC lists/forms) may be generated first time with scaffolding tools; as result you'll get a lot of MVC templates/controllers that need to be maintained by developers. Also, you can use mixed approach when complex UI is developed as usual, and simple CRUD engine can be created for UI of simple business objects (like lookups). Another technology that can be used is MDD (model-driven-development): data domain may be described with special (editable) models, and these models could be transformed in build-time into implementation-specific artifacts like POCO/repository classes, controllers, lists/forms etc. Models might be even C# DTO classes, or JSON, or XML. Transformations might be implemented with custom C# code, T4, XSLT. I've experience in development of all these variants. My recommendations are: * EAV model with run-time engine usually have a little sense until you develop mass-market software - and this is rather challenging technical task to create stable, extensible (and fast!) engine like that. Example of our [EAV engine](https://www.nrecosite.com/semantic_storage_net.aspx) (it is rather outdated - I don't recommend to use it! Just to give an idea how complex might be only one component needed for the engine). * MDD approach might be effective for long-term projects (=many years) maintained by the same team. But initial preparation of MDD infrastructure (creating metamodels, defining transformations) is also time-consuming step. Effective usage of MDD requires experienced dev team; reward is that complex MDD business app could be easily maintained by several devs (or even by one) with the same result as usual (say, MVC) app with a lot of boilerplate code by ten developers. Example of our [MDD framework](https://www.nrecosite.com/nrecoframework/online_app_builder.aspx) - it is also outdated (based on XML/XSLT/WebForms) and no longer supported, but still might be interesting for educational purposes.
.NET is definitely growing. TIOBE or whatever it's called estimated the growth at 88% from last year.
Is there really that much of a difference, though?
If you want a running start, Visual Studio 2017 (can be older, unless you decide to got with Core) has some web templates that you can use without having to learn every single aspect of it all at once. When you create a new web project, you will pick from a couple of templates and you'll be able to pick Windows Authentication. I recommend using regular .NET Framework with ASP.NET MVC. Although Core is also fine, the number of online resources available is not as plentiful, and there has been a "recent" architectural shift which makes a lot of those resources outdated. To interact with AD, you'll probably use some 3rd party library, which are available through the NuGet package manager. The official [asp.net](https://www.asp.net/mvc) site is a good place to start learning.
Just add TypeScript to your Node projects and you'll feel right at home. 
That's a very good example. I, however would prefer storing phone number in a separate table, and updating user's phone number would be easy - just change foreign key pointing to the PhoneNumber's table (add a new phone number there first if it is not present). Having said that with as simple a thing as a phone number, where the actual thing itself could be it's own primary key and (usually) has no other data (maybe you could add a type - landline / cell, though that could be inferred), a separate table might be an overkill. Nevertheless, if there might be even remote possibility of extending the type in the future (i.e. adding more properties to the phone number in this example) - having it in a separate table is quite valuable. And so ideally, I would want this approach for really most types, where almost every property of complex type (address for example, or anything else that may be extended with properties in the future) will have it's own table and be referenced by others using its primary key.
https://msdn.microsoft.com/en-us/library/windows/desktop/ms682105(v=vs.85).aspx and other pages in that section. E.g. see 'priority' section here: https://msdn.microsoft.com/en-us/library/windows/desktop/ms682105(v=vs.85).aspx where it talks about it indirectly.
Its not hard to extract out into another table when needed. Unless there is need in the near future i would bother with the added complication. I certainly wouldn't make it the primary key, again you probably don't want users interfering with each others records even of they accidentally have the same phone number. 
&gt; I'm in a JS bubble at work &gt; Being constantly mocked at work for bringing up any Microsoft tech. Yes, yes you are in a bubble, quite clearly. You only feel this way because of literally that, it will be different anywhere you go.
I would recommend Vultr - they support windows ISOs to be installed and since you have MSDN you can install the license directly without paying the extra fees some providers add on for Windows Server. The $40 VPS gives you a lot more than what Azure will provide.
This is what [PRISM](https://prismlibrary.readthedocs.io/en/latest/WPF/04-Modules/) does in WPF. I'm not aware of something directly implemented in that way for ASP.NET, but most of the concepts of PRISM should translate directly. Maybe reach out to the Prism developers, who might know if someone applied it to ASP.NET?
Easiest thing to do is learn basic NodeJs.. it'll take you 2 weeks max to get a basic hello world / todo app working. Write a very small app which has little bit of complexity. You'll realize two things - You fall in love with the simplistic workflow / code to get a basic app working You'll feel like NoSQL is simpler Gradually after making your app more complex you'll realize it's a nightmare to maintain. You don't know what layer that object belongs to. You don't know if "User" is an object or ID string. You'll look for a solution and end up learning Typescript. You'll love Typescript more than Node and start making front end stuff. Soon you'll realize ASPNET Core is also simpler now, just like Node. And you'll stick with it for the backend, u'll use Typescript for front-end, you're anxiety is gone, and start socializing again. You'll realize they are talking something about Functional Programming and how C# is doomed.. come back to us then, we will set you right :P
Isn't this just how the layout file works in mvc? 
Yes, the Layout view is part of idea. But Prism goes further than that into how to load modular components at runtime and make them add elements into pre-defined visual elements that in this case would be defined in the Layout View. Didn't Asp.net have a thing called Areas that was supposed to help out for this?
Node.js is a bubble, it is just where most Ruby/Rails developers moved into, after the fad went away. The best way to deal with anxiety is to become a polyglot developer, instead of a Language X developer, and not care for the fad of the day. Regarding .NET specifically, in Europe there are plenty of job opportunities. 
Well. Really thinks it depends on what "social groups" you hang with :D Where I work we use Dotnet Core and have old legacy apps with old dotnet. Many other companies around us are doing the same as us with Dotnet and moving to dotnet core. We made a prototype app in NodeJS for quick proof of concept, but decided to rewrite it in dotnet core, because that's what we are good at :) It's all about picking the right tool for the job. If most people on your team know javascript, it will most likely be nodejs for backend. If your working at a dotnet / microsoft house. Chances are they would pick dotnet / core.
sounds to me that it would be easier, quicker and cheaper to buy a tool to do that for you :) Instead of you wasting countless hours to learn C#, MVC and AD from scrath.
I've seen some of his tutorials, they are really good. I totally forgot about him when doing my research about MVC. I think this is one of the best ways to start. Thanks!
This is what I did. It's probably not popular to say here, but I feel like .NET stagnated for years and is now trying desperately to play catch-up (Docker, deployment story, functional features, async, move to .NET core, and more...) with Node and other open source projects. Node + TypeScript is a really happy place for me. It's productive, current, and I still get a statically typed language when I want it.
Everytime I look at that repo and its documentation I'm excited by the possibilities in development, but horrified at the thought of supporting production issues it could lead to. I also worry about which use cases they will carry forward support for. If I make a project using this, am I going to be left replicating the functionality of the VS/WebPack/Browser/Node.js integration in 2-3 years just to keep the project functional? 
&gt; .. with angular 4 and micro services. Do you host on Azure? I find selecting a project type for micro services is kind of frustrating for Azure. I know which project types Microsoft wants me to use, but they seem very heavy on dependencies compared to what I want to get out of a microservice. I don't want to run a 'Service Fabric Service Project'...I want to create a single endpoint project using ZeroMQ and there doesn't seem to be a sane way to host that on Azure with the same kind of simplicity you can get with Azure Web App Services...
In this case I'm happy to hear that...but TIOBE is bullshit. It isn't an accurate barometer of what is being used...they pretty much just count up search results according to their published method...which means differences in information retrieval for various phrases gives their results a HUGE margin of error.
By not giving a fuck about Node.
I think a better learning experience for you would be to check out http://wyam.io and learn how to create a blog from that.
Why is that?
Heya I'm locked in a 🦊 Fox Pro company that "has not the required amount of resources to start a rework in any other programming language" My issue there is being a trainee, having still 2 years left. The people of that time never learned how to properly structure an application and only work with the "current active window"
.NET and Java aren't going anywhere. I couldn't imagine building a large system with exclusively Node. Has to be a nightmare.
Check this out - https://www.codeproject.com/Articles/90142/Everything-in-Active-Directory-via-C-NET-Using
You've already played with MVC - static content generators are potentially something new for you, and if you're a newbie, 'new' stuff is good! :)
From my perspective in the tech recruitment space, I can tell you that .NET developers are in demand. There are simply more JS devs floating around. Our company is presently looking to fill 3 or 4 .NET roles, and it's a bit tough. 
It has MVC app as library
Thanks, that's very helpful!
Did you happen to forget the question itself or am I not just getting it?
Got it! Thank you, I will take a look too!
Totally agree with you...The downside is I work in this thing called Education where spending a few thousand on a quick portal like this is frowned upon, yet the institution won't get us a programmer... My life -_-
Awesome Thanks, ill start there. :)
Sweet. I think that in combined with some other asp.net resources will be a good platform for me to start with. Thanks for the post :)
Thanks for the comment. I currently already use TypeScript at work. I think without it, I would maybe dislike my day-to-day a lot more. I was pretty fortunate that my senior dev., an ex-C# dev, fought hard to have it included in our, at-the-time, greenfield project. Sadly, as magnificient as TypeScript is, it doesn't shield someone from the realities of the Node ecosystem.
How easy is it to get a job in Europe coming from the US? With things going the way they are, here, I have half a mind to GTFO. English is my only fluent language.
That is fantastic to hear because it's actually my goal to move to either France or Germany (from Canada) in 3-4 years. Not lying; it was a big concern that I would be stuck developing React/Node applications because I wouldn't get selected for anything else.
Afaik, async was invented by C# in the first place
Async / Await syntax was I believe. I was really thinking more about the whole concept of event loop processing for scalability that async is going for.
The problem is that academia is often teaching what they consider "free" technology. .NET is assigned to Microsoft in their mind and thus evil. This result in quite lots of people completely ignoring .NET. Even with .NET core, so many time people assumed my open source contribution was Windows only. -"Oh you can deploy your app on docker? I did not knew docker supported windows images" -"Yes it does... but no it is an ubuntu image" -"Oh so you are using Cygwin/Wine makes sense!" -"No... just .NET core" It might change slowly, as the cool kids start seeing that for making a serious app you need a bit more than JS.
Time will tell how web matures, but I don't see the SV mindset being stable long term at all... Too much of it seems like institutionalized dysfunction. On the other hand a lot of good things (like agile methodologies) were popularized through startup culture too. It will be interesting to see where these young coders end up in a decade. Perhaps by then they will grow out of "new automatically means good."
UI projects - node.js backend + frontend projects - .net 
What do you think about Bridge.NET? It has existed for a while before WebAssembly.
Event loop processing existed way before: the good old windows message loop is an event loop.
What do you mean by that? In developing the front-end, you are essentially doing JavaScript &amp; perhaps Node as well if you use server-side rendering with an SPA framework.
I understand your complaints and agree with everything. But this got me thinking: &gt; "hey guys, the NPM package that handles basic multiplication in 99% of our libs (because for some reason THAT requires a whole damned library) has got a rootkit installed in it!" ....oh ffs! How can we know for sure that Json.NET (a NuGet library that is used by pretty much every project in .NET) doesn't include a rootkit as well?
https://bootstrap-datepicker.readthedocs.io/en/latest/
If you're in that kind of environment, leave. Your co-workers aren't reflective of hiring managers at places that specialize in, or better, integrate .net with whatever tech makes sense. Life is too short to be around religious technical types
Yes - it's rarely used in terms of ASP.NET as far as I know
It is! But what Elmah does is fairly straightforward, writing a plain html string to the response, but it doesn't do anything fancy with views or controllers. Elmah's approach was just an inspiration.
I'm surprised that a Google search for JQuery bootstrap datepicker yielded 0 results....
I am going through the repo, I am doing some searching, want to give me a little bit more of a clue of which part if output as a class library that another app can reference?
Isn't it just middleware like MVC, though?
What's the practical difference between what ELMAH does and what you're trying to do? Or why does the fact that views and controllers are involved affect things? At the end of the day, doesn't MVC just write a plain html strong to the response?
In most European countries speaking the local language is a must if you want to actually enjoy living there. You might get around it by focusing just on UK, or multi-nationals that use English as the work language, but depending on the country you might be required to learn the country's language for socializing or getting local services. As for getting a job, it is kind of easy in central and northen Europe. On the south and eastern parts is quite complicated, given the current state of the respective economies.
I know enough Spanish that I could probably work up to fluent in a year or so, but Spain's politics are pretty f'ed right now, too. Come to think of it, so are the UK's... Maybe it's time to learn French or German.
just needed a bootstrap datepicker myself 3 hours ago and went with this one, works great and I had zero issues using it. 
Could you post the entire text of the assignment as given by your professor? Might save some back and forth.
Areas were basically feature slices. Just added another layer of classification above the Models, Controllers, and Views folders in the project. 
Yielded plenty of results, hence my request for recommendations from my peers.
Check out edge.js. 
Async is just syntactic sugar for the Callback Pattern. People have been writing asynchronous code for ages.
The honest answer if you'll never know. But nothing in life is guaranteed and the 'risk vs reward' is always a factor. I think the big difference is that Json.NET is one attack vector vs a billion npm dependancies always changing..
You know that you can just add a specific part of jqueryui? Such as datepicker? 
I do not know much about WPF but it sounds like something you will have to handle yourself. You will need to restore the proper state of the page when returning. Alternatively, you can merge both pages into a single page and cover up the home page with an overlay. Then just hide the overlay to return to the home page.
It's just nasty. This call center centered around it. I was building an angular node replacement.. I decided to bail for a better opportunity
What is your question?
I'm not sold on azure for microservices. I like azure for other things
I am pretty much agree with wkoorts' comment. Have just a things to add. Yup, for me it sounds like you are in a JS bubble. It is pretty common thing overall.. you are surrounded by colleagues who prefer JS and JS-devs community. They mostly share their excitement about JS and not about any other platform. So, they are biased. If you try to get some more details on who exactly and why people move to NodeJS you will find out that those articles are, at the best, just opinionated interpretations of online statistics. In other words - their sources of information are not as straight-forward as they claim it to be and might be interpreted in many different ways. For example, they try to make conclusions based on "number of new frameworks" or "number of new questions asked on StackOverflow". There is no actual reliable statistics on that and users of every platform tend to interpret any numbers in their own favor. The major driver of JavaScript popularity is that "it is supported everywhere". The language itself is really awful but it has relatively good cross-platform support and that is the reason why it is a standard on front-end. One noticeable thing about it is that there were many attempts to replace it with other language. And there are reasons for that. The pure JavaScript is too hard to write in. The latest changes in ECMA standards and TypeScript language actually turns it into something that is, at least, not making people to kill each other while using it. But still causes some nausea, cause it is still JavaScript under the hood. It is believed that NodeJS has a better learning curve for JS developers then .net platform. And JS developers, in average, are cheaper, which makes another driver of NodeJS popularity within startups. So, overall - don't worry about .net jobs, there will be enough of that for you for, at least, the upcoming 10 years. And the average salaries for .net developers are higher than for JS ones.
We used this a couple of years ago. Is excellent and will get the job done well.
Have you looked at [Windows Speech Reco](https://en.wikipedia.org/wiki/Windows_Speech_Recognition)?
I've mostly looked at things from a .NET framework side: Particularly System.Speech.Recognition has little to help me with the hotword detection aspect, and seems to require an overly limiting requirement that I have every possible sentence combination pre-arranged, so having it detect a command like "Remind me to..." would be difficult. I've been intrigued by trying Dragon's software, but it's a lot of money to find out if it'll work. I'm using good ole' WinForms at the moment.
I'm not really following what you're asking, but as for the data, I'd get a database going and put some dummy data in there. Then, you'd just bind the grid to that table (probably through a db framework like linq) and you can sort on the button click. 
Thanks for the advice, I will definitely look into using a db. Yeah I realized how convoluted my question was shortly after posting it. The short version is what would be a good method to replace a row in a grid or spreadsheet if another row starts off with the same value in the first column. I'll check out linq for now. Thank you kind redditor.
asynchronous code is just syntaxic sugar, people have done thread scheduling for years.
But seriously, asynchronous programming without async is as horrible than using assembly instead of higher level language. Sure you can do same thing in assembly... but well...
I am travelling at the moment. You can ask at the project gitter channel. They should be able to help you out.
I am waiting for the return of Silverlight on Web Assembly. Hail the Queen. Your humble servants have been waiting for your return.
Omg I am so bad. I was going to ask which route for referrals would be best
Great article and even though I'm also an advocate of .Net Core, I still learned some new stuff :D Definitely going to send this article to people who still live in the past and think .NET is only for enterprise businesses xD
Until we get a solid story for native desktop applications, which seems to be Xamarin.Forms as of .NET Conf 2017, there is no point on using .NET Core for us. All our Web projects are JEE/Spring based.
Of course no loss, just we want to use new technologies
WPF is SOLID a.f. bro.
You cand find more here https://github.com/nopSolutions/nopCommerce/issues/2492
I've covered some of the rationale and benefits in the accompanying blog post for the library: https://tech.just-eat.com/2017/10/02/reliably-testing-http-integrations-in-a-dotnet-application/
It looks quite slick, but ultimately you are now hardcoding your URLs everywhere. HTTP client gives you a lot of power around setting Headers on the client that get inherited per request.
It's a string extension. It doesn't require URL's be hard coded. Mine are configurable in my application.
By postback, I mean the way WebForms manages a web form when it gets posted. Those would still be requests, either get or post.
My gut feeling is that it'll probably be another year or so before enterprise folks realize they can utilize a native .NET stack on linux VMs, and thereby save license cash. Probably get a nice uptick at that point. Obviously it'll help as more and more functionality is brought in to the fold (SignalR looking like the next piece pretty soon).
I think that if you want to make an app inside browser Then SPA is fine. If you want a website though, server side rendering is better. This seems stupid answer but could not find better :p
FYI hotword detection is for something like "okay google" or "hey siri" and usually distinct from the actual speech to text portion. What it does is listen offline for that specific hotword and then once it's detected, it transitions to a different speech engine to parse the full, freeform range of your query. The hotword is nice because it *is* a predefined word that can be prepped and trained for, which will give far better accuracy. Then once you have your app's 'attention' you move to speech-to-text which has lower accuracy, but a much wider range of recognition (and no need to define a grammar ahead of time). [Nuance/Dragon](https://www.nuance.com/dragon/for-developers/dragon-software-developer-kit.html) is a leading player in the space, but it's going to be expensive unless they'll give you a dev license for free. The only free, offline system I know of is [CMU Sphinx](https://cmusphinx.github.io/) but it's more of a research project than production software.
Ooooo nice!
I was hoping there might be some NuGet packages in this space that someone might know of. I found a few, but most seem to be cloud API libraries. :/ I don't want to invest too much effort in integration of this sort of feature because I suspect I'll end up ripping it out and replacing it at some point.
&gt; Evrything is modular nowadays... You add MVC if you wanna use MVC or Web API since these two have been unified into one. So... everything is modular, but this isn't? Or...? :-) I mean, doesn't matter, but some critical thinking while writing could have helped for that paragraph :-)
Perfect. Thanks!
i dont think its stupid. its not an easy question imo which is why i asked. i think they both have advantages and disadvantages. 
Looks like they just released the version that supports ASP.NET Core 2.0. https://github.com/IdentityServer/IdentityServer4/releases/tag/2.0.0 
Reading through the examples. Am I right in understanding that you can basically mock any method? This would make writing unit tests for old code that doesn’t use interfaces a dream.
Thanks for your comment! I clarified the post a bit. I am not sure I understand what is the issue with MVC and Web API. I guess it's my fault I didn't clarify MVC and Web API relationship. Web API is part of MVC now. You can Add MVC.Core package, JSON Formatters and CORS. That's mostly all what you need for Web API. That is if you don't want to include Razor, Views and other MVC specific code to your app.
That's my thinking as well. Next year should be crucial for .NET Core. That is where we can help, the community. :)
Gotta say this looks impressive. Thanks for sharing.
 &gt; Notice how we did not use a @for (var model in Model) loop, because an index is needed to bind each item. You can still use a for coupled with IndexOf to get the index of the active item being looped.
Not a dotnet problem
&gt; Pose allows you to replace any .NET method (including static and non-virtual) with a delegate. http://www.reactiongifs.com/wp-content/uploads/2013/10/tim-and-eric-mind-blown.gif
Yeah this is all kind of confusing for me also. Especially when you say " If you want to use MVC (Web API) ". Huh? I thought Asp.Net Core was the new Web API? Would you mind filling in the blanks for me :-) --I just want a rest service; no views; no razor; no .cshtml. Just a REST service. ------You should use [BLANK] -- I want a REST service and also .Net Core's version of MVC i.e. views/.cshtml ------You should use [BLANK] --I want an Angular 4+ Front end with a .Net Core REST Service ------You should use [BLANK] --I want to use the new Razor Pages (i.e. new and improved Web Forms) ------You should use [BLANK] Thanks!
It's useful in the short term, but you'd only use this to provide a sort of safety net for fixing the code.
For example I can't see myself eshopping on an app. Nor can I see a blog website on an app. On the other end, and editor or any tool with specific purpose (email) I would say SPA
Anxiety? This isn't public speaking lol! Just believe in yourself.
It does, but Elmah is doing it in full .net, and just writing out plain HTML; the http handlers in the full framework are more robust from what I see. With a little finagling, I could do what Elmah does, but it would be rather hacky. And frankly I wouldn't be against that if forced to it, but I am wanting to go a little bit further by adding some forms and endpoints. I do not see a way to do this elegantly or otherwise.
Not sure I am following this. How do you mean?
I will clarify that as well, in the post. :) ASP.NET Core is a Web framework, it is the new ASP.NET. And ASP.NET Core MVC builds on top of that and it includes tools for both MVC and Web API.
Why? Now they've officially killed mobile, UWO means you can write apps that run on desktop and....what? Xbox? HoloLens? Stupid move Satya.
Microsoft needs to get their shit together on desktop apps. No one is using the app store and mobile is dead so we need a path forward from WPF to whatever the future is going to hold. The web world and services are fine, but thick client is a mess.
I really think they should start integrating UWP into .NET Core. It'd be an amazing cross-platform ui solution
What exactly is the issue? In my experience, there's no problem referencing a library targeting an older .NET Framework from a project that targets a newer one.
Which one is more of a mess, Microsoft's ORM or Desktop/Mobile Client technology?
That's slow though. 
I doubt Node will be killing anything in the long run. Pretty much the only advantages it has is that it's easy to get a basic project up and running and that you can to some degree use the same libraries in the frontend and backend. Debugging/tooling is nowhere near the same quality as .NET with Visual Studio (last I checked anyway) and the lack of static typing tends to lead to the code becoming an unmaintainable hodgepodge very easily. Granted, TypeScript does a lot to improve the latter by adding optional typechecking, but I still think C# (or any statically typed language for that matter) is superior for anything but the simplest backend.
Learn Razor Page. It will cut down your learning curve massively. * Download .NET Core SDK (version 2) * Get this code https://github.com/dodyg/practical-aspnetcore/tree/master/projects/aspnet-core-2/razor-pages-basic * Change TargetFramework from netcoreapp2.0 to net461 https://github.com/dodyg/practical-aspnetcore/blob/master/projects/aspnet-core-2/razor-pages-basic/razor-pages-basic.csproj * Link to Microsoft active directory library * Code your logic
You forgot to include a license file, but if you can add one I’d be interested in checking it out :)
Satya saved Microsoft from going under. I am currently making an app (actually a platform) that runs on iOS, macOS, Android, Xbox, raspberry pi, Windows, Intel Joule and UWP. Backed by Azure (3 azure functions, cosmosdb, IoT hub and a servicebus). With C# and XAML. If it wasn't for him MS would still be echoing "developers, developers, developers". With the UWP option I can write a single app (one project) that covers all Windows native platforms. Satya understands where he is going. And he under what the ecosystem is all about. Ballmer didn't. 
Yes, you are right, you can of course do that if you prefer. But watch the performances, as nirataro said.
Xamarin can target both iPhone, Android, and UWP.
Entity framework is actually pretty good. It's not lightweight, but it works
[There](https://channel9.msdn.com/Events/Build/2016/B829#time=12m46s) are many [reasons](https://channel9.msdn.com/Events/Build/2016/B829#time=17m50s) for why [we need](https://channel9.msdn.com/Events/Build/2015/2-692#time=4m02s) UWP, besides the phone. See [more here.](https://channel9.msdn.com/Events/Build/2017/B8011) In addition, this also gives you better Windows integration, [granular privacy control](https://www.howtogeek.com/221864/digging-into-and-understanding-windows-10s-privacy-settings/), improved [battery life](https://youtu.be/GJ2ClkCImtM?t=3576), and modern UI apps have better [fullscreen multi-tasking.](https://www.reddit.com/r/Windows10/comments/65t3tg/so_edge_has_fullscreen/dgd496f/) UWP apps are very capable. For example, [Adobe Experience Design](http://www.adobe.com/products/experience-design.html) is a full fledged professional creative UWP app, distributed outside the Microsoft Store. Also many Windows devices sold these days have [pen &amp; touch screens, or are 2-in-1 tablets that benefit a lot from full proper UWP apps.](https://np.reddit.com/r/Surface/comments/6pnk4q/windows_10_tablet_mode_woes/) There is also Xbox, HoloLens, IoT that use UWP. And although the Windows Mobile platform is being phased out, doesn't mean that there won't be small mobile telephony capable devices (Andromeda) running full Windows on ARM in the near future.
No async? :(
You seem to think ANY of those technologies have Staya to thank.....
Thanks for that. I just added a license file.
Thanks! I’ll take a look at it later on.
&gt; Visual Studio uses CoreCLR for UWP application debugging. It provides much faster build + debug startup time than .NET Native provides. Visual Studio has transitioned to using .NET Core 2.0 instead of a custom build of CoreCLR. That should remove one obstacle for F# on UWP at least. Now we just need .NET Native support.
If they want me to switch from WPF to something else for my medical software they need to give me common view code for OSX and Windows
What exactly is all native platforms? For full functionality you can use the latest version of win 10 and only that. Windows 8 and older 10 lose lots of features. Windows Mobile is dead. Windows before 8 doesn't support UWP at all.
As of .NET Conf, the answer is Xamarin.Forms.
Maybe when it's more mature
You posted this exact link a few days ago.
I agree, just stating what seems to be the hidden message in the Xamarin.Forms related talks at .NET Conf 2017. 
It compiles but when executed the library that requires 3.5 complains that it can run under 4.5. So it seems that because one of the libraries is targeting 4.5 it's causing the app to target 4.5.
Which EF are you referring to? The abandoned EF 6 or the incomplete EF Core?
EF 6 isn't any more abandoned than the rest of .net framework. The transition is quite messy at the moment, not least because they only just implemented system.data, but the direction is pretty clear on that stuff. Eventually core will replace framework, at least for new applications. It's not there yet, but that's where we're going.
Under the hood, .NET has to call into Windows somewhere. Do you want your app to call in using Win32 (which is basically a compatibility layer at this point) or WinRT. That's really what this is about. 
Mobile in its current form is dead, Andromeda is still a possible future platform
WinRT is built on top of Win32 rather than directly on top of NT APIs. So if you think about it: Win32 -&gt; NT WinRT -&gt; Win32 -&gt; NT At least as far as a C++ developer is concerned. If you’re a C# developer, WinRT and the core BCL classes are roughly analogous so you’re paying the same cost anyway. But if Microsoft was actually trying to get away from Win32 API, they’d have made WinRT a first class runtime and ABI on top of NT directly.
UWP is much more than just APIs, the sandbox model is also relevant.
Again?
&gt; Eventually core will replace framework, at least for new applications. This is the very definition of abandonment. 
Use: - Serilog - Mediatr - FluentValidation - AutoMapper - Vue.js or Ractive.js - FluentMigrator - LLBLGen Pro 5.2 (buy it) And roll the rest yourself. 
Do I need to use Vue or React if I'm not building a SPA?
No, that's the definition of eventual abandonment. Eventually core will replace framework. It's not ready yet, and the transition is still a bit rocky, but in the mean time the old way is still supported.
I loved this and other one on viewmodels. Please keep them coming as per your convenience. I needed a refresher for mvc and these kind of posts are what I want.
And that sandbox model isn’t implemented via Win32 APIs for sand boxing? One couldn’t call them directly from C or C++?
I don't think so, because Desktop Bridge apps run with the sandbox turned off..
Right but my point is UWP sand boxing is implemented using the WinAPI / Win32 API by using restricted security tokens and otherAPI calls. It isn’t implemented on NT kernel APIs to my knowledge. Does anyone more knowledgeable than I with regards to UWP reading this thread know otherwise?
Retyped reads TypeScript definition files (.d.ts) and generates a C# Class Library project based on that library. The C# project is then compiled into a NuGet package and published to NuGet.org. At its core, Retyped is a binding library generator for Bridge.NET.
Honestly I think you're using the wrong tool for the job. In 2017 I wouldn't consider anything but a static site generator for that kind of work. Build a nice template where I can write posts in Markdown, set up CI with Travis that gets called via Webhook from Github or BitBucket, and serve the site from a CDN like Cloudflare. Unfortunately there will never be anything "fundamentally secure" that accepts user input and executes code on the server, and this is coming from a back end guy who dies a little inside every time I have to leave .NET land and work with Javascript. For a blog serving up a static site is rather simple, but getting a user authenticated into a mashup of social media APIs is a bit more complicated because you don't want to expose your API key and secret in client side Javascript. If I was building niche social media apps I'd strongly consider going the same route and offload social media API authentication to a provider like OAuth.io. If I wanted to avoid that for some reason I'd probably set up an Azure Function to shield my app secrets and keys to the OAuth providers and process the redirects from there. But if you're integrating with many platforms that seems like a lot of work when paying relatively little for 100+ integrations out of the box. 
Interestingly, I always write extensions to the vanilla tcpclient/tcplistener types. Though I've never actually thought about it being included into a framework. :)
You don't need but you can use it wherever you want. It's just a good way to build reusable components.
What would be a good use case for using this library?
Write a C# application and compile it to JavaScript. Run the app in any browser on any platform. 
Thanks float! I'll surely do that! I appreciate your comment
Thanks float! I'll surely do that! I appreciate your comment
Hmm, is your executable project targeting a lower framework than 4.5? If so, try just re-targeting to 4.5. Your executable project will have to be the same or higher than what all referenced libraries are using, but as long as it's targeting a higher framework, it should work. The general rule for all projects is that you can't reference libraries targetting a higher framework version than the project itself.
I actually strongly agree with this (I know a lot of uwp supporters here). Since windows phone is dead, tell me what UWP can do that web can't do, plus web is cross platform. If windows phone is not dead, UWP can access to GPS/sensor api or that sort of thing. Yes UWP is much smoother, but how many stakeholders will actually pay that extra for windows app once a web is working, pay extra for windows desktop only app? IoT.. Kind of joke TBH, I don't know have they implemented directX into raspberry pi, last time they promised and 1 year later it is still rendering using CPU. My friend used for university project, random kernel crash and bluescreen. Hololens and XBox, again, I think, Crossplatform web &gt; Hololens/xbox (platform specific) I'm still relying on WPF due to it's ability to access win32 api calls, although I can feel the graphics rendering is much slower compared to UWP. ORM wise use .NET Core 2.0 Web API. That is what a web can't do! I don't see valuable point on UWP. I wouldn't say stupid Satya, .NET core is cool, open source is cool, UWP, needs more features to distinguish from web.
The 3 people developing shit for UWP will be pleased.
It's evolution
Lol, couldn't be more true.
Alright, cool! Do you have an API explorer, what API's are implemented? Would see opportunity to use something like this in an Electron or Cordova app.
Personally, I'd host all the business logic in an asp.net core API. Then run angular 2 in the browser and create an angular 2/electron app for the desktop. Desktop app code would be almost identical to what you have in the browser. I'd then build my mobile apps with react native. Obviously, I don't know your specific requirements, but if I were starting a project from scratch that needed to be cross-platform, that's what I'd do.
That was in a different subreddit. I did not post in this subreddit. I needed more feedback, which I got. 
Currently, 2235 libraries have been implemented with Retyped. Everything can be searched at https://retyped.com/#search. We have a very cool Electron app demo at https://github.com/bridgedotnet/Widgetoko. We will be blogging and creating tutorial videos about Widgetoko soon.
Need local resources like usb, serial, word/libre office
And? My point isn't that you can't target or develop for UWP, its that UWP as a concept no longer makes any sense or means anything. UWP is now, realistically, just windows desktop development. 
Would you rather your app supported Xbox and HoloLens, or the millions of remaining windows7 systems? Because a native application that runs on win7 too is a MUCH better prospect now for 99% of developers than SLIGHTLY better battery life and Xbox support (nobody's got a HoloLens, and very VERY few apps will benefit from it) A WPF app or similar will run on ALL of those devices, and support touch just fine. The one, single advantage of UWP is in its very name, and MS have removed the only "U" that people were *really* developing for outside of desktop. Sure, in a few years I'm sure there will be a HoloLens in every house, every light bulb will run IoT .... but going by their previous few years behaviour, both UWP and its successor will both have been retired by then. They'll probably be telling us to code in a new Silverlight or XNA.
RemindMe! 24 hours 
I will be messaging you on [**2017-10-12 21:12:52 UTC**](http://www.wolframalpha.com/input/?i=2017-10-12 21:12:52 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/dotnet/comments/75r8gk/can_anyone_recommend_a_aspnet_ui_controls_library/do8i5ob) [**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/dotnet/comments/75r8gk/can_anyone_recommend_a_aspnet_ui_controls_library/do8i5ob]%0A%0ARemindMe! 24 hours ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! ____id____) _____ |[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/) |-|-|-|-|-|-|
Devexpress is pretty good with good documentation and decent support.
I've used telerik and kendo ui. They're very well supported and I would recommend them.
Native is definitely the way to go then.
Devexpress is ok I like it more than telerik but then I only had access to an old version of telerik at that job DE really slows visual studio down though... so many breaking changes between versions so have to multi install versions 
We've just started using sync fusion. Their controls are decent, easy to use. The 2 Support calls I have opened so far have been answered really quickly by staff who clearly know what they're doing. I don't know if other vendors have this, but most of their controls exist across all platforms and the apis are pretty consistent so you only have to learn them once.
I tried having the executable target 4.5 but the one library complained at run time about not recognizing the framework version or something like that. So it seems this is not possible. I'm trying to see if the other library has a lower framework version but it doesn't look like it. It's ServiceStack.Text that I'm trying to use with 3.5.
Ah... so you can bind to an external js api; much like how typescript works. Interesting :)
I'm assuming a console app only?
Is so its not just console apps; so if/when you are transpling C# to js (e.g. http://bridge.net/) How do you refer to the DOM, or D3 or jQuery from within your C#? Hence the Retyped libraries, so you can do that
Console apps, Class Libraries, Node JS, SPA web apps, Electron Apps, Responsive web and mobile apps, Progressive Web Apps for Mobile, etc... Build whatever you want that can run in a JavaScript environment.
The https://deck.net/webservice sample demonstrates the DOM and jQuery Retyped packages. We're building out a Demos repo with other libraries, see https://github.com/Retyped/Demos
Kendo UI rocks.
WinForms?
Syncfusion offers a "community edition" which is completely free and includes everything. Good for learning or if your business is under a certain number of developers (I forget the exact count). It's pretty nice. I have used Telerik's stuff at work (both the webform controls and the Kendo UI stuff for MVC) and have really enjoyed it. Very well documented. They have tons of "widgets" for their webform (ASP.NET AJAX) stuff. I would highly recommend looking into Telerik.
Kendo UI is owned by telerik now I believe. Both have *reasonable* documentation, but you will be frustrated as hell until you work with them enough to sort of get in the headspace of the people who made them. Intellisense helps a lot on the back end, but I have found that on the client side you end up doing a lot of fumbling around trying to figure out what's going on when, and what objects/fields are accessible. What I usually end up doing is setting a breakpoint in chrome debugging tools, and then trying to evaluate expressions in the console to figure of what I have access to.
Correct, they've been one unit for years now. The documentation is hit and miss but you can usually get what you need out of them.
&gt; ServiceStack.Text I know for a fact that you can run ServiceStack.Text under a .NET 4.5 application, because I did some profiling with it compared to JSON.NET and Jil. Any reason why you can't upgrade to a more current version?
Is there a way to call some javascript code directly? For example, i have some libraries that are not on retyped. But they are either just a jquery plugin, or a single call to a library. Is there a way to handle that? 
I use vue or ractive (not react) to make 'enhanced pages' instead of relying on just jQuery. I am not a big fan of SPA myself. 
You could look at Wisej.
Telerik/Kendo FTW
Lots of options for working with external JavaScript code. It's simple to create your own binding library as they're just simple C# Class Library projects. Some docs on creating a binding library: https://github.com/bridgedotnet/Bridge/wiki/building-a-definition-library You can also directly call raw JavaScript with a variety of techniques, see https://github.com/bridgedotnet/Bridge/wiki/using-external-javascript Here's a very basic Deck demonstrating two options: https://deck.net/c4a2bf97b31813c30304ff5794eceef5 Hope this helps. 
Check this out. I haven't tried it yet but it should do what you want to achieve. https://github.com/OrchardCMS/OrchardCore/tree/master/src/OrchardCore/OrchardCore.Modules
https://github.com/OrchardCMS/OrchardCore.Samples
This seems like it might be what I needed, gonna dig through it and see if I can replicate. Thanks!
Razor Generator is for precompiling your razor into an assembly you can use across solutions
That's the problem. I need ServiceStack.Text to run under 3.5 because I'm referencing another 3rd party library that will only run I see 3.5 and I need to use the two together from within my library. If I upgrade my library to 4.5 the other library throws an exception at run time.
No, let webforms die in peace.
The first link about async methods is really good. I went through all the posts they written in this mini series about it. 
I guess you've just been unfortunate enough to encounter one of the few libraries that for some reason is incompatible with newer frameworks then. Unless you can find a way to get that library to work, or re-target and recompile it (if you have access to the source) I don't have any suggestions. What is the library that specifically requires 3.5?
I don't get it... Why not use queries with SQL parameters instead? Not only they can be optimized since their execution plan will be cached, you eliminate any possibility of SQL injection.
These are starting to get *really, really* overdone. They've been overdone to the point of hilarity since ages *before* C#7 even came out.
They are trying to improvise on existing syntax and then because of it we all find it getting overdone. I don't deny your point but some feature like "out" really stand out and have helped me
Great. Please let us know the result of your investigation. 
There are examples of using both SQL queries with parameters and stored procedures, is there something else you are referring to?
I guess it sounded like a rant, but i was more focused on the reasoning behind first part of the article. As in, why use a glorified String.Format() for passing parameters, rather than simply saying: "This is bad, don't do it. Use SQL Parameters instead."
Well, that's the crux of SQL Injection right? But it's good to show with working examples exactly *why* it's bad and what you could do with it before showing the way around it. I think when I was first starting out and someone was telling me "do it this way. It's better". I always wanted to know why I should do it this way? What would happen if I did it this "easy" way that seems straight forward. But I see your point :)
What? I'm referring to your video and the hundreds like it.
This is how Erlich Bachman would pitch ASP.NET Core.
Oh my bad , yes many people have done videos on this, but don't we have lot of company selling same product. e,g there are hundred of videos teaching A, B , C for children but each one have different way of teaching. This is just my Opinion. Happy coding and please subscribe and definitely i will be coming with more fresh content for you.
[Dreamweaver, duh!](https://www.youtube.com/watch?v=n-DmAh0dObI)
to do what?.... web design... DW Any kind of proper programming... VS
&gt; and please subscribe and definitely i will be coming with more fresh content for you. LOL! This really overdoes it considering what /u/robhol tried to say.
This has to be the weirdest comparison ever.
Agree
Visual Studio in every scenario is better. Else, use VS Code.
I have always wondered how you would kick off a long running process and notify the user it’s complete. I didn’t see anything like that in the examples
No. Fucking spam of shitty garbage websites.
Add a timestamp to the end of the file URI with a query parameter.
Not a single issue here. Works flawlessly. Sometimes slight hiccups, but reading the documentation, reading the error messages and thinking it through usually leads the way.
I second this suggestion. Google "cache buster" for more info on why this technique works. 
Wouldn't happen to have a handle on what this might mean when attempting to compile razor views (Which works fine in debug): "*.cshtml (-1): Targeted tag name cannot be null or whitespace." Per chance? :D 
Sounds like a bad addTagHelper directive maybe?
It happens to me from time to time. Yes, it can be frustrating. The system is highly customizable, which is great, but it can also be confusing. Hang in there. 
There has been a lot of churn in the tooling. I'm hopeful that 2.0 will calm things down moving forward but I was hopeful about 1.0 too. It's getting better but I'm still pretty nervous about using it for anything business related.
.Net Core (and especially trying to coexist an ecosystem that has .Net Core, Standard, and regular modules) has reintroduced "DLL Hell" into my life. Plus all sorts of little annoyances like right clicking to drill into a method in a .Net Standard library and getting the readonly reflected objects instead of the actual project in your solution.
It feels like a trend at Microsoft lately. UWP has been an absolute mess as well and had 4 different, incompatible designs in as many years.
The SharePoint 2010 Client Library.
You have to store the ConnectionId that initiated the request, as well as some kind of ID that you can use to track the long running process. Start it off asynchronously, and when it finishes, it will notify the hub which will reach back to the client via the ConnectionId. To get an idea what I mean, see my article on TaskCompletionSource: http://gigi.nullneuron.net/gigilabs/taskcompletionsource-by-example/ It's not SignalR, but it involves the process I just explained and it's not a big deal to adapt it to SignalR.
Thank you. I’ll take a look.
Consumers don't want [inefficient, bloated, ugly battery killing WPF legacy](https://medium.com/@vitorgrs/uwp-vs-wpf-a-simple-listview-performance-comparison-c53e44782f23) apps, with a [bad user experience on modern Windows devices](https://np.reddit.com/r/Surface/comments/6pnk4q/windows_10_tablet_mode_woes/). Stop spreading bad advice if you care about the future of Windows. WPF is in maintenance mode, even Microsoft doesn't use WPF for new projects anymore. Legacy apps are hampering progress and give Windows a bad name, driving people away from Windows. * https://np.reddit.com/r/Surface/comments/6hozrf/new_surface_pro_chrome_beyond_frustrating/ * https://np.reddit.com/r/Surface/comments/75rdra/is_there_a_magic_trick_for_getting_surface_pen_to/ * https://np.reddit.com/r/Surface/comments/6pnk4q/windows_10_tablet_mode_woes/ And you devs wonder why consumers don't like Windows anymore. Devs that don't care about giving us a seamless modern Windows experience won't get any of my money, and I will steer every Windows user I come across away from those devs.
This is really helpful. Thank you! I'm going to hold off on LLBLGen for now. My models aren't so complex (yet) that I need a modeler. Not ready to pay €300 for that...
It's not a modeler. It's the best damn .NET ORM out there. Ask https://www.reddit.com/user/Otis_Inf for a discount :) Its his baby.
My preference in order: - Good old server side rendering and boring POST - Smart Pages (JS heavy but only on a specific page) - SPA 
I hear you. I've been working with .Net core since the early RC's and each upgrade has been pretty painful with terrible documentation. I've been avoiding the move to 2.0 because of all the tooling upgrades and I've heard VS 2017 crashes all the time. I don't know whether it's true but I didn't want to lose a few days of productivity just to find out. Yesterday I decided to upgrade to 2.0 on my Mac to test it out and found out they force you to use at least Mac OS Sierra which doesn't run on my Mac. Sigh.
I avoided 2017 until a few weeks ago and haven't found crashing to be an issue. Maybe it was never a thing, maybe they fixed it. 2017 is pretty much required if you're doing anything with Standard/Core 2.0.
Was there a few months ago. Honestly pre-2.0 is more or less alpha in my mind. Since going to a pure 2.0 on my Mac and windows machines (with 2017) I haven’t had any issues. The upgrade from 1.1-&gt;2.0 was painful enough. 1.0-&gt;2.0, no thanks 
For me crashing was really only a thing for the first week or 2 after release.. Been smooth since.
I don't really imagine the bot cares about your opinion. Just report and move on :p
This is good info! Nice site altogether, I’m gonna keep track of it. Some invaluable info here. 
Compared to the general ecosystem of development, I think .Net Core is pretty solid. Has it's hiccups and weird things that make me scratch my head, but nothing that turns my code into a hack like some other platforms. Compared to the full framework experience, yeah it is a lot more work to get things right, but the full .net framework was in a class of it's own in that regard. NodeJS, Ruby, PHP, etc all were as annoying or more so than .Net Core is for you right now. I love it though, I love the openness and the freedom I have with it compared to the full frameworks. The quirks are a cost I am willing to pay!
I was trying to do something like what you had in mind, but a bit more nuanced, and came across this: https://aspnetmonsters.com/2016/07/2016-07-16-loading-view-components-from-a-class-library-in-asp-net-core/ https://github.com/AspNetMonsters/ExternalViewComponents Didn't work for me like I hoped, but maybe it will solve your needs.
I jumped on to a contract with .net core 1 and angular 4. The .net core has not been enjoyable with build issue. Git issues. Ok. Visual studio 2017 is likely the culprit on git etc. Nuget packages nightmare.. I am less productive with very unnecessary new namespaces etc. Glad to be taking a contract with no dot net core. I'd rather wait a few more years.
I've been writing a website using core 2 vs2017 and haven't had a single issue. People were talking about 17 crashing all the time etc. I got none of it. Maybe I've just been lucky or haven't used the buggy stuff.
If it's any consolation, I've had remarkably similar issues when dealing with Node except in my experience that can break day to day "just because". I don't mean to say that .net core is stable, just that before you jump ship don't expect other ecosystems to be any more stable. This just seems to be the norm these days. For what it's worth, it should calm down considerably from here on in.
WinForms? not entirely. The interface layer is the issue. Of course there shouldn't be a problem porting the business layer|logic. Providing full cross-compilation of a WinForms app on multiple platforms is a tough nut to crack. There is an awesome option to compile WPF/XAML with Bridge.NET using Granular (https://github.com/yuvaltz/Granular). Our Widgetoko (https://github.com/bridgedotnet/Widgetoko) demonstration app is almost ready to announce too. Uses Electron + Node.js + Retyped + Bridge to create a native app that works on Mac, Linux, and Windows. 
For me it would depend... Are you changing often? Are all project structures the same (referenced images CSS paths etc) If the changes were barely changing and the relative paths all matched I'd probably go with the library as mentioned already. This however means changing the data requires you to release all projects using it. One thing that might be more friendly for your release workflows might be to just have your header and footer pull from a database "cms" style. You could still manage the pages in a library to keep consistency but not require a release for a minor text change. This would allow you to keep them all the same by pointing to the same db and also to break one out by simply pointing it to a different db 
IMHO.. Since they are junior, the best thing you could teach them is how to use .NET as a backend service / Web API (JSON provider) as opposed to using web forms "like" controls which I guess you would call Razor controls. What do I mean? Well, there are some excellent HTML admin skins like: Metronic https://themeforest.net/item/metronic-responsive-admin-dashboard-template/4021469?s_rank=1 These are responsive, styled, and have TONS of built in functionality and designs for various functions. Data tables, auto complete, forms, form validation, etc. Using a template like this means one of two things. They would simply copy the static bits of HTML (from the controls you want to use) from the HTML example provided into Razor views and using for/foreach loops to render data from typed .NET Models. This is a typical MVC style of programming without Javascript. Orrrr... in the case of datatables, autocomplete, etc. the theme uses javascript Web API calls to a MVC Web API controller to populate the data and has complete wiring and instructions for each type of control. Learning the Web API approach to this means you are also learning that the .NET backend is a modular piece of the puzzle, if you wanted the backend to be Node.JS or Ruby on Rails, or any other backend Web API (JSON) provider, the knowledge learned from wiring that to these frontend "controls" is the same. After 20 years of experience, if you build your backing using WebAPI (JSON) as it's data layer, you can easilly reuse, reskin the administration with minimal effort.
K?
We tried the first RC and regretted it after a few months and migrated back to vanilla .net. I've been meaning to check out the latest version but i just don't have faith in it. Reading things like this doesn't help either
Squidex is the only one I know of. Orchard Core is in development but still early days.
 The one I use, and I believe the most popular: https://github.com/OrchardCMS/OrchardCore not super lightweight but it's not bloated.
Lol, what the fuck is this?
&gt; I've found I've had to dive into .csproj and mess with tags, versions and dependencies because of errors messages in the build process that shouldn't have happened in the first place waaay too often now... Do you use ReSharper? I've been having similar problems (though just with things like renaming) and think ReSharper might be the culprit
Most I know of are still in development, there's a bunch listed on [Awesome .NET Core](https://github.com/thangchung/awesome-dotnet-core#cms) that you might want to look into. I work on [Cofoundry](https://www.cofoundry.org/), a CMS that is also in development. We have pre-release nuget packages targeting .NET Core but we won't have anything more concrete out for a month or two yet.
When MS start wit .net-next (I forgot how it was named from the beginning) I tried to catchup with each release of betas and then rc, but after a year of this I just gave up because each release breaks everything. And now I check it once a year (last couple years) and situation not changes. So each year I think: "Ok, will try in a year".
If you're using git, use a submodule. 
And this is why I have yet to move into Core with any *serious*, large-scale project.
I've been developing with vs code &amp; dnc for some time. it works fine for everyday tasks.
I've been using ASP.NET Core since about beta5 and have not seen any of the problems that people in this thread have reported. I've delivered about 5-6 projects with it now and I would never go back.
Right there with you. However, I knew not to touch .net core until 1.1 and not do any serious development until 2.0.
Thanks a lot for the suggestions. From the comments it looks like there is no clear winner. I think I'm leaning towards devexpress or sync fusion. 
ive been using .net core since 1.0 both in commercial and personal projects. commercially it always seems to work but when im doing stuff for my personal projects i always seem to get weird errors. Like this new one today im getting that prevents me from building my project: An error occurred while writing the output file: System.IO.IOException: Incorrect function. 
Haha wtf is this?
Not sure but, it turned out that deleting the obj folder fixed it.. it was something to do with nuget packages I think... but I have no idea how things work under the hood... though I'm starting to have to learn.
True, that thought is kind of why I've stuck with DNC for so long... but if I were to start from scratch I would definitely have tried something else at this point. For every hour of code I've spent an hour dealing with DNC/Nuget/Visual studio/dependency issues... its been a very unproductive coding experience. I'm from iOS development, where I can just open xcode and write code. everything just works.
I'm not super enjoying the switch to dot net core if I'm honest. Trying to push through it because I do think it's going to be "the future" and I like the direction they're taking, from what I can understand of it at least. I personally can't wait for it all to settle down, for all the third party people to get on board, for documentation to be overflowing.
&gt; I'm from iOS development, where I can just open xcode and write code. everything just works. Actually if you stick to .net framework which work only on windows, it is very stable and you can write code and it works. Problems happen with cross-platform support.
I haven't done a lot with git in Visual Studio... does the Visual Studio tooling actually support git submodules?
Yeah, the documentation is not the greatest. But if you ever feel that way, please let the .NET Core team know.
.NET Core ... will advise against production for another year or so. It’s on a good track, but they’re overhauling the entire ecosystem, so it’ll be a while till the dust settles down. Heck, even tooling is incomplete as of today, entity framework 6.0 can’t be ported over without major efforts and crypto is a work in progress.
Haha that's a new one, and I thought I'd had every ambiguous error at least 3 times for 3 different unrelated reasons! I don't envy you. Try deleting .vs , bin and obj then try restarting your machine, then try opening vs in administrator mode... those steps fix 50% of the oddities I seem to face.
Wordpress.NET . . . . Ok joking, but we went down that rabbit hole of a C# CMS and ended up using Wordpress even though PHP is a joke. Wordpress just has such a massive ecosystem that’s hard to ignore and for the most part you’re interacting with the Wordpress API (upper layers) that the PHP weirdness is somewhat tolerable. We found that in almost every single case, there was a plug-in to implement or customization - just once case we needed custom code. In C# CMS’ we’d have to write all those customizations ourselves or significantly fork plugin sources to get our stuff done.
You should try [Rider](https://www.jetbrains.com/rider/)
Web components my dude. Define your header and footer as custom elements. 
... Which is both a shame and a threat to Microsoft's business. They used to to be the best in the world when it came to backwards compatability and developer tools. I really hope they realize this and that they get their shit together. Or else every will be running javascript on their servers 10 years from now
I totally agree. WPF is why I adopted Microsoft's platform. They seemed to lose that drive though and want to revolutionize the field every year or so. I'm not sure where all that earlier leadership went but it appears to be absent now.
I put my first Angular2/DNC1.0 app into production once they both were in RC. Upgrading those through to the release versions and tooling was definitely a tiring experience, but since then it’s been pretty smooth, and I’m moving everything to ng4/DNC2 now. My main complaint has been the lagging documentation for DNC, for instance the identity/auth changes in 2 really threw me for a loop until I gathered some random examples and dug though the asp.net source to find what I needed. At this point I’m mainly using VS2017 for older full framework projects, and all the DNC stuff I’m using the dotnet CLI and VS code. It was definitely a bear of a learning curve over the last year, at at times I was doubting the decision, but I’m at the point where I’m really enjoying the new ecosystem.
Yeah, that seems really odd. Especially if it's a Microsoft component. Like I said, I've yet to encounter any library (generally NuGet packages) that don't work even if they were targetting a lower framework.
.NET vNext
If they are all in the same repository, I think you can use linked files. That way they all share the same physical file even though it appears as if each project has its own copy. I do this a lot when building .NET Framework and .NET Core versions of the same library.
By the way this thing is complaining at runtime, and not at compile time, it seems that Microsoft is checking the framework and intentionally throwing an exception if its' not an exact match. That sucks because most like, it would've worked otherwise.
[removed]
[removed]
Could be. No idea if it would work with Sharepoint 2010, but I notice there are some newer Sharepoint client libraries in NuGet. If you haven't already, it might be worth trying. https://www.nuget.org/packages/Microsoft.SharePoint2016.CSOM/
No idea. I've only ever used git from the command line. 
In my experience VS2017 doesn't crash anymore than earlier versions, nor has it ever since it was released. Most issues I've had with any version of Visual Studio with freezing (not actually crashing, just hanging for minutes at a time) have been caused by anti-virus programs, and solved by excluding the VS installation directory and source directories from real-time scanning. (used to have this issue a lot with VS2013 or 2015 until I added the exclusions) Sure, it does on rare occasions happen that Visual Studio actually crashes, but that's always been the case and if anything I've had less crashes with VS2017 than previous versions.
Hey Ashken, thank you! The site is just born, but I'm working on it! Mmm I haven't set up the feeds yet, so maybe you would have best luck with fb or twitter.. Thank you again, I really appreciate that.
There are already many other serialization libraries (mature &amp; proven ones) as well as many other communication libraries (ditto), yours seem to be tightly coupled. What advantages does your framework offer compared to others?
Umbraco, Kentico, and Evoq are the we looked at during our search. Not sure where they would sit on the lightweight side of things.
I've been writing my stuff at work in ASP.Net Core and .NET Core in general, starting with 1, though most of it I didn't fully start on until 2+, and I had little enough I could port it. I'm in the same boat as you, using VS2017, never crashes. .NET Core / ASP.Net Core 2 is working great. In the upcoming few days I'm going to start learning some stuff about docker to deploy what I've got. 
What's more important, that it's .net core, or that it's a CMS?
This. I also tried the .NET CMS route then found it's better to go where the market is. As you say, there's nearly always a plugin for what you need, the ecosystem with WP is huge - in the .NET space it barely exists.
I don’t know about a book but... https://docs.microsoft.com/en-us/dotnet/api/?view=netframework-4.7
I would recommend you NOT to use wordpress. It's one of the unsafe products and numerous hacks has been carried out towards it.
That’s a myth, actually not true anymore. Wordpress is updated regularly but as a widely deployed CMS (1/3 of websites) you will have a massive number of sites running unpatched for several years. We autopatch our instance and manually update plugins. It’s the suggested path for any software in any language. (E.g Windows, Apache webserver etc)
That's why I never, never put a bunch of effort into a new framework/technology until it has been out into the wild for 3+ years. You're just going to waste energy and time while the creators and maintainers flush out their methodology.
Im curious to hear about what part of the documentation you think is terrible. It seems to me like their documentation for .net core (at least 1.1 and 2.0) is one of the best docs I have ever seen. I've been hard pressed to have a question about .net core and not be able to find a great answer in their docs.
I've been using .Net since the beta, I'm sure there is some nostalgia, but I don't recall having so much churn with the early versions of the framework. Having lived through the xml everywhere period, I really didn't think much of the new new thing (json everywhere.) I thought that the change from msbuild (xml) project files to the project.json was foolish and waited for them to change back to msbuild. I thought I would start adopting it with 2.0, but the tooling wasn't all complete so I waited some more. At some point, I plan on removing everything .Core before 2.0 ( or whichever version is consistent when I do it) so that I can install exactly 1 version of .Core I would suggest either switching to the .Net Framework or if you stay with .Core, create a whole new solution with 2.0 and then build it back up again. I work on one project that is in .Core (1.1), there are zero reasons for it to be in core 
&gt; I’m looking for a breakdown of [...] potential uses for the.net framework It's a general purpose framework. Potential uses are kind of up to you.
You're not alone. It's been a pretty awful process overall. At least microsoft created migration guides for 1.0 -&gt; 2.0. Those documents helped me quite a bit.
There is a wizard to generate code first from an existing database. https://msdn.microsoft.com/en-us/library/jj200620(v=vs.113).aspx I'm pretty sure you can deal with that *** prefixing using the model builder after the code has been generated, but I'm not sure if the wizard has options to help do it.
Do you recommend any open source software that has novel implementation of the.net framework?
I was wondering if there was a way to do it globally, though. Maybe like a way to tell EF to prepend "str" to string properties of model classes to come up with the column name in the table. For example, I know I've come across something to "globally" have EF translate 0/1 values for int columns to true/false values for boolean properties, I think using a custom binding or something. I wasn't sure if something similar could be done for the column names. Also, we probably have over 100 tables, so it's not like this is just a few columns I'm dealing with. I'm not sure that we would need models for ALL of them, but we would need a lot of them.
For table names you put the following in the db context class: protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Types().Configure(entity =&gt; entity.ToTable("tbl" + entity.ClrType.Name)); }
Outside of writing your own custom model builder, there isn't any way to do it globally. You'll have to do it by hand, or simply live with them having the data-type prepended.
sdasdsad
If OP uses the wizard to generate code-first, he will probably get entities with the prefixes on them which he would then need to remove from all the classes and properties. Do you know if there is a way to pass configuration/conventions to the wizard?
in the jquery function or in the actionresult it calls? I think I tried to do this but did not work. I'll try again tomorrow.
It's almost been 2 years using ASP.Net Core, Identity Core and EF Core (before they were called Core) and documentation wasn't their first priority. If it wasn't for Shawn Wildermuth, Rick Strahl and reading endless github issue discussions I wouldn't have made it through the early days. I agree with you that what is on docs.microsoft.com now is much better.
Yeah, as I mentioned at the end of my post this is only for already generated models. I do not know how to do this for the wizard. If it was me I'd use the wizard and after do a search and replace for "public int int" to "public int", etc. Should be like a 5 minute cleanup post generation.
It seems that it works, but not when jQuery automatically reloads the partial view with the PDF after user has rotated it for example. but if I load another PDF and then go back to the previous one it shows the updated PDF. I use this in jQuery: $.when($.get("/@Culture/Documents/RotateDocument", { blobReference: $(this).attr("ref")}, function (data) { })).then($("#documentViewer").load('@Url.Action("_DocumentViewer","Documents")' + '?blobReference=' + $(this).attr("ref")));
Being .NET Core is the ... erm ... core requirement. It doesn't even need to be a full fledged CMS.
&gt; Squidex is the only one I know of. Looked into this and the idea of a headless CMS seems intriguing!
What would be an advantage of using this over the Route/RoutePrefix attributes that we have now?
So I have no idea what your code is and this snippet doesn't tell me but what you need to know is that PDF files are downloaded and served from the local filesystem. So file1.pdf will be stored locally, and used. However, the browser will treat file1.pdf and file1.pdf?ts=1234 as different files, and download it again. So, if you rotate your pdf and then grab it again, you'll want to download your document with a new path. So, in addition to passing the blobReference, also pass a new query parameter, like `?rot=2&amp;blobReference=`
"C# 6.0 in a Nutshell" is a tried and true reference. Doesn't cover every single class/interface but a good start none the less (I don't think any book can do that). The 7.0 version is scheduled to be published on Oct. 29th.
I am actually working on something now that is not even alpha, and is the definition of nothing fancy. Not to hijack your topic, but would love to see if this is something you would want. I have created a simple, and I do mean simple, interface for manage content of pages so many times I am formalizing it. Not this is about content of PAGES, not creating new pages, no routing, no authorization built it, just content. The term "For developers" is thrown around too much, but this is who it is for since the admin interface is very simple. You create content containers, which can have multiple content objects (usually HTML), SpoonCMS stores them in a simple datastore, and then you call them out by ID. It will pull the latest content object in the container by default, or you can set parameters. I have a built in web interface that goes along with it just to manage your content containers and the parameters. You set a few routes in statup.cs after you install the package, and you would be good to go. So you could set some content Viewdata["content"] = Spoon.GetContainer("Homepage").GetContent("MainBody"); and then put it on the page with &lt;div&gt;@ViewData["content"]&lt;/div&gt; or put it in a Razor page with @Spoon.GetContainer("Homepage").GetContent("MainBody"); Yyou can also set the container as a model for the page. Now this is not even close to being ready right now, and it doesn't have image uploading (yet), but does this sort of fit your needs if it was ready? It takes care of about 90% of my freelance projects who only want their content updated every other week or so, and lets me skip deployments each time, so thats why I finally started to formalize it despite being simple as dirt.
You must be a mind reader because that's *exactly* my use case! I don't really need routing or an editorial process. Just a bunch of HTML containers with a WYSIWYG form to edit them.
Well I won't have anything in alpha for another couple weeks, maybe months, but I will be sure to let you know when it's ready for review!
Looking forward to it :)
Cool now windows 10 can have windows xp to 7, metro classic and fluent design. What a mess
Might want to take a look at Power BI
Might want to take the new Roazor Pages for a spin. Have your blog content in json and you have a decent little solution.
Definitely this. Power BI is ridiculously cheap for what it brings to the table.
Then install Windows 7 and stick your head in the sand for the next decade. The rest of us are moving on, and acknowledge that progress isn't instantaneous.
Great, that looks like exactly what I was hoping to find. It looks like it can probably be a little more flexible, too. For example, primary keys and foreign keys are also int's but have their own special prefixes. Hopefully I can use the Key()/ForeignKey() attributes to differentiate these.
I fail to see how razor pages are bad. I understand that, as a general principle, we want to create clean and cohesive abstractions in our programs. What I don't understand is how razor pages violate that principle. It seems like you could easily copy and paste most controller actions and put them in a code behind file. Are not we doing the same exact thing in a razor page handler that we are doing in a controller action (e.g. executing some business logic, loading a model, receiving input, etc.)? The code behind file doesn't need to know much about the view; it just needs to know the model(s) it expects to display and/or submit. This seems to me be pretty much the same thing as a controller action, it's just simpler and more organized. Correct me if I'm wrong; preferably in a humane way.
Progress isn’t an excuse for Inconsistent UI. MS can’t even get is native UI elements matching mostly across the board. Instead you forced to use some hybrid of mess
Especially if you have a small number of builders. 
You can purchase Microsoft .NET Framework 4.5 Quickstart Cookbook https://www.amazon.com/Microsoft-Net-Framework-Quickstart-Cookbook/dp/184968698X/ref=mt_paperback?_encoding=UTF8&amp;me=&amp;dpID=51Mr2iuJ7cL&amp;preST=_SX258_BO1,204,203,200_QL70_&amp;dpSrc=detail
The thing is, it was so well sold to me, I watched videos about it, obviously the Microsoft website hyped it up, it all checked out... I mean it’s Microsoft! If they say version 1... shouldn’t that mean they have like a full dedicated QA team with the best test engineers in the world keeping their software engineers world class too?! It’s just so clunky, it feels like whomever is in charge of their releases has no passion or desire to go the extra 20% and get the error messages meaningful, get the documentation clear and kind of just admit it’s still at version 0.5, setting expectations correctly and truthfully
Dunno what you're being downvoted for, I agree with you. I recently gave up on WPF and went back to Forms, because it's so much faster and easier to develop business UI in.
Can always run WordPress on .NET Core and ASP.NET Core with https://www.peachpie.io/ ;)
This seems to cover all the new stuff only. I was hoping for more stuff from the 2.0 level/era. Interesting ways interfaces, delegates, reflection, asycronous programming, etc...are used. I came up with an idea of how I was going to try a “recipe”: either a dictionary or a hashset with string key and a custom class/data type. Then I would have a list or an array (don’t remember if I can sort a list) that would maintain a reference to each data type in a sorted order... I don’t know what I would use this for but I hope it’s novel. I’m just playing with ideas but I would love worthwhile examples
I felt the same way until I made a concentrated effort to learn the platform and its philosophy. WPF and XAML are a pleasure to work with and definitely much easier than Windows Forms.
c# in a nutshell is the hands down best book. certain chapters like how linq works and different delegate types are a much e.g. predecates, func etc
i would suggest know, i dont know your understanding of .net, if ur at the level of not even knowing the difference between boxing and unboxing or reference types vs value types. id read c# in a nutshell bakc to back. if ur intermediate, pick out some chapters u need a deeper understanding on, i outlined a few in another post in this thread. looking at someone elses code wont explain why they used certain data structures / techniques in the framework
That's an interesting experience. So far, I've found I can do everything I did in WPF (databinding, etc.) just as easily in WinForms--but the real kicker is that I can use the drag-and-drop designer, and actually construct useful UI without totally mangling XAML (be it hand-written or otherwise) when doing do. Hand-writing XAML takes me at least 4x longer than using the designer (Forms) for a similar design. It's just so tedious and slow, and prone to XAML-mangling, it's infuriating. Have you overcome those shortfalls? In my line of work, I'm writing business applications that aren't concerned about fancy UI elements so much as function, but even still, I've found Forms makes very modern, clean UI that's "comfortable" with Windows users. It doesn't have the flash that modern elements might in WPF, with transitions and animations, but for business work, it's perfect. 
I've been doing "web programming" since Classic ASP/IIS 3.0 and I often look back on those days and wonder if we've really made any progress at all or have just made things worse.
I was involved with ASP Dev 10 years ago and I’ve thought the exact same thing... hard to believe
Agree about crystal reports. Nice way to create report template and fill with required data on request
You know VS has a drag and drop designer for WPF too?
I have a decade of experience using Adobe's Flex framework. XAML and MXML are similar in purpose - declarative languages to write concise code for UI. It becomes second nature once you use it for a few weeks.
What kind of reports you need? I guess usual lists are not a big problem. Summary reports like pivot tables / pivot charts is another thing, possibly you can use 3rd party C# library to calculate pivot data and render pivot reports to HTML and export to various formats like Excel (for example, PivotData Toolkit - it also includes web pivot builder for user-defined reporting).
Thanks! I’ll try to look more into it
Most reports are just simple tables &amp; lists, yes. Some require minor interactivity, for instance being able to click on a row and have that link to another report that focuses on that specific row.
Thanks! From what I understand, Power BI requires a running server, which is either in Azure or on-premise using Power BI Server. Is my understanding correct?
It can be run as SaaS, just need to add the license in your O365 tenant
WPF remains the red headed stepchild locked in the attic that MS refuses to acknowledge even exists. Meanwhile they lavish resources, year after year, on UWP and its developer audience of dozens. 
How do I install this on mobile, says it needs win version 16229 or higher^^
I am quite happy with .NET Core 2.0. I use it for several projects. My only complains is that documentation or response to questions I find in google is often related to old .NET Core 1.1, which led me to do deprecated stuff. I am super happy with the direction it is taking.
Orchard Core Admin interface is atrocious. There's no way you can throw average user to use those UIs. It's not ready yet for normal use.
Why not just spend a weekend to develop it?
I am sorry dude but this article is garbage
Use http://jasperfx.github.io/marten/ 
Did it work?
I have written production code since RC1 and upgraded all the way up to 1.1 I have not experienced half the errors that people are talking about. Like @allinighshoe wrote, maybe I have been lucky, but I doubt it. I feel that a lot of .NET developers have come to expect what I call magic. Stuff should just happen, and I don't need to understand why. With .NET Core it seems that Microsoft now forces you as a developer to have a greater understanding of what is going on, something I like a lot. 
This looks increasingly to be the case. 
WP is dead. Fluent Design requires the Fall Creators Update, which isn't going to be made available on WP.
Well it does say it's available on mobile^^
I haven't tried yet, I saw your reply after work so I'll have to wait until at least Monday before I'll have a chance to try it out. Also, based on your replies, it sounds like there's no real advantage to manually creating the model classes, and I should just use the generator. Is this correct?
Yeah, use the generator unless you can come up with a reason not to.
It sounds like the easiest way to go are SSRS reports.
Devexpress reporting hands down for me. I finished a project recently with it and was amazed how well it just works.
I had a contract with a company that used Umbraco. They long for the day when Umbraco will be ready for .NET Core. I don't think the Core version will be ready for another couple of years.
Yeah, I've sort of been there before. I don't miss having remote access to the office :) Also, since you seem to be interested and knowledge, feel free to provide any input/feedback on a new more generalized post I just made :) https://www.reddit.com/r/dotnet/comments/76dskv/migrating_classic_asp_site_to_net_mvc/
Why would your MVC web application need EF if your Web API app serves as the data access layer?
Good point, I think I misspoke, it's kind of a plan I've been putting together as I've been looking into things. The web API would use EF, the web app would not (it would use the API instead).
You can save yourself time by using Dapper and translating the queries to stored procedures and call those via dapper. Don't force yourself into EF+ Linq. Project layout: 1) .net core api + JS front end to visualize data ( this will also enable you to use other visualizations of the data in the future 2) .net core mvc + minimal js to do stuff. might be easier as you won't have to learn JS frameworks such as angular/vue and use the whole hipster front end stack Personally i would go with #2 for internal system. Performance: Avoid having n+1 problem. For 150 people, i would not think about performance at all unless your monitoring shows load times slower than 750ms and optimize those to be under 200ms. 
EF shouldn’t cache anything, but I suggest you use Dapper. It’s the closest to what you already have and you won’t have to learn something as complex as EF. ASP.Net Core is fine for windows hosting. You can always change the framework to 4.X if you have issues with .Net core compatibility. Use razor for your front end unless you already know front end frameworks. I personally only use Angular now, but the learning curve is very real. Putting your models in its own project is not a bad idea. You can even put all of the queries in their own project or bundle them with your models. It’s really a matter of personal choice. I use stored procedures for all data access. It’s just cleaner and allows you to migrate to different technologies more easily. I very much dislike ORMs, but that is a personal choice. 
Would Dapper cache things (and if so, can that be easily disabled)? Thanks for mentioning this, this would definitely be worth considering as we're all pretty strong in SQL. Thanks for suggesting Razor, I haven't really made it far enough to think much about a front end so it's good to get suggestions. As for queries vs. stored procedures, I don't think I'd want to move everything to stored procedures, at least not how we currently do things. Almost everything is it's own unique query, and if I want to find where a value is coming from, constantly hopping over to SSMS, finding the stored procedure in the list, and finding the value gets old quick. Stored procedures are also susceptible to parameter sniffing, which is always a fun surprise to run into.
What about Dapper would save time? I think I like what I see with Dapper, don't get me wrong, I'm just wondering what time savings you're referring to. Upfront time while migrating things, ongoing development time, both? With layout #2 are you suggesting no web API? As for performance, we do some crazy things. One particularly slow process that users use takes between 5 to 20+ seconds depending on how they run it. This is caused by several different issues, but primarily due to poor querying due to limitations of our current framework and our development environment. Having said that, our SQL can hurt performance enough as it is, so I'm a little concerned about adding to that with ORMs, APIs, etc.
Your 4 point bulletin list at the beginning of your original post is exactly how I design and have been designing solutions for years. If you do not want to spend time learning EF (which is not really that hard once you get into it) I would use ADO.NET, Dapper or whatever to keep your current queries and save yourself some time there.
- MVC Core 2 is a good choice - Do not do a big rewrite. Do incremental migration. Start replacing the functionality one by one within the existing system. It will help take off the pressure while you are ramping up on your learning curve.
Cool, so it sounds like I'm going in the right direction :) yeah some other people have also suggested Dapper, which I think looks like it might be a better way for us to go than EF since we're all already strong in SQL and familiar with it. I haven't really considered ADO.NET and I guess I'm not really sure why, but it seems like we should be using a framework and not straight ADO (or at least it seems like that's what most others tend to do). Any thoughts/insights as to why someone might choose Dapper over ADO.NET (since I believe you still write your own SQL with Dapper)?
Thanks for the feedback. I was thinking about doing this incrementally, otherwise there's probably no way it would actually get done. I think this would also be a great way to adjust for the learning curve (ex. start out with some really basic things, get used to how things work, move on to something a little more involved, etc.).
If you've got a bunch of existing SQL I'd be tempted to create them as SQL stored procedures, call them via Dapper and call it a day for now; work on the performance of them separately. This will give you more confidence in their correctness initially as well. Your API can absolutely be both internal and external. Make sure to implement claims-based authentication then you can have granular access to different methods for different types of users, and can revoke users' access as and when needed. The main disadvantage to Core (in my opinion) has been that it was missing a lot of things which Framework had, but that has changed dramatically with Core 2.0. I would develop in Core and if later on you decide it should be Framework you can just change the target version and carry on. At least by starting in Core you are giving yourself more options, even if you do foresee it running in IIS on a Windows box. Plus Dependency Injection is just dreamy.
haven't heard of it before, but then i'm not a wpf developer. I'm actually surprised that people still use WPF. I did a quick google, found the framework but no intro videos which is a pretty bad sign to me. I have heard of http://caliburnmicro.com/ before which I've heard ok things about. 
I would use Dapper over ADO .NET alone personally, not least for easy object mapping and making parameterised queries a doddle. If you have a large application with a lot of SQL going on, ADO .NET seems the wrong side of the trade-off between purism and ease of coding, and it involves a lot more code to do thoroughly, which Dapper (or other ORMs) will just handle for you. It is personal preference though.
Why are you surprised people still use WPF? It’s the best option for windows desktop applications for windows 7 computers. 
Good point about stored procedures ensuring correctness, and thanks for the tip on the API authentication.
I personally have had no end of problems with Telerik controls and Crystal Reports over the past couple of years but I may have a tainted view given that our Telerik controls were a decade old (so many nested tables!) and we have some real legacy Crystal Reports which don't seem to migrate to newer versions well at all. I believe the new Telerik components like Kendo are a lot better, but their reporting tools still require Framework which is a pain when trying to do more Core. For a web app I'd get something like DataTables.NET - NuGet package. You can create DataTables in your web pages super easily with features like paging baked in. Make sure you have the 'Buttons' extension for DataTables and then you can have the PDFs and Excel files generated for you with no extra work: https://datatables.net/extensions/buttons/. You can be done in minutes, lots of extra features, completely free (as in beer and freedom) and completely open source!
Yeah! I insisted in doing this using UWP but the requirement is that it has to run on Windows 8 so now i'm stuck with WPF.
I haven't had many issues really. I spend a fair chunk of my job developing legacy applications (think .NET Framework 2.x WebForms) and I seem to have much worse issues. I did have one issue with Core when I went from 1.0 to 2.0 with some MVC or Auth namespace changes (I forget which), and this odd issue to do with duplicate elements in the .csproj, but only took a few minutes to sort each of them, and had descriptive error messages from MSBuild. My pet peeve is actually Microsoft releasing a new version of Core or Framework and taking ages to update the runtimes on Azure. Twice have fallen for this - once with a Core 1.1.2 App Service deployment; the other with a Framework 4.7 WebJob. At the time Azure was running Core 1.1 and Framework 4.6.2. It gives the most nonsensical error message that doesn't point to target frameworks at all.
I've been involved in a couple of rewrites. People were excited in the beginning then patience starts running out because in x months, they want what they have now + xxx new features while you are just struggling the brand new system to a working state. So now I always do incremental. It's a bit annoying to do because you have to do extra work around, etc but you gotta feed the beasts to make them happy.
OrchardCore will be good in a year or so. Right now it's just too frustrating to use.
You can have both applications use the same cookie providing they are on the same domain. If you want multiple authentication mechanisms though you can absolutely do that as well. For the sake of simplicity I would try and re-use the cookies which also gives you flexibility in maintaining sessions between the two apps later down the line.
I would recommend WPF over UWP any day.
Uwp can target win 8.
Have you considered using an off-the-shelf solution? You might get more bang/buck which will still need some coding to customize it.
Makes sense of you're targeting windows 7. Just don't find many new apps doing that.
However you're probably better off making a webapp. Does it do something you can't on the web? 
Not really, since that would put me out of a job :) honestly though before our current system, we had an off the shelf product that specialized in our industry. Since it was industry-specific, it ended up being expensive and still didn't give them everything they needed/wanted. At this point users are pretty spoiled and are used to having a development department available on-demand. 
Not really but the client insists on a Windows application that runs in both Windows 10 and Windows 8.
There is open source .NET ERP software on github. Take a look, it could save you much time and give you just as long employment -- think of it as a higher level to start at and the stakeholders will want to build off that with more and more features.
Why is that? Any framework you can recommend? Right now I'm taking a look at [Prism](https://github.com/PrismLibrary/Prism)
You would be surprise. There is a bunch of companies down here that still use Windows 7 and demand applications runs on their 8 years old computers but also in A brand new laptop.
A webapp would run in both of those... Clients rarely know what they're saying and can normally be persuaded
Your plans looks great! Except for creating a class library (DLL) to share between the front end and back end. Don't do this. Well, do it if you want, but you'll then be tying together your front end and back end, and you'll need to always release both at the same time. It's not worth the effort of DRY to do this. Other thing I would say is there's no harm in using EF. It's simple, easy to use and works fine. You don't have to use Dapper if you don't want. EF is great for basic CRUD operations. Anything more complex use stored procs and call them using EF. Works great for me. 
I've used Prism and MVVM Light they're both adequate for MVVM, although they're not entirely necessary depending on your use case. You could easily write your own INotifyPropertyChanged and ICommand implementations (or just find some online). Those two interfaces are the tenants of WPF MVVM IMHO. As far as UI Frameworks, I've only used Telerik (because my boss said so) but I've seen a plethora of beautiful open source projects like this one (which I've never used): https://github.com/MahApps/MahApps.Metro It really depends on what you're trying to do. Good luck on your WPF journey, let me know if you need help.
I'm referring to upfront development. Next week i will be starting migration on an older webforms project that uses table adapters and i'm just going to copy/paste the queries into SP and call that, also, EF is [a tad slower](https://www.exceptionnotfound.net/dapper-vs-entity-framework-vs-ado-net-performance-benchmarking/) in call/response speed. Also, There can be quite a lot of stuff that make your queries slow. but if your DB can fit into memory, odds are there is something wrong with your queries for them to take so long or you are doing something very crazy. Have some DBA or more experienced dev look at the queries, use profilers. Once I've had a case of parameter sniffing fucking up our queries, and once we had to use [optimize for unknown](https://www.brentozar.com/archive/2013/06/optimize-for-unknown-sql-server-parameter-sniffing/) to go from 30+ seconds to 100-200ms execution time. [Parameter sniffing](https://www.brentozar.com/archive/2013/06/the-elephant-and-the-mouse-or-parameter-sniffing-in-sql-server/) can be a bitch sometimes. as for #2, you can still have api endpoints that you use for ajax requests, but not to go full blown api+js as it might not be worth the extra effort and long term maintenance. 
Dapper doesn’t cache any data. It may cache the schema of the data. I haven’t looked into the source recently. But it’s easy to disable. Basically, Dapper is a very light wrapper around ADO. It’s actually just one file and you can read the source. I think we have similar approaches to SQL. If you’re not afraid of it, skip EF. There are too many ways you can butcher your queries. But especially in your case, you likely have all the queries embedded into your code. Migrating it to an ORM would take time. One of the reasons I prefer store procedures is that you don’t have to change your web app should you decide to change table schema. You can completely gut your tables. Let’s say you open your app up to be a customer portal, you may change how permissions and relationships work. It’s nice to be able to do that just from your database and likewise not have to switch to Visual Studio. But at the end of the day, it’s just based on what your personal preference is. 
Amen to that !
I think many of us have paid the price of being early adopters of .NET Core. We moved to .NET Core and run into many issues, and got absolutely no benefits over using the full .NET Framework. Yes, it's cross-platform, but we're still hosting everything on Windows.
I was always using pure WPF, sometimes with MvvmLight. The rest is too complicated to me. UWP has too many stuff unsupported, I don't see any reason to use it. They still do not support [F# after many years](https://wpdev.uservoice.com/forums/110705-universal-windows-platform/suggestions/9110134-f-support-in-net-native-for-uwp). I feel their team is incompetent. Basically UWP implements a subset of .NET Framework, so there is more things supported in .NET Framework. You said you only want to target desktop, so you do not have to care about their cross device support. Now it implements .NET Standard 2.0 it might be a bit better but still... There is also way more resources and libs compatible in pure .NET framework. That said, I never used UWP myself, but read quite a lot of horror stories here and there. WPF on the other hand has always been nice to work with for me.
I've never heard of the CODE Framework, but I can recommend MahApps.Metro and FluentRibbon as alternatives if you want a Metro style application. An look into MVVM frameworks like MVVM light if you are not familiar with them, makes doing WPF projects much more enjoyable.
&gt;Stored procedures are also susceptible to parameter sniffing, which is always a fun surprise to run into. We encountered this and had to SET ARITHABORT ON in the stored procedure to get it to work. EF is great for handling multi-table entity updates due to its object context and unit of work pattern. For simple queries to return data, EF's object materializer is way too slow; hence Dapper's popularity. 
I've been using the MicroMvvm solution given here: https://www.codeproject.com/Articles/165368/WPF-MVVM-Quick-Start-Tutorial One has to inherit the ObservableObject class but the amount of boilerplate avoided is significant. 
I’ve done a fair bit of WPF and I always use MVVMLight. It’s really easy to use. 
Just out of curiosity, which version of Angular are you using?
My guess is that the majority of large companies are still running mostly windows 7 computers. There are a few reasons for this, one is that they have contracts to deliver files in a certain format and the software that can output that format is not available on windows 10. They probably also have custom tools developed in house that take a long time to update and they can’t migrate until all of them are updated. It is very costly to push out the update, so they opt to use windows 10 on new computers and let the hardware upgrade cycle take care of the rest. The custom applications they write will not use UWP until everyone has switched to windows 10 and only if they determine there is an advantage to uwp over WPF. If they are selling the application then they don’t know what the customers are running either. If I’m not mistaken uwp is not suitable for long running tasks, if it gets minimized then it gets suspended and stops working. Not sure if there is a way to get around that. 
4 something. Jumped straight into it from 2. I’ll use 5 as soon as it’s out unless it doesn’t compile. The big difference between 2 and 4 was animation being put in its own module. 
Not nearly enough here to change from VS Code, at least for me
SET ARITHABORT ON and parameter sniffing are two unrelated things AFAIK. ARITHABORT controls whether or not overflows/division by zero will cause a query to fail, while parameter sniffing is related to optimization and plan caching. Adding this to your stored procedure might have appeared to fix your problem because it might have caused SQL to throw out the bad cached plan and come up with a new (better) one when the stored procedure was modified. Just a heads up for future reference in case you run into it again. So for more complex queries, EF might be more efficient?
We kind of know why some of the queries are so slow, but like I said because of our current framework and environment, we're kind of stuck (which hopefully this migration will help out a lot there). For example, we have a lot of scalar functions for code reusability, but they also force queries to run in serial (so instead of using 28 cores, they use one). I think having reusable objects could help a lot with some of this. We also do a lot of string manipulation in SQL sometimes because of our framework, and sometimes because it's easier than doing it in VBscript. This can lead to things like converting a datetime to varchar, doing some manipulation (ex. 1st of the current month/year), then converting back to a datetime. Doing things like this can prevent SQL from using indexes, which further degrades performance.
yep, got you, makes sense :) hopefully you can improve your situation ! 
Thanks for the feedback. As far as the class library, have you done this before and regretted it, or have you avoided it for this reason? I kind of go back and forth on this. On one hand, it would be our front and back end, and having to release both at the same time I wouldn't think would be a problem (ex. if we're changing the back-end, it's to support changes needed in the front-end and is probably the same person doing both changes). On the other hand, however, if we ever did have a need for something in the back-end but not the front-end in the future (ex. maybe something specific to a customer portal), a common library would force the web app to also "see" these things.
It's being brought back to life with Razor pages.
It might also be worth adding that development on the current system started about 15 years ago, went into production about 10 years ago, and I've been at the company for a little over two years now. By the time I started here, there were already a lot of "bad things" in place. Going through and fixing them all doesn't really seem worth it, considering there's so much of it and it's running on classic ASP. I think the migration I have in mind would be more worthwhile, would help to reduce a lot of it, and would open up new possibilities by being in C# and .Net that would otherwise require us to jump through hoops in VBscript. I might not have been with the company for very long to be planning such a major migration, but everyone is open to the idea but I don't think they really know where to start, they don't want to risk trying something and later regret not doing something different, and so nothing happens. I, on the other hand, come from a previous job where I've seen the migration from legacy procedural code to an object-oriented codebase, and how much easier it made things (although it was in a proprietary language and not .Net) and when I see us spending days/weeks on something that could take a few hours in an object-oriented environment, it drives me crazy. The same goes for when I see a function to get a date/timestamp that uses Right("0", DatePart(Month, Now()), 2) &amp; "/" &amp; ...
Sure you're not talking about MVC?
[Razor Pages](http://gunnarpeipman.com/2017/05/razor-pages/)
Yup that's MVC, which is not webforms, which means your comment is a non sequitur.
It has MVC tech, sure. But Razor pages are basically webforms. In the sense that they have code behinds.
I think you need to go re-read this comment thread again. You implied that razor pages were part of webforms and that webforms was making a comeback because of them. Are you willing to admit your mistake or would you like to continue making non sequiturs?
I wasn't being literal when I said it was coming back with Razor pages. I was alluding to the code behinds, which is a hallmark of webforms.
I feel the same way, too. Just not seeing the amazing progress after 15 years of this stuff. At this point, it makes more sense to go to Elixir/Phoenix or Clojure, which I've been studying. Static typing, or the "weak" static typing of C#, isn't much of a sell anymore for me. 
[removed]
It's been like this with Microsoft for over 20 years. They hype and hype, glossing over the limitations, and that convinces the non-tech bosses to push it: "We're a microsoft shop". (I hear the same thing about places being "google shops" too.) Then the actual code makes you want to pull your hair out. Sigh. Yes, MS has excellent engineers. You should see all the Eastern Europeans, Russians, and Chinese in Redmond and Bellevue. But it doesn't matter. The intrinsic system running MS, the bureaucracy, stifles any real genius coming out of much of their tooling. And a lot of engineers see it as a super-well-paying gig, and won't rock the boat. This excludes stuff like Cosmos and Sql Server. Talking about tooling here and .NET. I'm also sick of static typing and at least for server-side, am learning dynamic stuff, where the vast reduction in code is a major benefit. And don't ever listen to Hanselman or Guthrie. Really. They're old time salesmen who'll say anything.
If your goal is to use it to find work, look at jobs in your area and make a decision based off that. Otherwise, I favor React over Angular (and Vue and Riot, having used them as well) for one big reason: React favors keeping you, the developer, writing JavaScript. JSX isn't html, it's a JS-compatible markup language, as evidenced by things like *class* being replaced by *className* and (perhaps more importantly), it doesn't use *directives*. Directives are little add-ins to HTML markup like ng-if or v-if. For me, I find directives to be limiting over manipulating a data structure using JavaScript. 
Keep them separate. Just create an API in .NET and call it from your React site.
Honestly I'd say neither, the best front-end framework I've found so far has been http://aurelia.io/ Easy to set up and start using and supports TypeScript out of the box, and well.
How do you decode a forms auth cookie in core 2.0 though? I didn’t think you could. 
If u don't plan to do only front-end work, choose angular as it is a framework and a lot of stuff is out of the box. You will need to choose a lot of additional libs to create a real front-end part of the project with React (e.g. Redux and etc.). There is https://github.com/aspnet/JavaScriptServices to start use any of them based on Asp.Net core
Ok that was interesting. It's like a mix of React and Angular. Yeah, I think I will stick with React for now.
I saw an example of this implementation. I'm confused though with the front-end form validations. Do I use data annotations or do I have to create the error messages manually in the front-end?
Thanks for the link!
The title and the content of the post are in now way related to each other. I mean... Not even close...
&gt; It’s actually just one file [Nah, that time is long gone](https://github.com/StackExchange/Dapper)
I have done this before and regretted it - it's not the _most_ burdensome architecture to have to deal with, but simultaneous releases will get old as your application grows. You'll also very likely end up with the divergence between what models are needed between the two client apps (which you mentioned as maybe being an issue), and that will happen sooner than you think. I tend to view this kind of architectural plan as "over DRY" - a sort of religious adherence to not repeating yourself that doesn't necessarily gain you any benefit except to save you some typing, and in fact will probably hurt you with unnecessary coupling. If your models are super anemic and don't contain business logic, just simple getters and setters, then is it really so bad to have to retype them in your client app? That's not really repeating anything that isn't immediately obvious (unlike complicated business logic, which you should definitely _not_ duplicate), and if your models are super complicated such that recreating them is burdensome, you might rethink how you currently have the codebase factored. 
Have you looked into Aurelia? I find React to be super clunky compared to it. For a job, though, definitely look at the market where you want to work and pick that up.
I recommend adding a validation layer in the API project either via data annotations or a library like FluentValidation for better control. But I also add all validation logic to the front end project as well through some other means. This will prevent the user from submitting invalid data, but of course you can't trust the client. If the data fails validation you can return the dictionary of field name / error description from the API and show that on the front end as well.
Why do you keep repeating that razor views have code behinds? They don't and razor is nothing at all like webforms.
I’m talking about Razor Pages. Which were introduced just recently with .NET Core 2.0. They do have code behinds.
You can learn all of them. It does not take much time.
Chances are that with asp.net, you wil be be building more enterprise and b2b apps. Apps like that will almost always go for the framework that is more mature and stable and well documented and has better support. From that perspective, i would sat Angular and not React. React is nowhere close to the level of maturity that Angular commands.
I've used UWP myself and 100% agree with your sentiments. I've gone deep into Android and iOS as well. I was surprised to learn just how well thought out WPF is as a framework. UWP is a mess (and on par with Android/iOS).
Alright. I have to admit. That looks WAY better and more straight forward than react
I have to admit. Im pretty over seeing docker and asp core articles. This is a topic that's been covered *way* too much. 
I think the bottom line for all three of those choices is that none of them support ASP core
Front end validation is to provide a better user experience -- you need the *real* validation to happen in your API, but it's nice to mirror it in the client side so that the user doesn't have to submit the form and wait for a response to know if their input was good or not.
How is angularjs or angular going to die exactly? Classic asp is still around and so are sites with ext.js and web forms and php and RoR.. I'm in Phoenix and there are companies just now getting into angular and very excited and committed. I am a senior software consultant and when I have spoken to many company directors and managers.. they are committed to another 2 years on angularjs.. Other companies are committed to next 5 years and more to angular ecosystem with typescript. I worked with React and it is ok but not a full framework with routing etc like angular. You cannot easily compare the two. I heard some people have issues with the licensing. Now I read the amount of react.js projects on GitHub are through the roof, so that is good for it. Bottom line. Dice.com. Pick your closest big city and type in angular and look for the results... Then do it with react.js. That should help you decide as I did this with node and many tech. for several years. Cool factor is not enough if you can't get a job with it.
I really wish .net core would have allowed everyone to be completely rid of the .csproj file. I was extremely bummed when they didn't go with the json format instead. 
Typically this required setting up a CDN and getting a *framework* of sorts setup for the business that can easily be setup and used per project. 
I mean, its good to have visibility, but ORMs like dapper and EF handle these issues.
Geez... I disagree. I'm the team lead over 12 developers doing angular 4 for months now. Half of us previously did angular 2 a bit which is pretty much the same. Then 1/8 of us did angular 1 which is 99% different. I did react starting a in February 2016 and there is way too much to do in angular 4 to be really good at it. I don't have the time to even get back into react let alone Vue or something else. We are doing Jasmine unit testing,. You ever master that? It's time consuming.. I have personally spread myself so thin years ago that I would feel like a jack of all and master of none. I'm not interested in just dabbling with tons of frameworks. I expect my team to understand AOT, Jasmine, barrels, tree shaking, reactive extensions with subject on the observable patterns, reactive forms, and the list goes on.
It would be nice to get an in-depth comparison of React vs Angular from someone with more experience than the average bear in both, but most comparisons I've seen weighing in on the issue usually breeze over one or another at too high of a level. As someone not experienced in React, at all really, I've heard React is much more lightweight than Angular, so I can understand why it may be appealing. As someone much more experienced in C# and .Net, I absolutely love Angular 2+, I prefer Typescript/JS to pure JS, and it reminds me of thick .Net app development. In fact, I've heard Angular architecture described as being very closely analogous to MVVM, so that's a big plus for .Net developers in my opinion.
In the beginning you gotta try them all to see what fits your way of thinking. Taking recommendation from strangers on the Internet without trying it out yourself is harmful. You can go deep once you pick your framework of choice. 
A lot of times you are at a company that dictates what you need to use. Sometimes you have a say... Then after a while it ends up on your resume and recruiters and interviews and jobs end up happening based on those technical skills you have. 
Sure but it is dangerous to your career development if you only limit yourself to what your current employment dictates.
I agree but I have 7 page resume with 20 languages. So for me I'm taking contracts that are the direction I want to head. Sometimes a contract or a full-time job is stagnant and so I bail. 
React is great and all, but it really only gives you limited functionality. So you will have to go and evaluate a bunch of http libraries and other stuff you might need. Angular comes with pretty much everything out of the box so your time to a working prototype will be much lower. Also typescript is the best, and working with it and react is a pain in the ass while with angular it is completely transparent.
I wouldn't let AngularJS and Angular's bleaker outlook dissuade you. At current rates of evolution, it will ALL be defunct in the coming years. In 4 years you'll need to know something that hasn't been invented yet.
Wow thanks for introducing me to aurelia
I watched that quick video on the landing page, and it looks pretty identical to Angular2+. Why would you use Aurelia over Angular?
Get a C# book : What i think is you have little experience in programming . I would recommend is to get a good book first like the one below https://www.amazon.com/Head-First-Learners-Real-World-Programming/dp/1449343503/ref=zg_bs_697342_2?_encoding=UTF8&amp;psc=1&amp;refRID=60Y81SHRGYQJCKR92MG4 The download Visual studion and start writing some small programs. It will take time but you will reach there.
I prefer angular 2+ because it felt more natural for me coming from a .net background. React felt a bit less structured to me and I didn't care for all the "magic".
There's one thing I've learned in the last 5 years: Don't believe the hype. This is true for every tech choice. You need to find out by yourself by trying out. You can't go wrong with Angular (2+), React or Vue or Aurelia (the latter one I didn't use). Just as an anectdote, not a recommendation: I've started with React, but are using now a different one.
Because, frankly, there is nothing you need to do in order to use Docker. There's no changes you need to make in your app.
learn plain old javascript first before all other stuff. Otherwise your going to hit so many brick wall's on the way because you don't know the basics.
* Dependency Injection (don't code singletons) * CQRS / EventSourcing 
&gt;developerseems. AngularJS and Angular will die in the coming years. Curious why you say that 
Angular 1 is dieing off slowly, Angular 2+ will be around for quite some time. I've written a few apps with it and it's a very pleasant experience overall. My company recently adopted Angular 4 as our de-facto standard for single page apps
I've worked with a large scale Angular 1 app following an MVVM pattern - it fits angular architecture perfectly. Angular 2 feels even more so
&gt; I heard some people have issues with the licensing FYI They changed the license to appease said people.
&gt; We encountered this and had to SET ARITHABORT ON in the stored procedure to get it to work. OPTION (RECOMPILE) is the proper way to avoid the effect of parameter sniffing.
&gt; So for more complex queries, EF might be more efficient? Nope. For complex queries where performance becomes important, you will likely need to use features such as temporary tables, which you will not be able to do with EF alone. However, if you are using EF to benefit from relational-to-object mapping, you can map your stored-procedures and functions to methods in an EF DataContext and the results to ComplexTypes. That way, you can still call regular stored procedures through DataContext methods and get the results back as fully constructed objects. 
I can't answer your core question but to muddy it up take a look at vuejs as one of your options. 
Yes. It isn't totally clear, but my point was that using the drag-and-drop designer in WPF totally mangles my XAML, which is a huge PITA because I have to hand-write a lot of it to make it conform to the design I'm looking for. Basically, the WPF drag-and-drop designer is awful.
https://stackoverflow.com/questions/13892308/adding-text-to-image-and-save Google will help you.
Hi guys, we are developing a platform with docker microservices based on .net core 1 framework without any issue. the container are managed by ecs agent running under Linux in aws. I'm trying to migrate all the microservices in .net core and i noticed that the container need 3x memory! Someone notice this too or have similar expirience? 
Dang. I guess they broke it up a bit. :)
I'm in the valley also, admittedly I haven't searched that much but when I did there wasn't a lot of Angular 2+ positions. Everything seems to be for legacy projects i.e. Angular JS or Asp.Net MVC. Are you seeing a lot of Angular 2+ positions starting to appear now?
SRP is getting heavily into it. I'm at triwest on contract with dot net core and angular 4... Super long drive. I accepted a full-time team lead job at a mid size bank downtown. They don't do any angular so I'm hoping to make a case for it etc... I have been out in several places using angularjs and even an IT director was committed to 3 more years on it. While I have heard of some react.js jobs in Phoenix... Not many.. it could be a nice niche to be good at but the angularjs and angular 2/4 are the frameworks to know in Phoenix. I'm a .net c# asp.net guy... But I'm glad I know mongodb and node. I have heard from places like choice hotel that are a Java shop , yet they are big with angular. 
WebAssembly, and it has been invented. ;) It'll make all these clunky JS libraries obsolete.
https://sqlite.org/lang_datefunc.html Your storing date incorrectly. Check out time strings in above URL. 
I don't know why everyone spends so much time discussing JavaScript frameworks. Ultimately who cares? They have a handful of syntactical differences but shouldn't take more than a week for any developer to use a new framework as they are all pretty much the same. Yes some have features that some don't but for at least 80% of the time, DI, typescript and a decent understanding of development is all you need the other 20% is google. Everyone makes a big song and dance and debate over angular react VUE etc... angular / react great for spa VUE great for using on a single page in existing app to leverage the data binding functionality etc etc but as I said earlier who cares just pick one and use it. 😾
Okay, I see what you mean. Are you saying that if I store the date as YYYY-MM-DD in the database, retrieve the date and convert it to MM-DD-YYYY that it will sort correctly?
Why not just store it as a timestamp? Some of the benefits: faster sorting, range queries, smaller size of data
If you already know programming (in OOP), I think https://docs.microsoft.com/en-us/dotnet/index will be enough
It sounds like you're looking to improve your programming in general, creating your own design patterns. If that's the case, the Gang of Four book [Design Patterns](https://books.google.com/books?id=6oHuKQe3TjQC&amp;printsec=frontcover&amp;dq=design+patterns&amp;hl=en&amp;sa=X&amp;ved=0ahUKEwik8c_TgPbWAhXMRyYKHQHBAHkQ6AEIKDAA#v=onepage&amp;q=design%20patterns&amp;f=false) is a classic reference. I've been watching a YouTube series by [this guy](https://www.youtube.com/channel/UCbF-4yQQAWw-UnuCd2Azfzg) on the subject, and he is *far* better than most programming lecturers. Chances are that whatever thing you're trying to create has already been done better and in a more maintainable fashion.
Are you using WPF or WinForms? The dates are sorting as strings because that's what the grid thinks they are. You need to bind to the DateTime object then use string formatting to display the date. For WPF: &lt;DataGridTextColumn Binding="{Binding Date, StringFormat=dd, Mode=TwoWay}" /&gt; For WinForms: dataGridView.Columns["Date"].DefaultCellStyle.Format = "dd-MM-yyyy"; You could also try setting the SortMemberPath for the column to the DateTime object. 
THE SOLUTION I transferred the data from the data table I filled to a list and returned the list. CheckOutInViewModel: &gt; private List&lt;RosterData&gt; _toolRoster; &gt; &gt; public List&lt;RosterData&gt; ToolRoster &gt; { &gt; get { return _toolRoster; } &gt; set &gt; { &gt; _toolRoster = value; &gt; NotifyOfPropertyChange(() =&gt; ToolRoster); &gt; } &gt; } &gt;CheckOutInModel: &gt; &gt; public List&lt;RosterData&gt; RetrieveToolRoster() &gt; { &gt; string db_command = "SELECT [id], [cal_date] FROM inventory WHERE [cal_date] IS NOT NULL ORDER BY [id] ASC;"; &gt; SQLiteConnection db_connection = new SQLiteConnection(Properties.Settings.Default.db_connectionstring); SQLiteDataAdapter db_dataAdapter = new SQLiteDataAdapter(db_command, db_connection); DataTable tr_dataTable = new DataTable(); try { db_connection.Open(); db_dataAdapter.Fill(tr_dataTable); db_connection.Close(); List&lt;RosterData&gt; rd = new List&lt;RosterData&gt;(); foreach (DataRow dr in tr_dataTable.Rows) { RosterData rds = new RosterData(); rds.id = dr[0].ToString(); rds.cal_date = Convert.ToDateTime(dr[1]); rd.Add(rds); } return rd; } catch (Exception ex) { MessageBox.Show("Error:\r\n" + ex.Message); return null; } } RosterData.cs: public class RosterData { public string id { get; set; } public DateTime cal_date { get; set; } }
C# from the clr or something like that
If anyone has any articles or resources that actually shows a non-trivial example project with the latest React stack + ASP.NET Core or 4.6..... feel free to post it. After searching far and wide, it seems nobody is using React with ASP.NET. Not in the sense of the latest combo of React, Redux, Webpack, GraphQL plus Thunks or Sagas.
1) Convert JPEG to Bitmap. 2) Prepare your image mask as a bitmap. 3) Bitwise replace values in image with mask values if they are not the background color in the mask. 4) Convert the resulting image back to JPEG.
she sharp?, i stopped the second time I heard that...
Dude, ISO8601 all the way, front to back, and you wouldn’t be having these issues. There can never be any confusion by 2017-10-05, whereas there are at least three different interpretations of 10/5/17. There is a reason why we don’t measure rods by the hogshead anymore, you know.
No, he’s saying that the database handles dates as ISO8601. On top of it, DotNet also handles dates as ISO8601 *all the way through the entire stack*. If you want some nutty implementation that puts month first, you need to sort first, *then* do the conversion right before the client render, such as how /u/HeySeussCristo suggested.
so how does it work, you write on Windows and deploy on Linux? How do you test then? Switch to VM all the time? 
just to clarify, full scale VS2017 runs on Mac? 
&gt;[you can fool yourselves with occasional hype on Twitter or number of commits in .NET Core repo, but the truth is that community did NOT get hooked up.... I'm afraid all of the above means that .NET is slowly crawling into "maintenance mode"](http://no-kill-switch.ghost.io/current-state-of-net-through-not-so-rose-colored-glasses/)
hm, I switched from C# to Node and it was awesome until now
You know what, if it works for you then I am happy for you. The best code/system/pattern/whatever is the one that works best and "best" is subjective, so more power to you. That said, I am interested in this: &gt; Can handle 10 times more load than classic .NET. Were you by any chance comparing node to running "classic" .net on Linux/Mono? As I find it very unlikely that .net on windows server was running so poorly. 
I would likely test in the environment I'm developing in, then do final testing across all required platforms. You can F5 to debug the site normally, you don't have to publish everytime.
I never got far enough to see the differences in the VS Mac version since .Net Core 2.0 doesn't run on anything less than Sierra. I was using VS Code on my Mac and it's great.
A few things to touch base on. First, I was looking for MM/DD/YYYY not MM/DD/YY as stated in your reply. Second, I understand that submitting the data in the ISO8601 format would remedy the sorting issue, however, the people I'm creating this application for are use to reading MM/DD/YYYY so I don't want to make it any more difficult for them than I need to. Finally, as someone who's self taught and doing this because I enjoy learning how to code, I have to say your final statement was extremely abrasive. I understand that there are going to be flaws in my logic, but this is why I'm here asking. I've done my research, I've searched google. I'm here because I couldn't find an answer that allowed me to reach my goal. At least an answer I could understand. For those of you who replied, thank you. I was able to find a solution by transfering the data from a data table to a list where the application knows that the 'column' of the list is DATETIME format and not string format. I'm able to take the dates stored as is (which were stored in an Excel file by a user prior to the development of this tool) and get everything to work.
Does it work if you leave out the encryption key (i.e. only sign)? 
It works fine if I remove the line `encryptingCredentials: new EncryptingCredentials(securityKey, JwtConstants.DirectKeyUseAlg, SecurityAlgorithms.Aes256CbcHmacSha512)` but I need to encrypt it, right? This will be used as an access token to access sensitive data over an http-connection, how do I make sure that the information in the token can't be read, edited or spoofed by anyone else on the network?
I think you're seeing the security when you turn on encryption - that's why jwt.io can't decode it :)
Maybe, but shouldn't I be able to enter the secret in jwt.io to decrypt it and get the payload? 
Hmm, looking at that form I don't see anywhere to specify a decryption key. Maybe try verifying it in C# to rule out a bad token?
When you encrypt you generate a JWE token which should be in five parts. You can see your token is in five parts as there are 4 periods albeit one part looks empty. Jwt.io is only used for verifying the signature against a JWT which isn't encrypted like JWE - it is merely signed (with the signature being the last part of the JWT after you base64 decode the part of the token after the last period). Sorry I can't help more but I'm on my phone.
If that website could read your token, then the encryption be working, would it? The website doesn't seem to support decrypting tokens, but that doesn't mean your token is invalid. Just test it in C#. Even without encrypting the token, the signature prevents the contents of the token from being edited. You prevent others from reading the contents of the token by transmitting it over HTTPS. This is necessary anyway, if you don't transmit the token over an encrypted channel, anyone listening in could steal and reuse the token even if the contents of the token itself are encrypted. Also, you should not use strings as keys directly. Either use a fully random binary key, or use a key derivation function.
I may not have had enough experience working with web forms if you believe code behind is what made web forms web forms. View state, page life cycle, event validation, post back, http context, XSS validation, control adapters, system.web.... sorry but code behind is the LEAST of your worries and razorpages is nothing like any of that. 
Ugh. I know webforms is more than just code behinds. Which is why I mentioned it's a post of the technology. It was a dumb off handed comment. More of a joke than anything.
What enhancements to the Visual tree in WPF? It always seems so vague when they update WPF.
How does this compare with Cake.Net? Seems similar but we’ve been using cake for a while due to its excellent depth of plugins. 
And don't forget its poor example documentation! But for real. I'd use cake over this.
And you are still doing things butt-arse backwards and making waaaay too much work for yourself. 1. Have the entire stack as ISO8601, even in the DB. 2. Pull the data from the DB, with an inline sort in the SP/SQL/Linq. Even if the column is being pulled as a string, ISO8601 will ensure that it is still being sorted *correctly*. 3. In the output, right where it is being displayed to the client, do a `.ToString("MM/dd/yy")` so that they get the data as they want it. That is how you write clean code. Dumping it into a separate list just to sort is a great way to turn code into spaghetti, and give you maintainability/extendability headaches down the road.
In all honestly I never understood the appeal to resharper. It's something that really appealed to me when I didn't know the shortcuts that existed in visual studio, or the syntax highlighting, or intellisense, or unit testing integration. Are people still using this, and if so, I'd like to know what for
Honestly I still find too much of it to just be..."magic". I'm coming from the golang land where I've got access to just about everything starting from ground zero. I recently went to go and try to integrate authentication with a web app and I was horrified at how much work it took just to get that going. Note that Im also likely bias as I don't like the MVC framework. I think its just too clunky feeling for me.
One thing I'd love to see in the future is something like auth0 integrated with a static site generator. And you can just give Auth0 wild card like URIs for resources where uses must be authenticated in or authorized, and basically every request for a resource (page) would hit Auth0 first to see of the user has access to it, and block them if they don't 
A short list of features that NUKE offers: - Full IDE integration out-of-the-box. It's a simple console application and provides syntax-highlighting, auto-completion, navigation, refactorings and debugging. - It uses a lot of C# language features. E.g., targets are actually expression-bodied properties, which means you can reference them type-safely and also navigate to them. Tasks methods (the actual work). - Referencing NuGet packages works the good old way (with package manager dialog). All versions are pinned by default. - Tasks for command-line tools like msbuild.exe or dotnet.exe are generated. This ensures consistency, reduces bugs, and is much more efficient. It partially also reduces the need for plugins. There are a lot more features integrated, sometimes it's the smaller ones. If you want to chat about NUKE and how it is used, I can offer you to join our gitter channel :)
May I ask if there's any specific reason?
I hope this trend on having new build tools don't make the build a hell like all other platform outside of .net... Having only "dotnet build" for doing everything without the need of 10 plugin, 15 tools, and 8 extensions is what make .net core such a breeze to use.
Okay, I'll take a step back and give it a shot your way. I've converted all the dates in a test database to ISO8601 and am pulling them as such. I've bound the data table as the item source to my data grid, then bound the columns to the data table columns. I'm trying to format the bound column by using the following XAML: &lt;DataGridTextColumn Header="Current Location" Width="*" Binding="{Binding cal_date, StringFormat=d}"/&gt; I've also tried: &lt;DataGridTemplateColumn Header="Calibration Date" Width="*"&gt; &lt;DataGridTemplateColumn.CellTemplate&gt; &lt;DataTemplate&gt; &lt;TextBlock Text="{Binding cal_date, StringFormat={}{0:MM/dd/yyyy}}"/&gt; &lt;/DataTemplate&gt; &lt;/DataGridTemplateColumn.CellTemplate&gt; &lt;/DataGridTemplateColumn&gt; I cannot seem to get the ISO8601 compliant dates to change to a MM/dd/yyyy format in the view.
It is more complicated than should be imho. No need of Autofac: imagine you have a service IMyService with MockMyService and ImplMyService implementing it. Just create MyServiceFactory which take the IHttpAccessor as dependency, and make so the MyServiceFactory.Create is the IHttpAccessor for its decision. Then just register the facto to the IServiceCollection at startup. Here you are hijacking the shared IServiceFactory used by MVC everywhere, just for your little case. It seems uneeded.
&gt; StringFormat={}{0:MM/dd/yyyy} WPF/XAML is still a weak spot with me (I’m primarily MVC), but isn’t that *supposed* to be: StringFormat='{}{0:MM/dd/yyyy}' ? Like, with single quotes around the curly braces?
It is something fairly obscure needed by the Visual Studio team (VS is still a WPF app). It didn't seem to me to be generally useful.
I completely agree. While innovation should never be discouraged, we should also be asking big questions when moving tools for small gains. Change is hard and constant small change is detrimental long term (JavaScript). As much as people bemoan enterprise thinking for being slow, I do think we should be asking ourselves "okay, that's better than what I have. But is it 10% better or 10x better? Is this actually just the new shiny". I'm sure people will say that they always carefully research everything, but that's the danger of shiny. It affects you without you really knowing and nobody wants to admit they are bored or have small bias to new things.
And `dotnet build` is just using MSBuild under the hood, which is fairly powerful and extensible. It's just a pain in the ass to learn.
Here's what I use. Hope this helps. // Create JWT Token private JwtSecurityToken BuildJwtToken(ApplicationUser user, string clientId, DateTime now, TimeSpan expiration) { var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_tokenConfig.Key)); var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); //add claims here var claims = new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, user.Id), new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()), new Claim(JwtRegisteredClaimNames.Iat, new DateTimeOffset(now).ToUniversalTime().ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64), new Claim(JwtRegisteredClaimNames.Exp, new DateTimeOffset(now).ToUniversalTime().Add(expiration).ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64), new Claim(JwtRegisteredClaimNames.Email, user.Email), //new Claim(ClaimTypes.Name, user.UserName), new Claim("client_id", clientId), new Claim("email_confirmed", user.EmailConfirmed ? "true" : "false", ClaimValueTypes.Boolean) }; var jwt = new JwtSecurityToken( issuer: _tokenConfig.Issuer, audience: _tokenConfig.Audience, claims: claims, expires: now.Add(expiration), signingCredentials: creds ); return jwt; }
&gt; Why would you use Aurelia over Angular? You wouldn't if your on a larger project. The dude who created and works on Aurelia could get hit by a bus tomorrow and the whole framework would become outdated in a matter of months. Can't say that for React or Angular.
The article only shows a minimal example. Typically you'll extend this with various other targets, like checking with StyleCop/InspectCode/FxCop, posting messages to Twitter/Slack, creating releases on OctopusDeploy/GitHub, uploading coverage data to Coveralls, signing assemblies, creating and publishing Docker images. So this is of course not only about "dotnet build". If you only use "dotnet build", then this blog post doesn't apply to you. I hope I could make this a little more clear.
Cake is a safe bet, it has been stable for a while and has a large community behind it. Nuke is younger and has a much smaller community. As of today, both tools will get the job done for smaller projects. The market is big enough for multiple build systems to co-exist. With these preconditions I'll always try and support the underdog. Competition is good. We have been using cake at work for 4 projects for about 6 months, and we started using nuke for one project about 1 month ago. Personally I'm quite happy with Nuke. Debugging a build script is a great experience. Feel free to ping me with questions, I have spent a lot of time working with both tools.
Yes, but I fear that using any other build automation system make you end up in situation where you need to learn both.
If it stays specific to the CI scenario, I am all for it. I am just wishing those tools does not spread as replacement of `dotnet build`. Even the nodejs guys, ended up going back to `npm` after the folly of alternative build systems ended up.
So for Nuke I can tell you, that you won't end up learning both. It's actually the case that Nuke helps you working with MSBuild, for instance, there are methods to enable code analysis or node reuse, no matter how they actually need to be added to invocation. To make this more clear: msbuild.exe /maxCpuCount:10 /p:RunCodeAnalysis=true In Nuke you'll write MSBuild(s =&gt; .EnableNodeReuse() .EnableRunCodeAnalysis()); And sugar on too, is that you'll see the same help text from the official website of MSBuild, when hovering over the method invocations.
My current nuke build script does * Clean output directories * Determine and inject version using GitVersion * Compile all projects * Call Authenticode signtool * Package some nugets (more complex than what dotnet pack does) * Run Tests, Wrap the Call in OpenCover and call ReportGenerator for a nice coverage html report * Call docfx metadata and docfx to build API documentation The first three could be handled by dotnet build, the docfx call could possibly be covered by this, too. As for OpenCover, I really want to keep this outside of msbuild/VisualStudio. Builds in VS should be lean and small. So in any case I'll end up with some sort of orchestration system which wraps the calls to `dotnet build` `dotnet xunit` `docfx metadata` and all the other things. Nuke does exactly that. And it does it better than some naive batch or powershell script which less code. The Entire Build Script I just mentioned is 200 lines of code.
I'll give it a shot for one of my libs
Is it still? I know that they moved to WPF with 2010, but thought I read somewhere that they had moved away since.
What they have been moving away from is the COM infrastructure, migrating into MEF.
Gotcha, cool!
Here, https://github.com/Microsoft/VSProjectSystem/blob/master/doc/Index.md
The full changelog for WPF is [linked](https://github.com/Microsoft/dotnet/blob/master/releases/net471/dotnet471-changes.md#wpf) from the article.
Just got into the office. Gave that a try but unfortunately it didn't work. I've tried: Binding="{Binding cal_date, StringFormat=MM/dd/yyyy}"/&gt; Binding="{Binding cal_date, StringFormat='MM/dd/yyyy'}"/&gt; Binding="{Binding cal_date, StringFormat=d}"/&gt; Binding="{Binding cal_date, ConverterCulture='en-US', StringFormat=d}"/&gt; Binding="{Binding cal_date, StringFormat={}{0:MM/dd/yyyy}}"/&gt; Binding="{Binding cal_date, StringFormat='{}{0:MM/dd/yyyy}'}"/&gt; I've also tried copying and pasting directly from Reddit and StackOverflow posts where they said it's working to no avail. I did read somewhere that someone was only able to get it to work when binding to a text property, however, I've tried creating a templated column and binding to a text block text property and it still didn't work. I don't know what I'm doing wrong...
people have been saying that for years. the newer thing is always hypothesized by bloggers to be the killer of the last thing.
I have a simple working example [here](https://github.com/matthewblott/simple_aspnet_auth).
Why do you need to rewrite them as stored procedures? Why is EF/LINQ-to-SQL not good enough?
I do not know how to use EF or LINQ for accessing data in SQL Server Report. Is there a way?
Strictly a guess, but maybe there is somethign like the report datasource to which you can pass an enumerable. https://msdn.microsoft.com/en-us/library/dd461468.aspx
I would 1. Question why it's SHA3 2. BouncyCastle's implementations are probably the way to go http://www.bouncycastle.org/csharp/ BouncyCastle is used in security applications globally.
Why SHA3 is the correct question
Love that kind of tutorials! Good job
FYI, cheapest price for this as an individual is $120/yr. Available bundled with the other apps for $600/yr. Businesses = $360 / $840
Why are you using SHA-3? The main reason to hold back on it right now would be the lack of software / hardware efforts to implement it. SHA-2 is practically everywhere.
You don't need to use stored procs if the reports are stored in the reporting database and have direct access via a datasource. This makes it slightly easier as the sql is just part of the report and any input paramters don't have to be mapped to stored proc parameters. That makes it slightly easier. Although in my experience queries you write in your code aren't the same as queries needed for reports.Reports usually tend to have unique requirements and being able to optimize the queries directly in SQL is really useful. Is it just a matter of familiarity?
Yeah, unfortunately, being subscription-only software has driven me away from Adobe software.
It's funny that the blog talks about how it is often not enough to have static images, it is about allowing people to use and interact with it. Then they only post images of the interface, not even a video.
Can my wife and I use the individual license?
Dunno. [Section 5.2.b of the terms](https://www.adobe.com/legal/terms.html) kinda indicates no, but digital licensing always messy with various 'grey' areas.
Add indexes on the key fields used by you queries or stored procedures 
Well, you can embed SQL queries directly into a ssrs report instead of stored procedures, but I guess it doesn't matter. What framework are you using LINQ with to get to SQL? EF?
Thanks man! I really appreciate your comment!
This looks super neat, but is there a prebuild package that would let me actually try it? I don't intend to install DevExpress because of it. Also, the requirement for having a method with exactly one string argument seems rather arbitrary.
Visual Studio Code is not WPF (it uses Electron on node.js instead), but it is also a completly separate project, not a replacement for actual VS.
Fully aware of VS Code :) I thought I read somewhere that they built VS 2010 with a lot of WPF but then scaled the WPF down from 2013 onwards I must have dreamt it!
&gt; This looks super neat, but is there a prebuild package that would let me actually try it? I don't intend to install DevExpress because of it. If you read the bottom of the post, there is a section about how you can run it without DevExpress installed.
Eh, I can imagine that WinForms can be easier and faster, as long as you only rely on the default controls. As soon as you need something more custom that isn't provided by a control, WPF (and UWP) will most likely get ahead.
The tutorial is nothing that doesn't already exist, many other online pretty much identical...however... I love your design, the angled lines really look unique and nice imho.
Followed by why vb.net
I know what you mean regarding 'why SHA3', I said the same thing when I read the specs. Unfortunately the specs were defined by a separate organization (government). The want PHI to be anonymous and I think they just picked the most bleeding edge technology they could find on Google, knowing they won't have to be the ones to implement it. Thanks for the suggestion of bouncycastle.
Our application has been around for awhile and it was written in vb.net. However, I could write a separate application in a different language if necessary, as long as it can connect to a MySQL db.
I asked the same thing, but the specs were defined by another organization (government). I'd much prefer to use SHA-2 512.
A worthwhile question also asking your stakeholders: does it need to be FIPS compliant, and consequentially will you have to do FIPS compliancy testing? Governments frequently require this. 
I use EF for accessing data from database for views. I wish i could do the same for sending data to reports.
This looks really helpful. Thanks, I will explore further. 
There is a configuration setting for EF, you'll have to look it up, but it will allow you to see the raw SQL calls as they are made in the debug output of your program. Find how to configure that, turn it on, copy the calls, paste them into SSRS, profit.
If that’s the case, do a .NET wrapper using the [reference implementation](https://keccak.team/software.html) until Microsoft/Apple/OpenSSL decide to adopt it.
Use Angular unless you're willing to give up your patents to Facebook.
That sounds like a useful hack.
Hope it works for you! I did this with EF core by the way, so it may be different in full EF
Multi-dimensional arrays is a strange feature to be missing. Any idea why?
seconded. 
Some are using it for the little things (like Extend/Shrink Selection), some are using it for things that just don't exist in Visual Studio, like contextual navigation options, hundreds of refactorings large and small, 2000+ live code inspections. There's no right answer, go forward and scroll through the [ReSharper twitter feed](https://twitter.com/resharper/) for the variety of features that it provides.
There isn't really a need for them to be a runtime feature when you can just build a similar data structure yourself on top of regular arrays.
With that list of limitations, I might as well write against .NET core and compile my main app for my target runtime. My build is a bit more of a pain but my code is not strapped to the table. 
Why not implement net standard 2.0 and call it day. It's not gonna run wpf anyways. That and appdomain magic are the only reason people still use framework with new projects.
There's always Silverlight 
Don't forget stable build tools and SDK. That too.
Ye literally anything meant to support the netstandard2.0 ecosystem would just magically work.
Go to CodeWars.com. Filter by C# challenges and test your coding skills for that particular language. Are the challenges and exercises trivial? Absolutely but those trivial things are what hiring managers will be grilling you over in interviews. For example, I've done over 200 CodeWars C# challenges and they really force you to get better at the language itself, especially using LINQ to solve problems. Naturally those improved skills will flow over to your coding at work. You won't regret it.
I believe DotNetAnywhere was written before .NET Standard existed.
Which is still required by MDS in SQL Server 2017... 
&gt; What I find most impressive about the DotNetAnywhere runtime is that it was developed by one person One likely candidate... maybe there were higher priority items to solve when jagged arrays are functionally equivalent.
And it seems they are faster. Or at least they clearly were when I was implementing a cryptographic hash algorithm in C#.
If X-D arrays are slower than jagged, then you probably have a cardinality problem. Swap your indices, and you'll probably see performance improve by an order of magnitude. What was probably happening was your code was accessing items that were offset by each other by [rowlength] offsets instead of 1, thus causing your cache misses to explode. 
Facebook rereleased React with an MIT license
The default implementation is designed to work with constructor injection. In most cases you do not need to grab the item from the service collection manually. How would constructor injection work if the services were keyed by name?
I'm having fun trying to get EF6 to work with aspnetcore2 without using full .net for asp.net core 2 part.
You are supposed to use EF core, you know that right? Aspnet core invokes coreclr. Ef6 requires net framework runtime.
Thank goodness Facebook finally listened to the community and the community for not giving up. 
While you are correct, I seem to recall Microsoft saying something about xD arrays being slower in .NET. But that ways years ago and it may have been fixed or I could be mis-remembering it. 
How much are you paying?
&gt; How would constructor injection work if the services were keyed by name? By using attributes on the constructor arguments.
Yeah, I realise I didn't make that clear in the post, I've updated it now to make it clear that DotNetAnywhere was developed back in 2012
Exactly, as far as I can tell the author of DotNetAnywhere (https://github.com/chrisdunelm/) wrote it just for his own use-case, which was getting .NET to run on a low-memory device. So I guess he didn't developed any features he didn't need
Just wrap the class instead
Skimming through the documentation it seems like you can't have named items in the dependency injection system provided by Microsoft. It's just meant to provide the bare minimum functionality required for dependency injection. If you require advanced features, such as named items, the suggestion is to replace the DI of Microsoft and hook up the DI framework of your choice. Personally I'd suggest AutoFac, specially over Unity. It's fairly easy to do yourself, just follow the "Replacing the default services container" section on: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection
IIRC there was something about the JIT generating better code for 1D arrays compared to nD arrays which made jagged arrays faster in practice despite the extra indirection.
Full disclosure: I'm the author of that course and I thought you guys might be interested in checking it out, since Cake has been discussed here more than a few times. Ask away, if you have any questions.
What is the output of this tool? Is it just for prototyping or can you take the final design and use it directly to build web pages/forms?
Check out the new [Bridge.NET](http://bridge.net) and [Retyped](https://retyped.com) demonstration project for building true cross-platform desktop applications written in C#. The demo project ([repo](https://github.com/bridgedotnet/Widgetoko)), called Widgetoko, integrates a Node.js and Electron architecture that is packaged into a native desktop application for Windows, Mac, and Linux. Widgetoko uses a similar architecture to Slack, Visual Studio Code, and GitHub Desktop.
So what you are saying is that I have to access items in an specific way? I don't remember what algorithm I was implementing but I don't think I could access many of the items by 1 offset constantly. It was more like a random access.
EF core isn't ready for prime time. Most of system.data wasn't even available until recently. 
Thanks for your comment! I'm trying to give really easy turorials, I'll work on the content :)
SQL Server 2017 is definitely not production ready.
Precisely until net standard 2.0 correct
I was just browsing this course and have added it for later study. I have couple of questions though * Is there any intellisense support available for cake? * Can I use it in production? I am planning to use Jenkins + cake. Cake will do everything except downloading code. Is it fine to use this in production?
Ok. Though no matter what version you talk about MDS still requires Silverlight. That's mind-boggling to me.
builtin DI container is really basic. Another concept that isn't covered is Modules (Autofac), Registries (Structuremap) or UnityExtensions (Unity). So my suggestion is also to replace the engine with your preferred one. You still will be able to use ASP.NET DI abstraction, but you will have your full container 
Unfortunately, Intellisense support is not done yet, but it's being actively [worked on](https://www.cakebuild.net/blog/2017/05/intellisense-and-intro). As for your second question, the answer is _absolutely_ – I've been using Cake in production for more than a year now.
Reddit hates Electron.
Once the herd starts moving, they'll follow. They always do.
Just to chime in I use Jenkins + Cake + Octopus for most of my production (and development) builds for about 4 months at this point. Absolutely love it. My Jenkins build steps went from this large process that only I really understood to a beautiful Cake script that is easy to follow. My Jenkins process is not pretty much just "pull the code, run build.ps1". Plus my development vs production build only has to change what configuration my solution is building as. So less moving parts to worry about causing a change from one environment to the next. Nice thing is that it is really easy to throw together a bunch of new builds if you need to. I just made several microservices and it was super quick to just copy/paste my Cake file and change a couple of things and be done with it. Plus the fact that everything is source controlled next to the solution it is building is great as well.
We've had an incredibly positive experience with Electron so far. Building apps in C# and dotnet is actually exciting and fun again.
That pretty much sums up the experience of using Cake.
Nope, that's the way. Or you could rethink your caching strategy so each item has its own key instead. 
To clarify: These roles are not at our company. We function like a combination job board/recruiter to connect companies with engineers. You can see all available jobs if you [register here](http://www.untapt.com/?utm_campaign=reddit&amp;utm_source=cscareerquestions ). **Salary** None of the companies - there are three - have listed a salary **Relocation** All three are open to relocation. **Visa** one of the companies is open to H1B with &gt;2 years, student visas, or other visas like the TN. The other two are only open to TN visas. **Remote work?** Not this time, sorry guys. You should feel free to apply even if you don't fit all of these. You can definitely make an interview on the strength of your resume if it's good. 
The author (chrisb) is taking questions on HN if you want to ask: https://news.ycombinator.com/item?id=15514519 In short, it was a one-man project done 6 years ago as a learning exercise, and he has no plans on any further development "especially now that there are open source 'real' implementations".
I wouldn't go live with it now. Internally, it's still going through significant churn. Just starting a build however might be ok depending on when your launch window is. 
Launch is probably March to April next year.
SA...LA...RY. 
Alpha pretty much means whoever is creating it feels there's a decent chance they'll break contracts before official release. If you aren't willing to risk that, stay clear. That said, seems to me like SignalR has been around for quite a while. I'm a bit surprised it isn't already considered good to go. Have you already evaluated just using websockets instead of SignalR?
[No](https://twitter.com/davidfowl/status/901497090450219008?lang=en)
I'M ON IT. 
As long as you're OK to refactor as new releases drop, then you should be good to go. Launch is slated for Q1 2018. The main hub API's shouldn't be churning too much either.
Not sure of your exact situation, but if you anticipate writing a lot of reports for the business, you might want to consider an ETL approach to take your application tables and transform them into a few tables which are super easy to build reports off of. Ideally, the model you build would be so simple that your reports would just aggregate the data and use a lot of pre-calculated fields to filter. This is the same approach you'd take for a data warehouse, but in this case your just saving it and building it to a few reporting tables. You could use your LINQ queries to do the ETL and either schedule (or possibly trigger it) to run in code. You lose the ability of being real-time, but if you are building a lot of reports for a lot of users, it can save a lot of time and ensure that business logic is in one place. 
I agree that there is a pretty big learning curve, especially if you are responsible for the architecture, getting everything to build right for production, etc. There are a lot of pieces to put together and there's resistance all the way. And getting used to the modern, javascript ecosystem is a chore all it's own. However, once you get a full, production app built with one I'm a little curious what you mean by: &gt; there is way too much to do in angular 4 to be really good at it What do you feel like you have left to learn?
Currently beta testing with our users, no issues found so far. Expect API and behavior changes in forth coming releases. Hope they go prod ready by Q1, SignalR indeed is great.
EF core doesn't support features I need, like: group by, table per type, many-to-many (no join entity), spatial data.. and much more.
It would be more interesting to me if retyped could work for F#.
What is Octopus?
Octopus Deploy, the CD piece of our CI/CD process.
Wow that is a nice idea. Just make a row in a dedicated table for report. 
If there's real interest from the F# community, we might be able to provide Retyped binding libraries.
Aye fam, but is it ready yet?
Do devs take care of build automation or is that typically left to the DevOps team like it is with continuous integration?
I think any language that can leverage DefinitelyTyped is pretty interesting. Using Typescript already, the opportunity to use C# isn't all that compelling. Being able to use something like OCaml or F# without losing the npm ecosystem (or needing to re-do all the type defs work already done for Typescript) is.
No salary information, no application.
Nah, but they are working hard on it. Give it time q2 2018.
Why did you choose to compile C# directly into JS? Your solution defeats the point of the NET IL. Compile the IL, not the source...
If you are using .NET Framework (not core) I believe you can name your cache and put web.config entries in that will control the expiration policies, though I don't remember where I read how to do that before. Maybe search MSDN for MemoryCache, ObjectCache and the ASP.NET cache? Otherwise, you could also make a really simple class using ConcurrentDictionary that does something similar to MemoryCache and hold the references forever if you don't need expiration.
Be careful with "forever" The app pool will eventually time out and the app will be restarted
For sure. OP is asking about how to stop items from ever expiring in a cache though and I would hope they already thought through why they need it and what that would cause...though now that I think about it...yeah OP: putting items in a cache has very few practical use cases. You might not want to do it.
I want to use the cache to save the contents of a file (CSV data). So I can access it faster. Is there a faster/better way to read a big text file? The website I am creating reads that data very often and the file can be very big. But if there is no access to the cache it will be cleared and I have to read the whole file again.
What do you do with the CSV file? If you are just serving it to clients, then you should probably just serve it as static content. The file will be cached at the OS level, and IIS is really fast at serving static content compared to having to serve it from ASP.NET Code from a cache. If you are querying from the data and modifying it in memory or doing some more advanced things with it and storing a reference to it in a cache...then it sounds like you are trying to recreate an in memory database. What kinds of things do you do with the CSV data?
If the file is never going to change, why not just use Lazy&lt;T&gt; to load the data in memory?
Well, if they are all in the same solution, why not use project references? Using NuGet in this case sounds very painful. Are other projects consuming the packages as well? I have set up TeamCity to publish NuGet packages as the result of a CI build before. If I remember correctly it may have been doable via built in steps or easily with calling out to the command line. 
Yeah it's a library project for other projects to use. I thought the csproj had to depend on the nuget rather than another csproj? You're saying it would be easier for the leaf node nugets to just include the whole stack inside them instead of depending on the other nugets?
The data is retrieved from another server. I only get it as CSV data. So I have to read it and process it. There will always be new data and on every new day it resets. I think that is what I was aiming for, a memory database. Because these data is always changing, I cannot save it in a normal database. I need a temporary database for every day.
Unfortunately these data changes almost everytime. Data will be added.
The data only changes once a day? Does your application ever change the data after reading it and processing it?
I don't have the link handy but Fowler posted in a GitHub issue that SignalR will be officially released with .NET Core 2.1, so until then expect a high amount of churn.
So, between your library projects in the solution you can create project references. That way those projects don't have to go thru any process if another updates. You can then still publish individual NuGet packages for each project for other projects outside of your solution to use. IIRC NuGet will detect the project references when packing and either pull them into the package or create a dependency between packages automatically. 
If two leaf packages are pulled in that both depend on a root package nuget will handle it. If those leaf packages both include the root project dll it will clash. 
Commenting so I can check back later. I too am trying to wrangle our solutions, projects, and packages into some semblance of sanity via nuget packages.
Absolutely. Do not use budget packages to reference projects in the same solution. Also, NuGet is my arch nemesis as of late. 
The data resets once a day. In one day there can be more data appended to the existing one. Currently it does not change it. I just display the data in a table.
To start with, figure out why cache entries are getting evicted. You can pass a [CacheItemPolicy](https://msdn.microsoft.com/en-us/library/system.runtime.caching.cacheitempolicy.aspx) object to your cache `Add` calls, and on that policy object you can define a [RemovedCallback](https://msdn.microsoft.com/en-us/library/system.runtime.caching.cacheitempolicy.removedcallback.aspx) delegate which will give you the [reason](https://msdn.microsoft.com/en-us/library/system.runtime.caching.cacheentryremovedarguments.removedreason.aspx) the item was removed.
&gt; Because these data is always changing, I cannot save it in a normal database. Sure you can, just truncate and reload the table in a single transaction when it time to update it. I'm not saying it's the best option for your situation, but it does work.
Why couldn't you store the data in a database, write a microservice that runs on the server and updates the data regularly (on interval or push or however), then just query the database on the web view? Since your client users update their view by accessing the page, there doesnt appear to be a need for "right this second" urgency with updates, so your service that updates the database could be 30 seconds or a minute behind the live data. And if you parse the data with some degree of parallelism, you can write data updates to the database faster than you were reading and pushing that data directly to the clients from the file. 
I am creating something like a stock exchange. I get real time data from a server. And the user gets the newest data at the time they opened the website. But only from the current day. Older data will not be needed/deleted. Is it still wise to save it to a database. I would have to delete the older data again. (Asking pure theoretically, I do not really have the option to save it to a database)
Also, just realized you can make an XML data source for SSRS and it looks like you can use a web service to populate that. As a side note, I have used Reporting Services a lot, but MS hasn't really been adding much to it for years. If I were setting up a reporting shop again, I'd look at something like DevExpress reports too which costs a little bit, but would definitely support LINQ based reports. 
With changing I meant, that I will get new data and the old ones will not be needed anymore. Is a database in this situation still possible?
Awesome, thanks for clearing that up! I was getting bogged down trying to prevent the colliding assembly problem that nuget was handling already.
Depends on the quantity of data, among other factors. With proper maintenance a table can add and delete records indefinitely. If the number of records added is minimal, you could store them for a period as well. What you're trying to accomplish is usually handled by services in the background with public facing endpoints (API's) for client querying. Typically they're only as useful/fast as the data they feed from, meaning that a real exchange ticker would probably be getting small amounts of data that can be processed very fast in parallel rather than large dumps of data that take more time to parse sequentially. The reason persistence storage like databases typically come into play is typically because a system like this would be processing such massive data sets that it would be extremely expensive to keep that much data in system memory. Plus, whatever operations you do on that data in memory *must* be thread/read safe, otherwise you might end up trying to read the data while an update is underway which can lead to exceptions. On top of that, usually clients aren't trying to read the entire data set at one time; they usually want a subset or multiple sequential smaller eads as necessary. Large dumps are typically a low priority background process. Database engines are excellent at providing all of those necessary fearures at a minimal overhead. If you're dealing with small amounts of data for a project or test, I still think a service with a public API endpoint is the best option. You can use one of .NET's concurrent collections to keep the data in memory. Open your reader, read lines and each read runs an async or parallel block of code to update that record in the collection. Call the service API from your website to provide the data for your view. 
1. You have issues with default cacheitempolicy as others have stated. 2. Yes a db is still useful in that scenario. I have multiple tables in a project that all get new data every 5mins. Over the timespan of an hour over 5000 new lines are added across these tables. Some have longer shelf life than that but the default is 1hr. Its fast. So yeah. 
There's an event where you can recache once its being kicked out of the cache.
I am halfway through building a home grown workflow at work. It's a very simple one. Most of the workflow tools or framework out there, have a lot of features that we'll probably never use. Having said all that, I have been considering scrapping all my work to just go with a tool or a framework, because my home grown workflow will not be as robust as the ones out there. What do you all think? Any suggestions or advice please?
I had the same question when looking at work flow solutions​. If you are only doing simple stuff then rolling your own quick solution is fine. The workflow framework presented is actually pretty nice especially with the pre-built tasks (pretty much the standard building blocks one needs). It is simpler than Microsoft's WF and open source. My only complaint is that it is all XML based for setting up the workflows, a scripting language or JSON option might have been nice but it is a small thing (XML can be verbose).
No need to put it back if the entry is a reference type, right?
Have anyone here used a workflow system successfully? How do you deal with versioning?
correct answer can be seen here : http://dotnetmob.com/csharp-interview-questions/interesting-c-interview-questions/#q1
I know this would be undefined behavior in C++ because a) it isn't defined whether or not the postfix increment happens before or after the assignment (i.e. i = i++ is undefined) and b) except for the || and &amp;&amp; operators, the order in which the operators are evaluated is not defined (i.e. i = a() + b(); is a() called first or b()? Not defined). See also https://stackoverflow.com/a/18260171/7033731 Does C# really define these? Either way, this doesn't really seem like a good interview question anyway, if I had to answer that in an interview I'd be left feeling like my interviewer was power trippin', trying to find a way to say "GOTCHA" and feel smart.
18 (i++) evaluates as 5, and assigns 6 to i i evaluates as 6 (++i) assigns 7 to i and evaluates as 7 so it ends up being 5 + 6 + 7. So 18
All I know is that if I ever find code like this in solutions I'm working on there will be a sudden and serious increase in "workplace accidents"
Are not the ones in brackets executed first?
I made the mistake of actually reading the other questions on that blog, and they're all bad. Either they're dumb trivia (how many dimensions can you have in an array), laughably easy (call a function without a semicolon), or this kind of crap.
I agree, while this is an interesting thought experiment, if I ever see someone writing code like this their pull request will be unceremoniously closed
&gt; Does C# really define these? Yes. From C# 5 spec: &gt; Operands in an expression are evaluated from left to right. For example, in `F(i) + G(i++) * H(i)`, method `F` is called using the old value of `i`, then method `G` is called with the old value of `i`, and, finally, method `H` is called with the new value of `i`. This is separate from and unrelated to operator precedence. Java does too (same way, I believe). And yes, they're horrible interview questions.
The correct answer is "who gives a shit? If you write code like this, you should be fired."
This isn't JavaScript land where we just use whatever looks half done but 'has promise for later.' So no, no we don't use it.
Very similar to golangs slices. I'd be interested to see how this works out 
MailKit (https://github.com/jstedfast/MailKit) is recommended by the Microsoft Documentation. That should do it for you. 
Check out the official Microsoft documentation. It's got good coverage on configuring OAUTH.
https://docs.microsoft.com/en-us/dotnet/standard/net-standard
.NET Framework and .NET Core are essentially two different APIs. If they were a Venn diagram, .NET Standard would be where the two circles overlap. .NET Standard is just for making libraries, and if you target Standard your library can be consumed by apps built with either of the two other frameworks.
Why don't use [SendGrid](https://docs.microsoft.com/en-us/azure/sendgrid-dotnet-how-to-send-email) ? They have an easy to use library that you can download and they offer 25, 000 SMSes per month for free.
If you asked me this question in an interview, I would thank you for your time and leave.
I am currently working on a project using dotnet core and Docker running on Fedora 26 with Vim as my editor. C# is my favourite language and Vim is my favourite editor so the chance to use Vim to write C# is my personal Holy Grail! Omnisharp took a bit of fiddling to get set up and is a bit patchy sometimes but works well enough to be useful most of the time. I don't really miss the debugger - Console.WriteLine is good enough most of the time. I figure I could get debugging working in VS Code if I need it but so far I haven't bothered to set it up. Overall the combination of dotnet core, Docker and Vim is brilliant and feels like a great combination of old school and state of the art.
Thank you so much for your kind help. 
Using C# allows the transpiler to transform the constructs to proper JS alternatives. Think of constructs like yield and async/await which would need to be reverse engineered when parsed from IL. In addition, source mapping would not be possible. That said, I still don't know what problem Bridge.NET tries to solve. For converting some enums to Typescript it does not work.
I use Mailgun as the API / gateway, it's free for 10k emails a month. It's just a simple POST request to send an email, which I use restsharp for. If I'm doing complicated emails or highly formatted, I use the Postal librafyto generate the HTML using razor views. 
I've setup authentication with Identity (JWT) very painfully for Web API, it also has RBAC. If you want, I can create a 'base' project for you but you need OAuth.
&gt; I don't really miss the debugger - Console.WriteLine is good enough most of the time. https://img.memecdn.com/ooh-the-force-huh-such-a-badass_o_591121.jpg
I am currently developing for .NET on Linux, although I'm not using Vim, but Jetbrains Rider. Although it's fairly new, working with it is a blast, almost on par with VS on Windows.
Thanks for the reply, I understand the high level relationship, I'm just struggling to understand what that means at the ground floor. For example with a library/package that targets 4.5.1, say, (which is comparable to .NET Standard 1.2) Can that be used by something that targets .NET Standard 2?
You've got it backwards. NET Standard is just for making libraries that can be used by either Framework or Core. You can't go the other direction though. Your libraries have to start off targeting NET Standard to be reusable in both APIs.
I know it's backwards :) I'm just trying to work out what happens (if anything) and to draw up a compatibility chart for legacy/classic .NET for moving forward into .NET core. The docs are great for greenfield, but they don't really cover migration scenarios afaics
Thanks for the reply, I've read that a few times but it hasn't really answered what happens to the older libraries. For example with a library/package that targets 4.5.1, say, (which is comparable to .NET Standard 1.2) Can that be used by something that targets .NET Standard 2? I know from experiments that if I have something that targets 4.6.2 I can use it in .NET Standard 2, if I include a reference to NETStandard.Library. It's the intercompatibilty of everything beyond the golden path (starting at Standard) I'm curious of.
Fair disclosure, I haven't tried what you're asking to this is AFAIK; The answer to your previous question is "no" You have to actually be targeting Standard with your library, there's no transitive "A supports X, and B supports X, therefore A supports B" dynamic going on. If you targeted 4.5.1 with your library, your library can be used by 4.5.1+ code.
I'm surprised this works. My assumption here is that your 4.6.2 library didn't use any definitions that weren't from the NET Standard spec.
If you Target. Net 4.5.1: everyone with .net 4.5.1 or greater can use it. Anyone with any core version can't use it Anyone with standard isn't building anything, as only .net and core is for running applications. If you start out targeting standard and adds references to a .net 4.5.1 Assembly, your project becomes .net 4.5.1 If you Target standard you only build libraries .net, standard and core are always backwards compatible i.e any Assembly writing in version 2 can be used in 2 and above 3 
I'm working on some APIs accessing SQL backends. While I do love Visual Studio, which I used in a previous life as an M$ developer, VS Code is sufficient enough for smaller projects, but JetBrains has developed a decent IDE with Rider. Having a built a number of JS projects using WebStorm, the Rider interface is a welcome home to code from. Not a vi/vim user myself. 
I'll admit it wasn't the most rigourous test, more of a "could I ...". I added a method to an existing 4.6.2 library that output the current datetime, created a dotnet new console which targetted netcoreapp2.0, included it as a reference and appended that to the default Hello World message. I got an error which prompted me to include the NetStandard.Library package, built again and got the result. My guess was that that package acted as a "bridge" between Core 2 and .NET Framework 4.6.2 The library has a lot of legacy code, it's around 10 years old, tho I wasn't really using anything complex from it I've just realised I mucked up and said Standard 2 in the post above, when on inspecting it was Core 2, as you'd expect, sorry.
I battled for 2 days to get Google sign on working. The documentation in this area is woefully for those if us building SPA apps and not already experts in oauth and asp.net's inner workings. It seems good for MVC based apps, but I just couldn't get it to work. Usually I'm a huge fan of the docs though, as they generally are very well thought out.
If you have a class library targeting 4.5.1: * Anything on full framework 4.5.1 or later can use it. * Anything implementing .NET Standard 2.0 or later (including .NET Core 2.0) *might* be able to use it. It will compile, but you might encounter runtime NotImplementedExceptions. If you control this library, your best bet is to move it to .NET Standard 2.0. If it's a dependency... you'll just have to try it and see.
Currently we are using a visual workflow system called Switch. Mostly because our graphics processing department was using it. Expensive modules is the biggest hurdle. We get around it by writing powershell or command line tools which can be executed by the flows. Being visual is nice. It is also file based which doesn't always line up with the use cases (sometimes have to pass empty files through yo trigger events). Versioning is non existent with this system because the flows can only be exported in a binary format. We keep backups and a log of what we changed for flows. Some other issues we have with this system is that a really buggy flow might effect the performance of other flows. There is a new version we are hoping to upgrade to to possibly fix those issues. I do want to try other workflows like the one in this post, even for things like a daily tasks (instead of a scheduled task and PowerShell scripts)
to do basic email stuff in .net you can use the [System.Net.Mail](https://msdn.microsoft.com/en-us/library/system.net.mail\(v=vs.110\).aspx) classes
I use dotnet core on Mac ox, with docker so I'm really working in Alpine Linux, but I do use VS code. While I love VI for Linux, I fine VS Code really saves me a LOT of time. I can suggest you check it out and load the addin that maps the shortcuts to Vim. That way, you get the goodness of VS code and the comfort of VI! 
From my knowledge var++ gets evaluated after the execution and ++var gets executed before execution. int i = 5; i = (i++) + i + (++i); * i++: increment i and return the value before incrementing * = 5 * + i: Add the value of i * = 5 + 6, 11 * ++i: Increment the value of i and return the new value * = 11 + 7, 18 The low level stuff on why this happens: Being a curious guy about VM's i learned how to make lexers so this was one of the things you had to think about is how to evaluate one of these expressions, we would take each character at a time and tokenize it. ``` ; Spaces are ingored by lexers unless ; its a language like python where whitespace ; matters. ... int x = 5; Take ( : Create a new scope Take x : VAR Take + : PLUS_SIGN Take + : | change to INT_INCREMENT_AFTER Take ) : Close Scope // Value at this point = 5 Take + : PLUS_SIGN Take x : VAR Take + : PLUS_SIGN // Value at this point = 6 Take ( : New Scope Take + : PLUS_SIGN Take + : | change to INT_INCREMENT_BEFORE Take X : VAR Take ) : Close scope // Value at this point is 7 When the code is compiled it will look like this // Stacks are read from Highest number to lowest) // Highest number = new newest item on stack // // Local Vars: // 0: x // // x = 5 IL_0000: nop // No OP IL_0001: ldc.i4.5 // Push 5 into the stack IL_0002: stloc.0 // Pop stack into x // x++ IL_0003: ldloc.0 // Load x into stack (5) IL_0004: dup // Duplicate stack var [stack: 1 = 5, 0 = 5] IL_0005: ldc.i4.1 // Push 1 into the stack IL_0006: add // Adds 1 (stack: 1 = 6, 0 = 5) IL_0007: stloc.0 // Pop stack into x (x=6), [stack = 5, the ret val] // + x IL_0008: ldloc.0 // Load value of x (6) IL_0009: add // Add the top 2 stack values, 5+6 [stack 0 = 11] // ++x IL_000A: ldloc.0 // Load value of x (6) IL_000B: ldc.i4.1 // Push 1 onto stack [stack 2 = 1, 1 = 6, 0 = 11] IL_000C: add // Add the top 2 stack values, 1+6 [stack 1 = 7, 0 = 11] IL_000D: dup // Duplicate value top value of stack, [stack 2 = 7, 1 = 7, 0 = 11] IL_000E: stloc.0 // Store 7 into x [stack 1 = 7, 0 = 11] IL_000F: add // Add 7 and 11 = 18, [stack 0 = 18] // x = ( x++ ) + x + ( ++x ); IL_0010: stloc.0 // Store 18 into x IL_0011: ret // Return ``` 
that sounds like it would be a great resource =) Throw it up on github, if you could.
I am in the exact same predicament!
A lot of people talking around your problem but /u/centurijon said what you need to address. The app pool is just timing out. Just set it so the app pool never times out. https://stackoverflow.com/questions/1596267/how-to-disable-the-application-pool-idle-time-out-in-iis7 
Real developers solve problems.
Dammit I was thinking the article is about the Shape proposal
This project is so...boring. It's solving problems that have been solved by Django and Ruby on Rails for years. 
I'm not sure I'm loving the idea of default interface implementations. I can easily imagine that causing some bug because someone forgot to implement a method or something along those lines. Yes, I know it's about whether one should give people enough rope to hang themselves with, but I'm not sure I like this approach.
I've been coding .NET on a Mac since well before the official MS supported version (.NET Core) was released. It was a bit challenging back then using Mono but it's improved a lot and is on the whole pretty smooth. The main issue is the ecosystem (outside of Windows) is much smaller but it is growing. For my daily coding I'm mostly using VS for Mac but I am using VS Code increasingly more and have been toying with switching over. I tried .NET with Vim for a bit and it's very doable but my reason for going back to other editors is more my lack of experience with Vim than anything else. I'm a moderate Vim user but if you're highly productive with it then it's worth trying, there are plugins for .NET that allow you to perform refactoring and debugging.
I agree it will definitely be misused. Having mixed feelings about it.
I was interested in using this project but as a non Windows user it is way too tied to Visual Studio for my liking. And the web forms style markup (which is not HTML designer friendly) seems a step back compared with the nice attribute based "asp" server tags you get with the latest MVC.
&gt; I'm not sure I'm loving the idea of default interface implementations. I agree. I was just in an interview and got asked the standard "explain the difference between an abstract class and an interface". That was a quick answer ... not it will be more like "well, it used to be this, but now, as of C# 8, you can also do this other weird stuff".
I dunno. An interface is meant to be a contract. If you don't implement a method defined in the interface then you probably shouldn't be using that interface at all.
I agree on principle, but this seems like one of those things that someone will do regardless, and when you take over their project you don't know where they rely on default implementations and where they don't.
It's trying to solve a real problem, and the real solution, which is multiple inheritance is presumably significantly harder to implement. Not exactly a huge fan of the solution either, but I don't know of a better one. 
There's two small typos on last sample code: https://gist.github.com/NMZivkovic/07e983e326b43cafa024ef7b26c93a3c#file-extensioneverything-cs-L19
Fixed it, thank you!
It's making C# kinda a prototype language, like js, which I don't mind too much. I kinda like the multi inheritance thing. 
&gt;the real solution, which is multiple inheritance The *real* real solution is proper Higher-Kinded Types, but I don't see that appearing in C# anytime soon - probably needs significant changes to the CLR, since it's not in F# either
Here is [that](https://xkcd.com/378/) xkcd. 
[Image](https://imgs.xkcd.com/comics/real_programmers.png) [Mobile](https://m.xkcd.com/378/) **Title:** Real Programmers **Title-text:** Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want\. [Comic Explanation](https://www.explainxkcd.com/wiki/index.php/378#Explanation) **Stats:** This comic has been referenced 1230 times, representing 0.7185% of referenced xkcds. --- ^[xkcd.com](https://www.xkcd.com) ^| ^[xkcd sub](https://www.reddit.com/r/xkcd/) ^| ^[Problems/Bugs?](https://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me) ^| ^[Delete](https://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=delete&amp;message=delete%20{thing_id})
might get better response over at /r/xamarindevelopers
Real developers WRASSSLE problems
It's not as bad as you think it is. This is how interfaces in Kotlin work also and I found them to be very handy especially when building frameworks.
The idea is that the default implementation defined in the interface should be the expected behavior that most classes will use. If you need different behavior then you simply override the default implementation; if you don't then simply use the default behavior. Think of it this way; if 80% of devs that implement an interface always implement it in the exact same way wouldn't it make sense to just go ahead and save them some time and provide them that functionality right off the bat?
&gt; I was just in an interview and got asked the standard "explain the difference between an abstract class and an interface". This is one of those I always chuckle at because the person posing the question usually asks it in the wrong way. The question should be posed as "when should you use an abstract class vs an interface?". At that point the interviewee usually starts listing off the differences between the two. Which is not the right answer. In a nutshell, you use an abstract class when you need to provide expected behavior to RELATED classes. If you need to provide expected behavior across UNRELATED classes then you use an interface. Couple of other guidelines in there also but this is the one that weighs the most.
[Obligatory](http://web.mit.edu/humor/Computers/real.programmers) I don't hold this opinion btw.
&gt; Not a vi/vim user myself. Is that what earns my downvotes?
I like your angle here, but I don't know what the definitions of an "related" or "unrelated" class. Also, I can see the expectation around this question causing confusion on the part of the interviewer because they could answer this in a way which it technically correct but because they didn't use the word "related", etc. you're not quite satisfied.
By related I simply mean inheritance. If the functionality only applies to a related chain of classes then put that functionality in the abstract class and let all child classes inherit it. If you expect classes across different inheritance chains to have that behavior then define an interface for the functionality so that it can be used across all classes regardless of whether they are in the same inheritance chain. It's not a matter of them using a specific word but the focus should be on "when" not "what". By that I mean a lot of devs know the differences between the 2 but very few know and understand when to use one versus the other. Sadly this is true for a lot of programming concepts. Everyone knows the syntax but few know the best practices.
Multi-inheritance of methods is okay (like anything, it can be used badly). Multi-inheritance of data is *extremely* bad, which is why C#/Java kept away from it for so long.
Damn, several of these features fixes an immediate need in our codebase.... And yet it would be years before they could possibly be used. Ah well.
Goodness me what a question.