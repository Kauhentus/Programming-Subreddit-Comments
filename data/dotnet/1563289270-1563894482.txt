Its fine, yeah I was just curious about the word "Installer". I use the approach seen here: https://github.com/Dotnet-Boxed/Templates/tree/master/Source/Content/ApiTemplate/Source/ApiTemplate * ApplicationBuilderExtensions.cs * CustomServiceCollectionExtensions.cs * MvcCoreBuilderExtensions.cs * ProjectServiceCollectionExtensions.cs
Try SonarCloud.io for cloud based repositories, or SonarCube for on-premise repositories. The later comes with a free tier.
Yeah that makes sense. I initially wanted to name the interface IServiceInstaller. I couldn’t name it extensions since they aren’t extensions. I like the extension approach as well but it doesn’t solve the problem quite in the same way. I guess a combination of the two might be the cleaner one.
There's a well known saying. If you don't like your job then try to change your job. If you can't change your job then change job! Seriously, just leave. This might seem like a big step but it's something once done gives you a big advantage. It's actually without any risk as long as you have a current job. You can easily apply for a job somewhere else and if they like you decide if you want it. A job application is a two way investigation. They investigate if you are what they want and you investigate if they are what you want. You can do this as many times as you need before switching jobs making sure that you are quite certain that your next job will be an improvement. Just regard the first five job interviews as training for becoming a good job finder. Look for a place that has a team of developers where they make an application just outside your area of knowledge. Make sure they value team development processes that include retrospectives and code reviews. It sounds like you're a person that not only takes a cliche for something that you can utter to someone else. But actually thinks about what it means to love up to that cliche. This fact alone can help you succeed in any team. Maybe you don't know everything or have enough experience (which I doubt) but you will get the time to learn as long as you do put in the effort. So just start looking around an change your job.
&gt; Would be a complete pain to do in a normal DB. Couldn't you just store it in a JSON column?
SonarCloud is one that pops up often in Microsoft’s documentation and there are built-in tasks in Azure Pipelines for it.
Thanks for this reply, it definitely helps. Changing jobs has been on my mind, though something I've always been pretty worried about, mostly in the realm of confidence. I've never *really* been in a development team outside a few very small and very non-formal teams on personal projects. That said, I'm starting to feel like I could learn what I need fairly easily, and probably be better off in the long run actually being surrounded by other developers with a common goal. The only downside really is that I'll have to move away from a location I like pretty good, and away from my family - we're in a pretty remote spot, there pretty much isn't anything out here along the lines of what I want to do. In that sense, I actually did get lucky with this company.
After switching from my phone to my laptop I added some more to my comment. Just added some personal experience. Hopefully it helps.
Your assembly scanning approach is nice because it's better for cross cutting concerns since you could move those out into a different assembly that you could package up and use across your different projects
Maybe you could look into a company that hires remote workers. That could help with your current location being remote. If you do then make sure that the company knows how to manage remote teams. &amp;#x200B; * Listen to this podcast: [https://www.se-radio.net/2019/05/episode-368-bryan-helmig-on-managing-distributed-teams/](https://www.se-radio.net/2019/05/episode-368-bryan-helmig-on-managing-distributed-teams/) * Also google for Scott Hanselman and Remote Working. * Google some more on 'distributed software development teams'
So... Xamarin Forms provides more options for responsive UI design and components than does the Xamarin non-forms version. As a web developer who uses bootstrap for my responsive design, I tend to look for similar methodologies when setting up my initial layouts. Unfortunately, I find XAML not to be intuitive, so I've been thinking a little about how i'd use the defaults as a starting place. Most of the MS tutorials start with a stack layout containing multiple stack-layouts to allow changes in horizontal and vertical layouts, which really frustrates me because I've probably not been sold completely on a design until I get working with the tools, and making changes anywhere causes me to have to backpedal on my inset stack panels. &amp;#x200B; See more @ [https://docs.microsoft.com/en-us/learn/modules/customize-layout-in-xamarin-forms-xaml-pages/2-specify-the-size-of-a-view](https://docs.microsoft.com/en-us/learn/modules/customize-layout-in-xamarin-forms-xaml-pages/2-specify-the-size-of-a-view) &amp;#x200B; Depending on the complexity of your design idea, and if you really need to ensure good responsiveness or not, you might do better with the RelativeLayout. I'm not sold on any of this though. :/
Never put business logic in stored procedures. Far more difficult to maintain than code. I can tell you that from experience.
Perhaps use \` TABLOCKX\` instead of \` UPDLOCK rowlock\`. I think this would lock the whole table from any read or write. I think what you have now only locks the table from writing for the selected rows, so another process could read the rows being locked.
This is multi threaded so I do want the other rows to be read and updated. I just want the 100 rows I am working to be locked until I've updated the date.
Thanks for taking the time to post all of this, and for re-reading what I wrote and adding the edit :) I'm definitely considering it. Working remote could be an option, but ultimately I feel like being at a place would probably be better for me overall. Being around other people, and in a different place, would probably be good. This job definitely causes me some stress. At first I liked it - it was just me, making a bunch of cool stuff that helped everyone. But now it's to the point where I get stress from this guy, and don't feel like bringing stuff up, added on top of the fact that I'm by myself and have pretty much nobody to bounce ideas off of. The whole thing in general kind of sucks. Working at a company doing this dedicated, or working remotely, either way would be a very big change to what I'm used to. But I think you're right that overall it would be better. I'd probably even end up making more money, from all of my research I'm fairly underpaid for what I do. On the topic of monetization - that actually has come up, and we have several projects we had planned on turning into a product and monetizing. Profit sharing has been mentioned, as has starting a new company and putting me in charge of the product development and all of that. Now believe me when I say that it's a good company and they take care of their people. But, despite that, I don't feel like I should wait for this. It's still a plan, a generalized idea, and we have much work to do before something like that is even really realized. Then it has to sell, and grow to the point that it's worth doing it's own thing with more developers. After all, like you said and has been in the back of my mind for a while, this is first and foremost a trucking company. I think I am going to start making some plans to look for another job. It may not be right now, because I've got some stuff to sort out and I kind of want to wait until I'm vested in the 401k, but probably in the next year or so. That'll give me a good chance to get some things sorted out and in a better position mentally to make the switch. I can definitely tell the stress has an impact on me though. While I don't have physical pain, I tend to eat when I'm stressed out and tired, making it hard to lose weight. Overall it's made me feel depressed, even outside of this guy and his frustrations. Posting this here has helped, though, as has some things a few friends of mine have said. Thanks again :)
Yeah, same here now. It really sucks. I can see using sprocs for some big reports and other fairly complex queries, or even just using something like Dapper to bring it all in (EF Core also supports running straight parameterized queries.) But, at least in our case, the vast majority of our use cases don't need this, especially if the DB was done properly to allow easy joins and consistency between everything.
Potentially yeah, but that makes them more difficult to amend as they get added to. There's very little real structure to the data so NoSQL works for us. Also when those documents are generally retrieved, you do want the whole document. So a niche use case. But there are times to use them, people just use them for relational data and it all goes wrong. In that same solution we do use a relational database for reporting purposes with NoSQL is generally awful at.
Yw
You can but you don't need to. You could put the SPA in AWS and the web API in Azure or vice versa, that's half the point; the two are decoupled. You could have one team building the API and another team working on the SPA. You can host SPAs in Azure storage now as well which is pretty cheap and leave your API in a API/web app.
Electron doesn't fit any need. There is no linux support so it is not truly cross-platform. So you get none of the "cross-platform benefits" and none of the "native desktop benefits".
I guess blogs and recipe managers can be electron... Or maybe just a fucking website ? You prick.
You are wrong and not worth arguing with having hot takes like that. Good day.
Not sure how this statement makes me a prick, but I guess you're just a troll and not worth talking to. Good day.
In this case the heard hype is true. Electron is one of the worst things to come to the desktop. Web technologies need to stay on the web.
Typical monkey web developer.
typical racist racist.
Learn something other than JavaScript, then have a good day.
Got the new T480s as my main work machine, it's a workhorse. The new docking station sucks compared to the old one, but other than that it's a perfect laptop.
Didn't know web developer monkey's had a race??? Wtf?
I'd like to know how having 2 different code bases (1 for Windows/Mac, and another for linux in fucking JavaScript) is better than having 3 code bases in their native language? At least with the latter, you get the benefits of being completely native.
depends on what you want to check. Do you just want to check code quality (code smells, potential bugs) or also security vulnerabilities? We use a private SonarSource subscription for general stuff and some security. To check for vulnerable components we first used Owasp dependency check and later switched to WhiteSource Bolt. Mostly because it offers a great performance even though it is free and is very easy to setup. Also Owasp dependency check works best in combination with sonarqube since it can be integrated via an plug-in, which is unfortunately not possible with SoundCloud.
Indeed, very well done series, also you're not using a keyboard which thonks a smashing sound every time you type. So a lot of kudos to you kind sir!
I'm curious how this comparison between Newtonsoft.JSON and System.Text.Json will change one .NET Core 3.0 is out: [https://nugettrends.com/packages?months=24&amp;ids=Newtonsoft.Json&amp;ids=System.Text.Json](https://nugettrends.com/packages?months=24&amp;ids=Newtonsoft.Json&amp;ids=System.Text.Json) Nice project idea! It would be nice to have a link to NuGet for the packages currently selected.
Not harder than any other programming language. The thing that's hard to learn is writing code, regardless of the programming language.
Hey! Not OP but I was the “front-end” dev on the project. We appreciate the feedback! I’ll look into your suggestion. Having a link does sounds handy. I’m also curious, but honestly I think it will take some time for it to catch with Newtonsoft.JSON. Nevertheless we have a tool to compare now :D Cheers.
C\# should be harder to learn than say JavaScript since it is typed. But not much harder. C on the other hand is more noticeably difficult.
I'm not a programmer professionally. However, I'm self-taught with Visual Basic and moved on to [VB.NET](https://VB.NET). Last year I built my first [ASP.NET](https://ASP.NET) application using [VB.NET](https://VB.NET) that we use every day in our work environment. I know nothing about C# but am interested in learning. These days I find I'm better at things when I'm shown what to do versus reading a book and trying on my own to do things. How would you recommend I go about learning C#? I'm interested!
Especially these days
Might want to go over this: [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?view=aspnetcore-2.2) &amp;#x200B; You need to have IIS installed. I have configured IIS before but my company owns the servers and the application is only available on our domain, therefore, my configuration was a bit easier. &amp;#x200B; You will have to configure your security based on what the application is using. How do you access your server? Can you remote in and install IIS? Is IIS already installed? &amp;#x200B; You need to have more specific blocks in order to get help. Go through the article and see if you can get a general idea of what to do, and maybe you will find some more specific things you are having trouble with.
Thanks for posting this. I've been using https://nugetmusthaves.com/ for couple of years to find and discover new libraries. But will check out NuGetTrends .
This is awesome! I love seeming trend data! Very useful to see what is becoming popular
System.Text.Json will ship in the .NET Core 3.0 SDK so the NuGet numbers will be distorted. The package is for enabling non-3.0 apps to use System.Text.Json, e.g. a Xamarin app. Ironically Newtonsoft.Json being "replaced" with System.Text.Json might increase its downloads. It will no longer ship in the SDK so more apps will need to acquire it from NuGet.
[removed]
Very cool. I will be using this for sure. Lots of dls of a nuget package to solve problem x is usually a good sign of a package that will solve your problem well and is actively maintained. This was posted here a while ago https://www.fuget.org/ It's a better nuget search repo. It would be nice if the features could be combined
Why not just use 2019? Is there a particular reason you need 2017?
This is great. Has anyone told you yet your copyright is 2018?
Not sure why you’d need an older version. But you can download previous releases [here](https://visualstudio.microsoft.com/vs/older-downloads/) .
Visual Studio for Mac, unlike Visual Studio, is more of a long lived version they keep updating with less drastic changes than Visual Studio for Windows. 2019 is just the latest version and they don't really offer 2017 anymore to my knowledge on the Mac. 2019 should have everything you need.
I happened upon an interesting paper from a few years ago using genome data to store and retrieve using a Postgres server, a Mongo server, and two different size Cassandra clusters. It's worth a read as you evaluate the needs for your app. https://www.hindawi.com/journals/ijg/2015/502795/
I've been trying to teach myself .net through tutorials, but the majority of them are using 2017 and I keep running into roadblocks.
Thank you so much! I keep running into roadblocks because all the .net tutorials I find use 2017.
There's a solid chance that the tutorials that you are using are going to run into issues with VS for Mac in either edition. There are huge differences when compared to VS 17/19 for Windows.
Yeah, I’m definitely noticing that 😩. I’m just really pushing to enter the .net world (of limited resources) from the node world (of an overflow of resources).
I highly recommend sticking to .net core 2.0+. It's designed with cross platform in mind and tutorials that teach it are more likely to cover VSM. For instance, the official docs all have a tab for Mac when IDE examples are used. If you're doing web dev, asp.net core 3 is coming out soon (they're on the 6th preview release) and it has nice support for Angular, React and Vue.
Hey thanks for the advice! I’ll definitely save this comment and keep all of that in mind.
The short answer is yes, F# is used in production. The reason you don’t see it very often is because OO is way more popular than functional. There are some great Microsoft talks on F# (find them in YouTube) where they go share some examples of companies who have written very successful projects in F#. Ask yourself this: Do you or your company write in functional languages? No? Then you won’t be exposed to F# most likely. &gt; or even VB for that matter outside of legacy Well... yeah, no shit lol. Why would you start a new project in VB. VB exists in the NET stack still strictly for legacy applications. No one in their right-mind would chose VB for a new project nowadays.
This submission has been randomly featured in /r/serendipity, a bot-driven subreddit discovery engine. More here: /r/Serendipity/comments/ce7upd/nugettrends_new_resource_for_net_library_authors/
Sure does - running fine here. &amp;#x200B; BTW - no offense but: &amp;#x200B; \&gt; However, in my (relatively short) time as a .NET developer &amp;#x200B; I think you've yet to see quite a few things ;)
You could just.. ignore the procs? Use linq anyway? As long as you satisfy the constraints, he probably wouldn't know the difference... Your boss needs a Come to Jesus on the unsustainable nature of biz logic in s-procs AND on letting a senior programmer pigeon hole design to his favorite toy, when it doesn't fit. As for fixing things, you need to ask for a schema diagram of the database. Insist. Make your boss insist. It is a basic job function of a DB admin. Then use that to audit the missing keys, duped data, and crap joins. Then, if it were me, I would then modify that schema, addressing all of the issues you pointed out. Then I would create a new, empty database using the new schema, migrate the data, and only recreate the stored procedures that aren't trivial to recreate in linq. But then again, I'm kind of an asshole who lacks patience for those unwilling to learn.
Gotta change that. Thanks!
Thanks!
Yes, that’s what’s cool about it in my opinion as well. Not everything’s on github so some stuff you can’t just rely on stars or commits. Could you explain more what ideas you had and what could be merged? fuget is awesome as well and I use it from time to time. The API diff is the best!
I used it with Canopy to easily e2e test my website :)
Isn’t VS for Mac just a skin of Xamarin? That being said, Rider is well worth the investment.
I haven't explored fuget, but I like when u type dapper all the libraries suffix with dapper appear rather than having to search for each one individually. That should b easy to incorporate, where starts with etc whatever ur orm is doing or a more fuzzy search sql Where nugetPackageName like "%dapper%" but that would be messy, starts with would be great and I can add them all to the graph at once
Now this is a super niche edge case - but the [VB.NET](https://VB.NET) website I support will automatically recompile files if I change them (in production). It makes bug fixes and quick updates ridiculously easy. Now, I'd never ever advocate for this in any sort of serious system that supports alot of revenue - but it's a handy feature for a straightforward simple internal website.
&gt;No one in their right-mind would chose VB for a new project nowadays. You underestimate the number of new projects started by people in their wrong mind... ;)
Ah I see. It should have that behavior already actually. One could argue also that if I type \`xunit\` I want the more relevant first, instead of a lot of "garbage" so, I guess it's a trade-off. The search is rather simplistic for now.. but if this gets the attention we could improve the search and use some more advanced tools.
Are you just learning C#? If so I recommend moving to VS Code. It’s got wide spread adoption now so there are loads of tutorials out there for it. Also any tutorial that works on Windows will also work on Mac.
I'm not sure I could recommend this. I work with .Net for both my job, and my personal projects. I spend a LOT of time looking at, and writing C#. Most of it reading other people's code. VSCode is by far my favorite all around editor, it's an absolute unit compared to the competition. Not to mention it's very lightweight compared to a full blown IDE, is cross platform, and will support pretty much any language or use case under the sun. By Visual Studio still wins, hands down, for C# development. So much so that I prefer to remote into a VM and use Visual Studio on a single monitor, with RDP lag, than use VSCode on my native desktop (Linux). All the little things add up. And it *just works ^^(tm)* , where in comparison I'll spend hours trying to get VSCode to do *some* of the things I like...
This has very little to do with functional programming. Mostly this is just translating math into c#. And... \&gt; In this section, we will see how to make a type *Lazy* starting from the version \*\*3.5\*\* of the .NET Framework. probably better to check out the .net [reference source](https://referencesource.microsoft.com/#mscorlib/system/Lazy.cs,8b99c1f377873554) or for the code for [.net core](https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Lazy.cs)
Give me one valid reason why i shouldnt ://///
Yes, we use it only with Fabulous framework for Xamarin.Forms
I’m a C# programmer. I love C#. But... the way people talk down about VB.Net irritates me slightly. It’s almost like they are elitist about it. There is nothing wrong with VB.Net. There is not one thing you can do in C# that you can’t do in VB.Net. Do I use it for new projects? No. Do some people? Of course. It’s s fine language. And I bet there’s a lot of us here who came from VB (and VB.Net). I did. So let’s stop this elitism. All it does it marginalise people who use VB.Net. Let us all be .Net buddies and accept that at least we’re not using fucking Node.
Also a C# programmer here, but I thought it was interesting that [VB.NET](https://VB.NET) supports static local variables so you can do things like Pattern 4 here: [https://blogs.msdn.microsoft.com/lucian/2014/03/03/async-re-entrancy-and-the-patterns-to-deal-with-it/](https://blogs.msdn.microsoft.com/lucian/2014/03/03/async-re-entrancy-and-the-patterns-to-deal-with-it/). In C#, the variable would need to be class scoped
have a look at [MongoDB.Entities](https://github.com/dj-nitehawk/MongoDB.Entities). relational data structures are the main reason it exists.
I’m currently working with some F# applications. The language is a great fit for event sourcing / event driven systems. The append-only log of events are expressed using immutable records and unions. We’ve also used Fable to transpile F# to JavaScript for validations that require non-trivial code, such as check-sums. The downsides are the IDE tooling is not as good as C#, and some libraries are awkward to use if the rely heavily on certain features like implicit conversions, dynamic types or anonymous classes.
Note because I've seen it before: **Don't** use self-contained single executable in Docker containers! It makes no sense, it will decrease the startup time of your container.
Yes, I use it in production, and I prefer it much over C# (and C# was my first favorite language in the past).
Are the examples on Mac? It’s worth calling out that “Visual Studio for Mac” isn’t a Mac version of VS, the way Word for Mac provides the same experience. It’s a completely different product that doesn’t have feature parity with the Windows version — kinda like Outlook for Mac isn’t even remotely like Outlook for Windows. Sometimes, Microsoft trying to unify their offerings is in name only and it sucks.
&gt; The reason you don’t see it very often is because OO is way more popular than functional. And I believe the reason for this is that OOP is usually teached in universities, while FP is not. And most developers have a hard time learning another foreign paradigm - it pushes them out of their comfort zone.
Thank you, will take a look when i have some time as it is a side project and i am a full time worker with some deadlines coming. &amp;#x200B; Either way, i might try to ask you more later on\~
How does this compare to [Workflow Core](https://github.com/danielgerlag/workflow-core)? Are user-input scenarios possible?
Wexflow is different from Workflow Core. The goal of Wexflow is to automate recurring tasks without user intervention so user-input scenarios are not supported yet.
If we're talking learning the language itself then C is a lot simpler than C#. If we're talking doing things with it then I guess C can be harder for a person used to OOP and higher-level languages. C is not noticeably difficult unless you're using it to achieve something that you would normally use C# for.
Thanks for introducing me to fuget! I hadn't even realised that my nuget package wasn't published with XML documentation until I browsed it on there! D'oh..
Amen brother.
I'm XF developper too and i'm really interested to know how ans what's the purpose of using F# on Xamarin forme app. Can you tell us more about that please ?
yep, it has its pros and cons, but starts with would make this a really good tool if you can implement it. do you guys have an open source github to contribute? i wouldnt mind taking a stab, that said i have so many side projects, but it would be nice to contribute to something open source to make nuget better
an article would be nicer just and fyi common async awaiit anti patterns can be addressed in a siimple article what to do vs what to do etc. i didnt watch the vifdeo becuase its 1hr long, hence why i think an article would be better with a video linked. that said, if the content is heavy, maybe the video is warranted
c# isnt hard, but use a tool like resharper or eviq, it will detect better options e.g. use string interoplation instead of concatenating strings
You would be surprised how strong is the VB.NET usage among life science research labs on the Fortune 500, doing automation of their data readers via DLL/COM and robot arms.
On lousy universities that is. I did my degree during the 90's, we got to use C++, Pascal, Smalltalk, Caml Light, Prolog, PL/SQL, Lisp l, Java for our assignments. Additionally those that took compiler design assignments got to learn Algol, Scheme, Concurrent C, Concurrent Pascal, Oberon, Eiffel, Miranda, Component Pascal and few lesser known ones. A quick look at current programs shows that a good mix of OOP / FP is still being taught across top Portuguese universities.
[Fabulous](https://fsprojects.github.io/Fabulous/) is an [Elm](https://elm-lang.org/)-like way to build apps on Xamarin; you'll also see it referred to as MVU to compare it against MVVM and MVC. I'm building an F# webapp with [Elmish](https://github.com/elmish/elmish), and I really like the MVU pattern. F# makes the pattern easy because of using immutable-by-default records and exhaustive pattern matching.
I've never used a workflow engine before, seems really interesting. I've often implemented some of the example use cases before (e.g. on a schedule run some stored proc and email the results, copy a batch of files once per day, push a message onto a rabbitmq queue, etc.). Maybe I should look more into a workflow engine. Any advice or tips about them?
I've used it exclusively for the past two years, and as the primary language for the last three. I don't like using c# anymore because I see the defaults that c# uses as wrong and harmful to correct software construction. Data types should be immutable by default, functions should be pure, data should be modeled with unions and records, pattern matching is table stakes, inheritance should be minimized in favor of composition and things like async/await should be able to be modeled in user libraries like the monads they are.
We used workflow engine similar to wexflow. But seems wexflow has ton of features. I need to play with it
One question: Does it do loops and conditional?
Yes, it does: https://github.com/aelassas/Wexflow/wiki/Samples#flowchart-workflows
I would recommend this book if someone wants to learn Functional programming in C# [https://www.manning.com/books/functional-programming-in-c-sharp](https://www.manning.com/books/functional-programming-in-c-sharp)
Actually, we just use `.Contains` which does not do "Like", but I was looking at [EF.Functions.Like()](https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-2.0#effunctionslike). &gt; do you guys have an open source github to contribute Absolutely!: https://github.com/NuGetTrends/nuget-trends (Bruno, the OP, also posted in the description, maybe you just missed it)
Done! Cheers!
Awesome! I've built a Workflow engine myself for our enterprise solution. I'd definitely check this out. But seems it misses a lot of features. E.g. parallel tasks, task start conditions like sending mails and people have to accept/deny the next task, wait timespans or wait till date between tasks, having a timetable for when workflows are allowed to run, or run them the next monday with at least 4 weeks pause, etc.
It really depends on what the Web application does and the complexity of the data, logic and presentation layers. If you have a lot of content to render then servers ode rendering may be better, but if you need a lot of interactivity, then the most significant trend is to use one of the prevalent libraries you mention to build a single page application working against a RESTful API built in Asp.net. However you wouldn't necessarily go wrong with asp.net mvc views (in razor) with some jquery client side for a lot of use cases. There's also how much time you can afford to invest in learning new technologies. Vue.js gets a lot of accolades about its simplicity, angular is OK, react comes with a bit more a curve.
I'm also a newbie but here's my 2c. Angular, Vue, React, etc are frontend frameworks that use Javascript/Typescript for the language. They would replace the bootstrap part of your project. It depends on what you're building and what functionality is needed. Using Javascript provides alot of benefits to making stuff like single page apps and allowing more client side work being done.
Trends are going into the WebAPI + React/Angular/Vue/etc. direction and traditional MVC is slowly but surely being pushed further and further to the edge (although this doesn't mean that it's dying). Although now that Blazor is slowly maturing, I think that there are gonna be a lot of changes on how .Net devs build frontends. Blazor esentially combines the decoupling a React frontend provides with the ease of using C# to build UI components.
This is really cool and also seems similar to the component model for React as well. Do you think that React components are also built around this MVU pattern?
If your front end is jQuery &amp; HTML, you're generally going to have your web server generate each page and send the content to the user's web browser. I know many people poo-poo jQuery these days - but for simple projects - and if you don't need many 3rd party JS components - it does the job very well - and it can request JSON from a web server. If you use something like Angular (current version is 8), you can develop a 'single page application'. That means that the user's web browser is generating each screen, and the web browser is asking the web server for the JSON data it needs to generate the interface (a list of products, product details, etc.). It is a change in approach, thinking, and tooling. You may find yourself using VS Code instead of Visual Studio - and unfortunately VS Code is not multi-monitor friendly. If you choose Angular, you'll be using TypeScript (basically strongly typed JavaScript - that gets changed into JavaScript for the web browser). The learning curve is steep, but it might be worth it depending upon the project (it is for your employability though). I can't speak for Vue and React, as I have not used these. Whether you choose to use Angular, Vue, React - there's no 'right .NET way' - as there are multiple ways to skin a cat and these frameworks are only calling the .NET HTTP API that you expose. We have a lot of flexibility - and others may recommend Vue or React. Angular is pretty cool, but it can be hard to Google for solutions as there have been many versions. Anything before v2 (now called AngularJS) will not help as v2 was a complete rewrite. I would also suggest that your back end is .NET Core 2.2+ rather than standard .NET. .NET 4.8 will be the last version - so use Core from now on. Yes on SQL Server and Bootstrap 4. Forgive my ramblings, and let us know what you choose. Good luck on the project!
Especially these days
Are you developing on .net core? If so, MsSql is not good choise, since Postgresql is much better choise in aspect of running on linux hosting. If your webapp is SPA (single page application), then on client side I recommend you to use Angular (not js), but it maybe difficult to understand if you have no experience with TypeScript.
Hello pointless bot.
Very interesting feature. Wondering why C# doesn't support it
How does this compare to Hangfire? It kind of looks like Hangfire with a workflow on top of it? I might be interested in porting my Hangfire jobs over to gain the workflow features...
&gt;since Postgresql is much better choise in aspect of running on linux hosting. SQL Server has been available for Linux for a while now. And works great.
I haven't used Hooks yet, so I can't speak to that. But before hooks, React+Redux is MVU. Redux's `reducer` is the (U)pdate function, and React is the (V)iew. Redux lists Elm as [prior art](https://redux.js.org/introduction/prior-art).
Case statements in VB.Net are also better than in C#. I find basic event handlers are more transparent too. There’s loads of little things about VB that are great. It’s also a fantastic way for beginners to learn because it so verbose and similar to normal written language. C# is also brilliant too. The lambda functions are easier to read and understand I find. And many more things. They should make some VB.Net/C# language mash up with all the best things of both. Maybe call it some cool name. Like “DoomLord#” Dunno why that name came into my head but never mind
I'll give the advice more based on context, you are a new hire, shipping working code is the most important part. If your company has a SQL Server license, go for it, it works, has a ton of information online, and GUI tools to help small companies work with the software without going full devops on it. JQuery/Bootstrap, BootStrap in this year was able to remove their jQuery dependency, because it works, and is crazy stable for a JS library these days. I have been coding JS since 2002, built interactive applications using plain JS or jQuery without Angular. I've also managed Angular projects, and they always take more effort to get right because it's building a stateful app inside a stateless environment. At the end of the day the end-user won't ask what JS framework you used, only your peers will. Long term recommendation, when possible, use standard JS calls. Need an element by ID, use document.getElementById() ( [https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById) ). Need it by a CSS class or attribute, use the querySelector [https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) . This will help you transition into having general JS knowledge that is not focused on jQuery and prepare you for Angular/Vue or what ever new JS framework shows up.
Actually, according to the TIOBE index for this year C# 4.356% barely eclipsed VB 4.208% as most used language . Last year it was reversed. F# was at #35 at 0.332% [https://www.tiobe.com/tiobe-index/](https://www.tiobe.com/tiobe-index/)
Wexflow is different from Hangfire. In Hangfire, you write your tasks in C# whereas in Wexflow you write your tasks from the designer or in XML or in C#. Furthermore, Wexflow provides more built-in tasks than Hangfire.
The company I work for has multiple web services in production written in F# that handle a pretty big scale, hundreds of thousands if not millions of requests daily as part of a SaaS platform.
Believe me, I've been tempted to just start doing it myself. I've actually started making a diagram recently, as well as mapping out what will need to be changed/fixed in order to switch to EF Core. So far I've had to make about 6 FKs, 2 or 3 PKs, and I've only looked at around 10 tables out of easily 70+. I've found orphaned data, and I've even found instances where this could be impacting actual programs silently, some programs I would consider to be fairly critical. Thankfully the impact so far as I can tell *right now* is fairly minimal - but it's a pure chance game on how this is, and can break for any driver based on bad user input, imports following no constraints or any kind of logic to prevent this stuff, and so on. These issues just sit silently. He has the senior developer title, but I have more trust and sway with my boss with regards to development, sysadmin, networking, etc than he does. I estimate for cleaning this up properly, it's going to take *at least* a few weeks of deciding what we want our final relational layout to be and what kind of delete/update cascades we want, fixing/creating table structures as needed, re-writing data imports to add checks for common issues we may face that are causing these orphaning issues, fixing the database structure and FKs, and updating any programs running off of this that may need to be. I would likely keep the existing sprocs just to reduce the impact of fixing all this up front. The sprocs can be updated as needed for the programs, then after I get a solid data layer in place on my side I can re-write the programs to use EF Core as I go (I have Fridays to make improvements overall anyways, I could do quite a few of them in these Fridays.) I intend on having a meeting with my boss again once I do a bit more research on what all is going on, and going to need to be fixed. Thankfully the other guy agrees that the data imports need to be re-written, and has for a while. But, doesn't think anyone will give us the time. I'll get us the time, though.
[Jet.com](https://Jet.com) are using F# in production [https://medium.com/jettech/f-microservice-patterns-jet-com-98b5f7025423](https://medium.com/jettech/f-microservice-patterns-jet-com-98b5f7025423)
Sure, I understand that. Maybe look into \` READPAST\`? If you have two processes come in at the exact moment then there is a chance that the second could read records locked by the first. Unless you instruct it to not read locked rows.
On the internet I've found a lot of devs love to hate on jQuery, but honestly, I found it to work well enough for me. I've briefly dipped my toes in the big frameworks but for the projects I intend to use them on there's way more overhead (in installing, learning, and satisfying the compiler for them) compared to "time lost" making some components yourself using js/jquery. If in doubt, ask a colleague for advice.
Oh okay, i learned about MVC in school so thats what i chose to use now, hope it stays relevant. Never heard of Blazor ill have to look into it, i guess its something new? Maybe i as a rookie should use some more established frameworks/technologies?
Yeah, Jet.com runs most of their systems on F#.
Okay maybe im not on that bad of a path then. The web application is for laboratory research so the focus is on handling a lot of data and not so much on the interface. Yeah i do have some time to learn new things but also maybe as a beginner i should focus on selecting something and get going with it instead of learning many new things?
As a rookie, it's OK if you start with MVC as many of the concepts are also used in WebAPI. But only as a foundation, it will not suffice if you limit yourself to it (neither should you). As for your other question, Blazor is still pretty new and like another commenter said, not yet production-ready. BUT it is a very exciting framework that enables you to write components (like you do in React), but you do it with C# so you don't need to learn JS (but as a web dev, you should at least know the basics). [This page](https://docs.microsoft.com/en-us/aspnet/core/blazor/get-started?view=aspnetcore-3.0&amp;tabs=visual-studio) contains lots of tutorials and information regarding Blazor.
Have you actually worked with VB/VB.NET devs who now write C# though? I didn't realise the sterotype was true till I had. I still use snippets of that code today to demonstrate how *not* to write clean testable maintainable code.
Just finished interviewing for a position that uses F# for all its cloud services
Awesome thanks for all the links and suggestions!
Very well said, my friend.
MVC is a good stepping point, especially moving to WebAPI as WebAPI inherits the Model and Controllers from MVC, it just doesn't use a View as that is expected to be handled by something else. We use React /w WebAPI C# and SqlServer where I work and while React opens a whole new world of things (nodejs, webpack, npm, react-router, react-templates, react-everything) once you get used to it, its really cool and very powerful letting you create completely client side view logic with very small fast webapi back-end that becomes little more than an intermediate between react and the database.
We're putting an F# service into production right now, with plans for more after. I wouldn't use it for everything, but Giraffe / Bolero / Fable are wonderful. F# ended up being really nice for the service we created because we actually needed to create lots of copies of the data with modifications which the built in data structures are meant for
This should not be supported This has hidden negative effects, it'll extract the runtime in a temp folder at runtime Why Microsoft can't understand what people want ?
Thanks for your reply it was very informative! For little more context ive already been working on the project for a while and chose the ones i wrote so i was more looking for if im missing something i could "add" or choose in my future projects. I was stuck on the choice between standard and Core .Net but in the end i chose standard because i was used to it and other colleagues here used it aswell. &amp;#x200B; So if i understand correctly the big difference is that with the Angular + Web api combo theres more of an separation between front and back end than what i have now? Whats the benefit of that? If the learning curve can be steep maybe its smart to stick with my approach for now so i can get going and look into the front end frameworks later? I will be involved in another project later where Angular is already chosen so ill get to learn it there for the employability aspect as you said.
Separate your business logic from your front-end UI logic. Then you call your business logic from the WPF app when needed. That way if you ever need to switch to another platform this separation will make the application more easily portable. I recommend learning .Net Standard for this.
Yes exactly thanks for putting it in context, as a new hire and also my first job after studies i want to code as much as possible and get things done, not get stuck in the details. I was thinking similarly that maybe there are useful frameworks out there but they may just make it more complicated and that as a beginner i should first learn it the "vanilla" or "oldschool" way to understand all these frameworks better later.
.net core runs fine on windows fyi.
Alright but arent Angular, Vue, React responssible for more than what Bootstrap does? Someone else here mentioned Blazor, maybe its something to look into when it gets established.
Is mllib also included? I can't seem to find it in the .NET API for C#.
Wexflow seems to do those things
Im on the standard .Net not Core because i was taught that in school and other colleagues here use standard so i wanted them to be able to help me and also maybe contribute in the future. Its not single page but MVC, if thats correctly said?
Yes thats my feeling exactly with jquery it works well for me, i dont feel as if i was losing time on something but as a rookie i was wondering that maybe im missing out on something that i dont even know about. I did ask my colleagues and they have pretty much the same stack but were a small team here so i wanted more opinions.
I believe that nobody should be using jQuery anymore and go w/ a framework like Vue/Angular or React. I'm a Vuejs fan myself. Also people want spa pages, no post backs and gives you features you can't accomplish w/ MVC that gives end user a great UX experience
Yes that was my thinking aswell that i want to start out with a good foundation but never stop learning and looking for new more effective ways. Blazor seems great but i guess its something to dig into a bit later when its matured.
Okay so instead of the View in MVC you have the front end framework like React and Angular responssible for that? The separation of front end, back end and database that you use sounds smart. But i wonder if its really needed or that much benefitial in my case.
I'm not sure, do you react to the question in the description or to the project?
&gt; - Jquery and Bootstrap for the interface noooooooooooooooooo its not 2010 anymore, there are Javascript frameworks now.
Vue &gt; Angular &gt; React IMO after using all three. Vue is what I use all the time on the frontend now.
Well you're asking if there's a way to write the code and then have an app that calls the code right?
It’s hard for me to compare them directly because I haven’t used Xamarin Forms as is, or any other xaml GUI framework, before current project. But it feels like Fabulous removes a lot of boilerplate code (for commands, etc) and utilizes model-view-update architecture which plays nicely with GUI apps.
I have a simple diagnostics module running in production on top of Azure Functions. I would like to build bigger applications with F# but it's super difficult getting the architecture right. There is much less documentations available and you can't ask anyone for help. Something as simple as a while loop over async conditon takes lots of reading and trying to get it right. It would go much smoother if there was an experienced F# developer in the team but how do you validate this guy since you are unable to understand his decisions?
One way I’ve done it is my main function preps a single run program in a different class. You can then include that same class in your wpf program and distribute either the GUI or console exe as needed
This is pretty cool, I can see myself using this for internal tools.
Microsoft has amazing tooling around docs and GitHub. For example, I can edit a markdown file, push that to GitHub, and a bot will comment on the pull request with a link to preview my changes. It's very slick. I would love to use that system for my own docs/blog/site/everything.
This was my original question that the project answers. I see it was confusing, so I've edited the post.
For those that don’t want to watch a 1hr video, check out David Fowler’s [async patterns](https://github.com/davidfowl/AspNetCoreDiagnosticScenarios/blob/master/AspNetCoreGuidance.md) github repo.
I’m using that exact stack at the moment for a large corporate web app. I’ve been looking into the JS frameworks and will probably try Web API + React next, but you really should stick to the stack you’ve chosen for your first few apps. Don’t make things more complicated than they need to be, get a couple of apps under your belt then upgrade from jQuery. It’s easier to learn React/Angular etc when your comfortable with the MVC/EF backend.
Quite cool
For now, it does that. MS said it will be done in a different way once .NET Core 3 is finally released.
I am not a fan of the syntax of VB, but if you already have VB devs it is often better to develop in a language your team(s) know well than retrain. C#/VB.Net share a compiler so you mostly get all the perf and features either way.
We use ASP.NET MVC for all the real projects at my workplace. But we are also always trying new stuff like PowerApps and small web related libraries. With that I want to point out that it doesn't matter what you learn in the beginning, if you work as a developer you will be forced/have the opportunity to learn new stuff all the time on work hours. Just start with asp net and razor and get the hang of that. No point in overcomplicatating things with various Javascript frameworks that breaks every other week ;)
It's crazy that it's pretty much used as much as Rust. I guess reading too much HackerNews has skewed my perceptions on how popular Rust is. Go is actually doing pretty darn well though.
He’s not asking how to structure his enterprise apps he was just sharing a tool for turning snippets of C# code into an app you can quickly run.
Its good to hear that .Net MVC is relevant, and yes not overcomplicating is proably a good advice :)
Alright ill try compare them a bit before i select one and dig in.
Does you company already have an IP and staff investment in Java? "You'll have to replace all your engineers and rewrite your entire software stack" seems like a decent enough argument against it.
Thats good to hear. Yeah after reading all the comments i get the feeling aswell that its a good starting point and itll be easier learning the front end frameworks later if i start out like this.
This is amazing, thank you
&gt; things like async/await should be able to be modeled in user libraries like the monads they are damn, you lost me here, could you explain please?
I concur, I came from VB6, VBA in Office Apps like MS Access, and then [VB.NET](https://VB.NET) on Web Forms and finally all new code is in C# just because I want to make sure I am relevant in case I need a new job, but there is nothing you can't don't in either as they are the same Framework. I can write in C# and still call my [VB.NET](https://VB.NET) DLL global functions making it easier to use both.
thanks for being open to contributions, ill ping /u/bruno-garcia whats the best way i can help out i.e. features to implement or even bugs to get started. i dont have a ton of time, but this kind of project is very cool. my background is dev 10 years+. i code .net core, efcore, angular 2+, postgres at work, but ive mainly been on sql server for my career. i might clone the repo to check it out first
Sure. Bruno and I are buddies and we built it together. We are kind of new to this but we are planning to create (soon-ish) a CONTRIBUTING.md file and organize things and ideas as issues on github. So contributors have something to work on, at least. That’d be a good start! You can clone, take a look and let us know. I’m a .NET dev as well but I fiddle around FE sometimes. I mainly built the front-end while Bruno was focusing on the back-end. You can hit us on gitter, I believe the link is also there in the OP.
First of all you could replace your connection to db with sql db file. It names "ms sql compact edition" if I remember right. It's just a file, you don't need sql server instance.
Your post has been removed. Self promotion posts are not allowed.
Yeah, typical MS, they waste their time, instead of focusing on doing the right thing, they go the bloated route and spend insane amount of time in developing stuff they'll replace few month later
Good to know, I’m starting work on a react project that is about to introduce redux. Switching from UWP/WPF desktop development with MVVM to MVU has been an eye opener. It’s strange to see a function creating a UI when I’m so used to keeping UI logic out of a ViewModel. Starting to see some benefits already of keeping UIs up to date with state.
they are following Java, to the graveyard, meanwhile GO is eating their cake and even more
Using cached checksums is probably going to be the fastest way to check, but if the master images you are comparing against also change, that obviously will add an additional level of complexity you will need to account for. If you do go the pixel comparison way, the fastest way that I have found is a combination of lockbits and unsafe. Assuming you are reading as 32bpp, you can use unsafe pointers and compare as ulongs for equality as long as the image is more than 1x1 pixels, otherwise use 32-bit integers. This significantly reduces the number of iterations in the loop. Also the obvious point of not comparing pixels unless you absolutely have to, such as comparing any file size, format, etc. before you start any such check. Comparing images for equality is never a great performer.
For best portability use SQLite. Particularly if it’s a single user app.
I believe they're talking about [computation expressions](https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/computation-expressions).
looks good, how scalable this solution is? has anyone tried to run 1000000 jobs per day or some other large number? is anyone using this in enterprise level solutions?
The only thing I'd like to add to your answer is when working with JPEG files. Even if it is the same image, if it has been saved an extra time the compression algorithm may change pixel values slightly and it would take more complicated methods to determine if it is a "duplicate" or not.
Don't bother engaging with the child. He was in here a few weeks ago babbling about the same topic.
If you are sure the duplicates are byte-for-byte identical copies, using a hash function like MD5 (or something newer) is the most reasonable approach. However, any slight differences in the files like recompression or changes of metadata will result in different hashes. Alternatively you may want to look into "perceptive hashing", algorithms which are designed to generate comparable hashes for images that look the same (to some threshold) even if the files differ.
Yes, true, good point. Would even extend that to any image format that can be saved with different image qualities, as exact pixel comparison and/or checksums will fail under those circumstances. This would require some time of "fuzzy" comparison to check if images are equal (i.e. "close enough"). If that is a requirement for equality, it might be beneficial to look into utilizing the GPU, as this could get pretty compute-intensive.
That link is for ASP.Net Core guidance..
Your only hope would be to load the file and do optical recognition. Optical character recognition is pretty common. I'm sure there is a way to compare imgs where if the delta is below a threshold u can b assured they are the same, might not work if dimensions have changed and won't work if the compression has distorted the img
How do you get over the hurdle of being proficient with f# where you can write it just as fast as c#? Is it just practice? If like to write my business logic classes in f# but I'm always in the mind set of getting it done rather than struggling with learning something new.
SQL server can be quite expensive and has some pain in the ass gotchas. For a small business, Postgres is usually a better option. It saves dollars and works fine.
Joke's on you if you believe TIOBE has any semblant of accuracy given how they collect the "data". People should really stop using it as a proof of anything. It is just random data with no correlation with reality.
I think your strategy is a winner. Just keep in mind that two things that have the same hash may not be equal.
95% of the backend for https://shopmasse.com/ is written in F#.
Some others: https://crowded.co/ https://www.genetec.com/
it was just a random thing to add to the conversation ... honestly I really couldn't care.
what is the likely hood of 2 files having same hash and not be related?
IIRC md5 is 128 bits, so any two files have an extremely low probability of collision. If your set is very large though the odds of two files in the set colliding will increase like the [birthday problem](https://en.m.wikipedia.org/wiki/Birthday_problem). I’m not going to do any math on how big the set has to be to get concerning, but you should be able to calculate based on expected set size the odds that a given set would have a false positive match - it may even be ridiculously large. Good luck!
Depends on the hashing algorithm. Generally, the larger the hash the more resistant they are to collision. In all cases, however, collisions are possible. Larger hashes come at the cost of performance. You could try starting with a smaller hash. If you run into a collision, hash the two files again using a larger hash and compare again.
LOL. One of my most popular 'articles' was just taking a MS presentation on async/await and turning it into a written form. By and large people really don't like videos on programming topics if a suitable document is available.
From the looks of it, what this tool does is take your provided business logic and bolts an automatically created front end UI atop it.
It’s not about “elitism”. VB is the older technology that has been essentially superseded by C#. In my mind it just doesn’t make sense to start a project with it now. I also don’t like the syntax personally so I am biased.
The node shit was both a joke and an example of why you shouldn’t just dismiss an entire thing because you don’t like it.
Haha I'm not surprised. In videos there is a lot of waffling on or explaining very basic concepts on c# to the audience. These speeches can often be formatted into an article with an intro summary followed by a list of what not to do, what to do and why. 3 bullet points under each topic. 1 Example of bad pattern: 2 Example of correct implementation: 3 Breif reason why, optional link for more info, msdn doc etc. Depends on the topic of the speech of course. Interested to see your article
Folwers article below is what I'm ref to, I've read it b4, it's great
[removed]
* Udemy Angular course by Mosh Hamedani * Pro Angular books by Adam Freeman * Angular Docs
I felt joyful after completing my exam for Developing ASP.NET MVC 4 Web Applications with the help of [70-486 Dumps](https://www.exam4help.com/microsoft/70-486-dumps.html). Due to effective supervision of experts I got clear my exams and I can’t describe the joy and excitement in words. I’m in debt of expert’s hard work over Exam4Help.
First of all, you won't be using the typical MVC approach anymore when making an SPA so the MVC part here isn't relevent. You'll have a REST API.
Why don't you choose a client language that works on every machine? As far as I am concerned swift only runs on Mac. If your application is not that complex e.g. requires much performance (game, simulator), I would give electron or ionic a shot. Why do you use vue.js if you want to create the client in swift anyway?
Well said, and a simple check in the size of the file before even bothering to compare with a hash would exponentially decrease the odds even more. In the real world, unless dealing with a huge set of data, no one is worrying about collisions when just trying to quickly and arbitrarily check if two files are the same. If this was some type of security-related or critical task, might go another route, but not for OP's problem.
Expenses arent a problem as my workplace already uses sql server but postgres was an alternative i looked into.
If you are a more practical learner like me, I would recommend to just create a new angular project via Visual Studio. This new project contains some basic template that you can fiddle around with.
As a ASP.NET developer, I've been learning Angular for the past three months on Pluralsight using courses from the Angular path, especially the introductionary course by Deborah Kurata was really helpful. Then, when you'll have the basics, I recommend fiddling with some existing Angular projects (or developing something of your own!) in order to get a grasp of how specific things work. Angular has an amazing documentation, so it's easy to learn from there as well.
VB and VB.NET are not the same language at all, anyway. It's a flawded comparison to make.
I can't recommend Mosh Hamedani enough. He's one of the few udemy teachers that don't treat their students like complete noob.
Is JScript still a thing? I thought that was dead and forgotten many years ago.
I think JScript is still alive, but JScript.NET is dead since I can't find many resources. And shall I mention the fact that you didn't answer the question?
&gt; How do you get over the hurdle of being proficient with f# where you can write it just as fast as c#? Is it just practice? It is mostly practice and learning, yes. &gt; Id like to write my business logic classes in f# Try to avoid writing C# in F#, and adopt F# patterns. Don't try to write your code in F# as you would write it in C#. Read the posts on this homepage: https://fsharpforfunandprofit.com/ :-)
We’re obviously talking about .net in the .net sub?
A joke that invalidated your point... It’s like saying “don’t fucking swear”. A bit hypocritical.
Then I don't get it. VB.NET is as old as C#, not older. It has (or had, until C# 8) the same features, even some that are not possible in C#.
Yeah, whatever. Maybe don’t take shit so seriously. You’ll live longer.
https://en.wikipedia.org/wiki/JScript_.NET This is not a technology worth learning or using - unless you have free time or are really interested. It's better to learn C# and .NET Core if you are interested in a career.
May I ask why I get downvoted or will I get downvoted even more?
What disadvantages does it have over C#?
I've watched the entire series over the last couple of days and I have to say that your series is fantastically high quality. A little heavy on the OO/indirection style for my taste, but well explained and well-executed.
Thank you very much for the feedback. Highly appreciated.
Don’t take it personal kid. Just my opinion.
Saved for later, thanks!
What I don’t get is why this post about F# has turned into people arguing about Visual Basic and C#
ASP.NET Rest API with Angular? Like HTML pages? I looked up on Stackover flow, where MVC views were loaded in angular. I wanted to try something like that.
Thanks!
The largest disadvantage is - basically nobody uses it and noboy will invest resources into this language, tooling or platform around it. If you want scripting languages - there are plenty of supported alternatives - JavaScript, Python, Lua, even C#-Script.
Ok thanks. Couldn't you answer without downvoting me?
Neal Cummings tut pushed me from noob to a junior dev. https://www.udemy.com/user/neil-cummings-2/
You’re getting downvoted because this is an old, obscure, unused technology that people think you’re trolling
I CLEARLY stated I'm a newbie, I just discovered JScript.NET. How the F am I supposed to know it's an obsolete technology that if someone mentions they get hated? Downvoters are the trolls because they didn't explain that to me neither they told me why they downvote. They just like watching people get angry.
While that "works" thats not recommended or ideal at all.
Are you refering to me? That's not polite to assume that I downvoted you.
No I wasn't refering to you. I was refering to downvoters who didn't tell me the reason.
Sorry, replied to wrong thread. Yes I thought you downvoted because as soon as I saw the count drop to 0 I saw your answer. Sorry if I assumed wrong.
In this space, you should look at TypeScript.
Versions of Jscript and Jscript.NET are both listed here: https://en.wikipedia.org/wiki/JScript The last date for any of them is in 2011. So it's not a living project.
Yeah I got that you’re new. Was just trying to help explain why I thought you were getting downvoted. Lots of folks probably saw JScript and had flashbacks from the days where making things compatible with IE was a god damn nightmare. Your tone in the other comment didn’t help where you call the person out for not answering your question. They had a legitimate question too about JScript still being around. Don’t get angry and give people the satisfaction. There are plenty of helpful people here, and it seems like you are trying to be polite and ask good questions. Now... I think JScript.NET is just the old language that compiled and runs on .NET 2 and 4. These are older versions of .NET, and I would be surprised if they continue to support or work on it. Microsoft seems pretty gung-ho on the modern JavaScript stack (typescript, node, react, etc...) it’s even built into their project templates in visual studio whereas I’m 90% sure JScript is not. I know you’re new and curious and probably have a strong desire to learn and understand EVERYTHING. Fight this a little bit and focus on learning high level how things fit together first. As one other person mentioned, people are steering you towards learning C# because you will have a WAY easier time down the road getting help when you run into issues. Are you learning to try and build something?
Depends on your goal. E.g. I'm just making a script engine for our app, and we ended up with [Jint](https://github.com/sebastienros/jint), which is ES5-compatible JS interpreter with a pretty nice level of .net integration.
Hey! That's really great. We have a list of ideas but even contributing with ideas would already be cool. Second what Joao said: We'll drop some issues with detailed ideas up-for-grabs and also prepare the environment for make it easier for new contributers (like a DB dump so you have some data to start with). We're online on Gitter if you'd like to chat. This is also a hobby project so mostly weekends but also evenings go.
Sorry, I can't really answer the question. if I ever knew much about it, I have already forgotten all of it, except for a sense of "the mainstream has moved on to other things".
I am sorting my personal family photos :), I think I am good
No, I just found out about this language and maybe I could experiment a bit. I already know a bit C# but in general I'm not familiar with .NET. I usually program in Java and maybe C++. I'm still a student so I program as a hobbyist.
I got a bit confused. Couldn't technically JScript keep up with JavaScript updates?
Technically yes, but regular `JavaScript` won all of the mindshare / marketshare.
Interesting. So basically we have all code in Angular2 with HTML and only data code in .Net? Is this good for long term? I mean a lot of Javascript libraries were hot since 2010 but i haven't really used much of them.
It needs to be updated to include TaskAsync, but here you go... https://www.infoq.com/articles/Async-API-Design/
The HTML doesn't even exist in the .NET side - everything is constructed by and managed by the JS framework and your components. Yes its actually way better in the long term because it promotes seperation of concerns. It means you can even hire people who can specifically work on the frontend and not even know what the underlying API technology is, if you so wished. Things have come a long way, for the better, since 2010. There's nicer alternatives to Angular as well.
Thanks.
Glad I could help. Learning the fundamentals of JS will help you pick up larger frameworks later on easier. I would look at the newer JS versions, so ES6+ as a good starting point. You can always use grunt/webpack to compile them back down to something IE can understand if you have to support IE.
Elfocrash you make vids full time? You have been rattling these off lol
I wish! I have a full time job. I had to put blogging aside to focus on the videos which I enjoy making more.
Absolutely, the whole point of Xamarin is the ability to reuse your existing C# business logic (and skills). Your ASP.NET and Xamarin apps should be considered just View layers for your shared logic implemented using .NET Standard class libraries
The whole series is on youtube? Thank you
This is probably one of the best series I've seen for learning .NET Core. Very well explained and easy to follow! One thing I noticed in this video is your customized swagger UI. In the past I've looked up how to change the colours and add logos but I quickly moved on because it seemed like it wasn't worth the effort. The only decent videos I found on the topic were for .NET Standard which isn't exactly helpful. Do you already have a video on this? Or can you recommend any resources that could help with this?
Thank you very much for the feedback. Actually I didn’t do anything to customise it myself. I am assuming you’re using an old version of the Swagger UI package. If I remember correctly, past the version 4 it should look like mine.
Subscribe to the github release notification
Ah okay, I wasn't aware that they moved on from the classic green. I took a look at your package references and I realized you are on the .NET Core 3.0 preview and swashbuckle V 5.0, I think maybe the updated colour scheme starts with .NET Core 3. Thanks for the quick reply.
Yeah, I always want to blog but I never find the time. You could also stream on Twitch if you make a game or write software. People like to watch people code and you can talk to the chat. its pretty fun.
Hmm, it wouldn't handle the updates automatically but could at least serve as a trigger to do it manually - good thinking, thanks
I’ve been following Jeff Fritz for a while now and indeed it can be quite fun. I am focusing on this series for now but once I have more of the major topics out of the way I will buy a green screen and probably start streaming.
The series started as 2.2 and the migration to 3.0 only happened 3 episodes ago. I was using v4 before that and it had almost the same UI.
I gotcha. I was just asking as to offer you some guidance on what you could learn based on what you’re interested in programming wise.
You can use .Net standard library for both projects but I would recommend to create a Webapi (Mvc with json response)
I think to remember that there is a dependency bot that checks for updates.
I might ask some really dumb questions so forgive me. Since my career started, 2006 early, I have avoided using Javascript. And with good results. Most of places I have worked on use business applications using .Net ofcourse. Javascript and Javascript libraries were usually seen as good "add on" but not something where you put in 40% of code. A lot of developers are used to n tier application using server side code. SPA are good. But not all applications can be converted to that. That's just my feeling. Long time back Silverlight was supposed to be game changer and a few companies where i worked invested in that. Like changed project to use Silverlight. But in 2012 MS decided to completely dumb it. I just wanna work on Application Development itself. If I am investing in angular, I wanna make sure I am moving in right direction and not making a diversion from my main skills.
If someone wants to learn functional programming in C# I would recommend they learn F# instead. I don't see the point in teaching a dog to catch mice when we have a cat available... use the right tool for the job, instead of trying to force the wrong tool to do it.
well, learning functional C# could be a step in right direction before the switch. Getting to know about some functional patterns and practices that are common in FP. Not everyone and not in every project can afford to change the language.
It would seem very strange to suddenly be introducing functional programming into an existing project, so I think that's a moot point in 99.99% of cases. I've literally never known a project in my own company, anyone we work with/for, or even anecdotally, where a requirement has arisen mid-project which entails functional programming
hmm that's strange. I'm using swashbuckle v4 with 2.2. I suppose I will have to keep looking. Thank you anyway!
It’s generally not possible to “update” to a new major version of bootstrap without also *migrating* much of your HTML. See https://getbootstrap.com/docs/4.0/migration/ for more info.
I use .Net Core and MVC 5. &amp;#x200B; MVC 5 is still king in enterprise around me. Well documented, well tested, and there is insane amount of resources. Core makes things interesting for example, custom data annotations got broken/changed between versions. That can cause a lot of frustration especially since you learn a concept and bam it doesn't work that way anymore. &amp;#x200B; Some things are better in core. Dependency injection works out of the box. &amp;#x200B; You can create the application without any of the front-end frameworks. I generally like to have a layered architecture, it separates db access code from business logic and web user interface. This allows you to reuse db access code and business logic in a API project if you switch to a front-end framework. The way MVC 5 works out the box is very similar to how front-end frameworks. Basically, in MVC 5 app you send "Views" back when user requests a page, with a different front-end you would send only data requested.
That won't work anyway. I have a testing build that builds every night against the newest available nuget package. There were breaking changes in almost every update...
This 1000%. SQLite will do everything you probably need and you can use it for in-memory integration tests with foreign key support. Backing it up is as easy as copying the file. As long as you're not doing crazy write heavy stuff and you don't need advanced SQL Server features it will do what you want.
This 1000%. SQLite will do everything you probably need and you can use it for in-memory integration tests with foreign key support. Backing it up is as easy as copying the file. As long as you're not doing crazy write heavy stuff and you don't need advanced SQL Server features it will do what you want.
Thanks for the link! But ouch, that looks very involved, and part of the sparkle of using VS 2017's ASP Web Forms Application choice is that it spares me from building the HTML for the basic structure (like navigation, and so on.) Two follow-up questions: 1. I'll forget about updating any previous applications, but if I wanted to start a new application with Bootstrap 4.3.1, what is the best way to replicate what VS 2017 does with 3.3.7? 2. When is Visual Studio 2017 or 2019 going to be updated to do the initial build with Bootstrap 4?
.
What are you trying to achieve? &amp;#x200B; .NET Core API != .NET Core MVC &amp;#x200B; .NET Core MVC is basically the complete app, it stands for Model/View/Controller. This includes front-end. &amp;#x200B; .NET Core API instead of returning "Views" returns data in json for example. Then, for front-end you pick a framework and access the API, which feeds the data.
I want a .NET API and some frontend that isn’t Angular
I would look into running it as a self-contained deployment as a service: [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service?view=aspnetcore-2.2&amp;tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/windows-service?view=aspnetcore-2.2&amp;tabs=visual-studio) As others have said, use SQLite. I believe the purpose of Electron is to just host your front-end to make it look like a desktop application when really it's a webpage. You could either use electron or just have your app open in a browser.
Fair enough: I was mostly hoping to semi-automate (similar to your test build) and then deploy it once a person has had a look, but it wouldn't be the end of the world to have to apply the new version manually. By far the most important thing is that we don't miss any security updates
Dumb question: For enterprise applications non SPA application will be main stay. I don't really see how angular2 with Web API will solve that.
I also noticed how old the templates are when trying to make a Vue application on .NET Core. There also Bootstrap 3, old Vue, old everything. Someone really should grab these and bring them to current times. Maybe needs a bug report unless there is one already...
Tip from a long-time developer: move on to TypeScript (supported by Microsoft and the VS IDE). It's not exactly C#, but support types and classes well enough it will be a quick learn for you. Ultimately, the [jscript.net](https://jscript.net) stuff was using json serialization (i'm sure) to turn object into JS, and keeping up with all of the JS core changes probably became a nightmare, so TypeScript became the solution to use.
JScript is the brand name of Microsoft's implementation of JavaScript. They couldn't call it JavaScript because that was (is?) a trademark owned Netscape. JScript.NET is a version of JavaScript that runs on the CLR. It was one of the original .NET languages but is no longer supported. There have been other attempts to run JavaScript on the CLR, but they never got the traction needed for longterm stability. If they had, Node wouldn't be so popular today.
All posts get some degree of downvotes. It's a reddit phenomenom. Yours might just lack the necessary upvotes to secure its positive value.
At the time I posted this complaint this post had 33% upvotes
VS 2017 and VS 2019 not being fully compatible with Bootstrap 4 on its own is really limiting!
Then focus on creating .Net Core API application with a Vue/React/Blazor front end. I'm sure you can find tutorials for these everywhere.
Not at all true. It's just BS from a Fanboy
It's bullshit.
No
A lot of enterprises won’t be migrating at all because they have 10+ years of legacy to migrate and it’s just not worth it as a business. I’ve seen a lot of places use .NET core for greenfield projects but haven’t seen many do the full migrate to it.
yep, what he said.
&gt; Is it true most of the enterprises are migrating from .NET to Spring, not to .NET Core? Definitely not. Those who can't migrate to Core are just staying on the old .NET Framework. The cost of upgrading to Core is bad enough, to rewrite an enterprise application from scratch in Spring would be insane. It would be like finding out that the fancy new racing tires don't fit your car. Instead of being content with the old tires, you lite the car on fire. *** It also wouldn't make any sense. If you can't upgrade to Core, it is probably because you are using some Windows-only feature that is only available in .NET Framework. Which by definition means you can't use Spring, as it doesn't expose Windows-only features. To continue the analogy, you've replaced your car with a speed boat. And now you want to strap those racing tires to the side of it?
Adding Java (or Kotlin or another JDK language) to your skillset would *widen* your job prospects, but I wouldn't do it at the expense of becoming a journeyman/master in C# if the job market in your area for C# is even halfway decent. `git gud` at any one sizable, mainstream platform to the point where you're comfortable and can think of design rather than language. After that, adding languages and platforms is just a matter of time and forcing yourself to practice with that language. Java and C# are more similar than they are different. The JDK platform has always had a much broader reach of SDKs and tools and libraries, since it started earlier and was truly cross-platform for a long time before C# was. However, a significant portion of that broader ecosystem is kind of like Linux distro wars, where some people will say, "you want to use X? That's old and broken. Use Y." (Even moreso than anything in the C# world)
&gt; I don't know why he told C# out of fashion Wishful thinking. Java was only in the spotlight for 5 or 6 years. Since C# was announced with all of the import features from Java nearly 20 years ago, it has dominated the opinion polls in terms of language design. Java as a platform has beat out .NET in some sectors and locations. Depending on where you live, one or the other will tend to have more job openings. But usually there are enough jobs in both to go around. But Java as a language isn't even fashionable to Java programmers. There are a lot of other JVM compatible languages such as Scala, Clojure, and Groovy that get a lot of attention. I don't follow it closely, but I think the current fashion leader is Kotlin.
[https://trends.google.com/trends/explore?geo=US&amp;q=.net%20core,Java%20Spring](https://trends.google.com/trends/explore?geo=US&amp;q=.net%20core,Java%20Spring) or [https://insights.stackoverflow.com/survey/2019#technology](https://insights.stackoverflow.com/survey/2019#technology) &amp;#x200B; Basically? He's talking out of his ass. Java is still bigger than C#, but it's not a huge difference (39% of professional devs vs 32%). Basically, tell him you'll need citations for that
In EF6 this implicit table would be generated for you if both classes have a collection property to the other class type. In EF Core you must indeed specify a class that joins the two together. &amp;#x200B; StudentAssignment should have the properties StudentId: int Student: Student AssignmentId: int Assignment: Assignment Completed: bool The student and assignment properties are optional but I think it's nice to have navigation. var assignment = new Assignment("English", due: dueDate); context.Assignments.Add(assignment); assignment.Register(context.Students.Where(student =&gt; student.ClassLevel == ClassLevels.Junior)); context.SaveChanges(); // in the assignment class public void Register(IEnumerable&lt;Student&gt; students) { foreach(var student in students){ this.Register(student); } } public void Register(Student student){ // add some verification here first, check if the student // has already has been given this assignment // you should probably throw if that's the case as that gives you // the opportunity to generate feedback to the user of invalid action var sa = new StudentAssignment(student, this); student.Assignments.Add(sa); this.Registered.Add(sa); } I hope someone will correct me because I have no idea what I'm doing.
Glad to see the .net vs Java war is still going . The tribes have been fighting the most pointless war in history since 2002!
Complete bullshit. When you walk into any sizable business, there is a good chance you will be seeing Windows. With windows being as popular as it is with businesses, .NET isn’t going anywhere whether it be CORE or the old Framework.
Migriting your huge codebase from one language to another is one of those things that can kill a company. Very few people are so stupid.
It a little bit hurts my heart that there are Spring fanboys in the world. But that might just be because I can remember spending more time writing XML than code.
Our company is going from Java to Kotlin for Android development now. Compared to Kotlin or even C#, Java is just so verbose.
Im a .NET dev currently working with Spring Boot, and it actually isn't that bad :) Still miss some syntax sugar from C# tho...
Depends, .NET Core is still new if you compare it to Spring, that's not BS. Not sure about the rest of the statement. &amp;#x200B; As for employability and career growth, I would say depends on location, (i.e there may be more Java jobs available than .NET)
&gt;To continue the analogy, you've replaced your car with a speed boat. And now you want to strap those racing tires to the side of it? You're goddamn right I will.
The migration isn't really that much work. We have a large codebase and did it in our spare time over the course of a couple months.
where's the data to support a claim like that? no data == fanboy
Not really pointless. I'm a .net expert with decades of experience in obscure topics that make me invaluable to enterprises trying to fix their legacy code and write high quality new code. If the industry suddenly dropped C# as a whole, I could learn Java syntax in a day and the basic frameworks in a month. But I wouldn't have the deep knowledge that justifies my high billing rate. So beyond tribalism, there is some self preservation in supporting the language publicly.
If C# is out of fashion, then Java is Jurassic :)
Interesting point of view
How? Any guides / tutorials / hints? We were thinking about migrating our asp.net mvc to asp core mvc, but it seems like so much work.
Stupid question, but how did you set up debugging asp net core in vs code? Do you use ISS express?
Google trends isn't good evidence. There's a hundred ways to mislead someone with google trend data. https://trends.google.com/trends/explore?geo=US&amp;q=.net,java
Not decades mate , it’s 17 years at the most . Java has legitimately for decades. . Net has only been around for 17 years . So not quite 2 decades yet. But like I said it’s a pointless tribal war. At the end of the day the best tool for the job wins any day of the week.
If you want cutting edge, learn Go or some other modern language. If you want a job, learn C# Java is the most out of fashion language I personally know: I barely even see it on job sites now
no
http://3.bp.blogspot.com/-VYKJVq6Gjtg/UMD0z-O6RLI/AAAAAAAADt8/aKwM45AX6PE/s1600/damn-right.gif
Master one stack and then you can switch to another easily enough. As for career development it doesn't matter, just focus on understand in the underlying concepts instead of specific details. As for which one will dominate, I'm not even sure the question is relevant. On top of the other stacks like Rails and whatever JS thing is popular today, serverless offerings are shuffling the cards as well. Nobody can predict where things will be in 5-10 years.
I haven't touched Spring for years, but last time I checked, it was possible to do Spring without ever touching XML. That was back around when version 4.2 launched I think?
I am not using VSCode. This is an IDE called Rider by the guys who made resharper. It’s awesome.
&gt; out of __fashion__ Anyone who is concerned with technical *fashion*, and technical hype cycles, and skittish greenfield trends, is simply not that experienced. Wanna know how I know? Because if you're actually experienced you've seen all that crap come and go at least 3 times before, and know the qualities that will ensure long term viability of technical solutions, and how little of that relates to what drives hype among junior devs and bloggers. Telephony companies dealing with Erlang sure are out of "fashion". I bet they cry themselves to sleep on their giant piles of money eeeeevery night because half-baked Java/JS/DotNet devs judge them so... Eyerollforever.
Sounds backwards to me.
Just ignore the troll.
"Obsolete" and "out of fashion" is a strange choice of words. The first is more of an objective assessment, and demonstrably wrong. While the latter is the lack of popular approval, which I doubt but maybe an argument could be made. This isn't thoughtful language. And I wouldn't hold much regard for their opinions' on any topic on till proven otherwise.
&gt; By the time the .NET project was publicly announced at the July 2000 Professional Developers Conference, the language had been renamed C#, and the class libraries and ASP.NET runtime had been ported to C#.
The only thing he said that holds truth is that Java developers do get paid more, and this is probably because more of the big corporations use Java. .NET Core is not immature and C# is very much in fashion.
Yep. I'm just still holding a grudge.
I tried it myself with my company's base framework and whilst I was able to get the bones of it together there still numerous major changes and impacts along the way. Also, since I was starting fresh I took that as an opportunity to upgrade and refresh some of the other components too, which has also stretched things out a bit. For my scenario, it was still plenty of work as I didn't want to do just the bare minimum to get it working.
What about Razor and HTML?
I guess next you're going to tell me, you worked on the first project out in the wild then too! &amp;#x200B; Like I said, you're not going to have decades of experience , when the framework itself is barely making it to decades, save for rounding up! &amp;#x200B; Whatever floats your boat dude! You go for it. as a polyglot developer I really don't care which language or framework is hyped as the best, I get paid to deliver solutions in whichever language or framework regardless.
I will fight to my death for .NET 😈. Not really, but I like to treat it as though if if it was loyalty to a sports team for fun.
Personally, I'm the Peter Crouch of software development, and play for any team that offers me a paying contract!
Anything specific to that student-assignment pair has to be in the join table. So if it's completed, datetime it was turned in, grade etc. would belong there.
I started working with .NET 1.0 when it was in its second beta. And before then I was deeply involved in discussions about the plans on various newsgroups. While I wasn't 'famous', I did garner enough respect in the forums for Microsoft to invite me to Redmond to attend a conference of VB 6 developers. Our purpose was to discuss their plans for syntax changes to VB.NET. They even paid for my flight and hotel. (This was just before the beta 2 code was dropped if I recall correctly.)
I would sell out in a second at the right price 😂
Quite the opposite, tbh.
Oops. Derp. I thought that was vs code 😅
*cough* https://github.com/nneonneo/sha1collider https://github.blog/2017-03-20-sha-1-collision-detection-on-github-com/
here is what you looking for : https://github.com/aspnet/AspNetCore/tree/master/src/ProjectTemplates/Web.ProjectTemplates/content first create an issue explaining the limitation in a cool way then fork the repo create a branch with the update push / submit a PR explaining why and how and stating that it fixes the issue that would probably help thousand of people
Lol
P.S. You should work on your reading comprehension a bit. I didn't actually say that I have "decades of experience in .NET". I said that I have "decades of experience in obscure topics". That includes VB/COM stuff, which is occasionally useful in interopt scenarios.
Nobody in their right mind is going to change a language platform without a strong business reason. If anything it's javascript that is displacing other languages in new applications. That being said, I still use C# for everything back-end whenever I can. And the reality is that it's java that has been playing catch-up with C# in terms of language features. And while I'm at it, having just written a large project in Python because I had to, holy fucking God did I miss C# merely for being a statically typed language. Run-time errors are not worth it as the price of admission to convenience.
oh well whatever!
He's wrong. We're actually slowing moving the other way, from Java to C#. I know plenty of shops that have chosen either side (and one or two that do both). Dude is just trying to put down what he doesn't like.
&gt; Nobody in their right mind is going to change a language platform without a strong business reason. To be fair, it often happens when they aren't in their right mind. Shortly after I left FIS, the newly hired director decided they wanted to rewrite a highly-concurrent automated bond trading service. It was not "high performance", but there were lots of threads constantly active on the same data. The locking scheme alone required weeks of analysis to ensure that it was perfect. And it had to be. Each bond trade started at 10,000 USD and could easily be in the millions. If a race condition resulted in an order being duplicated or lost, it could cripple the company. The version I gave them was a mix of VB and C# code and ran as a Windows service. He wanted to rewrite it from scratch in Python, a language that can't even execute code in parallel.
I'm no expert on the subject, although I've worked on a few different Framework projects as well as Core, I'll just share an experience. I recently started converting our class libraries to .NET Standard instead of .NET Framework for a particular project, and it's actually been quite smooth. Sure, the MVC app itself running in the IIS is still a good old Framework project, but pretty much all business logic code has moved to .NET Standard projects, although targeting Framework to make them compatible with the MVC project. Now, the more you isolate that hard Framework dependency, the better. I solved a lot through abstraction and injection. We are now at a point where, if we need to, we can switch out the presentation layer with an ASP.NET Core one, simply target our class-library projects for netstandard2.0. You might be looking at a lot of refactoring work though, depending on how much the MVC project is doing by itself and how hard you lean on things that aren't covered in .NET Core.
Which is why I also included the StackOverFlow link.
😭
It's the internet. People will do anything and everything good and bad. Stupid and smart. Trolling and wholesome. You will enjoy life better if you don't get to attached by how people react to you on the internet
As someone who recently switched from developing in Java /Spring to C#/.NET Core, I can say this is complete BS. This may have been the case before MS open sourced, but this is certainly not the case today. Both language/framework couples are good and highly capable.
You only need one Enterprise moving from .NET to .NET Core, that one is the company you're working for. &amp;#x200B; Switching gear from .NET C# to JAVA wouldn't much big of a hassle either as many of their syntax are very similar.
Sure, but why include the trends link at all if you knew it was bad?
Both are doing fine. Java may suffer from Oracle's decisions to charge for it and to abandon EE, but it all depends on how hard IBM/RedHat will support OpenJDK and Eclipse and Spring. .Net Core suffers from the lack of support for enterprise stuff that was popular in 2000-2015 but wasn't made by Microsoft. It also has no WCF support, which is important for some companies. However, .Net Core is great at doing hip modern stuff. Containers? Sure. HTTP/JSON backends? Really good at that. gRPC? Coming in 3.0 with Microsoft support. Asynchrony? They *invented* `async`/`await`.
Sounds like he is a Java fanboy, nothing more.
Even though most enterprises live are nowhere near water. They need to be able to “rotate quickly” which means there can’t be a car and a boat, there has to be this boat shaped car thing that looks ridiculous and only barely satisfies both requirements. Then the car boat thing sits idle and everyone pays for a bus pass cause it’s faster (SaaS).
You'll do well in corporate.
Because even if absolute values aren't that useful, trends still are. If searches about a language are constant, that's a good indication that language isn't going anywhere.
Using Java or Kotlin? The latter may have most/all of the sugar you're missing.
My biggest issue isn't our internal code it's that library support isn't there yet. Mainly Entity Framework Core just isn't mature enough to migrate to. We also do a lot of Umbraco sites and they look nowhere near .NET Core support yet.
And yet all I see around me is java developers installing visual studio code and moving to c# for services. As if that stuff just magically works or something.
The place I work is adopting more C# thanks to .NET Core.
.net core 3.0 is suppose to support entity framework 6. Your still tied to windows though.
That was the killer for me. I'm a senior c# dev by day and taught myself Android development in my free time - doing the simplest things was just so time consuming in Java it's unreal. Code looks messy and bloated because of the verbosity, and that's *expected*. Crazy.
Anecdotal evidence this is false: My company is moving from a Java-based locally-installed application to a web app done in C# [ASP.NET](https://ASP.NET) / Angular. I also know from my previous job hearing that well-known circuit design program (Altium) is moving to C# (not from Java but another language). That and Pluralsight, Stack Overflow, and many other popular sites are built on C#. It's not a fad, it's a trend that will (I think) ultimately put Java in its overdue grave.
I'm sure we've all been bitten by this ham-fisted attempt at avoiding HTML-injection attacks. And by now it is universally accepted that this (1) wasn't a real fix and (2) caused a lot of problems. So my question is whether this is still a thing in ASP.NET Core or if they finally learned their lesson?
It's not bad, it's a data point. I'll give you that it's an easily manipulated one, but to prove I didn't I provided supporting documentation in the form of StackOverflow. The issue with StackOverflow is it's a lagging indicator. It's (perhaps) better curated, but by necessity it is not as "up to the minute" as a Trends data plot is going to be. Keep in mind the StackOverflow data is ~5 months old. By linking the Trends I can say that, at least in a cursory manner, that data is still valid.
You need to set the env variable via the pipeline configuration. Something like. https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&amp;tabs=yaml
Lol
Ahahha that's funny
I'm witnessing the exact opposite in Japan, which is known for its large number of Java developers. So maybe it depends on the location.
Considering a ton of the jobs I’ve been applying to are asking for C# and .Net experience, I doubt it.
Haha is trash, period, it's slow outdated pos
And I'll bet he's got an entire list of one anecdote to prove it. If you look at most of the major software companies, they generally have code in numerous languages to try them out. But that doesn't mean they're abandoning the old faithful stuff.
If you want facts, ask recruiters where they see the strongest demand, and be aware that platform marketshare is usually a regional thing.
I don't know of anybody who has moved to java from anything since Oracle bought Sun, and I generally recommend against using it whenever it comes up.
I want to agree with this but then I feel like I am just being a fanboy. Is there data to support what enterprises are doing?
Make sure you have a well factored solution before you decide to migrate. Porting libraries is as easy as retargeting in the .csproj. You will need to do more work in the UI tier but if your business logic is factored out it's no big deal.
Good stuff man
Main difference is that Hangfire is a background job handler and/or scheduler. It just has a (optional) UI to manage these things. But the comparison would be neat. My current project might benefit from being able to have users define workflows instead of programming them in (based on hangfire). This project handles 16500 jobs/day (~690 hour) witouth any issues. So even though they aren't the same, they certainly do seem to have some touching points. So it might be beneficial to have some benchmarks
Altium was built on Borland's Delphi IIRC. They needed to get off that code base which was seriously hitting performance limits being only 32 bits, and because maintaining development on Delphi is a waste at this point. The move to C# has largely worked but not without some serious problems being introduced in the migration process. They redesigned the UI and it's still causing much grief nearly two years later. Still, it's good to be on a platform that is more widely adopted.
I think if you follow the answer [here](https://stackoverflow.com/a/40275762) and also set the `FormOptions.MemoryBufferThreshold` to something you're comfortable with. This will bypass the temp file creation upto the limit you specify.
I feel like the opposite is true lol
"Experienced Java dev talking sh*t about C#." Noooooo---
Check out their samples in the core repository. There's an ASP.NET Core sample for docker.
I would expect that commonly the ID of the grain is the same ID that such an entity would have in the backing database. (I have very limited side project playing around with Orleans)
 git: 'gud' is not a git command. See 'git --help'. The most similar command is add
I work for one of the largest banks in the world. We have Java and .NET applications. We have been moving some of the .Net standard to .net core. But moving a large .net application to Java would be insane. But overall we have more Java projects than .net. Java has an edge over job market. However, there is demand for C# as well. I have personally moved to Spring Development (got an opportunity within the bank so I made the jump). I did it purely based on job demand reasons.
He's full of crap. It's not true at all. .Net and C# can do everything java could do.
That's why he's a senior dev. Did he not explain why? A 404 indicates that the resource that you tried to talk to does not exist - in this case the api/employees method. A 400 indicates that what you asked it to do was incorrect, which is exactly the example you have provided.
Can you explain why? I’m not obsessed with being correct, I just don’t understand.
[removed]
Yup! I wrote Delphi for the first year at my first job before being given a new project where I promptly choose C# over that archaic language. It was like might and day in terms of ease of use and learnability
It’s because error 400 is not meant for that. That code is for when a client makes a malformed request that the server didn’t like. An example would be a JSON serialized object that does not deserialize properly on the server. Since the request made by the client is not malformed, 404 is the correct behavior since the server could not find an object with that ID.
I disagree with this and we had a pretty large debate in my company over (like months and teams and bus ride disagreements). But that doesn't make me right...here's how we do it... * api/resource/{id} 404: If there is know resource (i.e. user, product, order, etc) with the supplied {id} then you return a 404 400: If the caller passed a decimal instead of a whole number for the {id} or a string like "abc" when you were expecting a number, then a 400 A 400 tells the consumer, hey you screwed up the call. A 404 says "this doesn't exist". When you pass the I'd in the URL like that, you are making the entire url the resource call. Now, to make things even deeper.. * api/resource?id={id} 200: empty set if no data or an array with items matching that query. 400: if they query with a decimal or a string instead of a full number. The point of this codes is a conversation between the caller and the provider, something you should be able to read from network logs alone. I find it helpful to imagine that you could only read the network logs and see the URL used along with the HTTP status code. Using that, use the proper response code to make it very clear what is happening. This is always a good resource: https://www.restapitutorial.com/httpstatuscodes.html
I disagree with this and we had a pretty large debate in my company over (like months and teams and bus ride disagreements). But that doesn't make me right...here's how we do it... * api/resource/{id} 404: If there is know resource (i.e. user, product, order, etc) with the supplied {id} then you return a 404 400: If the caller passed a decimal instead of a whole number for the {id} or a string like "abc" when you were expecting a number, then a 400 A 400 tells the consumer, hey you screwed up the call. A 404 says "this doesn't exist". When you pass the id in the URL like that, you are making the entire url the resource call. Now, to make things even deeper.. * api/resource?id={id} 200: empty set if no data or an array with items matching that query. 400: if they query with a decimal or a string instead of a full number. The point of this codes is a conversation between the caller and the provider, something you should be able to read from network logs alone. I find it helpful to imagine that you could only read the network logs and see the URL used along with the HTTP status code. Using that, use the proper response code to make it very clear what is happening. This is always a good resource: https://www.restapitutorial.com/httpstatuscodes.html
That’s a great in depth answer. This was what I assumed before today. How would you recommend I bring this up at work... or should I not? I want to do the right thing as a dev, but not get beat down by a senior dev.
In agreement, as well.
This thread reads weird. The senior dev is NOT right in the linked post.
You should definitely bring it up and feel free to use my post. I would also be more than happy to provide more assistance or guidance to you or your dev, if you need be. Getting this stuff right up front is really important because if you go down the wrong path, you will start to see inconsistencies and a lot of tribal knowledge about what things mean. I would suggest writing up a guideline with a flow chat on when to use what cards and with examples. Then have some type of meeting, hash it out and come to an agreement and then make that your standard.
Well I suppose opinions make the world go round. My point would be this. Say the webserver temporarily cannot fulfil the request because, for instance, a deploy has failed. It'll return a 404. The client process may now incorrectly presume that there is no employee 123.
You’re right it does, I completely zoned in on the fact that using error 400 is wrong in this context. Why he’s recommending it I don’t know but he is wrong.
Most of the good, new things aren't built in either language. Python, javascript, and Go are the languages people actually build new things in because they're easy to learn and you can build stuff fast. The only reason an enterprise really sticks with either Java or C# is because they're already invested with personnel and legacy code. In big IT shops with both, there can be some slight office politics going on with the lords of Java and lords of C# trying to grow their empires against eachother. It doesn't really matter. It's all the Fortran of tomorrow.
Found someone who agrees with me about the 404, but proposes 204 rather than 400. [https://medium.com/@santhoshkumarkrishna/http-get-rest-api-no-content-404-vs-204-vs-200-6dd869e3af1d](https://medium.com/@santhoshkumarkrishna/http-get-rest-api-no-content-404-vs-204-vs-200-6dd869e3af1d)
That seems more like a bad gateway or no response at all to me.
 [https://www.google.com/api/employees/123](https://www.google.com/api/employees/123)
Depending on what part of the deployment failed and if an exception or handled error is processed, a 4xx return code would still be wrong. It would be 500 or 503 because it’s a server side fault not a client induced fault.
&gt;moving .Net standard to .net core. This doesn't make sense - did you mean moving .NET Framework to .NET Core?
I don’t get it. That returned a 404...
I'm a very long-time Java/Scala developer who has landed at a Microsoft shop. I can tell you I am very impressed with .NET Core, to the point where if I were to start up a side project at this point I think I would choose it.
Sorry, but you’re misusing quite a few terms here. A *method* is an HTTP verb, such as GET, POST, PUT api/employees and api/employees/123 are endpoints or URIs or URLs, not methods. A *resource* is the thing specified by the ID in the endpoint. A *collection* is a group of resources. So in the OPs case, the collection is *employees*, the *resource* specified is the employee with ID 123, and the method being attempted is to GET (or retrieve) that specific employee. Based on what we know about the OP’s system, this request is correctly formed. However, employee with ID 123 does not exist. Therefore, the more appropriate code to return in response to the request is 404, which indicates Resource Not Found. https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/400
Yes sorry perhaps I was not clear. So there are few applications written in .net framework 2.0 and some in 3.5 (we also have classic ASP, ColdFusion and .net 1.0 apps but no one is touching that). So we have migrated some of those web applications to dotnet core platform. Also new applications are being written in dotnet core (or Java).
There are error codes to indicate all different kinds of failure. In your example, I would expect maybe a 503: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503
Congratulations. You found another person on the internet who is incorrect.
This is what makes sense to me.
If a senior dev at your org is insistent that you should return a 400, and you are not a senior dev, then you should return a 400, end of discussion. Few of the codes actually matter all that much (and almost never the 4xx ones) and having organizational consistency is far more important than the precise semantics of what each error code means. Having said that, I am a senior dev in my org, and my opinion for my projects is that this is absolutely, 100% without-a-doubt a place where 404 is the best choice.
You'll have to write a Web API using .Net Core that your Xamarin app can access. Which means, you might end up duplicating a lot of the functionality in your Web app with the Web API. &amp;#x200B; You can share the entities that are in your Web app if they're in a separate assembly (that can be referenced by both projects) and hydrate those from your Web API, but you can't just reference your Web app with Xamarin.
The other day a Java only co-worker (seperate team) was shocked when I was sharing my screen and I had a POCO class with auto properties. They don't have that. They need get and set methods for every property. Let's just say that they were super jelly. Lots of Java people haven't touched .NET because Microsoft terrible and Java is taught at most schools (open source). That should change in the near future. Hopefully
 Which I posted in response to a question asking me to explain my position. I quoted it to save me some typing, not because I do not understand confirmation bias.
IMO it's plainly obvious that 404 is the "most correct" answer here, but I also don't think this is worth arguing over. If the senior dev says to use 400, use 400. Presumably other does-not-exist resources in the app are also using 400. (If there are examples in the app of other missing resources returning 404, *then* it's worth bringing up the inconsistency.) The vast majority of clients are not going to have different choices of action when a resource returns a 400 vs. a 404. Both are simply fatal to the current request. I'd recommend saving your social capital for debating things that are more likely to matter, like 302/303/307, or 200/201/202.
My company is a big java spring shop, well we were, until .net core. Now most of our new business we go with .net core. I've been doing java for over 20 years now, but I prefer .net now.
Basically, it's pretty straight forward as BuriedStPatrick said, however, webforms is not supported and if you have a large code base still running that you are in for a ride. It's basically why episerver hasn't migrated yet and they will once they have rewritten it all in react.
Interesting! I was not considering malicious intent, since OP’s use case didn’t seem like that was a consideration. No doubt md5 is not strong cryptographically, so where security is concerned I would absolutely avoid it. But it is much faster than more modern algorithms on most machines so could still be a good fit in some cases. Thanks for sharing!
&gt; Larger hashes come at the cost of performance. You could try starting with a smaller hash. If you run into a collision, hash the two files again using a larger hash and compare again. Why not just perform a complete, byte-by-byte equality check? It's the same amount of disk reading as re-hashing, except that it's guaranteed to be 100% correct.
&gt; So there are few applications written in .net framework 2.0 and some in 3.5 Wouldn’t it be easier just to move them to DotNet 4.8 and let them sit for a few years while planning the jump to Core? 2.0 and 3.5 are pretty damn old, and you could probably see some decent improvements going to 4.8.
If you do a REST service, then you're dealing with **resources**, and the correct code would be **404**. But most people just do RPC via HTTP and call it rest. In that case: Doesn't matter much. Go with your own rules.
204 indicates that a resource with the id actually exists, but just provides no content. That is likely wrong in his context, as the id does not exist.
The more adamant someone is about something being objectively better than something else, the more likely they are to be full of crap. With experience you learn that everything that is popular at all is imperfect. Someone claims Java is better than C#? Bs Someone says Android is better than iPhone? Bs. Someone said pc is better than Mac? Bs The fact is that they all have a particular niche. I love c# but I wouldn't use it for everything. But people who claim spaces are better than tabs are barbarians.
.NET Core and #C are alive and well and tons of job postings. Lots of the .net jobs specifically want someone with core now. The way I understand it the first version was a bit iffy but now it's pretty solid.
[Vote fuzzing.](https://www.reddit.com/r/NoStupidQuestions/comments/2sj6y5/how_does_reddits_vote_fuzzing_work/) Basically the numbers you see are completely fake.
Using Java 8. I took it over from another dev, so I didn't really have any chance, to decide something :). Also I'm unfamiliar with Kotlin.
Life finds a way
Excellent answer :)
It would be interesting to know what share is because of Android rather than enterprise.
Good to hear people use similar technologies. And i agree, one of the biggest factor for me was using something that is well documented and tested as im not super experienced and want to easily find good resources. Using the latest greatest thing isnt a priority. I guess ill be switching over to Core in the future aswell.
So you can’t argue with “superiors”? That’s horrible. I agree that consistency is important. Being consistent can be better than being right. I’d leave a job real quick if something someone higher level than me said was never up for debate. I get that you can’t always argue/debate things with higher levels but still. /end of rant
It's how the grains identify each other. Grain A knows Grain B because A != B. GUIDS are commonly used because they're easy enough to generate with a very very small chance of two being the same. It doesn't have to be a GUID. &amp;#x200B; [Check the docs here](https://dotnet.github.io/orleans/1.5/Tutorials/Actor-Identity.html) as it covers your use case.
Titles mean exactly jack shit. He's wrong you're right, you should explain to him why you see it that way and how he's wrong if he still refuses, then he's a dumb jerk not worth your time, do what he says and move on (if things like this keep happening i suggest you either change teams or find a better job, teams with people like this are not healthy in the long run) `GET api/employees/123` in your example should return 404 **NOT FOUND,** reasoning for this is simple the request is correct with good valid inputs BUT the resource (employee `123`) was not found `GET api/employees/XYZ` this should return 400 **BAD REQUEST** and again why is pretty simple. `XYZ` is not a valid employee ID. send him links to HTTP codes i believe he's just misinterpreting "bad request"
Yeah perhaps but you know managers like to follow buzz words and developers want to work on latest tech. Add Linux into mix (which will save money over windows) and you have got the selling pitch. Dotnet core has gone a bit stable recently after 2.1. Still there are going to be some breaking changes in 3.0. So yeah perhaps you are right but perhaps managers pulled the trigger to show cost savings.
We are still planning/talk about migrating our VB6 project (our main product) to .NET and even that feels like a wild dream never comming to happen :)
No.
I wouldn't downvote you myself, any perceived offence is pretty benign. However, I just typed [JScript.NET](https://JScript.NET) into Google and the second hit is the Wikipedia page that explains everything. In fact this is the post's second line: &amp;#x200B; "The primary differences between [JScript](https://en.wikipedia.org/wiki/JScript) and JScript .NET can be summarized as follows:" &amp;#x200B; There is then a perfectly adequate explanation. Quite a few questions on Reddit are things which can easily be answered elsewhere.
**JScript** JScript is Microsoft's dialect of the ECMAScript standard that is used in Microsoft's Internet Explorer. JScript is implemented as an Active Scripting engine. This means that it can be "plugged in" to OLE Automation applications that support Active Scripting, such as Internet Explorer, Active Server Pages, and Windows Script Host. It also means such applications can use multiple Active Scripting languages, e.g., JScript, VBScript or PerlScript. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/dotnet/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
How to deal with big versions like 317811.121393.10946? Just rewrite your software, it is probably too old and legacy already. This is in fact one of the advantages of FibVer - pushing you to rewrite software. Man i love this new versioning already. Sign me up!
You could further muddy the waters and really let the cat out amongst the pigeons and tell them .net core and .net framework will all merge into one into the future!
Is this a troll? Can't tell
Yeah I fundamentally disagree with not being able to argue with someone senior to you. If anything I'd say the opposite. As a senior I want other members in my team to challenge me when they think I'm wrong.
thats because the "Any" should actually be a "Where"
Guys, it seems the impression coming from the article is that all tools mentioned are free. Which was not what we were intending to convey. What we were trying to say in the beginning of the article was that, though there are many free tools available, the selection should be on the outcome. So we said these are the essentials when it comes to development work. We are soon going to come up with another list of essentials++.
Yes. Knuth did this already with irrational numbers. Every version of TeX adds a number to the value of pi... his instruction is that the when the last bug is found use the last digit of Pi to finish the version.
Ok
That's what we have when the entity exists. It is the requests, such as an HTTP POST where the body of the request is an entity with a NULL or 0 ID that is sent to the persistence layer (by the grain) to inserted via SQL, where the ID will be generated. I'm thinking of using the user id of the authenticated user making the request. Thanks for the confirmation of the other cases, though.
I get it now, thanks. I may have cases where I want to re-activate the same grain.
Is this what \[StatelessWorker\] is intended for?
Yes
I would rather describe it as a programming joke, not a troll :)
\&gt;&gt; Just rewrite your software, it is probably too old and legacy already. This is in fact one of the advantages of FibVer - pushing you to rewrite software. &amp;#x200B; /r/technicallythetruth
Close... We don't know the last digit of Pi, so that's not possible (and would also make it too long to write). Also, how would we know when the last bug is found? Here's the actual quote: &gt; At the time of my death, it is my intention that the then-current versions of TEX and METAFONT be forever left unchanged, except that the final version numbers to be reported in the “banner” lines of the programs should become &gt; `TeX, Version $\pi$` &gt; and `METAFONT, Version $e$` &gt; respectively. From that moment on, all “bugs” will be permanent “features.”
I don't disagree that there are more better things to have a debate about :) and consistency rules over purity 9/10. However, if this is something that is just ramping up at your company or it's your first foray into this fight, then my opinion is document, discuss, decide and standardize now before it gets unruly.
Thank you. This is very helpful.
That is the joke.
They didn't say you can't argue but if the person is insistent then that's case closed, it's their final decision. Just because they don't convince you doesn't mean you get to refuse.
r/wooosh amiright??
I don't think that .Net or C# is immature. In fact in terms of features like async await and other tpl features it's years ahead of everyone else. but Java in the NYC area at least has so much dominance in the major companies that anytime I go on the job boards for any backend position Java is their primary tool for building scalable microservices or distributed systems. I'm scared to think that is the case everywhere else in the US that Microsoft missed the opportunity for large corps to adopt their tech because Java was a better option at the time and now it would cost too much to convert to .Net
Yeah its definetly no longer just an add on.
Nah. That's never true. There are still people making a living writing COBOL and working with mainframe database systems. Nothing ever goes away entirely.
In VS2017 if I create a new ASP.Net Core project it has Bootstrap 4.3.1 already with in and working perfectly with the default template. As mentioned previously, the ASP.Net (. Net framework) projects have Bootstrap 3.x and the process of updating is more than just updating the Bootstrap nuget package, fundamentally Bootstrap v3 and v4 HTML is different, hence the template breaking. Try starting with an ASP.net Core project if you can.
It does seem that not only is your colleague emotionally immature, he may not also have the database skills to realise his convictions. Like Totalmace said, you may be better off looking for another role, not only because this problem is off your lap, but because working with real senior developers could really accelerate your software development skills. Go work for a place with a more mature programming team and see how much you have yet to learn. This is the best time to have proper mentors, when you're still raring to go. Your lack of seniority is seriously hampering your ability to promote your preferred design choices. Going around him will make matters worse in the long term, making leaving still a better option, hence I advocate working better together if you wish to stay. If you want to continue working there, I think you should polish up on your SQL. If you can't beat him, join him. This is not a waste of time. Database skills are highly regarded and is a great complement to C# skills. Work more with your colleague, see if pair programming will work for both of you. Both your brains together may avoid him being stuck figuring out a stored procedure for several days. Maybe use the excuse of multi-skilling so that both of you are more proficient in each other's specialties. Take on as much database work that he is willing to part with and have him check your work if necessary. Use this closer relationship as an opportunity to quiz him about his design choices without triggering animosity and offer to make the changes yourself if he is agreeable to your opinions. Volunteer to clean up all the non-working stored procedures. Document how the system is working. Identify where you've both doubled-up on code, and fix other technical debt that has been accumulating. Set up Jira or some other project management software to keep track of both of your work. Set up source control for the database objects. Source control tends not to be seamless for database programming so expect resistance. Maybe you can automate the capture of changes to database code. Make sure your boss is with you with all this extra documentation being created because your colleague may not agree and will not want to participate. Let the documentation of your work compared to his make him lift his game or to bring your level of authority over projects higher than his. Setting all this up can be very hard. You may need to get your boss to send you both to classes, or have consultants come over to teach or advise. All this will really slow the progress down, but if you're waiting on him anyway, just think of this as an opportunity to not only hone your SQL skills, but also improve your skills in team work, project management, business analysis, etc., that are also very highly regarded if you end up leaving, or will encourage your boss to promote you to team leader and have the required authority to make your own design changes. Good luck!
So your example is creating a RESTful API, so why would one choose functions over an actual web API?
This is an interesting find. I can confirm I also see that it created a project using Bootstrap 4.3.1 installed. Two issues come to mind though: 1) I have no idea how I would migrate this project over for coding in VB, and 2) The templates it generates are not exactly the same as what is created under Web Application (for example, no top navigation, and so on.)
I used to work for Pivotal and thus had to work with a lot of Spring Boot. It was too much abstraction and black magic in my mind, I didn't like Spring Boot.
Not OP, but using Functions is mostly about costs, if you have a simple low traffic API, it’s cheaper to use functions as your not paying for time when the API is idle, just the actual transactions. Like, I wouldn’t deploy a whole Web API if it was just handling a simple contact form etc. on a site.
I'd say you should review your client side post code and make sure it matches postman. Crafting a proper image upload is very hard and it's easy to make mistakes - I ran into something similar once, iirc it was related to content lengths. But at the time the client platform didn't have good built-in library for multipart uploads, so we'd used some sketchy 0.2 lib and that was the problem.
The content-length is different from postman to my clientside call. Here is my client side POST. I commented out the headers/content-type:multipart/form-data because that was causing CORS issue too. Mind you, no other endpoints of my API have CORS issues. postImage (furnitureId) { (async () =&gt; { const response = await fetch('https://azurewebsites.net/api/furniture/image/'+ furnitureId, { method: 'POST', // headers: { // 'Content-Type': 'multipart/form-data' // }, body: this.imageFile }); const data = await response.json() console.log("posted a picture!", data) this.dialog = false // this.$router.push({name: ''}) })(); }
I tried to convert 1 project and a number of security features either don’t exist, were migrated, or they were crippled to make them less effective. I also don’t trust that MS is done making sweeping changes, so I don’t think it’s worth the effort until .NET 5
Do you also use 410 is the entity used to exist?
Ah, I see... so if you're writing an actual RESTful API you wouldn't bother with functions? It seemed an odd example for the author to use as a good use of functions.
&gt; A language with an async keyword that is synchronous. Wait, what?
Ha! I would never choose those 3 for new work. None of them have a fraction of the capabilities and ease of use of C# or even VB. In fact, Go looks like they saw VB 6, thought it was the pinnacle of language design, and changed a few keywords. TypeScript has replaced JavaScript in the browser, but on the server side a fully compiled, multi-threaded language makes far more sense.
Agree with this in general. There's a reason they're status codes, not error codes or directives. It should give you a clue what went wrong, and what you should do to fix it. As long as everyone understands the usage and how to handle the status, it shouldn't be a huge problem.
That's why there's a difference between 4xx codes and 5xx codes. 4xx says the problem is in what you sent (don't do that again), while 5xx says it's not you, it's me. If the server can tell that something bad has happened on its end, it should report it. If it genuinely checks its database and doesn't see anything, then perhaps a 404 in good faith is acceptable.
I found this opinion a bit surprising, and it made me wonder if this is a cultural difference from where I'm from. Maybe this is a bad thing to ask, but what country do you work?
"out of fashion" is demonstrably provably false.
To format properly on the good Reddit design: - Have an empty line between code and text. - Indent every line with a tab or 4 spaces. Otherwise it's unreadable.
Ah I’m not familIar with VB these days. If there’s no ASP.net Core in VB side of things, I’d suggest upgrading via a the nuget package and then fixing any broken bits (like nav bar implementation between v3 and v4) for your “view” side of the pages, if the application code is already written. When I used Bootswatch templates with my application I dropped the .css and .min.css files into my project after deleting the old ones and nothing appeared to happen, turned out I had to clear the cache as the browser was using cached versions of the old files rather than the new ones. So a Ctrl F5 sorted that for me.
Ah I’m not familIar with VB these days. If there’s no ASP.net Core in VB side of things, I’d suggest upgrading via a the nuget package and then fixing any broken bits (like nav bar implementation between v3 and v4) for your “view” side of the pages, if the application code is already written. When I used Bootswatch templates with my application I dropped the .css and .min.css files into my project after deleting the old ones and nothing appeared to happen, turned out I had to clear the cache as the browser was using cached versions of the old files rather than the new ones. So a Ctrl F5 sorted that for me.
Upgrading to Bootstrap 4 via Nuget and dropping in a Bootstrap 4 CSS theme does not make things work with the templates Visual Studio creates, unfortunately. I'm not experienced enough to fix what needs code fixing in the auto-generated template files. I'm just reasonably wanting to rely on using the "Create ASP.NET Web Form Application" feature of Visual Studio to create usable templates in Bootstrap 4 which has been the major release for a while now.
Depending on how your API is configured, you likely need to supply the multipart/form-data content type and add the file to the payload via FormData: https://developer.mozilla.org/en-US/docs/Web/API/FormData See here for an example: https://stackoverflow.com/questions/47630163/axios-post-request-to-send-form-data Otherwise, if your endpoint accepts a byte[] as the file, you could base64 encode the file and send it along.
What is the type of `this.imageFile`?
You can see my API above in the original POST. It accepts IFormFile. I do not want to send base64. The file is already a file, configuring through FormData gives me the exact same file out put as the original input
It is a file. I edited the original post with a screen shot of it logged to the console
I'm pretty sure you need a form to send your file with, don't you? https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData
I'd give it a look! Seamless interop with Java, and conversations work well.
If I create `new FormData()` then set my file to it and send I get the same error. I also get the same output in console when viewing the file injected in FormData()
Using `console.log` won't tell you at all how it is transferred. Check the network tab, or use a tool like Fiddler.
You've misunderstood my comment. You should argue with superiors when they do things that will cost the company time and money. Bikeshedding over 400 vs. 404 ain't one of those things.
US. I think, like the other responder here, you may be misunderstanding my comment if you are terribly surprised. The point is that this isn't a disagreement that's worth going to the mat over. By all means disagree with the superior if they're doing something detrimental to the company. Choosing a slightly less-precise and non-standard (but still arguably semantically correct) usage of HTTP error codes does not reach that level.
&gt; it’s cheaper to use functions as your not paying for time when the API is idle, just the actual transactions Sure, if you ignore the effect on user follow through from 10+ second cold start up times on serverless functions. And if you're running websites on Azure, there's a pretty good chance you have an app service plan or a vm with capacity to spare, which then is even cheaper (marginally free) than using a serverless function.
Logging it to the console is going to show me that it is a file. Any information that will be passed along via the network tab, will be present when the file is logged to the console. Having said that, I have compared both POSTs, with injecting in FormData() and without, and they are the EXACT SAME REQUESTS and they log the exact same errors/stack traces in azure insights. The Content-length is not being set. How do I know this? Because when I send via postman the content-length is being set, and the POST is successful. This is the only difference in headers and requests between the Client and POSTMAN.
Is the library a source-unavailable, native one/mixed assembly? If it is, you can try to run your application on a Linux server through [WINE](https://www.winehq.org/). If it’s all bytecode, you should be able to run it as normal on Linux, even if the library vendor doesn’t support it.
If nothing else, as a senior you should have the ability to explain _why_ you're method is correct.
I'm not seeing anyone migrate from .NET to Java. I'm seeing a lot more migration to Node. But companies are definitely going Framework -&gt; Core if they can. The one I'm working for now is replacing Web Forms with MVC + API in .NET Core.
is it just me or are these are getting a little stale...? everyone has some zany markdown, language, versioning or build tool now that's just like "haha so random and unpractical"
We do not. We keep it pretty simple and light right now. If our company can get on par with the simple ones then we might start to expand to more detailed codes
That's a shortsighted view. If at any point in the future, any user of that API wastes any amount of time trying to figure out what was wrong with their request that would have caused the server to reject it as malformed, time and money have been wasted. Maybe it's just a few minutes of a dev's time ... or maybe it's a potential customer who sees such details as a red flag indicating the software may not have been designed/built by technically competent devs, thereby costing a sale. It's very difficult to predict the future cost of doing something wrong. It's very easy to predict the cost of fixing it to make it right.
You are always calling "AddNewFurnitureImage" even if model state is invalid. Move this function call inside the inner if block.
Good call. So i'm clearly not handling my error correctly cause I have no idea what's going on and looking at this blindly. The browser is returning back a 500. Any suggestions on what I can do to improve my controller to better capture what is going on??
Learn how to use the debugger. Also, keep in mind that browsers behave differently than postman. For example, a browser will block a CORS request if needed, but postman will not.
What do you mean “actual”? It’s just cost and scalability, it’s not limited in function?
My understanding is you can use the one with less files version if the .net core runtime (or sdk) is installed on the server. Publish folder is when not installed. Extra files are for libraries you used in your application
Use the files from the publish directory. That's the complete publish output. As far as I know, the parent folder of the publish is just the build directory, and may be missing libs.
Yes, use the publish folder. The bin folder is your build folder and by default your publish is set to output into the bin. If you don’t need an executable (publishing to a server with the runtime already on it) consider adding —no-runtime ( if you didn’t already).
There is many things CLR/C# can do that TypeScript cannot.
[https://gitter.im/dotnet/orleans](https://gitter.im/dotnet/orleans)
&gt;Is it true most of the enterprises are migrating from .NET to Spring, not to .NET Core? I would argue that most enterprises are not migrating at all. It makes very little sense to move from .NET Framework to Spring rather than Core. With .NET Standard you can start writing new features of existing applications targeting Standard and that would allow you to switch to .NET Core easier. It would be a full re-write to move to Spring. &gt; He suggested me to move to Java for better employability and career growth. That is entirely location dependent. There are a bunch of .NET jobs in Chicago but there are also a ton of Java jobs. One final note is Oracle's icensing change for the JDK. Staying complaint is typically a big issue in large enterprises. I have been using C# professionally for 8 years now and just took a job that uses a language that targets the JVM: Clojure. The company was a .NET shop but ended up wanting to use only functional languages.
Thanks!
Remove the ConfigureAwait
Who've told you enterprises are heading towards Node? Isn't C#.NET or Spring (Java) enough for them? I know in special cases, like real-time data processing, fits Node much better. So a smaller portion of a very large back-end can be built using Node. But writing the full back-end or complex enterprise apps in Node can turn out to be a nightmare, have heard many stories already. Node is good for simple to mid-level projects, faster development, even PHP is a good fit for that. But for complex enterprise solutions, we need rock-solid tools like .NET or even Java. I know TypeScript is good option, but it's still Node. Developing a very serious system, something like the Banking System, entirely in Node is not a sound decision. I know there's a lot of hype out there about Node, but things are settling down, and people have started to realize that Node can't be good for **everything**. It's true for all other tools. Every tool has its use-case; using a single tool to do all the work isn't useful. We overuse a new tool, build exciting solutions in it because it's cool, and after several years when that solution gets popular and becomes too complex to maintain and scale, we regret and rewrite the whole thing. So most managers tend to choose the boring yet most effective tools i.e. C#, Java to get the work done.
Thank you for the link! I will look into a self-contained service. I have not looked into electron much but if that is the case I will likely just have the app open a browser window. Thanks for the help.
Thank you. I looked more into SQLite's appropriate uses page and have since switched my application over to sqlite.
Good idea, I will look more into electron or simply just having the app open a browser tab for use (just as plex media server does).
Have you checked out Blazor yet?
Great point! This thread raises an interesting challenge since OP wants to save the result of files previously hashed. If even one collision occurs, storing just the hash might not be enough. OP may need to also track collisions and also store some result indicating how that collision was resolved. Probably that extra table (or w/e) would be forever empty, but maybe not! I both love and hate hashing for that 1 in a trillionth possibility. Risk it or not? :D
Couple things. First, have you tried Vue? It's a comfortable, fast JavaScript framework, and you can implement it on a regular page (like jQuery) or as a full SPA. Second, and sorry to say, but speed takes practice and time. You're clearly on a great path toward winning at life, being a great software developer, moving quicker and making better software. Keep pushing on, practice at home, read a few books about the technologies you're working with, and that will all help you to get where you want to be. Oh and third, if you get a different job, you'll get new experiences, pick up new practices, and be forced to learn a ton. The best learning always happens in a place of discomfort.
It’s a bit too new at this point. But it has great potential.
I'm a pretty big fan of LINQPad for my day to day work. I do a lot of conversion work in .NET, so one tool that allows me to handle multiple levels of query building and testing is super useful. Plus, it shows what your queries are generating as SQL, so it's very useful for speed and efficiency tuning. Another thing I really like are some of the free online Bootstrap builders. I admit, UI/UX is my severe weakness (I like functional and flexible, not pretty and simple) so being able to use a drag &amp; drop designer for basic components lets me eyeball a basic layout, then apply the generated HTML/CSS straight to my page and go from there. Saves me a tremendous amount of time creating elements and testing them a d changing them.
Why? What is ConfigureAwait doing to cause this to break?
`.val()` returns the blue, but your label does not have a value. It does have text though, so try `.text()` instead. Or use a hidden input instead. `&lt;input type="hidden" id="user_id" value="@Model.UserID"&gt;`
Does @Model typically just return a text type for any attribute trying to be displayed even though UserID in my model.edmx is a int type? I’m asking because that’s what my initial understanding was.
I believe there is and implicit call to `.ToString()` in Razor
Make. It is not only the word missing in your title but a great build tool, if old, and is valuable to learn.
Your post has been removed. Self promotion posts are not allowed.
Think of it this way... @model isn't valid HTML so at some point, razor is rendering that out to valid HTML. jquery is going to have access to whatever is rendered by razor so you can pretty much ignore @model for this ajax call. Something I'd recommend doing is loading that in chrome, right clicking that label and doing an inspect do see what you're looking at... Even use Chrome's console to test some starter jquery statements like $('#user').text(); to see what it returns. This will help a lot with troubleshooting.
It's actually a call to html encode the string so this will fail if a user id has a special character
I have not heard that it's a security problem. I'm skeptical though. This might not be helpful, but I just don't see what the risk could be. It's not unintentionally exposing sensitive data, which is probably in known file types. Web server responses are all just streams of bytes. How could it matter what the file extension is that they are served from? I'd go with #3.
Have you heard of AutoMapper? It makes mapping properties between objects a breeze.
My experience is that it's not frameworks or tools that make you go fast. It's clean and well structured code that doesn't lock you into a particular framework, tool or pattern. If there were such a framework/tool that would make coding easy for all applications I'm sure we all would be using it by now. The boring reality is that new shiny frame won't make you go faster. Mastering new frameworks takes a lot of time and there you have to take into account all of the ecosystem sorounding that framework too. I'm in no way saying you shouldn't consider new frameworks for current or new projects, or to learn them. I'm just saying if you do a root cause analysis of why things are slow it might not be because you're not using the "best" framework.
Consider a subscription to one of the big UI frameworks. (DevExpress, Telerik, SyncFusion). While they might not seem to be cheap, with my former employer I have spent hundreds to thousands of hours developing controls which they provide and which they debug for customers worldwide. We would have saved a lot of money and stress
Do you have Resharper? For a long time I didn't see the point in it but then I started at a company that installed it as standard and now I couldn't live without it - especially once you get the hang of the keyboard shortcuts. Later versions of Visual Studio have closed some of the gaps in functionality but I still find it invaluable for things like quickly extracting interfaces or refactoring namespaces.
Not much love for blazor here :)
Look into Emmet bro... You can thank me later https://docs.emmet.io/
I get so frustrated with AutoMapper - I much prefer generated code [https://github.com/cezarypiatek/MappingGenerator](https://github.com/cezarypiatek/MappingGenerator)
Typewriter https://marketplace.visualstudio.com/items?itemName=frhagn.Typewriter I found this to be a game changer, it basically creates a strongly typed link between your back end and your front end via typescript.
I use the Telerik, and while the Asp.Net Core components aren’t documented as well as he jQuery ones, they do save a lot of time. The support is pretty slow on the forums and they offer bare minimum responses but it’s still worth it.
What are your general frustrations with it? Genuinely curious. I've only ever used it for fairly simple mapping.
Similar situation, I find code reuse is my biggest time saver, we share azure dev ops for source control and I’m always diving into the last project I did x/y/z to get the code, as it’s always easier to adapt your code rather than someone else’s. I’d recommend refreshing on CSS /Bootstrap and make your own admin template, or folder of all the bits you usually need, like collapsible sidebars/menus etc. A little upfront work saves tons of time unpicking templates done slightly differently each time.
When have you found it applicable in relation to .NET development specifically? I find that .NET Core's CLI does everything I'd typically need. Could you share an example?
Support by DevExpress is rather good, documentation is a bit lacking as well
In our case, when using it in a business environment, we observed the following downsides: 1) Every time you rename a property, you have to either rename the counterpart, or add a manual property mapping. 2) It is not helpful when debugging as you can’t see all the places where a certain property is used (via find all references, for example). We also use the mapping generator extension, which replaced our need for Automapper, even on small projects. The only reason to use Automapper is if you don’t have VS2017, as the mapping generator extension isn’t compatible with previous versions of VS
Any recommendations for these builders you speak of? Doesn't have to be bootstrap any framework really. The last time I dealt with front end visual tools for css frameworks was not really a thing haha
Anyone having problems with Automapper is probably using it wrong. Of course it doesn't automate property renames? That's like expecting a hammer to be a drill. It maps, not reactors. As Bogart has routinely said, if you aren't doing simple mapping 99% of the time you're not doing it right. It's supposed to reduce complexity, not add it. Custom mappings are supposed to be exceptional and generally avoided. I feel like people mix up being able to map with having good reasons to map.
I prefer the simplicity and performance of [Mapster](https://github.com/MapsterMapper/Mapster) over AutoMapper.
so based on the logs the error is "just" the "connectionString" being null. the tutorial is about EF Core so it seems logic to only throw from routes that tries to resolves the DbContext it means that it's trying to connect to the DB so it needs a connectionString to be not null (i did not read a single line from the tutorial link) now questions, are you already familiar with Aspnetcore concepts : * Configuration / Options * IHostingEvnvironment (default one being Production) * what file is read to feed the config related to the "IHostingEnvironment.Name" * dotnet build vs publish * which json file(s) is actually copied to the publish folder * where did you declare the connection string in debug ? my guess is that you either : * used the UserSecrets/appsettings.dev....json in debug mode * dotnet run will default the env.Name to development because "launchSettings.json" adds up an envis variable to tweak it and run is also here for development only * config then ALSO merge the appsettings.dev...json * it "works" when you publish no more "run" or "launchsettings" meaning the env name is now "Production" meaning : * no more appsettings.dev...json merged in config (even if the file is present) because ... well that's the purpose of IHostingEnvironment + config to segregate per env * usersecrets are not for prod either so it's not read either (in case you used it) =&gt; the result is you config only loads from appsettings.json and appsettings.production.json (which probably does not exist by default) since your connection string is not in that "appsettings.json" (99% of chance) then you got a null reference exceptions PS: you were talking about "ContentRoot", unless you are running in a windows service or tried some hackery let the bootstrap alone it should work if you are not familiar with the default bootstrap : * what's really does "createdefaultbuilder" * what is IHostingEnv... * what's is the default value on debug / dotnet run * what is launchsettings.json * how json files are added magically (MERGED) * there are multiple appsettings file and they are only merge under certain condition (see the env part) i good place to start is probably this : https://docs.microsoft.com/en-us/aspnet/core/fundamentals/host/web-host?view=aspnetcore-2.2 https://docs.microsoft.com/en-us/aspnet/core/fundamentals/?view=aspnetcore-2.2
Have you heard about our Lord and savior Emacs?
Practice makes you faster.
The mime-type is just a header .. as long as u set it before information starts being sent to the client there is no security risk... hook the right part of the iis or asp.net pipeline it's just a simple lookup to find mime-type based on the file you're serving.
Ditto clipboard - simple and powerfull clipboard history.
.Net core won't also build your front end and execute other arbitrary scripts. Make is just a further abstraction for interacting with projects. Also useful if you aren't on core yet.
Any reasons as to why? I haven't used it yet, but thought about giving it a go.
!RemindMe in 1 day
I have honestly no idea
Thanks for the rundown. Yeah, I'm coming in as a nearly blank slate with this stuff, and I don't have a grip on how all the files in a project work together and where to find stuff. I think you've addressed how I should proceed (basically learn more and follow the standard path). Microsoft documentation can be exhausting. Have you ever used something that's written like a linear guide? I have a hard time getting lost down rabbit trails when the docs are littered with links to topics I don't know if I have to know everything about, and I end up with too much in my head all at once.
And that is exactly why you should replace it with a more compile-time safe solution, like a mapping code genrator or manual mapping where applicable. Again, this is something to consider in a business solution, where changes in code should be robust. In a 1-man project / small startup, you can use whatever you want.
no do not have that. i understand that the docs are full of link. What i can suggest is the read both article without clicking on links Note things you are in doubt then do a second pass and may open sub link What i did to understand stuff is : * first thing i did was to open the source code behind "CreateDefaultLogger" https://github.com/aspnet/AspNetCore/blob/master/src/DefaultBuilder/src/WebHost.cs#L155 and i tried to decompose it : Configuration : https://github.com/aspnet/AspNetCore/blob/master/src/DefaultBuilder/src/WebHost.cs#L168-L190 this block alone has sub part lines 170/172/173/175+180/184/188 Logging: https://github.com/aspnet/AspNetCore/blob/master/src/DefaultBuilder/src/WebHost.cs#L191-L197 then i check the ode behind ".IsDeveloment()" since it seems to have a effect (spoiler it's just "return Name=="Developement") * Trying to change the EnvName by myself and see the impact on configuration (i never had to do that in corporate project so far, it can make sense in some scenario) * i wrote a custom dumb Consul KV configuration provider to see how configuration is read at bootstrap https://github.com/tebeco/Configuration/tree/SimpleConsul/src/Config.ConsulKeyValue * then since IOptions can be based on configuration. i tried to run through it to see the precedence between every possible config source / overrides https://github.com/tebeco/IOptionsFromLibs * then i tried to create a custom logger (a stupid console logger that just set a specific color set / format), it totally destroy the purpose of aspnetcore logging but this is just to get a grip on it. basically i tried to change and sometimes break the setup to see the impact / role of each part
Great stuff, thanks for sharing. I'd like to take a similar approach.
Yeah, OP here, I am looking into it, but not ready for prime time.
LayoutIt! And Bootstrap.build are my favorites for quick, basic Bootstrap scaffolding straight out of the box. Easy to use and get your basic grid layouts set before you start adding actual components. I copy that code over to something like a fiddler page and put placeholder elements while I style, then go back and put the proper Razor syntax in for actual controls. The other one I like, which is paid, is Bootstrap Studio ($60 lifetime license) which is very useful for the same features but more flexible with SASS support. All of what these offer can be done at a markup level in any editor and shown in a browser, but I prefer visualizing (need ot actually) what I'm creating, and these speed up my process immensely.
Thanks for the reply! *Post-writing*: I write too damn much, lol. Sorry. So first: &gt; It does seem that not only is your colleague emotionally immature, he may not also have the database skills to realise his convictions. Agreed here for sure, he gets frustrated easily, then gets defensive. Frankly I know my boss is getting pretty tired of it in a lot of ways, he does it to him too lol. I mean as for his database and senior developer skills... I find him lacking for sure. More on that further down, though. &gt; Like Totalmace said, you may be better off looking for another role, not only because this problem is off your lap, but because working with real senior developers could really accelerate your software development skills. Go work for a place with a more mature programming team and see how much you have yet to learn. This is the best time to have proper mentors, when you're still raring to go. This has crossed my mind for sure, and it's something I'm definitely considering soon. Really, I've been considering it for a while. There is some promise of forming a development team, but it depends on certain things happening. I kind of want to give myself about another year or so (which is when I become vested and retain contributions from the company on the 401k.) Which is ok, that gives me some time to sort stuff out and prepare. To the rest: I doubt his skills as both a database developer, and a senior developer. To be frank, he strikes me as having shit management potential. His attitude sucks, his pride sucks. He is not stupid, but his pride and attitude keep him stuck in his ways. Possibly even fear of being found out that he's not that good, so he sticks to what he knows. He comes from various big companies, and is happy to tout the fact that he's worked as a senior developer for a fortune 300 company. I would expect more of someone who has a Senior Developer title and 20 years of "experience". He's the kind of guy who puts "Git" on his linked in and has endorsements in it, but has no idea how to use it (I know, we use git because of me, and he's always asking me how to do basic stuff like committing and pushing changes when he has to use it.) I would have expected someone with his credentials to step up and say something about these issues cropping up, and say we need to fix them. For instance, he agrees we need to fix the imports, and he will mention it to me in passing. But, if I press the issue and say we need to ask for time to do it suddenly "People in the company don't agree" - who? I can't figure it out. That's not something the owner or COO would have said to him and not my boss, and my boss agrees with me that we need to fix it even if it takes time. I know, I've asked him. Over the last 3 years I've been learning more and more about SQL Server, so I actually know a decent amount now. By far, I'm not a DBA, but I'm getting a pretty good grasp on it and diving into deeper topics. So, over the last two weeks or so I've been planning, researching, and planning more. While it's not my intent to go over his head, I'm simply not going to allow him to cost us even more time in the future, and more technical debt fixing and adding to this mess. So the other day I stayed after work and spent about 4 and a half hours talking to my boss about all of this. I flat out told him, it's not my intent to go over his head, but he creates an environment where these discussions are basically just running into a wall and people getting pissed. And I'm done running into the wall. I told him we need to fix this, we've got orphaned data sitting in tables, drivers not getting attributed miles for their bonus because of it, and a bunch of other issues. I showed him where these issues were, and I have a plan to try and fix them. I showed him my diagram of around 3/4 of our main tables, and what I wanted to do to the structure to fix it. Making new tables to reduce duplicate data, and make joins easier and more sane, add a bunch of FKs to maintain referential integrity, etc. I told him I wanted to do away with the stored procedures going forward, and over time switch the old stuff to not using them. Yes, sprocs have their place, but that's few and far between and for the most part not applicable to us. Furthermore, anything I need to optimize in SQL I could make in Dapper at the point of interest, or in the data access layer (in case we need to re-use it.) Then they're versioned controlled in the code, their implementation is relatively close to their use, it's just easier in the long run. What it boils down to is the majority of our sproc usage can be replicated easily in an ORM or Dapper. The stuff that maybe can't is due to complexity added from poor design and can be fixed making it easy to use an ORM on (and more performant.) Long story short, he agrees with me, and he's been pretty frustrated with the other guy. He also wants the other guy to be less of a development role in general, and he wants him to free up most of his time to help deal with the day to day stuff so my boss can spend his time doing more important stuff (like dealing with vendors, ongoing projects, and preparing for new large projects like switching to on-prem AD.) Apparently this is something my boss and the owner told him before they hired him. Probably within the next week we are all going to sit down and talk about it, but most likely we'll be going with my ideas. We're waiting until an active project is off our plate, since we need to finish it and we don't want him getting pissy for the rest of it. He's also going to play it out like he asked me to do this research, so the other guy didn't think I was going behind his back. While I agree with you, it's going to cause some problems initially, and I should find a new job more suited to what I want to do, I feel like I need to at least stay for this. Both to fix this situation, but mostly for my own self-esteem to stand up to people like him where I can. I have far more sway around here than he does, and am probably regarded as the brains behind most of the work we do. It's time I start swinging it and stop letting him run this department and these projects over with his bullshit pride. Of course if he has valid reasons, I'm happy to listen. But I bet he'll just give us the sales pitch and not be able to go much deeper than that. Fixing this will give me more confidence and overall put me in a better place, mentally, in the long run. As well as give me some time to sort things out and prepare to find another job, should that still be the route I take when this is done. Thanks again for the response!
Thank you for the response. I am primarily basing the security concerns on [Microsoft's Official Static Files Fundamentals](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-2.2#non-standard-content-types) which states: &gt;Enabling [**ServeUnknownFileTypes**](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.builder.staticfileoptions.serveunknownfiletypes#Microsoft_AspNetCore_Builder_StaticFileOptions_ServeUnknownFileTypes) is a security risk. It's disabled by default, and its use is discouraged. [**FileExtensionContentTypeProvider**](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/static-files?view=aspnetcore-2.2#fileextensioncontenttypeprovider) provides a safer alternative to serving files with non-standard extensions. Unfortunately it does not go into much detail other than that statement.
Because much of the old .NET Framework requires Windows components
Your app is probably searching for files relative to the working directory, which when using command prompt or PowerShell is the current directory. Running from a different working directory is a good way to find unintentional reliances on it. Any filename or path that does not include the full path is going to base itself off of the working directory.
If you’re on Windows this is built in now. Just press Win + V.
You only need to add CORS to A's response. I did this exact thing. Be careful since adding a * whitelist means ANY site can have your browser connect and interact with A. So you should make the whitelist as restrictive as possible.
Because rewriting is expensive and usually a bad idea. Bedrock edition is C++ but is shared code with mobile devices.
No. Not all of them are free ... We did not intend to give a list of free tools in the article. It is more about the usefulness of the tools.
Huh????
Yeah, it definitely seems to be an issue of a relative path. But the database file doesn't exist in the path where the app dll is, so it doesn't make sense to me how it finds the db when executing dotnet.exe from the dll location regardless of where I move its folder. I have more reading to do to understand not just how things are set up, but why.
https://www.hanselman.com/blog/MakingATinyNETCore30EntirelySelfcontainedSingleExecutable.aspx V https://www.talkingdotnet.com/create-trimmed-self-contained-executable-in-net-core-3-0 V http://dotnetdetail.net/how-to-create-net-core-3-trimmed-self-contained-single-executable-app/ Interesting blog post life cycle where with each reblog post loses merit while doubling on ad/tracker count. It's okay to enrich your blog with content created by others but it's a good etiquette to provide links to source material.
What are you talking about, things like WPF? It's optional to include support for those. .NET Core is still as fast and light as ever (actually it's faster).
The reason is that those old features are used by lots of people and Microsoft doesn't want to abandon them. At the same time, Microsoft wants to create a single .NET going forward rather than maintaining two slightly different .NET ecosystems. By bringing those old features along, it means they can put all of their effort, optimizations, etc. into a single code base. I think it's also important to note that I don't think this threatens .NET Core's "skinny fast and light". It's easy to just not include a library in your project. Porting libraries shouldn't impact you if you're not using them. You just wouldn't have them in your project. However, having Microsoft focused on a single .NET going forward means that they'll be able to improve it faster.
What are the errors? What type is the model? A lot more information is needed since we can’t get inside your head. Also please format code properly so it’s easier to read.
Mostly I was just joking about his missing word. But in reality make can serve as a generic "runner" for arbitrary commands. Say you want to clean-up your obj files and build artifacts... instead of using cmd or powershell you could use Make and build a "clean" command. You may ask, why use make instead of cmd or powershell? Because Make is universal and cross-platform. (Yes, I know that powershell is cross-platform as well now... but literally no one uses it outside of the Windows community.)
The error I get is: Only one 'model' statement is allowed in a file. for these two statements below: @model IEnumerable&lt;final\_budget\_expense.Models.BudgetRecord&gt; @model final\_budget\_expense.Models.BudgetRecord &amp;#x200B; Is there a way to have a @model statement that combines what both of them are trying to do? One is for list view I believe and the other one is to access the model right? Sorry for formatting, I tried fixing it.
And so it begins, instead of fixing their mess, they'll hide it on user side pack, then extract bloated runtime, .net core such a failure
Can you create an EditorAttribute in the correct namespace for core i.e. polyfill it
What are you even talking about? Fix what mess? .Net being portable?? Compression and extracting it seems perfectly fine. What is the problem or concern here? Sure isn't HDD space, which is negligible.
Thank you for the source. I'm getting sick and tired of these reblogs. To make it worse, Google seems to love recommending these ad filled, incomplete, often wrong regurgitated technical posts over the source material when I'm doing research.... Makes life difficult.
You can only have one. If you give the view a list then it’s a list. If a single item then it’s a single item. It can’t be both. And inside the foreach you probably want to access the `item` and check its properties.
Filenames in connection strings will be relative to the working directory, so either use a specific working directory or specify the full path in the connection string.
The fact that you doesn't get why it's bad is scary, explains the crappy state of C# today
can you please explain why you think .net core is a failure?
Instead of being condescending you can actually try to form an answer to the question.
Well I need the list model bc I want to display a list of information. I was thinking of writing a loop that displays the total amount money wise of the list. I’m thinking about it, would it be possible to do it with @model as a list? If not, what alternative methods should I look into? And yes, you are correct I should use item since that would represent each model.
they learnt nothing from .net framework, failed to rework the project/build system, reverted their shy json change because .net enterprise people were mad, failed to provide AOT compiler, GO came, ate their cake
https://github.com/dotnet/corefx/issues/13329 https://github.com/dotnet/coreclr/issues/20287 lot of energy already wasted, and they are going in the wrong direction with this already..
Yes, it is possible. That looks like something you’re already doing there. So if you just set up one model and loop through the items you can have a sum.
&gt;My experience is that it's not frameworks or tools that make you go fast. It's clean and well structured code that doesn't lock you into a particular framework, tool or pattern. This isn't incorrect, but it's also missing the entire premise of a tool or framework. Which you should probably note. Go rewrite your cleanest C# application in notepad with a CLI. You now know how tools make you more efficient, and accurate. Similarly, stop using .Net, it's a framework that makes life easy, Rewrite your C# application without .Net (This is possible). &gt;If there were such a framework/tool that would make coding easy for all applications I'm sure we all would be using it by now. Like Visual Studio, VsCode, and Ryder? Which dominate C# development. ________________________ **Okay, being more serious now**: I'm with you 100% on clean code and well architected codebases. If I was to pick my most developed skill, it would be that. I spend my weekends trying new patterns to see what works and what doesn't, and to see what makes me more effective. HOWEVER, big pitfalls with something as abstract and hand wavey as "clean code". Mainly analysis paralysis, min-maxing, premature optimization (for operational efficiency, not performance), over-fitting, improper application, and just an overall lack of pragmatism. Especially when someone tries to apply something like DDD to a tiny project hat just doesn't need it, you end up with as much boilerplate as you do real code... It's easy to spend 300h trying to nail down a perfect design, and to recognize and solve all the intricacies that you recognize as being problematic 2 years down the line.... But this isn't ideal, and often you'll find out your design is flawed the moment you start adding features. Yet at the same time, if you push too many business features on a flawed architecture it's very difficult to change. The goal, in my experience, is constant refactoring. You add a feature that highlights a problem in your architecture. It requires breaking codebase guidelines or patterns to add. Do you add it and move on, or stop and refactor the architecture? The answer for most is that they add it and move on, which means that in a few years later someone else has to deal with the technical debt (Be that your future self, or another person). But it you perform constant refactoring, you can catch and correct architectural problems early. Sure, a feature/Sprint/work order might take longer here and there. But in the end, it saves money and time... ________________ There are some basics to clean code, yes. Things that can be applied as a small scale, that isn't architectural. These help, a lot, but they really only get you up to "What is expected, in general, of a convention-following codebase". But the things that really start making a difference in large project are the ones that require architectural considerations. You always hear about SOLID, but how often is it REALLY applied as a whole? Rarely, the low hanging fruit like SOC, marginal DI and MAYBE a dash of interface segregation is seen. But the rest is seemingly forgotten about. Even new frameworks like EF Core can't even get even dependency inversion right, while it's sibling ASP.Net Core could be used as example material... A good, full, implementation of even DI makes for a beautifully smooth codebase. The problem here is that DI is like async, it either covers your entire codebase and callstack from top to bottom, or you have problems. The moment you need an external library to fit into a strong DI model, and that library doesn't follow DI principles you have to create workarounds and hacks. Such as copy/pasting all the method definitions from EF Core's DbContext into an interface so you can actually inject and use the contract... **I stepped away from my phone for a minute and completely forgot where I was going with this.... Whoops. It's a waste to just delete it, so here ya go.**
Going on various subreddits and bashing on every other language won't fix Go shortcomings, though. C# and Go both have different use cases. Both can shine if their feature sets fits project requirements better. It's not a race to provide a better one-size-fits-all language.
not sure at all ContentRoot is supposed to be affected by Working Directory ;) see previous answer ^^
Previous answers are right Anyway, it might be enlightening to use the -o (—output) switch. You pass a directory and you have the publish output at the specified directory So it looks like the weird path you were pointing at is only a weird default to generate the publish output
&gt;Because Make is universal and cross-platform. I have very little experience with Make, but isn't it meant to run system commands, which would then in turn be platform dependant?
I'm not saying it's the best but we're using jsreport at my job to this. It's actually using JS/handlebars for this.
You can try out my service since it's a rest api, it'll work on any machine: https://github.com/api2pdf/api2pdf.dotnet
While it can be used to compile some code, which would indeed potentially be a platform dependent result. Make itself is just a generic build script\command runner utility.
Obviously not saying you should ditch your IDE 😀 I think you captured the difficulties with development in your comment. There are loads of trade offs to be made all the time. They all depend on your environment, domain, priorities and deadlines. Finding the right balance is hard and take a lot of skill and experience. What I'm trying to say is that frameworks/tools will get you that far. Sometimes they will help you and sometimes they'll get in the way. One thing that made my work easier the last couple of months doing lots of frontend stuff was to create a design system. A shared library of common reusable components. Building pages now is mostly composing these parts in to a bigger whole. It didn't require a framework to build but will help us ship stuff faster in the future I hope (well to be honest I did use Adobe XD to make mockups and extract parts into graphic components).
Yeah looks lime VS 20
I’m not affiliated with them, and it isn’t cheap, but I’ve found IronPDF to be by far the most reliable and flexible in the widest range of circumstances. Every other solution I’ve tried works in some scenarios but not others, and I found myself constantly wrestling with permissions issues
Using Chrome + puppeteer is an interesting option for this. Basically prints what it renders as a pdf.
wkhtmltopdf
Probably. And then use #if to differentiate target platform builds?
I've had nothing but positive experiences with it.
OutSystems! I've been doing C# development for 10 years and recently discovered OutSystems because my new employer is a consulting firm and required me to go through their 20 hour training (at 1.5x speed) to support some of our customers. I'm not affiliated with them, but since using the product have become a believer that for *most* use cases it is a phenomenal fit and let's you move much faster while remaining exceptionally clean and extensible. The primary use case I am unsure of would be a web game or other animation heavy site, but for something form oriented like TurboTax, or your banks site, or a restaurant, or car insurance, ERP, etc, it would be perfect. It is a low code platform so you build with a WYSIWYG and they have a ton of templates and widgets, and its all on top of C# and HTML / CSS / JavaScript so you can still write raw code with ease when you need to. They have a free tier which looks like it would fit the needs of most MVPs or simple sites, which I'm currently using to build a prototype for a startup idea I've got. I would highly recommend checking out. I know it may sound strange because it's low-code with a WYSIWYG, buy honestly if you give it a shot you'll see that by doing it this way they make it really hard to shoot yourself in the foot with spaghetti code, generally they have documentation on how to do exactly what you're trying and you can't really screw it up, and you can still get down into raw code if you need to. I hope this helps.
Someone below suggests wkhtmltopdf which isn't .net core but it is very good. You're often better looking for the best library and then using its api rather than searching for something .net specific which you may not find. I've been using [pandoc.org](https://pandoc.org/) a lot lately and it's excellent.
I'd just ignore /u/Scellow. They've done nothing but spew angry and hateful nonsense on reddit for the past 6 years. I kinda feel bad for them. Must be miserable.
KendoUI's export should work wonders for you
Adding onto the wkhtmltopdf thing, I can second that this library works well but you're going to have to write a wrapper in .net core around it since it's a C program. There's a few .Net 4 options but as far as I know they're not maintained. Pdfium has been dead for 5 years and NReco isnt free and I don't know if he has released a .Net Core version of his library. I used NReco at my last job since it had support and the license was cheap for a business and it worked pretty well. Good luck!
https://github.com/kblok/puppeteer-sharp
Thanks for the tip!
A few people are recommending puppeteer to render PDF via Chrome- I'd recommend [browserless](https://github.com/browserless/chrome) which already has this functionality written and exposes it as an API endpoint. It can also scale really well using the in-built 'swarm' feature.
Just for clarity of what exactly publishing does- it'll publish all of the build output. C# is a runtime using the "CLR" (Common Language Runtime) and so when you make an executable, it needs DLLs from the CLR to run correctly. As a result, when you make a C# program, you can't simply just take an executable and throw it at people, because it'll complain it's missing libraries (e.g. the System library, or System.LINQ) otherwise. If you have anything else which you copy to output directory (maybe you use some kind of storage, like a .CSV or something) then those will also end up in your output.
You can certainly pass the stream to what ever class/method you want to handle it...
Hiqpdf or nreco
I have also had good luck with IronPDF until I didn't. Some performance monitoring tools interfere with it and it trips over memory sometimes. Their support is pretty much useless, it's just a generic reply most of the time and they have to talk to the developer in Korea so it's a 2-3 day turnaround most of the time. Ended up disabling the performance monitoring in production... It's a solution I guess. The actual rendering of PDFs is super straightforward and the documentation is great, though.
Fuck PDF? Its a terrible proprietary format which doesn't interop well with just about anything.
I'm using rotativa in .net core and it's working really well.
[DinkToPdf](https://github.com/rdvojmoc/DinkToPdf) It's a wrapper around wkhtmltopdf. But you also should read this if you use DinkToPdf [The danger of DinkToPdf library](https://medium.com/@jodsonleandro/the-danger-of-dinktopdf-library-f0e221d2bcad)
That company is really lucky to have such a dedicated guy like you. I’m sure you all can make this work out. Keep at it and keep improving yourself.
I've tried a lot of HTML to pdf generators, and [Prince XML](https://www.princexml.com/) is the best by far. Unfortunately, there isn't a .net core wrapper for it at the moment, however, you could setup a service in node to interact with a .net core application.
[Unable to download Visual Studio 2019 Community edition](https://redd.it/cflpr4)
Ditto is still better &amp; more powerfull.
I recently had to do a production project doing just this. I went with iron pdf. Its great but not free. If you use it ensure you read up on the viewport rendering vs what gets put on the pdf. I can explain further if I want to use it
I came here to say reshaper. There is a new free alternative that ppl say is about as good. Can't recall the name roslyn something
Also recommending browserless. Myself and another guy actually wrote the swarm feature, specifically for high scale PDF generation.
Thanks for your opinionated unhelpful input. It has plenty of uses that can't be replicated in any other format.
It's not .net core, but we have been recently in similar position. Our solution is to custom api with Mpdf ( https://mpdf.github.io/ ) - which we have already great experience, and sending generated html to that api.
The truth is hard to hear, it's better to ignore and follow java's path, they did the same, kept ignoring complains and look now :)
Mind the license, it is not free for closed source commercial use.
There have been non-cross platform features in .NET Core for a while already. Sucks when you get bitten by a `PlatformNotSupportedException`.
&gt; There's something quirky about dotnet.exe. Nothing quirky about it. The error complains about `connectionString` being `null`. That value is very likely configured in your `appSettings.json`, which is located next to your assembly. But the file is not being found, because it's searched in the working directory, and in your not working execution the working directory is "C:\\".
&gt; Doesn’t use regex [That's a good thing too](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454)
Unless you *really* need it SQL will be better than NoSQL.
Is it a joke or am I missing something?
Little home projects are the perfect time to piss about with things like nosql. If you fancy playing with different toys I say go for it, what's the worst that could happen. As long as you use well designed interface s to abstract your db access switching back to sql if nosql turns into a ball ache should be simple enough. Personally I have not found many scenarios where nosql is better but it's always fun to play.
Having multiple cores has nothing to do with the performance of that piece of code, I think.
Included just to push the emphasis that the code is very fast.
Mate! This is just a loop not an algorithm.
https://jsreport.net/ This has been amazing, I use it extensively for our enterprise reporting at work.
You should try reading the projects description. It is an algorithm, just stripped down from an internal product. Also, most algorithms are loops, so what are you trying to say?
I guess it comes down the the age-old: "Don't use it unless you know exactly _why_ you want to use it"
I'm a little new here, how would I use this/what would I use it for?
I know right. I don't understand the "fits on a business card" thing. How can code be considered good because of this? I mean someone wrote the declaration of independence on a grain of rice...
You need to move into a marketing career
If you’re new to programming then this is going to be a complicated subject. Let’s say you want to build a word counter, you can simply create an array of characters to exclude or even formats if data to ignore to extract the words from text. Or let’s say you have a translator, and want to translate only words instead of running it in numbers and symbols, then you can modify the code to do such. Let’s say you’re building a programming language and want to build a syntax tree or want to modify code or simply parse it so then computer understands, a tokenizer needs to be used. Also, let’s say you have a command console and want to execute a command that allows not only parameters but formatting, like in DOOM 3, you’ll have to execute the tokenized string. Or let’s also say you want a split string function that doesn’t get rid of the delimiter but retains it in a separate index of a collection, this can be used. The code is very stripped down, but can be built up to create a very robust tokenizer.
SQL or NoSQL, don't store images in a database. Use some form of blobstorage and only put pointers in the records.
The biggest downside is cost. SQL instances aren't cheap in the cloud, mainly because they assume you'll need a ton of stuff you likely won't for small personal projects. You can look at NoSQL, and it may be cheaper, but if your working on Azure, I'd actually recommend trying to work as much as you can with their storage options; Blob Storage, Tables, and Queues. Blob Storage is going to be your best bet for storing those images. Tables are closest to a wide-column database like HBase or Cassandra. Queues may not be helpful to you in this case, but their worth keeping in mind. Most of these options don't start making a meaningful dent in your hosting bill until you get into the hundreds of gigs, so for personal projects they're great.
Has to be a joke?
I pretty sure it's a joke.
Thank you for explaining it, great.
Sure, I get that, but how come the dotnet command doesn't have a parameter to specify the directory?
I'm a data consultant, and I've seen a lot of different companies data infrastructures. Yet to find a situation where NoSQL is truly better or would have been better as a wholesale replacement. My suggestion. Use a relational database as your main. If you ever need a NoSQL DB it would probably be for a specific niche like high throughput, write-only sensor data logs. Some History... NoSQL was better for horizontal scaling a few years back, but cloud vendors make scaling a non-issue for most use cases now. Especially for analytical DBs. The cloud vendors with their big data warehousing solutions (SnowFlake, BigQuery, Redshift, etc) make scaling trivial nowadays, and the overhead of spinning up as many SQL dbs as you want for OLTP databases is minimal. So go hog wild with micro-services if you want. So...I don't see that NoSQL has any broadly applicable use cases anymore. The only time I work with NoSQL databases is when a company lets their web devs make the decisions about which databases they use and they choose based on aesthetics and personal preference rather than necessity. Then we end up having to support it, which can be a nightmare if the apps schema wasn't built with 💯 forethought and conscientious planning efforts.
14 year old me disagrees. And before you ask, yes that message board signature that rotated between ten images was banging.
Because the system provides that feature already: `cd`
The way to succeed in projects where you are the sole author is to use things you know well. If you're winning to learn and possibly fail? By all means try new things out too. Either option will likely be absolutely fine.
I'd add to this to say if you're only hitting your database infrequently then serverless Azure databases would be ideal. They're very cost effective, you have the full performance/power of sql Azure databases, but after an hour they power down and you're only paying Azure blob storage costs. So with that option cost may not be that much of a differentiator between the two.
Sql server has a feature called filestream which does blob storage. It just chucks the file onto the disk and stores a pointer in the table. I’ve been using it for years in production and have only had a couple small issues. If you are using filestream at work then I’d keep using it. If you are not using it then take a few minutes to research it. I have not found the downside yet.
It's definitely an option, but there are some caveats. First off, it's in preview, so just something to keep in mind. Second, you have to configure it to spin down, and the shortest time it'll do that after is an hour of being idle. Third is that spinning up the instance will take close to a minute. So you'll have to accommodate for that in your app. Billing wise, serverless azure SQL is a good option.
Cool, I've spent lots of time turning large text files into lists of ordered words, it can provide some challenges about how to buffer, how to compare bytes, and how to split on words. This is a good start. It's simple, it limits usage of new and makes us of string buffers, also yes, no regex! I think there is a c# `span` based solution that I'm a tiny bit more interested in pursuing.
A very important point about PostgreSQL: it doesn’t assume. It’ll require you to do things correctly and will complain clearly if you don’t. No problems wondering why things go wrong. Want to compare a string to a number? No implicit conversions. No wondering why suddenly you get weird results just because certain databases assume ‘123abc’ is the same as number 123, or ‘asd’ is 0. Only errors. Unless you say you want to convert the string to number, and even then ‘123abc’ will give an error. As it should. It’s perfect for beginners when you get errors immediately for everything you try to do wrong and can learn the right way. And for advanced when you can do whatever you want with it.
Because String.Split is not good enough?
💯 this as well.
Tokenizing and splitting text are two different things. One retains a delimiter while the other does not. Splitting is also used for a single character, using this you are able to divide areas of text by characters, numbers, and other types of data all while being able to keep or remove the delimiters. This also works in a single pass on one piece of data, using split you will have to loop through multiple times and is much more complex. But I can see how you think they would both be similar!
I'm saying: this is just a function that returns a list of chars from input text! it is not a project! it is not an algorithm!
My project is better than yours. It is an algorithm that reverses the bool value! it is super fast and works really great on a single core cup. I will put it on Github and post the link to Reddit soon. Take a look at my glorious algorithm: public bool ReverseBool(bool input) { return !input; }
It doesn’t return a list of characters, it returns a group of strings, called tokens. You can create your own patterns by making simple modifications to the code and you have access to the buffer before it gets cleared so you can get information such as its position, length, data format, etc. The code does exactly as intended, just needs modifications because tokenization is not a one size fits all solution.
That’s really cute, you can stop with the harassment and grow up. If you don’t like the code, troll another post. The code is free and doesn’t say “can do everything for you” in the description now does it?
I know. My algorithm is really helpful and cute. Right? Just like your helpful ALGORITHM! I'm gonna put it on Github. I'm gonna post it to Reddit. I will sell it to Google. This is gonna solve many problems of the programmers world wide. I am not harassing you, I'm just talking about facts here bro. Your algorithm is just a simple function that any one can write!
Reporting. Get off of my post.
1. It is not your post. You put it on Github &amp; Reddit. 2. I am replying with civility &amp; politeness. We are talking about facts but you think this is personal. Go on. Report me please.
It is my post. You are trolling and harassing. We are not talking facts, you are belittling me. And I did.
Bullshit. Microsoft shops (which there are a LOT of) are most definitely staying with .NET.
It looks like string.split(), but with extra steps
Been done before, long before c# was a thing. You'll find this kind of lexer code in the first few chapters of [The Dragon Book](https://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools), or in several packages such as any based on "[lex](https://en.wikipedia.org/wiki/Lex_\(software\))" or "[yacc](https://en.wikipedia.org/wiki/Yacc)", e.g. https://www.nuget.org/packages?q=yacc
Don't be upset mate. In fact I think you must put this on your resume. You can also publish my fabulous ReverseBool algorithm on Github if you want.
This is basically a string split. It’s create a string from a string whenever you encounter a non alphanumeric character.
I don't think I've ever seen a true r/Cringe post here before, but here we are.
We are using a noSql db as in neo4j for big data.
I have an older 2012 pro with 16Gb ram, 750Gb hard drive and the thing still cranks, still super fast for development, I don't game on it. What you need is as you've said, the ram and an i7 processor. Get a large hard drive so that you can dual boot with bootcamp, and optionally run Parallels or Fusion, then you still have Windows as I think most developers unfortunately will need it, mainly from work requirements. Also keep in mind if you just need/want Linux the windows subsystem is going through a massive change. Look into the new windows terminal that's in beta and read up on the upcoming changes to the Linux subsystem.
It's the leftpad [of a new generation!](https://youtu.be/5C1plwKhMRs)
I've used a variant of lex before for a class (flex) and my understanding is that the entire thing is based on regular expressions to define your tokens? Like, look at the wikipedia article you linked yourself, the example is using the regular expression "[0-9]+".
The one i use is the 16mhz model with 1mb of ram. I can work for most of the day but need to sync to my server to debug. Also I collect old computers so this is one of my newer laptops.
Base model of any of the current MacBooks would be enough for your requirements there tbh.
Do you know your schema? Will it not change very much? If so, use SQL. Otherwise _consider_ using NoSQL. Consider using NoSQL if you're dealing with hundreds of thousands of hits per second.
I'm really going to have to disagree with everyone here and say you should use a NoSQL database. 1. You'll learn something new (maybe more employable/higher wage) 2. You won't notice any difference in performance 3. They're cheaper and easier to use 4. You can just dump data in, no need to worry about the relationships or transforming the data into some relational model Reasons for sticking with SQL: 1. It might be faster if you build everything correctly 2. You don't have to bother learning something new (is this an advantage, really?)
SQL/noSQL isn't really a good distinction. SQL is just a declarative programming language (it stands for Structured Query Language). Relational databases like SQL Server, MySQL, PostgreSQL all support it, but so do plenty of other non-relational datastores. The main types of databases are relational, key/value (redis, cassandra), document-store (mongodb, couchbase), search (elasticsearch, solr), graph (neo4j), and column-oriented/relational (redshift, memsql). Relational databases have decades of development and optimization with massive ecosystems. They're also quite capable of modeling just about any data and they all support JSON columns today if you need that flexibility. They support transactions and ACID semantics that are very useful and taken for granted until you realize they aren't available everywhere. Modern servers can also power huge workloads without issue so there's really no need to look at the other data stores unless you have a very specific need for them. If you want to experiment though, side projects are a great way to learn and almost all vendors have managed cloud offerings you can test out for cheap.
Bought the other day since VS Mac wash crashing in Catalina. Definitely loving the stability and a UI that reminds me more of VS for Windows.
Listen to this person. SQL is the way to go until you absolutely need a non relational database for scalability. At that point you can use sql server or postgres's json capabilities. A lot of developers like nosql just because it's easy to get a database created. But they are just pushing concerns about schema and aggregation to a later point in time at which you will have wished you spent the time upfront building out the relational database.
For a personal project, if you are comfortable with SQL, use SQL. It's generally considered better practice to store binary files like images on disk and store their path in the database instead. &amp;#x200B; NoSQL databases are typically better suited for storing massive amounts of unstructured data across multiple machines. Unless you are explicitly doing a project to learn a NoSQL database, it's not necessary. Contrary to what a lot of reddit likes to say, traditional RDMS systems (MySQL, PostgreSQL) generalize quite well to a variety of tasks.
If you're interested in a new challenge, I'd look at storing your images into blob storage on azure. You can use the JavaScript SDK and go straight from an upload page on your site into the storage without it ever touching your sever. Then once it's successful you can store the key / Id in your database and you're golden.
&gt; serverless Azure databases would be ideal Have you ever experienced the cold start up time? Hard to say that's ideal for any purpose whatsoever. Maybe temporary workspace for batch processes - that's about it.
So the major differences comes down to what you are doing. SQL is used for things that have a more defined data structure and consistent data size. When you get to the Enterprise level of of data with millions upon millions of rows the indexing that SQL has makes searching for something in incredibly easy. A query looking for a specific name or id is fast thanks to indexing. If you are good at structuring your data SQL is right for you. MySql or mssql are both good options while I do tend towards mssql my SQL is way cheaper to host. As for no SQL it has the advantage of not having the requirement of the data being in any particular structure or size. This is great when you are dealing with very wierd data. With no SQL it makes is so that each item in your database is could be a completely different item. Then the use of guids(I have mostly Mongo experience) makes it so that you can get your data back. At the Enterprise, where no SQL falls short is the indexing that SQL has. Since there isn't that defined structure if you need to find a name is has to load and parse through the object to see if it even has the name property. If you do everything entirely based on guid id that is used. Then you'll see a slight increase in performance but not much. Overall, I'd say it comes down to what you are doing. If you are doing a home project then go based off the data structure and what you're doing. If you are at the Enterprise level, I would recommend using SQL so you don't see a decrease in performance. Hope this helps!
So the major differences comes down to what you are doing. SQL is used for things that have a more defined data structure and consistent data size. When you get to the Enterprise level of of data with millions upon millions of rows the indexing that SQL has makes searching for something in incredibly easy. A query looking for a specific name or id is fast thanks to indexing. If you are good at structuring your data SQL is right for you. MySql or mssql are both good options while I do tend towards mssql my SQL is way cheaper to host. As for no SQL it has the advantage of not having the requirement of the data being in any particular structure or size. This is great when you are dealing with very wierd data. With no SQL it makes is so that each item in your database is could be a completely different item. Then the use of guids(I have mostly Mongo experience) makes it so that you can get your data back. At the Enterprise, where no SQL falls short is the indexing that SQL has. Since there isn't that defined structure if you need to find a name is has to load and parse through the object to see if it even has the name property. If you do everything entirely based on guid id that is used. Then you'll see a slight increase in performance but not much. Overall, I'd say it comes down to what you are doing. If you are doing a home project then go based off the data structure and what you're doing. If you are at the Enterprise level, I would recommend using SQL so you don't see a decrease in performance. Hope this helps!
You really don’t need a powerful computer for development... any modern computer is going to do the job. The only place you’ll notice is when you’re building/loading very large solutions with many projects. As a general statement, I wouldn’t buy a computer with less that 16GB of ram and at least an i5. But that’s unrelated to what I’m going to be using the laptop for; I just don’t want to buy a price of shit computer that’s gonna need to be replaced in 3 years.
NoSql, databases are boring. Coding is fun. But wait, you need to do some advanced querying on the data? Then maybe a relational db. This is assuming you mean relational vs (the others) as SQL for example is supported by for example azure cosmos db.
I’m sorry, 16mhz, 1mb ram? Are you in the 70s?
September 1989 for that one but most of my computers are from the 70s. In university I used a laptop that was 22 years old to do most of my programing.
Eh depends on your needs/infra/image size, it’s not so cut and dry. I don’t like that as a blanket statement, for sql it translates to « if your relational model is well defined your data is safe, except for images, they can get deleted and you’ll only know when trying to access them ».
Guys, this is absolute gold. It's reassuring that some of my thought patterns were going in the right area. My idea initially was to go down the SQL and blob storage route with some bits for image processing and after reading everything I've seen here, I think I'm going to stick to that plan. Hopefully I can build out in such a way that I can swap out database with relative ease should the need arise or if it gets too costly. If anyone has any further insight, please continue to comment. Thanks everyone.
I wouldn’t go around recommending 40+ year old pieces of garbage to someone looking for what PC to buy dude... they might be cool and unique, but they aren’t what OP is looking for, and you know that.
I know. I'm more saying you don't need to spend much depending what you are doing. Anything you are using for day to day is probably fine. My only real recommendation is something that support triple monitor.
Many databases will do that for you automatically these days, but you're right - do not put images or other large binary data alongside the rest of the data record. https://docs.microsoft.com/en-us/sql/relational-databases/blob/filestream-sql-server?view=sql-server-2017
I'm using a Lenovo X1 Carbon Gen 3. This runs Linux with a very light weight distro. Cost me about £300. The projects I work on are not trivial (ecom related). By any old recent MacBook and it will probably do.
I like being able to nest objects in NoSQL object-style DBs (Mongo). Being able to do so without needing joins is quite nice.
It sounds like he doesn’t have much experience with sql so I would recommend starting there before playing around with nosql. I think the way sql handles relational data is very instructive
To do what you hope, just make sure you properly create a service layer for your database using interfaces. This allows you to more fluidly swap from one to the other.
That doesn't mean that it will generate code that uses regexes.
Regex are themselves code generators, in a sense. The class I took was a compiler course, and the first half of it was regular expressions+lexers, the second half was context free languages + ASTs (the `yacc` in your example). It works pretty much exactly like 'System.Texty.RegularExpressions`', the difference is that with lex you define the expressions at design-time and the lex output is the compiled regular expression, but with C#'s regex library, it compiles the regular expressions at runtime. Either way it needs to be compiled into a state machine, though, because that's what computers can actually operate against. Regular expression actually ARE the right tool for the job here.
Most SQL engines with an image type do this automagically.
Yes - we have it running just now. I wouldn't say it's not useful for any purpose, that seems a bit extreme. It depends on your use case. It takes 40 seconds or so max. But that's okay for our purposes as it just happens to the first person on initial login. After that you're fine. You can of course, also put it on a schedule so it never powers down 9-5 or something. Incidentally we also are using Azure functions instead of a dedicated server, so our whole setup costs next to nothing, but runs extremely responsively when used. But yes - you have an initial login hit for the first user, but that's minor inconvenience for the cost - and of course if the client wants to pay more, you can remove that and make it dedicated.
You're welcome!
That's cool. Neo4j is a solid product. &amp;#x200B; I should clarify that I am in no way "against" NoSQL solutions. However, I **don't** believe that NoSQL should... 1.) be used the main application database or 2.) be used as a wholesale replacement for an RDBMS. &amp;#x200B; IMO going straight to NoSQL without a use case in mind is bad practice because (in general) relational databases are much more flexible. Postgres especially so. &amp;#x200B; I recommend starting off with Postgres because it by far the most flexible database out there. If halfway through development you decide that you'd like to use a graph db, document db, or key-value store then Postgres has you covered. It has... * Wonderful (native) support for binary JSON which better/more flexible than Mongo IMO without giving up the powerful expressiveness of SQL. * It has HSTORE for key-value needs and * It has extensions for Graph DBs. Need GIS spatial functionality? The PostGis extension is the industry leader here. What if you need heavier DB maintenance later w/ stored procedures and you aren't SQL guru? Then PG has you covered. You can write stored procs with JavaScript (PL/v8), Python (PL/python), and so on with Java, R, Ruby, Schema, Tcl, Perl, Bash, PHP. There's extensions for all. &amp;#x200B; If then at the end of the day you STILL need another database, you can then add that into your application as a secondary DB.
Yeap. &amp;#x200B; And even if folks want to do it all with JSON, that's ok, but I'd still rather have that data already inside of Postgres or SQL Server where I can more easily migrate the existing data into new data model and evolve the application without doing a huge, costly data migration into another type of database.
Noob here... does this count as "blobstorage"? https://imgur.com/a/HsplY8G
Right. The real problems with regexs come when trying to parse recursive structures.
Don't u have to pay for it, if u r going to use it in production? How do they enforce that db size can be only 2 gb?
Yeah, I'm dealing with the pain of storing an array in a separate table at the moment. Although it's worth noting there's a bit of "best of both worlds" with Postgress and MySQL able to store JSON columns now.
GradS Surface and you'll be good.
I've been using Google Cloud Platform - it's free for 12 minths and has a free tier after that.
"which type of car should I get to drive on a road?"
Well no. This is inside your db. A column type of varbinary is a step in the right direction if the other comments here are right about the db storing it to disk anyway, but the point is to store in a file system directly, or in a dedicated blob storage.
No. GP means something like uploading to Amazon S3 and storing the key/path in the database instead. I agree.
Shouldn't complain about being a better developer when doing the bare minimum...... which is learning on the job. What else have you done to get better when you're not being paid for it? Stop cutting corner. Start putting in the hours off work in your personal time.
It depends what you want to do. If you're looking at big scale, high performance, then a RDBMS may not be for you. There's extra complexity in this space, and hadn't problems to solve though. Read about CQRS and Event Sourcing for non relational patterns. Any data store can support these, from traditional databases, to no-sql like mongo etc, to files stored on s3. The problems arise in the to maintain consistency in distributed data systems. There are a lot of queues, and processors involved, with many failure scenarios. If you're not massive scale, or practising to build for massive scale, then an RDBMS is almost definitely the easiest and safest option. You can go cheaper with some cloud hosted document stores though (dynamodb, Azure table storage etc), but the complexity increases.
We use docker images now athena PDF [https://github.com/arachnys/athenapdf](https://github.com/arachnys/athenapdf) (html to pdf) or jsreport [https://jsreport.net/](https://jsreport.net/) (template / json to pdf) both have a simple rest api
PDD is an ISO standard, specifically ISO 32000. Not proprietary by any definition.
Ok, so in my debugger I can see that my file isn't actually getting to the end point and each time I hit the endpoint 'image' is NULL. The way i'm setting up the POST is incorrect. How do I define the POST so that it is properly sending? In POSTMAN I have to upload the file into the body and label it as 'image' for the endpoint to properly recognize it, as well as select form-data. How do I achieve this same setup in my fetch() POST?
Make a List&lt;List&lt;T&gt;&gt; to hold all your lists, then use .SelectMany() to flatten it into a single list (and Distinct () as needed)
Sounds like using joins may help. [Here](https://stackoverflow.com/questions/9720225/how-to-perform-join-between-multiple-tables-in-linq-lambda) is an example.
 var mergedList = list1.Concat(list2).Concat(list3)...etc...Distinct();
Since .NET Core is split up into different NuGet packages, adding more features won't really add to the "weight" of the framework. You just use the packages you want in your project. It's not as monolithic as .NET Framework.
I'm not sure, you'd have to ask them for more details.
``` var set = new Set&lt;T&gt;(); foreach (var x in list1) { set.Add(x); } foreach (var x in list2) { set.Add(x); } var finalList = set.ToList(); ```
Do note however that the parameterless overload of `Distinct` uses the default equality comparer, meaning that your data type needs to implement `IEquatable&lt;T&gt;`. You can also use the overload of `Distinct` where you supply your own `IEqualityComparer`.
Reinventing SQL in C#? Mod me down, but something about this smells of Use the Wrong Tool for the Job.
tl;dr; Steve Ballmer, in his usual idiotic fashion, decided that trying to one-up Sun's "we're the dot in dot-com" was far more important than picking a name that actually made sense from a marketing perspective.
What SQL engines? I can't find any documentation in SQL server about it.
It played on the budding Internet ("dot com" era) and emphasized that it could NETwork applications with SOAPy services, to compete with Sun. I actually think it's aged quite well for something picked nearly 20 years ago. It's nowhere near as stupid a name as Javascript.
For the body use the object FormData. var data = new FormData(); data.append('image', this.imageFile); If that does not work you can always find uploaded files in the controller in the object: HttpContext.Request.Form.Files.
And he couldn't exactly say "we're the com in dot-com" without scaring the hell out of every MS-stack developer.
As a newbie I was inclined to think that Javascript was a subset of Java. Boy was I wrong. I still have no clue why it's called that but I guess it's better than ECMAScript
.NET was a silly name, it makes searching for things complicated. I remember when they announced it, everyone was making fun of the choice, for this reason and also because it was just a weird name to "embrace" the internet. Microsoft at the time had decided to include .NET in the name of most of their products. But, some of the original names for .NET Framework weren't much better. Like "COM Object Runtime", as in the "COR" part of "mscorlib". Come to think of it, COM became an unfortunate name for the same reason, though search engines didn't really exist when it was named so we can't blame this one on marketing :)
I wonder if JS was in any way standardised when the name was coined. Plus, it looked like Java and Java was "the Internet language" at the time, I guess, so... Everything has a historical accident aspect to it, I guess...
No, Javascript was named quite purposely to ride on the new popularity of Java, or so most of us who were around at that time think. Regardless, the confusion gave it a lot of acceptance right out of the gate. Prior to Javascript, it was called Livescript when it was first release in Netscape. https://en.wikipedia.org/wiki/JavaScript
**JavaScript** JavaScript (), often abbreviated as JS, is a high-level, interpreted programming language that conforms to the ECMAScript specification. JavaScript has curly-bracket syntax, dynamic typing, prototype-based object-orientation, and first-class functions. Alongside HTML and CSS, JavaScript is one of the core technologies of the World Wide Web. JavaScript enables interactive web pages and is an essential part of web applications. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/dotnet/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
I used to have a beta disc kicking around for Windows Server 2003 labelled "Windows .NET Server". Glad they dropped it from that. It made sense to put it in Visual Studio, since that was the tooling for targeting the framework, and VB.NET to differentiate it from classic VB, and again relate it to the framework. Maybe though they only make sense in retrospect because the framework is the only thing that didn't abandon the brand.
No accident at all. As /u/vplatt says, it was deliberately named that, and also, making the syntax like java was mandated by executives, and is one of the reasons people from other programming background (particularly OO) find js confusing, especially closures and prototypes (because Brendan wrote a language inspired by functional languages and was then told to give it a java like syntax for marketability)
Yeah, let's not forget they were originally going to implement Scheme in browsers. Instead we got Javascript. ::sigh::
My biggest issue with .NET is that it's annoying as hell to type on mobile.
It’s not that simple. There’s always technical debt, even if you do things “perfectly.” Things change. Environments change. Best practices change. Even in the amount of a couple of years the amazing and perfect code you wrote becomes old-fashioned and needs to be changed. Often the first one also leads to endless “but what if...” and the project never finishes. Making a working product is more important usually, but that doesn’t mean cutting corners everywhere. It just means go by reasonable assumptions of the future. I personally often have problems with this and have to really tone it down and decide where the limits are.
&gt; and emphasized that it could NETwork applications with SOAPy services, Most of the marketing I remember was basically that the future of programming was to glue all these microservices together and .net was the way to do that. Then the reality was that it's just a java clone.
You should NEVER change perfectly written code just because it becomes “old-fashioned”. Crazy talk.
So you’re saying it’s great that we still have COBOL systems running and costing big money for banks to keep up? Welcome to the real world.
Well, there was a reason to rewrite good code after async/await introduction.
Most names are generic (java, python, ruby, rust, go) but fine once they gain enough of a community. Microsoft somehow managed to pick two names with .NET and C# that are both hard to type, difficult to pronounce for newcomers, and frustrating to search for.
What part of COBOL or “horrid” JS sound like the “perfectly written but unfashionable” code I was replying to? I’m glad I do t work with you if you do t pay attention to the conversation and just jump in trying to show off.
Ironically, searching for C# (and F#) worked fine on Google for years before Live/Bing understood it, and NuGet **still** doesn't understand it. NuGet!
Why downvote? This is the more accurate answer to OPs question. he wants something like for(i = 0; i &lt; X; i++) { Item item = new Item { Amount = amountList[i], Price = priceList[i], // ... } } this would translate to some sort of SQL SELECT Amount, Price FROM X JOIN Y ON Y.X_Id = X.Id
Yes, search is hard and much harder when you go from letters to other characters. I think even Google suffers at times because of all the variations like dotnet, dot-net, csharp, c-sharp. There's only 1 way to spell Java. I do wish they just went with a new name instead of .NET 5, which was only chosen because .NET 4 would be confusing given the existing .NET Framework versions. It would also help clear up some of the historical baggage.
while that's true, would you consider to update all your switch-statements to C# 8 switch-expression methods? Why would you? Only because it's "easier" to read? &amp;#x200B; Why change perfectly working EAP code that does socket handling to TPL based async-await ?
&gt; .NET was a silly name, it makes searching for things complicated. Yes, Microsoft was never good with naming. It will be the same awful shitshow with ".NET 5".
What's most frustrating is that it's not even hard. Simply don't filter the characters out, at least not at step 0.01 of tokeninzing as so many newbs do. Inferring the semantic relationship with "sharp", "dotnet" and so on is a little harder, but no harder than doing the same for words like "car" and "automobile" -- assuming "car" isn't also pointlessly filtered out for being too short or something.
Yeah I believe the thing is, read only the headline and you will think the top answer has it. But if you read the snippet you get what OP is actually trying to accomplish (a list of combined items?) and yeah, looks like join is your guy here. The approach being used will not work with more lists unless you are sure that there is a single item matching the key from each list, which would also mean that you could just use a for loop at that point.
Probably because it's not production-ready. It's not proven. .NET in general is a framework known most for its stability and longevity. We have 17+ year old applications at work written in .NET 1. The sole reason that .NET is a popular stack is because of enterprise projects which require using a framework that guarantees a long lifetime of support. Blazor is the complete opposite of everything .NET is about. It's new, unstable, and completely unproven for large-scale production projects. Most of the devs working in .NET are working on old large projects and for them Blazor offers nothing in their professional escapades. Hello world and to-do apps won't cut it in our industry. As soon as it proves itself a viable choice and starts making companies some actual money it will be taken seriously.
I worked for a company in the early 2000's where the technical director thought that java and javascript were the same thing - and he had a hatred for java which meant no javascript in web projects. Many developers tried to change his mind, but apparently java in the name meant it was java.
Yea, i know that it might not be this easy. if the items had proper references, op could use LINQ Joins on them. But we don't know this much yet.
I was referring to what I wrote, obviously. Not to what you imagine. You may have some weird idea of “perfect code” that doesn’t exist anywhere. I don’t.
And .NET CLI has to be named *dotnet* because of how incompatible name .NET is. There's even a joke (or is it, Microsoft) that .NET was named this way so it stays hidden on Linux file systems. On the other hand if you think about it, JavaScript is also a very dumb name... But at least it doesn't contain special characters.
.NET was originally "COM 2.0" internally...
Switch *expressions* are completely different from switch *statements*. Of course there’s no reason to start converting them since they’re for different use cases, some of which overlap. But things like tuples, if used, I would change to new things with named fields etc, if possible and relevant. Not by spending lots of time doing it, but when I come across them (I haven’t use them much anyway so not an issue). There’s also no reason to refactor all code into new things when we have a shiny thing. But if we leave code alone for a long time we will start to run into problems, or at least not have the most efficient way to do things. Therefore it’s good to refactor parts you touch anyway and if there’s time even a bit more. Often there isn’t. But not only because we have new things. I wouldn’t start replacing “old” properties with arrow functions just because we have them. But if I start using those somewhere I would see if it’s simple to change all the others in that file to a new way also for consistency. Most likely I would just use the old way, unless the new one is a lot better. And syntactic sugar isn’t. C# doesn’t cause that huge technical debt in the language, but for example javascript has had a lot of things happening that really help if you do a rewrite. It helps in the future. So I’d say we can be happy that C# doesn’t have a huge amount of that and a lot of things are syntactic.
.NET Core was originally ".NET 5" internally. And guess what they will call the next version of .NET Core officially. ;-)
Well it’s not worse than AngularJs then Angular2+..
COM stood for Component Object Model. So COR is an acronym of an acronym.
Are you trying to do it in bulk, once, or part of an application? If it's a one time thing open in Word and save as PDF. You can also probably do this in Google docs. If its bulk powershell 3.0 can script it pretty easily. If it's in an application you can find the Office Interop stuff in Nuget package manager.
Unfortunately PDF is a licensing landmine and in .Net land almost all the libraries cost, particularly for conversions. If you’re running in .net core on Linux hosts there are some Linux PDF utilities that you can hook in to. (I have never researched .doc to pdf specifically) If you’re doing a low volume service I would consider using an API like developer.ilovepdf.com . It’s basically an api in front of pdftools. If the service grows big enough that the api bill Becomes cost prohibitive hopefully by then you can afford a pdf tools (or other library) license.
Part of an application where when the end user downloads a doc which is stored in a doc format would be provided to him in a PDF format.
I am trying to solve this without purchasing a license as the cost would be too much for me to incur.
Will try this.
&gt; search engines didn't really exist when it was named Google had already been around for several years, and Google was far from the first search engine.
I threw together a quick solution below. I don't have a computer without Word on it so I couldn't test it there. &amp;#x200B; You can also find a list for available formats here. I have 17 - PDF being used in the example. [https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word.wdsaveformat?view=word-pia](https://docs.microsoft.com/en-us/dotnet/api/microsoft.office.interop.word.wdsaveformat?view=word-pia) &amp;#x200B; &amp;#x200B; &amp;#x200B; &gt;!using Microsoft.Office.Interop.Word;!&lt; &gt;!using System;!&lt; &gt;!using System.Collections.Generic;!&lt; &gt;!using System.Linq;!&lt; &gt;!using System.Text;!&lt; &gt;!using System.Threading.Tasks;!&lt; &amp;#x200B; &gt;!namespace PDFConverter!&lt; &gt;!{!&lt; &gt;!class Program!&lt; &gt;!{!&lt; &gt;!static void Main(string\[\] args)!&lt; &gt;!{!&lt; &gt;!Application application = new Application();!&lt; &gt;!Document document = application.Documents.Open(@"C:\\temp\\example2.docx");!&lt; &gt;!document.SaveAs2(@"c:\\temp\\doc.pdf", 17);!&lt; &gt;!document.Close();!&lt; &gt;!application.Quit();!&lt; &gt;!}!&lt; &gt;!}!&lt; &gt;!}!&lt;
That’s why I was suggesting the API it’s pay per use with 250 free per month. If you grow big enough that the api cost becomes prohibitive you could swap to the unlimited license cost of the library.
.Nut didn't get through the focus groups.
Sadly correct.
Don’t approach code as if you should do it perfectly the first time. You'll burn so much time, then you'll end up having to rewrite it when it needs to change slightly for another feature. Because, as it turns out, your perfectly clean code was really an over-abstraction to begin with. Clean code as it evolves.
New features, improving performance, isn’t the same as “old fashioned” is it! You’re not saying code that doesn’t do X/Y/Z or is bloody COBOL, you’re saying “old fashioned”, as in, it works perfectly but it’s out of fashion. Don’t invent all this nonsense that i’m “weird” and you’re actually talking about refactoring ffs. You come across as someone with a few years experience trying to flex online “welcome to the real world”. I posted a single line that you never replace code for no other reason than it is not in fashion, and you start with the “so your saying...” nonsense. Grow up.
Oh honey...
Why? I think .NET 5 works well to imply it's the next version of .NET Framework 4
Because they drop the "Core" suffix again, which they successfully established. What about ASP.NET Core? Will it be ASP.NET 5? We had that name already. Even the name ".NET 5" was already internally used for an early version of .NET Core. Will we get EF 7 now, again? Or skip that and EF 8? Or will they keep the suffix for those products? Just overall confusing with no clear vision for the entire picture.
COBOL should, not need, to be replaced when it’s time to upgrade as resources to support it are thin on the ground so makes it difficult and expensive to resource so has a high risk profile. It’s not out of support, it’s not only available on legacy hardware, IBM still maintain it. Market resource and risk profile isn’t “is just old code”.
mscorlib is the Microsoft Component Object Model Object Runtime Library?
&gt; a subset of Java Java -&gt; Javascript Car -&gt; Carpet
COM predates google by seven years...
At the time there was a partnership between Sun and Netscape. JavaScript was positioned as a companion to Java, hence the name.
Big ol' oof.
&gt; Because they drop the "Core" suffix again, which they successfully established I always thought the "Core" name didn't make sense to begin with, but you have a point. &gt; What about ASP.NET Core? Will it be ASP.NET 5? We had that name already. I don't think they'll drop the Core name from these projects, but we don't know yet 🤷‍♀️ I just hope that the time of posts of documentation/forums (2013 vs ~2020) is enough to distinguish between ASP.NET MVC 5 and the hypothetical ASP.NET Core 5. &gt; Will we get EF 7 now, again? Or skip that and EF 8? Entity Framework specifically has a different version number than .NET, so I see this as a non-issue. If they make no major changes, then EF 7 will work with .NET 5. But if they do, they'll release EF 8. No problem there.
Hi, can you provide an updated playlist when you post these? This one looks interesting, but I'd like to see the others and I'm too lazy to spend 30 seconds on it ;)
In that case they probably shouldn't have made WCF quite as much of a flaming shitpile as it was. WCF stands for Windows Configuration Fuckup.
Sorry I think I didnt get you on this one. What d you mean by provide an updated playlist? Post the link of this video in it’s playlist?
Nope, not until version 1.2.
Thanks! I hope you're right. I think I can fix this all up, but hopefully we can keep the other guy from getting in the way too much. It'd be awesome if deep down he realizes his way isn't working out and accepts this without much trouble, but we'll see. I'm loyal to the company mostly because it's a really good company. My dad is a VP here, and has been here for ~11 years now. He's been doing his job for around 25 years, and he's said he's never had a company like this one, they really take care of their people. Unfortunately, I don't know if they'll be able to pay me what I really want or am worth. As another user said on here, they're a trucking company, not a dev shop. I may sit down and have a serious talk with my boss about that later this year, I have before but this time I think I might put some numbers out there after I do a bit more research.
Ohhh that's why there's carpet inside of cars.
Code Reviews. Lots of Code Reviews. If your team of reviewers are a diverse group, you can maybe find some happy path where you all meet in the middle.
&gt; ASP.NET MVC 5 and the hypothetical ASP.NET Core 5. It will hopefully at least be called ASP.NET 5, not ASP.NET MVC 5. Previously they were already talking about "One ASP.NET Core". Going back from that would not be nice either. &gt; Entity Framework specifically has a different version number than .NET, so I see this as a non-issue. EF yes, EF Core no. The version of EF Core aligned with the version of .NET Core and ASP.NET Core. It was easy to know what versions work well together. Personally I think the step is to ".NET 5" is confusing. And that they're not mentioning all of their other products at all does not increase trust, it makes me believe they did not think this through as much as they claim they did.
I thought it was COM+ 2.0
Better than COM. Try googling that and see how far it gets you...
Yes exactly that :) Just pop it in the comments :)
One Platform, One Core, dot NET Core
COM even predates Altavista. Before this, we were searching via meta tags and even hand-compiled indexes.
Butt -&gt; Butter
Originally it was called LiveScript. Then Java was announced by Sun. The team at Netscape saw that if you looked at both languages sideways they sorta-almost looked like half siblings. They entered an agreement together, Netscape and Sun, to call LiveScript JavaScript instead. [https://en.wikipedia.org/wiki/JavaScript](https://en.wikipedia.org/wiki/JavaScript)
Microsoft's announcement a few months ago: [https://devblogs.microsoft.com/dotnet/introducing-net-5/](https://devblogs.microsoft.com/dotnet/introducing-net-5/) .net Core 3.0 is now .net 5. .net is dead, long live .net.
Sounds like a meme. COM++ 2.0 vfinal RC release 1.0
I am sure they wanted to call it ".NET FrameCore 5.0 with SuperBoost Professional Edition"
&gt; .net Core 3.0 is now .net 5. No. You might want to actually read the resource you linked. The version after .NET Core 3.0 will be called .NET 5. And it won't change what I said: **Internally** the term ".NET 5" was already used for an early version of .NET Core (before 1.0).
Do you mean OLE, COM, ActiveX?
So, I can write a more in depth comment later, but SSIS can handle pretty much any level of complexity, if you want it to. You can use the script component to write logic in C#, there are components for looping, error handling, email alerting, etc. That said, it can be clunky and introduce complexity where its not needed. The usual advice is do as much as you can in stored procedures and use SSIS to wire it together.
&gt;just a java clone One big difference: C# made methods non-virtual by default.
Nobody in Microsoft know who suggest this awful name :))
[removed]
AFAIK you do need Office installed. This is the problem when you use a file format (doc) that is tied to a specific application. Your best bet is to convert them to PDFs in a separate process ahead of time, on a PC with Office installed, then load them onto your server. New documents should be created as DOCX which you may have better luck finding a converter for since the format is easier to work with.
Because .NET Core was rebuilt from the ground up. They can't use the old libraries. But they ARE reusing a lot of the source code and just rebuilding for .NET Core, I think. Eg Winforms source code looks the same to me.
Correct me if I'm wrong, I have never used the external authentication features of Identity, but I believe you would certainly still want an IdentityDbContext to facilitate authorization of the authenticated users.
Thanks for the response. Yeah I noticed you could script stuff, but I got the impression to build what we wanted into SSIS would become clunky (like you said.) Is there much benefit in doing it in SSIS+Sprocs vs writing a C# service to take it from the import tables and convert/upsert the data? To me this route still feels the best since it would keep the SSIS packages small, and on the second phase it would centralize all the logic in one, fairly easily-debugable spot.
Because there are major features people want. It is a way to get some of the features from .NET Framework you are missing and still get to use the latest features of .NET Core. Let's say I want to make a GUI application. If I want to go cross platform I could use a third-party GUI library made for .NET Core. But, if I only need to make my app for Windows, and I already know Winforms, I could just use Winforms. But if I want to use Winforms today I have to stick to .NET Framework 4.8. Porting Winforms to .NET Core 3 allows me to work with the latest technology and get access to new features like single-executable compile mode, so .NET Core does not need to be installed on user computers (which has been a problem for .NET Framework apps, you usually want to stick to older .NET Frameworks that were pre-installed on Windows. If you target 4.8 the user might not have it.). Plus the upcoming .NET 5 is supposed to be the continuation of .NET both Framework and Core. So .NET 5 will need all of the APIs .NET Framework 4.8 has. .NET Core 3 is a stepping stone toward that goal.
If Postman doing a POST works properly then the problem is most likely on the client, as the client must be doing things differently to get a different result. Of course as others have said there are issues in the server code too but you should be able to get your client to have the same results as postman. If all else fails you can put your localhost server on HTTP and use Wireshark to inspect the traffic to determine if there is a difference between what postman is doing and your client is doing (newer Wireshark versions can inspect localhost traffic so you may need to upgrade if you have an older version).
If you have *anything* about the user saved, then yes. You need a centralized table that identifies them, and the Identity tables are at the core of user identification and maintenance. To use a metaphor, you are asking if an employee still needs a workstation to work at if they arrive to work by public transit instead of a personal vehicle. Yes, yes they do. Sure, they might no longer need a parking space (some of those fields directly within the Identity table), but they still need to be referenced from that table. Even though most of that Identity table will go unused with external auth, it is a centralized way to record and maintain users regardless of how they logged on. Their entry in this table spawns links to other tables where any other information is stored, all connected by referential integrity to that core table. For example, if you do custom logging of logins, that login table references the Identity table such that successful logins can clearly and unambiguously identify the user. Even with external auth, you still want to clearly identify the user, so you still need the Identity table (or some table that records unique users) that can represent and hold information about that specific user, even if none of it is personally identifiable.
You will need office installed. As the name (interoperability) implies.
Increasingly I'm realizing being an experienced senior dev doesn't mean picking the best abstractions every time, but having the good sense to pick the right level of abstraction for a project, and it's more an art than a science. I also realize now there isn't a "best" way to structure things because abstractions are a tradeoff. You could make a CQRS project with microservices that implements a repository pattern, but that would be really overkill for a one-off project that's only going to serve a single sign-up form for your intramural ultimate frisbee team.
Well, I suppose the argument would be to rewrite async/await only if there are pressing performance reasons for it. If everything is humming along nicely and hosting costs aren't insane, it would probably be better to leave it and focus your attention on other things.
Technical debt isn't purely written code. It's a representation of shifting business goals on an existing software foundation. Any code will accrue tech debt over time unless your business stops growing. In these cases the goal isn't to write code debt free, it's to have a budget plan which accounts due taking out this debt and a paying it back over time. Good architectural patterns, tests and infrastructure can be used to make paying that back easier.
SSIS is a great tool if you know how to use it properly. It can also be a nightmare if you kluge it poorly. Honestly though, in my experience it usually adds more than it takes away, and newer versions fixed a lot of the old issues that made it such a PITA to work with. What the other poster said about leaning on stored procs definitely rings true for me as well, but I have built and maintained some absolute monster packages in SSIS that did a ton of processing and it worked out ok, although personally I think doing your staging in SSIS and relying on stored procs for transformation is a better approach.
Use the @ operator for indexed asp-for items. Also, using foreach loop might be better here and then use asp-for="@subitem....."
It's safe to say that I'm not calling it correctly from the client, this is new to me! This example is essentially how I'm accepting the user input and prepping the file to send. [https://jsfiddle.net/meyubaraj/fLbe7r72/](https://jsfiddle.net/meyubaraj/fLbe7r72/) My confusion is coming from how to set it up to send. I can hit the endpoint but 'image' is always null. From postman I have selected 'form-data' and then in the body I choose file and called it 'image' and then select the file.
Yeah the client isn't sending the image properly, I think other posters had some tips on how to do that. I don't use multi-part form data myself.
No biggie, just throw in couple jQuery here and there.. life is good!
_"COM Object Runtime"_ comes from the fact that .NET origins come from [COM+](https://en.wikipedia.org/wiki/Component_Object_Model#COM+), another poor name 🙂
This is a never-ending challenge with building software. You'll always be behind the leading edge, even if you start green-field with the leading edge. It's exceptionally hard these days, as even the traditionally slow moving desktop frameworks have started to move at a pace that's more akin to the front-end web. A year ago, you build on [asp.net](https://asp.net) 2.1. [asp.net](https://asp.net) 2.2 was in development near release. You're behind. [asp.net](https://asp.net) 2.2 is released, and 3.0 is in development, now you're really behind, and there's already discussions on changing the whole thing in the future... If you're using a front-end web framework, the day after you yarn/npm your dependencies, one of them releases a new minor version. You're behind. A month later and you've got major versions released. Soon enough you've got a week or two of just investigation on how much effort it's going to be to update your front-end to latest. That's not even addressing the actual code you're writing. &amp;#x200B; So, to answer your question, there's no good solution to this problem. It's a constant battle. For my team, I make decisions to try to provide us with an upgrade path to the latest, and try to tackle dependency tech debt often. We have code in .NET Framework, [ASP.Net](https://ASP.Net) MVC 5, using older service patterns and areas. We also have newer code in .NET Core, [ASP.Ne](https://ASP.NET)t Core 2.1, using CQRS mediator pattern and feature folders. Eventually we'll bring the MVC 5 stuff up to [ASP.](https://ASP.NET)net Core, and move the front-end up to the latest versions... &amp;#x200B; You'll never have a product if you don't draw a line in the sand at some point.
My two cents, avoid SSIS, you can write stored procs and c# without SSIS. I have the privilege of maintaining an SSIS package that utilizes VB scripts. It’s a pain to debug and update since it’s a 2-3 step process just to access the scripts. Debugging doesn’t start reliably and at least in my case the code could have been an executable run in any number of ways instead of buried in an SSIS package.
Can also use MoreLINQ's DistinctBy [https://github.com/morelinq/MoreLINQ/blob/master/MoreLinq/DistinctBy.cs](https://github.com/morelinq/MoreLINQ/blob/master/MoreLinq/DistinctBy.cs)
Which version of .NET are you targetting, and which version(s) do you have installed? The x64 JIT was not as good as the x86 JIT originally, even though it is now considerably improved and typically is better now. &amp;#x200B; And yes, the extra memory could well be an issue, or rather the size of a reference. Every reference variable in your application now takes up 8bytes, not 4bytes.
What exactly does the application do and what do the 1.6GB and 3.2GB mean? 32bit application can use more than 1.6GB of memory, so I don’t understand these.
Can you use .NET Core 3.0 (preview)? https://dotnet.microsoft.com/download/dotnet-core/3.0 It should support; I believe, VB.NET and Wpf/WinForms/etc C# conversion https://docs.microsoft.com/en-us/dotnet/core/porting/wpf but VB.NET should be broadly similar. .NET Core should be faster.
Switching to 64-bit means that all of your pointers are twice as big. Which means you can lose up to half of your CPU cache space. That in turn means you are reading from main memory more often. A 3X hit doesn't seem normal, but if you were barely fitting into cache before and now you aren't then it would explain it. I've heard that CPU instructions are also larger for x64 mode, further reducing valuable cache space. There may be problems with the x64 JIT that you are happening to hit.
While you're correct that it's harder to maintain consistency outside of your db, and there are tools (i.e. FILESTREAM) to support keeping unstructured data from taking up db pages, if you don't need to ensure transactional file operations, divorcing the file storage from the SQL DB can have advantages. Direct upload to blob storage, for instance, rather than consume your SQL server or middle-tier IO. Also, db backups get a lot quicker. Disaster recovery gets faster because you can bring an operational DB back online faster, since it's much smaller.
You say that you have a lot of arrays. Can you store structs in them instead of classes? That can be a huge performance boost, but requires very careful coding.
 [https://docs.microsoft.com/en-us/sql/relational-databases/blob/filestream-sql-server?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/relational-databases/blob/filestream-sql-server?view=sql-server-2017)
It's VS2015. Not the newest, but pretty modern.
Microsoft is so bad at naming, they had to skip Windows 9 because it would have confused with windows 98 or something like that because both were shorted to Win9.
Apparently the overhead of the environment eats up the rest because if I track thread memory it will crash at ~1.6GB in 32 bit mode. About double in 64 bit. Basically it is an array of data tying pairs of geopositions together (not distance, but something more random). Saving it off to a file and reloading is much slower than 32bit mode, but comparable to 64bit it appears.
I'll look into it. Thnx
It's a structure array already. I rarely use classes.
Checks out. That sucks. I'll have to go back to writing to a RAM drive I guess. That really slows things.
Didn't Microsoft have a bunch of unrelated products at the time under the .NET banner? I remember the predecessor to Microsoft Accounts being called ".NET Passport".
VS 2015 doesn't tell us what version of .NET Framework you are targeting.
sorry. 4.5.2.
The overhead eats it up or its trying to do more work at the same time because it has more memory to work with?
Thanks. While the other posters kind of advocate for SSIS with sprocs, I'm kind of leaning towards writing a C# service to do it anyways. The reason being: - Without using sprocs it's going to be clunky to build this stuff into SSIS - With the sprocs we split the logic up and make it even harder to debug Just seems logical to me to centralize all the logic into one place where I can handle any error conditions, conversions, etc that we need. The guy I work with keeps telling me &gt; SSIS has deeper integration with SQL Server than C# but can't ever elaborate how, and I'm not really seeing it here either, or in my research. I'm not seeing much that would make it faster in SSIS, but I'm seeing stuff that seems like it would make it more difficult to get going and keep up with.
How big is your structure(es)? You could be wasting time copying a lot of objects around and instead you should be using classes instead.
Probably not. [https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/runtime/4.5.1-4.6.1#introduction](https://docs.microsoft.com/en-us/dotnet/framework/migration-guide/runtime/4.5.1-4.6.1#introduction)
Are you using actual pre-sized arrays, or List? You can get OOM if you are adding items to a dynamic collection and it forces a resize.
That's why I love C# 7.x. The `ref` keyword makes a lot of the accidental copying go away.
The structure isn’t that big but there’s a crap ton of records.
I’ll try it and see what happens
I am definitely using Redim Preserve to avoid hitting the array cap. That probably happens 5-6 times in the worst case test compile. Is that creating a memory spike? It doesn’t seem to crash on that line, though.
Unless the executable is marked as large address aware, 2GB is the max for a 32 bit application. And then when you factor in heap fragmentation, you very frequently end up with out of memory exceptions around 1.6GB to 1.7GB.
I would love to work on a xaml renderer for blazor.
It would. The new JIT compiler (RyuJIT) released in 4.6. https://blogs.msdn.microsoft.com/dotnet/2015/07/20/announcing-net-framework-4-6/ If you are going to get onto 4.6, you should get on 4.6.2, not 4.6.1, but 4.6.1 would be an improvement.
Thanks
It is possible to see a small performance regression in going from 32 to 64 bit, but 3x is unusually big. When you profile it in each mode, what is the biggest difference? Anything we say will be aimless speculation without a profiler actually identifying the hotspot. You might also consider marking your 32 bit exe as Large Address Aware. You have to use the `editbin` command to do that though and the gain in addressable space is nowhere near as big as what you get from converting to 64 bit.
Does that work in the test environment or only once an EXE?
When I hear "clean code" I often think to SOLID and other cargo-cult nonsense that supposedly makes the code more "flexible" or "maintainable" but really just leads to unnecessary complexity, pathological redundancy, and more layers of indirection than lines of code. My solution is to simply turn on the code analysis rules. I'll disable the ones that don't apply to my project (e.g. internationalization on a English-only system), but I'll try to use as many as I can. Beyond that I remove everything that isn't absolutely necessary. * Interfaces with only one implementation? Gone. * Public methods that don't have to be? Changed to internal or private. * Private functions only called in place. Inlined.
How did you obtain the performance numbers? Are you testing in release mode without an attached debugger? Have you used a profiler to see where your code is spending the most time, and where the difference comes from? Recent VS versions have a profiler built-in, dunno about VS2015. Others have mentioned some possible explanations for reduced x64 performance, but without more information and seeing the affected code, it's all just hopeless guesswork.
This was in the interest of compatibility with programs that checked for versions of Windows starting with a 9.
It's a flag in the binary headers. `editbin` edits binaries. If you go that route, you would need to add it to your build process (as a post-build step) so that it gets added to the exe every time you compile. You can verify the result with `dumpbin /headers` and look for ` Application can handle large (&gt;2GB) addresses` in the output. Both of those tools are loaded from the developer command prompt.
&gt; Only because it's "easier" to read? Yes. I'm looking at a lot of switch statements right now that would be much, much shorter and easier to read if they were switch expressions. I'm not going to do this by hand, but as soon as my refactoring tool supports it I'm going to convert all of them that I can.
Using system.diagnostics.process.getcurrentprocess.workingset64 to get thread memory via status updates in the app. I haven’t used those resources. So I would need to review how to install/use them. Googling I do see a lot of people asking why 64 bit is slower than 32.
I already have that in, but it made no difference. Perhaps it isn't working properly. I copied the code with the editbin. I wasn't sure that worked inside the dev environment. Could that be messing with 64bit perf?
Its not like other programming languages (Go, Swift, etc) are picking distinctive terms from an SEO perspective.
Large address aware is strictly a 32-bit thing. It doesn't apply to anything that is 64-bit. It's an option for increasing the amount of memory a 32-bit application can reference without switching to 64-bit. The better, longer-term route would be to run a profiler on the 64-bit version and figure out what is slow, but a large address aware 32-bit version could be a good stopgap measure.
Nope I get it. I was just wondering if having that code in post-build could have a negative impact when I build for 64 bit. I will look into a profiler.
Your not adding anything new mr. Bot
Holy crap I remember that. Back in the msn days
It really depends if you want or need all of the bullshit columns that comes with the default identity setup. I recently started a new project with the intention of using asp.net identity core. But if you want to customise it you realise very quickly is much easier to roll your own. If you are making a site in .net core it's really easy to do auth without identity core. 2 quick links https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-2.2 https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/social-without-identity?view=aspnetcore-2.2
Identity is a little confusing because there is Identity the full-featured authentication scheme that includes tables, etc, but there is also the concept of an identity in .NET, and they are not the same thing. You can see in the docs where something like this doesn't use Identity-the-product, but still leverages pieces of the .NET identity framework. [https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/cookie?view=aspnetcore-2.2) For your purposes all you really care about is the SignInAsync process. You can call that at any point you want really, and you can populate it with whatever claims you want, however you want. If you want to give the user authorization based on the day of the week, you could do that as easily as you could look at your own database for role information. When Firebase authenticates the user, you will probably have a populated User.Identity object in the HttpContext. I'm guessing Firebase authentication has some sort of callback when authentication is successful, and that is the point where you want to use SignInAsync and populate any claims. If you don't call SignInAsync on the WebAPI side, it's possible that things will still work but your app will be re-authenticating with Firebase on every request.
Report back! Would be interested to know if/how it works for you
Let us know how it works out. This sounds like a better explanation than my fat-pointers theory.
When I search it, the Component Object Model wiki page is the fourth result from the top. But when I use an Incognito Window, it's not within the first three pages, and that's as far as I felt like checking.
The stupidest part of that naming saga was when they decided to go to semantic versioning, a few months after they released. Like, I could have handled the name change if they would have just called it "Angular 2", and had each update be "2.2", "2.3", etc...we'd be on something like 2.6 right now. But no, they had to start iterating that number. So, we have Angular 1.x, a *completely different project* from Angular 2. But then there's no Angular 3, and Angular 4 is really what should have been called "Angular 2.2", but they had to screw over all the people that had already named their NPM libraries "angular2-" or "ng2-". Google is really good at disregarding the search-ability of a project name. Which is ironic, I think.
It is probably better to rethink your application design. Using a database to store all this data and only loading it into memory using a query when you need it may be better. SQLite has full .NET support, you can use Entity Framework with it as well.
I'd also love to see XAML as a renderer. That said, XAML is a Frakenstein where each implementation is similar but different enough to cause problems on anything that's above trivial if you try to share code (that's been my experience, I'll fully admit that I could be missing something). It would be incredibly powerful to be able to create a XAML control that could be re-used on the web through Blazor or in a UWP or in a WPF app.
I happen to think that C[octothorpe](https://www.merriam-webster.com/dictionary/octothorpe) is a perfect name for a programming language.
There were similar problems when Vista's internal version number was bumped from XP's 5.1 to 6.0. Lots of apps checked for XP by seeing if the major version number was 5 or above AND the minor version number is 1 or above. Except 6.0 does not meet this requirement. Windows 7 ended up as 6.1 for this reason even though it might have otherwise been 7.0. Though Windows 10 uses 10.0.
Oof, there's no reason why they shouldn't be using same-origin protections to prevent that sort of attack.
My friend once confused .NET with the dark net. (He wasn't that tech literate) And yes, I'm still thankful that I don't program for "Microsoft COM Object Runtime".
I've seen this behavior before with client-side. Test by correcting something and see if the next item then gets marked as invalid... I understand the desire to have every field not valid to be shown all at once, but sometimes I think the client-side stuff just finds the initial elements that fail before showing the UI indicators. If i remember correctly, when I found a workaround, it ended up giving validation errors on first load. So the client-side trigger was overly sensitive when I tried to fiddle with it.
&gt;Switching to 64-bit means that all of your pointers are twice as big. "I have the biggest pointer, believe me! Everybody knows it. I and I alone get lots of awards. #MPGA!"
A couple of thoughts... * Always N-Tier with at least UI - Business Logic - Data access * Abstract 3rd party tools and services. ie have a PdfService, EmailService etc instead of referencing a used lib through out the code base, makes replacement much easier * Use the more popular/active frameworks and projects as there more likely to have an upgrade path and be maintained * Keep it simple, less interfaces, less copy paste, the more code there is the more there is to refactor * Do not bind your self too closely to the IDE (CI helps with this) or platform if possible, IDE's change, platforms change, suppliers disappear * Resign you self to the fact that despite all your planning .net 10 just released and dropped all support for JSON for NCDF (new cool data format) so your are stuck on the current stack with out a major rewrite
If you use pre-dimensioned integer-indexed arrays, then in theory it doesn't need more memory because the array position is based on multiplication of the index instead of pointers. Whether it works that way in practice is another matter. A compiler upgrade could solve that. The addressing may not match the indexing exactly, but the system justs load the target memory chunk into a registry and slices out the chunk it needs. It's kind of like a sub-string extraction, the target character is probably bunched up with other characters in addressable memory, but using careful accounting, the target character(s) is sliced out of that chunk. But if pre-dimensioned arrays won't work for your particular app, then you are probably stuck with "fat" pointers.
Look into [.Net Core WebApi](https://docs.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-2.2) Essentially you’re going to want to make a RESTful api with endpoints that your app calls with GET and POST requests. Feel free to ask any questions!
The Peter Principle applies here
Perhaps. It is creating millions of routings and then grading the attractiveness of each relative to the others to predict how viable each is. Similar to Waze, but macro top down and not road based. It’s 10s of millions of record accesses. Anything that touches a disk or even a virtual disk seems to slow it a lot.
So pre-dimensioned array you mean: Structure Stuff End Structure Sub Dim NewStuff(100000) as Stuff ... End sub As opposed to : Dim NewStuff() as Stuff Redim NewStuff(50000) Dim counterval as integer =0 ... If counterval =49999 then Redim preserve NewStuff(100000)
The Angular tutorial has a sample app called Your Of Heros which at some point discusses a service layer that can write to a DB. The tutorial provides an example on how to write to an in-memory DB, (see the section for "simulate a data server), and you'd need to alter that to use your own WebApi host as an endpoint. See htts://angular.io/tutorial/toh-pt6 if it's not changed since I read it last.
I've attempted to update a pre-existing bootstrap 3 site to a bootstrap 4 site and found these concepts to be the biggest changes I had to overcome / migrate: New responsive elements handle items smaller than 786. Using display utility 'd-*' to initiate flex-box containers. New shortcuts for spacing, display, padding and margins. New width and height utilities. No more Pull-Left / Pull-Right ... Moved to 'Float-*-*'. New requirement for the popper.js libs. Panel, thumbnail and we'll has been replaced with 'card'. Themes are handled natively now. Navbars have expansion classes. New aspect ratio modifier classes. New border radius classes. Glyphicons are not built in. Etc. So depending on what you loved and used in BS3, you have to reeducate yourself where these changes affect your development style
As much as I hate the name "JavaScript" , I loathe ECMACrap or whatever the hell the officIal name is these days. Similarly, I really thought that the "Java 2 Version x " designation was such a stupid convention. "Mathematica" is such a beautiful name while "Python" makes me cringe. Names do matter and dotNet seems to hold up in a lot of ways. Just my opinion...
Ah that's interesting. Thanks for your response. So right now, after I sign in to firebase it'll give me a jwttoken and I just put that in the authentication header of any call to any endpoint of my server and then yeah, as you say the identity as well as the claims will appear in the httpcontext.identity object. I agree that as you say my server does actually send the token to firebase to authenticate and get more information about the user (Eg. The claims it has) My further question is, as the server is stateless, what does signinasync actually do to prevent authentication with firebase on every call? Does it save the jwttoken along with the firebase claims in the identity table and if the same token comes in, it uses the data in the database to repopulate the http context.identity? An additional question, does it matter that my server has to authenticate with firebase each time? Isn't it just getting the latest data from authentication?
I can imagine the internal discussions. How about calling it .COM? How about we keep brainstorming?
If you want the server to be stateless than yeah you can keep it as is. The only drawback is whatever amount of time and resources it takes to go through the Firebase authentication verification and to repopulate the User.Identity object/claims. SignInAsync basically has your application take over. If Firebase has already said the user is good, you can persist that for X amount of time and your server doesn't have to check back in with Firebase until that expiration. I'm not sure if it does this with Google/Facebook/etc external sign-ins, but the SignInAsync process by default creates a cookie with whatever user information you've stuffed into it, and that cookie is used to do all authentication until it expires. [https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/social-without-identity?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/social/social-without-identity?view=aspnetcore-2.2)
I'm curious why he had a hatred for Java. Actually I find kind of the opposite. Ill-informed managers often see fancy UI gizmos on other websites and say, "I gotta have that!" The fact that it's fragile and/or not compatible with some browsers is not something he/she cares about much; they want their toys here and now.
Eewww.
You are right in that they can be redimensioned during runtime. But if you wish to have big object networks (models) in RAM, then big arrays of simple scalar values probably won't cut it. You'd have to program like it's Fortran77. Whether that's practical depends on the domain (nature of the application). If it's a desktop game, tossing out all the game objects (protagonists, allies, spaceships, planets, etc.) and modelling it with arrays of scalars is probably too big of a change.
https://jsoup.org/
Are you sure about that. According to [this](https://books.google.com/books?id=LIJmp9luRlYC&amp;pg=PA32&amp;lpg=PA32&amp;dq=%22COM+2.0%22#v=onepage&amp;q=%22COM%202.0%22&amp;f=false) from 2000: "Fast-forward to 1993. The COM 2.0 specification established a framework to facilitate component..."
Nice article. For me DI is missing. Since it's essential for any kind of testing. Also a mention of "JustMock" mocking library, which is the only one I found that is able to mock EVERYTHING. No matter if it is static, private, sealed, whatever. It's the only way to create tests in a project that has grown for 5+ years without rewriting everything.
I think you need to provide more information about what exactly you want. Visual Studio is a pretty good refactoring tool in and of itself. Is there specific functionality you're looking for?
You definitely can test without dependency injection, its just not common in the .NET world.
&gt;create a XAML control that could be re-used on the web through Blazor or in a UWP or in a WPF app. what is a xaml control? the real control has to exist somewhere concretely. xaml doesn't define the controls, just the layout and bindings. the way i see it is that effectively the razor syntax would replace xaml. then you could have the same razor components with different backends, ef web or uwp or even win32.
if you expect to serve html, js, and css, you would have a bug if a pfx or pem file somehow came out due to a configuration issue. it isn't a security issue in and of itself, it just helps prevent data disclosure in case of bad configuration (which is very common).
Definitely possible, the possibility was discussed on the WinUI github page regarding Blazor with XAML controls. The biggest part on why this is possible is because XAML is just a hierarchy of objects and can be made manually via a low level namespace called `XAML.Direct`. Since Blazor generates render method calls behind the scenes after Razor compiles the templates, they you could use that to create a renderer that leverages `XAML.Direct` to instantiate the object graph that describes the layout from Razor code. The best thing about it would be you'll have full C# capabilities on the template (means a lot less converters needed) as well as the ability to use control flows for conditional markup. I'd love to see MS support a XAML renderer for Razor myself.
hmm.. it's interesting. 2.5mb for a very basic site, no images is a hell of a size to start from. It feels like the old [asp.net](https://asp.net) webpages with new tech.
Gonna add that Newtonsoft Json.NET is super easy to work with to serialize back and forth between c# objects and json objects.
See BLOB data type.
"Direct upload/download to and from blob storage"
Our code reflects how we think. If your approach to coding is messy and convoluted you will produce messy and convoluted code. If your approach to coding is clean you will produce good clean code. The key to writing good clean code efficiently is to change how you approach coding. Some things not to do are: exploratory coding. Things to do: taking things one at a time, work through the problem from a logical perspective without writing any code, only write code once you have solved the problem from a logical perspective first. Like with code where you want to keep every task in its own self-contained function/method, you want to keep every task in its own self-contained task. One of the tasks is translating the solution into a syntax (i.e. coding). You want to put this part off as long as possible. When you mix this task with other tasks you get distracted by the noise of the syntax. You are not able to clearly think about the problem and solution from a high enough level. That is the core of the problem. We jump into the syntax too quickly without first solving the problem from a logical perspective. &amp;#x200B; tl;dr Solve the problem logically, then write your code. Don't write your code as you are solving the problem.
France -&gt; Francium The former has a rich history and culture. The latter is dangerously unstable and should be avoided if possible.
The size is mostly from the mono runtime and they haven't started on any major optimizations for it yet. It would be better to wait until the official release before judging the payload size. Also many JS apps easily run into that range and are much slower to parse in comparison.
Yep, i get where the size comes from. It's also a bit of a worry if projects can bloat with the dll downloads. JS bloat is a curse on the current internet but that doesn't make it better.
if you can wait, wait for PCI 4.0 based laptop
Couldn't mono.wasm runtime be a part of new chromium based Edge web browser?
You mention using C# to capture and store data. While this is an excellent choice, it's far from the only - or most seamless - one. A more JavaScript-centric option, is to use Google's Firebase: https://codelabs.developers.google.com/codelabs/firebase-web/#0 I just want you to have options available to you, as it might be hard to even know which questions to ask in the beginning.
This code is in the post process, but doesn't seem to be working. Any idea what is wrong? call "$(DevEnvDir)..\..\vc\vcvarsall.bat" x86 "$(DevEnvDir)..\..\vc\bin\EditBin.exe" "$(TargetPath)" /LARGEADDRESSAWARE
Cross-post: https://www.reddit.com/r/csharp/comments/cgquid/where_should_i_put_my_viewmodel_logic_and_how/
By the same token, the far smaller db size makes restoring on dev boxes far faster. It's impractical once you get into the hundreds of gigs+, when you need to iterate over destructive code.
Pretty much what /u/hellcaller said. The only garauntees with Automapper is that it will do \_something\_ at runtime. At least with compiled time code you know what its going to do, and the compiler checks things for you. &amp;#x200B; Frustrations with/around AutoMapper: * You have to be super careful renaming anything. You pretty much have to have a global understanding on the dependencies before you touch a class. If there is even a remote chance a class is being touched by AutoMapper, refactoring it is hard. * If you haven't looked at it in a while, its hard to remember how nested properties are handled * Because it makes things easy, there can be an inertia to making your internal classes look a lot like your public API models, just because it makes mapping easy. This is a human problem, not an AutoMapper problem, but it is related.
I'm not using it wrong, its just solving a problem I don't have. From the website: "AutoMapper is a simple little library built to solve a deceptively complex problem - getting rid of code that mapped one object to another." Removing mapping code isn't a problem for me. Removing the effort required to write mapping code however... thats the problem i like having solved.
I looked at OutSystems - but was scared off by the pricing. $6,250 a month was far far more than our consulting business or customers can afford.
I'll be honest I went through a phase like you are in now about being ultra-anal about folder structure and what not, trying to be like everyone else, but what I've learned from my years of doing MVVM is to just find a groove that makes sense to *you* and your team (if you have a team) and stick with it, whatever it is. I fall into the camp that the MVVM pattern is just a suggestion and that you have a degree of flexibility. For myself I break a project down like this: (These are folders) MODELS (then add subfolders that make sense to the project) VIEWS VIEWMODELS RES (for resources like icons) LIBS (DLLs or other such projects) I try to keep as little code as possible in the ViewModels. They just connect the views to the models, so there really is not much 'viewmodel logic' per se. Also try to keep the models as decoupled as possible from one another for resuability in other projects, etc.
Hello, Where do you put your viewmodel logic, like assignment of data to the collections etc?
I've chosen to put my viewmodels and views together in specific folders, instead of splitting those in general viewmodel and view folders. This has the benefit that the things that interact are near each other. So I'm mostly working with a small number of files all in one folder. Also the viewmodel and view directories would get too big in my opinion. Edit: so in your case I might have 3 folders. Animal, Market and Category.
&gt; the razor syntax would replace xaml I would love to see this happen in WPF/UWP. Bindings are madness with XAML.
Yeah, I agree the pricing boarders on insanity, for many customers it'd be impossible to pay monthly fees in this range, although the free tier is enough for a lot of use cases. Hopefully they revisit their pricing at some point.
Depends on what type of logic do you mean? Presentation logic like : * if checkbox.IsChecked then slider.IsVisible = true and [button.Active](https://button.Active) = false * if IsValid(input1.Text) then [button.Active](https://button.Active) = true should be implemented directly in your viewmodel properties (and methods maybe). &amp;#x200B; Bussiness logic like: * send money to account * remove user from database should be delegated (after some massaging and validating) to your models.
Similar situation here. Also I’m new to web development so I might be missing something.
Yes, it is more like: &amp;#x200B; Post to DB with method from DAL. Fetch the new update, map the edited object to the original object. &amp;#x200B; or e.g. &amp;#x200B; public async Task LoadViewModelData() { InvokeOnUIThread(() =&gt; this.IsLoading = true); Collection = new Collection(MethodInDal.FetchData()) Collection = new Collection(MethodInDal.FetchData()) Collection = new Collection(MethodInDal.FetchData()) }
CompareObjects() ... is your bussiness logic, so it should be in your model. Viewmodel just calls this method ( when you click some button or maybe after every keypress or even every few seconds... ), saves the value to AreEquals property and invokes INotifyPropertyChanged event.
How do you delegate? What if I need to update some of the ViewModel classes?
Okay, but what I'm wondering is that as you can see, this.DiffObjectsProperties is the viewmodel class property. It holdt on all the differences for the objects in the viewmodel. &amp;#x200B; If I move it to BusinessLogic Project, how can I access the DiffObjectsProperties? Because I can't two way bind references for the project.