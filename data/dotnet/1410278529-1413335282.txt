What about WPF? Is it going to get new features? Is it in the same state as WinForms? Are you guys going to kill it and lift a lot of restrictions on WinRT for desktop development?
Depends on where you want to focus your career. Others here seem to be focusing on enterprisey/desktoppy type stuff, and yeah .NET is fine for that. If you want to get more into system-level stuff, runtime libraries, OS kernels, compilers, etc, then you'll want to get into C and C++. There's a sleeper career out there though, one which is not getting nearly the attention it needs, and that is a crossover between computer science and biology. Right now there are very few trained computer scientists doing decent genetic mapping tools. Guess who is doing it. Yep, Biologists are doing it. What do we know about biologists? They suck at programming. They're about as good at is as physicists, if that gives you any clue. However, here is a happy coincidence (for you, maybe): guess what language they are using for their crappy programming. Yep, Python. There are still some old school grey beards out there doing Perl, too. Can you beat that? Now, it seems to me, that some young and smrt computer scientist could team up with some smrt biologist and apply some tried+true computer science to this problem. Architect whole systems instead of these rinky dink little ad hoc tools these guys are using now. Capitalize on speed, parallelization, etc --- biologists know *nothing* about that stuff. Most of them can barely find Start =&gt; Control Panel to uninstall programs. This is the opportunity of our field now: Computer Science plus Biology. It is akin to telling young men to "go into plastics" during World War 2 and after. Or, another famous one: "Go west, young man." 
This is the Native Client: http://www.microsoft.com/en-us/download/details.aspx?id=29065 What you are referring to above as the Native Client are the drivers.
I did the new project route myself and it was easier than the upgrade for some of my projects. The biggest issue for me was the bootstrap changes.
It's because code quality - from a security perspective - matters. Imagine that you have some easily exploitable code, running in a secure environment. If that code is in a closed source app, sure, the exploit is still available, but it's very difficult to discover. But if that exploit is in an open source component, attackers can see it very easily. Yes, maybe the exploit in the open source lib will be fixed faster, but even in that case, it means you've now got to watch for patches to come in so you can rebuild your code like, ASAP. So now you're "tied down" having to constantly ensure your open source libs are at their latest versions.
If C++ is your hammer, it's a bit like driving nails into wood using a hand grenade. Completely safe if you do it right, but still unnerving.
Presumably, he can't modify the desktop application to issue an HTTP request, but he can make it send an email. Sometimes you gotta work with what you're given.
My favourite way to do this is to use Exchange Web Services and poll for new messages on a regular interval. You could use POP3/IMAP but after using EWS I've really got to the point where I think it's pretty decent. If you're going the POP3/IMAP route spend the cash and buy the advanced intellect mail libraries as they're much more pleasant to work with.
That's like saying Visual Studio has nothing to do with VB.NET. While they are in fact still doing minor bug fixes, most of the interesting work that needs to be done for IronPython is in the IDE and other tools. 
&gt; I'm not really sure why they dropped J#, I do. J#, and J++ before it, only supported an out of date version of Java. Had J# been capable of running modern Java at the time things might have been different. But really, it was useless since day one. P.S. I think "modern Java" was version 1.2 at the time, with MS being stuck on 1.1, but don't quote me on that.
&gt; Is it going to get new features? Does it need any new features? Microsoft keeps asking that question because, thus far, no one can point to something specific that WPF needs. (Besides performance, which probably can't be fixed.) &gt; Is it in the same state as WinForms? Basically yes. It may get bug fixes, and will certainly inherit anything that is added to desktop development as a whole, but that's about it. On the flip side both are still recommended frameworks for new development on the desktop. They aren't growing, but they are not dead either. &gt; Are you guys going to kill it and lift a lot of restrictions on WinRT for desktop development? Last I heard, they are going to start exposing WinRT features (e.g. charms and contracts) to desktop applications. 
Bingo. Otherwise this would be pretty simple.
&gt; Project wide xmlns imports. What, are you a VB programmer? Expecting convenience is not the C# way. 
Send me this list, and anything else you can think of, to jonathan@infoq.com and I'll run an article on it. Sometimes we get lucky and the right person sees it. And if not, at least we can offer links for people to vote on your ideas in UserVoice. 
[MailKit](https://github.com/jstedfast/MailKit) is the best IMAP and POP3 library for .NET out there (yea, I'm biased, but it's also true) and it's also free and open source. No need to spend money on this.
That does look very good. 
No, that's quite different. Python Tools for Visual Studio is basically what it sounds like, it provides support for working with Python in Visual Studio, but the Python code can run on the standard CPython interpreter. IronPython is for running Python on .Net, which lets you access all the .Net libraries from Python code.
The bind include is a whitelist of acceptable values for the model to update. Not sure if the other one is doing the same or not. Probably though.
No it's not. It's like saying "Some team other than the Visual Studio team released a plugin for Visual Studio that adds Python support, and supports both IronPython and CPython."
Oh just re-create it just like everybody else. It'll be a fun exercise ;-) Now, in all seriousness you probably don't even need to use a program to do this. SQL Server Migration Assitant perhaps? Something along those lines ...
[Sql Server Integration Services](http://technet.microsoft.com/en-us/sqlserver/cc511477.aspx)
Why not [BULK INSERT](http://msdn.microsoft.com/en-us/library/ms188365.aspx)? 
sigh. This is not directed at you. This is just my bitching after my research into the various BULK LOAD methods MS provides. They all need "shared memory" -- meaning the data file needs to be readable by the DB server *direcly* 
In that case, what about [SqlBulkCopy](http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlbulkcopy%28v=vs.110%29.aspx)?
C# and Ruby
Exactly. Hearbleed is a perfectly example of this.
Thanks for the feedback. I will take the new project option under consideration.
.Net has a lot history in the sowftware development, this reason make the suport and developer be necesary, the offer of this technology allways go be good. 
&gt; Even so, that sounds like an extremely unlikely sort of situation. Well, the OP said: &gt; Should note the desktop app is 3rd party, so I can't play in the code. Imagination isn't needed in this case.
You can circumvent the blocking maybe by splitting the data, inserting it to multiple temp tables in parallel. merge them again on the server
While this seems like a fun product, it is more of a playground. If you want to be productive with ASP.NET, you need Windows and Visual Studio.
One of the goals of ASP.net vNext is to provide cross platform development. While it might be a fun project now, ASP.NET dev work on a Mac is going to be a fully supported feature.
On a server, you need to download and install the Web Platform Installer. From there, you can search for Windows Azure Pack Service Bus. Once you have it installed, you'll need to connect to the endpoint from the Windows Azure Pack Admin Site. 
I have installed Service Bus and did the configuration wizard. It says that it's using a certain https port but other than that it doesnt give me anything resembling a URI. Where can I find the URI for the endpoint?
As soon as I get home tonight, I'll take a look at my config and I'll get back to yiu
&gt; HTML5/CSS3 I can't wait until something better comes along. While tooling is going to get better, I'm allowed can dream of a better, easier future.
&gt; "the three of us who were hired were hired because we were the best of our classes"... "Our staff is no incompetent." - I'm sure you were great students, but however you'd like to describe it you've just confirmed that CoderCamps makes instructors out of people who have zero work experience; people who knew next to nothing prior to the camp. That's pretty shameful in my view. Based on my research of their competitors in the .net camp space, Coder Camps is the only one to have such piss-poor standards. I wish you the best in your career and hope that you move on from your role as an instructor and into a real position soon so that you can work on real-life projects and actually start your career. Ask yourself who benefits the most from your work there as an instructor... it's not you or the students, it's Coder Camps. I.E.: The salary for an experienced instructor minus your salary equals extra profit for your employer. Students who shell out $9,000 for a 9 week camp deserve instructors with real-life experience. 
Ahh...that's reasonable. It would've been better if you specified that this was the issue in your initial question. 
The only way I can think of is having clear boundaries between the application service layer and the ui layer. This is really hard to achieve completely in reality and these apps have likely been upgraded by now given one has had MVC for 5+ years and the web ui world has changed so much that you really would have needed to overhaul in that time period. 
Azure Websites are also free if you don't need a domain name or SSL (with some more constraints)
Ignoring how dubious the premise is (program for us for free and we may take you on), what on earth do any of those technologies have to do with dot net?!? It's a strange mail to be getting for sure...
It is hard. The only way I can see that coming about is to segregate the work teams so that the services are specified and developed to a spec in way that makes them somewhat reusable, or at least very clean. And I'm sure that in many large environments, this is what happens. I know they exist, because I'm in one for now; lucky me. This isn't normally the case. That said, most web apps I've seen aren't nearly well staffed enough to handle this. The front-end developer is often the same as the back-end, and that kind mixing of duties often leads to unintentional coupling. When you think about it, web apps really aren't exempt from the old chestnut: Maximize cohesion and minimize coupling. It's just harder than it sounds I guess.
Yeah I wouldn't let this fly to be honest. I present for user groups a lot and most of them are free. I try to avoid attending user groups that charge its attendees. I don't agree with charging because my company is paying for me to be there. I don't like the idea of my company paying for my to travel and a night in a hotel whilst the organiser is profiting. User groups are odd things and its often very political. My local user group has a very anti corporate mentality. They won't let you sponsor an event, pay for bar or pizzas. Instead they have an illegal bar in reception where they charge £2.50 a beer and no food. I presented there recently and the organiser took a real dislike to my suggesting they would get more people attend if they have corporate sponsorship. As an example of this, I did an event yesterday in London where we didn't officially market it (it was a last minute thing) and we had about 50 people attend. Last month we did an event where we sent out emails and posted on our blog letter people know and we have 500 people register within 24 hours. If it wasn't so much more work I would organise a user group myself. 
This has nothing to do with log4net.
Care to elaborate on that? I found that it has something to do with JavaScript but I don't know what. 
log4net is a .NET framework for logging. It is server-side. This error you have described is from JavaScript and is client-side.
I've been involved with several groups in FL and SC/NC and everything has always been free, including monthly meetings, and annual code camps. They've always been volunteer run, with mostly volunteer speakers (the speaker's companies may have paid for them to be there, but they were not compensated by the UG). There is usually some form of corporate sponsorship but nothing crazy (our local group gets pizza and beverages from a recruiting firm, and I've seen MS reps, recruiters, and component vendors at Code Camps). I've never gotten a single email from the groups that weren't directly related to the meetings, or the very occasional "Joe's shop is hiring" sort of thing. 
This is the browserlink functionality of Visual Studio 2013. http://www.asp.net/visual-studio/overview/2013/using-browser-link It has nothing to do with log4net.
I'm not saying it has anything to do with log4net. I laid out the situation and then said what error I was getting. Then I said I found a page that offered a remedy, but I want to know why what happened, happened. 
What browser were you using?
I have VS set to use IE 8.
I really doubt the ancient IE 8 is supported for this feature. It most likely uses JS features that IE8 does not support.
http://books.google.com/books?id=KwkFRPzuHCAC&amp;pg=PA1&amp;lpg=PA1&amp;dq=Origin+of+name+c+sharp&amp;source=bl&amp;ots=KFfxoUql5a&amp;sig=Jr7bjxZHRs_GDWpA9WsxIMZy2y4&amp;hl=en&amp;sa=X&amp;ei=5eQRVPPzKuf7iwK8rID4CA&amp;ved=0CHAQ6AEwCA#v=onepage&amp;q=Origin%20of%20name%20c%20sharp&amp;f=false
If I'm correct I think is : return RedirectToAction("Action");
I had assumed your desired 'ability to expand' meant you would eventually do some of your processing on the cloud. Is that not the case? Using an azure queue would make it easier to eventually scale up in the cloud. 
I think what the PI means by "ability to expand" means buy and farm up more servers. Like I said, we will very likely run into institutional problems trying to anything cloud-based.
I'm pretty sure that browser link requires IE10 or higher. 
Take a look at this demo from Telerik (http://demos.telerik.com/aspnet-ajax/ajax/examples/common/showingwebcontrols/defaultcs.aspx), I think it demonstrates the functionality you need. Alternatively, like Chongo said, you may also use a RadAjaxPanel which wraps around the controls you would like to Ajaxify and then use a RadAjaxLoadingPanel to display the loading icon.
I have return RedirectToAction() but it doesn't go to that action.
I figured it out. I can do: return new EmptyResult();
The action is in the same controller?
Try RedirectToAction("ActionName", "ControllerName");
As a note, any public method will be able to be called over http.
Because most .NET CMS builds depend heavily on them 
I've always found ServiceStack to be one of the better documented projects out there and Demis Bellot (its author) is incredibly active on Stack Overflow/Twitter/G+, etc. As for your question, try taking a look at some of these examples and see if they help: https://stackoverflow.com/questions/15862634/in-what-order-are-the-servicestack-examples-supposed-to-be-grokked/15869816#15869816. If not, ask back here with your question(s). 
It depends, the advantage is the DB / WCF server will be closer together, but that will likely be negated by serialization overhead and the fact that you'll be sending a larger text payload over a service to the client instead of a binary one. There are plenty of reasons to have clients talk to services instead of a database, but your usecase is not a strong one. 
A task coming up soon is going to be rewriting a .NET 1.0 VB project in MVC C#. I get to start from the ground up. I'm so excited. 
I had a sick kid at home and haven't had a chance to log into my environment. Hopefully I'll be able to get to work in the morning
I wouldn't use EmptyResult if you are returning the result to JavaScript. Instead you should be returning a JsonResult with the correct status or an error code/message if something happens. Returning EmptyResult you lose the ability to broadcast the error to the client Generally I always return a jsonresult for javascript endpoints and include anyinformation I might need. A good example in your case is returning the number of rows affected by the stored proc. 
Sometimes your .NET app can be hosted in a really crappy data center that still hasn't upgraded past .NET 2.0 (looking at you Nestle Europe). In this situation you're stuck using webforms. Other than that, you're correct. Any webforms apps you come across should be re-written in MVC.
Because setting up routes and such takes time. I have written a couple of internal web forms "sites" consisting of a single page and a couple of hundred lines of code. And usually with a lifetime measured in months. Web forms is the fastest way to do that, and the advantages of MVS doen't really come into play at that scale. But apart for that, you are right.
Sitecore web forms here, legacy--
Then [disable browserlink](http://blogs.msdn.com/b/webdev/archive/2013/06/28/browser-link-feature-in-visual-studio-preview-2013.aspx) (point 4)
2-way databinding. For simple CRUD screens, you won't get up a working site faster than with webforms. That's what they're good for. They suck when it comes to general purpose websites, but for sites which let you edit data, there's no easier alternative. And the best thing is: you can use them in an MVC project :)
This is what I use and can only recommend it.
Thanks! This looks promising, can I use any GIT plugin for VS2012? Is there one you recommend?
If you want to be able to maintain a lot of page state automatically with little effort and you don't care about the efficiency of the code. WebForms was really easy for that... yes, it was ugly and I always felt dirty but it is what it is.
I signed up for that but it said free trial and it requires VS 2013.
[You can use 2012](http://www.visualstudio.com/en-us/get-started/connect-to-vs.aspx)
Are you sure? Bullet point #1 says: Connect your team project to Visual Studio If you haven't already, install Visual Studio 2013. I'll give it a go and report back. Seems like the trial is only for additional features. EDIT: It seems to work with 2012 but you have to manually configure it. I am still skeptical about performance over the wire, especially the tiny wire we have running down here to New Zealand. Thanks!
[GitExtensions](https://code.google.com/p/gitextensions/) is both a VS plug-in and a stand-alone app. I like it a lot.
No problem. If your connection is slow you may have some lag pushing and pulling your changes, but the transactions should still complete. 
Have you used the GIT option before? Does it automatically create the "local repository" ? I'm not really familiar with GIT. Ideally, I would want something that works "offline" and lets me sync to the cloud every so often. (yea, internet here is that mediocre)
I haven't yet, but from what I've heard it's just like any other online git repo.
So you will do webforms apps until the end of the world? Mainly with the relative small apps you must start pushing to new standard technologies/framework, else you will never move
I like Bitbucket. Private repos for solo/small teams, Git or Mercurial. Issue tracking, wiki... 
I always recommend people learn the command-line interface to git, but if you're absolutely dead-set on using a UI, github's "GitHub for Windows" is usable with any git remote (not just github) and has a really clean interface.
I used the command line for ages (used to make Win 95 boot into "dos" and only ran "start" when I wanted the UI) but I'd rather not have to type more... Is there a particular reason you strongly recommend the cmd?
I don't know about that. MVC lets you effectively pre-render a page so that your front end doesn't have to. In some scenarios (e.g. nested iterators), this can give you a performance boost.
In Git chances are you want to create the local repo first (which is super easy). Then you configure your remote (i.e. what bitbucket gives you when you create an empty repo) and then you push to it. So you'll be committing to the local repo and when you wish to, pushing to the remote so that it has all you have locally. 
thanks for that... i read this link: http://rogerdudler.github.io/git-guide/ which sums it up nicely. git is exactly what i am looking for... a "local undo cache" and a "cloud backup" now i can do a local commit, make a bunch of hacky changes, and revert if i dont like it... or commit and then push back to the cloud when i am at a nice stable checkpoint.
I've been using assembla, It's been pretty good to me. 
As you get used to it, make sure to learn about branches. This is the best way to do hacky changes all the while never losing anything and being able to get and work on a version of you code without the hacky stuff. You can basically say "hum I'm refactoring this which will break things until I'm done". So you create a new branch for that task. When you commit, you'll commit the hacky stuff to that branch. Need to work on the stable version? You can quickly switch to the master branch. Once your refactoring is finished, you will merge your changes from that branch to master. This is preferable as you can maintain as many different branches as you need (multiple unrelated refactorings, plus a branch for each release that you need to maintain for example) and even push them all on remote for safe keeping. I guess this sounds a bit confusing at first but you'll quickly get the hang of it with the different guides and tutorials that are available.
To be fair, that's just how tech works. At this point MVC is becoming obsolete too, with the advent of client side javascript mvc; and webapi is taking over. 
I never used MVC. I have no idea how it works. Our company doesn't use it yet (but I heard there is a project where they trial it).
Thanks for taking the time to write all the detailed information but I do understand branching and advanced source control methodologies... I just don't want to bother with it for my own personal/side projects. It's really all about being able to roll back to before "I started hacking at this idea/project until 4 am without any specific goal in mind" I don't want to do merges (at home), I only want and undo (and offsite backup). =)
Oh dear god I was in that situation with a recent freelance job. In the future, that shit will affect my per hour charge.
We use rad at our business too. It is pretty convenient, but does take away a little bit of control from the developer.
I agree... and I am usually OCD but I've been running w/o source control for way too long =)
I think you are on the right path with a strong cache. If the OP's company has the time/money to do some redisign my company found it useful to have a local db on site that would integrate with the our primary db. The customer had almost instant access to any of their own data which was pushed out to our DB when it came in. The downside was that there was a nightmare amount of possible failure points and we constantly had to re-enforce the logic around syncing the server and clients (as i called them). That and if they had to view some aggregate data between customers that data wasn't as *live* as some would have liked.
I was skeptical of this comment as well. I inherited a website that was written off continent and they only use 1 route! I am talking a few thousand users a day and I work for a fortune 500 company. Now, they did most of the application wrong and it is horrible to fix... but they still got this giant behemoth working with only 1 route. 
I've had lots of success with this scenario, particularly with the NetTcpBinding. That's the route I would go.
Maybe you should look deeper into the routing because if you waste your time making routes, you just have to learn the framework better.
&gt; If you're so enlightened, tell me, why shouldn't I use e.g. WPF in a new project? What should I use instead? WinRT? As that's the only desktop framework left. Oh wait... I should create a website, right? Um... no you should definitely use WPF. Use WinForms for legacy stuff only.
There are lots of reasons. * You want your app to be sluggish and unresponsive * You want to waste mobile users bandwidth by pushing viewstate around * did I mention viewstate? * Every javascript developer should be familiar with __doPostBack() and the rest of the webforms ~~cruft~~javascript api. It's the bees knees. Totally not a hack at all.
I haven't done WebForms in years as we started using MVC around version 2. With that said, your comment is completely unfair to WebForms. You can do a WebForm based site without ViewState. Performance is like any other language/platform - it can be fast if you know what you are doing and slow if you do it wrong. Lastly, if one knew the naming conventions of the .NET controls, you could use any javascript framework that you like. I think WebForms got a bad rap precisely because it abstracted so much of the HTTP/Web conventions from the developer. You had groups of either a) Windows (WinForm) desktop application or b) new developers that just made a site without thinking of all the performance implications of having a stateless connection to the client. 
&gt; Is there a particular reason you strongly recommend the cmd? Because when using git, you will occasionally find that you need more information that any UI that I've used makes easily available. The command line is far more explicit in what you're doing when you issue a command, and provides more information at your fingertips when you're trying to research a bad merge or other issue.
I think what you're getting at is: web forms are centralized, and in some respects simpler and easier to support, especially for small applications. MVC, by its nature, is going to spread things out, and make things, in some respects, unnecessarily complicated. Example: Simple form, one submit button, no need for AJAX, redirects the user to a "thank you" page on completion. A web form might be a better choice than MVC.
I think it's apples and... pears, maybe?
I've never worked with a webforms site without also having to dig through the abstraction at some point. The problem with b) is that webforms leaves you few options for dealing with a stateless connection to the client. It's designed around providing state, so if you abandon that, you are not really using webforms anymore, only a small subset. The only way to use it properly is to not really use it. OnBubbleEvent()? no way that is efficient. 
Came here to agree with you here. There's a lot of things built on top of asp.net that are very complicated and aren't just raw web forms sites where you can modify everything.
In 5 years, the question will be "why would anyone still use mvc?" The answer will be the same. Companies really only care that a particular business process is optimized. It's all about minimizing payroll hours and gaining a technological edge on the competition. Typically, they will have devs on staff that they trust and will defer to them on the best technology to use. Most devs would love to switch to the newest technology, but when you're presented with a problem and a tight deadline to solve it, most of the time you fall back on the technology you know inside and out. On a side note, devs always have and always will debate which technology is better, Java does this, c# does that etc. At the end of the day, programming is about solving problems. If you solve the problem in a satisfactory way, mission accomplished.
Is MVC really practical for sitecore though? I just started using it but I get the sense that using sitecore with MVC is overkill. Like having 2 controllers basically. I don't have an opinion myself yet so I'm just asking.
How'd you manage that? MVC 1 wasn't released until .NET 3.5.
.NET 3.5 still uses the 2.0 CLR runtime iirc
I see MVC and Razor simplify in both scope and complexity, and become more like an auth/api and templating engine middleware in the future. Compared to how it was used just 2 years ago and now, i can see clear signs of aging, redundancy and obsoletetion by client side mvc. 
Bingo. A compelling business case must exist for profit-generating software to undergo major changes. When you are responsible for making technical decisions on $200M+ software, getting the business decision-makers to sign off on even an incremental rewrite (if possible) is no small task.
http://www.microsoft.com/en-us/download/details.aspx?id=22833
I can think of a number of reasons. MVC doesn't pretend to be stateful. When was the last time you used Viewstate in MVC? When was the last time, in MVC, that you had to deal with a bunch of convoluted page events that exist solely to mimic a Winform (thereby abstracting away the fact that you're working with a web app)? What about PUT/POST/GET/DELETE attributes in MVC? Better yet, how do we set up RESTful services in WebAPI? MVC treats HTTP verbs as first-class citizens compared to webforms. In what way could routing be abstracted from the web? That whole concept is very much URL/URI-centric.
Bingo.
You bet. Here's the future for you: [MVC6](http://channel9.msdn.com/Events/dotnetConf/2014/MVC-6). They're still different fruits, though, with difference uses: MVC isn't Razor, and there will, I think, always be a place (until Angular, KO etc. get with the program) for some dynamic preparation server-side.
At this point i don't use much of the MVC bits beyond simple tempting. Kendo or angular, web api. 
Why would you ever use MVC when you could use WebAPI and Angular.js?
When using low level api's (like sockets), you will have to do everything yourself. You need an ssl (or other encryption lib) and do all the hard work encrypting / decrypting yourself. Personally, I would never go down this road, unless really necessary. Do you REALLY need that speed? Because, if all you need is high performance server to server or client to server communication, just use HTTP. HTTP is widely supported in all languages and frameworks, it already includes the needed protocols, security, etc. you expect from a communication protocol. Also, http as a client/server communication protocol is not only useful for 'websites'. Database servers (like MongoDB) also use a http connection for client/server server/server communication. For developers, it's much easier to grab an existing protocol like HTTP, because they can focus on writing their core program, instead of re-inventing the wheel and writing boring and complex socket/encryption code. You still get all the advantages of http (speed, low latency, security, websockets, etc. etc.) So, unless you are writing a high performance game server (where low latency, zero lag and high troughput are prio 1), I really would not go down the road of writing all this stuff yourself.
Unless you're primarily a software development company, it's rarely the developer's decision. 
I've been working with asp.net since it was in beta, and it's disappointing to me that people jump on the "Webforms is crap, MVC is soo much better for everything" bandwagon. Not saying you are doing this OP, but this is basically the sentiment every self-styled expert in asp.net will espouse. You'll see the same type of stuff with vb.net vs C#. C# is for the cool, smart, cutting edge "real" programmers, and VB is for all the guys who don't know anything. Some points: *Webforms doesn't give you total control of output.* This is totally true, but very often, you don't need total control, especially if you are writing some business application that a handful of people are going to use in an intranet situation. *MVC is testable and WebForms isn't* I've found WebForms to be at least as testable as MVC, and in my opinion, you can actually get more of your logic tested with WebForms than MVC, but most people don't know about how to architect their webforms applications the MVP pattern, so people just assume it's something you can only do with MVC. *Viewstate is the terrible* The viewstate can get out of hand in some situations, but in 99% of the stuff I've written over my life, it's been beneficial in that it speeds up development time but removing that concern from my plate. *Controls* Personally, I've found the ability to have reusable controls preferable to partial views. The newer stuff I've been working on is mostly MVC, and if someone asked me I'd tell them to start new projects with MVC for no other reason than that seems to be the trend these days, but if the project was a somewhat complicated form, where total control over HTML wasn't a requirement, I'd definitely expect a developer to be able to create a webform solution faster than doing the same thing in MVC. 
I'm a beginner so I'm not in the position to state that WebForms is crap as I don't have experience with creating and maintaining different project types but WebForms just seems so different from not only MVC with asp.net but also other web frameworks. For example, I've started dabbling with rails and I was able to wrap my head around the vision of that framework immediately given my experience with ASP.net mvc (obviously because the patterns are the same). Someone who's seasoned in webforms development and is not familiar with MVC will have a harder time working with other languages frameworks because WebForms seems like a very unique (whether good or bad) approach to web development. For a beginner, I feel like you're doing yourself a disservice by learning WebForms as it's not really an applicable pattern to other languages and frameworks. Obviously it's good to learn WebForms for the sake of expanding your knowledge but it's definitely not a good representation of how the web works since it abstracts away so much of the web. 
&gt; 2-way databinding. For simple CRUD screens, you won't get up a working site faster than with webforms. That's what they're good for. This is untrue ... with MVC T4 Scaffolding you can get all the CRUD screens in seconds once your model is complete.
I was afraid of that. I was hoping there was something in the framework I could run bytes through to encrypt/decrypt without much added labor. It's not a game server, but it has the same requirements. Thank you very much for your input :D.
Why don't you just use SSLStream?
I'll see if I can get it to work with the event based style I am using. This might be the answer to my question; thank you very much :).
It's not the screens, it's the 2 way databinding without any coding. You can't do that with the scaffolded stuff as the logic to do that is inside the datasource controls and those aren't there in MVC, you have to hand-code the update of the data containers with the new data coming in from the client. 
&gt; For a beginner, I feel like you're doing yourself a disservice by learning WebForms as it's not really an applicable pattern to other languages and frameworks. I agree totally. If someone is using webforms and they DON'T really get what is going on (they don't really understand the underlying web technologies) then they will have some REAL hard times when something isn't working as they expect it to. It's nice that it abstracts a lot and removes a lot of the plumbing work, but if something goes wrong and you don't understand the plumbing, you'll have some serious issues. 
I did this a few years back. I would advise you to get as much testing in place as possible so you can validate that things are working the same as before. The last thing you want is "it worked just fine on the old system", which can put the entire upgrade at risk if the right (or wrong) people start freaking out.
&gt; Because setting up routes and such takes time. Not really, and the default routing should handle this easily ... {controller}/{action} So ... Products/Create Users/Delete BlogPosts/Index
Hahaha, "testing" he says. Haha. Fortunately this chunk of the project I'll be working on is used by a handful of customers very rarely. I've got a solid week of meetings to get an idea of what is actually needed by the system.
Or better, install .NET 4.5.2. Apps that where made for 4.0 will run just fine and enjoy better performance.
If you don't need to back it up to the cloud you could go with TFS express.
Orchard CMS is too
I've used Microsoft's Git extension for IDE integrated SCM, but [SourceTree](http://www.sourcetreeapp.com/) is actually pretty nice. Also, Posh-Git is nice too for PowerShell.
I dont really get the part of doing it faster with web forms. For even prototyping its the same, unles you dont have experience with mvc. Maybe I just havent worked in a really simple web app that would make sense to have in web forms. The ones that I've been with web forms, was because the team really didnt knew mvc properlu.
I'd like git over ssh to be supported.
Late to the party... Bonobo is an OS Windows based git server. http://bonobogitserver.com/
My favorite thing about SourceTree on Windows is that they're very aggressive about keeping both the app *and* the bundled git installation up to date. One less thing to manage on your own. I have also used [Github's](http://windows.github.com) gui in my former company, but exclusively for its bundled git install because their gui is both terrible **and** really dumb, always a winning combination.
Ohhhhh.... thanks for the insight.
Do you absolutely have to use ssl? Or, do you really just want to encrypt the bytes being sent over the wire? 
Something else I like about SourceTree is pageant. I never really read up on how to set that up, but I just launch SourceTree and it launches pageant for me. I'll probably look into setting that up one day when I remember and not tired.
You can force VS to compile your project to target a certain .NET Framework. Right-Click on the Project file in Solution Explorer, then select properties. In the Application Tab(Should be the default that opens up), you can select the Target Framework. Roll it back to 2.0 and see what breaks :)
You don't really mean WordPad, do you? :) No, you don't have to use VS; ASP.NET websites don't have to be compiled in advance - they can be just a bunch of plain old text files. There have been various additions and improvements to ASP.NET after 2.0, but fundamentally it's the same. There have been a lot of improvements to C# and the class libraries since 2.0 though, and most of the classic ASP.NET framework has been rendered obsolete by the "new" ASP.NET MVC framework, and you would be much better off learning that. Are all the servers so tightly locked down that you can't get a 4.5 framework installed on one? 
Tldr; if you want to learn asp.net download free tools from microsoft (express moniker); and try it on your own machine - no servers needed. 
Wasn't the whole point of ASPNET vNext that you didn't need fancy tooling to get up and running? Why is there scaffolding needed to get started at all? If scaffolding is required to get up and running quickly (i.e. to avoid writing boilerplate code yourself like the description says), I don't know whether this whole ASP.NET rewrite will end up where they thought they would end up. Edit: I don't know why I get downmodded when I ask a question? Isn't the whole point of the commenting system to be able to reply if you disagree? 
And I thought I had it bad being forced to target ASP.NET 3.5.
It not so much with simple forms (although I'd say it's still faster and less error prone), it's when they become somewhat complicated. "If the person selects this then we need to swap out these areas, and change this from a dropdown to a radio button list, and depending on what they select here we want to validate their choice there against the database etc. All the stuff you'd be doing with javascript and manual ajax calls to the server, writing routes/handlers for that on the server, returning json or whatever, acting upon the results on the client, manipulating the dom based on business logic, those are all things that webforms could just handle for you. 
&gt; add `pageant %UserProfile%\.ssh\id_rsa.ppk` to your startup folder Oh, it's that simple? o:
Yup, the only tricky part is how to get the RSA key from its PKCS #1 PEM format into the .ppk format used by pageant, but as mentioned `puttygen` will do that. The rest Just Works&amp;trade;. You could probably even generate the keys from puttygen by itself, but my trust is much higher in openssl than in PuTTY.
Gilded (: The PluralSight video series and book you linked to has helped me tremendously. I actually just received a really, really nice job offer, and I'm almost positive I would not have landed it without the base knowledge I gained from these two references. Cheers! And thank you (:
No, the point was to ditch System.Web and all of the crap that it entails.
Congratulations - that's awesome!
Server 2003, .NET 2.0 and no Visual Studio? I hope you're polishing your resume.
Yes. C# is one of the most commonly used programming languages and is used in companies of all sizes. You tend to see postings form larger companies the most but that has more to do with their recruitment strategy vs smaller companies than with .NET being used only in enterprise environments. Try getting in touch with a recruiter. They will likely have plenty of jobs available for .NET developers.
A lot of startups use .NET too.
And for cheap, thanks to BizSpark. 
They are out there for sure. I do agree though .NET and Java are more often enterpris-y than not. Especially .NET which often "requires" more expensive initial investment with Windows Server, SQL Server, etc. The Enterprise setting can really burn you out, sometimes a smaller shop really is a breath of fresh air.
As a BizSpark alum, agreed. 
I wish I could rejoin BizSpark, actually. Not having access to MSDN for the last few years have been "rough". I actually feel like our SaaS is in a better position now to take full advantage of the perks.
Were you able to graduate to the follow on program? I believe they also have programs for devs getting ultimate at 'renewal' prices, rather than outright purchase prices too.
I was offered it, yes, but we weren't ready to shell out the money at that point. Not sure we'd still be eligible. 
I guess it depends on circumstances. But if I'm working on the same project, I'd hope 3 years later it's either dead, or able to afford a small per dev annual cost. It's kind of like resharper, sure it's a couple of hundred bucks, but it adds far more in productivity.
While I agree it's not easy, you don't have to become a millionaire to be successful. "Do something you really like, and hopefully it pays the rent. As far as I'm concerned, that's success." Tom Petty 
I'm a C# programmer building electronic medical records for a startup in San Francisco. Before that I built shrink wrap medical training software in DC. The jobs are out there for non-enterprise .NET. 
This is the best choice. Free for 5 users and private. Git would be recommended
In a word - Yes. I've worked for both startup dev houses and multi-national agencies using .NET CMSes. The .NET ecosphere is gargantuan. With vNext on the horizon, hopefully we'll see real Linux support allowing for cheaper hosting/wider product use! That's sure to be a real boon for .NET and IMO one of the things that's really been holding us back. With MSFT really pushing the Portable BCLs line we're getting there. It's also worth noting a lot of "indie" game devs are using C# and .NET So, yeah, there are a vast range of career options beyond your typical enterprise application.
For the record were a small 13 man . Net house. The Microsoft technology stack isn't just for enterprise. We even built our startup www.staffsquared.com using . Net! 
Terribly insecure, do not use this.
Look for agencies, a lot of agencies handle both enterprise and smb work. The smaller the agency the smaller the projects but more intimate work.
To be honest, I've only built 1 site with Sitecore MVC. It was a brochure kind of site, so it was really just using the Razor syntax which is much nicer for controlling your HTML output (compared to webforms). 
I've been a .NET developer for 8 years now. 5 years in a small company with 7 employees, 3 years in a private school now so the jobs are definitely out there. I think that quite a few of us don't like moving on because the jobs are so comfortable though.
I agree, the speed and efficiency improvements in development from Visual Studio make it worth it even if it is a part time role.
And we would have gotten away with it if it wasn't for you meddling kids... 
Been working with .NET for over 10 yrs in a variety of different size companies and verticals. From document and records management, to healthcare, online gaming and now education. Lots of non-enterprise companies out there and using it! vNext will open .NET up to non-MS companies. C# is considered a very good language by most developers and I really think people developing on/for Linux and Mac will give it a go.
Personally I know a lot of medium companies using .net. But I am a startup-man and I can tell you that in that scope there is really a low number of startups using .net or related microsoft technologies _compared_ to others more "cool". I hoped for years to see some change thanks to mono but I am still waiting Edit: Related to this, there are also few people looking for .net position on startups, so if you find one probably they have some open position ready for you. In the last incubator where I worked there was only one startup using .net and they had 4 open positions for months because it was very hard to find someone with related skill and with a compatible culture 
You can start by looking at Type.GetProperties() using the type of a. 
Do you mean in the select statement? After "select a" I added ", a.Type." but there is no choice for GetProperties(). 
I'm on my phone so this is approximate. After your code… foreach (var a in plans) { var t = a.GetType(); var properties = t.GetProperties(); var names = from prop in properties select prop.Name; } 
Thanks!
If spy++ can access it there is a way
Can you get the handle to the control using FindWindowEx? 
Yep -- getting the hwnd of the control isn't an issue, it's just getting the data out of it that I'm having issues with 
Do you have your List model you want to populate? If so, check [this](http://msdn.microsoft.com/en-us/data/jj592907.aspx) out.
The real reason to use a server to render HTML: It's what the web developer knows how to do. Running 10,000 "nested iterators" on one server, versus running 1 on 10,000 clients? Yup. I'm not buying the "performance" argument. With a single-page application, you'd have all JS and app files loaded (and probably cached) up front. The server wouldn't have to do anything but find data and serialize it. It could even cache that just like the HTML. Additionally, the SPA will be more responsive, as it will give the user immediate feedback that they've got a working app long before the data even arrives. As opposed to the server-side approach, which basically makes them wait until the server is done rendering the whole kitten kaboodle. The added benefit being that more than just a web browser can consume JSON (or XML) from an API. As opposed to HTML which is all but useless to anything but a browser.
&gt; prefer coding in C# instead of Javascript. Anyone that actively avoids JavaScript needs to stay the hell away from web development. JavaScript is a reality of the business. 
Stored procedures cannot return recordsets by definition, you can use output variables with a user-defined table type to get similar behavior, [this](http://stackoverflow.com/questions/2473102/can-you-call-a-sql-stored-procedure-that-returns-a-record-set-and-have-those-val) StackOverflow post may help.
Going to do a little more digging tomorrow with spy++ -- will let you know what I find
In the coming year, it won't be problem if you choose C# as your amatuer project. Because ASP.Net vNext will have a cross-platform version which you can run in Linux system and get levrage of the open source world.
Actually I am doing fine in web development. I am using both C# and JS and choose different architectures depending on the web site I am working on. Not every web page needs a heavily client-side oriented architecture. For me it's not a matter of religion, but of choosing the right tool for the task at hand. 
No pardon needed, it's nice to hear things have worked out well! SignalR is amazing and can be used for all sorts of cool stuff. Kind of sad 95% of the tutorials are "how to make a chat".
Alright...Spy++ and Winspector both are able to find the class without any issues just not pull the data from it. WM_GETTEXTLENGTH always returns 0. The class looks to be a proprietary editbox class. One thing that I have found is that if I click inside the control and ctrl-a, ctrl-c, i'm able to copy all of the text out of it. I suppose I could look into a way to go about doing that programatically, but I'd really prefer something behind the scenes enough that it would guarantee not affecting the Ux... Any other suggestions?
i wish people would stop trying to use sprocs with ef.
Use Javascript *per row* and pull out the data that was binded to the control by the server. But, you are only going to get the data that you bound to the control (client side). What are you attempting to accomplish? That might help others in providing possible solutions for what you're trying to achieve.
Eh.... Well SQL is returning a list of places to be plotted on a map. That data is bound to two things, the markers (On the map) and the data list (On the side, each with its own link button). On mouse over of the linkbutton, the map will relocate to the correlating marker. Keep in mind, the data is all being pulled from SQL and nothing is 'hard coded' into HTML or anything else. Most examples I have seen including the ones that Google Map API provide do this. TL:DR This is going to work like trulia or some other dynamic map site. 
Couldn't you add a hidden field next to the link button that contains the coordinates you need. Then with Javascript, pull that info out of the hidden field?
I updated the sql to include a "INTO ##TempTable" clause and then "SELECT * FROM ##TempTable" at the end. However, on the code side it still just picks up a value of -1. Should I write the data into a non-temp table that I create at run-time and then use EF to query from that table? I can add a field (e.g., userID, timestamp) so that if two (or more) people run it at the same time there won't be a conflict.
Correct! Like Google or [like this ] (http://i.imgur.com/qDAteyM.png)
Since it is Javascript/JQuery (client side), you could use something like Firebug (add-on for Firefox) and see how they did it.
Angular is not going to "tank" making a 50 x 50 spreadsheet application. Show me a demonstration. Prove these "performance issues". Jsbin. Fiddle. Plunker. Whatever. Even in the unlikely event you were right, which you're not, it's nothing that couldn't be fixed in an hour or two. Rendering Html on the server is dinosaur technology, for the most part.
I recomend http://microsoftvirtualacademy.com/ in this site you can study all about .Net Technologies 
First thing I would try is to change System.Timers.Timer to System.Windows.Forms.Timer
Where the heck did you get that crazy idea?
Don't use EF. Just use a SqlCommand.
I suspect your problem is modifying the UI from the wrong thread. You are supposed to only modify UI objects from the same thread that they are created on. Try dispatching your call to renderImage to the UI thread. You won't need your lock as there is a natural lock caused by there being only one dispatch thread.
If I understand correctly, you want different build profiles. The most basic building block you should be looking at I think is **MSBuild**. You can create custom build configurations for each target. We have a [YUI minification task](https://github.com/PureKrome/YUICompressor.NET) in the build pipeline along with a Grunt build. We call Grunt very simply by &gt; &lt;Exec Command="grunt" WorkingDirectory="DirToGrunt" /&gt; (Node is installed on our build environment) Unfortunately I'm not familiar with TFS Online's build capabilities. 
If I understand your requirements correctly you need : * A common main application. * Client-specific configurations for the main app. * Some web apps. I would create a solution purely for the main application and a separate solution containing multiple projects, one for each client configuration. [This](http://www.visualstudio.com/get-started/overview-of-get-started-tasks-vs) and [this](http://www.visualstudio.com/get-started/build-your-apps-vs) are a good starting point for getting up and running. If you've taken a brave pill you could look at creating a NuGet package for the main application, which can then be referenced in the client-specific configurations. Hope that helped. 
I figured it wasn't a standard text box. Aside from programmatically ctrl c ctrl v or pixel reading, you're out of luck as far as I know. I would recommend googling the text box class, see if you can find any information on it
I said "Anyone that actively avoids JavaScript". You somehow read that as me saying *you* needed to stay away from web development. So I can assume that either: 1. You actively avoid JavaScript. In which case, I think you should stay away from web development. 2. You have poor reading comprehension, and or an inability to apply boolean logic in an everyday situation when given an if/else type statement. In which case you're probably not doing so well in any kind of development. 3. You're itching to be defensive. Which is a sign of insecurity and/or lack of intelligence. Given that you're "using both C# and JS", and you don't *seem* to be insecure... I guess that leaves #2.
I will! What would the improvement be?
&gt; Try dispatching your call to renderImage to the UI thread. Via a delegate and invoke?
Yup. Definitely #2.
In EF6+ you can do something like: yourcontexthere.Database.Log = Console.WriteLine This would output the generated SQL and show you the column names
Use Paint to draw the bitmap! Not BackgroundImage. Set the Timer to Invoke Invalidate if you want to redraw. This would be a lot easier in C# though since the Marshal.Copy would be pointless. I don't quite understand what your are trying to do though.
Why?
I'm working as a back-end web developer designing web services and online gaming systems for the regulated gaming industry. I write my software on the .NET stack (almost entirely C#). Our game developers use Unity 3D and C#/Mono.
+1 on this. To help determine the best branching strategy, use the [Visual Studio ALM Rangers Source Control Guide](http://vsarbranchingguide.codeplex.com/), specifically their section on branching and merging. It sounds like you'd want one branch off the main for each hotfixed/customized client version. 
because its sort of against the point of using abstraction layer, they are tightly coupled to a database, meaning i'd have to use for example ms-sql, cos it support sprocs, written with t-sql, rather then been able to pick my db provider (postgres, mysql) and letting the orm translate my domain objects and queries. Additionally for maintainability, say for example if you change your domain model (ie, add a property to a model or remove one) suddenly all your sprocs are broken and your application is busted, if i was actually using the orm as intended i'd just need to fix the compilation errors etc.
Yeah but sometimes you have to use a stored procedure for different reasons. In many cases you can use the EF for 99% of the work but you have to resort to stored procedures for that 1%.
SQL server supports two authentication modes: Windows and SQL (username/password). The latter is always available (and is the only one supported by Azure SQL Server). Check if Windows authentication is enabled by the server and use it (by specifying "Integrated Security=SSPI;" in the connection string). In this case db provider will use credentials of currently logged on user automatically. This works in domain configuration but possible to do (with some limitations) if the desktop machine is not in the same domain as the server (contact db admin).
Don't submit directly to the database. Instead, put a web service/REST API on a public-facing web server and have your program interface with that, and then the web service perform any authentication (this person is who they say they are), authorization (this person is allowed to read/write my data), validation &amp; sanity checking (this data is valid and safe) before inserting into the database. Then you only have to manage/secure one connection to the database (web service to SQL Server), and one set of credentials (with those credentials being secured on the server, not scattered around the world).
This. Create a proxy to submit through otherwise you will just open a whole can of worms. Never trust anything that comes from the client!
You'll still be working in ASP.NET, just implementing something that doesn't have a web browser/GUI interface - it accepts data via an HTTP POST, does its thing, then responds.
&gt;This would be a lot easier in C# though since the Marshal.Copy would be pointless. It would? Ah - the direct use of pointers? &gt;I don't quite understand what your are trying to do though. Bit bash and output fastly to the window, it's easier to do fast in WPF, so I wanted something a bit harder - GDI!
One thing I would add is that you should consider separating authentication and CRUD operations when it comes to the web services and SQL connections. This isn't necessary, but extremely helpful if you plan to add different types of functionality in the future. Also, all direct database connections should be locked down SQL accounts (no domain accounts) between your web service and database.
Make an api with auth tokens that serves as an intermediary. 
Please don't do this. Don't give users direct access to your sql server.
I do it, but only because I am an insane person and frequently close everything, clear cache, cookies, you name it. I reboot when switching tasks. I'm just crazy as fuck
Asp.net web api: http://www.asp.net/web-api
Definitely do a save-all first.
I do now. Git does weird shit if I don't.
We've aliased git to a powershell script that warns you if you have unsaved changes in visual studio, then runs git otherwise.
Ctrl+Shift+S to save all (including project/solution)
Yeah why not.. with an i7 and SDD it only takes a few seconds..
I didn't downvote you, but I can see why other people did. For a metaphor, think of someone directly asking you a question of "how long do I need to put the baby in the oven for to dry its diaper." You answered the question from a technically correct perspective. The issue here is that it was not a theoretical question. You had the ability to tell him/her the baby should not be put in an oven in the first place, but you replied with a tunnel vision answer that has dangerous ramifications.
Exactly
Here is a [working example for C#](https://gist.github.com/GeirGrusom/90e99545b3817e46b4fa) in a gist. You'll need to enable Unsafe to compile it. It uses two buffers, and will copy from one to the other, and them swap them. The copy adds a blur effect as well. The file is the entire program. No forms are defined, and since it doesn't create a form it doesn't require a timer either, and since everything happens in one thread no synchronization is required.
Tagged as crazy-as-fuck-guy
Save all won't help in merging though, VS will go apeshit about changed files, ask for reloading, then the intellisense complain about nonexisting assemblies if you use any kind of designer files etc.... IMO it's best and safest to close the solution, merge, reopen
Yes. The reason is that anything that merges that modifies the csproj or vbproj is somethign you don't want to mess with. Visual Studio modifies the .\*proj file depending on whether you add, remove files or change a configuration. But Visual Studio doesn't really tell you that there's an unsaved change to the .\*proj unless you try to close or use the save all button. The file could also be with incoming changes in a merge due to colleagues adding files so you don't want to be caught merging an incoming .\*proj while Visual Studio is open with unsaved lingering changes to YOUR .\*proj file. Then your project gets all weird and you have a fucked up merge and now the build won't work and I have to get up and go to your desk while I'm in the middle of concentrated code writing to fix your working copy for the tenth time because you won't listen to me! Er... uhm sorry... This hits too close. TL;DR Yes. You don't want to fuck with the merging of .\*proj files...
I don't. VS 2013 got pretty good both at detecting project changes and reloading all the projects with only one prompt. I CRTL+SHIFT+S often so save the projects/solution anyway to make sure that when I commit, the project changes go along with them.
I know! Do you also move your entire desk over when your mouse gets to the edge of the mouse pad? I DO TOO!! I just turned on my secondary monitor....and now I need to re-install Windows JUST TO BE SURE!! I love computers. 
Wow, that's cool! Thanks!
If you must work in Java IntelliJ makes it bearable. 
"how long do I need to put the baby in the oven for to dry its diaper." Great analogy.
No, you're fucked
I've been creating all of my new projects in MVC which has been fine, but I have some legacy stuff that I've been trying to tackle which is daunting. The newer projects are smaller in scope so I'm ok without needing to rely on a javascript framework to handle the view's interactions and just having some jquery here and there. But for the primary legacy webforms project (webforms + ext.NET), I cannot seem to find an entry point as to how to even begin as it feels like without the correct javascript framework in place, I'd be reinventing the wheel or doing things manually that the combination of webforms and ext.NET have taken care of. I'm currently going through things like breeze.js and looking at angularJS but the learning curve and still feeling like its just much more work.
I do not close anything, but I do make sure I save in VS before switching to another app for any reason at all. I press Ctrl+Shift+s -&gt; alt+tab... all the time... If I don't have VS as my focused app, everything is saved. The whole reloading of project files all the time is a bit frustrating, I agree. It looks like Roslyn is going to fix some of that.
Here's a [gist with the script in it!](https://gist.github.com/anonymous/f3af3ad86a4fd0b7dd52) Might only work on the particular version of Visual Studio we're using (as it hardcodes tthe version to look for)
Here is an example of ASP .NET using Web Forms and MVP. I create a sample a while back... https://github.com/mtzaldo/waTodo I didn't put documentation, but if you have a question feel free to PM.
You are most welcome, glad it was helpful :)
&gt;It looks like Roslyn is going to fix some of that. I can't wait for those JSON project files. Less merging mess and hopefully it will be smart enough to trigger the in-memory recompilation of the project after merging files.
Definitely learn WPF
Thank you for your feedback, but could you please extend on why?
I recently started learning WPF and have minimal experience in UI outside of WPF (some WinForms and some MFC, along with Java from ages ago that I don't remember). I think the benefit of learning WPF is that Data binding and the MVVM pattern (or something similar) are popular even outside of WPF. There are a lot of other frameworks in other languages that work in a similar fashion (I don't know any off the top of my head but so I have heard). It can also allow you to have UX designers and backend developers working simultaneously. Also if you have ever felt limited by WinForms, WPF really gives you some freedom.
I feel like I've read that tidbit before! Thank you for your contribution. Would you care to go into the benefits of data bindings and MVVM (though I understand a bit of that topic; enough to know it's huge)? Do you have any screenshots of a slick WPF display you've accomplished that would've been impossible or impractical to do via WinForm?
Two examples are animations and transparency. Attempting to do those in WinForms is simply not worth the effort because they can be accomplished so much easier in WPF. And it will look much nicer. The benefits of data binding and MVVM is that you have a very clear separation between the view and the rest of the system. A WinForms codebase is simply not unit testable if you put logic in the code-behind of your views. MVVM dictates that the code-behind is replaced with data bindings, converters, and view models which is much more unit testable. MVVM is also nice because you can theoretically swap out views with minimal impact since there isn't any code in the code-behind (or there should be very little that's directly related to UI manipulation). Basically, using the traditional WinForms approach of sticking all the logic in the code-behind of the view is a terrible choice. The problem is that there aren't a lot of other viable options available in the WinForms space. If you have the option of using WPF, there is no reason at all to use WinForms: it's not receiving any updates from Microsoft and it's basically just legacy at this point.
Thank you so much, your post was exactly what I was hoping to get out of this topic. I hope more people post their opinions and experiences. I create and maintain financial industry Windows services and WinForm apps, some of which are 75k+ lines of VB6 with -lots- of hardware integration. I've definitely struggled with transparency in WinForms, and absolutely horrid code-behind linking multiple forms to the same global variables saved in a Module1. It's fantastic to hear that WPF handles this better! To this day I never could get transparency to work in all situations (XP/2003, RDP, low-res/color, etc). Per the different organization/interaction philosophies, does WPF pidgeonhole you into MVVM, or can you just as easily conform to MVC? I know very little about either. Is MVVM something I definitely need to be reading into regardless? Do many XAML-based GUI frameworks follow MVVM? What resources did you find most helpful when you were learning WPF? Thanks again for taking the time to share.
If you're comfortable and productive with WinForms, in a lot of cases it's going to be much better for you to stick with that, but learn and apply good practices and techniques like MVVM and data binding to WinForms (which is very viable). WPF is an impressive piece of work, but I find it has a steep learning curve for people coming from WinForms, and there can be a lot of frustration when it comes to customizing and styling controls, and filling in gaps for controls that existed in WinForms and don't in WPF out of the box. I would actually encourage you to invest your time in learning ASP.NET MVC and Web API (including HTML5, JavaScript and related libraries) to upskill you for the web.
WinRT is not an option if you need to support pre-Windows 8 clients. WPF is definitely the only way to go. Moreover if you already have a huge investment in WinForms you can reuse all your code in a WPF app thanks to the WindowsFormsHost, and in your WinForms apps you can integrate WPF controls using the ElementHost if you want to integrate WPF chunks little by little. There is no such thing with WinRT, you'll have to start everything from scratch and throw away your WinForms assets. This is something I've not yet taken the time to integrate into the article, but I will soon. :) Compared to WinForms you will benefit from XAML of course, generalized data-binding, data-templating (and to a lesser extent control-templating), MVVM whose main benefit is to standardize the architecture of all WPF applications, customization (styles, animations)... There is a lot of additional cool features but they are less revolutionary like routed events and themes.
Even after 2-3 hours of reading over a tutorial, I was able to make an already more attractive base for a GUI with wpf than I ever have using winforms. Xaml is also very useful. It's still a rather large learning curve, but the payback is tremendous.
WinJS 3 looks interesting
[WPF is not dead](http://greglevenhagen.com/is-wpf-dead-no/)
A single guy mentions one time that there is something going on, but of course he can't say more. And then more than half a year again nothing.
Anecdotal at best. On the flip side, I get a ton of recruiters offering me WPF jobs because I know it well. Those jobs are most certainly out there, and if you aren't into just developing enterprise applications, WPF (or at least XAML) is the best way to go. 
I think the key words here are 'multi tenancy'. http://msdn.microsoft.com/en-us/library/hh534477.aspx
SOAP or JSON means nothing to us. All we are doing is changing the response type the WCF or WebAPI endpoints return.
I didn't really understand why that article is making it seem like WinRT is somehow superseding WPF. In the future? Who knows. But for now they are targeting two very different goals. Learning WPF first is a good idea because it's more complete with the framework. WinRT, like Silverlight, pushes a lot of asynchronous UX for example, which is of course better, but kind of impeding if you're trying to learn. Once you're comfortable with WPF, you can move on to WinRT like a Java programmer learning C#. 
I just do a save all. Also make sure to configure your gitignore properly.
Wpf might go away buy rt uses xaml. All my wpf knowledge transferred over for my first win 8 app. You will like rt better.
I would sum it up like this in terms of Microsoft's support of the two technologies: WPF is stagnating, WinForms is dead.
By the way, [this is a pretty good example of what you can do with WPF](http://wpftoolkit.com/try-it/).
Let focus on one small part of the article to invalidate the whole thing. Brilliant.
The fact that you have 3 (**!**) years worth of professional experience in WinForms and 2015 is almost there: --- I was in the same spot and decided that I won't learn wpf to full extend, just the patterns and go with **asp.net mvc + web api** instead of learning **another** graphic framework for rich-client applications. Let's be real, with some 3rd parties (e.g. telerik, viblend, ..) controls you have enough tools to style your application to look much nicer than 99,9% of the apps out there. And if you really really need that X feature from wpf you can use it and host your winforms into it. To the people that say you can have designers and coders work together.. you will (or atleast me?) rarely see it like it was intended to be. You still have to talk with your project co workers heavily. Yes WPF is better than WinForms in many aspects, but time/effort isn't worth it in your case.
WPF will be dead as much as Winforms is dead today: not dead at all. WinRT isn't the future, as it requires a completely different .NET runtime (a smaller, limited one) which is actually a wrapper around the Windows RT runtime. At the moment WinRT is too limited to be valuable on a desktop, perhaps with windows 9 and windowed WinRT this changes, but then again, Windows 9 requires a significant marketshare to be a factor. Till then writing apps using WPF and Winforms gives you one thing: an ability to create a fully working desktop application which can utilize all the features of the full .NET framework. 
The comments in the article are amazing. Really good post 
With mono supported, it could be. Way too early to know for sure.
Choosing the life of a developer means choosing a life of always chasing new technology. Every framework is eventually replaced by another. There will always be work developing for older frameworks but as time moves on the pool of jobs gets smaller and smaller. 
What? I didn't invalidate the whole thing. I'm talking about the supposed next version of WPF. 
Since WPF is integrated into .NET (aka WinFX in .NET 3.0) and we know there will be a .NET 5.0, it is hard to believe Microsoft isn't going to update WPF (albeit maintenance purposes only).
I work with a few mainframe developers who work only with COBOL (JCL, etc). It is fun to think that they will be needed longer than I will with my bleeding edge skills.
The way I understand it at this point based on comments from MS developers. WPF is feature complete. Development is fixing show stopping bugs and supporting new os releases. This comes from the open source talks that are now posted on MVA. When asked about wpf being open sourced. The focus is on current and growing projects being open sourced not project in maintenance or considered 'done'. It was in the one about dotnetfoundation I believe.
This is actually exact the behaviour one would expect reading this code. Task&lt;SomeResult&gt; DoSomethingAsync() { using (var foo = new Foo()) { return foo.DoAnotherThingAsync(); } } Here you call the `DoAnotherThingAsync()` method which returns a `Task`. You then immediately return the `Task` and thus you leave the `using`-scope and `Dispose()` is called. async Task&lt;SomeResult&gt; DoSomethingAsync() { using (var foo = new Foo()) { return await foo.DoAnotherThingAsync(); } } Here you `await` the `DoAnotherThingAsync()` method - this means you stay within the `using`-scope until the async method returned your value. Then you get to the `return` statement and return your value, and then you leave the `using`-scope. So in short: You didn't know how await works.
Really? You think his post about not understanding how await worked might imply that, possibly, just possibly, he didn't understand how await works? I don't know man. That's a rather large leap to infer that if A then A.
Great article and goes into a good amount of explanation, but just curious - aren't all of the goals outlined possible just with Visual Studio Online and Azure? * Code - VS Online * Build - VS Online * Package - nuget * Deploy - VS Online * Host - Azure Am I missing something fundamental as to why they've gone to so much effort, or is this just another (potentially cheaper) alternative?
Don't know if it's the case with the author but if you work in an environment that has a requirement for self-hosting, VS Online and Azure are out. And from what I've seen, this is a fairly common requirement in most .NET shops. Plus once you reach a certain scale, it's more economical to host things on your own vs. outsourcing them.
I can see the sense in that; having your own dedicated hardware has a lot of value, but aren't Bitbucket and Bamboo (as in the article) cloud based as well?
The "response" cookies are what the app sends back to the browser (vs the request cookies, which is what the browser has sent back to the app). They are just cookies, but in your code, you can only change the response cookies. Depending on the settings, you may, or may not be able to set/modify them client side (HTTPONLY setting in the cookie declaration, or globally in the config settings). But then you probably don't want to change the session/authentication cookies as the api handles that for you. You might want to create your own cookies with values you can use. Just be careful about personal information in cookies, as they are insecure by design. Also be sure to verify the values are safe etc, as you can't trust clients to behave nicely. Using the the .net api for logout will automatically clear the cookies 
I honestly have no experience with VS Online, and my last look at Azure was back when they only had Web roles and Table storage (yeah, beta days). Sometimes using multiple products can give you a better overall solution because you don't have a dependency on one $Company team trying to do everything, and only succeeding at some of them. At the end of the day, if it saves you time and effort in setting up and maintaining it, a few thousand more in licence and operating costs is well worth it. We use a similar kind of set up, and it works much better for us than trying to stick to all one vendor which other teams in the company do. It also gives you some flexibility should a vendor decide to change things in a way that no longer suits you, or you outgrow what their capability is. 
Great write-up. Could you elaborate on how you build to a specific environment? Do you have to maintain a separate branch for dev, QA, UAT, production? I didn't quite understand how this works.
we have 3 branches in Git: master = production, release= staging and develop = UAT
Continous delivery can be acheived in many different ways. Personally I would go with TeamCity as a build server. One thing I noticed with VS Online is that you have to pay for the build agents by the minute. Not much, but it accumulates. Also, I don't really like the build customization story on TFS.
Forms authentication (or *cookie authentication* as it's referred to more recently) lives in the [System.Web.Security.FormsAuthentication](http://msdn.microsoft.com/en-us/library/System.Web.Security.FormsAuthentication%28v=vs.110%29.aspx) namespace. The idea behind forms authentication is that some piece of extra information needs to travel with the http request (which is stateless) in order to continue a session. Since cookies travel with requests, we use them for this purpose. What the .net forms authentication does is it puts a piece of user identifying information in an encrypted cookie after you log in and sends it in the response. The auth cookie's name is in [FormsAuthentication.FormsCookieName](http://msdn.microsoft.com/en-us/library/system.web.security.formsauthentication.formscookiename%28v=vs.110%29.aspx) property, and can be set in the Web.config file. There's nothing special about a .net cookie. When a request comes in with an auth cookie to the server it then decrypts it and sets the current request session's user (identity) accordingly. You don't really need to worry about sending/receiving cookies, the browser and the server will handle those things. You can't really modify the auth cookie on the client, since it's encrypted. And there wouldn't be any point to it either, it's purpose is to identify the user, which it does.
Sending specifically. Sendgrid is a third party and an expensive one at that... You can imagine how many emails a site like Domain sends out. SES is cheap and simple to integrate.
Actually, I've only seen that problem with Task based operations so far. Isn't it a common practice to do something like this? See this answer: http://stackoverflow.com/a/11776998/1043276 using (var db = GetDatabase()) { return db.Get(1); }
Oh good point! Domain would send squillions! Haha.
Actually it's also about bandwidth cost. We are regularly sending a large number of emails with attachments, and with Azure + sendgrid you end up paying for bandwidth twice. Once to get out of Azure, and once more via Sendgrid. With Amazon SES you pay only for one of those. One of the neat advantage with SES is that you can hook it up to SNS and SQS to do proper bounce handling. Even though they are all independent services it's a more integrated dev experience
To be fair, if you are running your own Bamboo or Team City server on AWS or Azure you would also have to pay by the minute for your VMs. We use Bamboo because of the nice integration with Bitbucket, Jira and Confluence
The problem also occurs in methods which return an open DbDataReader for example: the method has to open the connection, but it can't close/dispose it as the datareader returned by the method is open: closing the connection will also close the connection :)
Nice. All big considerations.
Yes, WinForms can get messy, but that is usually due to a mixing of concerns. How many times have you seen a button that contained a giant method for its click event? Far too many times! When I first started WinForms back in the old VB6 days, I got into the habit of keeping my actual forms very skinny; just calling methods in my old BAS files for all of my logic. I continued this practice into .NET, and it has served me well. Moving to WPF hasn't been terribly difficult. MVVM is easy to grok if you already do a lot of MVC style architectures (and not just for the web; MVC is just a pattern). Just practice good separation of concerns in whatever pattern you use.
&gt;VS**2914** CTP The one with neural interface ;-)?
If a backport is still being investigated, why does this extension &gt; SUPPORTS Visual Studio 2013 ?
He probably wanted to write VS2014... Which would be no better, because there is no VS2014. There is only **Visual Studio "14"**, where the 14 stands for the next version number (VS2013 was version 12 and they will skip number 13 out of superstition).
V1.6 is compatible. It was then forked to make a VS2014 implementation. The infrastructure for roslyn code diagnosics changed between 13 and 14. Project types are also not the same. Also the gallery wouldn't let me proceed without selecting a VS2013 edition. 
Fat fingers. Doh!
Now you wrote "VS2014 CTP". There is no "VS2014". You mean **Visual Studio "14"** (VS14)? Which CTP? CTP1? CTP2? CTP3? Be more precise, man!
For C# desktop development - the "future" is using WinForms to host Chrome (CefGlue) and OWIN as an internal offline Web API server! Bonus is you end up designing a Web API service layer which can then be hosted on IIS for mobile or online web interface.
If you search for VS2014 you still get **Visual Studio "14"**
even though i'm not able to use it right now i think it's a valuable addition to vs and a good example of whats possible with roslyn, nice!
I was having problems with it yesterday. If you can put a div with a min height and max height around it, you should be able to use that to get aligned and sized right.
Yes. Because a lot of people don't get the difference. But it's gonna be released 2015, not 2014.
I came away from WPF learning three great concepts: * XAML * MVVM design pattern * data binding I will carry all three of those concepts with me to Windows Store development, so my WPF experience will not have gone to waste even if WPF as a presentation technology is retired.
I would favor `IEnumerable&lt;T&gt;` or `IList&lt;T&gt;` over `List&lt;T&gt;`. With `IList&lt;T&gt;` or `IEnumerable&lt;T&gt;` you can assign an `T[]` or `List&lt;T&gt;` to the field, but if you use `List&lt;T&gt;` it can't be anything but a `List&lt;T&gt;`.
I wonder if there a reason to use NHibernate over EF for a brand new project? I suppose if you know NH better and time is tight (as it almost always is) this can be a valid reason, but maybe there's more?
&gt;You need What if you don't know what the end user of your DLL is going to need? 
Then it is up to you and/or the architect/product owner to decide to what level you are willing to support.
Sourceforge... Still?
Then use the least featured, IEnumerable&lt;T&gt;, and let the consumer upgrade to the functional level as needed.
The primary repository has been on Github for a few years now: [https://github.com/nhibernate/nhibernate-core](https://github.com/nhibernate/nhibernate-core).
There are still a few things that NH has over EF - [Los Techies had a write-up earlier this year](http://lostechies.com/jimmybogard/2014/05/05/missing-nhibernate-features-in-entity-framework/). If you have a legacy schema you need to map, NH is the way to go - the richer modelling options will make your life much simpler. That said, at work we've recently moved to EF for new apps mainly because its easier to recruit devs that are moderately competent with it, and arguably the tooling in VS is better, and there are some up-to-date books and training courses. It's good enough for the internal LoB apps that are our bread and butter in corporate IT.
Basic rules of working with collections: 1. Collection properties should not have public setters. (For serialization this means a private setter combined with the [DataMember] attribute) 2. Collection properties should never be null. (Create the collections in your default constructor.) 3. Don't expose IEnumerable&lt;T&gt; as the return type of a property, ever. 4. Don't expose IEnumerable&lt;T&gt; as the return type of a method unless you can't expose a more explicit type. 5. Always accept an IEnumerable&lt;T&gt; as a parameter for methods if you can. 6. Consider using strongly named collection such as AddressCollection instead of Collection&lt;Address&gt; so you can later add new methods. 7. Prefer Collection&lt;T&gt; over List&lt;T&gt; because Collection&lt;T&gt; was designed for consumers to subclass and extend. Make sure you turn on the Static Code Analysis features in Visual Studio. This will catch many of the design errors I listed above.
Then use the most featured, Collection&lt;Address&gt; or AddressCollection. That gives them the most capabilities out of the box and allows you to extend the class later without making breaking (i.e. not backwards compatible) changes. 
So you I take it that you've never even heard of the .NET Framework Design Guidelines? It is sad that people get so many up-votes for clear pattern violations. 
And what would you do if you needed to add a method to collection type? We have design guidelines that specifically cover these scenarios. Just pick up the damn book, it goes into detail on why we shouldn't do what you are suggesting.
No. Always favor interfaces for parameters and strongly typed classes for return values and properties. Seriously people, you need to read the .NET Framework Design Guidelines. This isn't rocket science, this is programming 201.
You are misreading that link. &gt; **√ DO use Collection&lt;T&gt; or a subclass of Collection&lt;T&gt; for properties or return values representing read/write collections.** 
Holy shit; it actually came out.
And if you need to add a method to the collection? Collection&lt;T&gt; was written specifically so that you could subclass a generic collection type. Again, read the Framework Design Guidelines before you start spouting that crap. You don't have to agree with it, but you have to at least know what it says before you start telling people to do the exact opposite. 
&gt; The handy tool at json2chsarp uses Lists Lists are the quick and dirty way of doing it. There is nothing wrong with them when you are the only consumer, but they aren't the best choice for reusable libraries. 
Then you can just skip every other release and be happy.
Sorry dude, but that is incorrect; that is not why we have generics. You really should prefer strongly typed collections over having repeat instances of List&lt;Address&gt; everywhere. I see too many times where someone litters this code everywhere and then constantly rewrites logic to have the collection perform operations instead of writing methods owned by the collection itself. That or worse: they write extensions to work on IEnumerable&lt;Address&gt; for instance.
Sorry *dude*, but you are incorrect. When I see a strong typed collection instead of `List&lt;T&gt;` and extension methods, then I'd assume that class was written for .NET 1.0 or the person simply is incompetent. Using `List&lt;T&gt;`, extension methods and the repository pattern when needed are the way to go today. There is a reason why almost no strong typed collections are used in modern / new .NET frameworks.
I hope you at least mean IEnumerable&amp;lt;T&amp;gt; with extension methods. And why are you babbling about repository pattern now? I'm not seeing much logic in any of these claims. Are you just tossing OOP completely out? Fuck it, rite? And the guidelines do ask that you subclass collections in cases like this rather than using the collections directly as you're suggesting... just sayin...
This is getting ridiculous. Repositories are wrapper around data layer access (usually ORMs or web service clients). A repositories may return collection from its methods, but it isn't a collection itself. 
Extension methods 101. An extension method is a static function. For example: public void DoSomething( this IEnumerable&lt;Address&gt; source) Just like normal methods and functions, the parameters for extension methods should be the least specific interface. For collection types, that means using IEnumerable&lt;T&gt; or at least IList&lt;T&gt;. There is never a reason to offer an extension method on List&lt;T&gt;. *** At least there is a bit of symmetry here. Not only are you doing exactly the opposite of what you should for properties and return types, you are also doing exactly opposite of what you should for function parameters. 
What I don't understand is where all this bad advice is coming from. They certainly don't get it from looking at the APIs in the Base Class Library, since none of them look like that.
&gt; There is a reason why almost no strong typed collections are used in modern / new .NET frameworks. Look at ASP.NET MVC and count the number of classes that have "Collection" in their name. Then come back and tell us that Microsoft's entire MVC team is incompetent. http://msdn.microsoft.com/en-us/library/system.web.mvc(v=vs.100).aspx
Take a look at WebSitePanel (http://www.websitepanel.net/)
&gt; And what would you do if you needed to add a method to collection type? You can't add methods to System.List&lt;T&gt;. You would have to use extension methods, and those work just as well on interfaces. &gt; We have design guidelines that specifically cover these scenarios. I don't care the slightest about your design guidelines. &gt; Just pick up the damn book, it goes into detail on why we shouldn't do what you are suggesting. Piss off. What kind of book suggests that you should use specific implementations when a generic interface exists?
This isn't just any random set of guidelines. These are the guidelines Microsoft wrote specifically for the teams who write the .NET Framework. Look at the APIs that Microsoft creates. The vast majority of them follow these rules. Visual Studio even has a built-in static code analyzer to help you catch rule violations. 
&gt; You can't add methods to System.List&lt;T&gt;. You would have to use extension methods, and those work just as well on interfaces. No shit. That's why the guidelines say to create your own types that inherit from Collection&lt;T&gt;.
Yeah, well, you are mixing the terms **strongly typed** with **specific implementaion**. The reflection API for WinRT returns `IEnumerable&lt;PropertyInfo&gt;` instead of `PropertyInfo[]` for example.
Considering that you don't actually know what the .NET guidelines are, let alone why they exist, your opinion doesn't matter much. But for the sake of everyone else, the reason you are supposed to return a subclass of Collection&lt;T&gt; is that it allows you to add methods and properties to the return value without making a breaking change. If you return an interface, then you are have several problems... 1. Discoverability. Users of your library may never even find your extension methods. 2. Extension methods cannot be virtual, limiting your flexibility. 3. Extension methods cannot access private data. 4. You can't add properties at all. Changing the returned object isn't very interesting because it doesn't allow you to change what you offer on the effective public interface for the object. Nor does it offer much advantage over simply changing the implementation details of the returned class. 
&gt; Discoverability. Users of your library may never even find your extension methods. This is just as much a issue with normal types. No change at all. If you can't change the implementation (because it's part of the BCL) you either have to derive from the class or use an interface. &gt; Extension methods cannot be virtual, limiting your flexibility. So? They are used when you cannot change the implementation of a type (such as List&lt;T&gt;). However interfaces does allow you to use virtual members. &gt; Extension methods cannot access private data. So? That's not the point. The point is that List&lt;T&gt; cannot be changed, and the only way to add functionality is by using extension methods. &gt; You can't add properties at all. Yes you can. You are in the exact same capability of adding members if you use an interface. But however if you use List&lt;T&gt; as a return type, you cannot suddenly change the return type to ObservableList&lt;T&gt; or BindingList&lt;T&gt; if you need to. The consumer will in **best case** have to recompile their binaries because changing the return type of a method is a **breaking change**. However using an interface you are free to change the implementation. You can add new members to your interfaces as well which is not necessarily a breaking change for the API consumer (but you can do that with explicit implementations as well).
You're right, there are a handful of special purpose libraries like Reflection that don't follow the overall pattern. But if you look at the vast majority of the libraries written by Microsoft you'll find that to not be the case.
&gt; But however if you use List&lt;T&gt; as a return type, you cannot suddenly change the return type to ObservableList&lt;T&gt; or BindingList&lt;T&gt; if you need to. So what? No one is telling you to use List&lt;T&gt; as your return type. Again, Microsoft's guidelines since .NET 2.0 are to return a subclass of Collection&lt;T&gt;.
First off, the entire basis for your arguments (and arrogantly telling me to read a book) was based on your misunderstanding of basic terminology. No book ever advocates using explocit implementations over interfaces for public API's. For data contracts (like MVC models) it doesn't matter that much, so using Collection&lt;T&gt; isn't something I would personally have anything against, but it doesn't offer any advantages at all over using interfaces, but rather locks implementation aspects of the type.
If that is Microsoft's guidelines then they are poor guidelines. Subclassing is generally bad. The main thing here is that the API consumer **doesn't care** about the exact implementation, so why expose it? There is absolutely nothing of value gained by using an explicit implementation.
What do you mean "website is just insane"? Parallels website or what?
Maybe you should point out what's wrong with my answer instead of ranting. The design guidelines clearly state that any of the 3 interfaces can be used as a return type. In the case of not knowing the intended use why would he want to return anything other than a IEnumerable&lt;T&gt;?
How often is it really necessary to add a method to a collection? Why would I want hundreds of collections around that do nothing more than I get with a generic version?
AFAIK there are not many control panels on Windows. WebSitePanel was good, but since acquired by Microsoft it seems maintained by the community only (open-source). Additional advantage is pricing - it is free. But when it comes to support, I have no idea who would take responsibility for that. Plesk is commercial and primarily sold via distributors. Unless purchased directly from Parallels, the price and support quality may vary significantly. Previously Parallels was selling only most expensive licenses - definitely an overkill for your 10 sites. Cheaper licenses got available lately - http://sp.parallels.com/products/plesk/how-to-buy/, starting at $4 You can possibly try ISP.Manager for Windows (http://ispsystem.com/en/software/ispmanager5/requirements), but I have no experience with them.
You're right that the dot net framework design guidelines do suggest this, and the dot net framework design guidelines contain mostly excellent recommendations. I've never quite liked this suggestion though. I can't remember the reasoning they gave (and I don't have my copy to hand), but presumably it's if you want a later version of your public API to return extra information from a method that previously returned a collection? If you have your own specific collection type, you can add extra properties to that without breaking compatibility or adding new methods (with awkward names) that return the new type... But if you should do that, shouldn't you do that for all methods that return common types? What about a method that returns an int? Should you create your own type (that wraps an int) specific to that method and return that? Where do you stop?
well said
You stop at primitives such as int and string. Or going the other way, why have classes at all? Why not expose everything in the form of dictionaries? 
I'd go with the interface approach. However, and this is something I'd be interested in getting feedback on, there could be serialization issues when using interfaces. There might be usability issues with your library, since it won't have any idea of the original type, and any implementation details of it, if you go the path of exposing interface types only. For example, if you expose IEnumerable&lt;T&gt;, and I feed it my json-serialized MyListImplementation&lt;T&gt;, if I want to have my implementation back, I'm gonna have a bad time. Just a thought you might want to consider. 
Your basic argument boils down to us pretending that J2EE didn't suck and we should all pretend that we are Java programmers. Personally, I do care about the concrete return type. That tells me things about how it performs and allows me to use other methods on the class beyond the few that happen to be exposed by the interface.
Yep. It's incredibly frustrating to see so many .NET developers trying to replicate the failures of J2EE. 
&gt;Again, Microsoft's guidelines since .NET 2.0 are to return a subclass of Collection&lt;T&gt; [No, it is not. It is a CONSIDER not a DO](http://msdn.microsoft.com/en-us/library/dn169389.aspx) In other words, where appropriate, not every where all the time.
&gt;But for the sake of everyone else, the reason you are supposed to return a subclass of Collection&lt;T&gt; is that it allows you to add methods and properties to the return value without making a breaking change. [No, it is not a supposed to. It is a CONSIDER not a DO.](http://msdn.microsoft.com/en-us/library/dn169389.aspx) In other words, where appropriate, not every where all the time.
&gt;That's why the guidelines say to create your own types that inherit from Collection&lt;T&gt; [No, it is not a supposed to. It is a CONSIDER not a DO.](http://msdn.microsoft.com/en-us/library/dn169389.aspx) In other words, where appropriate, not every where all the time.
Most of us don't have the requirements and restrictions that the BCL does so why should we spend our time unnecessarily doing what it does?
Agreed. Going all out isn't necessary all of the time. But doing the exact opposite by casting collections to the IEnumerable interface isn't the solution.
√ DO use Collection&lt;T&gt; or a subclass of Collection&lt;T&gt; for properties or return values representing read/write collections.
√ DO use Collection&lt;T&gt; or a subclass of Collection&lt;T&gt; for properties or return values representing read/write collections.
&gt; √ DO use Collection&lt;T&gt; So you can stop touting your should be a subclass now.
Knowing whether or not calling someCollection.Count can throw a SqlException is rather important. If you care about performance, knowing whether or not it calling Count before iterating over the times makes one database call or two is likewise important. Knowing if the collection is tied to the life-cycle of an Entity Framework context is essential for avoiding runtime errors. Your method of programming may work for you, but it creates nothing bit pitfalls and landmines for those who have to use your code later.
Entirely dependent on the use case. I fully concede there are times when it is absolutely vital to be aware of such things. &gt; Knowing if the collection is tied to the life-cycle of an Entity Framework context is essential for avoiding runtime errors. That is application/request wiring, you should not be having to worry about this on a day to day line by line basis. &gt;Your method of programming may work for you, but it creates nothing bit pitfalls and landmines for those who have to use your code later. You couldn't possibly know that and speaking in such absolutions is disconcerting. As I said this is all primarily subjective.
exactly.
Get a windows box. Use visual studio.
and ReSharper
Most companies are switching to MVC. Don't worry you'll naturally shift towards it. Webforms is dying out and only seems to be used for maintaining legacy projects. I was doing interviews for the last few weeks, it seems to be the case right now. 
No you can't use VIM. Visual Studio is what asp.net mvc dev shops will be using. (if you really want to use VIM this will be fine by most, but you better be ready to do code reviews and such in VS) You need to write some actual asp.net mvc apps. Stop writing PHP immediately this is absolute crap and will not carry you very far in the interviewing process (for .net jobs). As far as resources, get a membership to Pluralsight (all videos, and most are awesome). If you want to go after a shop using the latest version of asp.net mvc, then I'd start studying asp.net vNext... it's the future, and the future is looking sweet.
Focus on design patterns, best practices and tiered applications. MVC is only the presentation layer part. Learn Entity Framework, DI, TDD etc.
So I do full time .NET now, but in college I did mostly PHP and brought it up in my interviews often. Mostly by saying it sucks (and be prepared to say why) and explaining that I used it within MVC frameworks and demonstrating knowledge of the pattern.
Not 100% true. 90% of asp.net sites are webforms. MVC is only a few years old and it's pretty different for an average .net Dev to get into. Companies are still making webforms sites.
Not necessarily related to MVC but one thing that often gets overlooked is familiarity with TFS. It's what many .Net shops use for source control and while it's probably not going to make or break getting a job, knowing the basics will sure as hell make your time go a lot easier. I have seen programmers coming from places that used a different source control system really struggle with the learning curve. WebAPI seems to be gaining traction and (at least in my opinion) is a pretty neat framework. RESTful APIs seem to be in vogue right now and WebAPI makes developing them pretty easy, especially if you already are familiar with MVC. At least in my experience a lot of logic that used to be implemented with MVC controllers and models seems to now be making its way to the client-side (with JavaScript), and WebAPI plays nicely with that. Love it or hate it, working proficiency with JavaScript (usually with jQuery) and CSS is pretty much required if you want to be working on any of the shiny new websites/web apps of the day. OWIN is a relatively new middleware protocol introduced by Microsoft that is being used to decouple a lot of the functionality that .NET applications used to depend on IIS for. If you create a new MVC app in VS 2013 it will already default to using OWIN for authentication and a few other things, and it does have a lot of promise to make other cross-cutting concerns like logging, etc. a lot nicer to deal with in the future. SQL. Nearly every application is going to have a database at the heart of it and yet it seems to be totally neglected in many CS programs. I do a lot of development on data-intensive applications so maybe I'm just biased, but knowing how to effectively use indexes, write good queries, use execution plans to tune slow queries, etc. can really be key to long-term success as a developer. It's not a shiny new technology like a lot of the other fun toys, but it's fundamental knowledge that will likely serve you for decades to come. Design principles, OOP, etc. are important but they will come with time. OOP is drilled into CS students beginning in the first intro class, but understanding the theory and knowing how to apply it effectively are two completely different matters that will take years of practice to master. Reject the temptation to fall into an "if it works it's good enough for me" attitude and constantly try to find ways to improve your code. A lot of times it may be that you know something you design isn't implemented in an optimal manner, but you don't know that optimal manner yet. It will eventually come to you as long as you are striving to improve, research, and learn about the problem and how others have solved it before. Your goal should never be to write something perfectly (otherwise you'll suffer from analysis paralysis and never get anything done) but rather something that improves upon what you wrote before. Agile development is an iterative process seeking to improve on previous work, not to create the perfect solution the first time around. To be honest even knowing what TDD stands for at this point (let alone actually caring about whether its used in projects you work on) puts you way ahead of the curve, and the fact that you have work experience relevant to the technologies you want to be in should be really helpful too. It sounds like you have an eagerness to learn which is a lot more important than expertise in any one technology. The industry changes so quickly chances are there will be a whole handful of new acronyms to learn by the time you graduate. Keeping up with this is essential above all else.
Yes, ReSharper is pretty useful.
VS has a set of VIM key bindings you can use if you want to piss off all your coworkers every time you need help.
~~For a college student, ReSharper is probably a little out of his price range.~~ Edit : I stand corrected. Pretty brilliant strategy though, hook em while they're young. We've learned so much from big tobacco.
I work as the only "Web Developer" on a team with about 8 "Senior Developers", that all came from vb6 backgrounds years and years ago. They are near lost when using webforms and completely lost when even attempting a small change in MVC. Its an awesomely dysfunctional and incompetent team I work on :(
I thought they just made it free for students?
Switching from webforms to MVC was the best thing I've ever done. Its hell working with JavaScript with webforms.
&gt;What technologies related to ASP.NET MVC should I be learning? Entity Framework. Not all places use it but it's useful to know the ins and outs and pitfalls of EF. &gt; Is a year enough time to gain the knowledge I need? Yeah. You should be able to ramp up on ASP.NET MVC really quickly. Follow the tutorials on http://asp.net, learn how routing works, how areas work, and how WebAPI works. Shouldn't take very long at all. &gt; I would like to work somewhere that practices TDD and agile development. No you don't. You will very quickly learn to hate the shit out of hours-long sprint planning and retro meetings and standups. I have my own opinions on TDD, but I think it would be foolish to filter jobs on that criteria. &gt; I would also like to work somewhere that designs good software. No spaghetti code. This is something we all hope for but the harsh realities of modern software development are going to make this impossible. You are going to encounter shitty code no matter where you end up, either as a product of incompetence or the very real time constraints placed on projects in the real world. What will be a huge asset to you is being able to refactor shitty code quickly and "in place". Assuming your team lead lets you (I'm not bitter or anything). All of that said, there are a *fuck load* of ASP.NET MVC jobs out there, or at least there are where I live. So much so that I've had a difficult time finding any .NET job *not* related to web development. If you have a very strong understanding of C# and even a little experience with ASP.NET MVC, you'll be just fine. ASP.NET MVC can be learned very quickly, it's the C# that you really need. If you know the language, figuring out how to write custom routing or bundles etc. only takes a few minutes.
&gt; No you can't use VIM. http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329 I also hop into Vim from time to time when I don't want to open something in VS.
Required: http://msdn.microsoft.com/en-us/library/67ef8sbd.aspx http://msdn.microsoft.com/en-us/library/ms229042(v=vs.110).aspx http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api Good to know: http://msdn.microsoft.com/en-us/magazine/hh781022.aspx http://msdn.microsoft.com/en-us/data/ef.aspx http://msdn.microsoft.com/en-us/library/ee748475.aspx You will likely be exposed to front-end technologies as well. https://developer.mozilla.org/en-US/docs/Web/JavaScript https://developer.mozilla.org/en-US/docs/Web/CSS Finally, take some time to understand how TCP and IP work, and then learn how HTTP works. I'm surprised how many web developers don't know these things. http://www.jmarshall.com/easy/http/ http://technet.microsoft.com/en-us/library/cc786128(v=ws.10).aspx Become familiar with TFS, Git, SVN, or one of a plethora of software versioning systems. &gt; I would like to work somewhere that practices TDD and agile development. Don't even worry about this for your first job.
My advice to you, from over 15 years in professional software development... First off, LEARN MVC! Take some of your old PHP projects, rewrite them in MVC. Stop using PHP except for when you have to use it for your current job. As you're learning MVC, try not to think like a PHP developer. Don't fall into the trap of trying to do things the PHP way. Create some MVC sites. They don't have to be anything fancy. Create small sites for yourself, but be ready to show them to prospective employers. Some will ask to see MVC projects that you've worked on. Be ready to show them *something*, no matter how small it is. Find a problem, and solve it using MVC. In my experience, most shops using MVC are using Agile development methodologies. Some use TDD, but not all. Having worked in both agile and waterfall environments, I personally **MUCH** prefer a waterfall environment. In my experience, they tend to spend more time planning the code than you get in an agile environment. Agile isn't bad, but if you're really wanting to work somewhere with a good design, you may end up in a waterfall shop. I'm not saying Agile always produces messy code, but it seems to excel at that. Having said all that, you probably won't really want to be too picky about their method, especially with no commercial experience. Also, I almost guarantee that you'll be unsatisfied with decisions that the team made before you got there. Get over it, you're not going to come in and clean everything up. There's reasons that they made those horrible (In your opinion) architecture choices. For tools, **USE VISUAL STUDIO**. Start off with Visual Studio Express. It's free, and has everything you need to start writing and debugging MVC code. Most importantly, it's extremely similar to the full version of Visual Studio that you'll be using once you get a job. You can use VIM, but don't. Like I said earlier, stop thinking like a PHP developer. Don't get me wrong, I think that VIM is a great editor. When you're configuring a Linux box, or plugging away on a file on a remote machine. But start getting used to Visual Studio IDE. Microsoft has made some absolute crap software over the years, but I honestly think that Visual Studio is the best product that they've ever made. Really, it's that good. Learn it and embrace it. Every shop that you get hired at will be using Visual Studio. If you're stuck on VIM, there's at least one plugin for Visual Studio that will cause VS to use VIM key mappings. I still wouldn't do that though. Some other things that you'll want to learn... * TFS (Team Foundation Server). Used for source control, bug tracking, planning, and everything else. I personally don't care for it, but almost all MVC shops will be using it. Learn it. * EF (Entity Framework). Not always used in commercial software, especially not in very complex projects. Still good to learn though. * SQL (Structured Query Language). Learn to write queries without using a visual IDE. Be prepared to tell an interviewer the difference between in inner and outer join. You will be asked this at some point in an interview. * Javascript. Have a good knowledge of Javascript. * JQuery and another library. Knockout, Angular and Node are all popular now. You don't have to know all of them. Do know the basics though, and why you would or wouldn't want to use them. * CSS. You probably already know this from your work with PHP. Still, brush up on it. * DI or IOC (Dependency Injection or Inversion of Control). A way to loosely couple classes. If you're wanting to work in a TDD environment, you **will** need to be familiar with this concept. If you're like most people, myself included, you will need to read about it numerous times, see it in action numerous times, and will spend quite a bit of time trying to understand it. One day it will click though, and you'll see why it's important. If you've got a fairly solid grasp of object oriented programming, you should be able to pick up MVC well enough to get an entry level job within a year or so. Good luck!
A lot of people are talking about learning TFS, but I'd generalize that add just learn at least one source control system. I've worked at 4 different .NET shops and used 3 different source controls (SVN, TFS , and most recently Git) and they are one big difference from school and work.
Disagree. The trend I'm seeing is switching away from MVC in favor of SPA with MVVM. 
I use vim every day in my job at a .Net shop, whether with gVim directly or with VisVim in Visual Studio.
The advantage of using IEnumerable means if you need to upgrade your method to a stream in the future (large collections, reading paged data) you can do so safely without the need to break the contract. I always force my team to use IEnumerable on interfaces, leaves way more flexibility.
&gt;No you can't use VIM [Eh](http://www.viemu.com/), close [enough](http://visualstudiogallery.msdn.microsoft.com/59ca71b3-a4a3-46ca-8fe1-0e90e3f79329).
In your new job, you will likely be immersed in the .Net ecosystem (VS, IIS, etc) because that's what most shops wind up going with. That being said, keep your own ecosystem for your personal development. Doing .Net development on windows with VS is the easy solution and that's what most .Net shops go with, but you can certainly develop .Net on a Mac or on Linux, and you can deploy a .Net web app on Linux as well. It will be easier to find a place that does that development if you do that kind of development yourself, or you could grow into a position where you can implement those practices. I personally see a lot of opportunity for taking advantage of .Net on top of Linux with Mono, but if there aren't devs out there that are willing to pursue that development, then companies will probably never recognize it as a possibility.
Where are you? Location-wise? If PA, I can recommend a few places that meet all of your criteria.
This guy's response is gold. I highly recommend you take notes /u/completebum, and if you follow through with what he is espousing you would have a good chance of being hired by me (as long as you are personable, and willing to learn [and can actually code]).
It is very helpful. I am going to look into the things he has mentioned. I use MVC, DI, an IOC container, and an ORM for my PHP projects and know CSS, JS, and JQuery well. I have been using SQL for a while and I am also currently taking a class on databases. I really need to look into TFS and EF.
On another note, have you considered Typescript? As a C# developer I found working in JS hackish and scary, with Typescript you get some sense of safety. Our whole application is 100% angular (because it has to work offline too), and the cons for me were testability. But that said, I found myself not understanding AngularJS 100% yet when we started the project and we mixed Angular services with regular JS. Now we are slowly moving all the JS stuff to Angular services and basically creating a 3 tier application all over, same as we would in C#. In our next release we actually showed MVC the door and are now only doing Angular + WebAPI.
I recently did a mid-sized SPA using Web API 2, MS Identity 2, Angular and Typescript. I'll say straight off, that ALL of these (except typescript) were brand new experiences for me - It was a new project and I wanted to use all the shiny stuff! Angular is great. Very modular, good typescript support, extremely customisable. Lots of code! It did have a learning curve - mainly due to the fact you've got to let go of the jquery mindset - there's many other ways of accomplishing things, with templates and filters. Typescript was a great help, with type checking, interfaces and inheritance etc. although the Sidewaffle templates (VS Extension) weren't perfect, they provided some useful boilerplate code. Talking to the server was easy enough, and Web API is faster than MVC at returning json - it also uses Newtonsoft Json.Net as the default serialiser, although you can replace it if you wish. Debugging will slow things, although it's certainly easier with the typescript source maps that show the typescript code in the browsers debbugging window (you need to set up your server to serve .ts files first). And if it's new tech for the team, development *will* be slower. It's inevitable with the learning curve for angular. I think it's worth doing - the end result was rather good for me!
It's not really an MVC vs. MVVM discussion though. You can use MVC on the front-end with an ASP.NET Web API back-end and still get all the benefits you described. The biggest change is going from the traditional client-server approach to an SPA application style. Angular is a good choice, if you decide to go the SPA route but a couple things to note: 1) It has a steep learning curve. The initial barrier to get started is very low and you will start seeing some impressive results right away but as you start going deeper, you will find it is very complex and hard to understand. Part of this is because it does do a lot but it does make debugging difficult. 2) If you want to use components of another JavaScript library within an Angular application, you need to wrap it up within an Angular package. This is not really a big issue but if you have a lot of dependencies, this may be an issue. 3) Performance can be an issue if you are not careful. One option that you could try looking into is ReactJS. It's different in its approach from Angular but you get a lot of the same benefits and it integrates pretty well with ASP.NET via [ReactJS.NET](http://reactjs.net/). It might be easier for other people to pick up too, if you are having issues convincing them to use Angular. But if you do stick with Angular, I would definitely recommend TypeScript as others have mentioned in this thread.
Currently working at a startup that does all of this.
So you're going to remove all your HTML generation to just static HTML? That would be a tougher sell for me as we break HTML into as granular partials as possible.
Haha! So true! I'll try to explain what /u/darkpaladin is trying to get at and piggyback on his comment for visibility so that /u/completebum sees it. Very few places do software very well. Many places do software *well enough* to be shipped. The software business is just that -- a business. Esoteric debates about the architectural purity of a solution are always fun for us developers, but from a practicality perspective it doesn't make sense if the software does what its supposed to do and does it well. That's not to say that code is always terrible either, though. There's a balance to be made between getting the code written and working in a timely manner and building a solution that's both scalable and maintainable long term. The business priority is to get it done as quickly as possible and the technical priority is to get it done as well as possible. Appropriate tension needs to exist between both of these forces for a software development shop to be successful. As for development methodologies, this gets tricky. There are TONS of enterprise development teams out there still doing waterfall development. The simple truth is that it's hard to change the way you work, and it's even harder to tie a change in structure to the long-term benefits of it. Smaller teams in smaller organizations can shift quickly and adopt new development methodologies (SCRUM, XP, TDD, etc) whereas in larger organizations/teams it can take longer. What I will advise to you, if you really do want to work in an environment like that, is that you treat the interview process as *you* interviewing *them* as much as *them* interviewing *you*. Don't be afraid to ask about what version of the .NET framework they target, what development methodologies they employ, how they handle source control, or about their SDLC practices. Don't expect every employer to tick off all of your checkboxes, but expect them to at least be able to answer the question honestly. 
I've seen that. The first thing people do is go, gee that's a stream and I need a collection, better call ToList(). Which of course makes an unnecessary copy. If you do that at every level, which I have seen happen, then may find yourself with five or six unnecessary copies of each collection. *** You are also disguising intent. If you actually do need to use streams then people need to know about it. Otherwise their ToList call will negate all of the work you put into making it a stream. I want a conversion from collection or stream based to be a compiler error. I want a big red flag that says "The rules have changed!". 
Yeah trying to get Web Forms out of the equation all together but some of the old timers are screaming they need their code behinds. Which also is causing them to hate MVVM. The argument is they just turn of the view state, which them I argue what's the point of using Web Forms. I'm the lead but still have to deal with them pointing to how hard it is do something and drag their feet.
Read up on directives and templates. Our app is fairly simple but has alot of pages (controllers) and alot of modules (directives), although not the same as partial templates / actions, they work well for isolating small, independent, pieces of app.
Great advice about interviewing them. Thanks.
Right now if you do angular on .net I'd also think angular and webapi is the way to go
I feel for ya. It sucks to have junior developers who are unwilling to branch out of their comfort zone. People like that can be a burden on any organization -- to be unfortunately blunt, they're dead weight when you need rock stars. The only suggestion I have is to rearrange your team. If you can't get rid of them outright, arrange it such that they impact your project in the least harmful way. One thing you might do is allow them to work strictly in the back end, or give them maintenance duties. 
If it was a junior programmer it would be fine. It's one of the senior guys on my team. He doesn't want the responsibility of being the lead but likes to try and run it. May be some re-organization.
You can break it up easily with Angular templates.
If he's only willing to use WebForms, he's mid-level at best and will never be better. He may be senior in terms of "years of experience", but not in terms of quality. That's a harsh way to put it, but it's how I view things. He may even have *been* senior once, but... once a developer settles into a rut and isn't interested in getting out, that developer is not senior. 
To return the favor and expand on your points, if you lose sight of the product/business it's really easy to fail. I've seen many startups wildly miss releases and eventually fold due to constant large refactors and spending too much time getting bogged down in best practices. Remember that you're building a product, not a technology. 
Hmm. I might have to get in touch with you and /u/statuek after I graduate.
Honestly, I hate SPAs because I don't think browsers are really there yet. However, I'm in a world were IE7 and quirks mode was just eliminated last year (IE8 this year!). We have had teams rebuild their portion of our product's suite and those pages can just completely fail. Clicking a link causes unexpected behaviors and debugging is a nightmare. Then a full reload can take from 5 to 45 seconds (shitty devs...). The best thing about using the normal browser behavior is you get a pure history (don't have to fake it) and each page can garbage collect when it changes. Obviously, Chrome and Firefox are 100x better than lower versions of IE. With that said, I love to use both ASP.NET MVC on the server and MVVM on the client. Essentially the hybrid allows us to have both AJAX and full POSTs/loads as first class citizens. MVC pages render the view model for the page initially and then the other operations from there go through AJAX. Easy to debug, easy to build, easy to maintain. Right now I've been using knockout.js for just to the simple MVVM stuff. I've only had to enhance/fix it once. I needed to forcefully refresh computed field because it wouldn't always update. Essentially a change to one object made changes to a group of other computed fields, and those were computed from another group (think of a 3 level tree with x nodes in each group at each sub-level). Other than that, I stray away from frameworks because I typically get bitten by them unless someone is really actively maintaining them.
Plural sight is worth the price.
Yes, but we still need to go one level deeper which is the service level. The service layer moves all the logic out of your controllers. You pass your input viewmodel into the service and it spits out an output viewmodel. No more controller bloat and your code is reusable.
Start at http://www.asp.net
Yep, this is what we do. However, our services actually sit between the controller, data access and model. Controller calls the service, service uses the data access layer to do crud and maps those to contract/model objects.
&gt;Don't be afraid to ask about what version of the .NET framework they target, what development methodologies they employ, how they handle source control, or about their SDLC practices. In my experience, the best places to work are places that actually want you to ask these questions. They're smart enough to know that a happy developer is a productive developer. They realize that you're probably not going to be there forever, and you want to stay on top of the latest technologies so that you don't limit your future career. One place I worked actively encouraged, and helped us to keep our resumes up to date. Their view was they didn't want anyone to feel trapped and keeping the resume up to date kept us focused on what we were doing and what our long term goals were. They were confident enough in the work environment that they provided that they weren't afraid of people leaving. That was in a shop with around 100 developers. In the 5 years that I was there, there were probably less than a dozen developers that left. Most of us who left there did so to start our own companies. The software developed there was absolutely top notch. If someone gets upset that you're asking questions like that in an interview, you probably don't want to work there.
&gt; If Visual Studio is the best, then what is Excel? Noob, I can write my own Excel in Visual Studio!!
We usually have MVC only in the UI layer, and have the controllers talk to the business layer (that talks to the data layer and if needed external services). This way the model become more like the viewmodels talked about in this article.
Angular is really fun to work with. It feels novel. Theoretically, it should make client-side development super-quick, because it takes care of data binding, validation, SPA routing, etc. for you. But having recently completed my second big ASP.NET MVC/Angular application, I can say that I'm not entirely sold on Angular, even though I'm basically married to it at this point. Here are the cons, from my experience: * Performance is sometimes an issue. This really seems to be the main driver behind the upcoming v1.3, though. * Angular offers really tempting features that are often inappropriate. Example: $watch. * Debugging isn't easy. The best approach to mitigation, I think, is to write model-centric code on the client side, and not bring in Angular until you feel confident that you can isolate exceptions and refactor easily. * The best way to hook up your models is not always obvious, and what appear to be good, clear choices can unexpectedly turn bad. It's the fourth point that really gives me pause, especially when your models start to get more complex. I've had to backtrack profoundly because Angular didn't deliver what it seemed to promise.
You either have to correct this behavior tactfully or by removing them from your team. A good leader can't lose power every other meeting to a subordinate. However, a good lead should be empowering their team as much as possible.
You're view is of as a young go-getter, which is naive at best. It's extremely misguided to say that there are no senior level web forms developers that produce quality solutions. In fact there are plenty Microsoft products that are built on web forms that I'd say a lot of people consider quality. Argue all you want about your hatred for WebForms but ultimate quality is defined by the client of the software you're building. "Settling into a rut" doesn't somehow magically make you less senior. Less marketable? Perhaps for some shops, and eventually for most shops, but it no way it makes you any less senior in **your** area of expertise. The world is your oyster, while you have the time and energy go get them tiger, but be mindful of those around you, you still have to work in a team.
Http-https redirect + strict security mode, rather. I'm not sure if this is the best way though..
We actually didn't go with Angular at work because of the learning curve (we also ran into some performance issues with our tests). Most of our junior devs found it confusing, so we went with Knockout as that was easier for them to understand. But to be honest, your question is more about SPA apps anyway by the sounds of it so my experience will still be somewhat applicable. The big pro for us was faster delivery over the long term. The delivery rate year over year has increased by about 20% last time I checked the numbers (number of features delivered over a period of time. We also take into account feature size when comparing those numbers but it was pretty standard across the board). Debugging over the long term became faster also as we broke applications into smaller and smaller chunks. The main downside for us though was the fact that we have to deal with some lower powered devices... Because some of our employees (like members of our board) refuse to upgrade from their 10 year old blackberrys and whatever else they own... Some devices didn't work at all and some were just too slow. So we had to go back and figure out how to support those people. Basically know what your clients use and whether or not what you plan on building will run well there.
HttpResponse.RedirectPermanent(url) abstracts out all the headers that are easy to forget. http://msdn.microsoft.com/en-us/library/dd322042(v=vs.110).aspx
Ok, so clearly what I had to say was unpopular, but your first sentence implies there may be a misunderstanding. I do not define junior or senior in terms of time alive or even years programming professionally, but in terms of understanding and capability. No person can be senior in that regard if he or she refuses to branch out of any technology. I would say the same thing of a developer who knows perl like the back of his hand but can't be bothered to even try to grasp the basic tenets of python. It's not about individual platforms; platforms like WebForms or MVC, and even languages like C# or Javascript come and go; developers who cannot (and especially those who obstinately refuse to) move with those changes will *never* meet my definition of a senior developer. Just having an area of expertise does not make you a senior developer. You also appear to define quality as "meets requirements", but I do not; quality for software requires more than mere functionality and includes maintainability, usability, scalability, and all the other "ilities" that senior developers care about. And you're correct... you *can* write WebForms applications that meet my definition. But you usually have to break the main patterns upon which WebForms are built, the biggest offender being the postback, to obtain that quality. And I'm sorry, but developers who "scream that they need their code-behind", as OP puts it, are not *senior* developers, and if they once were but have taken to such activities, they've lost that status in my opinion. A senior developer doesn't "need" anything other than a compiler and a text editor to be effective. Sure, there are tools that will enhance that effectiveness, like a good IDE with auto-complete and syntax highlighting, but they aren't needed, just useful. **TL;DR:** the fact that I dislike WebForms has nothing to do with why I think the guy isn't senior. The reason is the fact that he refuses to deal with anything *but* WebForms. 
Certainly you're entitled to your own definitions, but it may not reflect the definitions used in the real world by the rest majority of us. You can absolutely be a senior/expert etc. at ANYTHING in life, as long as you don't claim that you hold the same status at something else no one has the right to take that status away from you. If you're a mechanic that knows 90's Hondas like the back of your hand and can take them apart and put them back together makes you an expert/senior whatever title you want to use in that particular space. Just because you haven't ventured into brand new vehicles doesn't take away anything you've accomplished. While I understand your definition of quality, and to some degree I agree with you, I very well realize that it's not usually the definition used by clients. This forum is part of academia, and opinions/trends here often reflect that. Just because something is not engineered and developed to your particular standard doesn't make it any less quality in someone else's eyes. This would be like saying that anything short of a Rolls Royce is not a quality car. Most clients don't have the kind of money or even the need that a Rolls Royce commands. The vast majority of software in the world is not written by absolute rock stars. Hell the vast majority 90-95% of developers are not rock stars. There is time and place for everything.
Been doing this for a while
Tell me more!
No, usually not, because that would require the business layer to have a dependency on the UI project, the data models are usually in a separate domain layer by the way.
Yeah that makes sense. I use a repo layer but first I am hearing about the service layer on top of that
I use MVC5 at my job everyday, but unfortunately we still strongly practice waterfall... Wtf
It drives me nuts when developers forget we are here to make the company (and us) money.
http://stackoverflow.com/questions/17010190/entity-framework-model-change-error http://stackoverflow.com/questions/21687532/entity-framework-error-context-changed-since-the-database-was-created I've also read somewhere there's update migrations package/script that can be run. Or just update/refresh the model -- which doesn't make sense, really since you're only modifying the data, not the schema. Seems like the best solution is to just turn off the migration tracking with the &lt;null&gt; option on model create (mentioned in both links).
EF is a nightmare. Use something like Dapper and you'll be much happier in long run.
Haven't run into that one yet, but a developer did waste an entire day because I removed EF's access to a table. It wasn't even a table that he was using. But because it was in the EF model it decided to have a screaming hissy fit.
Are you using migrations? If so, you might need to run update-database from package manager console.
You must have changed a field somewhere. It could have just been an attribute or something. Use EF Migrations and do add-migration "name" and it will create a script showing you the difference. I've added or removed or updated data all the time bypassing EF and never seen that error unless the model changed in code 
There's nothing wrong with decoupling code to improve testability, the article just explains it poorly.
Couldn't have said it better. When it works I really enjoy using it. Quick and easy. If there is a bug or my database got out of sync or if it is a full moon and EF decides to throw cryptic errors... God I hate EF sometimes.
No aspirin. I just tell it to generate a migration, change the migration code I disagree with and run it.
try passing an instance of [NullDatabaseInitializer&lt;TContext&gt;](http://msdn.microsoft.com/en-us/library/dn221749\(v=vs.113\).aspx) (TContext is the type of your db context) to Database.SetInitializer at the start of your program.
I'll preface by saying that I don't unit test, therefore I hope someone else will chime in. IMHO when you do unit test you want to test business logic. There really isn't any business logic in just retrieving data from the database. I see a lot of emphasis on code coverage which leads to IMHO completely useless tests that only waste precious development time.
Oh god, on every single project I always run into it reinserting duplicate data, like putting in a country twice on a reference table. Is it my code that is wrong? Yes. But what am I doing wrong? Have fun hunting that one down. EF is easy as hell to get up and running for some basic CRUD. as soon as I have to do something more complicated it turns into a delicate pain in my ass.
The linked example is showing one example of returning stubbed values. You can do it more elegantly with mocking tools. Anyway. You generally don't test db access, you assume it returns what you expect. If you have a summing method, you supply it records to sum and verify that it does as expected. If you have one method that retrieves values and sums them, you're doing too much and should break it up. 
&gt; You generally don't test db access, you assume it returns what you expect. Not sure that makes sense. The db will return whatever your SQL is telling it to return, not "what you expect". Where is the test for whether your SQL is wrong? Assuming code is going to do "what you expect" is exactly how bugs arise. ed: &gt; If you have one method that retrieves values and sums them, you're doing too much and should break it up. What do you mean? How do you break up "SELECT SUM(OrderAmount) FROM Orders?" or other more complex SQL? The more you break up SQL, the more separate queries you produce and ruin scalability. 
Words of encouragement. 
I use mvc + typescript + knockout + jQuery for every enterprise project I have ever architected
What makes you say that? I wish they fixed these issues in NuGet itself instead of writing yet another tool but I haven't seen anything that leads me to believe NuGet (or package management) wouldn't be needed. 
Open the source file with notepad++, show all characters. I suspect there's some weird invisible character inside his string when copying and pasting.
Why do you have two ";;"?
Yeah, it's usually something like that.
Microsoft embedded report viewer, good luck getting it working without a windows web form in the project
Not everyone wants to SPA
I'll definitely look at this the next time i have to suffer using WCF. 
Photoshop or Gimp? 
www.balsamiq.com is very useful, it's the one I use most of the time and for more detailed or "finished" mockup we use Photoshop for demo templates. You can search online with the keyword "Wireframe" or "Wireframe tool"
GoDaddy is not the best company to work with (especially for domain registration; ask the folks over /r/webdev). Azure would be a good place to host as you'd get some experience working with that environment. I'm not getting any alerts from Chrome about that site being hacked.
&gt; especially for domain registration; ask the folks over /r/webdev). I believe you. What is a good domain registration company in ur opinion? I want to focus on .NET folks asking this question. Do you have a blog in .NET? If so, what do you use? 
GoDaddy is horrible to work with. I use https://www.namecheap.com/ Orchard might be worth looking into. Personally, I'm using Jekyll right now.
This is a powerful reply to me. Can you please answer a few follow up questions for me? Are you a fulltime .NET developer? A lot of folks are using Jekyll right now and really doesn't require you to know ruby. Only HTML, JavaScript, and CSS. Yes? Can you tell me why you decided to use Jekyll and not use .NET as your web portal? If you do use .NET applications for personal use, what was it for? Thanks for your reply. 
Sweet :D I will certainly take a look at this. Thank you!
I'm using Dotster since before they changed their name from 000domains and it's been OK, but I get a **lot** of spammy "check out the special deal we're running this week only" email from them. I hear a lot about DNSimple and Hover on various podcasts that I listen to.
Does NSIS or Innosetup have these features: Installation * Install is Wizard-Free™ and doesn't look awful (or at least, it should have the possibility to not look awful) * No UAC dialogs: installs to the local user account (i.e. under %LocalAppData%) * Uninstall gives a chance for the application to clean up (i.e. I get to run a chunk of code on uninstall) * No Reboots. None! * Can pull down the .NET Framework if need be Updates * Updates should be able to be applied while the application is running * At no time should the user ever be forced to stop what he or she is doing * No Reboots. None! * The client API should be able to check for updates, receive a (preferably in HTML) ChangeLog Production * Generating an installer given an existing .NET application should be really easy, like it is for ClickOnce * Hosting an update server should be really straightforward as well, and should be able to be done using simple HTTP (i.e. I should be able to host my installer and update feed via S3) * Creating an update for my app should be a very simple process that is easily automated * Support for multiple "channels" (a-la Chrome Dev/Beta/Release) 
This is the gold standard for UI mockups.
This is a framework. Chocolatey is a program and a service.
Did you make a blog from scratch in .NET or used a tool such as dotnetblogengine? I am not interested in making a blog from scratch, but definitely interested in implementing a solution in the 4.5 MVC5 framework. 
Having battled ClickOnce and MSI for years, I welcome this. Doesn't by any chance support Outlook plugins? They're basically DLLs which load on Outlook startup.
Neither. I'm pretty small-time so I just signed up with Wordpress.
That wasn't my point. If you need to build an installer, there are many systems already available which work fine and users are used to them. Sure if you want something which does something peculiar or doesn't look like a wizard, then, sure you need to look elsewhere. 
I can see a lot of work has gone into trying to make WCF easier to use by developers who aren't WCF experts. I think the tone about how the API was designed in your original blog post is unfair. Had the API been written in a way that hid the state and all these exceptions, then people would be complaining about everything being too black box and not exposing what was going and would be causing people a whole different class of problems. Those exceptions are exposed for a good reason, it just so happens those good reasons don't apply to everyone but to expose them, everyone needs to be exposed. Had your approach been used to begin with, what options would developers have who need the behavior exposed by raw WCF? It's easier to hide details in a wrapping abstraction than it is to expose inner information that has been purposefully not exposed. If the state information and exceptions had not been exposed, you can be certain that every transport would handle it a different way and the task of exposing it in a consistent manner would be orders of magnitude harder than what you have achieved. It doesn't matter which way an API is designed to work, there will always be someone who disagrees. I'll give you an example based on the API you have created. I'll note I'm not simply playing devils advocate here, while your solution will work, I genuinely believe your approach to solving this problem is not the best way to do it. Your solution doesn't "feel" right to me. You are fighting with and modifying the programming model for how WCF is used and making it's usage less natural. You have removed (or diluted) the concept of a channel being a proxy for a service instance and made it so users don't just new an object and call methods on it any more. You also are pretty much requiring creating a closure delegate on every single WCF call. Also there is a potential for confusion and bugs with how a channel can be closed. You could have someone do: ((ICommunicationObject)service.Operations).Close() Which would cause the original channel to have Close() called on it and get you back to square 1. You don't properly abstract away the problem but instead provide an alternative method on a wrapping class which has different behavior but there's a way to call the original close which could easily be done. You could have created a set of extension methods called SafeClose and SafeDispose which exhibits the safer behavior. Although that wouldn't get you safe Dispose() usage, you just need a wrapper which exposes IDisposable which you pass the client channel to and use that in your using block. You can still use the original channel object and have a surrogate IDisposable. I believe a cleaner way to do this would have been to work within the extensibility model of WCF and create a custom channel layer that you put into your binding. That way code which consumes the WCF service wouldn't need to be changed. Remember, WCF was designed to be highly extensible and the channel is a stack of layers (even mentioned in the blog post with regards closing the inner session). When .Close() is called on a channel, .Close() is called on the top layer which should then propagate the .Close() call down to the next layer. By using a custom channel, you don't modify existing client code and you can implement all this logic there. All the configurability of the exception behavior strategy would be ideal as endpoint behavior extensions. If that's too much wiring on your channel binding, then expose the configuration knobs on the binding element where you can specify the class to use. Basically, WCF was designed to enable the kind of behavior modification you are doing without requiring the consumers to drastically modify their usage code. (Edit: minor formatting)
Sorry, I haven't had that problem with the state service. If I think of something, I'll let you know.
Do you mean describing the problems with his code, or describing my suggested method of implementation? If you mean the latter, then you might note from his blog post he said "After more than a month of developing late into the evening and early morning", so you can see that putting together the full solution isn't a 5 minute job. It would take me a full 8 hour day to put this together (and reasonably tested) so show you something working. Based on reading a couple of pages of Adam's blog, I believe he should have enough knowledge to understand and intelligently comment on the alternative approach I'm suggesting. I can certainly see some benefit for simplifying the API behavior for some people. Here's a good [blog post series](http://blogs.msdn.com/b/drnick/archive/2006/05/08/592110.aspx) on how to write a custom channel. This should give an idea of what would be involved. 
I know it sounds weird, but I've started blogging on github using markdown files. Its free, I get draft through branches, code syntax highlighting, snippets, images. Plus it's easy to just write content and I can work offline. https://pages.github.com
&gt; I can see a lot of work has gone into trying to make WCF easier to use by developers who aren't WCF experts The fact that WCF requires an "expert" really says a lot about what a mess the API is.
All seriousness aside, HTML5 and JavaScript? All kidding aside, balsamiq seems good but it's such a specific style. Hell, why not just creat a prototype instead of a mockup? :-)
I've used [Pencil](http://pencil.evolus.vn/) and it works ok but not great. It's like GIMP compared to Photoshop.
For domain, godaddy is good option. For .NET hosting, then go with asphostportal.com. They are good and cheap too.
Axure. An awesome tool for creating prototype
This is actually a wrapper around Wix.
Thank you for probably the most thorough comment I have ever had! I appreciate the time that you must have taken to read the articles and write a reply. Another comment on my blog has said a similar thing about me possibly being a little unfair, and you make a good point about the overall design of WCF. There are many good points about the extensible design of WCF, and my articles are not meant to be a trolling of all of the WCF design, just rather a narrow focus on the design decisions that cause the common issues I see too often on so many client sites. In fact, just today a colleague contacted me about a client who found themselves with a WCF memory leak... it happens too often! I agree that state and exceptions should be exposed, which is why I was careful to keep the ability to catch exceptions if using the Operations property, or have the exception in the OperationResult if using the Consume method - as well as the overarching exception behaviour strategy. I think there are different types of users of the WCF API - those who just want to use it simply to call a service in a robust and reliable manner, and others who are more technical and want to create their own channels. I am focusing on the majority who simply want to call a service and not accidentally get themselves into trouble. Part of the goal was explicitly to hide away the complexity in order to make a reusable channel, where the consumer does not want to or need to know about channels faulting and they just want to get the job done. So yes, I am 'fighting' with some of the WCF programming model, primarily to abstract a certain type of user away from that complexity they don't want to care about nor should need to handle themselves. &gt; Also there is a potential for confusion and bugs with how a channel can be closed. You could have someone do: ((ICommunicationObject)service.Operations).Close() &gt; Which would cause the original channel to have Close() called on it and get you back to square 1. &gt; You don't properly abstract away the problem but instead provide an alternative method on a wrapping class which has different behavior but there's a way to call the original close which could easily be done. There may be potential for a small amount of confusion, but this absolutely will _not_ cause a bug. The ServiceConsumer is quite robust and this does not affect negatively affect it. It simply closes the current channel, and the next time the ServiceConsumer is used another channel will be created seamlessly. The developer/user doesn't have to worry! I actually considered removing the Operations property in favour of forcing people to use the Consume method (and thus not expose the ICommunicationObject) - but I thought people would complain about not being able to use the standard try/catch programming model - so I kept it there to allow users to choose their preferred API/approach. &gt; I believe a cleaner way to do this would have been to work within the extensibility model of WCF and create a custom channel layer that you put into your binding. That way code which consumes the WCF service wouldn't need to be changed. If you recall, the channel should always be closed or aborted depending on the state. Additionally, one should not wrap the channel or ServiceClient in a Using statement. I want my team to be able to use the Using statement with WCF!! Many times I have seen work clients / developers 'forget' to close the channel properly or not implement the pattern correctly, and thus cause leaks. I wanted the ServiceConsumer to be really robust - and [eventually] recover from all situations - with a destructor/finalizer - as well as being usable via the normal .NET programming practices of using the Using statement. While you have a great suggestion about using a custom channel, I don't think that will work in the situation where the developer does not call Close/Abort properly, or at all. You have an interesting idea about the exception behaviour strategy being an endpoint behaviour extension - I hadn't really considered that before. cheers! Adam
And any business logic should be extracted into Behaviors. So that you controller is simply and orchestrator for different Services and Behaviours.
It's kind of arcane, at least according to some. Once you get used to it, it's OK though. 
ASP MVC is pretty awesome.
I got that feeling, too, after nearly a decade of \&lt;% %\&gt; tags.
The primary usage pattern of WCF doesn't lend itself to the using pattern. Generally you will get a client instance and keep a reference to it in some container class. You would then reuse the client every time you wish to make an API call. Then when you are done with the client, you would call Dispose(), Close() or Abort() and then handle any exceptions that are thrown. Generally you only care about those exceptions (from Dispose/Close/Abort) if you are trying to track down a problem and on a day to day basis you would swallow them and maybe log the issue (if desktop client code for example), or emit a perf counter (if used in middle tier scenario such as an asp.net site) to allow alerting if there is an ongoing issue. After all, you have said you are done with the channel so if there was a problem closing it, who really cares on a one off basis. But if there's a real issue that needs diagnosing, then you want that info. WCF is absolutely usable (from a client side) by less skilled developers, but you can't expect to call api's on a remote computer and pretend there's no network in between you along with all the ramifications that brings. The alternative to using WCF is a whole heap more knowledge you would need to know and understand which is way more advanced than knowing not to using a WCF proxy client in a using statement and that it might throw exceptions occasionally if there is a network glitch. I expect someone who is writing software to be able to cope with concepts a bit more complicated than hello world.
Am I the only one that feels like mixing code in the UI is still a little gross. Razor just makes us feel good about it
Why? I don't see view logic on my .cshtml as a disgrace.
I like the overall structure, but everytime I go to jump into the mvc project at work i'm like "fuck, I just opened the old ASP project....no nevermind"
Glad you got that PHP monkey off your back. Thought knowing PHP it would be four dissimilar monkey api's largely doing the same thing with wildly different syntax and casing. Plus you'd have to make global changes in monkey.ini.
It's just a way of RAD website development, but finally with a nice syntax! When binding frameworks are just overkill, Razor is definitely the best in line!
I'm just starting to learn MVC after doing webforms for years. My webforms have no code or logic in the aspx file (besides the occasional eval) and it feels so dirty to mix them with MVC!
&lt;?php &gt; isn't nearly as bad as having to put a F'ing $ in front of every variable name. ;-) Seriously, though, I'm learning MVC after years of doing mostly desktop development. The thing that has me surprised is that it's ... just ... so ... easy. I keep waiting to get bit on the butt. I'm sure it will happen - the database connection gods hate me - but so far it's been a really smooth experience.
I personally don't mind it. What you have to be careful not to do is write *too* much heavy code in the UI. I've seen situations where people have done all kinds of processing in views using Razor that *should* have been contained in a controller. You do have a choice though. If you implement your controllers as RESTful APIs you can very easily eliminate C# code in the UI by using something like jQuery or Angular to communicate with it. 
I left a similar comment. I haven't used html and css in the planning stages of a project at work yet; I'd like to give it a shot. I think it could work really well. I am curious which is more effective. I'd think for a Web dev staying in that stack probably won't hurt. But the other tools are probably very accessible for non-devs.
Yes, with one exception: localized strings. Any data binding I prefer to do with a viewmodel like knockout.
&gt; view logic Exactly. **View** logic. But WAY too many devs get lazy and put all sorts of logic that should rightfully go into a service into the pages instead. Then it grows. And grows. And eventually it becomes an un-maintainable mess. Obviously, it doesn't have to go that way. But having an environment where code can easily become part of the view files means it will. And it's just very easily overused/abused.
Hmm... no. If you've waited this long to get into web dev, then most of the ugly is history at this point. However, this is assuming you stick with a nice HTML 5/CSS 3 stack and know enough about how to write effective Javascript (probably w/jQuery) that you don't get back into HTML 4 transitional pre-IE 8 DOM/style-hack support hell.
Razor is the shit!
If you just want to replace the official implementation with your own, then follow the guide available on asp.net: http://www.asp.net/identity/overview/extensibility/overview-of-custom-storage-providers-for-aspnet-identity. If you instead don't want to deal with all the bloat of identity period, follow this guy's blog to get the bare minimum established: http://www.khalidabuhakmeh.com/asp-net-mvc-5-authentication-breakdown-part-deux and then implement the rest yourself (lockout, password reset, registration, activation, etc...all pretty trivial stuff, but you can do it how you like versus subscribing to identity's interfaces).
What makes you think it's memory? It looks like it's a connectivity probably from that error. Is it on a different server from the application? Check the error logs on that box.
Sounds like you wasted a developers day...
All of the automated tests passed, so as far as I'm concerned the permission change was legit. An't my fault the tooling is retarded.
*Microsoft.AspNet.Identity.EntityFramework* contains the default EF implementation for the identity framework. If you don't want these, don't add the package (or remove it). You just want the package *Microsoft.AspNet.Identity.Core*.
The only problem I run into with Razor syntax is setting a JavaScript variable and ending my line with a semicolon. I haven't had to do this in quite a while, but going by memory, this makes JavaScript unhappy: var javascriptVariable = @SomeViewScopedInteger ... and this makes VS/Razor unhappy: var javascriptVariable = @SomeViewScopedInteger; 
You should checkout the Jade view engine 
&gt; var javascriptVariable = @SomeViewScopedInteger; Try it like this var javascriptVariable = @(SomeViewScopedInteger); It's just that semi-colon is valid in both razor and javasript. So this is a case where you have to manually teminate razor. They can't infer the closing based on usage. 
It is but Razor is not just for ASP.NET MVC. [Razor Engine](https://www.nuget.org/packages/RazorEngine/) allows to use Razor everywhere you want.
I'm sorry, but I doubt seriously that there are Razor pages that can't be reasonably refactored. It isn't old enough to be the kind of legacy mess that you are talking about...so I say HUMBUG. A HUMBUG on what you say! Now...take an old VB6 forms app or classic asp and bask in the labyrinthine nature of chaos!
It's on same machine. I'll take a closer look at the error logs. I had written a specific test to continue increasing what I was storing in Session state by about 1 MB at a time, and it repeatedly crashed right around the 60 MB. This is actually the case in two environments, my test PC where I did specific test, but also in our production environment it appears to crash right around 60 MB of process memory.
&gt; The trick is to identify if it is rendering UI code. If that's the case 100% it should be in the view, the controller and model shouldn't know anything about how to render something based on the model. That's the View's job. But the controller should be able to tell the view, *what* content should be visible, or not? You wrote about the role of the view: &gt; Stuff like Conditional Logic (show this div or append this class if model property is true), or iteration of some sort. So one must clearly define, which Properties lead to which visible content... and that's imho the tricky part ;-)
ooh that sounds interesting, how do I check/adjust that value, it's new to me as I'm more of a developer, not so much admin or network guy
You sound like a joy to work with. edit: This guy probably isn't so bad. 
http://umbraco.com/ http://www.orchardproject.net/ Or install web platform installer and pick some .net apps they have listed. http://www.microsoft.com/web/downloads/ 
EWS is sooooo good! We have an application that needs to import information from emails; when we went from using Outlook interop to EWS we eliminated (without exaggeration) half of our application crashes and some operations sped up by 15 times.
I'm really impressed with it and in future versions of our product we're planning on dropping support for POP3/IMAP/SMTP and just telling clients they need to use EWS.
I might have a different view, I like it. The controller should concern itself with populating a model and selecting the correct view. The view then should be concerned with properly displaying that model. If the view is not programmable, then you end up with view logic in your controller, or view information in your model...and THAT feels gross to me. Now, there is such thing as too much code in your view, I shouldn't be using my repository code in the view. But I hate having a bunch of weird view specific logic in the controller.
I understand the design you suggested. Developers would have to use the custom channel factory to create their channels - so the code that consumes the WCF service still would need to be changed. Same-same with the ServiceConsumer. The ServiceConsumer intentionally gives the developer the freedom to choose how to create their channels. I have worked on some projects where the client is keener to use the generated ServiceClient classes, and other projects where the client prefers to create channels via a channel factory. I designed the ServiceConsumer to be flexible and work in either situation. The leaks I see are usually caused by the Close/Abort pattern not being applied correctly - which causes the server process's memory to keep growing, or the server to reach its maximum number of connections. 
"can't" &lt;&gt; not maintainable "Not maintainable" is a decision you make on the first day you write the program when you're trying to decide if you're going to be lazy and jam a bunch of logic in your page template vs. putting it in a well designed RPC style service method. At first, the lazy way will appear fine. And for small apps, there may never be a problem. But now make the application talk to multiple databases. Make the app multi-tenant. Oh, and internationalize it. Add support for multiple device profiles. Integrate it to your ERP or other financials systems. Bam! You've got an unmaintainable mess. Congrats? You **can** make it work of course. You **can** make all that logic neatly compartmentalized into classes and then ensure your templates never go over to the dark side. You **can** also write maintainable PHP. But we've all seen too many instances where those things don't happen because the separation of concerns wasn't respected. As for VB 6 - I lived with that tech from v2 - v6 and I saw the worst and best of what's possible there too. VB 6 had a lot more in common with PHP than not. VB.NET? Not so much. So many did not survive that transition as developers. 
My job is to make the database accurate, fast, and secure. No where in that job description does it include coddling some half-broken design-time tool because it's user decided to import every table instead of just the ones he was actually using. Allow me to stress this point. He wasn't actually using the table I removed his permissions for. As far as he was concerned, it was just bloat in his model. 
On a technical level you are correct. If you had anyway of knowing your change may have broken the application you should have given him the heads up. I really hope it wasn't in production...
Oh, I see the misunderstanding. The application itself was fine. No problems at all. I take pride in making sure anything I do doesn't break the application, even on the dev server, because it means everybody else can't do their job. What happened here is that the design time tools in EF were hosed. They could no longer see the table so instead of removing it from the model they started panicking. 
Shouldn't JavaScript's "append ; if it doesn't run" "feature" make that work? ;)
Yes, It does, and all though Razor tries to make it look clean, it still looks dirty to me. But then again I despise web programming because everything takes 3 languages to do something and that one thing can be down 42 different ways. 
Most javascript engines do support semi-colon completion. However, best practices is to always include the semi-colon yourself. Relying on inference can get you into some really nasty bugs. So while technically yes, in the example above, the semi colon could have been omitted. The advice I give at conferences is to include them, and I push my team to follow that standard. Others have different views, but as an architect I like to remove ambiguity and remove the possibility of an ugly bug.
&gt;But the controller should be able to tell the view, what content should be visible, or not? You wrote about the role of the view: No most definitely not. THe controller shouldn't tell the view anything about what to show or not. In fact the controller only takes data from the model and passes it to the view. The model layer sets properties on the viewmodel object. But how that is used is delegated to the view. For example, imagine a model called Person, with a property called Admin, ie public class Person{ // person properties, name etc public bool Admin {get;set;} } The controller or model layer shouldn't know what happens in the UI if admin is true. It deals with data, not visuals. the view is the one who knows that if admin is true , we show extra links, or add the text "admin" or whatever. Using this separation we can easily add different views and try different UI's without need to change server side code. &gt;So one must clearly define, which Properties lead to which visible content. Sort of. One needs to separate thinking about the UI vs data. We need to think about we are doing in the object model, then later allow the view to represent it in the way we want at that time.
Hehe, I was only jokingly suggesting that :) Of course the `@();` is the correct way to solve the problem :D
Or one of my more favorite tricks -- pick a concrete view based on conditions in the controller. They made the View(string, object) overload for a reason . . . 
You can always check if the type supports ICollection/IList anyway and cast as required.
Just search google for socket exhaustion in windows. An easy way to see if its likely is to use netstat on the cmd line and have it list all ports, I usually pipe the output into a text file for easier reading, if you're finding 1000's of ports are on waiting for timeout /closed then its possible.
http://nyobetabeat.files.wordpress.com/2011/09/will-code-php-for-food2.jpg?w=329&amp;h=379
Seems like a strange extension because c# already does 'as List&lt;t&gt;' for casting, unless you're optionally converting to List if the underlying type isn't a list already
Ok, your insistence has inspired me to look further into a zero code change solution such as you are suggesting. I'll add it to my backlog... But why hasn't someone already done it?
I believe you can configure the Unity container directly from within your web.config. http://msdn.microsoft.com/en-us/library/ff660906(v=pandp.20).aspx However, I usually find it cleaner to do it in C# based on settings, similar to what you've done. 
You could use configuration transforms. It allows you to write a config diff for each environment. So put your defaults in the main web.config and put the specific environment settings in the ex: web.prod.config You could use this mechanism to switch between different "container factory" implementations if you do the mapping in code.
I am not a fan of re-implementing most things when it comes to security, so I would recommend trying this method. If that doesn't work, look into [MembershipReboot](https://github.com/brockallen/BrockAllen.MembershipReboot/)/[IdentityReboot](https://github.com/brockallen/BrockAllen.IdentityReboot). 
&gt; the view is the one who knows that if admin is true , we show extra links, or add the text "admin" or whatever. So then the view has definitly more logic, than I am used to from different approaches... still don't know, wether I like that! The role of the controller is a bit circumcised here - there remains only validation tasks for it...
But is it really UI logic to decide, which items are shown (and therefore which actions could happen in the future)? Think of restrictions due to user rights; do you really want that to be decided by the UI?
I had written a Unity extension a while back, [FluentUnity](https://fluentunity.codeplex.com/) that had to do what you're talking about. Basically, you want to build up the majority of the container via code and conventions, but then apply mappings from the config file as overrides. I'd suggest just using the default unity configuration section and not appsettings, but something like this should work: var container = new UnityContainer(); container.UniteFluently(c =&gt; c.AddAssembly(GetType().Assembly)); container.LoadConfiguration("overrides"); Just replace the "container.UniteFluently()" call above to whatever code you use to generate your default/common unity configuration, anything in the overrides section will just overwrite those mappings. Note: I believe Unity still works like that, I've switched to Autofac since I wrote the linked library, so I haven't kept up with Unity changes.
You can use xml transforms in your build process to selectively load unity config file
&gt; Are array indices 0 based? Was a C# interview and most memorable because they did not expect me to know it. :-]
Can't remember exact details, but basically they were trying to get me to solve a problem with an older version of excel, and the root of the problem, was that they should have been using a database for the functionality they were looking for. Basically asked me how to optimize the current solution. Not sure they really wanted me to solve it or were just hoping they could survey people about the issue lol. Sorry it doesn't really go to your question, but I guess the more interesting questions have been hands on. One time I was careless and got caught in an infinite loop somehow, and the laptop basically had to be hard reset to get out of it. That was fun, as the software to test forced me to redo the entire code, as you couldn't save till the end. Another funny interview I did involved another testing program where you had to do something. But if you clicked file instead of edit then the exact path of menus, you got a fail on it. Keyboard short cuts also registered a fail. haha. Good times.
This goes back over 15 years, but I was given this one in C: int i = 100; printf("%i \t %i", i, i++); What will be output?
 int x[2] = { 5, 7 }; int *i; i = x; printf("*i++ is %d\n", *i++); i = x; printf("*++i is %d\n", *++i); i = x; printf("++*i is %d\n", ++*i); Lots of people get this wrong. Edit: [Answer.](http://ideone.com/yC1zVk)
http://docs.activestate.com/pdk/6.0/PerlNET_overview.html
They set the bar so low... :/
It could be that they've been burned in prior interviews by people who read a pamphlet about C# one evening &amp; added it to their list of skills. Or they're trying to filter out people who know the material, but can't *explain* it in clearly. I've done interviews with people who claimed to know SQL Server development *very* well but couldn't explain an inner vs. outer join or why one would need/want a primary key.
I'll confess I had to go to Google real quick to see if it might be a trick question and I was missing something.
Just to clarify: "Balsamiq" is the name of the company. The tool you're referring to is their product called "Mockups".
Array can be other than zero based. [MSDN: Array.CreateInstance](http://msdn.microsoft.com/en-us/library/x836773a) Module Module1 Sub Main() Dim b As Array = Array.CreateInstance(GetType(Integer), New Integer() {6}, New Integer() {-6}) b.SetValue(20, -2) b.SetValue(20, 0) End Sub End Module Only allows negative indices. 
They always get me on the clustered vs non clustered indexes. 
"Let's say the client wants to change something, what do you do?"
thanks! great post
Here's some neat ones... Design a fix length cache that operates based on a queue principal where the oldest accessed item is the first to be dequeued to make room for a new item. Now optimize it. Design an email alert system for a bank where users can subscribe to the alerts they want to see such as low balance. Now make it faster. What concerns do you see with the different ways you could optimize? How could you build the system to scale? IQueryable vs IEnumerable. What is the difference between a static class and a singleton? What is the difference between an interface and an abstract class with all abstract methods? What is the seek efficiency of a dictionary vs a sorted dictionary? If a Dictionary is O of 1 and so is an array, which, if any, has a faster lookup? When having an unassigned nullable decimal, what happens when you do: nullDec += 5? Does Async/Await spin up a new thread to wait for the async to finish? Does a ConcurrentBag use locks? What data structure powers a List and how does a List grow and shrink? Does an array implement IList? If so, why? When using the IEnumerable exension .Last (), what is the efficiency of that operation? Are there any exceptions? Let's not forget the old GetHashCode vs Equals override. When overriding GetHashCode, please explain how mutability of your hash properties can lead to issues. 
When I was interviewing while still in college, one guys whole interview was "How would you design Monopoly?" I gave kind of a bad answer because I was new and because it was a really dumb and pointless question for a college grad. I guess he must've been trying to see if I would ask questions and dig a bit but at the time, I didn't realize it. I wasn't applying to be a spec writer or an architect so it seemed really weird.
But..... this is not relevant to anything or anyone. That is proven by the fact that I highly doubt anyone really knows this (useless) fact.
Yup...I failed this interview.
Looks like the server hosting the open. section of collab.net is offline. All projects are offline with that.
"Have you had any experience dealing with raccoons before?" 
Array indices don't have to be 0 based. Most people don't know that. So yeah, maybe not so low, since you'd have failed it.
It shows that you know it very well and try to learn all the corner cases.
Madman!
This isn't really related to your question but I've used ankh before and it was... Wank. Try visual SVN. It is so much better. 
I was reading on stackoverflow and majority seemed to have the opposite opinion. That's why I decided to go for this. And it's free while Visual SVN is not.
Because most people just learn that array indices always start at 0, which is wrong. Heck, most books teach this.
why did they ask it, what did you answer, did you get the job, and most importantly: was the interviewer hot?
I'm using it, and I didn't pay. I just used the visual studio add in thingy. Although, if memory serves its only free if you're not on a domain, which I am not. So your probably right. 
In the same way Update works through a EditItemTemplate the Insert works through the [InsertItemTemplate](http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.formview.insertitemtemplate%28v=vs.110%29.aspx)
I think that they're all pretty reasonable, myself, and pretty easy to guess at if you've never encountered them before. Reminds me of MS cert stuff. What do you think that questions like these say about a company's culture? Have you noticed any correlations?
I like this one! It helps identify thought process on top of aptitude. 
FunnelWeb is MVC 3. What is MiniBlog? I couldn't find that mentioned in the readme on the github website? For hosting, which one is the cheapest? I only need a small blog and a basic front end for a personal website. 
Check my github example. I hope it can help: https://github.com/mtzaldo/waTodo It's a TODO list (basic CRUD). I use dapper .net and Model, View, Presenter and a kind of repository class (I init the repository once in Global.asax.cs)
That's not unheard of. If I wasn't trying to learn more .NET so hardcore, I probably would do something like this myself. 
Any idea when vNext is going to be released?
Yes. You are right.
update - looking into SSIS for this. Just have to figure out how to start process from the ASP.NET interface
The first interviewer was smoking and smelled really good for some reason. The second was a man and although not my particular preference, he had some admirable physical qualities. I guess they had some serious problems with racoons at the facilty where a woman had actually been attacked. I just told him the truth that I used to work at a steel plant and I was once forced to fish a hissing (possibly rabbid) "coon" out of a dumpster with a 2x4. I didnt get the job.
You should not of used the word coon. That is why you didn't get the job.
Really? You're promiting your **4 years old** article? One that does not even take *"modern"* concepts like immutability and With()-methods in account? Or that named parameters can be used without optional parameters?
I also recommend checking out Pentaho Data Integration (Kettle) for this type of job. It probably works better in a Java environment but I don't see why you couldn't use it. SSIS is the MS equivalent, and IMHO, slightly less powerful. Still SSIS would be a good choice too.
You could build one check out http://netduino.com
Yes definitely use an ETL process for this. There's an option of using [Rhino.ETL](https://www.nuget.org/packages/Rhino-Etl/), which is a pure .net ETL framework that should do what you're trying to do and would be dead simple to kick off from an asp.net web application.
I have a million things to do this weekend, but I can probably help you out. I will PM you tomorrow. Edit- Sorry, I am absolutely swamped right now and don't have the time. Good luck, I hope you find someone able to help.
Sure but I don't think it's a bad thing to not know it.
It is a relevant, sound guideline.
I like to make sure code compiles before committing whenever possible. This will save all your files anyway, but a save-all is sufficient. 
People mentioned netduino, but if you can try out the original arduino. The reason is that the community and support is huge compared to netduino. And if you can write C#, the learning curve for arudino C isn't hard.
Another option is to use an old cell phone. I've been very happy using an original droid phone as a programmable alarm clock for the last 3 years or so. Mine is android so using c# on it might not be as easy as other languages but an older windows phone could probably do the same. A really old smartphone and usb dock can be had for for &lt;$25 on ebay and has everything you need for a network enabled alarm clock. (screen, network, speaker, plenty of cpu/ram). 
This is a good idea! I even have an old E200 prototype in a box somewhere. Time to get on ebay and have some fun! I might pick up a arduino/netduino too since I didn't realise how inexpensive they are, and have a dabble.
What version of EntityFramework are you using? As far as I know, EF6 tools don't work correctly with Visual Studio 2010, which leads me to believe that you may be using EF4. While inspecting the documentation for the library you're using, I've noticed that they ship Interop binaries, Linq binaries, and EF6 binaries, which leads me to believe that there's no direct support for EF4. However, you can follow the instructions [here](http://blog.stephencleary.com/2010/06/sqlite-and-entity-framework-4.html) that may help you along the way. 
I agree. That's what a ViewModel is for.
After you add the nuget package do a rebuild and then the provider should show up when you try to add.
This article doesn't cover the opposite side: how to call a .net server side function from the client side. Basically you mark your method/function as a web method and add to the page a scriptmanager with EnablePageMethods="True". You now have the choice of calling the function directly, or using jQuery and call it as a web service with pagename.aspx/FunctionName as the URL. 
Nuget will install a different package version base on your .net target for project . Could be related.
Have a second server in Asia, and depending on your situation, either use it as a data cache, or clone the server software from the original server and synchronize between them.
That was the original idea, but management won't go for it. Besides the technical issues which will take a long time, they're not going to fork over the massive amount of cash to deploy multiple servers to a bunch of different countries.
Thanks for the info. Optimizing the calls is definitely the first priority. I'll look into the other things you suggested. Thanks.
We hadn't thought of that. It sounds like a good idea though. There would still be the issue of keeping the data central. If we went the local route, they still wanted to sync all of the data to the central server. But I'm beginning to wonder if that's really necessary.
&gt;There would still be the issue of keeping the data central. You can just have a single db instance running at a central location and have multiple web instances throughout the globe. The trick is to have very aggressive caching with each web server.
I still use Winforms, but be aware that it is an older technology that has little demand in the job market. If you want to do some .NET on your home system, you may want to look into WPF for desktop development or get a ASP.NET MVC book and learn the web development side of things. ASP.NET MVC is the more employable option. For starting out, you can either signup for free Azure hosting [1] or pay for cheap hosting plan (some are &lt; $5 / month). [1] http://azure.microsoft.com/en-us/develop/net/aspnet/?rnd=1 
If you happen to own your own private business, look into biz spark.
[Self Hosting Windows Communication Foundation Services](http://msdn.microsoft.com/en-us/library/ee939340.aspx) The other route is to use IIS. The simple way is to create a folder, e.g. c:\webservices, and right click -&gt; publish the service to that folder. Then in IIS, create a new web site and point it to the folder. This will also create a new AppPool for you site, which you'll probably need to change to use the appropriate .NET framework (2.0 vs 4.0). 
Find out if you have per-developer licenses. I know this is an older licensing model, but if you have it, you can install your work tools on your home computer (or any other machine, at home or at work). Just uninstall them when you leave your position.
Use Visual Studio Express and deal with its limitations or go with IntelliJ IDEA and get a pretty full-featured IDE and deal with the limitation of being on the JVM instead. From my past experience getting angry at them (as recently as 7 months ago), the free IDEs (Mono/SharpDevelop) aren't worth what you pay for them.
Careful... while the software can be licensed per-person, your employer might care how you're using software they're paying for. For example, MSDN is licensed per-person, but my employer would be pretty pissed if I was profiting from their MSDN Ultimate subscription...
DB2. Wcf services with custom tools that do the heavy lifting. MVP. I almost wonder if we work at the same place. As for creating WCF services, they're really easy. Having an application consume it is pretty easy if you want default configurations. The difficult part is mocking up a scenario of production and test. As for databases, SQL Server (Express) is really easy to use. You can do nearly everything (with the exception of actual UI parts) on a background thread. And there's a million different ways to do things on background threads. Edit: I have to ask. Does the acronym NSR mean anything to you? :)
Yeah, this depends on the employer. Personally, I brought my own tools and my company reimburses me for them, there's a couple of things they bought licenses for (NCrunch, LinqPad) because they bought them for the whole team at once. But my MSDN subscription, ReSharper, IntelliJ are all my own.
if you still have you .edu email working, you can get dreamspark account and download VS2013 Pro for free. 
Still have access to a .edu email? Sign up for Dreamspark (https://www.dreamspark.com/) That's everything to get you started self hosting. Want something simpler, look into Azure for cloud hosting. PM me if your interested in the Azure stuff and I can see about setting you up a small hosted platform on my Azure sub.
Because you already have some programming experience, I would speculate that you can skip the most basic tutorials. Regarding a sequence of videos, Pluralsight offer what they call *learning paths* that might be of benefit to you. These so-called learning paths tend to be orientated around certifications but I still think they will be of benefit to you. Check out [Programming C#](http://blog.pluralsight.com/learning-path-c-microsoft-exam-70-483) and then depending on the the company's technology stack, see [Developing ASP.NET MVC Web Applications](http://blog.pluralsight.com/asp-net-mvc-microsoft-exam-70-486) or something else entirely. You can browse learning paths [here](http://blog.pluralsight.com/learning-paths). 
Their C# Fundamentals is really good. Some of it is basic, some of it's stuff you may not use, but all good. I would definitely watch their videos on Interfaces. If you're feeling really fancy, their LINQ videos. Then asynchronous operations, however, if you do get hired you may see what their preferred method of async is. (My company strongly believes in ThreadPool. However, the more I learn about TPL the more I like it.) 
Why are you limiting yourself to .NET? That tooling problem you're trying to work around is never going to go away. Maybe you want to write Windows apps, in which case I guess it makes sense. I've never been a fan of WCF. Look into implementing REST services, you can use ASP.NET MVC or something like NancyFX (http://nancyfx.org/) with visual studio express.
You really can't. And that's one thing that sucks about .Net
To me, it sounds like your best bet is to bone up on the fundamentals. It sounds like at work, you are used to libraries and helper classes being built on top of your company's infrastructure and middleware services to smooth your ui building process. I would say you need to start to look deeper into the classes provided directly by .NET and use that knowledge to reason a solution to the projects you want to do at home. Look up Blooms Taxonomy for a general structure for evaluating your own knowledge about subjects that you are trying to get better in. This is what teachers use to evaluate their students. It's not the easiest answer, but the more you understand about the framework as it relates to core processes, like server communication and data persistence, the more situations you'll be able to synthesize that knowledge into a solution. MSDN and Google are your friend. For database access, as in your question, start reading up on entity framework and Linq to sql. Wcf has lots of helper software and classes, and extensive documentation. The resources are out there to improve your knowledge of the fundamentals, you just have to look for them. Good luck and pm me with any questions! 
Okay thank you. I will definitely look into WPF. We do use ASP.NET MVC at work, I just haven't been assigned to projects taht use it. Also I wasn't aware that Azure had a free option.
I might eventually ask for training support. For now I'm still relatively new (less than 6 months), so I'm trying not to ask for too much. I wasn't aware of SQL server, but I do have VS 2013 from Dreamspark. Thank you for the reply
Does SVN mean something to you? The internet is a small place, I guess. I will look into SQL Server. Thank you for the reply
Thank you for the reply. I forgot to mention that I have VS 2013. I would definitely consider using VS Express if I didn't
Well.. SVN is a very well known acronym for Subversion. So that's a poor example.
I started a small company and applied to Microsoft biz spark. Basically gets you an msdn subscription for three years. 
You're right. But yes I'm pretty sure we do work together
I forgot to mention I have VS 2013 from college. But thank you for the reply. Quite a few people have mentioned BizSpark, I will look into it
That's a good point. I've come to like .NET since that's what I've been exposed to recently. I will definitely look into REST services, and I hope to use ASP.NET MVC soon with work
Thank you for the response. I think you're right. I learned to use our tools at work very quickly. I probably should take a step back and learn the fundamentals.
I forgot to mention that I do have a Dreamspark account. I will look into Azure though. Thanks for the response
I don't, but I will still look into biz spark since it has been mentioned a few times
I forgot to mention that I had VS 2013 from Dreamspark, but thank you for the great response
Yeah depending on what it costs in your state to get an LLC, you can get all the tools for that price. Then you have to pay MS back once you make your first million. Seems fair.
I applaud your objectivity. You're definitely on the right road of inquisition and there is no limit to the things you can synthesize when you truly understand the tools at your disposal. Pm me anytime for advice or answers!
Last time I checked I had no problems to just clone the repository and compile it. No issues. Also please keep in mind that they're under **a lot** of pressure to finish in time for the VS14 release. One of developers even wrote he's filing bugs instead of **playing with his baby daughter**. I'm sure after the release things will get better. They are also still in discussion on how to best accept pull requests. Even when Roslyn is open source, the VS tooling is not. But tooling is critical, and they can't just accept new stuff to the compiler when there's no tooling support. A good example is TypeScript, which was developed public, the source code was public, but they did not accept any pull requests after the first final version was released. They're likely to go a way like this with Roslyn too.
&gt;Last time I checked It has been broken since a little more than 3 months now. If Microsoft want a community to contribute to their open source project, they need to have at least 1 employee to keep an eye on things. If they can't afford 1 employee to keep things at minimum decency, then they shouldn't open source and invite people to join their development. I share your empathy for the team though.
They keep an eye on things. The discussions in the forums are vast, a lot of user feedback is recognized and evaluated. **People are joining development by actively contributing to these discussions.** But pull requests? Yeah, I told you already, there is much more about this than you expect. Besides the issues with the tooling, every pull requests has also to be evaluated and maintained. This takes time, a lot. Also, new people can't be simply introduced to a new project, especially not with a tight schedule. Working people in takes time - time they don't have.
Translation: Whaa! I'm a big baby and I can't understand why a project that is still in alpha and under constant churn isn't perfect yet. You are acting like a spoiled brat whose been told that he can't open his Christmas present yet. And as a member of the press I would be appalled if any of my colleagues reported on this childish dribble. 
&gt; Also please keep in mind that they're under a lot of pressure to finish in time for the VS14 release. One of developers even wrote he's filing bugs instead of playing with his baby daughter. I'm sure after the release things will get better. That's a self-inflicted problem for Microsoft and not for anyone else. It sucks for the developers on the roslyn team at Microsoft that they're not given more time, but they opensourced it, so they have to deal with that too. Microsoft is the richest and largest software company on the planet; if they can't find the resources to keep an open source project running because their self-set deadline is hard to meet, they have bigger problems than this. What I don't get is that there even IS big pressure from MS to get this out the door: a compiler is the cornerstone of everything: it has to work 100%. There's no room for error, and NO-ONE benefits from a rushed compiler. I'll notify Kirill of the roslyn team of this thread, perhaps he can chime in. Personally, I think a project which doesn't accept any pull requests is not open source, but simply a closed source project with a public, readonly repository. 
I didn't accuse of lying. I have no reason to doubt that the Roslyn project is in a state of disarray as they rush through their backlog. But that doesn't make his public complaints any less childish.
&gt; Personally, I think a project which doesn't accept any pull requests is not open source, but simply a closed source project with a public, readonly repository. Where in the letter did they complain about not accepting pull requests?
Even though I agree that it's a bit childish to complain about the state of a product in alpha-state, there's no need to go *that* route.
Response from Matt Gertz in original thread https://roslyn.codeplex.com/discussions/569086
Who are you, exactly? What have you done? Why are you qualified to say that Roslyn is a "disgrace"?
Copy/paste from the url above, for the lazy people among us: &gt; Hi, Scynapse, Yep, we've been a bit quiet (as Zarat notes), and my apologies for that. We are (finally) in the final stages of locking down the APIs for this first version of Roslyn, and so have been nose to the grindstone on that. In fact, I'm pleased to report that, at 8:34PM Saturday evening, we actually hit zero bugs (what we call our ZBB, or "zero bug bounce", which basically means that all bugs older than 72 business hours have been dealt with). We'll probably bounce up a bit from that, but the goal for us is to actually shut down on APIs (modulo any feedback coming from you folks on them, which we'd have to fix before actually shipping) this month so that people (including other folks in VS) can take a bet on those APIs and expect things to remain relatively stable. The first thing I have scheduled after that lockdown is a reassessment of the current OSS infrastructure (things like Codeplex vs. GitHub, adding more automation to catch failures in the infrastructure earlier, and so on) -- in fact my leads and I have a kick-off meeting on this later today. (You should also start to see more devs coming up for air as well.) &gt; Can you clarify specifically what the issue is in the case that you are encountering? I'm sure that it's been brought up in other discussion areas, but it would be useful to have it all brought together (or you can send me mail at mattge@microsoft.com). Based on the page that you reference in your text as well as other clues in there, I'm worried that this might be about loading &amp; debugging your version of Roslyn into the VS IDE itself (i.e., so that you can see how your changes affect the IDE and debug them). If that's the case, then that is indeed a convoluted process which is currently beyond our ability to streamline any more than it is. I can see how a person might in fact refer to it as "disconnected from reality," and to be honest, in my darker moments, I've sometimes felt that we should have just said "not supported" and left it at that given all of the gymnastics that are required to use it -- but we thought some brave souls might want to give it a try, and so there it is. The overall problem has to do with two issues: constant API change which breaks the corresponding closed code, and also the fact that VS requires assemblies to be strong-name signed using our private key. (I can go more into details if you like.) As noted above, the constant API change will at least be winding down, leading to an island of tranquility at some point until we start defining a vision for the next version. &gt; If that's not the issue and I've completely misunderstood, then please let me know, and we will track this down. It's definitely the case that we haven't had the ability to leap in as much as we'd like, and it wouldn't surprise me if, combined with our newness to the process, we'd missed something obvious. However, for general usage, we haven't received any recent reports of build &amp; run being problematic on the command line, so if there is one, we'd definitely jump on it. &gt; Thanks, &gt; Matt Gertz &gt; Dev Manager, Roslyn
Yeah all except for those free versions of the Visual Studio products.
It's also interesting that he seems to be the only one having these issues.
This is definitely my suggestion as well. It's very easy to get IIS running on Windows and as long as you have the right versions of .NET running locally it should "just work" (it never will but that's part of the fun of getting a service published the first time) If you are really entrepreneurial then you could spin up a VM inside of VirtualBox (free) if you have an extra Windows license and use that as your web server. Then if you ever want to deploy a project on the internet you won't have to make many changes as you will be familiar with the publishing process on your own machine.
Last time I used them they were incredibly crippled. You couldn't use plugins with them and you couldn't use the performance tuning tools.
SQL Server 2012 and Windows Server 2012 R2 are also available from DreamSpark I believe (can't get on at the moment annoyingly). If your home machine has the processing power you could set up a VM and start playing with these.
Make the Azure DB the central one?
The author of this open letter is an idiot and an asshole.
If your work paid for you to have an msdn account then you can reuse the licenses within that account for personal use. This includes things like web hosting and database credits on Windows Azure. Check out this blog post: http://nakedalm.com/do-you-want-visual-studio-ultimate-for-free-do-you-have-msdn/
&gt;They keep an eye on things. The discussions in the forums are vast, a lot of user feedback is recognized and evaluated. They don't answer anyone pointing out the fact that their [building, testing and debugging](https://roslyn.codeplex.com/wikipage?title=Building%2c%20Testing%20and%20Debugging&amp;referringTitle=Home) instructions aren't working. They used to work before the team updated the page 3 months ago, but never since. &gt;People are joining development by actively contributing to these discussions. People contributing to these discussions probably setup things back when the instructions were right and the targeted IDE wasn't VS 14 CTP. &gt;But pull requests? Yeah This has nothing to do with pull requests.
We didn't.
We're not complaining about the state of an alpha product, but about the state of the open source aspects of the project. The team don't answer anyone pointing out the fact that their [building, testing and debugging](https://roslyn.codeplex.com/wikipage?title=Building%2c%20Testing%20and%20Debugging&amp;referringTitle=Home) instructions aren't working. They used to work before the team updated the page 3 months ago, but never since. The instructions partially work only if you debug the prepare script and switch the toolset package version for a more recent one. Ultimately, this doesn't even lead to you been able to install and debug (into a second instance of VS 14) the change you make to the Roslyn code. Our letter was addressed to people familiar with open source and this specific project, not the press. &gt;As a member of the press As a member of the press, you missed the whole context and then more.
The tone appropriateness depends on the gravity of the subject it addresses and the degree to which it can support that gravity with facts. The facts are that it's been more than 90 days that the open source aspects of this project has been abandoned to the extent that the building, testing and debugging instructions given to the community - the entry point to the whole project - doesn't lead to anything more than a few hours lost of your time. Members have post about this on codeplex and MSFT never replied to them.
A 2 minutes trip to the project forum (topic: general) would prove your claim wrong. Edit: Downvoting rather than actually check the forum? Come on, it only takes a few seconds to stay in good faith rather than keeping reality-agnostic party line. 
JaCraig, I saw this only after I replied on this thread. But upvoted this response. Specifically for SharpDevelop. I haven't heard of that one. 
I think most reasonable people understand why things are the way they *right now*. In short, you are not at the top of their priorities, be patient. Any one who has ever worked on a software project of any appreciable size and complexity understands this.
No one said Roslyn was a disgrace. If that was the case we wouldn't want to contribute to it. Roslyn is amazing. What is a disgrace is the way the open source aspects of the project have been so far handled. The team don't answer anyone pointing out the fact that their [building, testing and debugging](https://roslyn.codeplex.com/wikipage?title=Building%2c%20Testing%20and%20Debugging&amp;referringTitle=Home) instructions aren't working. They used to work before the team updated the page 3 months ago, but never since. The instructions partially work only if you debug the prepare script and switch the toolset package version for a more recent one. Ultimately, this doesn't even lead to you been able to install and debug (into a second instance of VS 14) the change you make to the Roslyn code. Members have post about this on codeplex, having been so far as pointing out bugs in the whole setup process and sent MSFT pull request on corrected versions of some files. MSFT never even replied to them, months later. The facts and their consequences matter; who I am does not. I regret the tone I used, but Microsoft has acted carelessly more than a few time with developers in the past and the 20+ years of accumulated frustration got the better of us when we wrote the letter. We really want (Again, and again and again) Microsoft to get it right with developers and the open source community, but every chance you gave them makes you less tolerant to aberrations. 90+ days of misguiding the community in their bootstrapping process and not facing this fundamental issue on their forum - not even 6 months after their announcement at build 2014 - is an aberrations.
We're very happy Mr.Gertz is ready to look into this fundamental issue with us. We will reply to him in the following 24 hours with all pertinent details. 
Anyone else surprised they chose google hangouts and not Skype as the format for the web series? This isn't meant to be a negative comment. Just I am surprised how many current and well respected Microsoft developers are using competitor products. That being said, I am very excited about vNext and Windows 10. Thus far, definitely seems to be going in a positive direction. 
See http://aws.amazon.com/free/ be careful however, if you pass your free tier, or forget to release an elastic IP when you delete a VM etc you'll be charged so it won't be "free". &amp;nbsp; PS. Unless you expect visitors you can execute the learning experience on a local machine as well
Again, we aren't talking about the product here, but the handling of its open source project. This distinction is paramount. It's my opinion that it would have been fine for Microsoft to let the Codeplex community know they couldn't keep up with a working integrated bootstrapping procedure (e.g. VS 14 integration) and that joining the project was temporarily impossible for the new comers. If you can't maintain such fundamental social aspects of an open source project, don't open source a project. This is true for any enterprise, let alone a successful and resourceful organization such as Microsoft.
Azure also has a free period if you're just signing up. You can use a linux VM (aka you're not tied to using MS tech). Probably worth staggering signups between AWS, Azure, and other cloud providers to maximize free time for play/test/hobby projects. If you want to expand beyond that for app dev, you can sign up for Bizspark for a healthy amount of free Azure credits and an MSDN account that runs 3 years. Quick edit: an inexpensive VM like Digital Ocean's $5/m would work as well. Just make sure you delete any VMs you don't want to be charged for, as simply shutting them down doesn't stop billing.
If you have dreamspark then you have access to a free 90 days of pluralsight. You couldn't go wrong to check out some of their tutorials on there as well.
Azure has free websites. I used it when I was learning. The only problem is you can't point your own domain name to it. But here you don't get to use nginx Haven't found any nice alternatives like there are for other platforms. There is one more option you could try. Using mono and vNext. This can be run on linux instances. Now you have many options like Digital Oceans etc. But I don't how smooth this experience will be.
They have a [blog post](http://blog.pluralsight.com/learning-path-c-24-hours-to-becoming-a-c-master) on mastering C#. May be a tiny bit outdated, but still worth considering, I think.
Thank you for your informative post. It is really a shame that Digital Ocean doesn't offer IIS, but given how vNext is platform agnostic, doesn't really matter. :) 
That looked solid, but ouch, those prices. :) 
Agreed. I might try to deploy .NET on Amazon for now and then switch to Digital after vNext comes out? I feel we are almost out of the forest, but not quite. I also heard vNext is still tricky on Linux. So we are about two releases away from out of the box solutions I dare say. 
There is also [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/) which has some pretty good self-learning instruction videos.
"John Montgomery, Director of Program Management, Visual Studio Platform" is one evil looking dude.
$0 per month for a basic setup ("Canoe") and $10/month to use your own domain name. You aren't going to find flexible app hosting for much less than that. I was using canadianwebhosting.com for a while, but their support is terrible and their control panel is even worse. Deployment by FTP only, shaky support at best for database migration, it was worth the couple extra dollars a month just to get a host I was comfortable with. I actually use Azure for my projects, though my personal site is hosted on AWS free tier using Ghost because I don't have to worry about a worker spinning down and someone having to wait 10 seconds to load my site if nobody has been on it in a few hours.
This is an *ad hominem.* The argument should be considered on its own merits.
Arvixe is pretty cheap and I've had a pretty good experience with them. $8/mo gets you shared windows hosting and unlimited bandwidth and storage. 
Which argument? There's nothing substantial in this "open letter", only a complaint that *something* doesn't work. The tone of the letter is extremely harsh, considering that the recipient manages the team writing a compiler for one of the most widely used languages in the world. The lack of a concrete argument, as well as the harsh tone, could be acceptable if the OP was somebody really famous for building good open source software, such as Linus Torvalds. If Linus Torvalds wrote this kind of stuff, then it might be taken seriously. But the OP is no such person; they're just some random dev who won't even name themselves.
Crippled compared to what? Visual Studio without plugins is still one of the best IDEs around. This may come as a shocker to you, most people don't use performance tuning tools.
There are certain projects you don't have access to (deploy projects maybe?). I don't remember. I haven't used it in a few years.
Sorry, not a book guy. But I would recommend skipping WCF and jumping into REST using WebAPI.
VS2013 uses updates not SPs and it's on update 3 currently.
FunnelWeb might be MVC3 but it's feature complete. So unless you need something specific from MVC 4/5, it should work for your needs. If learning MVC 4/5 is your goal, then you could try taking FunnelWeb and upgrading it. From a hosting perspective, unless you are expecting a lot of traffic, I don't think you will incur a lot of cost going with any of the options I mentioned. But if it is a concern, you can use Pretzel or FsBlog and host on GitHub Pages for free.
For WCF? Hands down, Programming WCF Services by Juval Lowy. But I'd like to know, what are you trying to accomplish? WCF is fantastic for .Net to .Net within the datacenter (and kinda/sorta .Net to Java). Other technologies like WebApi are better for building REST endpoints exposed over the internet. WCF has a mediocre REST strategy, but is brilliant for building the SOA that backs your public API.
If you want something quick, I'd invest in something like Pluralsight to get you up to speed. Do a couple of months worth and it will pay off big time.
And update is just another fancy name for Service Pack. It's the same.
The VS14CTPs are mostly for people who are interested in ASP.NET vNext and Roslyn.
I am a little surprised at the hostility shown towards to the OP. While Roslyn may be alpha/in testing/not ready/whatever, if Microsoft's goal is to build an open source ecosystem around their platform(s), then they need to be a better steward of their projects. They could've just made a note letting people know what broken, what's on their to-do list, etc.
I'll second this recommendation. The 4th edition is a behemoth.
Take note that WCF is no longer the only option to make services in .NET. If you want to make RESTful services, Web API is now recommended and easier to configure. There's a top notch course about Web API on Pluralsight.
Architectural decisions are completely out of my hands. I'll talk to my colleagues though.
Thank you very much for even thinking about it :) 
I'm very bad a javascript stuff but I will give it a go, thanks
Thanks! Tbh, I was looking into ASP.net WebAPI soon after making this post and it appears that WebAPI is the way to go. Basically, we receive frequent requests to 'open up' or 'expose' an 'endpoint' on a given site so that third party apps and services can post data, e.g. an iPhone app has a feedback/contact form and the client needs all inquiries to accumulate at one central location - the website. Until now we've been able to get away with ashx handlers, but with growing need for the same I have been considering true services as more robust, secure, and extensible way to go about it. I have worked with asp.net MVC before, and having done some research, I don't think I'd be asking for book suggestions for WebAPI though :) 
Anything IO these days should now be done Asynchronously, that's a big shift I've noticed so any research around that will be time well spent, in my opinion. Anything web is MVC and MVVM is ever more popular on the desktop. 
You can try including the credentials in the headers of the request. I think in a jquery Ajax call it's something like headers: { Authentication: "Basic " + convertToBase64ToString(username + ":" + password) } 
Wordness!
Microsoft Virtual Academy has some good materials too - and it's free.
If it's just a blog and mainly static pages, then [GitHub pages](https://pages.github.com/) with [Jekyll](https://help.github.com/articles/using-jekyll-with-pages/) could probably work, as well.
Running a web server as a console app is probably not a good idea because of how Windows manages things. I wish I could give you more details, but a Windows Service is probably the better choice if this is a long-running process
Thanks for the input, I will look into that. Right now I'm just happy it's somehow up and running.
If you are just putting internet access able wrappers on an existing legacy system, WebApi is the way to go. 
Thank you so much for your help, thats brilliant, and that it only took you a few minutes when 11 freelancers took nearly 2 weeks to do it makes it even more brilliant. :D
The easiest option if your work has an MSDN license is to add you as a developer and allow you to download all the various tools through MSDN. Once you do have access to some tools I highly recommend installing them into a separate virtual environment instead of installing them on your host machine. This way your entire development environment is stored in a file, which you can backup and take anywhere, independent of your host machine. Also your development tools don't start to clutter up your home machine with debug dlls and apps. It also lets you set up several different environments and run them on the same machine so you can experiment with different versions of tools as well. There's an upfront cost to setting it up, but it will save you a lot of time in the long run. The one I use is from oracle called [VirtualBox](https://www.virtualbox.org/). It is free and open source. You just have to pick your environment, install your OS into it and then any tools you want. After that, since it's just a file, it can be booted up to do development anytime anywhere. It even runs okay off a USB drive I've found.
Is anonymous a requirement? My team just went though some growing pains switching from windows to basic in web api and disabling that solved a lot of issues.
C# 5 Unleashed by Bart De Smet. I can't recommend this book enough.
Try the AppHarbor PaaS, they have a free usage tier along with a free development SQL Server database.
Where are you getting a NRE? Also, what are you even trying to test here?
The ParamCheckObj is throwing the NRE. I'm trying to load up some environment variables from the server. I'm testing that the variables are present and can be called. So if I set a variable on the ParamCheckObject (ie class ParamCheckObj{val1 = "foo";}, the test picks it up. But if I run the LoadActualParameter() off the object it gives NRE. I'm trying to convert a web forms app to TDD &amp; MVC, but I don't know a lot about the framework. I call these objects from Page_Load methods on code behind pages with no problems. But I'm trying to abstract them into tests and I get these errors.
yeah i've been studying no doubt, and i'm fairly confident with it, just wanted to get the best grade i can :] i'm on SO right now, what exactly are you referring to about jon's answers? thanks!
A null reference is this: var someObject = null; var someValue = someObject.SomeProperty; ^ Null reference here because someObject is null There is no opportunity for a null reference exception in the code you pasted.
There's no val1 property on the class you pasted in here. Barring CPU malfunction or test runner oddity (both of which are supremely doubtful), there's no chance that what you've provided us could throw a NRE. Psychically debugging, there's a val1 property on the ParamCheckObj class and you're performing some string operation on it without checking to see if it's null first.
What Jon doesn't know about C# isn't worth knowing. But he's an expert on the language itself, not specifically ASP.NET. For that I'd turn to Scott Hanselman, Phil Haack and Jon Galloway. I'm assuming they don't teach WebForms anymore?
This is why I'm confused. Please bear with me, this is literally my first attempt to work MVC &amp; TDD. I think I'm dealing with a situation that requires mocking of my calls to server params. I'm not really sure how to handle mocking and why I'd want to do it. I've got telerik justMock, but the documentation and implementation seems crap. Do you have a recommendation on a resource for mocking.
Read into Moq or Mock, both great mocking frameworks for C#. Both can be found in nuget.
You use mocking when some dependency isn't set up to be testable. The mocked object looks like the object you're mocking from the outside but you want to change the behavior so you can isolate the thing your testing. Say you have an object with a method that does a bunch of complicated stuff but all you care about is that it returns a specific integer value. The mocked version doesn't do all the other stuff, it just returns the value you want. This way you don't have to worry about constructing a scenario to satisfy the demands of the logic in the actual object. Your test is now isolated to just the thing your testing and won't fail for something related to the dependency. At any rate, the error cannot possibly be in the code you've shown us here. There's just no place in there where that opportunity exists.
Did you cut and paste your program or eyeball it? The code you pasted won't compile because the class definition is missing on the HomeController. You may have excluded the source of the NRE as well. I also don't see a [TestClass] attribute. Also, debug through your test and step into each method. The code you have is small enough that you can inspect every invocation.
Disable basic auth in IIS and use attribute based auth in your app.
Unity3D
Basic Authentication in IIS works before it reaches your application and authenticates against local windows accounts on the IIS machine (and possibly AD?). If you want to handle Basic authentication against a different authentication store within your application, you have to disable Basic auth in IIS and implement the appropriate filters/etc. in your app.
How beneficial is it to have an MCPD/MCSD?
(Reposted to this version of the report, from http://www.reddit.com/r/opensource/comments/2if4x5/microsoft_roslyn_open_source_project_in_disarray/) It's a fair cop. :-) We missed updating a script to cover this particular scenario when we upped our version numbers a while back; I apologize to anyone who has been blocked by this. We're working directly with the OP on CodePlex to resolve the situation to everyone's satisfaction. The link to that discussion is given elsewhere in the comments, but just to have it again here, it's https://roslyn.codeplex.com/discussions/569086, in case you want more details and/or would like to follow along. Matt Gertz Dev Manager, "Roslyn" 
Not very, at least not where I am. Although, it looks good on my CV. :)
It really shouldn't. It served its purpose back in the day, but now there are so many better options. 
I'm sorry but if $15 is "really expensive" for you then you're going to have a bad time. Azure will arguably give you the easiest, most integrated experience. For 5 or more bucks less you could very likely sink a ton of your valuable time into getting things to work the way you want.
This is very helpful for those working on large legacy projects that need to be incrementally replaced with newer code. edit: There are easier ways to do this though. 
Mind if I ask whereabouts you're located, generally? I'm on the east coast but could be potentially relocating to the Silicon Valley area in a few years. At the moment I've been working as a developer for about 10 years, but I feel like I could use any advantage I could get before I get out there..
oh i'm sure it might be helpful, i'm just saying this article has already been written countless times 10+ years ago. Code-behind, ui being built out with tables, using javascript in entirely the wrong way....all done with a modern flair. Just a very weird article to take the time to write, especially taking the time to do it this well.
Put a breakpoint at the ParamCheckObj pco=new ParamCheckObj(); line. Then check the various variables in the local variables window and see what's null. That's the easiest way to tell. Based on your code above, the null reference shouldn't happen. The only thing I can think of is that you're using something like Castle to rewrite your objects at compile/run time... But that's not obvious based on the code above nor do many sane people do that without a good reason.
Sorry bud, but you clearly are not pasting the real code. Which I understand because its proprietary. However, the copy/re-write job you performed is inaccurate because the code you posted will not cause a null object ref. Go ahead and try to give a better re-write and I'm sure someone on here can identify the source of the bug. So does the Test throw the error or does it get thrown at runtime? Does LoadActualParameter call any subsequent methods or use any other objects? I can only guess but that name of that method indicates that you are reading some config values from the web.config.
Instead of blindly writing certain technologies off, we should always try to fit the tools to the job. Not everyone has the money to pay for unit testing, separation of concerns or a fancy n-tier architecture. When a mom-and-pop company needs a little site, and fast, am I really doing the world a disservice by accommodating them with webforms as I can spit out a website in 2 hours?
If you haven't used it in years then you really don't know what's in it or not as that continues to evolve...
I could be speaking out of my ass here but I find that you need a really solid CS/IS background + MS knowldege to actually be good at .Net ... it's not a "pick up and go" type of framework like Ruby or, to some extent, PHP. I have a feeling that a lot of devs learn the syntax and can muck around in it, but to really be good you have to actually understand IIS, SQL Server and the rest of the ecosystem and how they play off of one another. This isn't to dismiss other frameworks or languages. Everything has its strengths and weaknesses, I just found the overhead with .Net to be higher ... but also potentially, the reliability and scalability if you do it right. This is just my opinion, though. I'm sure someone will call me an idiot for this viewpoint :)
I agree with you there. Languages such as Ruby and Python were designed to have a lower "barrier" for entry. C# is in the middle somewhere and C++ has a high barrier. Learning C# is only part of being a .NET developer as its a whole platform with numerous APIs and tools to learn e.g. ASP.NET MVC, Entity Framework, Web API, SQL etc. Also a really good developer will know more than one .NET language well.
I don't like the term ".NET Developer". I also don't like the term "Ruby Developer", "Python Developer", "PHP Developer", or any other "{language} Developer". I'm a problem solver. With code. I can solve problems in Python, Ruby, Javascript, Java, C#, VB (6 and .NET), and more. I've made major contributions to many large apps using all of these programming languages with the exception of VB6. Unless you're hiring help for an open-source application, every person you hire will be very unfamiliar with the architecture of the app(s) that you are working on. Every person you hire will have to spend time getting up to speed. We need more Software Engineers, and fewer language-specific developers. 
Yes you've reminded me of this post: http://www.outlierdeveloper.com/the-purposeful-polyglot/ A genuinely good developer can programming in any language. Having said that, companies want developers with enough relevant experience to "hit the ground running".
Deranged40 also makes a good point on open source. This is a great reason to consider using open source software in your company.
&gt; but also potentially, the reliability and scalability if you do it right. Any app in any language can be slow, sluggish, and generally terrible. In practice, the quality of developer(s) involved completely overshadows any specs of a programming language as evidenced by your disclaimer: "...if you do it right". I'm sure we've all seen prime examples of .NET applications that are just terrible. And Facebook has shown that even PHP can be scaled. But, Facebook didn't just hire PHP developers. They hired good developers. They came up with a need to write lots of it in C and C++. The fact that C and C++ eventually became necessary at these peoples' PHP job lends to reason why I don't like using language-specific descriptors for my line of work. At Facebook, the developers solved problems.
Because first you had to learn WinForms then WPF and now Asp.Net MVC? :) (MVC6/vNext will be the next step) Well I enjoy learning, but there are not that much **free** resources than for e.g. php.
I can't speak for everyone else, but as a .NET developer in the Brighton area, I just can't put up with the corporate BS and extra added stress that I have found myself in with my last few jobs. I've actually chosen to take a substantial pay cut and I'm now contracting for a friend's business that is slowly and steadily getting off the ground. I'd be up for a part time job as a compromise between the stress and the pay, but I don't think there are very many of them around :(
The "hit the ground running" part is key here. If you hire someone from another language background you're placing a long game bet they'll stay around to pay you back for slower productivity. Our industry has a really bad reputation for people leaving after an average of a year or less - this means the house will lose most of these bets if they hire developers without the practical experience to write .net *today*. Combine this with many projects these days having shorter timelines and you have your answer...
On the other hands it's not terribly easy to find good projects either. Currently looking for a remote contract myself and it's nothing that falls in your lap... But then it's also generally a bad time of the year budget-wise for that. Which, I guess, also plays into the demand side of things as well. 
I entirely agree that this is the case, but it is a shame because it perpetuates the problem of developers getting pigeon holed into categories such as ".NET", "Java", " Front end", "Back end" and makes it hard for developers even to get an interview for a job outside of their area of experience no matter how smart they are.
Why wouldn't you be able to spit out that same website using MVC, in the same amount of time? WebForms was genius when it launched, in that it instantly converted all the Windows Forms developers into web developers over night. But is a really bad way to think about modern web development. Sure there's WebForms MVP, but that's a fix to make WebForms testable. Everyone is certainly entitled to an opinion, but to me, as a professional, WebForms is a hammer in a world where every problem isn't a nail.
True. The perpetual stream of new apis that deprecade the previous batch is really hard to keep up with. 
We aren't employed to be just smart and that is the point. It's a supply and demand thing - businesses hire engineers to solve problems. They want the best person to solve their problem, in the shortest time, for the least cost and with the least risk. If anything this drives the industry forward as we are forced to learn and stay up to date, but the reality is almost never as bad as us engineers like to complain about when not getting a job "they didn't like that I was awesome at speaking ancient Greek". It's nearly always thay they needed their problem fixed - you didn't seem like you had the right skills woman for the job. I wouldnt hire an english professor to write me an egyptian scroll - itd take too long and would probably have terrible grammar. Pretty simple really.
Assuming this is sarcasm then I couldn't agree more. I'm so sick of reading about companies wanting rockstars, ninjas, and gurus that it makes me ashamed for the trivialization of my profession. Why don't they just say that they are looking to underpay someone right out of college with extremely limited experience and get it over with. 
That's the time you promote them if you want them to stay.
Because we already have jobs.
What this often means is that your &lt;form action="" method="POST"&gt; element is submitting to the wrong URL. Check the action="" attribute. You can also open up the browser console (Ctrl Shift K in Firefox - ensure the Net button is down). When you submit the form it should show you the URL you are posting to. Click on it and check the URL in the address bar carefully. If your form is posting to itself (i.e. /Default.aspx) then something else is going on. If your form URL ends in /Import/Default.aspx, then you should make sure the action attribute on your form is /Import/Default.aspx and not just /Default.aspx. Alternatively you could just make it "Default.aspx" (without a forward slash) to ensure it posts to the same location.
That used to be true in .NET but despite having Microsoft-provided libraries, there are often multiple alternatives (i.e. Web API vs. Nancy and so on). I guess the big difference with Java is there is a recommended stack even if shops can chose to go custom and sacrifice commonality for some other technical advantage. 
Also money is not the only way to incentivise developers. A training budget or some other perks can help.
&lt;form id="Form1" method="post" enctype="multipart/form-data" class="form-vertical" runat="server"&gt; This is my form attribute. I didn't define an action.
Actual links would go a long way towards proving your case. 
Nope. Even Linus cites specifics in his rants.
This is very true, the problem I have seen is that management teams don't see it that way and very often offer rates that are too low. Every job I have had in the last few years is a result of some manager finally giving up and offering a good wage for the work they are asking to be done. 
After loading the page in your browser, view the source of the page and look for the &lt;form&gt; element. See if it has an action attribute. Then I suggest opening the browser console, then submitting the form. You need to see what URL is being posted to.
I tried the firefox browser console. It didn't show anything.
It will only log requests/responses while the console is open, and you must ensure the Net button is down otherwise it won't capture anything.
&lt;form method="post" action="" id="Form1" enctype="multipart/form-data" class="form-vertical"&gt; This is how the form shows in the View Source. The Browser Console didn't show me any errors.
I think this is a big one. I haven't even interviewed for my last two jobs. I'm treated well by employers and usually only leave when a friend offers me an interesting opportunity.
The browser console should be showing your HTTP GETs/POSTs. That is why you it should be open. When you load the page it should show something like: GET http://domain.com/Path/File.asxp HTTP 1.1 OK When you submit the form, it should show something like: POST http://domain.com/Path/File.asxp HTTP 1.1 **200** OK However you form submission is getting a 404, so it will look something like: POST http://domain.com/Path/File.asxp HTTP 1.1 **404** OK You need to copy the URL from the line with 404 on it and paste it into the browser's address bar.
Every time I hear someone say "Why is it so hard to find a good &lt;job title&gt;?", I insert "for the amount of money I want to pay" at the end. That's not to say that money is the only thing we value, but money/compensation is what you use when the project is boring, the environment isn't ideal, the commute too long, etc etc. The employer's choice is to make the job suck less, or pay more, and they don't want to do either. It's not exclusively a .net, developer, or even IT problem.
And your project (including Default.aspx) is in the /Import directory? So your form is posting to: http://domain.com/ When you really want it to post to (I'm guessing): http://domain.com/Import/Default.aspx I would suggest adding the action attribute to your form in the ASPX file. You could try setting it to /Import/Default.aspx or just Default.aspx.
When I go to the 404'd url, it takes me to the page.
I found the issue. When I browsed on the local server, it gave me the error. Content length exceeds...
Thanks for your help.
Not at all. I can use bootstrap and most of the latest clientside frameworks to create sites that render fairly decent code as you don't need to use much of the webforms framework anymore except for masterpages. And that isn't very different from the views. So where do I actually save time. Forms. To create that mom and pop contact form I need to create how many additional objects? Or do a postback and simply deal with the form right then and there. Do I tell them the form is going to cost x amount more because webforms is a hammer in a world where every problem isn't even a nail? If the client side is exactly the same, I can either post to a controller or back to the page I'm on. I'm building a contact form, no need for testing, the need is to minimize the cost. So why not just reuse the page I'm on? I completely agree that webforms is dated and can also confirm that 90% of people don't know how to use it properly, however in the real world budget is king. If I can compete against a MVC project I can usually win on a budget basis if I budget against webforms with no testing and bill by the hour support. Companies don't care about things that are important to programmers. The care about money.
Because they're in demand. Look at the job listings for major tech areas, there are .NET developer jobs listed for days. What we're doing is hiring good Java developers and teaching them C#. It has worked very well so far.
I think this is just your opinion and could apply to all the languages and eco-systems. If anything I think Java has the hardest "pick up and go" ability out of everything I've worked with. &gt; it's not a "pick up and go" type of framework like Ruby I find this funny because I DID pick up and go with C# MVC and VB. Ruby is something I have a hard time with syntactically though.
&gt; That used to be true in .NET but despite having Microsoft-provided libraries, there are often multiple alternatives (i.e. Web API vs. Nancy and so on). When I was developing in .NET I had no idea there was anything outside of MS provided libraries. I was self taught on these systems and it all just came together with VS. Now working in Java, happy to hear there are all these alternatives in .NET. I'll eventually be developing in .NET again.
It's part of the job, huh.
Absolutely, I certainly do that as well. The jump in pay from entry to 2 years experience is pretty huge. You can't expect to keep them if you don't pay them a market rate.
To be fair facebook got rewritten in the past 7 years. PHP was too slow for that amount.
Glad you got it sorted :-)
So there are hardly any good .NET devs then?
You'll notice that https://www.facebook.com/photo.php is the base page for any pictures on facebook still to this day. They have written [HipHop Virtual Machine](https://github.com/facebook/hhvm) to translate their php to C++, compiled, then run. But, they do still use some PHP. The point I'm making is that it's not 100% PHP.
Usually... Because your bill rate is unreasonably low
I stayed with a bad company for several years simply because they gave me 20 days off per year(and additional sick days)(and it happened during the recession so finding a new place was tough), along with just about all the major US holidays you could think of. I left because the commute was killing me. The company I'm with is paying me more but now I only get about 10 days, but then again there's also the days between Christmas and New Years to make up for the first few holidays in the year that we don't get. I have an offer for a new job that I'm on the verge of taking, but that means just strictly having 10 days off, foregoing a year-end bonus, and getting maybe a $12k bump in pay. It'd be a better opportunity in that I could learn a ton, but I have it really easy where I am at the moment :/
Because you aren't paying enough?
How are you taking a screenshot? I don't get it.
It cuts both ways, though. In my experience, it's easy to sell management on adopting an open source library because it's "less work". That's all fine and dandy until you need the library to do something a little bit differently. Now all of a sudden you have to spend a ton of time dissecting the project to figure out how it works, and half the time you discover it's a horrendous rats nest of unmaintainable nonsense. We've been burned by this regularly. There's been a few success stories, of course, but for the most part it's getting to be annoying.
That's exactly what I just did. No raise this year because "reasons"? Time to brush up my resume. A month later, $10k more, and an easier commute and I'm out.
I'm only a .net and Javascript developer.
I'm assuming you're having trouble finding new developers, retaining existing ones, or both. As a web-oriented developer who works in Boston, here's my 2 cents. Let's break this down into parts. - Why can't you find one? Because you're offering too little, which means you're probably not going to retain the employees you already have either, especially if you're overworking them due to low staff and/or bad management. People have a specific preference to what technologies they want to work with. I will not work in a .NET Framework lower than 4.0 myself. People looking for a job typically want stuff that's cool, interesting, or they learned in school. They want MVC, APIs, etc. They don't want to maintain shitty Classic ASP websites, deal with Web Form's page life-cycle, or fuck around with DNN or some other shitty CMS. Most schools I see lately are not teaching it. PHP and Java mostly, youngsters doing PHP, Python, and Ruby. That's what's hip and cool. (and financially preferable.) - Why can't you find a good one? Because the good ones don't need to tolerate a shitty salary or deal with a long, traffic laden commute. (People with long commutes rarely stick around. Especially if you don't pay well.) They get comfortable where they are, either due to lack of oversight or power of promotion. Their skills either deteriorate over time or never blossom due to lack of mentoring, technology, or interest. Then when they finally get canned they look great on a resume but can't code for beans. Which leads me to... Ego. People who think they know it all never do, but they'll act like it and lie to your face. They are not able to work well with others. When put into a lead role they run rampant with power and stupidity, throwing others under the bus for their own mistakes. They become an unrespected pariah and a joke to the other developers who are desperately trying to leave or hope that guy leaves. (And maybe lands a job with you, if he isn't working for you now.) - The real question is: What can you do? Can you provide a reasonable salary for the skill level you're looking for? I know companies that are looking for senior level developers at $50-70k. It's ludicrous. Can you provide other benefits such at working remotely, 4 day work weeks / lax schedule, etc? Can you embrace new technologies and practices in an effort to attain new prospects? (and retain bored employees?) Can you provide a reasonable work flow and time for research/experimenting with different technology? Can you insure that everyone currently working for you is happy? Both with their job and with those around them? What's your company's reputation? Believe it or not, we talk and network, we know what companies/developers to avoid and which we would work for/with again. Good luck hunting. Keep trying and you'll finally catch someone exceptional...
Yes its worth assuming that the OSS is going to have some bugs and need some maintenance and review the code before adopting it. Maintaining it involves work but at least you're not entirely dependent on the 3rd party like you are with closed source.
I think "solutions architect" is much bigger than which frameworks and languages you know. I'm a programming language geek, so I've learnt and used about a dozen languages, but I'm still 5-10 years away from being able to call myself a solutions architect with a straight face.
I feel like 1 month of PTO is worth way more than 1 month of wages. It's basically a blank check to live your life on your own terms once a year.
Yup, couple that with flex scheduling and remote options, I have remained loyal. Time is money.
I've had this predicament before. To be honest, it took me 8 years to learn this (I'm 30), but time is money. Anything that takes time away from your personal life (commuting for example) is a major factor to me and my mental sanity. For example, I took my current job due to the ability to work from home and have over a month of PTO (I probably take off 4 1/2 weeks a year coupled with holidays) over a different opportunity that paid me 25k more that involved a 45 min one-way commute and two weeks vacation. To me, time is money. However, I am not the sole bread winner as my fiancee also has a great job, so your situation might be different if you are the sole provider and/or have kids (we don't have any).
This is going to sound as if I'm trying to start something, please don't take it personally. When someone says that budget is king, and that WebForms is faster, all I hear is "I can build WebForms faster". That really has nothing to do with the technology, it's just a question of developer proficiency. I totally agree with your statement about companies caring about money. But to me, building something untestable, costs money. Again, not writing tests, on account of it taking too long, is a question about developer proficiency.
Not that you're starting something, just missing my point. The scenarios where MVC would be a better fit are the larger applications. Anything larger than a mom and pop website. The size of the project is something I'm also trying to tie to budget. Just trying to say that some things are better suited to other technologies than others. Some things just don't require testing. When I hear, to me building something untestable costs money, I hear, square peg round hole. Not everything is that black and white. Inversely, when I hear I don't care about tests, I care about timeline and budget, I hear $$$. I hear a company that wants to build a relationship and probably wants to keep me updating software. Will the lack of testability make my life hard initially, sure. But long term I can fix that, and all of that is more billable work. If someone wants a TDD project I can totally accommodate and I would never use webforms, however I do mark it up considerably as it takes more time, but do offer a lifetime guarantee on the work. Something I'd never offer on something built on the fly. Actually anything above a certain size and it has to be MVC, I personally need the guarantee if I don't offer it externally. What do I use for mobile development? MVVM. For clientside, I'm loving angular. So please don't take this as a jab at the methodologies you preach, they are sound. They just do not apply to 100% of business requirements out there, especially small business.
Absolutely agree but there are so many companies out there with these standardised pay schemes that think of a 5% pay rise as incredible. Those companies need to be much more flexible with entry developers because the difference in market rates between 0 and 2 years experience is huge. That's why I moved on after 2 years experience. Its also healthy to get experience developing at more than just the one company.
&gt; A highly experienced .Net developer doesn't come cheap 
We have managed to hire a few people that have been good and done well this year. It just seems as if the bad candidates are more abundant than ever. It's not entirely scientific evidence but several companies have been saying the same thing.
That's a bloody good answer! There's a lot of single/dual language specific developers on the market, but it chokes me how few seem to actually have any good natural problem solving skills. While I advocate researching tried and tested approaches in grey areas, you don't down-tools because there isn't a tutorial for it :)
Well it is kind of a more recent trend and Nuget really opened the flood gates to alternative (and free) .NET libraries. Microsoft opening up it's own libraries to the open source world certainly has done a lot to help as well. Companies that where allergic to non-Microsoft libraries (in big part to old Microsoft's FUD campaign) should have gotten the message that open source libraries are not systematically eeeeviiiil. .NET certainly is taking ideas from Node.js and other ecosystems so expect surprising changes when you come back. I certainly would never have predicted such a turn of course but I'm really happy with it. Instead of grinding down after +10 years .NET is actually doing some bold moves.
I totally get you, I have apparently become Enterprise™ without noticing. It's been years since I did something that small.
It's a "problem" when the supply is low and the demand high, and fortunately the demand for developers is high and rising. 
A "Solutions Architect" needs to be solving the problems at a higher level, providing technical guidance, decision making, supporting management and dealing with vendors. These are in addition to designing the overall solution architecture, including the host platform/systems. However, I agree with Uncle Bob Martin who said "An architect who doesn't code shouldn't call themselves an architect".
Ten days holiday is shocking.
If you have one, we will most likely not grill you too much in the interview about technical things, but having one won't get you any extra status/rank within our workplace, the same goes for a lot of companies I know that are Microsoft houses.
Whether or not MVC is faster than WebForms is dependent on the individual developer. I can create workable and well-tested MVC &amp; Web API sites in a few hours; yes, including contact forms, etc. I am not confident I could do the same with WebForms because I don't have that much experience using that technology; never had to, and when WebForms was big, I was doing my web development in PHP, and then Ruby on Rails.
&gt; But the server is located in the middle of the U.S. So when they're requesting data from Asia, it can run super slow. &gt; But if I use Razor, I think I'll end up with a similar problem I have now. I don't think so. Razor is a template rendering engine for your views and shouldn't ever be concerned about your data access layer. This is less of a development problem and more of a SysAdmin problem; meaning, I don't think your app is the bottleneck here. Based on my experience as a SysAdmin, what you really need is more robust infrastructure. If management isn't willing to spend a bit of capital to build a little infrastructure to support their international business interests, they are either stupid (possible) or they haven't heard a value proposition that makes sense from a business perspective (more likely, especially considering doing international business is an expensive risk). I recommend asking /r/SysAdmin how to get management buy-in for your infrastructure needs. As others have noted, Azure can be a great idea.
"Land of the free" ^^TM ^As ^long ^as ^you ^don't ^expect ^free ^time.
Any idea why the military has that kind of mentality on open-source in the first place? 
When you debug, do you see it hitting the Create method?
IMO employers are still dealing with some harsh realities. Coming out of a recession coupled with the reality that IT wages were actively suppressed by the biggest employers in the field means that fair compensation for most tech skilled jobs is 5-20% higher than they would like. I have walked into more than one place in the last couple years where I need to explain this and get pay offers bumped in order to bring in better talent. 
rockstar, guru and ninja are all code words for "inexperienced developer who will do anything to complete a project for less compensation than is fair"
I agree with this, though I've been employed by the same company for over 11 years now so I'm biased :) ( Staying with the same company is probably not the best career strategy for most people, but for me it's been a nice constant while everything else changed )
This is very true, when I am looking I rarely go the "normal" recruiter route. I let my network know what's up and jobs start jumping in my inbox. 
Yep, I had the same thing early in my career. Every couple years I had to move companies to get a market rate. That tends to plateau out a little bit later on and becomes less of an issue. I always analyze the market and what people in the area are making before I do reviews of my guys. I always try to be at least in the average if not above, it costs a lot of money and time if you lose a good developer, a lot more than an extra few thousand a year.
When dealing with the military, I do, to some degree, understand the slightly elevated risks. I can imagine the temptation of even the biggest of dev shops (thinking Adobe size) to collect data and mark it up as something completely harmless.
Yeah, but there's usually going to be a community that you can seek for help. The other option that happens all too often is to have Little Bobby Tables write it himself. And, of course, he's gone by the time you need it to do something a little differently, and you find yourself in a very similar situation.
It's not .Net developers. It's developers. period. Developers, all of us including myself, suck in general. I mean just look at the tools we work with. We have computers that can't do floating point math properly. We have programming languages with so many flaws in them that we learn that while we can do something, we shouldn't ever do it. We work on top of libraries that take a degree just to figure out or are so opinionated that they're really only designed for that one app that the original creator was building or some clone of it (or they're so buggy that you give up on it and move on to another library, or documentation sucks, etc). Then we build apps that crash because we didn't think the user would ever put in a user name with 500 characters... All the way down the stack, we're pretty bad. Then most companies suck also. They do a horrible job trying to entice the mediocre ones amongst us to take a position. I'm lucky enough to work in an area with 6 universities pretty close to here where we can pull junior devs from. But even with that, it's rough. And anything above junior level is just a horrible experience. I've done hiring for Java, PHP, .Net, etc. and about 70% of the people that apply to a job opening are going to tank your app if you let them near the code base. 10% are people who aren't exactly stable individuals or have something in there past that's not going to pass the background check ("Oh, you embezzled $90k from your last employer and just got out of jail... I think we'll pass."). And 19% are people who would be OK in a different role than the one you're hiring for (like a business analyst instead of a developer). If you're lucky, you get that extra 1% who is applying who has the skills you're looking for. Most of the time you're stuck with the people who don't quite fit though. Then companies do the crappiest thing ever and make people do "puzzles" or quizzes to be safe. You're coming at any job opening at a deficit and have to prove you're good enough to not completely mess things up. I just ask one question that determines if I trust your skills. I give them an IDE and tell them to write a small algorithm. I don't even care if they get it right, if they do then great. You can probably code well enough for me to trust you. If they get stuck, I just want them to ask for help. You ask for help, you pass. No one ever asks for help. I think I've only had 1 person in the last 7 years that has asked for help. We hired him by the way. The sad part is most developers fail this test completely. I don't even pick the language they need to use, heck they can use pseudo code if they want. I don't care. They still fail. Then you have to convince the company you work for to shell out the money to hire the person... I work in an area of the US where salaries aren't extremely high but if the person just moves to D.C. or NOVA, which is a couple hours away, their salary basically doubles. So good luck finding people in that sort of market for the amount you want to pay (which is bare bones most of the time). You need a senior developer to build that app that's going to save you $1,000,000 and you want to pay him $45k and expect him to be happy about that? Right... Good luck with that.
Yea, hang in there. Honestly, I would just do that opportunity that gives you the best well being. That's me though. I strongly believe that once you make a particular amount of money - anything above that is great, but it doesn't really improve your life. Mental well being does though. :) 
&gt; The original thread was about the future of webforms and there is a huge prior investment in webforms that isn't going anywhere. Re-writes of software have something like a 17% success rate so to take these ancient applications and rewrite them for mvc isn't going to be an option, killing off the framework isn't going to be an option either. I was a Director leading a team of developers at my previous role. I am not debating the business side of whether or not MVC is the best choice over WinForms, because for many people it isn't given the amount of capital, knowledge, and expertise invested in existing solutions. What I am saying is that efficiency with a given tool is largely dependent upon the developer.
For my latest job, I went through a job agency and was happy with the service I received, but I've spoken to some people who've told me horror stories and said they will never use an agency again.
&gt; And as more developers get into .Net skipping webforms altogether we'll probably see those numbers change globally. I agree.
And I thought I was the only one... hell of it is, I spend a lot of my copious PTO coding and learning anyway, but that's my choice. It'd be nice if perks like this became more standard.
You are making almost the same point as Jay McFarland in his management strategies course http://www.pluralsight.com/courses/management-strategies-increase-productivity He says if one person complains about about money then there's some personal circumstances meaning that guy needs or really wants more money. But if the whole team is complaining about money then I know its not really about the money because they knew the pay when they accepted the job. The real problem is bad management. (I should stress that in my case I had no issue with anyone in management or elsewhere in the company, but I did find it a very interesting course)
Yeah, I see a lot of people in the .NET world that think ORMs such as Entity Framework is this new revolution in programming. I hear them mention other things that they think will be hurdles for cross-training new hires such as T-SQL, or generally learning SQL, MVC, or other similar technologies. But none of those things are unique to .NET. Python, Ruby, and PHP have had ORMs since well and before Entity Framework. Hell, I worked with MSSQL Server from python on a unix server via FreeTDS for a few years. SQL is not at all unique to .NET, and .NET doesn't even bring more to the table related to SQL. MVC is the name of an architecture paradigm. Microsoft practiced an extreme lack of creativity by naming a web framework after the paradigm it employed (very awesome framework despite the lack of creative name, though). Hell, there's even LINQ in other languages.
&gt;Learning C# is only part of being a .NET developer as its a whole platform with numerous APIs and tools to learn e.g. ASP.NET MVC, Entity Framework, Web API, SQL etc. Actually, Learning C# is the only thing you mentioned that is part of being a .NET dev. None of the others are specifically for .NET developers. And in fact, .NET has been pretty slow to adapt most of these technologies, resulting in non-.NET devs to often be ahead of the curve. I know a lot of people who have never programmed in any .NET language but are very fluent in the MVC pattern. Thankfully Micorosft FINALLY adopted the MVC pattern that's been so widely used in other languages. Entity Framework is an ORM. ORMs have been around in PHP, Ruby, Python, and other languages for many years. Just like with MVC, it's .NET devs that I typically expect to not be as familiar with various ORMs, since it's a relatively new paradigm in the .NET world. The biggest hurdle for me when I was learning Web APIs was to learn to stop coding, and start clicking. The most difficult part of the learning curve was all of the waiting for all the dialogs. It was just a growing pain. And XML... WHY are we still clogging our pipes with XML? And SQL. If you come to me and try to tell me you're a developer in any language and don't know what SQL is, I'm going to go ahead and end the interview right there. So, when you hire someone with plenty of development experience, and not a lot of .NET experience, realize that most of what you do should be quite familiar to them already. You're just introducing new syntax. There's nothing too radically different about a .NET stack in terms of principles put to work.
My inbox agrees with your growth theory.
Hmm, interesting. There are a lot of companies that do programming tests and say that you can ask for help if you need it, but I've never heard before of a test where asking for help is seen as the hallmark of a great developer.
If I didn't love living 20 minutes from my office I could jump ship and make about $3-10k more than my existing salary. It's funny how companies would rather screw their internal people on salary and get external people rather than just reward their existing employees. 
What I've observed is contractors will go wherever the best money is and need be a bit selfish because its the nature of their work that they can be dismissed from their jobs at very short notice even after they do a good job. Amongst good permanent developers, they typically want to stay at a company for a few years as long as they are getting interesting work.
My view is that if you're not willing to ask for help on something like that, you're probably not going to ask for help when in the middle of a project. And that's when you're going to waste a day just tracking down a bug that would take someone else 10 seconds to spot.
Arvixe is hands down the best .Net host I've ever had. Fast, cheap and solid. Everything you can ask for. I use Azure too for some stuff and it's also a great option, though it is more expensive for projects that aren't making you any money.
I think ".NET developer" has become a bit of a catch all term for a software engineer with a substantial amount of experience with Microsoft technologies. For me I would expect anyone claiming to be a "good .NET developer" to have some experience with most of the following: WebForms, WinForms, WPF, WCF, WWF, T-SQL, Win RT, IIS, OWIN, OAuth, JavaScript, EF/nHibernate, ASP.NET MVC, Web API, XML, XAML, JSON, GIT/SVN/TFS, SOLID principles and design patterns. Not all of those things are .NET exactly and I suspect this is very different to what other people think of as a .NET developer
Exactly, But that is the problem isn't it? The good FTE devs stick around for a few years before hitting the market. The bad FTE devs are always on the market. The good consultant's change jobs ever 6 months because they get board or get better rates if they don't do that then they become FTE or they get re-instated for a few more tecks. The bad consultant's change jobs a lot and never get hired on FTE or persisted contracts. In other words, the problem is that bad developers tend to float between companies so there are a lot more of them constantly applying for jobs. Good developers tend to already be paid and staid or they are consultants who never stay long so you are constantly replacing them with other bad devs from the pool.
Currently I'm checking out articles from this guy: [http://www.tugberkugurlu.com/archive/clean-better-and-sexier-generic-repository-implementation-for-entity-framework](http://www.tugberkugurlu.com/archive/clean-better-and-sexier-generic-repository-implementation-for-entity-framework) Hope that's what you're looking for.
huh? I point [my domains](http://www.waynethompson.com.au) free azure hosting. 
Thanks for your insight, paralysis sums up my day very well and I appreciate your simple suggestion. 
Compensation is 100% higher than they would like. Make no mistake.
&gt; If they get stuck, I just want them to ask for help. You ask for help, you pass. No one ever asks for help. I think I've only had 1 person in the last 7 years that has asked for help. We hired him by the way. The sad part is most developers fail this test completely. I don't even pick the language they need to use, heck they can use pseudo code if they want. I don't care. They still fail. Having a test _in a job interview_ where the test is whether or not you _ask the interviewer for help in solving the problem_ (it doesn't sound like you mean asking for clarification on the spec) is completely ridiculous and unfair and it's no wonder virtually nobody in 7 years did it. &gt; My view is that if you're not willing to ask for help on something like that, you're probably not going to ask for help when in the middle of a project. These are completely different contexts when it comes specifically to asking for help. A person being interviewed typically does _not_ feel like they are in a collaborative situation working toward a common goal but rather that they are being _tested_. This is exactly _not_ how the real working environment is (I hope!). I understand what you're trying to achieve but unfortunately the context of an interview just does not lend itself to answering that question. You may be able to get closer to the conclusion you're looking for by outright declaring a collaborative scenario and playing through something like a brainstorming session or peer programming exercise.
Find a job that you love and you'll never need to work a day in your life.
It's a nice idea, but for me at least, a job that I'd love simply doesn't exist.
Hi. You should check out www.cloudidentity.com and https://github.com/AzureADSamples
There are also factors out side of work that make job hopping look bad. I get some pressure from my folks to not job hop. As a single guy trying to impress a lady, it looks better if I'm not a job hopper.
Thanks Grapz for your reply. I gave you an upvote for replying. I edited my question to narrow my focus to my intranet. I will not be using Azure. 
Is this using Active Directory credentials in a Forms Authentication application or using Windows Authentication? If it's the latter then this is all you need: http://stackoverflow.com/questions/11504450/asp-net-active-directory-authentication-user-isinrole. You can then use if(User.IsInRole("AnAdmin") { some html } else if (User.IsInRole("ASpecialUser") {some different html} and so on. Edit: in your view that is I meant to say.
Thanks. Can't help you much then, I primarily do AzureAD and federation stuff. But I do seem to remember looking into intranet AD auth, and as far as I remember it was pretty ok. I'll see if I can kickstart my memory banks and remember that stuff :)
I am still learning, so not completely sure. It is my understanding that since I am using .NET MVC 5, then I am not in a form (not WPF or winform). Thus, windows authentication? 
Forms Authentication is an authentication system primarily for external sites. It defaults to using a SQL database to store user information although you can use AD instead. I see that you are using this on an intranet so in that case you don't need forms authentication, all you need to do is enable Windows authentication (and disable everything else) in your site in IIS and it will automatically use AD. You can then use User.IsInRole in the view to determine what information to show the user.
You're using `async void`. Never use `async void`!.
Good point. I will update the example later and put in an explanation of the differences between returning void, Task and Task&lt;T&gt;
Thank you for the reply. I appreciate the help. :) 
How about you go, see if you enjoy it? If you don't enjoy it, don't go again. It won't cost you anything, and people who run and speak at these groups put a lot of work into them for no return. I would also say that user groups aren't just about what you can learn, it's also about taking part in your development local community, sharing your knowledge, meeting people working in similar fields and opening yourself up to ideas and experiences outside of your usual bubble.
These are normally more about networking than learning. Which can be just as important.
We built a POC for doing pretty much exactly this. It worked perfectly. In our case, the Delphi application is an MDI interface with a pull-down menu. We created a new .NET WinForms MDI form and were able to put the Delphi MDI child forms inside it by tweaking the Windows messages. It never made it to prime-time because we ended up going the Web SPA route instead. One thing I'd caution is blaming Delphi for your problems. In my experience, it has usually been the age of the application, outdated 3rd party controls and the amount of technical debt that has accrued more than any problem with Delphi itself. Rewrites are expensive, dangerous, and take longer than you think. Are you sure you wouldn't be better off refactoring rather than rewriting?
Both Delphi and .Net controls can be exposed as COM objects, and both sides can host COM controls. I'm not a big fan of COM but it is one option that I've used in the past.
I would carefully evaluate if the effort required to make that translation layer work is significantly less than just straight up porting it. Knowing some of the management I've had, once it worked there would never be an effort to complete the port and I wouldn't want to maintain that.
I feel your pain. I've been down this same path trying to figure out an optimal architecture for an ASP.NET MVC + Mysql application. I can't offer any stand-out examples which seems a bit strange seeing as the obvious (to me) architecture in the dotnet-web space would involve ASP.NET MVC + EF6 + some kind of IoC container + shared DBContext per web request + unit tests. It would be nice if the dotnet community could come to some consensus on this....maybe that's a bit naive. Anyway, while I don't have a good example on how to do this I will mention some things that I find important in this type of architecture. The DbContext per web request is a nice idea. Having a filter or base controller class that is responsible for calling DbContext.SaveChanges() eliminates the need for having SaveChanges() anywhere else in your stack. If you have a good (i.e. EF-friendly) database design you don't need to call SaveChanges anywhere accept at the very end of each request but some database schema's or business requirements will not allow this and you are forced to break this rule. Entities in EF are tracked by default and if you are sharing the DbContect this has a few implications. Implication #1: to update an object you only need to fetch it, change a property and call SaveChanges() for it to be persisted. No explicit update is required and this can lead to some unintended db updates if you aren't careful. Implication #2: EF stores any pending changes to the an entity so that if you a) fetch and update an entity in one part of the request, then b) fetch the same entity within the same request, the un-saved changes will be visible to the fetch b. Implication #3: adding an untracked object to a tracked objects collection (e.g. adding a new OrderLine object to a Order.Lines collection) causes the added object to be tracked implicitly and it will be saved when SaveChanges() is called. I found Julie Lerman's [Domain Drive Design MSDN series](http://msdn.microsoft.com/en-us/magazine/dn342868.aspx) helpful. She's a EF expert documenting her ventures into the DDD+EF world. Some things I took away from this are: * Domain object == Entity object * I've been using an anaemic domain model which is an anti-pattern. * You don't have to make all your domain properties public get / public set. Make the setters private where you can and add methods to control state changes on your objects where the logic is encapsulated in your class. * You don't have to have public default constructors on your domain objects. Make your default constructor internal and make the public constructor include all the information required to create a valid representation of your class. * Domain objects should not be created by your IoC container. * Domain objects should not have any service dependencies injected into them by your IoC container (or anything else). * If methods on domain objects require a service to help them implement their logic, one option is [double dispatch](http://lostechies.com/jimmybogard/2010/03/30/strengthening-your-domain-the-double-dispatch-pattern/). All of this DDD stuff goes back to basic OO principals like encapsulation that I learnt back in university but somehow got lost as I started working on n-tier systems so it feels right to me. Julie Lerman and Steve Smith have a [pluralsight course on DDD](http://pluralsight.com/courses/table-of-contents/domain-driven-design-fundamentals) that I've been meaning to watch too. On Repositories vs Command+Query classes, the system I'm working on currently has repositories that inherit from a generic repository. It works fine but feels like a rather unnecessary layer about 50% of the time when all you want to do is get an object by id. Command+Query seems like a good idea. OP - good question. Hopefully this generates a bit more discussion. I'd be keen to hear what other people think. 
I came across "Algorithm Ninja" yesterday. I shit you all not "ALGORITHM NINJA" 
If it's private or internal methods, and you don't need the result, it's fine. For API design, you should always return a Task of course.
I strongly disagree. The only place where that's really OK is UI event handlers. 
I used to feel the same way about user groups. Its after work and I'm tired. Then I started to realize I really was getting behind in the latest .NET developer trends and I forced myself to go to the UG meetings at night. In Tampa, FL there was about 2-4 related meetings a month from various UG's at the time. I became enthralled with them. I really enjoyed the presentations and started taking back the information I learned into my job. I became a better developer because of it. It didn't seem like a chore to try to attend the meetings anymore. After a few years after I developed some confidence in both my tech skills and presentation skills I began to present at UG's. Don't let one person hold you back. After you start attending normally you will not even be concerned with that person you used to work with as you will value the content and networking with other people more then anything.
Sometimes you want to take a screenshot of some crash, you have to paste it in paint. Instead you can directly copy in the desired folder. One more thing if you are working on dual monitors, PrtSc will capture both the screen in single image but from this you will have two different image. 
Why would you want a screenshot from a crash? You want the exceptions, the event log and perhaps a memory dump, but surely not a screenshot. A screenshot is pointless.
Does this help? http://dyslexicanaboko.blogspot.com.au/2012/04/datagridview-loses-formatting-and.html &gt; As stupid as this sounds, set the DataGridView's AutoGenerateColumns property to False! &gt;DataGridView.AutoGenerateColumns = false; //C# &gt;DataGridView.AutoGenerateColumns = False; 'VB.Net
What's your budget like for this? If you can afford it, you may want to skip WinForms and go straight to WPF. It makes this kind of thing trivial.
No worries :-) 
Like... What?
That is true. IMHO winforms is easier to code. 
ASP.NET MVC 5 – CRUD operations with Entity Framework 6 on Visual Studio 2013 https://code.msdn.microsoft.com/MVC5-Demo-with-Entity-c6bc81df
Mvc5 with ef6 - yes. Dynamic data? No. If that's what I think it is then I don't think you'd want them in the same project. Read codehobo's response: http://forums.asp.net/t/1671777.aspx?MVC+vs+ASP+Net+Dynamic+Data+Entities+web+application
Use ajax. Write up a jquery ajax to poll the db, download the json data for the rows, construct them in the JavaScript and insert them where they belong in the table. Not sure about making the noise though.
First two weeks of my Java class in college was getting the Dev environment working. What a nightmare and cluster. .Net... Just download Visual Studio from MSDN install and you're up and running in no time. Made me never want to take another look at Java.
The main usage would be for admin interface to allow admins to edit several "parameter" tables so that's why I think automatic dynamic data would be good for that.
I second your opinion. http://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged(v=vs.110).aspx For the uninitiated: http://www.codeproject.com/Articles/165368/WPF-MVVM-Quick-Start-Tutorial
IF programming in .NET use a Window OS. 
Serious reply: No, don't use a Chromebook for .NET development. I've tried, and unless you've got a network connection for RDP to a real development box, you're going to be out of luck. Sarcastic reply: If you're developing VB.Net, you need more than a new laptop. :)
I've got a Macbook and have been writing stuff using Mono and found it surprisingly easy. I've got a project lined up to write a production system and the plan is to write it in C# and run it on Linux. I've had to use Linux due to new work requirements and since I am supporting different technology stacks I'd prefer to have it all on the same server stack. The ASP.NET team are committed to making their next version a first class citizen in the *nix world and it's the same for the Roslyn team. With Windows sales dwindling with the explosion of the mobile market .NET needs to be a multi platform solution or it will likely fade quickly. That being said, if you want to develop on a Chromebook you will need to install a version of Linux as shown here ... www.cnet.com/uk/how-to/how-to-run-both-chrome-os-and-ubuntu-on-a-chromebook Let me know how you get on if you try this as I'm intending to get a Chromebook myself for the occasions when I want something lighter to lump around. UPDATE: There's a more specific link for setting up Mono on a Chromebook here ... http://mono.1490590.n4.nabble.com/Mono-on-ARM-Chromebook-td4657617.html
Serious reply to sarcastic reply: do you really have a beef with vb.net? If so, can you be specific about what faults you find with it?
Serious question, did you try using Mono on the Chromebook, and if so, what was your experience?
Interesting to see you downvoted and the 'Windows only' nature of the other comments. I'm relatively new to this subreddit, is there an anti Mono culture here? 
Totally understand, thanks for answering. 
I use Crouton on my Chromebook (Toshiba 13.3" Chromebook 2 with 4GB RAM, Intel Haswell Celeron x64). I'm not a .NET developer, but I went ahead and installed Mono and everything works just fine. Not sure if everything will work if you are on an ARM processor though. And no matter what, your experience won't be that of using Visual Studio (especially if you are used to having ReSharper). TL;DR; It works
Uhh no. You could have a link for them to install it. Or move the code into a shared library and create a front end in silverlight (not supported much anymore but probably easily convert from wpf) or html
Unless you are deploying to a Mono environment, I wouldn't monkey around with it, as it is not a complete implementation of .NET. There are some classes that aren't implement, and won't be, or simply can't be implemented in Mono.
I code in VB.net all the time, and I like it's verbosity. I was convinced it was superior to C# until I learned about how "Nothing" is treated so inconsistently. The way I use Nothing, I don't run into the problems, but someone illustrated all of the problems with VB.net's use of Nothing, and I can see why some people have an issue with it. I like the verbosity of VB.net, along with my coding style, it helps me remove ambiguity in my code. I try to code defensively and verbosely, so cases are spelled out explicitly. That can be done with C# as well, I just prefer VB for it.
Your best bet is to get a similarly priced netbook. Even with crouton, a chromebook was to slow to develop on locally. So you are going to need to RDP onto a real dev machine to get any work done. Yes, the chomebook has RDP, but its like the older version so its a lot slower then the RDP client you'd get on a windows machine.
there was a way to run .net usercontrols in the browser. Only worked in IE if I remember, and was not a good idea to use. http://stackoverflow.com/questions/12109642/loading-net-usercontrols-in-ie-with-net-4-5 
Granted. I recently went throught the pain of developing a TCP Socket based SQLite app on Windows and tried to port it to Ubuntu. That was certainly an exercise in frustration.
I don't think there's really a viable option without remoting into a development machine. Several years ago I thought it would be nice to be able to code on a laptop. I know a lot of people do it, but I absolutely hated it. The lack of screen size sucks and I also realized that personally I have to sit down at a desk in order to focus. However, I found a really great use for my laptop, I write pseudocode and map out database schemas on it. My favorite thing is that I repurpose the pseudocode into commenting.
Have you looked at the telerik tools? They have grids that can handle some pretty complicated stuff. Maybe you can get half a day to whip up a prototype and convince the higher ups to nip this one in the butt in order to save lots of time/money in the future. Edit: Here is an example with hierarchies http://demos.telerik.com/aspnet-ajax/grid/examples/hierarchy/hierarchy-with-templates/defaultcs.aspx 
Was I downvoted? What a bunch of Luddites.
A project I briefly worked on uses Twilio (available as nuget packages). The code looked pretty simple. As for pricing... http://www.twilio.com/sms/pricing
I've used http://www.optit.com/ for a project (but offer very specific products). https://www.clickatell.com is one of the larger ones out there. And I've also looked at twilio and decided to use them for a future project. 
I don't know why Microsoft thinks its ok to put CRUD code into the controllers. They should at least use a [Generic] Repository or similar service. 
This almost looks like OLAP data. Not a trivial effort to convert Transaction data to Analytic data, but there are some handy controls out there in the SSRS and third party realm to display OLAP data. I for one *never* write my own grids unless they're extremely simple. The slightest *gold-plating* type of requirements send me to third party grids immediately.
I use twilio's asp.net api to send texts and it is very simple and straightforward. Pricing is reasonable. Support has been good.
Not directly, no. What you can do is look into deploying the executables as ClickOnce installers. It's *almost* seamless, from the user perspective.
Here are some of the more popular companies that have APIs for text messaging. Service | SMS | MMS | Call | Toll Free Numbers ---|----|----|----|---- [Twilio](http://twilio.com) | YES | YES | YES | YES [nexmo](https://www.nexmo.com/)|YES|NO|YES|YES [plivo](https://www.plivo.com/)|YES|NO|YES|YES [tropo](https://www.tropo.com/)|YES|NO|YES|YES I have personally used Twilio, nexmo and tropo (a little) and can attest that they are great APIs. If you don't need MMS, nexmo might be a little cheaper.
Oh, I'm interested in this as well, thanks OP. Have a project in my head and I think sending SMS will be better than email considering I expect the volume to be around 50 message per month if that total across the user base.
If you have some money, citrix is an option.
Your example looks a bit like a pivot grid...I'd look at grids from telerik, infragistics, or dev express. 
What exactly do these support applications do? Are they talking to the filesystem? Are they talking to the database? Are they doing something else? An easy way to build a data-driven website that doesn't necessarily need a lot of graphical bells and whistles is to use ASP.NET Dynamic Data. If it's something simple you could try re-writing your WPF/WinForms app as an ASP.NET Dynamic Data site, or rebuild it in whatever you may be comfortable with. Filesystem work becomes a lot more tricky. With the world moving towards cloud you want to try and remove your site's dependency on the filesystem as much as possible as this quickly becomes a huge scalability barrier. Just last week I had to fix a web app that takes a user request, hits the database, generates an chart image file stored to the server's local filesystem, and then displays those charts to the user. It's one of the last remaining sites to move to our new load-balanced infrastructure and our junior dev preparing the migration plan failed to realize the issues this would create. 
Pls link to the Nothing problems.
http://www.esendex.co.uk provide very nice sms api's, lovely rest services etc.
Or a Mac with Xamarin Studio. It works really well. 
People have provided a good answer with Twilio. However when I had to do this before, that pricing was prohibitive to start. We bought a MultiTech SMS Gateway ( http://www.multitech.com/brands/multimodem-isms#gsc.tab=0 ) and a T-Mobile SIM with 1 MB of data and unlimited SMS for like $15/month at the time. This has a very simple API which is basically a POST with XML. So this may be a better solution if volume is low and services are cost prohibitive to start. 
Getting your own SMS gateway is deffo the way to go if the volume is going to ramp up. It will pay for itself.
His books are legendary. Wonder if he'll be doing any WPF equivalent stuff for Mono ;)
Looks like he is, kind of, XAML at least. Check out his latest book, Free ebook: Creating Mobile Apps with Xamarin.Forms, Preview Edition, http://blogs.msdn.com/b/microsoft_press/archive/2014/10/06/free-ebook-creating-mobile-apps-with-xamarin-forms-preview-edition.aspx
Cool.. thanks for the link.
Get a GSM modem, and use AT commands to send SMSs
OMG spend some time in proper error handling. Customers won't send you stacktraces, and if they do... well sir you have a security problem.
Can you write a bit more about your requirements?
Because being a .NET developer is a continuous frustration, and you want lot of money to compensate. Disclaimer: I am and have been a .NET developer for more that 12 years. We don't do rocket science, we are damn plumbers. We get data, and query-transform-display-transform-alter-transform-send-validate-transform-store-rinse-again (add Daft Punk:Technologic music there)... but we DO NOT generate ANY value, any! Data scientists, computer scientists ... those are generating value, and they are happier than us with less money because they love their work. We do not love our work, we think we love it when MS comes up with the new revolutionary abstraction that will make your code easier to test and gluten free, but after some months it just something else you will add to your CV, so you can remove things you don't want to ever work with again like ADO.NET or VB6 I have friends that are civil engineers, I have seen their work, I have drove through the motorways they design... they get less money than me, you know why? Because your salary is not what you as professional are worth, it is just the market price of your skills, and it happens to be high right now. And that market price will go low in 5 years time, because now even monkeys can put together an AngularJS website with a ASP.NET backend. Find a person working in programming more than 30 years, ask him if he ever imagined that at some point of the future (our present) there would be people called "full stack developers" with senior professional competency in very diverse areas like front end, back end, database and cloud all together! with less that 30 years old! People with no background whatsoever in computing are being hired as developers, after doing some course or learning by themselves, and lot of them are good enough, some of them outstanding. This is just a symptom of how easy this job is becoming. Skill up people, this won't last long. I knowit is very comfortable to lay on your armchair after a day of writing shitty C# to move data in and out of the DB thinking you are a fucking rock star that deserves more than your current 300K salary... but remember you have that salary because the current market situation.
Thanks for that!
Are you just looking for a custom URL for each request like app.com/item/&lt;unique id&gt; ?
Traitor.
Thanks, I guess I'll learn some more about WPF. 
I think with EF and MVC you have a feature to create simple CRUD interfaces
[This](http://www.asp.net/web-forms/tutorials/data-access/advanced-data-access-scenarios/creating-new-stored-procedures-for-the-typed-dataset-s-tableadapters-cs) might be what you're looking for?
You can use dynamic data websites or use the crud mvc scaffolding. 
What if my dependencies are server side? I would need to move the entire pile down with the exe
&gt; Sort of like VDI need without actually installing a VDI platform like Citrix, AppV or Term services Do the third party tools have dependencies that require them to be deployed to an app server, or can you push them down locally? This is your real question: you want to find the best way to distribute executables to your user, in a way that they can launch from a web page. If you can bundle them into a ClickOnce, that's the easiest way. If you're going to keep them resident on the server, your only real option is to use some sort of VDI platform. In the Windows world, there's really no other way to do this.
?
Twillio is awesome, I had one of my guys add it into our notification service today, took about an hour to have it calling and texting alerts. 
The default scaffolding with entity framework and mvc should be enough. I can make a basic CRUD system in 15 minutes and not need any third party libraries or templates. 
I did the same thing a handful of years ago, using the MultiModem Cell (http://www.multitech.com/brands/multimodem-cell#gsc.tab=0) with a T-Mobile sim card. Though the connection was different with that device, it was over a serial port with raw text commands and control codes. The only push notification the device had was "ring" would get sent over the serial port if a phone call came in... the only way to know you got a text message was to constantly query the device for new messages.
Pretty sure there is an in line edit flag in the comments
The new ones (this was 5+ years ago so not new now) have a network management port and have a POST API to send messages and will POST to a server when it received a message so it worked well for what we needed it for. I think they had a 1, 3, and 8 SIM model and it would round robin the modems. However we discovered tmobile would rate limit us so the code had artificial delays but still worked well. 
SSRS will let you export to all the major formats so I think that this is what you are looking for: http://msdn.microsoft.com/en-us/library/ms159106.aspx They are extremely flexible and allow you to report on a variety of data sources, be it stored procedure, SSAS cubes, the list goes on. If you need any further help just ask. 
I was thinking about SSRS for the SQL Portions. But say I have 10-15 SSRS reports that would be wrapped around pre-defined (editable) portions of text in a single document. How would I do that?
¿
There are LightSwitch and Dynamic Data from Microsoft. While LightSwitch is more like MS Access replacement, Dynamic Data is basically scaffolding for ms sql using ASP.NET. Also some .net vendors like DevExpress have their own stuff like XAF https://www.devexpress.com/Products/NET/Application_Framework/ 
There is also telerik reporting, where you can create templates that can be produced and there is a free reporting tool that turns them from template into a variety of formats. They can be served from a webapi so you can serve them in the web. http://www.telerik.com/products/reporting.aspx
1 week later, ms buys xamarin - its gonna happen sooner or later.
I'm still amazed it hasn't happened yet. 
Not to oversimplify but the way to combat this is to break it up into smaller class defenitions
It's something we've been trying to build as a community on Jabbr, with our efforts currently located at: https://github.com/YoloDev/YOBAO It's very much an early prototype/test bed for ideas, but we'd love some additional help. 
Additional note: #3 can also be fixed by using the "FEATURE_96DPI_PIXEL" which was made obsolete in Windows 8.1, but works in 8,7,vista etc. This isn't a bad hack since 8.1+ do not suffer the same DPI issues.
You can use viewmodels to do different functions and these would be separate from the entities or models you might have representing database tables (if using EF code first). If you create a new MVC project, just check out how the account viewmodels are done for you automatically. You could have a CreateUserViewModel and EditUserViewModel, etc. If you want to use lazy loading to allow for populating models without some heavy properties then its pretty easy with EF code first. You make the entity property virtual and when you want to include it in your query you do it like so: context.Users.All.Include (x=&gt;x.Orders).ToList(). This would include the virtual public property Orders for the User class in this example. If it left out the include then the User.Orders property would be null.
I'm still pretty new to .NET MVC so I'll have to digest / research this suggestion a bit. Thanks raving. :)
Are you talking about an ORM like Entity Framework? Like others have said, using EF and MVC scaffolding generates a CRUD system in very little time.
I agree that viewmodel are the right way to go here. If you setup a viewmodel that only has the properties you want to send over to your customer with JSON you can use AutoMapper (https://github.com/AutoMapper/AutoMapper) to populate your properties for the viewmodel from your main model.
Serious question but what is Mono missing? I know there's some Windows specific stuff like WPF and parts of ASP .net. Is there anything else?
Anything to do with Windows-specific services. For me, Microsoft Messaging Queue (MSMQ) is something I work with often, that's contained in System.Messaging, however you can see the current status of that class library's implementation in Mono here: http://www.go-mono.com/status/status.aspx?reference=4.5&amp;profile=4.5&amp;assembly=System.Messaging Mono will likely never implement all of this because MSMQ is not supported on any platform except for Windows. The .NET implementation of MSMQ functions also calls native DLLs that have not been re-implemented in .NET. There are other things, but I can't tell you what they are. If you browse the class libraries using the site linked above, you can see the implementation status of the other classes in the libraries. For your standard application development, I'm guessing Mono is going to have 99% of what you need most of the time.
First of all, I am not going to send this code to customers. Secondly it is just a demo, that how you can do it. Its not necessary that you have to do it.
&gt; most of them are just simple links with a crapload of javascript to show adverts, launch popups, show captchas, and get in the way generally Not this crap :) &gt; you could write a VERY simple class that has properties like : file location, datetime link was generated, guid, filesize, generating IP address .... write it to a DB and then call it to generate the link on screen. Exactly this :) Thanks, I will try. &gt; the only reason - apart from advertising - for generating a 'ticket' would be for load balancing etc, and if you're serving files at THAT volume then generating the ticket is probably the least of your concerns. What other problems I didn't consider? It's nothing illegal.
I would add: in hindsight, it would be better to make TWO objects One for the downloadable item itself (file path, uniqueID, owner info?) and another that references it for each download. This would make it easier to control things in the long run.
Atleast they have Minecraft. Who needs Xamarin?
New Relic has a free tier which is good enough for error reporting. Since the free tier doesn't retain the data for more than a couple of days I use New Relic for the real-time reporting and then dig into Elmah for history. New Relic's pricing is also pretty bad, specially for small companies with multiple servers.
I think what you'll need is asp.net identity
I can only use .NET 4.0
&gt; I can use: ASP.NET MVC4, SQL SERVER 2012 preferably with LocalDB and I don't want to use no Internet Template, or template period. I don't want to spend half of my time deleting stuff that I don't need. What exactly is wrong with using the intranet template if you're able to use Kerberos/NTLM? The only code I've *EVER* had to remove from the default project templates is the route config because I use attribute routing.
Are you just handling logins, or do you need role-based authorization or something, too? Have you thought about just rolling your own login/authorization using MVC filters, etc? In my experience, it's really not a lot of work to do it yourself.
I think Universal Providers are 4.0 and up. God the docs are awuful... It goes Forms Authentication &lt; Universal Providers &lt; Identity, in terms of sanity. 
Sorry but this is a poor example to show async/await and updating the UI. The main issue is that it confuses concurrency with asynchronous programming. The TPL, which is used in the example, is for concurrency, and while async is developed on top of the TPL, it's not the same as concurrency. It would be the same (exact same code, as this also starts a thread) to simply use the task factory to start a new task and run the code there, without async/await. 
The main point of the article was to show how he can use EF &amp; scaffolding. The CRUD in the controllers in retarded, i agree.
Thanks! I might give it a shot sometime. I'll probably try out some other user groups first(javascript and ios development) and then I might give the .net group a shot.
You, my friend, have just entered a wild, wild world. Easiest solution would be so a post redirect get on form submission, but the cool kids are going to recommend angularjs and the even cooler kids will recommend reactjs.
I'll post some code on how to do this using Ajax and partial views in the morning when I'm at my work computer. 
According to an MS guy I was talking to, if MS buy Xamerin Apple will stop them from creating ios apps.