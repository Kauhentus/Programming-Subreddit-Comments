Do you have a guide to implementing this by chance?
This is the correct answer.
This. Learning LINQ is valuable and saves a copious amount of time. The earlier you get used to it the better.
It's also worth pointing out that database searches are often case-sensitive. With LINQ: var query = context.&lt;table&gt; .Where(x =&gt; x.&lt;field&gt;.IndexOf(searchVar, 0, StringComparison.CurrentCultureIgnoreCase) != -1); or var query = context.&lt;table&gt; .Where(x =&gt; x.&lt;field&gt;.ToLower().Contains(searchVar.ToLower())) In SQL one could apply the appropriate LOWER() or UPPER() functions to the search logic. There's also the topic of Globalization/CultureInfo to consider as well, as this could impact the accuracy of database searches.
I'd agree... except that this is an entry level project and familiarizing oneself with SQL Like syntax (and the ADO.NET stack) isn't all that bad. 
Lets just assume a blank slate. I have done programming, but not in any web framework. Well, I did some stuff in MVC4 for a class once but it was very low level and the instructor didn't even know what they were doing. If you want to know more about my background, please feel free to ask. Do you know of any good resources that have a condensed learning plan for HTML, Razor, and javascript? As for OWIN/Katana, I do need to learn it in order to add active directory to my application. So I found that open source solution and had this response to reading the [code](http://i0.kym-cdn.com/photos/images/facebook/000/234/765/b7e.jpg). Thank you for your response. It meant a lot to me when you said you know how overwhelming it can be. It's not a lack of effort. I just feel things are not "sticking" right now. I know a journey of a thousand miles begins with a single step, but I feel like I'm stuck in a sandpit so reaching out here. 
Learning how to do things wrong ain't learning . . .
I do find MVC5 to be more polished then 4. I would start out building a very basic MVC5 site using entity framework to hit up a SQL server installation. Pretty much every tutorial on MVC5 does this, so just look one of them up, including the one on the MSDN site, and follow the directions and look up things that you don't know on stack overflow. For Javascript and it's various frameworks, it's worth picking up "Javascript: the Good parts" and looking around the net for tutorials on the frameworks your interested in. JQuery has very good documentation. My point is that you need to start something. Like right now. Start that and keep going, and then when it's done keep adding stuff to it. Then, look back at what you did, realize it was all terrible and make something new. 
Yeah I completely understand. The reason I say start with one book is that once you have a high level understand of all the pieces, it becomes significantly easier to pick up the additional pieces you need and fit them in. It also provides context around what's important, what isn't, what goes where, etc. Just so you know the amount of things you can learn in web development(or any development for that matter) is extremely large. So don't worry if you are feeling overwhelmed. It is completely normal. Just remember everyone started from where you are and progressed step by step. Not sticking is definitely also a common thing people run into. What I have found is that you will go through stages of learning. First is to be able to copy and paste and get things to run, then as you go you will understand whats going on at different "levels". This often just comes from time spent coding and learning. There really is no other way. Sorry if this is vague I am not sure how else to phrase it. Try to think of levels of understanding that you have progressed through in something you are quite experienced with, it's the same here :) That MVC 5 fundamentals class on Pluralsight is mostly about the differences between MVC 4 and 5. I would recommend doing that later. To start I would try "Building Applications with ASP.NET MVC 4". It covers a lot of the foundation that you need to get things going. It will get you started with how Razor works too. Just a caveat this recommendation is based on looking at the syllabus, I have not taken this course. Once you are done with that you can move on to other things. I would honestly just focus on one single class right now and then move on from there. If you would prefer a book (I personally do) then you can try Pro ASP.NET MVC 5 by Adam Freeman. If you want I can give you my email address so you have someone to bounce quick questions off of and ask what things are important and what are not. Even knowing that can help a lot so you don't go down the wrong rabbit hole. Let me know!
I'm all about optimization and yes, for this project I care about output. Any chance you know some resources on how to get started? I'm looking around but i have no idea how to integrate lucene. Any kind of tutorial with a sample project would be nice.
This makes sense and it's something i should have tried. Will try this today and see how it goes. Thanks!
Please do IM me your email. It would be useful to email you questions here and there. Learning this new technology is like going towards a black hole. I don't know where the point of no return is...
I really chuckled at your comment when you said, "realize it was all terrible and make something new". That was profound. Looking at my older code is like time travelling and fighting an evil and younger version of myself. The suggestion for javascript was useful. Will give that peek. 
Telerik has this thing called "Diagrams". I believe this is what you are looking for. Unfortunately DevEx doesn't have anything like this. I have been in your shoes before with DevEx and this control. http://www.telerik.com/products/wpf/diagrams.aspx
Since the best way to learn to code in a particular language or framework is coding in that particular language or framework, follow [this tutorial](http://www.asp.net/mvc/overview/getting-started/introduction/getting-started) for starters Edit: Spacing 
Ack, that would actually be perfect! However that might give me something more to go on. Thanks! 
&gt;As for OWIN/Katana, I do need to learn it in order to add active directory to my application. This sentence does not compute. I don't think there's anything in OWIN/Katana that you can do with active directory that you can't do with ASP.NET MVC 4 or 5.
You can invoke all of the installutil install classes from your service executable directly. I typically have a '-install' command-line switch for my service that installs it. With slightly different logic, you could detect if you're running from someone invoking the exe or the servicemanager running your service. If someone is invoking it directly, check to see if the service is installed and install if not, start, etc...
If on own server then create the service using Topshelf. Makes deploying, and debugging etc so much easier.
I found the issue (apparently). I was using char for the database entries, switching to varchar solved the problem. Maybe there's a logic reason as to why.
Very sound. One thing that I would highly, highly avoid is use of any templates in visual studio. Project or file. Always, always start with an empty project. Otherwise they helpfully wire up everything for you and unless you are an expert it is tough to know what pulls which string. Other thing I'd highly recommend is to never mix webapi with MVC in one project. Too far apart right now so it is a headache having both together.
Definitely. Topshelf plus octopus deploy is the right answer here. Anything else and you'll slowly find yourself reinventing the windows service system.
Okay, it was advised to start using OWIN so things can be decoupled for MVC 6 and ASP.NET 5. Second, I need to learn it so I can use mixed authentication in my application. That is, have both forms authentication + a button for AD authentication. Unless you know of an easier way? 
What if you want package management and you aren't on win10?
Existing code may not be developed in a way that supports unit testing. The product base I support at work had quite a bit of ASP.NET webforms that has all code nested into the codebehind. Our solution was to use Coded UI tests to perform testing until we can refactor to a point where unit testing is possible.
So I assume you have some kind of package or deployment script that invokes your exe in console mode? Do you have some automation scenario that handles this?
Just to clarify, I'm trying to create this brush during the initialise function of my window, to draw it onto a canvas, but it gives me this error: &gt; Cannot create an instance of the abstract class or interface 'System.Windows.Media.Brush' When I try to use this: &gt; Brush gridBrush = new Brush(CreateGridBrush(gridRect, tileSize)); (the gridRect and TileSize are already defined variables, and I've tried swapping to DrawingBrush too) Just not sure what to do to correctly use the c# code that is written in that answer on StackOverflow! Any help would be great :)
I've done both... With free/open source it worked great after messing with crap for a while... Telerik has great support and is worth the money but some of ways they do things are kinda crazy. They really do have some great controls though. I'd go with Telerik if you can afford it. I've never touched DayPilot, sorry :/
I actually solved my problem by digging deeper. There is a great FOSS calendar called [FullCalendar](http://fullcalendar.io/), but it doesn't work too great for what I want because I need to be able to control multiple resources. There is a great [fork](https://github.com/jarnokurlin/fullcalendar/) though that handles what I want to do in a fashion I want. The benefit to what I just found is that it is platform and language agnostic because it's just javascript. The only thing I need to feed it is JSON with the resources I want to control and the events for those resources, which can be done with handlers in my old WebForms app or even better Web API in the future. I may look at Telerik in the future though. One of my hesitations is that while I am writing in .NET now, I don't know if I will always be, so I don't know if investing in a .NET only toolbox is advantageous at this point. Thanks for the tip.
I'm about 10 months in and just got my renewal email. So at first, what a pain understanding all the little things that are different, and sneaky things it does to make the controls work they way they do. However it's worth it, I use it both winforms and asp.net. Top reason, it looks much nicer off the the start. Second is it's A LOT Of functionality with zero boilerplate. Such as grid view with filter options and fields. Normal C# is lots of code. RadGrid it's just a check box. Shit's not cheap though, if you are considering it and have the money, you won't be disappointed. Does it offer anything that isn't already possible in standard C# no. But it sure makes it easier. 
For anyone that's also interested in this topic I found an excellent tutorial on Pluralsight. Can't remember the exact title but it's similar to 'building Web apps with asp.Net MVC, entity framework, jquery and html 5'. Pluralsight in general is an excellent tut site. 
&gt; Brush gridBrush = new Brush(CreateGridBrush(gridRect, tileSize)); Just do this: Brush gridBrush = CreateGridBrush(gridRect, tileSize);
I bow to your superiour search skills good sir, BBSharp looks great
Yeah, there are a lot of options for deployment. It's worth noting, that once a service is installed, you don't have to re-install for a new version. Just stop the service, xcopy files, start service. I've done it several ways in the past: In cases where I wanted the services auto-updated as soon as a new build is available, I've used a FileSystemWatcher in the service itself to monitor a network share. When a new version is detected, I invoked a powershell script that stops the service, copies files, then restarts the service. For cases where I want to deploy when I feel it's necessary, the same thing, only I kick off the deployment with some Powershell scripts that push out a new version of the service to all places it's deployed. You can also invoke PowerShell scripts from Team Build 2013 or Team City. That turns it into more of a push pattern than a pull pattern like I mentioned at first. I've found that this can be a slightly better option since you can more easily report when deploying the service failed by failing a build or raising an alert. The error handling seems a bit less reliable when it's the service self-updating, but there's a time and a place for that too. In my latest scheme, I'm using the NuGet package format for distributing my application files, like some sort of auto-updating chocolatey package.
Another one, which I wrote years ago. It might not be complete, but allows you to extend it easily: https://github.com/SolutionsDesign/HnD/tree/master/UBBParser
I've found that copying over the device exe has caused me major problems with uninstalling the service later on if I need to. We always make sure that dev's deprecate the 'agent' that performs the work in its own dll and then have a combination of host projects in the solution (nt service, console, win form, unit tests or web service) that make use of the main agent. We rarely ever need to overwrite the nt service and can safely overwrite everything else.
I am currently working on a open source framework to provide some of this kind of stuff. Take a look at http://dragablz.wordpress.com/ 
The github page doesn't have any sort of license on it, you probably want to add one.
yeah, when my spouse gets off the computer! thanks.
Oh wow, some good stuff there! I'll bookmark this if we move to wpf, could definitely come in handy! 
[Grid, for sure.](http://pastebin.com/V5nJKd98) I don't see how it's messy. This way your label is near your target textbox, it's logically grouped. &lt;Label Target="{Binding ElementName=TextBox1}"/&gt; &lt;TextBox x:Name="TextBox1" Text="{Binding SomeProperty}"/&gt;
Great looking library. Will take a deeper look into the internals and maybe suggest some stuff on GH
cool, will look forward to it. early days yet but i think it's heading in the right direction
Completely agree! Demo works pretty nicely (although I did stumble upon an exception)
You should be pun-ished...
Because char &amp; nchar will store the data you inserted, and fill the rest of the column size with space. Hence storing "123" in 8-character-long column will store "123[5 space here] ".
&gt; A: Visual Studio Community 2013 includes all the great functionality of Visual Studio Professional 2013 Same as Pro, just different licenses. Read the Q&amp;A http://www.visualstudio.com/sv-se/products/visual-studio-community-vs
Hey this is a great idea! Does this tab control support different orientations?
...almost...most of the code is in place, I have stuff in so you can drag the tabs up and down instead of left and right, I just need to go back and put the styles in.
Just checked out the demo and it's pretty damn impressive! Good job, and I'm sure it'll only get more awesome. I'll be following this project closely
Microsoft has truly been changing as a company. The open source adoption is amazing. ASP.NET is entirely open source, .NET framework is mostly open source, hell even the C# and VB.NET compilers are open source now. In other places Microsoft has elected to adopt OSS instead of their earlier products. For example, in ASP.NET they use JSON.NET (OSS json library) instead of the one in .net because it's faster and more modular. They also removed their JS/CSS bundler in favor of grunt. They are also fully integrating bower since that's what the community wants. People have asked why is .net on github instead of codeplex (microsoft's open source site). Their answer "because folks are on github and we will come to you." That's a great attitude and I'm glad to see that. It's also re-enforced by all the other stuff mentioned.
You could probably do this with powershell. Google powershell and active directory and see how that goes and then report back. 
Will do. Thanks. I also just found [Cjwdev](http://www.cjwdev.co.uk) which is exactly what they are looking for. Now if I could learn to build my own... haha
The powershell tools for AD are very strong. At the very least it can create easily consumable XML for the app to do stuff with. I mean, yeah you can probably query AD directly, but the last time I looked at that, it was a comparative spaghetti mess. e.g. http://www.codeproject.com/KB/system/getuserfrmactdircsharp.aspx 
Some of the ppl here have built their own scripts to query AD directly and they said that's what I should start with and build this tool doing that... It seems outdated to me and that a lot of tools are out there that I can use. I'll take a look at that link though and build my own tool (well try at least).
Like others, I would recommend looking into PowerShell. If you have the Remote Server Administration Tools (RSAT) installed on a machine, and you have either a Domain Controller which is at Server 2008 R2 (or later) or you have Active Directory Web Services installed on a domain controller prior to 2008 R2, you can use the Active Directory Module which has cmdlets like Get-ADUser. Otherwise you can look at the System.DirectoryServices namespace which is rather easy to use, if you spend the time to get familiar with LDAP syntax. Even with this, PowerShell may not be a bad choice as the syntax is essentially C#-lite. e.g.: $Searcher = New-Object System.DirectoryServices.DirectorySearcher $Searcher.PageSize = 1000 $Searcher.Filter = "(&amp;(objectClass=person)(name=john.smith))" $JSmith = $Searcher.FindOne() Write-Outout $JSmith.Properties Would get the properties on the user account named "john.smith". Two caveats to keep in mind when working with AD: 1. Times tend to be FileTimes and need to be run through System.DataTime.FromFileTime to be useful. 2. Do not trust the AD property LastLogon, it is not replicated between domain controllers. Use LastLogonTimeStamp as well. However, keep in mind that this property is not updated every time someone logs on. If you need accurate logon statistics, you need to have auditing enabled. It is not by default.
It depends what you are using it for. Visual Studio community is Visual Studio Professional, the main difference is that community is for personal use and for small businesses with less than 5 developers who's revenue is less than $1 million a year. For my personal development projects I've been using Professional since my company provides a license, at work I use Premium and I've never had the thought of "I wish professional had this feature that premium has" 
Awesome thanks for the info! You guys in here are life savers.
Yes, interesting times indeed for .NET and MS. Hopefully it becomes a real competition to Java on platforms different from Windows. Competition is always good.
This might not be a very popular answer, but here goes: If they asked you for a console app, you should probably build a console app. While it may not be the perfect approach, there could be any number of reasons that they requested it to be written that way, not the least of which is to gauge your ability to work within the constraints given.
AD support in .Net is pretty good, assuming you know how to query it. VB isn't my favorite language, but anything you can do with C# you can do with VB. Console App? Well, if it's just gonna spit out a txt file, then I don't see why you'd do anything fancier. A powershell script might be "better".
If you have a Pluralsight subscription, one of the powershell tutorials there demonstrates how to do near exactly what you are trying to do. http://www.pluralsight.com/courses/play-by-play-discovering-powershell-minasi 
http://www.reddit.com/r/PowerShell/comments/2mt33r/ms_virtual_academy_using_ps_for_ad/
Reflection will allow you to do this, though this is pretty dangerous (not reflection, your idea). Maybe exposing an API available to LUA scripting would work better.
For this he'd need to look through the IL code. Reflection alone is not enough. And that is a really messy work.
If you remove this CSS definition: pre, code { border: 1px solid #e6e6e6; } The code in this page actually becomes readable.
Thanks for your input and I do agree. I will still try to make exactly what they asked for along side of learning the other ways of doing this. When I asked why they wanted a console app the answer was "because that's how we've been doing it for 10 years..." And that just prompted me to look into other options. 
Or better and go with [Hangfire](http://hangfire.io/) which has super easy scheduling, persistence and even a nice UI to check jobs and manually triggering them.
Have you checked out Microsoft Extensibility Framework? It might help. 
You can also use something like sammy.js if your doing a true spa with little .net mvc involved. 
This is dangerous, and unless you have access to security researchers you **WILL** fuck it up. Try to expose a scripting interface instead.
You could still write it in powershell and then let the console call the script.
Sending HTML over Ajax isn't slower than sending Json. With compression on there's negligible difference in payload size. It's the approach used by Twitter and Github.
Not sure about running on nginx ... isn't that a proxy server? Entity Framework is available as part of Mono, so it should run on linux, however not sure about support for EF7 / ASP.NET 5. However if this is a learning experience, don't worry about where it will run, just try and build it using all the best practices and patterns. If you need to run it somewhere, it would be pretty cheap to run something like this in Azure. As far as login goes, just use the SimpleMembership stuff that comes with the basic site template. It provides login, registration, forgotten password functions etc. It will introduce you to all the concepts of the membership provider and you can always build your own later. 
Have you seen [MiniBlog](https://github.com/madskristensen/MiniBlog)? It uses XML as the storage backend. There is also [Sandra.Snow](https://github.com/Sandra/Sandra.Snow). which is a static site generator. I imagine it's trivial to hook that up with Nginx.
Thanks. I will take a peak at these. I don't think it is necessary to use the MVC convention for my blog, but may adapt some of the ideas I see in the code for that? I realize my application is going to be overkill for the purpose, but it would be a great learning tool I believe. 
As for IIS and nginix, I do want to make this usable so I am trying to give it some realistic platform agnostic goals. That being said, I might consider Azure if it could beat the price of some website hosting places that allow nginix hosting on the cheap. I really like what you said about using all the best practices and patterns. I doubt my first version will quite make the cute, but I will keep iterating or recreating until it does. I am a fan of the good, better, and best philosophy when developing. I will take a deeper look at EF and see if there is any special modifications required for Linux. 
Do you want to use ASP.NET with MVC 5, or do you want to use ASP.NET 5 (aka vNext) with MVC 6? If it is the latter, be aware that this is still an early preview version with a lot of missing functionality, bugs, outdated documentation (if any at all) and hardly any tutorial.
There is no information available on what will end up in the new Core framework. But I'd trust them to add everything that is required for server-side work, and drop everything that is obsolete by now. Also, `CultureInfo.InvariantCulture` is course be part of it. They just dropped `StringComparison.InvariantCulture`, as you can get this using `CultureInfo.InvariantCulture.CompareInfo.GetStringComparer()`.
I suppose this largely depends on what type of role you're looking to go into (front/back end?). Though I would argue that IoC is more of a concept that will teach and encourage you to write better, more maintainable code in general. Angular also has it's own dependency injection that isn't too dissimilar from the constructor injection you'll find with Autofac/Ninject so you'd be learning something that is relevant in multiple areas of the stack.
Actually I read about Dependency inversion as principle where high level module should not depend on low level module, while inversion of control is like a pattern or as you said architectural technique, but I got confused when I found there where so many, Many! frameworks (Unity, Niniject, etc..) which is better or which is most on demand on the workplace while I appreciate advice that say to try them all and choose the one I like, but there tons of them and not to mention which one is more prevalent in the workplace. And you are right about the grids and I have used JQGrid but there a several job posting that list AngularJs as requirement. To be honest, I'm confused and lost, my background is in Java and android application development and some ASP.net web forms. I love working with C# and visual studio but MVC is confusing about which technologies are the essentials and which one is the icing on the cake.
It is true there are many DI frameworks but frankly the pattern doesn't changes. You just need to get the hang of how you configure the mapping and off you go. The big difference is coding to IoC and for a junior dev that means following rules established by the technical lead (it boils down to writing your code to directly use interfaces and never implementations). OK I guess I have a clearer idea of your background and with that I'll recommend you dig deeper into vanilla ASP.NET MVC. Learn Razor (the premier view engine), learn how to make clean actions in your controllers, use view models, learn about action filters, get a good hand of the binding, HTML helpers (maybe write your own, it's easy). Really learn NuGet. I totally see the attraction to Angular but it is not core to ASP.NET MVC. It's actually kind of an alternative since you are doing all the routing and controlling client-side. But if you want to learn ASP.NET MVC, learn it vanilla for now and then learn Web API. Trust me, there's already plenty there and it can get quite interesting (partial views, partial actions, Ajax helpers, unobstructive client-side validation...). I'm not saying not to learn the other stuff but you should start somewhere and give yourself a solid base before moving on to other subjects. ASP.NET MVC and IoC go great together for example but it may not be the first thing to learn.
Thanks for the detailed response, I will do just that.
My pleasure. Developing web applications is and has been a rollercoaster ride and we are bound to see quite a few dramatic loops in the future. My perspective is that getting a solid footing learning the server-side stuff will always be useful along with a good base in HTML/JavaScript. Programming is still programming and frameworks are just tools to be learned and used when they suit the situation best.
MEF vs AppDomain, which one should you use and why?
There's nothing stopping you from using EF7 - even tough it's still prerelease. You could for example use EF7 and sqlite to store the data: https://github.com/aspnet/EntityFramework/wiki/Using-EF7-in-Traditional-.NET-Applications (link even has a "blog" example..) In package manager: Install-Package EntityFramework.SQLite –Pre 
If you are in the Atlanta area the job market is either flooded or just sucks for the IT fields. 
I've blogged about [why it isn't just UpdatePanels in disguise](http://navigation4asp.net/2014/11/22/link-yourself-rich-with-navigation-for-asp-net/)
Inversion of Control, Dependency Injection. The only thing Angular has to do with back ends of systems, is consumes their APIs. So if I'm writing an application and targeting angular as the front end, I'm going to create a back end that exposes a REST API (basically something you can do HTTP GET / POST / DELETE / PUT etc. to interact with the system), and Angular will just call those API methods. Angular itself is entirely front-end.
 - AppDomains - Code Access Security - Possibly WCF Also WPF and WinForms.
Yep, it's probably best knowing things progressively: JQuery, proper OOP JS and then meaty JS UI frameworks. I want to stress that Angular and the like are not a replacement for server-side apps but alternatives. They have their pros and cons. You can do a lot of neat stuff with a server-side app with AJAX enhancements. I tend to be weary of logic-heavy JS-heavy apps and the fact that JS UI frameworks are numerous and morphing rapidly doesn't encourages me much. 
Complete opposite experience. I've had 5 interviews the past 1.5 years and gotten offers from all. My current company interviews about 10-15 people for every one we hire. Its an easy market for skilled devs who can program. The market is flooded with people who can't write code or answer conceptual questions though.
I'm in Atlanta and thats kind of what I expected going into this. I talked to several different recruiters before I decided to pursue this and all of them said there are plenty of jobs and not enough qualified people. I can write good clean code but answering conceptual questions kind of scares me. 
Thanks for the advice. I do feel like my other experience is what sets me apart, especially if I was able to get into consulting. 
I work with 2 or three people who changed careers from engineering jobs to software development. It sounds like you already have experience, the rest you can read up on and get comfortable with
I am going through a book called Professional ASP.NET MVC 5 and doing all the exercises. However, Scott Hanselmann during the connect() streaming conference recommended that we start learning vNext with MVC6 now. Would you recommend I just hold off for now and then redo it in MVC6 when it is released? 
Win forms are all based on very well documented windows apis as I understand it. It would be possible to write a library to recreate winforms.
While I agree with the flavor of the month in javascript, I think IoC is not really that needed for a junior dev. Know what it is sure, but javascript you'll probably need every dat, IoC once set up (usually not a juniors task and done only once) is or should be very easy to use.
I wasn't meaning that it would be supported by Microsoft but still possible to build a library. Now that it is open source it would not surprise me if someone didn't write a wrapper.
Maybe it's me, but why would you even want to, if you develop for windows you can just use regular .NET .NET core afaik is mainly to port to other OSs, so Winforms, WPF, etc wouldn't be much use since they are built on top of controls/apis not available outside MS ecosystem Am I incorrect in my assumption? or is this just to have someone build an open source WinForms? in which case again why?
Why not try to find work with companies in the construction/architecture/building management field. Your experience becomes very easy to sell then. They are getting a guy who will not only know what they want/need (on a level no developer will ever understand no more how good they are at digging out requirements) and how to build it. Don't underestimate how valuable of an asset that is to an employer/client. 90% of the time projects fail/get delayed due to requirements not being understood
I don't know if it's practical but maybe will the open source version of .net allow you to make winforms apps? If not then I see the benefit. I don't know that there is necessarily a practical use it was simply a statment. In truth though there are many projects out there that have a VERY limited use and sometimes it is just a proof of concept.
Oh I'm in no way putting down WinForms, I just feel that since they are windows specific, most people using them will continue using regular .NET Where I see Core growing is Linux communities with .NET devs being able to develop there. However due to vast differences in how styling/display management is done in Linux if win forms were ever to be rewritten, it will be a totally different thing Kind of like writing IOS on xamarian, the code may look like c# but you still have to do things iOS way and more or less adhere to their APIs Also you can probably check out gtk# which lets you do UIs similar to winforms with stetic editor Check out this has all kinds of GUI editors for Mono, so I'm sure they will work (eventually) with core http://www.mono-project.com/docs/gui/
Also apparently Mono has developed winforms apis to work on mac and nix, so you may wantto check that out, it's on the page i gave the link to. I wonder if that means core will adopt that, since as far as I know they worked close to the mono team on it I just can't wait to be able to use VS to write Linux programs
Read Code by Charles Petzold and Clean Code by Steve McConnell. You'll get a grasp for conceptual stuff (good enough for companies I've worked for to hire you). You should also become familiar with the basics of algorithms. I've interviewed literally hundreds of people and I've only ever looked for people who were able to understand how to write code. I've seen plenty of people with CS degrees who know almost nothing about the realistic application of their knowledge to business. One time I interviewed someone with '10 years of professional experience' who never advanced past dragging and dropping elements in WebForm visual designer. I've also interviewed people way smarter than me. The market is saturated with developers, but places like Washington DC have more jobs than heads to fill them. Find a place like that and you'll get in. When I was in Northern Virginia, my team hired a woman whose sole experience was a Java certificate. When I was at Expedia, our team hired at least one person who didn't have s computer science degree.. so don't give up. I would also recommend beefing up your community presence. Create a GitHub account and put up some projects, even if they're just screwing around to become familiar with a language or framework. Also try to post answers on StackOverflow. A good hiring team will do their research and look through your code. If they see good code with sufficient comments, that will speak for itself.
Yes. That recommendation was for developer who are already experienced with this stuff, not for beginners. That stuff is all still a very early preview and far from being ready.
I built an MVC3 + Mono + NHibernate + MySql blog for a $5/month digitalocean.com nginx server. Even though I have way more experience with EF, I went with NHibernate as it has MySql support, which can easily be installed into a linux environment. When i wrote it 7-8 months ago it was possible to get EF working with MySql + Mono, but there were quite a few hurdles to jump through in order to get it into a fully functioning state. Overall it was a pain in the ass to write/debug/deploy. Azure is way more fun and easy to integrate with. 
Maybe they could change InvariantCulture to use ISO formatted dates instead, so that it would break with European and US date formats instead of just silently converting days into months.
That would be a HEAVY and UNEXPECTED breaking change. Are you aware that the target for now is that code supports both frameworks? You'd need to have a special logic at all those places.
I'm going to agree with /u/BiscuitOfLife and say you should look into IoC and Dependency Injection first. The main challenge here is getting your head around the patterns and architectural principals that IoC promotes and **why** they are important (testability, extensibility and so on). Once understood, you'll find that you naturally start to write better, more maintainable code. It's not strictly limited to backend development either; infact, Angular itself promotes this kind of design through use of services, factories, directives etc. I know it probably all seems pretty daunting at first, and may take some time before everything 'clicks'. But remember these kind of principles are normally language/framework agnostic, and taking the time to learn them now will benefit you massively in the long run.
Yes of course I know. It's still silly that they opted for the most fundamentally idiotic date format in InvariantCulture to begin with. There is a massive gotcha in MVC partly because of this.
Just make a object that represents what you need for the form and pass it along when you create new forms. In its simplest form you would use an order ID or whatever you need: public class OrderForm : Form { private readonly int orderId; public OrderForm(int orderId) { this.orderId = orderId; } } public class MainForm : Form { private void CreateNewOrder() { int order = orderSystem.CreateNewOrder(); var orderForm = new OrderForm(order); orderForm.Show(); } } You can, and probably should get a lot more fancy than this, but forms are objects like everything else.
Thanks for the response. That seems simple enough. It was kind of the way i was trying to do it. I think my issue is getting the actual order ID from the table. So once the order ID gets generated from the table, should I be putting that value into a variable and then assign it to order ID to be passed between pages? 
I think that in any case, that will not be from Microsoft. From other... maybe. Xamarin went the "native" way for Mac applications, so that might rule them out. Outside of those two... given the tremendous amout of work it represents, I'm not really sure that we will see that happen. But hey, a couple years ago I would not have though that MS would go that far in releasing stuff open source, so you never know.
Seeing as all their new-ish UI technologies are heavily using DirectX (WPF/Metro), I doubt it.
&gt; Thanks for the response. That seems simple enough. It was kind of the way i was trying to do it. I think my issue is getting the actual order ID from the table. Using the ID this way is kind of the _simplest_ way to go about it, but you won't necessarily end up with very maintainable code. &gt; So once the order ID gets generated from the table, should I be putting that value into a variable and then assign it to order ID to be passed between pages? You could do that, or you could create a order model instead which models the kind of data you expect to read, insert or update to the order table. In that case you would replace the id with a `Order` class or something like that.
I think anything available in .NET 4.5 should stay; except WebForms =). I don't know about you, but I really don't like rewriting giant portions of my code-bases when something is unexpectedly deprecated.
&gt; "The .NET Core runtime includes the same GC and JIT (RyuJIT), but doesn’t include features like Application Domains or Code Access Security" http://blogs.msdn.com/b/dotnet/archive/2014/11/12/announcing-net-2015-preview-a-new-era-for-net.aspx 
I commend you on making the decision for a career switch. I've been a full time dev for going on 4 years now and have two degrees in Architecture. I wrote a lot of code on my own and in college for about 2 years before switching careers, but it actually sounds that you have much more relevant experience than I did when I first started looking for a job. I will tell you this about getting your first position. It will be very hard to get someone to look at your resume, but when you do get a chance to talk with someone or sit for an interview, I think you'll be fine. Most hiring managers understand when they're talking with someone who can actually understand and write code, and if you can do the work they need then they will be comfortable with bringing you on. You said that you've had trouble finding entry level positions, but that's really the kind of position you should really be applying for. Either that or junior level. The reason behind this is two fold. First, for mid level and above positions you will need some experience within the industry, and you simply don't have it yet. Yes the application you developed will serve as a stand in, but not enough for the experience you'll need for those positions. Subsequently, your resume will be largely looked over. Second, although it sounds like you've put together quite an app, there is still a lot that you will learn at your first position, and you need to be in a position where your employer is expecting you to learn (i.e. not know everything off the bat) and also make mistakes. I'd also suggest that you not worry too much about your first position. The goal of your first position should be to get your foot in the door, and to learn. If you like your employer, and your employer likes you and is willing to give you more responsibility, then great. If not, then after a few years you can move and switch positions. It will be much easier to find your second job than it will be your first, and you'll find that your background in AEC isn't as much of a factor as you look for your second job. Two things I'd recommend to help you get your first job. First, go to any .net, sql, or coding meetups that might be in your area. You'll be able to meet people and talk to them. It shows initiative and you might find that someone is hiring or would be willing to ask others they know if they're hiring. Second, have some code online (on github would be best) and make sure to put the link on your resume. If a potential employer can look at something you've written and see that its solid, then that will help you get your foot in the door. I'm obviously biased, but I see someone being 100% self taught as a positive, and I haven't run into too many who would say its a negative. The issue with people being 100% self taught is that your employer doesn't know whether you've learned good practices or bad. You can PM me if you have any questions.
One thing to keep in mind... Angular.Js is set to change in a dramatic way with version 2. Requiring people who already know Angular to re-learn it. So it might be a good idea to work on your server side chops while waiting for AngularJs V2.
JavaFX seems to be a good alternative, if you are alright with non microsoft stuff
i just built an example app for ios and android using xaml and 99% shared code. Xamarin shared application.
I ditched Angular and have gone for Backbone on my latest project - Angular is just too opinionated for me and the learning curve is pretty steep. Also, version 2.0 which is out imminently isn't backward compatible (a lot of developers are very unhappy about that). Backbone certainly isn't as powerful but it's pretty good and has a small footprint and if as I'm not a JavaScript don I don't feel as lost if I have to dig a bit deeper into the library itself.
We have two contenders: Universal XAML from Microsoft and Xamarin.Forms. Universal XAML is the heir to WPF and Silverlight. Xamarin.Forms is an abstract UI. You define abstract concepts, using XAML, and it renders the UI in a way that looks native for the platform. 
Thanks!
Thanks so much for all the answers, and thanks for giving me straight info instead of telling me I shouldn't want to do this. Believe me, I don't. MEF (and even MAF) would have been awesome if I weren't restricted to using a .NET framework from before their inclusion. Sandboxing / AppDomain may be sufficient. If it's not, I'll probably cancel this part of the project rather than attempt my own solution. Cheers Jesse
I suspect if MS was going to purchase Xamarin they would have done it before the recent announcements. I don't think MS has any interest in in a cross-platform .Net desktop stack or maintaining Mono. &gt;...for example are going to double the max. app size oft xamarin apps. One important thing to note is that even though they are increasing the app size limit, they haven't said anything about the biggest limitation of the Starter Edition: you can't use third-party libraries. With this limitation intact creating a truly useful app in Starter is very hard. I mean, you can't even use JSON.Net or Entity. What's worse is many of the new MVC 5 core packages are installed via NuGet, so if this doesn't change those are out too. **EDIT** I guess this comment bothered people for some reason?
I was looking at Telerik's MVC controls, but it looks like they are using WebForms controls. Is that correct? EDIT: It looks like you don't have to use WebForms: http://docs.telerik.com/kendo-ui/aspnet-mvc/asp-net-mvc-5
I don't have a great solution but I do know that trying to install VS to the non SystemDrive caused me no end of pain. Hopefully someone else will have a more helpful reply. Goodluck!
Thanks for saving me some pain! I'll hold out until I hear a better solution instead of trying to install that on the data drive. 
Qt QML has been available for years on essentially every platform: Windows, Linux, Mac, Solaris, Android, iOS, BlackBerry 10, OS/2, Amiga, etc Looks like a breath of fresh air (very clear CSS and JSON-like syntax) after working with XAML (really complex and verbose XML). 
Can you use 'subst'?
With styling available in WPF you can easily skin an app to look like any platform. Its more a question of effort. I think current trends seem to be moving towards platform agnostic look and feel though. Its more good usability than following platform standards.
Um, did you entirely mis-read my comment? &gt;Because it seems like you missed the .net open source announcement. "...before the recent announcements." &gt;How Microsoft is pushing for cross platform What I said was "don't think MS has any interest in a cross-platform .Net **desktop** stack." MS is pushing a cross-platform **ASP** stack. &gt;working with mono directly. No, they are working with **Xamarin**, who maintains Mono. What I said was: "or maintaining Mono." Mono is a project, Xamarin is a company. &gt;They also released a full visual studio version for free. What in does that have to do with anything I said? Are you confused as to the limitations of VS and Xamarin Studio? 
Go to your employer, tell him the 80gb SSD is too little. You can get 256gb SSDs already for as little as 110 US$ (according to amazon.com). This is nothing. Then tell him that you're having issues with the little 80gb hard drive, you're often reaching the bounds of the disk despite your best efforts. You have to figure out which files and programs you can move to the second hard drive then - this costs time. Time is money. **By buying you a larger hard drive your employer is saving money.** Tell him this. If this does not help, my best advice is: **Move on.** Look for a new job. When your employer is not even willing to spend a few bucks on improving your work machine to a bearable level, then this is no healthy work environment.
I expect them to understand the concept, to be able to use. Not to set it up. A medior maybe, but I wouldn't let a junior or medior set up my architecture. I'm seen that now at the customer where I work. Everybody does his own thing. Oh I heard about this or that lets include it. Total chaos here. 
That sounds like a huge underestimation in hours and 3k would be rather cheap for this.
ok, thanks for your opinion on this. 
https://anderseideblog.wordpress.com/reading-lists/ms-exam-70-532-developing-microsoft-azure-solutions/
&gt;Client here, how much should i expect to pay for a migration? It depends.... if you are moving software that you bought (not licensed) to another server, then you will have to pay for people to do this, or you can do it your self. IMO... moving a software install should take a day or two, not a week (37 hours). Considering that contractors get £400 a day.. go figure if you are being overcharged. If you have paid for the software, you should have the binaries and config files to run your site.. you do have this don't you ?
its software we now own, being moved to a new server. the database isn't that large either. We have not been given the binaries, they remained with the developer agency as they looked after it up to now. 
&gt; We have not been given the binaries, they remained with the developer agency as they looked after it up to now. You should not have to pay for these, as (it sounds like) they are yours, you should get these ASAP. As I said before... **if** you have the files, you can pay _anyone_ to commission and install the software on a server.. .it doesn't have to the orignal devs. Also - the 3K _may_ include costs of buying a new SSL certificate, etc.. so you should look in to these costs.
the ssl was only implemented this year, and we paid for that license. would that not be transferable? 
SSL certs (not my area of expertise) are bound to a domain. something like "site.company.com" or "*.company.com" If you change the domain, you may need a new cert.. but if the domain is not changing, just the server, you should be able to use the existing cert on the new server, and change the DNS for the domain to point to the public ip address of the new server.
I might add that reissuing the certificate should not cost much if anything. But that can depend on who issued it. I currently use digicert and they offer free reissues. If your issuer is charging much for such a service find a new issuer.
the domain will be the same, so we shouldn't expect any costs on that at least. with all this in mind what do you think we should be paying for them to do this? Also do you know where i can find .net developers who can do this sort of work? Thanks again for the advice so far, its much appreciated! 
&gt;with all this in mind what do you think we should be paying for them to do this? When I have set up new IIS servers + sites for work, it only takes me a couple of days. Looking at your OP... 6 hours (bearing in mind an 8 hour day) for "project management" sounds like padding (i.e something that can be charged for, but not actually has an effort associated with it). Same with the ASP.Net v 2 (that is _already_ installed and configured on recent versions of windows server) You are using SMTP (which I have not set up)... So my breakdown would go something like. **Day 1** 1. Get existing software (executing backup commands + downloading database(s) &lt;-- size dependant) 1. Install of pre-requires on new server (can be done in parallel with step 1) - SMTP, IIS, ASP, DNS, SSL, **Day 2** 1. Upload and restore database 1. Upload and configure website in IIS + bindings + config (hopefully the new installation's file location is a duplicate of the original) 1. Test website database access + configure if required. **Day 3** 1. UAT Testing As a said before, good software contractors can earn £400 per day. A lot of this is dependant of size of data and complexity of the web site. &gt;Also do you know where i can find .net developers who can do this sort of work? You could look on [freelancing sites](http://www.freelancers.net/) or call your local recruitment agency ? You don't necessary need a .net developer, more of a systems integrator guy.
Is this a time and materials estimate or a fixed bid quote? If this is an Estimate, then these are worst case hours to account for unknowns it what should be a basic project. If it's a fixed bid project , then they are covering themselves just in case things get sideways. I would caution on just jumping to a cheaper group just for the sake of money. If you think professionals are expensive, wait until you see the costs of hiring amateurs , and then paying professionals to come back and fix it. 
Total hours does not always mean that that is the length of time. How many people are in the project?
My company sells a web service built on asp.net. I have installed it dozens of times on new servers. If he is to configure the server I would say 3 or 4 days sounds about right but this is a product he is not familiar with so there will likely be a learning curve as he figures out what he needs and does not need. I sounds like to me you may not have everything he needs so he is padding a bit to cover those slow downs. In the end it may tall longer depending on the responsiveness of the original developer.
Thanks so much I appreciate it!
QML is very limited component wise. Even the authors recommend it for mobile apps only.
Yup, that would account for high hours. Did you request a fixed bid? Or is that what was offered? As a consultant myself, I avoid fix bid projects. Fixed bid is incentive for me to charge a client way more for a project. They have clear risk reserve baked in with the pm/spec hours. Also, you may not what's under the hood, and if this system is poorly maintained ( which us my guess based on a .net shop moving to "app" development ), they are going to need A LOT of testing and work to get it run somewhere else. My advice is go with this estimate as is, as finding a new shop may add more hours (due to the possible nature of this system being in a bad state ) in learning all the "wtf"'s that are there. To most of us on reddit, this seems like a simple move. However in my consulting experience, having cleaned up behind many many poor quality firms, stick with them to get your system running, then find a better support firm.
its not a shop but a web app. what it is used for is measuring progress of a team through a new behavioural curve. they start off with a team workshop, lead by a coach. then at the end they set goals and a new paradigm. this is then input into the web app. and each month they grade goals from complete to not started with 5 steps. each team member has access to the team programme. we have maybe 80 teams using this software at the moment. its really not that complex as far as i know. 
Thank you - this is good advice. I work for an IT company, and my department (application development) is quite small compared to the rest of my company. One of my coworkers and I are the first in our department to get workstations like this. I can see how an 80GB system drive might not be a problem for the technical guys, but for our department it has been a nightmare. I will talk to my department head. A larger drive is probably the best solution. 
Can you elaborate a bit? Or do you know of any articles that go into more detail on this?
No, it's not very limited and the authors do not recommend it only for mobile apps. Check Qt Quick Controls and Qt Quick Enterprise Controls. Also, one of the top .NET components providers is developing a QML version of their suite. 
Do either expose a drawing context like WPF? If not, I can't use them.
Try [Udemy](https://www.udemy.com/courses/). If you like an instructor, you can arrange regular meetings/lessons there
Don't make another call to the stored proc once you have your data. The idea is to reduce trips to the database, not create more. How you do the sort depends on how you are storing all that info once you pull it from the database. For arguments sake, let's say each record relates back to an object, let's call it Person. And all those Person objects are held in a list. And then that list is being used as the datasource for the ListView. So when you want to sort by a column (which should relate to a property of Person), just sort the list by that property and then rebind the ListView. Real quick example (syntax might not be exact). //you have a list of Person objects //you want to sort by Email now listView.DataSource = personList.OrderBy(x =&gt; x.Email); listView.DataBind(); Now how you get the sort term is a different matter. You could just do a hyperlink on any of the terms that you want to sort by and define each one with a CommandArgument. Then on the command event get the argument and sort the list by that corresponding property, then rebind. And that .OrderBy() can also be followed by .ThenBy() if you want to have a "backup" sort term in case of the same values.
I kind of figured that it was not the best way to do it my way, because I felt like it was unnecessary to call a stored procedure again to bind the data. So my next question is, I have the listview databinding from the ASP code not the C# code. I would have to rewrite it so that the listview binds in the C# code, correct? By the way this is code I didn't write, a former programmer wrote it but I'm responsible for the project now. Maybe you can also answer this for me before I find an answer online. Can I add multiple parameters in OrderBy()? Or does OrderBy not allow this. For example: .....OrderBy(x =&gt; x.Email &amp;&amp; x =&gt; x.Phone &amp;&amp; x =&gt; x.Address); &gt; The idea is to reduce trips to the database, not create more. I'm going to add this quote to my desktop wallpaper because I keep forgetting this. Thanks for your help.
As far as the binding goes, you could either rewrite or just make sure your properties are the same as the original bindings (if the asp column binds to "Email_Col" you would have to have a property called "Email_Col"). So long as the bindings still have the name they are looking for in the datasource, it doesn't care what that datasource is. For the multiple parameters question, that is what I meant by including a .ThenBy(). You can just tack those on to the end, so ...OrderBy(x =&gt; x.Email).ThenBy(x =&gt; x.Phone).ThenBy(x =&gt;x.Address)
For future reference, the term you are looking for is "refactoring".
For security - the Source Database can be torn down after the data is written via the API - it does not have to stay live. 
What about this? * Create a model of the source database in my application. * Change connection string (for different databases) - based on parameter in application (Select statement to look for database - present in dropdown) * Execute Bulkcopy from source to destination. Basically following this article. http://visualstudiomagazine.com/articles/2013/03/01/effective-use-of-sql-bulk-insert.aspx However i would have to backup the source database and the drop the database from the server since it is no longer needed after a successful load. Would still like to know if this is the best option. Thanks 
It really depends on a product. If you plan to make profit and create a scalable app, I'd go with quality tools and solid support. I've used various Telerik's offerings (KendoUI, AJAX controls, Data Access, Reporting) - they're top notch, get updated frequently, and have awesome support.
What is the trouble you are having? the `code` parameter will be the contents of the text area. Be advised, executing arbitrary code is very dangerous.
&gt; Hello, I would like to try to create a visual programming interface So would Google, Microsoft, Apple, and MIT. It's a tough nut to crack. Your scope is way too big considering you're posting here on how to get started. Firstly, you need to pick a platform. Web or Windows. That cuts your scope in half. If you need web, then do web because web works on windows. Next, cut out all dreams of a slick drag and drop interface with amazing graphics, and design something lean and utilitarian. You can jazz it up later after the functionality is completed. Lastly, you need to post more focused questions if you expect productive answers. Good luck! 
Check out touchdevelop from Microsoft. It's a phone app. Also, smallbasic might give you some ideas.
Why are you doing this? Is it an ongoing process? One option might be to use an ETL tool like [rhino etl](http://www.hibernatingrhinos.com/oss/rhino-etl). Never used it personally though.
I'm more thinking data workflow engine, similar to talend, rapidminer, etc. I've been looking at Windows workflow foundation... Do you have any thoights?
Awesome. Thanks!
Don't. The only work in basic situations. You won't get the flexibility you get from actual code.
Usually with ServiceStack you can use some sort of Object Relational Mapper like ORMLite or Dapper. When you install ServiceStack by default I think it includes ORMLite. Configure the database connection in the ServiceStack project's Global.asax Create a class or classes that represent your database tables in your project. Then create a service that will read the data from source tables when you call it via HTTP. Next, instantiate the class and map the source data properties to the destination classes properties. Then using ORMLite insert the record in the table by passing the class instance with the data. It's like using a class to represent the record that you're inserting. This would be the most simple way of doing what you described. This is assuming you want to use Servicestack to do this. However, your problem might need a diferent aproach but will come down to the fact that your requirements will force you to do things a certain way.
My thoughts are if you aren't sure where to start the task is probably too deep for you to attempt. 
This is solely for etl. Would it still work for that situation?
Almost definitely not. Non technical users won't know enough to map columns to other columns etc. Complex data transforms wouldn't be possible. Real programmers would be frustrated by it's limitations. Your probably much better served by existing ETL or service bus tools.
Here's some links you might look at: http://www.codeproject.com/Articles/107121/Basics-of-Dataflow-Programming-in-F-and-C http://www.codeproject.com/Articles/182683/NetworkView-A-WPF-custom-control-for-visualizing-a
Eh GUIs are the exception in my book. Particularly javasciprt GUIs. Its like looting a graveyard to find the one you want.
SSIS basically works like this. And look how well that turned out.
Good links. I would also recommend [Windows Workflow Foundation](https://en.wikipedia.org/wiki/Windows_Workflow_Foundation) which implements a visual editor.
This is a tough question. It all depends on what type of application you want to make. If you want to make feature-rich applications with alot of user input, buttons and what not, you should use a javascript framework(angular). If you should learn it or not is another question. It seems that javascript and SPA frameworks is the future, and you should definitely learn it. If you already know some javascript, it is not hard to learn. I took a [1 day free course](https://www.codeschool.com/courses/shaping-up-with-angular-js) on codeschool on angular which explained most of it and after that i was able to use it for my purposes. What I am trying to say is, learn as many frameworks and programming languages you can. You learn to see new possibilities and solutions. Moreover, you will become a better developer.
ASP.NET MVC and WebAPI are being merged in ASP.NET vNext (http://www.hanselman.com/blog/IntroducingASPNETVNext.aspx), so you won't have those differences going forward. But even if they weren't, you will want to learn both to get into web development. Since you are in an enterprise environment, you might find that ASP.NET MVC is a bit more popular, so that might be a good starting point. As for Angular, I would recommend holding off on it. From the sounds of it, you haven't done much web development before. If that's the case, I would recommend learning plain JavaScript first and then get into a small framework/library like Backbone or Knockout. Angular has a rather steep learning curve and they are essentially rewriting the whole frameworks with v2 anyway, so I don't think it's a good option for you.
At least until the next javascript framework comes around.
Try going to a .NET meetup in your local area. You might find folks that can help out there. 
like AngularJS 2.0 which will probably be very different ;)
+1 for learning MVC and using a less-prescriptive framework like Knockout to do bits of data binding when needed. It will be a more flexible approach and much more suitable for the enterprise world, and your existing C# skills will come in handy. Unless you're building a full on Single Page Application, Angular is over the top. There really is a LOT to learn and even if you think you know some javascript, angular is a whole other level. 
Indubitably (nice word to say :) ). 
Yeah, I've working in projects that had the 3 tier setup (or a few more), then in the UI used MVC, and they wanted to add some JS mvc/mvvm to the client. 
Your real question is this: ##Do I build my HTML server-side or client-side? Angular.js is just one of many client-side HTML building/rendering services, where the HTML is built from (usually) static templates and data-bound against data received from a (usually) RESTful service. ASP.NET MVC is just one of many server-side HTML building applications -- although it can also be used (with some extra work) to build a RESTful web service. ASP.NET MVC WebAPI does a lot of that work to transform MVC to make RESTful web services easier. But the bottom line qustion is client-side HTML vs server-side HTML. You have to determine that before you determine anything else. And the answer to that question depends entirely on what you're trying to do with your application. I personally favor client-side HTML rendering for the majority of applications, and Angular is my favorite client-side framework for that, with Knockout being a great alternative. But there are important use cases where server-side HTML building may be better -- certain types of mobile applications, for example, or even something as simple as a login page (which frequently requires a nonce in a hidden input field, which can only be had with server-side HTML) require server-side HTML building. If I were doing a new project today, I'd use angular.js unless I had a reason not to. Angular is a difficult framework to jump right into, because there are a few important nuances, but once you get the hang of it, it's perhaps the most natural feeling framework out there. You have to really enjoy the koolaid, though... if it's not delicious to you, you're gonna have a bad time with Angular. If you really like WPF and MVVM but can't get the hang of Angular, consider Knockout instead. You won't get a lot of the things that you get with Angular, like an easy REST client and dependency injection, etc, but you'll perhaps have an easier time implementing MVVM. For server-side, I'd use ASP.NET vNext (because I want to try it), but if that weren't an option for whatever reason (client doesn't like alpha software, etc.) I'd use node.js and if that wasn't an option either, fall back to WebAPI. 
I am a full stack .NET developer (turned architect, now CTO) for over 15 years. I worked in enterprise and marketing. We stopped using MVC 3 years ago in favor of SPAs in Angular with Web API and I've never looked back. I think MVC is bloat and server-side page rendering is no longer necessary. Many will disagree with me, but we have more robust apps, easier to add features and we blow people away. Take what you will from this. 
I would use WebAPI + Angular.js so that you have maximum separation between back-end and front, which I believe will help you learn to be a better front end dev. Also I think you've chosen wisely going with Angular, your data-binding experience from WPF will translate very well (although that's not to say Angular is the only framework that does data binding).
Heads up, this is a bad time to get into Angular. Angular 1.x turned out to be a bit of a cluster of a framework. 2.0 is a complete rewrite, so if nothing else I'd wait for that. But React+Flux is really starting to take hold and it does seem like Facebook is onto something. I've used Angular 1.x extensively and have dabbled in React. I expect my next project to be React based.
Why are people still working on WebForms? It needs to die. It is the most horrible thing to ever happen to internet and Programmers! And yes, I know it is still widely found in the wild and there is plenty of legacy code. It does not mean however that new things should be written in it.
IoC was around long before Angular and will be around after everyone has forgotten that Angular ever existed. You can substitute any web framework for Angular in the previous sentence.
Horror. My goal in life is top not be surrounded with senior devs/architects stuck in 1994. Thus far I've been lucky and I wish you all the luck
Jason, what sort of apps do you guys have? Also, what sort of problems you had with MVC that Angular is helping you to solve? Thanks!
Depends on what you're trying to do. Not every system needs to be utilizing DI along with other SOLID principles and with 100% test coverage. Web forms are easy and lots of cms's are built around them.
I tried it when it first came out and liked it. And then I found I hit problems quite quickly, it was too restrictive. It might have improved since then although when I think of generated Html I wince (I was using the Silverlight version). My hunch is to stay away :-)
No.
&gt; lots of cms's are built around them like SharePoint
I know someone who uses it as a quick backend of angular js apps. Personally I don't use it, but he swears by it.
It seems to fit its purpose well: rapidly creating CRUD/LoB apps with a very narrow focus (that of the CRUD actions) and consuming WCF RIA and OData APIs for displaying some light business intelligence.
I use it and love it. What isn't built in is easily added.
Whoah. You really should know that alternatives are being supplied in this case. Its not 100% dead
Ace work
What can you do in MVC that you cannot in WebForms? Serious question.
How would that work with my example? I have an aspx page that has a user control on it that's using a web api that redirects to another aspx page? I'm aware of the other options, this isn't for everyone but I find it pretty useful.
Because your api controller shares no state or functionality with the web site project. Unless I overlooked something the api only did a simple value check. 
I despise dynamically recompiled Visual Studio ASP.NET Websites. The engineer that invented Temporary ASP.NET Files can go die in a fire. It was a horrible idea a decade or so ago when it was invented, and it's still a horrible idea today. If you really, really need to be able to change an aspx file on-the-fly, you should compile it into it's own assembly and deploy that. Web Projects that compile down to an assembly are the only thing anybody should be using. After ten years of using both I can say don't ever use a 'website' solution. Any benefit of being able to hotfix the server by editing an aspx file is heavily outweighed by the burden it puts on the development team and devops.
For a greenfield project I would do as you say but that's not what this is for.
Is there any programming involved? If it's just a migration from one web server to another (thats under your control) I can't see it taking more than a couple of days to do and test.
Oh sure, if you have to live with the website solution, there is not much you can do. I'm in a similar situation with a few projects at work. One of them is third party, so there is no point in trying to make it a web project as we'd have to do it again at the next upgrade cycle and it would be additional work all around. 
Zero programming involved 
&gt; a huge underestimation in hours That. Also, I am having very very hard time believing some of the specifics, such as "Writing Spec 2hr" - unless it's a very small project or it's a very thin spec that says something along the lines "yeah just migrate it so everything works".
It uses http for plugins? Am I understanding this right? Seems weird.
.net already comes with an easy webclient. Parsing json with Json.net is a single line. You can nest those two together and have this exact same functionality with no 3rd party library. The important thing I would be looking for in an http api client are common built in api authentication methods.
It is an http connection but to a local process on the same machine, so it's super fast. Browserlink and and a few other processes uses this technique. It's not too had. Instead of embedding Roslyn and static analysis into every editor it works off a centralized server that any app can connect to.
Took a quick glance at your blog and demo. Looks very interesting and I am always looking for ways to incorporate Rx in some of my projects. PM me if you want to share some of your ideas.
Well a web API shouldn't do a redirect like that. That's out of the scope of what an API is supposed to do. 
The best thing you can do for any project, crappy legacy ones or not, is to create a proper build. If it's locally hosted then deployment should be a single click.
Howdy. Indeed, authentication is built in (there's a code snippet on github's readme)
My apologies, I must have missed it. Thanks for the heads up I'll take another look.
I've actually seen this library in action and it saves a LOT of code!
Lol this looks like a dig at the Mvc lovers
What is your target database? If it's SQL Server, any reason for not considering SSIS? 
I used to work as an application and infrastructure engineer and I was assigned to projects like yours all the time. I've moved hundreds of websites and applications as well as some private clouds and whole web hosting data centres from one physical location to another. Moving things around was my job. Some of the estimates seem high, others a bit low, some are missing. I would quote 4 hours for investigative work and documentation which would include writing spec. Project management effort should be minimal unless the project is huge. Most migrations like yours can be easily done by 1 engineer and the scope is well defined from the start. Attaining resources shouldn't take 4 hours but it may very well do. So this is more of a safe estimate than a rip-off for example. The configuring server estimates are odd but depending on the solution can easily take over a day (pre made machines or install from scratch for example). All I am saying is that I wouldn't break it down like that but the general estimate looks alright. Restoring app/website on the new server - as above, the estimate total seems ok but I wouldn't break it down like this. Not sure how database restore would take 4 hours. The DNS estimate is odd as well as it literally takes couple of minutes unless you're changing multiple records. Testing can take a day too. I would probably quote: - Investigation, project management, project spec, technical spec, documentation - 1 day - Server configuration - 1 day - Initial migration + testing - 1 day - DNS switchover + final migration + testing - 1 day 4 days @ 750 p/day = £3k. We wouldn't probably do a fix rate and charge time and materials instead. I expect it would be more like 3 days instead of 4, but something can always go wrong and it's always better to quote more and charge less than the other way around. 
thanks for breaking it down for me, it would seem they are covering for any unforeseen hiccups. I have gone back to them and said we think 5 days is a little excessive and that 3-4 is what we have been told by other people in the field. ill have to see what they come back with. 
Goto source control explorer. Goto a mapped folder and add new item in the menu bar for the explorer. I think you at least need the root folder mapped
This. It does what it wants.
Hey man it works and we release on all platforms with a desktop interface. Its comments like these that show how immature you are as a developer. Mature developers are not attached to platforms or specific languages, they have no boundaries and don't laugh at other solutions because they know that it might be them next time. Reality check HTML is native to all platforms. If you don't consider it as a comparable solution to interface inconsistencies across multiple platforms, you might want to go back a learn some javascript, check out Kendo UI from telerik or go learn another language that gives you a broader perspective.
This just made my day!
There are lots of wrappers around httpclient/webclient, but none of them seem to handle the case where you want to do different things based on response codes, which is imo a very important use case and the main reason why I wrote speakeasy (https://github.com/jonnii/speakeasy). I will say, however, that's it's great that this library is a PCL, as that's the future. At some point I'd like to go back and rewrite speakeasy as a PCL, but I don't have the time =( 
I did say that it was a very simple example and session state was missing, I will update the repo with that and post. As I say, it's not for everyone but it's working pretty well with the project I'm using it with :-)
Agree - but this is a workaround for something else.
It's already out and yup it's totally different 
I'd be a touch upset if I'd spent the money for my vs pro license but I didn't so yeah!
I wonder if most developers with VS Professional also have a MSDN Professional subscription.
What the fuck? Do you really think that giving your application the ability to drop every table is a good idea?
It's still a ludicrous idea. Either you are giving the application way too many privileges or you are testing with a different set of privileges than you would have in production. Either way you are courting disaster.
Don't use `#if debug`, use the `ConditionalAttribute` instead. And mark cross-posts as such.
Generally, the only way to truly make it part of your skills is to write code. Create an application, then refine it over time. See where the various practices you've read about work and where they cause issues. 
So are post-build steps. Or you can do it right and use SQL Server Data Tools, which will also deploy when you hit the run key.
My company has 3 normal licenses and no MSDN. No point really to buy MSDN for just VS. Next to that, you can't use community for companies with more than 1M turnover, small companies are easily going over that.
Reference: https://www.infoq.com/articles/SSDT-Intro
+1 for BDD. TDD focuses too much on everything being tested directly. BDD tests the interaction points directly and everything else indirectly. Saves a ton of time.
I too find it hard to exercise TDD when I have no idea where to start with the architecture. It might be good to hack something together without any tests, just to get a feel for what kind of components you will need. Then start over, doing it the "proper" way - tests first, clean code, etc.
Mate I've been writing web apps and native ones commercially for over 10 years so I'm well versed in the problems intrinsic to both. Anyone who says HTML is platform agnostic and works everywhere is either deluded or has just cut out the winxp user base out or has just neutered their UI capabilities. What you've got is a smart client and it's an old idea.
I'm still struggling to understand how PCL's are meant to work. .NET 4.5 has System.Drawing. I have a DLL that I can use to work with images. PCL doesn't support System.Drawing, so what the hell are we meant to do with that? Do they honestly expect us to write image code from scratch or something?
You could make a session cookie. Its a hell of a lot more convenient to use than passing an object from view to view.
I don't want a pissing match, and you are correct that it is a smart client. Look I understand where you are coming from, I just disagree with your statement in the orgional post. 
You could also just use the existing MigrateDatabaseToLatestVersion initializer: http://msdn.microsoft.com/en-us/library/hh829293%28v=vs.113%29.aspx
Even this site reported it 2 weeks ago when it was announced, as crap as DrDobbs is for tech news.
Or just commit more often.......
Sorry about that. Let me try to explain a little better. Evidence Table (Summarized): Hash | FileName | SuspectID hashvalue1 | fileName1 | Suspect1 hashvalue2 | fileName2 | Suspect2 hashvalue1 | fileName1 | Suspect2 hashvalue3 | fileName3 | Suspect2 hashvalue1 | fileName1 | Suspect4 hashvalue1 is common among suspects 1, 2, and 4 Suspects Table(Summarized): suspectID | SuspectName | SuspectLocation Suspect1 | BadGuy | BadguyLand Suspect2 | ReallyBadGuy | Neverland The combobox lists all of the file hashes. If I click on hashvalue1, I want the listbox to display Suspect1, suspect2, and suspect4. I am trying to create a database to link suspects to evidence files. I hope I didnt make it more confusing. 
If I'm understand what you want correctly, dont you need a where clause to limit it for only suspects with your selected hash? Like this: "SELECT Evidence.Hash, Evidence.SuspectID,... WHERE Evidence.Hash = " + comboBox1.SelectedValue + "..."
The initial ones are filemaker and oracle.
Please read this: http://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlparameter%28v=vs.110%29.aspx Even if your combo box is read-only learn about [SQL injection](http://en.wikipedia.org/wiki/SQL_injection). I apologize if in advance if you already are familiar with it.
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**SQL injection**](https://en.wikipedia.org/wiki/SQL%20injection): [](#sfw) --- &gt;__SQL injection__ is a [code injection](https://en.wikipedia.org/wiki/Code_injection) technique, used to [attack](https://en.wikipedia.org/wiki/Attack_(computing\)) data-driven applications, in which malicious SQL statements are inserted into an entry field for execution (e.g. to dump the database contents to the attacker). SQL injection must exploit a [security vulnerability](https://en.wikipedia.org/wiki/Security_vulnerability) in an application's software, for example, when user input is either incorrectly filtered for [string literal](https://en.wikipedia.org/wiki/String_literal) [escape characters](https://en.wikipedia.org/wiki/Escape_sequence) embedded in [SQL](https://en.wikipedia.org/wiki/SQL) statements or user input is not [strongly typed](https://en.wikipedia.org/wiki/Strongly-typed_programming_language) and unexpectedly executed. SQL injection is mostly known as an attack [vector](https://en.wikipedia.org/wiki/Vector_(malware\)) for websites but can be used to attack any type of SQL database. &gt;==== &gt;[**Image**](https://i.imgur.com/OkMtojh.png) [^(i)](https://commons.wikimedia.org/wiki/File:KD_SQLIA_Classification_2010.png) - *A Classification of SQL injection attacking vector until 2010.* --- ^Interesting: [^Improper ^input ^validation](https://en.wikipedia.org/wiki/Improper_input_validation) ^| [^Code ^injection](https://en.wikipedia.org/wiki/Code_injection) ^| [^Yahoo! ^Voice](https://en.wikipedia.org/wiki/Yahoo!_Voice) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmhdldi) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmhdldi)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I give serious applaud and rep for a well written question and providing some roadmaps for those of us starting down the path of TDD.
No, you will change it now because it's really easy to do and the world doesn't need any more injection attacks :) SqlCommand myCommand = new SqlCommand("SELECT * FROM table1 WHERE field1 = @myfilter"); myCommand.Parameters.Add("@myfilter", SqlDbType.VarChar); myCommand.Parameters["@myfilter"].Value = yourvariablename; 
You can create custom scaffolds. If the controllers and views could be created at runtime according to some logic you define you can probably create custom scaffolds that fallow the same logic.
I like RavenDb for rapid prototyping.
Take a look at adding command parameters instead of appending input to the command string because of SQL Injection.
I use [CodeSmith Generator](http://www.codesmithtools.com/product/generator) with some custom and open source templates.
I see in the comments that you have found a solution, but I would like to give advice on how you execute these SQL commands. I suggest using [stored procedures](http://en.wikipedia.org/wiki/Stored_procedure#Comparison_with_dynamic_SQL) to execute those commands. This will prevent SQL injection. You would essentially write your commands on your database, and then call the command names through your C# code and pass in parameters. EDIT: Typos
#####&amp;#009; ######&amp;#009; ####&amp;#009; Section 2. [**Comparison with dynamic SQL**](https://en.wikipedia.org/wiki/Stored_procedure#Comparison_with_dynamic_SQL) of article [**Stored procedure**](https://en.wikipedia.org/wiki/Stored%20procedure): [](#sfw) --- &gt; &gt;Overhead &gt;&gt;Because stored procedure statements are stored directly in the database, they *may* remove all or part of the compilation overhead that is typically required in situations where software applications send inline (dynamic) SQL queries to a database. (However, most database systems implement "statement caches" and other mechanisms to avoid repetitive compilation of dynamic SQL statements.) In addition, while they avoid some overhead, pre-compiled SQL statements add to the complexity of creating an optimal execution plan because not all arguments of the SQL statement are supplied at compile time. Depending on the specific database implementation and configuration, mixed performance results will be seen from stored procedures versus generic queries or user defined functions. &gt;Avoidance of network traffic &gt; --- ^Interesting: [^SQL/JRT](https://en.wikipedia.org/wiki/SQL/JRT) ^| [^Prepared ^statement](https://en.wikipedia.org/wiki/Prepared_statement) ^| [^VoltDB](https://en.wikipedia.org/wiki/VoltDB) ^| [^Late ^binding](https://en.wikipedia.org/wiki/Late_binding) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cmhmlfg) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cmhmlfg)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
Sounds like you've fallen into a couple of traps. Crud only works for trivial apps where columns shouldn't be changing all that often. Secondly, scaffolding/codegen also only works for trivial apps too. Your trying to automate too much.
Easier to just have a step of your build scripts migrate the database. 
&gt; My process for development is not the same as my process for deployment. Life gets much easier when it is. You can be a lot more confident in your deployment for one.
Some things aren't, some things are. Database backup/restore/migration is the perfect example.
No, it's costly, tedious and error-prone and should be automated. There is a certain class of apps (and I've built dozens of these) where all the work should be in designing the model and describing the relations and validation rules (of which there aren't *that* many permutations.) Everything else - forms, validation, controllers and queries can all be automated. Then you build a nice public-facing front end for it.
In that case I think you want to look at lightswitch.
Hmm, that actually looks pretty cool. Provided it's extensible, it might be a good fit for us. Have you ever used it?
&gt; Crud only works for trivial apps where columns shouldn't be changing all that often. Crud is a general term for the actions taken by a given category of applications, and it works always, it doesn't depend on the size of the application: it doesn't matter how glorified your UI is, at one point you have to alter the state of the data in the DB. &gt; Secondly, scaffolding/codegen also only works for trivial apps too. Your trying to automate too much. Code generation is simply automated typing. If you as a human do the typing or a code generator, there's no difference. With more complex applications a code generator becomes a little tedious to use because the input for the code generator becomes complex too (as it can't create things on its own) and humans can deal with that situation better, but don't have the illusion that code generation only works in 'trivial' apps, it works in all cases, the only catch is that you have to feed it complex input for the complex cases. You can mitigate that btw with e.g. templates which take care of categories of applications (so they can deal with more complex situations), so it's very well possible to create fairly complex applications nowadays from nothing but metadata. 
Isn't that saying programmers are there to write repetitive plumbing overhead code ? 
No, we already have tools like Visual studio that do a good chunk of the work. VS can create a controller but it has no idea what actions to create. Creating POCO models is also ridiculously simple.' Even if you took a huge projected and somehow automated this you'd by saving maybe half a day. Perfect example of premature optimization applied to workflow.
&gt; Crud is a general term for the actions taken by a given category of applications, and it works always, it doesn't depend on the size of the application: it doesn't matter how glorified your UI is, at one point you have to alter the state of the data in the DB. CRUD apps generally map UI nearly 1 to 1 with the database, they are essentially forms over data. As soon as you do any actual workflow analysis you see how poorly it maps to user expectations. Usually they want to transform or manipulate multiple records and CRUD interfaces simply don't cut it. &gt;Code generation is simply automated typing. If you as a human do the typing or a code generator, there's no difference. I should say trivial scenarios rather than trivial apps. I don't have a problem with limited, once off, codegen (VS Templates for example), but it often gets out of hand. Every codegened app I've seen has become impossible to maintain because the templates are no longer flexible enough for the real world and they've produced mountains of code that also has to be maintained. &gt;the only catch is that you have to feed it complex input for the complex cases. It get's to that point very quickly and as soon as it does you are better off writing code than maintaing your own half assed DSL. &gt;You can mitigate that btw with e.g. templates which take care of categories of applications (so they can deal with more complex situations), so it's very well possible to create fairly complex applications nowadays from nothing but metadata. Absolutely horrible applications that uses hate because it's based off data structure not workflow. People have been claiming to be able to take the programming out of programming for nearly half a century and no one has succeeded yet. If you can make an application from metadata then why bother with the templates at all? Turning it into source code is a wasted intermediate step.
Thank you. I appreciate the tip. I actually created stored procedures earlier but never got them working so I moved on to get the program running with the idea of changing everything to stored procedures. Ill take a look at the link. Thank you. 
We use Entity Framework code first against a decade-old db. We only model the columns we use. When new columns/tables become necessary in the next sprint, we update our EntityTypeConfigiration for that table or create one for the new table, with all the mappings. We also use the repository pattern for the abstraction.
Forget Managed DirectX and move to SharpDX asap. At least it's being actively updated.
&gt; CRUD apps generally map UI nearly 1 to 1 with the database, they are essentially forms over data. As soon as you do any actual workflow analysis you see how poorly it maps to user expectations. Usually they want to transform or manipulate multiple records and CRUD interfaces simply don't cut it. Our apps tend to be on the edge of where CRUD is a good fit, but needs a bit more sophistication than most of the basic solutions that are out there. There are often cases where 90% of the app can be automated and 10% needs custom views etc. But it still means that 90% of your app is very easy to build and maintain/update. You can also quickly prototype as much as possible using a CRUD system and then build out custom parts as needed. With some extra features like relations (one of, many of, display &amp; order rules) and smart handling of things like image scaling, cropping, etc. you can cover a lot of use cases without sacrificing user experience. In fact the UX can be an improvement because of the automatic consistency.
Here are my personal *must-watch* sessions. There are a lot more that take my fancy but these take priority in my queue. Just posting for myself really :) - [Abusing C# - *Jon Skeet*](http://ndc-london.oktaset.com/t-28148) - [Lessons From Large AngularJS Projects - *Scott Allen*](http://ndc-london.oktaset.com/t-28142) - [Going down the rabbit hole: a case study in corner cases - *Jon Skeet*](http://ndc-london.oktaset.com/t-28149) - [Equivalence Classes, xUnit.net, FsCheck, Property-Based Testing - *Mark Seemann*](http://ndc-london.oktaset.com/t-28150) - [Cage Match: Programming Language Throwdown with Jon Skeet and Gary Bernhardt - *Rob Conery et al.*](http://ndc-london.oktaset.com/t-28177) - [Event Sourcing, Messaging and CQRS Basics - *James Nugent*](http://ndc-london.oktaset.com/t-27101) - [Five (or so) Essential Things to know about ASP.NET vNext - *David Fowler and Damian Edwards*](http://ndc-london.oktaset.com/t-28158) - [Getting up to speed with redis - *Marc Gravell*](http://ndc-london.oktaset.com/t-27068) - [Cage Match: ORMs are Dead! Long Live ORMs! - *Rob Conery et al.*](http://ndc-london.oktaset.com/t-28179) 
I've set it up and tried testing it out as if I was going to develop a business app. I get the impression it only works for extremely basic scenarios, and did not have a friendly user interface. When something doesn't work, trying to figure out why seemed to be an issue commonly mentioned in forums. 
I completely agree with what you are saying and it does depend on the class of application. Definitely line of business application development has a certain set of repeated tasks that go into the building of everything up to certain level. If you've built one table you've built a million. Same with CRUD code and even domain level objects. Like you mention building business rules and validation still requires a developer, although that could change one day. I'm not sure why people argue against the idea of us all doing less plumbing and just working on the delta of a particular problem. It sounds like what you are looking for is something like a CMS for business development. I think [Peopletools](https://en.wikipedia.org/wiki/PeopleTools) is the bloated, bastardized, overpriced, proprietary version of this. I have yet to see something like this that is easy to use and accessible to developers. Let me know if you find one!
Look for a "accounting for non-accountants" course. The CPA society should actually have one they run, so your accountants in the office can help you locate it.
There is a great framework for doing everything you want but it's called Rails, unfortunately .NET doesn't really have anything to compare :-)
And python/Django too, no?
Not sure this would be what you have in mind, but Scott Allen has an amazing set of courses over at Pluralsight.com. He covers ASP.NET MVC in depth, across several versions, but he also covers nearly every surrounding technology/methodology as well, LINQ, general C#, jQuery, Bootstrap, CSS, HTTP, AngularJS, design patterns, etc. If you're looking to expand your knowledge, I'd definitely recommend his courses.
You could take a look at designing your application using the onion architecture (pretty good StackOverflow post about it [here](http://stackoverflow.com/a/19825761)) if you're interested in building applications that are more easily maintainable. If you aren't familiar with dependency injection, that's another thing to look into, [Ninject](http://www.ninject.org/) is an IoC (inversion of control) container that I have been working with for a few projects and it seems to work well with MVC (using the Ninject.MV5 nuget package).
Check out the dynamic data website template.
Some of those are on my list too. Might see you there. Are you in the precons?
Here's the question you need to ask: are you deploying multiple applications to the same instances, all of which depend on the same underlying DLLs? If so, using the GAC for those underlying DLLs may be a good idea. Otherwise, private assemblies are a better idea.
No GAC. It aimed at solving "DLL hell" and despite doing some cool things standard system DLLs couldn't do before (i.e. multiple versions living together simultaneously) it quickly became clear it was more hastle than it was worth. Beyond my personal preference and history with the GAC, take a look at how Microsoft is using it: everything is moving towards self-contained deployment. Once upon a time to deploy an application you had to install (with admin rights) the .NET framework itself (I know their are getto ways around that), dependencies and only then you application. Now look at all the ASP.NET MVC and Entity Framework stuff. It all moved away from the GAC to NuGet so it's both easier to grab the project from source control and get it working and when you deploy, those things come along with just the right version you need and without messing with other apps. Still want to deploy you "official" version of ASP.NET MVC? You can still use the GAC but why bother? The framework itself with ASP.NET 5 (vNext) is going to be something you can deploy per application as well offering the same flexibility. Long story short: NuGet killed the GAC for *most* cases. It allows sharing libraries with less risk and hastle. Makes deployments a safer and easier affair. 
I've made one of those in .NET to replace an old ASP classic one. You are right that generating code is meh. Messing with XML/JSON files is error-prone and can be messy so I wrote a fluent interface where you could easily declare a, for example, page for editing the Cars table. Using generics and Entity Framework declaring such an edit form was really easy (intelligence for DB fields and all) and with EF changing the schema and the corresponding forms was both easy, quick and safe (compile-time checks and all). The fluent interface instead of generating code just created an in-memory structure with dynamic ASP.NET MVC routes so I only had one generic controller that would use that structure to do all the display and business logic. It was pretty fun to do but it was limited to CRUD which only goes so far. I don't know what its worth but Lightswitch is Microsoft's answer to making quick CRUD applications in .NET. &gt;I can't believe everyone would still be building/maintaining controllers and views by hand. If you are making any kind of bespoke application, unless it's a super-simple CRUD app you are going to need to do this and I wouldn't want a tool to guess its way into what I want when it's quicker for me to throw a couple of controllers and the actions I want.
I always try to better define my problem in situations like this and see if the right tool I'm interested in is the right one for the problem.
Well the next question is: can the shared assemblies be deployed on their own, and then can the tools be updated on their own critical path, or do we need to force the upgrade through every tool when we change the underlying assemblies? If the shared assemblies can be treated as their own service, independent of the clients, then the GAC is a good choice. Otherwise, NuGet may be a better option. 
My experience with using the GAC was terrible, albeit short. I ran into so many problems that had no explanation which usually led to me removing dlls from the GAC and putting them (the exact same one) back in, which would fix the issues. It never made sense to me why that fixed it, but the moral of the story is: dealing with the GAC is more trouble than the benefit of doing so is worth.
I'm a bit confused. Both the top comment and yours make reference to this being a web app, but I don't see anything where OP says that. Actually, reading the post and comment from OP I'm almost entirely certain this isn't a web app. The reason I'm making this point is because MS' reasoning for not using the GAC in ASP.Net 5/.Net Core is its cross-platform nature. In their products MS is still relying very heavily on the GAC. That's not to say I think OP should use the GAC if they don't need too, just that I don't think ASP.Net 5 is at all relivant to making that call.
Nuget will make it easier, but it won't solve the problem with referencing resource X while your system has 2 or more versions of it which reference a 3rd resource where you also have 2 or more versions of. One of the main issues we'll see is what we already see today is with Json.net, where libraries reference json.net vX.Y and the webapi references vX.Z, or you reference 2 libraries which both reference json.net but different versions. The GAC is in many cases perfectly fine, however it fails when you have locally an assembly of version X.Y and in the gac there's the same assembly with the same version X.Y but with a different file version (which is common, as strong naming made it hard to flexibly version your library if all you did was fix a bug) -&gt; fusion always loads the gac version, even if there's a dll locally. 
&gt; Also, notice how quickly NuGet was absorbed into the Microsoft stack. Your shared projects should be built as nuget packages, and you reference those packages. It's much better than the GAC, even Microsoft knows. Don't confuse the quick rise of nuget with its way to solve a big problem: there is a political 'war' going on within MS regarding strong naming of assemblies and what the CLR should do. The web people obviously want nuget to be the center of the universe to solve that, but it's not always the best choice: e.g. control vendors don't distribute through nuget as they ship additional resources besides dlls (like examples, docs) and nuget completely ignores these. The web people make a lot of noise but not everyone writes web applications and they're currently rather silent in this whole debate but not everyone agrees with what the web people think is 'the best thing' as the web people obviously want things to work great for asp.net but have little eye for the rest of the world. 
Having been through this before, all I can say is DON'T DO IT. You end up with everyone having different versions of shared DLLs on their local dev machines, nobody remembers all the DLLs you need to make it work and it's a pain in the ass. My suggestion is that you have a shared project that contains the actual code and just include that project in your solution and reference it so that when you build you get the most recent shared code with no confusion. I've seen 2 companies do this completely wrong and make life really difficult for everyone for no good reason. You go down the gac path against half the developers' wishes and you might lose a few. I don't hang around long when nobody listens to my concerns or ideas. The other way I've seen a company mess this up was to create a project which was really a folder of shared DLLs and then that was referenced in the SLN. It didn't really work though. The best way to decouple from referencing the actual shared source code is to create a lib folder within your project directory but outside where your source code files are. That lib older will contain every DLL you reference and can be deployed anywhere without screwing up references or dependencies.
There is a blanket answer. Don't do it, especially for a line of business app. There's only one valid reason I can think of for needing to install into the GAC and that is to overcome loading a DLL that requires full trust from a medium trust app. And I haven't seen that problem in years (I think the old AjaxToolKit had that problem). 
Thanks. I looked at it and that may even be too complex for the types of things I'm building. But the main question that it brings up to me is how do I layer an application? I don't quite yet understand how you would even design an application in layers. I understand MVC layers, because they're basically forced on you, through the way the MVC libraries are structured. But outside of that, how do you start with a clean slate and write your own code in a layered manner? I get that it somehow involves interfaces, but I don't fully understand how to get from point A to point B. Can you recommend something to help me understand this better?
http://ripgac.net/
Just do it like UNIX did it, and everything will be fine! No registry, no GAC... just keep your files in your app's folder, and you are done. That's it, Microsoft! Geez looeez.
No GAC. I've been doing LOB apps for over a decade in C#. Only problems I've had with assemblies when deploying apps is when the GAC gets involved. 
Ok, how about continuous deployment then? Not depending on system configurations greatly simplifies things.
Not entirely sure, but this may have something to do with the version of DirectX. A Win7 bare install will have DX11, but Managed DirectX was a wrapper around version 9 IIRC. Installing the Managed SDK probably installed DX9 on your machine. You should be able to run DXDiag to see what you have. 
Like I said, I wasn't advocating for or against OP using the GAC. In all honesty, they haven't said nearly enough for me to feel comfortable offering any advice. I was just saying that assuming it's a web app *and* basing a recommendation on what MS is doing with ASP.Net doesn't seem relevant. &gt;Ok, how about continuous deployment then? I donno, I have no idea if OP's software model is that would lend itself continuous deployment. 
We're trying to figure this out in my team too. When I joined, everything was in Classic ASP. They would put the common files that EVERY project uses, such as dealing with security, encryption, databases, etc into a common shared folder, and then they could reference those shared files from any project. They would just point at the folder they were in. Then, when a project moves from development to test to production, they only change certain files. The project is hard coded to that file path, so if each server has different files in that path, it will automatically point to the appropriate database, grab the encrypted database connection strings, and use the appropriate security mechanism for that environment. So far, GAC has been the best thing we've been able to find in order to accomplish the same thing in .Net. But, I do have to admit that the GAC sucks. Is there a way to set up a folder of DLL's on a server, and point your project to it, then have that folder be different for dev, test, and production? I'm dying to find a better way.
Thanks, I'll check. What confuses me, is that DX is supposed to have all the previous versions included too? Though it appears not, from what I've read on line! Yet I remember reading somewhere DX9 had 8, 7, 6, 5, 4, and 3 included too. Hm.... likely story. 
The GAC is a giant pain in the ass I wish it didn't exist.
I could be wrong, but I don't think it includes the previous versions, but compatibility / mapping to previous version calls. I know that there are some DX 9.0c builds that require 9.0c, and not 10 or 11. I'd try running the DX 9 web installer on a target machine, and see if that helps (just as a test). http://www.microsoft.com/en-us/download/details.aspx?id=35 
And yet it's not the only scenario. Correct me if I'm wrong, but isn't remoting another area in which the GAC can be advantageous? It's rather odd that we are here trying to make a distinction between 'Always' and 'Most of the time'. I would expect fellow developers to be aware of the dangers of the conflation of these two concepts. I've never denied that 'Most of the time' there is no reason to install to the GAC. I just offered the advice of 'ask yourself what problem will the GAC solve'. What you are really saying is that in your anecdotal evidence the GAC should always be avoided. Yet your experience, as well as mine, fail to cover the full range of scenarios encountered in the world of .Net development.
&gt; I'm not sure I understand your comment about GAC DLLs being loaded before local as local has priority. No, this is not the case. In order, it goes: * Check if DLL is loaded in memory * Check if DLL is in GAC * Check if DLL is local You might be confusing it with how non-.net DLL's are loaded. 
&gt; Microsoft itself says that unless you need the characteristics of the gac, it's best to deploy dlls outside the gac. Do you have a link/resource that states this? Anything I've read on MSDN or similar says the opposite.
It's going to be a versioning issue for sure. Have you ever noticed how some games will install Direct X during their own install even though you already have Direct X on your system? Well you don't have the exact same version that game was built against so it doesn't work. When you call into a non managed dll, you're making a call to execute code a specific address. If that address is off by a single byte, you could start executing the wrong code or possibly even stuff that isn't code at all. Fortunately the OS does some some sanity checking to make sure you don't do that. Unfortunately if you don't have the specific dll it's looking for, version number included, the call will fail. I wish I could offer some advice on how to deploy your project, but sadly, I'm lacking in that knowledge. I'm sure it's a problem people have figured out though. Taking a cue from how normal DirectX applications behave, you probably need to include the installer for Managed DirectX and fire that off from your own installer if you determine it's needed. The Managed DirectX installer probably knows how to deal with the non-managed DirectX dependencies.
&gt; nuget completely ignores these. You can stuff any file into a nuget repository, just like TFS.
&gt; ASP.NET WebForms intra/extranet systems that only work in IE8 with compatibility mode switched on. So the GAC will be disabled if IE8 compatibility mode [aka Enterprise Mode] isn't enabled? Odd that .NET has a dependency on IE.
If you're open to using other libraries, then [SharpDx](http://sharpdx.org/) is a SlimDX-like wrapper for DirectX that doesn't require a separate install. You can just bundle the DLLs with your application.
And conversely don't confuse nuget with strong naming. nuget can quite happily contain strong named and authenticode signed dlls.
rm249 linked one very good post. I have this one saved in my evernote in case it ever goes away for some reason. However, a bit of advice on using IoC frameworks like Ninject. There is nothing wrong with these frameworks, they work very well. But not every application requires a IoC framework to achieve IoC. Further more, not every application requires IoC to achieve a good design. This is not a slam against IoC, just don't be afraid to NOT use something if you truly do not need it.
I would not get caught up on the notion of "layers". Layers were simply meant to be a way to logically separate fundamental operations and structures into like minded areas. As an example, Your Controller (C) can talk to a "business layer" or even a "micro service". I have seen applications that have a functional N-Tier (or multi layer, minus the presentation layer) , architecture behind Controllers in an MVC application. This is not a bad approach if you can easily and efficiently manage the complexity. For myself, I like to keep the Controllers as lean as possible. They do very little other then handle HTTP operations, make the appropriate requests to "domain logic" libraries, and return responses. The exceptions are things like authentication, some logging, and common aspects needed. I tend to keep domain logic (or business logic) , in contained libraries with classes that actually do the work. The Controller sends strongly typed request classes to the domain logic classes, that return strongly typed responses. This makes unit testing your domain logic rather simple. I tend to be a minimalist too, so this is a unique view point on a complex (but fun) subject. 
&gt; for development is not the same as my process for deployment. Then you have options that do not involve "migrations" ? How do independently change the state of the DDL without changing the state of the application? ( when using migrations ) edit: for context 
Yeah, its the number 1 ETL solution in the market right now. Even for Oracle projects. 
Why is strong naming a problem? We already strong name our libraries, have I missed something with that? 
NuGet helps you package the libraries. You build them into a package, and the individual Solutions that need the assemblies can pull them down from your private repo, which allows each project to control their upgrade path to new versions of the libraries, with each Solution using a private assembly of the shared libraries. Far easier than working with the GAC.
I'm sorry, but I am still confused as to how nuget helps in this regard. The problem isn't building solutions, it's deploying them - to customers, using an installer. Unless I've overlooked something, when the solution is built you'll get your output and any reference dll files you need - whether that's from nuget or just a file reference or what. When deploying it, you can deploy those (or some of those) references locally or to the GAC. That's the question I'm asking. 
It's a reference to the sort of crappy old legacy systems that would be the only ones left using GAC.
&gt; Here's the question you need to ask: are you deploying multiple applications to the same instances, all of which depend on the same underlying DLLs? Why not just publish the DLLs separately in each application?
That is a horrible system. If you have common libraries then share them, either copy them locally to each project or run your own nuget repository. It sounds like your problem stems more from configuration though?
&gt; Unless I've overlooked something, when the solution is built you'll get your output and any reference dll files you need - whether that's from nuget or just a file reference or what. When deploying it, you can deploy those (or some of those) references locally or to the GAC. My point is that it helps the developers keep their applications up to date with the latest assembly version. I'm a little further back in the chain, because I didn't quite have the picture of your deployments that I do now. Here's the thing: if you use the GAC, you're going to have to do administration to make your app use the correct assembly version, right? If you do private assemblies, you can drop the new versions in the app's install directory and voila- the app picks up the changes. That's good- if the changes are compatible with the existing version of the application. Obviously, it's bad if those changes aren't. Based on your deployment, I'd say just use private assemblies.
I think their whole mentality is if they update the common libraries, they would like to be able to do it once and it updates every application. I'm not a fan of it, but you know how it goes. "I just work there." I am working with a guy in his 40's who has been there for about 25 years. There's no arguing with him. Another guy has been there for about 12 years, and one for maybe 8-10 or so. I've been there for a year and a half. They all have degrees, I am self taught and never went to college. So I really don't have a lot of clout in the grand scheme of things. So I have to kind of make things happen in a way that they feel is in line with their methodology. Nuget might work. I guess it's all about laziness. (LOL)
So each layer should be a separate project? Or should I even break it down to multiple projects per layer? I guess I need to better understand the concept of services and domains. Coming from an IT background, I can see this getting confusing real quick, considering "domain" already means something to me. I can definitely see the benefit of some of this, as a lot of my controllers are already getting massively bloated. I also want to start messing more with Angular. I can see that simplifying the controllers a bit, as you can then make every controller just return JSON and partial views, and leave it up to some sort of a layout file and Angular to glue it all together into one page. With a basic MVC structure, you construct the entire page (that could consist of multiple pieces of data) from within one controller. So things get messy very quickly, and you find yourself building a lot of view models just to be able to piece it all together for the view.
Fair enough, some places are like that and you will never be able to make a positive change. &gt;I think their whole mentality is if they update the common libraries, they would like to be able to do it once and it updates every application. It's pretty horrible, it forces every application into the same lifecycle and essentially prevents the library from being updated.
Yea, I'm going to need to see a reference on that to believe it.
&gt; e.g. control vendors don't distribute through nuget as they ship additional resources besides dlls That's not entirely true. I have seen control vendors distribute the DLLs via NuGet. You get trial versions and updates that way, but you still need to download the license (and optionally demo code) from their website. 
&gt; Here's the question you need to ask: are you deploying multiple applications to the same instances, all of which depend on the same underlying DLLs? Yes. And try as I may, the GAC didn't make that any easier.
Yea, that one confuses me as well. I like my private NuGet server, but it has nothing to do with my deployment.
Yeah! Why does it need a user installer *again*...... ?
I will, thanks!
I see. I read last night as I continued to learn about it, that D3DX extensions have tens of versions! Probably in the hundreds by now... o_O I'll have to find out what version my wrapper's using! Is there a way in code I can find out what DLL's are loaded?
I'll try it over the weekend. I read that there's a user-side installer for SlimDX, I wonder what that's about!?
They all have DX11, the ones that work, and the ones that don't. Your other comment would explain that...
I will do, thanks!
Installing the DX9 runtime appears to be the way to go. Thanks. hdsrob said similar... Aw, I wanted to get it all packaged into a single .scr file.... doh!
In my opinion you're having the wrong debate. It shouldn't be GAC or not, instead it should be what applications can we move over to web based. It's a bitch to do, but entirely worth it.
Story time!
I don't know what wrapper you're using, but I'd have thought it would tell you. If it came as part of a DirectX SDK then you'll just need the matching end user runtime installer. IIRC, you can also just install the latest DirectX9 runtime and/or the latest DirectX11 runtime. What I mean is, DirectX1-9 and DirectX10-11 are essentially two completely different things with the same name and a similar purpose. Perhaps a similar comparison would be .net 1-3.5 and .net4.0+, they exist side-by-side and require their own runtimes to be installed. Figure out if you're targeting 9 or 10/11 and install the latest runtime for that.
Sure thing: http://msdn.microsoft.com/en-us/library/yx7xezcf(v=vs.110).aspx
Yes, that's the same question as the post is linking to.
So, it sounds like the OP on SO is basically asking about how to do hot swapping of assemblies on .Net CORE. I thought this was something that could be achieved using IoC containers? Quite apart from this, is the issue not a deeper architectural problem that could be fixed by a different decoupled SOA approach? 
Performance tuning memory allocation in Visual Basic for managed DirectX? Did this drop through a wormhole from an alternative dimension or did I just wake up from a coma?
Will do that and I will make sure to take business writing course but I don't think my current CV is good enough, do you have any advice on what to focus on ?
Number 1 thing: Your English has to almost be better than a native born. The reason I say that is that it's difficult enough for end users to describe things to native speakers, let alone someone who doesn't have a firm grasp of the language. Most end users resort to metaphor, simile and colloquialisms/slang to describe things that they don't quite understand. Also, if you are doing application development and dealing directly with clients, the amount of linguistic gymnastics required to create a coherent thought (let alone working application) is vastly under appreciated. You already have an idea on how to code ... and that is a fairly linear learning path ... the hard part is dealing with the people.
Sign up for GitHub, find a C# project, figure out how to get a code contribution accepted. Include the github on your resume. I know at least for me this is a heavy positive when reviewing candidates. The more code I can see and contributions you have successfully made, the better.
I can listen and read English perfectly fine and my conversation skill is better than my writing. I was planning to take English business writing course and I'm going to work to earn my TOEFL, but in my technical skills what things should I focus on more ?
I already settled with C#, but there something I want to ask, can I simply work in my own project share it on github or my portfolio site instead to work on open source project ? because I don't when, how and where should I work on open source project.
Damn, I always find open source projects so intimidating, I don't know if I'm good enough to work on one or how to find a suitable open source project to work on or if my contribution to the project would be accepted or not, do they want additional features or fix bugs or how even start on a open source project.
True enough. I'm trying to trim down the code to a manageable example and I'll edit the post. Thanks for the reply and sorry, I should have waited till I had a good example to post.
Sure, but the problem is (especially with junior developers) that they think they are writing the best code. When you only work on your own projects it's hard to measure your competence level. If you work in a company you will find that seniors know a lot more than juniors, but if you are un- or self employed most people are, unfortunately, ignorant about their skill set.
Because it only has the core stuff. Use the full CLR if you want it. 
This is worth learning, for certain. Being able to submit a change to a project demonstrates two things: You have the technical skill to make the change, and it was accepted by the development community in project X. Second, it shows you have collaborative skills to work effectively in a team in someone else's structure. It's not like it is impossible to get a job without anything like that on your resume, but it is worth doing.
What do you ask?
OK, I get what you saying, I'm going to work on my code first before contributing on open source project.
fixed it. Just had to cast[UserId] in the WHERE statement as a varchar(max) (gotta specify size or else it wont fit) then changed parameter type to string
Was a joke, for some reason. It's kind of common for non native English speaking developers (mostly in India) to end emails with "do the needful" It's something really bizarre, that makes no sense, but it's rather common. If you did add that to your email, that's red flag number one that you don't have a grasp on the language. 
Replace the why in the title with a what, and it'll make more sense. So you're right, he does ask what.
Depends on what target platform you are deploying to, but usually the user installer is to ensure that the client has the exact version of DirectX assemblies you are using.
You don't need much hut it helps to work for cheaper than the Americans do. That's really the only reason companies sponsor visas for .net developers. 
Start with something small, but interesting to you. If it works out, great -- if not, ask what you could have done better, then try another. If you find one that fits you, put that on your CV. If nothing works out, hopefully you'll learn a bit about your weaknesses. 
The funny thing I put what in /r/cscareerquestions , I don't know how I missed up here.
Always the first step is the hardest and Just putting your code there is scary, anybody can read it and wonder WTF is that! but I guess I need to get over it and try my luck with any open source project.
Automated CRUD generation. Not CRUD itself. Sorry for the confusion.
&gt; I don't how I missed up here. Start by slowing down &amp; proofreading yourself. This is at least your second error (whether it be typographical or misunderstanding), not to mention numerous run-on sentences, in a thread where you've stated several times that you "read English perfectly fine" (so I would assume that you also think you can write it "perfectly fine.")
Yeah, handing code to a stranger does feel like walking into a room naked -- every flaw exposed. Also, look for mailing lists and forums. They can help with your code, and your english. They're also a great source for finding projects that need volunteers.
Nope, I admit my writing is shit, What I meant by reading English perfectly is that I read tons of books written in English (Novels, Technical books..etc) with 100% comprehension. I can watch both American and British shows (Peep Show is great go watch it) without subtitles perfectly fine too (expect for Australasians, I can only get 50% of what they say). 
You actually can do hotswapping without AppDomains or remoting - kind of. It's just not really a swap anymore, but loading Assemblies anonymously and carefully keeping track of which ones are old and which ones are new - so you can pick the right one to use as a Reflection basis for instantiating objects. I've done it. Makes you shiver when you think about it, but it works reasonable well for regular client applications.
No remoting, no AppDomains - that sounds reasonable so far. But does that also mean, no global UnhandledException and AssemblyResolve events? That would be quite unfortunate for certain use cases. Or have they just been moved somewhere else?
Personally, I think that's the wrong thing to do. Get contributing to a project sooner rather than later. You cannot successfully critique your own code - you *need* someone else to do it. The biggest mistake I see junior devs make is get isolationist and defensive about their code. If you write something and someone tells you it's bad - try your damndest not to take offense. Usually, it's not personal! Try to find out what you could have done better. Engage with your critics. If you just write code on your own, you'll never know if it's bad / okay / better than what your peers are writing.
Thanks for the detailed response, I'm still figuring out inversion of control , dependency injection and IoC and see which framework I use (probably Ninject) after that I'm going to Unit testing. I know javascript and Jquery but I never tried my hands on any of the frameworks and frankly I don't know which one is common, I know there big four Angular.js, Ember.js, knockout.js and Extjs.
So, you want a .NET job. Look in the midwest of the USA. We are always looking for new devs and .NET is hot in Kansas City.
The issue is not only business writing but grasp of colloquial English as a whole, which is why I agree you will need better English than the average native speaker. Not proper business English, but the much more complicated task of inferring how the incorrectly applied English of the user correctly applies to the software problem they are experiencing. Whether it is the end user, or a business manager, or a client, or even another crappy developer - they will abuse the English language to the point of near incomprehension and it's your job as the software developer to interpret whatever is said into coherent and achievable software development tasks. It's just my opinion, but I feel these means are best served by studying English poetry and conversation in informal English. Since there are a set of rules and you can follow them, "business English" is a lot easier to grasp than conversational English I would think. I would expect mastery of business style communications before I expected the level of expertise required to interpret the abstract language of users and coworkers. Your technical skills look fine to me.
Just don't base your manor on Super Hans...or Jez...or Mark for that matter ;-) 
What did you put into source control exactly? If it's just an SQL file, you'll need to execute it on whatever Database you're using at school.
Kinda late to this and haven't read every response but have you tried ODesk? Doing some projects through there you could build a nice portfolio and make $$ at the same time. I have a small business and have hired many great devs via ODesk over the years. One guy worked for me for many years on and off on projects. He ultimately got a fulltime job outside of ODesk. I was one of his references. I think he was in a similar situation as youself when he started.
Be cheap and find some recruiters.
Itextsharp I have played with it a bit and it's fairly easy to use
If you want to pick up colloquial english (and you should), I recommend /r/TalesFromTechSupport. It's got a weird geeky dialect, but it's a start.
Having very recently dealt with the same problem, I went with simply calling wkhtmltopdf from the command line. The main advantage of it is that it's free and it uses WebKit to render, so you don't have to worry much about the quality of the results. There are .NET wrappers, but they each had some issues; in the end calling the executable was simple and had the same level of performance. You can take a bit of extra time to invoke it with ProcessStartInfo and using stdin/stdout streams for the input/output instead of dealing with temporary files.
The only limitation at the moment is that it doesn't recognize the new project.json yet so if you are using it to try out aspnet 5, it will show a lot of errors. 
Can you show us the attempts you've made to add concurrency which aren't working?
Split the migration process to another step. Separate it out from the application itself. I don't use EntityFramework so I don't know about its external migration scenario. We are using FluentMigrator and we run the migration script separately in deployment process.
Django seems to be more of a CMS than a web app framework, is this correct? You might want to check out umbraco instead.
Not all western countries are the same. And even within a country not all work places are the same.
Whenever I need to generate PDF's from ASP.NET (which I presume you are using) I always survey the state of the art of solid, free solutions to this, and each time I end up going back to the same solution of using SQL Server Reporting client libraries (Microsoft.ReportViewer.WebForms). It's a bit of a pain to set up in ASP.NET and especially MVC, but very easy to modify report layouts using the report designer and it's quite efficient. Basically you set up a separate class lib project that references Microsoft.ReportViewer.Common and Microsoft.ReportViewer.WebForms, and in which you design your .RDLC client-side reports. To actually render those reports, the .rdlc files need to be copied into your web project. Shout if you need some sample code or further pointers.
Are you going to be coding verbally? Sending emails? No buddy take it from a non-native speaker - your writing skills need to improve sharply. You need to go on English forums and write, write, write. Never apologize for your English and let them insult your linguistic skills until it's refined. When they stop beating you up over grammar - you're done.
You might want to re-read what he's actually asking about.
Yes loading raw assemblies with reflection this way can be risky: like stepping off a ledge hoping someone builds a bridge under your foot. I think the AppDomain technique means you have more of a broadcast/messaging approach. I would be interested in someone's view of how to better achieve this with a DI framework. Also, how would you go about hot swapping a new version of the executing assembly? Same principle?
I actually never switch the executing assembly, but you can achieve the same functionality by moving all relevant code to plugins. It's more or less an architectural question.
It does, but you're probably right that I'm most likely using it incorrectly. As I couldn't find a good example that did what I wanted. Private Sub Generate() ' Do Stuff Dim p As New GenerateParameters(grammar, CInt(txtRepeat.Text), If(pnlMaxLength.Visibility = Windows.Visibility.Visible, CInt(txtMaxLength.Text), Int32.MaxValue), GetParameters()) CurrentWebResults.DocumentText = GenerateAsync(p).Result End Sub Private Async Function GenerateAsync(ByVal p As GenerateParameters) As Tasks.Task(Of String) Await Tasks.Task(Of String).Run(Function() p.Result) End Function This seems like it won't work asynchronously because it has to populate the CurrentWebResults.DocumentText. 
Visual studio has a publish function. This publish function allows you to build a "deployable". This deployable can the be uploaded using ftp to your web server. Alternatively the publish wizard can do this for you. [Article on publishing to IIS 8](http://www.orcsweb.com/blog/gabe/how-to-use-web-deploy-visual-studio-to-importexport-iis8-sites/) Take a look and let me know if you have questions.
You still need to await the `GenerateAsync` method. I don't use VB so bear with me. Private Async Sub Button_Click(sender As Object, e As RoutedEventArgs) StatusText = "Computing..." StatusText = Await LongRunningTask() End Sub Private Async Function LongRunningTask() As Task(Of String) Await Task(Of String).Delay(10000) Return "Complete!" End Function The difference seems to lie in that my code awaits the awaitable version of your `GenerateAsync()`. Seems to work fine for me. Here's the rest of the vb. http://pastebin.com/82SddRxH
I would ask someone in your company what the procedure is... you don't want to go mucking about (and should not be able too anyway!) with production servers blindly.
Django is a web app framework.
I'm still having the same problem with the following: Public ReadOnly Property CurrentWebResults As System.Windows.Forms.WebBrowser Get If tabResults Is Nothing OrElse tabResults.SelectedItem Is Nothing Then Return Nothing Dim tab As CloseableTab = DirectCast(tabResults.SelectedItem, CloseableTab) Dim wfh As WindowsFormsHost = DirectCast(tab.Content, WindowsFormsHost) Dim web As System.Windows.Forms.WebBrowser = DirectCast(wfh.Child, System.Windows.Forms.WebBrowser) Return web End Get End Property Private Async Sub Generate() If lstGenerators.SelectedItem IsNot Nothing Then prgResults.Maximum = CInt(txtRepeat.Text) prgResults.Value = 0 prgResults.Visibility = Windows.Visibility.Visible Dim path As String = DirectCast(lstGenerators.SelectedItem, Category.CategoryItem).Path Dim grammar As BaseGrammar = BaseGrammar.Deserialize(path) AddHandler grammar.ProgressUpdate, AddressOf ProgressUpdate If Not grammar.OddResultColorSpecified AndAlso TryFindResource(RESULTS_ODD_BACKGROUND_KEY) IsNot Nothing Then grammar.OddResultColor = DirectCast(FindResource(RESULTS_ODD_BACKGROUND_KEY), Color) If Not grammar.EvenResultColorSpecified AndAlso TryFindResource(RESULTS_EVEN_BACKGROUND_KEY) IsNot Nothing Then grammar.EvenResultColor = DirectCast(FindResource(RESULTS_EVEN_BACKGROUND_KEY), Color) If Not grammar.DividerColorSpecified AndAlso TryFindResource(RESULTS_DIVIDER_COLOR_KEY) IsNot Nothing Then grammar.DividerColor = DirectCast(FindResource(RESULTS_DIVIDER_COLOR_KEY), Color) If Not grammar.ResultFontSpecified Then grammar.ResultFont = My.Settings.DefaultResultFont 'CurrentWebResults.DocumentText = grammar.GenerateNames(CInt(txtRepeat.Text), ' If(pnlMaxLength.Visibility = Windows.Visibility.Visible, CInt(txtMaxLength.Text), Int32.MaxValue), ' GetParameters()) Dim p As New GenerateParameters(grammar, CInt(txtRepeat.Text), If(pnlMaxLength.Visibility = Windows.Visibility.Visible, CInt(txtMaxLength.Text), Int32.MaxValue), GetParameters()) Dim html As String = Await GenerateAsync(p) CurrentWebResults.DocumentText = html DirectCast(tabResults.SelectedItem, CloseableTab).Title = grammar.Name DirectCast(tabResults.SelectedItem, CloseableTab).ToolTip = grammar.Name End If End Sub Private Async Function GenerateAsync(ByVal p As GenerateParameters) As Tasks.Task(Of String) Return Await Tasks.Task(Of String).Run(Function() Dispatcher.Invoke(Function() p.Result)) End Function
Or he literally checked in the database. It isn't unusual to do that with Access, SQLite, or other in process databases.
I'm still unable to get it to work. I'm at a point of frustration and have decided to put getting the multithreading working at a later date. I'm pretty sure that the problem is that my architecture is not designed properly to handle it at the moment. Thank you for your help.
Sorry I am not of more help. When I look at vb, it's like I've gone cross-eyed. The paste that I linked earlier is a working example, have you tried to at least recreate that on a basic level? Then you can start adding the complexity of your project.
You are fairly junior right now, so you want to keep doing stuff in order not to have too big a gap in your career. One of the things that people appreciate is that you keep busy and keep developing yourself. Work on open source projects for example. Set up your own site that fixes something that annoys you in your daily life etc. The kind of pet projects. They improve your tech skill, they give you something to put on your resume and they could also land you gigs if the project is popular.
Thanks, I'm actually planning to do that, I have an idea of project in my mind but I need to learn more about SPA first, but I assure I'm working in my skills as developer everyday. 
I'm subscriber and regular reader for the sub, I guess is about time I share story there.
Thanks and I totally get what you mean. I understand informal English just fine from watching T.V shows and reading posts in forums, I guess I will start in posting more in English forums, listen to the feedback and then later try my luck talking in skype with native speaker.
Surprisingly googling ASP.net mailing lists resulted on pages of sending E-mails tutorial in ASP.net. Do mind sharing what mailing list you subscribed too?
It's been a few years since I did any programming. Not sure about mailing lists, but I know there are forums out there. Wish I could help more.
That's called PRG (post, redirect, get) pattern and is generally used to avoid unwanted side effects when the visitor hits refresh or F5... Also i experienced some issues when chaining several post requests because some mvc helpers try to do some caching of the values...
The issue with this is that the controller is in a different area and therefore in a different namespace. The client has a requirement that all areas must act independently, so I can't put a using statement to have access to call the other controller. I have to assume that both controllers won't always be housed on the same server. 
If you want to focus on web based, then you want ASP.NET, and specifically ASP.NET MVC. I'd start at http://asp.net Select the Learn button at the top of the page, and go through the MVC tutorials. They'll get you through getting the IDE, and getting it up and running. 
Not everyone uses git. And it isn't like we can avoid checking in other binary formats such as art assets.
Due respect. These days programmers are so one sided, they can't really document their own work effectively. IF you want to really wow someone on an interview, show them specs and documentation for your project. 
That's pretty much it. When you start a new project in VS you can select a language, but the project type that you select will create all of the bindings to the appropriate libraries. 
PRG is a pretty tried and true pattern for web form posts. What's happening that makes a 302 so bad? This should be considered an unnecessary optimization unless something else in your pipeline is slowing down requests.
there's no other way to store art assets.... db there is
O'right so I should pick ASP.NET as project type, and either language I prefer (c#, f#, vb.net)? Sorry I still can't get my head around this, ASP.NET is a framework then? 
Noted, ASP.NET is the way to go, but still, what is it hehe? a language or a framework?
ASP.NET is a framework which use C#, VB.NET and other languages.
upfront bonus most likely... all negotiable.
That's the spirit 
I've only got a little experience with this. One of our developers used WCF to accomplish something like this. But it might be better for you to create a basic web api. Service stack might be what your looking for. Again I'm still quite new so someone might have a better idea :)
* Start with http://www.asp.net/web-pages. * Pick up basic C# along the way * Learn how Razor template engine work * Learn bootstrap 3.0 and pick up CSS along the way * Learn how to query data out of a text file. * Then worry about connecting to the DB 
Having used WCF and WebAPI 2 with REST (ASP.NET MVC 5) both extensively I would recommend you going with WebAPI. Why? 1. The configuration hell of WCF is hardly ever worth it and it complicates things a lot * You are going to calling it from an iPhone? You probably do not want to consume it using full SOAP but use REST instead. Use a library that is aimed at it * You will find more support and more information on the internet regarding the building of WebAPI * WCF as a technology feels a little dead because REST and Swagger are becoming "the" technology. REST with WCF is a general pain in the butt. 
I actually did this about three years ago. Three years ago, Angular wasn't what it is today. To be honest, at this point I would skip MVC and just go straight to Web API 2 and AngularJS. You will still have to know a few of the MVC basics to get your angular app to load. But going straight to Web API makes your applications incredibly flexible. I would HIGHLY recommend buying a subscription to pluralsight.com. You will only need it for a month or two to go through some of the more basic videos (to answer your question like "What is ASP.NET?" below). Scott Allen in particular has some excellent Angular and .NET videos. You will probably also want to study up on Entity Framework. It is indeed a great time to be getting involved in the .NET community. Soon, .NET software will be able to run on any platform. M$ also is now just giving away Visual Studio (IMO hands down the best IDE) in its Community edition (even for commercial products!).
im an intern but working in a department with no other programmers. I talk weekly to one of the IT managers, who is my IT consultant for the assignment. He now knows that I have never deployed before so he showed me how to set up a test server on my machine and when I deploy to that he'll deploy to the production server. I can always ask him questions along the way but I want to figure as much out by myself before asking.
Good, that's a way better picture than I was imagining. I was envisioning you sitting next to 10 qualified programmers and you not talking to them. Instead trying to 'prove your worth' by not asking questions and just getting stuff done. We get guys like that. I always prefer the ones that ask questions. Collaboration is very important, especially early on.
&gt; With WebAPI, I need the data to be transmitted fast Web API 2 is fast, but writing poorly designed code is going to slow it done; just like any other library or framework. I'm working on an N-tier app right that pushes around millions of objects a day and cubes all the data; all built on Web API 2.
Find a fellow Developer or find a SysAdmin.
It would be hosted where you C# code is, if that's what you mean by locally. It will be roughly the same speed as accessing it over TCP socket as long as you don't need to make thousands of requests a second. You trade a little bit of overhead for an easier to work with way of connecting.
I totally agree with you, I'm not very on the loop on MS/dotnet things, but I heard that news. A coworker who does PHP but also is very fond of dotnet told me, he was very excited. What was your background before switching? how hard/easy was the change of ecosystem, practices, mindset was for you?
Thank's again, that sounds really good, looking forward for it. What would be a good place to keep track of that merge? Is this about it http://blogs.msdn.com/b/dotnet/archive/2014/12/04/introducing-net-core.aspx ?
Thank you
I think we collectively traveled to 15 years ago where screensavers were actually relevant to prevent burn in on the CRT but on the way bumped into 3d rendering at 800fps so you can kick the CPU and GPU to high gear since electricity and HVAC bills are too damn low in some places. As to the question which I'll have to guess what it was, one of the articles specifically details "The Solution" for slimdx which is apparently used in every slimdx example for the loop. 
Thanks.
That may work, there might even be a way to pass a string and route calls to other controllers through a shared function that just contains a switch statement. I'll look into this, thanks for the ideas
So I used to have a job that primarily dealt with PHP and am now a .NET Developer. Here are a few things that will happen. 1. You will realize C# is so much more convenient than PHP in almost every aspect 2. You will spend hours writing elegant code, step back from your work with pride, run to show someone the cleverness that hatched from your mind and made its way on to a computer screen and just as you think, I'm finally starting to get this, your friend will say "That's actually really good, but you do realize that .NET has a library that handles all of that, right?" 3. You will start doing all of your development in visual studio, because the tools are amazing, there are plugins for PHP, Python and Ruby. These are the topics you should hit: 1. MVC 2. Entity Framework 3. SignalR 4. WebAPI 5. AngularJS Also you can see if there are any .NET user groups in your area. The .NET community is great, the people you meet at the groups would have tons of information on how you can get started.
Its just one of those "Nice to have" things, its not necessary. We just have to assume that on this project some users may be accessing this application through a mobile device in locations with very limited or spotty coverage, for example the hull of a cargo ship.
This is a great idea. I will research more into this. Thanks!
Keep it coming!
I was a PHP developer for about 4 years prior. It really isn't hard to switch if you followed good design patterns in PHP. I find that generally, the open source code is better written in the .NET ecosystem, and most of your tool chain will have equivalents, e.g. package manager for .NET is NuGet, etc.
Then you should put more on the client side, e.g. Local store with sync as soon as connectivity is back
after install xamarin to vs 2015 preview, i can't debug android app without xamarin account login. it's really troublesome.
I've use EvoPDF with web fonts and all that and it works great.
Nice product!
I (Jonas Hovgaard) and my co-founder Mark Kordon made it. It's released under our company 8seven. I'll make sure to make that visible on the frontpage. Servant is still in it's very very early phase, sorry for that. Regarding missing information about the product, we will review our landing page again. Thanks for your feedback :-)
I prefer to Java EE on Linux.
How much? I don't see a price on your site, I'm on mobile if that helps. Or is this a free beta?
&gt; Entityframework AWESOME data access.
What do you mean by stop? We can still develop in Forms &amp; MFC if we want to. Silverlight was dead, so was flash. There was no point spending efforts on that. XNA didn't get any upgrades because lot of indie-friendly engines out there. You can still use the last version of XNA with DirectX-9 (Yes it was a cool framework, I agree, I loved it) EntityFx is way way better than ADO in terms of usability (it just has a couple of short comings imo) I've developed in QT, Forms, MFC, ATL, Droid &amp; Adobe Flex. WPF is way awesome than those. But it has few issues like Air-space and binding hell (like JS callback hell). The only other architecture I'm currently in love with is FB's ReactJs (Flux) Google, MS and their likes come up with a lot of things every year, and many things fail. There's no need to bash them. As long as they are trying out new things, innovation will keep happening. 
Even I installed Elementary Linux, NodeJS and started trying out. I recommend trying out Webstorm if you start to miss VS :P 
Hi, Great question :-) You are right, it's a free beta. We will introduce subscriptions (with a free edition) when the product is mature enough. The free edition will contain mostly of the features available today.
By stop i meant that the development was stopped and that the technology is in maintenance mode. If you look at some 3rd-party offers you can see that they keep improving their controls ([for instance devepres has added touch enabled controls](https://www.devexpress.com/Products/NET/Controls/Touch.xml)). If you started a windows forms project and want to keep improving it you better go with a 3rd party control. Regarding the innovative things that fail. I would argue that i hope and expect from a big company that they create technology that is well thought out and they plan to support and even improve for years to come. To tell clients "sorry we recommended silverlight and you put your money into it" and sell them to another technology is just not good for business. On top learning new things every other year is not for everyone. I do not want to say that they should stop innovating but please make it clear that this technology might be put in maintenance mode or even will be abandoned if it does not spread and work out as hoped. 
I said .NET doesn't have anything - Python is similar although its generators are a lot simpler and you have to do more work yourself with the views and controllers.
And very much actively worked on with a complete rewrite in the works. Edit: I do agree WPF was a bit of a letdown. Great tech, not enough progress but the new roadmap looks promising.
A demo of what your product can do would be nice.
I see, thank you!
I'm getting old and falling behind. Next year I'm learning XNA! (What's replaced that now, with the XBone 1 coming out?)
&gt; Entityframework (only glimpsed at it but it seems quite confusing and unsteady) It's hilarious that you bring something as an argument, but in the same line you say that you have no clue about it.
I see, thanks! I've discovered making an "on top" window to the dimensions of the virtual screen that covers all monitors is much easier than creating a render head for each monitor.
They are in for business dude. I feel your pain. It's not a company run by devs for devs, say like JetBrains. Good thing about Google is if they abandon, then community can pick it up &gt;&gt;if&lt;&lt; they want to. I guess MS is going that route now.
It says so right in there. .Net Core is the future and .Net Native is the future for desktop apps, and ASP.NET 5 onwards for web apps (for however long the future is in MS' outlook). WPF is legacy (which desktop app is not C++ and which smartphone/tablet app is not a Windows Store one?)
Tikuf was a bit harsh but yeah, I want to see those screenshots nice and big and a general description (or better a video explaining what it does).
Unless you want to do anything other than reading data from a table. If what you're doing is non trivial you're going to spend more time fighting entity framework than if you had just written the stored procedures and use enterprises framework.
Typically we do stored procs and linq against EF and it's really simple. I disagree with your assessment about fighting EF. The 1 problem I've ever really ran into once I learned wtf I was doing is bulk insert, but it was pretty simple to write an extension. 
Microsoft is rewriting it (again) because it is too confusing even for them.
Less awful isn't the same as good.
Not because it's too confusing, but because it didn't match the new requirements anymore. The interfaces will stay the same (`DbContext`, `DbSet`, etc).
Pluralsight is your friend
Could you elaborate? You shouldn't have to do anything special to use full text search.
Entity Framework doesn't support queries against FTS indexes, period. Oh sure, you could write a stored proc or TVF and put the FTS based where clause inside it. But if you do that you lose the ability to dynamically create queries, which is the only reason for using EF for reads in the first place.
Surprisingly it's this page: http://www.asp.net/mvc
We tried it out briefly, looked for documentation and tutorials beyond simple use cases and were unsatisfied, run into trouble with using a composite primary key, searched for opinions and [troubles](http://stackoverflow.com/questions/tagged/entity-framework?sort=votes&amp;pageSize=50) others were having and decided that it was not for us. After that i followed very briefly the changes from EF-3 to EF-5 but without diving deep into it. You could argue that i should have give them a chance again and again - and you might be correct - but they already lost me. Off topic: On a side note a colleague who works on bigger projects than me told me that in his experience many devs using hibernate or other orms tend to not think about the underlying sql and the amount of roundtrips they create. This added to my belief that not pursuing EF was no loss.
&gt; and .Net Native is the future for desktop apps Where does what say that? WPF isn't legacy, it has a renewed roadmap. 
This is the one of the best resources I used to teach myself MVC and asp.net. Cannot recommend enough.
everything's possible :) But to obtain the string value you have to join with the lookup table in the DB, so you that's inevitable to obtain the string. If you don't want that, you can define an enum with the same values as the lookup table and map that to the FK field, in such a way that the enum int values are equal to the pk values of the lookup table values and decorate the enum values with Description attributes with the string values of the lookup table rows. of course this is brittle and not really maintainable unless you keep the enum in sync with the lookup table. 
In my experience iTextSharp is extremely low level. It's a huge time-sink. Are you sure you really want to essentially implement a manual layout engine yourself? The project I'm currently on already has iTextSharp deeply ingrained, but for the next project, I'd pick something else - perhaps [wkhtmltopdf](http://wkhtmltopdf.org/) or [PrinceXML](http://www.princexml.com/).
I've used iTextSharp and the project I'm currently on uses it extensively. In retrospect, that was costly choice. It was simple to get going, but even slightly complicated layouts turn out to be very labour intensive; it's just not economical. If anything, I'd pick a real layouting engine - even TeX would have been better - and then only do what's impossible there in iTextsharp. After all, iTextSharp will happily open and alter existing pdfs.
I'm not sure if this is what you mean, but I would do one ofntwo things, depending on the situation. I might start with a [simple join like this]( http://stackoverflow.com/questions/37324/what-is-the-syntax-for-an-inner-join-in-linq-to-sql) then define/add the property and a constructor for the class that takes the value you want from the lookup and assigns that property to the added column after the main table properties are set. Alternatively, if the lookup changes rarely enough, I might load it into a cached in-memory dictionary and add a read-only properly that looks up the value you want when you `get` the value. 
The entities created are partial classes. You can add more properties that aren't a part of the navigation. public partial class MyEntity { string DisplayName { get { //size id is the FK, but no navigation properties included here switch(this.SizeID) { case 1: return "Small"; case 2: return "Medium"; case 3: return:"Large"; default: return null; } } } } 
MVC is fine, but I'd really recommend angular + REST services for new development; Assuming you have your choice of technologies.
The main reason its being rewritten is to get rid of supporting code for assumptions and requirements that were valid 8 years ago but not anymore, a leaner EF is in the works, EF 7 throws away Model First for example, it will be fully modular, portable and multiplatform (e.g. win-phone)
More to my original point: &gt; When Entity Framework began life, it’s charter was more to do with the Entity Data Model vision rather than being a best-of-breed O/RM. As a result, there are **many seldom used features and capabilities** in the code base that hamper performance and **complicate development**, but are not feasible to remove due to the monolithic nature of the implementation. We also have a number of **unintuitive behaviors that are engrained** into the framework and hard to change or remove for the same reasons.
More to my point: &gt; The upgrade to EF7 will require some changes to your code. http://blogs.msdn.com/b/adonet/archive/2014/05/19/ef7-new-platforms-new-data-stores.aspx
Based on what you wrote, you won't be happy with the newer versions of EF either. I am wrapping up a project that is using the latest production version and it still sucks for everything beyond the most basic of operations.
No, you didn't seem bellicose at all. 
Also * Setup a github account * Setup a test project * Implement it in ASP.NET MVC 5.2 + Web API 2 * Ask people to critic your code and suggest improvements
They are not rewriting it. They are doing extreme refactoring agile microservice TDD development methodology.
Thanks for your input. I totally agree with you. Screenshots and short videos is on it's way :-)
I thought this course was awesome. Comprehensive ASP.net MVC by Nelson LaQuet, https://bnc.lt/l/1uIve1E-9R *Tip - it goes on sale sometimes if it isnt already. Edit: The link goes to Udemy.com! Sorry. I should have said that sooner. 
We use OAUTH2 for our SSO solution, and pass the JWT tokens through to our back-end APIs for authentication, but with a custom authorisation layer to provide security and permissions etc. Works pretty well - we host our own SSO server based on the ThinkTecture open source server
[Here's a JWT implementation in Web API](http://markwalsh.io/development/2014/12/02/ASP.Net%20Web%20API%20with%20JWT/), you will need to customize it though. It meets my needs and is pretty simple. Plays well with OAuth etc.
It's impossible to say really unless someone lets it slip. With VS2015 just around the corner I'd doubt it, unless there are any major bugs. Although IIRC there was an update to 2012 a few months into the release(official) of 2013, so if this was the case I'd expect update 5 to come in around January/Early February based on the current rate of updates. Maybe they will release an update to work better with the upcoming features?
MEF is the way to go to make a really plug-and-play architecture. http://msdn.microsoft.com/en-us/library/dd460648(v=vs.110).aspx
A completely fair concern, but SPA JS/HTML 5 applications have a ton of advantages over MVC and other server side frameworks (Spring/Java). I think the advantages of JS MVC and SPA outweigh the (so far significant, but not overwhelming) changes to markup associated with Angular 2.0. Another note: If you disagree with me, please post and we can have a good discussion about it, downvoting due to disagreement doesn't add to the conversation.
Just curious, why is that important to you? :D
A butterfly becomes an extremely complex and interesting creature while procrastinating, let alone the thought of a VS2013 Update 5.
Get familiar with [Thinktecture's IdentityServer and IdentityManager](https://github.com/thinktecture). They seem to have a clue on this large topic.
Sorry wrong reference. It says so here - http://blogs.msdn.com/b/dotnet/archive/2014/12/04/introducing-net-core.aspx
We did not implement identity 2.0 and our authentication is a little more complex then User/PW so we implemented a security that is similiar to Amazons: http://docs.aws.amazon.com/AWSECommerceService/latest/DG/rest-signature.html It is basically uses HMAC encryption and a shared known key. I then overrode the [Authroize] attribute with my own implementation.
I don't think Update 5 would address chronically procrastinating butterflies
Maintenance mode is a form a maturity in the API that everyone longs for. It is not a disability or telling that an API is going to the trashbin. It isn't evolve or die always. WPF in particular.
I think I will take advantage of the free trial, thanks for the suggestion.
Yeah I figured I should start with that tutorial. 
As you say web and mobile apps have plenty covering them with the likes of New Relic and company. With Azure you could cheaply get some Azure Table space, write a small library to gather the data and send it there for collection. That way you don't have to write a whole backend. Edit: Microsoft just bought [HockerApp](http://hockeyapp.net/apps/). It may just fit your needs and it supports desktop apps. 
Yeah, we could probably implement it easily enough ourselves but to be honest, we're willing to throw some money at a library or service that does it for us. It's sadly not high priority enough for us to implement. 
I totally understand. A couple of days worth of development, testing and setup usually ends up costing much more than a service you can throw a 10$ per month or something.
Yes, like YouTube clip where you present how your system works and what it's capable of.
I'd like to see a Visual Studio x64 someday soon. ^((and no more lame excuses Redmond)^)
Maybe just chronically constipated ones.
If your result sets aren't that big you should materialize the data (either on a timer or trigger from user or process). You may also want to queue your requests as well. Let people click for a report, have it put a work item in a queue, and crunch them a few at a time and mark available to the user later. You could render to whatever is convenient, but some sort of flat file on disk is an option (json, csv, pdf, etc). Or again, use a timer and have them refresh on their own every hour or whatever, and just display a "last updated on" date in your UI. As far as actually query optimization, that's hard to say without extensive meta data on your setup (table sizes, indexes, server, storage). You can start with looking at execution plans and such, probably the type of advice you already got on SO, but unless you get optimizations down to the "few seconds" level it isn't really your solution. 
They also just added a sample [MVC Authentication](https://github.com/thinktecture/Thinktecture.IdentityServer.v3.Samples), which demonstrates a workflow where you can log in with a simple MVC App and then make a call to an API which uses claims from your Oauth2 token to authorize API endpoints.
Those are all good points thank you. I'm a report writer first, developer second so I can get the data perfectly fine but I'm a little unsure of the best practices when it comes to .NET. Thanks Freonr2. I guess I could get a MAX(coalesce(created_datetime, updated_datetime)) from my dataset since that will only take a second to run, if it doesn't match the flat file, then begin the work to create a new flat file asynchronously. Let the Model do all the legwork in the background. Thank you, your ideas have helped me a lot. Much appreciated.
Are your projects really that big that it would make a difference?
And it seems like they're kind of moving away from it/ letting it die. It is not supported in Universal or WinRT for WP8.1 apps, which is annoying.
I'm late to this comment, but I suggest trying out something lighter on VirtualBox, like Linux Mint with XFCE. Ubuntu is a resource hog on VirtualBox and makes for an unusable experience if you don't allocate a significant amount of resources to it.
This is more of a SQL issue rather than .Net, so there is limited scope for reducing the query runtime via .Net. The issue is likely to be either lack of appropriate tables indexes, or overly complex queries. If you access the database via SQL Server Management Studio you can get it to advise what indexes it thinks are missing and can be added to speed up the query. Also SSMS has an 'Explain' option which will visually show you which parts of the query are the most 'expensive'. However both these options assume some familiarity with SQL &amp; SSMS.
Projects should never be that big. If they are, you are probably doing it wrong.
There may be some pre-existing caching mechanisms you can use. ASP.NET has extensive caching abilities, for instance. Your best bet is still tuning the queries of course - SQL Sentry Plan Explorer is free, and works very well for query tuning.
I work at a bank and we have some insane queries. Millions upon millions of records, but pulling datasets back in seconds. While some of it comes down to hardware, the majority is just coding / indexes and good design. If your moving to Sql, then I'm assuming it's 2014. If so, I would recommend looking into column store indexes and in memory tables. Sever 2014 is a giant leap in technology and performance, I would take advantage of it. I do most of my work writing reports and performance query tuning, so feel free to PM with any questions. I'll answer what I can.
I can recommend [Telerik Analytics](http://www.telerik.com/analytics). I've introduced it a year to some other devs and they seemed quite pleased with it. You can use it for free up to 100 instances per month.
I don't think the version will matter much for learning. Version 6 will have a lot of things in common with version 4. The main concepts are still the same.
Didn't you say the data needed to be live? If that's the case, then this isn't a solution. If your data needs to be live (but it sounds like that is not the case, contrary to your OP), the way to handle this issue would be to fix the query performance (the bottleneck), just as stackoverflow told you. If you didn't get a satisfactory answer i'm guessing it's because you included the inaccurate statement about the data being live. 
Learning MVC 4.5 is just fine, because the majority of the concepts are perserved in the next releases, and really many commercial projects are still based on mvc 4 and 4.5. Anyway, I think that you should learn and understand C# well first, then start learning MVC. If your questions are constructive and make sense, but you can't just find the accurate answer nowhere online, then don't hesitate to ask them on http://stackoverflow.com/. 
- Analyze your queries and see if you are doing something wrong - missing indexes, doing table scans? - Reduce the amount of data you are returning from your queries. Use paging, week &amp; month results vs whole year etc - Create the report (pdf/xls/csv) files as nightly runs and have the users download the ready made report files, instead of creating them on the fly
Classroom training OVER pluralsight? I'm sorry, yes you are crazy. In 15 years of experience classrooms just send most people I know to sleep. Very generic, always spend the majority of it's time to covering subject matter that to be honest you should already know if you are looking at MVC. (.NET DataTypes etc) If you don't know those (which it seems you don't seem to confident with), do the fundamentals courses first on pluralsight. You'll get better retention by the sheer fact you can re watch any courses or branch out... The cost of a classroom training course these days will likely get you several years of pluralsight subscription which you can use for any areas you aren't upto date on and everything in between. If you have questions, ask on StackOverflow or Reddit and have potentially millions of opinions rather than a single guy who's just selling a course. If its takings days to get a response, you're not asking the correct question, not formulating it well enough or asking in the wrong places. The classroom won't help you with that and when you have questions without the tutor, you need to know where to get the answers. I can pretty much guarantee you'll feel great after the class room, until the moment you fire up VS to do some actual work. Then you'll ask your boss for sometime on pluralsight anyway... Best of luck to you!
MVC Web API which is a framework for REST services was introduced earlier. It has some double functionality with regular MVC. In MVC 6 these things will be merged and the newer Web API components are favored. If anything you should take a course on Web API and then do some self studies on MVC vNext.
All your plugins, such as ReSharper and NCrunch, has to fit into that 4 GB address space as well.
I'm in the position buddy - over 2 years of MVC but I hated my previous employer so much I took a WebForms jobs. I had no experience with WebForms before I took it but man... it's super easy.... and super crappy compared to MVC 4/5 in my opinion (some people love it for some reason). I've pushed this company really hard to go MVC and they say they all want to ... but they keep developing WebForms shit. I work on MVC/EF projects at home to keep me sharp and in the new year I'll probably look for a MVC job again.
&gt; To be honest, at this point I would skip MVC and just go straight to Web API 2 and AngularJS. I would suggest the opposite. Angular is being completely rewritten and will be "drastically different". I suggest learning MVC for now and moving on to Angular when you have MVC down and Angular 2.0 is out.
Is it an Oracle database where the data lies on? What does the specific query look like? Also what do the indexes on those tables in the where clause look like? I would start there. Perhaps I mis-understand, you mention SQL server a lot, but I'm not sure where your data lies... SQL Server or Oracle? if its one of those, why complicate the question you are asking? 
(I wrote the article) Sorry for the typo in the article's title, non-native English speaker, yadda yadda &lt;insert other excuses&gt; 
If it's a separate stack (like it is at first), it's not to say it is the future, as for desktop, there are no plans at this moment to e.g. port WPF or Winforms over, which will automatically mean you either will need to stay on .NET full (so that's _your_ future then), or move to whatever MS thinks is feasible for UIs (likely their WinRT successor) on the desktop. I've heard mixed stories from people in the .NET targeting teams: one says .NET core is designed for systems with either restricted resources (.net native/devices) or high-throughput websites, another one says it's the future for all stacks and everything that _they_ think is OK will move over, the rest won't and thus will die. At the moment, datasets, datatables for example, but also appdomains are not present in .NET core, to name a few things. 
Those all doesn't necessarily contradict. .Net Core is the future and it's designed for high-throughput. It lacks AppDomains but libraries can be ported. They plan on porting changes back and forth to keep the API at least the same and I believe they would eventually be able to run the full framework on top of the .Net Core. But .Net full isn't going anywhere. It would always be an option, it just won't be where MS innovates "the hardest" (i.e web, winrt, mobile .Net native, etc.) P.S: Porting WPF (unlike WinForms) isn't **that** difficult since it relies less on windows.
&gt; They plan on porting changes back and forth to keep the API at least the same On a case by case basis (see Immo's article), which means that features added to .NET core libs might not be ported back to .NET full at all, and it versions slower, so the porting is not going to be at the same time. &gt; I believe they would eventually be able to run the full framework on top of the .Net Core. No, that's never going to happen. &gt; But .Net full isn't going anywhere. It would always be an option, it just won't be where MS innovates "the hardest" (i.e web, winrt, mobile .Net native, etc.) Based on what hard evidence do you conclude that? I have emails from MS employees contradicting with your statement. &gt; P.S: Porting WPF (unlike WinForms) isn't that difficult since it relies less on windows. It relies very much on windows, but that's not that important: .NET core doesn't mean it has to run on Linux / mac too. What's more problematic is that they haven't ported all binding stuff at all to .NET core nor is there intention to do so (as it doesn't make sense to have that at the moment for asp.net vnext). There's also no mention of WPF on .NET core anywhere, in fact they mention that it stays on .net full (immo's article). 
Let's be honest here. Microsoft doesn't know or get to say if .Net core is the future. It can die just as fast as Silverlight if it doesn't get adopted by developers. Which is a good thing because we will only adopt it if it actually provides a quality experience and has a use case.
Agreed, I was trying to be gentle with the OP as he sound like he might be way out of his comfort zone.
WebForms was designed for VB6 programmers so they had a familiar environment. I know because I was one once - we were used to dragging controls onto a form and clicking buttons to create events. It's not the best solution but WebForms are good for people who aren't experienced web programming. If that's what your team is though - they need to move away as you end up with an unsupportable mess.
I've passed on several WebForms gigs so as not to get "stuck" in an old technology. I can't justify getting experience in a technology that fewer and fewer companies use. While you're "keeping up" with new technologies in your spare time, your peers are getting 40hrs worth of experience every week in MVC and will be more attractive to employers when the next opening comes up.
&gt; Silverlight was always a side thing. I don't really see MS going back on all this .Net reimagined with .Net Core, RyuJIT, .Net Native, etc. Funny thing is: the .NET Core clr is from silverlight! :)
Every few years .NET team comes up with the future, which would last for a few years until another future was introduced. 
With education data we can't help but do table scans. Finding particular course types, there isn't a field for Course Types but we can utilise course codes: FS% = Functional Skills; WRL% = Work Related Learning; FS_3_N__ = Functional Skills Level 3 Numeracy. Yes paging is a solid solution for our apps. We do have overnight jobs which create tables of large datasets and we have scheduled reports on SSRS which run nightly, weekly etc to reduce the performance impact on the user's end. Thanks Tommis.
&gt; not all of us develop new software Windows Server 2012 R2 will be supported until 2023. That includes .NET FULL, so no need to support .NET Core until enough of your customers demand it. &gt; I’ve done this before, for the Compact Framework, Huge differences here. .NET Core + futures will not be THAT big of a difference.
That doesn't look like a job offer to me. Are you sure you didn't get an email from a student who wanted you to complete her homework assignment? If you're unemployed, a paying job is probably better than being unemployed for many reasons. For starters, it's monthly income. Second you're employed and it's easier to get another job when you're NOT unemployed. Prospective employers are suspicious when you're unemployed, and unless you're one of the top 1% of programmers with a well cultivated reputation, you're going to look less attractive than the other applicants who are employed. Third, you might start out doing Web Forms, but you might have the chance to use MVC and SPA on new projects. I'm a bit suspicious of your "job offer", but if you wan't to spend your time on completing a "programming test" for them, go for it and see what happens. If you have a lot of time and ambition, you might want to do **both** a Web Forms version and a version in MVC and then try to sell them on the benefits of the MVC version over the Web Forms. 
That means WPF could be supported since they already did all the multi-work for WPF's platform abstraction layer.
The company I worked for many many jobs ago used VB5/VB6 so I'm aware of where it came from but good lord is it a horrible excuse for web development. WebForms is good for .... I don't know.... nothing in 2015. But some people have made some pretty amazing stuff while being forced to use it (somehow).
They came out with generics and no one looked back. They came out with WPF and no one does rich client any other way. ... MVC, WebAPI ... ... linq, extension methods &amp; lambdas ... ... async-await ...
&gt; With REST it's up to the developers to document their API Web API 2 supports realtime API documentation based on the Controllers and DTOs (along with DataAnnotation and XmlDocumentation goodness). WSDL for auto-proxy generation is a nice to have.
The endpoints are defined by methods and parameters. You can reflect over the dll and generate bindings for any language. 
A job that size is simply far to excessive to be in a coding test. Don't waste your time. There are plenty of other red flags (telerik) in that job description too. Having said that, paying job &gt; not dealing with web forms.
&gt; Karl Peterson Man, I remember arguing with him 20 years ago. Is he still around?
The endpoints in what? REST? That doesn't work because of custom routing.
True routing can make things difficult, but no one cares about APIs having pretty UIs, so standard routes are easy to use.
You bet :) It's kind of sad really. The guy designed the original MVP logo, clocked thousands of posts each year in newsgroups/forums to help VB6 devs and got kicked out of the MVP program because MS didn't want to hear about anything related to VB6 anymore. Although I resent VB deeply, I still find him as one of the real MVPs and it's utterly sad how MS treated him. But that's life I guess. :)
This is a pretty well known issue with WPF, it just does not behave well when the number of items in question starts going over 10,000 (this goes for things like scatter charts with lots of points as well, I've done my fair share of custom charts in WPF and always resorted to bitmap manipulation in the end, 100x faster and smoother) Only tip I can give is to see if you can re-use the row objects in an object-pool way, rather than adding+deleting items as you scroll (obviously, don't even try to insert all the rows into the grid at the same time) Best of luck.
Half of those accomplishments are done by the language team. You also conveniently only list technologies that survived. Here are techs that failed/died/terminated. How about the DLR, the Iron languages, Web Forms, Win Forms, WCF, WF (rewriten once), CardSpace, LINQ to SQL, EF 6 and EF 7 incompatibilities, Silverlight is dead, WPF is barely alive for a while, Web API is merged in MVC 6, SOAP stacks imploded, how's that Win RT going, Dynamic Data, etc. 
Pluralsight for training. StackOverflow for questions. Have fun. It's a pretty ok stack. Classroom training is not fast enough and usually not current enough.
Good to know. Thanks.
&gt; What are your questions about? Around view-models, and multiple dbContexts and related code-first migrations. There are two good PluralSight courses on MVC (I think one is 4.5 and the other is 5) and the instructors approach their demo sites in different ways and I've not been super succesfull at melding the good parts from both. One thing I struggle with is wanting to do things right the first time. I'd hate to get some amount deep into my project to discover I've made a newbie architectural choice and have to redo things. Having said that, I'm realizing that doing that is almost certainly unavoidable so I should stop stressing about it.
I agree. WebForms is old news. Telerik stuff probably means this company is just trying to throw nice looking shit together to get it out the door. I would steer clear.
I just havent had these issues? Nuget is so much better then what .Net had before it. (Nothing) 1.) Whats wrong with multiple options? Some people like command line, some gui, some config? why not support all 3 ? 2.) Isn't this what packages.config does? 3.) Ok maybe. But if two packages have conflicting dependencies your screwed either way.
&gt; But I wouldn't go as far as to say that it is dead. Well, if SOAP is "dead" then I am Rick Grimes dealing with the Walking Dead... I'm working with SOAP right now... Writing software that interfaces with complex SOAP based services. (I'm consulting for a large company. They, like most large, established companies, like mature technologies that work well without and minimize risk.) 
This reminds me of a similar article I read about a guy who loves XSLT and thinks it would work better than Razor with ASP.NET MVC... I'm not going to argue against him (or for him), but he did make some interesting points.
They're two technologies solving different problems in different times. For the general message of "simple is better", right on. REST is definitely simpler, but some of that simplicity comes at a cost, like no standard for exchanging or advertising metadata about an endpoint. I agree, SOAP and all the WS-* standards are large and complex, and some of it you can look at and say "Well, feature X seems redundant to Y" but most of the features and standards are important and needed for a truly platform-independent platform to serve integration scenarios. I'm happy to have moved onto REST and for the goal of serving data to a single page application or web clients in general, it's great. But if I were faced with an integration project, it would be ridiculous to dismiss SOAP and rush immediately for a REST-based solution using JSON without gathering requirements and coming to that conclusion by weighing the pros and cons.
Yeah, I've played around with a fixed sized data table and fixed size collection. So the grid thinks it is looking at say 40 rows, and when you scroll it shifts data in and out of the 40 backing objects, but I think since updating effectively every cell means all the bindings have to reevaluate which takes a notable amount of time and the whole visual tree that describes how to draw it then gets invalidated and rebuilt.
You seem to be confused about using NuGet. In 99% of situations you don't need to manually edit config or project files and you don't need to manually edit project references. All you need to do is right click on a project -&gt; Manage NuGet packages and install new packages or upgrade existing ones. That's all there is to it. It doesn't matter what NuGet is doing in the background and it doesn't matter that it creates a packages.config file.
Don't forget if you want to use RMI over something other than http. 
I agree that simplicity is a big factor, and SOAP is overburdened by solutions to problems that were special cases, but article doesn't mention two points about SOAP vs. REST which are related and contribute to the current situation. The first is that REST is resource oriented, and SOAP is operation oriented. REST uses a limited set of verbs on an infinite number of nouns, and SOAP allows an infinite number of verbs. When we are addressing unique identifiable resources on the internet, and just need CRUD against those resources, REST is a natural, even a beautiful fit. If we are implementing complex business logic, SOAP is more natural. These two perspectives of data/operations are what gave initial rise to the two approaches. The second point not covered is that the software engineering culture largely likes new things, things that are easy to 'get' right away, has a distrust or at least skepticism of other's code, and has emotional reactions to the large technology companies one way or another. All of these combine and give a great disadvantage to SOAP. The problem, as it often is when a new technology starts to get favored over an existing one, is that there is often very good reason for the complexity - it is needed to solve specific problems. Take XML namespaces for example. The only people who like them are the ones who understand why they are needed. Every other dev just wants to [strip them out](http://stackoverflow.com/search?q=ignore+namespaces+xml), because they are not useful to the problem right at hand, and instead serve as an obstacle. But then every time we pick up a new technology with the desire for something fresh, simple and the ability to solve our problem elegantly, we invariably want to extend it to other problems. And this is where it picks up complexity. For example, instead of namespaces, now we have the problem of including JSON data from various authorities in a single response and needing to come up with naming conventions or grouping objects to keep track of heterogeneous data sources, and with no clear standard it's a mess, differing from one web api implementation to another. This is a problem SOAP addresses within the protocol itself, but as developers who don't deal with heterogeneous data sources don't need it, it's unnatural and distrusted. As REST is extended to solve other problems it wasn't initially designed for, it will pick up complexity. For example, [efforts are underway to constrain JSON resource to a pre-determined machine reasonable set of strings identified by name qualifiers](http://json-schema.org/latest/json-schema-core.html#anchor25) for those who need to solve these problems. As far as I can tell, the real problem here is three-fold: * a sort of impertinence on the part of experienced developers in different domains to accommodate or dovetail into existing technologies that may not be elegant and simple for them, but do solve real problems for others, * an overreaching on the part of standards committees or a community of experienced developers with a shared understanding of a shared problem to try to make one universal standard that doesn't keep simple things simple, and * willful or indulged ignorance on the part of inexperienced devs who can't immediately understand existing practices and solutions and instead look for ways to solve the problems at hand most expediently, without too much trouble to understand the larger context. This is what I think is missing from looking at why SOAP is having a hard time with popular dev opinion right now.
As for 3, isn't that just the install.ps1 file? Or am I misunderstanding him?
Pretty much all of this has changed in the new version of aspnet. You may want to look into the preview stuff in vs 2015 or on github.com/aspnet/home. As for the multiple interfaces, each of them have their use cases, and work very well almost all the time.
Don't forget Managed DirectX and XNA.
I think you should hit some Pluralsight courses of EF and just use your good judgement. Unfortunately most of those trainings provided by New Horizon and likes are just to pass Microsoft Certifications. More often than not instructors know only material for certification exam and don't have any real life experience with using those technologies. 
I'd be interested to know too. Also I haven't found any info on P/Invoke or similar mechanisms.
SOAP did loose, but like all technology that passes the point of acceptance, it'll be around forever, it'll never "die". There's absolutely no "minimizing risk" aspect to this, one soap service can differ from the next in implementation - just saying "yeah! it's SOAP! It's stable" is a total misrepresentation.
Couldn't agree with you more about the bandwagon nature when it comes to new things, especially as it relates to communities such as this subreddit or other enthusiast forums. "Oh there is something newer that means that the old stuff is basically garbage by default". I've been in the financial sector for 10 years and nearly all services I've seen have been SOAP. I can only think of one of the top of my head that has been REST, and that was to get quotes for tickers.
&gt; Ten years later SOAP is gone. Very few, if any, developers, are creating new SOAP-based Web services. Someone hasn't been in a .NET shop lately...
Why use a library. http://msdn.microsoft.com/en-us/library/system.net.mail(v=vs.110).aspx
I use ActionMailerNext in my projects. It fit the need and has been relatively easy to use. 
Thank the lord, someone else gets it. &gt; REST is resource oriented, and SOAP is operation oriented. REST uses a limited set of verbs on an infinite number of nouns, and SOAP allows an infinite number of verbs. This is a huge problem for my enterprise company. We have a lot of SOAP and everything here thinks in SOAP so when they have me design a REST api the first thing they do is destroy my design document by pushing for URLS that include verbs like SOAP. For instance http://{domain}/{controller}/{id}/DoSomething, http://{domain}/{controller}/{id}/DoSomethingElse. They are trying to do soap verbs in a rest api.
I had used ActionMailer before it died. It was easy to set up and use. I had some issues getting MvcMailer to work properly whereas ActionMailer was almost entirely plug and play. Keep in mind MvcMailer may be plug and play as well but my newbness needed a simple solution to send emails based on views. Side note: I hadn't even heard of Postal until reading this thread. I may look into that one as well :).
The point still stands, invoking the Razor system on a template is about 5-10 lines of code depending on your settings and the data context you are passing in. If the lib you want just generates razor output and mails it then a lib or framework may be too heavy, if there are other features you are wanting then you may have a case to bring in a 3rd party component. EDIT: Downvoters in this thread should defend themselves, I have yet to see a good argument to using a full library for simple razor processing and sendmail. Does the OP have more requirements? Do these frameworks do anything special beyond simple templates and sendmail that are so amazing that it's just standard to suggest them like you would nunit or hibernate/ef/etc?
These posts make me hopeful we'll get some good improvements soon. Especially the fact that they are partnering with the MS build and Visual Studio teams. http://blog.nuget.org/20141112/nuget-3.0-preview.html http://blog.nuget.org/20141014/in-the-platform.html 
If I simply upgrade packages it gives me incompatible references and breaks my web.config files. I must edit the packages.config file to set the allowable versions so it doesn't break my references. And it still breaks my web.config so I have to copy the web.config before I update my references so that I can put it back.
The problem isn't so much having multiple interfaces, as it is having the manpower to support them all and making sure that using an operation from one interface doesn't break settings applied via another interface. For instance: one shouldn't be able to remove NuGet references via the references list in in Solution explorer if it isn't going to clean up the packages.config file. Alternatively if a reference is removed with it, then that reference should be automatically regenerated by NuGet until it is removed from the packages.config. There shouldn't be a way to end up with half a configuration and being unable to build. The NuGet configuration should override the VisualStudio configuration and regenerate it if it doesn't match what is expected.
I was specifically thinking of the way SBT works. Where you can setup dependency and build configuration and then use a plugin to generate the configuration for the IDE. But the IDE isn't used to modify the SBT configuration.
Say no
You should have a look at RazorEngine http://matthid.github.io/RazorEngine/ Works similar to the ones you described, but it's a little bit more cleaner approach. No need to actually place the templates into mvc view folders etc.
One thing I like about this sub is that it has a well rounded userbase that tends to be pretty calm and rational about new things. There is a tendency towards enterprisey stuff but I think that's natural given the subject matter. I know what you mean about the bandwagon effect and prevalence on various programming boards (I can't stand HN because of the of the "if it's not the latest and 'greatest' then it's crap" attitude), but I don't really see too much of that here. At least not in the comments.
&gt; It's very encapsulated and modular unlike WinForms (which is basically a wrapper around Windows controls). WPF does rely heavily on DirectX, though.
I think it's kind of sad the backlash you're receiving. I use the smtp classes all the time in my job and honestly, rendering a template to an html string to shove into the email body is pretty easy. I would just hand-roll a solution myself. 
Try changing your content type to 'application/json' and use JSON.stringy (dataObject) when sending the data
Same here for many years. I use the razor engine these days as I got on a project that needed it for some content pre-rendering and discovered that razor features are pretty much what I end up rolling every time anyway with a smattering of extra features (like easily executing arbitrary logic while building the template). I highly suggest trying it out next time you need to do templates or token based generation/replacement it saves you a good amount of time.
Unfortunately I can't do that. One element that I left out of my example is that I'm including an AntiForgeryToken to be validated in the controller. You can't stringify the token. Here are the lines I left out: var token = $("#__AjaxAntiForgeryForm input").val(); var dataObject = { __RequestVerificationToken: token, UserId: $('#HiddenUserID').val(), -- etc --
Uh tell me about it. I had to integrate an app with DocuSign and half of their "REST" interface is "POST a bunch of XML".
Well the thing is with WebForms doing anything too custom is a major pain so they put down a ton of money to get pretty controls from Telerik. With ASP.NET MVC that dependency on expensive third-party controls is not there.
MVC 4 is fine starting point. 5 has minor improvements that with a quick read you can catch-up with. 6 is going to bring major changes under the hood but the concepts remain the same. Pluralsight has probably the best ASP.NET MVC tutorial I have seen (I've been working with MVC 1 all the way to 5) and learn plenty of nice things with Shawn Walemuts (sp?) video. For once instead of doing the "lets make a horribly designed app quickly to show you the basics" he actually does things nicely from the ground up (dependency injection, proper use of models, repositories...). None of the usual throw-away design. Then I suggest you take a day and build something and try to do it as best you can. You will learn more and keep that knowledge much better than a few hours with an "expert". Don't just ask questions, try to look for the answer, there is a wealth of information about the subject: blogs, Stack Overflow entries, books, you name it.
I found the answer, and of course it was a typo. The line: contentType: 'json' Should have been: dataType: 'json' And I looked at it a million times and never saw it. Thanks for your post /u/annnnnnnnnnnna ... it wasn't exactly the solution, but it got me looking in the right place.
I get the limitation of rest based interfaces. But is there any reason you can't have a standard /control/action?params route?
I will see about making one this eve, I have some old code from last time I did this in a repo somewhere in the depths of my backups. I admit I had to do some reading to piece together what to do to make it work however once I got it running properly I was surprised at the sheer small amount of code needed. 
I've never used Postal, but I really like MvcMailer. It's super easy to use, and works well. I use it all the time.
&gt; Shawn Walemuts Looks like you're probably talking about Shawn Wildermuth. I'll definitely check out his videos. So far I've been watching Scott Allen's and he's pretty good too.
Honestly, there's been like 10000 videos and articles describing the same C# 6 features, do we really need more?
This was recorded at a community driven event where sessions were voted in by the community. So it does seem like this space is not over-saturated yet. I hope my session was somewhat unique in comparison to the 9999 other ones out there, and mind you there was a few pretty recent changes to what goes into C# 6.0.
So you are saying that by just having someone else beating me to posting, it automatically increases the quality of my work? That would be amazing.
How did you get to that crazy conclusion?
Here's a link if you prefer the text format: http://blogs.msdn.com/b/csharpfaq/archive/2014/11/20/new-features-in-c-6.aspx
&gt; If his stuff would be really good, then other people would post it for him. That is probably how he came to that conclusion. 
Thanks for the video! 
And what have you contributed to others for free lately? If you did, were there people complaining about it? 
What this has to do with anything? I certainly don't want to turn this into an Internet dick measuring contest, but I think I contribute quite a lot, thanks for your concern.
I'm totally not trying to belittle anything you've contributed. On the contrary, I don't like when people complain about getting free stuff. Free contributions should be encouraged not deterred. 
Wrap $.ajax in your own custom functions. I have get(url) post(url, data) delete(url) put(url, data) that I use everywhere in my code. It helps reducing these kind of problems.
That's the one. His ASP.NET MVC and Web API videos are superb.
So much of this stuff is in VB.NET too, why don't people also praise the incredible journey VB has been on? All mentioned here and in VB.NET: - Generics - Partial types - Anonymous Methods - Iterators - Nullable Types - Getter/setter with separate accessibility - Static classes/methods - Implicitly types variables - Object &amp; collection initialisers - Auto properties - Anonymous types - Extension methods - Query expressions - Lambda expressions - Expression trees - Dynamic (late) binding - Named and optional parameters - Covariance and contravariance - Asynchronous methods - Caller information etc. They're practically equivalent in function (apart from a couple of obscure things that one has over the other) yet VB still isn't considered a "serious" programming language - which I think is a shame, considering its long and fascinating legacy as the traditional go-to language (ho ho) for young people's introduction to computers and programming. 
This can boil down to how you want to architect your application (and more importantly, your data). There's not enough information from your post to be able to assist you properly. If you reply with how your are structuring and accessing your data, I may be able to give you some insight. 
It's stupid, but it's just the brand name. It's been conflated with vbscript and vb 6 and people still confuse it. But vb.net is very impressive and just as productive as c# so it's good that it keeps going as it does look good and is a little easier to understand for beginners.
You need to implement users, groups, and permissions. http://stackoverflow.com/questions/2337001/patterns-design-suggestions-for-permission-handling
I would look into Claims. They are a lot more flexible, and role is a type of claim. Ultimately you will need to store your roles somewhere, e.g. this can be solved with a sql join.
Like it or not, most programmers prefer curly braces and semi colons. The biggest reason I won't touch VB though is its legacy. All the better developers (and many of the worst) went with c#. This left VB as a cess pool of people unwilling and unable to learn new things. The language doesn't matter so much, but these are the people that still think webforms is good.
I read about Claim and the whole new core Identity model and I still find it complicated. What about creating a Custom Forms Authentication, all I have to do is to add roles column in the accounts table, in the login page I use the account controller to check the role type and depending on it, so it RedirectToAction to the student or the teacher view.
It's mentioned in the video that the syntax for string interpolation will change in the future. This brings up a lot of questions for me: 1. Why not change it before release? 2. What are we talking about when we say "in the future"? Is that C#7 or some minor release in between or perhaps even further down the line? 3. When the new syntax is adopted, what happens to code written in the old style?
Do you have Office installed? That provider string looks like it's trying to use the Jet database provider out of office. Also, take a look at [this thread](https://social.msdn.microsoft.com/Forums/en-US/1d5c04c7-157f-4955-a14b-41d912d50a64/how-to-fix-error-the-microsoftaceoledb120-provider-is-not-registered-on-the-local-machine?forum=vstsdb) and see if it applies.
&gt;It will be changed before it's "released". Visual Studio 2015 is just a preview for now and C# 6.0 and its tooling is not yet fully completed. Ah! That explains it completely. Thanks!
Install 32bit and 64bit versions of the components
I thought that too and gave 'full control' but unfortunately did not make a difference. Thanks!
Which components? 
Office access data engine. http://www.microsoft.com/en-us/download/details.aspx?id=13255 Install the 32 bit version. 
This is the right path. Also, you can either have the 32-bit OR 64-bit version of this installed, and it has to be same version (32 or 64 bit) of Office if it is installed, you cannot mix them. Considering that it is ASP classic, you will need 32 bit most likely.
Here's an update: **Animal:** public enum AnimalType { Dog, Cat, Pig, Rabbit }; public enum AnimalSex { Male, Female, Unknown }; public enum AnimalSize { xsmall, small, medium, large, xlarge }; public class Animal { [Key] public int AnimalId { get; set; } [Required] public string Name { get; set; } public double Price { get; set; } public AnimalType AnimalType { get; set; } public AnimalSize Size { get; set; } public AnimalSex Sex { get; set; } public int Weight { get; set; } public string Description { get; set; } public string ImagePath { get; set; } public DateTime AddedDate { get; set; } public DateTime AdoptedDate { get; set; } public DateTime DeletedDate { get; set; } public virtual ApplicationUser Owner { get; set; } } -------------------------------------------------------------------------------------------------------------------------------------------------- **ApplicationUser:** public class ApplicationUser : IdentityUser { public string FirstName { get; set; } public string LastName { get; set; } public string Address { get; set; } public string City { get; set; } public string State { get; set; } public string Zip { get; set; } public string Email { get; set; } public string PhoneNumber { get; set; } public virtual ICollection&lt;Animal&gt; AnimalList { get; set; } } public class ApplicationDbContext : IdentityDbContext&lt;ApplicationUser&gt; { public ApplicationDbContext() : base("DefaultConnection") { } public System.Data.Entity.DbSet&lt;AdoptimalsDev.Models.Animal&gt; Animals { get; set; } } -------------------------------------------------------------------------------------------------------------------------------------------------- **Exception:** An exception of type 'System.Data.Entity.Infrastructure.DbUpdateException' occurred in EntityFramework.dll but was not handled in user code Additional information: An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details. System.Data.Entity.Infrastructure.DbUpdateException was unhandled by user code HResult=-2146233087 Message=An error occurred while saving entities that do not expose foreign key properties for their relationships. The EntityEntries property will return null because a single entity cannot be identified as the source of the exception. Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types. See the InnerException for details. Source=EntityFramework StackTrace: at System.Data.Entity.Internal.InternalContext.SaveChanges() at System.Data.Entity.Internal.LazyInternalContext.SaveChanges() at System.Data.Entity.DbContext.SaveChanges() at Project1Dev.Controllers.AnimalController.Create(Animal animal, HttpPostedFileBase file) in c:\Users\longal\Documents\Visual Studio 2013\New folder\Project1Dev\Project1Dev\Controllers\AnimalController.cs:line 86 at lambda_method(Closure , ControllerBase , Object[] ) at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters) at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters) at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters) at System.Web.Mvc.Async.AsyncControllerActionInvoker.ActionInvocation.InvokeSynchronousActionMethod() at System.Web.Mvc.Async.AsyncControllerActionInvoker.&lt;BeginInvokeSynchronousActionMethod&gt;b__36(IAsyncResult asyncResult, ActionInvocation innerInvokeState) at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`2.CallEndDelegate(IAsyncResult asyncResult) at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResultBase`1.End() at System.Web.Mvc.Async.AsyncResultWrapper.End[TResult](IAsyncResult asyncResult, Object tag) at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult) at System.Web.Mvc.Async.AsyncControllerActionInvoker.AsyncInvocationWithFilters.&lt;InvokeActionMethodFilterAsynchronouslyRecursive&gt;b__3c() at System.Web.Mvc.Async.AsyncControllerActionInvoker.AsyncInvocationWithFilters.&lt;&gt;c__DisplayClass45.&lt;InvokeActionMethodFilterAsynchronouslyRecursive&gt;b__3e() InnerException: System.Data.Entity.Core.UpdateException HResult=-2146233087 Message=An error occurred while updating the entries. See the inner exception for details. Source=EntityFramework StackTrace: at System.Data.Entity.Core.Mapping.Update.Internal.UpdateTranslator.Update() at System.Data.Entity.Core.EntityClient.Internal.EntityAdapter.&lt;Update&gt;b__2(UpdateTranslator ut) at System.Data.Entity.Core.EntityClient.Internal.EntityAdapter.Update[T](T noChangesResult, Func`2 updateFunction, Boolean throwOnClosedConnection) at System.Data.Entity.Core.EntityClient.Internal.EntityAdapter.Update(Boolean throwOnClosedConnection) at System.Data.Entity.Core.Objects.ObjectContext.&lt;SaveChangesToStore&gt;b__33() at System.Data.Entity.Core.Objects.ObjectContext.ExecuteInTransaction[T](Func`1 func, IDbExecutionStrategy executionStrategy, Boolean startLocalTransaction, Boolean releaseConnectionOnSuccess) at System.Data.Entity.Core.Objects.ObjectContext.SaveChangesToStore(SaveOptions options, IDbExecutionStrategy executionStrategy) at System.Data.Entity.Core.Objects.ObjectContext.&lt;&gt;c__DisplayClass28.&lt;SaveChanges&gt;b__25() at System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy.Execute[TResult](Func`1 operation) at System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(SaveOptions options) at System.Data.Entity.Internal.InternalContext.SaveChanges() InnerException: System.Data.SqlClient.SqlException HResult=-2146232060 Message=The conversion of a datetime2 data type to a datetime data type resulted in an out-of-range value. The statement has been terminated. Source=.Net SqlClient Data Provider ErrorCode=-2146232060 Class=16 LineNumber=1 Number=242 Procedure="" Server=(LocalDb)\v11.0 State=3 StackTrace: at System.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) at System.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction) at System.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) at System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean&amp; dataReady) at System.Data.SqlClient.SqlDataReader.TryConsumeMetaData() at System.Data.SqlClient.SqlDataReader.get_MetaData() at System.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString) at System.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean async, Int32 timeout, Task&amp; task, Boolean asyncWrite, SqlDataReader ds) at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method, TaskCompletionSource`1 completion, Int32 timeout, Task&amp; task, Boolean asyncWrite) at System.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, String method) at System.Data.SqlClient.SqlCommand.ExecuteReader(CommandBehavior behavior, String method) at System.Data.SqlClient.SqlCommand.ExecuteDbDataReader(CommandBehavior behavior) at System.Data.Common.DbCommand.ExecuteReader(CommandBehavior behavior) at System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.&lt;&gt;c__DisplayClassb.&lt;Reader&gt;b__8() at System.Data.Entity.Infrastructure.Interception.InternalDispatcher`1.Dispatch[TInterceptionContext,TResult](Func`1 operation, TInterceptionContext interceptionContext, Action`1 executing, Action`1 executed) at System.Data.Entity.Infrastructure.Interception.DbCommandDispatcher.Reader(DbCommand command, DbCommandInterceptionContext interceptionContext) at System.Data.Entity.Internal.InterceptableDbCommand.ExecuteDbDataReader(CommandBehavior behavior) at System.Data.Common.DbCommand.ExecuteReader(CommandBehavior behavior) at System.Data.Entity.Core.Mapping.Update.Internal.DynamicUpdateCommand.Execute(Dictionary`2 identifierValues, List`1 generatedValues) at System.Data.Entity.Core.Mapping.Update.Internal.UpdateTranslator.Update() InnerException: 
&gt; Handling of exceptions while saving can be made easier by exposing foreign key properties in your entity types on Animal, add: public string OwnerId { get; set; } That should give you a clearer exception. Going one step further, you may need to add ModelBuilder Configurations during OnModelCreating Edit: bit more info... you can explicitely define the model via code if EF is not able to infer it correctly. In your context: protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Entity&lt;ApplicationUser&gt;().HasMany(x =&gt; x.Animals); modelBuilder.Entity&lt;Animals&gt;().HasRequired(x =&gt; x.Owner) }
Here's the T-SQL for the tables that EF created. It appears that they added that themselves, but it still isn't working. CREATE TABLE [dbo].[Animals] ( [AnimalId] INT IDENTITY (1, 1) NOT NULL, [Name] NVARCHAR (MAX) NOT NULL, [Price] FLOAT (53) NOT NULL, [AnimalType] INT NOT NULL, [Size] INT NOT NULL, [Sex] INT NOT NULL, [Weight] INT NOT NULL, [Description] NVARCHAR (MAX) NULL, [Owner_Id] NVARCHAR (128) NULL, [ImagePath] NVARCHAR (MAX) NULL, [AddedDate] DATETIME DEFAULT ('1900-01-01T00:00:00.000') NOT NULL, [AdoptedDate] DATETIME DEFAULT ('1900-01-01T00:00:00.000') NOT NULL, [DeletedDate] DATETIME DEFAULT ('1900-01-01T00:00:00.000') NOT NULL, CONSTRAINT [PK_dbo.Animals] PRIMARY KEY CLUSTERED ([AnimalId] ASC), CONSTRAINT [FK_dbo.Animals_dbo.AspNetUsers_Owner_Id] FOREIGN KEY ([Owner_Id]) REFERENCES [dbo].[AspNetUsers] ([Id]) ); Specifically, these two lines: [Owner_Id] NVARCHAR (128) NULL CONSTRAINT [FK_dbo.Animals_dbo.AspNetUsers_Owner_Id] FOREIGN KEY ([Owner_Id]) REFERENCES [dbo].[AspNetUsers] Would those two not take care of the foreign key requirements? 
&gt; Would those two not take care of the foreign key requirements? As per the exception, this is about being able to identify the exact issue (not specifically a problem with the way things are modelled). Adding a FK property on the entity will give you a more specific exception.
When I try to update the database using protected override void OnModelCreating(DbModelBuilder modelBuilder) { //base.OnModelCreating(modelBuilder); modelBuilder.Entity&lt;ApplicationUser&gt;().HasMany(x =&gt; x.AnimalList); modelBuilder.Entity&lt;Animal&gt;().HasRequired(x =&gt; x.Owner); } I get the following errors: One or more validation errors were detected during model generation: Project1Dev.Models.IdentityUserLogin: : EntityType 'IdentityUserLogin' has no key defined. Define the key for this EntityType. Project1Dev.Models.IdentityUserRole: : EntityType 'IdentityUserRole' has no key defined. Define the key for this EntityType. IdentityUserLogins: EntityType: EntitySet 'IdentityUserLogins' is based on type 'IdentityUserLogin' that has no keys defined. IdentityUserRoles: EntityType: EntitySet 'IdentityUserRoles' is based on type 'IdentityUserRole' that has no keys defined.
I'm not sure what you are asking. Did you look at their documentation? For example, Parse command can take another parameter that would be model -&gt; Parse(template, model). https://matthid.github.io/RazorEngine/AboutRazor.html &gt;There is often a confusion about where Razor sits in this set of technoligies. Essentially Razor is the parsing framework that does the work to take your text template and convert it into a compileable class. In terms of MVC and WebPages, they both utilise this parsing engine to convert text templates (view/page files) into executable classes (views/pages). Often we are asked questions such as "Where is @Html, @Url", etc. These are not features provided by Razor itself, but implementation details of the MVC and WebPages frameworks. &gt;RazorEngine is another consumer framework of the Razor parser. We wrap up the instantiation of the Razor parser and provide a common framework for using runtime template processing.
your database provider is not installed, the error message is quite self explanatory you'll need to wither install the darabase provider specified in your connection string ... Microsoft.Ace.Oledb.12.0 ... or re-write your connection string using a provider that IS installed.
First of all, always use real names of the things involved: no-one has many address entity instances related to a single person entity instance. ANyway, as things have to be done inside the DB, there's no way you can avoid the relational algebra involved where a set of address rows is used to filter person rows: either through a join, or through an EXISTS predicate. Of course, if you have the addresses in memory you can filter them there, collect the IDs and use those in a Contains filter on the FK in Person. But it surprises me how you think this can somehow magically be solved at the model level: i.e. some magical thing can be done there so a join/exists isn't needed anymore... You do know the relationship between model and table definitions, right?
I wonder if null expressions will work with DBNULL? 
This worked perfectly mate thank you very much! I assume this package would of been installed along side my old office 2007 package or something years ago? Thanks everyone!
&gt; no-one has many address entity instances related to a single person entity instance. What? Of course. I have multiple addresses.
&gt; So much of this stuff is in VB.NET too, why don't people also praise the incredible journey VB has been on? Because it's VB. ;-)
You can have null expressions now already. I'm sure you had them plenty of times already. I'm much more looking forward to the *null propagation operator*. :-)
The *null propagation operator* works on `null`. `DBNULL` is not null. It's the same deal with the *coalesce operator*.
The (int)? x?.nerds = stuff I can have now? Or am I mislabeling that? 
I understand dbnull and null are different, but I can still hope it works on it. Although, with linq to sql and EF, I don't find myself cracking open ADO.NET stuff and messing with recordset objects directly much these days. 
Yes, it is installed with Office 2007 and later. The 64-bit version doesn't include some functionality available in the 32-bit version, so 32-bit's the version I suggest you start out with. 
Keyword: 'many'. That said, 'Address' is often modeled as an entity but it has no real identity: instances rarely re-used in practice. So it's better to see 'Address' as a valuetype (DDD) (or Complex type in EF), and model it thus in-line as the instance of an address type is actually 1:1 related to a related entity anyway. You don't have to do this, of course, but 'Address' is the textbook example of a valuetype
I would never have got this no matter how much i looked into this. Thanks again.
Yes, Keyword 'many'. **I** (as in me, AngularBeginner) can have multiple addresses. One person, two addresses.
I'm not denying that ;) I was saying the general approach to addresses is to model it as a complex type, so you have 1 or more fields in Person with as type 'Address' (instead of e.g. int, string etc.). This of course doesn't work if you want to assign information to the relationship between person and address, or want to keep a ledger-like history of all addresses a person has had. anyway, sidebar, not the answer to OP's problem.
A complex type can also have multiple fields, so you define it with the fields you mention and then you can define e.g. 'PostAddress' in Person and give it your AddressType. This means the fields in the address type have to be present in the person table. In your model, you don't have two entities, but one (person) and one complex type (value type). This is common if you know there are a fix number of addresses stored. If you want to store a flexible amount of addresses and store the type of the address on the relationship you need a table for address and model it as a real entity, but chances are in practice this won't make much sense. 
&gt; Message=The conversion of a datetime2 data type to a datetime data type resulted in an out-of-range value. SqlClient is complaining because it can't stuff datetime2 value (0001-01-01 through 9999-12-31 range) into datetime (1753-01-01 through 9999-12-31). What are the values of your AddedDate, AdoptedDate and DeletedDate? As your variables aren't nullable, I'd guess you have 0001-01-01 in one of them.
Fuck, that's it. You're the best, man. I didn't remember that the default value added when not nullable is 0001-01-01.
Where does the rendered link point?
&gt;ANyway, as things have to be done inside the DB, there's no way you can avoid the relational algebra involved where a set of address rows is used to filter person rows: either through a join, or through an EXISTS predicate. Of course, but EF models generate entity classes, and those entity classes, when combined with LINQ-to-Entities statements, are what are used by EF to create the SQL (JOINs, WHERE clauses, etc) that ultimately gets run on the database, no? &gt;Of course, if you have the addresses in memory you can filter them there, collect the IDs and use those in a Contains filter on the FK in Person. That's less efficient though, no? With potentially millions of records I would assume that wouldn't be the best method. &gt;But it surprises me how you think this can somehow magically be solved at the model level: i.e. some magical thing can be done there so a join/exists isn't needed anymore... You do know the relationship between model and table definitions, right? I probably didn't explain it very well. The goal is to have the SQL that EF generates include the join. I know I can accomplish this using LINQ-to-Entities. I also know that with an entity data model, you can create a single entity type that maps to two different tables, which results in the SQL generated for that entity type always including a JOIN between those two tables. The latter seems to be limited to tables with a 1:1 relationship only though. Let's say you have a Manager table and Employee table, with a Manager having many Employees and Employees having exactly one Manager. I am working with EF and want to get all Managers that have an Employee with the name "Scott", what advice would you have for me?
&gt;If you want to store a flexible amount of addresses and store the type of the address on the relationship you need a table for address and model it as a real entity, but chances are in practice this won't make much sense. This is what I was talking about in my example, but you're saying that when using the Person/Address example in most domain examples that you've seen, Address is generally expressed as a set of fields within the Person table that get mapped to a complex type within the Person entity, correct?
yeah I really don't know what 0-* as it's not a common notation: http://www.smartdraw.com/resources/tutorials/cardinality-notations/ But troll away...
Yes. It's normal nature to think of it as a separate entity, and why not, but Address is semantically tied to Person really in a 1:1 way, as when you define multiple addresses for Person, they have specific meaning, so it's not like with Customer and multiple orders, but Person and a 1:1 relationship with 'PostAddress' and a 1:1 relationship with 'LivingAddress' or something like that. 
&gt; Of course, but EF models generate entity classes, and those entity classes, when combined with LINQ-to-Entities statements, are what are used by EF to create the SQL (JOINs, WHERE clauses, etc) that ultimately gets run on the database, no? yes &gt; That's less efficient though, no? With potentially millions of records I would assume that wouldn't be the best method. Having separate entities which have to be joined, yes that's less efficient. &gt; I probably didn't explain it very well. The goal is to have the SQL that EF generates include the join. I know I can accomplish this using LINQ-to-Entities. I also know that with an entity data model, you can create a single entity type that maps to two different tables, which results in the SQL generated for that entity type always including a JOIN between those two tables. The latter seems to be limited to tables with a 1:1 relationship only though. yes, an entity split over multiple tables requires that the tables have a Pk-Pk 1:0..1 relationship, so there's little you can do on the model front if you have two tables. &gt; Let's say you have a Manager table and Employee table, with a Manager having many Employees and Employees having exactly one Manager. I am working with EF and want to get all Managers that have an Employee with the name "Scott", what advice would you have for me? that you have to specify the query so it contains the join, e.g.: from m in ctx.Manager where m.Employees.Any(e=&gt;e.Name=="Scott") select m; this will create an EXISTS query on Employees with a correlated subquery to manager, so indirectly this is the same as a join, (the execution plan will likely be the same). 
So /index/?sortorder=BirthDate doesn't work?
Keep in mind this is general advice because there is no way to accurately recommend a solution without more insight into your queries and build out. Recommended: Scale up your SQL server by adding as much memory as you can afford. SQL Server will actively use extra memory for caching. Recommended: Try to get up to 4 or 8 cores. There may be a point of diminishing returns and chances are you are not computationally bound. Additional cores will help with query parallelization. Recommended: Make sure all queries hit a index. You mentioned you can't avoid table scans, but I think you can through liberal use of indexes. If a query operates on a field, that field gets an index. Range queries get clustered indexes, hash lookups get non clustered indexes. Try to normalize fields that you would need a 'like' clause to query by pulling out the codes into additional columns on import/ETL. Recommended: Try to get your queries to use a parallel query plan and make sure that plan is evenly distributed across threads. Optional: Using SSD for storage can reduce read and write latency. Separate your transactional log from your data storage to avoid contention on disk. You can also look at striping if you can't afford SSD. Recommended: Try to avoid the database whenever possible. Reference tables and lookups can be pushed to a distributed cache like Redis. This will work better for reference data and becomes more difficult as you hit large or transactional data sets. Optonal: If your have lots of money laying around, look at a in memory data grid solution like gigaspaces or gemfire. These systems effectively move the system of record (where you do your reporting) to the grid. Typically three copies of data are stored in the grid and a asynchronous write to a persistence store after the transaction is committed. Recommended: In your app, try to use async await on operations that do IO and push the async await all the way up the stack to the controller action. This is a server optimization that will allow your server to avoid blocking. Recommended: Push session state to Redis or some distributed store to avoid needing server affinity. Disable state for pages that don't require state.
I don't know anything about Postal, but one small issue we're having with MvcMailer is that it needs the httpcontext to render the template, which means that 1) we cannot queue the entire process of creating the template and sending the thing as a background task, we can only queue the sending of the created template. 2) this affects the "layer" at which all of our email stuff is at, which wasn't a problem before, is getting annoying now. Our issue is small and could probably be solved by passing the controller context down the app/to the background task, but just thought I would mention it.
What does Mvc have to do with the gfx style ? You could just as easily use a textbox + bootstrap, unless there's something about Mvc I'm missing. It's a design paradigm not a UI framework. Shit you could do MVC using web form controls if you wanted to. Take out the view state and events and it's just regular old HTML.
To be fair it's not dissimilar to c# winforms, I'd say it's closer to that than vb6.
WebForms pushes you to use "server controls" which depend on the postback mechanism. Sure you can ignore all that and do hand-made HTML but then you are barely doing WebForms anymore.
It's not really that different. Turn auto-post back off for controls (which 99% of the time you would), typically you then have a submit button (like any other web form) and it submits the form, the days goes in the query string or post same as Mvc. Things like routing won't be available but that starts to not be 'Mvc' as the design pattern as you can setup routing with web forms. I think all these techs have their place, it's silly to think there's a one size fits all.
Agree. It takes a lot of determination to come up with a build system worse than Ant and Maven combined. But sadly, the issue is that most .NET fans have never ever used anything except what Microsoft gave them, so NuGet is now the hot shit, despite being a step backward on all the terrible solutions e. g. Java had in 2008.
We added a new 'Features' page today. Hope you like it! 
A plans and prices page have been added recently. Servant is still in public preview, so everything is still free.
WPF grids are just not that good. You might try Telerik for a slightly better option, although a guy in my shop actually just completely wrote his own custom grid control to get around it, and it is easily outperforming the standard WPF grid controls available. I'd share it but it's not my code, and it technically belongs to the company, so I don't think it'd be ethical to give you the files on git or something.
&gt;Like it or not, most programmers prefer curly braces and semi colons. I disagree with that statement. People don't have any problem with writing and reading Python or Ruby. I think the problem with VB.NET is branding.
Did he do a WPF grid? If there were up to date Direct2D bindings for for dotnet I might try thwt, thought the GDI+ winforms grid is good, its just I'm the only dev on my team comfortable working in pixels and bitmaps.
Thanks. This is helpful. Much appreciated. I thought of that solution but over complicated it. I'll definitely check out that link. 
Im fairly certain the power shell interface is the main interface. The UI cant do many things the power shell can, like getting specific versions of dependencies. As for the packages.config not being the golden source, that's because 3rd party commercial libraries aren't available via NuGet. So if you want or need them in your project then you have to add them directly into the project. If you didn't have this capability, you would have to host your own NuGet repo.
look into partial views for mvc this way you can use the same cshtml piece for every page 
Thanks. This is helpful. I came across this earlier but wasn't sure if it was what I was looking for. I seemed like I was on the right track though. I will get back to it later today as I progress with playing with mvc. I like this platform. I just need to figure out how to play with the CSS and alter the default look (I actually don't mind much of the default, just need to add the side bar and make a few more tweaks). 
look into css frameworks like bootstrap: http://getbootstrap.com/ or if you want to get something less dry try polymer https://www.polymer-project.org/
See if measure up has a test cert for this certification. They are pretty close to the real certs. I couldn't really recommend a very good guide as I don't remember what I've used in the past. The cert test should be a good compliment to whatever you find to study from. 
Entity Framework is about to get a big revamp with EF7 (lots of deprecations), and EF4 is super old anyway. Are you really sure this will help you be more marketable?
http://jameschambers.com/2014/06/day-0-boothstrapping-mvc-for-the-next-30-days/ That link should help in tackling bootstrap with MVC. And here you can find some free bootstrap themes: http://bootswatch.com/ 
I was being polite, I did look it up. :) You should check again. It says ado.net 4. Which means framework 4 not ef4. Nowhere does it mention ef4. In fact it mentions the t4 object generator, which is EF5. 
Also, .NET uses something internally when compiled called the CLR (Common Language Runtime), which enables the ability to program in .NET using various languages to the same end result. C# is the most popular language for .NET but you can also use Visual Basic and many others.
.NET 4 came with EF4, .NET 4.5 came with EF5, EF 6 was released separately first on .NET 4.5 and later also backported to .NET 4. So it's very confusing, though I doubt they'll be asking EF4 specific stuff, at least I hope they do not, but with these silly exams you'll never know. EF6 is the only EF version that's still maintained, so I do hope for everyone spending time on these exams that they ask EF6 only stuff, otherwise these exams are even less valuable than they already are (as in: they don't test whether you can actually use the stuff, just that you know some basic facts you can look up in 10 seconds)
Awesome thanks. I've been playing with this all day yesterday. I think my site is coming out pretty nice. My next steps are checking out bootstrap and an Ajax implementation (clicking menu in side div to display content in main area). I think this works the same as a regular site so that wouldn't be too tough. You guys are awesome! Thanks. Its been 5 years since I played with web development. This is much better than I remember. 
It also mentiones `ObjectContext`, which (while it exists) is not used in EF5+ anymore. It does not mention any EF5+ related features. Also, this exam was published September 2012 - only one month after the initial release of EF5. That is a too short time frame.
&gt; It also mentiones ObjectContext, which (while it exists) is not used in EF5+ anymore. Yes it is, DbContext wraps internally an ObjectContext, it simply is a facade in front of an ObjectContext, which actually does all the work. https://entityframework.codeplex.com/SourceControl/latest#src/EntityFramework/DbContext.cs
Further to what /u/ffffrozen has said - There are many sub-stacks within the .NET platform. For instance there's (at least) two complete 3D Game Engines built on .NET - Microsoft's XNA, and Unity (which is a third party framework). There's multiple UI frameworks for Mobile, Browser, and Desktop OSs. It's quite possible to specialise in one section of the .NET platform - there's a lot of it out there. I spend most of my time doing backend C# development - I work a lot with performance critical code that deals with large datasets - billions of rows/objects, terabytes of data, lots of threads, and coordinating comms with internal and external systems. I occasionally dabble in ASP.NET MVC, but it takes me a while to get up to speed with what's the new and best ways of doing things there. 
I know. That's why I said it exists. But it's not used (directly) anymore. Normally if you deal with EF5+ you don't have to touch ObjectContext.
Speaking of large datasets - are you using Entity Framework or any other ORM? We have noticed that EF does some strange things while calling DB, even when we use stored procedures or functions.
Short answer: No. We use an in-house framework built over the top of [Dapper](https://github.com/StackExchange/dapper-dot-net). Longer answer: We've got multiple products, and for some godforsaken reason a couple of teams have decided EF is fine. But they don't deal with stuff at the scale some of the other projects do. MicroORMs are, as far as I'm concerned, the way to go if you've got any reasonable amount of data or a vaguely complex Schema. We built automation tools that eliminate almost all the benefit you get from having EF anyway. We can generate a C# object from views or tables, and that object's definition will stay in sync with the SQL Schema. All our applications use sprocs for talking to SQL - at our scale we simply can't trust even parameterised SQL not to cause execution plan flapping, and sprocs let us nail down optimised queries for that call.
Yeah, it's really tricky. I think they left the EF version ambiguous on purpose.
Wouldn't he be more marketable if he knew how to maintain "legacy" code instead of just the new hot stuff?
Auto-generated nested queries, difference in performance (same function called directly runs blazing fast), issues with model refreshing.
It should be noted that "ASP.NET" means more than just web forms, it's the name of the entire HTTP stack. For most of ASP.NET's history, WebForms was the only UI system so the terms have become interchangeable, but moving forward it's better to make the following distinctions to avoid confusion: * ASP.NET - HTTP framework * ASP.NET WebForms - UI Framework for developing WinForm-like apps for the web. * ASP.NET MVC - UI Framework for developing MVC apps for the web.
Sounds like stuff you'd need to look at on case by case basis. EF, like other ORMs, has it's limits though. I found it really good for simple stuff (give me a list of customers) or when you need to work a bit with what you're getting back from the server (give me this customer, now give me his orders but filter those by the current users department, that sort of thing) Once it get's really complex and lots of data is involved I found it best to let the SQL server do the heavy lifting and go through stored procs. (Look at the same large table in 3 different ways, joining a dozen other tables as you go, while applying various conditions, over 100s of millions+ of records and come back within a few ms) It hurts a bit from an architecture stand point but thankfully in all the projects I worked on so far these have always been rare and one off type of things. But it's a tool that's at your disposal, so why not use (selectively) It does sound though like you're working on some interesting stuff there. You're running on vanilla SQL Server, right?
Technically the CLR compiles from IL to x86 or whatever platform. But yes that is a very good, advanced, book.
Just wanted to echo what /u/willhughes is saying. Large datasets in EF will just not work. It was never designed for that. Even the guys at MS have discussed this. I've had nothing but problems when querying what some would call large, but I'd say is actually VERY small (think 10k+ records) and EF basically crapping out. Dapper is much better for querying from what I've seen personally. Heck, if you can avoid an ORM completely, it's usually worth it IMO to just use SQL.
Right now we have SQL Server 2008 R2, not sure when we will get the latest one. We use EF but we don't have code-first approach. As you said, EF looks fine for simple stuff. We use SPs and User-defined Functions for heavy operations but it looks like execution plan for these is messy while calling those via EF. That is why we are looking into some Micro-ORMS. I have tested Dapper, now I am looking into NPoco.
This! DB-wise 10k receords is nothing but add EF and shit is getting real. Using Micro-ORM (Dapper, NPoco) or not having an ORM (just ADO.NET) sounds like an option.
Nah, it's in line with the rest of these exams: it's a complete mess and out of date nonsense, which test for how good you have learned info everyone else tends to look up in the help document. If one wants to learn about EF, they should write some code with it, not do this exam. this exam proves absolutely nothing with respect to having knowledge about how to use EF, ado.net etc. But that's my personal opinion. 
Please don't tell us you work in HR and are reviewing résumés. ^^^please ^^^please ^^^please
I thought the programs were compiled to IL, and then run through the CLR?
I'd like to look in to MVC but from what I've seen it embodies everything I loathed about asp classic.
[CIL](http://en.wikipedia.org/wiki/Common_Intermediate_Language) is a fun language to learn and work with in its own right. 
Important to note. When VNext lands ASP.NET will be an umbrella term for MVC, WebApi and SignalR.
Yes, and the CLR does that by employing a JIT compiler that converts IL instructions into x86 operations. While not entirely true, the CLR is to .NET what the JVM is to Java.
MVC can be abused to do that, but its intended with modern development practices in mind - IoC/DI, Unit Testing, Seperation of Concerns, and all the rest. 
I'm not very certain. A local training center is offering .NET-related training, concluding with a few exams including this one. I figured I could learn the material on my own (and I'm on my way there). But I was just assuming that the training center picked its topics sensibly to help its trainees find jobs. Now I'm not so sure. Would be a shame for me to waste the preliminary work I've done though.
I hope OP is, actually. I doubt many would think to visit a technical forum and ask for clarification on the skills they're supposed to be looking for.
I'll never go back to using data records/etc. Dapper all the way, with the only exception being for bulk insert. Then, yeah, some SQL specifics needed. I think InsightDB (Dapper fork) does that though. 
I still consider Mono to be part of the same ecosystem, and for someone who's already confused about the various bits of .NET - it's effectively the same thing. So, yeah, it's not .NET but it implements the same core framework libraries. 
The problem I have with HR pre-screening candidates is that they sometimes try to screen based on topics they have no idea about rather than leaving it to me. 
OP is actually a recruiter, who has been "specializing" in hiring web developers for a year now (!?). So is actually doing exactly that, but charging other companies money to do it :( 
In my complete opinion. I would just have these guys move your site to azure. Its designed for practically anyone to take deploy it to their servers. They have tons of free help support staff and guides that will get you any answer you need. I'm with one of the other guys on here. Get your .dll files. Hit up azure support, let them know you're a new client. They'll remain on a call with you for as long as it takes. Plus you can change your server costs at free will. And can freely move your site cross domains without ever moving it from one VM to another. I would say, deligate as much of it to yourself. A developer typically doesn't need to be invoked with a deployment process. Just Simone with basic computer skills and the ability to trouble shoot with their death engine of choice. The bigger question is, is it worth your 3k of time? Edit: spelling and grammar
Yeah I thought the same thing at first, but then again, at least they are making an effort to learn. There is hope!
Cassini can only accept local connections. There is a [fork](http://ultidev.com/products/cassini/) that can accept remote connections though.
Here ya go. https://gilesey.wordpress.com/2013/04/21/allowing-remote-access-to-your-iis-express-service/
I always feel sorry for headhunters. Their career respectability level is somewhere between used car salesperson and telephone debt collector. Better off selling e-cigarettes at a small kiosk in the mall.
We used that at our last place. Somewhat complex but good solution.
Check the file permissions. I'm having the exact same issue on a legacy asp application where the files aren't inheriting the internet user permissions that are set on the folder. I think it came with the critical patch from a few weeks ago. I haven't applied the latest one (from last week?) to see if they reversed whatever they did to cause this yet.
I'm not a classic ASP guy, but I always put IUSR &amp; IIS_IUSR on my ASP.Net web folders.
Thanks - that didn't change the behavior in my case.
Permissions are being propagated down for both the target folders and the application's folder itself. 
Since you are attempting to access a file on a share; you're probably either hitting a delegation problem or the [Kerberos double hop problem](http://blogs.technet.com/b/askds/archive/2008/06/13/understanding-kerberos-double-hop.aspx). You probably either need to turn off impersonation or set your SPNs and delegation up.
check out this [simple forms authentication module](https://www.reddit.com/r/dotnet/comments/2phg66/ready_to_go_vb_module_for_simple_forms/) which i wrote for this exact requirement i had :-)
I'll have to see if I setup any SPNs for the old web server - but I don't recall doing that. Though I'm starting to think that the problem lies on the web server side more so than the file share side. I ran ProcMon on both web servers, and on one of the servers I'm reading the file from. I then executed the ASP page from each web server. Both web servers show the same 5 events in ProcMon, with the same results. But on the file server I only see activity when I execute the ASP page on the OLD (working) web server. There are no events even showing access denied when the ASP page is executed from the NEW server. When I take the filters off of ProcMon I see other processes that generate 'access denied' messages. I have to table this for the rest of the day. I will check on the delegation and/or impersonation settings tomorrow and see if that leads anywhere. Thanks for the tip.
&gt; and Ninject for Inversion of Control. Nooooooooooo. Use Autofac instead! Then you have an excuse to curse in office!
ninject is very slow compared to things like structuremap or unity.
Offtopic, how are you liking AppVeyor? We are looking migrating away from TC as it has way too many features for us, and we would like to go in the cloud.
I'm trying to decide why AppVeyor over TeamCity for the reason you cited (TC has too many features). It costs money, for less features. I have a hell of a time getting expenses like this approved when it seems to offer less. Being in the cloud seems to offer less security and a higher probability of downtime. Well we could always chalk this up to you being you, and me being me.
We've started using DbUp along with Octopus Deploy, the two of those combined have finally allowed us to have fully automated releases. Life is good. http://dbup.github.io/ 
I would suggest SimpleInjector for IoC -- we recently migrated away from Ninject, because SI is faster, easier to use, and has tools for verifying your setup.
About how many columns of data do you have? I found that with the DataGrid (and other grids), update performance dropped with every column added. My application is a risk management app, some of our uses have report configurations with 50 or so columns, those reports weren't even usable, but the smaller reports with 10 columns or less performed fine. I didn't try any OnRender tricks, though I did try changing the style of the cells to be simpler.
EF migrations was essentially a shitty reimplimentation of this approach. If you prefer the c# version it's [Fluent Migrator](https://github.com/schambers/fluentmigrator)
dotPeek is from JetBrains, the same guys who do ReSharper and TeamCity, and it's pretty handy.
we use prism and it's *okay* -- I feel like the documentation could be a hair better sometimes. 
You should check out Servant too: https://www.servant.io. I believe we made som killer features for .NET devs too. Note: I'm one of the founders.
But how about the file itself? My folders were also working properly, the files I manually moved were not inheriting the permissions as expected.
I would suggest against SimpleInjector... We've been between SimpleInjector, Castle Windsor, and Ninject, and we found that SimpleInjector is missing a lot of stuff and seems fairly underdeveloped compared to the other two. At the moment we favor Castle Windsor And unless you're making a super performance sensitive system, the speed of a DI framework is not really an issue. for example, comparisons like this: http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison. Keep in mind that in the test states "Every interface is resolved 500.000" - so the actual time it takes to resolve is nano seconds. If you actually have to resolve 500k instances for some reason, does a single second really matter? In most applications not really...
&gt; Since everyone is plugging their favorite IoC container... Munq! Since everyone is plugging their favorite IoC container... Castle Windsor!
I can't argue with that! I have only implemented Unity and StructureMap because when I looked into DI containers those two had better performance among other things like support.
Having the same issues when trying to send emails by an automated job using MVCMailer
I quite like using SimpleInjector because it is lacking features, makes me think a little more about what im doing and why. Of course sometimes you have to do it a certain way, and in that case, SimpleInjector isnt the right tool for the job.
For the vast majority of cases, it's unlikely. Probably way down the list of performance problems :)
Since you are using TopShelf you must be familiar with MassTransit, Magnum and Stact. These three make .Net a very productive platform to be on.
AppVeyor is excellent. Migrated a whole bunch of stuff a year or so back - nothing but good experiences - very happy with the strong conventional approach + yml + scripting. Deployment works well, auto-discovery of artifacts works well - if your code is struggling with the conventions, you can override them - everything is controlled from your repository. Best to use it as a driver to simplify your build. Long time fan / user of TC, but came up through CruiseControl -&gt; TC -&gt; AppVeyor for .NET stuff, and I don't miss the death-by-a-thousand-configuration-options of TC.
A few other things I swear by: Services Raygun.io -&gt; Exception tracking - is a joy. Papertrail -&gt; Logging with log4net / nlog (it's basically elasticsearch over syslogd) Azure websites if you can manage it. HipChat / slack for team comms Trello Libraries and frameworks This is pretty unbounded, but #Nancyfx and their testing stuff for micro-frameworks (especially if you've got windows services you want to put web UIs on), otherwise, Katana/owin+WebAPI is pretty good there. Hangfire.io is amazing for task processing. People have pretty well covered deployment and containers. xBehave / FakeItEasy or Moq / AutoFixture / Nunit for unit testing joy. I've got a lot of code that uses ReallySimpleEventing, but I wrote it, so I would (plug). Likewise, little gems - System.IO.Abstractions and (another plug) System.Configuration.Abstractions are invaluable. Humanizer for making readable strings out of real software. System.Linq.Dynamic for building clever expression evaluators. There's lots of great stuff out there.
Our team is using TeamCity over AppVeyor as it gets really costly for AppVeyor . Also, we've been using Exceptionless ( https://github.com/exceptionless/Exceptionless ) for error reporting and have been loving it.
I know that feel, that's how I ended up in this thread haha
We home brewed something very similar. Glad we are not the only ones doing this kind of work.
ELMAH for Web application logs and Glimpse for Web app diagnosis.
That seems to be some sort of mobile link of sorts. Here is the full link to the course: https://www.udemy.com/comprehensive-aspnet-mvc/#/
[miniDBA ](http://minidba.com) developer edition is handy if you are doing SQL Server development with performance implications. 
Exceptionless is awesome, really excited for their 2.0 release.
I got a notification on my android udemy app with over 200 apps being $20
Well, observer of an event can be anything. So you could have a webpage be an observer and a database be an observer. You publish the event and both the website and database subscribe to that event. When the page loads, you select all of the past events over a window and then start your subscription to new events. Pattern is pub sub with a query for historical events on refresh.
Scott Hanselman releases a tool list every few years with some pretty cool stuff http://www.hanselman.com/blog/ScottHanselmans2014UltimateDeveloperAndPowerUsersToolListForWindows.aspx
NCrunch &lt;3 
Links for those interested: ([TopShelf](http://topshelf-project.com/), ) [MassTransit](http://masstransit-project.com/), [Magnum ](https://github.com/phatboyg/Magnum), [Stact](https://github.com/phatboyg/Stact). (correct me if I'm wrong)
"world class error messages" Ah, [then you can answer me this one](http://stackoverflow.com/questions/17538696/ninject-how-to-identify-which-class-is-throwing-exception-during-construction). Don't get me wrong - I really like Ninject, it's fantastic, and we use auto-registration to take a whole bunch of configuration cruft off our hands. But in one application we have something that scans assemblies in the same directory looking to auto-register addins. This works fine, until we try to resolve everyone that implements an interface, and one class craps out in it's constructor for some reason (usually because of assembly version mismatches - i.e it wants a different version of JSON.NET or something). Then it's a guessing game as to what class is breaking, where, and how. Because Ninject doesn't have the common courtesy to actually say: Hey, we're trying to resolve this thng, which required calling this constructor on this class, and it went kaboom. AppDomain.FirstChanceException doesn't always work either. 
Out of interest, what was the missing stuff?
Perfect. I was going to have to do this in the new year.
Lots of really great stuff here. One thing I'd add is looking at serilog for logging.
/agree Resharper is a great tool!
I've never heard of autofac, would you actually recommend it over ninject? I personally am using unity for ioc at work, but am curious of autofac. And I'm on mobile or I'd check! 
Sounds like you're doing fine to me kid. Write stuff. Make mistakes, learn how to do stuff better. Write more stuff. You can only learn so much at school/in a book. The best programmers are prolifically knocking stuff out. Then you'll learn about the nuances of n-tier, what works what doesn't. If you want to get involved online just get on GitHub. See what people are doing, if you spot a fix, submit it. Just keep going. Work will come.
Glad that this was useful for your case :)
1. Yes, it is. Make sure you understand MVC which is quite similar. Model - View - Controller. MVC is essentially the future of ASP.Net application development. If you wish, you can delve into WebForms but it's effectively a dying technology (and good riddance) 2. I'd look at the following, they are pretty heravy so do take breaks, [here](http://msdn.microsoft.com/en-us/library/yedba920%28v=vs.140%29.aspx) and [here](http://msdn.microsoft.com/en-us/library/330a99hc%28v=vs.140%29.aspx). There are TONS of blog posts about ASP.Net security best practices, salting passwords, encryption etc. 1. The majority of .Net job offerings use ASP.Net in some capacity. The definitions of certain components will confuse you (Web API, MVC, WebForms, SignalR, I could go on...). It's WELL worth understanding this stack as you know, "The Internet is the future". I would recommend [Steve Sanderson's book on MVC](http://www.amazon.co.uk/Pro-ASP-Net-MVC-Professional-Apress/dp/1430242361), it's not heavy and it actually goes through an application start to finish. 1. Most certainly, to be a modern developer and open to many career opportunities you will need to know JavaScript pretty well. [Code School](https://www.codeschool.com/) is fun and easy to use. It will teach you some quirks of JavaScript that you'll need to know. Always be aware that JQuery is not JavaScript. JQuery is an often used library. 1. [Github](https://github.com) is the best place for collaboration but you'll have to learn how to use Git (or use Windows Git or whatever the weird wrapper is called). Git and source control in general is important but might not be necessary to learn yet. My biggest piece of advice is to concentrate at one thing at a time, don't think "I have a great idea here for a web application, urgh, but what about security, what about scaling it!?" at your level, those problems are non-existent for you. Get the basic app running anywhere, then run through, security, scaling, testing, one thing at a time. It's only when you get to a senior level do you have to consider multiple things at one time and at the start of a project. Just remember, once you learn a language, it's behavior, it's syntax that's all that matters really. For every language. Frameworks and methodologies are easily learnt. The best thing is, once you learn one language, learning another becomes easier every time because most languages (like in the real world) have similar structures and syntax. Don't ever give up. As a sidenote, it's a good career to go down, I am mid-twenties and I earn more than both my parents combined and I am effectively my own boss, choose my own hours, wear what I want. 
I think you're on a good path but here's some specific answers to your questions. 1. 3-Tier architectures are pretty ubiquitous, but you also may want to expand to N-Tier architectures, which generally include some sort of service layer. Architecturally, most modern web applications use MVC, which is a step beyond 3-Tier and has a much more formal presentation layer. 2. Website security and database security are two different things, although they work hand in hand. The link you provided looks good, but its also very old (June 2003), so I'd try to find a more up to date resource. Good web security starts from having a solid understanding of SSL, Cryptography, and keys. 3. ASP.Net offers a lot. I'd pick up an MVC book that covers the whole framework. There's a lot, and generally those books are pretty thick (600-800 pages) 4. I don't think you're as far off as you think. It seems like you've got a decent base, and as long as you keep learning, you'll be in a good place to pick up a junior/entry level position out of college.
Care to go into the difference between Serilog and something like nLog? I've never heard of Serilog, but it looks a bit different.
General question: It used to hog up my CPU resources and was unusable at one point, is this still the case? Do you experience the same? If not, I be downloading that TO-DAY
I'm a self taught developer who worked his way up to CTO. I hire self taught devs all the time. Where are you at?
Autofac is Ninject for those who are performance tweaking ;) Also the IOC container is almost never a bottleneck
I would recommend really getting to know JavaScript. Without client side tools in your belt, your options are limited. I would recommend taking a look at the Mozilla docs for JavaScript and opening up chrome devtools or Firefox devtools to get your feet wet. There is no faster way to get familiar than opening up a console and executing some commands. I would recommend staying away from frameworks at the beginning and focus on learning how to do things natively. Implement your own map, filter, and reduce functions. Learn how to bind events and select nodes from the page. Then learn how to do the same things in libraries like jquery and lodash. After you do that, think about how C# and JavaScript differ. It will make you better at C#. I guarantee it.
I'd argue it's simpler, more flexible, and lighter weight. But those are all "feel"s.
* Fluent Migrator for database migration * Autofac for DI * LLBLGen for ORM * TypeLite for generating TypeScript definitions * NEST driver for Elastic Search * F# :) * Ractive.js if you have to deal with web development 
This looks similar to AWS authentication scheme if I am not mistaken.
It still requires resources (it reserves high priority threads on a configurable amount of cores) but its much more flexible and configurable to your system now. Also more reliable generally. Get on it :)
Yeah, it's been great. Database scripts were the lone holdout on full automation for us for the longest time. It's so incredibly satisfying to kick off a build with a couple clicks from my phone and have it backup the database, deploy code, run db scripts and send out notifications when it's done.
we use, https://bootstrapper.codeplex.com/ to help with a lot of that bootstrapping. You could simply just register an instance of Mapper.Engine, Or using an injection factory to resolve IMappingEngine. 
If you would like to learn more (I like videos personally and well documented tutorials) [Microsoft Virtual Academy](http://www.microsoftvirtualacademy.com/) has a lot to offer. Some schools offer [Lynda(online IT)](http://www.lynda.com/) courses. [Pluralsight](http://www.pluralsight.com/) is by far the best training site and you get very familiar with it once you start your career after college.
This is why I tell my HR people to send me all the resumes and I'll let them know who to follow up with.
Where I said I went icon-by-icon through the IIS config... I didn't drill down on the Anonymous authentication part. It needed to be changed to App Pool Identity from specific user. Thank you to everyone for your help.
Are you resolving IMappingEngine? Are you sure you setup DI for web api and not just mvc? 
I let them justify it by placing the ads and setting up the meetings with the candidates.
Thanks. good to know. 
It's not just version mismatches, anything that causes the constructor to fail on an object will give you a fairly useless error from Ninject. This should be a minimum working example to demonstrate it - I don't have VS in front of me yet, I'll test it when I get to work. In this example, trying to resolve IProcessController will result in a useless exception message that doesn't tell you that the thing that actually blew up was ProcessorBad. public interface IProcessController { } public interface IProcessor { } public class ProcessController : IProcessController { IProcessor[] _processors; public ProcessController(IProcessor[] processors) { _processors = processors; } public void Run() { } } public class ProcessorOkay : IProcessor { } public class ProcessorBad : IProcessor { public ProcessorBad() { throw new NotImplementedException(); } }
i just double checked our code base to be sure and here is what i found Register: container.RegisterType&lt;IMappingEngine&gt;(new InjectionFactory(_ =&gt; Mapper.Engine)); Resolve: public GameChallengesController(ICompanyDataContext context, MailerService mailerService, IMappingEngine mapper){ link the nuget package page for that webapi2 boostrapper 
No one has mentioned SOA yet. nService bus and mass transit are the two big SOA libraries. There are a dozen smaller ones for rabbit mq. Also for search theres nLucene.
That ReallySimpleEventing looks pretty good. Props for making it :) Just wondering a few things; how thread safe is it? I've had trouble with event distribution in heavy multi-threading applications before. And since [at the github page] you're comparing the framework to a enterprise service bus - how scalable is that framework? It seems like its just for inside one application... Or is it easy to scale and have event distribution over multiple applications?
I agree about GitHub. Both their Windows and Mac clients are very easy to use. Also I'm sure the other contributors will definitely help out, if needed.
With the things you listed in your school experience you are ready to enter the job market as a junior developer now. You already have more experience and a better grasp of concepts than some people I know who are senior developers. My recommendation to you is to find a job as a part-time programmer while you finish school. Nothing keeps your skills sharp like a job. 
If your wanting to look at a very nicely architected n-tier project look at the efmvc project. I used it as a reference for MVC, entity framework , DDD, TDD and unit of work patterns. Have no idea what the hell I just typed? Then go look up the Gang of Four design patterns. They should help you learn how to design your project. Finally the last design pattern I would suggest is the SOLID pattern. This makes sure you keep your code as reusable as possible. Http://efmvc.codeplex.com http://www.blackwasp.co.uk/GofPatterns.aspx http://www.codeproject.com/Articles/703634/SOLID-architecture-principles-using-simple-Csharp
This is a JWT tutorial using node but could also be used with Web API [Angular-JWT](https://egghead.io/series/angularjs-authentication-with-jwt) 
You would build it exactly the same as a regular Asp.net app that used jquery. Check out the sample app in VS. the only changes you need to make on the client side is to handle 401's etc such as when you're not logged in etc. 
Thanks for the link! I was thinking about getting an egghead.io account. If you have the pro-account, what do you think of it?
I found this tutorial very helpful when I was learning to build an Angular app with WebAPI. https://bitbucket.org/david.antaramian/so-21662778-spa-authentication-example/overview
If you are okay to use an external login provider, Auth0 seems to make it rather easy: https://auth0.com/blog/2014/06/24/authenticating-your-angular-app-with-auth0-and-asp-net-owin/
Thanks! Anecdotally, used in some very large (household name) UK websites So, its as thread safe as the activation strategy, and the default activation strategy creates a handler and all its dependencies per event. Providing the event handlers don't do explicitly un-thread-safe things (statics etc), it'll be absolutely fine. Generally, an event handler is treated as a unit of work, per event, and handlers for a specific type of event are distinct units of work (can succeed / fail independently). The threading model of events is extensible - in short - handlers are executed on the same thread that raises them, linearly. Async handlers are executed using the TPL in the background. But generally, don't worry too much about that because that's the entire reason the TPL exists :) Its generally about in app eventing and separation of concerns, you're absolutely right. Re: distribution - I'm working on an Azure and Amazon backplane for the distribution of messages across nodes so that when an event is raised, it'll be multicast to all nodes that contain handlers for that namespace/type combo. Realistically, that won't be ready until after Christmas.
Crazy, I'll verify this sample because my experience is a message that tells you exactly what it couldn't resolve, and lists three steps to resolve the issue...
This does look like something you are looking for: http://www.codeproject.com/Articles/32643/GMap-NET-Great-Maps-for-Windows-Forms-and-Presenta http://greatmaps.codeplex.com/
thx i'll look into it.
target .NET 3.5 and not higher, as .NET 4+ is not installable on an OS lower than Vista. Use winforms. That's it. But frankly, I don't see why new software should target 2000/xp, as these OS-s aren't supported by MS anymore, so no-one should really use them (as no security issues are fixed anymore), even though they run perfectly fine and their bits aren't rotten. 
You can use the latest IDE (2013). You can target older versions of the framework from within the project properties. The framework is going to be a bit harder, but if you have to support Windows 2000 you're pretty much stuck with 2.0. 4.0 supports Windows XP (but 4.0 is EOL in 13 months, so sticking with 3.5 is probably the best idea). 2000 only supports 2.0 officially, but if you search around the web some people have gotten some of 3.0 / 3.5 it to work by manually copying some files into place. Really though, if you're supporting something as ancient as 2k, you probably don't care about new features, so just stick with 2.0. 
Have you checked the good ol system event log for anything?
I don't have any specific advice here but I have done more than my fair share of building stuff. With wonky errors like this I would try and simulate the build server environment on another machine and see if you can replicate the error over there. If it is always a call to GetAssemblyRefHash then I'd really take a deep dive into what that does.
It's usually GetAssemblyRefHash but not always, I've seen the same error but with a different API once or twice. I've looked into it but it doesn't seem to do much.
I have, oh lord I have and nothing is jumping out. As far as I can see, the server is pretty healthy.
plataform... 
I ran tests in a previous job for that kind of issue. It was .NET 4.0 at that time but signalr was not considered at that time (either because it was not yet available, for not long enough or I did not know about it). If I recall correctly, I managed to have 7000 long polling connection on the same server (Amazon EC2 large instance) without any issue, performance drop or significant server load. But then, it was just a basic load test to check how iis would perform with no operation done on the request. The 7000 number was the limit set to the concurrent connection if I remember right. I found a tool at that time that greatly improved the number of concurrent connections : https://iistuner.codeplex.com/
Well, think outside the box. What kinds of pooled resources are there in Windows? Handles, process address space (2 to 3 GB for 32 bit processes even on 64 bit machines), swap space to back committed memory allocations (which might include executable code allocations) or some temporary resources. There have to be tens to hundreds of pooled resources beyond strict ram and disk that Windows could run out of. I can't think of all of them while on my phone, but your best bet is to go read the sys internals blogs to find out what some of them are, and download some of their tools like Process Explorer.
Honestly, I don't even know where to start. I'm not seeing any events claiming that any resource has run out so I've not got a clue at this point.
It's been a long time since I've looked at it but if memory serves you can tweak the settings in IIS to be way more conducive to a long polling strategy. 
You won't get any event for some of these resource limits, just failed API calls like you've found. Start here: [Pushing the Limits of Windows: Physical Memory](http://blogs.technet.com/b/markrussinovich/archive/2008/07/21/3092070.aspx) [Pushing the Limits of Windows: Virtual Memory](http://blogs.technet.com/b/markrussinovich/archive/2008/11/17/3155406.aspx) [Pushing the Limits of Windows: Paged and Nonpaged Pool](http://blogs.technet.com/b/markrussinovich/archive/2009/03/26/3211216.aspx) [Pushing the Limits of Windows: Processes and Threads](http://blogs.technet.com/b/markrussinovich/archive/2009/07/08/3261309.aspx) [Pushing the Limits of Windows: Handles](http://blogs.technet.com/b/markrussinovich/archive/2009/09/29/3283844.aspx) [Pushing the Limits of Windows: USER and GDI Objects – Part 1](http://blogs.technet.com/b/markrussinovich/archive/2010/02/24/3315174.aspx) [Pushing the Limits of Windows: USER and GDI Objects – Part 2](http://blogs.technet.com/b/markrussinovich/archive/2010/03/31/3322423.aspx) Read them all in order because they build on each other. If i had to take some stabs in the dark - you're running out of handles or paged pool or address space. 
I think you're running out of paged pool space - in the [Paged Pool](http://blogs.technet.com/b/markrussinovich/archive/2009/03/26/3211216.aspx) article from above, you can see Mark running a leak test that leaks paged pool resources - and then arbitrary applications start spitting out the exact error you're seeing. You could watch the paged pool usage in Process Explorer as you run your build to try to see if I'm right. Paged pool limits should raise with the amount of physical memory, so I'm not sure why the problem didn't go away when you assigned the VM more RAM. As one more shot in the dark, you might want to try to raise the amount of swap space you have allocated. Edit: Also, try looking at pool allocations by tag using the [Poolmon](http://msdn.microsoft.com/en-us/library/ff550458.aspx) application, which according to Sysinternals is installed in the [Windows Driver Development Kit](http://www.microsoft.com/whdc/devtools/WDK/)
Thanks! I stumbled upon those articles you linked not long ago so I'm currently watching perfmon. I've had some ideas of my own along similar lines to yourself. Balls, as I was typing this out, the build failed again. Here's what perfmon looks like: http://i.imgur.com/q2queSW.png You can see where it dies as the Committed Bytes goes flat. I'm not seeing anything there that looks like it has hit a limit =\
Try adding the '% commited bytes in use' counter too. Edit: and '% usage' for the paging file
Microsoft Virtual Academy has some nice video resources to get you started.
Take a look at this article, if you haven't seen this already: http://blogs.technet.com/b/askperf/archive/2007/03/07/memory-management-understanding-pool-resources.aspx Download Process Explorer, get the Microsoft Debugging Tools installed, get Process Explorer configured with symbols. Then in Process Explorer, open the 'System Information' tab (click on the graphs at the top of the window), switch to the memory tab and post a screenshot - it should now give us the paged pool and non-paged pool limits. Watch the pools usage during compilation to see how high it gets. Additionally, that article gives a registry key that seemingly can be used to control paged pool limits; maybe we can raise them. .. or maybe I'm wrong entirely and it's not the paged pool, but it seems like the only answer to fit. Some other questions: * How much swap space do you have configured for this machine? 8 GBs? * And you said you're using 64-bit msbuild, but what about the CPP compiler program that the msbuild processes are launching? And have you confirmed that by sniffing what processes are launched to double check that the 64-bit compilers are being launched? Proc Exp will show you the bitness of every process. 
This is a better link for configuring Process Explorer with windows symbols: http://blogs.msdn.com/b/vijaysk/archive/2009/04/02/getting-better-stack-traces-in-process-monitor-process-explorer.aspx
Does Autofac have decent documentation available? Last time I tried to use it, it seemed the guides on the website were years out of date and promoted methods that don't exist anymore.
+1 for this book. I am currently about 70% of the way through it and I absolutely love the author's style.
Sorry man, still supporting windows 2000 and XP here. I dont expect to ever get rid of the servers that 2000 is on because of legacy data. I still write apps for the, in DOT Net 2.0 welcome to legacy apps :P 
Piggy backing Here's Angular with Web Api using JWT http://markwalsh.io/development/2014/12/02/ASP.Net%20Web%20API%20with%20JWT/ 
Thanks guys - did you know MVC before?
Yes, I've used MVC in other languages and web frameworks in the past, and an earlier version of ASP.NET MVC about 4 years ago.
While the article could be interesting, the grammar is so bad that I could not finish reading.
I skipped over parts for the same reason but the point is made near the end (yes the grammar is still bad). &gt;While Sun Microsystems, opening up Java, created an internal competitor, Microsoft, opening up .net, created a full world of opportunities for selling more Visual Studio, more VMs in Azure
Another +1 for this book. This combined with material from [ASP.net](http://asp.net) allowed me to dive right in and make rapid progress on a project at work.
&gt; Why Microsoft is not like Sun Microsystems Because java sucks and is totally retarded while .Net and the familiy of .Net languages are properly designed by experts who know what they're doing.
Why must every post on virtually every programming-related subreddit devolve pretty much instantly into bashing random programming languages. I get it guys, "Java is old", "C# is such a great language", it's like beating a dead horse already. Can everyone just pick the tools they like and be civil for a change, the world isn't going to burn in a fire because some people actively choose to use a different technology then you.
If you go with Asp .NET vNext on Core CLR, you can run SignalR 3 on any windows computer (or mac or linux for that matter). Doesn't matter if you're restricted to .NET 2, you can still use .NET 4.5 (which is awesome). It doesn't install ANYTHING to the target system, and you can xcopy-deploy it all (including the CLR).
This couldn't of come at a better time. We just started 2nd round testing of an application at my company that relies heavily on signalr. This round's main focus was on stress testing the various components of the system, and one thing that was brought up was how to test the signalr portions. I'll definitely be taking a look at this for my team.
Hope it is able to make your testing easier. Tutorial to [Get Started](http://www.wcfstorm.com/wcf/getting-started-with-tresi.aspx) Tutorial on [How to call a Hub method](http://www.wcfstorm.com/wcf/tresi-how-to-call-a-hub-method.aspx)
thanks!
The fingerprints are binarized down to lines. The minutiae are extracted. Each minutiae has an x and y coordinate and a theta direction. These numbers are what's stored and compared to future scans
Me too! It looks awesome
You should take a look at exceptionless. It's like elmah on steroids and is open source too. 
Do you even know what a file with .sql at the end means, what the code inside it does? I don't really think you do. The sql in the file is DDL SQL, 'data definition language' SQL, meaning it contains table, pk and fk declarations. Running the file on a sql server database (I assume you target a sqlserver db) means it will create the tables, pk's and fk's. So you have to make a connection with the sqlserver database, in sqlserver management studio or inside vs.net but if you use vs.net you have to have installed the sqlserver tooling, which you might not have (which is likely). As you use sqlserver express, you can download the sqlserver management studio tools for express separately. 
Sorry but English is not my mother-tongue :¬/ Can you please point out the worst errors so that I can learn something from this post :¬)
You can order the course directly from 3Dbuzz for 14.98 http://www.3dbuzz.com/training/view/comprehensive-aspnet-mvc
No, not even remotely. If you want to learn this, then the WinAPI would be a better place to learn, but that is outsie of the .NET framework or any managed language.
I would say no it probably won't.
&gt;As someone looking to get into system administration, would you recommend that I invest my time in learning .NET (at least partially)? Or should I leave .NET to the dev's? Leave it to the developers, since that's who it's for. You should use Windows if you want to be a system admin. And learn other MS products like Active Directory and so on. Most IT departments are all Microsoft all the time - Office/Outlook, SharePoint, Windows Server, etc.
&gt;If you want to learn this I'm sorry. When you say *this*, what are you referring to? (because I kind of asked at least 2 different questions)
Familiarity with .NET is very useful when using PowerShell. Also, developer skills are very useful as a sysadmin.
Not even close. .NET is an important part of Windows and does provide ways to do quite a lot - but you can't do everything in it, and it does not in any way cover all functionality. Also, if you're a sysadmin, it'll be of limited value to begin with - probably only applies to you if you're going to be leveraging Powershell.
Windows internas.
The .NET framework is not open source. The .NET Core framework is. And that one does not contain GUI frameworks like WPF or WinForms.
&gt;if I learn .NET, will it significantly help me learn about windows systems (from a sysadmin perspective)? The answer to this would be NO. As far as I know windows sysadmins don't require any knowledge of .NET at all. Their tool set is totally different. Post your question to /r/sysadmin. They should have better insight into this.
If you want to do systems administration for Windows platform I would not recommend learning .Net as your vehicle to do so. Look at the MCSE certification books. Microsoft Press books are very good. Trying to target learning .Net classes and libraries that relate directly to Windows sysadmin tasks would be a chore. The intersection of .Net and sysadmin is usually Powershell, so it would be worth picking up material on that, but your typical .Net learning materials and the community are going to focus mostly on C#. After you've gotten your head around plenty of the MCSE type stuff and move onto Powershell you'll start to get curious about .Net, but you'll only need to know so much. 
you can do this with Xamarin kind of...
No you can kind of not do this with Xamarin... Xamarin is for Mobile App dev, this means Android and iOS. Not Mac and Linux.
Mono has been supporting WinForms for ages, and the are other GUI toolkits (GTK# for example) out there.
You can use Xamarin for Mac development.
The .Net Framework **is** open source. .Net Core, on top of being open source, is also cross-platform.
You can do that with mono. Open sourcing the .Net Framework makes it much easy (and legal) on mono to copy over code. Also, mono would run on top of the new cross platform .Net Core. So, it would be much easier and would run much better.
Post an apology at the start of the article. Just say that English is not your first language. Readers will be prepared and more forgiving of the mistakes.
Not at all. If you want to dive in deeply you need to mess with C++ and Win32.
It was just open sourced, but it has been 'source open' for quite a while. http://referencesource.microsoft.com
Yeah sorry man, the others are right. I'm working on a desktop tool using Xamarin right now, writing it in C#. But damn does Xamarin pale in comparison to VS !
That's just a tiny part. A lot is missing. Pull requests are not accepted. The .NET Core Framework is truly open source.
Where can I see the .NET framework source code then? Please don't say referencesource now, because this is incomplete. A lot is missing. And where can I submit pull requests?
The problem isn't so much the open sourcing of the framework, the problem is that the framework sits on top of the OS and calls OS specific calls to do OS specific things. This means ultimately that it may well be possible, but the experience would either look identical across all platforms (And thus be awful on anything other than windows) or be very different on each platform (much like what we have today).
That's why they have made a point to distinguish between open source and 'source open'.
First of all.. reference source. Secondly...https://github.com/Microsoft/referencesource. Not EVERYTHING is there, but a lot is and a lot more is copied on .Net Core. Open source doesn't mean community contributions. Open source means the source is open and says what you can do with it. All this code is open source under the MIT license and is publicly available.
Patience. More and more will become available over time. Microsoft couldn't get everything ready for the initial release.
'source open'? Where did you pick up that term? Never heard of it. 
Nope. The reference source is on github and that's it. They'll port stuff to Corefx, which will make it a more outsider friendly version of it, so people can provide PRs, and actually compile the code. But what's opened as reference source is what's going to be open at this point: e.g. wpf and winforms to name few things, aren't going to be opened at all, not now and very likely not in the future. It took me 4 hours to get Linq to Sql compiled from the reference source and after the resources were pulled from the regular dll as they're not available at referencesource, so compiling that stuff isn't straight forward as much stuff is missing. 
This guy seems to be incapable of understanding what other people say. He'll repeat back the same thing they just said, as if they completely failed to understand it. At least, he just did it twice in a row: to OP, then to you.
That was his question, doofus. He said, "now that the framework is open, will the GUI components follow suit?" Did you even read his question?
I'm not aware of taking pull requests being a requirement for open source. If you have the source, you can branch it and take all the pulls your heart desires.
I interpreted it as, if you want to learn everything about Windows, then the WinAPI would be a better starting point. I'm a developer, and while I think learning .NET taught me a lot about Windows, it also removes you a lot from the operating system. .NET gives you a layer on top of the OS that makes a lot of functions more accessible, but also obfuscates a lot of what it's actually doing. Looking into the Windows API directly, or using lower level languages would let you see some things that .NET wouldn't. It can definitely be useful though.
While I can post an apology, I suspect that it would not help me writing in a more correct English next time. Just a question: was my English so bad to make people's eyes bleed? :¬)
Scott Hanselman's talk at hack.summit(). I've heard it in a few other talks about open sourcing .net.
Sorry, I see the comment wasn't about me. I took a screenshot during Hanselman's talk which, as I remember it, suggests that the entire framework will eventually be open and only core will be cross platform. When I figure out which machine I took the screenshot on, I will post it.
No, I was referring to AngularBeginner. Sorry.
Not bleed. It just needs a bit more effort to follow, because it's like the eyes don't "flow" over the text as easily... For example, that phrase would be better written as.. While Sun Microsystems created an internal competitor by opening up Java, Microsoft created a full world of opportunities by opening up .net, and will sell more Visual Studio licenses and more VMs in Azure. It's not the individual words, but the general construction of sentences that can be improved. I am not a native English speaker too, and this kind of experience you get by reading, reading and reading. Read books, news articles, whatever... You kind of incounsciosly get the grasp of it... In some years you will be writing as a pro, I am sure. :)
[Here's the image](http://i.imgur.com/CwfzNpe.png?1) Hanselman shared on the hack.summit talk. You can see it's not just .NET Core (.NET Core CLR) that's planned to be open sourced and cross-platform, but also the BCL and FCL (the framework). It's unfortunate that the ".NET Framework" is considered to be much more than what's actually the framework, but also includes all of the OS-specific stuff (in blue in the image).
Google xamarin forms 
&gt; I interpreted it as, if you want to learn everything about Windows, You had it right/interpreted it correctly.... I just didn't really have a clear and concise question in mind. So I wanted to clarify what exactly you answered. And your response helped me refine what it was that I was asking. So thank you for taking the time to reply. I'm somewhat new to the windows world (in terms of administration/automation), so I'm kind of exploring topics to focus on next. I was kind of hoping you guys would say that learning .NET would give me some deep, profound understanding of the OS... but the consenses is "no, not really". And that's why I asked before diving into it... So, thank you again!
This sub reddit is far more active that I imagined. I can't respond to all of you, but thank you for the time you took to reply to me. I'm a student looking to end up doing system administration. I'm exploring topics to learn next. And, from your responses, it seems that .NET won't be of too much help to me (though, would be useful. And, if anything, learn WinAPI instead). Now I know to not spend too much time on .NET. Thank you all again for your time.
This sub reddit is far more active that I imagined. I can't respond to all of you, but thank you for the time you took to reply to me. I'm a student looking to end up doing system administration. I'm exploring topics to learn next. And, from your responses, it seems that .NET won't be of too much help to me (though, would be useful. And, if anything, learn WinAPI instead). Now I know to not spend too much time on .NET. Thank you all again for your time.
This sub reddit is far more active that I imagined. I can't respond to all of you, but thank you for the time you took to reply to me. I'm a student looking to end up doing system administration. I'm exploring topics to learn next. And, from your responses, it seems that .NET won't be of too much help to me (though, would be useful. And, if anything, learn WinAPI instead). Now I know to not spend too much time on .NET. Thank you all again for your time.
This sub reddit is far more active that I imagined. I can't respond to all of you, but thank you for the time you took to reply to me. I'm a student looking to end up doing system administration. I'm exploring topics to learn next. And, from your responses, it seems that .NET won't be of too much help to me (though, would be useful. And, if anything, learn WinAPI instead). Now I know to not spend too much time on .NET. Thank you all again for your time.
You're an asshole.
As an aside from .Net, I'd look at Chef and Docker
Hey! Cool! How does this differ from Crank?
If you want a good book to get you started with the WinAPI check out this book http://www.amazon.com/Programming-Windows%C2%AE-Fifth-Developer-Reference/dp/157231995X/ref=sr_1_5?ie=UTF8&amp;qid=1419265479&amp;sr=8-5 it was the curriculum material used by a Win32 class I took and it's actually a very solid book worth having in your personal library.
Crank is a great free command line tool but is not aimed at testing Hubs. From what i know, it works directly with PersistentConnection EDIT: And also with this tool you can specify the input for the load test to make it as close as possible to real world scenarios
Okay cool!
It's just a way to abstract away the implementation from the rest of the system. It's useful if you want to use mock objects for testing purposes, among other things.
Git. Works fine with visual studio and integrates great with tortoise. Industry is moving all towards git, go with that
You'll know it when you need it. It's usually along the lines of "I need objects to always have this one method but they can't always inherit from the same object, how do I enforce that?" Blam, interface
I dig it, thanks! edit: But what about being used as another layer of abstraction (between the calling method and the repository class)? Or am I looking at that wrong?
I've used Mercurial for a few years, and it was a huge improvement over Subversion. However, I've seen Microsoft "lean" towards Git lately, so if you are new to both, I would recommend Git.
It allows you to change your technological implementation without rewriting lots of code. For example, you currently have an EF repository but you could create a new implementation which was in memory. Todo this you would just create a new class that implemented the interface and pass that to yoir controller instead of the EF one
My experience with Git was significantly better than with Mercurial. My journey to Git was cvs -&gt; svn -&gt; Git -&gt; Mercurial. Mercurial wasn't a choice. It was forced on me and I hated every moment of it. While the learning curve going to Git from svn is a bit steep, it is easy to get used to . Git on Windows lags behind Git on Linux by a bit but I think that is true of quite a few unix-y apps. I've used Git extensions for years and I have no complaints. Used with Perforce Merge instead of Kdiff3 which ships as the default merge/diff tool for Git extensions, it is a pleasure to use. 10/10 would version with Git always. :D
It's hard to search for quality posts on the subject because it is changing so fast. I'm not sure if tortoise was available for Git [in this comparison](http://blogs.atlassian.com/2012/02/mercurial-vs-git-why-mercurial/) and he pooh-poohed all over Gits Windows integration. It sounds like that has gotten better... I used TortoiseCVS a dozen or so years ago and was pleased.
Atlassian make some nice tools for local repos if you have a compelling reason to not use github. Literally anything is better than sorcesafe though.
Thanks. I'm leaning that way too, but need to build up the argument for the powers that be.
Thanks... I'll look into that. Coincidentally (or maybe not), the Atlassian site and blogs have actually been the best place I have found for researching the subject. 
I went from CVS (linux shop dot-com) to SourceSafe (MS partner corp shop) and it was a bitch. Thanks for your input... it will help me build an argument.
I argue that Git does integrate better with .NET tooling than Mercurial, but also that the gap will increase even more: Both Microsoft and the .NET open-source community tends to favour Git (Microsoft is nowadays using Github for their .NET related stuff rather than their own Codeplex, Codeplex supporting both Git and Mercurial (and more), Github only supporting Git). Visual Studio 2013 has official Git support, but not Mercurial support (as far as I know). Github seems far most common among open source .NET projects now, many projects that previously used Codeplex are now using Github. The .NET community lives close to the JavaScript/Node.js/web community, also favouring Git over Mercurial. You should also check out [SourceTree](http://www.sourcetreeapp.com/), which makes using Git on Windows a lot easier for newcomers (and is a great everyday tool for advanced users also).
I've had positive experiences with both, however IMHO if you are working with a small team, Mercurial might be a bit of overkill (albeit not as much as TFS) as well. If you using, or are planning to use Visual Studio 2013, it will support Git repositories right out of the box which will allow you to use VS's built-in versioning tools without needing a 3rd party plug-in. So I would have to say Git has a slight edge for your needs.
we use atlassian stash for our centralized vcs system. It's a hosted git server. $10 for 10 users too. Very easy, and integrates nicely with Jira and TeamCity Also, if you are worried about lamp people using it keep in mind the ASP.NET and the rest of the .net framework is opensourcing itself on github. Git definitely has won in the Microsoft world
+1 for mocking. Read up on Moq and Inversion of Control. It means you can test in isolation.
Important to note why its going towards Git. Git is an incredible source control system coupled with Github and isn't restricted to your language choice. Its also hosted "in the cloud" so theres no need for server maintenance or creation.
Doesnt compare with Github which you'd most definitely benefit from
In my experience it really doesn't matter. I tend to use the command line for both, regardless of the tooling available, and for 99% of commands you'll be doing day-to-day there really isn't much difference. What I will say is that your team will need time with a GUI if they choose to use one. There will be a time when someone does something they shouldn't have, and find that what they know about git or Mercurial might not translate fully towards the tool they are using.
I particularly like using Git on Windows for .NET stuff. I would NOT recommend the VS integration that VS2013 comes with though, I would recommend getting [Git Extensions](https://code.google.com/p/gitextensions/) - this gives you the UI tooling, and provides some integration functionality in VS. I use the command line for pushing/pulling/merging, but the UI for committing and resolving merge conflicts. Edit: Oh, and before you and your team dive head first into Git, I'd strongly recommend that you understand how git works - particularly in regards to **rebasing**. If it's misused, it can completely balls up a repo and put you in a situation where a lot of work is lost or corrupted. Git is like an extremely sharp knife - It can be used to perform a wide range of things, but if you misuse it, you will lose a hand. 
I'm not sure if this helps but here you go. The interface is used because the implementation shouldn't matter. Abstracting the implementation details away from the consumer decouples them which makes for easier changes. Lets start with a real world example (skip this if it is confusing) of a power outlet. The interface is defined by the physical shape of the plug as well as the voltage/amp output. If your widget obeys the contract you can plug it in and get power. The widget itself doesn't need to know where they power came from. It might have been by burning coal, nuclear, solar, wind, etc. It just needs to obey the contract. Doesn't this make sense? Why would a lamp need to know the real source of power? It doesn't add anything necessary for it to operate. This allows the power to be changed at any moment in time while the widget still works. A storm comes along and the power goes out. What can you do? Well, since we have the contract, we can hook up a generator that burns fuel and generates power adhering to the contract. The lamp can be turned on without any changes. The lamp behaves in the same manner as before. Sounds like a great feature to me. Now lets go back to the repository pattern. Your application's logic requires operations against a data store. We need to create, read, update, and/or delete data. If we directly interact with the data layer, then the logic knows we are saving to a SQL database for example. Why should the logic care where the data is actually going? My logic doesn't care about writing packets directly to the network, why should it care that we are talking to SQL Server? What about MySQL or SqlLite? Ah ha! It shouldn't. It is not your logic's responsibility to know the implementation details of some other aspect of the system. Muscles don't care about how Oxygen gets into the bloodstream. It just expects it to be there. It is up to some other implementation to provide it. Humans use lungs to extract it from air while fish use their gills to extract it from the water. When I'm trying to read a user's information, I don't care where it comes from as long as the object obeys the contract. Lets assume there is a call "User GetUser(string username)". As long as I act upon an object that provides this contract, I can do all the logic that is necessary. Later I can change out the exact implementation without breaking any of the logic. We can switch databases, use different providers for performance against specific versions, execute against smarter objects with built in caching, and we can even switch to calling web services on external machines. Anything can be used as long as it obeys the interface/contract. Another one of the benefits of using this pattern is that it allows you to have your logic unit tested against in memory data stores without having to worry about databases or database states. You inject the concrete implementation to the logic layer and it obeys the contract. You can do this by creating the implementation yourself or using a mocking framework. The logic calls GetUser with a username and expects a user to be returned (or null depending on your error handling architecture - out of scope here). The unit test executes against your mock while the live code executes against SQL Server. The same logic is used for both cases. If you tightly couple an implementation such as Entity Framework, it might be really hard and sometimes almost impossible/not worth it to rip it out or change it later. Keeping a clean interfaces allows the pieces to be changed without causing unforeseen consequences. Also this flexibility extends to your customers since they might not need to buy expensive solutions like SQL Server. Total cost of ownership is then your product and SQL Server whereas the flexible route is just your product (performance aside). It is much better that they give that extra money to you. :) As with everything, this depends on your project and scope. Flexible systems are much better than non-flexible. However, all patterns can be taken to extremes and become a nightmare (see Java architecture jokes/nightmares such as enterprise FizzBuzz). Just keep in mind, if it is causing you great pain to implement repo pattern, you probably aren't doing it correctly. Repos should be very easy to implement. The repo interface is created, the logic only communicates via the interface, there is at least one concrete implementation of the interface, and the logic layer has the concrete implementation injected into it. I hope this helps. The repo pattern is very useful.
Like multiple other people have mentioned, give GitExtensions a try. It's the only UI I've used that I haven't felt limited by.
Our experience was actually opposite of most people by the sounds of it. Note that the Visual Studio integration was equal for both items. Microsoft is leaning git but there are other plugins that give mercurial support (also note that the Git Extensions seem to be better than the native VS2013 support, I don't know why). But that to us was a wash, it was the Explorer integration that was the item that gave the edge to mercurial's tools. With the git tools we kept running into limitations/problems. Git for Windows is... not great. Especially if you run into an issue. As soon as there is a merge issue, it throws you into the command prompt with no help. It's just sort of, "OK, have fun and let us know when you fix things". TortoiseGit is actually pretty good but it was missing some features that we wanted. It was the second best item we found though. Atlassian's product SourceTree was slow and would just crash after being left on for 30 minutes... We never figured out why but for the week that we tried it, many times were heard the screams of "F*** SourceTree". We tried about 7 or so different apps for Git... To say that we did not care for them is being polite. The best Explorer plugin that we found for Git was actually TortoiseHg. That might sound odd but there's a plugin called hg-git that let's you use TortoiseHg to maintain your git repos. It was a pain to set up the plugin but once it was up we liked TortoiseHg hands down more than anything else out there. Note that we have both Hg and Git repos and with that plugin, it doesn't matter. It treats them the same.
Do you really need distributed source control? It sounds not, so you may consider sticking with SVN. Also, if you have msdn, why not use TFS? There's not requirement to use all its features. 
I highly recommend NOT using Windows Explorer with Git. Git is VERY visual (graph). I would recommend GitExtensions or something similar. You're going to be in pain using non-visual tools.
Great response! Up vote ahoy!
It's used for that too, to decouple functions from their argument contracts
Well written, thanks for the effort.
Sadly that project has been more or less dead since about 2011. IronPython's community sort of took off but IronRuby mostly died when Tomas Matousek, etc. fell off the face of the earth. Not sure what happened to them actually. So unless someone decides to do a fork or something, not much chance.