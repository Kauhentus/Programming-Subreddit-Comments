That would be a great great start for me. Even just having a very basic crud like app to get going on with core 2.1 and rds sql server would be great. Would you be willing to provide a really brief step by step (it can be super rough) on how I could take a basic mvc core Web app I make with the dotnet new command for example and hook it up to rds sql server and deploy in aws? 
When you hear someone say they dislike C# or [VB.NET](https://VB.NET) most of the time it's because they don't use that language they 'dislike' or maybe they have used both and simply prefer the other. I can tell you this with certainty, each language can do what the other does and neither is better then the other. It truly does come down to personal preference 
If the tutorial was more generalized, so you can achieve CI/CD using whatever tool you choose (be it VSTS, TFS, Jenkins, Shippable), I would find more value in it as a "tutorial for CI". My only issue is that this doesn't focus on CI but how to do CI with a specific tool. I'd find more value in it if it were title something like "How to easily implement CI for .Net apps, using Shippable". That tells everyone that this is a Shippable specific tut, and might be interesting to see how it compares to VSTS or Jenkins or something. But if I were a dev who's never done CI and I stumbled upon this post, it would tell me nothing about how to do CI. It just tells me how Shippable does CI. 
&gt; And it's not that expensive. It's a pretty great DBMS for a fair price, yeah, I saw pricing for Oracle, DB2 and HANA (that one is the worst due to the amount of hardware required) and it was shocking...and there's not an easy way to get an on premise development version of the above vs SQL Server Developer Editon but yeah if you don't need RS, IS , AS, Availability Groups etc of course I would use Postgres. 
So I already have both files, and I can't get access to the contents of either.
It's nicely presented. There are other heaps too, although I don't know what's in Core, but the CLR has a high frequency heap for example. Might be interesting for part three to do something on any differences between CLR and Core? 
Thanks. Looks promising but I don't think I have it installed. I know I didn't install it manually and I checked for it following instructions online and didn't find it (though I had to cross-reference like 5 different things and may well have missed something... I wish Microsoft would make this stuff easier). They also have a fix for it but trying to install that gives me an error. I might keep looking into this but I'm getting really sick of googling all these errors so for now I'm going to cross my fingers and hope this isn't the issue.
But why?
Seriously? No clue. But if it helps someone? I'm all in.
Yes, interested. Would be nice to focus on mixed-mode DLLs; how they manage to get C++ unmanaged code and managed code to work in the same module.
For the IP and port you can also specify that in the launchSettings.json: "Kestrel": { "EndPoints": { "Http": { "Url": "http://\*:5123" } } } A lot of the information is also in the official docs: [https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.1&amp;tabs=aspnetcore2x](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/linux-nginx?view=aspnetcore-2.1&amp;tabs=aspnetcore2x) It goes into the basics of running the site on nginx, IIS and other hosting scenarios as well.
Hiya, not sure if this is your article or not, but I'll ask anyway. At the end of the article it mentions putting Apache in front of the Kestrel server and using it as a reverse proxy to allow some of the old website to run alongside the new site. We have a similar situation in work where [www.ourtopleveldomain.com](https://www.ourtopleveldomain.com) is an old PHP site which serves both the front end website and the API endpoints. We're building the new system with all the lovely Azure offerings with all new sub-domains for the relevant services API/Web/etc. This is fine except we have to change the current front end with a new website such as Wix, whilst keeping the API in place until the new API is up and running. Our current thinking is that when you hit [www.ourtopleveldomain.com/frontPage1](https://www.ourtopleveldomain.com/frontPage1) that we just have a PHP redirect to [www.thenewwixsite.com/frontPage1](https://www.thenewwixsite.com/frontPage1), but if there is a better way of accomplishing this I'd be interested to hear! Cheers
This has to be the most useless thing ever. Who in their right mind would do this?! I can't imagine a single use case for this.
Not my blog post. If you are running on Azure, you can use a [load balancer](https://docs.microsoft.com/azure/load-balancer/load-balancer-overview?WT.mc_id=social-reddit-marouill) to basically transition the traffic from one site to the other. If the design is similar, you can also progressively transition users to the new site to make sure things aren't breaking without your user really noticing that they are hitting a new backend. 
Hey [quzox\_](https://www.reddit.com/user/quzox_), Thank you for this idea, unmanaged code code investigation is a nice topic to deep into. I'll plan a post on it ;)
My faith in humanity has been restored by your post. You are my hero. Thank you so much for the incredibly detailed post. I'm at work right now but plan to try things out as soon as I get home. I'll let you know how it goes. Thank you again, so so much. 
Surely Peachpie must have better ways to justify it existence. 
I have to second everyone else. Wtf...
"[They] were so preoccupied with whether or not they could, they didn't stop to think if they should."
Blade. Laser. Blazor. I believe you've met my fitness consigliarian Meshell. 
I think there's always space for good explanations of core concepts that aren't immediately obvious. Explanations on garbage collection, unsafe code and marshalling would all be good topics too. And any deep dive that can meaningfully explain async/await, synchronization contexts, and and the bridges between async and sync code are always a topic I'm interested in seeing more clearly. 
Yes this is in c# but since you seem like a beginner (at least in the .NET world) you should practice translating it into VB.NET since you are going to find a lot of code samples in c#. using System.Data.SqlClient; using (var conn = new SqlConnection(yourConnectionString)) { using (var cmd = new SqlCommand(queryToRun, conn)) { // set this if you are running something that isn't a plain query //cmd.CommandType = &lt;whatever&gt;; // if you need any parameters //cmd.Parameters.AddWithValue("@bar", 17); conn.Open(); // do this to do updates/inserts if you don't need any data back, otherwise // use a datareader cmd.ExecuteNonQuery(); } }
Oh cool! Now I can port my WordPress site from a shared Dreamhost server to my own dedicated Windows instance.
I have used c# only in a couple of projects, but it has grown from a language I actively hated to be really okay. LINQ, lambdas and continuations make the language feel much lighter.
How about any of this: &lt;ItemGroup Condition=" '$(EnableDefaultItems)' == 'true' " xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt; &lt;Compile Include="**/*$(DefaultLanguageSourceExtension)" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" Condition=" '$(EnableDefaultCompileItems)' == 'true' " /&gt; &lt;EmbeddedResource Include="**/*.resx" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" Condition=" '$(EnableDefaultEmbeddedResourceItems)' == 'true' " /&gt; &lt;/ItemGroup&gt; &lt;ItemGroup Condition=" '$(EnableDefaultItems)' == 'true' And '$(EnableDefaultNoneItems)' == 'true' " xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt; &lt;None Include="**/*" Exclude="$(DefaultItemExcludes);$(DefaultExcludesInProjectFolder)" /&gt; &lt;None Remove="**/*$(DefaultLanguageSourceExtension)" Condition=" '$(EnableDefaultCompileItems)' == 'true' " /&gt; &lt;None Remove="**/*.resx" Condition=" '$(EnableDefaultEmbeddedResourceItems)' == 'true' " /&gt; &lt;/ItemGroup&gt; ... &lt;PropertyGroup xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt; &lt;EnableDefaultCompileItems&gt;false&lt;/EnableDefaultCompileItems&gt; &lt;/PropertyGroup&gt; ... &lt;PropertyGroup xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt; &lt;EnableDefaultItems Condition=" '$(EnableDefaultItems)' == '' "&gt;true&lt;/EnableDefaultItems&gt; &lt;EnableDefaultCompileItems Condition=" '$(EnableDefaultCompileItems)' == '' "&gt;true&lt;/EnableDefaultCompileItems&gt; &lt;EnableDefaultEmbeddedResourceItems Condition=" '$(EnableDefaultEmbeddedResourceItems)' == '' "&gt;true&lt;/EnableDefaultEmbeddedResourceItems&gt; &lt;EnableDefaultNoneItems Condition=" '$(EnableDefaultNoneItems)' == '' "&gt;true&lt;/EnableDefaultNoneItems&gt; &lt;/PropertyGroup&gt; ... &lt;Target Name="CheckForDuplicateItems" BeforeTargets="_CheckForInvalidConfigurationAndPlatform;CoreCompile" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt; ... &lt;CheckForDuplicateItems Items="@(Compile)" ItemName="Compile" DefaultItemsEnabled="$(EnableDefaultItems)" DefaultItemsOfThisTypeEnabled="$(EnableDefaultCompileItems)" PropertyNameToDisableDefaultItems="EnableDefaultCompileItems" MoreInformationLink="$(DefaultItemsMoreInformationLink)" ContinueOnError="$(CheckForDuplicateItemsContinueOnError)"&gt; &lt;Output TaskParameter="DeduplicatedItems" ItemName="DeduplicatedCompileItems" /&gt; &lt;/CheckForDuplicateItems&gt; ... &lt;/Target&gt;
Hey @i8beef, thanks for your comment. I already have few of these topics scheduled (GC topics in general), but I'll also take into consideration your other suggestions. Keep following my series so I hope I can clarify some of these topics one day :) 
You need to learn following things before getting in uwp * The C# Language * XAML * Architecture of UWP Platform first two are available easily but third one is really hard to find.
What kind of an abomination is this?
Take WordPress and extend it in Razor, for example.
captain here - there are business usecases - clients usually have 5 - 10 - 20 years old code bases. They can either stop working for 2 years and build everything from scratch in C# or migrate subsequently using old code fragments and techniques like this. It saves time and money (lives, resources, rain forests, etc.) 
If you are Windows only then [PhotoSauce.MagicScaler](https://www.nuget.org/packages/PhotoSauce.MagicScaler/) is the perfect choice. If you need something platform agnostic then [SixLabors.ImageSharp](https://www.nuget.org/packages/SixLabors.ImageSharp). MagicScaleris crazy fast, efficient, and awesome. ImageSharp is pretty good, but they are playing catch up to MagicScaler.
In the context of .NET Standard and .NET Core, xUnit is the official supported testing framework. https://docs.microsoft.com/en-us/dotnet/core/testing/unit-testing-best-practices I never heard of NSubstitute.
NSubstitute supports everything that Moq supports. https://nsubstitute.github.io/help.html It has a pretty different style of API though. Extension methods instead of an explicit setup object.
That’s the standard items I would expect. We are looking for any other declarations. From your diagnostic build log are the following properties set to true: EnableDefaultItems and EnableDefaultCompileItems?
Wut, you use nsubstitute with autofixture instead of moq? Have a look at autofixture.automoq, a auto mocking container. My unit tests have cut down considerably in size since I started using that combination.
This. A lot of people are way too gung-ho on a rewrite. 
I haven't tried that in launchSettings.json, but have read that it works in appsettings.json as of 2.1. I believe you can also do it via environment variables or command-line argument.
Thanks for your blog post. Just some days ago I've posted about the same topic. [Installing ASP.NET Core on Ubuntu](https://gist.github.com/odan/36b2ffde91102cf6c1b1170f104f8ba0)
Yeah there's one for nsubstitute aswell which I use. I prefer the way nsubstitute handles setting up mocks compared to moq. The Returns extension method is much cleaner imo.
Very intredasting. Emails aren't something you willingly spend too much time on. Kudos. 
Yeah that sounds great in theory and all but in practice how often does this happen? I could see this going down the path of some incomplete frankenstein site that nobody ends up understanding, is full of difficult to find bugs and ends up being 1/2 .net and 1/2 php. I mean maybe when I said no single use case that was a bit harsh -- mostly what I mean is I dont encourage this behavior at all, lol.
Thanks!
It's also an advertisement for okta. 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/csharp] [How Do I Resolve This Missing Reference When Using Text Templates?](https://www.reddit.com/r/csharp/comments/942r35/how_do_i_resolve_this_missing_reference_when/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Why not make a .net standard class library? You can still target whatever you need in framework and your issue will likely go away. 
I'd love to, but by the time I'm done reading this Angular 8 will be out.
Eh, most dev based businesses do blogs like this. It's marketing for sure but doesn't mean it's not helpful.
Create a .Net standard assembly might fix it.
Artisans? Seriously? Come on. Did this really need a CLI? And do I really need to drag in your Queuing, Caching, and Task Scheduling to send an email template?
You.need vs 2017 and all of the .net core stuff installed. I'm not sure you can retarget you would need to make a new .net standard project and move your code. I think. 
Okta has pretty good blog post tutorials. Like with Auth0, they're marketing pieces meant to demonstrate how you can use their IaaS with particular frameworks. What I find funny about this is with ASP.NET Core, you've got pretty damn good built in identity management. Less of a need for IaaS.
Or if you want to transition from PHP to C# (or other way around) this could be a tool to integrate legacy pages as you port things over. 
The article is more about Auth than CRUD I guess. The CRUD part is fairly normal sized as far as CRUD articles go. I wish there were an article about SPA Auth for aspnetcore that shows how to do something like this using just Identity. I can do Auth for a server app but have had a hard time figuring out how to do it for a SPA app.
I've done it very recently with an aspnetcore backend with react frontend. I'll maybe make a "simple crud example" soon lol... 
Xamarin works fine for mobile development but does have its issues. Steer clear of Xamarin Forms unless the app's pretty (very) simple. You can create production-ready apps with free software (VS Community), but you will need developer accounts on the Play (25-ish) and App Stores (150-ish per year, I think). &gt; Would I need to pay for a database (something cloud base like azure?) If your app has a server back-end you'll need to pay for hosting of the server component. If it's not going to be heavily used you can get cheap tiers for very cheap through Azure or AWS. &gt; I guess that would be more difficult considering I don't have a mac just yet. You won't be able to build/compile an iOS app without a Mac. 
Eh, Xamarin Forms can do some complicated rendering given you have the time to play around with the custom rendering functionality. Or if you want a fancy UI you could build your own Forms widgets from scratch. It is not as easy as native, but it "can" do it.
It uses razor views to generate the e-mails - but nothing is left on disk (it's all done in memory) There is a File Log driver (useful for development) that will "send" all your e-mails to a log file. But you can choose to use that or not. You could use that driver for development (for example), and in your appsettings.Development.json you can choose to use Smtp (or something else) when running in a prod environment. It's hopefully very flexible and easy to configure!
If you don't want to use it, then you can build your own ;)
Xamarin is an option. It is good for cross platform apps and good if you like using C#. If your app needs to run on multiple devices while accessing data that is dynamic or often changed then it can probably make use of some kind of cloud/hosted data store. For example if your app is used to manage customers and your client wants to view the same data on their phone, tablet and desktop then creating a Web API that uses a hosted data store would be an obvious solution. Some developers go the route of using Web Apps (look into PWAs). There are so many options that I'd look at what your requirements are first then choose an option that can do what you need and that you enjoy using.
Wow, that's a good recommendation! Never heard of it before, but looking at the project site, now I think that library would definitely be helpful. Thanks! 
That is right, if I remember correctly the launchSettings.json method seems to have worked before 2.0 then stopped working and now works again in 2.1. Hopefully it remain a stable method since I prefer it. I tried the other ways as well and they work too. Also you can put it in Program.cs but have it read a configuration file. I'm sure there are other ways. All the different options are sometimes confusing.
the asp net web host/generic host situation is totally a mess. i wish they would have built the generic host first, and put the web host on that. di in console apps is just as useful as in webservers. but, hindsight is 20/20, what exists now is much better than nothing. 
The SendGridClient class from the SDK implements the ISendGridClient interface. In a unittest you can replace the SDK implementation with a mocked version. Do you know how to do that?
I suppose you have a few options here. I'm not sure how you currently do deployments, but some like Octopus allow you to keep your config secret and away from your code. When it's deployed it handles the transformations for you and puts it in code. Obviously this means they are unencrypted on the server but I guess you could store them encrypted then decrypt them on startup. Alternatively if you don't use a CD model you could do this sort of thing yourself with PowerShell for example. If you're not worried about them being unencrypted but merely don't want them stored with the code, you could use environment variables. That said, I know you've said your website isn't in Azure but would it be that big of an issue to just use Key Vault given how incredibly cheap it is, especially for things like connection strings which you only get once on Startup. You can easily set it up so that you use in whilst still on-prem and I imagine the total cost will be at most a few pennies a month.
I store connection strings in environment variables as well, if my servers are getting compromised I probably have a bunch of other problems to fix before I think about the storage of my connection strings... Also Microsoft recommends using a SecretManager: [https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-2.1&amp;tabs=windows](https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-2.1&amp;tabs=windows) [https://blogs.msdn.microsoft.com/mihansen/2017/09/10/managing-secrets-in-net-core-2-0-apps/](https://blogs.msdn.microsoft.com/mihansen/2017/09/10/managing-secrets-in-net-core-2-0-apps/)
Long time user of Moq here. Switched to NSubstitute because it is much more readable and terse. 
NSubstitute is a mocking library
We have a table in the database that stores outgoing emails, and a service that checks the table every 30 seconds or so. So you test that the email was "queued" correctly, but don't have the email sending service enabled. Gives you a nice log of all emails sent too.
Feel free to check out Lockbox - my project, I created quite some time ago to resolve such issue. https://github.com/lockbox-stack/lockbox
Yes I do - I was wondering if that would be enough. I was able to find a few code examples to get my feet wet. Thanks for that!
Got an upvote from me 👍
Having walked both paths, I think forms is still superior. You can share *some* of your UI code rather than need 2 full native implementations. The default renderers work fine in a lot of cases, and your custom renderers, layouts and effects give you plenty of finesse. Overall, there's very little forms can't do, and those blind spots are getting filled in all the time. The real question is can you get up to speed and learn to overcome all the tooling quirks without getting royally pissed off and throwing a tantrum. I've yet to explore things like flutter/reactN/native script to really see if the alternatives are superior.
Plus one for this. It's amazing.
Some people don't like how verbose Moq is. I am one of those people.
For me the verbosity is exactly what I need. Plus I have so many years invested in Moq I finally feel like I know enough of the quirks and enough about the framework to easily extend something if I need to. We had a branch wide package in which we put our unit test related reusable stuff, and out of consistency everything uses Moq. Saved us a shitton of time over the years. I especially like the combination Moq/NUnit because it facilitates the usage of a testing context, as shown here: https://dotnetcoretutorials.com/2018/05/12/the-testing-context/ I am not a huge fan of this particular implementation, but the general idea speaks to me. Especially the super short unit tests are nice because the brevity makes the intent completely clear. We extended Moq with adapters for different kinds of test doubles like fakes or stubs, and configured autofixture to allow to set default test double objects to inject. This is the thing I probably miss most about my last job :( such quality in testing seems to be rare where I work
I think for most C#/.NET jobs questions wouldn't be so focused on the framework. I would much rather hear people explain dependency injection, how generics work and when to use them, their approach to unit testing, etc.
Sounds good. I'll definitely be checking your repo out. Final question, have you done any serious load tests on this running in a very active prod environment with thousands of emails a minute 24/7. 
Consider using mailhog.
I notice the scheduled tasks are implemented as lambdas. Is there any support for using DI to obtain a task's dependencies? I've used FluentScheduler and it implements jobs as classes. So you can wire it up to the built in DI and have the job constructors accept dependencies registered with the container.
That's a current issue on github that I created. The scheduler was kinda a "get it working and see what people think". This feature received alot of positive feedback - so I'm going to be focusing alot of effort overhauling this feature (e.g. ability to do what you just said + distributed ability) Thanks for the insight - I'm excited to begin the next step!
No, but it also depends on the driver you choose. There is a filelog driver (for development), smtp (using mailkit under the covers), and a custom driver where you can just implement your own mailer logic (e.g. via some http api using sendgrid, or whatever). The most intensive piece would be the razor view generation. I think you've got a great issue to create on the repo (if you want - hint hint). It would be a great idea to load test this piece. Thanks for the suggestion!
I think the secrets manager is the correct answer here. I'm not sure how you're supposed to make it work with Octopus though.
Nice. I'm making an app with ASP.NET Core and I have a need for scheduling so I wouldn't mind providing feedback at all as I sample scheduling libraries. Personally, my needs are that it has to at least have the API to work with IoC containers. FluentScheduler has a DI-agnostic approach which I understand but what I'd like even more is integration with the built in DI.
I ran into some issues building the Mailer. If you run services outside of the Http Request, you can't access scoped dependencies. In your case, would being able to inject singletons be enough? Or Would you require maybe transitive dependencies also?
Yes, the right mix of the questions is important. Have a look at https://www.bettercoder.com/tests There are some ASP.NET interviews that cover many different aspects, not just the framework only.
Thanks! That really helps me consider these scenarios. Coravel is already baked into the .net core environment so I'm looking at making development with the tool as painless as possible. I looked at the github link - thanks for that. To confirm - you would rig up a transient "job", and when the scheduler is executing it would create a new scope and instantiate your "job". Any transient or scoped dependencies will be resolved correctly - correct?
It is more than just a component library, it's an entire GUI framework, for .NET. It uses QtQuick/Qml/Qt, which has been battle-tested in the field for years.
There is some discussion about this on csharplang: https://github.com/dotnet/csharplang/issues/435 The current state is that this library basically works, but there is a limitation about checked vs unchecked operations which would require some language modification to work around. 
Did you upgrade your browsers @ work? Try putting the browser in compatibility mode first to make sure. If you are using AJAX and Javascript, something shitty could have happened. 
Yup! Exactly! It wasn't too hard to integrate once I learned more about ASP.NET Core, but beginners would probably benefit from it being more rightly integrated so they wouldn't need to resolve the jobs manually and worry about creating scopes etc.
Yes we upgrade browsers but this site is accessed by individuals at other companies all over so won't have much control. I'll try compatible mode but nothing lines up with the time things failed...thanks
Will do - thanks man!
&gt; PowerShell for example I'll look into that. &gt; would it be that big of an issue to just use Key Vault the cost is not the concern. the systems and network environment do not allow for Internet access - no exceptions.
Awesome - thanks I'll check it out
&gt; It already seems to have better performance than Avalonia. I haven't done benchmarks, but I can pretty much guarantee that it does. The PInvoke for Avalonia is far more chatty than Qml.Net. WPF has to have an intermediate native layer (PresentationFramework.dll) over DirectX to keep the PInvoke calls to a minimum for exactly this reason. Qml/QtQuick is super powerful. Super expressive and customizable with minimal markup. Again, I don't think I'm being biased in saying that this is how cross GUI development should be done in .NET. It is a marriage made in heaven (.NET and Qml). Android/IOS support to come soon as well!
Cool. I'll be using asymmetric encryption; and take a look see at SteelToe. Thanks!
&gt; store connection strings in environment variables this is not allowed
Ah fair enough, I've worked with that kind of restriction before.
I'll definitely be looking into this more over the weekend. Do you have a preferred editor for working with .qml files? It seems VS Code only allows syntax highlighting.
I'm interested, but I don't like having to use Raw as that would lead to security issues if the content can't be entirely trusted.
&gt; Do you have a preferred editor for working with .qml files I use a combination of Qt Creator (for Qml) and Rider (for .NET). With some setup (not documented), you can easily switch between IDE's and simple F5 debug Qml/.NET respectively. With that said, these are some things I am working on. 1) Documenting how to use Qt Creator to debug a running .NET application. There really isn't much to it. Stay tuned. 2) Implement the network based Qml debugger API in C# and wire it up in Visual Studio and VS Code as an extension. The protocol is very simple. You'd have step-in/step-over support back-and-forth between Qml and .NET. 3) Generate a definition file for Qt Creator, solely for the IDE. This will give you intellisense in Qt Creator for the .NET types that you register. This is a common pattern used by many Qml/QtQuick plugins.
Completely valid concern, even as I was writing it I thought that using raw seemed like an architectural/workflow smell. As I got more into way to improve it, even looking at other products, they all basically do this as well to some degree if you are managing html/js content, which I do want to allow for instead of only plain text. A lot of other platforms wrap it in another helper tag whose name is more palatable, but basically does what 'Raw' does. Since this was firstly for devs to use, and end users second, I felt this was an acceptable case. That being said, I am completely open to other options, but I haven't seen any others that seem worth it yet. If you have any ideas, I welcome the advice!
Silicon studio doesn’t support it anymore? Yikes.
Asymmetric isn't necessarily the best option because the decryption key now has to sit with the app, so now you have to figure out how get that private key into each instance of your app. With the symmetric key, the config server itself will handle decryption and will serve values to your app via rest. You just need to slap security on top of config server by tweaking config, can use basic (login/password), or OAuth2 with client credentials (will be handled for you out automatically behind covers if you run on Pivotal Cloud Foundry).
Oh oh, you invoked a practical approach to unit test coverage. You're doomed. :-)
Too be honest I cant keep up these days, there are young kids unit testing javascript user interfaces. I looked at one once it said something like... render the jwt, if it doesnt error it passes.... I noped the hell out of there.
It's not that surprising. We're kind of wired to look for short cuts and patterns to follow. We all probably have moments of cargo cult / religious adherence to principals like SOLID, DI, unit testing, code coverage, ORMs, and a million other practices that were meant to help certain situations, but we accidentally don't realize it doesn't fit or solve a problem we actually have. When the goal becomes using a tool rather than using the tool to meet the goal, it becomes an issue anywhere, we are just wired to kind of find those "way I do X" sort of things. I've seen teams completely sunk trying to hit code coverage metrics and building overly complicated architectures solely to attempt to unit test something where it didn't add much value or protection. I think you have to experience that kind of pain being dogmatic about a few practices before you realize you have to make a value judgement about the application of ANY practice every time you go to use it. Not to say those aren't all good things to know, but it's the old adage about when you have a hammer everything looks like a nail. Sometimes you screw yourself, and its really easy to miss it when you do it to yourself.
My current mantra is KISS and YAGNI but its hard not to fall back on your known patterns.
Also good tools. But can also keep you from doing things that should be done sometimes. I think blind adherence to any practice without contextual application is kind of a road of pain.
Who is going to stop me, and more important, why?
How are you going to use the result of your dynamic sql if it could be anything? Are you wanting the result to be dynamically created based on the sql?
Ahh you're right. 
Does it support raspberry pi and arm? 
I'm no licensing expert but my understanding is dynamic linking doesn't get you out of gpl land. https://softwareengineering.stackexchange.com/questions/167773/how-does-the-gpl-static-vs-dynamic-linking-rule-apply-to-interpreted-languages 
How are you displaying the response in the view? Razor template?
This is a difficult problem because .NET is strongly typed. Ultimately, you need to dynamically build a type for the O/RM to map to. This is difficult because you then need to make a dynamic user interface. It really cuts across the grain of .NET. However, it is possible. Consider using System.Linq.Dynamic and System.Reflection. 
I don't think that would work for me. I would like to take a raw SQL query, get the data from the database and send that to the view, which could be using an API if needed so that it could just be json. From there I would like to loop through the headers and the the data for each column to show the view. I don't want to have to involve models in the process since the SQL query old be for any table and any column. Don't know if this is even possible. It was just an idea I had. 
Awesome! Going to try this. Thank you
I want to do something similar to this: https://visualstudiomagazine.com/articles/2017/08/01/returning-json.aspx?m=1 I guess I have to look into using ADO.net in the project if that's the only option. 
It's always a tradeoff between bandwidth and computing power and you really can't know ahead of time which is going to be in short supply. Also, I suspect you're engaging in what's known as "premature optimization". Until you have an actual problem, I wouldn't waste time on a problem with minimal returns. FWIW, base64 is encoding, not compression. There are any number of compression algorithms available and the're all a tradeoff on computing requirements, speed and size. What are you trying to do and why? 
I'm just bored and trying to start a conversation.
Makes me miss Silverlight.... (bring on the downvotes, but I liked it)
it depends on your company strategy on secret management. If you want the type of secret management that is professional for Enterprises, i would recommend using HashiCorp Vault. It supports Windows and provides a lot of features although high probability, you may just need very small number of features provided. 
I have to admit that I am one of those developers that does not like JavaScript. I'm not saying JavaScript is bad though. If you love it that's fine. I just hope there are more options in the future. Blazor has been one that has some potential and I'm excited about it. I hope Blazor gets to become a supported product. My fear though is that it won't garner enough community support which will lead to developers dismissing it and in turn lead Microsoft to not support it.
It's going to be hard to debug this if you don't have access to the code behind. Why don't you? Seems rather odd to me...
MS if you are reading this back blazor. It's the missing piece...
Blazor is a Microsoft project.
By back I mean production commitment. 
I have exactly the same feelings about it
I agree SO much with you. I've always hated JS. I think Blazor will be a big thing for MS. Give it time and you'll see.
i liked it from a developer pov, i did not like it as a consumer...
Its all vendor supplied source files for the website. as far as I can tell all of the could behinds that are referenced are rolled up into a dll? I have the vendor also trying to figure this out but they have no employees who have worked with this ancient website who still work for their company. have access to all the files themselves I just have not figured out a way to see the .cs files themselves.
In this article, I discuss class and objects in C# with some realtime examples.
Qt is also available under LGPL (in addition to the GPL) and there are several [language bindings](https://en.wikipedia.org/wiki/List_of_language_bindings_for_Qt_5) available for Qt with many different licenses. You're fine using MIT for your license as long as the users have access to the code for the Qt libraries you provide and they're dynamically linked. LGPL is designed to explicitly protect users who dynamically link against the libraries. Under the LGPL, as long as the libraries are [dynamically linked](https://stackoverflow.com/questions/11607682/does-qt-creator-by-default-statically-or-dynamically-link-its-libraries#11608157), and can thus be replaced by the user's own versions of Qt, you don't even have to provide the code for your portion. Though you would be obligated to provide any code or configuration changes for the Qt libraries you use. If those libraries are statically linked (as is done in languages like Go), that's when you've got to worry about the availability of your application's code.
Qt is available under GPL and LGPL, which explicitly protects dynamic linking.
Here [Dotnettutorials.net](https://Dotnettutorials.net) explain the use and differences between static and non-static members in C# with some real-time examples.
Base64 specifically takes any text or binary data and represents it using a restricted set of ascii characters. This allows you to embed it inside textual documents in a way that won't interfere with its structure. Think XML as an example. Base64 will convert &lt; or &gt; in the source text into two characters from its restricted set (a-z, A-Z, 0-9 and !- (capital numbers) and a few others). Compression can be complicated, but the majority of lossless compression techniques look for common sequences or sequences of identical bytes/characters and replaces them with a lookup key from a table (for common sequences) or a code how many times a run of identical bytes/characters occured. For text you could have a look up table of the top 16,777,215 most popular words. Each could be represented with a 4 character lookup value expressed in base 64. There aren't 16 million english words, and many of them are 2, 3 or 4 characters, so perhaps a lookup table of the 262,143 most common words of four or more characters and replace them with a three character code (exactly three characters, so lookup word number 45 would be t which would be padded as --t (- is not in the base 64 allowed characters). The only problem left to resolve is "What happens if the text includes, for example "\\\" or "--2" or "Boy"?" because these are our lookup values. Well Boy is fine, we'd replace that as it's a word with its look up, so we only need to concern ourselves with the weird ones. There's a finite set of exactly three character combinations that can appear in base 64, 153,957 in fact. So we could take our 262,143 codes and use the first 108,186 for lookups of the most common words of 4 or more characters which will give us a three character look up. The other 262,143 would represent any three character string that was a valid base 64 string. Any other 3 character combos &gt;_&lt; for example would remain as they were. 
About 3 weeks before it's published these days ;) I just had a look at the "Look inside" page and some bits are timeless, but others are ropey. Good stuff, SOLID is timeless, bad stuff, ActiveRecord is *shudder* Later it goes into repository and UoW patterns with examples in NHibernate and EF. Both have moved on so far since 2010 you'll be screwed trying to apply their examples now. This is very very dated. Do not buy. I don't have a better alternative, but this will, if anything, set you back. 
Uno currently allows running XAML in the web browser (using mono) so technically XAML can be used in Electron. However, the performance is crap at this moment. Maybe it'll improve sooner when Chromium's wasm performance is fixed and mono gets AOT working. 
This is awesome! I've just started experimenting with QML for cross-platform applications in Rust, and I agree that QML is an excellent technology. One thing I've been struggling with in my own QML+Rust project is how to efficiently yet painlessly manage the databinding updates (i.e. emitting signals upon change). I see in the [NotifySignalsModel](https://github.com/pauldotknopf/Qml.Net.Examples/blob/master/src/Features/NotifySignalsModel.cs) there's a `[NotifySignal]` attribute, and additionally a call to `this.ActivateSignal("bindablePropertyChanged");`. Is this a work-in-progress for having the qml.net framework handle databinding automatically? In the Rust world, I'm looking at [rust-qt-binding-generator](https://github.com/KDE/rust-qt-binding-generator), where you describe your datamodel in json, and it generates all the QObject/QAbstractItemModel code for you, allowing you to use simple Rust structs for your datamodel (the equivalent of POCOs).
Exactly the answer I was looking for, thanks! :) I guess there is no other thing to do than to keep searching for an up to date resource about the topic.
What is your blogging platform? I quite like it.
Hey, always welcome :) A lot of what your seeking comes from experience, so just hack away. Write code. Trust me, after a lot of years doing this, it's surprisingly nuanced. If possible, work in a team that is nurturing. We exist :) It's great that you're keen to learn, but patterns are just one step above the fundamental constructs you learned on day "one". Google the difference between the proxy and decorator patterns, as an example of something that, if you haven't written the code before will be a bit baffling. You will do fine, hold on to the fire, don't let it become anxious and always ask questions :)
I don't like JavaScript, either, but I'm currently working in Typescript, and it's tolerable, and edging on... pleasant? Debugging with Chrome, editing in VS Code... I can live with it.
It's WordPress with the [Astra](https://wpastra.com/) theme. 
That's a really good way of putting it.
I recently had the same problem with PHP books. I like reading them when I'm not able to experiment with a computer. When I do have time in to practice with a PC in front of me I buy a cheap course on udemy. I can't vouch for any c\# but the three I've bought about node.js and are very informative.
Have you seen platform.uno ? It's almost Silverlight, but better imo. Very interesting.
Its too old when it doesn't provide you what you're looking to get out of the book. There isn't a single book that will have every page will be up to date, technology just moves too fast. That doesn't mean that book still can't be relevant if you understand what is still applicable today and what isn't. In this case, I think there are some good things in this book, but a number of things that are dated. The ORM stuff and the AJAX stuff is dated and can be taken with a grain of salt. The other thing to think about is what context are you working in. Not every professional environment is going to be using the latest and greatest of everything, so you need to understand the concepts and techniques that were used to develop the codebase you're working on. Old books can help give you that context if you need to dig into some legacy code.
None of the code has any indentation and that makes it unreadable.
Thanks for sharing - I haven't seen this but it looks really interesting
Conceptual books like Clean Code don't get old. Language books slowly get old (it's perfectly fine to read a beginners book on C# 5). Framework related books get old very quickly.
I think the first decision that needs to be made is whether this is going to stay a desktop app or whether it could potentially be moved onto the web. Desktop apps are slowly dying, so unless there's a huge reason why it needs to be a desktop app, the web is something that you should seriously be considering. &gt;Last but not least: due to lack of resources a complete rewrite is not possible This is concerning, because this will take a lot of resources. The business has to determine how valuable it is to move this app off its current technologies and on to something more modern. I've seen this play out before, and very rarely is the right decision made. Assuming you're not going to the web, and assuming the cross platform aspect is absolutely needed, you're pretty close to SOL anyway. You have few options and none of them with really wide spread support. As have been mentioned, there's [Avalonia UI](https://github.com/AvaloniaUI/Avalonia and there's [Electron](https://electronjs.org/). I don't think Avalonia is going to have long term viability as there's next to no momentum behind it, and while I think Electron will be better long term, that also brings along a lot of baggage with it. At the end of the day I think Qt and [QtSharp](https://github.com/ddobrev/QtSharp) are what you're going to have to work with to get what you're looking for, but that's the only thing that looks truly viable as a cross platform gui solution. Qt isn't going anywhere and the bindings are pretty stable. I say invest the time to understand and learn Qt inside out. 
That makes sense. I was mostly interested in this book to learn more about the n-tier architecture in context of an asp.net application, like business layer and service layer etc. Do you think this book will be a good resource for that kind of thing?
Honestly, I wouldn't be too focused on n-Teir architecture at the moment. I'd dig into Hexagonal and Onion architecture (they're different terms for the same thing) and Domain Driven Design. Keep in mind that there's a whole other host of things that come along with the architecture question these days that entails things like scalability, reliability, data stores, and implementing it all on the cloud, just to name a few. As you'd imagine, there isn't one book that will have all of this. I'd do some initial research and watch some videos/presentations if you can and find where you'd want to dig in first.
No network issues, just not readable on Chrome on Windows: https://imgur.com/a/1JaLwRT
I love that Microsoft are providing these free ebooks, and I'm not complaining, cos, well they're free - but it would be nice if they could also be released in ebook format, and not just PDF. I find I end up not reading them, when if I could read them on my Kindle, I would definitely read them. Again, yes I know they're free - so this isn't a complaint. Just a bit of feedback.
I'm looking more at those rust bindings. A few questions. How do you benefit from Rust's compile time checker? It looks like the idea is centered around a registered type, and performing mutations on it. So, you can't grab an instance of a complex type in Rust and store it in a variable in Qml (aside from ints/strings/etc)? How would you pass a complex type from one registered type to another registered type? IMO, an integration is better served integrating directly into the internal Qml javascript engine (V4). This allows your instances to be treated and interacted with as if they are regular JS objects (properties/methods/etc). For example, an instance of ```List&lt;T&gt;``` can be treated as if it is an ```Array``` (```Array.isArray(obj) == true```). Then you can pass ```List&lt;T&gt;``` instances directly to Qml components as the ```model``` for rendering.
Just go to my website and check https:dotnettutorials.net 
It really depends on the topics. Knuth is still as good as when it was written. Most of the new language specific books are mostly useless by the time they hit the bookstore. Some of the books for the stable languages are still as good as when they were written. K&amp;R C for example.
Thank you kindly :)
It's not everywhere broken on your shitty site, but on the initial link you posted here it is. I even added a screenshot.
If I am not mistaken, your filestream is empty. You need to read the bytes into the stream then write to file. Your response body is also empty because the stream is empty. 
Hey OP, if you want some more modern information, Microsoft recently made their own series of architecture guides. Go and read all of the PDFs on this page and it will give you a leg up: https://www.microsoft.com/net/learn/architecture
It works for me. Give this a try. https://github.com/dodyg/practical-aspnetcore/tree/2.1/projects/middleware-log-response-request 
Check this SO question for the answer: https://stackoverflow.com/q/43403941/2476354
This is the question that I have linked in my post, sadly, I have tried this too.
Can you tell me what changes you have made to make this work? Your code seems identical to mine. 
I just copy and pasted your code and put it in a Middleware class. Your problem is probably somewhere else in `startup` class.
This is the reason why: https://github.com/aspnet/HttpAbstractions/issues/743 
Yes, I just checked the request and it's requesting favicon. Thanks a lot (;
Abstraction in C# with real-time example.
No worries. ASP.NET Core is awesome but it has a massive API surface. I think I've forgotten more of the framework than what I remember.
Thanks I'll look into that
I'm still upset that they abandoned Windows phone development. I though it was pretty sweet when I used my Lumia 640 for about 10 months until I was forced to switch to Android because of a job. I wanted to switch back but by then, the project had no direction. 
My advice is wait. Net core 3.0 will bring cross platform desktop UI development capabilities. Net core is the cross platform future you want. Plus, switching should not be too hard in comparison to an entirely different framework
WPF and WinForms will run on.NET Core starting next year. That part is accurate. But they will still not be cross platform.
I wonder about this as well. I have an app that uses Confluent.Kafka to process messages, the entire app is basically one very hot method that only gets called once. Maybe they could add [MethodImpl(MethodImplOptions.ForceTier1)] or something like that.
When I load the blog page I get a JavaScript alert reading `Thank you for donating.`
Thanks. Must be some kind of bug. What browser are you using ? And version?
Awesome :) I will look into it.
While web assembly has its use cases, modern front end development has surpassed this. I'll take webpack with auto reloading, redux, css/sass/postcss, react etc. over a technology that still needs to prove itself like blazor anytime. But again, I'm sure it's got its use cases and I do believe it's really interesting. Just give it a few more years before jumping onto it.
In my opinion, the dependency management is one of the things good about JavaScript development. I don't care about hundreds of MB of packages. We don't live in a world where that's a problem anymore. Our dev machines and our servers can take it. Every dependency gets the exact version of its dependencies that it needs. There are no conflicts. I think that's great.
I don't find Blazor very appealing right now. I work with TypeScript for front end and besides a few weird things like code coverage inaccuracies from the compile process, in perfectly happy. The JavaScript runtimes are powerful, support for functional style programming and asynchronous programming is built in. And we've got a static language you can write now (TS) for IDE support and a huge ecosystem of libraries with NPM.
I read a book every few months on average, some months I'll read a couple if I get the mood for it. Personally, I think it depends on the topic. If it's a book on a particular language or framework, I won't read it if it was published more than 1-2 years ago. Some tech is more stable than others. The JavaScript tech tends to move very, very quickly. I read a lot from Manning, and participate in their MEAP program, for this reason. I get to read about using the latest frameworks as the book is written and I can review the finished book once it's published to solidify my knowledge. I finished the complete chapters of ASP.NET Core in action before it was published and now I'm at a point where I know the framework well and use it in production. Meanwhile, I see many people still considering whether to even look at it. For design patterns, books can remain relevant for decades. You can read classics like Design Patterns from the Gang of Four, and be able to use those patterns for every single thing you create for the rest of your life. Of course I'm not saying use every pattern in every project. But you'll have a huge toolbox to use. Books on programming processes like Agile methods or Extreme Programming or how to do Continuous Integration, Continuous Deployment, unit testing in general, are all topics that fit into that realm of being timeless. They'll imorove over time, but you won't be reading completely out of date material if the book is a bit old.
Yes, let's hope Microsoft takes it far enough in a few years to be really usable.
[.NET Core 3 and Support for Windows Desktop Applications | .NET Blog](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/) &gt; We are planning on releasing a first preview of .NET Core 3 later this year and the final version in 2019. &gt;Support for Windows desktop will be added as a set of “Windows Desktop Packs”, which will only work on Windows. .NET Core isn’t changing architecturally with this new version. We’ll continue to offer a great cross-platform product, focused on the cloud. We have lots of improvements planned for those scenarios that we’ll share later. &gt; &gt;From a 1000-meter view, you can think of WPF as a rich layer over DirectX and Windows Forms as thinner layer over GDI Plus. WPF and Windows Forms do a great job of exposing and exercising much of the desktop application functionality in Windows. It’s the C# code in Windows Forms and WPF that we’ll include as a set of libraries with .NET Core 3. Windows functionality, like GDI Plus and DirectX, will remain in Windows.
VSCode is Electron based because it has to run on platforms that don't support XAML. If you don't need cross-platform, there's no reason to pay the huge performance penalty that Electron demands.
&gt; As have been mentioned, there's Avalonia UI. I don't think Avalonia is going to have long term viability as there's next to no momentum behind it, and while I think Electron will be better long term, that also brings along a lot of baggage with it. I hope you're wrong. 
At the bottom of the source: &lt;iframe id="hiddenFrame" name="hiddenFrame" width="0" height="0" border="0" style="display: none;"&gt;&lt;/iframe&gt; &lt;script&gt; (function() { document.getElementById("hiddenFrame").onload = function() {alert('Thank you for donating.'); }; })(); &lt;/script&gt;
Thank you for the sincere answer. On topic, upvote this dude!
Thank you for the sincere answer. On topic, upvote this dude!
Thank you for the sincere answer. On topic, upvote this dude!
 First of all - excellent tutorial! I have a couple of questions. How would you go about deploying a MySQL database? Would you create a new droplet and host it there than just wire your app to the new droplet (DB) IP? Or would you host it in the same droplet, if yes - how would you setup it up? Would that be a separate docker container, or you just host it "straight" on to the droplet. Sorry I realize these are quite a few questions but I'm about to deploy my first Core app onto a Linux environment and it's all a bit alien to me. Any help would be much appreciated.
On client side, Microsoft focus is on UWP. Yeah, people forget UWP, but this is where they are focusing it. With .NET Core 3, which they will launch a preview later this year, it will have WPF support. But this is basically a way to move from legacy .NET Framework stack. As far I know, there isn't any improvements coming to WPF itself (just the old "performance improvements" that we heard since ever). But it'll be possible to use UWP XAML controls on 10 now. So the question is, moving to UWP (or, 10 app) and with .NET Standard, is a problem? If it is, I would say to look for other options. 
Please stop spamming your low quality shit.
If you don't pass a name to ```[NotifySignal(optionalName)]```, a name will be generated automatically. Currently, you have to *just know* what that generated name is. There is plans to activate a notification signal with something like this. ```c# obj.ActivateNotifySignal(x =&gt; x.BindableProperty) ```
I hope I can answer these questions, I'm just getting started using the rust/qt ecosystem. There's two approaches to Qt in Rust. The first approach is the more typical language binding approach ([qml-rust](https://github.com/White-Oak/qml-rust) and [rust-qt](https://github.com/rust-qt/cpp_to_rust/tree/new_impl)), but I don't have much experience with these. I don't think they're very mature. The second approach is the rust-qt-binding-generator I linked above. You're right that you register your type and mutate it. The mutations happen in rust code, so you need to expose rust functions to QML to operate on the model. You do this by describing the function signature in [your json bindings](https://github.com/KDE/rust-qt-binding-generator/blob/6506b0a6a3fe9db1bbf9ea9913e80fce04404e4d/examples/todos/bindings.json#L29). The generator will then generate rust traits (similar to C# interfaces) that the user [will implement](https://github.com/KDE/rust-qt-binding-generator/blob/6506b0a6a3fe9db1bbf9ea9913e80fce04404e4d/examples/todos/rust/src/implementation.rs#L106) in rust. So you're right that you lose the ability to interact with your model in JS, but that's viewed as a positive in the Rust ecosystem -- you get stronger consistency guarantees by using Rust. You can still use JS for UI-only (inside QML) logic. A benefit of the second approach is that there's a strict separation between the QML/C++ and Rust. You can use all the mature Qt tools for authoring QML, and the Rust logic is simply a library that's invoked by the QML application. This means that you don't need to reimplement Qt technologies like resource files, static compilation, debugging etc -- the QML authoring is done in Qt Creator (or whatever) so you're using the platform features. A negative of this approach is that you have two build systems -- one to produce the Rust library and one for the Qt application.
Yeah, I'm digging the binding generation approach. I might do something like this as well, as it would make it so that your app works across all 5.X versions when compiled. Question, how do you raise signals/events from rust into Qml with the binding approach?
I'm not sure if I've misunderstood the question. &gt; I took a look at Dapper however I can't seem to find INNER JOIN examples that are anonymous. I don't understand what OP means by an anonymous inner join, but [Dapper supports dynamic](https://stackoverflow.com/questions/26659819/dapper-dynamic-return-types) objects. Also [.NET Core 2.0 supports DataTable](https://stackoverflow.com/questions/42098922/using-datatable-in-net-core), I haven't used them but the .NET framework versions do most of all the heavy lifting (parsing/db type inference/conveting to .NET types) for you. 
&gt;unless there's a huge reason why it needs to be a desktop app Not sure actually, but mainly because I have no idea about what 'the web' can currently do in terms of graphic/overall performance. The application does some kind of image processing and analysis.
Yes, but I think that It won't be that big problem here. From what I gather - people are pretty hyped up for Blazor ("I could do front-end in C#? Yeah!"). So community is interested, question is if it will actually be good enough to use it.
Seriously mods. The community fucking hates this site. Can we blacklist it yet?
This is about inheritance, not interfaces. The next section is about interfaces, but can't be accessed without enrolling.
Please stop spamming your low quality shit.
What's problem with my site
The interview with a PM specifically included the phrase "investigate new controls for WPF and WinForms which we could not include previously due to backwards comparability" and don't forget they have updated the shitty IE based WebBrowser to use Edge.
You have to reflect upon the data and make a metadata document describing its shape, then a dynamic frontend which builds itsself based on the metadata document.
Same on Chrome 67
They don't updated. They are using UWP WebView control there. 
That's what I meant...
You can build your iOS branch on Microsoft App Centre for free I think. So I don’t think a Mac is necessary. 
People are downvoting **all** of your links here because they cover very basic information only suitable for beginners and this community (r/dotnet) is not the place for beginner tutorials. Look at the score of this post: &gt; 0 points (24% upvoted) reddit doesn't show accurate vote counts for posts or comments and **never** shows counts below zero, but **the % upvoted is accurate.** So of the people who vote here **76%** of them are **downvotes**. People are not interested in such basic posts intended for beginners. To recap for this post &gt; 0 points (**76% downvoted**) The same is true for every other post you've made here and I've changed it to show the downvote percentage: Console Class Methods and Properties in C# : 0 points (**80% downvoted**) Abstraction in C# with realtime example : 0 points (**67% downvoted**) Const and Read-Only variables in C# with real-time examples. : 0 points (**67% downvoted**) Encapsulation in C# with examples : 0 points (**64% downvoted**) Class and Objects in C# : 0 points (**65% downvoted**) Static and non-static members in C# : 0 points (**64% upvoted**) All those downvotes are a strnig indication that this type of article is not wanted on this sub. Please find somewhere else to post your beginner tutorials, like /r/learnprogramming or /r/learncsharp - it's not wanted or appreciated here.
Maybe post in /r/learncsharp the topics are very basic.
This. JavaScript development these days is really good, assuming you use ES6. I actually get annoyed when I have to use C# these days. Why would I want it on the front end?
Dude, fuck off. Nobody is interested in any of this.
Why all the hate? Looks like a decent write up to me.
Its always Indian too
Thanks buddy Me not going to post anymore But don't say anything bad about my country India 
Honestly, they're just bad examples. More confusing than informational. 
There are many folks, like me, learning C# who appreciate beginner level information. Keep up the good work.
Thanks for this. After reading the other replies here and checking some things out I also was coming to the conclusion that basically waiting a bit to see what's coming while in the meantime laying focus on some refactoring seems, for the time being, probably a wiser way to spend resources than just going berserk for the sake of trying out new things..
I upvoted. Can't see the problem in this post. There should be room for all levels. I would be sad if people wrote this crap about my blog. I think it's cool that people can post about anything in dotnet. We need to let more people join the dotnet team :) and that is not going to happen with this kind of behaviour. Keep on blogging :) even if there is only one reader, you have done your job. 
What's your problem? Why can't there be content for new people in c#? These posts is not hurting the community. If anything else we should try to get as many people into programming as possible. 
I don't know, but this article would give my second grade teacher a heart attack. ~~The~~ Constructors are ~~the~~ special types of methods ~~of~~ in a class which **are** automatically executed whenever ~~the~~ an object is created. Constructors are responsible for object initialization and memory allocation of ~~its~~ a class**,** and **the role of the** new keyword ~~role~~ is creating the object. The whole article is like that.
Not everyone has English as their first language. I think it's got the technical stuff mostly right and is a useful reference for someone learning the language.
Raygun.io is also really good
With all due respect I think it was passable. I know c# pretty well, but if I was to be trying to learn a new language a write up like this about the crucial subject of constructors would be welcomely received. I retain my position that some comments on this thread are unnecessary unkind to someone who is trying to contribute to geekdom.
And I retain my position that the article is borderline unreadable due to the weird sentence construction. Where do we go from here?
Haha plan like a sounds :-P
xoofx left Silicon Studios and joined Unity some time ago, I think he was the architect and main programmer of Xenko...
Stackify is all on .NET. (https://stackify.com) I find it odd when people ask why we picked .net because there are so many other better alternatives. 
We're looking at Xamarin.Forms. It's similar to WPF, but it also sets us up for mobile. In the worst case, we'll just use it as the WebView container and use Vue.js or something, but we're trying to leverage our C# skills. As others have said, .NET Core is great for the server side, if you ever need to split your application logic and data from the UI across device boundaries.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/csharp] [Volvox Learning Community • r\/dotnet](https://www.reddit.com/r/csharp/comments/94xhz3/volvox_learning_community_rdotnet/) - [/r/programming] [Volvox Learning Community • r\/dotnet](https://www.reddit.com/r/programming/comments/94xi28/volvox_learning_community_rdotnet/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
The guys and gals over in the Discord are incredibly helpful and always have conversations going. If you’re looking to learn and get some hands on experience, this is a great place!
NetTecture : I tried using Projectto but was not successful with that. Dont know the specifics but I guess it was not possible to that with .net core. Any examples I can refer?
well, "it just works" for 90% of the cases pretty much sums it up - if you had problems ask questions, do not tell me "It does not work" without code sample. That thing actually DOES have documentation. THAT SAID: entity framework core 2.1 is broken - there isa lot of stuff that ProjectTo does that does not work. Fixes are on the way with the next release. Basically their unit tests sucked - a lot of standard stuff just is not interpreted correctly.
Yep :)
OK, the MOBI file is here [https://www.microsoft.com/net/download/thank-you/microservices-architecture-ebook-mobi?WT.mc\_id=-reddit-scottha](https://www.microsoft.com/net/download/thank-you/microservices-architecture-ebook-mobi?WT.mc_id=-reddit-scottha)
Hey guys, I have a friend who would like to learn programming, but he doesn't know english too good. Is there a place for him in your community?
That's a Windows Communication Foundation (WCF) service. Try this: https://docs.microsoft.com/en-us/dotnet/framework/wcf/feature-details/how-to-host-a-wcf-service-in-iis
Instead of purchasing a big expensive mac, you can just buy a cheaper mac mini and use it as a build server. 
Nice! Now downloaded - looking forward to reading it. Thanks for the link Scott - greatly appreciated :)
&gt; QtSharp I'd recommend my project: https://github.com/pauldotknopf/Qml.Net QtSharp doesn't support QML, which is the future of Qt.
Checkout my project: https://github.com/pauldotknopf/Qml.Net You can checkout the examples here: https://github.com/pauldotknopf/Qml.Net.Examples
I'll assume you have the URL itself, it's likely a SOAP service if it's WCF. If you've been told nothing else (soap usually means enterprise which usually means certificates and other bothersome stuff), you should be able to consume it by using some python/java soap package.
The [System.DirectoryServices](https://msdn.microsoft.com/en-us/library/system.directoryservices.aspx) library in .NET provides the necessary interfaces to interface with an AD controller. 
[check this](https://studyofjoy.com)
Awesome thank you
If it's IIS plain old Windows authentication should get you pretty far. I believe you can use it in a fat client app also.
[removed]
Basically, if the server is on the domain already and you enable windows authentication for an IIS app, you are done. If you need more fine grained access to check permissions, roles, etc you can use System.DirectoryServices.
We actually have a couple of people who are not native English speakers either.
Added for my commute tomorrow :)
&gt; Is mobile planned to be supported? Yes. &gt; I haven't looked deeply into your project, but it seems to be coming at it from the opposite direction, embedding a QML engine into .NET as opposed to providing bindings to Qt. Correct. If you are using .NET, you don't want all the bindings to Qt. You'd want to use the built in libraries for .NET (```System.IO```, ```SerialPort```, etc). &gt; also, what is performance like for things like 3D? Any idea? The performance is exactly the same as the 3D built into Qt/Qml/QtQuick, which is great. Qml.Net doesn't add any overhead to the rendering performance of Qt.
You can use svcutil to generate proxy classes for you based on the file provided. Check out the info here: https://stackoverflow.com/questions/23997821/how-to-generate-wcf-service-with-svcutil-exe
Nice. Thanks. I've got a project I will likely be trying this out on soon.
This is basically what my company uses on our intra site. Works great with AD and super easy. Only thing dev would need to worry about is authorizing users based on their AD groups at controller/method level.
&gt; how this relates/compares to something like QtSharp? It doesn't compare at all. For one, QtSharp only supports widgets, while Qml.Net only supports Qml. The goal of QtSharp is to wrap the entire Qt framework, because you'll need to if you want to manually build up a widget UI. Qml.Net doesn't need to wrap Qt, because the entire UI is built in Qml, while the business logic is sent out to .NET. Qml.Net doesn't wrap things like "QSerialPort", or "QFile, or even "QObject", because it doesn't need to with it's approach. All the GUI is done in Qml (no business logic) while everything else uses traditional .NET libraries.
I'm not yet sure if I need to call API through the web. I need to somehow auto-check if logged in user will receive correct data (e.g. he will not receive data that not belongs to him, will not see something he shouldn't) and I need to check if anonymous user won't see anything calling those controllers.
Either via PrincipalContext or LDAP. LDAP authentication is usually faster, but the code looks like a hack: try { using (var connection = new LdapConnection(new LdapDirectoryIdentifier(domain))) } Via PrincipalContext, it's more straightforward: (bool): return new PrincipalContext(contextType).ValidateCredentials(userName, password, contextOptions); 
web app? 
I honestly can't think of a way to fake API calls in a way sufficient to fool the auth framework of .NET This is off the top of my head, but a full integration test running in whatever framework you want could involve spooling up an HTTP connection and sending requests to the server. Especially with JWT this would be pretty easy, you'd send raw requests with no auth and verify your responses are bare and then send one after retrieving a token and make sure that you get what you need. Any other auth should work as well. The specifics of when and where you're running the tests may be where you find the most headache. Are you running them as part of CI/CD? Then you'll want to either execute after deploying to your environment or start the server on the build agent before running the tests. Handling test configurations (like URLs etc.) is an open question that everyone has 1k answers for. If you're just doing a PoC then it probably doesn't matter. 
Are you working in .net? f you are you can add a service reference to your project. If you're not I'm not sure. Wcf is for .net. 
What is your goal of your site? Are you aiming to educate others? Establish personal credibility? As a learning experience (writing about what you just learned)?
Found the solution... User changed a company prefix that the code behind was looking for but the query was not. Vendor came back with fix thank you for helping me troubleshoot
Found the solution... User changed a company prefix that the code behind was looking for but the query was not. Vendor came back with fix thank you for helping me troubleshoot
Found the solution... User changed a company prefix that the code behind was looking for but the query was not. Vendor came back with fix thank you for helping me troubleshoot
Found the solution... User changed a company prefix that the code behind was looking for but the query was not. Vendor came back with fix thank you for helping me troubleshoot
Found the solution... User changed a company prefix that the code behind was looking for but the query was not. Vendor came back with fix thank you for helping me troubleshoot
I doubt there's anything official I'm afraid. Essentially you'll just need to authenticate the requests by orchestrating your API calls. i.e. calling your authentication endpoint first, storing your bearer token and then attaching it to all subsequent API calls for your test controllers. This obviously varies greatly depending on how/where you're running the tests but I'd be very surprised if there wasn't plenty of info on the net. Happy to try and help if you can provide more info.
Your post has been removed. Self promotion posts are not allowed.
Your post has been removed. Self promotion posts are not allowed.
Your post has been removed. Self promotion posts are not allowed.
Your post has been removed. Self promotion posts are not allowed.
The client exposes a SOAP endpoint. If you add ?wsdl to the URL you can get the WSDL url to add to your toolset of choice to generate proxies, etc... Most languages support SOAP
[https://snag.gy/AwMUHq.jpg](https://snag.gy/AwMUHq.jpg)
I would suggest learning WPF.
Thanks! So you agree that I should check if the user has valid credentiald and log him in manually, correct?
Begrudgingly, one would assume.
What exactly are you talking about? This looks like standard, trivial and ugly UI. 
I know WPF. But I don't get this kind of UI which is similar to the 'old' console gui or curses kind of thing. 
Yes. And in this UI, you can operate the entire thing including xomplex financial operation using keyboard and navigation arrows only. Not even tab is required. And this is specific requirement of most of the clients who wants to build financial softwares.
Probably so, because other reference types can be Nothing beside strings. Also, in places where you want to ensure a variable isn't nothing, you should use: If variable IsNot Nothing Then ' (1 operator - IsNot Nothing) Instead of: If Not variable Is Nothing Then ' (2 operators - Not and Is Nothing)
The concept of "logging in" is purely within your software and how you handle it. Your software login authenticates against AD using the DS library, then you handle authorization logic and how long the authentication persists in your code. I've seen people use the AD structure (OU's, groups, object fields, tree structures, etc) to control permissions, seen people use custom permissions stored in a database mapping, even seen it used as simple blanket "access or no access." Depends on your needs really. 
This looks like a really good option too. The advantages of the hack I posted below are that you can run those tests in VS without another tool... but it also looks like StopLight lets you do stuff from the terminal/command line so if you have your own build agents you'll be able to run the tests as part of that process.
Yeah that’s what I did, hooked it up to our CI setup. If my memory serves me what was really nice is that I could edit the tests, add steps, etc in Stoplight without having to do anything on the CI side (the ID for the test remained the same). .... but it’s been a while so I might be giving it some undeserved credit here .... 
Yeah that’s what I did, hooked it up to our CI setup. If my memory serves me what was really nice is that I could edit the tests, add steps, etc in Stoplight without having to do anything on the CI side (the ID for the test remained the same). .... but it’s been a while so I might be giving it some undeserved credit here ....
Yes. The user's session has timed out, and must be re-authenticated.
I suspected that was the issue, I just started looking into this. What would be the best way to handle that error? I'm thinking there should be a way to just suppress it? 
When friends have wanted to learn development or a new stack, I’ve found building a blog engine is a good starting point. The feature set is relatively small and very well defined, which helps keep scope under control. And there are lots of examples out there in case you get stuck. Whatever you do, have fun!
When I learned C#, it was to accomplish my job, so I had the pressure of finishing assigned tasks. This first job needing C# was more sys admin than developer, so the tasks were tweaks, fixes, and adjustments. When I learned Python I promised to make a Family Feud game for my wife and I to co-host at the reception to our wedding. The Python took care of scraping questions and answers from historic games from a fan site. There were two important characteristics to both of these times I learned a language: 1. I was very passionate about accomplishing the task. I could not fail. 2. The tasks were very small--as simple and single-purpose as possible while still having enough meaning to make me passionate about success. A large project is probably not a good idea. Try to think of something single purpose. For example, you could skip SQL, authentication, and exposure outside your network for your first project and make a simple web server that lets you turn your Hue lights on and off from within your home network. If you know nothing about the areas you listed, it might be a lot to learn all of them at once and actually complete a project.
Nah it's not like that haha. I recently learnt asp and ado .net and I am working my way towards mvc.net. I have made games on unity using c# before so I am kinda comfortable with the language. However I have been tasked to make a project and been assigned group leader (first project in my job) so I was thinking of something along the lines of a web application. That said most projects related to web apps turn out to be related to management systems for hotels, flight reservation etc which are boring so that's why I came on to Reddit . :P
Thank you, So it seems that it was actually the global.ascx page that was part of the problem itself. The Server.GetLastError().InnerException was null. I put some logic in to avoid getting the inner exception if it was null. Let's see if that alleviates the errors themselves. I'm relatively new to asp.net webforms so I'm working on learning best practices and how to capture errors in a situation like this. It's much easier to do in a page you've built for a specific purpose. But not knowing application life cycle makes it a little more difficult in these general situations. 
One possibility, though probably a time-sink, is to write a Roslyn analyzer (Google that term if you aren't familiar) and maybe even a fix (which is an optional part of an analyzer) for this particular scenario.
Probably a good learning exercise. There are lots of times where my project would have benefitted from a custom Roslyn analyzer had I known how.
What's your point? There's nothing special about that.
I also try to use String.Empty instead of "" most of the time.
IsNullOrEmpty was only introduced in v2.0, so if it's really old code your predecessor could not even use it. Strange than that there is no check against empty string though. 
Nah it's just code that can easilly break. Most of my colleagues are on vacation so I got some time to focus on the smaller things at the moment.
That's pointlessly verbose in my opinion, but as long as you're consistent across the project I see no reason to object.
Honestly, I was surprised to hear that they were actively investing so much in UWP development now that Windows Phone is dead. The template tool is rather impressive, especially compared to the bare bones, command line stuff we've been seeing over the last couple of years.
The video doesn't come up. What does it depict?
I use it too as it's much clearer on it's intent.
`Nothing` always means `null` with reference types like strings. Or if you want to get more precise, `Nothing` means the same as C#'s `default(T)`. **** Where VB is unusual is how it handles comparing empty strings. (A legacy from when VB strings didn't used to be nullable.) https://www.reddit.com/r/dotnet/comments/95astf/refactoring_if_not_somestringvalue_is_nothing/e3rm6z4/
I would suggest making a private and public messaging app. Maybe something you'd share with friends to get around the dreaded "group text". This will teach you loads - and no matter how advanced you become as a developer you can find ways to teach yourself concepts with this app down the line, be it scalability, distributed systems, real-time messaging, [pipelines](https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/), etc.
Take a look at the eshoponweb project, that should be a really good starting point
Thank youuuu :D
It can be overwhelming. PM me if you need any guidance/have questions. 
Make an extension method for string. Put whatever in there.
anything in my code that depends on itirating through lists or string values, I write the 1 line to make sure there is a list.count or value. Not worth the exception.
A project I started working on to learn Blazor with .NET Core is a wedding RSVP system. I have a page where you fill out a form for a wedding party and you can add people to the form and each person can accept/decline, include dietary restrictions, and a comment. Then on submit I'm doing form validation and saving it to a database using dapper. There's another page that lists out all the RSVPs in a table grouped by wedding party that you need to be authenticated to view. Host it all in AWS or Azure to learn more about deployment. Been a great project to learn for me and there's a lot more I can do with it to learn different things.
A project I started working on to learn Blazor with .NET Core is a wedding RSVP system. I have a page where you fill out a form for a wedding party and you can add people to the form and each person can accept/decline, include dietary restrictions, and a comment. Then on submit I'm doing form validation and saving it to a database using dapper. There's another page that lists out all the RSVPs in a table grouped by wedding party that you need to be authenticated to view. Host it all in AWS or Azure to learn more about deployment. Been a great project to learn for me and there's a lot more I can do with it to learn different things.
Check the Equinox Project, by a friend of mine Eduardo Pires. https://github.com/EduardoPires/EquinoxProject
They aren't going to give up on UWP. It is what their Windows Store applications run on and a significant part of the Windows 10 ecosystem.
This should help: r/https://www.c-sharpcorner.com/article/binding-dropdown-list-with-database-in-asp-net-core-mvc/ The way I have done it in MVC 5. \- Create a model using EF \- In the controller made a selectlist populated by calling the database \- Put that list in viewbag \- Used it in view by using dropdownlist This should be similar in Core from what I have seen.
In case you can't follow the code in the presentation, it's [available here](https://github.com/chrisdunelm/DotNetAnywhere/blob/master/mini-demo-dna/mini-demo-dna/main.c)
Dot net has now reached the FE community point. We have an unlimited number of these getting pumped out. No one is trying to work on one singular product to improve it. Just constantly re-inventing the wheel, thinking we can do it better than the last person and thus never forwarding our framework and tools.
I hope you're right, but that's what I thought about Silverlight, which was needed to control Azure.
I'm not really sure what you're complaining about. This is just a starter template.
Thanks for the help ! I really appreciate it :D
Your project seems to be really nice. Lemme see if I can spin this into a different tale. Thanks for the elaborate response :)
They are coming out with a whole new OS type (Core OS) based on UWP. They are all in on UWP.
With UI you usually want to go for what people are familiar with - no surprises. This looks completely different to every other windows application out there. I guess it was made this way so that it was easy to migrate people away from a terminal/DOS-like app in the 90s?. New applications shouldn't look like museum pieces. You can get great keyboard usability with "normal" windows UI elements.
You are right. these were Console apps previously. And to make the learning curve easier they designed their apps this way. Now even if I present them a material design enabled cool UI they will reject it. Normal UI elements are 'smaller' and has a lot of design and styles which makes it hard to focus on the actual task you are trying to do. 
lol no, not with those useless unreliable fuckers.
It sounds like you worked with them in the past. If so can you share your experience with us? 
As a Microsoft developer I will NEVER touch UWP.
Seriously. Who's got the time for that?
100% this
This is not true. WCF can be exposed as SOAP, which can be consumed by everything.
What if they allow you to distribute UWP apps without the MS Store?
That would be one hurdle knocked down. But the other one is, if WinForms is working just fine for me and the extensive third party library for WinForms is orders of magnitude greater and more mature and there, why switch? It's the same reason I didn't jump on the WPF bandwagon and I'm sure glad I didn't.
correct, you'll create a Dockerfile and build off that dockerfile: [https://hub.docker.com/r/microsoft/aspnet/](https://hub.docker.com/r/microsoft/aspnet/) Dockerfiles start with a base image, like the one above. There is a sample Dockerfile referenced on that page and a longer, more verbose walkthrough here: [https://docs.microsoft.com/en-us/aspnet/mvc/overview/deployment/docker-aspnetmvc](https://docs.microsoft.com/en-us/aspnet/mvc/overview/deployment/docker-aspnetmvc)
https://www.windowscentral.com/understanding-windows-core-os-and-polaris
Thanks.
Sweet find! I personally do everything in vim so it'd be cool to have a CLI debugger
Does this mean that WinForms apps will run on Mac/Linux? Assuming low-level compatibility, of course. But that would be pretty amazing...
sadly no, afaik only on windows.
Yes, it looks more like a way to leave .NET Framework behind than a way to embrace cross platform development more. 
From what I can tell, the majority of that post is dated from early 2017 and has since been resolved. JetBrains' Rider fully support .Net Core debugging. As far as I know, there is an official debugging interface that they were able to utilize. [https://blog.jetbrains.com/dotnet/2017/02/23/rider-eap-18-coreclr-debugging-back-windows/](https://blog.jetbrains.com/dotnet/2017/02/23/rider-eap-18-coreclr-debugging-back-windows/)
Not yet, for the moment, it’s dot net core on windows only.
DnSpy also supports .Net Core debugging. Even without source code. It's my nr.1 tool when I need to debug problems on a remote computer. [https://github.com/0xd4d/dnSpy/releases](https://github.com/0xd4d/dnSpy/releases)
I cant wait to get my hands on .net 3.0
I still have no damn idea why Microsoft hasn't bought or at least backed Avalonia as a cross-platform desktop GUI environment. Core could dethrone other desktop techs so easily but it's as if they just don't want to put in the effort and are content relying on that Windows will be the be-all-end-all OS for the years to come (which it isn't - Linux grows more popular year over year and Mac OS is taking massive chunks from MS's demographic).
&gt; Sing up for my newsletter Sign*
First thing that comes to mind is hosting and perhaps distributed systems. By default session values will be stored in memory for the webserver, and if you have multiple webservers, it won't find the values.
&gt;I still have no damn idea why Microsoft hasn't bought or at least backed Avalonia as a cross-platform desktop GUI environment. Xamarin Forms is cross-platform (or at least that was the goal) targeting Linux (via GTK#), Windows, Android, macOS and iOS. But if we're playing favorites with .NET UI libraries, Eto or Elmish would be my choice.
we are on azure, but just one app service, and it happens on my local dev machine too. I've been rolling things back to try and find if something changed but no luck so far. 
I'd work the other way. Go back to where it worked and then incrementally make changes until it breaks. Sounds like a tiny tweak I know, but subtraction is always harder than addition.
yeah worth a try!
Thanks for noticing that @foreverwantrepreneur :) 
Are you trying to access it within an async context? Also what version are you targeting in the web.config for the httpRunTime element? I know MS changed the task synchronization context in ASP.NET and I've seen this occur when I targeted the wrong version in the httpRunTime element. 
Do you have the link for the course?
Unfortunately this blog has been disable, it was so good to me when I did the 70-480 :(
Which FOSS projects do you contribute to?
I highly recommend people take a look at my Qml/QtQuick integration for .NET. It really is great approach for cross-platform GUI development for .NET Core. https://www.pknopf.com/post/2018-08-06-a-new-approach-for-cross-platform-net-gui-development-introducing-qml-net/ https://github.com/pauldotknopf/Qml.Net
You separate the client that talks to the services into a class with an interface and inject that class into whatever class processes the response. 
What's the relevance to this question? 
It's relevant because you're bitching about other people's work while contributing nothing back yourself. You belong on /r/ChoosingBeggars 
Cheers @doubl3h3lix - few typos not found by spell checking ;) 
Unit testing is all about testing the internal workings of a method, isolated from everything else. Usually, in order to isolate a component, you have to be able to replace the components it rely upon (collaborators) with mocks of them. So for example your component wants to make an api call. And do some calculations with the response. What I would do is separate responsibilities. One component just does the calculations, and another does the calls. From the perspective of the component doing the calculations, it doesn’t matter (and shouldn’t matter) that the results come from an api, from a file, or are hard coded inside a test. So for testing your calculations component, you would mock your api-calling component. And setup it so that it returns some prepared responses to your calculations component. Prepared to trigger different paths of execution and test its results. So the purpose of unit testing that component would be to test just the calculations given different inputs. In this case, the inputs would come from the mocked collaborators And as someone said before, if you show some code, maybe we could help further 
Yup. Thinking of moving the PCL to .net standard as well, but just doesn't have time to do it now. I'll get to it soon! 
For maximum exposure to the most commonly used tooling I would use Visual Studio 2017 on Windows. There may be a few places using .NET &amp; VS Code on Windows / other OS's but they will be in the vast minority. Once you are well versed using the standard tooling, then I would start exploring VS Code &amp; other areas that interest you.
VS Code is hardly a thing on Windows shops. Enterprise developers really like the GUI tooling, plugins and Wizards that are only available on the actual Visual Studio. Also most shops are still pretty much focused on .NET Framework, as many .NET libraries still have issues with .NET Core tooling,
Cheers. That makes sense.
So you think I should focus on core?
Why don't Microsoft release their own, official starter for this? I think there would be pretty large audience, since many people tend to create SPA apps and need authentication for that. 
 /// &lt;summary&gt; /// Determines whether the request is a web API request. /// &lt;/summary&gt; private bool IsWebApiRequest() { if (HttpContext.Current.Request.AppRelativeCurrentExecutionFilePath.StartsWith("~/api")) return true; if (HttpContext.Current.Request.AppRelativeCurrentExecutionFilePath.StartsWith("~/legacy/api")) return true; return false; } void Application_PostAuthorizeRequest() { if (IsWebApiRequest()) { HttpContext.Current.SetSessionStateBehavior(SessionStateBehavior.Required); } }
Depends what business you are applying for. .NET Core is the future and the long term plan where Microsoft intends to go. Having said this, most enterprise critical software are pretty much .NET Framework only still. For example, Oracle still hasn't production ready drivers for .NET Core and they aren't alone. Same applies to any native UI stuff or libraries in the same price range as Oracle software. So if you aren't targeting those Fortune 500 companies, where these kind of licenses are peanuts on their budget plans, they might already be on .Net Core 2.1 already.
I'm working for a company where we primarily use Microsoft Technologies (I'm in the SharePoint developer BU of this company). You should focus on VS and .NET Framework first and VSC + .NET Core in your free time to be prepared when you'll have to create your first professional project with these techs. Also, you need to know that you're likely to use an older version of VS when you'll work on the maintenance of an old project. Starting from the 2015 version, VS is a very pleasant IDE to use but, before it, you'll miss some nice features.
...is a stupid question because there is no "is not null" in C#.
Define useful: 1. Can be used to solve a problem without being worse than current methods. 2. Can be used to solve a problem in a better way than could be done without it Since outside of some pattern matching situations (and unrealistic operator overloading) it works literally the same way as `== null`, definition #2 isn't applicable in the general case. And since it lacks an equivalent to `!= null`, even the more generous #1 isn't applicable. 
In context, `if(!(foo is null))`. Not the easiest thing to spot.
Bounds checking, exception handling, and not forgetting to new up instances of classes your using. Other than that, unless you write flawless code roght off the bat, you're going to get them now and then. It's a really common error to have and visual studio has a good debugger to help you sort the issues out. But realistically you're not going to avoid null reference exceptions, they happen, it's part of the gig.
&gt;overloaded equality operator (...) are the backbone of using reference types while still comparing the contained values inside of them Is this really true? I use .Equals(object other) if I want to compare semantically
* C# 8 has a [new feature](https://csharp.christiannagel.com/2018/06/20/nonnullablereferencetypes/) which will allow you to make reference types non-nullable by default. * [Code Contracts](https://github.com/dotnet/roslyn/issues/119) used to be supported to allow the developer to easily define the conditions of the parameters and the return value, but it's deprecated now, and most people are moving away from it since it's not supported in later versions of .NET tooling. Keep an eye on Code Contracts, since they might return later. * Use [Roslyn Analyzers](https://github.com/Cybermaxs/awesome-analyzers) to improve the overall quality of your code, reducing the chance of hitting an NRE indirectly. * Use empty collections instead of null, to avoid NullReferenceException at runtime. And make sure that you handle the logic for empty collections wherever the collection is being used. This is an example of the [Null Object Pattern](https://en.wikipedia.org/wiki/Null_object_pattern#C#). 
I could not found the same wheel you mentioned, thats why I created this template. If you found it, you're welcome, but if you are not stop bitching. People may use it or learn from these kind of projects. We are not in secret holy quest with .Net.
I can't point you to a blog but overriding these things are pretty straight forward. For instance if you want to override the IdentityUser just create another class that inherits from IdentityUser and add your new fields for example FirstName, LastName etc. If you want to set the identifier of your user (I think by default it is nvarchar) simply inherit IdentityUser&lt;your\_type\_here&gt;. Instead of referencing IdentityUser reference your new class wherever you use it in your code base and remember to do a migration on your database afterwards ie in package manager console Add-Migration "ChangedUserTable".
on the regular login form: @using (Html.BeginForm("Login", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { role = "form" })) { @Html.AntiForgeryToken() and then in the externallogin partialview: using (Html.BeginForm("ExternalLogin", "Account", new { ReturnUrl = Model.ReturnUrl })) { @Html.AntiForgeryToken() so, the answer to your question is: yes.
yeah that was one of the things I tried, didn't work. See my edit. Before that, it worked, without setting sessionstate behavior.
That...is not how that always works. Why do I have to contribute to say, "Hey. This thing, it already fucking exists. Don't do it." How does my saying that enforce that I have to contribute. The thing that I want contributed to, ALREADY EXISTS. 
Just gonna leave this here https://msdn.microsoft.com/en-us/library/ms173147(v=vs.90).aspx
Thanks for all the links you referenced in your answer, I'm actually going through them to learn more. I think with that I'll have less trouble with this null reference exception stuff
I'm not saying you are wrong, but where is it recommended? I think of the equality operator as a pure reference equality check on complex types, whereas the .Equals as an opt-in value equality. The only mention of it in the MSDN article is that they state "it can be useful" to override the equals operator with value semantics if the object is immutable. But then you also have to override the inequality operator for consistency.
posted the code block above with a note.
posted the code block above with a note.
So in this example you *could* have an interface called INetworkInterface that has a method that returns IPAddress[] . Then in the class your function is in you pass a class that uses your injected class. This is such a single function though. When writing tests you should be thinking about how you're going to catch regressions and all this does is return a list. I guess you could test that given parameters like _environment this function returns an address that makes sense. 
Honestly I dont think I need to test this. The problem is this entire simple service consists of functions to do this and i wanted to update it but my company is now requiring 50% code coverage to push production applications. Frankly I'm at 25% and nothing else is really easily testable. I was trying to avoid scenarios where my tests would require major code changes just to get my few logging changes into prod. 
Does it run on Windows now? I was under the impression it wasn't there yet
This point was also brought up in the [Jon Skeet/Mads Torgensen C#8 talk at NDC Oslo](https://www.youtube.com/watch?v=gGUYUJmssYM). I believe at some point Mads says that using `== null` is a code smell to him. 
Thanks for your response. First, a reflection. If your method includes a call that would do a network operation (or file, or database), it cannot be really _unit_ tested. The reason being, it performs a real DNS query. The results would depend on the DNS it is querying, the point in time at which you are querying… In order to make your component more testable, I would wrap Dns.GetHostEntry in another component, then extract an interface of that wrapper, then inject that interface into my component. public class MyComponent { private readonly IDnsFacade _dnsFacade; public MyComponent(IDnsFacade dnsFacade) { _dnsFacade = dnsFacade; } public IEnumerable&lt;string&gt; GetAllServersInPoll(string environment, string siteId, string host) { List&lt;string&gt; listOfServers = new List&lt;string&gt;(); try { IPHostEntry hostInfo = _dnsFacade.GetHostEntry("appserver." + environment + "." + siteId + "." + host); IPAddress[] address = hostInfo.AddressList; foreach (var ipAddress in address) { listOfServers.Add(ipAddress.ToString()); } } catch (Exception e) { Logger.Fatal(e.Message); throw; } return listOfServers; } } public interface IDnsFacade { IPHostEntry GetHostEntry(string hostNameOrAddress); } public class DnsFacade : IDnsFacade { public IPHostEntry GetHostEntry(string hostNameOrAddress) { return Dns.GetHostEntry(hostNameOrAddress); } } You see, now, we have a pure code component, that doesn't depend on any environment (such as a dns server), and we can do unit tests, such as: public class MyComponentTests : IDisposable { private readonly Mock&lt;IDnsFacade&gt; _dnsFacade = new Mock&lt;IDnsFacade&gt;(MockBehavior.Strict); private readonly MyComponent _sut; public MyComponentTests() { _sut = new MyComponent(_dnsFacade.Object); } [Fact] public void GetAllServersInPollShouldCallDnsFacade() { var environment = Guid.NewGuid().ToString(); var siteId = Guid.NewGuid().ToString(); var host = Guid.NewGuid().ToString(); var expectedStringIpAddress = "1.2.3.4"; var expectedIpAddress = IPAddress.Parse(expectedStringIpAddress); var ipHostEntry = new IPHostEntry { AddressList = new[] {expectedIpAddress} }; _dnsFacade.Setup(x =&gt; x.GetHostEntry("appserver." + environment + "." + siteId + "." + host)) .Returns(ipHostEntry); var actual = _sut.GetAllServersInPoll(environment, siteId, host); var actualIpAddress = actual.ShouldHaveSingleItem(); actualIpAddress.ShouldBe(expectedStringIpAddress); } public void Dispose() { _dnsFacade.VerifyAll(); } } There you can see the test 3 phases: * Arrange: you create the parameters you will pass, the responses of the mocks, do the setup of the mocks to return those responses * Act: You call the method you're testing and get the response * Assert: You assert the actual results that you got, and verify the mock setups are satisfied It did take me some years to be comfortable with it all, and there are many many approaches to unit testing. Some prefer to use stubs + verifications. Some (like me) prefer mocks. A matter of taste, and being comfortable, and above all, always know what you're testing
Yeah I looked into it, just UWP. Still cool though, I'll have to give it a shot. The weak designer in me still cries at the lack of no visual form designer though :'(
Yes, you can make the syntax for the check longer. But why would you?
Because like you said, there is no "is not null", and the original post was about equality operators having sometimes hidden consequences. The only true no side effect non null check is either `!(obj is null)` or `!ReferenceEquals(obj, null)` 
You're right, there is probably nothing I can say to make you less of an entitled brat.
You could also write `((object)obj) == null)` to bypass operator overloads since they have to be known at compile time. But again there's not really a point. If the equality operators aren't working correctly, fix them. It's not like we're constantly running into 3rd party, non-open source libraries that we must use that also overload equals and have done that overload incorrectly.
How am I entitled?
While I don't specifically disagree with the advice of preferring `is null` as a default choice over `== null`, in my own work I've found it largely to be a non-issue since C# 6. Using a combination of the null conditional operator and the null coalescing operator, I almost never explicitly check for null any more. As a bonus, I'm pretty sure both of those do the moral equivalent of `is null`, bypassing any potential overrides.
I always like to start my projects from scratch and skip the templates, that way I know exactly what bits I'm using. A quick Google search will show plenty of tutorials and guides on using react with .net core 
Yes, I've always wished a `!is` operator: `if (foo !is null)`
I've been dabbling in your library and it's really nice! But after investigating QT a bit more, its licensing concerns me. It seems that if I don't want to pay for a license (**$459 per month**, really?!?) then I have to either: 1. License my entire application as GPL 2. Not include the QT library in my application which means the user would have to manually install/update their QT library themselves Option 1 is fine if the project was originally intended to be open-source, but this may not always be the case. Option 2 also puts an unnecessary burden on the user and could lead to potential version mismatch issues. Am I reading this correctly, or am I missing something?
It really comes down to being stuck with poor language design, and now we just have to live with it. Swift, for instance, has the operator == defined in its Equatable protocol (interface), which means it’s simply not available by default. Then, for reference types only, you also have === to check reference equality (and this can’t be overridden).
I work for a company that mostly uses microsoft stack. VS 2017 has much more features than VS code. VS code is meant to be light weight. If you are good with c# I would recommend Pro [ASP.NET](https://ASP.NET) MVC 5 book, unless you are looking to work with core. However, job market around me is mostly looking for MVC 5 and core is not that popular yet. This book should allow you to jump right in.
Ok, it seems I misunderstood that part of the license. So it allows you to include QT as long as the user can swap it out themselves? What does that look like in practice? Great job on the library btw. :)
&gt; What does that look like in practice? Just keep QmlNet.[so|dylib|dll] (that native C library) somewhere that your end users can get to and replace, and give end users the source for them to build the lib themselves.
How technical do the talks have to be vs industry? I have a talk I have given locally about freelance development, some about document db storage, and another about managing teams within technology and tech hiring. Would the document storage be the one that is appropriate for the audience since it is the most technical? Or would there be interest in things not as "developer-ish?"
Tl;dr: &gt;It is not a good idea to override operator == in non-immutable types.
Won’t that affect the config files? 
It does require some vigilance on your side, but my preferred approach is definitely to use an option type to represent potentially inexistent values. https://github.com/nlkl/Optional (Full disclosure: I am the maintainer) After we started using Optional, along with a set of pretty strict guidelines for when null can actually be used (basically only in the boundary between your code and external code), we barely encounter null reference exceptions anymore.
tl;dr "you can use this neat trick to work around when you overload op_Equality to do stupid things".
I know this guy is just trying to prove a point, but he really shouldn't introduce bugs in his code and just say that .Net should be fixed. For me `== null` is also a code smell, but just because I prefer `null ==` . But that is just how I learned it in C++ (*it prevent nasty bugs when you type* `=` *instead of* `==` *but is nowadays caught by the compiler*). Also `is null` looks very strange since we already have `is &lt;type&gt;` and null isn't a type... To try to prove my point in exactly the same way as in the article, I could write code like: class @null { } if (MyVar is null) { /* checks for null-value */ } if (MyVar is @null) { /* this checks for null-type */ } (*yes, this actually works, I've tried it but not proud of it*)
It's how nuget works. X relies on Y, J and Z. It imports Y, J and Z. You don't say if you're using command line or VS. If you're using VS, you will see what the dependencies are when you choose a package. I've no idea how that works from the command line. It's a good system, but you're right to be worried. It's the most dependent of DI :) You have to think about it, assess the implications and decide on how to ring fence some of the more fuckwitted libraries that insist on adding 30 crap things you just don't need.
I have noticed that 'younger' developers don't know what box/unboxing is. Back in the time-frame of 1.0/1.1 (pre-generics) this was a more obvious problem. Like in the article it shows ArrayList, but nowadays you would just write List&lt;int&gt;. But the problem and performance-impact still exists, so this is still a valid article/subject.
Does anyone know if string.IsNullOrEmpty() effected?
&gt; only switching Package Management Format to PackageReference seems to have mitigated this behavior to some degree Correct. I somewhat recently converted a couple dozen related projects all over to SDK style csproj and for the MVC 3-5 apps, PackageReference in the old style csproj. It took a while, but was worth it. We reduced specifically reference packages in projects from several dozen to just a handful, and resolved nearly all (and there were many) issues with binding assembly redirects. Trying to do the half-way thing where you're using old style csproj files but referencing newer .Net standard packages was creating a lot of mess and hassle.
"Is null" also matches SQL Server context better. I write a lot of my logic on the db side.
Thanks for responding! I would submit both. We need techy and not. We look at what is relative to attendees, which we have a larger range and type. You can do more than one session.
Just because it's an integration test doesn't mean it shouldn't be repeatable and it doesn't mean you shouldn't take attempt to automate it either. Therefore, you should be setting up a database for the sole purpose of integration testing. You should also be developing a way to ensure that the database has a consistent state before each test. Once your there you can begin to run your integration tests, but you have the issue of one SP disrupting the state of another SP. This is typically handled by wrapping the db call in question with a transaction that gets rolled back once it's been run. If the methods handling your db calls don't expose a way to control this, then you'll need to do some refactoring. The last thing you consider is whether you will run the integration tests against the same engine as your production database (i.e. mssql) or if you're going to run them against an alternate database like SqlLite or an in memory db. There's several options around that with a trade off between consistent behavior and speed of ruining tests.
Hi @Debbus72, yeah, and it's not only with boxing/unboxing, but generally with low-level details of the framework. Especially that nowadays at the universities students don't always have chance to work with C/C++ or some low-lever language to get familiar with these details. Some students I know started and finished the uni with Java, not working with any lower level language beforehand.
I had to click around to get it to load the saved video: https://player.twitch.tv/?autoplay=false&amp;referrer=https%3A%2F%2Fwww.redditmedia.com%2Fmediaembed%2F95wlvl&amp;video=v295063906## 
If possible, setup and tear down tables and data for your integration tests just for that test class at most. If you can setup and tear down an entire DB instance in a reasonable amount of steps and time, even better. Tooling and IaaS options are getting better and better so spawning a whole unique DB instance and tearing them down is less and less cumbersome and less time consuming, but you'll have to evaluate trade offs there based on exactly what you're doing. These instances do not need to be full deploys of everything required for your domain model, only just enough to test your specifics of the integration test you are looking to perform. More involved integration tests of course lengthy setup/teardown steps, become slower, etc. With "heavier" databases (SQL Server, Oracle, etc) you may have to use a single test instance for practical purposes, perhaps a local emulator or "lite" instance, but that likely comes with additional dev machine setup requirements which can often be the bane of development. Make sure you document this setup for new devs, or if possible roll it into your dev machine image. In a perfect world you install Visual Studio, clone a repo, then can run all tests. That's actually perfectly possible when using cloud/IaaS solutions. I've found cloud instances, to varying extents, to be much more flexible while still requiring less dev machine dependencies, but would probably represent a full shift to cloud solutions. Again, often spawning whole new instances is so fast and cheap you can do it on the fly for at least some level of integration testing. My last project used dozens of instances in the cloud and can still run in a dozen or few seconds, including spawning new tables, test data setup, execution, evaluation, and tear down. You'd be surprised how cheap this is because you're really only running a handful of transactions at fractions of pennies each, and not really storing much data at any one point in time. 
Great advice here., Contention is definitely something to think about. Ask questions like "can more than one dev run this at the same time?" A workaround is schedule integration tests rather than make them on demand. Ideally you're not constantly refactoring stored procedures, which might be a sign of burying too much business logic in them. 
There hasn't been any logic or explanation with anything you've said. There's nothing to follow. 
You're being a whiney bitch.
See? That's what I mean. 
I stripped it down to this url, and it loaded fine: https://player.twitch.tv/?video=v295063906##
You whined and bitched thus you're a whiney bitch. There's your first lesson on logic.
This stupid thing is the knew better. Which is why VB has a different operator for reference and value quality.
No, because the equality check on string isn't intentionally broken.
This looks really clean. I'll have to give it a try. Another licensing question: how does this work if i used this for building internal tools for business purposes? Is it the same as the other question, where as long as the end user could swap out the qt binaries I'd be good to go? 
What is the purpose of your tests? We write test methods to call stored procedures to make sure the crud code is working before writing the client code. After that, the test methods really only get used to debug code without running the application. Database Access code really only needs to be tested when something changes. We just keep the connection string in the configuration file and change it if needed. We never really run every test on the Data Access code. Just run them when needed.
I was going to suggest setting up and in memory database that will be recreated before each test, but I've only used it with EF so I'm not sure if it's a viable solution for you.
&gt; how does this work if i used this for building internal tools for business purposes? Is it the same as the other question, where as long as the end user could swap out the qt binaries I'd be good to go? Yup. I believe this is fine with even with GPL (it addresses it directly).
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/webdev] [Using ASP.NET MVC Razor Views, how can I add X number of dependents to an Employee in a form?](https://www.reddit.com/r/webdev/comments/9633ue/using_aspnet_mvc_razor_views_how_can_i_add_x/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
When should the dependents be saved? Add new data entry rows via JavaScript and once the dependents have been entered the user can use a submit button. As for the form name AFAIK you can use Dependents[0], Dependents[1], etc..
Couple ways off the top of my head to accomplish #1. The more "Razor" way might be to prefill the employee model with X number of empty dependents, appended to their existing ones perhaps with a hard cap of X. Use a @foreach in Razor to construct the placeholders and use CSS &amp; JS to show/hide them. The more "JS" way would be to have JS actually construct the elements on the fly and append/manage them, preferably using some type of model binding framework like angular/react/knockout/vue/etc. For #2, if Razor views work like traditional Razor, then the default model binder will parse the posted results if you include a bracket contained index value like 'Dependents[0]' for the input name. See this article for more information https://haacked.com/archive/2008/10/23/model-binding-to-a-list.aspx/ In the article the most relevant part uses an array at the primiary model for the view, but it should get you in the right direction. As long as you construct you new elements with sequential names like Dependents[0].FirstName, Dependents[1].FirstName, etc. it should work if you're binding the posted results back to the Employee class.
If you Xamarin.Forms, WPF support was recently added.
That UWP is Windows 10 only FYI
Also, &gt;! To check for reference equality, use ReferenceEquals. To check for value equality, you should generally use Equals!&lt; And &gt;!By default, the operator == tests for reference equality by determining whether two references indicate the same object. !&lt; I personally understand what the author means in their article, but be it from my having learned C as a first language or simply because the claim that if something can be overridden badly it shouldn't be used sounds ridiculous, I can't get behind this idea. 
Double checked, no second Token. It's hosted on my development machine for now... And no. :(
well shit, Triple checked the token thing again. The partial view was accidentally included within the regular form, so it was indeed a second token in the form.
Good question, added to the pool.
If I recall correctly, you should be looking for .NET 3.51 as that was the last of the .NET 2.0 lineage. Which is to say, it uses the same CLR and just adds more libraries. 
http://www.viksoe.dk/code/asmil.htm :-)
You have to say why otherwise we can't give you help (or counselling)
This thing is funny, but I think it would be much more interesting if I could embed native x86 code into .NET assemblies, rather than compiling x86 assembler to MSIL.
Ouch. Good luck...
I am currently working on an in-house stock request system with multiple OrderItems for a given StockRequest, similar to your form. I don't have the code right now, but I can give you a brief overview of how I've implemented it at the moment. I'll use your Employee and Dependant objects instead of StockRequest and OrderItems. The initial /create view shows all the fields for creating the Employee, then the user submits the form as normal. The POST/Create action takes care of creating the Employee record in the database, then redirects to a /AddDependants view. I've structured this in a way as to show the Employee details as text, and a single form to create a new Dependant below. The Dependant form also includes a hidden field with the EmployeeID to link it to the selected Employee. The user fills out the FirstName and Surname fields, then clicks the "Add Dependant" button. The POST/AddDependants action then adds the Dependant, and returns to the same View (/AddDependants) to allow the user to create another Dependant. It works, and the previousl-entered Dependants show up in a list under the Employee details so that users can keep track of who/what they've entered. I would prefer to add the details with AJAX and allow the user to edit previously-entered items, but a) this version is still in a very early alpha, and b) I'm not great at AJAX. I did find some posts on Technet and StackOverflow that showed how to submit a form via AJAX and/or render a partial view as a result of a POST, but I haven't looked into them much. As I say, it's more important to have the system in place that make it look like magic. Let me know if you'd like to see some examples and I'll see what I can dig up. I won't be at work for a few days, but I may be able to log in and extract a couple of files remotely.
J#
No, they killed support for the final release in 2017, per wikipedia
Boo, used in Unity. I think it's no longer maintained, but that sounds exactly what you're looking for.
How to properly dispose of COM objects in interop, if general use cases differ from MS Office products. I've seen conflicting advice where the accepted truth seems to be to call Marshal.ReleaseComObject for every object accessed, yet this approach is heavily derided and the recommended way is to simply call GC.Collect() and GC.WaitForPendingFinalizers() one scope above.
 This happens to be every once an a while after changing absolutely nothing. The issue has been around for awhile and MSFT still hasn't worked it out. Hate them for it and their support sucks. Fuck Microsoft.. VS and IIS are garbage for how long they have been around. 
Makes sense; Blazor is still largely a skunkworks project.
We just have vocal groups of JS haters that would praise anything that quickened its obsolescence.
TypeScript made the agony better though. 
It holds no appeal for me. I can't wait for a decent WA first tech to step in, but Blazor is not it.
Nobody really should be adopting it yet, it's in preview. Piss around with it for sure and help them develop it but it's not even officialy supported yet. Fingers crossed in the long run though because it'd be nice to enjoy front end again.
At least personally, it's not about JS specifically. I just wish there was a statically typed language for the web.
As somebody that has never tried web development, is javascript really that bad? Sea like all hipsters who develop on iMacs love it, while they sip the mocha choca iced fappucinos. 
I would really love this.
We have vocal groups now? Where do I join?
Ha ha, thanks 
Leaving aside cultural issues and such, my big two are the type system and prototypical inheritance / "this". The first few people pay enough attention to, and the latter is just confusing as hell. Its not AS bad as PHP, but its my second most hated language... or maybe third I guess, as VisualBasic has to work its way in there somewhere.
It's still an exeperimental technology so I think this is fine. They'd have another problem if it was mass adopted. ;-)
And Dart! :D (said no one, but boy does it make Javascript more bearable)
Agreed. I feel there's little reason for dynamically typed languages anymore with modern type inference.
First of all, good luck. For angualar you can search angularjs instead of. Angular only and you will find more stuff for angular 1. For mvc 5 you can see old documents on the asp.net website closing your version 
I already did `from System.Collections.Generic import List;`...
Typescript?
Never even heard of it.
sorry, I had assumed you used `import System.Collections.Generic` instead (which is how I've used typed arrays). using str should work (and does for me) so I'm not sure why you getting the error (System.String is worth a shot as a workaround that _should_ work)
Yeah, it used to work but when I tried this program again it failed for some reason... Maybe a newer version of IronPython?
Imagine: you can write a full Web application entirely in C# with any nuget library and HTML/Bootstrap Css with NO Javascript, share front and back end classes and it runs in any browser as a full SPA. No. More. Javascript (Or Typescript). At all. Ever. Again.
I don't know how big the project is, but I'd try to get the project to at least AngularJS 1.5.0 though. The reason for that are components, they make your life easier. 
I mean that sounds good, but why does it sound like I will need to do a lot of work around to get the desired behavior? It's all interesting tech for sure but not sure it's for me.
Exactly, it is made very clear that it is *not* for production use and, more importantly, **not supported**. Why would people be adopting an unsupported tech stack that still has plenty of issues, still is missing some essential development tooling and could be dropped at any time? I love Blazor, but let's be realistic - it's not ready for prime time yet.
It's not that bad. It's weird at times, but it's just like anything else - it has challenges but you figure it out and move on.
Honestly? This is going to sound a bit crass, but it's not as good as Silverlight. Make any sense? I have no idea how to make that not sound insane :)
C++/CLI I think is the only other "official" .NET 2.0 language not mentioned here.
As I have said before and don't want to beat a dead horse but if MS even took the experimental label off Blaze and called it an alpha it would have more interest/awareness. Even an alpha would say - we are committed to this being the future. Experimental just screams - Yeah this might be a tech we will are likely to abandon. 
Except to use typescript you have to learn typescript, and everything that comes with using typescript. As if the web dev stack isn't complicated enough as it is. I have an absolute love/hate relationship with web dev. I love what you can achieve in terms of end product, but as a full stack dev I simply cannot keep up. There is absolutely too much unnecessary churn on the web.
If you ever have the chance to do anything with Richard, do! Listen to his talk, be in his classroom, talk to him at the bar after the conference, etc. The dude has a ton of knowledge, is a legit friendly person to talk to and can captivate an audience. I don’t regret any of the time I spent listening or talking to him.
Also consider listening to the podcast he and Carl Franklin do called .NET Rocks. Great information on technology from the bright minds that are developing it.
Can't recommened it enough, a great podcast!
It is still a work in progress. If you can provide constructive criticism then now is the best time to do so. It will help to make the final product better for everyone and something that you can get excited about.
Some excellent advices there!
He is working on a book covering .NET history and I really hope he releases an audiobook version, he is very fun to listen to.
To a degree it's necessary until we get nullable reference types in (where we can assert that an object won't be null).
eh. I'm not excited about Blazor at all at this point. The people who are enthusiastic about it seem mostly people who are enthusiastic about the *idea of it*, but haven't actually dug into [the](https://blazor.net/docs/components/index.html) [detail](https://blazor.net/docs/javascript-interop.html) of how it works, or tried to actually use it. It's clunky. The .Net folk have missed the ball on this one; they should be paying attention rust's WASM backend, that allows you to compile assemblies that can be *consumed* by web browsers, not trying to replace javascript. I can count on my fingers how many attempts to replace javascript have worked in the past (Dart, it totally compiles to JS! GWT totally compiles java to JS!). WASM is a foundational technology that will allow the web to grow beyond javascript... but 'throw away all existing javascript' is not the correct step 1.
ah! I never miss an episode. The banter between Carl and Richard is fantastic.
Pluralsight.com and practice, practice and more practice. Don’t use a front end JavaScript framework you don’t know or you will need to learn both client and server side. ASP.Net core 2.1 should work for you but don’t be afraid to use the 4.7 version of the full .net framework if you need too. It older .Net Framework May have better APIs and 3rd party tools for working with XML and or .pdfs. Also, my best advice is to keep the code outside the web project. Use class library projects and keep it simple. Good luck.
I'm not the person you're responding to, but since you asked for honest criticism, here's how I see things. The people I know who are excited about Blazor are VB.NET Web Forms developers who just recently learned C#. For them, Blazor is a way to avoid learning JavaScript. Frankly, I don't think JavaScript avoidance is a good career strategy in 2018. These developers would be better served learning to use React rather than holding up everyone else's progress because "Blazor might come out one day, so if we adopt a JavaScript library it will be time wasted; so let's just write 10,000 line jQuery files instead."
Hey, thanks for the reply! So probably net core with Razor pages &amp; ES6 no framework? I know React decently well.
I remember switching from Vb to vb.net and was like wtf? The nostalgia. I also miss the MFC class diagram posters you got when you purchased MSVC++. 
I don't know of any but I used a monolib.dll backport to get async and await and other newer .net features all the way back to .net 2.0
This. There's few things more frustrating than dealing with bogus type defs. If the entire js ecosystem was actually using typescript this might not be a problem but thats not the case. I will admit its much better that it used to be. Even then ts doesnt hold a candle to say f# or kotlins type systems. These languages have spoiled me a little.
Electric light bulbs were a crazy idea.
Hmm Strange. Tried to clear cache?
I tested it on a completely different machine
No. ES6 is fine. It's not perfect but a lot of the hate towards modern JS is irrational.
I will look into it again :)
It seems like a fine technology, but we can't expect most devs to know anything about it yet. It's still in the experimental stage. It might not even be an official product.
Why does it have to be alive? You're asking for a language based on a 16-ish year old framework.
If you know React, go for it. Good luck. Also, TypeScript is awesome sauce but if you have never used it, it’s more to learn.
that was great
The latest stable is 2.7.8, I do recall having issues getting the beta versions to work before.
So is pure client-side Blazor going away? Will we be able to use client-side without the server component and SignalR? 
Is this a joke? It seems like it would be too much work to write this for a troll attempt, so assuming you are serious, here are a few reasons not to go through with this: * Trying to rewrite a product completely from scratch is [generally considered to be a really bad idea](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/) * You describe yourself as an entry level web developer near the end of this post. An entry level developer should not be the primary architect of any important system, let alone one that you describe as being fairly complicated. * You describe yourself as "not a .NET developer". Again, someone who isn't a .NET developer should obviously not be the primary architect of a system written for .NET. * You mention that things like encryption and authentication are important in this system. Again, not something that should be taken on by an entry level dev, or a dev who is completely new to the stack. * You mention that you are the sole developer at this company. This, combined with the fact that you are new to the stack, is a recipe for terrible coding practices, and even worse documentation. I don't mean to discourage anyone from using .NET. My advice would be the same regardless of the stack. The whole "job security" thing is meant to be used in jest, you know that right? If you happen to pull this thing off, at best you'll be lining yourself up to be [an expert beginner](https://daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/). What's more likely is that you'll realize part-way through (or your employer will) that you're in way over your head, you either quit or be let go, and they'll hire some consultants for a lot more money to come in and clean up your mess. Honestly, this post reads like a piano teacher who is trying to figure out how to stay 1 lesson ahead of his students.
\*sigh\* Why not take an idea that isn't working out quite as you hoped... \&gt; The simple fact is that the client-side model relies not only on WebAssembly but also the efforts of the Mono team and their WASM .NET runtime. While progress is being made extremely quickly it's not not quite there yet. AOT is not an option, there is extremely limited debugging, performance needs to be improved, download sizes are to big, etc... ...and pivot to different, easier, and ultimately pointless idea? \&gt; The server will execute the component logic server side producing HTML. This is then compared, on the server, to a snap-shot of the DOM currently on the client. From this comparison the changes required to make the DOMs match are produced. These changes are then packaged up and sent down to the browser via the SignalR connection. Once at the browser the HTML changes are unpackaged and applied to the DOM. \*shakes head\* \&gt; w*hat is the difference between server-side Blazor (Razor Components) and MVC?* Dunno; it's certainly gone and left my mystified as to what the difference between what I can do right now with MVC+js and what I can do in the future with Blazor+?? &lt;-- ?? Being js, because we're not doing client side stuff now? (and before you say, 'client-side is not going to get left behind.', the paragraph there, about Razor components being part of .Net Core 3.0? Yes, that's the same as saying the client side will \*not\* be in .Net Core 3.0; ie. the ?? \*will be\* js)
I would suggest you do a couple of tracer bullet projects, where you try to build one user function that you’ve identified. Front end Ui action -&gt; Model -&gt; Controller -&gt; Backend business logic -&gt; Service calls / DB / Filesystem -&gt; And back up the stack. If you know React, you could use that or simply start with vanilla, jQuery or Bootstrap. Finally, why not leverage your PHP knowledge and work with [PeachPie](https://www.peachpie.io) to bridge Php and .net? Maybe that can be one of your tracer bullet projects? Although, this might be very risky to bring as a technology into such a project for the company owning it. 
[@foreach's latest tweet](https://i.imgur.com/Id424eL.jpg) [@foreach on Twitter](https://twitter.com/foreach) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
no longer no one - I'm hearing it all the time because of Flutter
&gt; That's a pretty silly point of of view to have. No whats silly is people actually talking about final product as I have seen done on an experimental projects and for the record I don't worry about the opinions of people who show their total lack of intelligence by calling things silly merely because they have insufficient capacity to understand points that go over their head. the point was to commit not drop. this has gone Faaaar beyond where experimental usually goes. People outside and more particular inside MS talking about the greatness of Blazor ,measuring adoption rates, speaking of fianl releases and the future of C# on the front end etc etc. If you want to have experimental status then shut up about it. Don't be evangelizing something to that level which there is no cmmitment toward. If you are a neophyte and/or a silly person yourself you can ignore the loooong track record of MS killing off projects that were not even experimental. However because someone isn't a neophyte it doesn't mean they are silly. It just means you are a fool to not understand the historical perspective. 
imn had forgotton all the doom and gloom surrounding .NET in 2010. I remember a lot of devs in a forum I used to frequent who (for various reasons) never really embraced .NET gloating about how they knew all along that M$ couldn't be trusted and we should never have invested so much time in .NET and all that. How times have changed!
You should be able to do pretty much everything with server side components that you can do now with client side Blazor without using JavaScript. This means you can do interactive components without any JavaScript. But don't take my word for it, test it yourself. This article should help you get started https://www.c-sharpcorner.com/article/understanding-server-side-blazor/ Creating solution using server side component template is really easy. 
What makes you think it wasn't working out as they hoped? They made the decision to use Mono before they started the project, with future plans to switch to a corefx implementation if it becomes available. You're quoting "its not quite there yet" like its a concern for an early experimental project. &gt; Dunno; it's certainly gone and left my mystified as to what the difference between what I can do right now with MVC+SingalR+js and what I can do in the future with Blazor+SingalR+?? You get to switch out JS for C#, and possibly remove an ecosystem of build tools and dependencies from your project. Most people won't be using Blazor + SignalR though, they'll probably be using Blazor + WebAPI since its scale out model is cheaper.
&gt;Because the application is running client-side you have access to all of the .NET Core APIs. I think this is supposed to say "server-side"?
Thanks for spotting that, now fixed
I know I'm late to the party, but damn, I just can't get used to the way VS intellisense behaves without R#. Did you do any other specific adjustments? I can't quite figure out what the difference is, but it feels like R# is somehow more responsive when I type fast. Sometimes with Roslynator + Intellicode it just doesn't complete for me, or maybe it's just the fact that R# will highlight the first option while VS doesn't, yet it still sometimes completes it on tab.
I've picked up the sample application at https://github.com/pauldotknopf/Qml.Net.Examples Hacked around in the code a bit to create myself a simple calculator with a numeric pad. I've never used QML but the syntax is really refreshing and easy to understand! The amount of hype I have for this project is similar to Blazor, 'next big thing' high. Googled some more and also checked https://github.com/ddobrev/QtSharp but it seems a bit dead (11 months ago last commit) and built on Mono and the full framework, not core. I think you are definitely on to something here. Is there an easy way for developers to help you on this project? Keep up the good work!
While client side Blazor is bloated and seemingly pointless, server side Blazor sounds like somebody just reinvented a new version of Webforms combined with SignalR. Color me unimpressed.
heyy buddy guess what time it is 
at my last job they still had a set of disks and posters that you would get when you subscribed to msdn 
can't wait for the book! 
yeah i'm super stoked, the son of strike thing he mentioned once on dotnet rocks got me down a rabbit hole 
&gt;The more developers who are aware of this project, the better. Will definitely inform colleagues in my devteam on monday. &gt; The best thing to do I think is to make some cool sample projects that really "wow" people. Maybe something that has some database persistence (EF Core?)? Maybe a contacts app? Maybe you'd even want to contribute the calculate app you made to the Qml.Net.Examples repo? The calculator app is a bit too simple in my opinion. Maybe I have some time tomorrow to create a simple task app using EF Core and Sqlite for storing and tracking individual tasks. 
It's funny you should mention WebForms because the people at my work who are interested in Blazor are, by and large, VB.NET WebForms developers who had to be dragged kicking and screaming to MVC and view Blazor as a way to avoid learning Angular or React.
&gt; This means you can do interactive components without any JavaScript... No, it doesn't. Unsurprisingly, the examples are all trivial ones, with no meaningful UI interactivity. The latency of a sever call for *every view state update* will make this utterly impractical. User interactions should be on the order of magnitude of ~100ms to feel responsive and not 'laggy and rubbish'; if a user interaction requires a round trip to the server, on, for example, a mobile connection, where the average end-to-end latency is somewhere in the region of 50-200ms (and that's just the ping, not to mention any data transfer), then this is going to feel horrible, and it does. Try opening up the chome dev tools throttling and set it to something like 'slow 3g' and try running one of the examples. It's been done before, and the better networks we have now mean its gone from 'utterly untennable' to just 'slow and feels rubbish' ...but, basically, my point is: This 'no javascript' approach won't work. It's going to be very apparent, very quickly, that in order to be responsive, the scripting component *has to run on the client*. So, how is that going to work? Either: - WASM and C# on the client or - javascript WASM is apparently not going to be ready for this, which is why it exists at all, so, it *will* be javascript. /shrug I mean, we can all just wait and see how it rolls, but you can't escape physics. Server calls for every UI interaction is stupid, and it won't work.
Why kicking and screaming? MVC is literally child's play compared to WebForms.
Dude, these people were using Visual Studio 2012... in 2017. I shouldn't put up with it but they paid extremely well and they're a company you've definitely heard of.
I've been giving this a lot of thought lately, as it's relevant to my day job and our attempt to containerize our existing WCF based monolith. I'm currently leaning towards no, *unless* the scope was so limited it was just some of the simple http bindings... But then... You can replace that with some kind of REST tooling. So for us, no, it doesn't make sense. For a shop with a heavy investment in alternate transports, encodings etc, I can see the potential payoff... But I think those same shops probably have other dependencies which make the move to Core impossible for other reasons. Have you given much thought to the scope you'd aim for? Complete support? Common features only? Binary encoding compatability? Or just XML? 
I haven't thought about scope yet. And I'm not even saying that I would lead the project, as this was originally brought up by others in a couple GitHub threads. Mostly I'm just trying to gauge community interest. 
Errr...I use Visual Studio 2012 even today because my POS laptop doesn't run anything more modern than Windows 8. But I'm a jobless college kid.
Since WCF predates .NET Standard by quite some time, I assume that it still uses some API’s that aren’t in Standard. Do you have more info about which framework API’s are preventing us from just compiling the code to work on .NET Core? I would definitely contribute if I could, but I would have to be somewhat comfortable with the required work. For instance, I would probably not be the best guy to write a new TCP stack on Core/Standard to use under the netTcpBinding
Also, if you do start this effort, get word out to the people from iDesign. They are passionate about WCF, and since their business uses it intensively, I imagine you can find both knowledge about the WCF stack and willingness to contribute there. I’m on their mailing list, so if you want I can post about the initiative there as soon as things get underway.
[removed]
Please run the [compatibility tool](https://blogs.msdn.microsoft.com/dotnet/2018/08/08/are-your-windows-forms-and-wpf-applications-ready-for-net-core-3-0/) on your codebase to give MS feedback on the APIs you use. The .net core 2.1 and standard 2.0 core have a massive amount of APIs. I ran the tool on my company’s codebase and was surprised to see only 60% workflow foundation and 30% WCF missing. 
Please run the [compatibility tool](https://blogs.msdn.microsoft.com/dotnet/2018/08/08/are-your-windows-forms-and-wpf-applications-ready-for-net-core-3-0/) on your codebase to give MS feedback on the APIs you use. This will help them focus their efforts. 
IMO, I was thinking about authomatic REST proxy that will host WCF interfaces thru by convention, web sockets could be used for duplex connections, etc...
So you are quoting other peoples comments from that github issue here, why? I didn't write them. If you live in a country where people are still use using 3g and you have to deal with latencies high as 50ms or higher then these server renderered components are not for you. Here in Finland 3G is almost dead and some places already have 5G.
Those numbers are from mainland US in 2017. I think it's fair to say whether it works in Finland is largely irrelevant in the broader context.
This isn't actually a port or anything, but it's worth noting in this context: [https://github.com/wasabii/Cogito.AspNetCore.ServiceModel](https://github.com/wasabii/Cogito.AspNetCore.ServiceModel) Run WCF inside the [ASP.Net](https://ASP.Net) Core Pipeline. Still full framework, obviously. But some of ya'll on this thread might be interested.
I'm still looking for details, but at the top of list is some cryptography APIs that are implemented at the OS level.
Like I said before, server side components will be very useful for enterprise software. By that I mean software internal for companies. You are clearly not getting that not every makes software for same audience as you. 
I was talking with my manager last week WCF with respect to .NET Core. We have a few backend services in WCF and wondered about the future. We ultimately decided that new services will be WebApi. I have mixed feelings on the subject. :-/
There are alot more markup based UI frameworks than WPF. Get ready to realize that UI's built with WPF look and work better than they did in Win Forms. Win Forms you just spend a lot of time making things line up and making modifications to an already complicated design can be particularly painful. Not to mention the modern design patterns that are possible with data binding built into WPF. WPF is a technology years ahead of Win Forms and if I expect any technology to persevere into the next generation of UI development it would be WPF. UWP is also not a bad technology. Packaging is the new deployment model. Not because it makes Microsoft or google or apple a lot of money, but because it's easier for the consumer and it innately comes with more trust. Inexorably expectations change. Calling WPF the band wagon is just negative and sounds like you are criticizing something only because you don't know it. Maybe you could be more successful if you chose to innovate before your competitors do.
Have you looked into soapcore?
Nope, wasn't aware of it.
&gt;Maybe you could be more successful if you chose to innovate before your competitors do. Except that the end user doesn't give a lick what something is built in as long as it works. 
This looks amazing. I love removing native dependencies from my projects.
A lot of people seem to think that WebAPI offers everything they need. I still go ‘that’s a lot easier on WCF’ pretty often when developers are trying complex integration scenarios on WebAPI, and struggle. I’d choose WCF over anything else for backend integrations. On the other hand, I prefer everything that goes to the outside world to be REST (Nancy, WebAPI or ServiceStack). So yeah, I understand your mixed feelings. You should also look into ServiceStack. Pretty robust service layer (not free).
After that entire message that's the part you quote? That's a throw away just pretend I didn't write that. It was condescending after all. You could have responded with something along the lines; Win Forms is better because it has faster something or better something else. I'll just go ahead and admit you're smarter than everyone else for not bothering with anything but your own single purview. You are right, lots of companies are based on out dated things and they still sell.
WinForms is MUCH faster than WPF. WPF is dog slow. It's like running Silverlight in IE.
Wasn't wcf on the roadmap for net core 3.0?
As of last week, server side WCF was not on the 3.0 list.
Why do you require Core to containerize your app? I've been trying to get our WCF monolith running in Windows containers and that seems to work.
this just reminds me that i think the gotchas with boxing structs and interfaces is a pain in the ass. i almost think that "constraint only interfaces" would have been a good idea.
Just had to check if Richard was the musician as I’ve a story of drinking with the two of them and found one to be lovely and the other to be an arrogant and rude arsehole. Thankfully Carl wasn’t being too rude towards me, but he embarrassed a guy in front of a large group. The guy in question had been nothing but kind to Carl. Now I’m happy to put it down to the booze we’d all been enjoying but every time I see the two of them, I forget which one is nice so I smile and avoid them. 
I’ve never talked to Carl for more than just a hello, but all my run-ins with Richard have been nothing but pleasant.
My impressions of Richard are similar in that he’s always been very polite and pleasant. Just a shame that Carl isn’t cut from the same clothe. With that said, I’d love nothing more than to see Carl being kind to people when I next see him around the conferences. I know we all have bad days and perhaps I just happen to see him at his worst. 
&gt; Properties – An elegant solution to replace the endless getters/setters of Java. Much later it was imitated by Kotlin. Innovation Imitation, straight from Delphi / Object Pascal. 
Managed to figure it out: &lt;system.webServer&gt; &lt;httpErrors errorMode="Custom"&gt; &lt;error statusCode="404" path="/test/ping.ashx" responseMode="ExecuteURL" /&gt; &lt;/httpErrors&gt; &lt;system.webServer&gt;
Just an additional note: NUKE is a cross-platform build automation system that uses 100% pure CSharp without any scripting approach. IDE features like debugging, navigation, code completion come out-of-the-box. The VSCode extension however adds some better tooling, like CodeLens, Task Providers and Snippets.
Which part exactly? The "Getting Started" article was recently rewritten.
Thanks MDSExpro! Fixed now, along with other mistakes, thanks to yours and other comments.
You can argue that most of those innovations are actually imitations if you consider other languages. For example type inference is very old thanks to Standard ML.
It's a nice post, but a little simplistic. Lambdas were not new, so this was clearly imitation. But the way the C# compiler does type inference and makes lambas very concise and easy to use in a statically typed language, was very innovative. To just put either stamp 'innovation' or 'imitation' on stuff like that is not very meaningful, and I don't see what the motivation behind it is other than fuel the bickering between the languages that is not really useful anyway.
How does this compare with Cake.Net? Been using cake successfully for 6 months. Add on and modules marketplace are really mature so we rarely need to write new modules ourself. 
No. I feel like it was left out of because it was going to be hard work thus I really feel that MS should bear the resource cost of porting it. I'm building on core now; If I needed SOAP, I will look for others rather than WCF. 
C'mon, almost everything is imitation if you consider older languages. This is not related to Java or Delphi, most of the stuff existed long before.
I changed from Cake to Nuke because the buildfile is written in C# and part of the solution, which results in fully functional code completion and IDE integration (including starting the build from within VS with F5). Being able to write the buildfile in the same language I want to build and having the same ide features resulted in a way easier workflow. I had the problem of having a lot of trial and error with cake
It's a broad question. Basically anything that your app must do that is not basic CRUD.
Well the same guy designed Delphi and C# so is it really imitiation? 
Language-wise, yes.
Windows Toolkit &amp; breaking out UWP controls into a nuget have definetly made LOB w/ UWP considerably more attractive. So much easier to make something good looking, functionality, and easy to deploy now.
Scaffolding is nice when you have simple models. However, you need to make sure you clearly understand what is going on, because at work it will be rare that your solution will be a simple CRUD, there is always some other requirement that needs to be performed.
View in your timezone: [August 20th, 2018 1PM PDT][0] [0]: https://timee.io/20180820T2000?tl=.NET%20on%20AWS%20-%20Ask%20the%20AWS%20Experts%20%E2%80%93%20August%2020th%2C%202018%201PM%20PST%20%2F%204PM%20EST%20%40%20www.reddit.com%2Fr%2Faws%2F ***** ^^Assumed ^^PDT ^^instead ^^of ^^PST. [^^undo*](/message/compose?to=timee_bot&amp;subject=reprocess_ntz+request&amp;message=%21reprocess_ntz+eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlNDRrM2FiIiwiYWN0IjoicmVwcm9jZXNzIiwib3AiOiJBbWF6b25XZWJTZXJ2aWNlcyIsInBubSI6InQzXzk3MG9jeiIsImlhdCI6MTUzNDE4MzkzMH0.6nPeBRpKmyhsmG4dk2qyzTCGzFFLS4AfzRhHH6GtlgA) [^^delete*](/message/compose?to=timee_bot&amp;subject=delete+request&amp;message=%21delete+eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlNDRrM2FiIiwiYWN0IjoiZGVsZXRlIiwib3AiOiJBbWF6b25XZWJTZXJ2aWNlcyIsImlhdCI6MTUzNDE4MzkzMH0.yKC_TL-7SPHVRwi4SyON5ZXS8VoViR5biVTzgyDh2Mg) ^^| [^^reprocess*](/message/compose?to=timee_bot&amp;subject=reprocess+request&amp;message=%21reprocess+eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJlNDRrM2FiIiwiYWN0IjoicmVwcm9jZXNzIiwib3AiOiJBbWF6b25XZWJTZXJ2aWNlcyIsInBubSI6InQzXzk3MG9jeiIsImlhdCI6MTUzNDE4MzkzMH0.6nPeBRpKmyhsmG4dk2qyzTCGzFFLS4AfzRhHH6GtlgA) ^^| [^^ignore ^^me](/message/compose?to=timee_bot&amp;subject=ignore+request&amp;message=%21ignore+me) ^^| [^^help](https://www.reddit.com/r/timee_bot/wiki/index) ^^*OP ^^only
1PM PDT happens when this comment is 1 hour and 47 minutes old. You can find the live countdown here: https://countle.com/3239042r2l --- I'm a bot, if you want to send feedback, please comment below or send a PM.
This should help if you'd like to quick add to your calendar (see at the bottom): https://aws.amazon.com/events/asktheexperts/dotnet/
For MVC5 Pro [ASP.NET](https://ASP.NET) MVC 5 book, plurarsight is pretty good too. For specific problems google will help, as MVC 5 is pretty mature. I have not used it with angular so I can't be much help in that area.
Do people still want business solutions like that? Everyone I have talked to about how good UWP is looking now still say they believe business solutions should run in web browsers. 
Doesn't that apply to most less frequently used parts of Cake as well?
Business solutions should almost NEVER run in a browser. We tried that in the 90s and ended up with millions of desktops that couldn't be upgraded because modern browsers wouldn't run the 9 billion dollar , business-critical, system.
That's kinda what I try to get across too. Then they request you do *magical thing* with a printer or a modal window or something, and you have to explain how browser designers tried to take all these powers away from web coders. 
Anything specific you would miss? We utilize code generation for command line tools, so adding support for them is rather easy.
You realise the browser has changed a lot since the 90s. 
Yes. That's kinda the problem It will change again
Geniune question: how is deployment easier? I’ve been stuck doing enterprise web apps whose appeal is easier deployment (100-1000 seats), but the cost is much slower ui development.
"The Innocent class has an overridden == operator, which is causing this blatantly wrong behaviour:" 
As of May, 2.4 million developers are writing WinForms/WPF applications each month, up 50% over the last 20 months. (Source: Visual Studio Telemetry data) I'm willing to bet the vast majority of them are business developers.
I think that's the problem. While breaking changes aren't as frequent as they were in the past, they happen often enough that I could see companies being scared of betting on them when it isn't necessary. 
I think browsers are much more stable today then they were in 90s. Most modern browsers at least follow large set of web standards and while there are still many cross browser quirks there are many frameworks that help ease that burden. I don’t think desktops apps offer much more stability than browsers and are prone to platform issues too. 
And it will never do everything marketing wants it to. You need native code and a prayer to do that.
Thanks for the info.
Hey, I've only been in the industry for 20 years, maybe I'm wrong. Entire browser APIs get removed all the time due to security concerns and privacy issues. GetUserMedia used to work fine across browsers and platforms. Have you tried implementing it lately? Imagine if you had built something business critical just a couple of years ago that contains insecure HTTP connections, didn't understand CORS requests,maybe it had one of the hijacked Node libraries....how long do you think that application will reliably work in all browsers? Today's best practices are tomorrow's security concerns and deprecated APIs 
In order to address the stability and platform issues, Microsoft wants WPF/WinForms development on .NET Core. That way you ship the runtime with the application and there is no risk of getting bit by changes to .NET. Likewise, that's why they are pushing the UI controls in WPF into NuGet packages that get shipped with the application rather than the OS. 
More info on the toolkit: https://www.infoq.com/news/2018/08/Windows-Community-Toolkit-UWP
Sounds like you might need some form of token based authentication. Dot net core Identity itself comes with some token based authentication built in, you can use others as well. Look up JWT
It was mentioned in a Build conference video. Unfortunately they didn't say anything more specific than that.
Two words: Blazor
&gt;Blazor So, looking into this. Unsettled prototype tech, running mono on javascript and downloading your dlls to the local machine to run them. A decent update routine and you can undercut the overhead here and just run it locally without having to rely on mono or browsers. I'd totally take C# for front end web work, but this doesn't strike me as a brilliant way to do it.
That and windows template studio scaffholding is a pleasure to develop with, after doing only internal webapps these days I finally love how the desktop UWP UI model is such a breeze to develop. One of the best pluses I'd say is that the scaffholded app follows best practices which I could follow and learn bit by bit. I just wished my company did more of them than webapps though.
That's why vb.net introduced the IsNot keyword years ago. More handy then one would initially think
https://docs.microsoft.com/en-us/windows/uwp/packaging/appinstaller-root Basically you install not the package but specific .appxinstaller file, this file contains urls for appxinstaller file and all necessary packages. Windows automatically checks appxinstaller file url for updated file and if it finds one - it installs new version from that file.
+1 on getting AngularJS updated. Although I think pre-1.2.0 has IE8 support which is probably the reason behind OP's decision. Other stuff post 1.1.x such as bindonce is a really big deal for performance in places.
It's not running on top of JavaScript. It's *instead* of JavaScript running on top of WebAssembly.
Web assembly isn't here yet and in theory it could support a UWP derived variant. (Or rather a .NET Core version inspired by UWP.) And really, web sites are horrible for LOB in all regards except deployment. You can get more features with less effort using VB 6 than you can with a modern web framework. And then there's WPF's virtualizing data grids which can hold a ridiculous number of rows without a performance hit. UWP though, is the worst of both worlds. No web-easy deployment, no advanced datagrids, no direct database access, there's nothing to justify it in a business setting today.
The problem, of course, is that modern JavaScript (ES6) is pretty good. When I use C# these days it actually feels clunky compared to ES6.
Bah, HTML-based UI of those stayed shit throughout the years (bar some frivolous eye-candy, but I am way too old for that)
Good question. Not strictly a requirement, more a nice to have. We've found the sheer size of "full-fat" containers (as opposed to nano, or Linux) limits the size of the pieces we can decompose our monolith into, which is why we're exploring our options, one of which is move to Core. Having said that, we're currently running in a number of windows server containers, but it's caused some pain.
I've done this in .net standard using a custom route constraint that does a lookup of the tenant based upon the subdomain. I then set the tenant is in the route data and I can use a global filter to redirect when the tenant is not set. This allows you to not inject anything into your controllers and becomes part of the pipeline that the system uses to determine which controllers and actions to call. You might be better with .net core creating a new middleware that does the same thing. This is what they are designed for. Have it run before mvc. 
You’re the first person I’ve ever heard say JavaScript makes anything feel clunky.
VB6 is the plague man. That shit still runs in so many businesses. I don’t miss it at all.
Yes i was thinking the same. I'm using the DefaultTokenBearer function. But what i don't understand is how i can integrate a password reset without using mvc or is this not possible?
I know it's true, but its a scary thought. 
The scariest part is being the new guy and finding a bug in software that hasn’t changed in 10 years. Fixing the bug takes no time compared to figuring out how to build and deploy the fixed code.
Now I'm having flashbacks of trying to find and install COM components needed by a massive VB 6 app in ongoing development. I'm going to bed before you remind me of anything else.
If you’ve worked with VB6 in industrial controls, you’ll possibly know of the pain that is RSDAT32.OCX. That and RSView32 were the only things keeping my XP VM around.
I haven't used Cake.
I still regularly see businesses running 20-30 year old applications running core parts of their business. I can't reasonably trust that a web app will still work properly next year, much less a similar time span.
If anyone is looking for this problem, I guess I have found, which could work at least for me. The UserManagrr provided by Identity has a Method ConfirmEmailAsync. https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.identity.usermanager-1.confirmemailasync?view=aspnetcore-2.1#Microsoft_AspNetCore_Identity_UserManager_1_ConfirmEmailAsync__0_System_String_ If this gets called in either a controller or a Mutation (graphl terms for changing a resource) it shoulf confirm the users email
Dim x Aas needs to be Dim x as 
* Apparently only 15 hours left to claim this wonderful brilliant eBook * Cannot claim eBook without signing up for an account * Posted by account spamming lots of sub reddits with links to their site **This is spam**
this post could be usefull [http://foreverframe.net/asp-net-core-resolving-proper-implementation-in-runtime-using-autofac/](http://foreverframe.net/asp-net-core-resolving-proper-implementation-in-runtime-using-autofac/)
Why reinvent the wheel?
If you want more of this kind of stuff, I put together a list of posts that I've found helpful, http://mattwarren.org/2018/01/22/Resources-for-Learning-about-.NET-Internals/
Writing insecure http connections was never best practice, and if your app is an insecure mess you should fix it regardless of your platform. GetUserMedia has moved to a new name space and returns a promise, it's supported in everything except IE and IE is dead. The only difference between Web development in 2018 and more traditional development is that if you write an insecure unmaintained piece of shit in the browser it'll die instead of sitting there till someone steals your customer data. 
&gt; This allows you to not inject anything into your controllers If you wanted to, you still *could* still inject the tenant based on what's in the route data, right? &gt; becomes part of the pipeline that the system uses to determine which controllers and actions to call So how do the controllers consume tenant data? Do you just pull it directly from route data?
Also Packt books fucking suck
You should be able to first use the UserManager class to first get the User object by id using UsingManager.FindByIdAdync and then pass the User object into the UserManager.PasswordResetAsync method. All of this could live within a method on your API controller. In this case you would probably want to mark the endpoint as [AllowAnonymous] since the client wouldn't have a JWT at this point.
Just a comment but you'll probably want to cache the tenants. No reason to hit the DB for them on every call. 
ORMs AND NoSql? What's left for you, ADO and CSV?
It's really not bad. Compare C# var people = new List&lt;Person&gt; { new Person(1, "Joe"), new Person(2, "Frank") } //remove Joe people = people.Where(x =&gt; x.Id != 1); JavaScript let people = [ { id: 1, name: 'Joe' } { id: 2, name: 'Frank' }, ] //remove Joe people = people.filter(x =&gt; x.id !== 1); I really don't see much of a difference.
1. What isn't working? 2. What error are you getting? 3. What have you tried so far? 
I'm just saying JavaScript isn't function() this and function() that like people think. It has classes and lambdas now. And frankly, I don't think JavaScript avoidance is a viable career strategy for professional Web Application developers.
I put together a super simple sample project for this kind of thing ... [https://github.com/matthewblott/simple\_aspnet\_auth](https://github.com/matthewblott/simple_aspnet_auth)
nice small sample project. Get a star from me, sir :)
Specifically my problem is ORMs like EF and Hibernate that work exclusively on object graphs because that's not how the database is meant to be used. I'm not against all ORMs. In fact, I'm the one who invented the term "MicroORM" back in 2009. (It actually makes Dapper look huge in comparison.) https://www.infoq.com/articles/MicroORM 
More new stuff coming down the pipe for UWP. Not sure how useful it will be to have an app that switches from 2D to 3D/VR but that's what we're getting.
GitHub.com/aspnetboilerplate
I agree. I think I will use memory cache until I setup a distributed cache like redis. 
Admittedly this is entirely off the cuff, but then what the balls is blazor.js and mono.js in the stack?
So, the download then install option. Does that mean I can download once, save them and install on three machines with those files or is it still going to download the lot each time? 
I'd say "Focus on making it a web front end capable language" rather than just running a C# app in a browser. You may as well just have the app without the browser at that point. You'd actually be a bit better off and have an over all better separation of concerns. That you have to download .net core, standard and however many more dlls to be able to even use blazor it self, I'm going to say they're taking the wrong approach. You're looking at a meg of bloat on page size to even use the language, not a brilliant start.
* Single GET endpoint * Canonical Link * Cacheable * CDN hosted * New versions can be deployed in seconds * Containerized (.jpg is one of **the** most popular 'container' formats) * Can be distributed and run cross platform with minimal dependencies Sure. Its a microservice.
That's a little verbose. Here's what C# looks like when you tune it up. var people = new List&lt;Person&gt; {{ 1, "Joe" },{2, "Frank" }};
&gt; C# version has lazy evaluation, while JS is eager evaluation Why? I'm not saying you're wrong because I don't know, but there's no technical reason why JS couldn't use lazy evaluation. They just need to agree on an IEnumerable interface. Oh right, they'd have to agree on something.
&gt; IE is dead. Keep dreaming. Maybe one day that will be true. 
You don't know that. And even if the business did change, that doesn't mean every aspect changed.
&gt; but there's no technical reason why JS couldn't use lazy evaluation Yeah, but the spec is already set on returning arrays: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter &gt; Oh right, they'd have to agree on something. While I understand your snark, JavaScript does have an iterable protocol: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols Filtering methods with lazy evaluation can be done with third party libraries, but of course that's not the same as C# which has them in the standard library.
webscale
 &gt; var people = new List&lt;Person&gt; {{ 1, "Joe" },{2, "Frank" }}; All you did was put the list initializer on one line... and I'm pretty sure that code won't compile as written.
Thanks
Do the same but have have it automated. I use Jenkins (pick your favourite build server) to do this for me. When I'm ready to deploy I effectivly click a button. Depending on each clients projects, it pulls the new build, run the unit tests, then deploys over SSH, and restarts the server. One additional thing I've adopted is to have a builds folder. Deploy the new build to a new folder. Then have my Jenkins job amend a Symlink to this new folder. Then restart my Kestrel job. Kestrel refers to the Symlink not to the build folder. The advantaged of this is that if there is an emergency I can just run another Jenkins job to amend the Symlink to go back to the previous build.
This sounds good. But I'm not sure If I should do this with a own controller or if i should add a mutation for this. In a MVC app this would be done with razor i gues.
Of course, there's always TDD, which will at least stop mistakes for paths that you define and explicitly test. 
Turns out [it's a bug](https://github.com/dotnet/corefx/issues/30913).
bad human
Probably the down level client that runs in asm.js
Could be useful. I wasted a few hours today trying to understand the dependencies of a huge solution (.NET 4.52 rather than Core). It's hideous because half were files located in a bin directory in the root of the solution and half were nuget. Of the nuget packages half again had the wrong dependency information. The page has a link to a really crappy twitter gif. A couple of screen shots would be nice in the readme.md. I noticed some code for graphs in there, but didn't dig, I assume that's a feature in progress. If not, slam in a screenshot. There's a commercial product called NDepend which absolutely rocks, but it's very expensive. Certainly worth if for the advanced features. It does things like give you a linq provider to your project so you can query it in linq. Clever stuff. That said, small projects like this that focus on a specific problem are super useful. I noticed you only support the newer .csproj style projects. Honestly I'd push back against anyone using the json monstrosity they tried out before. No one should still be using that. Seriously, don't encourage them. 
Cool, but I didn’t see mention of LibMan - I hope that got included?
God I so want to do this, I just don’t know where to start. :( Any pointers please? An article that starts at 0 and gets me to a place where I too can click a button and have my solution deployed to my VPS?
Tried bootcamp on a 2016 MBP after getting tired of slow Parallels. Seemed to work alright but it fried two dongles within 24 hours. I had used these same dongles for a year+ with macOS and Parallels. Begrudgingly walked to IT and swapped out for a P50 and been happy ever since (except for the heavy laptop I have to carry around). I'll never go back to a MBP until it has F keys again anyway.
Disclosure: I work on the Build service in VSTS. Have you considered setting up CI? We (VSTS) support any app, any platform, and any deployment target. I think our [.Net Core docs](https://docs.microsoft.com/en-us/vsts/pipelines/languages/dotnet-core?view=vsts&amp;tabs=yaml) are still being overhauled but they aren't terrible.
This build seems to make all my diluting crash vs on load😨
Yes you are right. Thank you
Object Allocation Tracking Tool? I hope that is as useful as it sounds.
You're going to run into a world of trouble trying to emulate all of the security interactions a web browser does when talking to the server it's running on. For example, the viewstate is going to be different every time you run the page. This keeps someone from recording network traffic and just playing it back to trick the server. And that's just the tip of the iceberg. It would probably be easier on your end to learn about Selenium and the Firefox webdriver. Lucky for you it runs great in Python: http://seleniumhq.github.io/selenium/docs/api/py/index.html This would let you run the page basically the way it was meant to be run, but then you can inspect the DOM live with Python and dynamically decide what to do next. Hope this helps.
Big thanks that gives me some ideas and places to start looking. Smoother this is the more fun and more likely I'll be to keep working on these little learning projects :)
lol @ Kotlin ruling on mobile.
This broke my alt+click-drag (column highlight) break.
Octopus deploy?
Well spotted, thanks
Propose an api change to implement `IList&lt;T&gt;` https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/api-review-process.md
Odd...
thanks! yeah it's not going to be fun for sure...
Thanks /u/shrodes and /u/kennethdc! Unfortunately I'm in the "legacy support" phase and not allowed to try to update yet; but if I can move up I'll definitely take y'all advice on upgrading...
Thanks! I'll check the book out!
Serious question, why would you use that over NPM?
why restart nginx? also, if you're already using a cloud provider, I'd look into using a managed load balancer. generally you can configure it so you wind up with 0 downtime. though i suppose depending on your situation that may not be critical. 
Yes. Docker.
Using random-index access for a linked-list sounds like a really bad idea and will just lead to poor performance.
I love Octopus. Such a great product. I use it to manage about 80 servers over 3 environments. They extensibility of it is boundless. I use the product to deploy product of course but even use it to fully configure a fresh machine image from forcing updates and installing base dependencies on the computer. I've opted to use this over having hundreds of docker images deployed. I would recommend it countless times over. 
&gt; I still don't understand why the .NET team did not fix that Random access isn't something normally associated with a linked list, so I don't think there is anything to fix. If you did want to add these methods, then I think the Microsoft philosophy is to do it via extension methods, which they have done to a large degree. The drawback of extension methods is that you can't add an indexer, but the `ElementAt(int index)` already provides that functionality. You could get the rest of the functionality with something like this: public static class LinkedListExtensions { public static void Insert&lt;T&gt;(this LinkedList&lt;T&gt; linkedList, int index, T item) { if (index &lt; 0 || index &gt;= linkedList.Count) { throw new IndexOutOfRangeException(); } linkedList.AddBefore(NodeAt(linkedList, index), new LinkedListNode&lt;T&gt;(item)); } public static void RemoveAt&lt;T&gt;(this LinkedList&lt;T&gt; linkedList, int index) { if (index &lt; 0 || index &gt;= linkedList.Count) { throw new IndexOutOfRangeException(); } linkedList.Remove(NodeAt(linkedList, index)); } public static LinkedListNode&lt;T&gt; NodeAt&lt;T&gt;(this LinkedList&lt;T&gt; linkedList, int index) { if (index &lt; 0 || index &gt;= linkedList.Count) { throw new IndexOutOfRangeException(); } var node = linkedList.First; if (index == 0) { return node; } for (int i = 0; i &lt; index; i++) { node = node.Next; } return node; } public static int IndexOf&lt;T&gt;(this LinkedList&lt;T&gt; linkedList, T item) { int i = 0; var node = linkedList.First; while (!(node is null || node.Value.Equals(item))) { i++; node = node.Next; } return node is null ? -1 : i; } } 
AFAIK libman is meant to be a lightweight alternative. Like if all you want to do is grab a .min.js or .min.css and add it to your project and put it in the appropriate folder. I don't think you would want/it's meant for replacing NPM when building SPAs and the like whereas NPM is overkill when you're just adding bootstrap to an MVC app. https://www.stevejgordon.co.uk/library-manager-libman-visual-studio-2017
Have they added git stash yet?
I think my code overlay-ed and the code isnt displaying in the text boxes as it should, i should have specified I my apology. im still very new to this.
F# is from a different family of languages. In theory it allows to write safer (more reliable) code with stronger checks (i.e. less likely throw a null reference exception). C# is slowly adopting some of F# features like pattern matching which is a sort of souped up switch statement with strong compiler support to warn you of cases you aren't matching.
Haha no worries. I've been there myself, it's not great but you do what you have to do :) At the time I used https://github.com/Pasvaz/bindonce to squeeze extra performance out by reducing bindings. Angular 1.3 introduced the bindonce syntax (`{{ :: x.foo }}`) but this is quite similar and works on older version.
Good time to spring clean Visual Studio. Anyone knows how to reset VS to defaults--settings and extensions? 
Thanks for covering the points for me. Just wish there was a way to get typescript declaration files with libman too.
They changed rectangular selection, now it's multiple cursor selection triggered with Ctrl+alt
Don’t think so, would be nice not to have to drop the cmd prompt to do this
Devenv.exe /?
Could not find an option to clear extensions. 
I considered and also tried. But I failed. The instructions weren't n00b friendly last time I tried. I'm not sure what things are like now. Could you please point me to an article that walks me through setting up a CI pipeline for asp.net core 2.1.0 with EF Core and Migrations?
Try /ResetUserData Also https://stackoverflow.com/questions/17203820/how-do-i-truly-reset-every-setting-in-visual-studio-2012
Thanks. This worked!
Hi Mythodios, I've just been playing with this myself with VSTS and I can highly recommend it. Here's what I did: \- created a new dotnet core web application \- created a new project in VSTS \- pushed the code to said VSTS project (it's now hosted here for free) \- created a new build pipeline to restore, build, test, publish and push the code to a Microsoft Azure Web App resource. It's also configured to trigger on new code commits. I'm so excited about having achieved this and how easy it was. It really took me by surprise as I didn't find it easy with others such as Team City. I'm now a big fan of VSTS - it's got it all - project management features, code repo storage, build and releases. I see you're publishing to a Ubuntu server. You can follow this [https://docs.microsoft.com/en-us/vsts/pipelines/agents/v2-linux?view=vsts](https://docs.microsoft.com/en-us/vsts/pipelines/agents/v2-linux?view=vsts) which should do what you need with VSTS.
Hi [vtbassmatt](https://www.reddit.com/user/vtbassmatt) \- I've just setup CI with VSTS here [https://www.reddit.com/r/dotnet/comments/97bai0/aspnet\_core\_workflow\_for\_deploying\_site/e481vi6](https://www.reddit.com/r/dotnet/comments/97bai0/aspnet_core_workflow_for_deploying_site/e481vi6) \- I think it's a brilliant tool. However I'm currently stuck as to how to execute an Entity Framework command after my publish step. Do you have any good docs for this as I couldn't find anything concrete? Thanks
I'm about to write a blog about this but basically in your project you create a new build pipeline and (in my case) select "Azure Web App for [ASP.NET](https://ASP.NET)". This will create you a CI pipeline containing Restore, Build, Test, Publish, Azure App Service Deploy and Publish Artifact. From memory I had to add this line to the Publish item "--configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)" and I checked " Enable continuous integration" on the trigger panel to make it trigger on code pushes. Oh and also "Take App Offline" in Publish Artifact. I will write up a blog post about this but there's not much to it. I wrote this for creating a CI for a static web site - it's not too much dissimilar really [http://tmutton.uk/blog/2018/07/29/deploying-website-to-azure-using-vsts.html](http://tmutton.uk/blog/2018/07/29/deploying-website-to-azure-using-vsts.html)
That's ok. I have tried a custom dot net command but it was erroring, complaining about dotnet versions but then said it executed the migrations. Would rather use official docs - looking forward to seeing yours. Thanks.
At my current job, we use CentOS and deploy to it using RPM packages. Basically we create the RPM package during the jenkins job and publish that to an archive where we can deploy them to any servers. https://github.com/qmfrederik/dotnet-packaging It is not the fastest library when building and they currently do not support DEB packages but it works well and I can add dependencies that get updated with the RPM install.
Isn't that different though? Azure is expensive compared to cheap VPS Ubuntu servers. So really what most small time devs like me want is a way to deploy your [ASP.NET](https://ASP.NET) Core application (with Postgres or MySQL db and EF Core as an ORM + Migrations) to a VPN (such as one from [Vultr.com](https://Vultr.com)).
In your case you can setup a CI pipeline to deploy to your server. You'd need to install the VSTS agent on the machine. As with pricing - there are various pricing tiers with Azure Web Apps. I think mine is costing around £10/month or something.
Yes, as a Dev, I would right-click the solution in VS studio, and click publish. This publishes to a local folder on my laptop. I then open up my FTP client and copy the files over to the folder on my server (/var/www/html/mysite.co.uk). I'm in the development phase, so dropping and recreating the database after each deployment is what I currently do. I go to my server (via SSH), I delete the database by running a few Postgres commands. I then re-create the database (again via some Postgres commands). I then run the EF Core command that creates me the SQL script. I copy that .sql file and upload it to the server (again via FTP). I then tell Postgres to run that .sql file on the database I created earlier. Now, I have to go and seed the damn database, so more scripts. That whole database crap is very painful. ;( Not sure how many devs reading this are in a similar situation to me.
Please tell me the behavior matches Visual Studio code? I launch that just format large amounts of text just to paste it back into VS17.
Fair warning, I'm not familiar at all with EF Core. I found a couple of recent-ish blog posts that look like a solid start: \- \[CI build for an [ASP.NET](https://ASP.NET) Core app\]([https://dotnetthoughts.net/ci-build-for-an-aspnet-core-app/](https://dotnetthoughts.net/ci-build-for-an-aspnet-core-app/)) - this should cover all the non-EF Core parts \- \[Deploying DBs in your CI/CD pipeline with EF Core\]([https://abelsquidhead.com/index.php/2017/07/31/deploying-dbs-in-your-cicd-pipeline-with-ef-core-code-first/](https://abelsquidhead.com/index.php/2017/07/31/deploying-dbs-in-your-cicd-pipeline-with-ef-core-code-first/)) - you can slot in a script step which runs the command line steps to do migrations Also, we'll get a section added to the docs about EF Core with migrations. I agree that working with a database is the hardest part of the dev/test/publish cycle. Managing schemas, making sure the right data is loaded in the right places, rolling forward and backward.
Hey /u/tmutton. As I said in another thread, I'm not much of an EF Core expert, so this advice may not be great. * If you need to run a dotnet command on the deployment agent, you can use the [dotnet tool installer](https://docs.microsoft.com/vsts/pipelines/tasks/tool/dotnet-core-tool-installer?view=vsts) to get the right version. Put it someplace near the beginning of the phase and you'll be using that version for the rest of the phase. * If you need to run something on the VM where your site is deployed, the [Azure PowerShell task](https://docs.microsoft.com/en-us/vsts/pipelines/tasks/deploy/azure-powershell?view=vsts) may be the right choice. I'll get someone who *is* an expert to update our official docs.
That's interesting. I selected the Azure DotNetCore Web App pipeline template and it didn't contain the dotnet tool installer but I think it should. This way I can select the right dotnet sdk version (using this as a guide https://github.com/dotnet/core/blob/master/release-notes/releases.json). Update: dotnet tool installer (with 2.1.400) is now part of my build chain.
Thanks. I think we can update that template pretty easily - will check into it.
I believe that stating ' That’s the moment when the CLR ‘asks’ GC for help in actually allocating the memory (for instance by running a collection or heap compaction process before).' is not really correct, unless I am reading this wrong. I think what you are saying here is: in order to allocate a chunk of memory GC might run collection or compaction before the actual allocation. Thus: allocation request -&gt; collection -&gt; compaction -&gt; memory allocation can happen. I am thinking this because of the previous sentence '(..) allocation of the memory requires deallocation to be performed first.'. I believe when there is no memory available you would get the OutOfMemoryException rather than garbage collection triggered. This will not happen as per [documentation](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals#conditions_for_a_garbage_collection) freeing the memory is completely separate process. Unless what you meant was 'GC helps CLR in memory allocation only by clearing up (collection/compaction) already allocated memory. However, this is not true as well as per [documentation](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/fundamentals) which states that CLR **does** allocate objects on the heap. 
What I meant is that clearly GC is responsible for releasing the memory, whereas it's actually CLR which does allocate objects on the heap. However, you can usually read that GC both releases and allocates the memory, which is not 100% true. By stating that CLR 'asks' GC for help, I meant that the allocations being performed can affect the frequency of collections by the GC. As you can read in the same documentation you linked - "The intrusiveness (frequency and duration) of garbage collections is the result of the volume of allocations". However, these are two separate processes, but one have an impact on the other.
Humm, you touch a point. But I can't see the `Add` mehod in the `LinkedList&lt;T&gt;`. Does it means that casting the `LinkedList&lt;T&gt;` to an `ICollection&lt;T&gt;` would make it appear? I see that `LinkedList&lt;T&gt;` does implement it though. I'm checking that right away...
&gt; But I can't see the `Add` mehod in the `LinkedList&lt;T&gt;`. Does it means that casting the `LinkedList&lt;T&gt;` to an `ICollection&lt;T&gt;` would make it appear? Yeah, it implements `ICollection&lt;T&gt;.Add` explicitly as a call to `AddLast`. When you have a variable of type `LinkedList&lt;T&gt;`, there are several "natural" spots to add items, so just calling it "Add" would be ambiguous.
Yup you are right, once cast to `ICollection&lt;T&gt;`, the Add method reappears. How can LinkedList implementation hides the an interface method? That's odd! Ok, I'll update my post statement based on that. Thanks for the insight!
&gt; How can LinkedList implementation hides the an interface method? That's odd! https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/interfaces/explicit-interface-implementation
keen eye, thanks man.
Good article! TFS/VSTS makes package publishing like this incredibly easy. Minor typo - "for versioning our nuget package. SemVer has 3 components in the form of Major.Minor.Path" (should be patch)
[vtbassmatt](https://www.reddit.com/user/vtbassmatt) Just an update on this: I've managed to get this working by using the Powershell task. Script: "dotnet ef database update" Working Directory: The directory of the project containing the migrations I wasn't able to get the dotnet custom task working. Just something to note for you.
Cool, I started that like an hour ago, so hopefully it'll work
Down voted for the click baity title alone.. ps I had a look... They aren't must haves FYI.
Thank you for elaborating on your down vote. Wish everyone would do that. Sorry to hear that a title is enough for a down vote, though. I couldn't do without any of the tools, so for me they are must haves. Would love to hear what your must haves are then? :)
&gt;the reasons MS changed it what are those?
You might as well stick with C# - F# is the guinea pig and if the concept is awesome C# yoinks it.
Thanks! I'm glad you enjoyed it (+good spot!)
Sorry, I have no idea what you're trying to say
I could definitely do without resharper slowing down everything, I find Rider is much better, although a whole different ide
https://www.infoq.com/news/2018/08/UWP-Application-Distribution
What's "build in IL feature"?
This upgrade broke file comparison for CS files. Using code review panel, selecting a cs file and trying to compare to baseline freezes VS. Anyone else experiencing this?
Yes I know.
The web.config file looks like every one I've seen online. Also, I did install the .NET Core hosting pack. **Web.config** &lt;?xml version="1.0" encoding="utf-8"?&gt; &lt;configuration&gt; &lt;system.webServer&gt; &lt;handlers&gt; &lt;add name="aspNetCore" path="*" verb="*" modules="AspNetCoreModule" resourceType="Unspecified" /&gt; &lt;/handlers&gt; &lt;aspNetCore processPath="dotnet" arguments=".\BBISavant.Web.dll" stdoutLogEnabled="false" stdoutLogFile=".\logs\stdout" /&gt; &lt;/system.webServer&gt; &lt;/configuration&gt;
FTA: &gt;Although there’s no synchronized keyword in C#, it exists in IL.
Hmm certainly looks correct. Double check on the server that the deployed folder has the MyApplication.Web.Dll in the root folder. Unfortunately, documentation on using IIS with dotnetcore is woefully incomplete. I had similar problems getting a Subapp to work in IIS. Maybe try deleting your Web.Config file in project, and let it autogenerate. Sometimes that works too.
Did both, still no luck. Will keep searching for answers.
Check https://docs.microsoft.com/en-us/dotnet/core/windows-prerequisites?tabs=netcore2x Theres some things you may need on win2008 server.
Everything seems to check out there.
Have you added folder permissions for the application pool, not just IIS_IUSRS?
Make sure the app pool your application is running on has .NET CLR Version is set to "no managed code" Also make sure the .NET Core Hosting version installed matches the applications version.
I even gave permissions to Everyone, still same error.
They include a lot of open source material they would not be allowed to package directly. All the Android development kits for example. It also allows them to ensure the most current version is being installed which makes support easier.
Good to know, ok I might investigate a bit more. Thanks :)
F# is way more concise when you want to define simple types with sane equality and hashing. One neat feature of F# that is technically possible (but would be a pain) in C# is sum types (which are kind of like souped-up enums). Here's a quick example. type CardSuit = | Hearts | Diamonds | Clubs | Spades // looks like an enum so far type CardRank = | Number of int // but each case can also store associated data! | Jack | Queen | King And record types: type Card = {Rank: CardRank; Suit: CardSuit} I didn't have to define .Equals or operator= to do things like let message = if myCard = yourCard then "Our cards match!" else "Our cards are different." F# already has pattern matching (not sure if C# has it yet). Also, in c#, you can't use "var" and let C# infer the type of a lambda, but f# will happily infer the type of this function: let isFaceCard card = match card.Rank with | Jack | Queen | King -&gt; true | Number n -&gt; false F# lets you use the existing .NET collections classes but also comes with its own in case you prefer them: let cardMap = Map.empty // look ma, no type arguments! let cardsWithWeirdRules = cardMap.Add({Rank = Queen; Suit = Spades}, "Actually worth 13 points") Since F# automatically defines sensible hashing and equality on record types, it's fine for me to use Cards as keys.
Try running IISReset by opening the 'Run' and typing 'iisreset' or doing it through the command line. Are you configuring the IIS Integration in your applications WebHostBuilder? WebHost.CreateDefaultBuilder(args) .UseIISIntegration() Is dotnet.exe part of your PATH? Is dotnet.exe accessible by IIS? Is dotnet hosting bundle installed for a single user on the machine instead of the entire system? Are folder permissions configured for the specific app pool the .NET Core app is running on? 
I think nowadays the attribute doesn't make much sense. The world has changed.
I would suggest looking at where the user is stored. Is it defined in web.config, is it a local db, is it a azure sql? And I wouldn't recommend starting out with azure sd
https://blog.stephencleary.com/2012/02/async-and-await.html
But I'm not exploring IL. In IL it's just the keyword. I was interested in resulting code that JIT produces. 
1. CreateDefaultBuilder already calls UseIISIntegration. 2. Yes 3. Yes 4. Entire 5. Yes
Well if you're using Identity you're going to need a data store and that data store will need a migration
So wouldn't it be more accurate to say that the CLR NOTIFIES the Garbage Collector of new allocations so it can use that information for internal metrics that drive how often it collects and compacts? The way its written makes it sound like its more of an inline call for any allocation.
Isn't that JIT code in IL?
Did you restart the server already? That was the issue in our case. 
https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/
Stephen Cleary is some sort of async witch doctor. I swear any time I have to re-google something about async, tasks, or threading, his stuff comes up and answers my question.
No, it's assembly. This is what the JIT generates.
Not got personal experience but I think phantomjs might be doable. Worth a check
Didn't see that. I stand corrected.
[removed]
Solved. FluentValidation was the culprit. Who knew..
Solved. FluentValidation was the culprit.
From what I've seen in shortcuts - it matches
Always a great read. 
This looks like it might have stuff built in: https://ironsoftware.com/csharp/webscraper/ The example of the page looks basically like what you're asking for.
You are reinventing the wheel to some degree. Use a tool like Norconex Collector to crawl the document, this will provide a manifest with all of the links and you can pick and choose what to save and scrape using regex or html properties. This will spit out a manifest of all of your links on the page, and it will even store the meta, content, title, description automatically. Then you can just have a task pick up the export, prepare and insert/update records. If you want to stay within c# and roll your own, you need to add a recursive loop that continually adds to the list of links based on each page load. You quickly go down the rabbit hole of depth, external links etc. which is where these tools are already nearly feature complete. There are many c# based crawlers that can be installed via nuget or used through the library itself. https://www.norconex.com/collectors/collector-http/ Depending on your purposes: https://github.com/sjdirect/abot https://github.com/jamietre/CsQuery http://www.drk.com.ar/spider.php 
Maybe I can help. 1. Making an async function generally requires you to change the return type to Task or Task&lt;T&gt; but you can also make it void. So async will explicitly indicate its async. It also means the compiler has an easier time seeing when you slipped up (async with wrong return type, async with no awaits in the function, etc) and can alert you. 2. The function waits for that code to complete before continuing onto the next line of code. However other portions of your code can continue running, for example if you called the async function from a non-async function, your non-async function will continue running without waiting for the async function to complete (though you can call a .Wait() on the Task async functions returns if you need to wait). 3. Generally it is because if you were going to wait anyway, there is no point in using async as it will just make for messier code. Just use the synchronous versions of functions. However if you make your own code asynchronous then you don't have to .Wait, but use await instead, and it will be much cleaner For example, if you have a WinForm app, event handlers can be marked async. Then you can await in them and while awaiting the user can still use the UI, unlike if you made it synchronous. So I could make a button that downloads a file and await on the file download, for example. 4. async void can be used if you are passing the function to some object that does not know about async and won't take a Task function. But if you don't care about needing that object to wait until your function is done, you can mark your function async. Sio for example WinForm event handlers... if I click on a button generally I don't care about the button itself, I just want to do a specific action like download a file. About exceptions, this is part of the reason for await syntax. You can just wrap that in an exception handler and it will catch just like synchronous. Though if you call from a synchronous function that will not work; the .Wait() call will throw the exception though so you can wrap that. 5. In general I THINK running async code will run in its own thread. However part of the point is you don't need to care about those details or manage threads. You can't even kill threads (which was always a bad idea anyway) and you use CancellationToken instead to send a message to your async function from another thread to let it know when to abort.
Pluralsight has some good courses that get in the weeds on this subject. [Introduction to Async and Parallel Programming in .NET 4](https://www.pluralsight.com/courses/intro-async-parallel-dotnet4) by Dr Joe Hummel is a good place to start.
Adding a bit on 5: The thread pool throttles the creation of new threads, mainly to smoothen bursts. The rate is one per half second, which is why you usually don't see many threads in the thread pool unless you have tons of I/O bound tasks queued.
Looks like this is what I was looking for... [https://www.codeproject.com/Articles/358993/Examining-Request-Validation-with-ASP-NET](https://www.codeproject.com/Articles/358993/Examining-Request-Validation-with-ASP-NET)
:) I think you can hint that it should get its running shoes on with the LongRunning hint. But ultimately it just figure stuff out. I find it remarkable that it has time to think about this stuff while actually running threads. I guess I could look in the Core source to see how it's done, but you're not supposed to meet your heroes :) 
Well if it works in Win 7 but not 10 it is likely an OS change. I would think you just can't do it any more. SimpleImpersonation looks like it does not use the built-in .NET impersonation, if you can find a solution that does maybe it will work on Windows 10. I have used the built-in impersonation successfully in ASP.NET Core before. Unfortunately I did not have to handle authentication because IIS takes care of it for you thus I can't offer any suggestions there.
Awesome. Now they just need to add CTRL-D when you highlight a bit of text to select multiple instances of it.
1. Open Visual Studio Installer, 2. click on the More dropdown 3. Repair
Somewhere between this installer, recent windows updates and my vacation leaving my machine in the office for admins to do admin things, .NET framework 2.0 feature was removed from my machine.
In CSS, visibility: hidden will keep the space. You can use display: none to remove the spacing as well
thanks, just got it to work by changing div to run at server and setting visibility to false. &lt;div class ="button" id="orderRetrieval" runat="server" Visible="False"&gt; in session added: orderRetrieval.Visible = true;
Hiding buttons based on security level is like hiding a key under the mat.
Azure has support for PostgreSQL, not sure why you're saying it doesn't.
Have you considered architecture roles?
That's news to me considering I've been using it without using MSSQL. I can't help you with the "not being a fan" part though.
Thanks for the suggestion! I'd be very interested in architecture roles. I did that kind of role in my department, because I know networking and security and databases and cloud and could talk to all of those teams that supported our applications. That's how I got the manager gig. I don't know specifically what skills I'm missing to pursue an architect position. I've looked at ITIL and TOGAF but I don't know how prevalent either is on the market. I don't see them too often. But what else would there be? I've also though about security or cloud. Those people tend to come out of IT not development, but I'd think a development background would be beneficial in those areas. 
Sorry, what I mean is that I'm using PostgreSQL and the fees for that rack up pretty fast on Azure. Thank you for your suggestion though.
Pseudo code: Var req = new Request() Req.properties = stuff;... Var reqdetail = new RequestDetail(); Reqdetail.hostname = ...; Reqdetail.resourceId = ...; Req.RequestDetails.Add(reqdetail); Context.Requests.add(req); Context.savechanges(); This will create the request record first and then use it's ID to create the detail record.
That's an extremely common scenario, literally almost always the first non-trivial example in any EF tutorial series. Search for "EF master-detail" or similar and you'll get a ton of hits. Since I just did this myself for a hobby project and have a few minutes, I'll give you a quick recap of my method (there are other, probably many other, methods). In my case, the master table is Puzzle and the detail table is Clue, so a single Puzzle record links to one or more Clue records. The Puzzle and Clue tables look like this (showing only relevant properties in SqLite SQL): CREATE TABLE IF NOT EXISTS `Puzzle` ( `Id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT ); CREATE TABLE IF NOT EXISTS `Clue` ( `Id` INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, `PuzzleId` INTEGER NOT NULL, FOREIGN KEY(`PuzzleId`) REFERENCES `Puzzle`(`Id`) ); The corresponding EF entity classes look like this: public class PuzzleEntity { public int Id { get; set; } public virtual ICollection&lt;ClueEntity&gt; Clues { get; set; } } public class ClueEntity { public int Id { get; set; } public int PuzzleId { get; set; } } Note the Clues property on the PuzzleEntity class. It must be an ICollection of the detail entity class and it must be virtual. Behind the scenes, EF will generate a subclass of your entity class and override this method to populate it on a lazy basis. Also note that this property does not exist on the Puzzle table itself. Finally, all that's left is to tie it all together into a DbContext: public class PuzzleDatabase : DbContext { public DbSet&lt;PuzzleEntity&gt; Puzzles { get; set; } public DbSet&lt;ClueEntity&gt; Clues { get; set; } protected override void OnModelCreating(DbModelBuilder builder) { builder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;(); builder.Entity&lt;ClueEntity&gt;().ToTable("Clue").HasKey(c =&gt; c.Id ); var puzzleEntity = builder.Entity&lt;PuzzleEntity&gt;().ToTable("Puzzle").HasKey(p =&gt; p.Id); puzzleEntity.HasMany(p =&gt; p.Clues).WithRequired().HasForeignKey(c =&gt; c.PuzzleId); } } Once that's setup, if I wanted to add 1 Puzzle and 50 Clue records, I'd: 1. Create a PuzzleEntity &amp; populate its properties 2. Create 50 ClueEntity's and add them to a new List&lt;ClueEntity&gt; 3. Assign that list to the PuzzleEntity's Clues property 4. Add the PuzzleEntity to the PuzzleDatabase's Puzzles collection 5. Call SaveChanges to write everything to the database in one transaction Note that this automatically saves the autogenerated Puzzle primary key value and copies it to each Clue record's PuzzleId property.
Dude, thank you, thank you, *thank you*. Not only did you describe what this scenario is called (which I totally needed and couldn't guess (I tried so many guesses)) but you gave me specific actionable advice. I really appreciate it. Can't wait to test it! 
Oh reread, I felt gratified to know that you classified this as 'nontrivial', at least! 
If you are in a management position, and are able to make decisions, can you take on additional duties to be hands on? Things don’t have to be the way they are just because they always have been done that way. 
this is the correct answer. 
how are you hosting in aws? if you're just on a server, ssh in and get the logs. if you're running containers use the awslogs driver and send your logs to cloudwatch.
You sound like you are using the default localDb. You will probably want to migrate that to sql azure?
Thanks! I'm as hands on as I can be, but unfortunately, it's not a tech company so we have a ridiculous number of meetings that I must attend for the team/department. That's part of the reason I'm wanting to move on to something more technical. The bigger issue is that we build and support a lot of internal facing apps that have no need to be web based or use much outside of fairly vanilla .Net. I am building a pretty simple angular website on my own time and drop it into github, but I'm not sure that's experience enough. Feels like starting completely over. Can't get experience without experience. I never did that when I was hiring. Maybe I'm just not finding the right jobs. 
Thanks! I do help my team with some of their work and help them think through things. Mentoring and all that. We just don't do anything particularly exciting outside of .Net. We are fairly deep into the framework in some places, but no JavaScript or Angular, which seem to be almost more important to know. I guess I could look at junior/mid positions, but don't want to take work away from them.
Plenty of players in this field besides the Enterprise offerings. I am personally happy with smarterasp and have been using them for a couple years now. 
Nice one! I've seen them pop up quite a bit recently. My project is only a .NET app and a database. I can always just deploy somewhere and then move to an enterprise solution later on if necessary. 60 day free trial too!
Here is a very high effort video on the subject: [https://www.youtube.com/watch?v=CzgDxdwTJds](https://www.youtube.com/watch?v=CzgDxdwTJds)
I am an Architect. Usually that just means very high level developer who is held responsible to make sure everything works. Plus evaluating new technologies. I helped my team transition from TFS to GIT for source control. Implemented TypeScript first and help everyone use it instead of JavaScript. Things like that.
Thanks! That's exactly the stuff I love doing for my team. Learning then teaching. I just don't know how to go about getting an architect position. I'd guess you need to be a really good developer but as I said it's been a while since I did full time coding.
Nice one. I'm not a server/devops guy though. Assuming you're not either, have you had any issues around security, etc? 
I am in my spare time.. haha. And no, none at all. I absolutely adore DO. Because they're actual servers, though, it is up to you to secure them past a point. I really just disable root login and only allow public key auth for SSH
Yeah
[Hockeyapp.](https://hockeyapp.net/)
Glad to help.
Nice! Have you used Vultr? Very similar from what I gather. 
I have not. I've been Digital Ocean basically since I started doing things on my own outside of work. 
Me. Haha. I do work for a large company, though, and have been sent to some really nice red team training. If you have any questions, or need help or whatever, just let me know. 
I mean, sorta. For the most part, yes. One essentially is a reverse proxy to my house via dynamic DNS so I can access various services remotely, the other is for a company so I can manage MDM and push software. 
i know, this is for a class. won't see a light of day after get graded
From what I understand is that all the cool kids now days throw their app in a docker container and host it on DO or Vultr, Linode, etc.
Async/Await is syntactic sugar that makes callbacks look like normal sequential code. There are two types of tasks created by Task methods, "async void"/"async Task" that return "hot tasks", which are tasks queued to run immediately (typically thrown on the thread pool), and non-async "task" methods that return a "cold task" that doesn't start until you trigger it to start. For async void methods, they are hot tasks that are already running in the background, and since no task is returned, nothing can be awaited and no information about that hot task is available. For async task methods, they are already running in the background but you can "await" them to efficiently wait for the task to complete before continuing. In the case of cold tasks, the await triggers the task to start. The whole point of all of this is that await tells your program that you are done with the current thread until the task completes, so you free up the thread you're on for the threadpool to use somewhere else until the await completes. When you use .Wait()/.Result, you hold onto your current thread while waiting for the task to complete, which defeats the point of await. This also opens the door for deadlocks if you are running in certain contexts, such as ASP.NET's Request context or the UI context, which are "single threaded" and lock the context so that only one thread can access the context at any given time (so if you are holding a context hostage with .Wait() on a task that needs that context, that task will never be able to start). As a rule of thumb, use .ConfigureAwait(false) whenever possible (so that you aren't trying to capture a context you aren't even using) and if you must use .Wait()/.Result and don't need to capture the current context, wrap it in a "Task.Run(async () =&gt; await asyncMethod()).Wait()" to avoid context deadlocks.
Did you mean VS 2017.8?
I don't see any mention of your budget. Azure w/SQL Server starts at $5 per month. 
Thank you for your explanation, in point 3 I meant calling .Wait() on a task
Yeah for sure, a lot of people seem to use Docker. I can't seem to get my head around it, so I've kind of just left it. Should probably learn it if it really makes it that easy. 
Warning: With Azure you can't get both HTTPS and a custom domain name without paying for the website. You can have one or the other. The 5/month was for SQL Azure itself, cheapest version. 
Ah ok. Thanks for that. Azure is out for me I think, the costs just add up far too quickly. 
From what I understand of it is that you basically configure your app in a container on your local machine and if it works there, then it'll work anywhere with now surprises.
What do you think architects do? The worst kind of architects are the ones who haven't had any hands on experience of technology in many years. Couple this with the huge changes we're seeing in enterprise architect roles. They used to be proscriptive, defining which technologies will be utilised. It sort of made sense when an enterprise messaging solution cost hundreds of thousands and that was just one component. These days their role is changing to enabling teams to do their own thing and help integrate their work together. For project level architects (me) it's very hands on and fast moving. I'm currently involved in migrating a huge legacy app our team has worked on for 10 years and there is no way I could do that without strong technical skills across a broad spectrum of technology.
I personally use asphostportal and happy with them. But, they don't support Postgre. If you have chance to change to MSSQL, then you can use them. I can recommend them as they have competitive pricing, features, and responsive server. 
Hi, if you've been out of the loop but used to code you'll find it much easier to get started again. But you should start now with your own project to get you functional again (as in able to function, not functional programming, although...) and up to date with changes in the last decade. One of those is more adoption of a functional style of programming. The market has changed in the last decade. There is still a shortfall of developers but it feels less desperate now. My concern for you is that the process you described worked better with junior developers. We can get a feel for their skill level pretty quickly just by chatting and if you're at least moderately competent this is probably why it felt easy to get a role back then. This is because many many candidates were awful and unsuitable for even a junior role. So you might have to apply for a junior role to get fully hands on. On the plus side, because you've had experience you'll find you slide back into it much more quickly. I used to do a lot of Office development about 10-15 years ago using VBA. I then didn't touch VBA for many years. When I had to use it again I coulnd't remember diddly, but I was back up to speed in a matter of days. If you're doing managerial stuff now, get some developer software installed now and see if you can eek out an hour a day to dabble. Have a look at your team's codebase, perhaps see if your team can give you a tiny project, like fixing a simple bug. Take it from there.
Eric Lippert wrote a great series about it, and how it evolved from Tasks and Continuation Passing Style. [Part one](https://blogs.msdn.microsoft.com/ericlippert/2010/10/28/asynchrony-in-c-5-part-one/) The rest are linked here: https://blogs.msdn.microsoft.com/ericlippert/tag/async/ 
To be clear, just putting async in front of a function doesn’t automatically make it asynchronous.
Never use `.Wait()` or `.Result`. Use `.GetAwaiter().GetResult()` instead when you can’t use `await`. Here’s a video that explains more: aka.ms/AsyncAwaitBestPracticesVideo
The thing that made it really click for me was Eric Lippert's explanation of Continuation Passing Style (CPS), which he expertly explains in a blog series starting with this one: [https://blogs.msdn.microsoft.com/ericlippert/2010/10/21/continuation-passing-style-revisited-part-one/](https://blogs.msdn.microsoft.com/ericlippert/2010/10/21/continuation-passing-style-revisited-part-one/)
Sure, as long as this isn't intended to be secure but is only presenting available options that are enforced elsewhere, there is no problem. I have just seen too many web based applications where this is the only access control mechanism and I panicked. 
Yeah in such cases you're totally right
Here's one of my favorite posts on how they don't work: https://blogs.msdn.microsoft.com/benwilli/2015/09/10/tasks-are-still-not-threads-and-async-is-not-parallel/
If you have the user ID on the client, say in local storage, then you don't need to even pass it to the update method. Just make the update method that signal R invokes (which is in the client side js) pull the value out of local storage and do whatever it needs to
No the userID of the current logged in user on the client machine.
That's probably only possible for an intranet app using windows auth, either IIS or with an spnegotiate reverse proxy with active directory.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/csharp] [Half off great .NET Books](https://www.reddit.com/r/csharp/comments/97rlxe/half_off_great_net_books/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Thanks! I've done functional stuff... I have all of the various tools already installed to help with things. VS, Code, Atom, eclipse, etc. We do a lot with SQL Server and DB2, but I know Oracle and learned MySQL recently while getting my AWS certifications. I already know Azure, Java, TFS, SVN, git, jenkins, j/nunit, etc. I'm not without skills, just a little rusty. I don't think that my concern is that I can't DO the job, it's just, as you say, a different job market. With more recruiters, ATS, etc., just hard to figure out how to GET the job, even with a strong tech background. I was honestly ready to give up the idea that I'd ever work as an engineer again, but you've all given me a little glimmer of hope. I think I need to focus on what specifically I want to refresh/learn rather than being overwhelmed by everything there is. 
Thanks for this too! I've always been the guy keeping an eye on the market and trying to see what was useful for my team. Learned a ton and taught a ton, it's just been a year or so. My most recent tech related work has been in migrating some of our systems into AWS. Not much coding, but certainly not simple stuff. I guess I need to decide what to focus on rather than trying to learn everything.
Oh I'm sorry. I thought 12 was the user ID. It's actually the number of unread messages. What you probably need to do is capture information about the user when they connect to the signalr hub then spawn a message loop thread like this one for the user that is connected, instead of having one that for all users. The issue you have is that the thread for messages doesn't have any use associated to it so it can't access your controller which must before relying on some sort of user authentication that took place
You too?! Same. Haven’t looked at .NET Core yet but the ASP one is good. Also not part of this deal but Get Programming with F# is a great one too. 
Correct. The only thing that happens when you mark a method as async is it allows you to use the await keyword. The async keyword with no await in the method body does absolutely nothing. 
Pretty much anything from Manning is gold. When I was younger, it was Steam Christmas sales that killed my wallet. Now, it's Manning deal of the day. XD
Correct, this avoids the annoying aggregate exception wrapper.
Thanks for the heads up!
Take some online courses if you want to brush up. Angular can be learned in 3 days. Use Todd Motto’s course. It’s my favorite. Ask.net core isn’t complicated. If you’ve done anything with MVC, your skills will almost directly translate. At my company, we have too many “managers” who don’t have enough technical chops and think that assigning tickets and making estimates constitutes managing. Though I don’t want an architect out of a manager, I personally prefer when managers can get into the details of how something should work, then sit with the programmers and explain what they need to solve. It’s a semi technical requirement but doesn’t require an extremely high level of knowledge. It sounds to me that you just don’t like managing. If you are serious in trying to transition, don’t wait for someone to see what’s on the inside (which to me is all that matters). Take a couple of weeks to learn what’s new and be proactive about looking good.
Never bought these before. I am guessing the one with “pbook” is the print version and shipped?
Thanks! I have subscriptions to Lynda and Pluralsight and just purchased a handful of Udemy courses. I've been playing with .Net core. I like being able to push it to Docker and push the image up to AWS. Automation! I don't hate management. But I didn't get into all of this to sit in meetings and discuss business projections. I was a principal engineer before the management gig and I want to go back to that.
The lions share of .NET dev jobs will be web apps with, at a minimum, a .NET backend. With the job market as it is, I think you'll be pretty able to get back into hands on dev work even if you've been out of the game for a little while.
Check [this](https://docs.microsoft.com/en-us/aspnet/signalr/overview/guide-to-the-api/mapping-users-to-connections), it helped me a lot.
*(Copied from the post in r/csharp)* Although I haven't specifically read the books that OP lists, I have read several other Manning publications and have been generally pleased with them. However, what I'd like to point out about Manning is something that I wish all other publishers did: If you buy the print edition of the book, you get the electronic versions for free. Yes, electronic versions, plural - they publish their books in PDF, Kindle, and their own web-based "live reader" versions and you can download any or all versions with proof of purchase of the print version. For computer books in particular where you're generally trying to follow along with sample code, it's invaluable to be able to have an e-copy of the book displayed on one monitor while you're coding on the other. Or, you can copy &amp; paste from the e-copy into your code without having to re-type or download everything. For leading-edge topics, they also have a program called the Manning Early Access Program (MEAP) whereby you can buy the book before it's published and have electronic access to the chapters as the author is writing them. Once complete, they'll send you the final print copy. I may sound like a Manning shill but I have no relation to them other than being a customer. I just like to promote good business practices when I see them.
well intranet app is correct, not public.
exactly. Looks like it's going to more problems than it's worth.. maybe we'll just use javascript for the time being. Have to sleep on it! Thanks!
thanks! will give that a read tmrw!
Thanks! I guess I just have to see what there is out there. Just been a while since I looked for work.
So what you're looking for is the user principal via windows authorization. Is this the full .net framework or .net core version of signalr?
I've just updated most of my ASP.NET Core samples to 2.1 https://github.com/dodyg/practical-aspnetcore. 
Still curious as to what your budget it is, and how much you want to self manage vs have the host do it for you. If Azure is too pricey, I am curious to what you think is reasonable. 
Nice, thanks! Looking forward to you SignalR stuff.
If all you can do is poll for the data then I wouldn't bother using signalr here. SignalR is great when you can detect a new message has arrived and push that down to the user. 
I knew that that Monitor.Enter should never be used with async/await because it doesn't work across threads. But that's not a problem because this is UI code, it's always on the same thread. But what I had forgotten was what happens if a thread tries to lock an object it already has a lock on. static void Main(string[] args) { var syncRoot = new object(); var a = Monitor.TryEnter(syncRoot); var b = Monitor.TryEnter(syncRoot); Console.WriteLine(a); //true Console.WriteLine(b); //still true }
Thanks for the tip, bought one of the deals :-)
&gt; Angular can be learned in 3 days A bit more than that, but perhaps the basics yes.
The __VIEWSTATEGENERATOR, __EVENTVALIDATION, __VIEWSTATE are set by the server when the page is requested. To scrape a page like that. 1) Request the page from the server 2) Update the form values 3) Post it back to the server 
What I don’t get is why you didn’t just do if (refreshing) return; refreshing = true; ... refreshing = false
The basics can be learned in a few days if you’re a principal architect or thusly experienced. If you’re going to architect anything in angular, I would give 2 or 3 weeks of studying followed by a bit or actually doing things with it. I have several teams using angular and the difference in how someone catches on is really up to the individual. 
It is only higher performance if you literally pass the raw result out to the client, as soon as you use JSONPath for a single property in the result you're now spending memory and clock cycles on building the object model. If you do pass the raw object out un-inspected, you'll want to do some kind of data validation on the client that can post back to the server so you have some mechanism to spot data errors (e.g. list contains 0 records, this isn't legal, how do you log this?). My biggest worry, that is beyond the scope of this post, is that getting used to passing **out** raw JSon, that someone new to the project might come up with the "genius" idea of passing **in** raw JSon... So you'd still need a clean mechanism of writing/updating records, and it will require deserializing Json and maybe DTOs. 
&gt; 1. faster execution in most cases What are your performance requirements? Have you coded some prototypes to measure actual speed? Don’t prematurely optimizing for something not needed.
There is another way to achieve this without using ClaimsPrincipal and membership. Assuming you know the user id on client side you can do the following before you start the hub: $.connection.hub.qs = { userId: yourUserIdValue}; $.connection.hub.start(); This basically attaches userId as a querystring to all requests made to your server side hub. Every time you invoke a hub method on the server the userId will be passed along. Now on the server side you can add a private hub method like this: private int GetUserId() { return int.Parse(Context.QueryString[“userId”]); } Now you can get the user id information anywhere inside your hub. You could also encrypt the userId prior to attaching it to the querystring and then decrypt it inside the server hub in case security of the user id is an issue.
You will have to adapt your database completely for that. If the use case of your applications is really clear and limited and works well with it and you need that performance... Well it is doable. But I think that it will be awful to maintain in the long term and you will end up with an API and code calling APIs and database and doing a lot of weird things... But, it depends on your projects requirements. My opinion is that this is generally speaking a bad idea.
You don't need DTOs in you c# code. There are ORMs that can convert result sets directly to JSON without needing to first populate an object.
My gut says no. Converting data to JSON isn't cheap in terms of CPU cycles, so you want to do that on you cheap app servers, not your expense database. 
This is already a feature in SQL Server 2016: select a,b,c,d from tablename for json auto Instead of a resultset with four columns and however many rows, you get a resultset with 1 varchar column containing Json. So you can have the exact same database schema either way.
This is a good point. Application performance matters. But development time and maintainability probably matter more. And this approach probably means writing a lot less code.
It turns out that you can pass raw Json back to SQL Server and it works, although I've only tried reading with the code I wrote while playing with this. Doing field validation before going to the database will need to be done though. So I can see needing to convert to business objects most of the time on the way back to the database anyway.
Can you suggest one of these ORMs? Also, is there something similar that can convert a resultset to a list of DTOs? As a side note, I majorly hate entity framework. So I'm resisting the whole EF -&gt; Automapper -&gt; List&lt;DTO&gt; circus. So anything that can convert a SQLDataReader to a List&lt;DTO&gt; without incurring the reflection overhead would be ideal. Otherwise I'll have to roll my own.
So, out of all the advice here: - Sending the User ID via the JS client is... somewhat questionable to me. If you're in an environment where security is important, it's just too easy for someone to spoof. - Some people mentioned Windows Auth. This *can* work, but you'll run into challenges with Chrome, as Chrome does not support NTLM and Websockets last I checked. You will have to either manually specify Long Polling or Server Sent Events. (Note; most browsers support Server Sent Events, but some have the capability disabled by default) - The advice to have a UserID Provider is indeed handy. I'd use a UserID provider, alongside some of the advice [in this SO post](https://stackoverflow.com/questions/21196266/signalr-authentication-with-javascript-client). Specifically, Having an authentication provider that provides a token when called from the JS side (using whatever auth is necessary,) having the token passed in the querystring on connection in the JS side, and then decoding that to get a (tamper proof) user ID.
Everyone has convinced me not to go the weird Json route. XML turned out to be really hard to work with. And I'm worried about that kind of thing happening again with this. And you make a good point about developer revolt. Nothing is set in stone yet. I could go with Knockout, React,or Vue instead of Angular. But that is probably a religious question. I'd like to avoid the MVC/jQuery/Web.Api mixture. I find that I'm constantly creating Web.Api controllers called from Ajax on the MVC pages anyway. And I think it would simplify things to just cut out MVC entirely.
Check about Advanced Bionics in Valencia Ca. They only support desktop and are actively looking for a principal engineer 
Is it essential that it's SQL server? Mongodb and other non-relational dbs have the json functionality pre built that fit easily into C#. In addition, they and are really easy to stand up quickly. Obviously not having schema can suck but can be managable if you enforce solid business logic. 
My deepest thanks to everyone who's responded. I was mostly worried about getting back into the job search process after so many years. I've gotten some great advice and I'll be working to refresh my knowledge and then see what there is. 
It's hard to say without seeing your code; and your code is probably hard to share - requiring a certain environment to run. One thing I would do when trying to wrap my head around a problem I didn't understand while learning is to re-create the problem component from scratch in a brand new project. Then, if you can duplicate the issue at least now you have a simple codebase you can share. Just a thought. Good luck.
EF... yuk
Do dev teams actually publish from someone’s local machine to any environment? I could see doing that while fooling around but the moment I actually want to have a repeatable and manageable process I use a build server. 
Yes, quite common in many middle size companies whose devs don't even know things like Reddit and HN exist and their core business isn't selling software. 
Yes. My place of work has been thinking about a "build server" for over a year and we've made zero progress on it. All of our deployments are from Visual Studio or file copy.
Your post has been removed. Self promotion posts are not allowed.
You would test it on your machine first. Then maybe put up a pull request or code review for others to see and give feedback. The build servers doing continuous integration and continuous deployment (CI/CD) are usually shared, whether that is between devs, testers, business users, etc. I’ve not worked in an environment were devs would have free rain to just push from their machine to a shared server. What if two people just clobber each other. There is not change control process that can show what is actually deployed so you don’t actually know, without a doubt, what you are testing. 
My company does. There's only four of us and as far as I can tell they've never had two or more people work on the same project at once either. Pull the project into your computer, do your work, and publish to Azure with the publishing profiles in Visual Studio.
Once you introduce server validation there is no benefit in storing the JSON string to serve to the client unless you are in some exceedingly high demand data returns. The serialization from object to JSON using Net.Http is something that may be of a concern when you hit 10s of thousands of requests per minute, and at that point I would work to avoid having the one SQL datastore be a point of failure.
If you want to lock with `async` use `SemaphoreSlim` and `await semaphore.WaitAsync()` and `semaphore.Release()`
Is that the same process to get thing into a production environment? 
Is that the same process to get thing into a production environment? 
We can think Microsoft versioning for that. VS 2017 is version 15. SQL Server 2017 is version 14. 
Sorry, that just seems crazy to me. 
Yes, was the norm at my last job. I convinced them to buy TeamCity and I set up reusable deployment scripts, but no one wanted to use them because they had to do a pull request and wait 3-5 minutes. ¯\\\_(ツ)_/¯
For sure. The previous place I worked was a contract job at a healthcare place and we had to demo the change over a phone call and screen sharing to someone who sign off and having it included into some milestone in a future date and would pass it off for their internal QA to test. Much more rigorous.
It sounds to me like you have used MVC to make single page applications in the past which are hard to maintain and harder to enhance. My advice after participating in the same behavior would be to build a WebAPI back end on JWT or oAuth and pipe your client facing framework at it. Client side validation should catch most things, return the server error on things you didn't predict client side, 
It happens to me sometimes I start from A and want to do B. So I code A to C to D to B, spend half a day debugging C and D. Then, over the coffee break, when explaining to my colleagues my code issues, they reply: why don't you do A to B without C and D? To which there is usually no reason... Moral of the story: Coffee break solves many issues. 
Depending on your setup, deploying with VSTS and/or Octopus deploy is really simple these days. Even with self-managed servers running IIS.
There's also a Async reader/writer lock. I think this is the version I've been using: https://github.com/StephenCleary/AsyncEx/wiki/AsyncReaderWriterLock
This is UI code, so it will always be on the same thread.
If you want to guinea pig, I can add a JSON output this ORM: https://github.com/docevaad/Chain/wiki/A-Chain-comparison-to-Dapper
I think it's a fine idea and am considering a similar approach. I probably wouldn't use it for everything and I'd really make sure to separate the business logic (eg stored procedure) from the json creation logic. In the end, my true question is are you up to putting all the testing and refactoring work on your database layer? I see no reason why a database couldn't support the additional task but many people don't write test suites for their DB and therefore I think they get wary of integrating too much DB logic in their app. 
The idea is that your build server builds your code each time you push, and then based on which branch you push to is how the deploy knows where to put your build. Then when you are sure your build is tested you promote the build to your production environment.
Yes, except we are using git so the code is already committed and pushed to a branch instep 4. Once the PR has been approved it is merged into the master branch; but really that is just semantics from what you said. * VisualStudio.com makes git integration with PRs really nice. We have branch protection so that no one has permission to push into master (or develop which is a long standing branch for current sprint work) and all PRs must have a passing build and two other reviews to be completed. 
&gt; Integration tests come later after it has been released and deployed Maybe we have different definitions of integration tests, but why would you wait for software to be released to run integration tests? For example, we work on a shit ton of REST APIs, and we have what I call an integration test that runs through the APIs and makes sure they return what they should. It seems to me like you could run this at step 3 pretty easily. But again, maybe I'm using the word "integration test" incorrectly. 
Ah okay, so it sounds like you’re not deploying the code on step 3. &gt; How are you calling the APIs? We do everything manually, unfortunately. We deploy the code manually and we run the integration tests (that call the APIs) manually. We’re pretty behind the times honestly which is why I’m trying to learn about this stuff. 
Maybe you'd be interested by this library that provides something similar above any rdbms https://github.com/sebastienros/yessql You can access the raw json or keep working with your pocos.
This isn't scalable. What happens if you get more traffic then your db server can handle?
We have multiple build servers, and multiple environments. Testing is initially done by the devs on their local machine, then in QA by the testers. At the end of each sprint a release branch is taken and pushed to a UAT branch for final testing by testers and the business Once we have signoff, the release package is deployed to production and training. Database changes go through the same process using red-gate source control.
This confuses me, relational database is a requirement, but you’re not actually using the relational part? Why is it a requirement then?
True, i believe you've captured the essense there
&gt;Garbage Collector of new allocations so it can use that information for internal metrics that drive how often it collects and compacts? The way its written makes it sound like its more of an inline call for any allocation. Yes, that's exactly what I meant.
Funny enough I just rewrote code for this last week. Deep diving into synchronization primitives, waithandes, and events is cool.
No, stay with DataReaders. It would be incredibly unlikely that you would be able to pass all data in exactly the correct format and mapping as needed by the client anyway. I really can think of a good use-case for this feature except for cases where you are using SQL Server as some sort of high volume key pair store. 
Dude, do yourself a favour and setup jenkins. It’ll save you heaps of time and effort. You don’t need permission to be awesome :)
My company (consultant) does. Despite the issues that keep popping up with every release which could be easily solved by a build-test-deploy pipeline, the customer has decided it wouldn't be worth the money. We wrote some scripts of our own to at least mitigate some of the more obvious things (like someone forgetting to run tests before deploying). Our release-"pipeline" is essentially: 1. Manually set a flag in the database to close the system 2. Batch-script to build and run tests 3. Batch-script to copy files to server appropriate server (dev / test / prod), which will be mounted as a network drive 4. Run .sql which will update version number and reopen the system Should also be noted that until I joined this project (about a year ago), there were only unit tests, and no integration tests which touched the database whatsoever, despite the applications relying heavily on stored procedures and triggers (I'd estimate about half of all business code is SQL). I'm actually leaving the company in two weeks, largely because it doesn't feel like a professional environment. At my new company we actually spent half of my first meeting with them going through their build pipeline, and how they're currently in the process of moving from on-premise build servers to cloud-based ones. I'm fairly sure that if I had brought that subject up to my current boss, I would've gotten a blank stare, and have to explain what a pipeline is.
Another vote for VSTS. It's your build server, source control, issue tracker (or any combination of the above), etc. all in one.
Sure, but I generally avoid taking a dependent on an external library if I can achieve the same thing with the same effort using the standard library of the given language.
Oh sweet time, when i just mentioned that we should do some unit testing at least and make a code-coverage minimum... Those blank stares... We all know these. 
Have you dealt with EF Core migrations in Jenkins? Seeding the database after the migrations are run ...etc. How "easy" is all of that?
That's the point. 
When you say "You absolutely CAN use lock [...] INSIDE an async method" your point is that you can use `lock` in a broken synchronous method? 
In our ASP Core / EF Core projects we have something similar to this in our startup.cs public void Configure(IApplicationBuilder app, IHostingEnvironment env, IApplicationLifetime applicationLifetime) { using (var context = app.ApplicationServices.GetService&lt;DbContext&gt;()) { Console.Write("Migrating database... "); context.Database.Migrate(); Console.WriteLine("Done."); Console.Write("Seeding database... "); context.EnsureSeeded(); // extension method Console.WriteLine("Done."); } ... }
Very. dotnet ef migrations script -i -o migrations.sql cli\_of\_db --params-to-run-sql-file -i migrations.sql 
I just don't really get in what way your example code is supposed to demonstrate this. I mean, no one in this thread doubts that you can use locks in synchronous methods or that you can call synchronous methods from async ones, and the code doesn't show using a `lock` inside an async method which seems like the actual argument here. Anyway, doesn't really matter. You can format inline code with \`backticks\`.
Followed by "so you'll do this work on nights &amp; weekends"
&gt;I think it's a fine idea No it's not, it creates additional overhead of parsing the data into JSON only to de-serialize it back in the app layer. The only advantage it gives that I can see is it makes it quicker and easier for a lazy developer to bind to their .Net objects but that comes at a performance and maintenance cost. Just use an ORM and bind to procs/views if you have to be that lazy. If you serialize to JSON just to map it back to a .Net object in your app code your DBA will resent you. Its just offsetting the work to someone else to fix. We have a project where the developers decided to do the exact same thing due to time constraints and its causing a multitude of issues. &gt;I see no reason why a database couldn't support the additional task There is no technical reason stopping you from doing this but there are plenty of technical reasons why you shouldn't do this. It's like supergluing a brick to a ferari and saying that because you added something that the addition is creating value. &gt;I think they get wary of integrating too much DB logic in their app. What does this even mean? Database logic stays in the database. The app code should not contain DB logic. 
The two-way binding and easier componetization (as compared to MVC partials) are huge upsides that I don't think it's fair to dismiss. Hacking AJAX calls in MVC is easily the worst part of developing with it.
You realize there's more to a relational DB than not storing JSON documents right?
I wouldn't, but there's nothing stopping you.
I've commented elsewhere in the thread but trying to skip out on DTOs (which can be minimized with good OO principles), in my opinion, is defintely NOT worth using this pattern. People have already mentioned a ton of different reasons why. I think there's a reason I've never heard of this approach before beyond SQL Server's JSON support. If you're doing a tiny one-off 3 month application that you know will never change, it'd be a fun experiment. My prediction is that you won't get any performance gains out of it by serializing at the DB vs the app server and then feeling like shit every time you have to serialize that string to do anything important to an object anyway (like validation, as you mentioned).
I would be using the relational part. You get all the relationships in the schema. You can join however you want using regular SQL. The difference is allowing SQL Server to return the resultset as Json instead of a datareader. Since it's Json, you can use a Json serializer instead of converting the datareader to business objects. And you have the chance to skip the deserialize step and pass the Json straight through to the UI. But as others have said, it's probably not worth the trouble it may introduce.
No, and I'm not a big fan of stored procedures either, especially putting business logic in them. I do like automated unit tests. But those get weird when testing the things in the database.
Yeah, a $5 or $10 VM at most providers are more than enough for Jenkins.
I do it. Tiny start-up company run by three people in their spare time. I'm the only Dev. We only have one server.
You only want to construct the JSON for the response in SQL server if you just can't get the performance in code (and it's much faster in SQL server). It should not require 3rd party libraries for serialization. 99% of the time, you should not be serializing from SQL to the response.
Thanks. Would you go with Ubuntu 18.4?
Custom IFileProvider for ASP.NET Core that allows easy retrieval of files in a Blob Storage. This is a bit crazy but it allows ASP.NET Core to search a Blob Storage for your CSS/images/javascript/etc without doing it manually. By putting them in the right order, you could prioritize local storage as well as cloud storage. Anyone could re-implement that bit of code to look up the files on S3 or anywhere else for that matter. Pretty cool stuff.
We use code first and run dotnet ef database update in a command line task in or tfs release. We do still need to figure out pushing out stored procedures during the release, 
I'm not familiar with the recent changes. What's happened to it?
My boss learned it like that and I still haven't convinced in using VSTS continous deployment even when I have made various examples showing how easy can be.
If you are talking about event sourcing then I would start to look toward CQRS. The two go hand in hand. Also Greg Young has some amazing content on the matter. I would check him out.
I guess we're just using different definitions of "within an async method". The method is "within" the call hierarchy of an async method, but that doesn't affect the lock in any way. The lock is in a synchronous method, it just so happens that this synchronous method is declared as a lambda within another synchronous method and returned as a task to an actual `async` method. All of that surrounding machinery is irrelevant to the issue at hand, ultimately it's just void Foo() { lock (_lock) { Console.WriteLine($"Start {i}"); //unawaited Task.Delay() doesn't make a difference anyway Console.WriteLine($"after {i}"); } } which no one is surprised about it working. When you were saying "inside an async method" I figured you were going for something like this: async Task Foo() { await Task.Delay(123); lock (_lock) i++; await Task.Delay(456); } Which is legal and perfectly functional. 
It’s horrid. There is also a bug in the scaffold template that doesn’t allow you to point to your class that inherits from IdentityUser. I was able to fix it eventually but it was not detecting I had my own custom user class. 
&gt;CQRS Thank you, I'll check this out! To clarify my question, an example would be: a record gets updated and an event is raised to send notifications. CQRS may cover that, I'll read up on it. Thank you again!
As said, I bought one the books, the EF Core one. Seems good so far, only annoying thing is they've put in a watermark with my name on every page - of course to counter piracy, which is very understandable. But it needn't be in **bold**, black writing and fairly large font-size, did it? :-D
Spot on. If I had cookies I'd give you one. I can manage a bacon roll if that helps :) 
Correct, everything after the .ConfigureAwait(false) runs on the threadpool with no synchronization context, losing access to either the GUI properties (as in, don't you dare try to access them since it's undefined what their state is) or for ASP.NET, the Request object.
I'll be honest with you all... I have absolutely no clue how it could be used. I know it's open sourced and it's coming from [Microsoft Research](https://www.microsoft.com/research/project/FASTER/?WT.mc_id=social-reddit-marouill). I can leave you with the description: &gt; FASTER is a new key-value store for point operations, that combines a highly cache-optimized concurrent hash index with a novel self-tuning data organization. It extends the standard key-value store interface to handle read-modify-writes and blind update operations. FASTER achieves orders-of-magnitude better throughput – up to 160M operations per second on a single machine – than alternative systems deployed widely today, and exceeds the performance of pure in-memory data structures when the working set fits in memory. It's open-source for both C# and C++. Enjoy if you know how to use it. :D 
Nice to see Scott blog something which isn't bloody Azure related for a change!
It's on the PDF version. Other than that, the formatting is nice, and I get the sense it's a really good book - I'm 40 pages into the EF Core one.
Maybe? All I know is it's fast. 
Great post!
Yea, identity UI is dogshit. It's very difficult to add customizations to what you get out of the box. Here's what I did for 2.1 - 1. create **2.0** app with identity. It will generate the usual controller and views that we are all used to 2. create 2.1 app without auth. 3. copy and paste the stuff from 2.0 over to the 2.1 app. 4. make customization. 5. give middle finger to whoever thought Identity UI was a good idea.
I gave up on migrations a long time ago. 
Would love to hear from anyone with some real world experience using this. Specifically how did this help you versus, say, a good 'ol dictionary backed cache. What does FASTER offer that I won't find in SQL Server with a table and an index?
You know... It's faster.
This is an awesome thing with a TERRIBLE name. Completely ungoogleable.
[removed]
Sounds like a replacement for something like memcached does it not?
I looked at the PDF and it sounds like it.
\&gt; and the boss wants either Xamarin or GoLang for the backend RESTful API, Xamarin? lolwat. If you're going for a RESTful API, Web API on DNC is the current standard.
It really is that bad.. I've not see one positive comment about it... Just wtf and how can I fix it.
Ehh, it’s not too bad. Just copy and paste. Might take 10-20 minutes, but worth the hassle.
Have you talked to a recruiter? They have a better idea as to what companies want and will often offer free services such as fixing your resume.
Thank you for your answer. Yes, I have had an experience with recruiters, but no success. The recruitment process is finished with words: "Thank you for your sending your CV, we will have it in our database". And then only silence.
&gt;(Seriously. A small mistake in your resume will cause people to just throw it away.) Funny, a really good reason to throw a candidate away - A SMALL MISTAKE in his CV/resume! It shows that programming job market is fictitious. If they really needed a programmer, no mistake would be a reason to say: "Good bye"! They would just employ a programmer to realize the project.
When I used to handle resumes, it wasn't unusual to get dozens for a position. And that's with little or no advertising. Post the job on a more popular website and you could easily get a hundred resumes. There is no way we can interview 100 people for 1 position. So first we throw away any resume that looks like crap. If you don't care about the quality of your resume, you probably don't care about the quality of your work. Then we throw away any that appear to have obvious lies. Stuff like using a technology longer than it existed. So here a simple typo can kill your chances. *** As for the claim that "programming job market is fictitious". Well keep in mind that competent people rarely look for a job on the open market. Once you establish yourself, you tend to either actively recruited or just jump to whatever job your friends from previous jobs recommend. That leaves unproven developers, those who want a dramatic change in their career, and an army of incompetent people who flood every job they see with applications. 
What are the features provided by this library? If it's mainly in-memory key-value store, then why would I use it over a Dictionary?
Makes sense. My present job gives me no chance to "establish myself", at least for now. Maybe in the future. Hundreds resumes for one job. Well, so you again confirm that theoretically market badly needs programmers, but in practice it is a programmer who badly needs a job. So I wonder why there are so stupid articles in the Internet that say "Programmers wanted!". Many people think they will get an easy job as a programmer, but it is not true. Especially without ANY experience. Nobody knows you; nobody wants to invest in you; nobody trusts you. You send hundreds of resumes and you stay with nothing. 
Which version of. NET Core are you using? &lt;V2.1 used curl to implement HttpClient, so it might be something to do with that if your on an earlier version. Did you try as suggested by one of the comments too set the header value to a space, instead of an empty string?
Also take a look at [Auth0](https://auth0.com/), there is token authentication and an authorization extension to pass roles in.
I put this together because I was fed up with the complexity with getting started for something that should be simple ... [https://github.com/matthewblott/simple\_aspnet\_auth](https://github.com/matthewblott/simple_aspnet_auth)
Businesses have been utterly unwilling to truly invest in employees for quite a few years now; and maybe as much as two decades depending on the industry. They all want you to hit the ground running with near-zero orientation, and definitely zero training, and woe to the applicant who doesn’t have ten years of experience in a tech stack that is only two years old!! (Recruiters are especially bad with that)
Try Pluralsight. That's usually a good place for learning. It costs money though. I think you might get a few months free when you sign up for a Device Essentials MSDN subscription (free)
I recommend Pro WPF 4.5 in C# (https://www.apress.com/de/book/9781430243656). Covers everything you need and it's really useful to look things up once you're through it. You can also skip chapters you're not interested in.
Concurrent, more data than fits in memory, can be persistent 
True! I have over 15 experience in programming - various technologies. But even with that, though I am invited to take part in the process of recruiting, I lose in the middle of it. I imagine hundreds candidates doesn't even know about recruiting. Their resumes are thrown away in the beginning.
I think I have a good resume, good enough to be invited to take part in the process of recruiting. I exist on Github, but maybe I should do much more. To network? I got my present job because my employer found me in the Internet. Some people talked about me on a forum. I'm learning all the time - I love learning new things. My spare time is programming too, so in reality I have no spare time. \&gt;&gt; Learn .net core, angular2, react, vue, test driven, scrum, rest, etc... Well, yes the best thing to know everything, all the knowledge in the world, but be sure you will still lose the recruitment process. Why? You have a small mistake in your resume. Hahahaha!
Try WPF Unleashed book https://www.amazon.com/WPF-4-5-Unleashed-Adam-Nathan/dp/0672336979
Others have mentioned guides. I suggest trying to make a really simple application, maybe a window with a single button and a list box. When you click the button, a new item should be added to the list box.
Ok, we can talk. Could we sue a chat? Because any PM isn't probably available I think.
My personal favorite (and how I learned) https://www.amazon.ca/Windows-Presentation-Foundation-Unleashed-WPF/dp/0672328917
I have just found the PM :). 
Xamarin is for building mobile apps. You're looking for ASP.NET Core. Here are some examples from my company https://github.com/codenesium/samples
Happy to give a quick glance at your resume if you PM. Are you looking to stay where you are or are you okay with moving? That can make a difference a lot of times if your resume isn’t getting as many hits as you want.
Sent a PM message.
We've got about 10 seats open. Good MS stack engineers are hard to find.
Really? So you can allow people to learn if there's something what missing in their resumes. Nobody knows all - it's impossible, especially when there are so many technologies that are growing so fast. Be realistic. I would like to know all what is needed, but ten things in a job offer at start is too much for most GOOD candidates. I think a candidate should know well (be an expert?) one, two or three technologies and the rest can be learned in the future. I personally love learning. I would learn new things with pleasure. If you work for IT, you MUST learn. It is a part of your life. What do you mean by "good"? Twenty technologies for one person? If so, your 10 seats will be always open. If you really want to find somebody good enough, just give candidates a chance to be good enough.
I'm not in charge of hiring, so you can't fault me in particular for being too demanding. It's a pretty straightforward skillset we're looking for - a reasonable grasp of design patterns and best practices, as well as intermediate aptitude in C# and SQL language features. Having a laundry list of other technologies means you bring fresh perspectives to the table but is not required. However, seeing gross grammatical or spelling errors in a resume would likely preclude even a phone call. I can see from your first sentence that English is not your first language. You might want to make sure you don't have anything like that in your resume.
The user who suggests avoiding comparisons to WinForms is spot on. MVVM with WPF is complicated enough that it isn't immediately obvious how to do things, but it is simple enough that the most important concepts can all be demonstrated in a single, short example. Check out this one for starters: https://www.markwithall.com/programming/2013/03/01/worlds-simplest-csharp-wpf-mvvm-example.html Don't skim, just read through the whole article, and read all the code. If you don't like that guide for some reason, just try to find an example that includes at least one viewmodel, at least one command, and a collection of some sort. I'm sure there are like a million todo list examples that fulfill these requirements. As you get further into MVVM with WPF, you'll find that there are some common base classes that you wind up writing for every project. And some annoyingly repetitive boilerplate code that you end up having to write over and over for each public member on your viewmodels. You will quickly discover that there are several MVVM frameworks available that aim to smooth over these (and other) issues and that also provide some helpful utilities to make your MVVM life easier. That said, try to stick to raw WPF/MVVM until you find an actual need for these frameworks.
\&gt;&gt; I can see from your first sentence that English is not your first language. Do you mean: "Really?" :). Come on, English isn't so easy for the people who aren't born in Anglo-Saxon countries and you will always know that a given person is a foreigner. I would like to know what foreign language you know ;). And you want us, foreigners, to understand all your accents and slang. \&gt;&gt; \[...\], as well as intermediate aptitude in C# \[...\] I'm puzzled. So now, I wonder why I'm reading books as "C# 7 in a Nutshell", "CLR via C#" and "C# in Depth". Just some tutorials would be enough to be a " good MS stack engineer " . SQL I used in the past - forgot most things. I don't need it in my present job. Best practices ? It is true that there are some universal ones, but it comes with a long practice. 15 years should be more than enough. Fortunately, I got a chance to develop it , but many noobs didn't. Hope you don't expect anybody to know design patterns by heart because many recruiters do. If I need a Singleton or a Fabric, I use them and I don't care of other design patterns. It is not magic - every design pattern can be learned in a half an hour. If need be. \&gt;&gt; Having a laundry list of other technologies means you bring fresh perspectives to the table but is not required. I have a "laundry list" of other technologies I worked with. I think many people do. \&gt;&gt; You might want to make sure you don't have anything like that in your resume. Writing my resume in English I'm more careful - believe me. You don't write anything about communication skills and other things that have nothing to do with typical programming. I'm surprised. But maybe give up the long recruitment process of reading resumes, calling, talking, etc. and just tell all candidates to write a code, maybe the whole application. You will see distinctly who is a "good MS stack engineer ". You will see a reasonable grasp of design patterns and best practices and an aptitude in C# and SQL language features. All is visible in code - good and bad things. Do you want to employ specialists in English linguistics or programmers? That's why you have the 10 seats open.
Why waste your time? WPF is more of bloated hassle than it's worth, and it slows down development and productivity. Do you plan on having designers re-work your UI in XAML while you program the business logic? I've never met a UX/UI person who knows XAML. Do you need fancy animations and high resolution fonts? Do you want to run your application in a browser using Silverlight? Is that even a thing anymore?? XBAP, haha. You get some data binding, and separation of UI and business logic because of MVVM. But at a significant expense. Your out-of-the-box control choices are far less than Windows forms, the designer sucks so you're forced to do everything in XAML markup, which I'm not sure why people think is a benefit? Sure, you can do a lot of complicated things with XAML. But do you really need to? Are you going to switch out your front end with any kind of regularity that would warrant this kind design? All for just a Windows desktop app that has no possibility of being anything else in life? Unfortunately, Microsoft really wants you to use XAML. So even if you look at using UWP, you're still stuck with XAML. You're probably better off learning Elektron. Bring on the down votes.
My current company is having a lot of issues with high dpi and win forms - which wpf deals with to the point it wasn’t even a consideration at my old job.
The 60 day trial helps, giving you a lot of wiggle room. For deploying ASP.NET MVC apps with EF, I basically just point the connection string to production database (you can do this with release/debug build specifications too), publish the application to a local folder, then just FTP those published files into the application directory I have set up in IIS. In the case of shared hosting IIS will probably be set up for you, but I haven't used this hosting company. All in all it's not too challenging usually. For what it's worth, I have used Hostek for years and their support is outstanding with helping you get up and running. So if it's something your really dreading it might be worth giving them a shot, they have come through for me several times and I'm not a large account. 
Thanks, I’ll take a look into them. Finding the freedom of Web development and the abundance of technologies intimidating to get going with! Analysis paralysis reigns supreme.
I second this, fwiw. That exact tutorial helped solidify the concepts for me, coupled with the Adam Nathan book for the xaml side of things.
&gt;The lazy way is to use a canvas and drop your controls on like winforms - Don't do this. This is how they created the design tool at my workplace. The base class derives from canvas and everything else you could imagine derives from Border of all things, instead of UserControl. Autogenerating lists by pointing at a collection? Nah, they don't support the ListBox or any other panel to space things out. You have to place every single little icon manually. I resorted to manually create the interfaces by writing the damn xaml in notepad++ since they changed the default namespace and Visual Studio goes tits up.
I think some of the attitude displayed in this post could be a reason why you have trouble. Certainly you will if it comes through at all on your CV or in interactions with potential employers. Just some tutorials are not enough to be a "good MS stack engineer" and neither is reading some books (though the ones you mention are good). And your comment on design patterns speaks volumes and suggests to me that you probably don't put a lot of consideration into what you're doing. Sure you can get the gist of a pattern in a short time but it takes thoughtful experience to really know when one will be useful to use or not and why.
Blend is a decent design tool now, it's way quicker to make the general layout in the designer and the Document Outline for various effects and element navigation -- Right-clicking the file prompts for "Design in Blend" But the more I learn about newer technologies I'm inclined to agree with the rest... 
I dont use mvvm anymore. It ideas are outdated in the async/await world. It's only upside currently is testing. I prefer MVP these days
There's a whole lot of things WPF deals with that you otherwise wouldn't get for free and it's mainly regarding the handling of graphics, everything from positioning to final render and how it's updated.