In 100 hours? And only WinForms?? That's crazy man.
My only question is why, haha
There is no line as depends on scale of project, how many devs working on it, how likely future development is once you deliver, if there is likely to be automated testing so forth. You want to see real benefits, now and later from following patterns and doing abstractions, not just more work for no benefit.
I love this. Great answer.
Abstractions and design patterns are supposed to be solutions to problems. Many (most?) problems that come up in programming have been ‚Äùsolved‚Äù by others already, and over time some solutions have been formalized into quite generic ‚Äùdesign patterns‚Äù or ‚Äùbest practises‚Äù. This does not mean that they are the correct or best solution in any specific case. I have a bias towards simple and small, and that quite often implicitly excludes the overhead of some design patterns or so called best practises. If and when I code myself into corner somehow, I of course look at how the problem has been solved by others. Sometimes I need to start over according to a pattern, sometimes an abstraction is needed, but I always think of them as solutions to specific issues I can point to, not something that I have to do from the start for my code to be ‚Äùcorrect‚Äù somehow. I also have to mention that I prefer functional over OO, and since I started leaning (and learning) that way, the problems that need to be solved by ‚Äùdesign patterns‚Äù are becoming more and more infrequent. TLDR; Only add abstractions when you find out you need them, not before. They are solutions to problems, not some mandatory part of your code.
1. Don‚Äôt repeat yourself 2. Keep it simple Use patterns to help you achieve 1 &amp; 2
Except PostgreSQL with JSONB does better than most NoSQL at their own game.
Oh yeah and I am 17 xd. Here is my resum√©: [https://www.stephcraft.net/portfolio/#cv](https://www.stephcraft.net/portfolio/#cv)
Good good is good good? Great detail man.
Such smooth graphics refresh on WinForms is quite something. Well done. I am interested in how you managed to get the refresh like this.
Raven dB is dotnet afaik. So it doesn't use the same lucene as solr and elastic search. It uses a dotnet port that is much less up to date and less maintained.
PgDoc is a lightweight one: [https://github.com/pgdoc](https://github.com/pgdoc).
FYI, your website doesn't work properly. It looks like it's trying to do that full-page snap scroll thing (which imo is a horrible trend. Ux protip: don't take control away from the user unless absolutely necessary). The problem is it doesn't "snap" properly, at least not on mobile. I try to scroll down and the page snaps back up - usually past where I started scrolling from and not even on the snap boundary so I attempt to scroll down and end up scrolling up half a page. Faster "flick" scrolling seems to go back further than slowly dragging the page down Still better than the crap I made when I was 17 though...
Best portfolio I've seen in a while. Employment and education should be listed in reverse chronological order in CVs though as the latest stuff is usually the most relevant to whatever you're applying to - so primary school last, secondary school first.
It says it is 1% complete and you want $15 for it. &amp;#x200B; You ask the following * do you know there can be a memory leak in the managed .NET application? Yes. * do you know that your application may be in over 80% busy by doing the GC, not its original work? Unlikely. * do you know why we should avoid finalizers? Do you know when we should use finalizers? Probably a better question. * do you know what are the common cases of allocations Yes. Instantiate something. Sorry to be pissy, but you want $15 for nothing. It's annoying. Come back when you've got the book fleshed out and make sure there's a sample chapter.
Multiple implementations of given interfaces is where you get the value back. In terms of DTOs its all about if you're getting value. If you're the only consumer, if you're not building microservices then there's no shame in having your model also be the data transfer model. The only ugly you have is if those objects inherit from stuff that has a ton of hooks into your datalayer.
It is just one line of css, but it is an experimental feature so it is not supported on all platforms, especially not on mobile. Its only on that particular page because I wanted the scroll to be pixel perfect with the portolio sections wich are taking the exact height of the screen. I could use a polyfill to fix the issue, thanks for the feedback üëç
&gt;There's no other way to transfer serialize and transfer expression trees with all the edge cases unless they serialize the actual LINQ syntax as C# and then run a C# engine inside It's exactly what I suggested in the article and pointed to [Serialize.Linq](https://github.com/esskar/Serialize.Linq) library :)
Gotcha that makes sense. I wasn't sure how it was implemented and obviously couldn't f12 on mobile to check. What css rule is it? I wasn't aware of that feature. To be clear I'm not saying it's bad or anything (aside from the mild frustration it caused), I just wasn't sure whether you were aware it was a little buggy
Its `scroll-snap-type` I was kind of aware because it is experimental but I never encountered it
Probably double buffering.
Thanks. I'll have to check it out. Yeah it's certainly got some weird behaviour. Which browser are you using? The issue I was having seems to be limited to the in-app webview browser on Android. Chrome on Android didn't appear to be snapping at all, and I didn't notice it on chrome/ff on desktop either when I quickly checked ü§î
Are there any chances of seeing the code ? :D
Thanks :D
have you enabled automatic decompression on your `HttpClient` (`HttpClientHandler`) and do you send the required headers (e.g `Accept: gzip, deflate`) to the api?
Usually you don't see many people use older versions of NET Standard anymore. Many simply either do 1.6, 2.0 or Multitarget to net45 and 1.6/.20
I'm kind of forced in this case. The infrastructure where it will be hosted can only deal with 1.2 sadly...
I could not imagine so incredible success but 70-486 dumps made it possible and I am thankful for it. It compels me to wonder over the work done by experts. They organized all the information in the form of questions and answers and used easy language so there remains no confusions. After the completion of [**70-486 dumps pdf**](https://www.dumps4download.com/70-486-dumps.html) I was clear about all the ideas and concepts and was able to solve full paper in the final. But I took advantage from the opportunity and practiced on online practice test which enhanced my confidence and corrected my faults. I suggest all to take help from Dumps4Download because think there is no better source for preparation.
https://github.com/okhosting/OKHOSTING.ORM Stable and currently mantained
 [https://www.reddit.com/r/csharp/comments/c2apdx/so\_i\_made\_a\_video\_game\_with\_windows\_form\_in\_about/erlqrxt/](https://www.reddit.com/r/csharp/comments/c2apdx/so_i_made_a_video_game_with_windows_form_in_about/erlqrxt/)
 [https://www.reddit.com/r/csharp/comments/c2apdx/so\_i\_made\_a\_video\_game\_with\_windows\_form\_in\_about/erlstbl/](https://www.reddit.com/r/csharp/comments/c2apdx/so_i_made_a_video_game_with_windows_form_in_about/erlstbl/)
 [https://www.reddit.com/r/csharp/comments/c2apdx/so\_i\_made\_a\_video\_game\_with\_windows\_form\_in\_about/erlstbl/](https://www.reddit.com/r/csharp/comments/c2apdx/so_i_made_a_video_game_with_windows_form_in_about/erlstbl/)
Nice, I'll check it out!
Hello. In fact, Entity Framework can be seen as a [Repository Pattern implementattion](https://medium.com/@mlbors/using-the-repository-pattern-with-the-entity-framework-fa4679f2139), given that all operations expected are built-in within the framework. So the examples found may be useful anyway. For the interaction part, in some cases, EF is used as a fa√ßade for quick access in the [CQRS strategy](https://github.com/microsoftarchive/cqrs-journey), specially for event sourcing. &amp;#x200B; In an opinionated architecture using DDD for the Domain Layer, the interaction is limited to recovering information via services in the Infrastructure layer and translating it to domain objects agnostic to the repository pattern, throught another intermediary layers. I think [this guide from Microsoft](http://cqrsjourney.github.io/) would help to clarify this ideas. My personal opinion is sometimes avoding a custom implementation of this pattern is the best for real world projects. &amp;#x200B; Cheers.
Just use Dapper.
EF generally is the repository. If you want to research how to implement a separate repository layer, then look for that. You‚Äôll get a lot more examples than if you just look up DDD.
Did you create the app with Vue cli? The index.html file is the critical piece you seem to be missing. Is the IIS site configured to just serve files or is it serving an asp.net app? If it's serving an app, the app has to be configured to serve static files and ensure a controller isn't overriding the path
Thanks for the advice, i'll look at the links.
I got it serving the app but the styles and images did not make it through for some reason?
I am using Swashbuckle ANC 5.0.0-rc2 https://www.nuget.org/packages/Swashbuckle.AspNetCore/5.0.0-rc2 and recommend it for generating OAS 3.0 documents. The project is less active than I would like, but it is quite extensible and is based on both Microsoft's own OpenApi project and the ANC ApiExplorer apis. Neither Swashbuckle ANC 4 nor NSwag is based on that MS library and both suffer some inconsistencies from it. We are using SB as part of our build process, producing a spec document in a debug build dynamically and using the CLI to generate a static file for the release build. We also have built a number of in house testing tools based on Microsoft.OpenApi to validate the document does not break backwards compatibility with itself (I am looking to replace these with OTS solutions where possible). For generating our client Typescript code we have a program that takes the OAS json file and uses a set of mustache templates to convert the file into a set of services, components and routes for an Angular application that interacts with the api. Our goal is to produce customized white-label applications that interact with the api for our clients to use after they fill out a form that prescribes the build options they want (colors and fonts, enabling features, relabeling and reordering pages, table columns and forms and so on; Someday perhaps this process can be done with an OTS solution as well).
Dapper has a dependency on 1.3.
You don't need the very last version.
Thanks for pointing this out. I need to handle this case.
Agreed. I was not with the company when the RavenDB solution was developed, and wasn't the architect when the SQL Server migration happened. I migrated the site to Redis when I took over ownership of the site's architecture and it's definitely more appropriate for this use case. The data size is only a few GB. I'm not sure if the previous architects knew about in-memory data stores at the time or why they picked RavenDB as I wasn't with the company then, but it's interesting how these things happen.
I have gone through this same circle over and over, we even got to the point of doing repos and unit of work using Dapper because EF got so heavy weight in this architecture. EF already does repository pattern and unit of work. Use it directly in your controllers and everything gets much easier. Use AutoMapper to map to view models if you want to have light-weight DTOs. The performance delta of returning less data from your SQL backend is usually minimal as the latency or query performance is more impactful than the data throughput. Plus EF and SQL will cache a lot of the intermediate data in memory anyway. &amp;#x200B; One point that is valid is that coupling directly to EF makes your controllers harder to unit test. My thinking there is that your business logic that occurs in separate classes should be unit tested, but a controller should be tested at the integration level. You can just use a brand new EF database using the in-memory data store for each test, instead of pointing at a SQL database, and you can still have reproducibility and fast test execution in that regard. Do you really need to mock or test EF itself?
Great answer. This is a huge problem in programming - there are 1,000,000 ways to do something and everyone thinks their way is the best. But really my way is the best ;).
Sorry, but I don't understand your annoyance. No-one pushes you to buy it. It is just pre-order to support my work on it. If you don't want it, just don't buy it now and wait for the final product...
Glad it was helpful. :) Ya I haven't really found a comment platform I like and I figure folks can just tweet me about it or comment in the places it's shared. Someday maybe...
There are loads of repository examples out there. I just did my first hello world level repository with dapper: https://codereview.stackexchange.com/questions/223204/do-these-bll-dal-comply-with-the-dependency-inversion-principle-and-is-this-vali
You're correct on your thoughts. It is grabbing reviews that do not have a ServiceTypeRefId, ordering them then skipping the first 100. As to why, none of us can answer that one
"You" pushed me to buy the book. It's in your post and on the website. I'm telling people that, as it's 1% complete that they should not invest. Second, the questions you posed are bad. They don't make me feel you understand the topic you're hoping to write a book about. You also said the current price would go up once it was released. This works for early access, but here you're early early early early access. Actually as there's no product, it's "no access". I wish you the best, I hope the book works out, but currently this is a bad investment.
Thanks. Yeah I tried finding a reason. I built the return set a slightly different way that is hopefully a bit more readable for the next guy.
Not sure if this is helpful, but if you use [Codecov](https://codecov.io), you can exclude directories and files in your coverage reports.
Just cut the crap. It is incredibly easy to go overboard with abstractions, especially in application code which handles business logic. Wrapping a custom repository around an EF context, which is practically a repository already, is a good example. Which doesn‚Äôt mean that you should do everything in the controller, though.
So are all these objects proper win32 objects or are you drawing on the window using something like directx?
Remember that first and foremost, abstractions and architectural patterns are supposed to help make life easier for you. If they're not helping, you have no obligation to use them. It takes quite a bit of complexity before there's any payoff to splitting the controller and DAL, and you still have the option to retrofit it at a later date as long as you keep it in the back of your mind that you might want to do that and don't shoot yourself in the foot.
That is amazing, your portfolio looks better than mine and I have been working for 5 years. Amazing job, you have a bright future ahead of you in the industry.
interesting, thanks!
lolnope, not yet at least
I'm not too experienced with EF's inheritance support but in this case I wouldn't go for the tph approach. This does not introduce additional joins and also the discriminator column makes the decision which type to materialize a very concrete step. Looking at your description you link to EF5 descriptions for tph, tpt and tpc. But I think you are actually using EF core. There are a lot of major difference between those two and chances are that efcore solves the inheritance support very different. Read this article: https://www.learnentityframeworkcore.com/inheritance/table-per-hierarchy This states that only tph is supported. This I believe will solve your issue
Funny the stigma that Winforms has, too bad Microsoft never ported the Forms .net runtime to more platforms.
I really want to get started with Blazor. Will give it a try this weekend.
I just tried this out... I really like the idea for the auth feature ; but for some reason I keep getting a restsharp exception (invalid scope) . My company uses standard oath 2.0 using identity server 3; so it should be working . I tried to see what‚Äôs being sent across the wire , but for some reason the request does not get sent when I open fiddler (admittedly I didn‚Äôt look too far into it ).
Can you join the DotNetHelpWorkspace slack channel? I believe it's open registration, if not DM your email address and I'll send you an invite. Hit me up there (same username} and we'll be able to figure it out quicker.
Dude you are talented as *hell*. Have you tried looking into Gamemaker Studio? I think you‚Äôd really like it.
Hmm sounds like a bug. Maybe make a GitHub issue? https://github.com/jenius-apps/nightingale-rest-api-client/issues
My answer to that, do the bare minimum needed to get the feature working correctly. If there are three ways to solve a problem and none are obviously better than the others, do the one that requires the least amount of work.
Entity framework can be used as a repository layer in DDD. It‚Äôs database agnostic and all of the logic that accesses your database is hidden from you. In c# the repository layer is the project that handles the communication between your application and the database or file system. It‚Äôs essentially a facade that wraps all of your data access.
That raises two red flags for me. 1) You are looking at code coverage as a total percentage. Code coverage should be treated as a suggestion. It alerts you to areas that could use more tests. Once you start chasing a total percentage you are no longer using the tool correctly. 2) You aren't testing your database. Code is code, if you wrote it you should test it. Even if, OMG it touches the database.
&gt;I just tried this out... I really like the idea for the auth feature ; but for some reason I keep getting a restsharp exception (invalid scope) . My company uses standard oath 2.0 using identity server 3; so it should be working . &gt; &gt;I tried to see what‚Äôs being sent across the wire , but for some reason the request does not get sent when I open fiddler (admittedly I didn‚Äôt look too far into it ). Done: [https://github.com/jenius-apps/nightingale-rest-api-client/issues/9](https://github.com/jenius-apps/nightingale-rest-api-client/issues/9)
Since I work on teams with members having different skill focuses I tend to have multiple solutions. Usually one for the front end, one for the back end and then one for the whole solution which is usually only used by myself and a couple of the leads for review and for some end-to-end testing. For the client side developers I have a dev server that just takes CI builds from develop usually with every commit. The backend folks usually just use unit and integration tests. Everything is always available to everyone on the team though most people like to keep their daily life simple and will take the solution file focused on their expertise area.
I haven't done any SPA work in a while, but I think its best to keep them at least a little isolated. Usually that's one solution with two projects - the JS front-end and the WebAPI backend, but I guess you could do two solutions, like you described. I'd lean towards keeping them in one solution, but like I said, I haven't done any SPA work in a few years, so current best practice may vary from my limited experience. On a side note, I feel like I should also mention [Blazor](https://dotnet.microsoft.com/apps/aspnet/web-apps/client), where you can do a SPA with C# on the front end. With that, it would make sense to keep it all in one solution, so the front end project can share the model classes with the backend. If you like SPA apps and C#, it's worth checking out.
This is very cool. Thanks for sharing!
So for an SPA, It depends on what‚Äôs serving up the ui, so like if you have dotnet scaffold it, then I‚Äôd leave it in one solution, since dotnet is the host. If you‚Äôre doing something like angular cli, then def separate. Also, always different projects in the solution, like if dotnet is doing the ang project, it is only doing it, and there would be a separate project for the web api, business logic, data access, etc.
Many times, along with a dozen enterprise teams. Front and back ends get their own projects within the same solution.
No. Separate projects. Your api should be decoupled. This makes it easy to add additional client apps in the future.
That's what I think too. But yeah, these are the templates offered by the dotnet cli.
The SPA templates are horribly outdated. Don‚Äôt use them. Use the framework specific cli‚Äôs.
You can have separate projects within a single solution.
Yea, don‚Äôt do that. They should be in completely different folders. You should have a React/angular/Vue cli project in one folder and the .net core api project/solution in another. Also, the client side and server side should also be deployed to different servers.
Backend in one solution, front end in a different solution, but all in one repository.
.... Every project in a solution is in its own folder. Stop trying to answer questions on tools that you've never used.
Is that so, eh? Must be pretty awkward when you‚Äôre trying to host your .net core app on docker and you come across one of my articles to guide you through the process...
Looks like a very clear message to me. You don‚Äôt have the right version of .NET Core installed. Is looking for version 2.2.5, but the highest version you have installed is 2.2.1.
check out the eShopOnContainers example.
Opencover is also really well and easy to use. You can exclude not your dll from report by filters. Check this out: https://github.com/OpenCover/opencover
Interesting, I'm gonna have a play with this later. Thanks!
This sounds interesting, but I'm not sure what would be the practical application.
[Lucene.NET](https://Lucene.NET) has mostly caught up with the main Lucene project but RavenDB uses its own version with integration into their storage layer. The actual data is stored differently in that layer though and doesn't depend on Lucene which is used for indexing only. I'm not sure what you mean by indexes not over the network?
Document stores are all about free-form JSON as documents inside a collection, and you can get the exact same thing with a JSONB column in a table with Postgres. The querying syntax is more verbose but the Javascript-style queries for MongoDB are also unwieldy when they start to get more complicated. MongoDB is easier to scale horizontally (although still much harder than other systems) but if you don't absolutely need that then Postgres gives you solid transaction support, the full power of SQL and relational joins, and much better performance. See this: [https://twitter.com/Joab\_Jackson/status/1143940847748177920](https://twitter.com/Joab_Jackson/status/1143940847748177920) &gt;v4 @MongoDB supports (multi-doc) transactions for the 1st time but, leveling off at 14 threads, can‚Äôt compete with #Postgres, a traditional #RDMS, according to an @ongresinc independently conducted benchmark commissioned by @EnterpriseDB ‚Äî @ahachete #PostgresVision #noSQL
You sound insufferable
Thank you. Duh. I got confused between work where I am running the latest Core and home where I am not. Whoops.
Depends on how tightly coupled they are and how service oriented the backend is. If your web API is tightly tied to your front end, not much reason to separate them.
There are apis available in netcore that are not in standard and you might be able to use them for performance improvements but without profiling I wouldn't bother specifically targeting anything more than netstandard and 46x.
Repos are split per release schedule. If your front and and back ends are tightly coupled and working off the same backlog, developing features in tandem, then it's one repo, one backlog, one pipeline. If you're doing microservices where pieces of your backend can deploy independently, then you do multiple repos.
Just throwing my 2 cents here: I have separate projects for backend and client with both using VS 2019.
API in a VS solution and the client side in VSCode. VS has traditionally been garbage at handling the client side files, plus if it's not a part of your csproj then you can build the client piece and API concurrently in your CI pipeline
You're full of shit. The last official stable was 2012. It doesn't have numeric comparison support nor Chinese language support in that incarnation. Java Lucene is fucking miles ahead. &gt; I'm not sure what you mean by indexes not over the network? i.e. its not calling Java lucene over the network, it uses Lucene.NET to avoid the latency of that extra network call.
you're linking me a marketing piece authored by a Postgres reseller. Wtf?
Yes! Premature optimization is certainly a problem in software development. Just like the article says, a recommedation is to actually start with simple, yet somewhat flexible design that's easy to update when the requirements indicates that some abstraction is benefitial. I was reading in twitter something along the lines of "Abusing DRY (Don't Repeat Yourself) principle can have a detrimental effect on your software, as the more abstract the code is, the more difficult can be to update it since it has to cover so many use cases", and I believe that's on point.
Chill man I just want to exclude the migrations folder, don't make you're own assumptions
I constantly struggle with this. I get stuck planning out the right interfaces with imaginary use cases, obsessively moving shared functionality into static classes. Then, when I get down to the actual brick and mortar coding, it usually makes sense to just copy paste the logic into, lets say two different controllers, finish everything up, make sure its working, and then if the logic in both places is still the same abstract it then. I think part of the reason I do this is that my day job involves a lot of legacy code where no one gave a shit about the architecture(or the concepts just weren't as prevalent as they are today), but management wants fixes done fast so I end up not really being able to clean it up, I just get it working. So in my side projects I try to be the Frank Lloyd Wright of software architecture and it slows me down so very much.
I used to feel like this but at some point (after about 15 years of professional software development) I found some core principles that guided my approach to solution architecture that were based on experience and not dogma. One example of these is not leaking 3rd party dependencies throughout my projects. I abstract and adapt to avoid this. It takes me negligible extra time, reduces version conflicts and circular dependencies, is more self-documenting (my classes only declare dependencies on what they actually use), makes for simpler project dependency diagrams that are easier to reason about, and when for example you change cloud providers and your database layer, key management, and blob storage implementations change then you only have to update one adapter project (per cloud service), not up to 60. (We are changing cloud provider currently.)
Are you me? I‚Äôve started to make my own guidelines on ‚Äúwhen to abstract‚Äù. One key thing is interfaces and when, I‚Äôve started to only create and use interfaces for my classes when there are at **least** two different implementations. I‚Äôve also started to favor composition over inheritance and that‚Äôs helped a bit too.
yeah probably. Hopefully they can fix it soon
Relevant User Name.
You should really not be using static anymore. I mean, never say never. But static has gone the way of the dodo bird. You can't unit test code that rely's on static classes. Obviously there is always a correct and needful time for static but really it should be avoided unless you find that magic combination.
I use Swashbuckle and it is great. My only issue with it is a feature that seems to be missing. The models. Would be awesome if the end user could click a button in the UI to download a generated POCO/POJO/etc.
You mean vs like a singleton pattern?
You need to plan to be flexible though. If you can't refactor later you can't improve the initial simple architecture. I've worked on projects where I tried to improve things as I went along, but in the end I reverted those changes. The issue was there was no testing. A week of manual tests by a test engineer that still didn't catch errors wasn't worth it. Automated testing gives you the confidence to go back and improve things.
The current release of your library is already supporting .net 4.6.1. The question then is - are you trying to make modifications/enhancements and maintain backwards compatibility, or can you just let users use the old version and update the library to .net standard? &amp;#x200B; Now if your library has a ton of users, maybe it's worth keeping at 4.6.1 for new releases, but otherwise it's not the end of the world to just go for .net standard. migrating from 4 to 4.5 drops support for win xp, and going to 4.6.1 drops support for Vista, but from 4.6.1 to 4.7.2 the OS level compatibility is the same. 4.7.1+ supports .net standard. So there's not really a big reason that someone with a 4.6.1 application couldn't migrate to 4.7.1 or newer and leverage a .net standard library.
Take this for example: foo(string value){ var value2 = StaticClass.GetMyWorld(value); var value3 = "hello world" + value2; return value3; } So if you try to Unit Test the foo() method there is no way to mock the StaticClass. This any unit tests that tests foo() must also tests StaticClass.GetMyWorld(). Your unit test is no longer isolated to code under tests or aka the unit of work. Now if instead you use Inversion of Control or as it's more widely know, dependency injection. You can now mock the GetMyWorld method to return a known value and it gets isolated.
Running PHP on the .NET runtime opens PHP up to a lot of great libraries and tooling. One of their examples is hosting WordPress from inside an ASP.NET Core application. It's pretty cool stuff. I don't think anyone would start writing a new PHP app today and target .NET, but it's a great idea for extensibility of the existing PHP apps like WP, Magento, etc.
Ugh, this hits close to home. I just spent two days trying to figure out how I could extend an already generic "connection handling" library that I wrote a while back (for TCP and basic HTTP calls) to include a generic proxy for older SOAP services, all while relying solely upon built-in .NET serializers and avoiding building any hard-coded strings for the envelope. It was just to support one new specific call in one application to an old service that will probably be retired in the next two years. I finally realized what a spiral of insanity I was in. Just add the fucking service reference and move on. I'm still not looking forward to explaining the amount of time I wasted in scrum on Monday.
It's a test conducted by an indepedent company and published on a vendor's blog. But sure, sounds like you aren't actually open to any feedback here. Good luck with MongoDB.
Marten actually has great LINQ support now, have you seen this? [http://jasperfx.github.io/marten/documentation/documents/querying/linq/](http://jasperfx.github.io/marten/documentation/documents/querying/linq/) It's not an ORM because it's not mapping to relational tables, it's storing the object as-is, which is the stated purpose of the library as a document-store. If the subject wasn't relevant then I'm not sure why you linked it, but what you asked for is that data in the object to not be stored in the JSON document but instead be stored as relational columns. It's logical for that functionality (regardless of how minor) to be rejected, especially when there's already an option to duplicate some properties into relational columns. Have you seen the Value Conversion option in EF Core? It's very easy to get what you need with a few shallow JSON properties and even querying on JSONB columns now, and still use LINQ.
&gt; Was there some specific question you had? No, I see you eat McDonald's pizza then. &gt; EnterpriseDB commissioned the study that is discussed in this press release.
Right, with any pure function that shouldn't need to be mocked because it should have the same result every time with the same inputs.
3 things I find very useful when trying to explain to people on how to architect their changes. 1.Yagni. You ain't gonna need it. Why spend too much time thinking about all the ways what your are building could be used. Make sure what it does what you actually need it to do. Let's build that first. 2. Make it work, make it right, make it better. First build a solution that does everything you need it to do. Then clean that solution up with better design and architecture pattern. Keeping in mind Yagni. 3. Plan on throwing it away. This ties in with the make it better. the second time you look at a solution the better understanding you will have on how to build it. You probably know how to improve it right after you build it. Understand that refactoring is a thing that you should do. The second time you will know where you can apply the abstractions you need and get the best code to complete the job.
If you're trying to say you cannot isolate the logic, you're correct. It's still very much testable though.
You: I want to do X. Me: In my experience X is not a good thing to do. Here is why. You: I want to do X. My advice comes with a full money back guarantee, so no need to get upset if you don't like it. But do try to understand why behind it before you dismiss it.
Yea, conducted by an independent company with [public results and source code](https://gitlab.com/ongresinc/benchplatform), and backed up by [several comparisons over the years](https://www.google.com/search?q=postgresql+vs+mongodb). Anyway, doesn't seem like you're interested in an actual discussion. Use whatever works.
you've checked out the source code and verified the tests are fair and broad? Or did you just read a marketing piece and go: &gt; oh well that's probably correct You can make statistics bend to any narrative the same way that every product vendor has a special selection of tests that prove their product is the best. Anyway, doesn't seem like you're interested in an actual discussion so I'll leave it there.
Currently my only motivation is to ensure my library is accessible to my users going forwards - failing to provide an option for .NET Core users will cause issues in the future as more people default to targeting .NET Core as opposed to .NET Framework. My project is actually a binary C# library/PowerShell module, so there is an advantage in supporting .NET Framework versions you know are baked into the operating system (e.g. .NET Framework 4.5.2 guarantees anyone with Windows 7 can use my library without having to worry about "updates"), however the key question for me is whether there are any weird scenarios where it can be *more advantageous* to have a "more compatible" assembly to use for normal .NET development, as opposed to the lowest common denominator of an older .NET Framework version and an older .NET Standard version
https://www.jetbrains.com/rider/compare/rider-vs-visual-studio/
And you are 17? You are on a road to big succes!
Looks cool. I cant wait for this to be ready.
Any VS code comparisons?
Considering how one of Reddit's three posting methods involves posting a direct link, why do some people make a text post with nothing but a link embedded in it? Honestly curious. Reminds me of incidents from /r/talesfromtechsupport, where people physically print out web pages or images just to scan them into PDFs.
I don't know if it's still the case, but it used to be that text posts don't generate karma.
**FUCK OFF WITH YOUR STOLEN CONTENT!**
other answers here are good, but to add- you should take into account the build/CI/CD system you are using or plan to use. a monolithic repo (single repo) is much more difficult to resolve what needs to be built. what needs to be deployed, packaged, published, etc. imagine changing a file that's part of a single service, that then triggers a long build of the entire monolithic repo, which then triggers a deployment to DEV, etc. this could be fine, but could be a long process, with pointless builds of things not needing building, releasing things not needing releasing, and so on. with services/apps in seperate repos, a single change in a repo will trigger that repo's build, and release, etc. the problem with this approach is usually shared internal dependencies. you'll have to build library A and release it to your package manager and then update everything that depends on library A. the nice thing about this is you aren't forced to consume every update...the latest update *could* have a bug.. having your internal dependencies pushed to a package manager/feed lets each service/app have their own versions of said dependencies. the microservice architecture tends to work better with repo-per-service/app, since the whole idea is to decouple the services so they have their own release schedules and so forth.
In this case it's probably to conceal their [spamming](https://old.reddit.com/r/reactnative/comments/bmwjxd/new_rule_to_prevent_spam/). Prevents users and mods from seeing the domain right away, easily checking where else the submission/domain has been posted etc., might also get past some simple automod rules.
I thought that was a per-group setting, but I can can't find the option now.
morioh.com is a known spamming platform that steals other peoples content and presents it as their own, to get revenue from ads and merchandise. They have many sockpuppet accounts to frequently post their links in various sub-reddits.
Gonna try it out tomorrow!
Isn't Uno slow as hell? I tried to use their sandbox but unsuccessfuly. It's still quite not popular platform despite offering much in terms of crossplatform stuff.
I'd love to use MetaProject, but without it being open source, I can't be sure it's not sending info or even source code for my confidential work projects, and I can't risk getting fired. Is the source available somewhere that I'm missing?
You posted about confusion over the "best" document-store databases and someone suggested Postgres. I described some reasons why along with links. Performance is just one aspect overall and there's plenty of other independent research out there as I said. What's with the attitude? Why so defensive and dismissive over a single benchmark result? No that's not a discussion, but you already know that.
I tried installing it but I am receiving an error saying the package did not load correctly when opening VS 2017. &amp;#x200B; Any ideas on what I can do with this exception? &amp;#x200B; &gt;Exception details: &gt; &gt;System.IO.FileNotFoundException: The system cannot find the file specified. (Exception from HRESULT: 0x80070002) &gt; &gt; at Microsoft.VisualStudio.Shell.Interop.IVsShell5.LoadPackageWithContext(Guid&amp; packageGuid, Int32 reason, Guid&amp; context) &gt; &gt; at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.GetPackage() &gt; &gt; at Microsoft.VisualStudio.Platform.WindowManagement.WindowFrame.ConstructContent()
Could you use ilspy or equivalent?
I understand your concern. My answer will be next: 1. I am Ukrainian, I live in Kiev, and feel similar feelings to Russians as you. Even more than you; 2. I spent 2 years to make this product and will improve it further; 3. This product is already the best in compare with all competitors in the World, and I know it; 4. Functionality of MetaProject will be significantly improved, and only after that existing part will be opened and available by MIT license; 5. Additional functionality will be available by subscription; 6. My goal is to make own company; 7. My goal is to make the best tool in compare with all existing alternatives; 8. It is a reason why any sources accept my is not interesting for me; 9. This a reason why I will not do this project as Open Source.
&gt; What's with the attitude? Downvotes I got associated with this comment chain would be part of that.
First time I see such complain about installation of this extension. Could you write steps to reproduce it?
Probably, though tbh it‚Äôs not worth the hassle just for a colored output window.
Thanks for your detailed answer. I won‚Äôt be using this but best of luck to you.
Install extension from marketplace. Open visual studio. I am repairing my installation of visual studio right now &amp; I will try extension again.
I understand you. Thanks for your wishes.
I had many projects in my life implemented for different customers, but now I can possibility to work on implementation of my ideas. It is incredibly important for me.
Colored output is small part of existing functionality of MetaProject.
Microsoft should just merge work with them. It seems like they are positioning themselves for that possibility.
Tried repairing my visual studio installation &amp; re-install the extension. Same error.
7 and 8 are contradictory. You can't expect the best if you're closed to others' inputs. Good luck with the project.
Does this error appears in installation process or when Visual Studio is running?
Installation is successful, this only appears when visual studio is opened after installation.
Could you show screenshot of this situation?
Will see it. Thanks for wishes.
Yes this is the screenshot [https://imgur.com/a/jTdkfPw](https://imgur.com/a/jTdkfPw) &amp;#x200B; and these are the errors from the referenced ActivityLog xml file &amp;#x200B; &lt;record&gt;124&lt;/record&gt; &lt;time&gt;2019/07/07 23:15:17.272&lt;/time&gt; &lt;type&gt;Error&lt;/type&gt; &lt;source&gt;VisualStudio&lt;/source&gt; &lt;description&gt;SetSite failed for package \[MetaProject\]Source: \&amp;apos;metaproject.plugin.vs.1\&amp;apos; Description: Could not load file or assembly \&amp;apos;Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\&amp;apos; or one of its dependencies. The system cannot find the file specified.\&amp;#x000D;\&amp;#x000A;System.IO.FileNotFoundException: Could not load file or assembly \&amp;apos;Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\&amp;apos; or one of its dependencies. The system cannot find the file specified.\&amp;#x000D;\&amp;#x000A;File name: \&amp;apos;Microsoft.VisualStudio.Threading, Version=15.8.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\&amp;apos;\&amp;#x000D;\&amp;#x000A; at O7C1B6D4B2A7.O7C1B69B72A7.MetaProject.InitializeAsync(CancellationToken O7C1B644F2A7, IProgress\`1 O7C1B09102A7)\&amp;#x000D;\&amp;#x000A; at Microsoft.VisualStudio.Shell.AsyncPackage.\&amp;lt;\&amp;gt;c\_\_DisplayClass17\_0.\&amp;lt;\&amp;lt;Microsoft-VisualStudio-Shell-Interop-IAsyncLoadablePackageInitialize-Initialize\&amp;gt;b\_\_1\&amp;gt;d.MoveNext()\&amp;#x000D;\&amp;#x000A;--- End of stack trace from previous location where exception was thrown ---\&amp;#x000D;\&amp;#x000A; at Microsoft.VisualStudio.Services.VsTask.RethrowException(AggregateException e)\&amp;#x000D;\&amp;#x000A; at Microsoft.VisualStudio.Services.VsTask.InternalGetResult(Boolean ignoreUIThreadCheck)\&amp;#x000D;\&amp;#x000A; at Microsoft.VisualStudio.Services.VsTask.GetResult()\&amp;#x000D;\&amp;#x000A;\&amp;#x000D;\&amp;#x000A;WRN: Assembly binding logging is turned OFF.\&amp;#x000D;\&amp;#x000A;To enable assembly bind failure logging, set the registry value \[HKLM\\Software\\Microsoft\\Fusion!EnableLog\] (DWORD) to 1.\&amp;#x000D;\&amp;#x000A;Note: There is some performance penalty associated with assembly bind failure logging.\&amp;#x000D;\&amp;#x000A;To turn this feature off, remove the registry value \[HKLM\\Software\\Microsoft\\Fusion!EnableLog\].\&amp;#x000D;\&amp;#x000A;&lt;/description&gt; &lt;guid&gt;{4E0DD840-F178-4CCE-8162-118ED8701E98}&lt;/guid&gt; &lt;hr&gt;80070002&lt;/hr&gt; &lt;errorinfo&gt;&lt;/errorinfo&gt; &lt;/entry&gt; &lt;entry&gt; &lt;record&gt;125&lt;/record&gt; &lt;time&gt;2019/07/07 23:15:17.309&lt;/time&gt; &lt;type&gt;Error&lt;/type&gt; &lt;source&gt;VisualStudio&lt;/source&gt; &lt;description&gt;End package load \[MetaProject\]&lt;/description&gt; &lt;guid&gt;{4E0DD840-F178-4CCE-8162-118ED8701E98}&lt;/guid&gt; &lt;hr&gt;80070002&lt;/hr&gt; &lt;errorinfo&gt;&lt;/errorinfo&gt;
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/LdjT3Ck.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme)
Seems I found [solution](https://developercommunity.visualstudio.com/content/problem/47358/an-exception-was-encountered-while-constructing-th.html). Try to update Visual Studio as was written in article please .
Thanks a lot for the detailed information. I will think how to resolve this problem.
Looks like a missing dll in the vsix package. He could try and add it in Visual Studio's Extension folder for MegaProject (under appdata/local/visualstudio/extensions, etc.) There should be a bunch of other dlls in there.
**Microsoft.VisualStudio.Shell.Interop.IVsShell5.LoadPackageWithContext**, which is mentioned in error log, is going in assemblies **Microsoft.VisualStudio.Shell.15.0.dll, Microsoft.VisualStudio.Shell.Interop.11.0.dll, Microsoft.VisualStudio.Shell.14.0.dll** It shouldn't be a part of VSIX package, because it is a part of installed Visual Studio. In any case thanks for advice. I will search solution, because almost all complains to MetaProject product is connected with installer. And the biggest problem with solving of this problem, that I can't reproduce it on my computer.
Your post has been removed. Self promotion posts are not allowed.
&gt; Even more than you Should I, as a Russian, be worried in this case?
Or... just use the "Error List" window, in which those errors will appear.
&gt; Open Source don't have any person who is responsible for it behavior. This is not true at all.
MetaProject works for all the same. Even for Russians.
I have updated the project in attempt to solve this problem. It is already on [Visual Studio Marketplace](https://marketplace.visualstudio.com/items?itemName=ViacheslavLozinskyi.MetaProject). There were used smaller versions of Visual Studio components. As result were added support of Visual Studio 2015. Verify it please and let me know about results. It is very important for me because I fixed it in blind mode... Thanks in advance.
.Net Core as a web API. React in the front, is my weapon of choice, but in general .Net community prefers Angular.
It is piece of MIT license "THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND"
And this can be very much the case with non-open source as well. Also, even with the MIT license it doesn't mean that non-one is responsible for the behavior, depending on what you mean with the term "responsible". The MIT protects against legal responsibility.
How did you settle on react as your favourite?
The best way to start with React [https://github.com/facebook/create-react-app](https://github.com/facebook/create-react-app)
I am telling about legal responsibility. It's absent for Open Source projects.
It **can** be absent for Open Source projects, it doesn't have to be. And in most non-open source projects it is absent as well. This is absolutely nothing that is tied to Open Source. Heck, even in your own extension you mostly dismiss any legal liability as well: &gt; the Software is being delivered to the Licensee "AS IS" and the Licensor makes no warranty as to its use or performance.
React has excellent TypeScript support, unlike Angular. That's a huge argument for me.
Thanks for your opinion. I don't criticize Open Source, and don't have any desire to do it. I just declared that will not follow this approach. Hope that will end our discussion.
Thanks, I‚Äôve already made a few small react apps, I‚Äôm interested in if Angular/Vue work better with .net and why etc
I‚Äôve got fairly decent vanilla JS, is that enough or is Typescript a must have when starting these days?
**Personally** I would always choose TypeScript over JavaScript. I'm just fond of statically checked types. It takes so much effort from my shoulders when a computer program is checking common mistakes for me. Having type information is also documentation. For example I accidentally mistyped a property name. The TypeScript compiler will automatically tell me, but in regular JavaScript I would have to debug and figure out why I get an `undefined` value when I should have something else. TypeScript 2.0 also introduced `null` and `undefined` as types with the `strictNullChecks` feature. With it it can be indicated as part of the type-system if a value can be `undefined`. It will also force you to handle the `undefined` case if your value may be `undefined`, but you want to pass it to a method accepting a real value.
Since we are talking about DBs - I am watching these two DBs - https://www.foundationdb.org/ - https://dgraph.io/ They look very interesting although it's too early to see solid .NET support.
Vue
You make a good case, debugging JS compared to C# is not something I‚Äôm enjoying at all.. I‚Äôll add that to the ever growing pile of things to pick up ha!
How do you implement it? Do you have a stand alone client-side and call a Web Api or combine in the same VS project?
It's possible to go down either approach, neither is right or wrong. I have my own modified project template with plugins I like that I use that has both in the same project here: [https://github.com/karam94/aspnetcore-vue](https://github.com/karam94/aspnetcore-vue) &amp;#x200B; If in the future I need to extract the client to live separately, then that's pretty straight forward to do, too.
I agree, this does seem possible.
Awesome, thanks
I prefer Angular because I know it better than React :D Angular has also defaulted configured TypeScript which is the best choice for a developer who started witch backend and now who want to try some front-end stuff.
Can you explain how angular doesn‚Äôt have excellent support for typescript? Assuming we‚Äôre talking about angular 2+, hasn‚Äôt it been typescript since the beginning?
Previous comment of mine: https://www.reddit.com/r/programming/comments/c4hpeg/why_angular_made_me_quit_web_dev/es0k0el/
Angular
The tool you know is always the best ha
I'm rela ively new to .net and I'm certainly still learning but it is my understanding that if any front end framework 'works better' with your api you've probably done it wrong. The back end should be rather agnostic as to what calls it.
Every .Net project ive worked on allways use to have some frontend framework, in my opinion this is weird for one reason, its very common nowadays to have a simple web that needs over 2 gb of ram to run (same than AAA games or more sometikes) .. If you think this is okay go for angular and some other frameworks if not contin√∫e with js and jquey
You will do what I did and start a couple projects in other options then nope your way back when you look at all the added work for zero gain. The fun part of jQuery is most of it is supported by the browsers now with some usually simple changes. There's a site called you probably don't need jQuery.
&gt; Angular has also defaulted configured TypeScript Ironically Angular makes very poor use of TypeScript. The "default" configuration of TypeScript in Angular lacks a lot of type-safety features. https://www.reddit.com/r/programming/comments/c4hpeg/why_angular_made_me_quit_web_dev/es0k0el/
VueJS; You have the good sides of angular/react (double binding, real framework instead of just dom manipulation) while still being easy to implement; maintain and understand. On the long run I don't know if it's the good weapon, but to develop quickly or if you only have a few pages, it's perfect.
They're all fine and far superior to raw jQuery. Have a play and pick the one you hate least. We use Angular and Typescript. It's okay.
Tried all the big ones. I like vue atm. Very lightweight
Cool thanks, I‚Äôve not heard a bad word about Vue yet
Good luck :)
In context of .Net, Angular and React arent the greatest since they were made with Node JS in mind. .Net isnt built to handle all the stuff to automatically compile stuff on the fly on build (maybe there are addons I dont know about). I haven't tried Vue, i but I assume it has a similar problem. jQuery gets a bad wrap, but only when you start having to write hundreds of lines of it. If you need dozens to make your site work, it's good enough. More, and maintenance becomes an issue and performance can start to be an issue. But if you are looking to the future, Blazer should replace all of these JS frameworks in the next year or two, making them obsolete.
Vue
Thanks, yeah the latest project has a crazy amount of jQuery, part of what‚Äôs got me thinking about a framework... Blazor looks great, but unfortunately I need IE11 compatibility (corporate environment)
React for SPAs and vanilla JS with Babel transpilation for standard web apps. If pieces of a standard web app are heavy, I'll use Vue sometimes. I still do prefer React over Vue for full SPAs, though.
"Having type information is also documentation." This line alone should sell most developers on using TypeScript.
This sounds like you're essentially reinventing GraphQL, I'd take a look at that before going any further. There are a few dotnet implementations around.
But doesn't GraphQL require strongly typed classes to work off? My main goal here is supporting any class (via json) at runtime.
https://www.nuget.org/packages/VueCliMiddleware
I liked react from a dotnet perspective because it feels, at least to me like it follows the same kind of principles, especially with hooks. React encourages you to break your design up into composable components. It encourages pulling reusable components out. It encourages testable components and it keeps logic fairly straightforward. When I've tried this with other frameworks it feels like I'm fighting the style they want me to use.
What *AAA Games* are you playing with only 2 GBs of RAM?! Minimum recommended for The Witcher 3 is 6 GB. I agree the build size from some of these frameworks is ridiculous, but front end clients aren‚Äôt downloading/using every file deployed to the server; especially with caching. Chrome on the other hand will use the rest of that 2 GB and ask for more.
First of all, is not about the triple a game, is about simple frontend sizing 2gb of ram or more. and at the end the client blames everyone because he runs the site on a shitty computer and nothing works as spected, then you will redo the entire front just because new frontend tech are just fancy but slow as hell.
Thanks, I'll check this out!
I use VUE with it's CLI and .NET MVC as a framework. Also, I have noticed that a lot of people still does multipage applications so there is also this solution Medium: [https://medium.com/@danijelhdev/multi-page-net-core-with-vue-js-typescript-vuex-vue-router-bulma-sass-and-webpack-4-efc7de83fea4](https://medium.com/@danijelhdev/multi-page-net-core-with-vue-js-typescript-vuex-vue-router-bulma-sass-and-webpack-4-efc7de83fea4) GitHub: [https://github.com/danijelh/aspnetcore-vue-typescript-template](https://github.com/danijelh/aspnetcore-vue-typescript-template)
&gt;https://medium.com/@danijelhdev/multi-page-net-core-with-vue-js-typescript-vuex-vue-router-bulma-sass-and-webpack-4-efc7de83fea4
Is not about aaa games, the clients use to run sites on shit computes, and then the tipical it works on my local 64gb ram computer and i9 core (typical developer machine) ... And it takes 1 second while on a shitty pc with 2gb of ram it runs slow as hell, dont you agree?
React. Developed separately in VS Code and then deployed to Azure. It's simple to get started, has a great collection of libraries/frameworks/components, has typescript support if you're into that and has some decent error messaging.
Have done React or Vue. Client is always a static standalone with .NET Core being purely an API. Think of .NET Core and your C# code as the server side part of a Node.js project and you‚Äôll find your life is less painful. Microsoft also seems to be reinforcing this behaviour as I‚Äôve noticed a lot of changes since my old ASP.Net MVC days to what .NET Core is now.
I use React with Typescript. Previously I used Angular when it was version 4 but I didn't like how it was ridiculously opinionated. Angular's buy-in 100% all or nothing approach wasn't for me.
I don't really understand what you try to achieve. Using a strongly typed object oriented language to dynamically create objects seems counter productive and dangerous. Having metadata in the headers of the request is a bit better, but then why not create strong objects immediately. Having metadata in the json object seems... well, if what you want is your users to create objects and send them to your backend without verification, that's probably the good direction but I would deem that a very very bad idea.
Using React with Apollo and GraphQL. So basicly my ASP.Net WebAPI has only 1 endpoint (in real there are 3, but IDC) and the rest is GraphQL :)
Angular. But it's completely separate. Angular is done in VSCode with angular-proxy.conf and all pure web api calls from .NET.
Unfortunately my answer to this question is "Yes". We have Angular guys, React guys, and Vue guys. We even have a third-party app (in PoC stage) in Blazor.
I'm pretty sure Hylaine isn't named Frank.
Just one Get method and a Func as an optional parameter for filtering
Check Application Insights de Microsoft Azure
 As a note... I excluded pages that only had fixed typos and/or minor changes. Although important for the overall quality, there are no points in highlighting those.
Thanks for doing this.
Good work. I for one welcome this type of post.
&gt;a developer who started with backend and now who want to try some front-end stuff. &amp;#x200B; \*Cries in CSS\*
Thank you! Took a while to compile but if the community like it, I'll recompile them every month!
Thank YOU for reading it!
Nuxtjs (SSR Vue). It‚Äôs a home run, IMO.
This is how we are doing it. &amp;#x200B; Angular application is completely separate, using VS Code. We then use a proxy so that the Angular calls can hit the [ASP.NET](https://ASP.NET) Web API. For production, we do a build where it will build Angular, then move it over to 'wwwroot'.
The NuGet team has also reorganized its docs, please let us know what you think! https://docs.microsoft.com/en-us/nuget/what-is-nuget We have a huge matrix of content to cover (consume/create packages using nuget.exe, dotnet CLI, Visual Studio for packages.config/PackageReference), so please let us know if you have any suggestions on how to improve!
There is also SonarCube [https://www.sonarqube.org](https://www.sonarqube.org/) that you can use as a service and set up against your git. It does really detailed static analysis, finds bad patterns and other interesting stuff you'd otherwise miss.
Hey! If your doc is available on GitHub, I can include it for next month! Thoughts? PS : I assume you're a dev/writer/pm on the nuget team.
ctrl-f "ember"... :(
Sure! [https://github.com/NuGet/docs.microsoft.com-nuget/pull/1518](https://github.com/NuGet/docs.microsoft.com-nuget/pull/1518) &amp;#x200B; I'm a dev on the team, yes :)
 &gt; &gt;Using a strongly typed object oriented language to dynamically create objects seems counter productive and dangerous. &gt; How is this any more counter productiveor dangerous than doing it in a dynamic language? And why does .net have the DLR?
eShopOnContainers? It's big and complicated but you said you wanted enterprise, and the SPA example is Angular https://github.com/dotnet-architecture/eShopOnContainers
It has been a long time since I used Angular but I seem to remember Typescript being pretty tightly integrated into Angular out of the box.
Big and complicated are the keywords I'm looking for! (as long as they go with enterprise and clean architecture :)). Do you recommend it?
Nice post! Out of curiosity, which other sites did/will you post this to?
I only posted this on /r/dotnet and /r/csharp. This is a Reddit Exclusive for now. Should I post this elsewhere?
or hosted version https://codacy.com
I prefer React and TypeScript. It's flexible, modular and everything (including templates) is typed and logical. I don't think you can get the full typing support with other frameworks (correct me if I'm wrong).
Many thanks for the update.
OK so if I'm understanding you right and you want a dynamic object, but one that will have some set fields (lets just say id), you can achieve that with an ExpandoObject. I'm not saying you should do that, you probably shouldn't, this won't be testable at all. But if you still want to you can do something along these lines: &amp;#x200B; [HttpPost] public IActionResult Post([FromBody] ExpandoObject content) { if(!((IDictionary&lt;String,object&gt;)content).ContainsKey("id")) return BadRequest(); return Ok(content); }
So tagging onto this, just a general question on how to integrate with an API. I have just dabbled in react/angular, but i think my next project is going to make heavy use of them. If you are using a .net API (or any rest API i guess), do you call it directly from javascript? What I have been doing is creating a .NET Core Web app which has (mvc) controller actions which return a JsonResult. I call the Web controller actions, and that will in turn call the API to get/post data. This was purely because I had more experience setting up HttpClients and security in .NET. Just wondering what is the norm? Is doing it this way overkill?
I‚Äôm open minded, what the score with Ember? What‚Äôs is good/built for?
Cool and thank you! I'm currently working with Blazor. There are times when the documentation isn't clear enough etc and so it would be great to know when this or that piece gets updated so I can go back and see if there's something important I missed. Maybe you could pop it on a blog somewhere :D Harder to find this on reddit. How should I know what time during a month you'll post? (even better.. if only I could subscribe to a page's update event :D when a page is updated, I get an email. Or perhaps only when a page update is marked as significant... I see the docs have feedback, edit and share.. why not subscribe? .. thinking out loud :)
I feel like you just punched a lot of fanboys in the gut...
Dunno, but seems like a wasted opportunity after all the effort you put into it! I was mostly just fishing for other tech sites to read üòõ
So... I could post it to \[my blog\]([https://blog.maximerouiller.com](https://blog.maximerouiller.com)) or to our [https://dev.to](https://dev.to) community or even to Medium (although Medium and the paid BS...) Good enough? :P
Well, yes. You're making two http calls, which is double the one you would make if you just called your own api directly. You're already doing all the hard work of serialising and deserialising json, so I'm not sure why you wouldn't just call the api directly, other than having to setup CORS.
Every sprint ends on the last day of the month. I'm planning to post close to the first of every month after I review the changes with the documentation team. It's pretty much a partnership. They do the heavy lifting, I'm shining a light on it. As for the page updates, I totally agree! Everything said in the comments will end up as feedback to the docs team or the appropriate team. This is not a marketing coup. Docs is critical. The team is doing an amazing amount of work... we want to get better. Can't do that without feedback and yours is great!
How about a tutorial on docfx. I would consider using it it for my internal company network.
Oh, that's an interesting idea! I'll push the idea internally and see what comes of it!
OK so, not a good way to reply to this kind of comment if your goal is to make people less concerned. Also, your code is obfuscated, but its not that obfuscated. You're at the very least collecting telemetry and sending it through the Google Analytics collect API.
Already doing that but with JObject. Works great. However, that wasn't my question. The question was more to do with if passing custom headers vs some additional properties in the json object on a Post was better to provide specific context around the passed in json object. From what I can tell online is using custom headers seems like a supported architecture.
We‚Äôre on F#/Fable now with React, which I feel like is the coolest thing I got to work with yet. Sharing code and most of the toolchain in backend/frontend is huge, I totally get the Node users in that regard :) There‚Äôs a nice project template called [SAFE-stack](https://safe-stack.github.io) if you want to try it.
1. You angry that my Intellectual Property is protected; 2. You don't read license and without any hesitation broke it; 3. You decided to write about it; 4. You are trying to steal sources via reverse engineering; 5. You angry that you are not successful in it; 6. You are trying to blame me in something wrong; 7. You still sinking that I spent 2 years of my life, made the best product in this category, spent money for implementation just for possibility to steal your "telemetry"? At the end. You can't implement nothing similar, and therefore you are trying to steal it. I have bad news for you. You will be not successful even in it.
I'm not angry about anything, and I'm not stealing anything. I don't want your code or your product. Your license says not to reverse engineer without "the Licensor's specific approval". The comment above suggested reverse engineering, to which you replied "good luck". I'd suggest you think about how you conduct yourself on message boards if you're worried about the reputation of your product.
Too much aggression from you side. Which reason?
In point!
Thanks, I‚Äôve been wanting to give GraphQL a look, EFCore power tools sounds useful as well!
Awesome reply, thank you, just the sort of thing I‚Äôm after
https://github.com/elbandit/PPPDDD
You actually gave permission when you said good luck. Either way your attitude isn't likely to attract customers, so it isn't helping you.
Sounds cool, but I can‚Äôt see me being able to sell F# to the rest of the team ha! I‚Äôll check it out for myself bough, thanks
Do you know what is license and what is written permission? And you are not customer, you are hacker. Do you think that I have to tolerate it?
That collective enforcing, that do some people here in direction to Open Source, give opposite result. I planned to open parts of this project in future. Now I decided that will not do it in any case. Who want to see similar project in Open Source, can do it. I will not participate in it.
I have a pretty dumb question here. Are there any books, tutorials, or e-books that include unit testing more than as an afterthought? I find myself in a bad habit of misunderstanding it and not knowing when or how to do it. So I'm hunting for somethign to go "ok, start a new project. Now let's add this first and then build the real method after" because \*every single book\* I own does not have this. It's just a simple chapter afterwards. I also want this book because I often share books with friends and when they are done I donate them to the local library and buy an e-book for myself. I'm doing .NET Core 2.2/3.0 C# Razor Pages -- but I figure anything that includes Unit Testing as part of the process instead of a final chapter would be fan-freakin'-tastic. I'd love you forever.
I'm not sure what they did but the current docs on https://docs.microsoft.com are currently broken with code not showing and/or missing.
So obviously, this isn't a Microsoft recommendation specifically but my own. "The Art of Unit Testing" is one of the best one I've read. It puts you in the mind of what to test and what not to test. It is pretty language agnostic from what I remember but I heard they made one for C#. Don't expect the C# 8.0 features in there and you'll be good. As for the other book, my assumption is that they want to focus on the subject they are talking about and not about Unit testing itself. Testing is a hot subject, (?), and can derail the conversation or turn off someone from the book just because they are not using "the right" test tool. ü§∑‚Äç‚ôÇÔ∏è
Which one?
Well, if you can, pass this on: I'm really happy to be working with C# and Blazor as well as VS. That would not happen if all the teams involved were not excellent at what they do.
For example this [here](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.2). This is what I see: https://imgur.com/pgr6UIO It might be some weird z-index thing with the highlighted area. Also, with JavaScript disabled I can see the text behind but it's not practical.
Oh yeah... Definitely an issue and I have no clue where it's coming from. Will bubble this up but I'm pretty sure we're aware of it.
codewars
The team is aware of this problem. Follow https://github.com/MicrosoftDocs/feedback/issues/1696 for updates on this.
I'm working on it... just gotta keep the behemoth alive for another couple of months!
Thank you.
Thanks for the link. Now I know where to report issues with the docs site.
Written permission it's your possible protection in court of law. "Good luck" it's nothing.
Yeah, I totally get it. I‚Äôve spent many long nights upgrading decade old tech. You‚Äôre just not likely to get a whole lot of help here. SO is usually your best bet.
For technical tests I've been given codility challenges a few times. These are great because they mark you not only on accuracy, but also on performance of your code. https://app.codility.com/programmers/ I've been given code katas to do on a few occasions during interviews. It's common to do these fairly regularly as practice. Try the checkout kata, keeping your code both SOLID and DRY. It'll likely take a few hours. Once you're happy with it, try it again, but with a different approach. http://codekata.com/
[https://leetcode.com/](https://leetcode.com/) is the most common interview prep site talked about on Blind for the big tech companies
Thanks much, I've actually heard of leetcode before, it must've slipped my mind
Thanks for the suggestions! I doubt I'll be a few hours long, but it seems like a good resource nonetheless
About reputation. At start, reputation of product is always equal of reputation of it author. When you fight with author, you fight with future of this product too. Think about it.
Dude, you're clearly a talented programmer. You've spent a lot of time on the internet. If you challenge a forum of programmers to disassemble your application, don't be upset or surprised if someone does. Especially in such a trivial way. Its not like I posted anything about your licensing or anything like that, just that yes, in fact, it does phone home with some info.
Which problem do you want to solve, and why it should be interesting for me?
I think the problem that people are trying to point out here is that for a plugin or application that analyzes source code, transparency is important, especially about whether their source code is being copied, or metrics or telemetry are being recorded without their knowledge or consent. That's why people are asking about the license, or whether you would be open to open sourcing it. You obviously understand this problem, because you are so concerned about your own product's codebase. I personally am not trying to solve any problem, or cause any problem. I just saw someone say "good luck" to reverse engineering something, that piqued my interest, so I took a crack at it. You know what one of the benefits of open sourcing your project would be? If I did find a problem, then I could submit a pull request, you could review it, and it could be solved transparently by the community.
I see, you want spend own time for analyzing of destructive actions of this extension. Ok, do it. Personally for you I permit to use any utilities which you want. Result of this investigation you have to publish here. Is it ok?
The query syntax hurts my head. Try something like: document .Descendants("ROW") .Elements("ENT") .Where(s =&gt; s.Value == "Purple") .ToArray(); //Maybe make this a list instead?
Yes, that actually is a really positive outcome of this discussion and I applaud you for it. I will analyze it further and publish it here, and I will send you a message when I'm done.
Ok, I wish you success. ;)
Hey thanks for the help! Unfortunately I get a Object reference not set to an instance of an object error at this line: .Where(b =&gt; b.Attribute("NAME").Value == "ROW")
Ah, my bad, my fault for a quick copy pasta. Your elements don't have attributes so simply try: document .Descendants("ROW") .Elements("ENT") .Where(s =&gt; s.Value == "Purple") .ToArray(); //Maybe make this a list instead?
No problem. That issue is now fixed! You can also reach that location via the Site feedback link on the bottom of the docs.microsoft.com site.
I updated visual studio &amp; extension now works.
I eventually updated visual studio &amp; the extension now works. I'm thinking maybe a problem with my VS installation.
Still getting the same type of error: System.Collections.Generic.List`1[System.Xml.Linq.XElement] I tried using .ToList() and also printing to console with Console.WriteLine(selectRow.ToString()); No luck.
Great, thanks for the information and for your help. Seems all problems with installer are solved.
I agree entirely -- but I'm looking for probably a trivial CRUD [asp.net](https://asp.net) core (or whatever, tbh) app and what would be considered both ideal unit testing and bonus points for other areas that are considered "best practices". I find it interesting one hasn't been written yet given how passionately it's talked about sometimes. It seems like some aspect of the web dev is either difficult or unique to test. &amp;#x200B; For instance -- for a \_simple\_ CRUD app -- it seems like any and all testing would be pointless. But for people who say "if you aren't unit testing, you're programming wrong" and for there not to be a gazillion books or something out there expanding on this but, instead, to have unit testing as a mere afterthought dedicated to one chapter, usually at the end, seems... strange.
Oh, is that what you're getting printed out? That isn't an error, its the string representation of the object.
Break it up into multiple fragments for debugging, like so: ``` var a = doc.Descendents(...); var b = a.Elements(...); var c = b.Where(x =&gt; { return someBoolean; }; var d = c.Select(x =&gt; { return someProjection; }); var e = d.ToList(); ``` Putting your lambdas in braces will let you put breakpoints within them, and splitting them up will let you see where things are going wrong. Not the coolest thing, but once you get it working, then you can clean it up. Also, phoneposting, so apologies if the formatting is jacked up!
Ok, that works! But it only returns "Purple" not all the siblings. I'm trying to get "right, High, Purple, Null, High". Sorry I wasn't clear about that!
OK, so, I deobfuscated the assembly, took a good look through it, ran it in a sandbox and watched every request going in and out. I can pretty confidently say that there is no code or environment specific information being transmitted whatsoever. The assembly contains a function to log a pageview style analytic request to Google Analytics, but it doesn't contain anything except a client ID, and an application ID. As someone who works in the security space and is pretty in tune with reverse engineering .NET applications, this iteration(I can't guarantee any previous or future versions) of this extension absolutely gets my stamp of approval. Viascheslav - if you would like me to write this up in a more formal blog post I would be happy to.
No worries about the formatting!
OK so I'm on a phone and this might not be perfect, but if you want all child elements of a node where one child element has the value "Purple", and you want to print their values I would try something like this: &amp;#x200B; document .Descendants("ROW") .Descendants() .Any(e =&gt; e.Value == "Purple") .ToList() .ForEach(e =&gt; Console.WriteLine(e.Value));
‚ÄúOld‚Äù school - Knockout.
the .ToList is getting an error bool does not contain a definition for ToList
Ah yeah, any will just give you whether or not a member of the collection matches the predicate. Just read a linq tutorial and select every member that matches your predicate, it's complicated at first but once you practice it will really click.
Thanks!
[Hackerrank](https://www.hackerrank.com) [Project Euler](https://www.projecteuler.net)
Thanks for your investigation. Thanks for your confirmation about that I always knew. In previous releases situation was the same, and in future releases will be the same, because I want to make best tool in the World. It is motivation issue. Some words about Google Analytics. It used for sending two kinds of information. 1. Was this extension used this day (sends one message once a day to google server); 2. Was it installed or updated successfully (sends when this event appears to google server). This information is important for me because it give possibility to know that everything is ok. For example I saw that by statistic from Visual Studio Market ware 10 installation (for example), but by Google Analytics were installed only 5 (for example). It means that 5 had problems with installer. It's a problem and I saw it. It was a reason to solve problems with installer even without complains. About writing information in own blog. You are free man, and you can do everything that you want.
Does somebody know answer on this [question](https://www.reddit.com/r/AskProgramming/comments/c80wcb/existing_tools_for_redirecting_of_console_output/)? For me it's interesting, because it will be implemented in the nearest release of MetaProject.
Honestly, I have ever tried free hosting, but the service is really bad. If you only host simple [ASP.NET](https://ASP.NET) site, you can host it with only $3-5/month, you get reliable service. You just take a look at [asphostportal](https://asphostportal.com), they fully support .net core.
No wonder it took while to compile this, thanks for this community service. It's getting easier to track changes and be part of it and thanks to guys like you from the product team.
 [https://www.interviewbit.com/coding-problems/](https://www.interviewbit.com/coding-problems/)
This is awesome, thanks mate üëç
r/DailyProgrammer Barely updated any more, but has a massive backlog.
Different implementations do different things and support different platforms. * .Net Framework only works on Windows. * Mono works on Mac, iOS and Android by doing things like AOT compilation for ARM. * .Net Core works on Windows, Mac and Linux, but only allows for command-line apps and DLLs (GUIs are handled by .Net Framework or Mono).
Remember, the multiple standard libraries were not distinct implementations of .NET Standard; rather, .NET Standard was drafted as the least common denominator between existing standard libraries.
A comprehensive list of Blazor related stuff: [https://github.com/AdrienTorris/awesome-blazor](https://github.com/AdrienTorris/awesome-blazor) &amp;#x200B; As others have pointed out, it's all changing from preview to preview so the older the info the more likely it's out of date. I'm using Visual Studio 2019 Community (the free edition) and update that and the included NuGet packages required for Blazor whenever a new release is flagged up, then check if my existing Blazor projects still build and run ok.
What are the arguments for using Java Spring ?
That is insane! Show them this: https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/
Check out this [reference](https://docs.microsoft.com/en-us/dotnet/standard/microservices-architecture/) . .NET microservices are easy and awesome!
Give dotnet-core a try: its very well suited for microservices and of course very close to .NET. Has other advantages like Linux, Docker-Suitable, etc... Esp. Docker can help you with the microservice approach (one container, one microservice). I know there are ways for the full framework to be used in Docker, but dotnet-core is a native. Against Java would be that you are not familiar with the framework... that does not make much sense. The language is very similar, but to get to know the framework, infrastructure and whole environment will take months or years. Other than that you can try the Oracle-Argument: Java is now basically owned by Oracle and they start to cash in: unlike MS which is currently doing quite the opposite.
the languages were similar in the C# 2.0 days... Java is _extremely_ verbose compared to modern C#
Another way to look at it - they are paying you to learn java. You might as well learn it, add to resume, then find another job doing .net.
Ignore what Java and spring are good for, if your team doesn't know Java or Spring you're going to have a bad time. If you have to maintain other applications that are written in .NET then your developers will need to know both. Remember that while the syntax is very similar, the available frameworks and packages are very very different. Microservices are stupidly simple to build and make work, the complicated bit is understanding what the microservices should do, their boundaries, how they scale. .NET Core runs on anything, we run it inside Linux Docker containers. Unless they're really determined to live in the dark ages, containerisation is going to be something you'll need to get your head around.
Do you really need Microservices architecture in the first place?
At my work, I develop microservices in spring and dotnet core. I prefer dotnet core as I find async programming easier to manage. I'm not a fan of realizing I'm awaiting a thread because of a .get or a .join on a variable. However, spring and Java are great tools to learn as a lot of people use them. It'll just mean you have more options of you choose to look for another job.
I know this is a dotnet subreddit, but in anyone's parlance whoever made this decision is clearly not qualified or experienced to make technical decisions.
It‚Äôs in the title. The team does .net.
ctrl-f "aurelia" - is what I didn't do because I know I'm the only one here that uses it..
"Company wants" is pretty poor argument for selecting a tool to use in a project.
I need some of the stuff you're smoking. Angular and React and none of the other front-end frameworks care about your back-end. The only issue is SSR and you can do that regardless of whether you're using .NET Core or not. Just because you have .NET Core as your back-end doesn't mean you can't also have a NodeJS segment tasked with doing SSR. Blaz*o*r will not replace anything within the next few years and its viability for large production applications is yet to be determined. When we see applications the size of Facebook built using Blazor then it can be advertised as a enterprise level framework to the degree that .NET is. All of the currently popular front-end frameworks are already proven material and all that Blazor has proven is that it can increment a counter. You must either work on small projects or medium-sized mostly back-end applications to be believing the things you're saying here.
Java Spring doesn't require you use Java - Kotlin and Scala are better alternatives.
Who is deciding this? They are morons. If you are a .NET shop, stay .NET. Jesus, at least switch to nodejs if you are switching to something else, at least it is free. &amp;#x200B; I mean, if it is one guy who is pushing for this, what happens when they leave? Everyone else gets stuck supporting a java project...
&gt; (...) Java Spring is currently better suited for a Microservices architecture, but is that even true? No. This sounds like someone who shouldn't be in charge of tech decisions being in charge of tech decisions.
Sometimes that‚Äôs all that matters.
I‚Äôve seen this before: it‚Äôs a new senior hire from a Java background into a .Net shop, and and always ends in disaster 6-18mo this later.
This. The person who wants to switch should argue their case. And back up their arguments with proof... All of the arguments should hold true, and outweigh the years of experience the company have working with .net
Yes. While ops overhead is incurred, the atomic deliverability of microservices is worth it.
Yeah, most people that say "the languages are very similar" usually haven't worked professionally in both. Yes, the basic syntax is similar, because they're both using C-like grammar, and earlier in the lifetime of C# there were fewer differentiating features. But modern idiomatic C# and modern idiomatic Java look very different.
Sounds like ivory tower architecture and they just brought in a java arch. There is nothing Java does that C# does not, including microservices. Who is trying to sell your team up a river and why? If your team is a .NET team and has been for ages, switching platforms is not impossible but your velocity is going to go to shit and it will be a slow climb back up. Some tasks likely won't be fully up to speed and the entire team is going to be leaning on that one architect/lead that claims to know this stuff. Not a recipe for success.
So, even if Java Spring is better suited for microservices, which is debatable, it still does not change the fact that your team does not know it. You will be making mistakes, everything will take longer as the team will need to learn framework/language. There is so many things that can go wrong here. This is a very poor decision from management.
This sounds insane to me. I mean, there was never a better time when .NET was better suited for microservices especially now with .NET Core. Cross platform, silly fast and reliable, .NET Core be used to create faster microservices faster. There are countless benchmarks and articles on the matter.
What frameworks do you use in .net? I found NServiceBus for messaging but are there any other (real) competitors?
Wher I work our production website mostly runs Angular and some React apps as well. It's a pure web api .net core and separate Angular front-end wherein the angular API services are auto generated from our Swagger endpoint. Also Typescript for both React and Angular as the static typing will really take a lot of the burden when working with multiple developers as the types act as a documentation and also intent on what you're trying to do. As for the experimental stuff we are currently using Blazor for some of our new internal projects in prep for production when .net core 3.0 goes live.
I recently faced a similar problem as I worked at a digital agency which is a .net house but we got a client that wanted an ecom platform in java because they thought it was the language for "microservices and startups" despite the fact they were a 2 billion a year company. Besides the facts the clients were idiots and didn't have a clue what they were on about at a number of levels, the idea that .net is not suited to microservices is beyond ridiculous. Particularly with .net core it can do everything java can do and my personal opinion is it tends to be easier to work with. I found that moving to Java was fine for simple stuff but it really slowed our velocity and we didn't do things half as well as we would have done in .net just because we didn't have the depth of knowledge. We used maven for build and package management which was very painful compared to nuget and standard .net build tools. I found the language itself to be particularly verbose particularly with exceptions. Json for APIs was the worst as Jackson's default position is to throw exceptions at every step which going from newtonsoft is a horrible experience. It's like they just didn't finish Jackson or wanted to discourage you from using the leading java JSON library. If you need to translate between API serialisation as well with your existing services some things may get in your way like javas defaulting enums to strings Vs .net defaulting them to ints One of the weirdest things I found was with spring boot the amount of automagical shit which happens via annotations, particularly around dependency injection. Some people may like it but I like a bit more control and I'm a little distrusting of key tools that hide away how they work but I guess it's less boilerplate In the end we had to get java experience in to help and so we also spent a LOT of money on contractors especially for a small team. There is no reason to switch to Java over .net just for microservices and all you're gonna do is cause yourselves pain. But on the other hand it's good experience. I quit after this project and I'm now building an e-commerce platform from scratch using .net core and microservices, I never intend to work with java again
At our company we use a nuget package called Sandwych.Quickgraph.Core.
Java is not owned by oracle. There are many alternatives like OpenJDK or Zuul that are completely free and open
That's great! Thanks a lot
That's very helpful! Thanks!
That's ridiculous. Especially with dotnet core and newer developments, it easily matches Java and Spring in capability. In my opinion, Spring is not even well suited for microservices (but that's beside the point). Yeah there are maybe more resources/guides for microservices with spring boot but most of these are garbage full of antipatterns and bad practices that tend to boil down to making basic REST calls between two programs on the same machine. They usually gloss over the inherent complexity add from moving to a distributed system, as well as all the organizational changes that need to occur. See, you use "team" in the singular form I think, which means that you probably don't want microservices anyway. If you are a single team of less than 10-15 developers, you'll not get much of the agility benefits of microservices. And the fact that someone is seriously considering switching an experienced .NET team to Java for the sake of microservices means I'd encourage even more caution...
Great tutorial! I look forward to continuing
The whole point of microservices is that it doesn't matter what platform(s) they run on. Use what you know. Are you even doing microservices for the right reasons, or because it's a buzzword?
Thanks to you for reading it!! üòäüòä
It's not just ops overhead. There are development overhead, test overhead, etc.
That's nuts. I hate people. Lol Two reasons would lock it up for me but someone making this decision sounds like they are either clueless or just don't care. 1) We have been using the .NET and MS tech stack and a switch like this would add on a CONSIDERABLE amount of development time. Coupled with tinkering around with best practices and security, this sounds like a cluster f. 2) Oracle will be charging for Java soon, it will not be free. For me this one may be your biggest selling point. Sorry you have to deal with that. I had to fight to stay on the MS tech stack back in 2017 (our entire company is) when our CTO wanted to get away from MS because he hated it. Ironically the projects that we did shy away from MS had issues along with our MySQL instances having a failure rate that was just not acceptable for the health industry.
Added development time. Wanting to be charged to use it eventually. Oh, you wanted FOR using it. My bad. Yea I got none.
Thanks for the suggestion!
Thanks for these!
I'll check it out, but I have so many suggestions here I don't even know if I can go through all of them
I often stumble into these situations myself. Someone decides that we should just switch platforms for no other apparent reason than shits and giggles. The official is that it's supposed to be better at X but that's often like saying Apples are better than Oranges and bananas taste like despair. Especially when you already been using Oranges for five years. Java and Spring shouldn't really be better at microservices. The whole deal with miceoservices is that you can pick the right tool for the job. If that tool is Java and Spring 100% of the time it seems the whole industry is missing something key here. The only thing left to so is to appeal to their sanity or roll with the punches. If you're like me you can keep doing .NET in the spare time and hope you learn something in the process of learning Spring.
Development and test are the biggest winners in microservices. Gone are the days of gargantuan, highly coupled &amp; brittle solution files. Regression testing becomes minuscule and impacted areas are greatly reduced by development.
Plural sight has a lot of good content! Not free though
Very much looking forward to the future of stratis. Will be awesome to see what people build:)
You are overselling it. If you can't design loosely coupled system in a monolothic, you don't have the skills to design proper micro services. You will end up with tight coupling but with different communication protocols instead of just memory.
Dude, I honestly _tried_ to use Aurelia for a greenfield project once. Gave up after about 4-5 weeks and rebuilt the whole thing in Angular in a matter of days. haha
To me, at this point, Angular and Ember are pretty much the same. I'm just currently into Ember since it's what we're using at work. I love Ember's routing engine, CLI, performance and API's over whats currently available from Angular. It's the easiest and quickest framework to get new projects off the ground IMO. It's also \_very\_ convention-over-configuration which IMO free's up a lot mental energy to actually get shit done.
You're underselling it and overestimating the ability to maintain low-coupling in a monolith. If your monolith has such low-coupling, is it really a monolith? Deploying monoliths means you're deploying the entire thing, every time. This has consequences to infrastructural footprint, testing turnaround and monitoring. Minimally discrete changes are irrelovant, the entire thing ships, so the entire thing needs the business. Taking it into source control &amp; devops; microservices allow decoupled feature development without impacting other development, testing and release efforts. Microservices allow truly discrete resources (infrastructural, testing, deployment) to be utilized at minimal levels for that microservice. Containters &amp; cloud take this design to even better heights to allow for discrete resource allocations, instead of throwing more resources at a monolith with varying levels of traffic per operation, and expending those resources ($$$) for everything, you can precisely target which services need more resources than others. This is not possible with monolithic designs.
If your company is bigger than a mom-n-pop shop, Java Spring is the least of your (their) worries. Microservices will tie them in knots. But if they are like most, there will be a "Phase 2" where they work even harder to drive the square peg into the round hole. Consider moving on and letting them enjoy the fruit of their labor.
I have a soft spot for Knockout. It was my first introduction to front-end frameworks (if you can even call it that) and got shit done. ...back in 201. :P
Tell them Java is the old .Net. .net core is now cross platform and they focus on they rewrote .core to be performant. Also mention the risk of Oracle and that many Java programmers have switched to Python because of it.
If they ultimately decide to go forward with Java/Spring then I would strongly argue using Kotlin. You guys will be much happier using it than Java. It interops extremely well with Java so you don't lose out on any 3rd party libraries. I've used Kotlin in Android development and it is a really awesome language. If management came to me today and said "we're switching to Java/Spring but you can use Kotlin" - I wouldn't be bummed about it at all. Yeah there would be a learning curve with the Spring framework but they would be paying me to learn a really good in-demand skillset. So either way I think things will work out for the best - good luck!
Thanks! Do you know if there's any good documentation for it anywhere?
The GitHub project contains a lot of tests, that should help you get started a bit.
My case against Java Spring a) Loss in compile time safety due to an over reliance on reflection and class path loading. String based class finding means no checks at compile time. b) Fights against encapsulation due to its setting private members by-passing the constructor c) Fights against immutability by requiring fields to be *not* final so that it could set them via setters. d) Obfuscates DI wiring far from your actual code causing loss in control and certainty over initialization e) Annotations are over blown and sort of create a whole other meta language on top of Java...one that is harder to understand, opaque, and brittle. f) Spring became so complex that it lead to creation of spring boot, a framework to manage another framework. g) Insanely deep call stacks that obscure the actual problem you are solving. In short you trade some initial gain in productivity (because it's easy with annotations and all) for a ridiculously complex system that is hard to maintain or understand. To be fair, all those above things could exist in a C# framework as well, so the above is a RIP on Spring and not Java. Java is more verbose than c#, but that is changing with upcoming JDK features. In general though if you are already in C# I would stay there as the language is far ahead of Java at present. The biggest drawback with it was its windows only stance, but that is no longer the case with. net core. The direction the language is taking is very promising
I smell underhanded influence. Unless it's far far better, it's more rational to stick with your existing platform. You can ask for evidence of superiority, but if it's due to office politics, your request will end up in the trash. The Pointy-Haired Boss won.
That's why they are creating .NET 5. It will replace all of these other platforms.
More like yes, except no for most customers who ask for it and have no clue what it is and end up splitting a monolithic code base in tiny bits that need to communicate while the sum of all of them is only a single atomic task. It‚Äôs a great tool, but damn i see it used for everything including absolutely everything it shouldn‚Äôt be used for
That‚Äôs wrong, it definitely is better at handling mivroservices than pretty much anything wise, simply because it got lucky by jumping on the bandwagon years ago. However, that advantage is moot if the developers don‚Äôt know Java.
This
If DOTNET 5 is a combination of all of the different major stacks, will there only be one implementation of the Standard Library thereafter?
.NET is owned by .NET Foundation which is a non profit 501(c)(6) organization and companies like Google and Samsung are members of it.
&gt;only allows for command-line apps and DLLs (GUIs are handled by .Net Framework or Mono). for the time being. core 3 will support windows guis.
You‚Äôre underestimating how hard it is to build a distributed system the right way. You think someone asking about Java vs .NET has a lot of experience with queuing theory? Circuit breakers? Service discovery? API gateways? The list is incredibly long. None of the pieces are overly complex on their own, but the system quickly becomes insanely complex. You‚Äôll quickly get to a A depends on B depends on C depends on D scenario where one team deploys and it brings half your services down.
There is nothing easy about microservices...
i know rhis is very logical but i just hate java so much that when i read or hwa about it i see the java applet that popsup in ie6 or firefox when you visit a java based website
The question of "Microservice" or "Monolith" is a false dilemma. N-tier architecture done right is loosely coupled and scaleable. Not a monolith.
As a dotnet developer I have only ever taken a cursory glance at spring boot so don‚Äôt know it well so I would be interested to understand more about how it‚Äôs better at handling microservices? We currently build out our services in Kubernetes using predominantly C# &amp; dotnet core, what could we get from spring that we are missing out on?
Not sure what you attempted but Angular is way more involved and complicated than Aurelia. Aurelia is one of the simplest front-end frameworks if we exclude Vue.
Maybe. Too soon to tell.
I wouldn‚Äôt say you‚Äôre missing out; I think that‚Äôs a misunderstanding. If you don‚Äôt know Java, and you don‚Äôt know Spring, it isn't worth jumping languages and frameworks. However, if you do know both, the environment for doing so in Spring I prefer. Far quicker setup in my experience.
My 2c is that it's not such a huge difference. I wouldn't stress about it. There will be stuff that's new to you like the built in DI you mentioned, but you'll pick it up. It's still C#. Good luck!
I'd love to hear a follow up from that person on how Java Spring is more suited over dotnetcore...
*All* computing is hard. If you trivialize any of it, it will bite you. Some parts harder than others, not all bites will draw blood. Monolith product releases are often the bedrock of enterprises of all sizes. We should all be so lucky to have a monolith providing a stable source of income for our endevours. At some point, critical mass *will* gather on at least one facet of your SDLC pain points and process/service atomization will need to start. Distributed computing *is* hard, no doubt. In 2019, it's very pervasive though. The mainframe has been dead for at least a decade. Decomposing a monolithic/big-ball-o-mud does indeed take skill earned through hard work and exploration. Queues and asynchronous work streams take time to get right. It's not overnight and impacts every facet of the SDLC but it s/b approached with a "journey" vision, with a goal of what absolute minimum coupling between services/dependencies looks like. It's value will pay dividends when you need to deploy something immediately without impacting other products, beyond just the API contract. If a service starts eating all your memory/disk/cpu, you may prevent other workflows from completing, but the fallout beyond that service's boundaries will be minimal and handlable (non-fatal) to those consumers. Retry mechanisms should stay stable and bring your system to eventual consistency. Immediate consistency is a myth anyway unless you're working on a closed circuit device (medical) or gaming (even then the absolute minimal information is shared in online games, with as much metadata delegated to background service calls) "How" these services communicate and resolve is a non-trivial detail, but can evolve. If starting the breakup consists of simple synchronous HTTP messaging, so-be-it. There's some great out-of-the-box perf increases with HTTP2, IIS10+, and other modern server platforms. Emergent design should drive optimizations on a few levels, this is no exception. IMO: Microservices are a more tangible and pervasive manifestion of single responibility. Derive your service boundaries through business process discovery, *then* start designing/building vertical architectures to support those boundaries. This will free up platform choices for things like doc/NoSQL/OLTP/OLAP data base mechanisms; where caching tiers are truly needed; messaging options and durability needs... While difficult and worthy of your utmost focus, if it matters, shouldn't it deserve that?
N-Tier still supports mini-monoliths though with horizontal "platform" coupling enabled (not all services should be forced to use the same data store, transport, ...). Multiple components that have intersecting value to eachother in each tier is where Microservices is more than just N-Tier. Service tiers have been mostly doing this for years with SOA via SOAP, REST. Bus architecture started on the motherboard and has been a staple of computing since the beginning. One component couldn't possibly handle all computing on a local machine; extensibility to accomodate varying components at various stages in a given event; all handled through on-the-fly messaging on the board through it's various Buses. ESB's at their core follow this same pattern with pub/sub, events, sagas. Microservices fit well in SOA's of varying maturity.
This looks likely. Your management structure is changing - Talk to the people under fire.
I asked a similar question the other day, some great answers in here https://www.reddit.com/r/dotnet/comments/caifek/which_javascript_framework_if_any_are_you_using/?utm_source=share&amp;utm_medium=ios_app
Thanks!
If you have any interest in Salesforce, I‚Äôd switch to that. I did .Net development for nearly two decades and picked up Salesforce development pretty easily. It‚Äôs also quite lucrative.
I think as of now Mono and .NET Core are working to use the same base class library. I think this work is being done in the CoreFX repo on GitHub. Supposedly there were some successful tests on using CoreFX on Mono and running an ASP.NET project, and running .NET Core on the MonoCLR.
I did this very briefly at a previous job. What links or resources would you recommend for anyone looking to learn Salesforce effectively?
&gt; The whole point of microservices is that it doesn't matter what platform(s) they run on. Within a given organization it's usually best to stick to one platform because IT staff does move around between departments or projects. Unless, the goal is to connect to lots of outside services. &gt; Are you even doing microservices for the right reasons, or because it's a buzzword? Indeed. I'd bet real cash that 3/4 of implementations are done for the wrong reason. The same claims happened almost 2 decades ago with XML web services: "magic Legos: plug and play". It flopped as a mainstream thing.
Here is the correct answer: [http://indeed.com/](http://indeed.com/)
Well that's the thing, if your organization is big enough to actually realize the benefits of microservices, then it's big enough to make use of more than one platform. But most aren't.
Trailhead is really good. They even have a Salesforce for Net devs trail https://trailhead.salesforce.com/en/content/learn/trails/microsoft_dotnet
&gt; (not all services should be forced to use the same data store, transport, ...). True. But that does not justify or even suggest everything as a Microservice. See libraries like [AdaptiveClient](https://github.com/leaderanalytics/AdaptiveClient) for examples of how to build transport/platform agnostic services using good ol n-tier. If you think of services in an application like a Venn diagram the majority of services for most apps are highly overlapping and not good candidates for microservcies. Trying to pry them apart only brings grief. Outliers with little if any other service dependencies are candidates for microservices. And when you re-write them you should use n-tier. So what are microservices..........
Id invest the time to learn Blazor :)
They're very similar. Source: I wrote in java in college... 20 years ago.
At this point I still wanna do .net. Thanks though might look into it.
Angular with Typescript will pair nicely with your .Net experience
This is state of the art microservices with dot net core. You can't do anything more right using it.
As messageBus I recommend rabbitMQ or kafka.
.NET 5 won‚Äôt replace the .NET Framework. It‚Äôs just the next version of .NET Core, and will still be missing System.Web support.
So did I . But the language back then has evolved since then, as did C#. One of the things I really hate about the Java projects I see these days (especially springboot) is the elaborate use of annotations. To me they are really annoying as they add a magic factor to the cofe, making it hard to read and debug. C# equivalent is of course attributes but those are sparingly used compared to what I see in spring.
Especially these days
Honestly I'm not sure why anybody would go with Java anymore.
i've been looking at hosting a small side project on heroku but it's hacky as fuck. I cant stand the time im wasting on getting things up and running. I had no clue i could host 10 web apps on azure for completely free....always. thats awesome! thank you!! you just saved me so much time!!
What makes it far quicker? Examples or details will go a long way here...
Let me correct that . Coding it is easy . Making it 12 factor compliant (or whatever the number is these days) is the hard part.
Especially these days
Why do you say that? They are, by definition, smaller services.
Sometimes it's important to see how things work on the other side . I disliked Java too but when I used springboot for a short stint I drew a lot of parallels, found some things I wished existed in .net core and also vice versa. It will also help you grow as an engineer as you gained valuable experience in being able to differentiate the two platforms. Heck you may even like a feature or library or way of doing something in Java compared to .net and then try to find an equivalent in .net . To me it's a win win
I agree with everyone else saying the "better at microservices" argument is BS. But let's assume for a minute that this is out of your hands and you'll be using Spring Boot for this project... Don't fret! First, Spring Boot is pretty neat so try to keep an open mind. Second, if it's not your own money being spent, exposing yourself and your team to an entirely different technology stack will no doubt make you better developers. Even if it only reinforces your preference for .NET, now you'll be able to articulate _why_. I work for a company that's acquired dozens of smaller businesses and software products over the years, in various languages and frameworks. We continue to develop and support most of them as-is. While some developers are dedicated to a single product, generally they work wherever there's a need. I can't quantify it but from what I've seen people's knowledge and proficiency ratchets up a notch when they're thrown into an environment like that. It can also keep devs engaged that might otherwise get bored and move on. So even if this is the wrong decision it can end up doing some good if you allow it to.
The introduction to your paragraph is intriguing but I'm awaiting the argument.
I work for Pivotal (the company behind Spring) as .NET SME, so I feel I'm quite qualified to offer a good perspective on this. While .NET excels in how code readability and general "niceness", Spring ecosystem significantly benefits from many auxiliary projects that make working with microservices easier. To give some examples are things that come with Spring Cloud (service discovery, config server, circuit breaker) are patterns that are very relevant if you're doing microservices and are a insanely easy to apply in Spring. Spring cloud data flows, spring cloud data flow, Spring data repositories. These are just the frameworks that are from Spring itself. On top of that the ecosystem of framework ON TOP OF SPRING is about 5-10x the size of what exists on .NET. What that means is that you get a much bigger "lego set" of puzzle pieces to use to solve your business problems then what you get in .NET. Axon Framework (https://axoniq.io/product-overview/axon-framework) alone will give you so much "on-rails" experience when doing DDD, CQRS &amp; ES architectures with nothing even remotely comparable existing on .NET side. While most people will focus on language features, IDE, performance as ways to compare Java vs .NET, the reality is the biggest productivity boost will come from reusable frameworks that address specific business problems, and as much as I hate to say it being the .NET guy, Java has years of advantage here. It will take many more years before .NET can compete at the even footing.
This is the most eloquent comparison of microservices vs monolithic arch that I've seen. Well done
Sorry my dude. I meant it as sarcasm. I assume there have been massive changes in 20 years. Just as there have been in C#.
The services are simple. The overall system gets exponentially more complex. Most people without distributed systems experience will end up with a system where A calls B calls C calls D. Then they have E call D and F calling C which calls D. Pretty soon a service becomes unhealthy (bad deployment, unreliable network, etc) and everything goes to shit rather quickly. Not to mentioning getting into problems with latency, versioning, dog-piling, and a million other problems that are rather unique to distributed systems.
In other words, coding microservices is easy if you don't care about the quality and health of the overall system. Monoliths are easy to code that way as well...
Hey thanks!
I don't even know how to respond to that giant ball of r/iamverysmart babbling bullshit you just spewed. None of that has anything to do with addressing the lack of knowledge most people have around distributed systems. Do you really think this guy asking about Java vs .NET is going to crack open his college textbook on queuing theory or start studying up on communicating sequential processes? Highly unlikely...
I love .NET to death, but honestly take a look at this list and tell me you can find a direct equivalent for this entire toolbox in .NET world https://spring.io/projects At best it will be a patchwork of independent projects that will require a lot of massaging to fit together. For DDD, CQRS &amp; ES which are very advantageous patterns in microservices architectures there's nothing even close on .NET side that compares to https://axoniq.io/product-overview/axon-framework. Stop comparing languages only - the differences between them offer only minor differences in real world productivity. Instead focus on the framework ecosystem, and in that regard Java is much further ahead.
Seriously that opinion is going to get about as much traction here as the opinion that Java is outdated bloatware held by a company so evil it makes Microsoft look like Mary Poppins in a Java sub.
If you're not migrating/porting projects, it's really not bad. There's some stuff that's missing from netcore coming from Framework, but for most workloads you should notice little difference.
The fact that it isn't 100% backwards compatible is a separate issue.
Arguments against this move: * Java licensing confusion * Type Erasure on the jvm (.NET Genetics are far superior to Java) * Ramp up time for new language, framework, devops * Lack of expertise if something goes wrong * Licensing costs for new IDEs * Process integrations may not be compatible with the change (are you using TFS? Any CI doing static analysis? etc) That said, I left .NET at a point where I'd consider myself expert level (title was Systems Architect) to work in a predominately Java shop (Expedia), and it was one of the best career decisions I'd ever made. The move from .NET to Java can be scary, but there are a lot of positives: * .NET Standard et al. are confusing as shit. In Java, you essentially have one framework library, and Java is intended to be cross-platform. There are different implementations of Java (similar to .NET vs Mono), but there's no "Java for Universal Linux Platform" or shit like that. * You'll likely learn a ton more, and more quickly. I found that in .NET there seemed to be more "career developers". That is, I never felt like people were passing the envelope or evaluating new things. It was mostly WebAPI, SQL Server, Angular, Azure. I've found the ecosystem for the jvm to be much larger and generally higher quality code. * Running on the JVM opens you to more languages (Scala, Kotlin, Groovy, etc). I use Scala in my day job, and contribute to a Java/Kotlin project in my free time. You can very easily use Java libraries from almost anywhere. I highly recommend looking at Kotlin rather than pure Java. I think it'll be easier for .NET developers to dive into. Since it sounds like there is a direction coming from above, I would make the following recommendation. Suggest that your team be given a few weeks to evaluate this Spring Boot change. You could have one person look at Spring Boot using Java and another look at it using Kotlin. Create a minimal API and throw some load at it to gather metrics. Since you're looking at microservices, deploy these to a development environment using Docker. Do the same with ASP.NET Core. This will allow your team to familiarize yourselves with Spring Boot and Java or Kotlin. It'll also give you numbers to allow your team to feel more comfortable with the change (whatever direction you take). You may find that Kotlin is a pleasure to work with and that Spring Boot isn't all that different conceptually. My last team used Twitter's Finatra framework. We wrote maybe a few million lines of code in it. As the team got bigger, people began doing really insane things, like caching data in ephemeral Docker containers and offloading "scheduling threads" within auto scaling microservices to do work that was better suited elsewhere. The team got a new manager who immediately insisted that we move from Scala and Finatra to Java and Spring Boot. (Well, he said "It could be Java or Kotlin. I'm not trying to dictate what we do", even though it was a very top-down decision that didn't involve the team). What happened is that these microservices ended up dropping 40-50% of the original requirements as they were developed in a silo by one engineer each, and these engineers didn't know the Spring Boot equivalent for things (circuit breakers, retries, metrics, tracing, logging, middleware, filters, etc). None of that changed the manager's direction, unfortunately.
Hey. Looks like your URL isn't working, and should be https://steeltoe.io/ I looked over this briefly, and it is pretty awesome work.
Not Microsoft, but the [.NET Foundation](https://dotnetfoundation.org/) which of its 7 board members (elected by the community) only one of which is from Microsoft
Don't worry, it was obvious.
I didn't say that but since you probably want to act like a douche so you just heard the part you wanted to hear.
+1 for rabbit. Another one is Akka.net framework based on the virtual actor model
As I mentioned in my original post, this is the first public showing of my blog. I'm open to hearing any and all criticism/comments. The serialization method I describe worked out great for my use-case. I don't have to convert/copy anything to write to the stream, and reading goes straight into the memory locations that I want.
One thing that may be of use; normal you'd end up with a GC Hole using `Unsafe.AsPointer(ref result)` as the pointer it returns doesn't count as a reference to the GC so it won't update it or use it to stop the object being collected. However in this case its both unmananged and in stack space (so won't move); so you should be ok. What is better (only available on .NET Core) are `MemoryMarshal.CreateSpan` and `MemoryMarshal.CreateReadOnlySpan` as they take `ref`s. So you can go `var span = MemoryMarshal.CreateSpan(ref result, sizeof(T));`
Thank you for reading and taking the time to leave a comment :) I'll have to digest what you've written, I'm not sure I understand where `MemoryMarshal` would help. The pointer trick is used to get a `Void*` and "cast" to `Span&lt;byte&gt;`, `CreateSpan` still has a generic constraint that would give me a `Span&lt;T&gt;`.
You can then use `MemoryMarshal.AsBytes` for a cast to `Span&lt;byte&gt;` `var span = MemoryMarshal.AsBytes(MemoryMarshal.CreateSpan(ref result, sizeof(T)));`
&gt; What is better (only available on .NET Core) are `MemoryMarshal.CreateSpan` and `MemoryMarshal.CreateReadOnlySpan` as they take `ref`s. Note that these still are not quite safe since there is a hole in the language (among other more complex ways, you can create a value type in a method, pass it by ref to a ref struct and store it on a `Span&lt;T&gt;` field in the ref struct and return the ref struct up the stack). Still slightly better than the pointer route. I would strongly advise everyone who might be tempted to use code that calls either of those methods (or `Unsafe.AsPointer` and similar methods) to not touch it anywhere near data you don't have complete trust and control over. If this code escapes to the lifetime of say a virtual method on a type that a customer could override you could be in for interesting bugs or potentially exploits.
The other complicated bits are service discovery, health checking, request tracing, observability, monitoring, logging, circuit breakers, retries, timeouts, bulkhead isolation, authentication, authorization, API versioning, sudden errors in transient dependencies caused by a release of a codependent microservice, ...
I don't think that C# and Java are similar. C# is actually "C"-ized Object Pascal: a lot of similar concepts, the same keywords even, and Pascal, Ada, Oberon - are very robust, safe and successful languages. Java is different beast.
Sorry you got all of the hate. **This is the right answer**. The open source ecosystem with spring and Netflix OSS is immense, that's why it's a clear leader. Hystrix, zuul, spring boot, Riff, easy side car loading, cloud foundry, and much more. And I'm on the .Net side. Let's talk about our challengers, ocelot, service fabric, orleans akka.net( ish). The feature set isn't close. Service fabric is the closest, but missing a large set of care and feeding tools, with a bunch of it, even error messages closed source, I have wanted about this before. Working with you cluster is a nightmare. Ocelot is decent but still is a large way to go to get to the speed of producing with spring. Its all config and no way way too add routes, I'd prefer it just depend on a reverse proxy, which you can do, but it needs a traefik as a front end instead of all the config. Anyway, just wanted to say you were right.
This sub is nuts. I like dotnet, but fuck if they don‚Äôt downvote anyone who questions or implied anything negative at all. Bunch of kids that need to realize there isn‚Äôt just one way to skin a cat, and their method wasn‚Äôt given by Jesus. It‚Äôs just one of many.
Fear of Being Left Behind causes an awful lot of crazy choices. Sisyphus.
It‚Äôs not a ‚ÄúVS project‚Äù, as the IDE is irrelevant to the code.
oh, is that all?
Any particular things excite you about these DBs? They aren't very popular. *Dgraph* is relatively new, just 3 years old, and still could be going through the teething stage. *FoundationDb* is about the same age as RavenDb, 9 y.o., and just became open source a year ago.
Corporations are people, my friend. A stupid person made that decision. _Or,_ if they aren't stupid, they either don't intend for the people maintaining the .NET apps to continue to do so for much longer or they don't intend to maintain them at all for much longer. Probably, they are just stupid, but consider those other possibilities.
* https://abdullin.com/foundationdb-is-back/ * http://jepsen.io/analyses/dgraph-1-0-2 FoundationDB has the potential to be *that* multi model database to use. DGraph is shaping up to be a rock solid Graph DB that you can just use without worrying about scalability path.
By following the instructions of the highly competent professionals and working over [**Microsoft 70-486 exam study material**](https://www.exam4help.com/microsoft/70-486-dumps.html) I was able to pass my IT exam by the first attempt with higher grades. When I was knew about this material I was not sure about the quality then I downloaded demo questions which reflected the valid quality of the material. Then I downloaded full PDF file at very lower price which helped me to achieve my goal and now I am happily doing my dream job. If I wouldn‚Äôt have taken help from Microsoft 70-486 dumps, it would very difficult to pass my Microsoft 70-486 exam. I suggest the same guide for all candidates.
I'm far from an expert but I found that learning MVVM early really helped me get WPF to play nice. I used MVVM Light found here: [http://www.mvvmlight.net/](http://www.mvvmlight.net/) &amp;#x200B; Aside from that I figured out most things by looking at how other people had done things in Github projects and reverse engineering how they'd done it.
I know the IDE is irrelevant to the code, I‚Äôm interested in how people are working with a JS front end and .net backend. Keeping the front end in the VS project, as per the template with the ClientApp folder or keeping it as a standard stand alone app.
There‚Äôs no such thing as a ‚ÄúVS project‚Äù is my point. You probably mean a .Net solution. It helps knowing the right terminology if you‚Äôre going to talk about this sort of thing.
No. I mean a project in a visual studio solution. It‚Äôs quite clear what that means, you know solutions and projects are different yeah?
Like I said, there‚Äôs no such thing as a ‚ÄúVisual Studio Solution‚Äù. It just doesn‚Äôt exist, so stop saying that. Solutions and projects are part of the .Net environment, it has nothing to do with the IDE. Not one bit. And evidently, you don‚Äôt understand the difference in a solution and a project. A project is something that can be ran completely separate and on its own. As such, an SPA should be a project within the solution, not inside an existing project, as you said above.
Yep - same with Javascript frameworks. People say React and Vue And Angular are similar. Couldn't be further from the truth.
I've already got a ticket for that conference ;) Hope there gonna be some real-life examples. Running php on .net core seems like an "art for art's sake".
Terrible answer.
Dude. Go away. You know exactly what I‚Äôm talking about, and are trying to ignore the context of the discussion and nit pick semantics to score points and feel smug. The VS template for react, created by Microsoft, does not have a separate project for the JS app in the solution, it is included in the same project. Many people do not include it in the project, nor the solution and use it completely separately. I‚Äôm trying to talk about the pros and cons of the approach and your awkwardly interjecting to try and feel clever. You‚Äôre not trying to help anyone. Leave it.
There is a completely free tier in preview at the moment which will always be free. Not sure if it's available in all locations and it's features are limited. But if you just want to hose a web app for mucking around with then that shouldn't be an issue.
Lol yes, but these are all issues that apply in non microservice systems as well.
Check out angelsix on youtube: https://youtu.be/Vjldip84CXQ He does a great job of explaining wpf and xaml.
TypeScript is a pretty nice language with a lot of great type-safety features, but Angular is completely underutilizing it. https://www.reddit.com/r/programming/comments/c4hpeg/why_angular_made_me_quit_web_dev/es0k0el/
are there any updates on this?
No problem, I had more but noticed some others here had posted them already. I've also heard the book "Cracking the Coding Interview" by Gayle Laakmann McDowell is a must-have. Good luck with your interview!
Great tutorial! Thanks!
 [https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro?view=aspnetcore-2.2](https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro?view=aspnetcore-2.2) Look here, that's pretty userful
He might not have ever heard of Blazor and could possibly convince them to use it so he doesnt have to learn react or angular and can reuse his existing c# skills. I personally think webassembly is going to continue to take off and less code will be written in javascript.
I have no idea what the title means
You use the [Authorize] tag on the PageModel you want to secure. Or just set the authorized pages or folders in startup.cs. I would recommend making a blank project with the security option so you can see it in action.
Im from a similar background, and have dabbled with both. I much prefer react to angular. Like others say, use typescript instead of raw JavaScript. Only issue with react is that visual studio doesn't have a template project that is typescript enabled for it, whereas it has for angular. I found a blog post with a template react with typescript visual studio project , and a c# webapi backend. I'm loving it!
Thanks for the input
Thanks for the input
Microsoft has released v1 of ML.NET. I've only had a play about with the tutorial apps from Microsoft, but I imagine the business applications for machine learning and AI are potentially limitless.
I can confirm that there are free App Service plans because I have two. If it helps, these are the options that I have chosen when creating a new plan - Pay as you go subscription - Publish: Code - Runtime Stack: .Net Core 2.2 - Operating System: Windows - Region: Central US - SKU and Size: Free F1 Changing these options to some things removes the ability to select the Free F1 tier. For example, changing the operating system from Windows to Linux removes the option for the free tier. Likewise, changing to a different reason removes the option for the free tier. Maybe if you can change the settings to match these to make the free tier available, you could fiddle around with it if you need to be on a different stack. Tomcat (for Java apps) appears to be free and Nodejs too, and probably others.
Thank you! I will check this out in a bit!
Thank you! Happy cake day!
[removed]
If your organization has no experience developing, deploying and supporting JAVA Spring applications and servers, this is a recipe for a long slow grind of a project - or a gift to a contracting organization. Been there - done that - got the hell out before it all went to hell.
Great article! Cats are awesome!:)
Your imagination is potentially limitless as well
Fixed, thanks
Thanks!
Good stuff, thanks!
&gt; So you can go `var span = MemoryMarshal.CreateSpan(ref result, sizeof(T));` and skip the pointer. I don't think the second parameter should be `sizeof(T)`, I think it should just be 1. &gt; length Int32 The number of T elements that reference contains.
Yes, but you need to fix your terminology. That‚Äôs all I‚Äôm here for.
Ok, but what about things like adding a notification icon, or a basket icon with basket value if it were an eCommerce website? Picking user / authentication was probably a bad idea on my part as there are things for that specific scenario. I was more asking about generic "how do I make something happen on every page load as per the PageLoad event on the .Master files in WebForms?". Sorry for my poor wording.
https://docs.microsoft.com/en-us/aspnet/core/security/authorization/simple?view=aspnetcore-2.2
Just use an *if* and add some marketing blabbing ;) ML.NET is unfortunately not mature enough :(
Ah, true :) Edited
Dependency Injection
There's a couple of different ways you can do it. u/IQueryVisiC's suggestion of DI should work, if it's what I'm thinking of. Assuming you're using a service layer. Here's an example of what I have in one of my projects: `@inject Scry.Web.Services.UserAccountService _userAccountService;` `@{` `var hasGpcModuleAccess = _userAccountService.HasAccessToModule(`[`User.Claims`](https://User.Claims)`, Scry.Business.Models.ModuleModels.WellKnownModuleType.GPC);` `var hasInventoryModuleAccess = _userAccountService.HasAccessToModule(`[`User.Claims`](https://User.Claims)`, Scry.Business.Models.ModuleModels.WellKnownModuleType.Inventory);` `}` Then you can use it like: `@if (hasGpcModuleAccess)` And so on.
Actually I don‚Äôt, I knew you would be back. https://docs.microsoft.com/en-us/visualstudio/extensibility/internals/solution-dot-sln-file?view=vs-2019 &gt; A solution is a structure for organizing projects in Visual Studio https://docs.microsoft.com/en-us/visualstudio/ide/solutions-and-projects-in-visual-studio?view=vs-2019 SLN files are the exclusive file type of Visual Studio, not the .Net framework. At least be right when you go looking for threads to be pedantic in.
We used Claims-based Authentication, tricky at first but now we include almost the whole user object so we can draw their email etc on any page.
you say that but im still making service agents off of a wsdl and a bunch of xsd files these days :p
I think I understand your question. You haven't used MVC I see so this is why people might be confused as to what you're asking. You still have a master layout page in Razor Pages. https://www.learnrazorpages.com/razor-pages/files/layout You can run C# on that page, and load things like [View Components](https://docs.microsoft.com/en-us/aspnet/core/mvc/views/view-components?view=aspnetcore-2.2).
Yeah, no dude. Solution files are used with Rider, and every other project that is utilizes dotnet.
[removed]
Ahhh you don‚Äôt actually know what your talking about. Confused if you said framework? It‚Äôs literally the name of .Net it‚Äôs what it is. There is no .Net environment. Solutions are SLN files, the VS file type, Jetbrains is a 3rd party company using the Microsoft SLN file type that was made by Microsoft for VS In 2002 when VS launched, while Jetbrains was still IntelliJ and Java only. Rider didn‚Äôt even come out until a few years ago, what 2017? So you think because you use a third party IDE it‚Äôs not the VS file type? Sit down lad.
The fact that the entire service technology has been predetermined is a red flag. One of the benefits of micro-services is that you build different services using different technologies. It just depends on which one is best for that specific use case. I'd argue that this person probably doesn't know enough about this topic. Especially, given that there's no experience with Java on your team, I'd say this is scary ü§™.
You‚Äôre clearly too ignorant to get through to.
I just transitioned from MVC 5 to Core. &amp;#x200B; Very similar, some nice improvements in Core but some things may be missing. Lack of oledb created an issue for me as we used it for retrieving data from DB2.
Keep telling yourself that mate, although I‚Äôd suggest not being so stubborn when you misunderstand something.
Some type of distributed transaction like the Saga pattern could be appropriate. If any part fails (e.g. saving file to file-system) then each part of the transaction will "roll-back". https://docs.microsoft.com/en-us/azure/architecture/patterns/compensating-transaction Using NService bus handles these kinds of situations really well (could be overkill in this case though): https://docs.particular.net/tutorials/nservicebus-sagas/1-getting-started/
Not sure if this applies, but do you need the UTF string conversion there? Can you not n use the string.Create method to write the bytes directly to the string buffer?
It results in a smaller serialized format. Also, when using large strings, it turns out to be faster for reading and writing to the stream (even a MemoryStream). If you're using a lot of smaller strings, it's probably better not to use UTF-8. I'll re-try the Person[] benchmark with it removed.
I agree with others that your strategy seems questionable. That being said, it would probably be easier technically for consumers to pass contextual information as part of the JSON payload rather than in custom headers, but it depends on their specific stack.
Once you wire everything up it's pretty easy. @if (User.Identity.IsAuthenticated) { &lt;div&gt;Your logged in user HMTL or whatever&lt;/div&gt; } else { &lt;div&gt;Not logged in.&lt;/div&gt; }
Azure App Service F1 tier on both Windows and Linux will *ALWAYS* be free as long as you have a valid Azure subscription attached to your account. Free Trial likely refers to the subscription your account is on right now. Azure Free Trial subscriptions will allow you to spend $200 in your first subscription month and the subscription itself will remain active for 12 months (you won't get any free credits for the rest of the 11 months however). When the subscription expires, you will have you [upgrade to a new subscription](https://docs.microsoft.com/en-us/azure/billing/billing-upgrade-azure-subscription) that is either PAYG (Pay-As-You-Go) or activate a valid subscription (MSDN, DreamSpark, Microsoft Imagine, Azure for Students, Visual Studio Online, etc.) to continue using Azure services. Don't worry, your app data will not be lost when you switch subscriptions, your apps will start using the new subscription.
Sure, why not 1. Program to read through file directory structure (recursion) - this was with MASM . it also did direct to memory display in dual columns and color coded (I was bored) 2. Medical record checkout and check in (way back GWBasic as a cassette tape for data storage 3. Drew a dragon (Basic-A) 4. Calculators are pretty common 5. COM+ library app using Visual Basic 4 (Maybe 5) 6. Wrote a virus that embedded itself in another executable and then hid all files in the folder when the infected file was run (for class) 7. wrote an app that would take data from a game (over a 1200 baud modem). The games used to print out grid locations for all player's spaceships that were connected to the game similar to &lt;BOB 12.432 x 7.911 Heading NW at 120 mph&gt; etc. The program intercepted all data from the BBS Game and translated the data into a visual screen format so I could shoot back at hit the other ships ... long story lol 8. lots more but those are the ones I can remember at the moment. Also fun to do is instead of writing a full app, just experimenting and learning sifferent areas such as cryptography, graphics, play with colors and RGB, reading data from various formats by trial and error like trying to read or write a pdf or a Microsoft Word file etc...doesn't really matter as long as it's entertaining Good Luck!
Thanks!
My first "real" project was a simple IDE for Brainfuck, complete with an interpreter. It supported tabs, stepping through the code symbol by symbol, executing it all at once and I almost got a go back function working, but the project time ran out before that happened. It was my research project needed to pass our programming course.
Thanks! They are indeed :D
I was so fascinated when I discovered that I can make windows applications in C# with WinForms that I went on a coding spree creating little tools for no reason. Those include: A calculator (of course), an encrypt-decrypt app (which was really just converting text to base64, but I was 13 give me a break) to send "encrypted" messages to my friends via MSN and little things like that.
I have one anyone can make and probably get actual users. When I was just learning to code I made a shitty winform app which let you define subreddits and automatically downloaded all images from the given subreddits to a given directory. I made it because someone was asking on r/wallpapers and I was trying to learn. It ended up with several thousand downloads. Unfortunately, because I had no idea what I was doing I scrapped reddit and imgur links with frickin regex (doing stuff like looking for imgur links with regex like [A-Za-z0-9]{5}.(jpg|png) or something.) I didn't know APIs existed back then. This obviously broke because every reason but mainly because a month after I released it imgur updated their image ids to be more than 5 characters. I still get people messaging that account because it was posted under a top comment under a top post asking for a download link or if its cross platform. So anyway, if anyone is looking for a project r/wallpaper would appreciate something like this.
Most of the projects were related to making my job easier. 1. Get all the file names in a directory, we sometimes had 1000s of files that needed to be edited with little tweaks here and there. It only took me once of doing it by hand. 2. Wrote an app to scrape websites for weather data, then had it emailed to me. 3. Wrote an app to collect registry info for an application. This was for trouble shooting why an app might not be working. 4. Oh yeah I wrote an app to go out to astronomy picture of the day ( [https://apod.nasa.gov/apod/astropix.html](https://apod.nasa.gov/apod/astropix.html) ) and converted that image and made it my desktop image. I had that one run on startup, so I had a new image every day. I had not been out there in forever. Looks like they might have a youtube video out there every once in a while. That would be something to work around. 5. I wrote a homepage that would go out and collect info I wanted and would have it run once a day. Kind of a custom webpage with all the feeds i wanted. Well those are just some of the things I played around with.
At around 54 minute mark he demos the Flutter integration with Blazor. He begins by stating that it is not something they plan on productizing, it is purely a tech demo to show that it is possible to create your own renderer for Blazor. I personally would really like access to the source of the demo as it is not available on his GitHub. For me the biggest thing which has put me off Flutter is having to deal with dart, if its possible to avoid that I consider that HUGE.
An asset management system. It was a simple data in/data out app, but since it took 10 lines of code to get the selected value of an asp.net dropdownlist, I consider it a win.
"Hello, world!"
Client(winforms)/Service(VB. NET) , both using a plugin system. The communication was written using a custom tcp client/server/deserialization dll(in c#). The server was later rewriten in C# followed by most of the plugins as well(a few are still in VB.NET and fully compatible), and the was GUI moved to WPF...service calls and parts where ASP.NET code was used rewritten to use net wcf communication. The Client however is still a VB.NET app and still works with that custom dll. We've been updating it from .NET 1.1 to hmm I believe we finally stopped at 4+ smth as we sold off the entire thing. But I had plans to move it all to use REST as it would make it more compatible with where things were going at the time. So if anyone ever tells me you can't maintain a. NET project for decades I can literally prove them wrong =)
Desktop programs. Mostly file managers, but also random utilities like a clipboard, automated email archiver for work *(feels dirty to not mention it to the boss, but it did the job better than a human ever could and I wouldn't get paid for it anyway)*, resume in WPF format, etc. If you want to get started with WPF, you should learn MVVM right away. I procrastinated for over a year and I hate myself for it.
I worked on an assembly line where each of our products had a little piece of paper called a "traveler", where after you completed a step you would sign your initials and the date. Not only do I hate monotony, but if there was ever a defective product they would have to dig through boxes of papers to try and find the corresponding one. So I made a little digital tracking app despite never having written a line of code before, where people signed in with an account - opened up what step they were doing, and then scanned the products barcode - which would record their name and date in a table. My boss liked it so much that they pulled me off the assembly line and basically paid me to teach myself and expand on the app. Eventually that little app turned into a full on mission critical manufacturing execution system. Over 50k lines of code, millions and millions of rows of data across dozens of tables, etc. I then started getting asked to look at other things in the company to improve upon, and continued teaching myself. Now I'm a software engineer at my company, where three years ago I was on an assembly line for like $10/ hour.
Thanks for the detailed description! Unfortunately I was using Amazon RDS and I didn't do enough research to see it was only free for 12 months as well. I think now I have a full picture of what to do. I will host my .net core web api on azure web apps and host the back end on Amazon DynamoDB since that seems to always be free as well. I haven't done any real full stack or web development since 2015 and I dont remember there being this many tools and free hosting software available to us. Maybe I was just unaware.
FYI, Heroku supports docker containers (just like azure app service on linux) and has a free 10GB Postgres database (which works with Entity Framework). You should dockerize your apps, it becomes really easy to switch between app service, aws and heroku.
I originally started messing around with heroku the other day and didn't have success. Ironically it worked on my local machine but not when I pushed the container to heroku it didn't work. I've used heroku before and had luck but also dealt with alot of bullshit (was using Django and Postgres). I'm gonna try the azure route for now and possibly MongoDB now. Still in the planning phase.
I would be very interested in hearing more about the changes to the testing WebApplicationFactory stuff.
Web Forms is *not* "deprecated". Microsoft has never said they are officially deprecating Web Forms. If they want to de-emphasize it, they'll typically make it gradually more difficult to support, like they did with ASP-classic: you can still run it, but have to gradually jump through more hoops in later versions of their OS and tools. Nothing is for sure in this industry anyhow. Every tool you see could easily be dust in the wind in 10 years. IT tools are like that. (If MVC is truly the galactic pinnical of smallish-project CRUD, I'll poke my eyes out anyhow.)
Blazor is really make great progress and now adding Flutter support. Awesomeness indeed.
Maybe investigate [SSH.Net](https://github.com/sshnet/SSH.NET/blob/develop/src/Renci.SshNet/SshClient.cs) to execute remote commands? Not sure if it supports Kerberos though.
Thanks! Too bad it looks like the project is dead. They talked about releasing a beta for netstandard about a year ago, but sadly never did.
A winforms random number / text generator I was in college and I had to create a database for a group project, also winforms. I created a group of arrays and had it generate several thousand customer records, transactions, etc.
I'm a .NET guy, but I found dart to be quite enjoyable.
&gt; and could possibly convince them to use it It's not really ready for use in production apps yet. Most employers won't even consider it for another year or two, unless some compelling feature forces them to be early adopters.
My first "program" was... somewhere in 1984 using Basic on Thomson MO5, old story. My first project using .net framework (2005) was a wrapper for winscard.dll (Windows implementation of PC/SC specification allowing communication with smart card readers) and a dedicated GUI. Latest versions have been made available on github ([WSCT-Core](https://github.com/wsct/WSCT-Core) and [WSCT-GUI](https://github.com/wsct/WSCT-GUI)) and are the core of a lot of (private) plugins. Why this idea ? Because I was looking for such an API and wanted to experiment C#; there are no better motivation for me.
Microsoft Orleans may beat a lot these libraries https://github.com/dotnet/orleans. And microservices it is usually is not right choice for many projects.
The biggest concept that you have to learn in transitioning to ASP.NET Core is the concept of Middleware. And if you are jumping directly to ASP.NET Core 3, the concept of Endpoints. That's pretty much it. You can peruse sample codes for ASP.NET Core here https://github.com/dodyg/practical-aspnetcore. It will help with getting up to speed with the framework.
**Summary: recipe website where users can create recipes** Ingredients came from a predefined list (populated from a USDA database). After the recipe was completed, the nutritional data was computed for the recipe. Ingredients were linked to their own page giving useful info on the ingredient. Recipes were searchable by ingredient, cuisine, meal type, nutritional info, etc. &amp;#x200B; Server side I learned a lot about db/class relationships, building to an Interface, stored procedures, cascade deletion, etc. Client side I learned a lot about master pages and shared pages. &amp;#x200B; Feel free to ask for clarification on any of the above!
Obligatory upvote!
Did you try to use [ML.NET](https://ML.NET) in a commercial project?
I had the same mind, but I can find no commercial cases except marketing brochures.
The Flutter part is purely a tech demo, and he made it clear in the video that they will not be adding support for Flutter to Blazor. But who knows, maybe they change their mind. Or maybe someone else implements it.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/csharp] [Blazor Tech Demo with Blazor Renderer for Flutter - NDC Oslo 2019](https://www.reddit.com/r/csharp/comments/cbud4j/blazor_tech_demo_with_blazor_renderer_for_flutter/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
That's pretty cool. I'm starting to come around to the idea. I want access to the code though, does anyone know the guy and can get it put up on Github?
Can you expose a service on the linux box? Honestly I would probably just write a web api wrapper for the commands and call them that way if its possible.
That was my initial setup actually, but I don‚Äôt know if a way to get the delegated windows authentication through to the Linux box via http.
Can someone explain to me why https://i.imgur.com/gXq5RGb.png this works? he had done a similar thing earlier in the video when waiting for the agents request to finish. but I don't understand, the page is rendered when agents is null, so there is a progress bar displaying, but why does the page re-render when agents is not null? how does it know it should re-render that page / segment. https://youtu.be/uW-Kk7Qpv5U?t=2458
Server sidr blazor is shipping in .net core 3.0 which i think is out in sept. I dont see a reason to wait a year or two if it works well.
This is very simnilar to something that would be done with react. The props would change and the library would rerender the component. Having worked with blazor at bit, it's not as cleanly functional. There is a function available in blazor that you call to rerender the page manually call StateHasChanged or something.
I did an RPN calculator that could also keep track of units of measure and convert between e.g. ft -&gt; m or lbs -&gt; kgf.
I've been using Azure Machine Learning Studio. It's pretty good, and it's very easy to use. I made an API that I can use to request predictions from.
Looks like it's been [discussed](https://github.com/aspnet/AspNetCore/issues/4662) a lot and will be available out of the [box in 3.0](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-3.0&amp;tabs=visual-studio#kestrel).
It does help to know how big the company is, and how many developers there are. If you've got, say, under 30 developers and are an enterprise shop, you probably should primarily stick to one language unless there is literally something that is impossible to do with .NET. If you're a tech company, you're got more bandwidth to use the absolute best tool for the job.
Microservices are also extremely overdone. People often just use them because it's trendy, and pay for it later. Enterprise shops should stick with monoliths until there is a really, really good case for shaving something off from those monoliths. Make sure to separate things into neatly encapsulated services though so it's easy to do when the time comes.
But with a monolith you don't have all the complexity of a bunch of different instances and environments.
The benefits you are describing comes from loose coupling, not microservices. Loose coupling is essential. Microservices just add more complexity which is not readily apparent when you're starting out.
I didn‚Äôt find this through my initial research so thank you for linking it!
Sounds like you want to learn some AI but need to justify doing it at work... Can‚Äôt really think of anything of the top of my head maybe something to auto respond to some emails or filters them. Hopefully some creative ppl chime in.
It can be distributed, optionally with services provided by various entities, and not be considered a microservice oriented architecture (MOA from here). MOA is really just an evolution of service oriented architecture (SOA), which is an evolution of, ... well follow the trail back. Sidenote: Monoliths are actually perfectly adequate in many cases. There's a school of thought which says that any new application should start as a monolith. It gets some software working quickly, can be rapidly scaled upwards and gives you an idea of what needs to be scaled outwards. Anyway, applications can be MOA, monolithic and dozens of other architectures. You can also mix and match. Have an old school two tier application call a microservice which calls a lambda serverless service, etc.
Lol, I just said this in a [reply](https://www.reddit.com/r/dotnet/comments/cb09oe/help_me_my_company_wants_to_start_a_new_project/etisiyy?utm_source=share&amp;utm_medium=web2x) to another comment in this thread :) It's great advice. You start with working software, scale up, then scale out, and as you say, delineate services to help this process.
How did you get around your DB2 limitation. We are currently in a similar situation (we have db2 on iseries) and from what I have found we need a new ibm license to use the ibm.data.db2.core to connect otherwise we can revert back to generic ODBC connections but it is painfully slow.
Think of component properties like React props and state. State changes == re-render.
I do mostly backend so I transitioned to dotnet core with ease. Only some initial stuff with configuration files, deployment and ef core are new things to me. But overall it was a piece of cake.
[removed]
We are still stuck on it. We are entertaining the idea of purchasing db2 connect license but it is insanely difficult to get straight pricing from IBM. Our another option is linking db2 server with our sql server and executing stuff on SQL. You could also potentially use openquery on SQL if the servers are linked. Basically, you put the openquery in a sql stored procedure, and the application executed the SQL SP, which puts variables in the openquery, then openquery gets executed on DB2. However, openquery is a pain to work with. It is easy for select statements and simple inserts but if your data is more complex openquery is risky and hard to write.
learning it now myself - hate javascript but finding Dart much more palatable.
&gt; I dont see a reason to wait a year I bet a business who needs a reliable tech stack can find a reason or two to not switch to a cutting edge framework that is still in pre-release.
This is both possible and commonplace. What you are describing is called bearer token authentication. I'm not going to go into details on this because there are numerous blogs etc that explain this whole process in detail. I will tell you that IdentityServer works well for this sort of stuff and I'd start by looking here: [http://docs.identityserver.io/en/latest/quickstarts/4\_external\_authentication.html](http://docs.identityserver.io/en/latest/quickstarts/4_external_authentication.html)
thanks for the input. I agree about the pricing and find it dumb that ibm provides you the ibm.data.db2.iseries library that works with full framework but requires another license to be able to use core. Hadn‚Äôt thought about linking servers, may have to research it, but would hat to had complexity where it shouldn‚Äôt be needed.
Are you thinking you need to use EntityFramework for this? Sounds like you don't have to. Strictly speaking, based on your description, the way you have done it will probably perform better than EF. Afterall, EF is going to all the same things under the hood. If your API is meant to return structured data, then you might want to think about reading values from your IDataReader into a list of objects instead of strings. You could even use something like Dapper to do the binding for you.
&gt; I used a Connection, a Command and a DataReader object and then I step through all the results in raw C# to create a List&lt;string&gt;, more or less by hand, to return. That's referred to as using "raw ADO.NET". It is an important skill to know, as it allows you to do things that are not supported by your ORM. &gt; I did not use a DBContext or a Model. A DBContext is something you find in Entity Framework, an ORM. EF sits on top of ADO.NET and makes it easier to pretend that your tables are collections of objects. (This can be useful or a very bad thing depending on your access patterns and performance needs.)
Here are some examples of ADO.NET and various ORMs. https://grauenwolf.github.io/DotNet-ORM-Cookbook/
I finally found my answer elsewhere, but thank you for your time! (It was more about Azure Active Directory configuration than .NET core in the end)
What kind of site are you hosting on IIS? MVC? .Net Core? Maybe something else? Duo has .NET integration you can leverage here [https://github.com/duosecurity/duo\_dotnet](https://github.com/duosecurity/duo_dotnet) They even have some unit tests in there which show examples of how to handle the data/calls.
Bad here is Repository pattern and i personally think it is bad example.
Bad here is Grammer and lack of think bits.
I do this all the time in Dapper. The "lot of work that could be done by the framework" is mostly just mapping- which is mostly what Dapper is all about. Check Dapper on GH for examples. You can return anon objects in your REST or make it a poco.
Ok, it shows how to deal with database in old fashioned way. Which is a step back. Repositories are good if you do not have to deal with queries across repositories. Then you will create third repository UserOrders and so on. Better to divide not by entity but but responsibility. Especially when user asked for 6 tables queries. Starting project from creating repositories is a wasting time. From start developer should create several working methods and then summarize how to simplify future methods.
It shows basic CRUD operations, which the reader needs to know before doing anything more complicated. If you can't read/write one table you sure as hell cannot handle 6.
So while entity framework is cool and all, I'm more of the mindset that I want to control things myself. On top of that I want to control everything myself. Sometimes the way EF handles transactions can be expensive and I didn't quite like either approach of code first or db first and having to muck with everything. Anyway, I started to develop my own library I could use and I wanted it to support SQL Sever, Postgres, Oracle, and so on. Have a look at my code and maybe this will help you. I've only recently started dipping my toes into [ADO.NET](https://ADO.NET) but I have some functionality for running stored procedures, and making SQL Queries. What tripped me up a bit was a statement where I wanted to use "IN" while needing to use sql parameters so I built a helper class while using inversion of control via LINQ. Hope this helps. Code: [https://github.com/ducksauce88/DotNetSqlFactory](https://github.com/ducksauce88/DotNetSqlFactory)
Can relate. Switched to core now can't access DB2 with oledb because it is not supported. Need to purchase DB2 Connect from IBM.
I feel the same way about IBM and would definitely not recommend anything IBM to anyone because of stuff like this.
if you have 18+ years of .net experience and you in a position of having to spend months learning a new tech stack, new programming language and not being funny but in the javascript world it seems to always be in major flux. Or you could reuse your existing .net skills and ramp up quickly on a new framework that is based on existing stable technologies like .net and razor and possibly go through some teething pains because it is new combination of those robust technologies. I would at least evaluate Blazor.
Yea entity framework will save you TONS of time and lines of code. It's not great if you're doing crazy sql statements with lots of joins and what not, but for 95% of CRUD statements out there, it's perfect. The reason is, it gives you objects and types so you'll have have typos manually trying to write sql inside C#/VB, and then you also get intellisense, so you don't have to memorize all the damn column names. [This comment](https://www.reddit.com/r/csharp/comments/bxwv2k/noob_learning_to_connect_c_and_sql_on_vs2019/eqajf10/) is in VB, but it highlights how using an ORM can really make working with a DB faster and easier
Not to mention there are some impressive demos of Blazor running in Electron, PWA and even recently Steve demo'ed it running Flutter.
Dart really is a nice language that grows on you and I've really come to enjoy working with it (and that's from having worked with C# since 1.0). The Dart team is currently working on adding extension methods to the language so that should be hitting the stable branch sooner than later.
One issue at the moment is the constant updates with breaking changes. It's definitely not ready for prod apps, but it looks promising
With a free version?
At work were currently experimenting with vertical slicing. It combats over engineering your solution and tries to remove unnecessary abstractions (at least that's why we're trying it out) It could be something for you https://jimmybogard.com/vertical-slice-architecture/
It is being released with [asp.net](https://asp.net) 3.0 in Sept. It should be stable by then I would think.
New frameworks have child diseases, and you'd need a pretty good reason to pick this framework over other more mature frameworks. I'm not saying it's bad, but it's just not ready for production use
The frontend world really isn't in major flux. It has been stable as react, vue, and angular as the frameworks for years now. Yeah, you can ramp up on blazor, then find out it has a bug and totally fuck over your business by risking a framework that hasn't stood any sort of test of time. Blazor is cool, in a couple years it would be great to adopt it. But for a company to start using it right away is laughable. Unless the project is completely experimental and failure is fine.
Dapper is free and open source.
Heavy ORMs like EF excel when it comes to simple queries that aren‚Äôt required to be super duper performant. What you have right now is fine, I would hesitate to switch to EF for something like this You *might* consider using a lightweight ORM like Dapper, as that can abstract away the connection and mapping logic, but really I wouldn‚Äôt get too worried about it unless that code is becoming an issue.
&gt;I did not use a DBContext All that means is you didn't use Entity Framework. And that's not wrong. EF is a great tool, for the right tasks. For something like this, where you already have an existing database and an existing query, it might not be the right tool. As someone else mentioned, [Dapper](https://github.com/StackExchange/Dapper) is a *great* middle ground between full ORM and plain old DataReaders. The simplest way to use Dapper is to make a model with properties who's names (and types) match exactly with the column names (and types) from your query (I don't remember if case matters or not off the top of my head). Dapper will automatically map matching column names into your model, for each row returned. It will give you back an IEnumerable&lt;Model&gt;.
But the reader here doesn‚Äôt care about basic CRUD operations, that‚Äôs not what they‚Äôre asking for. I like that you included that link in an attempt to help but you can‚Äôt fly off the handle at someone else who disagrees with you like this. And for the record, his spelling isn‚Äôt great but he‚Äôs absolutely correct. Those are not good examples.
I saw a lot of projects with generic repository pattern usage (not as in your samples) and my task is to optimize dramatically bad performance. So i personally hate repositories which usage makes code like a spaghetti without understanding what is under hood. Instead of navigating to real implementation you usually find abstraction over abstraction. Modern .NET ORMs are super abstraction over database, don‚Äôt hide it‚Äôs power because of possibility to mock it for testing or ‚Äúfor future wen we decide to change ORM‚Äù - it will almost never happen. If you have ORM with LINQ - repositories are overkill which complicates and slowdown development. One of the many thoughts which i totally agree: https://www.infoworld.com/article/3117713/design-patterns-that-i-often-avoid-repository-pattern.html My personal thoughts, not so finalized but: https://github.com/linq2db/linq2db/issues/1698#issuecomment-486174854
I am actually wrapping up my first project where I am using EntityFramework and LINQ. It has its uses. If you are dealing with a larger query that is gathering a large amount of data for reporting then I would likely stay away from EF. If having your data in objects would be useful then EF would likely save you a lot of time.
I somewhat disagree. Blazor is open source so if you found a bug you could fix it yourself and like i said its not like it is based on brand new technologies. It is using existing stable technologies in a new way and Microsoft has committed to support it. If it was still in the tech preview stages then I would agree but once it became a committed Microsoft product I would have worried less about it.
Like I said a good reason is your existing c# experience, the backing of microsoft, it being open source and the architecture that it has with server-side, client-side wasm, electron etc....
Before you start inventing another wheels and spend a years of development - not a joke. Check this project which has 20 years of history (not a linq part), before even EF was in an early design copying Hibernate behavior and simple mapper Dapper was not invented. https://github.com/linq2db/linq2db You can control everything, which value should be a parameter and which should be a literal. Transactions are native, nothing are hidden. As a plus you have compile time check for every query and you have query decomposition, which is very complicated when you deal with SQL strings.
just use dapper and be done with it in like 10 seconds
Excellent story! Clearly not afraid of a challenge. Where improvements can be made, they are!
He asked for "Anyone know of a simple ASP.NET example for a REST API that is not backed by a table but by a query?" What is more simple than CRUD operations on single rows? I taught him to count and you bitch that counting isn't an effective way to do calculus? Well no shit. But he still needs to learn how to count first.
So fucking what? Those examples were not offered as the pinnacle of DAL design patterns. Their purpose was to show the basics of data access across multiple ORMs. I'm trying to teach someone the alphabet and your complaining that I haven't covered how to write novels yet.
WTF? You are claiming 20 years of history for something based on LINQ and written in a language that isn't 20 years old?
EF Core fixes a lot of the performance problems that EF sees. Also, always use AsNoTracking() to remove a lot of overhead and weird side effects.
My bad, subtracting 2019 - 2000. Linq part was developed later, after linq2sql. It was simple mapper like a Dapper before that.
Man, relax. I‚Äôm not so good in english to write polite words and did not want to offend anyone.
I‚Äôm still not sure why you‚Äôre being so aggressive here. What he wants is *conceptually* different from what you are giving him. To extend your metaphor, he‚Äôs asking how to do multiplication and you‚Äôre giving him examples of people doing subtraction...plus it has full-fledged CRUD operations when he only asked for a select statement. I‚Äôm saying that it would probably only serve to confuse him more.
FYI, your looking for Raw Queries in EF, where you can execute a custom query and have it map back to a class: https://docs.microsoft.com/en-us/ef/ef6/querying/raw-sql Though, if you don't need most of EF's features, I suggest Dapper. It can be a bit much to do all that mapping in EF just to support one query.
Thank you! I have a better handle on it now and I'm glad to hear the raw [ADO.NET](https://ADO.NET) route is reasonable. Actually, we've had similar problems with the ORM in the legacy app doing dumb or inefficient things and we've been moving away from ORMs there as well.
&gt;Are you thinking you need to use EntityFramework for this? Sounds like you don't have to. I \*was\* thinking that because just about every example I saw online does use it. &gt;the way you have done it will probably perform better than EF. Good to know!
I will give dapper look-see. Thanks!
If you don't like an example there are four basic options 1. Offer an example that you feel is better 2. Attack the example in context 3. Attack the example without understanding the context 4. Attack the author 1 is preferable and 2 is acceptable. Most of what I've seen is 3, which is frustrating as hell.
Then don't complain about someone's examples without offering your own.
Thank you, I will definitely check the videos out.
I will look into the asnotracking. Thanks for the tip.
"OOP has clearly failed" Sorry, but this article has zero credibility from this statement alone (not to mention various other things). We have entire industries run on OOP code. It powers systems that are critical to the lives of pretty much everyone in the first world. To say it's obviously failed is simply delusional. Even if you truly believe that the world would be 5x better if everyone used functional programming, it doesn't mean OOP has failed in any way. Also, the industry is switching to a mix of functional and OOP. It doesn't have to be one or the other.
This looks really cool! Thanks for writing up and sharing.
No idea what TOAST is or how it serves it's images. You should contact their support. In order to access a service outside the server, public internet IP addresses have to be bound. There's a decent amount of work just to get that part stable. Not the least of which is security and load. I'm assuming TOAST manages that for you. My guess is they can enable public WWW traffic if you get some public DNS assets like a name &amp; SSL cert. This isn't a .Net issue, it's a public www networking issue.
No sane manager would ask a .net team to make Java app unless he wanted the project to fail.
It‚Äôs no big deal. Just keep it simple and use dependency injection everywhere and add references via NuGet packages instead of .dlls. You will be used to .Net Core quickly. It‚Äôs easy. Not painless, but don‚Äôt get frustrated. If it seems difficult you are probably doing it wrong, if it is something most applications do, it should be easy to code.
I wrote WoW UI Designer https://www.wowinterface.com/downloads/info4222-WoWUIDesigner.html which was a bit of a big project but worked out ok. Was hard to keep up with wow updates, especially when you didn't play any more, so left it behind a long time ago.
Cool, thanks.
At face value, this article seems to be promoting functional programming, yet I'm getting a sense that the article is more like a facade for promoting JavaScript over OOP languages... I say this because this person says that functional programming is the answer to OOP, yet he completely disregards F#... If you're making a huge deal about functional programming, then why are you disregarding Microsoft's functional programming language or other functional programming languages?
https://discordapp.com/invite/ccyrDKv
Try askin here /r/csharp even?
But those aren't all free....
##csharp on freenode
Most of us get paid for their job done with dot net tools, why don't pay for some really really good tool that's going to make our life easier?
Just me taking issue with "stupidly simple to build and make work". Especially the "make work" part comes with plenty of difficulty to do at scale.
I do. Am pointing out that OP is labeling it as "free software". This is factually and objectively incorrect, in every sense of the meaning. Does that help clarify?
Also interested. Also, any Slack channels (since I have it open at work/home already, but not Discord) ?
I was preaching oop until i found node and golang...
Of course, it's a classic "Draw the rest of the fucking owl" situation :) I shouldn't have been so glib. If software was easy we wouldn't be here :) I build enterprise distributed systems reliant on services provided by separate entities, both inside the enterprise and outside, so I encounter all of the problems you listed. But if you strip distributed systems down to the metal the complicated bit is deciding where the domain boundaries are, rather than the technical specifics. If you don't already have solutions to the problems in your list, you can layer them in as you go. Authentication would probably be first, followed by being able to correlate transactions as they pass through the systems, and so on. &amp;#x200B; I'm not really against Java and Spring, but it seems absurd to force a .NET team to learn a totally new language and framework, the framework being the complicated bit. The biggest problem will be finding developers who are good at both .NET and Java (again with all the frameworks) , assuming they have legacy .NET stuff to continue to maintain. That's without all the CI pipeline stuff and so on.
You make a nuget package for 13 lines of code???
Thanks man! Happy you found it helpful!
Even worse: He made a NuGet package to just have more obfuscated code. We gotta start to be more like npmjs, or we lose the fight! (I just puked a bit writing that..)
discord.gg/developers Not specific to .Net but there's a few of the mods that work with .Net every day.
&gt; I've used Kotlin in Android development and it is a really awesome language. How so?
It's a convenience thing. If you've ever been deep in debugging where stuff is intermingled in various way, you'd understand.
There's no obfuscation, because you'd use this only when debugging and delete it after.
Your first invoite in Discord was not working
Fixen the link!
Hi /u/Morunek, I'm trying to use this library in a dotnet core web app but I'm getting the following exception: "Unable to load DLL 'pdfium\_x64' or one of its dependencies" I've characterised it here ( [https://github.com/ArgusMagnus/PDFiumSharp/issues/11](https://github.com/ArgusMagnus/PDFiumSharp/issues/11) ) with some repo's. Have you ever had this problem? I'm struggling to fix it. What types of projects have you used it in? There must be something about web apps that stop it from working as it's working in a console app..
I got as far as "Erlang is OOP in its purest form" and stopped reading, I skimmed the bits further down. All your arguments for why OOP is bad boil down to people doing OOP wrong. FP is great, but most FP principles can be applied in OOP languages such as C# while retaining flexibility. I found the whole thing annoying. You have a section talking about refactoring, and your example is an unnecessary/bad refactoring.
NDepend sounded interesting right until I got to the pricing page üò≤
If OP is promoting JS (and you may well be right) they're doing it wrong. JS was never intended to be functional, modern JS adopts functional paradigms in the same way we do in C#. It was just an annoying mess.
Here's a one-liner that does the same, if you configured your WER settings accordingly: System.Diagnostics.Debugger.Break(); No need for a package.
If you hate JavaScript, TypeScript can help you with some tooling and "types".
If anything there's a bigger chance they'll integrate with WinUI 3.0 using Xaml components as they have full control on what to update to make Blazor more intuitive for non html UI. The harder part is how to make WinUI xplat but that's in consideration for the WinUI team after 3.0 hits live.
It's pretty easy. Honestly the biggest change is the lack of a web.config. You will need to get comfortable with program.cs and startup.cs
What is the point of posting blazor related stuff on r/dotnet instead of r/blazor if exactly the same video was here two days ago? Do you use Internet Explorer?
I mean you were basically straight up mocking a guy whose first language is clearly not English, who actually had some good points. That‚Äôs honestly the real reason I even butted in.
Did you it for a commercial project?
Yes, I do it at work. Why not? I want to find some valuable cases with AI.
Its due to the lifecycle event that called the async request `OnInitAsync`, after this method finishes it automatically calls the `StateHasChanged` component function to diff the current state vs the old one to determine if a render is needed. This happens automatically for alot of stuff (events, parameter updates, cascading parameter updates etc...) so you don't need to manually call `StateHasChanged` to tell the app to rediff. But there are cases the component doesn't know an update is needed, mostly this happens when an update is triggered out of bounds that Blazor has no control over like chained async events or timers. Say an example like this won't work as you'd expect. &lt;p&gt;This number will update to 5 after 1 second: @number&lt;/p&gt; @code { int number = 0; override async Task OnInitAsync() { await Task.Delay(1000); number = 5; await Task.Delay(5000); } } What will happen is that it'll update to 5 after 6 seconds if you don't manually call `StateHasChanged()` after updating the number since Blazor will only try to re-calculate the diff before the method starts and after it finishes. Same thing for cases like tracking download progress or Timers that call a callback after each interval.
Yes. It's for a B2B eCommerce site. Not super high traffic but I suppose it's equipped to scale if it was.
ad WER&gt; Sometimes I can't (or don't want to) change that. ad breakpoints&gt; Breakpoints, etc. need debugger attached. And attaching debugger is sometimes difficult, i.e. when the managed code is loaded manually into unmanaged process, or you're waiting for some trigger, etc. Especially if the code I'm debugging isn't mine I find this helpful to start deciphering what's going on.
Could of at least spelled "Grammar" right when mocking that dude.
[Valid cert would be a good start](http://prntscr.com/oe5nm6)
The slack channel for [the coding blocks podcast](https://www.codingblocks.net) is brilliant. As is the podcast. Really active community.
So, I have a question. In the .NET Framework version, you add this to the callback, to automatically refresh the info: UpdateCallback = (CacheEntryUpdateArguments args) =&gt; { if (args.RemovedReason == CacheEntryRemovedReason.Expired) { //[...] // Get the potentially new data var newEntity = GetConfigurationFromRemoteLocation(provider); //[...] } } But then in the .NET Core version, in the callback you just reinsert the old value without asking for the new one. EvictionCallback = (key, value, reason, state) =&gt; { if (reason == EvictionReason.TokenExpired || reason == EvictionReason.Expired) { memoryCache.Set(key, value, GetMemoryCacheEntryOptions(expireInSeconds)); // 1 hour // ---- I was expecting a call to GetSettingsFromRemoteLocation() here ---- // } } Is this a mistake, or are you refreshing the info at another point and I missed it? ---- Thanks anyways, the whole idea seems very neat and easy to understand.
It uses pretty terse syntax for example here is the complete definition for a person class: &amp;#x200B; class Person(val firstName: String, val lastName: String, var age: Int) &amp;#x200B; Want a singleton, no need for private constructor and all that mumbo jumbo, just use the object keyword instead of the class keyword and voila you have a singleton: &amp;#x200B; object AccountService {...} &amp;#x200B; Also there are enum classes which have initializers (i.e. constructors), their own methods and can implement interfaces. &amp;#x200B; Interfaces can also have their own default methods (just like the upcoming C# 8 feature). Also instead of switch you have the when syntax (also a form of it being adopted in C# 8). It enforces non-nullables. Also[read up on let, run, apply and also](https://medium.com/@elye.project/mastering-kotlin-standard-functions-run-with-let-also-and-apply-9cd334b0ef84). Sealed and data classes (also to be soon co-opted by future C#). Co-routines i.e. asynchronous/threading support is pretty powerful. Ton of stuff I could go on about. Only thing I don't like about Kotlin is type erasure with its Generics which only occurs when you're running against the JVM but not in Kotlin Native.
You're right - good catch! I'm essentially creating a cache object that will never expire which I guess could be a behavior that you want in some specific case, but it's not the idea of the post. I'll add a comment around that part when I'm back at home to make it more clear.
Oh dear
It was wrong of me to mock him in that fashion. But to be fair, I only did it once and it was before he actually made any arguments.
The second invite expired/invalid.
&gt;I didn't realize the devs who created the class were using a class field to store the response message. Once I refactored to remove that field and create a new instance and dispose of the response message as necessary, my issue disappeared. And, as you stated, it was an issue in our own code.
Almost all of these have alternatives that work just as well, not sure if this is the right message for people just starting out.
Link doesn't work for me.
This was a great article, didn't know about Serverless CLI. I have been using the AWS toolkit, and it has been working great for me. Other than being able to use the stage parameter when building (super useful) is there another thing Serverless CLI would provide over the AWS toolkit for VS?
Thanks! In all honesty, I'm not familiar enough with the AWS Toolkit in VS to be able to assertively answer your question. I think it's more about whether the reusability/familiarity/portability of the Serverless CLI appeals to you rather than trying to find holes in the AWS Toolkit for VS.
But can you do it in polynomial Time üòú
Well the benefits of the AWS toolkit is the scaffolding, deployments from the IDE, and updates to the extensions out of the box. Nothing really to complain about, but wondering if Serverless with give a ++ in ways that the article may not have covered. Will check it out and report back.
\&gt; AWS toolkit is the scaffolding, deployments from the IDE What kind of scaffolding out of interest? As for deployments from IDE, I guess that is a subjective thing. Since it also means if someone doesn't have VS installed on the PC they're working on, they cannot deploy versus the Serverless CLI. &amp;#x200B; Let me know about your findings!
The toolkit comes with a bunch of templates out of the box thats very helpful: https://i.imgur.com/K528tpJ.jpg It generates all the classes and hooks to format your project for easy deployment.
Ah yes, them! I've used the Serverless Application template. Personally didn't find it like it was that revolutionary, but it certainly saves a couple of minutes to get going. I wonder if these templates available to install in to the dotnet CLI? So you can do dotnet new {aws serverless app} without having the toolset installed? Do you know by any chance?
If you can, just focus on .net core. I use vs code with core on a Mac and it's lovely.
The shop that wants to hire me uses .net I'm wondering if .net core will be ok for learning the basics. I'm a rails developer previously
.net core is .net.
it depends, did the req list any acronyms like WPF, WCF, WWF etc? If so while core will give you the basics of the language they may be expecting specific knowledge with parts of common framework APIs. If not you might be fine just learning the language and basic toolkit.
I went the other way around. Dotnet core seems a little weird compared to dotnet. You should be final. Entity framework is really weird with dotnet core.
The kind of nice thing about Vue is it's not as "greedy" about being the one and only for your front-end like Angular is. If you want to use Vue on each separate page, it's not going to do any harm. In scenarios like that, I've just passed my model to the view from the controller like I'm using Razor, but I use Vue to access the data in the model instead of Razor.
 Plz welp Q.Q
If you want to do it the pure way it is probably easiest to just create a separate UI project in Vue and an API project in .NET Core. Unfortunately there are not templates that exist or that are as good as the Angular and React ones. SPA is the way to go in my opinion. You can slap Vue into individual Razor views but then you're creating multiple Vue apps on top of a Razor app. It seems like it would be very confusing for anyone else coming into the code. Using vue-cli you can template an SPA with routing very easily. I think it would faster to template out an SPA this way than to brute-force Vue into a .NET MVC app, to be honest.
I found this template yesterday, what great timing! The TypeScript piece is optional. [ASP.NET Core 2.2 multi-page Vue.js with TypeScript template](https://github.com/danijelh/aspnetcore-vue-typescript-template)
This looks promising...
I haven‚Äôt used it yet, but I thought the same.
left-pad
Right but I think OP was referring to the framework vs core
I think using azure for this might complicate matters. Setting up a single domain controller isn't really complicated. Just install water version of windows server you have at hand in a VM and and add the DC server feature. No activation required for a short-lived test server.
Do you have an MSDN subscription? Windows Server (and like a thousand other applications of all different versions and languages) is available to subscribers to download for testing software.
I just need to make sure I can jump into .net mvc and that core won't steer me in the wrong direction.
&gt; If you want to do it the pure way it is probably easiest to just create a separate UI project in Vue and an API project in .NET Core. Yeah, this seems like the way to go to me.
Reshaper has a free version?
Nope. 30-day trial. I imagine they also offer it for free use by students like their other products. Does not qualify as free unless you consider using another's key or license server as free (aka pirating), in which case all software is free by that definition.
Why would you use Vue for a simple CRUD application? That‚Äôs complete overkill unless it‚Äôs a learning exercise.
This is my current MO for greenfield web dev. Sprinkle on some Element UI for extra glitter and good to go.
Do this. Don't try to mock AD - too complicated and AD had enough quirks that you're gonna want to test your app with a real instance of AD.
Interesting strategies for high performance c#. Guy apparently does a thing called RavenDB, which I am unfamiliar with, however any database is going to be very demanding on perf. There is some about unsafe code, however much is just generally good advice. Concepts I found interesting/had forgotten: - When structs are used for generic parameters, the instance of that method is specialized. This can help reduce allocations. Don't pass by interface, but rather via a generic type parameter with a constraint. - As a corollary to the first, using things like "if typeof(T) == typeof(MyStruct)" can be known at compile time because of the specialization. This can reduce branching and boxing and casts. RYUJIT is becoming very good. Excited to see the further perf work coming.
Works for me. Here's a mirror from the Google cache http://webcache.googleusercontent.com/search?output=search&amp;sclient=psy-ab&amp;q=cache%3Ahttps%3A%2F%2Fhabr.com%2Fen%2Fpost%2F458400%2F&amp;=&amp;=&amp;oq=&amp;pbx=1
Yes, this kind of "progressive enhancement" is a stated goal of Vue &gt; Vue (pronounced /vjuÀê/, like **view**) is a **progressive framework** for building user interfaces. Unlike other monolithic frameworks, Vue is designed from the ground up to be incrementally adoptable. It's especially powerful and productive when used with a solid framework like aspnet mvc.
Many of the basic APIs are the same. .NET Core is a rewrite from the ground up and won't reach full API parity with .NET Framework until the upcoming 3.0 release. In particular there are in Winforms or WPF. So if you would be working on those types of apps you would need to work with the 3.0 beta if you can't use the Windows .NET Framework as 2.2 has zero support. On the other hand if you would be doing ASP.NET, ASP.NET also got a full rewrite for .NET Core. The way you some stuff is different, and definitely the way you can deploy (since you no longer need IIS, since you need to be able to run on Mac and Linux). I think core concepts should carry over but precise code might not.
A tool that would monitor when a seat was available in classes that I needed so I could graduate on time
Something similar happened at a fintech firm I worked at. They hired a new VP of architecture who was a Java Spring guy. He basically put a target on all the .NET engineer's backs (and any manager that refused to see things his way) and either offshored or laid off them off. Then he started bringing in people that he knew from Pivotal and other places. Luckily, I saw the writing on the wall and quit before the barrel hit my projects. There is only one .NET engineer left, the rest of the organization is a Java and BPM shop now. It went from exclusively .NET to exclusively Java/BPM. With that said, unless you have a great network to fall back on in-case they decide that you are a barrier and can be a upfront with your concerns and objections... I'd keep my head low and act like I'm 100% on board while looking for another job.
You may be interested in the blog by Ayende ( [https://ayende.com/blog/](https://ayende.com/blog/) ) who started RavenDB (he posts a lot of perf optimization posts on his blog).
RavenDB is a fantastic document database, made for .net. I've only recently discovered it and I'm i'm in love.
I was accepted into the Xbox Community Developers Program (XCDP) right after high school while I was working at OfficeMax. The program provided me with a web service that allowed me to access xbox live presence information. This was back in the day when people used to put their gamercard in their forum signature (in fact, that was an XCDP project by another developer). It allowed me to create unique xbox live-oriented applications that I could distribute to others while learning about WPF and .NET in general. The WPF app would allow people to manage their friends list and it allowed for an (in app only) extension beyond the 100 friends limit. Another WPF app was called teamplay where I allowed people to create gaming groups and yet another WPF app that would track your halo gameplay and allow you access to exclusive tournaments if you earned enough points when playing against another member in random matchmaking or via direct challenge... It was pretty cool but a lot of it ended up becoming first-party features in the xbox app and all that years later. We had our own community so I was able to learn by distributing the apps, getting feedback, and continuing to hone my skills from there... Sadly, Microsoft dropped support for XCDP but by then, I was already in my second professional job as a software engineer. https://www.youtube.com/watch?v=ia5RhqMLi0g https://www.youtube.com/watch?v=7l2vfpi6TOw I think the successor was the Xbox Live Creators Program but I'm not too sure as they pretty much ghosted us once they decided that they didn't need our creativity (not a jab, it gave me an excellent opportunity to learn and get my start so I ended up getting something out of it.). Maybe something like that might be an interesting avenue? Something that you feel passionate about, can get people to actually use, and hone your skills in the process? It's a lot more fun and interesting than contributing to repositories, you'll go though many code reviews and mentors in your career but you only get few opportunities to truly light that spark. :) Just my two-cents.
This. Setting up a domain controller and testing domain takes maybe ten to fifteen minutes, depending on your hardware. After that, you're set for most testing. If you get super fancy, setting up CS and FS on top of DS is like another hour, which would cover 99.9% of your use cases.
CRUD means showing a list of items in a table. The user can edit fields, delete columns like in excel. One would always want to use either telerik , Ko.js etc
Rider has won me over as a Linux user from Visual Studio on Windows (sorry, never used the Mac version!). Was a Resharper user, so Rider was basically just the independent IDE version of that plugin. I find it far better on performance and resource usage (by a magnitude). It leaves all the bloat behind that most users do not need. Both offer a very similar experience when it comes down to just straight writing code, though I find JetBrain's does a very good job of keeping their suite consistent, intuitive, and user-friendly. The consistency is very much appreciated as I also need to code in other languages, such as Python, Ruby, Java, and C, and also use their IDEs for those projects. This is not any slight against Visual Studio, still love it, just don't use it anymore due to my OS choice. If you are a Visual Studio with Resharper user, the switch to Rider is quite painless, and you won't find yourself missing much at all. Rider also receives major feature updates much more often.
On Windows Rider is just not mature enough compared to VS. It needs few more years to grow. On Linux/Mac hovewer the difference is blurred and Rider seems to be a fair choice. I use Rider on Linux but VS on windows
Are you sure about the second point? You can‚Äôt even assign `typeof(int)` to a `const` because the type information may change depending on the runtime.
A lot of infrastructure code is vastly different between ASP.NET MVC and ASP.NET Core. It's not a simple jump.
VS4Mac has the nasty tendency to break project files that use wildcard includes as it expands them to individual includes of all matching files while keeping the original entry. This also breaks the build since affected files are included twice. Just a little anecdote, VS4Mac never really managed to convince me like this.
I switched from VS for Mac to Rider. I'm not a fan of VS - on either Mac or Windows - I find it too bloaty and prefer the slimmed down Rider which has built in Resharper.
I'm not sure how 'essential' these tools are since I develop on a Mac and can't use most of them even if I was willing to pay for them.
I like typescript better as well but right now considering whats going on with flutter and Fuchsia I'd rather make the investment in Dart.
Right. For example, I really prefer dnSpy over Reflector. It's *way* cooler and doesn't bother you with registration and stuff. Also, I won't support companies that take over free software and make it commercial.
To keep the state (filters, sorting, page number, unchanged rows) local instead of doing a server roundtrip with it and to minimize reloading, basically what Knockout or jQuery+Ajax helpers intent was years ago but with a more current framework.
I think Rider has a large number of handy hot keys, which make your code editing more comfortable. Also, Rider has more intuitive version control system tool. In other functions I didn't get big difference
Better start getting used to it, nearly all of Microsoft's support is behind .NET Core, not .NET Framework. Microsoft never announces the end of a product, they simple slowly abandon it (Silverlight, etc). Soon as .NET Core has a Microsoft-developed GUI toolkit that is also cross-platform, say bye-bye to .NET Framework. Even without that, .NET Core is already the .NET implementation most in use by most all new projects, and many others have already been ported. Once full maturity is reached, there is little to no reason to maintain both implementations.
There is also https://directory.apache.org/studio/ Only used it with Spring though
Yeah but when replacing the type placeholder you would end up with `typeof(MyStruct) == typeof(MyStruct)` which clearly evaluates to `true`. The concrete instance is not even needed at this point to eliminate the condition
Threads like this from the other day have put me off trying it, but I'm interested in other perspectives: [https://www.reddit.com/r/dotnet/comments/c92l4q/two\_years\_of\_pain\_and\_joy\_with\_nosql\_database/](https://www.reddit.com/r/dotnet/comments/c92l4q/two_years_of_pain_and_joy_with_nosql_database/) What is it that you've fallen in love with? How big is the project you're using it on?
They're still supporting Xamarin?
RemindMe! 3 days
I will be messaging you on [**2019-07-16 13:20:12 UTC**](http://www.wolframalpha.com/input/?i=2019-07-16%2013:20:12%20UTC%20To%20Local%20Time) to remind you of [**this link**](https://np.reddit.com/r/dotnet/comments/ccj1zb/patterns_for_highperformance_c_federico_andres/etod7wi/) [**CLICK THIS LINK**](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5Bhttps%3A%2F%2Fwww.reddit.com%2Fr%2Fdotnet%2Fcomments%2Fccj1zb%2Fpatterns_for_highperformance_c_federico_andres%2Fetod7wi%2F%5D%0A%0ARemindMe%21%202019-07-16%2013%3A20%3A12) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete%20Comment&amp;message=Delete%21%20ccj1zb) ***** |[^(Info)](https://np.reddit.com/r/RemindMeBot/comments/c5l9ie/remindmebot_info_v20/)|[^(Custom)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=%5BLink%20or%20message%20inside%20square%20brackets%5D%0A%0ARemindMe%21%20Time%20period%20here)|[^(Your Reminders)](https://np.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List%20Of%20Reminders&amp;message=MyReminders%21)|[^(Feedback)](https://np.reddit.com/message/compose/?to=Watchful1&amp;subject=Feedback)| |-|-|-|-|
Fully. Look at the road map for dotnet 5 and whats planned as well. The only way one could think they aren't is intentional ignorance.
I don't really like to depend on tools like GitHub Desktop or others similar. Knowing how git works using commands is far more valuable imho. Of course you wouldn't need to know all ins and outs, but your standard clone, checkout, pull, push, commit and add aren't too hard to fit in one head I hope.
just install windows server on a VM and install the AD role. it shouldn‚Äôt take more than an hour to get up and running
That works, thanks.
I am glad they are making progress on this front. Flutter is eating their lunch in this Hot Reload feature.
LiveXaml has been doing very well with hot reload for over a year. But its an added cost.
Not tried LiveXAML, but I've tried Gorilla Player, Xamarin Live Preview, and the XAML Preview, and none of them have worked for my real apps, only for Hello World apps. That's always been a big annoyance for me.
&gt; I've tried Gorilla Player, Xamarin Live Preview, and the XAML Preview, and none of them have worked for my real apps I have also used all of them as well. LiveXaml is leaps and bounds better than than all of them. I honestly think it will might take another iteration of the visual studio native support to get to the scenarios that LiveXaml supports.
That's great to learn, I hated Angular for being all or nothing. Now given Blazor is around the corner, the question is whether Vue has an advantage over it, or rather over its expected final state (minimal size lib), which would justify the investment.
&gt; When structs are used for generic parameters, the instance of that method is specialized. This can help reduce allocations. Don't pass by interface, but rather via a generic type parameter with a constraint. I shamelessly stole Ayende's dictionary implementation utilizing this strategy. Actually, I've stolen a number of his techniques. Good stuff on his blog over the years. Give it a concrete, struct `IEqualityComparer`type argument and the calls will get inlined. Unfortunately, the BCL's `StringComparer` is an abstract class which can interfere with inlining, and the meat of the implementations are private/internal, so to get full performance I also had to re-implement string comparer's in my own project. Side benefit with that, though, is if you find your hot path is dealing with a particular type of string - GUIDs, for example (or Base32 encoded GUIDs in my case), then the loop unrolling in the comparer can be optimized for the common string length.
C#.net Dot Net Framework Entity Framework HTML, CSS, Javascript These are the prerequisites.
You dis t mention what type of actions you need to take. If its simple read only actions just use production. If you need update/changes then setup a hyper v i stance of server for your needs.
Why do you believe it isn‚Äôt mature enough on windows? There hasn‚Äôt been a single thing I haven‚Äôt been able to do in Rider vs Studio on windows. Not hating, just curious.
I fell in love with the code first approach and how it is implemented. It took me all of 15 minutes to become productive with it. I stood up a proof of concept eCommerce website using it as my store in about a week without any struggles. I like that you can send complex operations to be execute at the database level to ensure atomicity. For example, conditional updating of array elements has always been a PITA in mongo. As far as project size, I've only ever used it in smaller applications, but I had started research to see if I would be comfortable with using it in a well scoped production application (in other words, not some giant monolith). I've heard that RDB has had issues in v3.0 and below with rebuilding indexes on large data sets, but then I read that it was resolved in 4.x, and I've heard issues with performance in certain scenarios. Most of the scenarios turned out to be (when digging in deeper) when RDB was being used like a data warehouse, when developers are trying to crunch analytics on the fly, or when developers try to apply RDMS techniques and practices to a document database, so I don't count those in my opinion of the database because I do not design software that way. So, not speaking from direct experience quite yet, it seems to do well when used as an operational data store. I would say the same about CosmosDB, to be honest.
I think this is the best way to handle distributed transactions, but in my case it would be an overkill. I just simply added storage service which I use to store the file in case database record is written. I specially use this for profile registration and does not make sense to split it in separate services since these two operations in order to complete registration directly depend on each other, so I kept it in a same service
Coming from the ASP.NET Core world, one thing that‚Äôs been really jarring when getting into Xamarin is how many basic quality of life features are locked behind a subscription. üòï
Interesting comment, I find core in general a nicer experience as you can pick and choose what you need in a much nicer fashion. Also EF is very similar and better in many ways, unless you are used to using a EDMX as this is not supported in core ( and won't ever be ).
Interesting comment, I find core in general a nicer experience as you can pick and choose what you need in a much nicer fashion. Also EF is very similar and better in many ways, unless you are used to using a EDMX as this is not supported in core ( and won't ever be ).
Damn I just need fundamentals I guess I can redo it in a windows VM
Isn't C# a bad choice if you're this worried about performance?
Can someone please explain why you wouldn't do SPA with Vue? I am new to Vue/SPA and am transitioning my CRUD project from razor pages to Vue and really like the more seamless loading and enjoy Vuetify more than Bootstrap. Do you not have to make an API if you use multi page or something? What are the benefits of multi page?
Has anyone wrote a paper titled " 'Considered Harmful' Considered Hamful" yet?
There are two basic approaches. 1. The application can host an instance of the CLR and use it to execute and otherwise interact with .Net assemblies. 2. The .Net assembly can be expose an RPC mechanism. Neither of these is very elegant and neither gives you a particularly natural binding between .Net and another runtime, though.
I have had some success with [UnmanagedExports](https://www.nuget.org/packages/UnmanagedExports). Basically allows you to export functions as if it was a C/C++ library. I have used before to allow native Ruby to call .NET functions with Fiddle. Bear in mind all the same rules apply for interop as they would with a C/C++ library, you have to also create the bindings for it, can just create a new class instance and use it. This means your .NET code will have to be largely static, use structs, and written in a largely non-object-oriented way, at least for the exported place. If you intend to share objects, you will have to store them yourself in .NET to keep a reference valid, and have the interopping language tell them when to be destroyed, as the GC has no idea that your language is using that object. Overall, your better off to just use C/C++ in this instance, or don't be using for sharing an instance of something.
RemindMe! 2 days
Back in the old days, I spent a lot of time looking at the ibuyspy portal, which became DNN. The ibuyspy storefront which spawned a bunch of forks like the commerce starter kit by Rob Conery. &amp;#x200B; There were a second round of "starter kits" like tailspin spyworks or mvc music store, but the latest is the contoso universtity tutorial: [https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application](https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application) It was seeing the full application come to life that was great for me to get involved. &amp;#x200B; If it comes to things *you* want to do to learn, just find a problem and fix it. Many things you think of will probably have a solution out there already. So what? Build it anyway. Its not reinventing the wheel if your primary goal is to learn, not produce a product. Start small, learn, and have fun.
Would another option be to turn the .net assembly into a Web API and have your non .Net language just make http calls to it?
https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting
[https://docs.microsoft.com/en-gb/dotnet/framework/unmanaged-api/hosting/index](https://docs.microsoft.com/en-gb/dotnet/framework/unmanaged-api/hosting/index) &amp;#x200B; [https://docs.microsoft.com/en-gb/previous-versions/dotnet/netframework-4.0/dd380850%28v%3dvs.100%29](https://docs.microsoft.com/en-gb/previous-versions/dotnet/netframework-4.0/dd380850%28v%3dvs.100%29) (.NET 4.0, but still relevant)
no, because the intended use case is that someone else has provided you the .net assembly. for example, an instrument manufacturer may ship a .net assembly to interact with their instrument (a common thing). then you want to use your programming language and not a .net language or some other langauge that can call .net assemblies.
In this case it actually is a problem and there is a solution.
thanks for that. do you have any references for the first approach? i have used the .net integration in labview, and it is actually pretty good. you reference the assembly, which imports the classes and constructors. then you can just do .net programming in labview. this is a life saver for integrating .net framework libraries but also third party .net APIs, like those provided by instrument manufacturers. it isn't really intended for anything other than situations that a .net assembly can give you something you otherwise couldn't do or would duplicate some functionality already in the .net library. in matlab, it's good too but very slow. does .net core provide any special sauce for this?
Not really. And even so, you can still want your core libraries to be fast.
I think the term to search for is ‚ÄúCLR hosting‚Äù. I haven‚Äôt done it myself, though, and I don‚Äôt know about .Net Core.
okay, thank you. gonna be some work. O_O
thank you for the link.
I know I was just making a joke about so many things using the cliche.
thanks!
I really like Xamarin.Forms. We've been using it at my company to make iOS and Android apps for over a year now and it works great. But I lose 30-60 minutes a day waiting for builds to complete and install on my test devices/simulators. Lately I've been checking out Flutter. The savings in iteration time is amazing. And while I don't mind XAML, being able to define the UI and all of the control logic in the same language without having to context switch when alternating between them is pretty appealing. I've also found that Android Studio is much snappier than Visual Studio, especially on Mac OS. This Xamarin hot reload feature is going to have to "just work" the way it does in Flutter if Microsoft wants us to stick with Xamarin in the long term. The one remaining unknown I haven't examined yet is how well Flutter works with AppCenter.
"I would like to use .net but not use .net"
Interesting. Thanks for the detailed reply. I'm definitely going to be keeping my eye on it.
what does that mean? it's a common use case.
Blazor running server-side can be used to add interactivity to small areas instead of the whole page, so yes in that case you don't need JS anymore. Blazor client-side currently doesn't have that and is more all or nothing instead of running in a specific area (at least right now). So if you want server-generated pages with some interactivity running completely on the client then Vue is probably the best bet today. It's also pretty fast and natural to use with HTML, and has a major community with lots of libraries so it's a not bad choice. I recommend choosing what gets the job done today, you can always refactor page by page in the future if you need to.
I meant client-side Blazor. They plan to do AOT and trimming, and the original preview had 60kB runtime, so it will be interesting to watch where they can get. You can use it in preview today and in stable with .NET Core 3.X, if I remember that correctly.
I've come to similar conclusions since making a Xamarin.Forms app in the last 2 years. Coming from a entirely WPF background it's been tough to adjust to the quality &amp; lack of features in comparison. The Xamarin Live Player should have been amazing on paper but had so many limitations I never got it working once (No support for .NET standard at the time I tried, also failed on a brand new master/detail app). I'm hoping this Hot Reload functionality is not based on the code from the Live Player.. I'm looking forward to the next year with Xamarin but Flutter is tempting.
I've not used it but thought I'd link to a post I read years ago about a company switching away from RavenDB: https://octopus.com/blog/3.0-switching-to-sql
I've come across that one too (also from this sub I believe). Add it to the list of reasons I'm so hesitant to spend time with RavenDB, or any NoSQL product for that matter. I remain curious though.
Because he's a man of focus, commitment and sheer fcking will.
How is vue overkill? It‚Äôs not huge and can scale when you need it to. Are you trying to make things difficult for future enhancements or developers on the project?
Why would you use knockout over vue for new projects? I‚Äôve consulted so many projects where ko was causing more headaches than solutions. I personally can‚Äôt name one benefit ko has over vue today.
Ha. I had forgotten about Xamarin Live Player. That was a major disappointment. There is so much about Xamarin that seems like it could be so much better than it is. Despite its problems it really is pretty nice overall though. Realistically we'll be on Xamarin for quite a while. Realities of deadlines and schedules and all that. I'm already working in my spare time on the Flutter demo to show the bosses though.
very interesting. a poster above mentioned his blog, I'll be sure to check it out. sounds great.
I think there was a time when it could be said that c# simply could not perform in these kind of situations. it's not clear to me precisely what changed, but since then advent of .net core, performance is no longer a second tier priority. i think a big instigator here was kestrel. ms wanted aspnet core to be a "real" option. so they needed a "real" first class server. first class server means its easy and fast. so, we get span, valuetask, channels, and nice stuff like built in di. i suspect it is a non-goal to beat c++ et al in perf, but you can actually get pretty close while enjoying other benefits of c# and .net. certainly not fit for all situations, but the perf improvements expand .net's usefulness.
How many are there? Can you list them? At least this post is about one of those being built in. Microsoft can absorb these costs. Nothing wrong with a single developer seeing a missing feature and wanting to monetize all their effort.
What quickly comes to my mind is that I aside of asp net (core) development I do WPF and WF. And Rider is just slowly starting to support WF.
But please have them create an account specifically for this - you don't want to get yourself locked out.
While using rider, i got a massive amount of JavaScript errors (my project also has JavaScript). And I couldn't seem to fix it.
Vue js is great, but tbf I don't have much experience with the other ones
God, I don't understand why css was made in such a poor way
No, you definitely want 8 gb at least
If you are using Windows, COM Interop works boringly stable.
http://pythonnet.github.io/ does this for cpython
Right, I mentioned that but client-side is currently an all-or-nothing approach. Only server-side Blazor lets you add interactivity to small components of the page instead of the entire site. I believe they'll get the client-side there eventually but its not as simple as using Vue today if you just want certain sections of a page to be managed on the front-end. Also client-side Blazor will not launch with [asp.net](https://asp.net) core 3.0, it's going to come later as they're still working through all the WebAssembly quirks.
When it comes to languages, almost everything is good for building anything. Your team's familiarity and productivity is the single biggest factor in building a successful project. There is no significant advantage that Java Spring will give you with microservices (whatever that even means to your company) but the lack of experience will make you far slower and less capable of actually building anything.
Why? Computers dont care how code is deployed, whether its all just the same single binary or 100s of different containers and apps in different languages. It's purely a human/team distinction 99% of the time.
No need to transpile? I guess that is the reason people use jQuery. My kockout project would at least need vuex to run in vue.
* React is just a view engine. It gives you one-way "reactivity" so a data model (usually just some JSON) can change and your view (the HTML output) changes automatically in response. It's very lean and fast but it leaves a lot up to you if you want more functionality, including routing, forms, validation, UI components, styling, etc. Best for building entire SPA instead of adding on top of server-side pages. There is R[eactJS.net](https://reactjs.net/) for integration but I recommend just adding the JS to the pages you need. Require a build step (webpack) to avoid massive JS files. Works well with Typescript. JSX is powerful and easier to work with (because creating declarative code like HTML inside an imperative language is easier than trying to force complex language inside HTML tags). * Vue is a full framework that is more opinionated then React and comes with a default routing and state management library. Designed from the ground-up to be used as progressive-enhancement so you can build an entire app in Vue or just add interactivity to certain parts of a page. It works with normal HTML templates and has lots of helpers and "conventions" that make it easy to add bindings and automatic updates. Can also support JSX. Not very good typescript support yet. * Angular is a big heavy and very opionanted framework written in Typescript. Almost all Angular apps look and work the same way in code so it's very easy to jump into projects and everyone uses the same libraries so there's almost always a default way to do something. Really only useful for building an entire app and too heavy if you just want small bits of a page to be interactive. Recommend React if you want an entire SPA or Vue if you have [asp.net](https://asp.net) core pages and need some interactivity on top. Angular if you want an entire SPA but don't want to use React and/or want everything already setup instead of finding all the libraries you need yourself.
What?
Good point, they mentioned that you should be able to decide whether the same code runs on the client or server, but that still doesn't mean it's page by page. Have you heard them menton this scenario explicitly?
Daniel Roth's has shown it before in a presentation. Server-side Blazor components can be added to any MVC view page using `@(await Html.RenderComponentAsync&lt;Component&gt;())` along with the blazor.js script tag somewhere in the site layout.
Thanks, but it remains ambiguous whether they plan to do the same for the client side.
You can start thinking about the class diagram, planning the models you will need, the architecture... you can user [draw.io](https://www.draw.io/](https://www.draw.io/)
What benefit are you getting from having no need to transpile? The only benefit you‚Äôre going to get from knockout is supporting IE6+ vs IE9+ I‚Äôd argue that vuex/vue is way easier to understand and write. Knockout doesn‚Äôt use unidirectional data flow and is much messier due to the nature of two way data binding.
good news!
Ah, yes there has been no confirmation of it on the client-side other than some github discussions. That's why I recommend Vue added on a per-page basis and then replace with Blazor later if/when that functionality is available.
After switching frameworks every 1-2 years for some time now, I don't consider that an option anymore.
Invalidate cache and restart. Also check whether its indexing directories it shouldn't be.
I would use: @Html.CheckboxFor(model =&gt; model.Recipies[recipieIndex]. Ingredients [ingredientIndex].Is enabled, ...) That way the method has the full chain. (Disclaimer for misspelling and on mobile)
Just create new webapi project with `dotnet new webapi` and you will see a controller with few examples inside.
That's seems like good advices, but there are some things I don't get : like why passing a struct as interface implementation will result in a more performant code (for comparisons for example). And also how do you get the assembly code of your methods ?
What do you need to learn exactly? this is a very generic question.
The [official docs](https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.2) are pretty good.
Seems nice, thanks!!
That because I don't know the topics exactly. I want to learn authorization and authentication and all the other important topics that I should be aware of.
\+1 for this one. ( I'm +1-ing because I made it xD )
Maybe look into IronPython?
dont pass a struct as an interface, pass it as a generic type parameter with a constraint for that interface. DoSomething&lt;T&gt;(T thing) where T : IMyInterface
It's more a general .Net setup issue as i have no idea where to start. They offer some configuration panels that i have no idea what it is for. &amp;#x200B; I tried messing with it but no luck. &amp;#x200B; As for my servers, well i think there need to be ports opened of some sort ? &amp;#x200B; I'm just really clueless when it comes to those stuff :'(
Don't get me wrong, there's nothing wrong with a developer seeking compensation for their personal projects. However, it creates a higher entry barrier to newcomers compared to the more batteries-included approach of frameworks like ASP.NET Core. A few off the top of my head: - The various paid live XAML reloads for starters - There's also [Fody](https://github.com/Fody/PropertyChanged) which I started using after I saw it in a guide only to later figure out that [*technically* you're supposed to pay for it](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md). I hate all the boilerplate to manually implement property-changed events for *every* property and I'm finding it hard to go back to not using it. - Common UI control libraries for simple things like calendars. For example: [SyncFusion](https://www.syncfusion.com/xamarin-ui-controls) - Xamarin University (to be fair I heard Microsoft was working on a new free version) I will admit that it seems like Microsoft is serious about making Xamarin a 1st class experience in .NET and I welcome these new additions.
&gt;The one remaining unknown I haven't examined yet is how well Flutter works with AppCenter. [https://www.rocksolidknowledge.com/articles/using-appcenter-for-flutter-projects](https://www.rocksolidknowledge.com/articles/using-appcenter-for-flutter-projects)
 [http://pythonnet.github.io/](http://pythonnet.github.io/) &amp;#x200B; You basically host the Python interpreter in your .NET app using the C API. You can call Python libs and do interop relatively easily. The project is mature and is used by several other open-source projects.
Well you can check this course on udemy. It helped me a lot. [https://www.udemy.com/build-an-app-with-aspnet-core-and-angular-from-scratch/](https://www.udemy.com/build-an-app-with-aspnet-core-and-angular-from-scratch/) Check the topics it covers first to see if you like it or not.
This is a shitty list
&gt;A few off the top of my head: &gt; &gt;- The various paid live XAML reloads for starters Well you've about lost that as a valid reason because of the topic of this post. &gt;- There's also [Fody](https://github.com/Fody/PropertyChanged) which I started using after I saw it in a guide only to later figure out that [*technically* you're supposed to pay for it](https://github.com/Fody/Home/blob/master/pages/licensing-patron-faq.md). I hate all the boilerplate to manually implement property-changed events for *every* property and I'm finding it hard to go back to not using it. This is more an issue you have with C#. The same property handling exists for WPF. The source code to xamarin forms is available. Implement a different property change notification system yourself. &gt;- Common UI control libraries for simple things like calendars. For example: Easy to wrap one around a custom renderer if you are a decent developer . There is additionally a free version of syncfusion. If you meet their requirements for paying a license the license cost is a pittance for you. More controls are on the road map for built in support from xamarin but youde be silly to think you would get all the features of of paid library in any framework. There are native control libraries for Android and IOS that go far beyond the basic controls that they google/ios provides. &gt;- Xamarin University (to be fair I heard Microsoft was working on a new free version How is this quality of life? The source code for tools you using is available as well as decent documentation in addition to many other resources. I come from 15 years of c programming before starting with dotnet in 2001 and I'm always amazed and how much hand holding developers insist on nowawadays. The amount of resources and tooling available to developers today would be a godsend in the 1990s for me.
Does it work when you don't use the partialView?
What source control system are you using? TFVC is notoriously bad at branching. A branch in TFVC is essentially just a copy of a folder, which can be at different levels. If you branch from a folder not at the root you might end up with broken relative paths.
I actually wanted to put that in the description earlier, but yes we (unfortunately) use TFVC.
*Beep boop* I am a bot that sniffs out spammers, and this smells like spam. At least 100.0% out of the 3 submissions from /u/ahmed5_27 appear to be for courses, coupons, and things like affiliate marketing links. Don't let spam take over Reddit! Throw it out! *Bee bop*
Very good post, thank you for taking the time!
If I don‚Äôt make it a partialView, I don‚Äôt know how to update my page. When selecting your subscription model (Level 1,2,3, etc) from a select drop down, I use jQuery to asynchronously update the partial view. If I were to update the page without a partial view, how should I setup the return of my HTTP GET to force the Razor View to render the page with the updated values?
good bot
how is this spam lmao, anyway I don't know any, but there might be
I tried it, but my collection is still empty when I break into my server!
Are you inside a form?
Yes, I am
Have you looked at the generated HTML, does it actually enumerate the items in HTML?
Let me run my code again and I can show you, but yes!
I can also see you got ValidateAntiForgeryToken, do you have the code in HTML for that?
[Maybe slow down a bit](http://prntscr.com/ofaoo7)
NoSQL can be a very good secondary read only database choice. A common use case is using Elasticsearch for text search, which relational databases suck at. It's also common to separate write database from reads, for instance you write into Postgres and the have a replicator/aggregator to replicate pre-joined data into Cassandra to speed up reads. An example of unstructured data is usually logs that could come from various systems.
So the business gave you a solution and want you, the developer, to find a requirement for it?
It was more along the lines of "we want this system, can we use NoSQL for it"? Ultimately the decision is mine.
I favor them for everything at this point. Except reporting. This is just how I design now. It's just about way to model data. You can always find an optimal model in any tool.
You might want to ask around and figure out the real motivator for the business's consideration for a NoSQL DB model, instead of a traditional relational DB model. I think instead of focusing on what NoSQL DB services lack, try focusing on what you don't have to do. For example, you won't have to worry about DB migrate scripts for DB setup and upgrades, which might allow you to push updates faster and may allow you to more easily version your "database schema", allowing multiple versions of the same app to (at least) query the data. NoSQL databases have less of an explicit schema that exists in the DB itself, but since this is /r/dotnet, I assume that you'll have a project or namespace dedicated to classes that will define the schema of your data. That means that even though the DB provider does not enforce a schema, your apps will be able to. Also, although relational databases may have more utilities for entity relations, it is still possible to set up entity relations in NoSQL databases: https://docs.mongodb.com/manual/tutorial/model-referenced-one-to-many-relationships-between-documents/ There's also the possibility that managed NoSQL databases can scale more easily thanks to adoption and support by the various cloud providers, but managed SQL databases will probably also have comparable performance. I haven't seen the numbers on that, only marketing. I've also seen that some proprietary NoSQL databases (and possibly some free ones) have [built in utilities for realtime updates (Google's for example)](https://cloud.google.com/firestore/docs/query-data/listen), which will allow your apps to listen for data updates without writing all of that logic yourself. It sounds like you need to run down and document all of the pros and cons of going with a NoSQL database, including all of the things that you have to gain and all of the things you may lose, with respect and heavy emphasis on your use case. I only have experience with relational DBs as well, but I'm open to trying NoSQL for new projects. Personally, I'm deep in the world of containers, so my only restriction on what services I'll consider using boils down to whether I can "install and run it locally" (a.k.a. "does it have an entry on hub.docker.com"), regardless of whether I'll end up using a managed instance in the cloud.
this seems so ridiculous niche i get that like, a lot of your friends or coworkers and such are .net devs with card likeness to boot but im very confused
As an addendum to this, consider that maybe you should think about considering a micro-service architecture for your new app, depending on the size and scaling requirements of the new app, of course. I'm not saying that you should put all of your code inside AWS lambdas, but it may be beneficial to split your app into multiple components so that different components can be versioned independently. If any one component needs to persist data, it can be given its own database, being either relational or NoSQL depending on the apps requirements.
It really depends on your system. If you‚Äôre using a relational database and you start hitting the limits of scalability, you might consider switching to a NoSQL solution. Since you‚Äôre starting from scratch, just weigh all your options against all of your current requirements and see what the best solution is. If there is no clear winner, think about future requirements. If there‚Äôs still no clear winner, it probably doesn‚Äôt matter which one you use.
Indeed it is a total niche but it didn't prevent it me from making it:) And I also plan other languages editions - starting from JS/frontend one.
Consider how you're working with data. If the unit of work is more representative of a structured document that is always retrieved/updated as a single unit, you can save a lot of pain using document based NoSQL solution instead of wasting resources blowing it up into relational schema and recombining it back when presenting to the user. If you have mass scale requirements you're probably want to consider CQRS/ES architecture which can be better implemented with NoSQL as the data structures are generally tailored towards individual tasks: materialized views or transactional data rather than being optimized for both read/write as a relational data store would be. In most cases when people move towards NoSQL they are taking on things they get for free in SQL database inside their codebase - you need to worry about object lifecycle, serialization/deserialization compatibilities, concurrency, unit of work / transaction management. For some types of applications, those are worthy tradeoffs - for vast majority of business apps they are not. If you're in insurance, and you're using Acord it may make sense to use some kind of document store as long as you have a way of ensuring schema compatibility / upgrades in code.
Use an editorfor template instead of the partialview. This might fix it.
http://boringtechnology.club/ You're the senior dev here. Take the time to evaluate the tech, but also keep in mind the technical burden you put on the team and product by expanding your tech stack. Make that cost obvious to product so they understand what the implications are.
First of all having a schemaless data store does not mean that you don't have a schemaless. If you have classes in which you deserialize data then you still have a schema, just not in the database. A nosql database works if you cannot predict the schema upfront. This could be that you want to store different types in a single connection or that you want to support different versions of a type without needing to convert the data that already exists in your data store. But if you do know the schema up front or relate data from different entities to form different results then a relational database is a very good solution and although you could store your data in a nosql database and get the same end result it still might not be a good fit. If it looks like a duck and sounds like a duck then probably it is a duck :-)
Sadly that's the case pretty often - and now slap some blockchain onto it.
If you aren't touching any mobile development then life would be much easier staying away from Apple hardware in my experience. Depending on how much power you need Dell XPS 13/15, Surface Laptop, or Lenovo Thinkpad X1C or X1extreme would be my first choices.
To be able to answer the question you are asked about whether that nosql database is a good fit then you should include the whole architecture of your system in the answer. Just 'replacing' the rdbms with nosql without taking into account the handling of denormalized data storage, possible lack of transaction support, difficulties in generating reports, lack of ad hoc querying tools using SQL etc., etc. then it is a bad choice.
Ditto this. The only reason to pay extra for Apple hardware is if you have to do work in the Apple world.
I would skip the X1's and get a "slim" T-series like the T470s, T480s, etc. You're paying a premium for the X1 just to shave a tenth of an inch and like 6 ounces. The X1 is also more fragile, more difficult to service, and is more limited when it comes to configuration, in my experience. We currently have twice as many T-series in service as X1s.
No SQL and microservices are often a good fit but be careful with starting a microservices architecture without knowing the impact. Read this: https://www.dwmkerr.com/the-death-of-microservice-madness-in-2018/
Nice
Agreed. I'd never recommend a solution I wasn't ultimately 100% comfortable with.
tl;dr: Don't buy a MacBook if you don't want to use Mac OS. &amp;#x200B; You can get much better Hardware in terms of "power" for the same price elsewhere. &amp;#x200B; I've been using MacBooks for almost all of my personal programming projects for years and never looked back, but I really like the OS and the whole dev environment that comes along with it (also: proper bash, package managers, lots of neat open source projects available, ... and so on). I probably wouldn't buy another MBP just to run Windows on it.
Well, tell them NoSQL USED to be the new hot thing. NoSQL was largely adopted because traditional RDBMSes couldn't scale very well. NoSQL was great because you could just throw more servers at it. &amp;#x200B; However, NoSQL has drawbacks. I haven't EVER worked in an environment where no consistent data schema was useful. If someone else has experienced it, let me know. Also, all the transactional functionality is extremely useful. &amp;#x200B; Google and a lot of businesses are moving to scalable SQL solutions. E.g. Spanner: &amp;#x200B; &gt;*‚ÄúWhile these systems provided some of the benefits of a database system, they lacked many traditional database features that application developers often rely on.* ***A key example is a robust query language****, meaning that developers had to write complex code to process and aggregate the data in their applications.* ***As a result, we decided to turn Spanner into a full featured SQL system****, with query execution tightly integrated with the other architectural features of Spanner (such as strong consistency and global replication).‚Äù* &amp;#x200B; [https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a/](https://blog.timescale.com/why-sql-beating-nosql-what-this-means-for-future-of-data-time-series-database-348b777b847a/) &amp;#x200B; By the way, if you need improved query performance, consider data warehousing. &amp;#x200B; \*\*tl;dr\*\*: The new hot thing isn't NoSQL. The new hot thing is scalable SQL. &amp;#x200B; \*\*tl;dr:\*\* Seriously, don't do things just because they're trendy, or you're going to spend months switching to it only to find you've created a new set of problems.
Tell them all the cool kids are moving away from NoSQL to use SQL-like solutions that are scalable. If you're in the cloud use Azure SQL or something. If you're not do some quick calculations to show them you're not going to hit your limits.
Nah, don't switch over to microservices either. It has problems and complexity too. &amp;#x200B; Program to interfaces and put all your features into neatly separated classes. If you need a new data provider you can inject something else into it seamlessly, but here the YAGNI principle almost certainly applies.
Thanks for that, really interesting article.
&gt; If the unit of work is more representative of a structured document that is always retrieved/updated as a single unit, you can save a lot of pain using document based NoSQL solution instead of wasting resources blowing it up into relational schema and recombining it back when presenting to the user. &amp;#x200B; For most enterprise cases it's probably much better to just store it as a JSON string in SQL server, though. Then you don't have to deal with the added complexity of an entirely separate database, and there's no temptation for anyone to start putting stuff into the new DB and dealing with all the complexity that could arise.
Cool. Do you have a discount for your book? Was thinking to get a hard copy instead of reading from safari online....
Microservices makes a lot of sense when dealing with a lot of stateful services. With stateless services, which includes most web servers, they rarely more than just a way to add needless latency and deployment/testing complexity.
Wait, agile coach card is unrealistic, it should be your developer have efficiency -1. When played, your opponent skips a turn.
&gt; There's also the possibility that managed NoSQL databases can scale more easily I find that to be mostly a myth. The extra application logic you need to handle 'eventual consistency' is quite daunting when accuracy is even remotely important.
I agree that most project don't need it, but I figured that I'd mention it since the OP mentioned "mega-scale". &gt; Despite ~15 years of experience designing systems at various scales (but never internet/mega scale)
&gt; However, NoSQL has drawbacks. I haven't EVER worked in an environment where no consistent data schema was useful. If someone else has experienced it, let me know. Caches, where the application throws whatever it wants into it. If the schema changes, the whole 'database' can be cleared at the same time. Of course dedicated caching software is best for this. *** Pass-through data. For example, I was reading 1 MB JSON files off the backend and passing them along unaltered to the UI. I never queried this data, just stored it temporarily. This sounds like a perfect case for NoSQL, but really it's just a case for a denormalized table in an otherwise normal database. *** That's all I got. 20 years of database work and I haven't seen any other cases for it.
Solid suggestion. But if you cannot or don't want to embed a full Python interpreter via the C API in your .net application, you could perhaps go the route of running a separate python process with a [Pyro](https://pyro4.readthedocs.io/) server in it, and use [Pyrolite](https://pyro4.readthedocs.io/en/stable/pyrolite.html) from your .net code to call to the remote python code. It's not possible to call .net from python however, using this solution.
More importantly I'm told the temperature profiles for the CPU don't carry over to windows. Remember the i9 overheating fiasco? That's the norm in Windows.
I think the take home is "if you need denormalized data, store it as a JSON string inside SQL server." (Or as a file that SQL Server references if it's big.) There may be certain cost benefits to using a NoSQL solutions if your app is very high traffic, but that should be justified by cost calculations that include a realistic estimate of developer time and new overhead. If that seems like too much work for your small scale application, it's almost certainly a case of YAGNI.
I appreciate all of the input here. I've been reading everything closely. &amp;#x200B; To help wrap my head around the suggestions, let me ask the NoSQL folks about a contrived example from the first article I linked: &amp;#x200B; Consider this data model: TV Shows --(have many)--&gt; Episodes --(have many)--&gt; Actors &amp;#x200B; So far so good. Now I want to query my NoSQL database to find out all of the TV Shows that a particular Actor has been in. &amp;#x200B; Is this really a problem with a NoSQL solution that isn't supplemented with SQL somewhere? If so, I suppose I already have my answer regarding what's needed for my project.
No one needs a "NoSQL" database. As soon as someone asks for that you can assume they are just chasing fashion until proven otherwise. Is someone says, "I need Hadoop because I need to process these thousand of log files into something that will fit into the database" then you can seriously consider it.
...or XML if you are stuck using an older database that can't query JSON natively.
I highly recommend that you just get a windows laptop. I am currently using a MBP to do dotnet development at my current and it's awfully frustrating. I use VMware fusion and hate it. Bootcamp may be better but what's the point?
Amazing bot
Personally, I am a big fan of polyglot persistence when it comes to medium and enterprise scale applications. What we do is save information which is potentially "write once, read several times" to NoSQL database. The fact, that you can simply serialize from your DOM to the documents db and structure your data based on the business logic, not on the ERM makes things much easier.
Add a new script bundle in your bundleconfig.cs and than add @Script.Render("") in your _layout.cshtml
Isn't this the same crap we saw a week or two ago? "Main innovations. NuGet", etc.
How? Looks like they asked the same question in a few relevant subreddits. There's no referral link and they aren't linking to any course on the topic, they are asking for one.
Thank you!
There are a lot of things that fall under the NoSQL banner. The general approach for the problem described here is to de-normalize your data and store those each of those three as independent, self-contained documents (probably in a document DB instead of a key-value DB). Instead of writing a join across three tables, you just retrieve the actor document. The actor document would be self-describing and contain every episode &amp; show they've appeared in. But that list of episodes and shows within the actor document would not be explicitly tied to the episode and show documents. The cost is that when you add a new episode, you will write all of your data many times. A new episode record will get created. The show and actor records will either be created or updated. All of those records exist independently of each other and you will need to handle scenarios where you are able to write to the one table, but not to the actor table. Or one actor document, but not the second one. **Example Actor Document** { "actorId" : 258, "name" : "John Doe", "episodes" : [ { "episodeId" : 1234, "episodeName" : "Name1", "showId" : 987}, { "episodeId" : 4567, "episodeName" : "Name2", "showId" : 987}], "shows" : [{"showId" : 987, "showName": "ShowName1"}] } **Example Show Document** { "showId" : 987, "showName": "ShowName1" "episodes" : [ { "episodeId" : 1234, "episodeName" : "Name1"}, { "episodeId" : 4567, "episodeName" : "Name2"}], "actors" : [ {"actorId" : 258, "name": "John Doe"}, {"actorId" : 963, "name": "Jane Doe"}] } **Example Episode Document** { "episodeId" : 1234, "episodeName": "Name1" "show" : { "showId" : 987, "showName": "ShowName1" }, "actors" : [ {"actorId" : 258, "name": "John Doe"}, {"actorId" : 963, "name": "Jane Doe"}] } Depending on your data, de-normalization can speed up query time significantly by skipping JOINs. It can also slow read operations down if the document you need to download is big. Only performance testing would tell you which way it would go. NoSQL also enables you to scale beyond the disk-size constraints of a machine, but that really only matters if your database is measured in 10s of TB, something I've only encountered once. Generally, my philosophy is that if you need to do interesting run-time queries, use SQL. If you generally only need point queries, use NoSQL. And expect most projects to introduce the need to do run-time queries later. My canonical NoSQL example is something like your Amazon order history. If you want to see the details of an order, you just download the order document. It's write-once with point query behavior. For analytics, you export the order DB to a different data store that is more finely tuned for querying.
Worth remembering that NoSQL was an acronym for "Not Only SQL" - and was part of a movement towards polyglot persistence. There's plenty of situations where storing object graphs makes more sense than bridging the impedance mismatch between object data and relational storage - usually resulting in vastly simpler fetching and storage strategies at the cost of deep query. Think of it like this - it's good storage for things that are, literally, documents, or aggregate roots that fully contain their data.
I had exactly this at my place of work a few years. Basically, "NoSQL is the answer to all our performance issues, now make it fit". It wasn't a fad that lasted long.
It would be good to have some "discount pool" as an author, but I do not have :(
One use care is say you have a system where forms are dynamically generated based on template with different questions/input/controls for the user to fill. I work in law enforcement and the real world implementation of this is the system expecting the officer to enter in different information depending on the type of event they are responding to. &amp;#x200B; In my use case the questions we are displaying are constantling being refined and added to. The data on the other end is being sliced up for different reporting purposes. &amp;#x200B; We are accomplishing this by a system of versioning out old templates but it is a major pain. Had it been built on NoSQL it would be much more flexibile and easier to maintain
Anyway this could run ontop of mono It would be in a unity game
Haha, thanks. Never hurt to ask. Good book though
An example of document data would be something like where you track particulars of user spending habits. This by definition is not uniform. Sure, you -could- create a structure that describes everything but this takes extra work and adds to the maintenance weight as you add new facets to your store. So, you store users in the database with a JSON representation of how each likes to shop. Then you can easily run regressions and projections against the dataset.
The trade off is tool specialization. MS SQL is an excellent middle of the road, Jack of all trades. Something like Redis has a lot less baggage to do what it does well that MS SQL simply can't get around. Sure, this is a niche application, but Redis is a niche tool.
It's a mistake to think of NoSQL "vs" T-SQL. It's not one or the other. Keep structured data in a structured database.
Thank you. This was a particularly helpful explanation
HA! Man, LOL'd hard on that one. Pretty much the story of my life in corporate software development.
NoSQL: AKA Rabbit hole
We use nosql exclusively for our audit tables for events in our microservices architecture. Makes it very easy to define a relatively flat schema and store the data as json.
I use parallels and a Mac for all kinds of .net development and it‚Äôs awesome...my boss hates apple and i finally got him to get a MacBook Pro and even he admits he has never seen windows run more stable than on a Mac virtual machine. Also if you do mobile having a build host is quite handy. Parallels gives you access to both windows and osx environments at once.
Don't forget AI. It must have AI.
Never even knew it meant "Not Only SQL". I always just assumed it was something like "there is no SQL here". In the past when I've needed to store an object graph and be done with it, I've used an XML column (SQL Server) or jsonb (PostgreSQL) in a standard table, but I can see the advantages of more robust querying against these columns
Did you ask what color they want that NoSQL database in? https://dilbert.com/strip/1995-11-17
&gt; PInvokes an external library and provides it with a reference it can use to call back into .Net. That sounds nasty though. I do something similar with QmlNet. It's working fine for me. The initial setup/design though has to be right. https://github.com/qmlnet/qmlnet/blob/develop/src/net/Qml.Net/Internal/Interop.cs
In my opinion and experience: NoSQL is great for document style data that you want to retain some level of structured query capability for. An example of that from my domain is detections of events that are described as a variable length, variable depth, variable properties style document with nested structures that can grow into 30-200 kB JSON documents (that are serialized representations of an object structure). You can be amazingly productive with this kind of data in NoSQL (e.g. MongoDB). For everything that is highly structured and that benefits from ACID, go SQL. There are good abstractions available that it won't necessarily be painful to use (e.. Entity Framework).
I've been using EF Core on top of Azure SQL extensively lately, and despite some of EF Core's current shortcomings (mostly addressed in 3.0), I've come to love it
A document database / NoSQL database is functionally quite similar to XML columns or jsonb - with better querying. Postgre and SQL server have put a lot of work into fleshing out their "blob storage" technologies to query into semi-structured objects in recent years - you've probably been closer to using a NoSQL database (with some ACID on top) than you think. Speaks volumes that the design for CosmoDb on Azure is "all of the above" :)
Difficulty here depends on if they mean actual AI or the /r/Futurology type of AI where anything more complicated than a four function calculator counts as AI.
Start here: https://docs.microsoft.com/en-us/dotnet/machine-learning/tutorials/
I find it amusing that I've got to block spam posts coming from Spam_Detector_Bot.
&gt; Depending on your data, de-normalization can speed up query time significantly by skipping JOINs. It can also slow read operations down if the document you need to download is big. That's something NoSQL proponents often don't understand. The time it takes to perform the join is often much, much lower than the time it takes to load all of the redundant data needed for a denormalized storage. Of course the inverse can also be true, but that usually requires storing the data exactly in the format you need to read it in. Which is fine for caching tables, but horrible for reports.
I find it amusing that it's posting the same stupid thing on every single post in another subreddit which is specifically for posting coupons for courses. Bots on reddit generally are garbage I've found.
Build a "data warehouse", which is the same data in a relational DBMS. Best of both worlds and even more to maintain. Fun.
&gt; Never even knew it meant "Not Only SQL". That's because it's mostly BS. They made that up when people started calling them out on how bad NoSQL solutions really were. Most database have been "not only SQL" for decades. Proprietary access techniques such as bulk inserts are huge performance wins. *** There's also the problem that SQL is just a family programming language for queries. It doesn't really care if your data is normalized (often mislabeled as "relational") or denormalized (i.e. key-value and document stores). As soon as people realizing that they still need to write reports, vendors started offering SQL for NoSQL databases. (Even MongoDB does this, but it's not cheap. Basically the database may be free, but you have to pay to use it.) Usually these use the ODBC standard.
&gt; But what is a concrete, real world example of schemaless document data? The instant I think I've landed on an example (even a contrived one), I can come up with 3 ways I'd immediately or eventually want to query it relationally. I'd be especially interested in hearing concrete examples where NoSQL is being used as the *only* data store for an application. We do flexible glue layer for a very wide array of customers in several different manufacturing fields. One of the key features that they force us to suffer is "schema-free". This is implemented rather simply in a relational database (think tables called "Table", "Data" and "Entity". As a byproduct of chopping this data up each primary and foreign key has limited value and every query requires multiple joins and is therefore a bit crappy. Were I to implement again, I would either use SQL properly and ALTER TABLE when the schema is changed so my keys start having value again or go No-SQL, because in a lot of cases I don't actually give a flying fuck what I store, all that matters is what I "return" (as regardless of schema we only ever return subsets of data anyway). So in my case the idea of separating my persistence layer from the layer of data I'm actually working with kinda appeals to me.
I'm in the same boat. I'm a big fan of SQL. But that said, large amounts of data can be tricky to store in sql (querying into terabytes isn't fun, unless you really got serious iron/skills), and so for logging/audit data, I find nosql (specifically tablestorage in azure) quite nice, since it shifts the IO pressure elsewhere.
With multiple consistency offerings like Cosmos DB around, pinning a solution to A NoSQL storage layer really isn't the way to go. Like most IT projects the cart is probably being placed before the horse. Noone can know the right persistence system for the project until the requirements are well known.
I work for an API-As-A-Service company that handles 35k requests per second, with probably 20k database writes and 80k reads. We absolutely tipped over with a traditional SQL server due to our insane volume of reads/writes. The only thing that saved us was switching to a NoSQL database. I was anxious at first because, despite 15 years in the field, I didn't know how they worked. Turns out it's dead simple: you trade most of the features of SQL for extremely high throughput. You get tables, but no relations. You get a primary key and a single secondary key. No schema (ugh). But in return you can write as fast as you want with no real limit. In short, that is one reason to use NoSQL. There might be a few others, but if you can use a relational database then do it. Push back on management if they just want buzzwordy crap.
That's what I tried to express... NoSQL makes it easier to get to certain results quickly, but there's a price to.
Pyrolite is on nuget.org and targets NetStandard 2.0, so yes it should work fine in a recent enough Mono. No idea if Unity imposes further restrictions.
Are you doing windows or web development? If you‚Äôre doing web development, Jetbrains Rider is cross platform and runs great on a Mac.
A data warehouse isn't really the same as a document DB in my experience. Generally data warehousing systems I've worked with were more focused on precalculating values loaded from a relational database so that that the data can be analyzed without impacting a production DB.
Ok , I'll try it tonight. I reckon I'll run into issues trying to run tensor flow, but let's see
High availability and scalability is the reason we went with Cassandra for most of our storage needs. It comes with drawbacks like eventual consistency and no/limited support for transactional operations.
I've never heard of an application being crippled because it used SQL Server instead of MongoDB, but I've heard it the other way around.
A) Does data integrity matter? and B) Can traditional SQL scale to your needs without being exorbitantly expensive? yes A &amp; yes B -&gt; Use traditional SQL. !A &amp; !B -&gt; Use NoSQL A &amp; !B -&gt; You're kinda fucked. NoSQL scales up huge cheaper than traditional SQL, but adding data integrity back is also very expensive (and prone to either race conditions or performance bottlenecks). !A &amp; B -&gt; I still suggest traditional SQL, unless you need a demo project to learn NoSQL. Basically, NoSQL and sharded (into silos) SQL scale up and out and across the world easily, but maintaining data integrity across separate geo locations is massively difficult.
This is trash.
Yep. NoSQL is great when it's just effectively a persistent and distributed cache generated from a source of truth that has actual data integrity. Or for ephemeral data that isn't that critical (e.g. multiplayer video game session state). As soon as live data integrity matters, it turns out the multiple decades and millions of man hours spent on traditional databases can't just be copy/pasted into a different paradigm.
&gt; More importantly I'm told the temperature profiles for the CPU don't carry over to windows. Remember the i9 overheating fiasco? That's the norm in Windows. I have had Windows notebooks since 1996 on which I have developed. Overheating has never been a problem, so it is definitely not the norm on Windows. So what you have been told is not only fiction, it is not important. So perhaps do some research before making blanket statements and spreading fear, uncertainty and doubt?
SQL is very flexible with queries. However, your example *is* suitable for NoSQL because the number of *different* queries is small and finite. The user is going to click back and forth between TV shows, episode, actors/directors/crew in a big, tight graph. Therefore, you can trade storage space for processing and simply pre-generate the data that points back and forth. The Actor document would have all the data necessary to display the common features (display name and year) of all the shows and movies the actor has been in, as well as all the keys to look up the Movie or Show documents for all of those. You fetch the Actor document in a single operation by a key you already know. The user can find the key by querying against a specialized index. Now, if you want to be able to do complex queries such as "what is the total gross of films released between 1970 and 2010 with female lead actresses who were under 30 at the time", then NoSQL is going to be terrible at that.
"Why not both" is seriously starting to sink in with me thanks to all the great responses on this thread. There are a few use cases I can think of now that didn't even occur to me until I started reading everyone's responses
What they want is Neo4j. But Neo can‚Äôt give you all the relational stuff SQL can but it can identify and process relationships extreme quickly with simple queries. Something really difficult with just SQL. And there‚Äôs nothing wrong with using SQL, Neo and Document store at the same time. They all do the things they do best and can compliment each other. The task at hand is architecture that drives this. Probably something like DDD/EventSource. But it requires highly specialised developers, architects and business involvement. Document stores are great for front end data like customer related access data. But it should be treated as highly volatile, built and driven by other systems. Just using docDB just because somebody wants to sound cool and throw buzzwords causes massive problems. You are right, if it feels wrong it‚Äôs probably because it is wrong. It‚Äôs great for fast access highly distributed storage but analytics from it is appalling at best. It‚Äôs a read store. Some other things that make it work well is the use of EventStore. The backbone of true enterprise CQRS but good luck getting those knobs higher up the chain involved.
Wtf? On MacBook Pro. I'm talking about bootcamp.
On your POST, add var userId = User.FindFirst(ClaimTypes.Name).Value; then add it to your model. Example.UserId = userId; _context.Example.Add(Example); await _context.saveChangesAsync();
Add a trigger to your table, on insert/delete/update. You can access the INSERTED and DELETED table deleted empty &amp;&amp; inserted not empty = insert deleted not empty &amp;&amp; inserted empty = delete deleted not empty &amp;&amp; inserted not empty = update.
Ok, lots of people here thinking about a central data store backing onto an app here. If you're working in CQRS/Event-Sourced system, no-sql can be fine. A lot of our tables have the same schema (id, name, version, payload). The payload is just json describing an event, db structure not required. The big question is what your read vs write vs query capabilities are. If you're low write, high read, then event sourcing night really help you out, esp if you query by key/id (eg in a RESTful system).
You have described a data model with relationships. I would avoid NoSQL and stick with an RDBMS
This is spam. Look at his history, he just keeps re-posting it [https://www.reddit.com/user/redwerk/](https://www.reddit.com/user/redwerk/)
For the A &amp; !B case, check out CockroachDb
Spanner is cool but it's mega expensive. Aurora Serverless would be a better choice in my view.
The approach I like better is to serialize the data however you want into a regular old string and copy out any values you might want to query on to properly typed columns (with indexes if appropriate). I consider the serialized data to be an inscrutable blob in terms of SQL. It only had meaning to the application. The kind of things I tend to put in these columns are user/session state and read only projections structured data from other parts of the system. The read only projections tend to be slowly changing and frequently referenced in different ways. You definitely have to understand your domain well to make the right schema choices, but that's true for any approach.
I've done that too. It's proven very effective.
Keep in mind that a normal relational database supports both styles of data storage. Actually, 'both' is a bit of an understatement. Consider SQL Server: * row store (normal relational tables) * column store (great for ad-hock reporting, if you have 10 million rows or more) * spatial (geographical or geometrical) * full text search * memory-optimized (essentially high speed key-value storage, optimistic concurrency) * JSON columns (NoSQL!) * XML columns (old-school NoSQL) * Binary columns (your grandpa's NoSQL) * Sparse columns (where most of the time the data is null and you have 100+ columns) * file system (data is stored on a file server, but only accessible via the database so you still get ACID) * Hadoop via polybase (a variant of SQL) And of course linked servers to any other database engine that supports ODBC. *** Don't think SQL Server is unique in this either. It just happens to be the one I know best.
NoSQL doesn't feel that useful to me unless you're breaking your applications down by domain into microservices where specific ones might benefit from different types of data stores. If you have monoliths and data models that currently have lots of relations, it's probably not worth converting away from RDBMS.
This would be my suggestion as well. The only thing nosql would be able to better is insert rate. Also, have you taken a look at Cosmos? That‚Äôs pretty hot right now and kind of sorta fits. ``` create table WebSite.Logs ( _id bigint primary key identity, log nvarchar(max) ); ``` https://docs.microsoft.com/en-us/sql/relational-databases/json/store-json-documents-in-sql-tables?view=sql-server-2017
No robotics will be a better fit.
Aurora is basically MySQL 5.6. No Json data type...No thanks
GraphDbs have entered the chat....
This was a really instructive comment. Do you happen to have a book on database design principles that you'd recommend?
My team and I use a noSql datasource as a read optimized datastore for system audit events. Is it our only datastore? Nope. Is it our only copy of the data? Nope, the data is actually put elasticsearch via an ETL process for de-normalizing and enriching data points before writing it to our elastic cluster. Could this be done with a SQL database? Sure, it currently is but we have reached a tipping point with our current design / schema and wanted a more read performant solution.
Just my 2cents from experience. NoSQL is very flexible while designing, but once designed. If your requirements change, and you don't have time to redo your data model. You might be spending a lot of time working around performance issues due to originally unanticipated query requirements.
Many NoSQL providers have transactions.
Bought a surface Laptop a few months ago. Added two docking stations for work and home. Would buy again.
On the same note. What about bundling in asp.net core? Bundles are gone from core..
I do not, sorry. I learned relational databases (aka SQL) in college and the rest came via real-world experience.
Using a bootcamp MBP, it's great! You won't find another laptop with a good ratio monitor and good specs as the MBP. &amp;#x200B; 0 issues using Windows on it, even running a eGPU for desktop. &amp;#x200B; Runner up is the Surface book range, but they have a lower power cpu and no thunderbolt 3 ports.
You can take a look at this example [https://github.com/danijelh/aspnetcore-vue-typescript-template](https://github.com/danijelh/aspnetcore-vue-typescript-template) This uses Vue.js but the principle is the same. In your scenario, you would include pure **.js** files per page instead of Vue bundles per page.
We've got one where I work where essentially we send out large and complicated JSON documents that get turned into a message of sorts. Then events come back in a variety of different formats about what happened to it. All this information gets stored into a NoSQL (Cosmos) DB. Would be a complete pain to do in a normal DB. Agree with most of what people are saying throughout the thread though. If your data is genuinely non-relational then there's a good use case, otherwise you should probably stick to a relational DB.
This is bad for 4 reasons. 1. It splits your business logic between the database and your code 2. You need to have nullable createdby fields which is wrong and will be a PITA. 3. EntityFramework wont populate the entities createdby on save so your entities and database dont match 4. Triggers are THE DEVIL (happy gilmore voice)
https://docs.microsoft.com/en-us/aspnet/core/client-side/bundling-and-minification?view=aspnetcore-2.2&amp;tabs=visual-studio Not gone, they've just changed. Personally I'd go for the gulp set up.
i swear to god this is the third time you guys have posted this here _today alone_ using three different accounts doesn't make it any less spammy
Pass the user context through to your service that does the saving and loading to the database. It's interfaced so you can run unit tests against your services or so that if you have a batch process they can pass through a user stub. It also keeps your controllers really really dumb. Which is great. &amp;#x200B; `public interface ICurrentUser` `{` `int UserId { get; }` `}` &amp;#x200B; `public class CurrentUser : ICurrentUser` `{` `private IHttpContextAccessor _httpContextAccessor;` `public CurrentUser(IHttpContextAccessor httpContextAccessor)` `{` `_httpContextAccessor = httpContextAccessor;` `}` &amp;#x200B; `public int? UserId` `{` `get` `{` `var claim = _httpContextAccessor.HttpContext.User.Claims.FirstOrDefault(x =&gt; x.Type == "UserId");` `if (claim != null)` `{` `if (!String.IsNullOrEmpty(claim.Value))` `{` `return Int32.Parse(claim.Value);` `}` `}` `return null;` `}` `}` `}` &amp;#x200B; `public class Startup` `{` `...` `public void ConfigureServices(IServiceCollection services)` `{` `// Dependency Injection` `services.AddScoped&lt;ICurrentUser, CurrentUser&gt;();` `...` &amp;#x200B; &amp;#x200B; `public class PersonController : Controller` `{` `private readonly PersonService _service;` &amp;#x200B; `public PersonController(PersonService service)` `{` `_service = service;` `}` `...` &amp;#x200B; `public class PersonService` `{` `private readonly ICurrentUser _currentUser;` &amp;#x200B; `public PeopleService(ICurrentUser currentUser)` `{` `_currentUser = currentUser;` `}` &amp;#x200B; `public void Save(Person person)` `{` `// Save to the datastore or whatever, you have a reference to the logged in user.` `}` `...`
I think tooling will have a pretty hard time finding out whether a NuGet package is used, or not. Especially since dependencies could be loaded in at runtime. I have yet to find a tool that deals with all edge cases and is able to give a solid advice on dependencies that can be removed.
Only see one post to r/csharp am I missing something?
Is Blue Sky Thinking still in? A bit of that surely couldn't hurt?
I'm just imagining an AI running a database. "Should I execute this database query today? What's the point? Is it worth the effort? Why am I alive?"
ITT: Literally no one that's ever used anything like Azure Table Storage. Everything must be relational, or shoe horned into a relational manner even if it isn't related data, because that's what good developers do apparently.
Step 1: don't use xamarin
I write insurance claim systems for a living and I can't see nosql being a good match. Claims data is highly structured and tends to not have some changes in schema. I would love to have an excuse to play with a nosql DB, but it's not going to be in my Claims DB
I wouldn't say my message was aggressive, however it was defensive. Your original post did not mention bootcamp or MBP. No i9 (or any other Intel processor) users have overheating issues being the norm under pure Windows (over-clocking aside). I respect that you have modified your post - and have clearly shown where it has been edited. I now understand what you were talking about, however please note that your reply suggesting I do my research (on a problem that doesn't exist unless you add additional factors such as bootcamp - which was missing from your original post) - is blaming me for a shortcoming in your post.
And oldie but a goodie: &amp;#x200B; [https://www.youtube.com/watch?v=b2F-DItXtZs](https://www.youtube.com/watch?v=b2F-DItXtZs)
Josh Berry's repo is currently the best example on the entire web I've found so far... But I haven't been able to recreate the project. The docs really need an update ASAP.
Different answer than the one you're looking for but don't forget you could also completely separate your front-end from your back-end: SPA (just HTML,CSS &amp; JS) w/ a .NET Web API back-end.
What are you using for source control? As a quick and simple solution for example, if you're using Azure Devops you can search for the relevant string inside the relevant file extensions (or filenames even I think) across all your repos.
Just curious because I had this discussion yesterday with a friend: when you do that, do you end up hosting the SPA and Web API on the same site (in IIS, or Azure)? I've noticed the React and Angular VS templates for .NET Web API set the project up to do this but he's always split them to two different hosts and uses CORS.
they're use a lot for caching or for data where there is no relations between other data or to store data for specific microservices where again there are no relations between data. because, they store 'documents'. a good real life example of something you could store in a noSql solution would be market data: stock quotes, interest rates, and so on. another use is storing configurations. another use is storing data generated by a long process that the user requests/obtains when they want (not synchronously after requested for said resouce to be created). another use case is storing binary data (reports, files, etc). what you don't want to use them for really is to store relational data, or data that needs constraints.
&gt; what methods on a client proxy are not being if these methods call a remote endpoint, the easy answer here is you want analytics on the remote endpoint. the obvious solution is logging the calls that reach the remote service. for asp.net core you would create middleware that logs each request. common library to log is serilog, common database to log to for this kind of analytics is elasticsearch, or app insights, or seq, or datadog, or a dozen other solutions.
Great series, man! Keep it up.
Thank you so much, glad you like it!
Why do you call your `ServiceCollection`/`ApplicationBuilder`Extensions "Installers"?
Seconded. 1. Triggers should be avoided. 2. Triggers should only be used if absolutely necessary. 3. In case of 2. above find another solution.
I don‚Äôt. This is coming from the third video of the series. It‚Äôs too much to explain in a comment but essentially I‚Äôm breaking down the service registration to separate installers, so my mvc service registration goes in one installer, my db stuff go in another an so on. Every time I add something of a different context that doesn‚Äôt fit in an existing installer I create a new one. The startup will dynamically discover and invoke all the installers, so it keeps it clean. It‚Äôs a debatable approach with both pros and cons. I don‚Äôt use it for application builder stuff though.
maybe [this](https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/) can help you :)