How about [Azure Table Storage](http://www.troyhunt.com/2013/12/working-with-154-million-records-on.html)?
&gt;The main purpose of this is to remove the dependency on SQL (and specific implementation of a database server). Translation: We don't care about performance just so long as we can freely change our mind on a regular basis.
Might give Redis a look. Not sure how it would work with your problem, but I've had good luck importing large amounts of data.
Some might say that starting with async and await are good starters. Here's the MSDN article on that: http://msdn.microsoft.com/en-us/library/hh191443.aspx Getting to know about the TPL is another: http://msdn.microsoft.com/en-us/library/dd537609(v=vs.110).aspx Both linked articles provide examples as well. If you have questions I'm pretty sure we can help tackle, ask! Stack Overflow is also a great q&amp;a website as well.
thanks, i'll look into that.
ServiceStack is no longer free, in case it affects anyone's decision.
On thing to note: parallel work can either be CPU bound or IO bound. There are performance considerations for each. IO bound work is any work where you are waiting on something to respond. Database calls, service calls, file system calls are all IO bound. If you are doing IO bound work, use async await on the IO operation. It will return a task and be named with the Async suffix. If you are doing CPU bound work, wrap the work in a task and orchestrate with async await. Tasks can be created in several ways, last I checked the recommended approach was to use TaskFactory. Here is the msdn overview page. http://msdn.microsoft.com/en-us/library/hh156548(v=vs.110).aspx
Redis.io You'll never want to work with anything else.
Depends on the environment in which you are developing. I think the testing principles of a given development team are a reflection of the business's expectations, and they should be that way. It's a delicate balance to strike. When a business demands quality with regard to up-time, number of defects, and turnaround time (for any changes), then I would say testing is an imperative. IoC is a great method for writing more testable code. 
I don't disagree with that, the way I like to phrase it is "you scale the solution to the problem, not the other way around". Testing is valuable, and I do it for my own stuff where it makes sense, it's just that the more recent TDD stuff has skewed it all into silliness. Ultimately you should always be thinking about what you're doing and if it makes sense in the current context, not slavishly adhering to something like testing because it's testing.
Not sure your question makes a ton of sense but it sounds like to me you want a loop in your template to loop through the database. Basically your code is right but you will have it loop &lt;%# foreach (DataItem di in DataItems) %&gt; Then it would evaluate as &lt;%# DataItem("Name") %&gt; or along those lines. Its been a few months since I wrote the HTML code but a for loop is likely what you are looking for. 
MVC
Do you want it done fast or done right? Are you using a lot of data grids? How well do you know JavaScript? Is this a learning exercise?
I think it's unlikely. It doesn't do anything that can be classified as "suspicious" by antiviruses.
MVC
MVC + Razor + C#
Open up a new Solution, make it a console application. Add MVC5 from nuget and start coding. I never saw the need for such an exercise since the templates exist. I got most of my experience with ASP.NET internals by messing with WebForms. You will need to add a lot of boiler plate code so I suggest you take the files from an existing project and inspect them as you copy them over.
I think a better option would be more of a tear-down of the template, explaining what does what and why. It's not a bad idea, I'll likely throw it on my back burner list of tutorials I should write some day.
https://www.udemy.com/comprehensive-aspnet-mvc
My best recommendation is [PluralSight](http://www.pluralsight.com/training/Courses/Find?highlight=true&amp;searchTerm=mvc). They usually take a fee for their videos but many of the MVC videos has been made publicly available since Microsoft has paid for them and want to spread knowledge about MVC.
Or write your own if you want to do something more useful with them.
It's gonna be a hard road, but someone has to do it :D Thanks a lot! 
Yeah it's something like an exercise project and the time is not an issue, I'm doing it mostly for myself, as for JavaScript just the basic commands, do I need to go deeper into JS?
That's what I figured out, I know the basic of VB but I think I'm gonna move to C# for this project and so on.
Have a look at [ConfuserEx](https://github.com/yck1509/ConfuserEx) for some ideas. That's a really useful open source obfuscator.
That's a good attitude! You might also look into OWIN but it may be too much (although it is right around the corner with vNext).
I found these tutorials on asp.net to be pretty awesome. [Getting Started with ASP.NET MVC](http://www.asp.net/mvc/tutorials/mvc-5/introduction/getting-started) As you go down the left the [EF stuff](http://www.asp.net/mvc/tutorials/mvc-5/database-first-development/setting-up-database) is good too. All the authors are very responsive via the comment sections too.
VB is a great language but I hate using it with Razor. Pity too, its XML features would be so useful.
If you use this, you can use the coupon "BIZOCEAN" without quotes for 75% off. Valid through 07/31/2014 so use it quick.
Global.asax.cs When you start the website up this is the startup routine. From here you can identify most of the black magic you are looking for.
I will say do not go to Coder Camps. They do not teach you enough for a job. When I attended the curriculum was very disorganized and the teachers that were making the curriculum had zero real world experience, as they were just graduates of the camp. I whole heartedly regret going to this camp on so many levels its not even funny. I do understand that I am just one opinion but I know many of my classmates feel the same and it was not for lack of effort on our part at all. They just do not have enough staff or knowledge to make the place worthwhile. 
By Windows 8 I am guessing you mean a [Windows Store App](http://msdn.microsoft.com/library/windows/apps/dn726767.aspx)? If so, you have the option of writing those in html and js. Might be the best fit for you.
Yes. I do mean a Windows Store App. Thank you for clarifying. You can write them in html and js but the js is so custom that you have to learn it all over anyways. Since this job I've been doing nothing but Microsoft development so either way I'll probably be using C# to do most the coding; in mvc 5 or windows store app. Of course there is a big difference between the two in other places like the display so I'll certainly be considering what you say. Thank You!
TheAnimus is right in my opinion. Also checkout Pluralsight. It's a superb learning material source.
I highly recommend JP's http://developwithpassion.com/training/dotnet/software_craftmanship_bootcamp
Make sure all your CSS is included in the project. I've had a few instances where I've forgotten to add CSS or JavaScript files to the project and they weren't pushed to Azure.
[Training Camp](http://www.trainingcamp.com). My company paid my way, and I was basically force-fed a week of ASP.NET. I was starved for something like that, so I soaked it all up thoroughly. A boot camp is not for everyone, but if you're *really* psyched and motivated, I think you can learn tons.
+1 here. Went through the course a couple of years ago. Then had the pleasure of working with JP for about 6 months after. Awesome guy, super sharp, great teacher. 
Are you using bootstrap or LESS files?
I'm using bootstrap. I put them in my Content Folder under an Admin folder. It works locally when I run it, but when I publish to the server nothing is rendering...All my data is still being sent, its just a white screen, really weird...I can drag buttons also.
The reason why I'm asking it's because Bootstrap and more specially LESS files included with it tend to fuck up the publish to azure because of the references included in those files. Check [this](http://stackoverflow.com/questions/21991249/mvc-and-less-bundles-not-working-in-release-deployed-to-azure) could probably help.
Focus on a clean server API first. Deal with the client almost as a separate but parallel effort. As for the client due to the interment connection I would do WPF, METRO, or IIS hosted core running as a service (similar to the way desktop node.js apps run). A metro app will likely be the most kind from a power perspective.
Trying that now
Wow it worked. Why would this work for debug instead of release? Is there a disadvantage for publishing as debug? When I go live on my domain should I publish as debug? Thank you so much for responding this is going to save my launch tomorrow.
Well part of me wants to say it's a "junior" position, so just say "I don't know." HOWEVER... the developer in me wants you to study the fuck up so you know the answer to every question. The guy doing the interview after you certainly will. Do not under any circumstances try to just make stuff up, though. If the people asking the questions know their stuff, you will just end up looking stupid.
Pull 1 million records from a database? Unless they're building a cube I'd ask them what the hell for?
Nor should you get the job. We all know Google is there, but you don't say that to an interviewer.
I like this, but it sure does sound like MicroSoft admitting that MVC sucks. Oh yes, I LOVE writing 4 or 5 pages when I really only need 2. Or 1. Nothing is going to beat Web Forms on the front, Web API in the middle, and whatever data on the back. Not for a while at least.
Personally, I would go web for every device. There is so much value in having it available everywhere. 
Thank you. This is actually a rewrite off a handheld device which was using an API (though I'll be cleaning it up some). Thanks for your suggestions.
Yes. I am stuck with it. Should I jump out the window? Am publishing to a corporate server.
Do you have a using statement to import the namespace?
how is this going? any details? 
Do you recommend one in particular to get started with?
I just used it, went from $149 (which is a little extravagant) to $24. Thanks
I'd say [this](http://pluralsight.com/training/courses/TableOfContents?courseName=aspdotnet-mvc3-intro&amp;highlight=scott-allen_mvc3-building-intro!scott-allen_mvc3-building-controllers!scott-allen_mvc3-building-security!scott-allen_mvc3-building-infrastructure!scott-allen_mvc3-building-ajax!scott-allen_mvc3-building-deploy!scott-allen_mvc3-building-views!scott-allen_mvc3-building-data-ii!scott-allen_mvc3-building-tdd!scott-allen_mvc3-building-data-i-2#mvc3-building-intro) is the best series that you might want to take a look at. It's for MVC 3 but all the basics from MVC 3 still apply to the newest version which is 5 (correct me if I'm mistaken). Although this tutorial does start from a template project I still highly recommend it. Good luck :)!
If you want your top level domain to point to azure, then you need the CNAME for your @ record to be 'yourname.azurewebsites.net.' and [wait for it to propagate.](http://viewdns.info/propagation/) If the primary host for your DNS records is GoDaddy, then you'd change the records there. You could change them at hostgator, but that's an additional level of redirect you don't need. If you have hosting on hostgator (which I assume you do) then you can just point your dns records for whatever subdomains from GoDaddy to whatever IP/url that HostGator has given you. Really, if you're using multiple endpoints/hosts then there's no reason not to just direct off of the primary DNS host.
Whoever you bought the domain name from is where you'll need to update the DNS. Also, the azure website needs to be at least the SHARED tier to use a custom domain name.
I changed the records and am waiting for them to propagate. I really want to make sure that they are setup right when they propogate 
Protip: Click on the unrecognized type, press alt+shift+f10, then enter.
I will say they only have hired a few people that have graduated from the camp. Three of which have taught at the camp. Their salary numbers are a little off though. Around the time I was there no one made over 60k if they even found a job. You just can't teach .NET MVC and C# in three weeks especially without a solid game plan or teachers that know how to teach. Not worth the 10-13 grand at all. 
Or ctrl+.
You do have to be on a non-free Azure plan as well, not sure if you already knew.
We covered *everything* in the official Microsoft exam prep books, so yes, it was intended as a prep class for the MCTS cert exams. The teacher asked lots of questions of us, and it was obvious if you didn't know the answers (you couldn't just skate through). Absolutely no copies of the test were provided(!). Teaching to the test? No, but our instructor was so committed to teaching us the right stuff he would sometimes tell us basically, 'here's the Microsoft way, and here's the right way to do it.' Still, YMMV.
Yes just make it a normal .cshtml file but then the controller action which returns the form use return Partial(); instead of return View();
This is pretty awesome for Mac. Dunno if i would have even wasted my time on a Windows version though. 
Create a new partial view in the Shared folder and be sure to start the file name with an underscore (convention). Then when you need to render the partial in a view, you use: @Html.RenderPartial("_partial.cshtml"); where "_partial.cshtml" is the name of your new partial view.
For some reason the HTTPS link in the video description doesn't work for me (though HTTP works), so for people who want the code: https://github.com/ligershark/Kulture
The both achieve the same goal but in different ways. Internally, they call the same method and RenderPartial has better performance. I've never seen anybody use Partial after MVC 3 was released unless it was for testing purposes so I always recommend RenderPartial. To each his own though.
&gt; @Html. Thanks This helped. 
Um, System.IO?
That works when it's hosted on a server?
a file system is a file system http://stackoverflow.com/questions/6582904/what-is-the-best-way-to-read-in-a-text-file-from-the-server-in-asp-net-mvc
App_Data is just a normal folder, there's nothing special about it. 
Straight SQL would be: SELECT * FROM dbo.aspnet_Users If you were using the Entity Framework you could say something like: var userList = dbContext.Users.Select(u =&gt; u).ToList(); What you are wanting is possible, it's just a matter of what are you using to talk to your database, and constructing the proper query to get back the data you want.
A more appropriate title would be "Some things you'd like to know about the CLR". [CLR via C#](http://www.amazon.com/CLR-via-Edition-Developer-Reference/dp/0735667454) is *really* all you want to know about the CLR.
The FAQ over in /r/web_design might be worth looking at, specifically [[this link]](http://www.reddit.com/r/web_design/comments/oji39/i_suck_at_ui_design_how_can_i_improve/) about getting better at design in general.
You can use a SqlMembershipProvider to do this. Membership providers are intended to manage entries in the aspnet_Users table. SqlMembershipProvider, like all membership providers, provides a method GetAllUsers that also supports pagination, making it ideal for a grid. It can also add, delete and update users. Combine that with a SqlRoleProvider to control the user roles. You want to make sure that you use the user principal name (upn) from active directory for the user name in the membership table. That way, if you use an authentication type like windows authentication, you can get the membership info for the current user through the sql membership provider.
Wow. A lot of resources. Thanks.
Unfortunately, the in-memory features are only available on the Enterprise Edition, which is pretty expensive.
Firebird is a pretty quick, embedded database. It's not purely in-memory, but it's going to be difficult to find an in-memory solution that doesn't have a memory footprint on the same order as the dictionary solution. Plus, with an in-memory only approach you'll still probably incur page faults that will require the disk to be read anyway. That or some sort of compression would be required, which would incur a cpu cost. Firebird also has ADO drivers meaning it can be used with EntityFramework. If you take that approach make sure to disable entity tracking to minimize the amount of memory used. An SSD would probably also help.
Look at bootstrap or any of the other css frameworks. aside from making layout easy it takes care of the details that we, as programmers, don't even notice. It's not just the colors, it's the little things like spacing, alignment and fonts.
Yeah use bootstrap and for variation checkout http://bootswatch.com/ and https://wrapbootstrap.com/
I know this thread is a bit old, but I see you are still an active redditor so I was wondering if you could tell me if you are still actively developing this. Seems like development has slowed considerably since May.
I was on vacation for a few weeks, and don't really have any major plans for ReactJS.NET at the moment. It does most of what I wanted it to do and I'm successfully running it in production. I'm hoping to look into support for CommonJS modules at some point, as well as support for V8 on Windows. Are there any features you'd like to see? I am planning on continuing to work on it and maintain it. 
Bootstrap is a fucking godsend. You're not going to win any awards with it out of the box, but at least I can now spend only a short amount of time throwing a front end together that I'm not embarrassed about.
Sweet, I just wanted to make sure you didn't have any plans of abandoning it. Thanks for the response!
thanks, in future I will take a note of that
 var dir = new System.IO.DirectoryInfo(HttpContext.Current.Server.MapPath("~/App_Data/")); And go from there.
If you aren't creative in web design, just buy templates on Theme Forest or something. You can always modify those to your needs.
Yep, it's great to look back at a project and think "that looks great" rather than "that looks terrible but I'm not sure why".
work with a designer.
I've used Yet Another Forum (yaf) which is web forms based. Not fun to work with. Any mvc-based forum would be better.
I used to be very bad at this and have been working closely with designers for a couple of years and picked up a few things. First, do go for a CSS framework that allows you to quickly get the basic structure. Boostrap for example plus you can buy cheap and plentiful of templates to slap on and actually have something pretty. Now the things to look for when designing something is all in the details. There needs to be harmony, similar things need to be evenly spaced, take care things are properly aligned (I'm talking to the pixel, not "more or less"), symmetry can be pleasing as well. Next let's take care of icons. Without a designer on had I used to just Google image search for whatever I needed or used an icon pack I had lying around. Bootstrap solves this problem as well as it comes with a great library of icons. I tend to prefer FontAwesome in any case stick to one. A pretty application does not to be fancy. It can be nearly image-less but with a clean, harmonious design it can be pleasing on the eye. Of course this will take practice and you have to learn to become nick-picky about alignments and uneven paddings. 
Your comment may be interpreted as condescending but that's probably the best way to learn.
Years ago I wrote HnD: https://github.com/SolutionsDesign/HnD It's a customer support oriented forum system, perhaps you can use it ;) (webforms)
I think he meant a .Net based forum framework he could use to set up whatever forum he has in mind. As opposed to a forum that discusses the topic of .Net MVC. I was confused by the question at first too. 
Thanks. I know what CSS is, but what do you mean by "CSS framework?"
I'd recommend that, as a beginner, you don't venture into the WrapBootstrap templates right away. They tend have extra goodies and libraries that will disctract you from becoming very good with the core Bootstrap principles. Bootswatch is fine, since it's mostly just changing colors and basic styles.
I know, I'm just offering some alternatives the may or may not fit better. 
You can probably find some. If you want to just learn how they do it, they have demos of their templates and you can look at their source code. If you see one you really think is neat, just buy it and you'll get all the source files. They're usually around $10-20.
Read http://www.amazon.com/Dont-Make-Me-Think-Usability/dp/0321344758 As suggested, modern UI frameworks really help -- it is harder to make something shitty in bootstrap than it is to make something OK looking. Probably the biggest piece of advice I've got is to not overextend yourself here. Focus on making something that is usable that doesn't look horrible. Don't break new design ground if you ain't got it in you, that gets some real WTFs.
If this is the old-style sql memebership provider there should be stored procedures for most of the database interaction, I would call those.
I fall more in love with Visual Studio every time I discover a keyboard shortcut. This one is in the Top 10 easy.
I use MvcForum. It works great. I needed something with multiple groups, topic voting (for support / Q&amp;A) and looked modern (gavatars, bootstrap, ect). This fit the bill. I even get email alerts if someone posts. That said I have two complaints. It feels slow when loading up. I think the reason is that the architecture is heavily abstracted and makes use of IOC containers and such. If you need it to be fast, I would recommended ripping out the abstraction and replace it with Entity or Dapper and use the new OwinsContext for an IOC (if you really *want* it). Second, The membership is incomplete. It does not support removing or adding "social accounts" or any of the nice features found in the *default* mvc5 project. Frankly, I think membership should removed from the fourm entirely (it should be its own area).
And along these same lines, is ASP.NET a hard requirement? The Microsoft Web Platform Installer and the Azure Web Sites Gallery both have a bunch of open source forums available, and you don't have to do a thing to configure them (that's taken care of for you thanks to the magic that is Web Deploy). phpBB is in there, and I'm pretty sure it's considered the gold standard.
This would likely be the way I would go. That or a DNN module. 
&gt; ViewModels.OrderViewModel will derive from OrderModel, Why? It sounds like OrderModel has no independent reason to exist. &gt; •Models (class will be thin, no methods, just properties) That's not a model, that is a DTO or Data Transfer Object. At the very least a model should be self-validating via the INotifyDataErrorInfo interface.
&gt; ViewModels.OrderViewModel will derive That's not a view model. A view model is a model that describes a view. For example, if you have a CustomerListView you may have a CustomerListViewModel to manage it's state. &gt; but will also include properties from other Models, such as customer, payment, product, etc. That may, or may not, meet the criteria for a view-model. It sounds more like the root of an object graph, in which case it should hold a reference to Order rather than subclassing it. But I would have to actually see it to be certain. 
&gt; Executors (classes with static methods to perform business logic, populate models, etc.) Business logic belongs in the models themselves and should be unit tested with them. Besides making it easier to find, it tends to reduce the amount of public setters in a class. The more public setters you have, the harder it is to figure out what can change a given value. Storage logic belongs either in your DataAccess layer or the database itself depending on its nature. Presentation logic belongs in Value Converters, controls, and view models (see my other comment). This division of labor doesn't leave anything left for your Executors. 
My layers: * MyCompany.MyApp.Models All of the data models and as much business logic as I can cram in without touching a database or external service. Models honor INotifyDataErrorInfo, IPropertyChangeNotification, possibly IEditableObject and/or IRevertableChangeTracking. Heavily unit tested * MyCompany.MyApp.DataAccess All of your database and other external access goes here. Integration tests. Real ones, no mocks. * MyCompany.MyApp.\* Controllers and View-Models are as thin as possible, with anything that isn't directly related to presentation pushed down into the lower levels. 
Pick up a theme on either themeforest or wrapbootstrap. A few things to look out for, which is webforms specific is how some of the data controls render as tables, eg. A FormView renders as a table, but to avoid this from happening set RenderOuterTable="false" (this came in at version 4.0).
I guess OWIN makes the bulk of the dependencies so in a web project that's not going to be an issue since that's the way ASP.NET is going (Web API already runs on OWIN).
I agree. The .Core library which I would expect to just have the task-making classes bring along OWIN which I expect are necessary for the actual scheduling component and UI.
I had to do this but users where being identified via WIF. In WIF you can override a method that gets called when someone is authenticated. Since the roles I was getting from WIF where useless to me, I loaded the roles from Universal Membership Provider and injected them into the current user. So users in the client's AD (and therefore WIF) where authenticated but their roles (well, the ones I care for) where managed in my application.
Your view models have no business being in a shared library; view models are to support the view which have nothing to do with a shared library. Each application has it's own view, so it should have it's own view models. The shared library should have everything that any consuming applications would need to do business related work. So in other words, in this scenario, I would have the class library contain all of your business logic and *maybe* the data access layer. I would consider making your data access layer a separate project/assembly and then referencing it in your class library -- only so that if you want to create an isolated data access layer later, it would be easier. Anyway, I would probably set it up like this: ### MySolution ### MySolution.Core (class library) - Logic (operations/executors/whateveryoucallit) - DataAccess - Domain Objects ### MySolution.Web (mvc project) - &lt;all your normal boilerplate stuff&gt; - ViewModels - Application specific logic - Either reference MySolution.Core directly or create the same structure to consume the optional API mentioned below ### MySolution.Wpf (wpf project) - &lt;all your normal boilerplate stuff&gt; - ViewModels - Application specific logic - Either reference MySolution.Core directly or create the same structure to consume the optional API mentioned below ### MySolution.Data (class library) - data access - Data Sources - Repositories - Optionally, put this in MySolution.Core. Keep it separate if you foresee the need to abstract it in the future ### MySolution.Common (class library) - Dtos (contracts for things like serialization, mapping, etc., that would be used across projects, if any) - Common objects (not domain objects; leave those in Core) - Utility type classes that any project would benefit from - Optionally, put this in MySolution.Core. ### MySolution.Api (WebAPI project) - Wraps MySolution.Core - This could also act as your data access layer - Optional; if you foresee needing to create another project that would need it (e.g. mobile app) So the point is that if you're going to make the core logic be a shared resource, then you need to start thinking of it separate from the actually GUI (WPF or MVC in this case). Draw thick lines between the layers and force yourself to design in a way where the shared library has absolutely no awareness of the GUI. In addition to that, consider decoupling the GUI's knowledge of the shared library as well by hiding the shared library behind an API. It's more work, but depending on the vision of your project, it may save you a lot of time down the road -- at the very least, since it is written to be agnostic of the GUI, hiding it behind an API later wont be as hard. And then, it would also be easier to swap business logic out without affecting the GUI implementation. It seems like there would be a lot of duplication happening in the pipelines between the GUI and the library, but that isn't necessarily true. By doing this, you give yourself absolute freedom to build the GUI project without much consideration of the business logic. That way you can focus on a clean, concise, and focused approach to the GUI logic (e.g. spend more time in that project with validation, retry logic, and that sort of stuff). Again, clean lines. :) 
I'd say post what you have and see what the reaction is...
When using an executor, it implies there will be an operation that aggregates all of the business logic. So business models will have business logic that relate to that model and ONLY that model. The operation would use any number of models and use their values to execute additional business logic to create an aggregated result. Where the OP is mistaken is that an executor shouldn't have any business logic at all. It should simply execute the operation against the request. For example, two business models: ParentCompany and Franchise. They may derive from the same base class, but that is irrelevant in this example. The ParentCompany has one or more Franchises. A franchise has an annual revenue, but the ParentCompany's revenue is made of a portion of the franchises' revenue. This is an example of what you were mentioning of the business models having business logic. However, if our operation's objective was to build a report consisting of Values coming from ParentCompany, Franchises, past data, etc., then the "Business Logic" now stems beyond the responsibility of those Business Models, ParentCompany and Franchise. The operation is used to wrap additional business logic around any business models involved in the operation. Now, the executor's actual job is not business logic. The executor simply executes the operation against the request. It acts as a middle man. It shouldn't have business logic. Rather, it should have ancillary logic like executing external validation, handling errors that need to be bubbled up, retry logic, etc. So it would look like this: Request -&gt; Executor -&gt; Operation -&gt; Data Response &lt;- Executor &lt;- Operation &lt;- Data ### Example flow - The request is made by the caller - The executor receives the request and the operation (or uses a factory to get the operation) - The executor runs the operation's validation method and determines whether or not it can continue - The executor executes the request against the operation - The operation get some data and builds some models (possibly some other patterns involved here) and does what it needs to do to produce the final result - The operation returns back to the executor - The executor determines whether or not the operation was successful determines whether or not it can return a proper response or if it needs to throw an exception or log, etc - The executor builds an appropriate response and returns it to the caller - The caller consumes the response My point here is that what the OP is calling an "Executor" is actually an operation (or Command) which has every right to have business logic in it outside of the business model itself. Business models are supposed to represent something physical in the business world (e.g. employee, business entity, document, etc). In the case of this operation, it is similar to a business model in that it is a business logic object, but it does not represent an object in the business world; rather, it represents a process that is not directly bound to an object. Now, in deep DDD, you could model a business model to contain behaviors for all related business processes (e.g. ParentCompany has a behavior that receives a visitor which can aggregate all kinds of information) but personally, I hate that type of design and where it does great for workstation type software, I don't feel it works well with scalable business applications where most of what you're doing is moving data around (e.g. database driven type software like SAP). But that's just my opinion and experience.
Uh no. Controllers respond to events/input. It would handle translating an event into an action against a model or as in this context, it would choose the operation to be executed by the executor. The executor here is the Invoker of a command pattern. A single point, with a common interface to ensure that each command (or operation) is being treated in the same way.
&gt; It would handle translating an event into an action against a model or as in this context, it would choose the operation to be executed by the executor. For ASP.NET MVC, the data binding subsystem converts raw input into usable data and the the of routing subsystem chooses which operation to be executed. What you are doing may be useful for WPF, but for MVC it sounds like you are reinventing the wheel so to speak.
I'm trying really hard to see what you're not understanding -- what does model binding have to do with having this type of proxy? It's a completely different pattern and has nothing to do with a controller. It's not reinventing anything. The routing subsystem selects the correct Action and has absolutely no knowledge of any operation you've created. I don't think you're talking about the same thing as me or the OP But if it gets the gunk out of your junk, then you can implement the same exact thing in a custom base controller. It really doesn't matter; it does the same thing.
Can someone explain what it means to "map the SP to the context"? What's wrong with executing it the way he describes in the question?
He just wants to do this: var result = context.MySp(param1, param2).FirstOrDefault(); Which I can understand as you get the typesafety (but that's about it as advantages go).
Agreed. Author can come back to me on that claim, when he knows how to inject .NET code on a existing .net process
Since we're not on stack overflow, I'll post something that's purely opinion... Drop entity framework. It's nothing but pain and suffering if you go beyond the basic use case. I would strongly recommend using something like Insight.Database (https://github.com/jonwagner/Insight.Database) where you have explicit control over what your sprocs are doing.
Never seen Insight.Database until now. Thanks for sharing.
Have you tried Database first, then convert the model to Code first and see what is generated? Otherwise, use a MicroORM for sprocs.
this is almost a 3 year old article about the developer preview of .net 4.5. We that hard up for new content?
Was it not informative? I learned about "async async" and thought it was worth sharing.
We stopped using entity as a company because of the horrendous performance we were getting from it. Insight has been a lifesaver. On his github, definitely look into the auto-interface stuff as well as result graphs. We use the Results&lt;T1,T2,T3...TN&gt; thing instead of mapping our own parent/child mappings.
Makes sense.
This is a personal aproach, so critics are accepted!
As a doge and a .Net aficionado, I'm intrigued. May I'll have a bit of time later today to try it out.
Even that book contains some inaccuracies and errors (e.g. how assembly metadata controls method overriding and interface implementation), but it's great overall :)
Hey, thanks for the crosspost. Feedback is much appreciated :D
&gt;Drop entity framework. It's nothing but pain and suffering if you go beyond the basic use case. I disagree. With Code First most of my complains have gone away. Now for SPs, I would rather go the MicrORM route.
It sounds like you are doing a CQRS with a mediator, for a good example check out http://lostechies.com/jimmybogard/2013/12/19/put-your-controllers-on-a-diet-posts-and-commands/ as a good resource
That's another reason it would be better for smaller projects. Chances are smaller to have that problem (didn't encounter them at my current or last project). If you want to be wicked, just include an option to pick one at random :)) 
So I personally think that code first is the only way to go if you're using EF. I love it for when you're doing a simple web app or something and want to hit the ground running with some really straightforward data access. That being said, mapping large aggregates with complex parent/child relationships is about as fun as burning your eyes out with acid. Plus, even if you manage to do it successfully, you're most likely going to have some huge performance issues that micro-orms will help you avoid. 
I agree, Code First is the only way I would recommend using EF. I've managed to make a few medium projects with EF and they run fine but I can see how easy it would be for someone to shoot themselves in the foot with it. As long as you know what you are doing, what EF is doing behind the curtains and when to just write your own SQL because that's the only way some things can be done and/or done with good performance. 
I currently work for an ISP, and this isnt something just for small projects, we use it in large enterprise applications too! (Think a couple of mil LoC) We use [Castle Windsor](http://docs.castleproject.org/Default.aspx?Page=Installers&amp;NS=Windsor&amp;AspxAutoDetectCookieSupport=1#_FromAssembly_class_9) as DI framework and it allows you to do things like `container.Install(FromAssembly.This()` - which just registers everything from the calling assembly or `container.Register(AllTypes.FromAssemblyInDirectory(new AssemblyFilter("PlugInFolder")).BasedOn&lt;IPlugIn&gt;());` - Something like that can be used to dynamically load dlls based on a given interface You just have to be aware of what classes have what interfaces, so you don't get duplicates you don't want, like multiple IDataStores There are a lot of cases where its useful to get multiple items... For example something that uses plugins, you just want a list&lt;&gt; of all available plugins
Came across some interesting jobs on this site http://www.dreamjobs4me.com/jobs-in-it-software-e-commerce-internet-technologies/ hope it helps you guys. All the best in your job search.
All the good stuff (Minimum edition: Ultimate)
One of the few good things about my expensive ass tuition costs is that my schools Dreamspark account offers one free key for Ultimate.
Already installed. 
Best feature in this update... Menu/Title in all caps. 
Already begging my company to upgrade from 2010
I would agree. Show us what you got.
Pretty much. 
Perfect. There you go. Thank you.
What I meant was that scanning all assemblies in a large solution (not just the plugin folder) and using reflection over the can get quite slow in very large solutions. If you can limit it to a plugin folder or as I once used a regex for names (so that external dlls are not included) it is quite usable, also for larger projects, but not a GetAllDllsInSolution kind of way. Personally I think an XML/Json/... based prescan would be preferable to a dll scan though. For plugins, would something like [MEF](http://msdn.microsoft.com/en-us/library/dd460648(v=vs.110\).aspx) be preferable? 
Somehow I feel evil for laughing at your comment. I know the feelings though. When I came to my previous company they where just upgrading to 2010 (and a lot of people refused and kept using VS 2008).. that was about the time where VS 2012 came out.
I hope you are joking...
I haven't really noticed that its slow with large solutions, most things initialize in a couple of seconds here. So of course it probably slower than usual, but its not really noticeable We've used MEF before and we didn't really like it. Its been a while so they may have improved it by now... The problem we had with MEF is that its mainly a composition framework, and not so much a DI framework. Even the composition part worked funky, relying heavily on metadata (attributes etc) - and it didn't play along very well with other DI frameworks So now we usually use a DI framework for composition, instead of a composition framework for DI. That seems to work a lot smoother
~~Wait, what? Do you mean they've "fixed" the registry hack to un-shouty them?~~ Answering my own question: &gt; Menu Bar: All Caps Option &gt; In Update 3 you can choose whether to display Visual Studio menu bars in all caps or in title case. You can find the checkbox in Tools &gt; Options &gt; Environment &gt; General. The default value is All Caps. This option maps to the user's current registry state, so that users who have already turned off All Caps in the registry will continue to see title case menus. This option automatically roams to all signed-in devices. (Minimum edition: Express)
I ran into this issue about a year ago and it took me almost a week figure out. 
Speaking of VSTO, does anyone have any good recommendations on tutorials for learning it? It's been some time since I last gave it a shot, but the depth of materials out there seemed quite lacking a couple years back.
Most of the code in VBA is easy to port to VSTO so that's a start. Nowadays I mostly just use the macro recorder (there's a blog post about that on my blog as well), peltier's blog (especially since I use VSTO mostly for charting) and google / stackoverflow. There are some books that semi decently cover the VSTO specifics like the ribbon, taks panes,... The thing that's really lacking is some information on how to unit test, structure, optimize VSTO addins. I'll try to write more about that in the future.
That would be great!
I agree with this article 100%. $1,000 is WAY too much for little ol' me who just wants to mess around. Lack of Visual Studio integration is a huge roadblock (their IDE is okay, at best). This is why I keep hoping that Microsoft will just buy Xamarin out and release their tools for free. 
You are using Visual Studio, with plugins? That means you are at least using Visual Studio Pro, which costs $499. Sure, $999/yr for Xamarin Business is a bit much, but if you are already paying for visual studio... Consider what a developer gets paid and the time saved from having to port vs using C#/mono, it's worth it.
Stop bitching and use Xamarin Studio (MonoDevelop).
$500 once versus $1000 per year are quite different.
Thanks!
Yeah that's a solid idea, what if indie devs could just tack on $ for ala carte features like VS.
Or you are signed up with BizSpark and using VS Ultimate for free. Since Xamarin indie is practically targeted at startups (just like bizspark) it's ludicrous to not be able to use it with VS.
Make that $2000 a year... one of the key benefits is that I can write for both iOS and Android, so I've got to buy two subscriptions.
Or you're part of Bizspark and get it for free, because Microsoft realizes the value in promoting its platform.
I'm all for it. I would drop quite a bit extra for VS. For me, I don't need business features, email support, etc but would like VS. VS is a huge feature of business so I'd be willing to shell out another 15-20/platform per month for VS access without second thought.
Actually, I mention that as a possible solution - add it on for $5 a month to your existing monthly subscriptions. I think you could go as high as $10, but that's pushing it.
Yep and in my original post I support that. &gt; I do, however, like the module idea you touch on where you can pay extra for a single module. Although, in order to keep their enterprise market afloat that price would have to be substantial.
I would totally be interested in seeing what you have.
Alot of devs I know use VS off their Work MSDN accounts. So its free for home usage. 
Yeah, and that's the most frustrating thing :3 personVm.IndustrySector.Id is correct, and db.SaveChanges() executes correctly, updating all fields for Person, except IndustrySector
&gt; personVm.Person.IndustrySector = db.IndustrySectors.Find(personVm.Person.IndustrySector.Id); So I'm a little bit confused by this. Are you attempting to link an existing object to that aspect of your view model and then update the record in the database? Because through navigation properties all you normally have to do is just set the ID and then the corresponding object will be linked.
There are plenty of ways to get Visual Studio Pro for free. Two big ones being DreamSpark and BizSpark.
This is partly where my confusion lies. I've never done this with Entity Framework / MVC before. I have pre-populated the IndustrySectors using the seed method migrations provide. I wish to assign each person created a IndustrySector. In the create method, this works fine. I did however have to set personVm.Person.IndustrySector = db.IndustrySectors.Find(personVm.Person.IndustrySector.Id); since the PersonViewModel that is returned by the Create view contained null for IndustrySector.Value - Which caused EF to create a new object in the db. I changed it to the above, and that resolved that issue. But I now have this issue. Is this the correct approach for what I am trying to do? 
This article is the reason I stopped using Xamarin, their earnings model is just completely out of whack.
If IndustrySector is a collection try adding to it? Instead of this: &gt; personVm.Person.IndustrySector = db.IndustrySectors.Find(personVm.Person.IndustrySector.Id); Try this: &gt; personVm.Person.IndustrySector.Add(db.IndustrySectors.Find(personVm.Person.IndustrySector.Id));
Essentially - Regardless of what I change the IndustrySector to, the database never passes the value back - Despite being correctly assigned. In this example, I updated the name to "TestName", and the sector to one with the Id = 7. This is the SQL ~~~~ Started transaction at 05/08/2014 21:27:14 +01:00 UPDATE [dbo].[People] SET [Name] = @0 WHERE ([Id] = @1) -- @0: 'TestName' (Type = String, Size = -1) -- @1: '3' (Type = Int32) -- Executing at 05/08/2014 21:27:14 +01:00 -- Completed in 1 ms with result: 1 Committed transaction at 05/08/2014 21:27:14 +01:00 It ignored the change to the Sector entirely.
As a workaround, I've had to stick with using the Id of the IndustrySector instead of the actual object. public class Person { public int Id { get; set; } ... public int IndustrySector { get; set; } } Removed this from the Create/Edit methods: personVm.Person.IndustrySector = db.IndustrySectors.Find(personVm.Person.IndustrySector.Id); And changed the DropDownListFor's to: @Html.DropDownListFor(model =&gt; model.Person.IndustrySector, Model.IndustrySectors, htmlAttributes: new { @class = "form-control" }) Which works immediately. It'll do for now, but I'm still hoping for an answer :)
Microsoft would release it for free... with a pro or ultimate version of visual studio. I would still prefer to have the chance to keep using xamarin without have to buy a visual studio license. It would be different if finally Microsoft allows to install plugins on visual studio express
Check the browser console for the actual error. 
As everyone mentioned, lucene is probably better. A database is not a search engine.
I don't really have access to their console because its someone elses computer. So I guess I would have to ask them? Do you know of another way to test all devices, browsers etc?
This is also illegal. Just wait til someone creates an app that's worth a shit and they want to make *real* money off of it...
I love how everyone takes this opportunity to promote their favorite open source project without any understanding of the problem at hand. He never said that Full Text Search wasn't working for him. He just wants a way to use EF to access it. So telling him to rip it out will: * Replace something that works with something that may, or may not, meet his needs * Require a possibly significant development effort. * Will still be inaccessible via EF 
How would you write this query using Lucene: DECLARE @MapCenter Geometery = ... DECLARE @Radius FLOAT = ... DECLARE @SearchTerms varChar(4000) = ... SELECT IncidentTitle, IncidentDate, Details, t.IncidentTypeName FROM Incidents i INNER JOIN i.IncidentTypeKey = t.IncidentTypeKey WHERE CONTAINS(Details, @SearchTerms) AND @MapCenter.STBuffer(@Radius).STContains(IncidentLocation) 
Never done much with geometry personally, but the first google result for "lucene gis search" turned up [this]( http://www.ibm.com/developerworks/library/j-spatial/). Just as an ORM shouldn't be used in all situations (as the original question made clear) neither should a database. 
Damn, that's pretty impressive. I wonder if it actually knows how to use spatial indexes. (I say this because SQL Server doesn't. I have to manually specify the index or it just grabs the Alaska index for searches in Ohio.)
You've lost me now, but I'd guess not. Lucene doesn't have much "smarts" built in, it just provides utilities to create and query indexes. You might also be getting into using multiple indexes which is currently beyond me.
This is how you have to do it. When you're binding a dropdownlist to a list of objects, it has two values - a Data value and a Text value. The data value is what is based back to the controller, not the complete object itself, so you need to bind the dropdownlist to the ID instead of the complete object. Edit - Here's an example of a full DDL declaration with select list parameters : @Html.DropDownListFor(model =&gt; model.CalItem.statusID, new SelectList(Model.CalItemStatus, "statusID", "status", Model.CalItem.statusID)) If you don't put in the "statusID" and the "status" in the select list it will try and automatically resolve them, but its what your equivalent of "statusID" that is passed back.
Seriously? I would prefer to use C#, but I might as well use phonegap to build mobile apps.
To be fair, it's really not $1000 a year, the license is perpetual, the support is the yearly cost.
For GIS work you usually need separate spatial indexes for each region. In the US that means Alaska, Hawaii, and the Continental US. Each index is based on a bounding box. That box is divided into 9 or 16 smaller boxes. Each of those is further sub-divided through 4 to 8 levels in a tree-like structure. The leaves hold the list of primary keys that are in the smallest box. As you can imagine, having one giant index instead of three would leave a lot of empty leaves and make others far too big and full. In theory if you ask for everything within five miles of a point it should lookup which index to use by those top level bounding boxes. In practice, with SQL Server, you have to manually specify which index to use because it simply isn't that smart. 
I'm pretty sure its not illegal. As long as your using it for dev purposes, you can use the license at home or at work. Now there might be something in your employment contract against it, or could cause you issues if you tried to monetise your app. But that would be a civil matter, of contract terms, not a criminal, matter. Unless I've missed something....
I should have clarified, your employer might deem it illegal as theft or they will say everything you created with their license of visual studio is owned by them (like you said).
Even though Microsoft's rep has improved a lot lately, I don't really trust them to be a good custodian of Xamarin. I fear that the experience of using the product on anything other than Windows would degrade pretty quickly.
You could use ajax to pull JSON data from the server when your combobox changes. Instead of refreshing the whole page, you update your control contents based on the returned data.
I'd like the link as well.
Sup penton --pm
I didn't bother checking how old the project is but it's using Web forms instead of mvc. That's a deal breaker. 
browserstack.com
Now you've gone and made me put a lot of thought into a problem I don't have ;) Could the chunks themselves be part of the index? So if I search from a point, give we everything in chunk x, y? The chunk/s should be able to be calculated from the point yes?
My DBA disagrees.
Sup brother :)
It's a fairly recent project and I wouldn't be so quick to judge it simply because it uses Web Forms. It's easy to forget that it's just as easy to poorly write or architect an MVC application as it is a Web Forms one. Additionally, this app is more of a utility application, so the technology it was written in shouldn't matter too much as long as it works as intended.
&gt; Additionally, this app is more of a utility application, so the technology it was written in shouldn't matter too much as long as it works as intended. Depends. If your evaluating several tools then the product/projects future needs to be taken into consideration. Being built on an archaic platform isn't a deal breaker, but it goes in the "cons" column. 
For this project, it does. Web forms has higher overhead, which matters for real time. Yes it 'works', but it could be improved. It's a deal breaker for me personally. From a development perspective, It's much easier to work on mvc imo unless you're the one who wrote it.
Can be but really shouldn't be. That's just setting yourself up for a rewrite. vNext will be the final nail. 
I don't think that Web Forms is going to disappear, even with vNext and how spectacular it is going to be. MVC is clearly a better approach and vNext only continues to move in the right "leaner" direction. I haven't found a need to make anything with Web Forms since the release of MVC, but I wouldn't say that is the norm. There are simply too many Web Forms applications out there for it to just die. It'll be around for quite some time I feel. There are too many .NET developers out there that are still afraid of MVC and losing their precious state , forms designer and their controls :( 
I wasn't at all involved in this project and I certainly agree with using MVC over Web Forms in just about every occasion. One of Web Forms strengths has always been "rapid development" and that it an extremely mature technology. It's likely the creator simply may not have been familiar with MVC or perhaps threw together a quick Web Forms app as a proof of concept and it eventually snowballed into what it is today. Who knows, the point I was trying to convey is that one shouldn't just assume the quality of an application is "bad" just because it was developed using Web Forms instead of MVC. There are lots of bad developers out there who write bad apps in both technologies :)
I know how that is. I'm dealing with Web forms on multiple projects that have multiple issues. Not all of them are because of web forms but it adds to the burden. I recently worked on an Mvc project made by a Web forms guy. You could tell it was a Web forms guy just learning mvc. Just have that bad taste. It's open source, eventually someone will rewrite it in mvc or service stack. You made a good argument that I think went rather well considering how these end up.
Spam
How does this compare to Stack Exchange's [opserver](https://github.com/opserver/Opserver)?
This web api is not using authentication form. It is a different application from the application that makes the ajax. Exists to consolidate this Authorize so that I can call the web api via ajax and via mobile applications?
Generally yes, you can use the same FormsAuthentication ticket in your cookie to send over the line to authenticate like you would in a controller for example.
Unfortunately, I can not use cookies :/
What if any sorts of credentials do you have in the consuming mobile app? Is there a concept of individual user accounts. You can do things like use http basic authentication backhauled to your forms authentication store without too much trouble. Loads of options, the key trick is figuring out what secrets the users might already have.
Chillin on Miami Beach. Carefree. Doing dynamics development for the lulz. 
I am the founder of a Seattle startup called HackerGym (www.hackergym.com), which is a free service that helps CS students and entry level professionals, like yourself, prepare for the technical and behavioral interview. If you need help with the Behavioral interview, such as how to respond to questions that you don't know the answer to, check out our behavioral library. We give you the best practices for what to do and not to do. As for the technical interview, we simulate the actual interview, and teach you 'how' to solve problems using patterns and general strategies. Each problems also comes with detailed solutions, pitfalls and hints. We just launched the Beta. Please try it and let us know if it is helping you. You can contact me at team@hackergym.com.
This is the main reason I have never taken Xamarin seriously in any of my tooling considerations for projects. I already shelled out for VS2013/Resharper, there is absolutely no way I'm going to pay another $300 to downgrade to their feature-sparse IDE to *try* their product.
Because I do not want to work with cookies when I make the app for iOS and Android. I need a hybrid thing, that works well with AJAX and other customers
The dead-on simple way to do this in ASP.NET is to disable anonymous authentication in the web.config and enable windows auth -- or basic auth if you have SSL and need to be reverse proxy friendly. From there you can leverage all the normal attributes one uses for authenticating. Groups returned are NT groups that the user is in and that can get to be a performance issue in large enterprises. Now, this doesn't provide things to identity providers but the IPrincipal has the NT username and you can unwind it to get the WindowsPrinciple that has SIDs and such if you need it. That is enough to key any custom user data store off of.
ReturnUrl is where the user wanted to go, but wasn't needed to authenticate first. The first clause of the inner if statement on the POST action redirects the user to their desired page after login, if available, otherwise defaulting to the Index action
I know that. What I don't understand, however, is why is `ReturnUrl` being included in the URL as a query paramater when I enter `http://localhost:52662/Admin/Index`. I know it should redirect me to `Account/Login` but I expected it to be without that query string. I don't see in what part of the source code there's something like that. All is done in the book is define forms authetication with `loginUrl=~/Account/Login` and add one credential in `Web.config`, and then add the `[Authorize]` attribute to the `Admin` controller. **EDIT:solved. I see that the ReturnUrl is being added by Forms Authentication. Something that is not mentioned in the book**
It's all in how the code is written. There is no absolute answer.
It is essentially a circular reference, but not an infinite loop. If you were to traverse the list of objects using recursion then you would create an infinite loop.
What's XPS?
Oh, that. Yea sorry, I've never seen so much as a intro tutorial for it. Pretty cool tech from the specs though, I wish it had made more traction.
I'd like to pose a hypothetical to you (or anyone interested): Suppose your job is to write a data transfer object Person class. The purpose of the class is just to provide structure for other classes and methods to pass data around. You want to give good structure, but prevent abuse. Do you write the class as public class Person { public int ID {get;set;} public string FirstName {get;set;} public string LastName {get;set;} public Person PersonalAssistant {get;set;} } or public class Person { public int ID {get;set;} public string FirstName {get;set;} public string LastName {get;set;} public int PersonalAssistantID {get;set;} }
I'm a DBA trying to understand object oriented design. The DBA part of my brain says the Person class has no business to tell anyone the Personal Assistant's last name or first name. The Person class can tell you the ID of the personal assistant, however, anything about the personal assistant needs to come from an instantiation of that personal assistant. I'm trying to wrap my head around why objects do not need to confirm to database normalization rules. I'm not totally convinced yet that objects do not need to confirm to normalization, however at this point I am open to new ideas.
If you were writing the class, would you feel it was your responsibility to ensure that an infinite loop would never result - either by preventing a circular reference by the set accessor, or by crafting a constructor or the get accessor on the PersonalAssitant property to prevent it?
Not at all. Also because it is impossible to prevent certain uses of the class. This pattern is not that abnormal. In fact it is common when developing a user/role system and you want auditing of who changed and created objects. A user class would have an edited by and created property which is of type user. I have never once been concerned that someone would cause an infinite loop with that object.
I've done it a few different ways, based on the system. The first method is fine, as long as you prevent the infinite loop scenario originally mentioned. Either don't load down the stack beyond a certain level or have a set of Person objects to pass in as a reference, so each Person gets loaded only once. The second method is useful with some situations. Usually I'd add a fifth property that loads the Personal Assistant on the first call. Something like the below, with actual formatting and whatever else I goofed up writing the concept out quickly. public Person PersonalAssistant { get { if (_personalAssistant == null) { _personalAssistant = new Person(PersonalAssistantID); // Or a factory or whatever your load pattern looks like } return _personalAssistant; } } 
You can try a decompiler if you know which language it was written in, or try your luck with a hex editor.
On a scale of 1 to 10, I'd rate this as 9 for "Very fucking difficult". If it was .Net a quick JetBrains decompile and recompile would do it nicely. Some C++ program? Ouch.
I never said it was easy :p Generally if you can't access some sort of resource files you will have a bad time..
Recursion is trivially simple to deal with in a fully expressive language compared to set based semantics. Generally you're not going to want your objects to be normalized as you're going to have to bounce through a bunch of look ups to get to the data you want. The first part of your comment, regarding whether you want the full reference to associated data or just the ID, is completely up to the requirements of your project. If the requirement is that you not expose that data, you write your code to not expose that data.
forget it, the Steam client is written in C++. Meaning it will be next to impossible to decompile the binaries to something useful. You will have to dig deep in the assembly to figure out what is happening, don't bother because you will dive in the deepest pool you have ever seen.
I'm looking back at the example you posted in the thread. The answer I would give is "Potentially both". From a Database standpoint, there is a "right" answer, you store the ID (sorry, in actuality, both answers are wrong). From the class hierarchy standpoint, it is not to cut and dry. How often, when looking at a person is the Personal Assistant information accessed? If it is a lot, then you should not have to make a separate call for it. If it is rarely, then look it up as needed. There is also a dependency on what the api looks like for getting the person (and possibly the PersonalAssistant). The more cumbersome that code layer is the more prone to mistakes in the code base. Sometimes you go for convenience of development over application speed (depending on use cases). That stated, even in this trivial case, there are a couple of rookie mistakes in the design... 1. why only one PersonalAssistant? Really? No person will have more than one employee? That cannot be right. Seemly like an arbitrary rule. 2. firstName/lastName is very outdated. Just do FullName.
Even if you did manage to change the colour of your name, it would only be reflected on your machine and nobody else's.
Isn't the steam client just displaying web sites inside some web browser? In that case you could just capture the network traffic and inject your changes into that... no idea if it's in any way encrypted. But this seems at least doable in contrast to rummaging around in the memory of some other process.
The steam client supports custom themes, why don't you just create a theme that has your username in a different color? Changes in your client will not reflect on other peoples' PC anyways.
Contrary to some of these replies, it's perfectly possible to hook into the Windows GDI+ APIs and modify other apps' GUIs. However, in the case of things like Steam I'd guess that they're likely to be drawn custom either using an embedded web view or via an accelerated graphics engine. Both make it harder. If it's a web GUI, you might have some luck intercepting web traffic and rewriting on the fly... 
Steam uses SDL as far as I know
It's always possible to prevent a circular reference: calculate the transitive closure of the graph built with the edges of the current tree. If the transitive closure contains a path from A to B and A-B was the edge you wanted to add, then A-B will create a circular reference and by not adding it it will prevent such a thing. That said, a circular reference isn't bad. It's up to the traversal code of the reference whether it's a problem. If you use code which thinks it's not going to run into circular references (like the dumb serializers in the .NET framework), then preventing the circular reference is key. 
(Lost my 3000 word response to this by hitting Back, which is I suppose rather appropriate). When you are running an update in a database, you can be assured that if it fails, you don't have to worry about half-completed updates. You also don't have to worry about someone reading something that's not yet committed by accident (you need to turn on special options to see uncomitted data) This is because databases support Atomicity, Consistency, Isolation, and Durability (ACID) at a low level. It's built into everything they do. Sometimes (such as for read uncommitted data) you can override that, but you get into Thar Be Dragons territory if you're not careful. Procedural languages have no such protection by default. To get atomicity of updates, depending on your platform - it can be a lot of work. But, by the same token, procedural languages can do things that are incredibly difficult. So, whether you choose to have a direct object references is entirely up to the developer and what problem they are trying to solve. Sometimes this is necessary and good, sometimes this can lead to unexpected and undesired behavior. There is no single right answer for all situations. I have code where I need to do this sort of thing for performance reasons - I keep a copy (sometimes many copies) of objects all over the place. 
&gt; That stated, even in this trivial case, there are a couple of rookie mistakes in the design... That was just an example for my question, not a real-world example. Than
If I understand the question correctly, I think the best way to accomplish this would be another class which wraps a dictionary, and the can wire property changed events as objects are added to it (and unwire as they are removed). Then when a property changed event is raised, your class can raise another event with the appropriate key / value / whatever. 
Correct. Do the objects have to be stored in dictionaries? An alternative would be to use an ObservableCollection&lt;&gt; which you can then override OnCollectionChanged
I'd have to do some research, I'm still learning data structures. This is all running on the compact framework 3.5 and VS 2008. It is an embedded system. 
Looks like you're right, from a bit of Googling. In that case, I guess OP could do something clever involving creating proxy DLLs, but whether that'd *keep* working once Valve cottoned on, who knows? Unofficial hooks into third-party software are always a bit flaky, depending on how and why you're doing it.
Except almost no one uses XPS. A bit of a dud from Microsoft.
Thank you for actually answering my question. I'm already modifying the webpages. I just wanted to take it a step further to actually change the color of people's names in like the friends list and such.
I used [this](http://www.codeproject.com/Articles/125810/A-complete-Impersonation-Demo-in-Csharp-NET) for my MVC STS authentication server.
I used observable collections for something similar, definitely look into this.
&gt; Recursion is trivially simple to deal with in a fully expressive language compared to set based semantics Sql is pretty good at recursion these days.
&gt; I'm not totally convinced yet that objects do not need to confirm to normalization, however at this point I am open to new ideas. Depends on the objects. If these are entities that map directly to database tables then they will be just as normalized as the table. For other cases, such as sending it to a view where it may be serialized you would use a view model or a DTO or some other representation. Just as databii have denormailized views so can objects.
Man, I haven't heard of XPS docs for years. You can try searching for OpenXPS or open xml docs. Would it maybe be easier to convert it to a more usable format like PDF, modify and convert back?
I get how following SOLID religiously kind of makes sense. But I find it ridiculous when I read IShitThisInterfaceIsLongSingeltonFactoryWhatever. That is just silly! 
It should go into piss off mode. I hate that product... It is total whack job. I just wish Transforms existed for everything and not just web.configs. 
You say replying to the author of it... You can use the transformation engine on the command line, source is out there.
Agreed. Everything is a guide, nothing is a rule. Even the stuff that says it's a rule. But on the note of naming interfaces, I honestly believe better names can be used if you *describe* the role rather than just create a title (or even worse, use the class name and stick an "I" in front of it like a truly lazy goit). Names like that now infamous Java abstract factory factory thingy are just pure laziness by the developer to come up with a better name. Instead of "ISomeSomethingFactory" go for "ICreateSomethings". Instead of "IHeaderPropertiesDictionaryContainer" go for "IHaveHeaderProperties".
Transforms work perfectly fine outside of web projects. There is a nuget package with the web targets file. Add that and reference the targets file in your csproj and the transformXML task will work. 
So you're complaining that I developed an extension to solve an issue that you are looking for? You're pissed at me that its not built in? You're note doesn't make sense to me.
I'm aware a lot of people are anti-patterns, and anti-SOLID in general, but following at least the spirit of these suggestions can go an awfully long way. And DDD executed correctly with the right project can be just awesome. But yes, rules of thumbs abound in these parts.
Should interfaces start with a verb? I don't know.
They do however have a purpose, when I look at an entirely new code base I can easily recognize each part by it's interface So when I read `ISomeThingSomeThingFactory` I know it's a factory (that is it relates to the pattern) the same can not be said about `StuffMaker`. 
based on your post I am crossing my fingers that the reality of no new updates will push the hands of the powers that be and have the internal teams shore up this feature as they should have years ago. 
Actually that exists: Chose your project in VS, right mouse -&gt; unload project. Then right mouse -&gt; edit *.csproj file. &gt; &lt;UsingTask TaskName="TransformXml" AssemblyFile="$(MSBuildExtensionsPath)\Microsoft\VisualStudio\v10.0\Web\Microsoft.Web.Publishing.Tasks.dll" /&gt; &lt;Target Name="BeforeBuild" Condition="exists('App.$(Configuration).config')"&gt; &lt;Exec Command="attrib -R App.config" /&gt; &lt;TransformXml Source="App._Source.config" Destination="App.config" Transform="App.$(Configuration).config" /&gt; &lt;/Target&gt; &lt;Target Name="AfterBuild"&gt; &lt;Message Text="Copying to Deployment Dir:" /&gt; &lt;CreateItem Include="$(OutputPath)\*"&gt; &lt;Output TaskParameter="Include" ItemName="Binaries" /&gt; &lt;/CreateItem&gt; &lt;Copy SourceFiles="@(Binaries)" DestinationFolder="..\Deploy$(Configuration)\$(ProjectName)" /&gt; &lt;/Target&gt; &lt;/Project&gt; This is from a project of mine. Copy the BeforeBuild. After you are done, simply chose right mouse on the project again and chose reload project. Done
They don't.. "I" is not a verb.
I've had nothing but trouble with it and I vented. I'll eat the silly negative karma because I don't care about that stuff. Shit it was just bad timing because minutes before I read your post I removed slow cheetah from my project. What I do care about is the fact that I insulted you for no good reason and I want to apologize. I know supporting something of that level is extremely difficult and you can't possibly solve every little niche situation people come across. Hell, the product probably works for 98% of .Net developers and that's amazing. Just to clarify my statement from before a little. I wish Microsoft implemented transforms for everything and that we didn't have to use a third party application when clearly MS already has what it needs to accomplish this.
Fair enough, you did say that. It does not make my point moot anyhow, my point being that the `Factory` part - or any part containing information about whatever pattern it represents - is fairly important to convey meaning. So we end up with things like `IOrderStrategyFactory`.
You have a big stick up that sour puss ass of yours. :) Have a Good Day!
This is unfortunate news. :( Do you have a source for this claim? The last commit was 23 days ago, and I can't find where the author is abandoning SlowCheetah. Worst case, the source code is here: https://github.com/sayedihashimi/slow-cheetah
Here is the announcement https://github.com/sayedihashimi/slow-cheetah/issues/158
Thanks for the link! Are you the author, by chance? If so, thanks for SlowCheetah. It's been a valuable tool in a few environments I've been a part of.
Yes I am, thanks for the comments I appreciate that.
Hey, if you don't want to take my apology for me being a dick... Then you can fuck off. 
Sorry didn't realize it was an apology. In either case I'll take it. Truce :)
Just wanted to say thanks for a very useful extension.
= ) Sorry again for being a dick. I would remove it but I stand behind things is say even if I withdraw them later!
No problem, I re-read your apology and it was pretty clear. Not sure how I misread it before. Thanks.
[The author posted this announcement to this sub yesterday](http://www.reddit.com/r/dotnet/comments/2d990c/slowcheetah_is_going_into_maintenance_mode_only/).
For better or worse Silverlight is pretty dead-end at this point: * If you want a rich web UI look at something html5/javascript based. * If you want a thick client go with either modern ui or WPF * If you want a mobile app with a thick client go with Windows Phone (or Xarminian Forms if you want to make it for devices people actually use). Basically it was a flash killer that was concieved right at the point flash was killed by Steve Jobs. It never got an installed base. If it wasn't for ravendb server's admin panel I would not even install it. And ravendb 3.0 is html5.
Great to see them stealing the best ideas from scala. I don't like the clone syntax though. I think I'd prefer if it was more like x.clone { y = 1 }
Agreed. The `With` keyword makes sense in VB, but not C#.
What UI library are you using? WinForms? WPF?
You need an object that stores all of the choices. As you go from page to page that one shared object is updated with the most recent values. If using WPF, this happens naturally via data binding. If using WinForms you need to copy the data each time they press next or back.
This may be helpful: http://en.wikipedia.org/wiki/Post/Redirect/Get If you tweak PRG a bit, you can get the browser to display a native "This page has exipred" notice to the user. Also, take a look at the OutputCache attribute to decorate over you action.
Wonderful! I had no idea that System.IO.Compression wasn't implemented, but I'm glad it is now.
I will get to snooping around on this site later today. Thanks for the suggestion.
Part of the challenge is it didn't live long enough nor get popular enough for the body of literature to get created. I definitely didn't do silverlight in anger but my general understanding is that it was logically congruous to WPF so most of the XAML-type things one did there would apply to silverlight as well. The main challenge was that it ran in a very limited profile so a lot of system calls -- and thereby libraries -- were not available without special care and attention. Anyhow, I would check out the major tech publishers in the field -- Manning, Apress or Wrox. They all probably did a silverlight book at some point which would likely be a decent starting point. Mvc is moving so fast that I'm not sure many books are out for the current version (MVC5). MVC4 is close enough that books there should help. If you are responsible for the UI stuff then I would really focus on the javascript / client-side programming angle here. 
I'm using WinForms
The thing is, it does save the data when I don't remove any of the steps, but when I do remove steps, the data is lost when I click next or back
I really appreciate this response and insight. I've mainly been and integration programmer and trying to work my way back into something more customer facing. I agree with you on the WPF front. The XAML and MVVM architecture are pretty similar if not the same between the two. Sad it didn't take off, from a programming standpoint it was actually really fun to work with. From an implementation standpoint though I almost lost all of my hair.
A lot of the ideas and terminology here - immutability, records, the With keyword - are straight from F#. Many of the ideas that have come to C# are taken from F# and similar functional languages, and it's great that they are added, but it's weird that F# is seldom acknowledged for this.
Played with the idea of using MS Visio and UML/Diagrams which obviously would be great for structure, just looking at options. Having to check in documents for sharing sucks. 
Yes we are .Net shop. Haven't used class diagrams in VS before, so will look into that. We have a client's main web app that is aging, and we need to go through and map out existing functionality to give us a starting point for the new system. Its a vast system covering 10+ user domains. 
I don't think there is a good automated way of doing this -- though having something crawl the site to find all the urls / endpoints is worthwhile as it will provide some verification you are covering everything. For tooling I would start at Evernote's web clipper in chrome -- see http://blog.evernote.com/blog/2014/07/17/web-clipper-post/ for a discussion of some new features. You can run through the app, clip pages and even mark up features as needed. Get all that in a notebook and then work out desktop publishing options. Or just leave it in evernote for the team to reference going forward. Evernote has some pretty powerful organizational features so you could also leverage that to help organize things.
It isn't like F# is a person whose feelings can be hurt. EDIT: And the With keyword has been in VB for ages as well. 
Written originally in SL2 or 3 with absolutely no design pattern in mind. Custom UI components everywhere that borderline work as is. Basically a hand grenade with the spoon tapped shut. I don't think I could justify the T&amp;C to fix this product at this time. Honestly was sort of hoping SL5 release would blow this product up and give me an out to fix the product, no such luck. Is there a good resource for knockout? Online or otherwise?
So just a normal app then ;) The documentation on the knockout website is good. If your familiar with mvvm it only takes a day or so to learn the basics and a week or so to become an 'expert'. It's ridiculously simple as long as you understand the concepts. Try to knockout (pun intended) a clone of the silver light app in a day or two and see how far you get. Learning silver light isn't easy so you could be better of time wise. Just to give you an example, a while ago I was working on a complex java script UI that was a complete mess. I had a hunch that the mvvm pattern would clean it up immensely, so I did a Google search and found knockout. After a couple of short nights coding I had a demo to show the boss with a few features they were dreaming about. No sooner had I shown him, he was showing customers and it was fast tracked to production. Edit - it reads as though I'm proclaiming knockout to be a silver bullet, but you know your app a lot better than me, results may differ.
It's not like f# invented any of those concepts. 
No, but it would be decent to acknowledge the inspiration. VB may have With as well, but it's used for something completely different, just happens to be the same word.
I'm going to presume your wanting info on Metro style apps, but this should also relate to WPF. But take a look at this: http://msdn.microsoft.com/en-gb/library/windows/apps/xaml/hh465337.aspx#layout_overview No direct replacement from what I remember. But plenty of other layout options which may help you achieve similar affects. It would be interesting to see how Xamarin Forms implements this, as they support it on every platform, and must translate it to a native element....
Hey, My name is Jason, one of the instructors over at CoderCamps, and yes one of the three people who graduated to end up working here. I can assure you, the three of us who were hired were hired because we were the best of our classes. Our staff is no incompetent. Yes we don't have CS degrees, or years of experience. But you have to realize what a bootcamp is and what it isn't. What it isn't is a replacement for a Computer Science Degree. We won't teach you the intricacies of how each language works, algorithm design, or things like that. What we are is a way for students to get started in a career of Web Development. We don't teach you everything, but we teach you everything you need in order to get started. We believe that we teach you Breadth, and the Depth will be learned on the job. People say this is wrong, that you need to go the 4 year of college route etc. But the fact that our students get hired and are successful shows that is not the case. You don't need to understand every piece of how LINQ works, or how operating systems work with memory, or how to best implement the Dijkstra algorithm to become a jr dev. You just don't. I'm sorry that /u/zstarz didn't feel her time was best spent at camp. If she would like to reach out to me or the camp we will be glad to talk with her to find out how best we can help her. 
As for every Microsoft technology the MSDN is really awesome. Here's the place to start for XAML based Windows Store apps: http://msdn.microsoft.com/en-us/library/windows/apps/xaml/br229564.aspx XAML is so much nicer than Androids xml. You do not need android: for everything and you can actually build things right in the file rather than building the items somewhere else and filling them into the file in code. (I'm talking about actionbar buttons compared to this: http://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh781232.aspx) &lt;StackPanel&gt; &lt;SomeElement id=someid&gt;&lt;/SomeElement&gt; &lt;TextView content="Hi!"&gt;&lt;/TextView&gt; &lt;/StackPanel&gt;
Thanks - I'll take a look and let you know when its all good.
You're going to learn that [databinding](http://msdn.microsoft.com/en-us/library/windows/apps/xaml/hh464965.aspx) is the biggest difference. Spend time to learn it properly. Most of all it's a blessing, but sometimes it can be a pain. I don't like the fact that it's all Strings - no strong typing in XAML, so you're really dependent on the IDE to make the connections. As for RelativeLayout, ~~there's no direct equivalent~~ DockPanel it is, [as TheVikO_o said](http://www.reddit.com/r/dotnet/comments/2djxrv/new_to_xaml_come_from_a_background_of_android/cjquvqr). Then you have [GridLayout](http://wpftutorial.net/GridLayout.html) which is much more powerful than Android's TableLayout. The fact that you can use relative measures (50%) or "take the remaining space" (*), make it very flexible nad can do many of the tasks you'd use RelativeLayout for.
Once you get the idea of Data Binding, learn about MVVM, a common pattern derved from MVC that is widely used in XAML-based applications. MVVM is the 'right' way of using data binding.
Is this asp.net webforms? What technology besides vb.net is in use?
Literals? http://msdn.microsoft.com/en-us/library/system.web.ui.webcontrols.literal(v=vs.110).aspx
This entirely depends on what you're trying to do. If it's just a string that contains all the html * Don't use regex. [See this classic StackOverflow answer for more](http://stackoverflow.com/a/1732454/152168) * You could search for a substring on the html and insert another string afterwards as a cheap way of doing it. * You could use an HTML parser like [HTML Agility Pack](http://htmlagilitypack.codeplex.com/) to inject html and then rewrite the html again. If you're trying to modify a webpage from a WebBrowser controller * You can use the WebBrowser.Document object to scan for elements and inject html pretty similarly to how you would in javascript. I had a snippet of stuff for what to do with WebForms and MVC, but something tells me that's not what you're trying to work with.
I'm guessing that you are reading some HTML off of disk and then you are inserting some happy message and then emailing that out or saving it back to disk. If you are doing something like that I would suggest using the HTML agility pack:http://htmlagilitypack.codeplex.com/ Easiest way to munge HTML in .NET. Other option would be to actual save the html as a razor view and use the view engine API to bind to it and execute it. Probably is overkill in this situation though.
If you have all the DIVs with runat=server, then it's easy to do in the code-behind. But that's also an ugly mess. If it's javascript you're injecting, look to jQuery to use dom selectors to find your targets.
I assume you mean you have an HTML document as a string (otherwise you can just use a web control)? If you have control over the HTML then you could insert special markers to use as search and replace targets. Eg. your HTML template could be &lt;html&gt; &lt;body&gt; &lt;div&gt;Some template header content&lt;/div&gt; &lt;!--HEAD_AREA--&gt; &lt;div&gt;Divider div&lt;/div&gt; &lt;!--BODY_AREA--&gt; &lt;div&gt;Some footer header content&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; Then do html.Replace("&lt;!--HEAD_AREA--&gt;", "&lt;div&gt;My dynamic content&lt;/div&gt;");
If this is an ASP.NET project you should definitely not be manipulating HTML tags directly; this is what the templating engines (WebForms, Razor) are there for.
HTML agility pack seems like the way to go. Thanks!
While HTML Agility Pack is a better solution, you can use Balancing group definitions with Regex.
How are you updating the database? ASP.NET has (practically) nothing to do with the database.
Pretty sure op means Entity Framework Code First.
Yeah. Noobie here :/ Entity Framework Code First
I found [this guide](http://www.asp.net/web-forms/tutorials/aspnet-45/getting-started-with-aspnet-45-web-forms/create_the_data_access_layer) but I'm worried about losing stored procedures, tables, udf's, etc.
Instead of inheriting from the DropCreateDatabaseIfModelChanges class, you want to use MigrateDatabaseToLatestVersion and use the Update-Database command to generate configuration / scripts. Honestly I haven't gotten the hang of it yet myself and it doesn't feel natural to me yet. I usually work with a development database and a production database and do a schema compare when I need to deploy. 
I'm currently brushing up on my .NET technologies and I found this very helpful. 
This was exactly what I needed, thank you so much!
Same here. There has to be a newfangled way of doing things every X number of years. I hate code first being shoved down my throat.
Here's the starter docs: http://msdn.microsoft.com/en-nz/data/jj591621.aspx * I'd recommend you don't use automatic migrations. Create migrations manually after you've done changes to your data model. * I normally generate the SQL for each migration (using the -Script argument) and save it into a .sql file next to the migration code, and manually migrate my database with that (both local and live). * If you're using automatic migrations, and the migration will potentially cause data loss (dropped column or table), it won't run the migration unless you set the AutomaticMigrationDataLossAllowed property on your migration configuration to true (the default is false). Entity Framework Code First Migrations seem troublesome and cumbersome at times, but as soon as you work out a good workflow for yourself, I would recommend it, and overall is a good thing.
Records have no inherit concept of structural sharing, but that's effectively what you get if all the parameters are likewise immutable.
If you are using Code First you shouldn't be using stored procs, udfs, etc. Code First was meant for simple databases.
Do you think you can help me with [this error I'm getting](https://htmlagilitypack.codeplex.com/discussions/561348)? I tried using it :/ Thanks!
I would recommend dropping the ORM entirely. 
SSDT doesn't care if you use an ORM or not. But, unfortunately, it only works with SQL Server.
I'm willing to bet the With syntax will be based on the Is operator. If so, you get a bit of control and maybe ability to change one type into another. 
Azure staging to production is nice. Publish feature and vs integration solid. 
Use Database First, regain sanity.
Troy is awesome.
I wonder if we are getting a generic constraint based on record. Something like "where T: record"
I'm interested... Why?
Nice
either use database first and generate you models using ENtity framework power tools / hand code your models or look in to using migrations 
you can use sprocs just fine with code first models but then it really isn't code first anymore then is it... functions pretty much a given tho unless using in a sproc to map i prefer using Dapper when it comes to mapping models to sprocs and functions tho it doesn't have good support for relationships have to sacrifice some things with micro ORMs 
This. Database first w/ Reverse POCO Entity templates. So easy.
Sorry, but how is this constructive to answering the OP's question? "Don't use that thing". You may as well keep your comments to yourself. They've obviously chosen to go down the Code First path.
So easy, except that "Reverse POCO Entity templates" often generates incorrect models/relationships, in my experience. It's a good starting point, but I'd never use it "as-is" in one of my production builds.
Never had that problem and have several apps using it successfully. Report those to the creator, he will fix them.
Nope. Record is just a compiler construct. 
According to the documentation you are limited to just Create, Update, and Delete. I wish Code First was just a pattern, but I've been slapped by error messages saying something about using a CF context in a non-CF setting.
No. I'm not talking about SQL upgrade scripts. I am talking about Database projects. Where you hit run Run and it says, "just a second, let me update your local DB to match". Now I will admit that once in a while I need to generate and tweak a migration script, but that's pretty rare after v1 hits production.
Because he's obviously new to this, and I recommend changing while he still can. I've recently come into a Code First project, and have had nothing but headaches with it. That's why I recommend Database First.
3
Web API with attribute routing for rest, wcf for soap. Same bll for both. Easy Wcf for rest is old, inflexible, and not modern. Please don't use it
What does the client want? .NET Clients work better with WCF/SOAP, browsers want JSON. 
We have multiple clients that are currently java and .NET shops. My boss wants to have all our clients/ future clients covered, essentially.
Sounds like WCF/SOAP+REST is the way to go. http://www.codeproject.com/Articles/571813/A-Beginners-Tutorial-on-Creating-WCF-REST-Services Not quite as elegant as WebAPI, but it negates the need to create a separate REST and WCF/SOAP server.
My install always stays logged in without re prompting. Maybe there's something wrong with yours. 
I believe you can host WCF and Web API in the same web application project. Start with an empty web project template, add Web API through nuget and then just add web services an API controllers as new files, basically.
Should work, but routing the calls so that both versions use the same real implementation will be a bit tedious. 
Sounds like you created a bad database. I've had much, much less problems with DB First than with Code First.
I have the same issue, made all the worse by having 2 factor auth enabled. It really is disruptive! I was hoping the last update would fix it, but no.
The one from Apress is called "Pro ASP.NET MVC" and the newest edition targets MVC v5. This is really a great book; I can also wholeheartedly recommend other books from the author (Adam Freeman) dealing with web development.
I've heard the MVC 4 book is actually better than the new one. I forget why. I think they removed some stuff of something. I just checked amazon and the MVC 4 book is a dollar more. Go figure. I'm sure the MVC 5 is excellent still.
&gt; If you are using Visual Studio 2013 editions (Professional, Premium, Ultimate), you are required to login with your MSDN credentials at least once every 30 days or your copy of Visual Studio will downgrade to a trial copy. Why it requires you to login and doesn't just talk to a webservice I have no idea. That said I believe I need to login more often than every 30 days, so there must be another trigger.
You can get rid of this with ease: just get a hold of your license key from MSDN, and punch it into the IDE (this prevents you having to log in ~~non-stop~~ every 30 days). You can do this by clicking the user settings button (the arrow next to your name in the upper right) and selecting account settings, after that there should be a link to enter in your product key near the bottom right (its very well disguised, I only found it by accident, unfortunately I can't screenshot this cause once its entered the option disappears...). after doing that you should have something looking like [this](http://imgur.com/tCx99iM) in which case its worked and you never need to login for VS license info again. The login crap is still retarded though (it stems from the fact that the MSDN version no longer have license info embedded in the installer). unfortunately you'll still get the retarded popup for a few seconds each time you try access Azure on a new VS instance.
Honestly is really flexible on the soap end and you have some flexibility on the rest side. Need to muck with headers use MessageContract instead of DataContract. You need a lot less XML in your web.config than you did in .net 3.0. Anything weird you need to do has a blog post written about it. For pure rest I use Nancy. For soap I love WCF.
[Here](https://github.com/thinktecture/Thinktecture.IdentityModel.45/tree/master/Samples/Web%20API%20Security/Clients/WinStoreClient) is a good library to deal with auth and WinRT.
see: [This SO Post](http://stackoverflow.com/questions/20901419/how-to-call-stored-procedure-in-entity-framework-6-code-first) 
Like I said, "according to the documentation". EF is such a big pile of crap and contradictory design patterns that even their own developers don't really know what it can or cannot do. It's no wonder that they are re-writing from the ground up for the next version. Though given their track record, I don't have much hope.
Oh, I love this. public void addmessage(&lt;yourEntity&gt; _msg) { var date = new SqlParameter("@date", _msg.MDate); var subject = new SqlParameter("@subject", _msg.MSubject); var body = new SqlParameter("@body", _msg.MBody); var fid = new SqlParameter("@fid", _msg.FID); this.Database.ExecuteSqlCommand("exec messageinsert @Date , @Subject , @Body , @Fid", date,subject,body,fid); } It actually takes more code to use EF than it would for a straight SqlCommand. 
Really enjoyed this, can't believe I didn't notice the option to allow continuous integration! 
^you're
You're what?
I kind of feel less cool than MS by putting my open source projects on MS's codeplex instead of github. Some of the notes are great. One says that a certain feature is "just bizarre."
Visual Studio 14 CTP3 is mentioned in the "Known issues" section, but I haven't seen it available yet. Did I miss something?
Heh. One hour later: http://blogs.msdn.com/b/visualstudio/archive/2014/08/18/visual-studio-14-ctp-3-released.aspx
Codeplex is pretty much dying right now.
I only did it because I needed somewhere to put them and I figured since MS owned it, it'd be pretty simple to upload from visual studio/TFS. Its a nice site. I like it. I'm sure github is more popular for a reason though.
Cool, always great to review. Keep up the good work.
It seems like .NET Native is gonna by a "next big thing" - VS support should go a long way towards its adoption.
Unless you want replication support, or fast migrations, or no data loss. Brilliant if you want silent failure though. Edit - also, it seems to recreate all views, stored procs etc. This can be expensive. 
&gt; Whatever solution you choose, you should absolutely disable the "drop/create" setting in production. That's only for development, generally. I want to know these errors long before a production deployment. 
What do you mean? If you can install it side-by-side with earlier versions? Because I have been running it without a VM since CTP1. Just not together with any other versions...
How do you mean? EF's DropCreate initializers are destructive and should never be used in production, unless you don't care about the data.
I've got no complains about SSDT when it comes to fast migrations. And when it fails it gives detailed error messages plus the script so you can hand-tweak it. And by default it won't allow any operation where data loss is possible. In fact, I think it is overly protective in that area. I admit that I don't know about using it with replication, but given you are completely wrong on the other three points I'm hesitant to ask your opinion about it. 
I just upgraded to 13, such is life of a developer.
&gt; I've got no complains about SSDT when it comes to fast migrations. It's relatively slow. Mainly due to the way it runs migrations, which is to copy all the data into a temp table, delete and recreate the table, copy all the data back. &gt;And when it fails it gives detailed error messages plus the script so you can hand-tweak it. Running it from visual studio gives no error message at all. You get a green light that everything works and only later find out that something didn't. Hopefully before deployment time. &gt;I admit that I don't know about using it with replication, but given you are completely wrong on the other three points I'm hesitant to ask your opinion about it. Because of how it drops/recreates the table it is useless for replication.
Title should read: vNext: Language Support in the language *you're* supporting (or eating your own dogfood)
I just uploaded the correct file - have another go :-)
&gt; Mainly due to the way it runs migrations, which is to copy all the data into a temp table, delete and recreate the table, copy all the data back. I rarely see that, but I can't say I've never seen it. 
&gt; Running it from visual studio gives no error message at all. Which version? 2013 always gives me a red light and a error message.
Or just write your POCOs manually. You don't get a lot out of automating such a simple process.
I want the exact same sequence of steps that run locally to be run in production. Anything else gives you a false confidence that it's actually working.
Ah yes, I can see that being a real pain in the ass.
There's [an Azure VM image](http://blogs.msdn.com/b/visualstudioalm/archive/2014/06/04/visual-studio-14-ctp-now-available-in-the-virtual-machine-azure-gallery.aspx) with your name on it.
If you know of a better way to combine the down sides of an ORM with the downs sides of stored procs I'd love to hear it ;)
Hmmm... can we find a way to add Input/Output parameters? Output only params aren't quite confusing enough. 
&gt; If you can install it side-by-side with earlier versions? This is what he meant and that was not possible so far.
Yeah 
My Visual Studio version goes to 11.
I had one stored proc that posted to a MS Message Queue. Do you think we can get a service bus involved?
Version 11 is also named Visual Studio 2012.
I think you missed the joke. Either that or you are just overly helpful.
Change stored proc to trigger ans msmq to storage broker and you have the system I've been maintaining for three months. At least I only have 3 days left!
What is .net native? I see lots about it, but not a short explanation
What's your opinion of storage broker? So far I've only used it for SqlDependency, which abstracts it so much that it doesn't count as really using it.
I figured as much. I've tried to learn it in the past, but I could never get past the complexity. Last time I used MSMQ, but if I had to do it over I would try RabbitMQ.
For anyone that wants MVVM goodness in android there is [android-binding](https://github.com/gueei/AndroidBinding)
His helpfulness goes to 11. Or his cluelessness. Either way, WE HAVE A WINNER!
From the comments section of the link: &gt; This CTP should work side by side with Visual Studio 2013, Visual Studio 2012, and Visual Studio 2010. That said, please note that this is a CTP release and not supported in production.
Well you have another year before .NET 4.0.x is officially retired and VS 10 becomes essentially useless. 
Because the underlying question is often a very different one. Sometimes people have gone down a certain path without realizing the full ramifications before hand and they need to backtrack. Sometimes they aren't experienced enough to know the full range of options.
These yearly releases suck. Just paid for one version? "Hey check out the new version we've released!". All these features should just be updates for VS.
Have you tried installing packages via the command line in the package manager console? That's kinda shitty if you can use NuGet.
Yes.
VB6 was retired years ago yet it's still used. How will 10 become "essentially useless"? I guarantee there will be legacy apps still built and maintained in it.
There's no description what this actually does, just a few buzz words. Would not provide e-mail.
The site is a work in progress that will be unveiled soon. It is a site that allows for static analysis of .NET platform code in order to generate automated code reviews.
Im guessing it's because most of it is still alpha.
.NET 3.5 will be around for a long while though... 
It's a bit old now, but you can use the ASP membership provider out of the box. It will do all these things for you. http://msdn.microsoft.com/en-us/library/vstudio/yh26yfzy(v=vs.100).aspx
It takes a little fiddling and hacking to fully comprehend but Nikhil's Script# is the most robust and effective way to build rich html5 apps with a code first approach. Script# allows you the full C# toolchain but compiles into javascript. It has bindings for jquery and knockout. Script# is the secret sauce responsible for the dynamics crm and office web apps magic. Extremely powerful. Script# is open source. 
I admit native for desktop would be nice, but if there's any performance improvement to come out of it, I would think mobile would benefit much more initially. Also, they might be using mobile as a sort of proving grounds to work out the kinks as their marketshare there is much smaller.
Dear Fortune 500 Company, Please send me your source code. Thanks, Completely Secure and Private Code Checker
If you're trying to learn best practices, don't store the password in the database. Store a hash of it, then when the user logs in, compute the hash of the password that they entered and compare that. There's more to it than that, but storing the hash is a good thing to get in the habit of doing every time.
Is it hard to decrypt hash back into password once somebody gets it?
It's not possible. A hash is one way. The only way to find the password would be by "guessing" (or permutation), then hash it and see if the hashes equal. That's why you'd add a "salt" (which is often a random value) to the password and then hash both together. The salt would be stored together with the password. Often it's also advised to hash multiple times. There are also so called "rainbow tables". A huge list with passwords and their hashes. So if they find a unsalted hashed version of a common password, they just check their table - if the hash is there, they have the password.
How big are the chances of two different passwords having the same hash in the end?
That depends on the hashing algorithm, but it's definitely unlikely enough to ignore this possibility. According to [this](http://stackoverflow.com/questions/297960/hash-collision-what-are-the-chances) Stackoverflow entry the chance for a collision with SHA-1 (a fairly common hash algorithm) is 2\^160. That's a **HUGE** number. I would not even know how to read this number.. And even if I'd knew, it would probably take me minutes to completely say it. That is roughly 10\^48. Now imagine the much more little number of 10\^18, which is a chance of about 1 in 0.0000000000003 of a collision.
Just once with a salt is fine.
Once is fine, multiple times is better. http://stackoverflow.com/a/348140
You're going to have to edit your project.json file and add your NuGet packages with a version number as a dependency. Then in the commandline navigate to your projects directory and try: kpm restore -s https://www.myget.org/F/aspnetvnext/ This will restore the packages from NuGet as well as get the alpha versions of things like System.Console, System.Web.Hosting and System.Web.MVC . I haven't tried this on Windows yet but it works great on OSX and Linux, so that's neat. You can see what packages are hosted on myget [here](https://www.myget.org/gallery/aspnetvnext).
You can use the remote debugger. But you have to connect through a VPN to get it to work.
Do you think maybe it's overkill for OP's scenario? 
Okay, that pretty much answers most of my questions. Also, say i got user credentials, compared the password hashes and they ended up matching. I need to navigate to a restricted page which only that user can access. I would need to pass a cookie with some data. What should i pass there, so that the target page will read it and make sure it's still the correct user with correct privileges. Or maybe i don't need to do it at all? Sorry if i'm asking weird questions.
&gt; asp.net identity Thank you, i will check it out. I kinda wanted to know how it works inside the box before using production ready tools. 
Miniscule. You have more of a chance of being killed in a terrorist attack than encountering a hash collision.
VS14 isn't due this year.
You could pivot the data yourself or ditch controls and just render it out in html. I'm hardpressed to think of anyone who's really still using webcontrols outside of a b2b style environment.
I think this is basically the **standard** and the **minimum** today. Never settle for less security.
The problem with that post is, it uses CKEditor.Net reference. These references are actually older version as compared to CKEditor. For example if you look into there website CKEditor is of Version 4.4.3 but CKEditor.Net is of Version 3.6.6.2 which uses CKEditor Version 3.6.6.2. So, I have written this post for using normal CKEditor instead of CKEditor.Net.
If the server is on the local network, it's OK. A remote server indeed needs a VPN 
What does it offer that stylecop and fxcop don't? Can it be integrated into a build process on team city or similar? 
I am not familiar with fusion charts but I have found if you are pulling data in through iis from a folder outside of your site directory you need to give the external folder iis permissions.
Only thing I've seen able to do this is Visual Studio 2013, and a Microsoft Azure Website, with a breakpoint in it. (So Azure and Visual Studio do the work to make a deployed debug version, running on a server, de-buggable, remotely).
This was confirmed by Mike Wood http://dotnetrocks.com/default.aspx?showNum=1017, and Jeff Fritz http://dotnetrocks.com/default.aspx?showNum=1014 on dotnetrocks, that NuGet is not supported YET.
Redditor answer: No, no no... you have this the wrong way round! Requirements come BEFORE implementation. So try starting with the **requirements** ... then ask us about implementation. ---- Human being answer: It depends. If you are going to pitch Web CRUD to the Project Manager, I'd go for Code First Entity Framework MVC ASP.NET using a SQL Server 2012 back-end. Check out JTable.Org for UI. Make sure that you are using a FULLY patched Visual Studio 2013 Update X (whatever that is right now). This would start you current. The template MVC project is actually really easy to get going from.
What will you be building? Are we talking desktop apps, web apps, web services? If you're just getting started (greenfield) then there isn't any reason you shouldn't use the latest and greatest. C# should be the language you target no matter what, with an eye on F# for some instances. * Desktop = WPF * Web = MVC 5 * Web Services = ASP.Net Web API (with vnext and one ASP.Net initiatives Web and API will be combined) note that many shops are moving to the API/Web Services model for everything, and developing interfaces on each platform (mobile, tablet, desktop) in HTML5/JS. This is a good route to go and Visual Studio / .Net framework provides a great infrastructure for doing this. 
People never built websites with vb6. They were built with vbscript. One of the vendors I work with, their trouble ticket system is still in Classic ASP. I do agree with you on the paranoia as I was just doing work at one of our sites and a PC that controls a conveyer belt system is still on XP using a VB6 app with some ocx files that won't work with anything past XP (even of the newer workstation has the proper run times). Legacy support is a bitch but I'd hardly call .net 4 useless upon its retirement. 
I built websites with VB6. There is a project template for it right out of the box. In fact, there are three ways to do it. 1. IIS project templates. 2. COM Components used from VBScript 3. Embedding VB apps in the browser via ActiveX (please don't) If we want to include beta software, there is also Web Services support for VB 6.
Well I learned something new today. I did know you could do com components used on vbscript (did those myself) but I didn't know about options 1 and 3. 
We're looking to create a desktop application that will interact with a REST server (already being built out in another language). I think we're leaning towards WPF with C#.
WPF with C# is a good plan.
You didn't miss much. Option 1 was an interesting experiment, but in the end we gave it up for straight ASP/VBScript. Basically it just exposed the primary objects, Application, Request, Response, and (Session??) to a VB 6 Class.
Ah ok. My old job we used a product called Codecharge studio. Ever use it?
* Are there any good books for learning WPF and C#? * Are there any resources for best practices (project structure, dependency management, etc.)?
WPF is fine if you're _committed_ (stuck?) to the desktop, but so much of the ecosystem of today and tomorrow is built on the web. Even Win 8 apps can be written using HTML &amp; Javascript. I'd lean towards MVC unless you have a good reason not to. Web API will allow you to create RESTful services that any app can use. Things that will transform how you code in C#: * LINQ * Using Dependency Injection (DI) which is a form of Inversion of Control (IoC) * Unit Tests and Test Driven Development (TDD) * Asynchronous programming using "await" and "Task" and the Task Parallel Library (TPL) 
Essentially it separates code from view in a very elementary way (predating razor and other frameworks that do it). It was not mvc because when you deployed it would merge everything together into the asp files. 
Since the decision makers have obviously done all their research why not ask them what they have foreseen they need?
That would have been really helpful.
I was using it in 2005 so asp.net Web forms were already out. My boss insisted we use old school stuff for no reason (we weren't working on legacy apps at that time)
Yes - WPF with C# is the way to go. Use WCF for the REST interface (because most of the work is done for you already). PM me if you could do with a hand :-)
Microsoft and Visual Studios have alot of tutorial on their websites. I have used them and think they are suitable for learning.
We do most of our apps currently on web using angularjs, but we are looking at using a very heavy datagrid for a business application (millions of rows with 20+ columns with a slew of features). We've not yet found a web grid to handle all the things we need, but .net vendors seem to have them out of the box.
What user can see millions of rows at the same time? I think it is time to have a long talk with the UX designer.
MS are betting on angular? I thought knockout was still the default in the vs templates? For that matter, it's a client side library, does it matter what ms bet on?
It is dead simple. Also, the Jtable.org website has some really good MVC examples.
Cool, sounds like a go. Thanks for the tip.
As far as their tooling is concerned, yeah. If people are mostly making Angular apps and Visual Studio is the best way to make them then MS sell more copies. I saw a presentation by one of the VS team at a conference and that's what they stated, for VS14. They said they wanted VS to be awesome for all frameworks, but in the immediate future it'll be a little more awesome for Angular at least. 
Thanks everyone for all the feedback. If I was to go with c# and wpf, which would make sense to learn first? I think c# might be easier as I'm experienced with Java and they seem very similar.
Seconding the WCF portion. Powerful framework.
I think so too. I'm learning Java by following android tutorials and I'm doing fine with the developer tutorials. I think you could learn c# by following WPF tutorials. You see what's different pretty quickly. 
I agree with most the people in here, MVC, Web API, JS, Whatever desktop stuff you feel like... I've never used it but apparently Lightswitch was made for people with your background... But I've never used it. One thing people are overlooking I think that has helped me out a lot is serialization (in .Net we get XmlSerializer and the DataContractSerializer free, but JSON.Net is my current favorite and Protobuf-net looks pretty good for certain scenarios) knowledge. You can solve a LOT of problems with communication, caching, temp and long term storage by knowing about serializers, what they do, how to use them on any given platform. Even for basic javascript XmlHttpExchange or json exchanges it is worth knowing how this happens, where the data goes, what it looks like etc. Also while we're at it the crypto libraries in .net aren't all that bad and have served me well......... :)
There are a lot of good items in here but one that is overlooked time and again that IMO if you develop .NET and ever need multiple discrete components to communicate (which is almost everything) make sure you know and understand how to leverage WCF. While many of the newer simplified tools are great over a particular protocol or message type at some point in your career you will need a more complex use case or a custom message. What many developers end up doing is twisting their preferred framework around or baking it all on their own. Do your best to understand the various communication API's .NET has, how to use them and how best to leverage them this will save you tons of time and energy.
How about azure blob storage or amazon s3?
If you want a pure rest framework, honestly, go NancyFX. I like WCF a lot, but unless your doing soap or multiple endpoints, I think NancyFX ends up being lower ceremony than WCF. And yes I've used WCF in .NET 4.0, I know the minimally viable app.config xml has gotten a lot more succinct.
This kind of thing is native to azure pack however its a pain to migrate an existing system. Failing that I try to make sure the share itself is a redundant system like a NAS
My first thought is to create something like that then. Set up another server that acts as a storage server that all others can hit.
For WCF, 90% of your problems are probably in your config file.
That's a good idea, I will see how it works out.
EntityFramework man. We just started migrating from Dataset-based data access to Entity Framework and holy shit is it so much nicer. I would use C# primarily because it's just such a nice syntax IMHO, as opposed to vb.net or F# which I think are harder to grok when given the same code. I work a lot with WCF (Windows Communication Foundation) services (mostly net.tcp protocol but also http) and service proxies. It's an area of .net that I've really come to enjoy working with, a lot. WCF is ridiculously configurable. Random aside: Make sure you learn how to work with generic collections (ex: List&lt;SnackFood&gt; mySnacks = new List&lt;SnackFood&gt;();) I've done a fair amount of Windows Forms development but I've never liked databinding when it comes to doing it in WinForms. I much prefer client-side (web browser) ways and means of rendering data, or ASP.net. I've done a ton of asp.net web development and I like it as a server-side technology but if you start using ASP.net controls and "ASP.net Ajax", prepare for things to get pretty complex. Much easier to make you web apps service oriented and do more data rendering client-side using dynamic HTML and JavaScript. Aaaanyway, that should get you started. There's a ton of stuff in .net man. Check out the msdn .net reference for sure. Check out System.IO for file and directory stuff. Check out System.Threading for Threads and ThreadPool worker threads... linq (language integrated queries), definitely check that out too.
You'd be surprised (or maybe not) how many software shops do paging client side.
If you're coming from a Web background it's probably easiest to stay Web and use MVC.
You can also do single-page apps if you need a "desktop-like" experience.
Sounds like you want DFS. http://msdn.microsoft.com/en-us/library/cc732006.aspx
Microsoft recommends Web API for REST and I would agree.
Task parallel library? I think this is what I've been trying to implement without knowing about it. I am glad it's done already. Googling is good for learning, but listening to others is GREAT for learning. Thanks!
I looked briefly at DFS, I was trying to find case studies of it's uses but I wasn't coming up with anything too great. One of the issues here is this is an application that will be deployed to multiple customers with varying enterprise architectures. DFS sounds pretty awesome, I just don't know it's management overhead and approval challenges.
I find errors like that often occur when two versions of the same assembly are referenced in different places. A change is made and it's updated in one project and not the other, but due to build order the project with the stale copy builds second. This causes the final output to contain the stale assembly that is possibly missing members, leading to the type of exception you are speaking of. 
&gt; but we have a lot of pieces of code that work with physical files as opposed to streams so that adds complexity to updating our code to potentially write temp files to disk for some of those libraries that need the physical file. What kind of code? Usually anything involving accessing a file's data treats it as a stream anyway.
A great resource for you are podcasts like dotnetrocks, which will give you lots of great info about the many facets of .net development. You could support both oracle or ms db types with system.data with a few good custom classes and methods using them. All your OS level calls can be done with .net, so If you need to load files into memory you have MemoryStream, or if you need to do checks on files, you have the File class... lots of great stuff in .net to do all the things you need for the types of applications you've described.... a good place for examples of those types of things are on codeproject or even stackoverflow in some cases where an answer provides an adequate introduction to some good concepts. I would highly recommend WPF over winforms, as if you took up the latter you'd really be diving into an antiquated past that doesn't really allow for implementation of the better design patterns, like MVVM, which allow for really modular and flexible code, which will be a real pleasure to have, when say, 4 months into the version 1 usage of your internal app, you find you need something that wasn't in the original specification, like a feature to send out an email programmatically or something like that... it will be much less of a pain to implement that new feature if you've got a good design pattern to utilize. If you do go the WPF route, you will find that the sugary goodness of XAML for the ui markup, automated and driven with Blend, which is shipped with VS2012 and up these days, will really make you spend less time creating and modifying the ui, which if you're from the web background, is going to be a much needed break for you, because I'm sure you've spent way too much time pushing pixels in css... that UI problem won't exist really if you learn to use Blend to help your workflow. On a final note, you can find some good, and free libraries on codeplex to make your life a little easier too!
Good question, typically 3rd party Apis that we don't have the source to and don't always have an overload that excepts a file stream. We don't have many cases of that, but there are a few. This is what made me hesitate with recreating a blob storage system similar to Azure.
wdmvt reminds me of a good c# book that taught me a lot about threading in .net, even though it wasn't a .net book.
I'd say they're more betting on WinJS.
I tried that. I did another search over all HDDs and deleted all .dlls. As expected it now threw an error that the library can't be found. I then rebuild the thing and copied it into the DNN /bin directory: same error as before, get_... not found. I'm really baffled here. There is an IEqualityComparer for the class of the property, but that is also public.
Probably not the answer, but did you do a clean &amp; rebuild? Or just a rebuild? 
You should checkout Dynamics GP. Here is the developer kit: http://www.microsoft.com/en-us/download/details.aspx?id=24260 This allows you to create .NET assemblies for use in Dynamics GP.
Thanks, I was thinking about GP as well, but I've never seen in it action. You have any experience with it?
Mvc5 
In Azure Pack, Web sites uses a shared UNC path accessible by all web servers in the farm - so BLOB isn't needed. It handles account management between the workers and the file server. WAP is built for cloud hosting providers and large enterprises, so its footprint isn't lightweight. For more info, you can check this TechEd presentation or ping me - contact info is in the presentation. http://channel9.msdn.com/Events/TechEd/Europe/2013/MDC-B225#fbid=E3tYw0WvVPE
I'm all for being lazy. Especially when it comes to cooking up a good interface. But I'm also a cheap bastard. Being an order of magnitude more expensive than, say, [WrapBootstrap](https://wrapbootstrap.com/) just doesn't make sense to me. Not being able to demo the template isn't helping any cases either. The way to get my attention would be to *actually* have .NET Themes/Templates, instead of just for ASP.NET. If these included WPF templates so I could do branding on browser and native apps, I would much more strongly consider something like this.
I don't understand why some websites insist on fiddling with smooth scrolling, if i wanted it I'd turn it on in my browser, the scrolling on that site is abhorrent in chrome
2nd that, walk around WCF, go the simple approach.
In the bad old days of WebForms I might have used this. But now, using MVC, and doing a LOT of my work with Javascript on the client, I would never used a theme tied to Asp.Net (webforms or MVC). In the pages I create, once they are sent to the browser, there should be NOTHING that denotes it as a .Net project (not even an *.asp in the url). To me, that is being professional as a web developer. I understand how HTTP, HTML, Javascript, and CSS all fit together and interact. I should be able to swap out the backend with Node, Java, Python, etc and the client side code doesn't even know (in theory, never done it). Now, WPF themes....those I would pay for.
Unless you have an XML fetish.
Some of these themes look pretty identical to open source bootstrap themese. For instance your AdminHat theme I am using right. http://startbootstrap.com/template-overviews/sb-admin/ &lt;- Theme Source http://unity3dfoundation.com/Account/Login &lt;- My Instance
http://www.asp.net/mvc The official site has some great information. If you're experienced in .NET you should be able to pick up MVC pretty quickly. I will add a caveat. MVC allows you to choose your view engine. It may seem like a good idea to use ASPX as your view engine for MVC to leverage existing knowledge and reduce the learning curve, but I would *strongly* recommend learning the Razor engine. I see the availability of using WebForms views with MVC as more of a compatibility thing for people who want to migrate large apps to MVC. 
The default recommendation seems to be Adam Freeman's Pro ASP.NET MVC books from APress. It's what I chose and I think it does a great job. http://www.amazon.com/Pro-ASP-NET-Experts-Voice-ASP-Net/dp/1430265299
Interesting. Thank you for this note.
[This](http://www.asp.net/mvc/videos/pluralsight-building-applications-with-aspnet-mvc-4) course. Scott Allen knows his thing.
Besides the other recommendations, I'd also recommend switch from VB to C#. 
There are people who still write new things in VB.NET? This needs to stop. Althoguh Webforms needs to stop too
If you want something more developed than a basic framework you can always look at something like Quickbooks. Stay away from SAP, it's the worst get interface it with C#.
Why would anyone use this over the many other already established, proven, and open-sourced solutions? 
&gt; Likely it's because it's a fully managed service provided by Microsoft for enterprise clients. Which ravendb has. &gt;it also supports some features like SQL-like queries I think I'd consider that a negative. Document db's are a very different beast, this runs the risk of being treated as a traditional db.
Available in western US and Europe. Yeah, it's bound to be huge. http://azure.microsoft.com/en-us/pricing/details/documentdb/ 
Is RavenDB available as a fully supported database provided by Microsoft Azure? Or is supported by third parties in the .NET Dev world?
Not sure about azure, but it is supported on app harbor and a few others.
RavenHQ is in Azure in USCentral only. 
Weird they would only support it in one locale...
If the Stockholm syndrome is that strong then they have bigger problems. 
Thanks for the reply, Ryan. I had heard about Azure pack on runas radio and sort of got the vibe it was for big deploys, which really isn't my use case. However, your comment about how web sites uses a shared unc path leads me to lean in that direction, which is where I was headed after a day of prototyping and research.
It's getting them somewhere, further behind. At least this suits the enterprise market, which is about all they do well.
You really don't understand corporate. Not that that's a bad thing.
I can understand if they need support, I disagree but I understand. But why support from one specific company?
I'm currently learning MVC as well, and I went with the just-released Professional ASP.NET MVC 5 [1]. Reading the Amazon reviews, the Freeman book uses dependency injection via the open source library Ninject. That may be a common development approach for all I know, but I wanted to focus on learning MVC without any third party library requirements. If anyone has thoughts on Freeman's approach, I'd be interested. If you like video tutorials, another resource is a MVC 4 video tutorial offered free by Pluralsight. [2] They have subscription plan that looks reasonably priced, and it covers MVC 5. (The Pluralsight videos are narrated by K. Scott Allen, who is also one of the co-authors of the Galloway book.) [1] http://www.amazon.com/Professional-ASP-NET-MVC-Jon-Galloway/dp/1118794753/ref=pd_cp_b_0 [2] http://pluralsight.com/training/Player?author=scott-allen&amp;name=mvc4-building-m1-intro&amp;mode=live&amp;clip=0&amp;course=mvc4-building
It's not rational, it's just "the way things are" among some organizations. They are extremely conservative with decisions like this.
I speak to people that still start new projects in webforms because it's all they know.
I have encountered this. Either it's Microsoft, or they roll their own. It's the only reason I can think of for why anyone would ever even consider TFS.
TFS has an excellent sales team that talks to management directly. There are a ton of features they show off that make PHBs cream their pants. Once the "executive decision" has been made they won't listen to anyone telling them it was the wrong one.
It's the same with app harbor, no idea why.
You know, I'm new to MVC and was following along with the book and this part just frustrated me to no end. One of the packages wouldn't install and Visual Studio gave me a hell of a lot of trouble with dependency injection. I kind of looked around a bit and I agree about Pluralsight, even if the guy who does it tends to go rather fast. 
$0.73 per day with 10GB SSD storage and 5GB of transfer per month free, I don't know but it sounds like a competitive deal.
SignalR
You disagree that a company needs support for a product they use? You are cute.
Holy crap this page is doing stuff to my eyes. http://azure.microsoft.com/en-us/services/documentdb/ Just try to read the text in the green area with the checkboxes next to it. Does the blue button seem to jump around under it as your eyes move? 
Get a subscription to pluralsight.
Yeah, same here :)
Exactly. That's all I know is not an excuse in the field of programming. The very nature of programming forces you to learn all the time
After many years writing WebForms applications, I made the jump to Asp.Net MVC 5 and haven't looked back since. Keep at it, its a great jump and it will really give you so much more freedom to make your webapps more responsive and user friendly. If you ever get stuck feel free to message me.
I disagree, not because I want to, but because I've worked with too many "old" programmers that refuse to learn anything. Many simply coast there time on corporate salary! 
Fuckers who propogade bad everything and make it worse for the next generation
Ayende -- the guy who made RavenDb -- ran through the docs and has some interesting comments: https://groups.google.com/forum/#!topic/ravendb/CEAbfHDGD_g Bottom line is this is a 1.0 microsoft product. 3.0 will probably blow you on demand, but I would run away from 1.0.
Didn't catch this anywhere.. but currently only an Azure service? Or can I host it myself?
"It handles all SQL automatically, just cut and paste man... if your developers can't figure it out, they are stupid and ripping you and your company off. You can hire our Microsoft consultants to train them, but judging by how dumb your staff is, it may take thousands of billable hours."
&gt; If anyone has thoughts on Freeman's approach, I'd be interested. He mostly uses DI for testing (along with Moq and MS Unit Testing Framework) using constructor injection. If you know the basics of DI you can pretty much ignore all that stuff by hardcoding the dependencies. The guy does a stupid thing in the book though. He adds Ninject.Mvc3 to the project and then he implements a custom dependency resolver. That's unnecessary if you use Ninject.Mvc3 and it is obvious if you read the first page of the documentation, something that I always do every time a new tool is introduced in a book I'm reading (at that time I didn't even know what DI was all about). But again, you can pretty much ignore all that stuff.
Forums and mailing list are enough support for the die hard penguin folks.
&gt; * Cross document queries - At least according to the documentation, I don't think that those are possible. The queries they have in the docs all show operations on the same document only. It also make sense considering they are running distributed, so doing cross document stuff would be very hard. &gt; But that really limits the kind of things that you can do. I love how people demand to use a NoSQL database, then bitch that it doesn't offer relational queries.
yup, just keep it simple.
*Do not use an access db for web development!!* [ASP.net GridView Examples](https://www.google.com/#q=asp.net+gridview+example) *Edit: You will want to create a datalayer that will pull the information from your database and convert it to an object. So you end up having a generic list of those objects. Public Class MyClassObject Public Property Title As String Public Property Message As String Public Property EntryDate As DateTime End Class *After pulling from the database: Public ObjectList As List(Of MyClassObject)
I looked into Gridview already but it doesn't let me achieve the aesthetic that I am able to using this and css D: and what's wrong with access? This is the only db on the site. I was using Excel before which was even worse xD It's an internal company website portal that will mostly just have relevant news about the company and forward people to the important parts of the company's intranet. I also don't wanna have to deal with setting up an sql server and stuff. Atm I'm using OleDb for all my insert and read queries and ADO for the delete one and it's doing alright. I just need my button to be able to call codebehind functions. What syntax am I missing D:
So wait would I be creating a new object of this class for every entry in the db?
Yeah I'm aware of those limitations. The only person with access to this db would be the admin anyway. I don't want other people to have access to it
Are you asking what you should know about .NET or ASP.NET Web Forms, or ASP.NET in general? I think you try to give a more detailed description of what your goals are. Is it to be a better ASP.NET developer? A better developer in general? Front end? Back end? You are only going to get random one word answers if you don't take time and formulate what you are trying to achieve. 
That's not a good way to dynamically generate buttons. You'll want to create the control in the codebehind (dim button as new button), append it to your HTML (set the runat=server attribute on the element/web control to access from code behind), then you can have each button raise the same click event but use the control Id or event args to differentiate. It might be easiest to use a repeater control, create your template and bind a list of objects to it. Google around on how to capture events for dynamic controls or buttons in repeater templates. Oh also you can use a literal control for displaying raw HTML. Label is a span when rendered so everything g will be in a span.
Thats correct, gimme a bit and I will give ya an example
What I should have put specifically is in growing as a ASP.NET Developer. Should I continue putting my effort into the Web Forms aspect, should I start learning MVC, or just read about the .NET framework? I feel like I need some direction. 
if you come from c++, why aren't you using c#? anyway, instead of creating your markup as strings, try to create at as .NET controls. Panel myContainer = new Panel(); while (reader.Read()){ Panel myDiv = new Panel(); myDiv.CssClass = "myClass"; Button submitBtn = new Button(); sumbitBtn.CommandArgument = reader["title"]; submitBtn.Click += myClickHandler; myDiv.Controls.Add(submitBtn); myContainer.Controls.Add(myDiv); } 
**model** Imports System.Data Imports System.Data.OleDb Imports System.Web Public Class PostingModel Public Sub New() DatabasePath = System.Web.HttpContext.Current.Server.MapPath("~/App_Data/BackendDB.accdb") End Sub Private Property DatabasePath As String Friend Function GetPostings() As List(Of Posting) Dim postingList As New List(Of Posting) Using oleConn As New OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0; Data Source=" &amp; DatabasePath &amp; "; Persist Security Info=False;") oleConn.Open() Using oleCmd As New OleDbCommand("SELECT * FROM Posting", oleConn) Dim oleReader As OleDbDataReader = oleCmd.ExecuteReader If oleReader.HasRows Then While oleReader.Read Dim post As New Posting post.CreatedDate = DateTime.Parse(oleReader.GetValue(oleReader.GetOrdinal("CreatedDate"))) post.PostingId = Integer.Parse(oleReader.GetValue(oleReader.GetOrdinal("PostingId"))) post.Subject = oleReader.GetValue(oleReader.GetOrdinal("Subject")) post.Subject = oleReader.GetValue(oleReader.GetOrdinal("Title")) postingList.Add(post) End While End If End Using End Using Return postingList End Function End Class
**view** Public Class Posting Public Property PostingId As Integer Public Property Title As String Public Property Subject As String Public Property CreatedDate As DateTime End Class 
**manager** *(the screen shot i have this folder labeled as DataLayer, it should PresentationLayer or BusinessLayer)* Public Class PostingManager Public Function GetPostings() As List(Of Posting) Return New PostingModel().GetPostings() End Function End Class 
**gridview** &lt;asp:GridView ID="PostingGrid" runat="server" AutoGenerateColumns="false"&gt; &lt;Columns&gt; &lt;asp:TemplateField&gt; &lt;ItemTemplate&gt; &lt;table style="width: 100%"&gt; &lt;tr&gt; &lt;td&gt; &lt;asp:Button ID="DeleteRecord" runat="server" CommandArgument='&lt;%# Eval("PostingId")%&gt;' OnClick="DeleteRecord_Click" /&gt; &lt;/td&gt; &lt;td&gt; &lt;%# Eval("Title")%&gt; &lt;/td&gt; &lt;td&gt; &lt;%# Eval("CreatedDate")%&gt; &lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan="3"&gt; &lt;%# Eval("Subject")%&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/ItemTemplate&gt; &lt;/asp:TemplateField&gt; &lt;/Columns&gt; &lt;/asp:GridView&gt;
Thanks for sharing I didn't realize how neatly you can work with JS in ~~studio~~ .NET. I suppose next project involving javascript I'll be considering a switch from netbeans to studio, thanks again!
Interesting. I work for an ERP software company and I am pushing for a C# rewrite that will include a publicly exposed API. Good to hear there is interest out there.
Is that a security requirement? Seems like an odd restriction otherwise.
There is also MvvmCross which works on Windos, iOS and Android.
Not sure how you coded it to really help you fix it. Are you using different forms for each page of the wizard? I normall design wizards as tab controls and just hide the tabs. So skipping a tab would lose nothing. What are losing? Is there data filled out in each page and skipping steps means you lose the data for that page? If you skipped a step would that mean you use default values for those pages? I use wpf and mvvm. As such i have a viewmodel with a property for each peice of data i want to display etc. These props are bound to gui controls. If i wrote a wizard and skipped pages it would just mean the user couldnt interact with those pages to change the data but I dont lose the data because it is stored in the viewmodel regardless of whether the gui was shown or the props were ever bound to guu controls or not.
I've never looked into the reason behind it but I would assume so. Before VS2012 you could do remote debugging through internet, now only LAN.
How did *Visual Studio* give you hell with dependency injection? Dependency injection derives from IOC which is a design principle and has nothing to do with Visual Studio. 
Nice work. I've been looking for a way to bring js testing into our automated testing. It would be cool if you would write your tests in *.js files so you could get syntax highlighting, intellisense etc instead of having the tests code as strings in c#.
So do you mind if I pick your brain a little? Lets say my queue.OpenItems, which is a List&lt;Item&gt; has five elements and is sitting in my initial view, that we'll call Index. Now I need to click on that count and display the details of those 5 items in a table. The QueueDetails view just needs to display those five elements. How exactly does using the ViewModel help? How should it be constructed? Is it just a wrapper class that contains the List&lt;Item&gt; collection inside of it? 
Are you using jquery on the front of the site? Or any other type of js libraries that can be used for templating? You could use webapi that is built into MVC to create a rest endpoint that you call to from JavaScript to update the modal template. If you cant do that, you might be able to get away with having each button/link/Id in an Ajax form and post back to the server to get the data.
&gt; View passing to Controller No. That's a view that renders links to another action method. Look at the HTML. Look at the network tab in your browser's developer tools. You need to try to understand what happens under the hood a bit. You probably don't want to put your whole C# list object in a URL. You could either: a) render the QueueDetails views directly on the page with @Html.RenderPartial("QueueDetails", theList) or something like that. Put them in divs that are hidden at first and visible inside the modals later. b) Create ActionLinks that uses *identifiers* back to the controller instead of the whole model. These identifiers (think an ID number or whatever you need) would allow the controller to retrieve the data you need from the DB or whatever.
MVC is the future of MS' ASP.NET platform. As MVC has a stronger focus on coding on the client-side than ASP Web Forms you probably should also should learn (more) HTML and javascript. Knowledge about .NET framework is also good, take a look at [Pluralsight](http://pluralsight.com/training/Courses#dotnet) for many excellent courses. I would also strongly recommend learning and using SOLID and clean code, as I know it improved my code tremendously. 
Sounds pretty solid! Specially if you can open it up to other tech than the MS stuff. &gt; We have a few 3rd parties doing pretty unsavory hacks to try and get data in to our client's systems Well, as soon as the client has DB Access they can do whatever they want anyway. If their devs get a bloody nose from hacking around it will reflect badly on your app though. But I can see how OPEN ALL THE THINGS! is a bit much for Mgmt. Listen to their concerns, have a few meetings and walk them through it. Pick 'em up where they are and keep on asking why they don't want to open that part up until you find a problem that you can fix another way. Sounds like an interesting project. Good luck! 
Thanks. If you want to structure your tests in js files then you'll probably be better served by something like Chutzpah. It incorporates with Visual Studio test framework but implements its own test runner that handles tests purely in javascript.
use a for loop with indices instead of a foreach and watch the magic happen
eCommerce is notoriously difficult to get right since there is so many requirements, all of which vary from customer to customer. Try an existing open source platform to see if they match your needs before delving into building your own: http://www.merchello.com/ http://www.kartris.com/ https://github.com/smartstoreag/SmartStoreNET
CMS is kind of the same way. There are a ton of existing options that you can use, unless you need something unique. http://www.orchardproject.net/ and http://umbraco.com/ are the two most popular .NET-based CMS solutions. 
Thanks! I looked at the smart store.net option. That's something I'd like to try to build. Thanks. I'll check out the cms options as well
This is the correct answer for this situation, if you really need this.
After a good night's sleep, I think I understand what you're saying. It's essentially building a key/value pair that gets passed via the URL to the controller.... so when I pass a List of items it really has no idea how to do that. I suppose doing ?Item[0]=abc&amp;item[1]=123&amp;item2... could work, but it's not ideal. Even then that would only work if Item was relatively trivial. For an object with several parameters it would quickly become a nightmare. I know it's not the cleanest solution, but if I simply captured an array of records and joined it as a CSV into a single string, then passed that as a single comma-separated value string to the controller (?ids=id1,id2,id3,id4,id5) and performed a string split at the controller level, I should be able to query the records by id.
You should get resharper, it's worth every penny
Hi Alex! Migrating 20 users to a new database is no work at all. Might I ask you why you are migrating to web forms? Why not go to MVC - it is more future proof. You don't have to switch to c#, but it will give you more options in the long run. 
You could do that, but you'd be reinventing the wheel. View model binding should do exactly that for you. But I honest feel like you should really do this with javascript.
Thank you very much for the great answer, everything leads to MVC so I guess I should head there too, unfortunately theres minimum to none VB tutorials for MVC so I must try so hard alone, Should I use a stored procedure that checks username password and user roles? maybe that would work.
Definitely recommend Chutzpah and the jasmine testing framework. Write your tests in js files and can run them via Test Explorer and in an automated TFS build. Just got it configured for our projects, loads of fun!
Mvc, and Web API. If you want to go deep and look at how these frameworks can be used to create single page applications that bring the mvc and mvvm patterns to client JavaScript with a framework like Angular, even better! If web forms is what you're used to, it'll blow your mind how much of your application can live on the client, in the browser. Also, with Asp .Net vNext on the horizon, look at self hosting mvc, web API, and SignalR outside of IIS (only Mvc does not support this in the current version). Bottom line, web forms isn't a good choice for growth as a developer. 
Good point. There are applications for both orientations. If you're looking at stateful applications, look into Angular and how it works with web API and asp.net mvc to create spas. If what you're building is meant to simply be a number of stateless pages, using vanilla asp.net mvc is a reasonable approach.
Definitely. It's like two weeks of pain, and then suddenly every example of everything is in the language you're coding in. Vb is verbose and very readable, but if you code for a living, the shortened syntax in C# is just less work. Switched 5 years ago, haven't looked back once.
* C# * WPF * Entity Framework * Linq
Yes you can use a stored procedure to authenticate and authorize your users. I would suggest that you implement authentication and authorization using a framework instead of creating your own, which will ensure security best practices (hashing passwords, password validation, password reset etc). Take a look at this article: [http://www.codeproject.com/Articles/751897/ASP-NET-Identity-with-webforms](http://www.codeproject.com/Articles/751897/ASP-NET-Identity-with-webforms) I guess you have seen this VB.NET MVC tutorial: [http://www.mikesdotnetting.com/Article/230/Getting-Started-with-ASP.NET-MVC-5-using-Visual-Basic](http://www.mikesdotnetting.com/Article/230/Getting-Started-with-ASP.NET-MVC-5-using-Visual-Basic) 
Thank you for taking time to report those themes. We have remove them from our community and disable the author’s account. Sincerely Katie White.
azurite_dragon You brought up some valid points and we will definitely look for ways where we can improve in the future. We will take your comments into consideration to make improvements for the future. For instance, we have reduced the theme’s prices considerably. By the way, we want to know if you could review some of the themes. I can send you some themes at not cost if you like to. My email is below. katiehite@wiwet.com Sincerely Katie White
&gt; Do obfuscators address the problem of getting meaningful stack-traces I'm working on decoding stack traces.
If you look in your browser's developer console (usually F12) on the Network tab, then inspect the AJAX call that results in a server-side exception, you might see that the HTTP 500 server error DID in fact get returned to the browser. But the return content &amp; HTTP status codes (even if it's a 30x HTTP Redirect) will not be interpreted by the browser. AJAX return values &amp; content is the responsibility of your Javascript code, and your code is probably not geared to receive an HTML error page at this point... Best practise is to always wrap your AJAX endpoint server-side code in try-catch blocks, and return a special value in the case of an error. E.g. my standard pattern for AJAX endpoints that return JSON data looks like this on the server: [HttpGet] public JsonResult GetValue(int id) { try { //do successful work return Json(new {success=true, otherData="abc", etc="more"}, JsonRequestBehaviour.AllowGet); } catch (Exception e) { return Json(new { success=false, message="Error getting value", debug=e.Message }, JsonRequestBehaviour.AllowGet); } } then on the client-side I initiate and handle the AJAX calls (using jQuery) using this pattern: $.ajax({ url: '/controller/action', type: 'get', data: {id:itemId}, dataType: 'json', error: function() { alert('Could not get value!'); }, success: function(result) { if (!result.success) { alert(result.message); console.log(result.debug); } else { //use successful data in result.otherData etc. } } });
Each wizard step has different fields. The first step says to choose an option. Depending on what the user chooses, certain steps are removed from the wizard. When the option is chosen that doesn't remove any steps is chosen I have no problem. I can enter data in one step, move on the the next one, and come back to it and the data will still be there. When I choose an option that removes steps when I enter data and go onto the next step, the data I had just entered is lost. 
Can you check the server log? It should give you a more detailed message than that.
I recently had to make this choice recently, I decided to stick with .Net (although were running it on mono on Linux). Having done fairly large amounts of JS dev, the code base doesn't scale very well, which seriously hampers productivity. In that way its like PHP, almost no barriers to entry. But as the project gets bigger the benefits of a language like C# with its stronger type system, and far better tooling, just makes the code base scale much better. One last thing, MS seems to have taken ALOT from Node.js when designing and building Asp.Net vNext which should help it scale nicely down to beginners even more
Sometimes you've got to go to add windows features, iis, then activate some features that aren't active by default. You can get some weird behavior if you don't have all the necessary boxes checked for iis.
Note: OWIN is the standard, Katana is the Microsoft implementation.
Can and "can without killing performance" are very different.
Anonymous login doesn't make much sense. Could you elaborate that part?
It's a setting in IIS. It pulls the username and password from the windows user. This is for an internal intranet application.
Good discussion of the differences between the platforms. And... let's face it: I'm a huge fan c# and I'm a huge fan of node.js. So to answer the question: to node or not to node... I have to say "it depends on the project". Node.js has many benefits over C# in that JSON parsing is pretty damn fast compared to the best C# has to offer at the moment, but C#/.NET does a far better job of parsing XML than anything node.js has to offer. Node is ~~java~~ecmascript, and thus highly dynamic, while C# is statically typed with a dynamic bolt-on that is relatively slower in comparison. So the question of which to use boils down almost exclusively to whether or not you need XML or JSON serialization and whether or not you prefer/need a dynamic or statically typed language. So far, I've found that the most ideal platform is usually Node.js as a gateway, doing auth and request routing, with a .NET back-end for compute-bound and other ".NET is better at this" type requests. 
Are you referring to *anonymous authentication*? If so, that means.. well.. that you can authenticate anonymously. This means no user credentials are needed, you don't need to log in. It does not pull the username and password from the windows user.
&gt; JSON parsing is pretty damn fast compared to the best C# has to offer at the moment Did you try fastjson?
I love node.js. Take the most fucked up and hacked together thing you've ever worked on, add some abstraction and then call it a framework. Congrats, you've invented node.js.
Well I'm annoyed with myself now. I looked at the logs and found that I was getting access denied errors for the folders. I looked at my Anonymous Authentication in IIS and everything looked correct. I checked that the user was given permissions for those folders, at it looked okay. But after taking a break, I realized I made a typo on the anonymous account, I accidentally added the IIS_IUSRS group instead of the IUSR username. So now everything is working perfectly. If it wasn't for you I wouldn't of looked at the logs. Thank you.
We all make mistakes. Glad you fixed it.
Good point! That's more of an apple to apples comparison. Also, let's keep in mind that the Node projects do it that way because they basically have to, and that has always seemed to me to be a huge pile of suck when I compare what they have available to either .NET or Java on the server. Those are just so much richer that it's ridiculous. I can't image using Node for any but the smallest projects. Five Reasons ASP.NET Developers Shouldn’t Worry About Node: http://www.wintellect.com/blogs/jlane/five-reasons-asp.net-developers-shouldn%E2%80%99t-worry-about-node 
&gt; with a .NET back-end for compute-bound and other ".NET is better at this" type requests. So, pretty much for everything then, right? Lol... Yeah, it's funny, but I'm serious. Is there really ANYTHING Node can do better than .NET? Let's talk features here and leave the whole "but dynamic typing in Javascript is awesome" argument out; because that's all going to come down to opinion. The only reason I personally would want to use Node would be to see how minimal I can make my environment and still produce a working web app. I think we get a little too wrapped up in libraries and IDEs sometimes and while all of that is very powerful, it's usually overkill for a lightweight web app. In that respect, I can see Node being attractive to a beginner. But from a features perspective, I don't see anything it can do better.
In the c# example, if I put that came context variable on a queue, can I respond to it later, on another thread after that callback has returned? Where is this contract documented? Last time I tried to do async web stuff in c# I hit road blocks I did not manage to solve before I had a working solution in nodejs.
&gt; Node is javaecmascript, and thus highly dynamic, while C# is statically typed with a dynamic bolt-on that is relatively slower in comparison. Have you actually benchmarked that? Dynamic in C# usually means just doing dictionary lookups, which is basically what JavaScript does when it isn't walking the prototype chain.
Not enough security holes.
&gt; In the c# example, if I put that came context variable on a queue, can I respond to it later, on another thread after that callback has returned? That is what 'await' does. public async void Configuration(IAppBuilder app) { app.Run(context =&gt; { context.Response.ContentType = "text/plain"; await SomeTaskAsync() return context.Response.WriteAsync("Hello World!"); }); }
No I have not, honestly; I don't think I can back that up. I should benchmark it. 
Yeah... That. Sorry I'm still new to .net/windows paradigm web development
The number 1 most talked about database is/was mysql. Don't hold your breath! 
Only azure apparently. 
Check out Sql Lite, it's a real database with the light requirements you want.
All of the nodejs libraries are written with the assumption that IO must be asynchronous. This is not the case with .net. 
So? All of the libraries you should be using are async compliant. I don't really care about some random legacy library.
I would rather use node.js for the rest of my life than ever have to touch PHP again.
I chose node for the purpose of a small light weight https server. Needed a no config solution to dump on a device. Needed a way to save a file from a html 5 app at work. Worked wonderfully with some CORS. Originally was set up with c# in iis but needed it to run on any windows device. 
TLDR; - No sorting option, or a good paging story - SQL Injection, without any other alternative - Hard to deploy and to keep current with your codebase - Poor development story &amp; no testing story - Poor client API - Lots of table scans - Limited queries and few optimization options - Single document transactions (from the client) - No cross collection transations at all - Very small document sizes allowed The no sorting option scares me. So we are forced to cache everything in the application layer and implement our own paging. Yay.
And as a counter point, to get rolling you node, you have to sift through guides on installing it and various supporting packages, you have to decide on a framework, you have to learn about AMD or CommonJS and fight through those opinions, you need to grasp javascript-on-the-server, you need to realize and understand that your application and webserver are the same, or you have to learn how to set up a web server so that this isn't the case, in which case you need to learn about proxying HTTP calls, you need to understand what happens with your http configurations when you put one callback before the other, and nodejs freaks the hell out, if you're worrying about grasphing the process model in asp.net, then you need to grasp how nodejs handles threads, how async io works, how hardware interrupts are handled, and how signals are handled in your nodejs app. blah blah blah. I realize this is a run-on sentence. What a silly comparison.
&gt; Originally was set up with c# in iis but needed it to run on any windows device. That's what http.sys is for. Though it has the additional restriction that you have to run it as administrator if you don't do some annoying command line incantations. 
I tried to do a simple subset of a project that I need in nodejs and found it really easy. Then I tried this new .net web stuff and it is just much harder. Here is the nodejs version: // Load the http module to create an http server. var http = require('http'); var responses = []; function OnTimer() { for (var i = 0;i&lt;responses.length;++i) { var response = responses[i]; response.writeHead(200, {"Content-Type": "text/plain"}); response.end("Hello World\n"); } responses = [] } var timer = setInterval(OnTimer, 10000); // Configure our HTTP server to respond with Hello World to all requests. var server = http.createServer(function (request, response) { responses.push(response); }); // Listen on port 8000, IP defaults to 127.0.0.1 server.listen(8000); 
I was excited to see this product, but then read the review. Might as well just use a combo of MSSQL, VoltDb and RavenDB. That way you're not the guinea pig for some lame ass attempt at ElasticSearch.
All the device development needs to be done asynchronously. In fact most of the new WinRT libraries are async only which makes me wonder if Microsoft is migrating in that direction too.
and like the variant in vb.net or var in c# I don't think it actually compiles IL that's dynamic, it's just a convenience symbol that figures out the type for you.
This is a common issue. The .Net web stuff is a completely different level of abstraction than NodeJS. To do the same thing in C#: var server = new HttpListener(); server.Prefixes.Add("http://*:80/"); server.Start(); Task listener; Action runner = null; runner = (Action)(() =&gt; { var context = server.GetContext(); var response = context.Response; response.ContentType = "text/plain"; response.StatusCode = 200; response.Close(Encoding.UTF8.GetBytes("Hello World\n"), willBlock: false); listener = Task.Run(runner); }); listener = Task.Run(runner); Console.ReadLine(); server.Stop(); server.Close(); http://share.linqpad.net/i4xccw.linq Note I even got rid of the poll, and just block a listening thread (task) on the connection, making an even more efficient implementation almost effortless in .Net. **EDIT**: with more Rx/async goodness (I'm not sure if GetContext blocks in http.sys or not, but I'm sure GetContextAsync doesn't): var server = new HttpListener(); server.Prefixes.Add("http://*:8000/"); server.Start(); var connections = Observable.FromAsync(() =&gt; server.GetContextAsync()).Repeat(); var i = 0; var subscription = connections.Subscribe(context =&gt; { var response = context.Response; response.ContentType = "text/plain"; response.StatusCode = 200; response.Close(Encoding.UTF8.GetBytes(String.Format("Hello World {0}\n", i++)), willBlock: false); }); Console.ReadLine(); subscription.Dispose(); server.Stop(); server.Close(); http://share.linqpad.net/f5tsdt.linq 
Did you try to combine node.js with typescript? That solve really a lot of problems for me
I did play with it. But it just adds another layer to the technology stack, and makes debugging harder. 
Yep Resharper is well worth the money
I used to think it was Resharper, but now the one thing I cannot live without is [NCrunch](http://www.ncrunch.net/). That shit is off da hook.
Oh yeah! I used NCrunch for a month but then the trial ran out :c I miss it so much. 
* Productivity Power Tools 2013 (A multitude of useful enhancements) * VSCommands for Visual Studio 2013 (Some other useful enhancements) * Color Theme Editor (Got to love the dark solarized theme)
Yeah it's a bit pricey. I got my wife to get me a license for fathers day! I think it's well worth the money. It really brings your game up. Allowing you to be more productive while delivering better quality code.
I can't stand Resharper myself. It makes Visual Studio feel like I'm typing into a 300 baud terminal. CodeRush is a little more lightweight (I don't use it either). 
* resharper * web essentials * Productivity Power Tools * VSCommands * Theme Editor * SlowCheetah (great for building for multiple environments) * Mouse navigation - assign back and forward functionality to mouse buttons, really handy for navigating back through code.
Those are mine too. I added this [Tfs Pending Changes Margin](http://visualstudiogallery.msdn.microsoft.com/25273ec2-fbe2-447a-8692-5ac3c35f7006,) a while ago and I really like it. It adds bars in the margin like Productivity Power Tools does for file changes but showing the TFS status of the lines (changed locally, changed on the server, etc.) Check it out if you use TFS for source control.
I hated Resharper when I tried it a while back, had the same experience. On my new computer with vs.net 2010/2012, it never skips a beat. couldn't tell you if the new versions are better or if it's just the new machine, but I like it a lot now. 
For a free alternative to NCrunch try the Mighty Moose. http://continuoustests.com 
I like .Net Demon it builds as you type and runs unit tests after each build. Makes everything faster. http://www.red-gate.com/products/dotnet-development/dotnet-demon/
Interesting...
The Spell Checker one is a life saver for me. I can't speel for shit.
Resharper definitely benefits from a great computer. I sometimes have to turn it off at work for performance reasons (shittier computer). I never have these problems at home (better computer).
Both. Especially R# v5-6 were rather bad, slowing down VS and having internal exceptions all over, but now it is much better - albeit still using a lot of memory (usually 200..300MB, often 400+).
Yeah, I used that in my last job, when I still used TFS. Now I'm on subversion. :(
I agree and found I could live with CodeMaid.
I really wish the old Emacs plugin still worked. I'd like to be able to navigate around with those commands.
CodeRush is better.
Resharper looks interesting, but do I have to remember 8 billion new keyboard commands? Because I don't want to do that.
* Productivity Power Tools * Web Essentials * DPack - primarily for the lightning-fast file and member navigation dialogs, invaluable for navigating large projects just by file and/or path name.
You only really need four anymore. Refactor - ctrl + shift + r Navigate - ctrl + n Quick fix - alt + enter Find usages - alt + f7 At least those are the ones I use with the IDEA bindings.
VisualSVN is amazing if you are stuck with svn
**SPELL CHECK** http://visualstudiogallery.msdn.microsoft.com/a23de100-31a1-405c-b4b7-d6be40c3dfff
1. Roll face on keyboard 2. Mash Alt+Enter until it compiles 3. Ship it
The download page is broken :(
Web Essentials [Productivity Power Tools](http://visualstudiogallery.msdn.microsoft.com/dbcb8670-889e-4a54-a226-a48a15e4cace) (for their brilliant scrollbar) [AnkhSVN](http://visualstudiogallery.msdn.microsoft.com/e721d830-7664-4e02-8d03-933c3f1477f2) (of course only when I have to use SVN) And, as a BDD-addict: [SpecFlow](http://visualstudiogallery.msdn.microsoft.com/90ac3587-7466-4155-b591-2cd4cc4401bc) and [NSpec](http://visualstudiogallery.msdn.microsoft.com/7a52473f-9e1a-40f3-8bd8-6c00ab163609) 
eh... http://en.wikipedia.org/wiki/.NET_Framework Also, Don't be afraid to just say "no, I can't say I'm familiar with that, but I'm always looking for new thing to learn". So much better than "being found out" in your tech interview / coding test / first day of work (god forbid).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**.NET Framework**](https://en.wikipedia.org/wiki/.NET%20Framework): [](#sfw) --- &gt;__.NET Framework__ (pronounced *dot net*) is a [software framework](https://en.wikipedia.org/wiki/Software_framework) developed by [Microsoft](https://en.wikipedia.org/wiki/Microsoft) that runs primarily on [Microsoft Windows](https://en.wikipedia.org/wiki/Microsoft_Windows). It includes a large [class library](https://en.wikipedia.org/wiki/Class_library) known as [Framework Class Library](https://en.wikipedia.org/wiki/Framework_Class_Library) (FCL) and provides [language interoperability](https://en.wikipedia.org/wiki/Language_interoperability) (each language can use code written in other languages) across several [programming languages](https://en.wikipedia.org/wiki/Programming_language). Programs written for .NET Framework execute in a [software](https://en.wikipedia.org/wiki/Software) environment (as contrasted to [hardware](https://en.wikipedia.org/wiki/Computer_hardware) environment), known as [Common Language Runtime](https://en.wikipedia.org/wiki/Common_Language_Runtime) (CLR), an [application virtual machine](https://en.wikipedia.org/wiki/Process_virtual_machine) that provides services such as security, [memory management](https://en.wikipedia.org/wiki/Memory_management), and [exception handling](https://en.wikipedia.org/wiki/Exception_handling). FCL and CLR together constitute .NET Framework. &gt;==== &gt;[**Image**](https://i.imgur.com/Mgll0la.png) [^(i)](https://commons.wikimedia.org/wiki/File:DotNet.svg) --- ^Interesting: [^Portable ^Executable](https://en.wikipedia.org/wiki/Portable_Executable) ^| [^.NET ^Framework ^version ^history](https://en.wikipedia.org/wiki/.NET_Framework_version_history) ^| [^Microsoft ^Windows ^SDK](https://en.wikipedia.org/wiki/Microsoft_Windows_SDK) ^| [^.NET ^Compact ^Framework](https://en.wikipedia.org/wiki/.NET_Compact_Framework) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+ck13lv4) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+ck13lv4)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
.NET is a managed code runtime. Unlike code written and then compiled to a particular processor .NET code is compiled for the runtime and .NET programs are executed within that runtime. This is in the hopes of reducing compatibility problems cross system as well as being helpful in preventing an application crash from taking the system with it. This is of course not without overhead. Another popular managed runtime is Java. The .NET platform has compilers for C#, VB.NET and others. tl;dr C# is a language, .NET is a runtime.
Thanks. But my real question is where do I start practicing. I mean, there are a variety of components and languages in the .NET framework. So, where can I start? Sorry if I wasn't clear enough.
Thanks man. So if I know C#, does it mean that I can answer yes when they ask for a .Net programmer or it is just the tip of an iceberg?
* [File Path On Footer](http://visualstudiogallery.msdn.microsoft.com/d9fc97d4-3b42-4b56-ba47-23f8b81ebd17) Super simple useful addition. * [GhostDoc](http://submain.com/products/ghostdoc.aspx) Mainly for it's ability to copy documents to child classes. The auto-comments it creates are super dumb. * [Indent Guides](http://visualstudiogallery.msdn.microsoft.com/e792686d-542b-474a-8c55-630980e72c30) Useful for long blocks. * [SideWaffle](http://sidewaffle.com/) Neat templates for Angular and other web projects. * [SlowCheetah](http://visualstudiogallery.msdn.microsoft.com/69023d00-a4f9-4a34-a6cd-7e854ba318b5) Non-web.config XML transforms. * [TFS Power Tools](http://visualstudiogallery.msdn.microsoft.com/f017b10c-02b4-4d6d-9845-58a06545627f) Useful additions. Note: By default, it will add Windows Shell extensions much like TortoiseSVN. * [Web Essentials](http://vswebessentials.com/)
productivity power tools extension is pretty awesome and free
After a couple failed attempts at learning vim, it was finally VsVim that got me over the hump. I realized I needed to be able to get it out of the way quickly and easily when it was slowing me down, and then be able to bring it back just as easily. I memorized Ctrl+Alt+F12 to do just that. Coupled with a vim cheatsheet on my desktop, I was able to pick up vim over time with far less frustration. I only regret not learning vim sooner. Now it is my default editor everywhere.
Can't find it there either, unfortunately.
Basically, yes. 
i use resharper, coderush, web essentials visual studio power tools, Node Tools For Visual Studio Ahnk SVN
It helps if you switch off solution wide analysis, as that's the culprit for the slowness. But it is slowing things down indeed, coderush does too btw, don't let anyone fool you. I am the same as you: extensions like that slow things down too much. 
Both Resharsper and CodeRush are highly overrated.
What makes it better than Resharper for you? I've found it to be much more unintuitive and missing some things, like string resource handling or globally renaming a variable in a Razor view. I'm interested in hearing some of the advantages though.
Echoing resharper. One thing I haven't seen mentioned is VisualHG -- it integrates TortoiseHG into visual studio very well, not altogether different than VisualSVN's approach. Right click to diff, view in repo browser, etc.
I run VS in a VM... you can imagine what R# would be like on that.
Even without plugins, Visual Studio is unbearable without SSDs.
don't have any unit test? :D so those are [52k tests](https://dl.dropboxusercontent.com/u/2209105/Screen%20Shot%202014-08-27%20at%200.28.34.png) we do not have, I assume?
The only one I wouldn't use VS without is Resharper. I'd much rather code in Node in vim with a bash environment otherwise. The other two I strongly want are: * [Layouts O Rama](http://visualstudiogallery.msdn.microsoft.com/35966ad9-430f-4ad7-9186-4394b784e36c) - fixes the problems of using VS comfortably on a multi-monitor system and remote desktop to that system. * [ReAttach](http://visualstudiogallery.msdn.microsoft.com/8cccc206-b9de-42ef-8f5a-160ad0f017ae) - fixes a missed feature for asp.net debugging (hopefully one that goes away with vNext): for many asp.net applications you cannot simply press f5 and start it in a debugger. Instead you have to open debug -&gt; attach to process, type "w" and press enter (if w3wp is the first w in the list). ReAttach re-attaches to the process closest to the one you were just attached to (same pid first, same name + highest pid second). 
Coderush of course Layouts-o-Rama: Lets me save and switch between different window layouts I have a presentations layout, a single monitor layout, a dual monitor layout... http://visualstudiogallery.msdn.microsoft.com/35966ad9-430f-4ad7-9186-4394b784e36c
+1 for SpecFlow
If you are a professional developer you rig must be a beast. I got a top of the line machine for about 5k or so, and that thing laughs at resharper. I'm not boasting; just trying to tell you that you are ridiculously more productive with better than avg gear, and a lot of businesses recognize that. So my advice would be to fish a bit on the nets, and present your leadership with a proposition to upgrade dev boxes. My favorite component is a pcie addin that is basically a faster ssd. I got that extra after i noticed that compiling in/to ramdrive was 3 times faster than same on a nice sata ssd. 
&gt;preventing an application crash from taking the system with it What system? :O
I'm gonna try to make an answer that doesn't sound like "it depends" but... it depends. I'm sure that you're aware of it, but keep in mind that what follows reflect my experience, not the absolute truth. Regarding the .net job market, it's pretty easy to find a good paying job in Paris for example. As soon as you move away from Paris, the number of opportunities will quickly decrease. There are a few geographical zones that used to provide a certain amount of developer jobs (sophia antipolis for exemple), but it's been quite some time that I looked at it so my informations are outdated. You could try to look at companies that are labeled as "SSII" (Société de Service en Ingénierie Informatique, more or less IT consulting firms). They usually look for new profiles often as there is some turnaround. There seems to be a couple of companies around Toulouse (for example http://www.sudouestjob.com/SSII.aspx). Regarding the salary, again, once you get out of Paris, they tend to drop pretty fast (as does the cost of life). Also note that it's fairly common in france to not indicate any salary for the position. If you get an interview, you'll probably be asked (amongst other things) how much you earn today, and what are your expectations (money wise) for the job. Often companies have a maximum amount set (they won't tell you about it). But if you fit for the job and go beyond the expectation, they can be open to raising the money bar. It really depends on a lot of things. There is little to no english speaking position in IT usually. Speaking english is actually more of a bonus than a prerequisite. I'm not sure what you mean by "you're OK" but basically if you can manage to follow a conversation in french, you'll be fine with your level. I've been working with developers from around the world whose french level varied greatly and it never had been an issue. Writing or speaking skills are usually not a big expectation for developers, except maybe on the resume and cover letter that are expected to be without errors. Keep in mind that even if everything seems to be getting better we are more or less still in an economical recession, with all that goes with it (less budget, no new positions, etc). If you don't have any specific constraints I would have recommanded moving to Paris, getting a first position there for a year, then swapping for a new company and getting a raise, then after 2 years start looking for positions in the desired area. I Hope that helped :)
CodeMaid hoses intelisense from time to time for me in 2013 so I haven't used it for a while. Does it still do that?
DON'T INSTALL MIGHTY MOOSE. You will not be able to uninstall that fucker. And it probably won't work in the first place.
Can the icon be moved to the side-bar?
Ctrl-[R]esharper + [A]ction Ctrl-R-R Rename Ctrl-R-M create Method Ctrl-R-V introduce Variable Ctrl-R-P introduce Parameter Ctrl-R-I Inline ...
How can people code with resharper? Eveytime I try it I never get anything done. Text is blinking a million different colors, a million (hyperbole) autocomplete windows open and it complains constantly: "Invert if...", "Make readonly..." etc. Can someone please make me a sales pitch of it? INB4: VS 2012 (and 2013) have `Ctrl+,` for searching which apparently is a thing with resharper.
Sooo... the VS plugin you can't live without is neither CodeRush nor Resharper?
Most of them are really good advice. Think about it, before dismissing them. I've learnt a LOT thanks to ReSharpers tips. That said, it can go overboard sometimes. In those cases just ctrl-enter -&gt; configure, to disable it once, or forever. 
Sweet, implement that and you have a new user!
You'll need to set the thread culture to mexican... Thread.CurrentCulture = CultureInfo.GetCulture("es-MX") Thread.CurrentUICulture = CultureInfo.GetCulture("es-MX") (Is es-MX right? Early morning here and i've not finished my coffee yet!)
Try CodeRush Express. Almost everything is triggered from ctrl-`. 
Regarding the salary, a mid level (ie, 2/3 years of experience, couple of medium to big projects made, can navigate around SQL and also understand and manage some level of js/css/html) could ask 35K without having me raise an eyebrow. A senior developper, depending on the experience could go way up those amounts and ask 50K. That's in Paris, no idea in Toulouse or the south for that matter. If you don't mind doing banking stuff (I can't stand it), you could find a position quite easily and the salaries seems to be a bit higher (They were really desperate a couple of years ago as it was so hard for them to find c# dev that they would even call developpers for senior positions who never did any banking and were ready to pay and give time to bring the devs up to speed on the banking specifics). To give you more insight, I'm currently some company's CTO, but I also do once in a while freelance work on the side (once you remove the commercial speech, I'm selling myself as a senior consultant, specialized in .net). My daily rate is a bit above 500€/day (On that, I pay ~20% tax so I'm left with 400€ in my pocket, before income tax). But it's not often that companies look for a senior developper (especially not in house. Don't ask me why. I suspect it's a money issue but I'd rather have a team of 3 seniors than 6 juniors). That's why I'm freelancing it. I won't mention my CTO's salary, mainly because it won't help you figure yours (I have a very specifc contract that few companies would actually consider offering) About the langage, I would not really be worried about it. What you could also do is take two weeks in france "holliday style", and force yourself to speak french all the time. Watch the TV in french, read in french, etc. Maybe stay at peoples with websites like couchsurfing.com or airbnb. Little story : Once upon a time, I went to the US with a friend of mine, who failed university because of English and German. He has absolutly no knack for languages. We were there for two weeks. At first I was translating him everything everybody said. He could read english as long as it was simple. Fast forward 10 days, we were hanging in a bar with people when suddenly I realized that I've been talking to this chick for 15 minutes and forgot completely about my buddy. He was engaged in a conversation with two other people and was doing well. Nothing's beat immersion when it comes to learning a language. As far as I can tell, the offered asp.net positions seems to follow the trend and switch to MVC at a steady pace. But there's still a lot of application in webforms to maintain. If you can do both, the better for you (and fewer MVC developper == more money) . BI and SQL can help a lot too. That's something you can put forward on your resume and in interviews. 
What do you mean by hoses?
Thanks for the response. You are right about immersion. I have a French girlfriend for four years now and every year we come for two weeks so that has helped me a lot. This is also the reason I am thinking about moving to France. In terms of freelancing I am currently doing some on the side in England in addition to my full time asp.Net job. I an doing websites for small businesses, do you think there would also be a market for this in France instead of me working for a company? This might be better initially for me whilst I progress at French? 
I use Web Essentials, but that's about it. 
Intelisense just stops working. If I disable the maid it doesn't happen again.
Yep only an idiot boss would pay a 6 figure salary for a professional and only give him blunt tools to work with
Not ideal for starting, but good for training, try solving challenges on http://codegolf.stackexchange.com/
I haven't seen that issue. 
.NET is Microsoft's name for the Common Language Infrastructure, or CLI. This includes languages (including IL), type systems (CTS), managed runtime (CLR) and other parts.
You're welcome
C# can be run within other applications (.NET apps in particular). It's possible OP has expiernce with a .NET app that allowed for adding custom C# code inline. 
Or they were never valid. ;-)
No they were... it said they were already claimed.
Could possibly be due to other extensions installed alongside it, too. I just haven't figured out what that combo is.
Why the pessimism?
Why the optimism?
;-)
I don't see how expecting something to be truthful is being optimistic? ...it's more being... fair?
Having no expectation that their statement was true and no expectation that their statement was 'false' would be "fair" or more accurately in this situation it would be neutral. Optimism would be assuming someone is truthful while pessimism would assume their incorrectness.
Yeah it's shit.
I suppose you're right. 
Do programming books work as audio books? 
I print labels to a specific label printer via our web server. The printer just has to be installed on said web server. [This is the code I use.](https://github.com/DavidS/MailSystem.NET/blob/master/Samples/CS/ActiveUp.MailSystem.PrintMail/PrintMail/RawPrinterHelper.cs) I would think you can use it to do PDFs. As for using a specific tray, I think that would just be a property you set in the installed printer? Printer name would be in the format: "\\\servername\printername"
+1 for link Would also like to see this! I'm struggling with using MVC concepts, everything I end up doing is JavaScript within a View - Controller is just routing my initial request to the page, then it's basically a SPA. Was going to spin off another thread here but I'll take a look at your code if you don't mind. 
Does this also apply to on premise installations? Because we're just about to pay a hefty bill for CALs.
They seem to make most changes they do on VS Online also available for on premise installations. The question is to know when those changes will be reported.
It will come with Update 4 which is due late this year. Unfortunately until the change is made you will need to pay for CALs, even if you only need them for 2-3 months.
The definitions for the browser identifications are in C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\Browsers (switch for versions). I would go check and see if things got changed in an update.
What about BrightstarDB
I wouldn't use the stored procedure return value. That's restricted to an integer and reserved for error handling. You can simply do a select statement at the end of your proc and return anything you want. If it is a single column, use ExecuteScalar on the C# side. You can also use the stored procedure output parameters. http://technet.microsoft.com/en-us/library/ms187004%28v=SQL.105%29.aspx 
When using EF, I have found that having EF automatically import your sprocs creates methods that only return the amount of rows affected. One way to return the value is: string sqlQuery = "exec [dbo].[sproce_name]"; var result = _db.Database.SqlQuery&lt;decimal&gt;(sqlQuery).ToListAsync(); return result.Result;
In Global.asax, on Session_Start().
Depends. .NET is a vast framework on which you add more frameworks on top of it to do something more specific. Do you want to focus on web development? Dig into ASP.Net MVC. Desktop applications? Check out WPF. Then there are other things like data access with Entity Framework, workflows with WF and so on. Rarely you'll find someone who's an expert in every aspect of .NET and books will usually dig into one specific area like web services, desktop apps and so on. That said, if you want to know about .NET itself, if you grab a good C# reference it will cover the CLR (the common part of .NET no matter what kind of app you are making). "C# in depth" is a great book if you want to dig into the framework before jumping into specifics (which would be a good approach).
I've never heard anyone say that the return value is restricted to error handling.
If you are using ADO.NET, ExecuteNonQuery returns the number if affected rows. No need to make an extra query. http://blogs.msdn.com/b/spike/archive/2009/01/27/sqlcommand-executenonquery-returns-1-when-doing-insert-update-delete.aspx You can also use a T-SQL function (whose name escapes me) to grab the rows affected from the last statement and shove it into a variable.
There are several ways to do this. First off, I've never used RestSharp but have done exactly this with Microsoft's HttpClient, so I have to assume it's possible. There are a couple options, most of which they get to decide. I'll assume that they're using the normal forms-auth route of setting a cookie after authenticating. I'll ignore the cookieless url method since it's rarely used. If that's the case, all you need to do is have some request you can make with the client to get the cookie set. Ideally, I'd say they should have a web api controller (Authentication, Security, Logon, whatever) that has a post method where you can send username and password to get the cookie set, or returned as json so you can parse it and add the cookie to your client yourself. If they're not going to do that, then you might need to reverse-engineer their interactive login sequence and send the same request that gets sent from a browser when a user is logging on (Use fiddler or something similar to figure out what that requests looks like). They might also decide to do something custom, like a bearer-token or api auth key kind of thing, where a user would use the interactive web browser to generate a key, then supply that key to your application so you can make web api calls. The Nuget api key is the best example of that I can think of.
The most important one is probably Alt-Enter. I use it all the freaking time.
Example 1: Public class Foo curly bracket new line. Public int Bar curly bracket get semi colon space semi colon reverse curly bracket...
The new format of Excel documents (XLSX) are OpenXML files - e.g. ZIP files. You can rename the mydoc.xlsx to mydoc.zip and take a look inside. I would suggest you try to embed a file in an Excel document and look how the package is updated accordingly. In .NET you can use the [Open XML SDK](http://www.microsoft.com/en-ca/download/details.aspx?id=30425) to work with these packages. It may or may not have something for embedding objects as files directly but you can always add a part manually. 
As read by Steve Balmer? 
And soothing, ambient, chair throwing noises in the background.
It is restricted to an integer. If you don't return anything, the sp will always return 0. You can use it for anything you want. But typically it is reserved for error handling.
&gt; RavenDB is in a totally different league than DocumentDB (which IIRC, powers Office365), where things are still physically possible because everything happens on a single box. So DocumentDB is essentially BLOB storage then?
What is visual studiot online? It looks like it's just a project management tool?
Did you try refreshing your database in the Entity Framework edmx file?
Go into your source control repository and get the last working revision. If you don't have that then go to your backup. If you don't have that, pray to your deity for a miracle. Also check the directory where your project is and see if the files are there. Perhaps your reference or path got messed up in visual studio.
yeah, run custom tool and everything..
Well i worked 10 days and now after i updated it fed up..
It is effectively cloud hosted TFS. So looking up TFS will give you more information on the subject. VSO has work item tracking, application monitoring, source control, automated building, etc.
If I remember correctly you can tag a controller with the model binder attribute which will tell it to try custom binders for any object type that comes through. If you put it on a method argument it says to find the binder registered for that type and apply it to the raw http request. The binder should parse the request and return the expected type 
If you are already using store procedure, why not use out parameters?
Fascinating, thank you. Many things I was not aware of.
Modelbuilder attribute is to just override default behaviour for particular method or controller. If you want a binder to be used globally, just register it in global.asax and it will just work without the need for any additional attributes.
I think you're right; ExecuteNonQuery returns the number of rows affected, with caveats. It might still work for OPs requirement but it doesn't work exactly as I described above.
Your needs in this particular case might be limited to returning a very simple result, but you might still benefit from learning about [Dapper.NET](https://github.com/StackExchange/dapper-dot-net) You don't say *how* you're writing the 1000 rows to the table, but that's also a good candidate for Dapper!
I personally prefer letting the server return a 500 error code, and using $.ajaxSetup() (if you're using jQuery) to specify a default error handler which logs the returned HTML to the browser's developer console and displays a generic message to the user (I also like turning the screen red and suggesting a reload, since an exception may indicate other problems in the page's state). This allows you to avoid duplicating error handling code in every AJAX method, and allows the global error handling you've set up to pick up on any errors, which will give you more useful information than just a message and a stack trace. I find this works well, since it gives you useful diagnostics on the client in any environment, and you shouldn't be producing exceptions under normal conditions anyway. Also, you can avoid having to put [HandleError] on every controller by editing FilterConfig.cs in the App_Start folder.
Just the model, i added a new procedure..
Open the edmx and save it. Then check the error window for any errors.
Thanks! This helped me a lot !
Blittable. I learned a new word today. Thank you!
Yeah i was starting to get concerned that i was about to embark down a reverse-engineering-the-html-page path... Thanks for your response. Yes i believe this is a standard cookie scenario, it can't really be something custom like what you described with bearer token i don't think, because login tokens/cookies cannot persist indefinitely. So i have the clout to tell them what i need to get this working. Your suggestion is to have them implement a POST endpoint that takes in credentials and returns the appropriate cookie? Could you show me what the code for that endpoint would look like? And by implementing a login endpoint, do they have to remove the loginURL property from the web.config? I feel like any request to the post endpoint would just redirect to the aspx page if that's still there... 
I'm not sure i understand this, but from my perspective i'm not seeing an error really, just getting back a pile of HTML instead of a json object in the content of the response.
Ben(OP): As someone that bought your book a few weeks ago, I love seeing follow-up stuff like this. Almost feels like supplemental material that I can reference against chapter 5.
I have seen error reporting handled this way before, but it was on an older database. TRY..CATCH along with RAISEERROR/THROW seems to be the preferred method now.
yeah i had empty ID
Your right, wrong solution. app.UseCookieAuthentication(new CookieAuthenticationOptions { AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie, LoginPath = new PathString("/Account/Login"), Provider = new CookieAuthenticationProvider { // Enables the application to validate the security stamp when the user logs in. // This is a security feature which is used when you change a password or add an external login to your account. OnValidateIdentity = SecurityStampValidator.OnValidateIdentity&lt;ApplicationUserManager, ApplicationUser&gt;( validateInterval: TimeSpan.FromMinutes(30), regenerateIdentity: (manager, user) =&gt; user.GenerateUserIdentityAsync(manager)), // RETUNS 401 (instead of a Redirect) for API calls OnApplyRedirect = ctx =&gt; { if (!IsApiRequest(ctx.Request)) { ctx.Response.Redirect(ctx.RedirectUri); } else { HttpContext.Current.Response.ClearContent(); ctx.Response.Write("Unauthorized. Please sign in." ); } } } });
Ah okay, on board now. Application_Error doesn't fire when i make requests using RestSharp though, only through the browser :(
Yes, I'd suggest they provide a custom endpoint. I don't have a pure HttpClient example, the below has some light helper methods and is for a bearer-token scenario, but the situation is the same for forms auth and a cookie. The first argument to PostAsync() is the URL, the second is the body of the post request. JObject is the type of object that the request should return. Also, you're exactly right about the forms auth redirect. That's something they'll have to get working and make sure that you can send an unauthenticated request to the controller endpoint without being redirected to the interactive login page. There are a couple ways to do that, some involve removing the forms auth module and providing your own custom module. That's the only way I've ever done it, but I seem to remember I found an easier way of doing that after I had implemented that option. Good luck public Task LoginOAuthAsync(string username, string password) { return PostAsync&lt;JObject&gt;("../Token", String.Format("grant_type=password&amp;username={0}&amp;password={1}", username, password)) .ContinueWith(t =&gt; { var json = t.Result; AccessToken = json.Property("access_token").Value.ToObject&lt;string&gt;(); var token_type = json.Property("token_type").Value.ToObject&lt;string&gt;(); var expires_in = json.Property("expires_in").Value.ToObject&lt;int&gt;(); Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AccessToken); }); }
Hmm odd. I have it working with my own rest client. Its not rest sharp but its a close cousin.
The .net framework is wayyyy more than a simple wrapper of the win api. That's why it is called a framework! You can compare it to java's JDK or QT for C++, a ton of usefull stuff directly available with the language.
They're really not the same thing at all. The .Net framework does *use* the Windows API, and you can make calls directly to the API from .Net as well. You would want to use .Net for Windows development when you want to create software of any considerable complexity, with fewer potential bugs, in a shorter time span, at the the cost of some considerations for performance and latency. You'd also be giving up the high quality, already tested libraries that exist in the .Net framework for client development. Although, I'm sure some equivalent libraries exist in C. I mean, it really depends on what you're trying to develop.
.Net isn't specific to windows. It's a library and execution environment that's, roughly, designed to be platform-agnostic. This is how .Net has been implemented on Linux - Mono. The .Net base class library is largely implemented in vanilla C# and doesn't depend on any part of the underlying OS. You can see for yourself by looking at the Microsoft .Net [Reference Source](http://referencesource.microsoft.com/). There are of course parts of the .Net class library that invoke system APIs - for example, the Socket class has to invoke the Windows Socket API; Mono does the same thing, but instead uses the Linux/Posix socket calls. Let me break things down a little for you. The most commonly used language in the .Net environment is C#. C# is just a language - a set of rules for how strings in a document should be arranged. .Net is more than a few parts: * A virtual machine description - eg, the instruction set, memory model etc. This part of .Net is the .Net Intermediate Language. * A runtime. This is the code that is able to actually execute .Net programs. This would include any JIT implementation or IL interpretter; The Microsoft .Net Framework typically uses a JIT to execute .Net code. * A base class library of ready-to-use classes, like Socket, or List, etc. So typically: I write a *C#* program that uses the *Microsoft .Net base class library*, that is then compiled using the *Microsoft C# compiler for .Net*, that compiles to the *.Net Machine Model* (IL assembly) that then executes in the *Microsoft .Net Runtime*. That flow could have also gone: I write a *C#* program that uses the *Mono .Net base class library*, that is then compiled using the *Mono C# compiler for .Net*, that compiles to the *.Net Machine Model* (IL assembly) that then executes in the *Mono .Net Runtime*. Other *languages* like python and ruby have been brought into .Net - of course, for the code to compile and work, it has to use the .Net class library any not the standard python or ruby library. They call it IronPython and IronRuby for simplicities sake.
Win32 is the old Windows API WinRT is the new Windows API. .NET has bindings to both. C and C++ has bindings to both. .NET is a runtime. C# is a language that compiles to that runtime. You are asking the wrong question. It's a choice between C#/.NET, C, C++, or whatever other language you may want to use that utilizes the Windows API. As for which to use the answer is, obviously: it depends on what you're trying to do. The .NET framework runs from a bytecode rather than CPU native code, meaning compiled code is far more portable than compiled C/C++ code. Moving from 32 bit to 64 bit or to a different architecture like IA64/Xeon or ARM doesn't require a recompilation of the code. The .NET framework also features better type safety and garbage collection. On the flip side, .NET can't bind to native libraries nearly as easily--although it can hook into native .DLLs with its interop layer, it's complex and brittle, and it's only for dynamic libraries; static C libraries cannot be used at all. So... aside from language itself (arguably C# is a better *language* than C++ or C, but that's subjective), you would pick a platform based on your needs. 
You're arguments don't support your conclusion. Nothing you said so far supports the idea that you should only use the return value of stored procs as error codes.
On a simple example above, it probably wouldn't make a slight difference. If you are writing large amount of stored procedures, I would stick with the convention and a pattern on how data should always be returned. The return value was originally intended to return the error codes. It can only return integer. That's why I don't recommend it for the sake of consistency.
I've just tested this in a new MVC5 project to make sure I am right. Using the ModelBinder attribute on the action parameter works without having to register the binder in global.asax. Another action which takes the same model, but without the ModelBinder attribute does not use the custom binder. However, if I register the binder in global.asax, it is used regardless of whether or not the ModelBinder attribute is present on the action. So if you have a particular scenario where you need to override binding of a model but you want that same model to be used elsewhere with the standard model binding, use the attribute. However, if you want to override the binding of a particular model globally, registering in global.asax seems to be the more suitable method. I don't know what extra overhead is introduced through globally registering the binder, but i've used custom binders a lot and have never noticed any extra overhead.
&gt; The return value was originally intended to return the error codes. You still haven't offered one iota of evidence supporting that theory.
Here it goes. http://technet.microsoft.com/en-us/library/aa175920(v=sql.80).aspx It is a principle that you do not share. Not a theory.
1. That is for SQL Server 2000 2. Clearly the author has never heard of XACT_ABORT, which would have removed all need for that pattern. 3. The article is not by Microsoft. 4. The author's specialty is "project management". 5. The article clearly states that others may disagree with the pattern, but offers no real analysis of the alternatives. In short, your so-called 'principal' has no more creditability than a random blog post.
[NDepend](http://www.ndepend.com), [NCrunch](http://www.ncrunch.net) and [ReSharper](http://www.jetbrains.com/resharper) are must-haves for me. 
Forms auth is absolutely fine for a web app - but if you can convince them to use dual auth schemes, everybodies life will be much much easier. If there will ever be any other API clients, this'll be a serious barrier to entry.
To add relevance, I think you should talk about serializing JSON and pros/cons of JSON vs XML.
I'm not 100% sure what you are asking, but that URL you list in your CSS is an absolute path, not a relative one. If you're planning on putting applications in arbitrary subdirectories and expect them to work, you need to use relative paths like "images/picture.jpg" and not "/images/picture.jpg". It's pretty absurd to use rewriting to fix something that should be fixed in your CSS.
I would agree with you about fixing the URL in CSS, however the css that is used is generated by the primefaces server faces library.
.NET FRAMEWORK == Mono RT
Either 1) configure primefaces to add a prefix to all css URLs or 2) rewrite a subdomain instead of a path (java.s123.online.com instead of s123.online.com/java). Of course, the second approach may require you to buy your own domain rather than use the free one provided by your provider.
Try this http://stackoverflow.com/questions/14825896/how-to-change-combobox-background-color-while-clickedcombobox-is-open-in-wpf http://stackoverflow.com/questions/22695145/wpf-change-background-color-of-a-combobox
ha thats ultimately what i'd like to do. my VPS package includes a domain name, i'm just having a hard time figuring out what I want as a name.....i'm not creative with stuff like that :). So once I do that, it should solve problems? 
One extension i like its CodeALike for your VisualStudio stats https://codealike.com/Public/Home/Download 
&gt; In order to implement MVVM, you need to first understand commanding, messaging and binding. The only thing you need to know about messaging is that you don't need it. MVVM, like MVC, is based on the idea that you can share models between views. You don't need to use messages to keep views in sync, just update the appropriate data model or view model and you are done.
EventToCommand is still around? When the hell are people going to learn how to write custom controls? (And again, yea memory leaks.)
Messaging is a way of decoupling often disparate parts of your system so they don't need to know about each other to know when updates occur. This is quite useful especially in larger systems.
You don't need it for MVVM, unless you count INotifyPropertyChanged as a messaging. For creating a complex application it is very handy though.
It gives you the illusion of decoupling, but in reality it tightly binds components in a non-obvious fashion. Every sink is effectively a global that can be referenced from anywhere else in the application. That makes debugging and static analysis incredibly difficult. And then there's the data redundancy. It doesn't happen on all project, but it is not unusual to see multiple components storing the same data. Synchronization between these components, which is done with messages, becomes a real problem. 
The more complex the application, the more problems it causes. The bug counts dropped dramatically on my last Silverlight project once I started ripping that shit out. Come to think of it, I had to ban it's use on the first Silverlight project I worked on as well. All of the memory leaks it introduced were causing the whole thing to grind to a halt after 20-30 minutes. 
&gt; Come to think of it, I had to ban it's use on the first Silverlight project I worked on as well. All of the memory leaks it introduced were causing the whole thing to grind to a halt after 20-30 minutes. You had a problem with one poor or poorly used messenger. That doesn't make messaging bad. 
Budget tablet + Visual Studio is not a match that you are going to get. Hardware specifications for VS requires at least 1gb of RAM. Plus you need a tablet that supports keyboard because typing using the on screen keyboard would be a pain in the ass. My only recommendation will be the Microsoft Surface 2. Is not a really budget (350 usd) but will run visual studio. I have run VS on low level hardware laptops (i3 with 2gb for example), and trust me, it sucks, don't wanna know how it will perform on tablets, let alone debugging. 
I would recommend at least an i5 with 4gig of RAM. Ideally you want more, but that should be enough to keep things relatively smooth for small to medium sized projects. SSD's greatly improve performance also. 
No, just no. You will have a miserable experience, the tablet will be expensive and unproductive. 
I suggest you don't and get a budget laptop instead. You'll end up with better specs for the same budget.
I completely agree with this, I ran VS on a surface 2 and it was OK but a similarly priced laptop to a surface 2 will do more in the long run. 
The tablet experience is getting more sophisticated, but it's not sophisticated enough to program on. Programming is 80% typing. Visual Studio has succeeded in bringing it down from 100% typing, but still nowhere near drag and drop levels. 
Get a used surface pro 2. It'll be great.
You're going to need to make sure its not running windows 8 RT
as others have said, a used surface pro 1 or 2. I still have the first gen pro and it works great for everything. The only issue, you you do a lot of work on desktops with multiple monitors you are going to have a hard time getting used to the small screen size.
I would rather remotely access to a virtual Azure PC. Pro: - It is pretty easy to set up: [Scott Hanselman uses his Surface to connect to a Azure VirtualPC](http://www.hanselman.com/blog/UsingASurface2RTARMToGetActualWorkDoneRemoteDesktopVisualStudioAzure.asp) - On a stable connection you don't see a difference between working locally or remotelly. Con: - You need a stable internet connection. - An Azure Virtual PC costs you a couple of dollars per week. If you have an MSDN account you can take its free credit. You might use a keyboard and a mouse that you can connect to the tablet for better comfort. Or even external HDMI output for using an external display. With all the peripheral you don't even need a tablet. Use your mobile phone. 
Where do you do drag and drop in programming?
Nowhere. That's the point. Drag and drop programming is something the industry desires but is not feasible yet. It may never be feasible. 
Amen.
A Surface Pro isn't budget level, but it's the only tablet I'd want to do .NET programming on - I agree with just about everyone else that says you'd be better off with a laptop.
Your need a keyboard and mouse... made code without a keyboard are a imposible task. I recommend one Windows Surface Pro. in this tablet you can do things with VS. One problem is the cost. for my peception it is until so expensive. 
I recomend one alternative called **NopCommerce** [NopCommerce](http://www.nopcommerce.com) [NopCommerce Download ](http://www.nopcommerce.com/downloads.aspx) This was building with Asp MVC and you can download the source code and customize the code. 
For the first Silverlight project it was CommandDelegate and EventToCommand that was leaking memory all over the place. They prevent you from sharing models across multiple views because it causes the model to hold the unloaded views in memory. 
&gt;I cannot find material on how to upload a file to the google calendar, via the API. Have you considered that it may not be a feature of the API at all (assuming that you're still talking about the schedule CSV file here) but rather a "client application" that Google is providing on their server which then inserts the events individually via API? IOW, your app won't just pass the uploaded CSV file to Google (because really, what's the point in doing that?), but rather: * Upload to your ASP.NET app * Parse the file into events * Use the Google API to create individual events
If you really want a tablet get a tablet laptop combo. Pure tablet wont run VS because it will be Win 8 RT instead of just Win 8. Besides you will REALLY want a real keyboard. Edit: My wife got a HP Split x2 (laptop / tablet combo) not too long ago and so far we are pretty happy about it. Looks like they are a bit more expensive than the base model Surface Pro 2 everyone is suggesting ($499 vs $350), but it comes with a "real" keyboard instead of that thin flat thing the surface provides and you will get a lot more harddrive for you money (granted its not a pure SSD like surface). It also runs the real full Windows instead of Win 8 RT like the Surface comes with which WONT RUN VS. For me the two things that made me not get a surface was the keyboard and Win RT which will only run Windows Store apps which is a go no for me. Edit: Yea like I said, VS + RT = no worky http://www.hanselman.com/blog/UsingASurface2RTARMToGetActualWorkDoneRemoteDesktopVisualStudioAzure.aspx
Awesome! I hope you like it! Tell your friends.
Do make sure you also read my sample chapter from the book's [website](http://www.writinghighperf.net) that talks about measurement. It's vitally important to not jump to too many conclusions based on just reading about potential issues. That said, most of the things in the article are pretty much no-brainers. 
This (http://msdn.microsoft.com/en-us/library/vstudio/8fw7xh74(v=vs.100).aspx) sounds about right for your needs
In case you were not aware this is a great resource for google api fiddling. https://developers.google.com/oauthplayground/ I see nothing about files but the suggestion for individual events should work.
Whaaaaaaaat this is awesome!
If you really want to say thanks, hit up Mads Kristensen on Twitter. :-) He's the one who also brought you Web Essentials.
I have been using https://code.google.com/p/google-api-dotnet-client/ for a while and it works pretty well. https://developers.google.com/api-client-library/dotnet/apis/calendar/v3
Usually VS plug-ins only work for Professional and above. Does this work for the Express versions of Visual Studio? I know they recently added support for Web Essentials.
WinRT lies on top of Win32 (even though MS initially claimed the opposite)... sadly :/ Win32 sucks.
First of all, you are referring to extensions. There are also add-ins, but no plug-ins. But you are correct that they do not work with the free Express versions, except... Extensions by Microsoft work with the free Express versions.
Ooh, I'm on mobile so I'll check this out when I can. I was playing around with some other demo on the developer.google site for google calendar api but it didn't work for me/resource not found. 
Thanks for that information. Scott's article also includes the following information: NOTE: Much of the functionality included in these multiple VSIX extensions will be built into Visual Studio so you won't need to install so many things. However, for VS2013 and this preview we needed multiple VSIXs in order to get you the bits sooner than later. Also note that today only Task Runner Explorer will work on Visual Studio Express but for VS14 all the features will work in the free VS Express version.
While there are built-in attributes for managing authorization, it's easy enough to create your own Allow(params string[] Roles) and Deny(params string[] Roles) attributes. If you do this, you will need to override one of your controller's early-pipeline "filter" methods (OnAuthorization is best) to implement your role-checking logic. Have a look at http://msdn.microsoft.com/en-us/library/gg416513(vs.98).aspx, if you're not familiar with this kind of thing. If you don't have one already, you will likely find a base controller class useful for wrapping up your common filters like OnAuthorization. (If you end up overriding more filters, later, you'll be extra-glad to have a base.) I happily endorse this approach: it's simple and clear, portable (in case you want to move over to, say, [Nancy](http://nancyfx.org/)), and has worked for me across a number of implementations. 
Wait, really? I hadn't heard that, just the initial claims. My googling isn't helping me, can you sauce that?
Eric was nice enough to give me a quick tutorial on Arduino after his talk at devLink'14. It seems like a great platform for those that want to teach their kids how to program. I'm looking into it for a computer club for inner city kids. Anyway, check it out if you're interested in teaching the next generation!
Based on a talk at devLink'14, this post shows how to search the entire source code base of the Linux kernel (46K+ files and 1.7GB on disk) in less than a second. Using the normal technique, FindInFiles, the same search takes about 1 min 40 secs. It's time to move on from grep, which was created in 1973 :)
Why TIFF? You might have better luck converting to PDF and, if you still need TIFF, convert that PDF to images.
I feel like this is an overuse of JavaScript, bordering on the nonsense that is Node.JS. Could someone explain why I'm wrong?
NodeJs nonsense? We recently converted our javascript-heavy MVC project to use Gulp (Node/MSBuild) over the built-in bundling and we have seen substantial build time improvements. We tried everything from the built-in bundler, to Cassette, to BundleTransformer, and none have matched the performance we are now getting with our current setup.
The number of dependencies decreased by half in `Hangfire.Core` package with help of ILMerge and internalizing. It is very awesome (but sometimes dangerous thing) – http://blogs.clariusconsulting.net/kzu/leveraging-ilmerge-to-simplify-deployment-and-your-users-experience/.
And how many projects have you built with nodejs? Would love to hear about the experiences you had when you were building them. 
There is also the asp.net session service, that runs as a windows service, that you can use. It is web-farm compatible and doesn't require a database. As for process recycling, the worker process will effectively stop after a period of inactivity. Also, changing any file with the extension .config under the web site directory tree will cause the website to restart. Additionally, rapid writes to any file under the directory tree can cause the app pool to recycle. If you are storing temp files or uploads or anything else, it's best practice to use a folder outside of the web site directory tree.
&gt; Additionally, rapid writes to any file under the directory tree can cause the app pool to recycle. If you are storing temp files or uploads or anything else, it's best practice to use a folder outside of the web site directory tree. Ah yes. That makes a lot of sense.
&gt;Additionally, rapid writes to any file under the directory tree can cause the app pool to recycle. If you are storing temp files or uploads or anything else, it's best practice to use a folder outside of the web site directory tree. I try not to even allow the app pool identity to have write permissions to the app directory. The thought is that if somehow a attacker gets control of the process running the application they can then modify application code. Keeping application data outside the application folder is good practice too, since it makes deploying code less prone to accidentally overwriting data. I believe data should reside on another server to keep data out of the DMZ.
Between setting up monitoring and logs, you should be able to figure out why the app_pools are recycling. Based on your post, It seems safe to assume you haven't profiled your app through a process or memory profiler. With that in mind, you moving your session out of process or persistent is just bandaging the problem. Find the reason for the recycle and that should help guide you to your next step. If you don't have any profilers, load up a trial of the jetbrains products in addition to setting up some perfmon logging on the server. The perfmon will help you figure out triggers for the recycle in production (memory limits, proc limits, garbage collection activity, etc), and jetbrains profilers are probably the easiest if you're unfamiliar and will help you spot any quick gains locally. Memory -&gt; http://www.jetbrains.com/dotmemory/ Process -&gt; http://www.jetbrains.com/profiler/ Good luck!
Another way to log the app shutdown reason is this: [Logging ASP.NET Application Shutdown Events by ScottGu](http://weblogs.asp.net/scottgu/433194) 
Got enough troubles with javascript heavy MVC applications and this solution aint one of them :) no offence, i'm sure its great!
So you don't want a Windows only solution? So like how to do it with HTML/Javascript ?
My money is on an exception being thrown in a user created background thread that isn't being caught
Since you can ping the winupdate servers, I am assuming you actually do have a valid internet connection. Two options: * Research where windows update is pulling the URL from (registry or something else). Verify that it is correct. You could even use a packet sniffer to see if its trying to hit the correct server. * Reformat your computer (back up everything first). *Just to be safe, run a virus scan to make sure your computer is not infected.* *Edit: Someone else may know what exactly to do, but those two options would be what I would do.
Thanks, I'll work on your first option. This PC has actually just been reformatted, that's why I need to reactivate 3.5 lol. It's good and clean so far.
Do you have your Windows disk / iso still? There is a Microsoft guide installing it from that via the command prompt. I'll look for the link Edit: This is the link http://support.microsoft.com/kb/2785188
[Imgur](http://i.imgur.com/uDXQNdy.png) Awww yiss! It finally worked! It turned out to be a compatibility issue between my OS which was 8.1, and my installation media which was 8. For future reference, I reinstalled the OS and disabled Windows Update during installation. Then before doing anything else I opened an elevated cmd and entered the usual dism command; DISM /Online /Enable-Feature /FeatureName:NetFx3 /All /LimitAccess /Source:d:\sources\sxs Thanks for your help everyone!
Reinstallation worked, thanks!
Agreed. Using my Surface Pro 2 for some dev work and it isn't all that great. Having a larger screen, such as the Surface Pro 3 would probably be fine though.
Well you don't have to write lots of queries and instead allow the people using the api to write them. You'll need to deal with security though and lock down any sensitive stuff
Being robust, I've found the SQL option to be relatively slow. I suspect the session state server to be better. I've also read that you can get Redis backed session state amongst others. 
But why do you need 3.5? 4 and 4.5 is backwards compatible?
In the controller action the User Property should be a claims principal (or be able to be cast to one). Loop over User.Identities. Each Identity contains a list of claims.
You might want to look at bddfy. We found it really nice and simple to integrate. Plus it creates html pages from your test results. 
Ctrl -T for quick open files is awsome
You could do paging. Just create a new page around the time performance starts to suffer. +bonus ui being fancy
You know, that does actually kind of work, but I'm still getting the same results. I'm using: var claimsIdentity = User.Identity as ClaimsIdentity; And claimsIdentity.Claims looks like [this.](http://i.imgur.com/ddIMDFj.png) So it seems like there's some sort of disconnect there. The context used in Startup.Auth is of type Microsoft.Owin.Security.Facebook.FacebookAuthenticatedContext - is this disposed of - or is it linked to User.Identity? Thanks for your help.
I don't have access to the code at work atm, but later I will post how you do it. I have done exactly what you are trying and have been going through the same headache of figuring out how it works. 
Man... You have no idea how helpful that would be (actually, maybe you do). I've spent so long on this stupid little thing, and I know it's something so basic just staring me in the face. Thanks so much!
Did you try http://visualstudiogallery.msdn.microsoft.com/fb5badda-4ea3-4314-a723-a1975cbdabb4 ?
That's all I've found. It's a limited version which will only create an Input/Output table rather than tests.
I would recommend reinstalling via NUGET if not already done so.
you should also be able to debug into your onauthenticated handler in your provider setup. I ran into an issue where the OnAuthenticated method didn't get called. I had to switch to an earlier event in the process. This was using the openidconnect authentication though, not facebook. I think it might have more event options then the facebook one.
All I had known was the first diagram on the page you linked -- WinRT is a sibling of Win32. That second page definitely claims otherwise. 
Have a look at https://github.com/ayende/rhino-licensing. Not much documentation but it's rather lightweight and should provide what you need I think. 
I've looked at it, and also at Portable.Licensing, but both don't do hardware lock, which is the main thig we need in our solution. Also, Rhino Licensing hasn't been updated in more than a week. Not sure Ayende is still maintening it.
I believe this has been replaced by Stubs and Fakes, only included in VS Premium &amp; Ultimate. http://msdn.microsoft.com/en-us/library/hh549175.aspx 
I would say get 2013, if it's paid for by the course but do note though that if the course is designed with 2012 in mind, some of the screens and features may be different.
Those features are for mocking assemblies, (mostly to test static members, which isn't required), not for generating the tests themselves.
If you decide to go for the 2013, get the latest iso from Microsoft that includes the update 3 (the file size is about 6 or 7gb), specially if you're going to develop Web applications. 
I just use [sidewaffle](http://sidewaffle.com) for templates now. 
If you've got MSDN subscription you also have a certain number of Azure credit (depending on your subscription level), so you could host it in an Azure website or web role for free.
I will explore it. How does the database part works ? You create the DB script and it let's you deploy ? Something like that ? Or do I need some kind of online db ?
Azure has databases too. I'd have a read up on the various option there.
Ok, thanks !!
The points on azure are headed in the right direction, once you install all the azure goodies with Visual Studio on your machine you should have a number of templates for both classicly hosted and azure hosted sites. Most of these templates have pretty much all the basic stuff you need (even login security with tons of options) for a small site just add your own CSS and go.
I needed 2013 for VS Online integration, that's about the only big difference.
2013 isn't a massive upgrade over 2012 (at least not compared to most vs upgrades) however it is a decent set of improvements.
You can create an empty MVC project by choosing Empty and then check MVC. Bam, empty MVC project.
That is an expensive piece of software. Anyone have experience with other libraries? 
You'll be fine. I'm sure they'll be little differences between the two. I've used both and vs2013 is basically the more polished 2012. 
It depends on what you're doing. Unless it's an advanced course, it probably won't make any difference.
If it's paid for, get the latest version.
They should be similar enough that you can cope, though. 2013 has a few neat features that 2012 lacks. My favorite is the reference tracker right above methods and properties. 
[You can create Visual Studio 2012 Web projects in 2013](http://imgur.com/zaUnlzl), with the same 2012 project templates. 
You have these options: - Use a web hosting company, that caters for ASP.NET hosting http://www.microsoft.com/web/hosting/home - Microsoft Azure hosting (basically web hosting with a few twists) http://azure.microsoft.com/en-us/services/websites/ - Get a Windows Server with IIS and install your application there. These days this is usually done by getting a virtual server somewhere (Amazon EC2, Microsoft, or dozen other places) example. http://aws.amazon.com/windows/ 
Piggy backing on this, AWS had a free tier for most of their services including EC2 for, I think, a year.
Look at this: http://en.wikipedia.org/wiki/Common_Language_Infrastructure .Net is a framwork can be used by any of languages that can be compiled into CLI basically and are run by the .NET CLR virtual machine.
Try: (User as ClaimsPrincipal).Identities There is a list if identities, using User.Identity only grabs the first one. The startup info is most likely used in a owin middleware or http module to set the principal value when the OnAuthenticate event occurs. This will happen once per request. The cookie is used to avoid making round trips to Facebook every time.
If you end up needing to have it hosted by a hosting company, you can get all the services you need for pretty cheap. ...at least in the US. Probably for as low as $3/month plus $20 every two years to renew your domain name. This will include the hosting, a database, some email boxes and a bunch of other tools that you probably don't want to waste your time with. 
Website-&gt;ASP.net Configuration was broken (the menu entry, the feature works by CLI) as of the last time I tried to use 2013, so I kept using 2012. I'll have to check if this is still a problem after I install update 3. Update: the menu entry is still missing after update 3. This is not a show stopper, but it was a convenient thing to have around. 
Thanks for the tip!
Thanks for that, I'm not liking what they did with he default web templates in 2013. I figured there had to be a better way. I'll check it out.
&gt; When you write code in a language like Java or C#, the compiler turns it into what's called CIL or Common Intermediate Language. It's only called CIL for the .NET languages. For Java it's called Java bytecode.
A couple of addenda to Mechakoopa's excellent response: When you create a project with .NET, the "framework" part looks, more or less, like a bunch of library or source header references. But: * It doesn't work actually that way * If you're using a good dev environment like Visual Studio, you won't really need to worry about how it works Regarding web services, they can be "consumed" by a project in a couple different ways. * As references, just like a library/source header. This basically gives you access to an API that is provided by a remote service, probably IIS. * Via explicit calls in your code. The nice thing about web services is that access is standardized: you can get to them from applications of many different kinds. As far as creating web services goes, it's pretty much the same as writing a library, but it has special "hooks" for integrating it into a hosting environment.
That's a bit misleading. EF is deployed along with the rest of your binaries when you push your web app.
What in the world is an alt coin?
The user system is already built into MVC5. All you have to do is activate the Google and Facbook logins and it's all done automatically. That's most of the work there. As for the exercises, make a template page and then store all of the data in SQL. Then build the objects and set the data. This is like an hour worth of work, tops.
I will. I think this is something that needs to be documented, so when (if) I figure this out I'll write a blog about it and let you know.
I think that's a pretty good general plan, but it doesn't sound like it's particularly geared toward MVC. That could be a plan for basically any website, written in basically any manner. Your interfaces *kind of* get at what you want your models to look like, but what controllers will you define? What are your views? Will you need any pipeline filters for logging, authorization, or error handling? (The answers to these questions do not seem obvious to me, but it's your project, so maybe it's clear to you.) Another big question is: what about your client-side logic? Are you going to use JavaScript, and if so, how will your models look? A final *opinion*: while I love and respect interfaces, and enthusiastically encourage experimentation, I hope you won't fall into thinking that "Interface All The Things" is law. It seems like people are pretty hot on DI-related maxims these days, but some of us are pretty hot on anti-complexity-YAGNI-related *advice*, too.
Or maybe I "released" them...
4) Web services is simply exposing an application to other applications using the same protocol web browsers use. This allows for an application done in any just about any technology to talk to it over the Internet (or a smaller network). There are several ways to do this with .NET (the most recent and recommended one being ASP.NET Web API) but it basically means the client program calls your application (much in the same way a browser asks for a page, you can actually use a browser to test some of these calls), you application gets the request and returns information in a standard text format (like JSON or XML). So if I have a restaurant and I want people to be able to make mobile phone applications that show the up to date menu, I would create a web service that would return the data. Later if I want to allow those same applications to book reservations, I would add another function to the service where mobile apps can send the reservation details to my web service so the reservation is written to my internal database. In this fashion, people are easily able to work with my service without having to worry the details on what's behind it. You just need to explain how you expect the reservation info needs to be formatted.
Here, [LMGTFY](http://lmgtfy.com/?q=What+is+an+alt+coin%3F)
Oh. As crypto currency? I thought you meant something that actually pertained to dotnet. Why are you spamming this here?
When you say "App" do you really mean an offline, packaged, app-store downloaded "app", or just making your website mobile friendly?
An AppStore downloadable app. 
Only thing that I want to add here is that the list of languages that run on CLI/.Net is rather large actually. Here's a decent list but it's actually missing a couple: http://en.wikipedia.org/wiki/List_of_CLI_languages. C#, VB.Net, and F# are the main ones as they come from Microsoft. Also, if you use IKVM.Net, you can use pretty much any language that targets the Java VM.
I'm not aware of anything that lets you do that.
If you want it to work completely offline you'll have a lot of rewriting to do. Also if you are serving any dynamic content good luck. You'll need to flatten any views to straight html/js
I wouldn't call working with Python "wasting time", but it certainly is less prevalent than something like .Net or Java. Given the state of Microsoft licensing, it will be more likely that large companies are the ones using .Net while the smaller shops would stick with Python, C++, or Ruby. It may not be glamorous work, but if you don't mind working in the "enterprise" you will find no shortage of .Net jobs here in the U.S. Speaking of the future of .Net, there are a number of positive changes in the .Net ecosystem these days. Earlier this year MS revealed the *source code* for their next generation compiler -- the same compiler that the next version of Visual Studio will run on, you can compile yourself. They're also rewriting ASP.Net from the ground up (open source as well) with an entirely new "compile at runtime" design that's also based on their new compiler. Xamarin is a company which not only develops and maintains the Mono project (an open source, cross-platform .Net compiler), but also provides tools that you can use to develop *Android apps* using C#. I've never used it myself, but I hear it's not bad. I don't think they're officially partnered with Microsoft, but they are getting a lot of love from them lately. It's a good time to be in .Net :)
Obviously an MVC site can't run inside an iOS or Android app so there is no direct way to port it. With that being said, you do have a few options. Would your company be interested in investing in Xamarin? Xamarin allows you to build iOS or Android apps using C#. You can easily move resuable components of your app to a class library, then create Xamarin iOS and Xamarin Android projects to build native iOS and Android apps. Note that this will cost $1000-$1900 a year for a business license. Are you interested in using PhoneGap? What you can do is re-implement your application as ASP.NET Web APIs services that are called by pages using jQuery Mobile. Phonegap acts as a container that contains your HTML5/CSS/Javscript code and allows you to deploy it all as an app distributed on the app store. Alternatively you can still expose your app as a set of ASP.NET Web APIs and write a native iOS and Android apps that consume them. Of course with the APIs option you have to consider the nature of your app, since you're now dependent on the client device having an Internet connection for your app to run. You also have to consider the data requirements of your app and how that will affect users too. Of course, if none of these meet your needs you can build your web application from the ground up in iOS and Android. 
Honestly it depends a lot on where you want to work, what kinds of software (e.g. do you want to make web apps, mobile apps, games, business software, etc.) you want to make, and what kinds of problems you have fun solving. Much of my career has been in the Microsoft world and I've been very happy with the work I've gotten to do, but what appeals to me may not appeal to you. 
Anyone think they might open source the CLR when they release win9? I keep thinking that's going to be their next move. The only other thing on my wish list would be to open source PowerShell.
Nice, a guarantee *against* open source code. NIH syndrome for the lose... .NET open source is in pretty good shape too...
Learn C#, but don't put all your eggs in one basket. Keep your java, c++, etc up to date also. It might seem like a lot, but in the end they are all tools. If the only tool you know how to use is a hammer, all your problems look like nails. 
so could you please tell me what kind of software are mostly developed with .net, compare to other program languages?
I've been working on the Microsoft stack over 10 years, and there has always been work. With what I've read about vNext these licensing issues are going to quickly go away, I think. You're going to see the .net stack running on a lot more low budget projects. At least the stack will become more capable of such things. see: http://www.dotnetrocks.com/default.aspx?showNum=1014 http://channel9.msdn.com/Shows/Web+Camps+TV/ASP-NET-vNext-with-Chris-Ross The great thing about cloud, web, mobile is that you can stay cutting edge without the hassle that older enterprise .net software solutions commonly have. Microsoft is heavily investing in both its cloud infrastructure and services. But Hartastic is correct, if you're not excited to be building that type of software then you're not gonna like it. Although, we're doing a lot of unity3d development at my shop and as a C# dev with some XNA experience it's a breeze to make games as well as enterprise bits. 
great advice. thanks
I've attended three conferences in the past year, a small local one, Codestock, and DevLink. (BTW, attend small conferences. They're cheap!) All three were general developer conferences, which means the conference didn't focus on any particular technology; it just had to be relevant for developers. For all three conferences, the talks were 1/3rd .NET stuff, 1/3rd javascript related, and 1/3 miscellaneous (including a lot of engineering stuff like how to deploy using Azure.) 
It's called Iron Python, and it's been around for nearly a decade now. 
C# and the .NET Framework compare directly to Java and the Java VM and Runtime, respectively. You can consider C# to be a sort of Java ++. Indeed, C# came about almost directly from the lawsuit that Sun pressed over Microsoft's implementation of the JVM (which they called J++). Sun didn't like some of the things Microsoft did, believed it to be part of Microsoft's EEE philosophy, and sued. And won. Microsoft I think was already abandoning Java, though, and soon after the lawsuit was settled, C# and .NET was released into the wild. So anything you can do with Java, you can do with C#. Frankly, there's not much you *can't* do with the .NET framework. You maybe should use native code for, say, kernel mode drivers, but for anything else, C# is quite capable. There even are quite a few games these days written in C#/.NET. It's one of the best higher-level languages available these days, IMO, and I'm a huge fan of Python and C++. Furthermore, the .NET framework is home of the second-best UI framework available, WPF. The best, of course, being HTML5/CSS3. So to answer your main question: "should you learn .NET?" the answer is yes. You should never avoid a new language; the more you learn the better you will become at each, recognizing and being able to deal with important differences between platforms. That versatility will translate directly to a huge career boost regardless of what language you eventually land with. That sort of experience is a requirement for a good senior developer or architect. 
I used to love DevLink until they moved to the 'Noog I remember when it was a *free* conference.... *sigh*
If you already have the rest of the site working in php, I'd suggest asking this as a php question. You can definitely mix and match .NET and PHP, but it's not quite as easy as you'd probably like. I'd ask over on /r/php to see if they can point you in the right direction with your sql driver and use a switch to .NET as your backup-backup-plan. That said, I'm a .NET guy, so if this is something you're going to be doing a lot of, web applications, etc... The ASP.NET MVC environment is very nice, but there will be a definite learning/relearning curve switching from PHP.
WinForm apps are most certainly not in development anywhere that I know of, and I know a lot of .NET developers. &gt;If you're making smaller utilities and stuff, console apps (windows command prompt) are probably common too. No. People are now building Cmdlets, which are far more convenient for use in a powershell environment, which is how most windows machines are configured and managed. Most MS dev work now is either web (MVC or WebApi) or XAML (phone and metro) or powershell. Windows forms and Web forms are mostly dead.
Winform is quite common in my experience, developing apps for nontech end users for internal use.
Beware that it's not really supported much anymore, as far as I'm aware... Edit: Thanks for the info everyone! I wasn't aware that it was still being worked on :)
&gt; Windows forms and Web forms are mostly dead. I think it's probably worth pointing out that while WinForms is pretty much on its last legs, WPF should be alive and well for those who do desktop development. Just in case someone might get confused :)
It's definitely still actively developed; not going away anytime soon. **Edit** Since I've been downvoted for some inconceivable reason: Iron Python [released its latest beta in May](http://blog.ironpython.net/2014/05/ironpython-275-beta-2-released.html). Sure, it's not Python 3 compatible yet, and it has a long development cycle, but that's in keeping with its history. Everything I google implies that Iron Python isn't going away. [Microsoft recently released Python Tools for Visual Studio 2013, providing great Python (both Iron and CPython) support](http://www.hanselman.com/blog/OneOfMicrosoftsBestKeptSecretsPythonToolsForVisualStudioPTVS.aspx). Is this somehow a four year old backlash against Microsoft giving it to the community to support? Did I miss an announcement somewhere? 
Xameran is ios and mac/Linux as well
I think the Microsoft Stack scales well from small to medium\large enterprise. Starting from the BizSpark licensing that provides all of the stack to small business at the minimum cost to Windows Server\SQL Server DataCenter Edition that can utilize hundreds of processor cores and terabit of memories. I am hoping that the software stack itself can make strike against the Linux space in the near future. There is no reason that the .NET stack shouldn't run on the Linux\Unix system. They should be a real competitor again Java in the days to come and maybe we will start seeing Large\Ultra Large Enterprises picking up the .NET stack over java in the future.
Yeah I know. We use a lot of open source tools, but no libraries that get re-packaged as-is.
Yeah you've ignored the legacy market there. 
&gt; .NET open source is in pretty good shape too... Well, compared to what it used to be. It still seems to be far behind eg. Python, Ruby and Java.
I graduated from college where the curriculum was entirely Java (but now they've switched to Python) and then my first job was mostly PHP and an insignificant amount of Classic ASP. I even did a little bit of Ruby on Rails. It was more of a helpdesk/general IT job than anything else. I have now been exclusively working in C# and WPF for about 3 years. My career path was determined not by the languages I was familiar with at the time of my hiring, but rather the programming principles I knew that could be applied to a variety of languages. If you're looking for entry-level positions, a general understanding of object-oriented principles and some sort of experience out in the real world (whatever that may be) might be good enough. (They had me take a quiz and I got all the .NET questions wrong, so there!!!) I guess what I meant to say is, sure, study .NET (frankly, C# and XAML are awesome) but you don't have to label yourself as a developer of a specific language. You just have to sell yourself as a problem solver and a go-getter IMO.
How about this: how do you determine if a stored procedure is executed successfully in SQL?
Yes, this is an excellent answer. It really depends on the website, what it does, how it works... If it uses a lot of Javascript or jquery, the phone gap route might be the way to go. If it uses a lot of C# to calculate things, crunch things, then Xamerine is a good choice. It is some kind of game thing? Unity can use C# and output cross platform binaries. Is the 'app' going to need lots of graphics and yet still need quick performance? Phone gap can be used in conjunction with Famo.us. Supposedly this is fast (haven't used it, only read about it). There are a few other options too that I can't recall off the top of my head. Otherwise, you'd have to go native with Java for Android and Cocoa for iOS - that could be a lot of work. 
Whether or not it returns an error via the normal error reporting mechanisms. Though note that XACT_ABORT ON is useful for ensuring that the operation is actually stopped when the error occurs. Otherwise it is like using Visual Basic with ON ERROR RESUME NEXT.
We don't always to stop the code when there is an error condition and you didn't answer my question.
I'm a bit stoned at the moment, but this doesn't sound right. Sun sued Microsoft over J#. C# and J# had a small window of coexistence. C# is a closer decedent of C++. That's where the # sign comes from. B &gt; C &gt; C++ &gt; C++++ C# is C++, double plussed. Those pluses are arranged in a two-by-two configuration to make the sharp sign. There are a lot of similarities between Java and C#, but .NET is its own animal. All .NET languages compile to the same Intermediate Language before running on the CLR. What Sun didn't like was that J# would essentially compile Java (or its equivalent) to run natively on the CLR, along with all of the other .NET family languages--with no need for the JRE. 
Did you add the directives to the PHP ini file? You need to install the SQL Native Client AND download/extract the SQL Server drivers for PHP, then add the extension directives to the PHP.ini file. It sounds more complicated than it actually is, it's just a few lines of text. There are also two versions of the PHP SQL Server drivers for Windows. Version 2.0 and 3.0. I forget, of the top of my head, but I think Version 3.0 works for PHP 5.4 &gt; but you might want to double check. Also, make sure you use the right directives that correspond to your PHP build (xxxxx_54_NTS if you're using IIS). Depending on how large the project is, converting to ASP could be a pain. Edit: if you check phpinfo() it should indicate if SQL Server drivers are installed. Drivers: http://www.microsoft.com/en-us/download/details.aspx?id=20098 Instructions: http://www.iis.net/learn/application-frameworks/install-and-configure-php-on-iis/install-the-sql-server-driver-for-php http://technet.microsoft.com/en-us/library/cc296203%28v=sql.105%29.aspx
&gt; Windows forms and Web forms are mostly dead. Not dead at all. Deprecated? Maybe. But if you have a working and non-crufty WinForms or ASP.NET Web forms app, can you normally think of a really compelling business justification to move it to WPF or MVC? Yeah, me neither. 
Yep, you're high. I mean, you're probably right about all of the above, but no one cares. Unless you're high. QED You're high.
&gt; Furthermore, the .NET framework is home of the second-best UI framework available, WPF. The best, of course, being HTML5/CSS3. HTML/CSS completely lacks binding and extension mechanisms. (you'll need JavaScript code) Layout is a very complicated and error prone process in HTML. CSS has no meta-programming capabilities or support for expressions (you'll need Less or something similar) So how is HTML/CSS actually better? What I hate about WPF is that it's so incredibly verbose, but as a UI language it works very well.
Sigh this anti-opensource pattern is very common in a lot of .net shop and I really do not understand why. It is _REALLY_ stupid
They released a new version of the Visual Studio/Python IDE just last month.
How many non-crufty web forms apps are there?
First, I think the direction Sataya is going with Microsoft will make it much more relevent -- the vNext bits combined with the legs Xarminian is growing make C# much more interesting going forward. Second, one key thing to keep in mind on job markets is you don't need a million jobs, you need one job. I would focus on finding one that I liked rather than future proofing my resume especially given how fast this market moves. And you can get a job programming just about anything these days. 
I did it all and a number of times. I installed the Native Client 2.0 because I was using php v. 5.3; extracted the drivers in the ext folder, edited the php.ini to include the drivers at the bottom extensions section, and it still persisted. I'll post the specific error message when I get to work (just woke up and its 4:30 so in about three hours), it seems like gibberish to me though. edit: The error message is: &gt; Connection COULD NOT be establishedArray ( [0] =&gt; Array ( [0] =&gt; IMSSP [SQLSTATE] =&gt; IMSSP [1] =&gt; -49 [code] =&gt; -49 [2] =&gt; This extension requires the Microsoft SQL Server 2012 Native Client. Access the following URL to download the Microsoft SQL Server 2012 Native Client ODBC driver for x86: http://go.microsoft.com/fwlink/?LinkId=163712 [message] =&gt; This extension requires the Microsoft SQL Server 2012 Native Client. Access the following URL to download the Microsoft SQL Server 2012 Native Client ODBC driver for x86: http://go.microsoft.com/fwlink/?LinkId=163712 ) [1] =&gt; Array ( [0] =&gt; IM002 [SQLSTATE] =&gt; IM002 [1] =&gt; 0 [code] =&gt; 0 [2] =&gt; [Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified [message] =&gt; [Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified ) )
I'm not really concerned about mixing it with php, I'd be ready to discard the php altogether without much concern since its a relatively small file; it just establishes a connection and writes to a database (or I guess doesn't since I can't get it to work...). What I'm really concern about is if the way asp.net is structured, would it just involve essentially changing the php file to asp.net or would I have to recode the entire site to get it working with .net? edit: The error message is: &gt; Connection COULD NOT be establishedArray ( [0] =&gt; Array ( [0] =&gt; IMSSP [SQLSTATE] =&gt; IMSSP [1] =&gt; -49 [code] =&gt; -49 [2] =&gt; This extension requires the Microsoft SQL Server 2012 Native Client. Access the following URL to download the Microsoft SQL Server 2012 Native Client ODBC driver for x86: http://go.microsoft.com/fwlink/?LinkId=163712 [message] =&gt; This extension requires the Microsoft SQL Server 2012 Native Client. Access the following URL to download the Microsoft SQL Server 2012 Native Client ODBC driver for x86: http://go.microsoft.com/fwlink/?LinkId=163712 ) [1] =&gt; Array ( [0] =&gt; IM002 [SQLSTATE] =&gt; IM002 [1] =&gt; 0 [code] =&gt; 0 [2] =&gt; [Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified [message] =&gt; [Microsoft][ODBC Driver Manager] Data source name not found and no default driver specified ) )
I've been using a Microsoft Tech Stack for many years now, it's true that there is a lot of money in .NET, however, due to a large volume of "talent" in the area that money tends to be distributed across a lot of people. You'll find that .NET due to licensing concerns and server costs etc you'll find it tends to be enterprise level sites and applications using .NET. As a .NET dev I'd have to say GO FOR IT, but the practical money-grabber in me says keep it up with the Mobile-centric application development, things are going to keep 'hotting' up in this area. Web development is also a great avenue, especially with knowledge of mobile applications and getting yourself into the web frame-of-mind you'll be invaluable to the industry. Keep in with C++ and Python, it's one thing to say you're familiar with C++, but old-hat C++ devs that are INTIMATELY familiar with C++ tend to have a fantastic oversight in a .NET environment, sure the languages are barely comparable, but the things you have to think about in C++ (memory management, I'm looking at you) allow you to make better informed choices in .NET I've seen it many a time where "big data" meets .NET and some code that was hacked together 5 years ago is suddenly woefully inadequate. The new kid on the .NET block comes along and suggests shiney-tech 2.0 as a solution, they write beautifully elegant code, however it handles "big data" in much the same way. Old Man C++ comes along, checks the memory usage per cycle, checks the largest unit of allocation, suddenly a couple of matrices, a few loops later we see perf increases in abundance. So, to someone getting in to the .NET stack I'd say, yup, there's money, yup there's jobs at all levels, it's mature, it's a healthy environment. We're coming into a new era of .NET with vNext as well, so by all means plough a lot of resources into learning .NET and it's ways. But for the love of all things binary, don't lose sight of the wider development ecosphere. 
What are your thoughts on F#? I quite like the imperative .NETness, we had an application come to us from the deep dark depths of the financial services industry recently that had been written in F#. I couldn't help but feel, looking at it, my approach in C# would've been 3 times as verbose and half as readable. I don't know enough about the language yet to suggest whether that was stellar development or an inherent directional push from the languages constructs. 10/10 would definitely work on another F# project though. 
I would say, to a CS student looking to an avenue to get into, don't aim your sights at legacy markets. Leave that to the old-hat battlescarred folk. Be aware of WinForms, be able to use them, sure. But I wouldn't really plough any meaningful resource into chasing the WinForm industry. I'm a BE WebDev, so I guess my desktop experience is skewed towards hacky CMDlets and Console Apps for hacking on libs. I'd just be inclined to suggest that WPF would be the Desktop way moving forward. 
Unfortunately I haven't tried F# yet, though it's on top of my to-learn list (right after I get done learning C# ASP.NET for this current project). My FP experience has been with ML and Haskell, so I'm really looking forward to seeing what F# does different. As for my thoughts on FP in general, I think what you're looking at is a combination: the language constructs and idioms push you in one direction, but it still takes a good developer to make it legible and concise. On balance, FP code tends to be more terse because it employs more abstractions and higher level functions.
In the enterprise world, a lot of the technology decisions sit with the CIO types, and in my ( limited) experience they are very much looking for the least-risk scenarios or solutions. Doesn't make a huge amount of sense to me (just a dev-type) since we are perfectly capable of ruining their businesses with our own bugs, as we would be lucky if more than two sets of eyes sees the code changes before they ship!
I'm running VS 2013 on Windows 7 64 bit no problem.
NIH syndrome has nothing to do with open source, you also show NIH syndrome when re-implementing a commercial framework just because you think you can do better
&gt; WinForm apps are most certainly not in development anywhere that I know of, and I know a lot of .NET developers. Perhaps you should ask other devs than webdevs? Winforms is still one of the main UI frameworks used. Look at the control vendors, they're still first and foremost sell winforms controls, and after that wpf controls/win8 controls. Winforms isn't actively developed anymore, but that doesn't mean it's dead. One of the main features it has is that it's simple, all quirks are well known, there are a lot of mature libraries for it and offers all main features you'd want. WPF is nice too but has the problem that its team is not there anymore, as they've been merged with the windows team to redo the xaml stack for WinRT. 
How do you measure alive and dead in this case? As neither winforms nor WPF are actively developed anymore (both teams are gone)
Crap, really? I confess myself spoiled, then. 
One more thing to add to this is that the Unity game engine uses C#, via the mono run-time. It's probably the most popular mobile engine currently and seems to be gaining some traction on consoles. Honestly, for a few years with the meandering development and support of Managed DirectX, XNA, and Silverlight it felt like the future of .NET was starting to seem shaky. But these days, I think the future looks bright!
No, very true. I would argue that in the development houses I've been in, projects tend to be upgraded incrementally (it's very difficult to sell "Hey, pay us for a full re-write. We wanna use new shit"). But knowing how the "new stuff" fit's with the old is obviously very important. Also, you'll find yourself "firefighting" a lot of the time with the older projects. So, yeah. Good point.
If you are wanting a web development job in a large enterprise type company, .NET is the best way to go. Java is also pretty common. If you are looking at startups or freelancing, something like python, ruby, or php are better. If you are wanting to do actual computer programming, java or c++ is it. My advice, at least learn 2. Once you have programming down in one language, another one is easy to pick up. So your combo could be python expert with c# experience. Currently working and have worked with both large companies and small ones, I find the small ones more rewarding, more challenging, and most eventful. But it's up to you. 
Anthropomorphized F# sure sounds like fun company! Thanks for the offer, I just might take you up on it if I get stuck.
Yeah, there was a lot of animosity, and that was one of the reasons. I tried to address it by dropping the EEE philosophy -- embrace, extend, extinguish -- in my original post without going into too much detail. The biggest issue, and one that Sun was wrong about, was Delegates. Microsoft came up with the idea as a better way of doing event handling than anonymous inner classes, and they were absolutely correct. They submitted suggestions to Sun, but Sun rejected the entire concept as "not Java". So Microsoft did it anyway and called their stuff J++, but that wasn't enough. Anyway, that key problem with J++ (as Sun saw it) is what gave us the most useful feature (at least until LINQ) of C#: delegates and events (which are just syntactic sugar for making delegates of a certain type). 
Well... I should have said HTML5/CSS3 with a data-binding framework like Knockout or Angular. ES6 actually makes data binding much much easier, but you still need some form of templating to make what I said true. I just sort of assume everyone uses a data binding framework, so I left that out. Also it was an aside and not part of my main point, so I didn't expand. Anyway don't get me wrong, I love WPF. I agree with you about the meta-programming capabilities of CSS (at least on any browser but Firefox), and that WPF's layout engine is superior to HTML, but I don't consider the former a major issue, and I consider the latter very very good. But I'd rather do animations in CSS3 any day of the week, and I prefer the styling in CSS styling over WPFs style of styling. But the pain points in WPF, specifically attached properties implementation, the IObservable interface, and some of the general pre-dynamic conventions of WPF, are smoothed out so much just by the highly dynamic nature of JavaScript, that HTML5/CSS3/KOorNG wins in my book. Highly subjective, yes. But that's how I see it. 
I believe it was rebranded as [Python Tools for Visual Studio](https://pytools.codeplex.com/releases/view/123624).
The [ASP.NET vNext](http://www.asp.net/vnext) platform is going to be awesome. I'm already running some MVC5 applications on Linux via mod_mono, and running them without relying on apache/nginx will be even better. 
Okay, I may be a bit biased, but that's only because I am a Microsoft Premier Field Engineer supporting .NET and Azure. That's support, not product development, so don't AMA - I very likely won't know! :) That said, here are my $0.02: If it's job security you want, you really can't go wrong with the Microsoft stack. As other posters have noted, [this ain't your daddy's Microsoft](http://www.hanselman.com/blog/MicrosoftKilledMyPappy.aspx). We have really smart guys working on really cool things, and they're doing it all openly and transparently with community involvement. Every customer I visit is excited about things we're working on, like Roslyn, VS2014, C# vNext, ASP.NET vNext, what we're doing with Unity and Xamarin. Heck, [did you see this](http://www.hanselman.com/blog/IntroducingGulpGruntBowerAndNpmSupportForVisualStudio.aspx)? That's HUGE for web developers. Or [what about all the crazy different languages and frameworks we support on Azure](http://azure.microsoft.com/en-us/services/websites/)? And then there's just the crazy amount of new functionality we release on Azure every THREE weeks. It's really hard for me to keep my Azure workshops up-to-date because the development velocity there is cuh-razy! I am proud of this company. I am proud of our platform. We love it. We love our community. As long as there are really thoughtful guys who "get it" - Like Scott Hanselman, Jon Galloway, ScottGu, and even Satya, we will have a platform that is built for the developer community, that developers will WANT to use, and will hire OTHER developers to work on. (Disclaimer: My opinions only, not official representative of Microsoft, etc.)