I must admit, I didn't really feel a need to change the exception dialog that we have, but if the debugger now shows the *correct* line on which the code has broken, that will be a useful improvement. The last time I reported the bug to Microsoft, stating that the debugger sometimes shows the line following the line at which it is broken, I was told that this was by design and there was no way to change that.
Dude, let it go.
The 15 in the name refers to the internal version number. VS2015 is version 14, the next version will be 15.
I've been looking into Eto, but it looks like the Android version still isn't ready (even in alpha / bleeding edge). Did the author give any clues on when that will be ready?
On the .Net rocks episode he said that Mobile wasn't a focus, due to competition from Xamarin, but might come in the future. iOS is there but not 100% and Android is basically MIA.
Only if you do. I mean, the longer we talk about this, the more it becomes apparent that picking on VB.NET users for their choice of language is completely ridiculous. But we can't have everyone knowing that it's just as complete and capable an OO language as any other now can we?
Yeah... it's like that. It's kinda fun watching you dispute the point without any substance reply after reply. Really, you never had a point. Just wanted to rub someone's nose in the poop, right? Not too much fun though when they're not quiet about it, is it? Do you make fun of Perl users too? I suspect they're even less tolerant. Seriously, this stuff brings out my inner troll. 
Nice! It's annoying just not being g able to scroll the code when the modal window is open, looking forward to this being released. Stupid name though! Very confusing!
I very much doubt there is one, it's not a common, everyday task. Why not just write one? You can call msbuild from the command line.
Do you have to call the compiler directly? Can you use msbuild instead? That's what msbuild is for and it would be much easier...
Check the log files to see if you can tell what is actually causing the crash. Much of my troubleshooting generally consists of "turning it off and back on again." Clear all caches and pull your project down fresh from the repo. Open and run a different project to see if you get the same results. Turn on the verbosity for your build and comb through the output to see if something might be missing that could cause an issue. I would try all of this and more, then my last two steps would be to reinstall VS and if that doesn't work, start running on full IIS. That last one is a move of desperation, but by the time I get there I've probably wasted 6hrs on it and am ready to nuke the earth to when the war. Edit: just dawned on me you said VS 2015 update 2. Just try rolling back to update 1. Co-worker told me today some people were having trouble with update 2.
I don't know of any offhand but try looking through [Lanyard](http://lanyrd.com/dashboard/) and [Meetup](http://www.meetup.com/).
I did not listen to what they posted, but I will take a shot the topic, my proposal. The .NET Framework is a Standard, open and public, much like html. While the .NET Core is an implementation much like IIS or SQL, it is developed and has a license set by the creator. Mono(before the M$ buy out) is a open-source community project that implements .NET/IL, while the microsoft .NET implements .NET/MSIL, with a licence set by microsoft. The frameworks are free and are targeted at a wide range of platforms, mono.NET goes on most platforms while microsoft.NET is windows and other "friendly" platforms only(with the sellout of the mono team expect this all to change) . .NET Platform example: Mono-.NET is natively integrated in Ubuntu.
Ok, check this https://github.com/Atrejoe/EFHooks works better with code first.
Trying to decipher the new .NET versions and how in the fuck they're supposed to work (especially with F# and with each other) has pretty much convinced me to abandon .NET forever. I can't count the number of articles just like the linked video I've read about it and it's still super confusing. 
WebApi while it does use MVC as a base, actually has its own API for request processing and serialization... this is changing with ASP.net Core as they Homogenize these 2 frameworks The current standard from my experience is WebAPI 2.0 
This is an issue with "DNXCore" (never read it like this). It's a preview framework. This should be resolved with RC2 or RTM.
What for?
I just ran into this trying to get symbols (the PDB files which map source lines to executing code) to load for a DNX assembly. Apparently the DNX assemblies are generated in memory at runtime, and thus can't use symbols from disk. Even when I was generating output assemblies, at runtime, the symbol GUID was different for the executing assembly than for the on-disk assembly, and looking closely at the in-memory module, there was no module file. Like /u/AngularBeginner says, this is supposed to be taken care of, but currently it's a big showstopper for production systems, which need to have symbol files for good post-mortem diagnostics.
You need to learn computer science, generally speaking. Algorithms, design patterns come first
I ran into a similar problem when I updated VS 2015 to update 1. the workaround is to open the task manager (ctrl+shift+esc) and kill iisexpress.exe after each debug session, so you don't have to reopen VS. But the problem was finally solved after I completely uninstalled VS and IIS express, removed all the config files and settings, and then downloaded VS 2015 update 2 ISO and installed it in one run.
I have line numbers in my exceptions. You must have some plugin interfering
To be honest, I have not heard of 'bridge.net' before. Looks interesting. So I don't have any direct experience with it, however I have used [typescript](https://www.typescriptlang.org/) a fair amount and I really like it. Something I have had to explain to people who want to start using typescript is that you still need to know javascript. If you trust that the compiler will do all the work for you then you might run into problems when your code does not do what you want/expect it to do and you need to start debugging it. But for me at least, it's been easier to maintain the code using typescript rather than plain javascript.
Typescript is a superset of javascript, so your experiences with typescript aren't going to be directly comparable to someone using something like bridge.net. However, I suspect you are right about still needing to know Javascript.
I think once [WebAssembly](https://en.wikipedia.org/wiki/WebAssembly) kicks off we'll see some proper C# in the browser space, until then typescript is the best option. It gives you good strong typing, typed compatibility with most of the big libraries. And very important for me, good debugging support - with Chrome you can debug and step right through the .ts files. Typescript is still build on JS so unfortunately you still have all the quirks (non-scoped loops, zero based months, no threads etc). Similarly, I suspect bridge.net will probably produce some rather quirky output to deal with that, which might be hard to debug in the browser (disclaimer I have not used bridge.net)
The problem is not with VS shutting down unexpectedly, it is with IIS Express shutting down unexpectedly. VS stays up and running just fine, but when I stop debugging IIS crashes, forcing me to restart debugging just to check out any changes in the code, which is really annoying because restarting debugging on a moderately-sized project can take easily 2-4× as long as just rebuilding and hitting F5 in the browser. And with MVC I am forced to quit debugging in order to modify source files because they get locked down during debugging.
I tried edgejs when I was experimenting with Electron, but only because I thought I needed it to work with Cortana's API. I think it's mostly useful for cross-platform integration? Cool thing about edgejs though, it works with some other languages too, like Python. Don't know if I'll ever actually use it, but cool nonetheless. Edit: I checked out bridge.net and it's not what I thought it was. Looks like a preprocessor, not a runtime compiler. /u/DEYND's comment was more relevant than I thought.
These are all third-party solutions though. I like what /u/code-affinity mentioned...an official solution from Microsoft.
Oh this seems perfect. An official solution from Microsoft. I'll read about it. Thanks for the link!
If you can, I would probably wait and see what happens with WebAssembly.
Note that the first version of WebAssembly (MVP) won't have threads, [those are planned for a later version](https://github.com/WebAssembly/design/blob/master/PostMVP.md#threads).
Yeah, I understand the difference- my comment about F# comes from the fact that there isn't a (working, anyway) .NET Core implementation of some of the critical F# libraries - FSharp.Compiler.Services. netcore has some serious bugs and open issues on GitHub still, for example. I've also been frustrated that the tooling support is constantly changing (dnx-&gt; dotnet, whyyyyyy), although I understand that's also not framework. What it really feels like is that Microsoft thought, "hey, this isn't finished yet, but whatever, open source it and use the free labor to figure it out" instead of actually committing to creating an easy to use product. I suspect that in six months, when most of the tools and framework have the slightest bit of maturity, I may come back to the ranch- but in the meantime I'll be elsewhere. 
 Not easily.. afaik you need to be using the new project system in most cases. I tried using the new OWIN appsettings system a while back I was able to get it working but with a lot of friction Mvc6 and core different in a way and you don't have to support both but be prepared for an uphill battle 
What happens when you try to run it?
It doesn't compile due to these errors, therefore it won't run.
Ok, just wanted to make sure you didn't see the errors and bail, because building usually kicks off the package restore that will actually fix the errors.
Ok, I lied. I've been trying to problem-solve all day - what I described is what was happening earlier, but it seems like re-installing MVC has fixed that. I closed down my PC, re-started it, and re-loaded the project, and all the errors were gone! (Just closing Visual Studio apparently wasn't enough!) So, new problem - when I try to run it, it gives an error: The following error occurred when trying to configure IIS Express for project WebApplication2. Filename \\?\\E:\&lt;path of my project&gt;\.vs\config\applicationhost.config Error: Cannot read configuration file I've checked that the file does exist, and it does. It's about 83kb of XML. Thanks for the help so far. Any ideas on this one? Edit: sorted, see my other post!
You misread, it's Web API :). That is used to build a service that purely returns JSON formatted data to be used in a Javascript framework. That route has a bigger learning curve, but allows you to build more dynamic applications. For your use case, I would go with mvc. 
Ok, I've sorted it! For some reason, it didn't like it when i made the project on anything other than the C: drive. I've made a new project on the C: drive, and it's all good. (If you happen to know why that is, that would be nice, but if not don't worry!)
I might be thinking about this while I don't really need to yet but do you think it would be difficult to convert a web app from the current MVC to the new Web App format (combined Web API and MVC)?
The error list is for compile and design time errors. Not for runtime errors. You can find the error in the output of your application and in the event log. You can also attach an event handler to catch all uncaught exceptions. You can also turn first chance exceptions on in the VS settings, so the debugger will stop upon exception.
Also I'd see if your employer will pay for access to the website I've linked below. It's a truly awesome resource for learning with loads of content related to what you're trying to learn/achieve and is well worth the investment. https://www.pluralsight.com/
No, I have to follow the current pattern until we migrate away from it
&gt; The bad thing about doing this, is we always used to worry about doing all of your filtering on the SQL server. Something like SELECT * WHERE UserType = 'admin' AND UserAge &gt; 25 AND UserGender = 'M' AND UserLocation = 'TX' etc... You can still do this with stored procedures, they just have to be planned for in the SP. For each filter you expect, you can have optional parameters. The procedure then looks for which parameters are null/default and which are set. For the ones which are set, the procedure uses those filters. &gt; Even complicating things further for us, is the users are stored in the database in one format, but we need it in a different format when it comes back. (it's an old database with a lot of other applications already using it) So we've been using a function that queries the database, and goes through each property and modifies it as needed for the class we are returning. I can't say that this is horrible. Probably the perfect solution would be to get all of the various applications refactored to have a single class which they all can use and pass around. But, there is no reason to let the perfect be the enemy of the good enough. You might consider having a base class which does all of the data access and holds the properties as they exist in the database and then inherit from that class for each application which provide accessors to the underlying data which do the translation in each direction automatically. This gives you one place to handle all of the database calls, a generalized base set of properties and then the inheriting classes can handle the application specific requirements.
Haha, I never really understood how all of the different web frameworks came about. I've always thought that they were mostly products of really experienced and knowledgeable developers proposing solutions to well known software development problems. Interesting how a new framework came from what would have originally seemed like a problem instead.
I wish I knew what to say. I'm having the same problem myself. Web Forms is 100% out. Don't do that. It's between MVC and Web API (I think that's what you mean instead of Web App). If all things were equal I would choose Web API myself. But I'm a C# guy and I like visual studio and you get more "help" doing MVC than Web API. With Web API you are mostly on your own for all the javascript. With you being more comfortable with JavaScript and less comfortable with C#, I would suggest WebAPI is the way to go. But hey, try it out and if it doesn't feel right try MVC. There is a lot of overlap in the two approaches. 
When you make a new MVC project there is a checkbox that says "Include Web API". If you check that box you can do both in a single project. There is a lot of common code/ideas between MVC and Web API. 
1. ComputedUpdates, Computations, ComputedColumns, etc. 2. ConfigureComputations, etc 
Thanks for all the material so far. Really appreciate this. These will probably keep my off-work hours pretty busy for the next couple of months, haha. 
I hear so many people recommend typescript as this easy path into JavaScript for C# developers, and I just don't think that's true. The 'this' keyword being one of the more mind boggling concepts that just does not translate from C# at all Typescript is a great tool to help people who know C# and JavaScript. 
cool. thanks very much. just wanted to compare it with something i knew. looks like a great tool. 
* MVC will be slightly easier to get a simple site up and running. * WebApi with a Single Page App will scale better for future growth (loooooooong term future). There is a ton of overlap between MVC and WebApi, so a pretty decent upgrade path exists and it's nothing to sweat over right now.
Everything you say is true.
What the hell??? the guy is asking for "cheap, decent hosts " you want to push him a 50$ a month hosting
exactly, good that you understood this typical Microsoft bite and switch bullcrap before getting into Azure balls deep
&gt; I've always thought that they were mostly products of really experienced and knowledgeable developers proposing solutions to well known software development problems. Ha! More like that xkcd cartoon about 'standards'. Someone says '54 frameworks? That's too many! I'll build a new framework to replace them all!' and then suddenly there are 55 frameworks. Some are really well thought out and in use (MVC). Some are really well thought out and obscure and not used much (F# stuff springs to mind). Some are legacy stuff that was cool at one point, but like most computing things has become obsolete, but is still in use by certain companies/corporations that are invested and slow to adapt. (Webforms or God forbid classic .asp). Some are just so fucking weird and show up in some sort of option somewhere and no one uses them and there is some odd thing posted about it somewhere on the web and there's no way to know if its any good without spending a week of your life fucking with it and frankly who has that kind of free time? 
fucking shit. Arvixe is the worst http://hosting.asp.net/hosting/hostingprovider/details/135#reviewSection
The decision for us was MVC so we could easily update the application without having to push out an update to all of our users or build some kind of package. Put in the URL, you are on the app. As long as your pages are mobile friendly, you have now opened your application up to mobile devices easily. If you need to update the app, hit publish in VS2015 Community, and watch it compile. The app, and your users, are updated.
Looks like the N+1 problem. Few ways to approach a solution 1. You could execute your complex query, then take the results and pass them as a table to your next ADO query that gets the details https://msdn.microsoft.com/en-us/library/bb675163(v=vs.110).aspx 2. You could write a single query and avoid the round trip of option 1. 3. You could try to put the whole thing in a linq query and use the Include prefetch operations to join the two sets of data. This may not be a option due to the complexity of your query.
I just opened up permissions to that specific folder ;/
Don't bother with WebForms, it's like VB.net, for programmers who don't want to keep with the times and wonder why they get laid off later.
What parts of implementing this do you understand, and which parts are unclear?
Numeric data types all have static/shared parse functions that you could use. Take a look at Integer.TryParse. Dim iResult As Integer If not Integer.TryParse(txtUserInput.text, iResult) then iResult = Integer.Minvalue End if If iResult &lt;&gt; Integer.MinValue Then txtOutputBox.text = Cstr(10 - iResult) Else txtOutputBox.text = "Please enter valid number" End If Sorry for formatting, mobile. 
| Theres nothing wrong with web forms per se Not sure I 100% agree with you on this. :)
Something you may want to consider is doing some form control. Explicitly set your textbox to only accept numeric values. You can go about this multiple ways (either in the editor or in code). Specifically in code, this will limit the text (setting this on your Form_Load is best). *Mind the formatting Dim txtboxes as Textbox For Each txt In txtboxes AddHandler txt.KeyPress, AddressOf TxtNumberMask Next Then create a sub to handle this: Private Sub TxtNumberMask(sender As Object, e As KeyPressEventArgs) Select Case e.KeyChar Case "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", vbBack e.Handled = False Case Else e.Handled = True End Select End Sub Once you have it setup so you can only input numeric values in your textbox (I assume you only have a number textbox and a combo box; if you don't, simply call the above statement for only THAT textbox). You can do something like this. Dim myTInt as Integer = txtMyTextbox.text Dim myCInt as Integer = cmbMyCombo.text Dim theTotal as Integer theTotal = myTInt - myCInt As i'm not really sure what your trying to accomplish here, this should get you started! *Edit: If your combox is using a limited amount of items, consider doing a Select Case statement similar below: Dim comboText as String = cmbMyCombo.text Select Case myString Case "Option1" theTotal = 10 - myTInt ect.ect.ect end select 
Instead of a textbox, try a numericupdownbox. 
Have you done a full project in MVC? Yes, webforms is very obsolete. I did webforms from .net launch until shortly after MVC launch, switched and never looked back. Webforms was Microsoft's attempt to make websites like Windows form programming. It was a success for its time but it's a very outdated model, not embracing http, js, Ajax, single page apps, etc..
WebForms used HTTP, JavaScript, AJAX, etc. There was the AJAX Control Toolkit. You could also create web services, HTTP Handlers (useful for proxy handlers) and make web requests. It also had themes, master pages, sitemaps for menus, and a lot of other features if you took the time to learn them. You could even use C# and VB.NET code in the same project. ASP.NET is quite versatile even if you stick to WebForms. From my perspective ASP.NET has now become a ball of confusion as it has strayed into different architectures. It is now a hybrid framework.
I hope that within 1-2 months. My guess is that given the current status, the API etc. there should not be any major changes, I'll just keep working on new extensions and ensuring that there are no bugs.
Yeah, I've seen some posts about that tool on their forums, however, I was mostly looking for open source projects and/or services having that name ;). If I ever think of any fancy/catchy name it might change again, for now it's better than Sentry.
&gt; WebApi is used for writing REST Apis, do not use this because it will not satisfy your need You might be able to meet your needs with a WebApi backend, if you are willing to write a front-end application in Angular or similar [SPA](https://en.wikipedia.org/wiki/Single-page_application) framework as well, to call the data endpoints and render the results. But this is significantly more complex. 
may be you are living in your dreams, or may be you are some paid shill. Azure charges 56$ monthly for website with SSL, luckily the guy didn't buy your bite and switch https://www.reddit.com/r/dotnet/comments/3t551o/freelancers_where_do_you_host_your_net_sites/cx4difb I am using Azure for few years and I also used AWS and a buch of shared hostings 
What I take from this is what we already knew: `String.Format` has uses but it is a power tool - is not trivial and so is not free in terms of performance. It is often unnecessary as well. many times I have seen a `string.Format("{0}{1}", a, b);` in important code.
The thing is, there was no mention of SSL in the OP.
oh you recommended a hosting without SSL. I see.... 
I'm not sure I agreed with myself 100% whilst writing that! ;)
Two years! Seriously, stick with 4.5 and wait for core to go through a couple of iterations.
yeah def you don't need a cert for 5% of the websites, but that's not [his case](https://www.reddit.com/r/dotnet/comments/3t551o/freelancers_where_do_you_host_your_net_sites/cx4difb), yeah he didn't tell from the beginning but that's because he thinks people here assume that SSL is needed by default 
Let's be honest - you don't have any evidence that it's obsolete...that's just your opinion. Here's some evidence that it's not obsolete: Microsoft keeps updating it. They took almost every feature from MVC and ported it to WebForms...since so many people still use WebForms. Scott Guthrie himself said that they are continuing to work on both engines - http://programmers.stackexchange.com/questions/95212/when-to-favor-asp-net-webforms-over-mvc
I spent ages on web forms, I would say it is obsolete. I mean you still can absolutely use it, but maintaining page state, postbacks, etc all hurt the quality of applications in an often very visible way. (it was good in it's time) Case and point the new ASP.net core doesn't include web forms anymore. So web forms may still be viable for a project, but as a technology it's being left behind by advances in other technology. Now vb.net isn't obsolete, rather it's getting second citizen treatment. Where webforms has been dropped in ASP.net core with no intention of later inclusion, vb.net will be supported... Later. Again you can still use webforns, but it is absolutely obsolete in the sense it's no longer being updated in a meaningful way and has been eclipsed by more modern technology. (even more evident that it's creator Microsoft is pushing the new version of it's web tech sans web forms)
I agree that Angular frontend with WebApi is a great tool chain if you have experience and are familiar with both. It's just not a great learning mechanism for someone who doesn't even know which project type to select to start their first website.
haha you upvoted yourself from an alt, this thread is old like a dinosaur yet instantly you got an upvote. wow, you are really some Microsoft paid shill, I will post this on forums, let us laugh at you 
&gt; Sorry for any confusion... or maybe you where not confused but wanted to call out my mistake? I'm not confused at all, so it sounded like jibberish to me.
Excuse me? I'm sorry but I don't work for MS, I only use Azure. Laugh all you want since I have 1 point... That is my post, no up vote there, learn how to use reddit.
I found this video from a recent edition of [C# Digest](http://csharpdigest.net/) to be helpful: http://www.troyhunt.com/2016/03/understanding-csrf-video-tutorial.html?m=1
buddy, no need for BS here, you upvoted yourself from another account 
The Model shouldn't have any logic in it, its a *model*, which implies its simply a container. 
The word "model" suggests that it in fact does have logic. Otherwise it is called a "DTO".
&gt; but I can try to clear it up if you really care. Yeah, but I think I'll pass on that from you, thanks.
I do hope so. Ever since the death of silverlight c# in the browser has been a dream
WebAPI 2.X --- [asp.net](http://www.asp.net/web-api)
When did everyone in this sub become such jerks. I thought we were all here to get better not rag on our peers.
Okay it sounds like a Service Layer is what I'm needing. Is this basically what I did when creating a Helper class &amp; putting a function in there? Or is a Service Layer more complicated than just a class &amp; functions? Is [this example](https://www.asp.net/mvc/overview/older-versions-1/models-data/validating-with-a-service-layer-cs) from a past MVC version still relevant? It shows using interfaces, which I think I understand why to use those now.
It is access apps in 2016. If it created source code I would be a lot more interested. 
It seems like a little more than that. Though I get what you're saying. The team did an AMA [here](https://www.reddit.com/r/AZURE/comments/3w0r13/were_the_microsoft_powerapps_engineering_team_ama/) awhile back. It connects natively with Dynamics CRM, SalesForce, and maybe some ERPs. And it has work flows. So it sounds decent. But I wonder if you can use it to build an actual app.
Thank you! I think understand now &amp; will start putting this to use. One last question: Is there a certain folder in the application that I should be placing the Services in? Or should I make a new "Services" folder under the Project? It looks like the asp.net site example I listed above puts it under the "Models" folder. 
&gt;Your persistence model consists of your database tables, etc. Yes, that's part of the persistence model. So are the EF classes you either generate from the DB or use to generate the DB. You'll find as you start to work on non-trivial problems that most of the time the object graph that makes the problem easiest to solve isn't the best representation of the data for persistence (Google database normalization for just one example of why that can be the case). So at some point in your application you'll need to "translate" between the data structure you're using for persistence and the data structure you're using in your domain. You can do this without introducing persistence model classes, by just writing the SQL for example, but EF lets you use POCOs and LINQ to manipulate the database instead. Those POCOs are part of your persistence model. It's not about making things primitive, it's about calling things the correct name.
If they made it easier to connect to custom APIs I might be interested. For me I use a Mortgage System that I need to wrap a REST API around it. If I have that and I could easily call methods to get data maybe there would be some use case.. But like all these these I end up wanting specific things and end up doing custom code.. and in this case that would be figuring out Xamerin or Cordava (javascript!! :() 
I've worked on about dozen MVC projects over the last 4 years, and what I do evolves every time. This by no means "the standard," other people will do things differently. Currently my convention is have 4 solutions in the project. * Project.Common - A class library that has everything common to all projects. Enums, extensions, helpers. References no other (internal) project. * Project.Data - A class library with the Entity Framework context (and the entity models). References Project.Common. * Project.Service - A class library that is heart of the application. All business logic goes there. Has it's own models that get passed to Project.Web (which then get mapped to viewModels) References Project.Common and Project.Data. * Project.Web - An MVC project. Handles all the UI, leaves the thinking to Service. References Project.Common and Project.Service. Shouldn't reference Project.Data because it shouldn't be handling the actual entity models. This is a contrived example of how (I think) the models should be at each layer. public class User { [Key] [DatabaseGenerated(DatabaseGeneratedOption.None)] public int UserId { get; set; } [Percentage] //Custom definition of the column precision in SQL public decimal EquityPercentage { get; set; } public decimal CurrentAssets { get; set; } [Required] [StringLength(2)] public string CreditRating { get; set; } } public class UserModel { public int UserId { get; set; } public decimal EquityPercentage { get; set; } public decimal CurrentAssets { get; set; } [StringLength(2)] public string CreditRating { get; set; } //The database doesn't know about this value, and the calculation is business logic, so it goes in the service layer. public decimal EquityAmount =&gt; (CurrentAssets * EquityPercentage); } public class UserViewModel { //This view doesn't use UserId, CurrentAssets [DisplayName("Equity Percentage")] [DisplayFormat(DataFormatString = "{0:###.##}", ApplyFormatInEditMode = true)] public decimal EquityPercentage { get; set; } [DisplayName("Current Assets")] [DisplayFormat(DataFormatString = "{0:C2}", ApplyFormatInEditMode = true)] public decimal CurrentAssets { get; set; } public string CreditRating { get; set; } [DisplayName("Equity Amount")] [DisplayFormat(DataFormatString = "{0:C2}", ApplyFormatInEditMode = true)] public decimal EquityAmount } 
I know. I'm a sole developer at a company that does not understand technology so if I do anything that requires the old people above me to do something I am better off findg another way. 
Yeah, I understand that. But for what it's worth, it looks like you maybe can create full functioning apps. *Maybe*. I can't tell if you can fully customize the UI and change things based on data, but you can create REST APIs and PowerApps will consume that API. So you can do all of your business logic and what not in a custom API. If the UI can be customized on the fly, I think it's a viable business application option.
If you put your public interfaces in project.common and implement IoC then project.service would not need to reference project.data directly. Same with project.web referencing project.service directly. Let your DI container handle delivering implementations. 
Hi noelster I'm the lead developer for .Net Report Builder. I'm glad that you found our ad hoc report building solution a good example of what you are looking for. Our solution is specifically designed with SaaS providers in mind, and is definitely meant for customers to create their own report. It is not free of charge, please see pricing here https://dotnetreport.com/home/pricing. As for finding us, were based in Houston, TX and you can easily contact us. https://dotnetreport.com/Home/Contact. I hope you would contact us for more details. If you have not found a solution yet, we'd love to be your solution provider. Thanks -Razi
i recommend a SPA instead, angular for front end and wep api for services. 
That's very true, especially the point about unit testing.
So I can't tell you about the membership stuff but far as MVC vs we forms goes here are a few thoughts. With web forms the MVC pattern is executed multiple times to render a page. The code behind is the controller the view is the ascx or aspx file and the model is the data that you bind to it. With the.net MVC pattern the controller only gets executed once and the models and views are bound to multiple partials and layouts. The advantage of Web forms is that the codebehind has the exact same file name as the views/controls. Additionally, each codebehind is well scoped to affect only the control associated with it. This allows you to have better separation of concerns but at the same time difficult to pass related data between controls without a shared abstraction layer. MVC on the other hand has a consistent "convention over Configuration" paradigm. If you understand the pattern it will be consistent throughout the application. Secondly MVC supports the use of the razor templating engine. It makes it much easier to write clear concise markup and bind your data from the controller in the view. It also has a wicked number of helpers that will turn c# function directly into code.
Since it doesn't seem "critical" and presumably not a very large or particularly complex web app, I'd recommend just rewriting it. I think you'll have a much easier time learning MVC if you're rewriting it from a design and architectural perspective rather than just doing what is necessary to port the application, e.g. how does membership work in MVC 6/vNext vs. Web Forms, rather than "ok how do I shove my old data into this new framework so this will work" Hell I'd go full out and use ASP.NET Core. Might as well learn two things while you're at it. Try a few different prototypes to get a feel for how MVC works.
Rewrite it. It'll be a much cleaner experience and better result. 
I'd take Dapper over a full-blown ORM any day. Keeps you in control of the queries made to the database, while removing the overhead from using the "low-level" ADO.NET-library. Besides, I have yet to see an OR-mapped domain model which didn't spiral out of control because of the appearance of navigability. Perhaps not the ORM library's fault, but sometimes it seems that a powerful tool can make developers stop thinking. With Dapper I load only the data I need when I need it, in the format most efficient for the use case and I let the database do the heavy lifting for me.
I just did the sql membership to identity switch at work myself and to be honest it was kindof a pain but that was for a very complex site and this sounds like its pretty simple. But since you are throwing the upgrade to MVC in the mix as well, I would just start over and migrate the data when you are done.
Well spoiler it's not if it's when, and the when is on the horizon. Current plan is we'll start with two courses coming out on ASP.NET Core MVC and I already was filmed for the first one :) That said, it'll a bit longer creating course takes quite a bit of time :)
Use base.X if you want to call a method from the class you're inheriting from. That's all there is to it.
&gt;With Dapper I load only the data I need when I need it, in the format most efficient for the use case and I let the database do the heavy lifting for me. I am moving slowly (or at least critical queries) over to Dapper and enjoy it as well. However, I think it should be pointed out that every thing you just said here can be done by Entity Framework for those evaluating a product for the data layer. 1. Control of Queries: var db = new MyEntities(); db.Database.ExecuteSqlCommand(sql string and some other parameters); 2. Use only what you need var stuff = db.Users.Include(x=&gt;x.UserVehicles).Where(x=&gt;x.Active).Select(x=&gt;new {x.Id, x.FirstName, x.LastName, x.UserVehicles.Count}).ToList(); This will only query for the items in the select list. ORMs get many people in trouble because the performance difference between what I posted and this (slight movement of the .ToList()) var stuff = db.Users.Include(x=&gt;x.UserVehicles).Where(x=&gt;x.Active).ToList().Select(x=&gt;new {x.Id, x.FirstName, x.LastName, x.UserVehicles.Count}); could potentially be orders of magnitudes slower. EF (and other ORMs) are great for quick development out of the box and for more "Read" intensive sites. For critical SQL processing (or doing several concurrent queries), then Dapper and ADO are definitely the way to go.
I'd say focus on learning the language thoroughly before you worry about learning any other big-picture stuff. I'd get "C# 6.0 in a Nutshell: The Definitive Reference". Study the first few chapters, and thumb through some of the later chapters. Oh, and learn collections and linq.
.net has a role based permission ingredients model built in. Got to dig around in the docks but layout should investigate role and membership providers. Finally the template for MVC applications will actually boilerplate out for you the user creation process that you can read into 
I agree whole heartedly it's how I learned c# it's an excellent book. They did come out with c# 7 book recently though 
If it's hosted by your company, you can always use Active Directory for authentication.
Nusbio (G1) use the FTDI FT231X. Nusbio supports the protocol I2C and SPI (You can also use as a UART). In SPI mode Nusbio transfer speed is 10Kb/s. With some device like EEPROM or LED Strip APA 102 the transfer can go up to 20 Kb/s. NUsbio (G2) coming in 2016 will support 3 Mb/s in SPI. Arduino + Serial Port (UART) is limited to 13Kb/s on Windows. 
I love IQueryable&lt;T&gt;, it lets you combine multiple (single responsibility) repositories into single (optimized) SQL queries, at the service/domain layer (the layer above the repository layer, orchestrating complexity and logic). Look closer into that. This is why I stick with Entity Framework -- I really like using LINQ and IQueryable and avoiding the need for stored procedures (for most cases).
I found in those cases, sometimes I'll buy the license if it isn't toooo expensive, use the tools I want, then prove how much more productive I've have been, whenever. Then, when they are happy, tell them you bought the license and their guilt is enough to reimburse you. Its kinda taking a contractor approach to employment.
I already pay for my own VMs in Azure to prototype some ideas since it is less frustrating spending $10 and getting things done than sitting around doing nothing because it takes a month to get a decision made Also, for selfish reason I want to keep learning new things to keep my value up as a dev. Can't debug VB6 apps all my life 
I found [this](https://azure.microsoft.com/en-us/documentation/articles/iot-solution-build-system/) awesome demo Microsoft built for Build 2016. Its seems to be magically architected for Azure.
Any caching going on?
The "~" is supposed to resolve it to the root of the site. ".." Is supposed to just go to the level up I think
are the images added in your project, check your .csproj files. If they aren't, Right-Click -&gt; Add Existing Item and add those files. Make sure they are copied over on deployment, i.e. set copy local to true if it isn't already.
You install Visual Studio and that's about it. Visual Studio 2015 Community Edition is free, so that's a good starting point. If you want a "scratchpad" type of thing, look into LINQPad.
.Net core brings a lot of options. If you are devving in 4.x vs2015 is it. You can add task runners within vs for asset compilation. .Net core you can use the cli to run kestrel in dev which does not recompile on class changes.
Can u not use something like collectionassert.areequal? Not sure if I have the right keyword. Sorry I am on vacation. Lol
I missed the difference tree. That's nice. I will see if I can use this in my integration test. 
No, Visual Studio is Windows only.
I can't recommend enough [Serenity](https://github.com/volkanceylan/Serenity). It's a FOSS MVC-based template that has a lot of outstanding features, is extremely well-documented, the author provides a complete guide and tutorial that introduces many of the concepts for using the platform, and he has a basic authentication/authorization system provided as well. Check it out, it's awesome and really professional.
Or VMS set up. But I guess docker is better
You can export the DB as an SQL file, and specify the target version in the settings.
The "./" does nothing too. Thanks anyway.
Holy Shit this is exactly to what im looking for
Back everything up, do a clean install! You will thank me later.
Yes, I have done a clean install. Win10 has broken IE.
You can use the import/export wizard in SSMS, but create your schema on the destination instance **before** you do this ([otherwise you may be surprised](https://therestisjustcode.wordpress.com/2015/11/10/dont-trust-the-wizard/)). But you also have to watch out that you aren't using features in 2014 that don't exist in 2008R2 (Sequence objects, ColumnStore indexes, new datatypes).
Yeah it's awesome, I've been developing an app for work that I originally (stupidly) tried to develop on my own using React, Redux, Express, Mongoose and MongoDB. This destroyed my attempts so thoroughly that I will likely never again try to use Universal JavaScript if I can avoid it. 
I'll give it a go when i am home
I did 2014 to 2008 as well but just used backup restoration ssms without an issue. My project was just tables at the time.
Why?
Agreed. My first Angular2 app was built directly in wwwroot and it worked out just fine. My current project is split and gulped into wwwroot, which just feels cleaner to me. I don't think there were any real functional differences though.
To top off what tweakdev said, wwwroot ideally NOT have files that you work off of. wwwroot is the "bin" of your web project, it's where your built files go. What you want is a tool like gulp that transfers all your files from your unbuilt folder. Here is an example of how mine looks: https://gyazo.com/e7787502e362d48c0c83122123a463f6 I then have a gulp tasks to: * move all my angular JS files into one file called app.js, minify, and move it to wwwroot * move all of my bower dependancies such as angular, jquery, bootstrap, etc to a file called include.js in wwwroot * move my .html files (or jade in my case) to wwwroot/views, and for index.html to just wwwroot/ * move my .sass files into .css files and put them in wwwroot/site.css Then set up one big gulp task called build that does ALL of these seperate tasks (js, html, css) and puts them all in wwwroot. This makes it so that wwwroot can be 100% deleted, and the build task can be re-run to put everything back. The reason you do this is a few reasons: * You don't commit wwwroot to git. If anyone needs to pull it, they grab it and build it themselves * You can use tools like Babel to use the next version of javascript, and make your JS task downconvert it to current javascript. * Like I said above, you can use SASS and convert it to normal CSS * You can use a HTML Template like Jade which converts into normal HTML * You auto minify your JS/CSS/HTML for production At the end of the day, you CAN just straight up work in wwwroot, but it is not the intended use. Learning gulp may take awhile, but trust me, it's worth it a pretty great. Let me know if you have any questions.
I'm not sure the best practice, but my root has a client folder and a server folder, and then all the loose files like gulpfile, package for npm, project for ASPNET, bower.Json, startup.Cs, etc. The server folder has a folder for controllers, models, filters, etc. 
you're right my mistake. 
Yeah that sounds good. Thanks for the help!
I haven't used this, but I have written a code generator for myself to generate standard implementations for IEquatable and generate WCF DTOs that clients can't mutate (this is super-boilerplatey in VB.NET).
Can anyone share a good gulp file for an asp.net project with an angular front end, that uses bower for js libraries? I have yet to find a decent example.
Apologies, thought maybe there was some specific .NET process to go through with this. Thanks for the link.
I tried webpack + npm for libraries, with Visual Studio Code for front-end and it was best experience so far for SPA.
Not particularly, no. I'm just getting started with this, and I've got a project in mind that I'd like to do to build my skills - which involved using the resources needed with this question. 
You want to provide a facility for people to search amazon for books, leave reviews, and buy the products? There's already a site with exactly that functionality, you know? It's pretty well known too. You're going to need to have a pretty awesome USP to convince folk to use your site instead.
Asking the question 'why' as a response to any publication is defensible. With all the code generators out there (in this case), why should I spend time looking at this one? Why spend time writing a code generator when there are so many out there? Regardless of the answer, 'why' is a reasonable question, which I enjoy answers to. Just making something and putting it out there may not get you a participation star. Be prepared to answer questions.
It's less of a site I hope to profit from and more of a personal project to learn the technology and get some experience in. Also, it's geared as a 'book recommendation' website, not an online bookstore where you're actually purchasing the books. I constantly see people all over the place asking 'what are some good books for &lt;insert any subject here&gt;', and the results are spread across hundreds of sites. Amazon doesn't really have a very good solution for that, in my opinion. The hope is to create a site that can be used as an aggregator for those kinds of questions, so users can make their own lists that others can view. I'm not expecting mass adoption, like I said - just a thing for me to do and see what I can do. I'll be satisfied by just having completed it.
Why handlebars and not T4 ? cool btw
This [video](https://www.youtube.com/watch?v=2er6mMglRVg) uses grunt + bower for AngularJs/.NET WebApi project.
If you're sticking with Angular 1.0 and it's just a school project, why are you using ASP.net Core (What you called ASP.net 5 or vNext)? It's not finished yet, it's currently on RC1 (As ASP.net 5) and RC2 is due out any day (As ASP.net core 1.0) - with RTM likely sometime late this year.
deleted
Well, quite frankly, because I can.
All the code generators i've seen out there are specific for a particular platform or language and others are not free. This one can be used for any language you decide to develop in. The difference between this and others Code Gen are: 1-Open source 2-Cross Platform(done in JVM using Scala) 3-Highly Configurable through json configuration file. 4-Use HandleBar templates to generate code. I develop for java,.net and scala but always need to reuse existing patterns for my projects. Think this as way of doing the same thing with less effort. 
You can try this to generate DTOs, Repository Pattern classes etc. I did it perfectly. 
OSS consumers don't change anything. The Java ecosystem that is oh so vibrant wouldn't be without major investment of development work from Red Hat, IBM, Pivotal and Google, and without the OSS release of closed source projects from Facebook, LinkedIn, and Twitter. Microsoft seems to finally understand that, but .Net Core may be too little too late to get similar investment. Worse, it may very well fracture their existing sparse ecosystem where some projects just decide not to migrate. Then it becomes difficult to remember what OSS you have available depending on what deployment platform you have to target, and you just hope and pray that the target doesn't change mid-project. 
Too much coupling going on there, and way too much logic in the service provider configuration for my tastes. This looks more like a case for [resource-based authorization](https://docs.asp.net/en/latest/security/authorization/resourcebased.html) than (ab)using the dependency injection mechanism.
There are datatypes which SQL Server 2014 supports which 2008 doesn't support, so this wouldn't work. And much of the data if you changed it to a different data type wouldn't *look* right when viewing it in the database And I just realized that I basically just said what you said so....I'm dumb. My bad Edit: the realization that I can't read more than a tweet
Thanks for all this, it's a great starting point! Going to get started right away.
Fair point. That being said this was meant to be an example of providing different implementations of services based on the request, it is not only applicable for the request's identity. You can imagine providing different service implementations based on different parameters. For example, you could put a "test-mode" header into the request, which would cause the application to use fake/canned implementations of services. Perhaps there's a better approach for something like that, what's your thoughts?
If you're using Chrome, look at the network tab in dev tools. Click on the request and you can see the request headers and body
It seems that the blob is a streaming object and need to be streamed in to the server to download it. 
Is the form encoded?
not sure. I'm still wrapping myhead about how to send the blob data using jQuery. 
This can end up putting a bunch of extra login in the factory method. A method I prefer is just to introduce an IControlPanelFactory with a Create method which has that factory logic in it.
I'd hesitate to give a generic answer to that. It all depends on what you are doing. Thus far I haven't ever really felt the need to substitute services based on the request data. My "test mode" is usually a unit test project. Were I to want a test mode that is more end-to-end, in ASP.NET Core I'd probably look into launching Kestrel from the test project, and setting up a different configuration there. Having the dependency graph change at runtime seems like a recipe for hard-to-debug errors, which is why I'd limit such decision making to a higher level of abstraction (e.g. the auth framework I linked to before). Your post does a good job of describing _how_ you would do something like that. However, if someone asked me that same question, I'd try to drill down to the _why_ behind the question. It kind of sounds like a case of "how do I pound in this nail using the sole of my shoe?" -- and the obvious answer is "use a hammer instead." :) Of course, software development is very prone to differences in opinion. That's why I specifically said "for my tastes" in my original comment.
https://www.visualstudio.com/products/how-to-buy-vs Based on the above site it appears that buying a monthly cloud subscription (Pro or Enterprise) provides no subscriber benefits. Buying annually gives you the same subscriber benefits as a standard license with MSDN subscription. 
You run your own startup in the side, right? Yeah of course you do! Get a Bizspark account!
It doesn't matter at all. I use MySQL with Entity Framework all the time. There used to be some quirks in the past, but these seem to be fixed by now.
JavaScript must be feeling like a pampered princess today.
No problem with MySQL. I'm currently migrating an application from MSSQL to MySQL as the website now runs on Linux with Mono. MySQL is pretty well supported although Postgres seems to be in vogue these days.
That's kind of what I was trying to get at, but I think /u/Chastter's response pretty much says why - because he can.
I agree with all of that. This isn't something I'd overuse, just a tool in the toolkit. You're probably right about asking why they want to do this in the first place, likely a better alternative like you mentioned. I might have to revisit the control panel example, maybe not the best for demonstrating func service registration. Thanks for your feedback.
I like that technique, I've made heavy use of it with Spring in Java, the factory gets used directly by the framework. Pretty slick.
&gt; 1) What's the main differences between Asp.Net MVC and Html5, Css3, Javascript Node Ang etc (the open source stack) for developing websites ? I mean can you do the exact same things in both ? Are you fucking shitting me? You stopped putting as much effort into your trolling as you used to.
Not totally unreasonable. Core is more production ready than Angular 2 is, having trouble with Angular 2 on IE at the moment, even with the shims using beta8
Your posting history OP... how are you so dedicated?
I will be messaging you on [**2016-04-13 22:27:00 UTC**](http://www.wolframalpha.com/input/?i=2016-04-13 22:27:00 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/dotnet/comments/4eij6i/microsoft_shops_and_working_remotely/d20f58m) [**CLICK THIS LINK**](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[https://www.reddit.com/r/dotnet/comments/4eij6i/microsoft_shops_and_working_remotely/d20f58m]%0A%0ARemindMe! 1 day ) to send a PM to also be reminded and to reduce spam. ^(Parent commenter can ) [^(delete this message to hide from others.)](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Delete Comment&amp;message=Delete! d20f5kr) _____ |[^([FAQs])](http://www.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^([Custom])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=Reminder&amp;message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^([Your Reminders])](http://www.reddit.com/message/compose/?to=RemindMeBot&amp;subject=List Of Reminders&amp;message=MyReminders!)|[^([Feedback])](http://www.reddit.com/message/compose/?to=RemindMeBotWrangler&amp;subject=Feedback)|[^([Code])](https://github.com/SIlver--/remindmebot-reddit) |-|-|-|-|-|
I am the lead developer for my company. We are a 100% .NET shop. I now work from home 100% of the time after moving out of state. Everyone on my team gets two days a week to work from home and we have one other person that is at home 100% after moving to another city. We heavily rely on Skype for business for video chat and Team Foundation Server for source control.
I work for a company which started supporting remote workers on our Ruby side because we were unable to find developers locally. It worked well enough that we have been pivoting to a remote 1st company. Our .NET team is now mostly remote and almost all our new hires across all teams have been remote as well.
I'm a c# developer and I work 100% from home (the whole company does).
There is a correlation and the reasons are quite clear. .NET and Java are pretty often chosen by corporate companies which less often allow remote work. Of course it's not a rule and also those stacks don't limit you to corporations so you should be able to find something for you.
I'm a .Net developer and I work 100% from home for a small company (teeny tiny). My previous job, at a large multinational corp, allowed one day a week of working from home, but that's only because the division I worked in was previously a startup that had been acquired and they kept that policy to help prevent a mass exodus. The rest of the company however, did not allow for work from home days at all.
Yup. [Dapper](https://github.com/StackExchange/dapper-dot-net) and [NPoco](https://github.com/schotime/NPoco) work well with MySQL as well.
I work from home and am a .net guy.
If you have access to a MSDN subscription either paid or provided by BizSpark you don't need to pay for any licenses. This is a primary reason for MSDN subscription, testing your software on a wide spectrum of configurations. A final option is using Azure Virtual Machines for a few minutes or few hours at a time and shut them off entirely so you only pay a few bucks as necessary. Regarding the scaling, if you do it yourself. You need to build your software such that it dynamically renders the presentation based on environmental settings. It's possible you might be able to nail down the standard presentation and then only build 1 or 2 adaptations that you render instead as opposed to a fully dynamic UI
Hello, after some months of development I think is time to announce LiveCharts, this library was built because there are no free and modern charting libraries for .net out there, The Library is really easy to use, you only need to create an array and the chart will auto update when you add/remove values to this array. I Hope you find it useful and give it a try, Thanks!
Depends on the team really. I think it's fine for dev teams that are entirely remote but when you have a team that's all on site and 1 member is full time remote, it causes problems.
Like larger, enterprise companies. It's much more likely a huge shop is going to be tighter about stuff like everyone working from the office. A lot of times start ups or smaller shops have less of that strict structure so having devs working remotely is more common.
I know many companies who are .Net shops that work remotely. However, these days, if you are a web developer, the term "Microsoft Shop" can be thrown out the window. I know T-SQL, C#, ASP.Net MVC, and Web API extensively (middle tier and database layer). I have worked for many years with TFS. At one point I was three separate things, the Lead SQL developer (for all reviews of anything being done to the database), the C# code reviewer for all check-ins, and the TFS guy who not only had to install it back in the day where that was a royal PITA, but also had to deal with branching, merging, shelving, conflict issues, build automation, unit test reviews, and on and on. However, most of these companies want "full stack", where you can take your Microsoft knowledge and *throw it out the window* for the front-end, and start talking about a million other things during your interview that have nothing to with Microsoft outside of rendering properly in their browsers. Grunt/Gulp npm, require.js, browserify, es6, compilers, transpilers (yes that's a word), jasmine/mocha chai/sinon, react/angular/ember, closures, prototypes ... it goes on and on (and *on*).
No work from home allowed in my .Net Shop with 50+ devs. Government tho..
just install windows on your VM using your PC's license but never activate it. After 30 days when it won't boot anymore without activation just reinstall it. Built a batch file that fetches all your crucial installs (.Net, tools you need in you VM) from a network share -&gt; resetup of VM will be mostly automatic.
ASP.NET Core 1 will now be the name of the framework that includes MVC and WebAPI. There's no support for SignalR or WebPages there, as well as no support for F# or VB. Source - http://www.hanselman.com/blog/ASPNET5IsDeadIntroducingASPNETCore10AndNETCore10.aspx
I work as the only C# developer for a company that's 4-5 hours away in timezones and there are zero problems with this. I think I had more problems with mixed local/remote teams where people don't communicate online all the time so you miss out on a lot of information because they don't add you over Skype in a lot of meetings, don't share project updates on Slack and so on. But that's a more generic remote worker's problem. A good LinkedIn profile really helps. Got some leads via Hacker News but they were pretty bad (a lot of bucket shot "can you give me a price on this 40 page document please" people). Mostly it's friends, former colleagues or happy customers that bring the leads.
Does [this](http://dailydotnettips.com/2016/02/05/enabling-live-xaml-debugging-in-visual-studio/) help any?
I work fulltime in a MS Shop and work remotely 
VS2014? There is a 2013 and a 2015.
The only way I know to do this that allows any number of custom fields of any data type is the [EAV model](https://en.wikipedia.org/wiki/Entity%E2%80%93attribute%E2%80%93value_model). 
nope it is not running code behind and you can't interact with it. For exemple, if I style a button to become blue when hovered, only wa to verify this is to run the app, you can't quickly check this with designer.
Yes that's very close to what I want. But it's in next version of VS so it'l take some time to come.
I work for one of Canada's big three telecoms, developing in .NET, and I work remotely 100% of the time due to moving to another city with my girlfriend and the importance of the project we are working on. We use Slack and Hangouts to communicate throughout the day.
Your use of enterprise means some form of Database, this choice will influence your design but most importantly is understanding the trade offs of certain approaches (for which there are many). The common ways of doing something like this are: BigTable style (shove everything into one table with many predefined columns that are used to store the custom fields). Simple and easy querying but can lead to some performance issues if not careful (tons of NULLs everywhere and poor indexing if the table stores different types of objects since the data isn't consistent per field). EAV style (In its simplest form you have one Table to store entities and one table to store a Key:Value pair). In more complex forms you have a table per field type, table per entity type. In extreme forms you have a table per field. Most flexible (theoretically infinitely flexible) but a management nightmare and complex querying. JSON/XML single column storage. Just store all custom fields in a specific XML/JSON column. Some databases are better suited for this and will support querying on the fields but others won't and your just stuck with one big data blob. The best solution if querying and searching isn't a required feature on the custom data fields. NoSQL/Document Databases. Built to be able to store arbitrary data so it fits the problem and is the ideal solution if a Key:Value store is really all you need. If managing the schema at the application level is easy this is a good solution. The problem with this type of design is always "How do I handle and orginize the metadata which defines the custom schema at runtime" and this is a very hard problem because in no time you find yourself designing an entire platform. Most ERP/CRM (SalesForce/Netsuite/etc) systems allow for a lot of customization without programming but the UIs and concepts for doing so are often so complex or non intuitive that no one uses them without paying consultants huge amounts of money. If all you need to do is accept custom data and view the custom data (but not query on it or edit it regularly) then a JSON blob approach is certainly the best and easiest. 
Have you tried kaxaml?
You can use the singleton pattern for this. 
Which version of EF? I believe that EF7 is not complete yet, but is dropping .edmx
Are you able to deserialise the XML into some kind of class? If so you can just insert the values as normal into a DB. Do you have to keep them as XML?
With such a big file they may have to lazily read the XML. 
That's a bit vague... I can only guess that you are running the project from a folder somewhere within your Users directory, and that IIS Express can't get the relevant permissions to access your directory and run everything. Try re-mapping your Tfs to a folder outside of your USER space ( C:\tfs\ for example) , or better still, install the full version of IIS which will give you more control. Can only guess though I'm afraid, might be totally wrong. Sorry, I don't use IIS express, and only have limited experience of Vs2015
Iis folder rights are your culprit, it's unable to build in the folder. 
Before my current job I was a contractor and used C# .NET working remote. My current job it is not as common, but we are allowed to work remote sometimes. I have not been there long enough to know what their tolerance level is for that.
Indeed. But the goal here is to limit duplicate copies of the file in memory, so we would expect the file to exist in memory on each machine anyway. This becomes more of an issue when it comes to things like session state, which should be accessible across nodes.
Run VS2015 as Administrator and see if you encounter the same issue, I've had a do this in the past. 
When it's ready, I guess. I'm not overly excited, it's going to be a good year anyway between it being released and them ironing out all of the kinks. I don't think it would be wise to use whatever ends up being version 1.0 for anything serious.
Not sure about VSO, but we publish symbols from an on-prem TFS server to an on-prem symbol server. I don't understand why you say it's not supported.
RC 2 by end of April RTM target is end of summer Source Jeff fritz talk on Saturday
Have you considered just using Azure? 
Depending on what's included in the project, it might be having some build issues because it's not checked out too (e.g. trying to overwrite something during build that's not checked out) . /u/bradaffleck has anyone else on your team been able to build and run this correctly? I'd ensure your TFS workspace is in a neutral location and that visual studio is running as administrator and let us know how that works out for you.
Doesn't the class need to be static as well?
Our company is 100% .NET and I've been WFH 7 years now and almost all our employees also WFH whenever they want unless they have to be on the client site (this matters more for Federal). Since I don't live anywhere near my client this means I never go in.
Azure has a free tier. Also called the "Shared" tier. 
Do any cheap tiers include SQL server?
Agreed, I don't fully understand all the breaking changes from RC1 &gt; RC2 but reading through the migration notes made it clear it's a lot broader than just find &amp; replace naming syntax.
Data and hosting is extremely cheap, if not free. Plus if you need to expand, it's just a click of a button
There must be developers out there making production apps with RC1... right? I started looking into RC1 for an upcoming project (single developer, greenfield, December deadline). The allure of using new shiny tools and learning opportunity is tempting. On the other hand i'm slightly terrified of risk that something isn't supported or finding a critical bug. Maybe my expectations were set wrong when RC1 came out Microsoft said "The goal is for RC1 to be a stable and production ready release." &amp; it would be supported in production environments. 
I've heard of developers using beta8, and perhaps even earlier, for production. This was from developers at consultancy that likes to be bleeding edge though.
I guess I'm confused why you wouldn't cache this and then load it only when the cache was empty. 
Actually, this is probably the best way to go, awesome recommendation 
I honestly do everything in my power to not use dynamics so my knowledge is limited. Bit of the debugger and inspector allow you to view this data, then I don't see why not. I guess my bigger question is whether or not MVC knows how to serialize to a dynamic object. I would guess not?
What is "end of summer" for those of us who do not live in the US?
I primarily use Azure at the moment and would recommend it; just keep an eye on the bill when you're starting to make sure you're in the expected ballpark (same goes for any cloud service, AWS, etc.). ASPnix is a shared windows hosting option, although I've only used them for mail service so I don't have any complaints regarding support/billing/uptime.
You mean using 'memcache'?
so will standard asp.net continue to develop after asp.net core 1.0 is released? or asp.net 4.6 will be the last major version?
Yea, RC1 should have been retroactively renamed "beta 9" or something 
Yes my team has been able to build and run successfully, I am just joining the project so I have been trying to get my local configured correctly. I will try to ensure I am running the application as an admin and that their are no VS configuration conflicts that are saying otherwise. Thanks so much for the advise!!!!
Could you explain a bit more? What type of folder right do I need to grant?
Now that I double checked the link, it only mentions xaml debugging tools which are live visual tree and live property change. This more for Xaml debug than creating UIs. In next version of VS, for now called VS 15 (and not 2015) there's a feature where you can edit xaml file while the app is running and xaml changes will reflect in real time in the running app.
Ugh, I can't seem to google the right words since I don't have the error in front of me, but found a couple other articles that might hit close for you; http://forums.iis.net/t/1200915.aspx?IIS+express+failed+to+register+url+access+is+denied But yeah, when I got a new work laptop I ran into this problem a lot, it was due to me being on a local account and not on a domain admin account with more access strewn throughout. Prior to moving to an admin account just to make life easier, I did end up granting rights to EVERYONE or IIS_USER to specific sets of folders so that IIS Express could create and host the URL. 
This .NET Core project seems like a badly managed one. Every couple of months they are changing their minds of what they want to do. This does not inspire confidence in the future. They are doing amazing technically. But compared to other tech stacks they look like they're lost, and it has been like that for some time. I think they're hurting the .NET developers with this a lot; my guess is that in the last year there has been too many projects were developers couldn't decide if they should start using the new promised dnx (which is never coming it seems), or continue with .net framework (which is dead). Remember they released RC1 as fit to production !
What in the world makes you say .net framework is dead? That's asinine. No one has said this. You can host the new ASP.NET stuff using the complete framework on Windows. This is a confusing time, with lots of change right now. You are not helping by putting this incorrect information out there. 
GOT IT! Thanks so much, this was exactly the problem I was running into!!!
Cool thanks. I haven't put EF through it's paces, just basic stuff, I've wondered about how well it does with MySQL specifically. Figured it'd to its job and abstract the differences away and do just fine. 
It's prerelease. If they do this past 1.0, I will totally agree with you, but it seems they are doing most of this BECAUSE they are aware they won't get away with it past 1.0. 
Your mad because the beta and release candidate's aren't production ready? wtf...
Actually, the RC1 was released with a "Go Live" license, meaning they will support it in production.
Ah, my bad. 
Sorry, bad formatting.. fixed it. Anyway... when the page first loads, 50 is the number (for example).. I add an attribute to the button named somevalue and assign the 50. When the button is clicked the value in the attribute is a newly created number (not 50) I wanted the 50 from before.. 
In Page_Load, you need to check the Page.IsPostback() method. Do all of your page setup in there... if(!Page.IsPostBack()) { //do initialisation logic here } else { //User has initiated a postback, the delegate for btnButton.Click will be called after this. }
Ya but it doesn't mean there won't be breaking changes.
Hey, create your controls in either Page.Init or Page.PreInit - I can't recall which, but a quick Google will help. You need to create controls early in the page life cycle, so that they get their viewstate restored.
Set breakpoints, run it , should be fairly simple to debug. As I alluded to in my original reply, putting the click handler as a fully formed function outside of the main method may help. You're quite possibly evaluating the value when you apply the delegate, rather than when the event actually happens..... Debugging with breakpoints will show you what's really happening though. One breakpoint at the top, one inside the handler. Run.
You can't go wrong with [msdn pages](https://msdn.microsoft.com/en-us/windows/uwp/get-started/universal-application-platform-guide)
&gt; you got to type it out Tab completion.
They should not have named these RC1 and RC2. They have done fantastic work in both, but they should have been beta versions. I really like the performance in RC2 and forward. I made a quick hello world mvc app in RC2 and .NET 4.6 (release and debug false). Tested it against 4 worker threads. RC2 &amp; .NET 4.6: http://i.imgur.com/BunaKOo.png
Don't forget to lock on initialization, especially if you have a lot of traffic. [Double checked locking](http://stackoverflow.com/questions/1964731/the-need-for-volatile-modifier-in-double-checked-locking-in-net/1964832#1964832) with a volatile variable should work fine.
Good call. Thanks!
Winity. You can get their professional plan for 13$ per month using a coupon and it's unlikely you can find anything to beat it (1 xeon core, 2GB ram, 75Gb SSD, dedicated IP, 2 TB traffic, Windows server 2012).
It has been my experience that if there's weirdness you should start looking elsewhere.
Seems youre on the right track
Automation, for one. Plus, tools can develop faster without the need of a unified, friendly interface. 
Here's some feedback from some ERP system's I've been reviewing lately. Prophet 21 and Microsoft Dynamics both go the 'add fields to database via a designer' route. In Prophet 21, you can then add these database fields to screens via a designer in the ERP program. This is pretty user-friendly, e.g. you don't really need to understand code to do this. If you want validation or other behavior, then you start writing C# code. The meta-data for position and visibility of these fields is stored as meta-data in a side table. On load of the forms, these controls are dynamically added to the form. I've seen some performance concerns when the number of custom fields / code gets high (10+). In Dynamics, you modify the given form in it's built-in IDE. This is a bit more complicated, but you have more power, and the UI generation stays 'native' (native in the sense that it's not added after form rendering - all forms in Dynamics are actually stored as compiled metadata). 'Code-behind' is written in X++. Prophet 21's approach is more user-friendly, but Dynamics is more scalable (and requires more development understanding).
Yes, what I am looking for is more of a dynamic control, for editing a cell and then having a bunch of other cells update in real time. Something like this: http://demos.telerik.com/aspnet-ajax/grid/examples/overview/defaultcs.aspx but homegrown. 
Look, you're asking for an "excel-like dynamic grid control" but you gotta understand Excel is Excel (in development since what, 1988?) and datagrid-like pre-built web controls are never gonna get you to that level of functionality. You need to figure out what your specific business requirements are and figure out 1) can a pre-built (i.e. hard to configure to your liking) datagrid control answer your needs in a cost-effective fashion (the answer is often no, unless what you need to close to out-of-the-box/specifically supported behavior) or 2) put you man-pants on and build a custom version of what your client needs that adresses their specific scenarios. 
Nice. I'm really excited to get away from the bloated System.web.dll and start using this instead.
No not at all. In fact I pretty much assumed it would have ended up that way. 
I like smarterasp for simple sites. Only drawback is a 3gb database limit. But they are very stable and cheap and have a nice gui. 
I hope we can use a Linux base with digitalocean soon. 
Js becoming more typescript everyday. Perhaps one day js will be a real programming language. Anyway, this is probably great, proper intellisense in vs has been lacking for js, but I can't really blame them considered what they need to work with. 
Dnx dnu dnvm? Eugh 
Perhaps consider the XDocument class rather than XmlDocument as it is the DOM manipulation class from the more modern .Net XML API (&gt;3.0) and allows you to use LINQ-to-XML for faster document creation and querying. If you are planning to work with ASP.Net I would 100% advise you to go down the MVC path instead of WebForms - it is a much nicer API to work with and much more prevelant in industry. If you look around you will find plenty of tutorials/examples covering simple CRUD applications written in MVC. Pick the one you like and replace the inevitable database access via Entity Framework with your XML storage - the LINQ statements provided should work almost exactly as they do for the database with your XML too! (Another key reason for encouraging LINQ based document interrogation.) Good luck and have fun.
How did you host the hello world app? Also did you remove a lot of the stuff that's included by default in the app startup?
It's hosted on kestrel. I removed debug and console stuff. It's the hellomvc from cli-samples on github.
Command line tools are vastly easier to use in an automated way, e.g. on a build server. There are good use-cases for both command line and integrated GUI tools. So why not both? The differences are really only skin-deep - It's going to be the same code under a different UI layer.
&gt; Can you sort in the database? Yes. Here are some example from the sorting test for version 0.14: var test1 = DataSource.From(EmployeeTableName, new { Title = uniqueKey }).WithSorting("FirstName").ToCollection&lt;Employee&gt;().Execute(); var test2 = DataSource.From(EmployeeTableName, new { Title = uniqueKey }).WithSorting(new SortExpression("FirstName", SortDirection.Descending)).ToCollection&lt;Employee&gt;().Execute(); var test3 = DataSource.From(EmployeeTableName, new { Title = uniqueKey }).WithSorting("LastName", "FirstName").ToCollection&lt;Employee&gt;().Execute(); https://github.com/docevaad/Chain/blob/Sort-And-Limit/Tortuga.Chain/Tests.Tortuga.Chain.SqlServer.source/Class1Databases/FromTests.cs *** Sorting is currently limited to one or more actual columns. Column names are verified, so it is safe to pass them in from your UI. Later we may add another option to `SortExpression` that includes custom sorts. 
&gt; How do you limit the number of results returned? After your `.From(...)` expression, you can add `.WithLimits(...)`. See https://github.com/docevaad/Chain/blob/Sort-And-Limit/Tortuga.Chain/Tests.Tortuga.Chain.SqlServer.source/Class1Databases/FromTests.cs SQL Server 0.14 supports: * Top (with or without ties) * Top Percentage (with or without ties) * Offset/Fetch * Table Sample Rows or Percentage (random selection) * Repeatable Table Sample Rows or Percentage (requires a seed) SQLite 0.14 supports: * Fetch/Offset * Random Sample PostgreSQL isn't ready yet, but it will have its own set of supported limit types. 
Still don't have that, but we do have a comparison to Dapper: https://github.com/docevaad/Chain/wiki/A-Chain-comparison-to-Dapper
Thanks 
Thanks, there should me much more! I need to review all the docs
The way I've formatted individual rows is to override the RowDataBound event and process each rows as it moves though. [This page](http://www.dotnetgallery.com/kb/resource17-RowDatabound-event-tips-and-tricks-in-Gridview-control.aspx.aspx) has a pretty good overview of doing that. I've not seen any major performance impacts in this; though, I'm only getting a couple hundred records at a time in my WebForms. 
i'll give this ago this might be what im looking for :D cheers 
They do, but they should stop calling it RC1 and talking about RC2. This is essentially an alpha at this point. 
Heh, maybe they think they've done enough renaming of things. :)
Possibly, but people are looking at RC1 and thinking they could actually start creating production code with it. Traditionally that's something you could do. 
Hey give the Identity topics a look here, very helpful info: http://www.asp.net/identity
I'd avoid that if I were you, if you want something with a lot of functionality you'll end up with a maintainability nightmare. There's a good reason companies like Telerik exist for making third party controls.
If you are using sql server, look into sql bulk copy. There's even a nuget package plug in for entity framework.
&gt; I don't think it would be wise to use whatever ends up being version 1.0 for anything serious. This right here. Never ever buy or use the first version of a product. Version 2+ is always much better. I can't help but think about all those people who placed Tesla preorders. They will be left out in the dust once the second gen of their new car comes out with a lot less kinks and more features.
Why would need model binding in a view component? Unlike controller actions, they are not invoked from urls, instead you call a view component via razor code and pass an object in directly. Unless you are hoping to automatically grab form variables from the parent pages request ? In that case you can still use the parent actions controller to grab your data , pass it to the page via viewbag and pass that into the view components invoke method . But since a component is supposed to be agnostic to the page it's on, giving it knowledge about what could happen on a parent page introduces much tighter coupling . View components are meant to be lightweight mechanism to invoke server side code from razor, having the model binder in it would bring us back to the same issues we had with html.action imo.
[http://www.telerik.com/support/code-library/excel-look-and-feel-for-radgrid](http://www.telerik.com/support/code-library/excel-look-and-feel-for-radgrid) Also this: [https://demos.telerik.com/aspnet-ajax/spreadsheet/examples/overview/defaultcs.aspx](https://demos.telerik.com/aspnet-ajax/spreadsheet/examples/overview/defaultcs.aspx)
Thanks, that actually helps a lot. I have a book and a tutorial series all ready to go for C#, I just wanted to make sure I was on the right path.
At the rate my employer goes I'll have it in 2022
Time for a new employer? :)
...i think i did that already i figured it out... Just got to use sort of file type object 
If it's hard coded it could just be a separate .js file. If not, I'd probably show a loader and preform a quick call for the info, depending on how large the object is. Doing it as a separate call gives two benefits: 1. The initial Web page can be cached without caching the data. If the HTML page is completely static and cached it only has to be downloaded to the client once. 2. Users with slower connections will have a cached page and loader while it's pulling down fresh data. 
How do I get IIS for a server? Is it bundled within SQL Server 2016 RC 2 (from Dreamspark)?
Would you recommend buying a asp.net book or something similar? Like this https://www.amazon.com/dp/1484213335/ref=cm_sw_r_em_awd_M-xexbFWFD313
You don't even need a server OS. It runs on any version of Windows. 
Install the productivity power tools. You can do so much with it but my favorite is to change the position of the open files tab which I dock on the left. It also color codes the open files based on the project they belong to. 
It's less of a 'stupid thing i should've known', but ... there is a function attribute that hides it from showing up in Intellisense, so if you are sure there should be certain function and you can't find it in the Intellisense popup box, be mindful about that possibility.
You can format your code automatically to adjust spaces and such. Also, you can formate the style too so if you like Java style syntax for your c# then go right ahead and auto format it that way.
Ctrl t... include assemblies check box :(
I recently learned of VSTO after writing a simple excel macro. I've been off to a bit of a rough start, but I think I'll get it soon enough.
On the topic of .NET attributes, `[DebuggerStepThrough]` is nice for trivial wrappers or often used helper methods that you don't want to step into a million times while debugging a larger issue.
Kind of platform specific, but if you're ever doing work with Unity 3D, there's a plugin for VS owned by Microsoft that adds a ton of unity specific functionality. Easy debugging, one touch debugger attachment with autoplay in unity, quick add functionality for monobehaviour life cycle methods. Etc
If you, like me, can't stand javascript, [VS Web Essentials](http://vswebessentials.com/) does instant compilation of both Coffeescript and Typescript, as well as Less.
R# renaming only seems to fail when the reference is contained in a lambda. Found that out every time I renamed while using code first EF for the first time...
Slightly related. When debugging javascript in chrome (and possibly other browsers) ctrl-o will let you search for source files by name. In a similar fashion to ctrl-t in Resharper.
I like holding Alt to slide a line of code up or down using arrow keys. 
VS shortcut list: http://visualstudioshortcuts.com/2015/
If you don't already have a server for hosting, have a look at Microsoft's Azure webapp service. You get access to Azure for free with Dreamspark
Free students' version is just too small for our club, but thanks anyway!
So, just Windows Server 2012? Thanks!
Mark a multi line area in the code by using the alt key and mark the area with the mouse. 
I do not disagree with that, but your statement assumes two things. 1 - That you're working as a consultant 1.5 - And that you have not talked with the client about the possibility and risk 2 - Microsoft did give a go live license with RC1. And we can discuses with that was premature or not. Also just because it is a beta/rc or whatever do not mean it is full of bugs. Hell even if it's version 2, 3 or 4 does not mean it's NOT full of bugs. In the end you have to make a decision of what you feel is best for the product you're working on, and that is of course different from product to product :) 
Themes -&gt; dark, ctrl+. For intellisense add using reference, shift+delete to delete the current row.
Find in Files with Use Regular Expressions option ticked is awesome. I am a Vim user, so navigating code with searches still comes to me more naturally than Navigate To...
I got our entire team R# licences, and all they used it for was to navigate to implementation. I am renewing the licences this year. edit: I am NOT renewing the licences this year. Because VS2015 has Go to Implementation.
Vs2015 has this. Although you can't Ctrl+click as a short. I configured mine to Ctrl+F12
Unfortunately NullRefs occur quite a bit in ASP.NET code, so to turn on every throw is quite disturbing in Web Applications.
You don't have to leave it on, but it's a good way to find things that are otherwise hard to find when you need to. 
There used to be. It's now included by default.
You can type /// over each member of an enumeration list to add documentation. enum Mode { /// &lt;summary&gt; /// this makes it the first mode /// &lt;/summary&gt; Mode1, ... } Edit: the summary tags aren't showing up in my comment for me but there should be summary tags.
Ok, that's genius. First tip on this page that I've found really useful.
Here's the one I didn't know.
Oh god everytime I see /// &lt;summary&gt; /// Rewrites the Foo to Bar twice /// &lt;/summary&gt; public void rewriteFooToBarTwice() .. I want to punch someone. That's 4 lines for something that should be 1.
I've noticed that the keyboard shortcut for intellisense doesn't work when your sharing your desktop in Lync/Skype for business. Doors anyone know how to remedy this?
I really like this one. Thanks.
Shift + Delete actually cuts the row so that row will be added to the clipboard. 
Fellow vim user here. Have you used the VsVim plugin at all?
Ctrl + , looks for files, classes and methods that match input. I use it to switch files quickly or track down implementations 
This is awesome. Thank you!
Isn't Ctrl+click part of Productivity PowerTools?
Ooh wish I know about this one earlier
Ctrl+tab (ctrl+shift+tab) to cycle through open files same with chrome and other applications but I rarely see other people do it. Ctrl+T then type partial class/method/whatever to search files to open that file. That's resharper specific but VS has a similar key combo that is almost as good
It's also available in earlier versions, at least in 2012 I believe.
I like pretty much all of A-Press's stuff, their editors do a good job of organizing the content. If i were you and you have the money you should get a reference for 4.5/5.0 .NET first and get a 6.0 reference next. This is mainly because in the real world we are often 1-2 versions behind the current gold release as there are often only a few reasons to upgrade. If you are not doing this for a job and just want to learn for fun, then go nuts with the latest and greatest!
CTRL-DASH to go back to the last spot in the code you were at.
Hey thanks. I think I'm a year away from getting any development job I can so I'm gona go with the latest I think. Plus, .NET type of jobs seems to have the most openings/best opportunities in my area. I'm currently using VBA at work (fairly extensively) and absolutely love it and want to get away from my analyst role asap.
Ctrl + , (comma) is the VS one I believe.
Ctrl + shift + - is to move forward again afterwards ;)
When debugging you can step through the .net source code if you disable just my code in the debugging options. Also, you can create a breakpoint in the breakpoint window based on function name for those instances where you have symbols but the file is in another project (or the method is in the .net source). You can also create conditional breakpoints, very helpful for loops when you just need to break on a specific value. Just right click the breakpoint.
This is the one and only thing I wish c# would adopt from java. 
You can embed the json in the view. The problem is there's no way to prevent xss from happening. So this is only an option if no user input ever touches it.
You're missing information about http caching. The proper way to do what OP said is to correctly use eTags and http caching headers. Then OP could properly respond with a http 304 for performance gains. Mvc doesn't have any built-in support for eTags and 304 responses, you gotta add it yourself
~~and Ctrl+L to just purge it from reality (delete without clipboard)~~ I was wrong, disregard this.
If you're brand new, I'd take a peek at asp.net/mvc as opposed to web forms. It was built from the ground up with more modern web practices (model view controller, ajax, etc.) principles in mind. However, it would be a lot more to grasp than just web forms, and web forms is not a bad place to start. If you're going to go that route and it's just a demo project, go with an empty website. You can always add a SLN file at any point, but going with the empty website is a lot easier for debugging as 
dark theme master race
Channel 9, Microsoft Virtual Academy have a ton of content to help you get started. Pluralsight is also a good resource, if you don't mind paying for access (it's worth it). Anyways, here are a few, beginner level courses to look into: [C# Fundamentals for Absolute Beginners](https://channel9.msdn.com/Series/C-Fundamentals-for-Absolute-Beginners) [Programming in C# Jump Start](https://mva.microsoft.com/en-US/training-courses/programming-in-c-jump-start-14254) [Software Development Fundamentals](https://mva.microsoft.com/en-US/training-courses/software-development-fundamentals-8248) [Introduction to ASP.NET MVC](https://mva.microsoft.com/en-US/training-courses/introduction-to-aspnet-mvc-8322)
For an embarrassing long time I didn't know that you [can press Alt and select and edit vertical blocks.](http://www.visualstudiotipsandtricks.com/images/column.gif) PairProgramming is a good thing.
Yes, I used VsVim for a while. It is quite good, but nowadays I have Vim configured in External Tools to open with the current file when I have to do some heavy editing outside of Visual Studio.
Why not learn MVC w/Razor first? It's open source. It's hosted on the same page as the the NancyFX project that others here referenced, along with a bunch of others. http://www.asp.net/mvc/open-source 
If you use azure, you can dark theme that too. Heaps nicer looking
For your example if you have C# 6 language features available, you can use string interloping $"{a}{b}";
Been using it for a couple years and occasionally look through the source. It's never struck me as a horrible architecture, either as a "user" of the framework or a peruser of the code. Nicely organized, easy to read and follow, and the little I've needed to customize it got out of the way without much fuss. I'm assuming you've had a different experience! Call me intrigued.
Or drag it
Alt+w, p, p, enter to pin a tab. Productivity power tools has vertical tabs, useful feature for many tabs open.
Use the source, Luke: * [repo](https://github.com/IdentityServer/IdentityServer4) * [Sample](https://github.com/IdentityServer/IdentityServer4.Samples) 
Is there a way of removing items from intelisense? For example, I use a JS library that starts with an underscore, but every time I type it it instantly pops in an exposed string from the jquery framework! Not the end of the world, but annoying
I know this will separate the community a little as resharper is a bit like Marmite.. If you do use Resharper, control+t does a search of the entire solution from including method names, enums, file names, folders and projects. You can even do a search like "h controller" and it will return stuff like "homecontroller" Saves me so much time. In vanilla, you can do something similar with control+; I think in solution view.
I would never recommend arvixe. Since they changed ownership I've had nothing but issues. Our sites where down for over 2 weeks and support was terribly slow. We've since migrated everything to azure. Never looked back.
Likewise, when it comes to frontend web stuff, I just have a couple of gulp tasks and watches which do everything.
I thought that `$"{a}{b}"` is just shorthand for `string.Format("{0}{1}", a, b)` i.e. more fun to type, but with identical performance characteristics.
&gt; static vegetables I laughed
I stand corrected. Honestly thought it just removed it. Not sure why they have multiple keybinds for the same things.
How about performance improvements? I can't even use Resharper on VS2015 because it's such a performance hog.
But change the Brace Matching highlight color. The default has the both the font color and the highlight background color almost the same.
Some time last year. Around august maybe?
Strangely two things happened after update. First my github could not connect to the repository anymore. I had to reclone it Second my ReSharper reset to evaluation mode, I had to resign in. Hope this is just my computer and not a known issue. 
You're using `dynamic`, so you move the evaluation to runtime. Why should the compiler forbid this? From MSDN: &gt; Type dynamic behaves like type object in most circumstances. However, **operations that contain expressions of type dynamic are not resolved or type checked by the compiler.** The compiler packages together information about the operation, and that information is later used to evaluate the operation at run time. As part of the process, variables of type dynamic are compiled into variables of type object. Therefore, type dynamic exists only at compile time, not at run time. TL;DR: Don't use `dynamic`.
I had none of these issues, so isolated. 
There was a small issue with older private nuget feeds (Klondike) but easily to work around until a patch is out.
- Spring = March-May - Summer = June-August - Autumn/Fall = September-November - Winter = December-February End of summer would therefore typically be August/September, possibly slipping to October but most would consider that beyond the end of summer
Hello world.
Well, given that Damian Edwards is Australian, that could be March 2017.
http://i.imgur.com/XWOuu8G.gif
No, I think that came out in 2012 or 2013.
omg.
Just wanted to piggyback on soliciting recommendations. We've had nothing but trouble with Arvixe and because we need SSL, Azure is cost prohibitive. I'm looking into SmarterAsp.Net. Thoughts? I used to be with Server Intellect but I think they stopped selling shared accounts.
&gt; sql server management studio. Life Saver. I freaking HATE Management Studios intellisense. It never fucking works. Thanks for the tip.
Is there some mapping from columns to the constructor arguments?
what is it doing with those Type array members? if you're working with other people who have to use this code later, maybe try generics: ...ToCollection&lt;EmployeeLookup&gt;(new EmployeeLookupType&lt;int, string, string&gt;())... pubic class EmployeeLookupType&lt;TEmployeeId, TFirstName, TLastName&gt; { ... } might give you the same functionality, with the types allowing you to use named generic parameters in the class body instead of an index into an array.
Yes, that looks much nicer. I'm not sure how the implementation will pan out, but the `WithConstructor` API sure beats what I currently have.
The Type[] array is used to find the constructor on EmployeeLookup. Here is the class definition: public class EmployeeLookup { public EmployeeLookup(int employeeKey, string firstName, string lastName) { EmployeeKey = employeeKey; FirstName = firstName; LastName = lastName; } public int EmployeeKey { get; } public string FirstName { get; } public string LastName { get; } } 
&gt; Why throw an error if the class has multiple constructors? If you use `InferConstructor` then it guesses which one to use. If you explicitly say which ctor constructor you want, then you won't get an error. &gt; I would also recommend including a params overload. Just make the CollectionOptions the first argument if you want to keep things consistent. That would give us both: .ToCollection&lt;Foo&gt;(...).WithConstructor(typeof(int), typeof(string), typeof(int)).Execute(). and .ToCollection&lt;Foo&gt;(...).WithConstructor&lt;int, string, int&gt;().Execute(). Seems reasonable, as you may not know which constructor you want at compile time.
Thank you all for you suggestions. The code has been checked in and I should have a Nuget package with immutable object support posted some time tomorrow. https://github.com/docevaad/Chain/tree/TVF Also included is querying table-valued functions, including filters, sorting, and limits. My buddy is still working on PostgreSQL support. Last I checked, we'll be able to support almost everything we exposed for SQL Server except SQL Dependency.
You could build a simple web application using OWIN. You can write your own middleware that handles the requests.
Don't use dynamic if you can't defend the use of it. It's a powerful feature, but it's also something you almost never use.
check out GearHost. if you'll have low traffic, you can just use free tier. it lets you bind your own domain name even in free tier.
unless you need to return an identity ID of an inserted entity
You're going to have to ask specific questions to get answers that are specific enough to be useful to you. Your question is so general that it could probably best be answered with a Google search
Ones where there's more company than actual work... more managers and executives than developers. Well, that's an exaggeration... but when people say "Corporate" they tend to mean fairly big, enterprise-y, lots of layers of management, formal structures etc. We're talking Microsoft rather than "Agile-X Technology", with 6 guys and an office parrot.
legacy code is a thing
Use it? Yes. Prefer it? Not really. But there are lots of organizations (generally large corporations developing LOB apps in-house) that standardized on VB back before .NET, and when they migrated to .NET, they went to VB since it was closest to what they knew. Why change? No, really, why? The languages are basically identical, to the point you could transpile them with a handful of regexes if you were feeling brave. It's not worth caring about the difference, in my opinion. Last I checked, though, VB was the only one of the languages that let you do XML literals, so it's got that going for it.
to an extent, yes, but only those who saw the light and moved to c#. company i work for was writing vb.net code still last year. now we've moved majority of stuff to c# but we still write a decent bit of vb.net when working on our legacy stuff until it's written out of the product.
Not to mention having to fully unit and regression test everything again, which is hard to make a business case for assuming you even have a full set of test plans. Plus there are inevitably bugs and idiosyncrasies in the language implementation. 
It's super useful if you're programming SharePoint. 
Sure. Where I work we mainly use VB.NET, partly due to "that's how we've always done it" (legacy code) but also because we don't really see the need to switch. They've had feature parity for quite a while with C# (though it seems they're gonna let that go now). I can read C# pretty easily, so when I'm searching for help I usually just use .NET as a keyword rather than particular language. Personally, I actually prefer VB syntax (except for LiNQ), but that might just be because it's what I learned first.
Yes, we do. You can see .NET code samples written in VB.NET all over the Microsoft site. Just click the little "VB" tab and it will switch to that language. It's a dialect of .NET, not an inferior offering.
Come on, I mean I don't like VB.NET but it compiles to the same thing as C#. There's fundamentally no difference between the two. It boils down to preference. I've worked at places that used VB.NET with proper design patterns and architecture, and I've worked at C# shops that wrote awful spaghetti code. Don't blame the tool. I greatly prefer C#, but at the end of the day .NET is .NET.
Given the choice, I teach people VB first. From a language design standpoint it is superior in most regards, making it much easier to learn. EDIT: If you disagree, try to explain these points to someone just starting out: * which import statements to include * when to use a semi-colon vs when to use an open brace * when to use parens vs when to use brackets * when to use `var` vs when to be explicit on types * when parens are necessary (e.g. if expressions) and when they are optional * when == does value or reference equality All of that crap be delayed or ignored entirely in VB, making it a much friendlier language when it comes to teaching. 
I like VB for actual LINQ, it's the anonymous functions that leave me cold.
10 years? More like 15. VB was actually more advanced than C# for a long time in areas that matter such as optional parameters and late binding.
They should have learned from C#, which had the verbose delegate keyword before adding arrow expressions. Though I admit, the current syntax is easier to teach.
If your boss can afford it, Red Gate's SQL Prompt is a game changer. 
That works so much better in VS 20015 U2. 
Are these devs who have been are that same company for many years? That is the only way I can figure how they would still choose VB for a project in 2016... I can see if they start in 2002 VB and they just worked on this really long project
now i feel old. thanks.
You are the first person I have heard that says all things equal VB.NET is actually a better language than C#.NET
Honestly I've got a pretty good gig going for me. I got laid off as a contractor (zero benefits, no PTO, holidays were unpaid) from a bank making $71K a year. I actually took home 65, before taxes, between unpaid holidays and they temporarily laid off all contractors for 2 weeks. Then I got laid off for realsies and 2 weeks later I started a job with excellent health insurance, 12 calendar holidays, PTO and all that jazz + $62K before tax. $3K net loss but a massive increase in overall compensation, and it's for a tiny, cool nonprofit medical company instead of an international soul-devouring bank. Also I make almost 50% more than the median average where I live. So I'm pretty content.
I imagine there are atleast 10 c# devs to 1 vb.net dev.. I get that impression because I never see anyone on..ggithub for example using vb.net
For some particular nails, VB.NET is a better hammer. If you've got XML to write, XML literals with interpolation are mighty handy.
Also useful when programming SharePoint: vodka.
Government has alot of VB.
Every language has a lot of little disadvantages. If they didn't, there'd only be need for one language.
Yep, our production software we keep alive does 16 bit print calls still, all the way back from Windows 3.1 days :(
&gt; Because a day may come when that VB code needs to be updated and with each year passing it is increasingly difficult to find someone who can do it. That's literally the only reason I don't recommend VB anymore. While I love the language, the professional industry has spoken.
C# 7 is fucking amazing. 
People still using VB6: http://www.codeproject.com/Articles/710181/Visual-Basic-A-giant-more-powerful-than-ever
&gt; I just wish we could've all agreed on one language by now... I agree lets all use f#.
I built the latest version of Mono on my Pi and can run it. Mono took about 12 hrs to build though!
It's not that bad. It's pretty normal to use VB.Net instead of C#.
Our automation group is made up of different units. One of these units absolutely refuse to do anything except VB.Net. I couldn't tell you why, they complain about semi-colons. 
my fault. I have woken up the VB.NET I see.. Ok. I guess VB.NET will be around for another 10 years. I still wouldn't recommend anyone start out with that instead of c# though
maybe.. If I had a new job and it was f# or vb.net Id do f#.. I want to see what the functional thing is like
 The paper proposes the reintroduction of Visual Basic 6.0 on the market, in parallel with Visual Studio line. WHAT?????????????
I am big fish in a small pond.. But my pond is polluted with chaos and confusion so I can do things how I want but it is hard to get people to figure out what I should be doing
Just wanted to comment as a student. My senior project is being written in VB.Net. I would have preferred we do it in C#, but it really doesn't matter. We went with C# because the rest of the team was more comfortable with C# as we're also using MVC, and they're uncomfortable with that too. In hindsight, they all wish they had listened to me and gone with C# as that's what all code samples are in, but converting from C# to VB is pretty trivial. I don't want to say something that's wrong, but I haven't come across a piece of code I couldn't convert. Ternary operators were kind of weird to convert to an If() function, though. I also worked as a dev at a company that had built a large VB.Net app in.... 2012? maybe? I don't know when, it was fairly recent. It was annoying to maintain, but that was because the design was rushed. The verbosity of VB actually helped out a lot in understanding it.
Just having 98% of resources in c# is reason enough I think to start projects in c#... I can't remember the last time I saw someone asking a question on stackoverflow using vb.net
**Entity Framework** I can't use the same class against multiple views. This really sucks when I need different views that expose the same columns (really common for spatial types) I have to write a lot of boilerplate to populate objects other than the one true class for the table I have to write a lot of boilerplate to perform updates based on view-models. NoTracking should be the default. I've never written code where it would have been useful to track objects within the lifespan of a DBContext. I understand that some people might, but really it is an edge case that we pay for.
Like I said, though, I've never had a problem converting between the two. We're using entity framework, so I'll look up how to do a thing with entity framework, and if the results are in c#, I can typically reason out how to do it in VB. When I can't, I can use a code converter. Or I can read some documentation on Microsoft's sites. I get that you like C#, but just because you like C# doesn't mean VB is worthy of as much derision as you're giving it.
I looked into it but ran into many troubles regarding saving related data with EF and datatypes like GUIDs
There is still perfectly function COBOL running on mainframes. In fact your bank or airline probably uses it... not to mention payroll companies.
I've used XML literals for email generation before. It's really handy and doesn't require loading up a Razor engine to work.
&gt; I want to see what the functional thing is like Like LINQ only very much more so :) And it has macros... code that dynamically generates code are run time.
heard its not good for making web sites though
Forget C# vs VB...WebForms is the bigger problem.
I intended the statement to read "VB has a lot of little disadvantages compared to C# which add up to more than the few advantages most of the time".
I do not personally care for VB, but I take great joy in hearing the reasons why you prefer it. I am sorry that many were using the downvote button as a "disagree" button. Thank you for you input.
Use the modulo operator (`Mod` in VB, `%` in most other languages), which returns the remainder of a division, e.g. `5 Mod 2 = 1`.
There's not a good argument to port existing working applications. I take this more as "why would you choose VB for implementing a new application?"
What does that mean? If you have proper separation of concerns why does the language matter? Shit, let's write the backend in brainfuck if it works.
This does not have error checking... Dim numVal As String = "54" Dim leftSide As Integer = Integer.Parse(numVal(0)) Dim rightSide As Integer = Integer.Parse(numVal(1)) Console.WriteLine(leftSide + rightSide)
This dude knows pain.
If you are looking to split the string in the middle: Dim numVal As String = "545978" Dim leftSide As Integer = Integer.Parse(numVal.Substring(0, numVal.Length / 2)) Dim rightSide As Integer = Integer.Parse(numVal.Substring(numVal.Length / 2, (numVal.Length - numVal.Length / 2))) Console.WriteLine(leftSide + rightSide)
[This recent post](https://www.reddit.com/r/dotnet/comments/4bxwta/how_much_is_vb_still_used/d1dh0il) seems relevant.
A decision made above my pay grade
This was it. Thank you!
I personally love the syntax of vb over c#. Plus it's my first love and I'm just a sucker for it. If (usually not if, but when) I get stuck on something and need to Google - you're right, 99% of the code samples are in C#.. but it's still a .NET technology.. it's pretty easy to figure out what the code is doing and convert it to VB.
You don't really need to know about razor or WCF anymore in my experience, you need to know a bit about one of the big JS frameworks like Ember or React for Greenfield projects. Traditional MVC roles are going out of fashion in favour of Web API even though MVC6 is a union between both. Other than that Git (most widely used source control system), debugging tools for browsers like firebug, Ninject (or any dependency injection tool), knowledge of HTTP, Web API design. Most importantly in my opinion knowledge of test, mocking and BDD frameworks i.e nunit, moq, spec flow.
Oh god. Would def need to make sure to use a service pattern on those controllers. So much extra logic. 
Doesn't this violate the point of an ORM, to have database state mutable in memory?
I'm a big fan of inline SQL
Lets say you have a table such as this: PersonTypeKey PersonTypeName SendInternalEmails 1 Employee 1 2 Contractor 1 3 Customer 0 4 Vendor 0 In memory, you want to be represented by an immutable collection of immutable objects, as no one should ever be modifying those values. Basically, using immutables to reduce the chance of making a mistake. 
Inline SQL is kind of the point of Dapper it's not meant to be nor is it trying to be entity framework you should really be injecting your database anyways 
DI frameworks aren't important, don't bother studying them. Even if you need one (which is actually quite rare compared to how often they are used), it is something that you setup once and then forget about. Just read the tutorial, slap it into place, and move on. **EDIT:** To clarify my position, the whole purpose of a DI framework is to make configuration easier than if you just did it manually during application startup. If your DI framework is so complicated that you have to actually spend time learning how to use it, then it's not doing its job. 
Functional, performance, and integration testing would be really useful. Far too many people only know how to write "unit tests". While that's a good start, if you don't know how to write tests that actually touch the database then you're going to be in for quite a shock when things start failing in production. Terms: * Functional: Bigger than unit tests, often including *your* database * Performance: Basically functional tests that assert the operation doesn't take too long. * Integration: Tests that include someone else's database or web services. Techniques for functional and integration tests differ because in an integration test you are limited in what you can do. * Smoke: Tests that just ensure things aren't completely broken. Most smoke tests I write are for other people's services that I depend on. 
Personally I try to avoid AutoMapper, as its use implies that there's something wrong with my object model.
Mapping of Entities to DTO's...
&gt; NoTracking should be the default. I've never written code where it would have been useful to track objects within the lifespan of a DBContext. Change tracking is basically the only reason I use EntityFramework (or NHibernate). That's one of the things it actually does a decent job of. I don't need a giant ORM framework to generate SQL for simple CRUD operations - often I'll just inline the SQL and use Dapper to handle parameters.
This guy. This guy understands the real world and not the fan boy, my language is better than yours" works that a lot of developers live in.
Is it common for developers to be doing all these kinds of tests? In the dev teams that I have been a part of, we've been only asked to do unit and integration testing. 
Tell me more... What ORM can populate DTOs directly without some kind of reflection mechanism like automapper?
It is the micro-services framework that all of the Azure services are built upon. MS opened it up for general use on bare metal and deployed to Azure. It implements their actor system model; which, in my opinion, is a lot easier to use than Akka.NET. Currently, I'm using both for a large-scale distributed system.
I'll have to look into that.
Can you give me a quick example of how you use change tracking? I ask because I usually do it using models that implement IChangeTracking so I get the UI effects. Also, my models live longer than my DBContext.
My experience is particularly biased towards stateless web apps: load an entity/graph, execute a method (which may or may not alter properties, create new entities, etc), save changes, commit. Basically the stereotypical "domain driven design" style usage of EF/NHIbernate. But I'm finding now most of the time this is overkill, especially in web apps; you're almost better off explicitly executing SQL commands. And so I find I have very little use for EF/NHibernate anymore. I can use lightweight and purpose built generators for many CRUD operations. Couple that with something like Dapper for parameter and result set binding, and now you have all the building blocks you need.
Depends on the company, but usually the developers write those tests while QA handles the painful UI testing. Reasons: * Functional: Because unit tests aren't enough. * Performance: If it isn't acceptable on your laptop, it won't be in production. Plus this will help make your functional tests faster. * Integration: Do you trust your partner company's API specs? Did they even write them? * Smoke: Do you trust your partner company's ops team? No, no you don't. 
Interesting. I know nothing about Tortuga.chain but I see you're the author. How does the runtime know what columns belong to what tables? Does it query the DB metadata? If so, is it cached? I like the lightweight, low-ceremony approach. It looks fun to use.
&gt; I'd skip the WCF and learn WebApi/MVC6, Short term yes, but WCF still has a purpose. Currently I use it to communicate between my web servers and Windows Services. Once you learn it, its a lot nicer to work with than WebAPI for application to application messages, especially if you want two-way or asynchronous communication. Just don't try to make the JavaScript guys consume it.
&gt; load an entity/graph, execute a method (which may or may not alter properties, create new entities, etc), save changes, commit. Ok, I can see where change tracking is applicable there. &gt; But I'm finding now most of the time this is overkill, especially in web apps; you're almost better off explicitly executing SQL commands. That's where I'm at now. I especially like pushing logic into stored procedures. It's just so much more efficient to do things there then to pull a bunch of data into the middle tier to make the same decision. 
EF 7 is supposed to be addressing some of these concerns and improving DI capabilities tho so I digress 
That isn't a real reason to pick a language over another unless you're learning the language. For real world projects no one cares about code samples.
I consider the ability to use inline SQL a selling point. I just want to be able to execute queries and get results back as POCOs as easily as possible. Dapper's great for that. Are there downsides to inline SQL? Sure. But there's a tipping point where the complexity of the database outweighs the complexity of a more heavy-weight framework, and before that point Dapper's ease-of-use -- including the use of inline SQL -- saves me time.
In my mind the concept of a "professional" developer unwilling to use VB is a contradiction in terms.
New build is up containing: * Windows 10 Enterprise Evaluation, Version 1511 * Visual Studio 2015 Community Update 2 * Windows developer SDK and tools (Build 10586) * Windows IoT Core SDK and Raspberry Pi 2 (Build 10586.0.151029-1700) * Windows IoT Core project templates (Version 1.0) * Microsoft Azure SDK for .NET (Build 2.9) * Windows Bridge for iOS (Build 0.1.160304) * Windows UWP samples (Build 3.0.0) * Windows Bridge for iOS samples 
Id add AutoFixture to Nunit and Moq
funny thing is that WCF is the only fully fledged implementation of the WS-* standard. So yes, it ties you into .NET because no other platform really supports a standard.
Developing REST APIs with WCF is shooting a mosquito with a mortar. WCF is better suited when you have to implement an higher level of Service Oriented architecture.
VB.Net is easier to learn than C#. I started learning programming by BASIC language which turned into Visual Basic (6), and now VB.Net. You don't need to learn object oriented programming concepts for it. I only use C# now but come on, it's not bad to have it.
No primitive collections is my biggest complaint, enums are a nightmare. The boilerplate code doesn't exist if you set up something like Automapper properly. Just chuck "IMapFrom&lt;Entity&gt;" on your ViewModel and mappings are done.
We deploy from Team City with System Properties set to : &gt; system.​Configuration Dev Server &gt; &gt; system.​DeployOnBuild true &gt; &gt; system.​Platform Any CPU &gt; &gt; system.​PublishProfile Publish On the build step: &gt; Path to build file: path to .sln &gt; &gt;Command line parameters: /P:PublishProfileRootFolder="Path_TO/My Project/PublishProfiles" I use this for a few webforms and wfc sites and no code is included. 
&gt; I especially like pushing logic into stored procedures Not to get too far off topic, but I wanted to voice this... I generally see the decision to use stored procedures versus SQL inline with code as a preference. It largely has no affect on performance, only the maintainability of the code. Stored procedures are great when there are multiple applications (likely written by different teams) that are accessing a single database and certain data access patterns need to be abstracted and/or encapsulated. But I think shipping SQL inline with code has some advantages too. For one, "dynamic SQL" is far easier to write in a language such as C#. Also, business logic tends to be easier to reason about when related code lives near each other (it's hard to see just what a stored procedure will do when, for example, you're working in a C# project). It's also, I think, easier to test A/B different SQL statements without introducing extra objects in the database. &gt; It's just so much more efficient to do things [in a stored procedure] then to pull a bunch of data into the middle tier to make the same decision. This is correct. But in terms of what I discussed above, I think it's a trade off: loose a bit in performance for easier to manage code. Or visa-versa. But that's what architecture and design is all about! Managing and making decisions about dependencies and trade offs.
We use Jenkins, but we invoke `msbuild` similarly. ``` msbuild TheSolution.sln /p:Configuration=Release /p:Platform="Any CPU" /p:DeployOnBuild=True /p:DeployTarget=Package /p:_PackageTempDir="C:\PathToDeploymentLocation" /p:VisualStudioVersion=14.0 ``` That said, I think your issue is elsewhere.
When you have a set of entities to represent your tables, a set of DTO's, and a set of viewmodels. I would really hate to go and update the mapping logic in 6 places, mapping each way for all 3 objects, and miss 1 value on one of them. Where as if you have a standard naming convention for object properties, then when adding a property to each object it will be essentially automatically populated between objects with automapper or valueinjector. Yea sure it's easy to write your own custom mapping logic, and for smaller projects possibly unnecessary. But when you have 100 business objects maintaining that mapping logic for 300 objects gets to be time consuming.
JavaScript, SQL, then good coding practices
or if you have a mouse with browser forwards and back buttons that works too
Just came here to tell you about our new ORM: https://github.com/okhosting/OKHOSTING.ORM It solves a lot of the pain pots in other ORMs. 
&gt; Also, business logic tends to be easier to reason about when related code lives near each other In my case they are in the same solution. Just press ctril+, and you'll see the definition.
There's nothing wrong with Perl... as long as you don't mind rediscovering code you wrote several months past and have to spend an hour looking up sigils and functions just to understand what past you was thinking when you wrote all that TIMTOWTDI "natural" code that just flowed out of your caffeinated little fingertips that night at 2 AM. All fun stuff and all anathema to a culture of readable code. That's what I loved about the Python community so much: readability comes first (mostly). But then.. the GIL and dynamic typing. So.. yeah, here I am. Just gotta remember to swallow my "brackety cult koolaid" once in awhile so I don't hork over the syntax; which, to be fair, is the same problem with Java so it's a wash I guess. 
NHibernate supports it afaik. You *can* just manually concatenate and split, but that feels bad. I want something to magically replace my list items with IDs so it can compress the tables properly.
&gt; I'm looking mostly at the job market. C# programmers in my area and discipline are paid better and have more opportunities than VB programmers. Ironically, I have found the market for C# specialists to be a little tight sometimes. But, with some customers, if you show the flexibility to work with their VB code on occasion, they consider that a differentiator. I mean, I don't put VB.NET front and center on my resume, but I know for a fact that I secured one 2 year engagement solely because I could do that for a customer and the next guy over (a C# specialist) got to sit instead. Ironically, after the VB.NET work was done, I spent most of my time for them writing C# and Javascript anyway; so it didn't really negatively impact my experience base. But that's anecdotal I guess. The prize will sometimes go to an "expert" if you can fairly prove you should demand that title, but that's a fickle fickle game. I prefer to play the flexibility shtick, though sometimes I get accused of being "master of none"; that's a risk I can live with.
Why do you keep saying "DI framework"? It's not like we need a framework to do dependency injection. 
I'd probably still use WCF, even if its WCF over NServiceBus.
I prefer to not expose my Data layer to my Views. The way we model data to be stored in a database is rarely identical to the way we model data for customer interaction. This is also true for partners who may consume an API. I prefer that every presentation layer (MVC or WebApi) contains their own set of models that get exposed to the consumer (View or Api Consumer). The presentation layer has a mapper that maps Entities into the Model.
I agree with everything you said, except the last sentence. The whole point of an ORM is to handle mapping between the database's structure and what the UI needs. So if your ORM creates entities than then have to be mapped to models, there's something wrong with it. In my current project, the UI team defines all of their models in RAML, which gets code generated. The DAL just says which table or view is needed for populating the model. If they add a new property that matches a column name, the DAL will automatically populate it with no change to any other code. In short, we have no concept of an entity.
I disagree that an ORM is supposed to generate UI exposed objects. I often have columns in my data thay are specifically for business decisions that would be catastrophic if exposed to the UI. But hey, to each thier own right? If there was one correct way to do any of this then every program could be written by a computer.
&gt; When you have a set of ~~entities to represent your tables~~, a set ~~of DTO's~~, and a set of viewmodels. There, fixed if for you. A good ORM can map directly from a table or view to a viewmodel. If you find that you need something like AutoMapper, it's probably because there is a major flaw in your ORM. 
[Nagios](https://www.nagios.org/projects/) is popular though you will need to set it up to consume IIS logs. Not impossible, would not be surprised if a plugin will do it for you. 
That's very important notice. Thanks for sharring
EF performance is ridiculously horrendous.
Nagios seems a little heavy weight for what we are doing. I dont need a web frontend. I just want to toss a .log file a view it. Maybe graph a few things based on a few of them. 
Check out the ELK stack, Elastic Search + Logstash + Kibana. Splunk is great, if it's a small team you can even get it for free, but ELK is always free and easy to setup with filebeat. There's whole tutorials to forward IIS logs with ELK http://i.imgur.com/KA3mPgm.png EDIT: You should be logging lots of stuff (trace, exceptions, run-time warnings), if you're going to invest time into a solution, pick one that can handle generic logs, heck, even just streams of textual data so you can analyze it. Don't invest money and time into a logging solution that will only do IIS, when your app grows, you'll have to start persistently logging more and then you'll have two solutions. 
What I'm saying is don't make objects that represent tables. Make objects that represent the projections you want from the database. Tables are an implementation detail. You application's object model should not be concerned with your table structure beyond having the necessary primary keys. *** Putting it another way, the whole point of having a *relational* database is that you can project the data any way you want. If you are just going to be pulling back fat object graphs with each class representing a table, don't use a relational database. Switch to an object database. *** Yet another way to look at it is performance. If you only need two or three columns from a table, but you pull back ten to create your entity before mapping it to a DTO or view-model, you're really slowing down the database. At the very least you have a hidden join between the index and table itself (i.e. clustered index). Or it will just ignore the index entirely. 
I think this quote by Mark Seemann is on point, &gt; The beauty of it is that once you've isolated composition to the Composition Root the decision about DI Container usage becomes unimportant. You can decide to start out with Poor Man's DI, then a couple of weeks later decide to try out AutoFac. A month later, you may decide to migrate the Composition Root to Castle Windsor, or perhaps even go back to Poor Man's DI. When composition is isolated in the Composition Root, making that kind of change isn't particularly hard. http://www.infoq.com/articles/DI-Mark-Seemann He continues, &gt; A Composition Root is an isolated part of an application’s entry point where we compose the entire object graph for the application. For long-running applications such as desktop applications or Windows services or batch jobs, this typically means composing the entire object graph in a single statement. This basically happens in the entry point of the application. You basically create the graph supporting the application and hand off control to it by calling Execute or Show or something similar. At that point, the composition is over and the application code takes over. &gt; Something similar happens with request-based applications such as web sites or services. However, in this case we compose an object graph per request, but the idea is the same: compose the graph and hand off control to the graph, at which point composition is over. 
As long as you can serialize them. :) You can run redis in both windows and linux though. Should be a great choice, has all the expiration policies you will need and so on. Managed in azure is more convenient though, of course.
Interesting, thanks for the input
I think EF did us a huge disservice by forcing us to put public setters on collection properties in the first place. Classes are so much easier to use when you know that they follow the rules.
No new information in that quote for me personally, and I don't think that it really says that IoC containers do not add value. Just that you should use them wisely - e.g. in the controller factory, not scattered throughout as a service locator. We can, do, and have a for a long time taken that advice. But then you and I effectively work in different industries. For instance, [WCF is years dead to me](https://www.reddit.com/r/dotnet/comments/4fjewv/essential_net_c_skills_these_days_particularly/d29s1i3).
Dapper works just fine with SQL files as well.
I used [Indihiang](https://indihiang.codeplex.com/) a long time ago and it worked as far as I remember. It doesn't seem updated in a long time tho.
Ease up, I'm not suggesting that having language preferences is a sin. The point was phrased in terms of refusal, not reluctance.
Hate that SQL format, converting time zones is a PITA
that application is so half assed
look at you gathering requirements for that new ORM
&gt; SQL and database design theory are still really important. I had this hammered into to me at high school and in Database units at university. In the workplace I'm shocked by the lack of SQL and DB Design knowledge (even of some seniors)
Does this only work with the command line, or can you use linux apps with GUIs as well? I don't know if the app windows will render.
Alright, I'll look for a copy. Thanks again!
Turn on developer mode https://reddit.com/r/Windows10/comments/4dn0a4/windows_10_testers_can_now_try_bash_and_lots_of/d1suxkt
Well, not applying for jobs is refusal isn't it? :P And harder to find developers = more developers refusing to use.
Strictly command line only. This will not change.
This is simply amazing. I was able to apt-get install g++ on my win10 laptop and compile c++ hello world without issues. 
People have gotten gui apps to work, but that's not the use case MS is going for so no support or promises it'll work 
Bookmarking the shit out of this
TL;Dr: Tick the little box Frankly I'm underwhelmed. I can't run any servers (Redis, ElasticSearch, Node HTTP server etc), npm isn't working, various other issues. I've used Ubuntu a lot, I'm pretty good with it, but this just feels like a horribly broken version of it. I guess it's back to running it on a VM for the time being.
if You spend enough time in this forum, you will learn that you either agree with the resident [expert](http://www.daedtech.com/how-developers-stop-learning-rise-of-the-expert-beginner/) and do it just like them (e.g. [you should persist your viewmodels to a database](https://www.reddit.com/r/dotnet/comments/4fjewv/essential_net_c_skills_these_days_particularly/d2ajth6), or [IoC is trivial](https://www.reddit.com/r/dotnet/comments/4fjewv/essential_net_c_skills_these_days_particularly/d2ah0ui) but [is never used right](https://www.reddit.com/r/dotnet/comments/4fjewv/essential_net_c_skills_these_days_particularly/d2ajd0j) at the same time!), or you don't know what you're doing. No variation allowed.
Wow you summed that up perfectly. Thank you for the insight. 
Pro version right?
Have you looked at the core documentation? https://docs.asp.net/en/latest/tutorials/first-web-api.html
This one on pluralsight covers [.Net Core/MVC6/Angular]( https://app.pluralsight.com/library/courses/aspdotnet-5-ef7-bootstrap-angular-web-app/table-of-contents). If you have a company MSDN/VS license there's some promo you can do for free access.
For one test project, I tried to get it playing nice with Oracle packages. I did manage to get it working; but, it was more painful than just writing my own POCOs and data access layer. 
I use npgsql in production with postgres and EF. 
Lookup tables. These are tables that are read CONSTANTLY, rarely change, but EF still hasn't figured out how to cache these so I don't have to read them from Sql. For example, zip codes. I import a zip code list into my DB like once a year, and every address has to join to this table. Can't EF just cache this and avoid the Sql join?
This one was pretty good. Seems like "WebAPI" has kind of gone away. You can specify which components to pull into a project. Controllers are the same now. Plural Sight though. https://www.pluralsight.com/courses/aspdotnet-core-1-0-fundamentals
Are you making use of stored procedures? I have several stored procedures that return SETOF RECORD or SETOF REFCURSOR. 
This too ruined my day, but it came in with Visual Studio 2013 not ASP.Net Core. My general 2c is to never use the debugger unless your unit tests and such are failing. But if you disable Edit and Continue the behavior fixes itself. See https://blogs.msdn.microsoft.com/webdev/2013/07/11/enable-edit-and-continue-debugging-option-is-now-on-by-default-for-new-web-applications-in-vs2013-preview/ for a little background.
Give a try at my little baby: Nybus. It's built on MassTransit and RabbitMQ. At my company we are using in production for few workloads.
Don't call it `Utilities`, that makes it sound like a dumping ground for random crap. Instead call it `MyCompany.Workers.Core`, which makes it clear that this contains the core pieces that all of your Worker Roles need. Keep it in one project for now. Reasons to break them up... * You discover there are pieces that most workers don't use * Your Core project has too many dependencies that aren't always needed * Your build times are too long. *** In C/C++ programming we have a concept known as the Interface Segregation Principle or ISP. Unfortunately most Java/C# programmers don't understand it's purpose (which is not "Make all da interfaces!"). In C/C++, you compile file by file. So if you change a header file, every source code file that uses it will need to be recompiled. By breaking up the header files into smaller interfaces, you reduce recompilations and thus overall compile time. In C# we compile project by project. So for us ISP is at the project/assembly level. By breaking out your frequently changed code into a separate project from Core, you can just recompile just that piece. 
Open your web project's properties, and under web, disable edit and continue. For whatever reason this is now the behavior of that feature in late versions of Visual Studio.
Yeah, never made sense to me. I had some MVC 3 exposure some years ago. Was weird that WebAPI was different and that them coexisting was problematic as I found trying WebAPI 2 last year. Also, documentation and blogs were confusing because you'd find out that a decorator didn't work. And there was far.more info out there on regular MVC. Made it confusing for me as someone just trying to hack stuff together and get stuff working for some small personal projects and not having a body of existing code to reference and build on. I'm sure I'm not the only that had that experience. 
&gt; Like assigning each user one more customers, and then displaying that data. There's a basic members system, but nothing like this built into Umbraco. Sounds like it would be overkill for what you want. Either way you will have to build the CRM'ish part out yourself. If you have experience working with MVC it would probably be a lot faster to just build it out there.
If you're looking at .net, I'd point you toward Asp.net web API (current version, the .net core xplat stuff isn't ready yet). Very nice framework to work with, tons of documentation to get going quickly. Json.net library is pretty much the gold standard for Json serialization on .net. Id put it on top of DocumentDB for storage, and tie it in with Azure AD B2C for authentication if you need it (50,000 users or less are free). You can deploy to an Azure WebApp, basically a hosted IIS instance that can autoscale. Or you can go toward Azure service fabric if you prefer the microservices deployment. Service fabric is very new and really cool, but you need at least 3 nodes for SLA, while WebApps only need 2. If all that is too much for what you're trying to do, check out azure mobile services. Much lower entry point in the number of technologies involved and really well priced. It's pretty much created for being the backend for mobile apps. Good luck!
It seems to be a Microsoft trend. A lot of the enterprise and other software lately requires a config file to opt out of installation of items that used to be part of the default installer. Office Professional for example no longer has a configuration screen - it just installs everything.
http://www.asp.net/vnext Try this one for ASP .NET 5 
That is a lot of excellent information, thank you. You obviously are a fan of Azure (I've been leaning toward AWS for some time but everything that I've read lately, in the news and in whitepapers, is trending toward Azure so I need to give it a better look). I don't know how well you know AWS but it's a lot simpler for obvious reasons (the almighty Microsoft versus a newbie like Amazon). AWS essentially offers one thing and configuration is where the differences are. What you've laid out, and what I've read about Azure, seems much deeper. So help me for a minute. 1. You suggested Azure Mobile Services (AMS) but I read that Azure App Service (APS) is now the new thing? Or is it still too green? 2. Before you suggested AMS, you laid out an environment with a database and authentication—what "environment" is that called? Or is that just basic use of Azure, hand picking things you need? 3. Are you using DocumentDB, B2C, WebApp, etc. no matter what package or environment you're in (APS, AMS, etc.)?
Yes. Microsoft Logparser together with Log Parser Lizard GUI should do the work. Microsoft describes Logparser as a powerful, versatile tool that provides universal query access to text-based data such as log files, XML files and CSV files, as well as key data sources on the Windows operating system such as the Event Log, the Registry, the file system, and Active Directory. The results of the input query can be custom-formatted in text based output, or they can be persisted to more specialty targets like SQL, SYSLOG, or a chart. With LPL you can create and view W3C logs data in tables, pivot tables, charts, dashboards, reports and save in Excel, PDF, Word, TSV, CSV, XML, etc... Log Parser Studio is also ok, but LPL is better looking and has more features. It also seems that LPS is not actively developed anymore by the MS Exchange team. http://blog.codinghorror.com/microsoft-logparser/ https://en.wikipedia.org/wiki/Logparser http://www.lizard-labs.com/log_parser_lizard.aspx 
Run Start Without Debugging (Ctrl+F5) instead of F5, it will not shut down every time.
I'm currently working at a similar kind of mobile project for android and iOS, however we build it in Xamarin. As /u/jamyryals pointed out, I'd suggest to use Asp.net web API (current version). Json.net is irrelevant for you, since your client isnt .net, but since Asp.net web API accepts normal json calls finding native libraries should be too difficult. We are deploying our back-end in AWS. Its fairly easy and it has all the things you'd expect from a cloud service, like auto scaling. It also has some mobile specific features like [Amazon SNS](https://aws.amazon.com/sns/) - allowing you to send push notifications to both android and iOS apps. I have no experience in using Azure for mobile back-ends, so I can't give you a good comparison. Since most Dotnetters are on the Azure bandwagon, just giving my AWS perspective as well. From a financial standpoint, if you're a new startup with a great idea, Amazon will sometimes sponsor you. We get to use all of amazons services for free the first year. (Up to 100k)
Dude I love Shawn. But since this is from November, haven't some things changed? I think he still uses beta 8 in this one. Could I still get away with it you think?
Exactly what I needed thank you!
Do you have any resource about that?
Parallel programming with Linq - https://msdn.microsoft.com/en-us/library/dd460688(v=vs.110).aspx
Well there's two different syntaxes available to write Linq, Query syntax &amp; Method syntax - My example is in method syntax. x =&gt; x.StartsWith("A") is a lambda expression. Here's a link to a comparison between Query syntax vs Method syntax. https://msdn.microsoft.com/en-us/library/bb397947.aspx Method syntax might look a bit scary if you're not used to lambda expressions but once you get a hang of it I think it looks a lot more clean. Ultimately however it mostly comes down to personal preference which syntax you choose to use. Edit: Link explaining lambda expressions. https://msdn.microsoft.com/en-us/library/bb397687.aspx
If you don't need to insert / update, you just do .AsNoTracking(). Not really that big of a trick.
Got it, thank you.
wat
#LINQ IS USEFUL FOR FORKING THREADS ESPECIALLY WITH ASYNC-AWAIT. *** ##[^^^I ^^^am ^^^a ^^^bot, ^^^and ^^^I ^^^don't ^^^respond ^^^to ^^^myself.](https://np.reddit.com/r/CantHearYouBot/)
There is a tool called Zeal. https://zealdocs.org/
1. Sorry you are correct, Azure App Service is a rebrand of the WebApp (old name) stuff I mentioned. An App Service is the managed IIS Container, and the App Service Plan is the group of machines that you run your App Service on top of. You can run many App Services on a single App Service Plan. 2. It's a mix and match of different services that work well together to provide a solution. For instance, if you preferred a relational database you could replace DocDb with Azure SQL Db. Or for instance, you could substitute B2C with a service like Auth0. 3. You can use DocDb, B2C with APS, AMS, or service fabric. 
Anytime he said use beta 8 packages I just used RC1. Didn't run into any trouble that i can remember. However, from what I hear there's going to be a lot changing in RC2 release, like the dnvm system and the way applications are run. 
Yea I heard they're completely regutting RC1. I hope it doesn't break my RC1 apps too much
I don't see a "web" or a disable edit and continue. I only see application, build and debug.
Awesome! Thank you very much Update: the Windows version doesn't appear to work. I changed the docset directory and nothing changed. The sets I selected to download appeared to do something but even after the 100% complete finished, nothing happened and the set were gone from the list of ones to download. Grrrr
replied above
whatever dude, I used a wrong word.
it's more than that.
indeed it is.
While AsNoTracking is certainly the worst offender, it is not the only one. 
1. How much Objective-C did you use with Xamarin? 2. What is your backend environment/configuration?
It doesn't matter. C# and Visual Basic have something like 95% feature parity. There is a really long (but good) message from the Visual Basic program manager talking about the future of Visual Basic in response to a question of whether investing time in learning it is a fool's errand or not. [[link](https://social.msdn.microsoft.com/Forums/vstudio/en-US/53619f54-8593-4563-955f-7642b983222f/future-of-visual-basic?forum=vbgeneral)] PS: I started writing BASIC on an Apple IIc twenty years ago. As soon as I saw C# for the first time, I switched. :)
Why it happened makes a bit of sense if you've got the frame of reference. MVC v1 came out in 2009 or so, it was focused pretty squarely on what the world was using at that point which was fairly heavy-by-modern-standards sites rendered server-side with a smattering of JSON services. At the same time you had WCF which was still relatively fresh and something MS had invested in. They didn't see the need for a HTTP web services framework, and when they did they just folded it into WCF. Fast forward a few years and everyone is doing SPAs and such and needs a simpler HTTP service framework because WCF blows if you aren't an architecture astronaut. But you've got 4 versions of MVC you can't break so you need to build a lot of very similar things in a different namespace which is how we got here. The way it was expressed to me was "in hindsight we should have built the web API and bolted MVC on top not the other way around."
And how do you know is an production app? He's just asking a question ffs.
Use Chrome... The debugger in chrome is awesome and it does support browserlink with visual studio.
Don't disable Edge, just install Internet Explorer with it and have both available.
Even if that is the case, there's no need to be rude. You didn't even provide him an answer, you just came here to bash him. 
That depends on the project. I've got a good chunk of code done in Core for a "real" project I'm working on. The project isn't set to launch until next year, I'm confident the platform will launch long before I do. 
We use it in some of our code to simulate performing set operations and aggregates that would be really expensive on our database. So we select all of the data we need, then perform the operation with LINQ. An example is grouping all rows by a double value that is within a certain distance of a fixed value (maybe 0.5 from a whole number in either direction), then take those groups and perform an average of the values. This doesn't seem bad until you realize that you could be doing this for 100k values at a time. The database can do it quickly but when you have 100's of users it tends to bottleneck. 
I almost started working on a large app when it hit RC1 and Microsoft gave the "go live", but ended up doing something else. I always assumed go live meant there wouldn't be major breaking changes.. just bugs, but after reading about go live recently it definitely can.
you need to set up your signalR hub, with two methods: public void SendGyroData(int data) { Clients.All.recieveGyroData(data); } public void SendAccelData(int data) { Clients.All.recieveAccelData(data); } then, once you've put all the hubconnection boilerplate in (see the tutorial for that), you will automagically have methods available to call that match the signature of your hub methods: myHub.server.sendGyroData(int) and myHub.server.sendAccelData(int) the for recieving responses, you create a method for the hub to call: client.recieveGyroData= function (data) { //Do Gyro stuff here }; client.recieveAccelData= function (data) { //Do Accelerometer stuff here };
Oh yeah, I can see the progression. It's not even SPAs that are responsible for the need for HTTP services, although certainly a contributing factor. Even just internal non browser facing systems are using HTTP based APIs more and more. 
I might be totally missing the point, but why not just insert into a database, and select from the database from the other places with a page load or something. Edit: yeah I'm pretty sure I missed the point, if you're using SignalR then you probably need this info in "real time"
Hi noelster, you're basically describing our solution, www.dotnetreport.com. I don't think you have reached out to us yet, please do contact us. Thanks
Because management said so. FML.
I haven't done anything with that specific use case. Have you tried returning the rows as json instead? I have had success use that instead of set of record
It's actually not that bad, most changes are documented in [Announcements](https://github.com/aspnet/Announcements/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0.0-rc2) repo. There are some other changes, but you should be able to fix them quickly - besides global commands (`dnu commands`) I don't think there were any features removed.
Of course it is an ADO.NET library, it implements all of the required ADO.NET interfaces in System.Data.
RC1 was suppose to be a go-live version.
According to the following article: http://docs.asp.net/en/latest/fundamentals/static-files.html &gt;In addition to the UseStaticFiles, UseDefaultFiles, andUseDirectoryBrowser extensions methods, there is also a single method - UseFileServer - that combines the functionality of all three methods. 
You can just look at the source code and see what those methods do. Then you would have seen that (like /u/jmazouri said) `UseFileServer` is just a comfort method: https://github.com/aspnet/StaticFiles/blob/a8933e5016743e3bf5a5c9c9a5ad9db0b4798a72/src/Microsoft.AspNetCore.StaticFiles/FileServerExtensions.cs#L80-L102 
I don't use aurelia, but I am glad that they are collaborating with aurelia instead of angular.
https://docs.asp.net/ That is the latest documentation, tutorials, and reference material
You should absolutely look into commercially available systems before building your own. Trust me, it's a lot of hassle. That said, if you must build your own, [I wrote a series of blog posts on how to design a database for this](http://www.exceptionnotfound.net/designing-a-workflow-engine-database-part-1-introduction-and-purpose/).
&gt;do you think its good to put the logic on the json file? Not really. json seems best for communicating back and forth between the server and a javascript client. Its probably best to store your business logic back on the server somewhere. Are you talking about some sort of config file that is in json? Even then, i think that there are better approaches. If I were you, I'd look around for some open source projects that come close to what you want to accomplish, and start with that. 
probably because money
I`ve build such systems in the past. Instead of the typical notion of 'roles', I divided users into groups and passed the order to/from these different groups. This had the added value of multiple users at a single position being able to approve the order. Approval being 'move to the next group'. Additionally, there were a number of global states the order may rest in (cancelled / rejected / complete). I really dont like the idea of 'hardcoded workflow'. One thing I ran into was the introduction of new positions and roles. Being able to handle this by simply registering a new group and making it available as a 'next step' for the other groups resolved this issue. &gt; The actions indicated in the json file are the key names in my unity file so i know what logic/concrete class i will inject to the application This smells to me. 
on the real. if your company can swing it. purchase a JIRA license from Atlassan. and if they can host the server and database themselves I would recommend that to save some money as well. Another option I've seen companies use, is Tram Foundation Server (TFS). I personally don't have a ton of experience with it, but it is something that can work pretty well used with the right training. in agreement with others here, though. you should not build it from scratch, there is an overly abundant amount of applications that will do what you're asking
Ooh good to know, More reason to get a pluralsight account - I'll check this out soon, thanks!
Yeah while the docs are a good start - sadly they're nowhere near complete, and there's no progression tutorials. what tutorials or docs that are there i think could be structured better. (idk , i've been spoiled by the Node ecosystems documents like Express, Passport - where you can go from blank project and read around and add modules) I'll probably bring it to the attention of their docs github, and maybe eventually contribute once i know just what the hell i'm talking about (if i ever get to that point)
Any examples of decent commercially available options ? Last time I had a look I couldn't find much beyond your great blog entries... 
Those ancient reply's were directed at a version of WF before WF was totally rewritten for v4.0. Not entirely relevant today, unless you are stuck on IE 8. WF is a graphical language (e.g., no programming required), and appeals to managers with no programming background. But at the end of the day, it doesn't matter if its a directed edge, or a line of code, its "code". Are boxes and arrows easier for you staff to understand? What about exception handling; clearer with a graphical language? IMO, WF is great for a simple demo, but to develop production-quality code, it quickly gets messy (similar to its cousin SSIS). 
FYI, the naming has changed. It's now Core 1.0, not asp.net 5 / mvc 6.
I seriously just googled "Tram Foundation Server", wondering what kind of product that is...ha.
Yeah, i do awful with these name changes- i knew about it, but i still keep calling it ASP 5 instead of core... (Took a bit to stop calling it vnext at first too)
You want to look up "onion architecture", it'll pretty much give you exactly what you're after. Here's a short version (on mobile so bear with me) to get you started: Create a class library called &lt;app name&gt;.core This library should have as close to zero dependencies as possible, nothing beyond just the framework you're targeting. In it, create a folder called "models" and a folder called "interfaces". Your models should just be plain POCO classes, nothing else. These are known as the domain models and they might be identical to your EF models but make no mistake, they're are not the same and should have no EF attributes or anything - remember, zero dependencies! (Data annotations are ok). Your interfaces folder contains (you guessed it) your interface definitions, including your Data repositories with your CRUD operations. You'll define the repositories to take in and return your domain models above. However, no concrete implementations should be in the core. Next, create your DAL and have it reference your core library - this will be were the concrete implementations of your repositories live. It'll have your EF models and the implementation will map between those and the domain objects in your core (Automapper is your friend, though I don't know if it works with the core clr yet). This library should only depend on your core and anything EF needs - it doesn't require anything else, it has no concerns about asp.net, identity or anything like that because all it should be doing is CRUD with a database. Finally, create your asp.net application. It can reference both of the above libraries as it's the outer most layer of the "onion". Wire up your DI to tie it all together and you'll have the start of a really good design. Any time you plan to use some kind of service (be it accessing a database or sending an email or anything like that), define an interface for it in your core. You might want a separate class library for the implementation or you could bundle a lot of the implementations into an Infrastructure library, that choice is yours, the important thing is that your concerns are separated. 
This. Put the logic in the database. It is far more flexible and easier to maintain
You should not put the logic in a JSON file. It will be difficult to tweak later on and hard to maintain. Plus that is not really the purpose of JSON. Instead store it in a database. This will make it flexible, reportable and easy to maintain
Thank you for this, I am familiar with the Onion Architecture model. My question was specifically with Core CLR (asp.net mvc 1 and ef core 1) how to wire stuff up and use the built in DI instead of using say Unity and AutoMapper. My issues are specifically with what libraries to reference in my DAL class library project and also how the wiring of the new connection string works with say and appsettings.json file in the Web project. EDIT: Further questions, I have a C# class library for my say 'TestProject.DAL' project. So if I add DataAnnotations via Nuget would I target the Microsoft.AspNet.Mvc.DataAnnotations (this is the pre-release version, if not I am targeting 4.5)? On the same note, I need the EF package for this class, so again since this project is just 4.0 version how do I specifically target the Core 1.0 version? I added AspNet.EntityFramework Core 1 but there are some errors in the REFERENCES folder.
This was a horrible decision IMHO. Makes googling .NET Core an even bigger PITA. It is still MVC 6 though. They didn't change that one.
If you don't mind me asking, can you give a couple real world examples of how you've used Windows WF? It seems really interesting, but I'm having trouble understanding how it can be used to solve typical business problems and how it would work together with an overall .NET solution.
So, the project I'm currently working with uses it extensively. This project is an audio file processor exposed over WebAPI. The user of the API submits a job, including some media files, and they begin processing. It does a number of steps to the files. Speech recognition. Then some emotional machine learning stuff. Calls some external web services. Posts some data to some external services. Waits for their responses. Basically, you submit a file, and it runs a series of steps on it. Some of those steps rely on external services that have to notify the main job of their completion so it can resume with the next step. There are loops, retry logic, etc. Try/Catch statements. Most everything you can do in normal code. This is built on Microsoft Service Fabric, which is a new Actor framework. Explaining an Actor framework would itself take quite awhile. But the basics: you program your code in normal object oriented fashion, a series of classes that represent your business logic. These classes however are persistent. They have external methods. And some internal state. And the framework makes sure they are always accessible. They are distributed across nodes in a cluster. So, if a node (or multiple nodes) go down, the Actor instances get re-spawned on a free machine. Basically, you just program classes, and instances of those classes wander around servers. And then other external services can get remote references to those objects and call methods on them. The Actor objects can hold references to each other. And call methods on each other. Basically forming a large running graph of objects. Those instances are your Entity model. No database required, you just store your data in the class itself, and the framework takes care of serializing it. I've written a layer that hosts WF on top of the Actor framework. These Actor instances represent ongoing workflows. The execution logic is inside of WF. Which ensures that as the execution progresses, the current state is persisted to the Actor instance. So, when a user submits one of those media jobs a new Actor instance is spawned (on some random node) and it fires up a WF to drive it's execution. When the WF goes to sleep, it saves to the Actor. When the Actors need to migrate between boxes, the WF is suspended and then resumed on the new box. I think it's a massively awesome architecture. Completely resistant to failure. No single point of failure. Processing is automatically distributed across a cluster. And the WF execution lets me write complex sequences of execution logic that persists it's state so that it will always resume and continue execution properly. I can call out to a long running process, and then route the response to wherever the instance happens to be when the response comes in. No matter how long it took. There is no database for persistence. The data moves around with the actors on the cluster. It's thus partitioned. If you want a simple explanation of what WF is, I've found explaining it like this is easiest. Imagine you have some code. Just code. A series of statements. Some loops. Some variables that store data. Some of those steps call out to external services and wait for their response. Some steps just do things. The loops might be loops that run forever. Or they might be loops that iterate data. Maybe some Thread.Sleeps. Whatever. Just, normal program execution logic. Now imagine that while that code was running, it had no required local state. You could just up and save the program while it was running. And then reload it, and it would leave off where you left it. So, you could save it. And then load it on another machine. Or if it hit a Thread.Sleep(TwoDays) it would save itself, schedule a wakeup call with some external service, and then that external service would wake it up when the timer expired. In between it would have been saved to disk. That's WF in a nutshell. A persistent execution engine. Now, internally, it's an insane complicated mess. But, conceptually, it's lovely. As a user who is just programming execution logic, it's sublime. Here's an example from one of my classes. There's a lot of helper methods I've made, so it's not pure WF syntax, but it's easy to see what's going on: http://pastebin.com/LVgxMPq2 Basically, it's an object model that represents execution flow. You can see I've got a nice fluent syntax I'm using for like, Retry and Catch and stuff. That's all my own invention. Activities.Invoke(async () =&gt; State.Bundle = await CreateBundle()) .Retry(60, TimeSpan.FromSeconds(15)) .Catch&lt;Exception&gt;(e =&gt; ReportException(e)), See that code? It basically invokes an async function. It will retry that function 60 times. With a 15 second pause in between. If an Exception is caught, it will pass it to the ReportException method. This actually suspends and resumes every 15 seconds until it succeeds, or the retry threshold is exceeded. That little block of code can conceivably try, then suspend, then get persisted, and moved to a different machine, and then resumed after 15 seconds on the new machine for it's next attempt.
I'm not sure I understand correctly, but it sounds like you created a "classic" 4.5 library project and try to use that together with a DNX web app. That's not gonna work very well I think. You should use a DNX library project.
So, my 2 cents... Do not ever use logic in external files, the likes of JSON / XML. This leads to ... you know ... java like or webforms monolith awfull apps that are incredibly complex and hard to maintain ( even though it's seems a good ideea, don't!). You could do the following thing ( this is what I did ). I build a .json file that store a graph like strucuture with where a certain state go next ( or previous ). Based on this file, I build a mini-wf engine ( simple class ) that takes this graph, analysis the object and the rights of the requester, and determines the next / prev status, ( after development was done, I moved the data form json to the DB in it's own table, think rules..). Then you create a simple basic interface that has 2 - 3 common actions like "Approve, Reject( end of flow ), Send back (1 step ), Restart". The class that use this interface should get the wf engine inserted ( unity or what ever ), and use it ... And then you go... Also, please don't use roles per se .... try looking up action based authorization, it will save you a lot of time and headaches... ___ Sorry for any typos ( using my phone ... )
On point. And actually: &gt; Because sometimes you do not want or need a SPA and a server side rendered application is enough. I'd argue that for most web"apps" I can see cropping up right now, a hybrid/mostly server-rendered approach is *completely fine*, if not better than fully-JS-rendered-SPA. Alas, it's not a 'popular' opinion right now and we end up with JS-everything, even if we don't really have/need to. 
This is the way TimeSpans always work. TotalMinutes vs. Minutes etc. Sucks. 
Have a look at [BenchmarkDotNet](https://github.com/PerfDotNet/BenchmarkDotNet). Obligatory [Hanselman post](http://www.hanselman.com/blog/BenchmarkingNETCode.aspx).
Nusbio.net is a USB device for Windows 7, 8, 10 that bring 8 GPIOS and the i2c and spi protocol to any .NET languages. In some way it provide similar feature found on an Raspberry PI, but directly for Windows. It is very easy to turn led on or off, control LCD screen, or query sensors.
It's pretty logical though. "Minutes" gives you the minute-component of the timespan (i.e. "5" for the timespan 01:05:30) , while "TotalMinutes" gives you the timespan value expressed in minutes (65.5, in the previous example). 
Each OS has a fixed Tick frequency on Standard Windows (xp to win 10 home/pro) its 10 kHZ --&gt; tick count divided by 10000 -&gt; milliseconds so you can have an AcurateElapsedMilliseconds Property with float/double as Type that equates from StopWatch.Ticks/10000 that gives you values that are accurate to the microsecond 
Look at the system.directoryservices namespace. https://msdn.microsoft.com/en-us/library/system.directoryservices(v=vs.110).aspx
Someone should tell Microsoft that Microsoft changed the name: https://www.asp.net/vnext The page still says ASP.NET 5. :facepalm:
Just use the [Frequency field](https://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.frequency%28v=vs.110%29.aspx), so it works everywhere. You may be doing that, but it sounds like you're just dividing by a constant. 
It's not like it's poorly documented.
But there isn't much point to the documentation. If you notice it returns a long rather than a double, it's pretty obvious what's happening and don't need to read it. If you don't, you won't think to read it it at all. This is very much the opposite of a "pit of success".
What bothers me about this pattern is that it relies on session state and so it begins to violate the "stateless" nature of web applications. Is there a way to implement a P/R/G pattern, with similar behavior, but without session state? Perhaps the answer is _don't redirect on validation errors_. Instead the POST will return an HTTP 400 with the same view rendered again (but likely augmented with errors and the user's input). Only redirect when the POST was successful. We shouldn't have to worry about the user refreshing the page since it _should_ result in the same error. This seems to be a fairly accepted approach: http://programmers.stackexchange.com/a/185407/27891 http://stackoverflow.com/a/599105/507 Edit: I've been thinking about this problem a lot recently. And I think modern web applications should take a different approach that relies on the client (the JavaScript running in the web browser) to make the decision. Form submissions should almost always be handled by JavaScript and executed as an AJAX call. In essence, anytime you POST you're making a web service call. Based on the response, the client may do anything ranging from displaying errors to redirecting to a new URL.
That may be a bad idea. If I recall correctly, that switches some settings in your CPU that may drain the battery faster than necessary. Ref: https://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
The logic of the two calls, to me, is reasonable. The logic of using a different return type for what is, essentially, the same thing - that seems a little strange.
Interesting.
Part of the documentation is the summary information surfaced by Intellisense. If you're using a method, field, etc. without verifying it, I don't know what to tell you. If `Stopwatch.ElapsedMilliseconds` was changed to provide the functionality of `Stopwatch.Elapsed.TotalMilliseconds`, other people would make the opposite assumption you did, and it would be just as big a mistake. It's silently (implicitly) casting because there's no loss of magnitude, only precision. That is, the long range is smaller than the double range. Since doubles are by their nature not precise, there's no real point in requiring an explicit conversion. If you find yourself having this problem often, maybe you could make a Roslyn code analyzer to warn you about it. I don't see the need.
&gt; If you find yourself having this problem often, maybe you could make a Roslyn code analyzer to warn you about it. Though I doubt that I will trip over this again, I'm actually thinking about writing that rule just for practice. 
That explains why you wouldn't use long for `Stopwatch.Elapsed.TotalMilliseconds` - but why wouldn't you just use double for `Stopwatch.ElapsedMilliseconds`?
Because `Stopwatch.ElapsedMilliseconds` doesn't return a fraction of a millisecond. If its return type was double, you'd be led to believe that it returns results with fraction of a millisecond accuracy, which it doesn't. Or are you asking why not just make them both return with double accuracy. In which case, I guess because they serve different purposes and it goes back to how timespans work and you can retrieve just the day, month, second, etc portion of one.
You're overriding CreateAnalysisActivity. Is that from the System.Activities namespace?
But that's not how `Stopwatch.ElapsedMilliseconds` works. It doesn't give you just the milliseconds component, but rather it is like TotalMilliseconds with rounding.
&gt; It doesn't give you just the milliseconds component, but rather it is like TotalMilliseconds with rounding. According to the [documentation](https://msdn.microsoft.com/en-us/library/system.diagnostics.stopwatch.elapsedmilliseconds%28v=vs.110%29.aspx) &gt;This property represents elapsed time rounded down to the nearest whole millisecond value. So it is a little odd because it's not just the millisecond portion, **but** you wouldn't expect it to be since it's **Elapsed**Milliseconds. And that Elapsed prefix isn't included in a normal TimeSpan object anyway.
No. That's just some method from one of my classes which is expected to return an Activity.
If I had examples of *decent* options, I wouldn't have needed to design my own. :) Sorry, but I don't have any.
thanks, will try and report back.
theoretically...all the 'new' stuff is .net 5 right? so if the Class Library Package is 4.6 should it matter?
 static void Main(string[] args) { const int bigNumber = 30000000; Stopwatch stopwatch = Stopwatch.StartNew(); Thread.Sleep(TimeSpan.FromSeconds(5)); stopwatch.Stop(); //Check which range we are in. if (stopwatch.ElapsedTicks &gt;= bigNumber) { Console.WriteLine("bigger or equal"); } else if (stopwatch.Elapsed.Ticks &lt; bigNumber) { Console.WriteLine("smaller"); } else { Console.WriteLine("wtf?"); } Console.Read(); }
oooh, that would be nice. 
 Using fs As FileStream = New FileStream(folderPath &amp; "\test_default.html", FileMode.OpenOrCreate, FileAccess.Write) Using sw As StreamWriter = New StreamWriter(fs) sw.WriteLine(System.Web.HttpUtility.HtmlEncode("coucou")) sw.WriteLine(System.Web.HttpUtility.HtmlEncode("test de message, avec accents")) sw.WriteLine(System.Web.HttpUtility.HtmlEncode("école l'été")) sw.WriteLine(System.Web.HttpUtility.HtmlEncode("à crème")) sw.WriteLine(System.Web.HttpUtility.HtmlEncode("slkjhflkasjflaksjf")) sw.Flush() End Using End Using
Parts of it are. I have the helper fluent Activity API stuff published in my project named Cogito at https://github.com/wasabii/Cogito/tree/develop/Cogito.Activities I also have the Service Fabric integration parts at: https://github.com/wasabii/Cogito/tree/develop/Cogito.Fabric.Activities I'm probably going to be throwing them to nuget shortly, but they aren't there yet. Pull down the Cogito project. Open the Cogito.sln file. There are some test projects in there.
Ha, thanks for this. Had no idea and had been happily using ElapsedMilliseconds.
This is quite the roller coaster. Glad I stuck to MVC 5 and didn't fall for the "go live" ruse back in November.
Just delete it the others you don't need or use the empty, it's the same thing. The steps I listed from that tutorial work the same for a new project or the one with stuff in it. But w/e write better docs and submit them. Signalr doesn't work so don't expect it to be in a tutorial
I think this is pretty hard to answer without actually seeing the code. If you can, you might want to consider posting the code to http://codereview.stackexchange.com/.
I've been working on this in my spare time for quite a while now, so if anyone has constructive feedback on the design, code, or technical choices, I'd love to hear it.
Yes, we got 100k free credits to use for AWS services the first year. So we got free servers, loadbalancers, backend, databases etc :)
&gt; in MVC 5 Web Api 2 Those are two different frameworks. `ASP.NET MVC 5` and `ASP.NET Web API 2`.
 Active directory
My first request took about 20 seconds before I was greeted with a white screen, the 2nd request also gave me a white screen but the third request everything appeared. Is this a hosting issue?
&gt; I have a hard time to choose because lots of peoples told me to learn C# and Asp.net too but I've been told they aren't as used anymore don't know if it's true. Whoever told you this, is honestly not worth listening to. They have literally no idea what they're talking about. There are genuinely millions C# and ASP.NET developers in the world - and if anything, I would say that they are becoming more, rather than less popular. Node.js and Angular are becoming more popular, and are worth learning too - but there's nothing to say you have to learn either them or C# My advice is to learn the very basics of web development first - HTML (easy) - CSS (fiddly but easy) Then learn C# and basic Javascript with JQuery. With your background in C++, this shouldn't be **too** strenuous - the syntax is basically C++. From there, you can decide if you want to learn Angular and Node.js too, based on whether you find yourself needing them. Personally I can write in Node.js, but I don't find it can do anything I need that C# can't do. Again, though, you'll find it fairly easy if you can already write C# and regular Javascript
Cool man, I am actually coding up a demo app using a very similar tech stack (not using angular or SignalR). How are you using SignalR, I didn't think it was supported yet for Asp.Net core?
It was pretty cool, yea. Unfortunately I don't have any tips or recommendations for getting that - I wasn't involved in getting it. Marketing arranged it with them. So I have no idea how easy or common it is to get it. From a marketing point of view from their side, it seems smart to give this to startups, since if you start using all their services the first year, you're pretty much vendor locked and won't leave
Thanks guys for putting me on the right track. I ended up making a custom function to replace all ISO-8859 chars with their HTML Entity equivalent. Works like a charm!
SignalR3 is in development right now, and I got that to work. It wasn't exactly a painless process, but once I figured it out it wasn't too bad. If you want to look at how I did it, my commits related to signalR are all prefaced with "SignalR:" and they're from mid-February, if looking through git logs is your thing.
Code Analytics and StyleCop (within reason)
Great job. I did not dive deep through the code but everything looks tidy, well structured and easy to understand, without any obvious flaws. Some peripheral things though: - `m_` and `a_` prefix on field and parameter names... This is not a standard and I personally find it distracting. - `config.json`: Consider committing config.json but with a connectionstring for development mode, localhost and user/pass chirpy/chirpy. Then use the app settings on Azure to override that value in production. Simply add an app setting with key `Data:ChirpContextConnection` to the web app. Next steps: Tests! And continuous integration/delivery.
It is overwhelming. Welcome to solutions architecture! My advice is to do it right yourself (with all the requisite headaches and research that comes with that) or to contract an actual solutions architect who will help you craft the right solution skeleton which you're most comfortable with from day 1. That will give you a reasonable baseline against which to make changes down the line. You could also just reuse one from an existing application sample on MSDN or the like, but caveat emptor. Also, you're not real specific with your requirements here. Is non-Windows deployment a possibility for you? Do you actually need DI? Do you know what tools you want to use for your continuous integration toolchain? Will your solution involve any actual cloud architecture / DevOps / dynamic provisioning? All of those can have a pretty dramatic effect on what you select.
These things depend a lot on what your situation is but in general: - The new "Core" stuff. Actually the RC1 right now, nightlies are too much of a mayhem - New MVC too obviously - Dapper when performance is important, but it can be a pain if you have a large, complex table structure (which is something I try to avoid though) - Always DI - Xunit and NSubstitute
I've been working on a project using Shawn Wildermuth's tutorial myself for some time. I think this is the motivation I need to get digging again. I actually got stuck on populating my database with ID's. First thing I did was go through your commits looking for how you did it. I was using GUID and it was working but it didn't seem right to me...you used .ValueGeneratedOnAdd looks like. I'm busy now but hopefully tonight this will be the missing piece of my puzzle. Thanks! I'm excited to go through it and learn.
Too bad there's not really any mascot for ASP.NET. PHP has the elePHPant and I have a sticker of in on my notebook.
I'm currently using regular .net, asp.net mvc 5, EF, dependency injection (yes)...
I find that if you use a lot of static classes and non-injected code unit tests become a nightmare. It makes mocking difficult and makes it hard to remove third party dependencies in testing. 
Sounds like what you need is a callback for your zoom control so it can notify it's consumer that the zoom value has changed. Without getting too specific, what things are different between the implementations?
How do you unit test those static globals?
I have to imagine that you wouldn't even want to try to use AngularJS with "classic" ASP.net since it's very heavy in terms of server-side based/rendered web controls. AngularJS is basically, entirely client-side (yeah I know there's some sort of "server-side rendering" that is being introduced in AngularJS 2, but I can't imagine that it would still play all that nice with ASP.net &lt; 5/Core. ASP.net Core is a re-envisioning of the tech that plays way more nicely with a plethora of web/JavaScript technologies. My recommendation, and what I'm currently doing, is super-minimal use of ASP.net MVC and then the majority of the UI and controller/business logic is all implemented in either AngularJS (directives, services, etc.) or WebAPI controllers and Entity Framework.
Why would you pick this vs knockout
[removed]
True. But classes that reach out and grab dependencies from static variables are hard to understand when you inherit someone else's code. (Then again, auto magical DI frameworks suffer the same problem.)
Chain for database access, as it hits the sweet spot between dapper and EF. MSTest currently, but really all test frameworks suck for the kind of tests I write. Core/vNext is no where near ready.
I'm not sure there are any tutorials yet, but there is no reason you couldn't. In fact, we are about to start out on a new project and will be doing just that. Angular (both 1 and 2) really just need an API to interact with on the server. You could use node, java, elixir, ruby, or really just about anything for the server side and Angular wouldn't care at all. I would use Web API to do as much of the server side stuff as you can. In our projects (ASP.NET and Angular 1) we only have a single actual MVC controller, and it just has a single action (Index) that returns the main cshtml file. To get them to work together, make sure you know how Web API works and what it does, and then how angular [services](https://angular.io/docs/ts/latest/tutorial/toh-pt4.html) and [the new http client](https://angular.io/docs/ts/latest/guide/server-communication.html#) work. That's really all there is to it for getting Angular 2 to work with ASP.NET: make services in angular that use the http client to call Web API methods. 
Microsoft already has created SPA templates with knockout, added support for syntax highlighting and shit like that. Use your imagination and settle down.
Tie-ins? Oh I don't know, maybe a rich client-side library that made it super-easy to work with all the asp.net controls in a very angularjs kind of way. Not too hard to imagine it. Shit, Microsoft basically implemented it back in the day when you could code your own asp.net client-side web controls. Was it the best thing in the world? No, not by any means. It was pretty cool though and allowed for some cool communication between client control and server aspects of same control. Anyway that was back in ASP.net Ajax days and yeah, thank god that's in the past. Point being, Microsoft sees the error on their ways and relying on any one framework, stack, client/server space too much which is why they're doing ASP.net Corr and letting you essentially use whatever the fuck you want. Oh, oh was that a rhetorical question? Did you not actually want to participate in any actual worthwhile conversation? Got it.
according to [this reddit](https://www.reddit.com/r/dotnet/comments/4fxkew/aurelia_cli_debug_tools_and_microsoft/) microsoft is teaming up with aurelia. so it is not just possible but is happening
No, Milliseconds is the millisecond component of the time span. ElapsedMilliseconds is the whole elapsed time, rounded to the nearest millisecond. 
It mentions working with MS to create VS project templates with Aurelia. That doesn't in any way mean that Aurelia is integrated into any parts of .NET. 
I agree with the m_ and a_ prefix. Makes it difficult to read. My personal preference is to use readonly protected properties (C# 6 -&gt; protected UserManager&lt;ChirpUser&gt; UserManager {get;}) I would not separate out ViewModels and PageModels, I would just put them all under ViewModels and mimic the Views folder structure. Makes it easy to find the corresponding View/ViewModel. I would change your Repository to return IQueryable instead of IEnumerable. Each consumer of the Repository can then take advantage of Linq and EF dynamic query capabilities. If you want to reuse queries, I would suggest add more methods to your Repository for each case or create Extension methods.
There's a huge difference between adding templates/syntax support for something in VS, and integrating something into Asp.Net or other parts of .Net. 
[removed]
* Regular .net 4.6 * ASP.net MVC5 * Linq2DB (+ MySQL) * Dependency Injection Yes (Ninject) * Nunit
it means that Microsoft team is working with aurelia team to make using aurelia with visual studio painless. its a work in progress so I can't say how much will happen. but for sure something will happen.
TL;DR avoid ThreadStatic if you're working with multiple threads...
Supposedly EF 7 is going to be lightweight and will get a boost in performance. Question is, would it be compatible with MVC5. 
You might not be wrong about statics, but speaking from anecdotal experience it's not at all difficult to understand it's usage. At a minimum, code analysis (i.e. "find all usages") actually works and is a huge help.
It does help, but first you need to know what to look for. And it allows your object graphs to become absurdly complicated. 
Lmao what a pretentious douche
It's mostly for testing/demo purposes, though, so we can't complain too much.
I'm in Columbus, OH. There seems to be a lot of Java here, but recently I've had a lot of recruiters reach out to me for .NET positions. Maybe the winds are starting to shift a bit. I've heard people say newer projects and companies are more inclined to use .NET but I haven't seen anything to backup that trend. 
Same experience here, not only has C# and .NET overtaken it in my area. In a city approx 100 mile away where Java was pretty prominent 5 years ago due to a couple of large firms using; recruiters from that area have been reaching out to people in my area to bring .NET devs there as it has taken off. Those companies still do Java development and most likely will not change. But new projects in the area seem to be focused on .NET.
&gt; But instead the large majority don't seem interested in showing that effort or passion for what they do. And that is perfectly fine. 95 % of the people doing coding are not passioned. **It's a job to them.** And that's fine.
People still program COBOL and FORTRAN due to legacy systems -- Java is here to stay, and in sizable numbers. I don't expect to see Java fall below it's current numbers for some time. Which isn't to say .Net won't grow and become more prominent.
Could you name some examples of such tools? I'm not familiar with the needs involved in big data. 
That's fine but having an active interest normally means they are one of the better developers.. I suppose I am thinking more about people I want to work with that just doing the job somewhere
Cool. :) Do you work for a large corporation, a small startup, or something in between? And what are you working on, specifically?
Ok. I was really thinking about what *kind* of systems you participate in developing. But, I guess - as long as you "know your full stack" well, it almost doesn't matter? 
How about IoT, Cloud (PaaS primarily), Big Data, DevOps, etc? Throw those in with typical LOB apps, ERP/Salesforce, CMS, BPM, PC native desktop, mobile, etc. and you've got quite a mish-mash to choose from with different development platforms preferred for each. Java vs. .NET sorta pales in comparison to all of that. Sure, your core languages are always going to be your baseline, but those don't work in isolation; that's all. You have to choose the path that will make you happiest and keep you in demand.
What I end up doing is having my project look as follows: Controllers/ Api/ SomeJsonApiController.cs UserController.cs ViewModels/ Api/ SomeJsonApi/ AwesomeModel.cs User/ IndexModel.cs Views/ User/ Index.cshtml This is my preference (some people like placing all corresponding files in the same folder). In the MVC pattern, ViewModels are just Models, and shouldn't be tied directly to a View (html or json). In theory you can have 2 Actions use the same ViewModels, one being an Api action and return Json, and the other return Html via cshtml page. Make sense?
Wow you've not been paying attention in the last... 4 years? Everything you've just said equally applies to Java. Have oracle lost interest in Java? You know that pretty much *everything* that's come out new in the .NET world is fully open source now, and if Microsoft lose interest, there will be thousands of developers who will want to pick up the project.
Most development occurs in Java and Python, used in conjunction with one or more of the multitude of Hadoop tools out there (Spark, Impala, etc). In my own case it's Google Cloud and BigQuery.
Interesting! I'll stop interrogating you now. :)
I am in DC area so I see the worse of the worse. ON the bright side it makes my average skills look impressive. I constantly using different tools so even though I use SQL a bit here and there past 15 years I am terrible at doing basic SQL on paper without messing around 
How long have you been coding? And, what are you currently working on?
I was. We have been trying to hire another programmer for over a year now. My favorite interview question is "What is your favorite design pattern?". If they can name one and give *any* reason why it is their favorite I'd give them credit for it. The only answer we ever get is MVC, and even that is rare and they can never give a good reason to use MVC over something else. The last person we tried needed help installing Visual Studio. There are sooo many people out there that think once they've finished the boot camp they went to, or finished the 18 month certificate program from their community college, or because they have an entry level MS certification, they are qualified to work in the field. They don't appreciate the difference between knowing a programming language and knowing how to use that language to produce commercial software. We had no self-taught programmers apply. With self-taught programmers at least you know they are a skilled computer user and are willing to learn as they go. I think that a formal programming education can turn a good programmer into a great programmer, but I do not think that it can turn a non-programmer into a programmer. Boot camps are great for uncovering people with an interest in programming, but that is just the first step. I blame part of it on the decline of general-purpose computing. The new entrants to the field simply have no grasp of how to make a computer do something. They may be "digital natives" and they may be more comfortable with technology than previous generations, but if there isn't an app to do it then they can't do it. The first few times I heard one of our best-of-the-worst hires say that they'd have something done by the end of the week, I laughed. After the twentieth time, I just wanted to cry. Edit: Just to add, we are a split shop, we do most stuff in .Net, but we have a ton of PHP projects too. We would have hired for either side of the house. We got even fewer PHP candidates than .Net candidates.
Probably when Google switches to something more sane for Android in the near future Java will implode to a more Cobol-like position where you can work on the same Enterprise application for 20 years on end but new stuff will not be built as much. I work a lot with iOS and knowing Xamarin with a very strong C# / .Net and iOS background is incredibly popular now.
I live near a financial district and there has always been more .net jobs than java at least for the last 5 years or so. Not sure why but most of the jobs I see posted are for various stock systems.
I have worked with "making the donuts" devs before. They never learn or provide meaningful discourse during design. They produce shit code consistently which isn't to say it doesn't meet my lofty personal standards, it's because it's non-functional and illegible to any other dev. How many authors would argue piss poor grammar is fine because they don't plan on the book being read often? A passionate developer writes code for other developers - they give a damn. This leads to a better shop and higher quality product. I don't think every job demands a CS major, but information is more accessible for this field than any other profession. Anyone decidedly drawing a paycheck and nothing more, has no emotional stake, is simply inadequate for most any job.
I can to the conclusion that a software developer years of experience is most over rated quality of a person. Because if they have been maintaining VB6 code for 10 years that is not a good thing The most under rated quality is their personal programming portfolio .. if they even have one
Why would unit testing require DI?
I'm sure you care very deeply about semantics. Jesus jumping Christ you people are pedantic.
I interviewed a recent college graduate who was put forward by a recruiting company. He stood at the white board for 5 minutes before giving up on FizzBuzz. He didn't even write a for statement or if statement before giving up. That interview lasted 20 minutes. I was actually confused as to what to do. I never held an interview shorter than an hour or 2 hours . It was pretty much just GTFO
[Apache Spark](http://spark.apache.org/) is a big one.
I've seen people asking for Web Forms to MVC tutorials and came across this on Pluralsight. I've personally bookmarked it and will give it a watch over the weekend since I've been looking for something like this for a while.
Check out the Stack Overflow developer survey 2016 - http://stackoverflow.com/research/developer-survey-2016 Answers some of your questions very well. 
10 years of experience is different from one year of experience time times over.
.Net over the last 10+ years has been a slow evolution, one that originally was essentially Java. Microsoft has taken that ball and really run with it, to the point now where Java is playing catch-up to .Net in terms of language features and elegance. More important, the newest push to open-source, and the wild shift to .Net Core, along with integration with trending web technologies such as task runners like Grunt, client-side package managers like npm, json project files, transpilers, etc is moving this into an entirely new area. And that new area includes cross-platform development. I wouldn't ask if ".Net can overtake Java", I would say it already has. And as for momentum, .Net has it by far.
&gt; My favorite interview question is "What is your favorite design pattern?" My favorite interview question for web front end is "What is the difference between JavaScript and JQuery?" It is a bit of a trick question, but I have only had one person out right say that JQuery *is* a JavaScript library. * I have had two people tell me JQuery is a framework and makes it so they don't have to use JavaScript. * I had one person that just looked me in the eye and said he had no idea. * And I have had countless others tell me that JQuery is a replacement for JavaScript.
Where do I find these places? My current job is everything Java. Most of the other jobs here are Java.
The worst part about ReSharper is the people who use ReSharper and just follow every advice it gives. - No, you should not transform this 10 lines for loop into a LINQ expression.
I am a .NET developer. I stated my career in 2010 doing Windows forms application development and WPF. After that I went to a new firm to learn web development with MVC. I kept with web and learned Web API and WCF. I am currently developing mobile applications and various web services and jobs to support them. I came out of a technical school, Cincinnati State, where I earned a degree in Computer Programming and Database Management. I later completed a Bachelors of Arts in business admin. I work at a firm called PatientPoint. I very much like what I do for two reasons; I have a sensible amount of autonomy for the code I write and the code I write is new code; I do not maintain a legacy application. My typical day involves prioritizing a series of work assigned to me for a two week sprint. I decide what I can work on based off what information is available to implement a feature and then go from there. I do what most programmers do; asses, plan, write, deploy, test, debug, and start back the beginning until whatever needs to work is working. I have had several jobs since I started. My first was an internship and paid 15 hourly. That landed me a salaried position earning 50k annually. I left that for a job making 80k annually, and then took another making 90k annually. After that I had a brief stint at a place making 105k annually but with crap benefits. I left them and currently make 98.5k annually with better benefits. Kudos to you on the start of a great career. I hope you enjoy programming as much or more than I do. 
But its **not just a job.** It's a career and should be treated as such. 
For many people it's just a job, and that's fine. It doesn't need to be a career for everyone. They want to go to work and do their part, then go home and spend time with their family.
Yeah, and going home and spending time with your family is 100% OK. But when your at work you should be at work and focused on doing the best job you can. A lot of people that its "just a job" for forget that. Programming isn't working the checkout line at Safeway. 
I had an interview last week where I was asked (in .net) what the difference between *const* and *readonly* was. Of course I blanked, that's not something I've thought about since college, but the interviewer said in all the years he's been asking that question he's never had anyone get it right, so I recited some vaguely correct sounding bullshit about how one was defined at compile time and one was defined at run time but that I wasn't quite sure because it's been 8 years since I studied for a university test. He said "Well I guess I can't say I haven't had anyone get that one right any more!"
while the legacy software will provide job for javaboys for a long time, most (maybe all?) new projects I see are .net stack
The resharper refactoring tools are invaluable, they take a while to learn them all but once you do it will make a huge difference to your coding speed.
"Give me six hours to chop down a tree, and I will spend the first four sharpening the axe." - Abraham Lincoln The more time you spend learning ReSharper and configuring its plethora of options, which can take hours, the more you'll get out of it. I've used it for years and keep encountering features I didn't know existed, like I just learned yesterday that typing "nguid" will get a GUID generated on the spot. The plugin ecosystem includes spell checking, xUnit test runners, AngularJS code completion, etc. So if it doesn't have some functionality you want out of the box, someone might have written an extension for it already, or you can DIY.
&gt;The plugin ecosystem includes spell checking, xUnit test runners... Replying to make others aware that these 2 extensions specifically are available without resharper. They're just nicer with reshaper.
Because it allows me to inject mock objects into classes I'm testing. With unit tests, I'm always assuming that everything else is working 100% and the way to ensure it is to mock those objects. As soon as the unit test starts touching on many different parts of code it no longer is a unit test in my opinion.
I wouldn't do any serious work without it. I barely notice a performance hit myself, but obviously this is very dependent on your machine and environment. Go to file / go to symbol are my most used functions, followed by various basic refactoring tools like extract interface, rename files / symbols, change method signature etc.
Uhm, yes you should - If that makes it easier to read. Edit: However I agree with the fact that you shouldn't blindly do as it says, but a lot of its advices are really handy
There's basically already no java jobs in my area. .NET is completely dominant.
https://www.asp.net/web-api
hahah, yeah sorry about that. I was responding on Mobile and naturally you can't put anything in writing without fat-fingering a word. Does any of the above seem helpful or make sense though? I'm curious if this actually fits your needs of the question.
you'd be correct
I've been waiting for Dart since theyve announced the language. It's basically Java with more C# features like properties and async-await but due to Android being built upon the JVM I don't really see them adding non jvm languages soon.
To be fair, unless you're hiring a game developer he should've thrown the paper at you to start. Coordinate space, collision detection, bullet mechanics, there's tons if stuff that only exists in game development 
I'm in Cleveland and it's mostly .NET. Big companies are incredibly slow to move to things within an ecosystem, much less to a different ecosystem entirely. 
A brilliant tool and definitely increases productivity and improves the code base in general. It is an absolute resource hog on all versions of VS if your machine is not a powerhouse. I have used it on client sites with pretty poor machine specs, that have ~15 projects per solution, and it drastically reduces the usability of VS. I have used it with more powerful PC specs i.e. home PC and laptop (8 core, SSD, 16GB RAM and it's naturally a lot more enjoyable with the larger solutions).
It was not meant to really be the details of a game but just the very basic logic to see how his mind work.. anyways wasn't my idea.. I think they stopped using it after one of the candidates from India said 'What's space invaders?' 
This is absolute baloney. Plenty of businesses focusing on cloud, SaaS, web, whatever, will be Java shops. Netflix is almost 100% a pure Java shop. AWS's services are mostly done in Java. The JVM ecosystem is probably bigger today than it ever has been. Lots of the distributed system and big data tools are written in Java or on the JVM (Kafka, Hadoop, Spark, Cassandra, HBase, ActiveMQ, Jenkins, Mesos, Chronos). The Java community is huge. The build tooling is some of the best in the industry. Java is still almost 100% cross platform. You have a good amount of languages to chose from on the JVM supporting all different paradigms, most of which are production ready (Scala, Kotlin, Clojure, Groovy...). The frameworks and libraries are extensive (Spring, Guice, Play, JEE, RX, Camel, Hibernate, Netty, etc etc). Testing support and tooling is probably the best in the industry. IDE and general tooling is vast (IntelliJ is the best IDE I've ever used). Java's OSS community is still massive compared to .NET. For now if you want to do any web dev in .NET you're still tied to Windows and _mostly_ the .NET standard library. Most services focused on scaling and high availability will be running on Linux, and Java becomes a natural choice. It's also significantly less expensive to run a Java shop than a .NET shop in pure licensing costs. Maybe when .NET goes truly cross platform and open, it will gain more traction in this space, but for now, calling Java a bad career path is simply false. Source: I've been a .NET dev for ~3ish years and a Java dev for roughly the same amount of time.
I never understood companies who look for these amazing kinds of candidates who can develop games in their spare time and want 15 years of experience from entry-level people to come in and work on basic html/js... they offer them shit pay and then don't allow them to think at all "do it our way, don't deviate, you need to follow our shitty template and shitty process, no we don't need your feedback"... they'd probably be better off hiring a seal to perform trained tasks.
No he doesn't, he says that they're often more likely to be good at their job - And I really agree with him. I'm not the type of person that's got a ton of personal projects but I am still really passionate about my job and an interviewer would notice that. I read up the things I use and make sure I understand what I'm doing. I always go the extra mile in my code, because I care about it. That's just not something a lot of just-a-job-developers do and it affects everyone around them.
Create a UserControl that contains all of the controls and code for setting them (dataBinding makes this super simple IMO). Then add a copy of the UserControl to each tab. If you structure your settings into a class, then you could just pass the instance of the class to each UserControl and wire up settings from there. 
The primary issue is the people that do the hiring do not understand the tech. There is that disconnection. In the old days you laid bricks and one day you supervise the other brick layers. Also, if someone needed help they come to you since you have done this job for a long time. In the tech world the tech people and managers come from different paths so they cannot understand what they want as far as hiring. Except when it is a small startup where it is dominated by tech people who know what they want. I have been in both.
Just a quick tip (didn't watch the videos, but from the titles wasn't sure if this was in there): if you isolate business logic into a business logic layer below the WebForms front end, then the swap becomes easier. E.g., make your code behind as thin as possible and remove as much from it as you can into another layer. WebForms and MVC really should just be providing the routing of calls to specific business logic code, and various cross cutting concerns (e.g., authentication, session / other HTTP specific concerns, and in general other things that you would want at the top layer and wouldn't want leaking down your stack). If you rearrange the app that way first, MVC becomes a reimplementation of just that top UI layer instead of "oh god we have to rewrite the entire application". This is also one of the reasons you'll see a lot of people advocate for an N-tiered or similar architecture, and away from "fat controllers" and "fat code behinds". There's enough to learn on just that layer that isolating the actual domain model down into a business layer will let you deal with the "how does my app work" separate from "how do I route user requests into my app and return data to them".
My biggest barriers include time, CPU resources, and the configuration learning curve. I have already learned a lot of the hot keys assigned to VS and I find it irksome when they are changed by Resharper, though in its defense it does prompt the user to select which hot key he or she wants to use. 
Your question seems too open ended. You need to be more specific. If your 'resource' or a link to what the resource is stored on a table, you can always add a userid with the resource. Then you can just filter based off of the userid's. 
It has it's problems, but overall I think it helps more than it hurts. My biggest problem is that some of its default suggestions and code cleanup rules can severely hurt performance, depending on the project. And a lot of the default warnings are annoying and absurd. But, once you spend a few hours tweaking various rules, it's nice to be able to cleanup your code with a single keystroke. 
When installing, you can choose not to change any shortcut keys. And if you don't change the shortcut keys, you don't get nearly as dependent on it. There are multiple icon sets to choose from, and one is nearly identical to 2015's flat icons. Once you get it installed and configured, you can clean-up your entire code base, according to your rules, in a single keystroke.
&gt; For now if you want to do any web dev in .NET you're still tied to Windows That's not true.
What version of asp.net are you targeting? Start looking for asp.net Identity tutorials. Bunch of em on the web/YouTube to get you started 
OK, so you can self host some ASP.NET stuff outside of IIS on Linux with Mono, but you're limited to that and coreclr right now. Everybody mentions it but have you ever done it in production? Rarely people say they have. Mono has always been a mixed bag for me, and I personally would never run anything on it in production for the sake of being cross-platform... particularly when you'll get massive performance boosts from using something on the JVM, which will be cross-platform out of the box.... unless you just like C# that much that you can't live without it. Also still a bunch of the older stuff is going to be tightly coupled with IIS for the foreseeable future, until there is a clear path forward from the ASP.NET team on how to run fully cross-platform. I really think MS is doing a great job in that department... making their stuff OSS, cross platform, etc, and making it a priority for the company... but lets face it, we're still some ways off from having fully featured cross-platform web development in .NET.
&gt; What is your favorite design pattern? Ok, another shop to avoid. I'm grateful that I'm to the point where I don't have to deal with people who confuse rote memorization of questionable books with actual skill. &gt; The only answer we ever get is MVC, and even that is rare and they can never give a good reason to use MVC over something else. A legitimate design pattern usually has no feasible alternatives. You might as well ask for alternative ways to drink water from a glass.
Ask them to write a program that uploads a file containing names and birthdays. Then provides a UI to get everyone born in a given month. This should be emailed after the phone screen. Your actual interview should be mostly a code review. Have them demonstrate the code and then explain each piece. You'll learn more about them in an hour than you could with a full day of trivia questions.
I work alone for a small company at the moment. I would love someone to work with who knows more than me since I can learning quicker when being around smart people. Explaining on a high level how to put a program together shows me if they can get work done on their own or need to be taught everyone step. Also, there was a lot more than just that. 
Then have them put together a program that's relevant to your line of work. Since you said CRUD: https://www.reddit.com/r/dotnet/comments/4gpko1/anyone_who_interviews_surprised_how_bad_and_how/d2le177
That was part of the interview. I think just looking at some existing source code and having them walk me through what they understand is the best way since what the person sees is the codebase he will be dealing with. In the same way when I use some code from GitHub I can click around in the first 5 minutes and talk about it Just saying. How do you insert data in a table doesn't tell me much 
C# would make sense to be able to entice iOS developers to come over and develop for Android. :o Or advertise that their new language choice for Android makes it cheaper for mobile app development shops to operate. :)
[See my comment here](https://www.reddit.com/r/dotnet/comments/4gvpqo/asp_mvc_tutorials_on_user_management/d2lnooa). You can extend this as far as you want to go. I also apply a custom *[Audit]* attribute, that inherits from **[ActionFilterAttribute]**. This is done in the *OnActionExecuting* method for the attribute. When I apply this to a method, I can log information such as what user is attempting to access what functionality, the timestamp it occured, etc, with a link back to the ASP.Net Identity for that user, giving access to anything you could need. The resulting code for that is as simple as adding that new attribute: [Audit] [Authorization(Roles.CanDoSomething, Roles.CanDoSomethingElse)] public ActionResult Index(int? id) { }
Licensing has held back universities and other organisations from jumping into .NET. Hell, Google hesitated in the past to go .NET instead of Java. With .NET truly open-sourcing and going cross-platform and think it should really hit its stride. I can only imagine how it would be had they taken this road from the start but that was a very different Microsoft back then.
Funny thing is Google opted for Java over .NET to go with the more open platform and not get into legal issues. They couldn't predict Oracle gobbling up Java and Microsoft changing for the better.
This SO entry may help? http://stackoverflow.com/a/14495797/1370442
Oh hang on, if your button is added dynamically, you need to make sure it happens before ViewState is applied. Google .Net Page Lifecycle. Your controls have to exist in the hierarchy with the same IDs before ViewState is applied, so the event handlers and everything know to fire. If I remember correctly, I used to override Init in my UserControls and add my dynamic controls there. Be sure to call base.init inside your override though. 
Idiot.
Can you post some sample code of the datatable, and a couple of rows of sample data and elaborate a little more? I think I kind of see what you're saying, but a little more code would help. 
In what way is it not? It's like asking "what's your favorite tool?" then expecting a comparison between hammers and screwdrivers. I've never met someone who asked a question like that who actually knew what he was doing, but boy could they recite books. I'm a .net programmer mostly. The vast majority of the design patterns we use can be found in the .NET Framework Design Guidelines. In that book most of the design patterns don't even have names. The few that do are just named for the interface they relate do (e.g. IDisposable).
 Sorry about the formatting, i thought I had spaced everything out correctly. public partial class MainWindow : Window { XDocument doc = new XDocument( new XElement("Content", new XElement("Title", "DM Title")) ); string par = "par-000"; string par2 = "par-0001-000"; int counter = 1; int counter2 = 1; public MainWindow() { InitializeComponent(); } private void create_Click(object sender, RoutedEventArgs e) { // parent step if (dataBox.Text != "") { doc.Root.Add( new XElement("proceduralStep", new XAttribute("id", par + counter), new XElement("para", dataBox.Text))); counter += 1; dataBox.Clear(); doc.Save(fileName.Text + ".xml"); } // child step if (subDataBox.Text != "") { doc.Root.Element("proceduralStep") .Add( new XElement("proceduralStep", new XAttribute("id", par2 + counter2), new XElement("para", subDataBox.Text))); counter2 += 1; subDataBox.Clear(); doc.Save(fileName.Text + ".xml"); } } private void save_Click(object sender, RoutedEventArgs e) { doc.Save(fileName.Text + ".xml"); savedLabel.Visibility = Visibility.Visible; } }
1) How are you adding two instructions from the subDataBox? You have one box but are somehow adding two subsets. 2) Para2 never has an increment change, meaning it'll always be 0001-000 even when it should switch to 0002-000. 3) doc.Root.Element("proceduralStep") will try to select the first element that has that name (element), since both of them have the same name, it'll pick element 1. I use Xpath to select by id.
Unfortunately that isn't a possibility anymore. Not sure I have enough time, the project is due within a few days. Been struggling with this bit for a day or so.
There are the jobs where you have to complete a test before you can even interview.. I have mixed feelings about that .. When I am running back and forth between interview I don't want everyone giving me a 3 hour project
Your concerns are valid. That's why my test so so simple. A veteran could knock it out in half an hour with a hangover, and we give them a week. 
I think of it as FizzBuzz for database developers
You can get better answers if you ask your question on [stackoverflow.com](http://stackoverflow.com/)
You can get better answers if you ask your question on [stackoverflow.com](http://stackoverflow.com/)
Based on a very quick search, WSO2 appears to implement OpenID Protocol. I suggest taking a look at [IdentityServer3](https://identityserver.github.io/Documentation/).
I came here to say NuGet. We use it at work and it's wonderful for the exact reason OP says he needs a solution for.
Local Nuget server thirded.
Only if you are using it wrong. All source control has issues.
What about TFS with Git integration? My team is on TFS.
I have a bachelor's in Comp Info Systems but went into project management. About 4 years ago I decided to transition into web development and spent time studying html/css, javascript/jquery, ruby on rails, python, and postgres. Avoiding the long story, I inadvertently wound up employed as a .net developer. I write Web APIs and AngularJS to consume the API. Most of the day I spend trying to keep my heart rate and blood pressure down because I'm so frustrated at Windows. When I left my job in 2012 I decided I did not want to develop on windows so from then until June of last year I never touched a windows computer. I'm sorry, I'll stop there with the OS. But since all of my studies were with dynamically typed languages I never learned IoC pattern. I spend a good portion of my day googling error messages but not sure if it's a problem with my syntax, with me using IoC incorrectly or what. And so many of the error messages seem to be generic to many different aspects of using C# as a language I rarely find the answer(s) I need and wind up going to a senior dev. Do I enjoy my job? No. Does it pay the bills? Yes. Should I be looking for a job using another language? Yes. 
Would you share with us why 2012 and not 2015? 2015, especially with Update 2, has support for Git, multiple repositories per project, an updated easy-to-manipulate build system, and a new release/deploy management system.
Mostly, because it was purchased and installed by another team about a year ago, before 2015 was out. We've been so underwater with onboarding new projects, we haven't really had a chance to start using it until now.
Been using EF for awhile now but didn't realise that about lazy loading, I think it might require some more investigations where I'm using it
These tips are a bit misleading. Really tired so I won't go too much into detail but: *Select is a bad idea in most use cases.* You loose out on change tracking and the local context ( which acts as a cache for the lifetime of the context ). Additionally, please consider that pulling data from additional columns doesn't really impact the subtree cost / cpu cycles, only the size of data returned. You can work around that by using split table mapping, or simply not mapping certain columns which is a much better option. Complex select statements ( selecting ordered conditional groupings, with anys and extra statements ) quicky become extremely expensive subtree cost wise. It's often best to simply pull extraneous data down to the C# level and then doing grouping/filtering there. I went through a phase where I thought EF's Select is awesome - it isn't. Now, I preach that 99% of your queries should not have a EF select in it. *Lazy Loading*: Sucks for Web Dev, useful for desktop apps. Including many to one relationships is fine, but be careful about including one-to-many relationships. It'll multiply the returned data. Once you get to 3-4 includes you should consider splitting it up into multiple queries. Better to have 3 queries with 3 joins than 1 query with 9 joins. As for inefficient queries, the example given is horrible. There's no overhead on the example. Just because it parameterizes the query and uses more explicit names doesn't mean it's worse. I agree that some queries as they scale in complexity are not suited to EF, but consider the skills of your team mates. Most of our work happens on the C# side of things, so we made a conscious decision to move away from stored proceedures in almost all circumstances ( the exception being atomic operations, since EF does not support that ). This is because we want to keep the logic unified in one place. We deal with EF's shortcomings by keeping queries simple, leveraging caching and letting C# deal with more complex groupings and mathematics. It's been working out well for us. The most important tip that i've learned is that EF is actually not bad or inefficient, all the performance trouble I've run into had been from misconfiguration, either on the DB or in EF. Got any varchar columns in your DB? You either alter it into a nvarchar, or you explicitly tell EF to treat that column as varchar, otherwise it'll cast every single row to nvarchar on every WHERE against the column. ( Fun 250 subtree cost wheres! ) Make sure that null semantics is set to true to further reduce load issues. Never use foreach loops with lazy loading.
&gt; Notes about my own experience migrating from RC1 to RC2 &gt; literally nothing to do with rc1-&gt;rc2 migration
If there isn't too many columns do a PIVOT in SQL?
Read only is mutable only on constructor, const is literally that, constant :-p I'm somewhat surprised anyone doesn't know this, is immutability not that important to people?
The read only part shouldn't matter to either with respect to the difference, the difference is between on how they're treated when being passed on stack vs heap and copied vs referenced. I could be wrong on this, can't say I've ever thought about the comparison of the 2.
Umm what, IDisposable as a design pattern? Also that book is about guidelines for designing APIs if memory serves me correct. The general bible is the 'Gang of Four' which has about 16 of the most common patterns. If you don't understand names like 'Singletons, factories and Facades' then I don't know how the fuck another senior Dev could communicate with you without needing to verbosely explain their intent rather than using the typical canon. Decs should know the names of the typical patterns for atleast the ability to effectively and efficiently communicate. You blowing this stuff off comes off as immature.
I'm almost certain it's a problem in IIS due to thread agility (your code thread is put on hold and shifted to another thread, your thread statics don't move with you). Becomes a problem under high load and is almost impossible to accurately reproduce ( due to it being at the whim of IIS).
That's a pretty specific use case right there. Not sure I've ever needed to use a spin lock in 2 decades of development. Then again, different careers, different software requirements. Practically speaking, what have you worked on where you required this? 
I wasn't expecting a language specific keyword pop quiz for a senior developer position. It's not the kind of thing I've actively thought about since my first year of college, I just kind of sort of use without thinking about the specifics. Like asking a native English speaker to enumerate the rules for conjugation. You use it every day, but you might not be able to answer specific abstract questions about it on the spot.
Not trying to be a jerk here at all, but why not just use the C# events or a message bus?
Just as an exercise? I sometimes like to rewrite code in other languages, just to understand how it all works.
That is not at all the case.
IMHO the Core version is still too unstable to use in production, and I have heard other, more experienced developers say that fundamental features are still shifting; unless you have portability or self-hosting as a critical feature, stick with the current tech of ASP.NET 4.6 and MVC 5. Besides, there are a lot more people out there who can help you with the current technologies, and it is very well documented. I learned this myself when I got back into DotNet programming after a 10+ year hiatus (I used to work with classic ASP). If you run into trouble, you will have a much easier time figuring things out with a metric arseload of other people out there working with (or having worked with) the same tech. Besides, it is proven tech, any bugs or “features” are well known and have viable workarounds. Good luck, and enjoy dem greenfield projects! I always find greenfield projects to be much more fun than maintaining and/or refactoring because if you fully grok the project requirements, you can take the time to set the project up *properly* from the foundation on up. I have seen so many projects where they failed to lay the proper groundwork ahead of time, and the thing turned into a right Frankenstein. At that point it’s almost easier to nuke from orbit and rebuild than refactor it back into a proper state.
Great reply thank you. I couldn't agree more with you that a good foundation is very important. That's why I always lay everything out regardless of how big the project is at the time of conception because it could easily grow. 
I'm just speaking from my experiences working for EF for the last 2 years. I moved away from using SELECTs and keep EF queries as simple as possible. I prefer leveraging mapping techniques to shape the returned data over using SELECTs. We have not had any issues with indices, and performance has much improved since we moved towards pulling more data and having C# do processing. To clarify, with my proposal / tip of using split table mapping, you can still leverage covering indices. What split table mapping does is only expose a pre-defined set of columns on what EF perceives to be a table, so any access to the table will benefit from the covering index - which also ensures your devs use and re-use the covering index. You can then implement fake foreign keys that lead to the other columns on the table to get a combined data set if you need it for your use case. Totally agree on CQRS.
Posted it in the other response but I figure it bears repeating here: To clarify, with my proposal / tip of using split table mapping, you can still leverage covering indices. What split table mapping does is only expose a pre-defined set of columns on what EF perceives to be a table, so any access to the table will benefit from the covering index - which also ensures your devs use and re-use the covering index. You can then implement fake foreign keys that lead to the other columns on the table to get a combined data set if you need it for your use case.
He could just want to practice open-sourcing software. I just hope he doesn't take Node's events to C#. Node made the event emitter because it has no way to do multi-threading (or didn't have, Im not up to date on Node tbh) or Async I/O. C# can easily do both, so there's no real need for Node's paradigm in C#.
What will be easier - porting ASP.NET 4.6 -&gt; Core or Core RC1 -&gt; RC2 and then rtm? I'm thinking it is kindof a good idea to start with the Core RC1 right now and move on as MS releases new versions.
In fairness, the newly rewritten build engine in TFS 2015 is basically identical to TeamCity (no surprise, TeamCity had the "right idea" from the start). I'd still use TeamCity ;)
Can you upgrade it? Shouldn't be hard especially if you haven't customized it 
If this project is for public consumption or is one to be launched into a mission critical, heck for that matter any type of production environment I would HIGHLY recommend staying away from ASP.NET Core. IMO you will be limiting your exposure when releasing the application to the public due to the fact Core still looks to be a ways off from being anywhere near a stable release and until it is stable most everyone will be not be willing to run ASP.NET Core in a production environment due to the fact Beta/RC software is not meant to be run in a production environment. If this is in fact a production application to be used in any type of production environment it would be insane to use ASP.NET Core and if you were a developer under me you would be taken in the back and slapped around for a bit for even thinking of using it. :P BUT... If you are creating the project to teach or learn a new technology then go for the latest and greatest. That way "when" Core blows up in your face or they change some function your application depends on you will not have to worry about taking a business down or scrambling to release a pointless patch. ASP.NET Core is Microsoft's first true venture into the open source world and you can see it is taking them a bit to get a grasp on the concept when it comes to putting together a stable release. Give it time and don't rush into it. Let them figure things out and get things stable before diving head first into an unstable not for production release unless for learning or training purposes please!
Honestly if they do not have an easy way for me to port at least my existing ASP.NET 4.5/4.6 or MVC 5 apps over to the ASP.NET Core once it is a final release MS screwed the pooch on this one.
I got a real nice chuckle from his comment about the ugliness of the query. While that can sometime be true, what the author was lamenting was actual proper SQL usage to avoid SQL injections, aka parameterized queries. 
You have a pattern of using Un-needed else statements: if (!_events.TryGet()) { throw new Exception(); } else{...} Since your checking and throwing if you don't have a value from the tryget call the added else is redundant, meaning if you throw the exception you'll never hit the else, and if it does have a value you'll always hit it... 
The issue is that RC1 doesn't look anything like RC2. The tooling has all changed and the refactoring and name space change will break everything... 
Thats not the point/or intention of this release... Did they screw the pooch when they released MVC/WebAPI without being able to port web forms? 
The point of ASP.NET Core is to make ASP.NET cross platform not introduce a new method by which to create software so no... EDIT: I can see Web Forms going the way of the dodo bird just like VB.NET which as much as MS says it is not they seem to be doing a good job at phasing it out but current MVC apps need to have an upgrade path. They honestly cannot expect everyone to start over from scratch again like the Classic ASP to ASP.NET days...
Don't forget that they actively **removed** features that were available in RC1, with no intention of re-introducing them in RC2 or any later version.
This is terrible, what are such things removed ?
Rule of thumb - never use any framework/language until the 3rd iteration. For example: MVC wasn't really good until MVC3 (5 is great) Angular wasn't good until 1.3. Think of it like this. v1 is rushed. v2 fixes everything that was broken in v1. v3 adds everything that is needed to make the framework/language complete and useable. Plus, by v3 there are enough examples and documentation available to fully learn it.
Is the learning curve for EF greater than just learning ado and sql?
Depending on the complexity of the original WCF service it can be as simple as creating a new Web API project and copying all the methods from the WCF service implementation into a Web API controller. Yes, as far as the client side, that will have to be completely re-written as a web page.
EF sucks for updates because it can only do whole rows, not just the columns that actually changed.
That's exactly the same thing from the database's perspective.
Yes. I've yet to find a use case that EF is actually good at handling (except stupidly large object graphs). By the time I force it to behave correctly, I've spent far more time than I would have doing it with raw SQL. 
&gt; Additionally, please consider that pulling data from additional columns doesn't really impact the subtree cost / cpu cycles, only the size of data returned. LOL 
 var results = db.Customer .Select(x =&gt; new { x.State, x.Name, x.Address, x.Email }).ToList(); How about this instead: var results = db.From("Customers").ToCollection&lt;CustomerEmail&gt;().Execute. You get the same SQL, but without having to manually map columns. And if you decide that you need another property in CustomerEmail, you just add it. You never have to worry about forgetting to update the column map. https://github.com/docevaad/Chain/wiki/Object-and-Collection-Materializers **** SELECT State, Name, Address, Email FROM Customer WHERE CreateDate &gt; ‘2016–04–01’ In Chain: var results = db.From("Customers", "CreateDate &gt; @Date", new {@Date = date}).ToCollection&lt;CustomerEmail&gt;().Execute. Note that the `CustomerEmail` class does not need a CreateDate property. It knows what columns are in your database.
Web API is a better fit for JavaScript-based clients. WCF is for everything else.
Well, you are not meant to close the context after every query. For web apps, the context should live on a per request basis. For desktop apps it depends on the size of the data and length of the user's session. It becomes especially important when you want to process multiple changes as part of a single transaction. With the local context and change tracking all parts of your application will use the staged entity rather than pulling down the database version that might not have the latest changes. 
If I could make all of the changes within the scope of a context's lifespan, then I would just use a stored proc and avoid the round-trips to the database. But most of the time, the read and write are on separate web requests or otherwise so far apart in time that I can't really leave it open. And I don't exactly like consuming a connection for that long. I know I'm allowed a hundred per pool by default, but it's still a shared resource. 
You could try with Xamarin Studio or VS Code, VS is not supported
I'm currently running vmware fusion for VS/SQL Server. If you'll be doing a majority of dotnet, I recommend a similar setup. VS Code is an open source editor that includes barebones VS features (you get intellisense, and the extension library is growing). You could then compile programs using mono. 
If that's your use case, then that is fine. Most of our web requests are single purpose RESTful calls, but we also have some cronjobs and OLTP needs that require a blend of data updates, C# processing and vendor calls. The context only abstracts the connection anyway, so you can have far more than 100 open EF contexts at the same time, they just can't all query at the same time. For us running the context on a per request basis and staging all changes to be executed in a transaction has been working very reliably. Use cases vary for sure, but it does not make this a less valid approach.
I use a MacBook Pro for .NET development and I love it. I'm developing AspNet 5 RC1 stuff in VS Code right now which works very well. I believe VS Code will only get better with debugger support etc, and around the corner you have Project Rider with the Resharper engine. The new AspNet5/Core environment is awesome and you'll learn to love how it's not so tied to VS anymore and that it's very easy to control from the command line. I have some nodemon commands running always which executes all tests and recompiles/restarts the server as soon as a *.cs file is changed. When I need to open older projects I have Parallels which works pretty well. I even open new projects there sometimes to get that sweet Resharper formatting and refactor support. It's stable but a bit slow, and unfortunately it drains power and the machine gets very hot. If you expect to work at a desk with the power plug connected mostly, this is completely fine. On the other hand, if you intend to sit like that all day, you might as well get a PC laptop. To summarise, if you intend to work with AspNet5/Core primarily I'd say go for it. Otherwise I think you really need to think about this switch twice.
If you don't want an API just build write the data to a JS variable in your razor. var locs = ["@(String.Join("\",\", Model))"]; Note: this probably isn't valid Razor but I hope you get the idea.
It does, but it has always been a bit of a kludge that few people were happy with. WebAPI was originally called WCF WebAPI because the WCF team themselves were unhappy.
Yeah, in this case i was running Windows 10
Well yes, if you have a trivial query *and* don't have any appropriate indexes *and* are literally reading every single page of the clustered index *and* the tables are narrow to begin with, then the differences are going to be fairly small. 
I actually asked a candidate (based on something he'd previously said) what the difference between Java and Javascript was. His response was that Javascript was the newer version.
Okay so it sounds like you want to bind data to a page with Ajax in the back ground with out having to reload the page. If that is not it please try rewording your question. To first answer your question &gt;"is it really required for me to define one controller that will provide the model data to the server-rendered page, but also provide a WebAPI controller so that Backbone can work with it?" You can use the same controller you don't need to define a separate one. So the MVC patterns pretty much allows you to group methods for similar pages (or one page) into a single controller file. You can of course create other methods in the same controller to fetch data. So you would have a method to load your page in that controller and another method to take the data you fetched and converts it to JSON so that javascript on your page can read it via AJAX. You can also do this with a separate API controller. API controllers help give some structure to how your API methods need to be named and what kind of HTTP requests match up to expected actions; if you intend to use an API controller I strongly suggest you read up on how to implement the pattern. What I see as being a difficult hurdle from your question is. You mention that you wrote C# razor code in your view to render data you passed to the view. You need to understand that the C# code wrote in the view is compiled to HTML. So after the page is encoded into HTML and sent to the client; then there is no data binding and the connection is closed. So you would need to have javascript call out to your API end point to get the new data and update the pages HTML. So now you have 2 methods of code to populate data on your page; one does it on page load and one does it in real time after the page loads, this it totally valid. But I would suggest you consider having the page load with no data on it; load the page faster, no need to round trip to the server before being able to start delivering the page to the client, less razor encoding, etc. Then in the pages document.ready method you could have the control on the page immediately call out to your API end point for data. The real trick here is getting the TTFB "Time To First Byte" down so it appears faster to the client. While the browser is still working on the page rendering it call be calling back to the server for delayed data binding making the page appear to load faster for the user. Also then you only have 1 method for populating the data on the page vs 2.
I know it's very different, but I've worked in it quite a bit with .NET Core 1.0. It's actually getting a lot better as well. I wrote an entire API using it last week with no problems and this is coming from someone that has primarily been using Visual Studio since 2005.
Better question, why are you trying to use a Mac if you are primarily coding in VS2015?
&gt;Hello, I want to move to Mac as my primary computer. Any particular reason why? &gt;It is a good idea when I do a lot of .NET development or would it be better to switch language for something more Mac friendly? Never hurts to learn a new language (If you are looking for mac languages I hear swift is all the rage) &gt;How powerfull MacBook do I need to run VS 15 without perf. problems? Will older models do (I am thinking of buying used one Pro Retina)? If you are running in Bootcamp anything made in the last 3 years that will satisfy the VS2015 specs will probably work just fine. If you are running windows under VM you will probably need twice the specs as you would for running under bootcamp (That is simply because you must leave some available processor cores and RAM for the MAC side I think VMWare recommends a min of 4 cores and 4GB of RAM for the mac side). I'd avoid the VM if I were you though, I have had nothing but performance issues when running a VM. Not to mention it completely killing my battery life, once I switched to running as bootcamp all those issues went away. And if I really need both the windows and mac side at the same time VMWare can run the bootcamp partition as a VM. The only downside to a bootcamp is you have to decide the size of the partition upfront and the VM can expand as you need it (though I think you can resize the bootcamp partition later manually if there is room on your drive). &gt;Can you share some experiences/thoughts on doing .NET purely on OS X without using Windows via bootcam? AFAIK the only way to do this is with VS code and .net core (or Mono I suppose). VS 2015 will not run on OSX and probably wont ever. Maybe the next full version of VS will get ported to run on .net core so it will work anywhere but I wouldn't hold my breath (I'd guess that sort of thing is a little further off). With that being said I have had good experience with VS code and .net core projects. Very similar in feel to Visual studio and they are adding new features all the time.
I have a 2013 MacBook Air (i7, 8GB) and run Visual Studio in a VM. It's not the fastest setup in the world but it does, indeed, run fine. I'm running Windows 7 as the guest OS under Parallels. Stuff like Git and Photoshop I run natively on the OS X side.
Well, the context was regarding how to query a table through Entity Framework, which by default pulls down all columns, and I was going by the example in the linked article. And let's be honest here, responding with just a "LOL" isn't helpful. It would be if I was flat out wrong, but as I showed, I am not. The answer is "it depends". To elaborate, my suggestion is to use split table mapping. This lets you keep related data on one table in the database, but split it up into pre-defined column chunks on the EF side of things. The advantages over .Select are numerous: - You don't need to duplicate your .Select code all over the place. - Other developers can't break your precious index by messing up the order / adding one extra column. - You have change tracking. - You have the local context cache. You can fake a foreign key link to the extra data on the table, and through that get access to the extra columns on a case-by-case basis. So you don't loose out on that. A good way to think about it is a preset that enforces proper index usage.
How about plugins like resharper? Do you only do web dev or full app dev? any Office app dev?
This is straight up false. I just pulled down a user record, changed the MiddleName value, called save changes. This is the SQL that EF sent to the SQL Server: -- Region Parameters DECLARE @0 VarChar(255) = 'Test' DECLARE @1 Int = 12345 -- EndRegion UPDATE [dbo].[UserProfiles] SET [MiddleName] = @0 WHERE ([Id] = @1) The only case where EF updates the entire row is if you override the change tracker to explicitly tell EF that the entire entity has been updated.
On my 2015 MBP, I'm running Windows 10 and VS2015 in a VMWare Fusion VM given 1 core and 6GB. It works flawlessly for me, and I love being able to three-finger-swipe between operating systems. I'm even using a second monitor, and when I give the VM focus, my second monitor switches too. Perfect setup with no complaints. I used to use Bootcamp for .NET development, but hated having to reboot into OS X to do everything else.
I've run vs (no resharper) and SQL server with Windows 7 on parallel with late 2013 MacBook Pro (16 GB ram). It run fine.
It depends on your use case. EF starts to shine when it comes to OLTP use cases. Especially when you need to modify multiple entities at the same time in a secure transaction, leveraging snapshotting and retries. EF also shines in desktop app use cases, where lazy loading and change tracking becomes essential. Additionally if your team is more familiar with C# and Linq, EF is helpful for abstracting away the SQL. It also prevents typos since intellisense works with it. If all you need is some queries here and there, and modifying one entity at a time is enough for you, and you don't mind writing SQL, then Dapper is probably your best bet. Or just ado and SQL.
&gt; for Windows, Resharper, Photoshop, SQL Server, SQL Server MGT etc installed or running Running Parallels &amp; Windows 10 on my MBPR Late 2013 i7 with 8GB RAM split 4GB/4GB and 4 processors on each OS (you can over provision processors) and it runs VS2010-2015 very well alongside Github, SQL Management Studio etc. I must point out though that Parallels seems to run much faster than VirtualBox which is a bit frustrating.
Is that a MAC issue? I've run Visual Studio (multiple instances, usually) using VMWare since VS2008 on all versions of Windows since XP without any serious performance issues attributed to it.
The first step in that was making an otherwise necessary read just so it can figure out what the changed. That read is really what I'm objecting to.
Allow me to restate my response. If you are stuck using EF, then yes, your table splitting pattern makes sense. But beyond my general dislike of EF, last year they said that you won't be able map multiple classes to the same table in the next version of EF. For your sake I hope that isn't true (or at least I am mistaken), but you should test it and file a feature request if necessary.
About 1.76ms vs 0.21ms for a single-record lookup, 221.27ms vs 168.82ms for large collections. I'm still trying to figure out why EF is so much slower even when emitting the same SQL. Chain isn't based on EF at all. It completely ditches the idea that tables and classes are directly mapped to each other. It also discards context-based change tracking in favor of the IChangeTracking interface. That said, it is compatible with most EF-style models. ref: https://github.com/docevaad/Chain/wiki/RawBencher-Performance---Unofficial
it actually isn't.
At that point it sounds more like you are objecting to ORMs in general. ¯\\_(ツ)_/¯ There is no perfect one-size-fits-all solution. You use a ORM if it adds value to your use case. If it doesn't, then don't use it.
It doesn't have to be that way. In Chain I can write this: db.Update("UserProfiles", new {Email = email, UserId = userId}).Execute(); So why the hell can't EF let me write this? db.UserProfiles.Update(new {Email = email, UserId = userId}); After years of bitching about ORMs I've come to the realization that ORMs aren't my problem, it is the Hibernate style of "class equals table" ORMs that offend me. *** Heck, with chain I can even go further: var newProfile = db.Update("UserProfiles", new {Email = email, UserId = userId}).ToObject&lt;UserProfile&gt;().Execute(); I actually use this in production quite a bit. The UI team wills send me a partial update, then expect a fully populated object back. 
&gt; EF also shines in desktop app use cases, where lazy loading and change tracking becomes essential. If EF supported IChangeTracking I would agree with you. That's partially why it pisses me off so much. I would gladly take the performance hit if they fully implemented the things I need. But no, we get this half-assed approach that almost, but not quite, works.
I m wondering if you ever used sidewaffle
Thank you for clearing that up, I didn't read too much into it and initially thought it just extended EF. Yeah, EF is many things, but it's not fast. I think it's due to the bloat of originally using object context, then moving to DbContext, but still making object context available for backwards compatibility. &gt; It completely ditches the idea that tables and classes are directly mapped to each other. Nice! That's honestly one of the big issues of EF and NHibernate. Good on you / chain for tackling it. I still rather like the context's local storage &amp; change tracking, but I'm also in favor of supporting standardized interfaces. Our opinions may differ in regards of EF, but I think we can agree that a more modern, performant ORM is a good thing, and I hope chain can grow to fit that role.
&gt; Since we are a web based shop, we actually need the read before the update to return a 404 if the entity does not exist. What if a failed update automatically returned a MissingDataException, which you could then globally map to 404s?
Resharper alone will kill your IDE responsiveness. At work, I installed resharper to help with code reviews and VS takes at least 20x longer to do anything. Load a new solution? 5 minutes. Get latest from tfs even though it might only be one view file? 5 minutes. Unload project? 7 minutes. It was all instantaneous before resharper. I'd joke it was my PC, but I looked at the specs and was appalled to see it was an i7 with16gb ram. However we are a very secure company with lots of background processes. I also run it at home and don't really notice any issues. Maybe it is because we use a shared license server, and maybe it is because I am on a new custom built gaming PC. But, I have thought about uninstalling it a couple of times when doing development. Then plan to reinstall it when I do code reviews. 
I think I just threw up a little in my mouth. Getting off 1.1 was mission critical 8-10 years ago. 4.5 is going in the bin shortly. Competitive web hosts should be able to provide 4.6.1 today and ability to maintain a secure patching cycle as releases occur. Can you compile your code with 4.6.1? 
VsCode is pretty good for C#, but I'd hate to have to complete full projects for .NET in it. No reason you *couldn't* do it though. 
This sounds like your ammo: "This system is so old nobody knows how to find out what's wrong, let alone fix it. Support for this ceased &lt;x&gt; years ago, and it's imperative we upgrade rather than duct tape and bandage up this ancient system. Problems will only increase over time, while solutions become more and more scarce. This is the perfect time to look to the future."
It runs well and integrates with the rest of my apps. It's hard to tell what's native and what's Windows. It's a good solution, if a more expensive one. 
If you emit json onto a razor view via a script tag you are uniquely wide open for XSS. Make sure you own all content going into that json. Also FYI Web api serves no purpose. MVC does all you need
I only write desktop apps. No Resharper.
Migrations can save a lot of typing, but the bugs can seriously destroy the joy in your life. Nevertheless, they have one big advantage: You can easily verify that it maps to the db the way you think it should. 
Big pro for msbuild, the same tasks can be done on local dev machines.
&gt;I'm not a fan of EF migrations at all Do you mean the migration tools or the migration SQL? Because if you mean the latter you should be looking for database-first vs code-first. &gt;lack of control over when migrations run Or do you mean automatic migrations? Which is something completely different.
WebDeploy/MSDeploy is installed with Visual Studio so, you can run MSDeploy on your local machine as well without any additional installs. However, I agree being able to run builds/deployments from your local dev machine is important. Thanks for the comment!
&gt; You can work around that by using split table mapping, or simply not mapping certain columns which is a much better option. Can you elaborate on split table mapping please? Also, although certain columns are not mapped, EDMX has this habit of adding them back when the model is refreshed.
It looks like you're arguing for/against code first/database first, not EF since it doesn't even have migration when doing database first
I've never been a big fan of migrations. Chief among them is your database has to be in a known state (a known version) for migrations to work properly. We started using Database projects in VS to manage database schemas and DACPACs for deployment via MSDeploy a couple years ago which has made our lives so much better. Here is a blog post that describes the process - https://dotnetcatch.com/2016/02/10/deploying-a-database-project-with-msdeploy/
I don't have a reference to give at the moment, but I've never been a fan of migrations in EF because it forces you to step through every iteration of a databases state when that's probably not what you need to get from version X to version Z. I've found that the VS SQL projects are a far better approach since it compares what the current state is versus the desired state and then builds the path to get there. If you add, drop, re-add, then rename an object in SQL you don't go through every step to do that but rather take the one step to add it with the new name. Additionally, since you can generate a DACPAC and deploy it pretty easily with a publish profile, it integrates nicely with a build and release pipeline (e.g. Team City and Octopus Deploy, VSTS, etc). And if you still need some "magic" to get data or difficult-to-compare-and-change database operations, you can use the power of sqlcmd and pre/post-deployment scripts to query the "version" of a database and run selectively. 
I've written about this in the past (http://josephdaigle.me/2016/04/02/database-versioning-showdown.html). While I appreciate that is difficult, if not almost impossible, to begin using migrations with an existing database, the benefits I think ultimately out weight the cost. This is especially true for SaaS. I just don't like how EF "code-first" migrations work.
Correct. I'm not saying "don't use EF"; it's a very capable ORM. Personally I've never been a fan of the so-called "code first" versus "database first". I think it's a false choice. It's _always_ database first, because you can't execute your code without it. It just comes down to how you're managing and versioning the database schema.
I'm curious what benefits do you see in EF migrations over using a SQL project and DacPacs?
As some of the other commenters have already said, Parallels is probably the best way to go here. Bootcamp works too, but Parallels gives you the best of both worlds because you don't have to restart out of OS X. I recently made the switch to using Parallels + VS and blogged about some of my experiences here: https://stormpath.com/blog/ultimate-guide-to-using-visual-studio-on-a-mac/ **Tl;dr** - a MacBook with 16GB of RAM and a i5- or i7-series CPU should work really well.
&gt; Funny thing is Google opted for Java over .NET to go with the more open platform and not get into legal issues. &gt; They couldn't predict Oracle gobbling up Java and Microsoft changing for the better. This is a delusional comment. * Google doesn't even allow people to get windows laptops unless you request an exception. Your choices are Linux or MacOSx. * There is almost nothing inside of Google that is written in .NET anything. You have either: C/C++ services where cost to serve is paramount, Java for the backed workflow, Python for fronted (and there was a battle between Python and Java GWT for that position), and JavaScript for in browser. They are no looking at Go to try to combine C/C++ and Java, but getting a lot of resistance.
Dude, you're cramping on the circle-jerk!
&gt; and Python Java for production, Python is generally discovery and experimentation.
&gt; Could you name some examples of such tools? I'm not familiar with the needs involved in big data. * Kafka * Hadoop * Apache Bleem * Azkaban * Apache Spark * Apache Flink * Apache Mahout * Weka * MLLib * GraphX etc....
I'm i the only one that thinks Angular2 is really heavy? I went through their quickstart and the amount of npm packages they use just to get a hello world app up seems excessive. Maybe I'm just a baby but it felt like getting an angular 1 app up was a really fast painless process and Angular2 is just non stop 3rd party library hell
I think DACPACs are actually better. The tooling around managing DB changes actually ends up being much better than code based migration tools, and I've seen it work well in multi-team environments where you have to manage changes to a shared data source (always a nightmare). Merges can be a little hard once in a blue moon though.
Delusional? They made a choice early on and stuck with it. It doesn't negates the fact that they considered .NET.
You are not alone !! even I feel the same ng2 is very heavy for quick start, but the application design, development experience will be very effective. I personally prefer TypeScript to be used with Angular 2. But when we work on larger application, these stuff really help us
Prefix (http://www.prefix.io) is free and we plan to always have a free version. Our APM products for servers are paid products. The technology behind Prefix is the very much the same. We are also planning a paid version of Prefix with some advanced features.
My condolences! Do you hate encapsulation? Does the very idea of of a strong, valid domain model make your skin crawl? Does the thought of working with immutable objects hurt your brain? Then Entity Framework is for you!
Web API gives you more control over the "shape" of things. You have a much tighter control over what you say over http as well as what the objects look like that you put over the wire. WCF as a Json Rest Api looks like WCF over Json instead of xml. You hand that off to a Javascript front end developer and they're going to complain. It's ugly as all get out. With Web Api your more dependent on Http but the trade off is that you can craft urls and consume Http headers with ease. This allows you to secure your apis in a more standard way (oauth), do fun things like api versioning and make your api more intuitive (Http Get /invoice/132 vs Http Post { InvoiceId: 123} to /Invoice.svc/GetInvoiceById). This will make your front end guys happier. The migration path is actually not that hard either. You start by wrapping up your existing WCF service in Web Api endpoints and slowly pull in the functionality as you update.
&gt; WCF as a Json Rest Api looks like WCF over Json instead of xml. You hand that off to a Javascript front end developer and they're going to complain. It's ugly as all get out. How do you figure that? The JSON that a REST WCF service produces should be almost if not exactly identical to what Web API returns for the same object.
That's a good solution too! Our reasons for choosing split table over view is just that we prefer to have as little manual SQL as possible ( not all of our devs are comfortable with writing SQL, sadly ), and it's easier to combine the data back together. Using a .Include on the split table will simply add the extra columns to the SQL SELECT statement.
Just for giggles, can you post the dependency tree?
Yeah, I would like to use Parallels rather than boot into windows.. I'll check your post. 
tl;dr; ## Less is more – minimize memory allocations * Encode closure information into a Task’s state object * Use cached Tasks when possible * Know the causes of Task inflation ## Avoid concurrency measures in constructor paths ## Provide fast (inline-able) versions of methods on the hot path ## Consider using await instead of ContinueWith/Unwrap 
From what I know, nothing is really upgraded in the newest (or almost-newest) generations of Macbook Pros
I don't see systemjs.config.js in the file list.
That's why I spent an entire weekend making sure my ORM works with immutable objects. You can even use them for insert/update operations if the mood suits you.
Just keep that necklace on, fam.
Hmm... You could do something like this [Stephen Cleary's AsyncLazy](https://github.com/StephenCleary/AsyncEx/blob/master/Source/Nito.AsyncEx%20\(NET45%2C%20Win8%2C%20WP8%2C%20WPA81\)/AsyncLazy.cs). Or.. You could just wrap it in a `Lazy&lt;T&gt;`. It's really hard to give a good suggestion given the little code you posted. And also, it **really** depends on what you're constructing.
I could work with that. Thank you.
What is the use case for this scenario? Seems like you should jsut return myObject and let the client do the calcs with the object that is returned. Also to echo the sentiment of a domain-centric model, these types of scenarios won't occur because your EF entities are abstracted through domain objects. To this DB hit is somewhat moot in that scenario. 
When is lazy loading appropriate in general? Not for the use case you outlined, where you know up front what to load from the database because you'll be mapping to other objects. No, I'm looking at those cases where the Active Record pattern is actually legitimate. For example, rapid prototyping or utilities that are only ever going to be used by the developer who wrote them. I'm not going to build a robust DAL for throw-away code, but I don't want it to be full of landmines either. 
Yea, Stephen did a good job on that library. If he'll take it, I'm going to contribute my async code to his project. Nothing big, just a handful of extension methods for Task that fit better in his library than mine.
Point noted !!
This is an admittedly annoying aspect of entity framework whereby operations that should be async are instead not because they are hidden behind proxy classes. So my opinion on this is to use an extension method to return tasks and async wrappers. Excuse my crude samples; I am coding on my iPhone in bed. public static Task&lt;int&gt; CountAsync&lt;T&gt;(this IEnumerable&lt;T&gt; @this) { if(System.Data.Entity.ObjectContext.GetObjectType(@this.GetType()).Equals(@this.GetType()) { return Task.FromResult(@this.Count()); // not a proxy } else { return @this.CountAsyncImpl(); } } private static async Task&lt;int&gt; CountAsyncImpl&lt;T&gt;(this IEnumerable&lt;T&gt; @this) { return await Task.Run(() =&gt; @this.Count()); }
Wow, I didn't realize that it was such as pain in the ass.
You should consider using a `ValueTask` for that. Still that isn't right; it should be something more like: public static ValueTask&lt;int&gt; CountAsync&lt;T&gt;(this IEnumerable&lt;T&gt; @this) { if (@this == null) { throw null; } var dbset = @this as DbSet&lt;T&gt;; if (dbset != null) { return dbset.CountAsync(); } var t = @this.GetType(); if(System.Data.Entity.ObjectContext.GetObjectType(t).Equals(t)) { return new ValueTask(@this.Count()); // not a proxy } //need better exception type throw new Exception("object on stack should have been included in previous LoadAsync"); //alternatively (possibly log the call stack here as well): return new ValueTask(@this.Count()); } (possibly with other type checks and `CountAsync` calls or equivalents like `.LoadAsync().ContinueWith(list=&gt;list.Count())`) More reading: https://msdn.microsoft.com/en-us/magazine/hh456402.aspx and the nice big bold text in here: http://www.itworld.com/article/2700230/development/why-you-should-use-async-tasks-in--net-4-5-and-entity-framework-6.html repeated: &gt; Another vital consideration is that async tasks are not thread safe and they are not compatible with lazy loading. To keep your code from imploding, you need to ensure that you never execute two async tasks in parallel using the same data context. You also need to make sure you eager load / include any relational data your object might have to fetch from your async call. --- private static async Task&lt;int&gt; CountAsyncImpl&lt;T&gt;(this IEnumerable&lt;T&gt; @this) { return await Task.Run(() =&gt; @this.Count()); } That is bad. The whole point of `async`/`await` is to free up the thread to run some other cpu bound task while waiting for an IO bound result. This is instead running cpu bound code on possibly a different thread. All you have achieved is added complexity and cost to this function.
If I'm thinking of an analogy, it would be trying to get Windows drivers working on your Linux machine. I mean, there's probably an edge case somewhere that wants that, but is it a really good idea, and who is going to want to do that in production?
They could call it J#
The advantage is where you have one echo system that is less than the other and all of a sudden you have access to all that. A great example would be the discussions around ms trying to get android apps running in windows store. Ex. If you could run android apps seamlessly on Windows phone then windows phone would attract a lot more buyers. If I as a java programmer could write a program in .net and still have acess to all the libraries that I'm used to then it's much more likely that I would switch. Now there is no incentive at all. 
The navigation property is not going to be a DbSet. It will neither be a hashset or some other CLR collection/enumerator, or it will be a dynamic proxy. If it is a dynamic proxy, why would this be CPU bound work? The point OP was making was that it was a Db call, which is not CPU bound. I am not familiar with ValueTask. I will have to read up on that. 
I suspected I wasn't doing it right. Spent much of yesterday trying to find decent documentation and/or a non-trivial example. It gets even more strange. Both e.NewObject and e.OriginalObject are null. e.Message is 'Failed to set one or more properties on type MyApp.Item. Cannot convert value of parameter 'ADObject' from 'System.String' to 'System.Data.Linq.Binary'.' I'm going to re-read the article and see if there is something I'm missing but I'm about ready to scrap the entire project and re-write it using SQLDataSource. 
It would be some code running, then a blocked IO event, then more code running. It wouldn't necessarily be CPU bound in the sense that performance is bound by CPU characteristics, but there is still a thread forced to be running for the duration of the operation; depending on the IEnumerable implementation, it could be actual CPU bound functionality. My point was blocking IO on a background task is still blocking IO. ValueTask is here (it is coming in a future framework version, but for now...): https://github.com/dotnet/corefx/blob/master/src/System.Threading.Tasks.Extensions/src/System/Threading/Tasks/ValueTask.cs In essence you are trading a heap allocation for a stack result containing a result and a null value and a little bit of extra work if you happen to not be awaiting it. For some db invoking method that probably actually needs to wait at least sometimes, this basically doesn't matter. But for a general extension method on `IEnumerable&lt;T&gt;` you could very likely be calling it in a hot path on enumerables that almost never have to wait. For Entity framework where lazy loaded properties on objects should not be used in async contexts out of threading concerns (aside from the fact that you shouldn't deliver multiple rowsets from a dbcontext just to get a count), you shouldn't be waiting asynchronously (it is a bug in your code). Thus this method should always: * execute synchronously on an eager loaded object; or * throw an error; or * execute synchronously on a lazy loaded object (I'd prefer the error) In such cases there is no reason to have to allocate a `Task&lt;int&gt;` or to make the method async in the first place. But since it is on `IEnumerable&lt;T&gt;` it might as well handle enumerable types that you could have reason to call asynchronously, hence `DbSet&lt;T&gt;`. 
Just by allowing .NET core to use jar files won't mean that Java developers would rush to the .NET platform. As someone who programs mainly in Java with C# occasionally on the side, if I wanted a better language over Java, I would just use Kotlin or Ceylon. Perhaps Scala for a more functional friendly language.
Am I the only one who has no idea wtf this even is?
Thanks - I did just that. I set some routes so I could have: /Blog/Category/{Description} and the same with tags. Really odd I couldn't get the query string working, not sure what was going on!
&gt; One of the advantages of SSDT is that you get static code analysis on your database. It is so good that it will even throw compile errors if a schema object with certain permissions is trying to access another object where the same permissions are missing; for example, if stored-procedure X (accessible to user A) is trying to access table Y (not accessible to user A). This security check even works with Schema compare, which caused us some serious head-scratching as to why no differences were being detected between two databases. (There might be a setting to ignore security checks, but this is the behaviour we found with the defaults.)
Keep digging that hole, moron.
Hmm, could you post your routes config file? It could be down to the ordering perhaps?
Also where do I put my business logic for the bot?
I think this might point you in the right direction.. http://stackoverflow.com/questions/6764013/query-a-table-by-using-foreign-key-navigation-properties-in-linq-with-c-sharp totally going off the top of my head so if it's wrong forgive me, but according to that thread yours would be something like QuestionGroups.Where(qgroup =&gt; qgroup.ExamSection.Any(x=&gt; x.ExamId == examID)) Hopefully that helps or gets your closer!
&gt; Threads that typically encounter IO bound work spin wait until the IO activity is completed, but when the work is assigned by the TaskScheduler they instead are assigned new work by the TaskScheduler while the IO operation completes. Therefore, tasks do not block on IO. This is not true. They are still spin-waiting on some cpu thread. They might not be blocking IIS but they are taking server resources. This issue is exactly why people have complained that mysql and several other db providers (Sybase ASE in particular I noticed*) are not actually supporting async: http://stackoverflow.com/questions/30551459/mysql-c-sharp-async-methods-doesnt-work &gt; Why should lazy loaded properties not load asynchronously? 1. async tasks are not thread safe, suppose you something like this: var totalTask = store.Orders.CountAsync(); foreach(var order in store.Orders) { ... } var total = await totalTask; if that even works, it is quite possibly querying the db for two sets of orders for the same store. And yes that obviously is dumb, but perhaps something else isn't: await Task.WhenAll(UpdateAsync(user), LogCreatedAsync(user), SomethingElse(user)); 2. Loading multiple rowsets (lazy or not) specifically for a projection of data like `Count` is awful. The db is designed to do that sort of work internally, build up an IQueryable projection and execute it async instead. \* Our Sybase ASE application uses async fairly liberally, and we can handle roughly... 40 requests concurrently on a server with dual 10 core hyperthreaded Xeon processors... C10K here we come! We have the lovely unfortunate "success" that we are under 10 at all times so we are *winning* with 4MM hits per week. (edit: actual numbers vary a little bit from that but based on testing our completion times vs concurrency graph for a single instance of the application looks a lot like a hockey stick).
Breaking up string by words then inserting each word into DB
So you have a table and it is just filled with words? Not sure I understand. Can you describe what the table looks like?
Do yourself a favor and go to your Db context ctor and set the Database.Log to System.Diagnostics.Debug.Print. Then check the sql this call generates. Does it look right still?
Then it'll insert matches into the DB. Maybe the DB will have: id, word, matched word or something. It's still very early stages so I haven't planned it all out
Thanks for your replies you're right I need to plan it out more accordingly. Would you mind if I PM'ed you after I plan it all out to check out my project structure? 
\&gt;\&gt; [stackoverflow.com](http://stackoverflow.com)
Seems like an interesting read, but the mobile version is broken. I will check it later on my laptop.
Your query looks fine. It's probably a data issue.
Android doesn't use Java. It just uses the Java compilers and then it turns the byte code into code for their own virtual machine. Much like IKVM does for .NET.
Spam from a shitty company.
The latest upcoming version of MVC will serve you well (ASP.Net Core) as it's getting fairly close to being ready, and the tools will translate well to older versions without very many pain points. That said, I think the most common route for the Microsoft stack in the future will be running WebApi with some client-side SPA consuming it. It gives a great separation of concerns, enforces statelessness, and is a very flexible architecture that can handle many things. It may not be perfect for *every* solution, but it works well for many.
&gt; I would like to be a manager but I hate politics and I want to stay technical. Becoming a manager is like getting married or moving in together. You give something away to get something back. Better not expect to stay your good ol' self with the only difference that you live in a bigger house ;)
But it is a shame I can't take advantage of my 16 years of technical experience and have to watch people make stupid decisions (using DB_MAIL with HTML hardcoded in stored procedures to email out daily reports for example) I have seen places where the lead technical guy is more respected.. I think these tend to be in the more modern startup tech companies. I am in a mortgage company so tech is looked at as more of an annoyance. I like my job now since I have a lot of freedom. So for now it doesn't hurt to look at other jobs but I never see what I am looking for from the ads 
&gt; I am in a mortgage company so tech is looked at as more of an annoyance. This is a big thing. Unless you work for a tech company, its likely that the people at the top of the command structure are not tech people. They know the shit they know (insurance, property management, medical sales, etc.) Many of them look at IT as an annoyance or something that is a big money pit. Many of them fall into some sort of trap of arrogance and believe themselves to be 'the shit' and then poo-poo other groups like IT or HR or Building Maintenance. Occasionally, its *not* like that. Occasionally, you find a company where the top of the command structure realize that a well run IT department can make them more efficient and save them *time and money*. The view IT not as a money pit, but as something that makes their lives better and makes their company run better. Those are the companies to seek out.
I certainly wasn't suggesting you can't deal with/meet with people - I'm just stating what I believe to be a fact: that you can't have "management" without "office politics and bullshit".
I enjoy meeting with technical people to discuss technical things. It is hard to see DICE ads and know from the ad what is going on deep in the company with the technical people. 
For context, I'm a developer who transitioned into managing developers. This is pretty similar to what some other people are saying, but I think you need to look for a company that has a more advanced technical role that isn't a manager. In a lot of companies this is like an Architect role, others title or position it a little differently. Based on what you're saying I don't think you would be a very happy development manager. In my dev days I had a manager who I think was probably a lot like you, technically brilliant but with just no appetite or talent at all for office politics. It was super frustrating to work for him because the technical team could agree on the right technical solution to a problem, only to have it die on the vine because our manager had no ability at all to *sell* that solution to other departments who would be impacted by a change. There's a real art (and I am still learning it, myself) to building the right relationships with other parts of the business in order to make your dev team look like the rock stars that they are, to make sure their solutions and vision are accepted by others, and to have good will to spend when your team needs something. Basically your life becomes less about solving technical problems and more about clearing all *other* obstacles out of your team's way so they can. I'm loving it, but it's not for everyone.
My feeling is keep writing custom software that they depend on more and more and at around the 2 year point look for a raise/benefits... And have another higher paying jobs ready to go if they are not interested. Hopefully they will understand how hard it will be having someone learn all the code I did the past 2 years. This is what I went through. The guy I replaced did not document anything and the first 6 months I had to rewrite/fix/figure out code So maybe what would make me content 100% is just get paid alittle more and be able to work from home sometime. 
Yeah, you might just need a different kind of company. Probably a company that has software as a product rather than one that treats it like a utility is a step in the right direction.
Fake it till you make it. 
What went wrong for you? 
I am not a GREAT coder though. I guess I am a bit above average with my strength being that I have used about every type of technology the past 16 since I jumped around a lot. Do you like your new job better than coding ? 
I should try using that term in my DICE search. .better than '.NET manager' 
It went from technical leadership to political minefield. As the organization changed the role changed to be more and more not what I signed up for. I am sure part of it had to do with my workplace, but the role of technical management can easily be changed from underneath of you.
Okay so my understanding is that the call to get the count was resulting in an IO operation because it was lazy loading. If that is true, wouldn't that register for a data interrupt state during the IO? That is what the OP was saying. Calling Count() results in surprise IO. 
My company has a position they call Team Lead. Its usually held by someone who has lots of senior developer experience but wants to get more into management side. They spend their days addressing production issues, planning release cycles, pointing stories, leading the team (who works on what and such), doing code reviews. The members don't answer strictly to the Team Lead. He is just the last line of defense from the business to the devs. All important issues go through him first. Sometimes they do about 5 hours of development a week. Sounds like what you are looking for. I've heard it described as a Tech Lead or a Team Lead and more often then not they are recruited from within and the most knowledgeable of that product or of that company get the job.
Do I like it more? Not really. Don't really like it less though, but it looks good on resume and pays better. Lot more stressful and hectic. However k got thrown I got he role during the largest project the company has had in a long time. We are a very large company too, so it was intense for the first month. But now that I am in a groove, it is easier. I miss the coding, but luckily I do a lot of freelance on the side so I get my fix there. Except this new role has been more hours and wears me out. At the end of the day I'm pretty burned out.
It's been said already, but going beyond being purely technical into management means dealing with politics. This doesn't mean you necessarily have to be highly political yourself -- some managers are straight shooters who refuse to do that, and that has its own benefits and tradeoffs -- but at minimum it's something you'll need to be aware of and deal with. Being in charge of people means you take on a responsibility to shield them from that stuff. As to how you become one: 1. Be an awesome developer, obviously. 2. Gain the respect of your peers and look for opportunities to motivate them, so that those above you recognize leadership potential. 3. Tell your boss that you want to do this, and humbly ask for their help and guidance. 4. Establish that you're not *just* a technical person, but someone who can see the broader business picture. The easiest way to do this is by framing your technical evaluations, decisions, etc. in terms of business problems rather than technical problems. So not, "let's use tech/method X here because it will improve code reusability" but "let's use tech/method X here because the cost and risk is Y and the business benefit is Z." For many technical people, good technical approaches are both a means and an end; for business people, they are merely a means to an end. To grow your role, make sure you understand and can speak to both perspectives. 5. You'll like this one the least: drink the koolaid. Tech people are typically cynical and pragmatic, and jump at any chance to write off "business stuff" as politics and BS. Regardless of whether that's true, you can't think or act that way if you want to advance. This doesn't mean being a yes-man or an ass-kisser, but it means secondguessing your reactions and being prepared to frame them in a positive or constructive way.
&gt; I am probably too blunt and would offend somehow. I would say this is true for 90% of programmers. It stems from the fact that programming is pretty hard, and does take some skill intellectually. Given that so few are good at it, those who are stuffer from aircraft carrier pilot syndrome, where what they do is so hard to do and do well, that they see themselves above everyone else. The managers pay was more than an entry level dev, but honestly is pretty comparable to any senior or architect level development job. I guess the way I look at it as, after you're making 80k a year or so, does 10 or 20k a year really make your life that much better? I think the position you want to be looking for would be more in a "team lead" type position. Where you do some management stuff, like approve time or handle the overall design of larger tasks, but still code, and work with other devs 80% of the time. 
That's what everyone else is doing. Remind yourself of that before you get down on yourself about your skill level.
I think it's important to realize that as an architect you'll make bad decisions some times and that's okay. No one is perfect and there's not always a right way to design something.
My insecurity is what if one or two of the developers know more than me and complain
I have bounced around a lot and been in many chaotic situations where I do not have such a luxury. So I am hoping to put in enough work here to be valuable. I am the only developer so they cannot easily replace me. Also I hate to negotiate.. I feel much better saying 'I have a great offer but would like to stay if you give me x, y and z.' That way no matter what they decide I am a winner. When you have to fake it would feel really awkward... 'No? You won't give me X, Y, or Z?? Hmmmm.. Actually I think I like this job.. Ill go back to my cubicle now :\'
That is good for my larger jobs but my team here is me, 2 guys messing with sql and a manager. Barely a team. I tried to give demos of better ways to do things (SSIS, SSRS instead of hard coding HTML in a stored procedure) and everyone nods and pretends like nothing happen.. But we are getting into some custom sharepoint and that might be the hook that gets them to want to do more and more with dev
I need to be allowed to create a really important app from the ground up rather than all these one offs.. I think If I do that it would put me in a good position 8 months from now.. The ultimate job I always felt is you create some code that a company really depends on and then you charge by the hour for maintenance.. And you can work form home.. Work form an island.. you can get away with a lot at that point
Problem with that at the larger companies is when there are 13 other programmers competing then I probably am not the best coder out of them.. I think my best chance of getting that job is coming in from the outside and somehow finding people who admire all the knowledge I have had doing many different things
That is why I feel like jobs should have a 1 month no commitment period or something.. It is so hard to know what you are getting into sometime until about a month in
Usually the best programmers don't want the lead role because its only 10% programming. I know at my company a role came available and only 1 internal person applied for it. But your right, its not an easy job to land.