First: I originally had code very similar to your fourth point but switched it because it wasn't working for this very reason. Initially I did have an await. The point was to copy all of the files in the directory in an asynchronous way and be able to copy multiple directories at the same time. I do not want the CopyDirectory method to finish until all file copies finish because there are things that cannot be done until it finishes completely. But I can invoke the CopyDirectory in an asynchronous way so that it copies multiples directories at the same time and each directory copy is copying multiple files at the same time, but does not complete fully until the entire directory is copied, giving the caller the power to await it or not. Second: Thanks for the naming convention info. That makes the most sense if not just for intellisense. I'm relatively new to .NET. I have a Java background and wanted to do this in Java but was specifically told it had to be in .NET . Third: Because it's garbage slow and not async. Fourth: I actually had the Stream.CopyToAsync() originally but it caused this very issue so I switched it to that nonsense above. I'll change it back, but I'm getting the same behavior no matter what. Finally: That toggle was added because that WASN'T what was happening. I get the same behavior with or without the toggle. 
Wish there was a version that didn't allow access to all data for all sites that just didn't have the "On any other site you can select the code you would like to modify and "Edit in .NET Fiddle" with 1 click." feature.
If anyone has used this in a real project I'd love to hear what you like and don't like about it
System.Web has a lot of legacy from when it was initially designed ~10 years ago. A lot of it simply isn't needed when doing modern apps and simply gets in the way.
Evaluated it, and it was quite nice. Still our pain point with merging isn't with code but rather xml files likes csprojs and resx files. They add that and it's a no brainer
By tri-state do you mean you want it to look like a radio button inside instead of a check mark when it is in that third state? If so, I don't think it exists in HTML. You'll have to pretty much fake it using images or something and keep the state on the tree items using JavaScript and maybe storing it in an attribute. It's probably not going to be a simple task.
I would also love to know the answer to this :)
You might want to ask yourself how important it is to have this tri-state thing. If it's just used as an indication that there are nodes selected beneath a parent, then you really just need to change the way the parent node looks. That can be an icon or text color or something simple like that. Alternatively you could hide the checkbox with an image (when in the 3rd state) and make it so when you click it then it does whatever behavior you want it to (select/deselect all children or whatever). Regardless, you don't need that 3rd state sent to the server, so you won't have to do anything too fancy unless you want to.
Unless things have changed in the past couple of months, you're only going to get MVC3 going. I'm not sure about EF. I'd go for nhibernate or a micro orm, personally.
Hi, We've also faced issues with resx files ourselves in the past. While not a full featured tool, give a try to our 'resx sorter' which simplifies merging - http://codicesoftware.blogspot.com/2013/11/the-sortresx-tool.html At SemanticMerge we're considering adding csproj and sln support in the upcoming releases. It will use part of the merge core that we already have but it will obviously need to add a different GUI on top since the conflicts in project files are quite different. We released for Windows long ago, then we added Linux support and now we're releasing the tool for Mac developers. While C# is not mainstream in Mac we think there will be a number of Xamarin/Mono users who will benefit, and then we'll continue adding Objective-C support.
He said he "really wanted to use C#". It's not a requirement but a wish. I for one think this is an exciting experiment. Pushing the boundaries of open source software is how we progress. 
EF does at least have a couple of Postgres-connectors. 1: [Devart dotConnect for PostgreSQL](http://www.devart.com/dotconnect/postgresql/) 2: [npgsql](http://npgsql.projects.postgresql.org/) I can't answer whether or not these work on Mono, but why not try?
&gt;It looks like WPF with C# is the way to go. Why do you say WPF? That's not web app development. Yes you can run a wpf app in a browser using a plug-in, but everyone, even microsoft, is moving away from that. You should start with MVC 4 and c#. Check out Visual Studio Express for Web. 
I can tell you that Mono is viable for hosting mission critical services. Our 8 figure VoIP company runs our primary call control application under Mono, which is over 150k lines of C#. We are planning to move our C# middleware to Mono hosting once we test it in QA environment. We had issues with Boehm being able to handle the heap sizes we need, but sgen has been handling it.
thanks for the reply. We really were impressed with the tool, but over time we've gone more to a model of smaller files and rarely do we have different branches going simultaneously that require merges into .CS files. Tough for us to justify it in our budget. We mostly run into it in common hot spots like dependency injection registration or configuring MVC routing. But glad to hear csproj support is on the way. I can't believe VS projects are still inclusionary instead of exclusionary in this day and age. Really a solid semantic XML plus CSS/SASS/LESS support and you have yourself truly a great tool that not just .NET devs would eat up but also all kinds of web developers. 
As I understood you could write the Web app in windows and then deploy it to Linux to be hosted using mono and apache. I could be wrong about this but if I am correct then you should be able to do anything without the worry of mono.
EF is a nice enough ORM (if light on coherent guidance) until it misbehaves, at which point there is not enough aspirin in the world. It's awesome demoware for a blog/comment scenario. I also wouldn't advise it for using it for any projects that go far beyond that level of involvement.
This, together with the previous post, seems to be doing an awful lot of work that's already implemented in the new ClaimsIdentity and ClaimsAuthorizationManager.
you can also go for metro style applications (windows 8.x only, obviously)
If so, I was unaware. I will look into it, though, The very last thing I want to be doing is creating a make-work workaround. Thanks!
[This video](http://vimeo.com/43549130) serves as a good introduction to the topic.
Him or Brock, yeah.
Yeah, proproviste is right. Either do straight-up windows forms development, or metro, which has a different framework. Either way, there's a version of Visual Studio express for metro. It's generally believed that MS is moving away from WPF/silverlight for cross-platform apps, in favor of metro, which uses more open web standards, even for desktop apps.
Really. I didnt know that. I am using EF for a year now but havent used it on big project. Can you please point out what problem EF causes when using on big project?
Are you the author? If yes, I'm posting your links sometimes on my community update on my own blog. Like what you do.
Do you profile every query that it generates? If no, because performance isn't a concern, then cool. If no because you didn't think to, now's the time to take a deep look at what it's doing. Chances are you'll be disgusted by what you see.
What language/framework(s) did you use as a web dev? Learning C# should be your first priority. If by chance you know Java, you have a big head start on C# and .NET. If you just want to learn the .NET framework, just start with simple console applications; and you can definitely go a long way using Microsoft's (free) Express versions of Visual Studio.
MVC 5 is broken out of the box on Mono but with a couple tweaks, you can make it work. See here: http://curtis.schlak.com/2014/02/04/setup-asp-net-mvc-4-on-monodevelop-4.2.html
That's awesome. I'll have to try it out this weekend. MVC4 was such a pain to get going in mono, and so brittle once you got it, I've been sticking with MVC3. Well, more accurately, not using mono for web dev.
Check out the MVC tutorials online. They are a great start and will help you step by step and get you comfortable with C# and MVC concepts. http://www.asp.net/mvc/tutorials/mvc-4/getting-started-with-aspnet-mvc4/intro-to-aspnet-mvc-4
Quick question, maybe someone knows. What's the current state of NHibernate development? Isn't it in some kind of weird suspension? EF6 is making progress on including various hooks and extension points, which can be quite useful. It still can generate atrocious SQL when you try to step out of SQL realm (I'm looking at you, `GroupBy`), but considering I usually don't need extreme performance, EF is 'good enough', with raw SQL option and stored proc access where needed.
Feedback requested. We are considering techniques for CSRF protection for intranet applications that use Windows authentication. There is a MVC+WebApi crossover technique using the MVC anti-forgery tokens, but we wanted to be able to have non-MVC (or different servers, etc) that generate the HTML application, and have it call Web API services, with Windows authentication, and still be CSRF secure. After various discussions with coworkers, this is what I came up with. If anyone sees room for improvement, or a better technique that meets our criteria, I'd like to hear it. :)
What do you mean? System.web doesn't have data objects. That would be system.data and most of it is bubbled up from db. 
I agree about the system.data vs system.web. It's was just an example of one of the useless error messages that MS uses. There are others that appear to be irrelevant to the exception because of where they are thrown. 
TOOLS -&gt; Import and Export Settings... Choose "Reset all". That will reset to default though, not to a previous setting and it affects the whole IDE I believe. Maybe save settings via that screen first just in case if you have lots of customization.
It can be your startup project in your solution isn't runnable, (i.e. a library is the startup project), so pressing F5 won't work, only attaching the debugger. Anyway, that button is rather useless anyway. Learn these: * F5: run with debugger attached * Cntrl-F5: run without debugger attached. Run the selected build type (debug or release) * Cntrl-Alt-P: attach vs.net in debug mode to a process. This is particular handy if your application is already running: attach the solution in debug mode to the running application, set a breakpoint and it will stop when your running application hits the breakpoint (of course it has to be compiled in debug mode)
Thanks, you were right about the project I'm working on not being the startup project and I'm able to get it fixed by changing that. I still don't really know what caused it since there is only one project going on in this solution. It does still come back very often and I have to get a shortcut key setup to fix it as soon as it happens. cheers.
That little down pointing triangle to the right of "Attach...", click it.
It happens because of what you have selected in your solution explorer sometimes. If you click back on your main solution it should change back to run, or right click on your solution and click 'set as startup project'
[Pluralsight](http://pluralsight.com/training) would be a good start, they have promotions for the first 30 days free I believe.
I wrote a [blog post](http://rionscode.wordpress.com/2014/02/10/but-how-do-i-learn-asp-net/) two weeks ago that may worth reading that cites several different resources for learning .NET and many of its associated technologies. [ASP.NET](http://www.asp.net) is an excellent resource on its own and provides a wide array of tutorials and walkthroughs for all of the major areas found in .NET (*Web Forms, Web Pages, MVC, Web API and more*). It's usually the first suggestion that I throw out for those that are interested in learning more about .NET, but it is far from the only solid resource out there. 
.NET is very big. It's not a language. It's a framework of many parts. What are you interested in? Web? Databases? API? Before you go too deep into .NET you should learn the primary language for it, C#. /r/csharp 
I feel pluralsight targets professional or senior developers mostly. But they have some newbie tutorials of course.
Do you have any programming experience, or is this your first foray into development? If so, what languages have you worked with?
VS2012 and VS2013 do this now due to a design decision by Microsoft. There is a simple registry entry you can make to return to mixed case menus. This was the source of much angst back in 2011.
This bit from the post is very exciting: &gt; There's some very cool .NET-related stuff happening this year, and you'll be hearing about it all soon. 
MS-RSL, very good decision there.
C,C++, PHP, html+css, assembley, javascript
web apps.
You can use a number of web frameworks to create web apps with C#. The two main ones are ASP.NET Web Forms and ASP.NET MVC. Web Forms mimics the desktop paradigm of WinForms so if you're familiar with creating desktop programs it should be pretty easy to get started with. The main problem with that approach is that it relies on a heavy abstraction that will shield you from many web technologies, which will make heavy customization difficult. MVC is a more lightweight framework that plays well with the web. It's even open source. It will hold your hand less but it will help you accomplish more. I would use MVC but in the end it is a matter of taste and you might not even get to choose. The ASP.NET website has good resources for both technologies. They even have a free video tutorial by Pluralsight on the right panel of the respective websites. http://www.asp.net/web-forms http://www.asp.net/mvc Things to keep in mind: 1. ASP.NET Web Forms was the first .NET web framework that was created so a lot of people call ASP.NET Web Forms ASP.NET. But this is technically incorrect because ASP.NET encompasses a broad set of technologies and as a result getting information on the technologies can be a bit confusing. 2. ASP is the predecessor of ASP.NET and it is completely obsolete and deprecated. Don't learn it unless you have to and don't mix up your search terms. 3. Visual Studio Express for Web is good enough to get you started and you can create commercial applications with it. 4. You should use C#. It is more widely used and has better cross platform capabilities than Visual Basic. 5. Visual Basic's name is a source of confusion. It has nothing to do with BASIC and little to do with Visual Basic 1 - 6, VBA, or VBScript. In fact, it was called Visual Basic .NET (VB.NET) to avoid confusion but some knuckleheads decided to rename it to Visual Basic to get old VB programmers to switch. But believe it or not it has more in common with C# than with Visual Basic 6. 6. Don't cut against the grain until you know what you're really doing.
Well, if you've learned all those languages, understanding C# and its syntax shouldn't be a problem. If you're not already aware, maybe look into the differences between C/C++ (next to the metal / manual memory management) vs C#/Java (running on a vm/garbage collected). I remember during my first foray into C# I was confused by the stuff that I *didn't* need to do. As far as learning .Net (or Java), it's really about learning the libraries and ecosystem. If you want the .Net equivalent of PHP, look into ASP.Net and/or MVC. These are back-end web frameworks, but you still code them using C#. If you look for a tutorial, you can probably have a page up-and-running in short order. HTML/CSS/Javascript are the same, on the front-end. Once you've done that, just spend the next few years making a bunch of mistakes and suddenly you'll find that you're an expert.
My IDE is ready.
Just some random comments after having browsed for ~120 seconds: * You're not geared for globalization. If you need to, check out Phil Haack's [DisplayNames through convention](http://haacked.com/archive/2011/07/14/model-metadata-and-validation-localization-using-conventions.aspx) - and put all String literals in .resx-files. * Use [T4MVC](https://www.google.no/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;ved=0CCsQFjAA&amp;url=http%3A%2F%2Ft4mvc.codeplex.com%2F&amp;ei=vZwMU77LOIrNygO_koDQAg&amp;usg=AFQjCNGQ3EW7hVbXn9moop5KmsV0lKLdmw&amp;sig2=sdLmlBsT9V9hr5duraSR-A&amp;bvm=bv.61725948,d.bGQ) to rid of string references in the controller such as *RedirectToAction("Manage")*. Reduces risk of bugs and increases ease of refactoring . * Your controllers are way too logic-heavy (e.g.AccountController.Manage()). Refactor into service classes. Makes for easier unit testing and opens up for other interfaces such as REST Api's if needed. * Speaking of ActionResult.Manage - it is poorly structured with multiple exit points (return) which make for difficult reading and debugging. Refactore to store result in a variable and have only one "Return someAction" at the end * Your practice of putting multple classes in single files is uncommon. If you're using a powerful IDE, it's not a big deal as VS now supports "navigate to class", but might put people off when browsing your solution.
Thanks for your comments! I don't like the way that SimpleMembership organizes these classes (AccountControler.cs and AccountModels.cs), but I didn't feel confident to refactor.
Here are some high level suggestions.. * Utilize a DI framework : If you plan this site to grow it is nice to be able to swap implementations. For example, if you had an interface IAccountService. Now say you want to move to a new authentication provider, all you have to do is create a new implementation of IAccountService. * You code is tightly coupled to the Data Access layer.. I Try to follow a paradigm called Seperation of Concerns (http://en.wikipedia.org/wiki/Separation_of_concerns) . I usually have roughly 3 tiers to my applicatons (UI -&gt; Service Tier -&gt; Repository). With testability between each tier of the application. Also, it allows me the ability to swap out implementations at any tier without affecting the previous tier. Read : http://jeffreypalermo.com/blog/the-onion-architecture-part-1/ * It does not appear you are salting/hashing passwords (unless I missed it). If you are planning to launch this site live .. hash/salt all passwords and encrypt all customer sensitive information. Please read: https://crackstation.net/hashing-security.htm It is your responsibility to ensure all customer data is protected! Let me know if you have any specific questions.. would be more then happy to answer.
Thanks!! * *Utilize a DI framework*: I will, I was thinking about using Ninject. * *You code is tightly coupled to the Data Access layer*: Why do you think this? I'm using unitOfWork and repository pattern. The AccountController is not my code, is the code that visual studio includes it the "Internet Template". * *It does not appear you are salting/hashing passwords (unless I missed it)*: Well, I've not checked that, I've assumed this code was ok, since it was delivered by VS. [simplemembership] (http://weblogs.asp.net/jgalloway/archive/2012/08/29/simplemembership-membership-providers-universal-providers-and-the-new-asp-net-4-5-web-forms-and-asp-net-mvc-4-templates.aspx) Could you please tell me if there is any package that replace the default membership provider?
Thank you
Thanks! Do you have any link where I can see it implemented with EF? Regarding the Generic Repository, I've followed the [Tom Dykstra's implementation](http://www.asp.net/mvc/tutorials/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application) 
You've got to be kidding me.
If you don't wrap the EF stuff behind any kind of interface, then how do you test classes that consume your EF code?
I'm wondering if they fulfill the StyleCop and FXCop rules.
Great article on security. Thanks for posting.
I disagree with the ViewBag avoidance for certain things: namely drop down list values. Those aren't REALLY part of the model that you are working with, and ViewBag seems like a much better way to pass those values since they have no meaning to the model binder coming back. The point being: There are things that ViewBags are great for, so don't go passing EVERYTHING in the model just because you can. This in particular will bite you with model binding concerns on some of those things. There are other things too (e.g. things that might need to be passed up the layout chain like page Titles, etc.). In general your admonition is valid, but I've seen people then go and shove all of these other things into the model that aren't really model stuff.
I don't think it's particularly a DVCS issue - you could have exactly the same conflicts using a traditional centralised VCS like TFS.
Additionally use T4MVCJS to use in javascript files.
From what I've seen at NDC, and read, things seem to be moving to WebAPI and a client side framework like Angular. Might want to take a look at those if you want. WebAPI is not that difficult if you understand MVC though. Javascript on the other hand might be.
No. Bad. You do that and you've broken the SoC that MVC is based on. The view and it's helpers should be handed everything by the controller, and should never go and fetch things itself.
They have suppressions in quite a few locations.
How big is your team? Are you using anything to track issues/tasks and who's doing what? Jira/trello/etc. This is probably less of a git issue and more to do with workflow. 
Agreed. Seems the main issue is lack of coordination leading to duplicate work.
I don't see the problem with using the viewmodel for that. It contains all the data the views needs to render.
Completely different story then :) Good stuff!
We use trello extensively. We are an agile shop with 5 devs myself included. Each dev usually takes up a separate project, and we branch from the trunk to develop the feature. Once dev is complete we merge the feature back in to the trunk when we want to release it. It is common for two devs to be undertaking two completely different projects that happen to be adding to the same form or webpage. These graphical changes are what my question is asking about. 
Why are devs working on the same parts of a project at the same time?
Mmm I accept that it's a 'joy' :). I was just hoping someone more learned than I would possibly know something better. As for atomic commits, if a branch contains the entire dev for a feature, I don't really are how it's beneficial to make those commits more atomic, as the merge at the end of the branch is the same. 
Oh, making your commits more atomic is extremely beneficial. If you are able to maintain the discipline of "one change per commit," you are in a much better position to back said change out if it breaks things or has unintended consequences. As an aside, the "change" I'm referring to is the logical changes to the codebase to add/fix one small thing en route to a bigger goal, not literally a commit per tiny little change. The way it *should* work is that each of these changes would leave the codebase compilable and functional and gradually add more functionality until you reach the end-goal.
Why would two devs add the same button to the same form? That's a work flow or communication issue. I also get the impression your using a gui designer in webforms/winforms. Generated code never works well with source control. 
Agreed fully with that mentality. Atomic commits and having a functional code base after each commit is essential. However, the feature dev takes place in separate branches from the trunk. Often times features are incomplete or abandoned. So I'm still have trouble understanding why enforcing atomic commits would assist in the merge at the end of the line. 
Probably not the answer you want to hear, but don't bind your UI directly to the database. You'll end up with a shitty database and a shitty UI.
I've found that, when I have a team that needs to work in parallel on a project that has shared elements like your GUI, that it requires a bit of architectural "due diligence" to minimize conflicts. Consider your radio-button problem as an example: how about, instead of having the devs directly modify the UI code to add a button, you use a data-driven approach? That way a dev just has to ensure the list of button options includes their entry and the UI will take care of rendering the list of radio buttons. There are many ways to handle this: editing a C# file that defines the list, MEF, stuffing it into a database, and so on. Of course, there are *always* special cases, but I've found that the old adage of "every software problem can be solved by another layer of abstraction" is generally quite true.
By atomic, he means small. As in several commits per day (generally). When source control knows that you added line 22, later you added several at 56 and then you deleted some at 49 it can do a much better job at working out what you did. Otherwise it just knows that "all these things were changed at once".
Isn't that a database setting? I'm not sure what database your using, but you shouldn't have to lean on .net to cascade your deletes.
[Ninject has pretty poor performance in most situations](http://www.palmmedia.de/blog/2011/8/30/ioc-container-benchmark-performance-comparison) if that matters to you.
That's why I said limit it to specific use cases. Drop downs are my goto for this because they so obviously benefit from it in terms of model binding (e.g. for those poor souls using AutoMapper). My rule is that the ViewModel should represent the actual thing I'm editing in my view for create and update views (e.g. the form fields that I'm posting back). I break this rule for lists of domain objects being passed for view only purposes (e.g. not being POSTed back to be model bound). I'll even pass the domain objects directly for read-only views, because the real benefits of domain model / view model segregation is in places that you are taking user input, and being able to abstract front end validation, etc. Basically, instead of looking at a ViewModel as the way the controller talks to the view, I look at it as the way the view talks to the controller on POST (At least initially... I'll add back in certain view only data for other things). There will still be some things (like the aforementioned lists) that will find their way into the view models, and that's all a matter of style, but passing SelectLists to the view in ViewData for drop down values is nice once you try it. I'm not sure there's a lot of other things that really benefit from that approach, but that is one place I absolutely do use the ViewData for.
This is solid advice in general, but if the app is literally 'forms over data' then *sometimes* ui-databinding can be suitable. I generally have favored the objectdatasource binding to strongly typed classes that do linq queries, as it becomes testable and if there does become a need to inject logic when CRUD happens, it's pretty easy to add that in.
The complete adage includes "except the problem of too many layers of abstraction" and is somewhat tongue in cheek.
It is a special case becaue the View automatically get this passed to it. Every view has access to the User principal as a matter of course. I must be misunderstanding something you are saying here. The way I am interpreting your argument is that it is ok to create HTML Helpers (or your own ViewHelpers) that access the domain model. This is a clear cut case of a violation of the separations between the components of (Microsoft's) MVC. Again, let's differentiate between Model as in domain model (the services, entities, data access, etc. of your application) and the Model that is passed to the View and which the ModelBinder binds values back to in POST backs (E.g. the way a controller and a view "talk"). Read this is it's essentially the (simplified) approach I mean: http://www.asp.net/mvc/tutorials/mvc-music-store/mvc-music-store-part-3 The View should not ever go and get it's own data. You claim to agree with that, but in the same breath claim that an HTML Helper should go access domain model logic directly instead of simply being handed the data it needs to operate on. Those two statements are contradictory. As I said, Javascript doesn't even enter into this. If you are pulling values via a web service / API on the client side to populate things in the output, you are already outside of the MVC framework. Once the result has been returned from the View, the View (and ViewHelpers) isn't doing anything, it's just a string that's been returned from the ViewEngine and is then returned to the browser. I too used the old JSON tricks (although we would use requested content type instead of an arbitrary extension). But again, that has nothing to do with the separation of concerns between the Controller and the View. Ergo, I'll need you to supply a link explaining your approach, as I must be misunderstanding your argument. What are you defining as "View Helper"? Because that has a very specific definition in terms of Microsoft's MVC framework.
&gt; I would avoid using ViewBag to pass information to the view. Best practice is to use view models. Is it possible to create a strongly typed view based off a view model in entity framework? I thought scaffolding only allows for models in your data context class to be passed through to the view.
How did you start your business? 
Ok. First of all there is a distinction between view helpers and html helpers. An Html helper essentially generates html, but a view helper can have other logic. It can access session state for instance, it also has access to other services. These services have access to the domain model. Some typical ones might be Helper.UserIsInRole, Helper.UsersShoppingCart or Helper.ListOfStates. A View Helper will never access to the domain model directly, it will do so the exact same way the controllers do, which is where we get to the other big abstraction. A view helper will be accessible to the view (though the exact mean vary). Generally I separate things into queries, command and ModelViews. Queries and commands are both models that the UI is aware of. Typically the controller will just pass this up the chain and return the result. Likewise, the View helpers can create queries, ask the system to execute it and return the model to the view. Calling them ModelViews is intentional, the are an abstract or denormalised representation of the domain model, just like a database view is often a denormalized view of actual data rows. The actual domain model is higher up and not really relevant. A ViewModel on the other hand is an abstract representation of the view. I often have these too but they are in knockout/javascript. A ViewModel has data and behaviour (as the view has behavior), a ModelView is just data. &gt;As I said, Javascript doesn't even enter into this. If you are pulling values via a web service / API on the client side to populate things in the output, you are already outside of the MVC framework. Once the result has been returned from the View, the View (and ViewHelpers) isn't doing anything, it's just a string that's been returned from the ViewEngine and is then returned to the browser. So we have a product controller which has a list, edit and view action. The edit and view model are the same, they have all the same data. But if we were to limit ourselves to only getting data from the controller they would need to be distinct, as the edit page requires extra data to populate drop downs etc. So now anywhere in the application (client side) can call product/view and get the appropriate information. But what if we wanted to display a list of similar products? If we put it on the ModelView then every other call to get just the name/description etc is slower. If we allow the view to request this information then it's simpler. So basically the approach makes composition a lot simpler. . Take the shopping cart example I mentioned earlier. The shopping cart is displayed on every page, so you either have to load it in every action or you have to have another mechanism to make it available to the view. And who better to know what the view needs than the view itself?
Sounds more like a project management failure than anything to do with source control.
We have the same problem at work. It's useful to dedicate one person to modifying the UI at once. Difficult to manage but required as the visual designers tend to throw code all over the place. You can also try http://semanticmerge.com/ for merging. :)
If you know JavaScript you can do just about anything in webforms. If you don't like post backs then rig it up be JavaScript taking to websvcs. 
right, but at that point why bother using a framework at all, when you have to override it's fundamental behavior?
You could just not stage changes that you don't want to go upstream as well...
Yeah, it's a per-table setting I think. Do something like "ALTER TABLE t ON DELETE CASCADE"
It's an option in the foreign key constraint.
If the tasks are broken down and one dev has taken on the card in trello why does the other dev start working on the same requirement?
How do you have multiple projects that reference the same code? That strikes me as very wrong.
An ORM would do it like this: it creates a graph using the relationships representing the FK constraints and then topological sorts the graph, which gives the dependency order, and then performs the operations on the elements in that order, or reverses the ordered elements, depending on the operation to apply (save is A first then B if B depends on A, deletes it's B first then A if B depends on A) There's no other reliable way, you need to determine the dependency order, which is easily done with a topological sort (which is basically a depth-first search over the graph, collecting the visited nodes along the way). 
It's definitely not a git issue since they're using mercurial 
Sounds like you have two tasks: * Feature 1 * Feature 2 ...when you should have three: * Feature 1 * Feature 2 * GUI for feature 1 and 2 This would prevent two devs on working on the same GUI page at the same time.
**Dependency Injection in .NET** *Mark Seemann* http://www.amazon.com/Dependency-Injection-NET-Glenn-Block/dp/1935182501/
**Clean Code: A Handbook of Agile Software Craftsmanship** *Robert C. Martin* http://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882
**The Art of Unit Testing: With Examples in C#** *Roy Osherove* http://www.amazon.com/Art-Unit-Testing-Examples/dp/1617290890/
Yes, based on some of the other conversations i'm having in this thread i'm starting to think that may be the case. Unfortunately it gets more complicated in say, a web application for example, when the gui element that's being changed is the entire page, and is core to the functionality of the feature. 
I don't really follow. Multiple features can be activated from the same form. Do you expect a feature to not use the main form of an application simply because it's new?
I don't think you understand. There are two features, and to simplify my example further, lets assume each feature is activated on the same form by its own button. You're not going to ask the dev of project B to add a button to the form for project A, and vice versa. 
Yes, generated code is certainly part of the problem, i'm quite willing to admit there may be no solution for that as far as win forms go. In my example, two devs aren't adding the same button, they are each adding a new button corresponding to the feature they have developed.
I mostly did a lot of small freelance jobs on the side while working full time, wrote a couple of small apps that never sold, and did a lot of web hosting and server management work. Eventually I started getting larger freelance jobs, and was doing enough that I thought I could survive doing it full time, and gave notice. I was able to later contract part of my old job back (under much better terms than when I was an employee). I also write a couple of apps that actually make a bit of money, and provide server leasing and management to some clients that we do hosting and web development for. 
Thanks for sharing in my misery :) i'll take a look at semanticmerge.
One of the easiest ways to manage this with SQL management studio is to add a diagram to your database and drop your tables on to it. Then you'll have a visual representation of your table relationships and you can very easily manipulate them. Right click on one of the foreign key line things and you can edit them and make them cascade if you want.
For getting the updated values, why not just a simple `Join`? No need for a `GroupJoin` here: var updatesQuery2 = original .Join(updated, u =&gt; u.Id, o =&gt; o.Id, (left, right) =&gt; new { left, right }) .Where(gj =&gt; gj.right.Name != gj.left.Name) .Select(gj =&gt; gj.right); It's basically the same, just skipping the unnecessary grouping (since a group has two elements at most =&gt; the "left" and the "right" element).
Ah i think i see our miscommunication. I assume you're interpreting the word 'project' as a visual studio project. Really all i meant by 'project' in my response to you is a 'feature,' or to use an agile term: 'story'. In my scenario, as far as VS projects are concerned, there is only one. &gt; Or are projects in this case a branch of a main trunk and someone is changing main, committing it, and someone else changes one of the branches and does a pull request that then conflicts with the changes on main? Yes. There is still constant non-new-feature dev going on in the main trunk while a feature branch is also being worked on. Hence the merge conflicts.
For some operations, like git fetch, it won't work if you have unstanged changes.
**C# IN DEPTH** *Jon Skeet* [http://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X](http://www.amazon.com/C-Depth-3rd-Jon-Skeet/dp/161729134X)
**Professional ASP.NET Design Patterns** *Scott Millett* [http://www.amazon.com/Professional-ASP-NET-Design-Patterns-Millett/dp/0470292784](http://www.amazon.com/Professional-ASP-NET-Design-Patterns-Millett/dp/0470292784)
If that's the case I would just grab this book. It's more of a language reference for people who know how to program. http://www.amazon.com/5-0-Nutshell-The-Definitive-Reference/dp/1449320104/ And my only other advice is the same as usual. Pick a project that is just outside the scope of your ability with the language. Learn what you need as you go. Rinse. Repeat.
I see. What you should be talking about here, then, is RenderAction, which is the ASP.NET MVC way to do this without breaking the SoC. It keeps all of the logic in the controller where it belongs (Leaving aside the fat controller arguments for now, you know what I mean here). And that is exactly how I would do what you are describing here. I would *not* have a "view helper" that accessed anything from the domain layer. *Edit:* BTW this conversation has helped me formulate an answer to an issue I'm having in a project right now that does something like this. Thanks.
&gt; In my example, two devs aren't adding the same button, they are each adding a new button corresponding to the feature they have developed. Are the forms just big forms or are the separated into multiple user controls? Doing the later would improve merging and code quality. 
&gt;I see. What you should be talking about here, then, is RenderAction, which is the ASP.NET MVC way to do this without breaking the SoC. It keeps all of the logic in the controller where it belongs I've actually flip flopped on this idea over the years. I would consider this as having a view to be calling into the domain layer as well, just via a controller instead of a helper. The main reason I don't like it is because it has two way communication between the views and the controllers. With view helpers the logic goes controller -&gt; view -&gt; service -&gt; view. With render action it goes controller -&gt; view -&gt; controller -&gt; view. I can't really articulate why I find the latter to be wrong though. The final nail in the coffin for this idea was when I started using knockout though. I wan't the shopping cart modelview in the viewmodel. I want the rest of the page to be able to interact with that view model (it's part of a master viewmodel), to add an item for instance. I'm sure it could be done with render action, but it's a lot more convoluted. I combine the viewmodels in the master page.
Upvote for advocating SSMS. I don't think it gets enough respect; it's a great tool.
You can still code against an interface and not a concrete context. 
Yes, that absolutely *is* the difference, and is why RenderAction exists: to do this sort of thing without breaking the SoC by allowing the view to call out to things itself. The difference may be subtle, perhaps, but it keeps all of that domain-accessing logic in the controller, which is *supposed* to be making the translation between the domain layer and the UI layer. This is the basis for my objection to your approach.
Man I love how far MVC has progressed. Easy to upgrade and laser focusing on making tasks easier. The added enum support has been needed since MVC2 in my opinion. Glad to see the basics being covered! I am looking forward to better validation tie ins (I am loving Fluent Validation) and improved razor compilation in the views (don't like certain requirements on coding style).
If you don't have Reshaper you're doing it wrong.
Moq and Ninject aren't really development tools... just libraries. As far as actual tools, I use Resharper, Productivity Power Tools, and NuGet primarily.
I use teleriks just decompile and just mock a lot. Notepad ++ and hxd. Ants is great.
OK thanks. So then any other libraries like these? I am basically asking anything that is beyond VS. Since I am learning the MVC I want to make sure I am covering almost everything that I "would" need. 
LINQPad is awesome as a C# scratchpad or for database queries. It is also for free!
Well Moq and Ninject (or any DI container for that matter) are pretty useless without some sort of unit testing. [You are writing unit tests, right?](http://stackoverflow.com/questions/67299/is-unit-testing-worth-the-effort) If so, you'll probably want to use [NUnit](http://www.nunit.org/) or another unit testing framework. Additionally you may want to use a logger, such as [NLog](http://nlog-project.org/) or [log4net](http://logging.apache.org/log4net/). Finally, take a look at [Scott Hanselman's 2014 ultimate productivity tool guide for .NET development in Windows.](http://www.hanselman.com/blog/ScottHanselmans2014UltimateDeveloperAndPowerUsersToolListForWindows.aspx)
ReSharper, LINQPad and NCrunch. You should get posh-git for PowerShell as well. It makes git in powershell a lot more comfortable and better than it is with msysgit in bash. For mocking I find NSubstitute is a little better to work with than Moq.
Yea VS has a unit test framework (colloquially dubbed MSTest) which is good enough if you plan on just using VS for development. Have fun with TDD!
While I have nothing against ninject and used it before, if you need speed you might want to look at for example autofac : http://nareblog.wordpress.com/tag/ioc-autofac-ninject-asp-asp-net-mvc-inversion-of-control/
Although the paid version with autocomplete and NuGet integration is definitely worth the money (and quite cheap, compared to licenses for ReSharper and Visual Studio)
Something like jetbrains dotpeek might come in handy once in a while, and NBuilder if you quickly want to create some dummy test data. 
Is there a free version of Resharper available somewhere?
All good stuff mentioned here ... in addition I use telerik's code converter (website - just google it) and the code conversion feature in SharpDevelop. Plus Oracle SQL Developer and SSMS (do loads of T_SQL and PL/SQL) Source: VB guy retooling in C#.
Definitely worth the money. :-)
Diff tool - Beyond Compare. Get the pro version for a nicely presented 3 way merge.
For testing use fakeiteasy (easiest and most natural mocking/stubbing library there is) and machine.specifications (built around the arrange, act, assert pattern with fluent types and a test runner based on class names so that your test code reads a lot like documentation) And you'll want a decompiler installed. Jetbrains has a free one dotPeek. Also fiddler and postman app for chrome are essential web tools. Sourcetree is an excellent GUI for git. Organize your branches with / and sourcetree displays them as folders in the sidebar. I.e. Feature/foo and feature/bar appear as foo and bar under the feature folder. On a team a ci server is a must. TeamCity is free up to a number of builds or you can just go Jenkins. 
In the projects I work with it tends to slow down the IDE too much, so I don't use it. I get the appeal of the features it offers, but every time I use it, at some point the slowdown in the IDE becomes unbearable so I uninstall it. 
Fiddler for testing API responses and general http debuging
ReSharper (Refactoring and static analysis) and VsVim (Vim emulation layer). Can't work without them. I really can't wait for the tooling that Roslyn will bring. The world is about to change, my friends.
[Entity Framework Profiler](http://www.hibernatingrhinos.com/products/EFProf)
nice try author
CodeMaid and OzCode are the necessary vs plugins for me.
A few that immediately come to mind: NuGet Source gear DiffMerge GnuWin tools (Provides ports of tools with a GNU or similar license, such as sed, grep, cat, etc) ReSharper with StyleCop CodeContracts Fluent Assertion (great library for unit testing) AutoFixture (mock data) Ninject (ioc library) Wix (Windows installer framework) Fiddler WireShark Notepad++ (faster at macros, file search, and a few other things) 
We have a few absolutely gigantic projects open on a daily basis. Re sharper completely falls over and slows visual studio to a crawl. Bear in mind that these are very high spec machines. I think if you are still learning programming it can be a useful tool to learn and enforce standards on the code you output - but for a seasoned programmer, dare I say it, it doesnt become quite as essential as some people like to make out. 
I have the same experience. I've tried it with any of the configurations: on my old machine, which was a piece of shit and on the new laptop which has an i7, 8gb RAM and SSD. Regardless of the machine - I still have the lag. It's not a showstopper and I can certainly work through it, but over the time it becomes annoying and I uninstall it. 
We've had similar issues at work when we tried it out. We also found that there are a couple other free tools that, when combined, do everything that Resharper does (or at least everything that we used it for). They've yet to take out our major projects yet, so we're happy.
```git fetch``` shouldn't get mad if you don't have a clean working copy as it just updates your remote refs. ```git pull``` is probably what you meant as that also attempts to merge any changes that exist on the remotes.
R# works well for me...sometimes the memory it takes up seems high and then I restart the studio but otherwise its fine..try r# to share workspace on temp folder and not per solution, disable color identifiers in the inspection settings and other options you don't really need...r# is awesome for navigating code...refactoring is also very nice 
&gt;Might be VS memory limitations. For some reason VS is limited to 2 GB of ram so as soon as it goes over that it just thrashes the cache. That some reason is devenv.exe is a 32 bit process. [Details as to why]( http://blogs.msdn.com/b/ricom/archive/2009/06/10/visual-studio-why-is-there-no-64-bit-version.aspx). 
It definitely has a learning curve, but is very powerful. What installer do you prefer?
If you want to include libraries in the list (since Moq and Ninject are simply libraries), my list gets huge. Actual tools though: * Git (Github for Windows, plus command line) * Mercurial (TortoiseHg, really wish there was a git tool as nice as it) * Notepad++ * Rad Software Regular Expression Designer * SQL Server Management Studio * pgAdmin (PostgreSQL tool) * MySQL Workbench * Fiddler * Chrome, Firefox, IE, etc. (I have to support pretty much every browser where I work but I prefer the Chrome dev tools) * doxygen Note that there are tools that I use for PHP, node.js, and Python development but I'm not listing those. As far as VS plugins: * Code Contracts * CodeMaid * NuGet * PowerCommands * Web Essentials * VSCommands Those are the big ones. We use to have NCrunch at work but couldn't justify the expense when it went paid for the entire team. I'm going to have to try out OzCode though that someone mentioned below. Looks interesting.
Agree. The primary thing I use it for is 'go to implementation' since I use a lot of interfaces and dependency injection. All of the code completion stuff it adds gets in my way and with VS on a shorter release cycle I don't know about paying the upgrade fee for RS every year or so.
You are correct. That is much is simpler. I'm going to update my post when I get a chance thanks for the feedback.
I find ViEmu is a lot more stable, and has better functionality. Unfortunately it's not free.
I don't care what you're selling, if I can't remove an installation through Add/Remove programs, I'm going to be fairly miffed.
ReSharper is still worth it even with the real-time analysis turned off. Hell, the refactoring tools alone are worth the license fee. Definitely a must for even seasoned programmers.
What tools are those? We use Resharper in work but most of the devs typically turn it off as it causes huge slowdown on our massive VS Solution, I'd be interested in trying some alternatives.
ViEmu does major updates rarely enough that I'm comfortable just having my own licence for it. It's not THAT expensive. Plus the major breaking point for me is that I've always had problems with macros that operate on large blocks of code timing out in VsVim or executing out of order. I've put in bug requests, but there's a race condition that nobody can seem to reproduce readily enough to rectify it.
What?! This is way too cool.
I handled it by designating a specific height and using overflow auto. It doesn't put the scrollbar in a beautiful place but I suppose that'll do pig.
Similar problems here. I've also had it crash VS on projects with lots of COM interop. 
Fiddler, Notepad++, LinqPad
I'm going to guess by "worked with", he means "used at school". That means little, I would start with a less advanced book than nutshell that takes the time to acclimate you. If that's too slow and you feel like your drudging through stuff you know THEN you can start with nutshell. Getting a job is the best way to get better at c#.
Which versions of VS and Resharper are you using? We use R#7 on VS2012 with continuous analysis switched on on a 60-project solution without issue. Of course, we're on SSDs, but then who isn't these days?
Any chance of a public release or open sourcing it? I've been dying for a better installer. The best one I've used so far is the nullsoft installer.
As I asked someone else, do you have the solution wide analysis on? Because on any decent sized project that is going to be nightmarish. 
Sadly no, I've seen it drop down to $30 a few times, but never free. The new Roslyn compiler will give a lot of the features that ReSharper is used for now though.
I agree. Kudos!
 * [indeed.com](http://indeed.com) * [Ars Technica](http://arstechnica.com/jobs/) 
Consider Stack Overflow's job postings. I find myself browsing them a lot because I'm on the site for one reason or another just about every day (along with, I'm sure, the majority of the development community). Of course, personally, I'm somewhat jaded with most of these sites because they're all posts by external recruiters, rather than a direct line to the company, and you end up getting the run-around or they attempt to shunt you to some other opportunity that's more lucrative for them, or they generally just really want a piece of you.
I did, which indeed is terrible, and then I switched it off, but it still was sluggish to me. Perhaps I'm not that patient enough and is it just me, I just can't stand slow(er) editors/IDEs. 
Ditto. "Type type type looooong paaaaause...type type type looooong paaaaause."
Agreed. Fluff is ignored, job requirements and salary range make the decision and instant yes/no in terms of interest.
Thanks for the reply, I'll check those out.
Nope individual processes only get 2GB each in win32
I found NCrunch completely changed my attitude to testing. Having constant feedback about your coverage and f failures was transformative. And it's much cheaper than Ultimate, which also offers that sort of thing. 
Guess your right. A 32 bit should allow 4GB. Maybe one bit is vein used for something else. 
Very strange, I have very few performance issues with it.
Thank you!
Thank you for Ars Technica!
Thank you! As for shuttling and run around I'm not an external recruiter but I have worked with them in the past and they do it to everybody, even people just wanting to be placed in Admin work.
I'm not trying to fill out my roster or pad my connections so I always give the JD if I contact someone. Otherwise, why would I be contacting you? Thanks for the info!
Sadly, true. And I don't blame you.
You can get it up to 3GB if you boot Windows with the right flag. If you're interested in the details, Mark Russinovich has a series of articles about it on TechNet: [Pushing the limits of Windows](http://blogs.technet.com/b/markrussinovich/archive/2008/07/21/3092070.aspx).
I actually get the not telling you the company name thing. It gives you the opportunity to completely cut them out of the loop and go apply for the job yourself. Doesn't make it any less infuriating though.
I don't really have any advice on where to post, but I have to offer my two-cents on a topic that should still be relevant to you. **Don't. Fucking. Lie.** I've had recruiters for whom it's common practice to play middleman between a candidate and a company, just making shit up in between. The guy who placed me at my current position was one such douchenozzle. The only reason I paid any attention to him in the first place was because the original posting said "Mostly remote" which he told me meant 3-4 days a week. I asked about it in the interview and there were like "that's not really a thing." So I asked the recruiter why he said it was, and he said the company had given him permission to put that in the listing because they find it hard to get candidates local enough. He also would do things like claim the company pushed back on my requested start date because he didn't bother to tell them my requested start date and went with the default "two weeks from now" (I had planned a week off in between) I ended up taking the job anyway because the job looked like a better situation than my current job, but dealing with him was a mistake, and I'm mad I got that cocksucker a commission. OH. Another piece of advice. When I was starting to pay attention to recruiter cold calls, I decided I would gladly give my business to one who was willing to play by my rules, namely that I would rather fucking email than talk on the phone. Learn to use email, you will make some programmers very happy.
Craigslist. Took me a day.
"Oh you're an ASP.NET developer with JavaScript experience? I have an opportunity that may be of interest to you! It entails PHP, Ruby on Rails, C++ and a load of other stuff you have next to no experience in. I'm sure you're perfect for this role, LOLS!" NO YUO!
Thank you so much for your feedback. Honestly, I am new to the company and the first person to hold this position so I'm trying to fill roles and create process at the same time. I know from being married to a tech guy how stupid people in my role can seem when they try to screen for skills in an interview. I'm just the sourcer and first screen person, not the tech person so I shouldn't be trying to judge skills. I am trying to get hard budgets for the positions right now and I will make sure to include them in all future posts!
Okay, I don't know who these people are. If my bosses need certain skills they are in the JD. If they are in the JD I use them as keywords to search so I don't waste everyone's time INCLUDING my own! I apologize on behalf of my bretheren....again.
I've had a string of recruits actually calling my place of employment to try to get ahold of me because I've stopped answering my home/cell for them. I bitched out the last one that did it, totally unprofessional imo.
&gt; Learn to use email, you will make some programmers very happy. Recruiters don't like this, or they don't get it. I prefer email for two reasons; 1) I can control the flow and think about my answers. 2) You're taking the game away from the recruiter. It's like shopping around for the best price for a new car on the internet then walking into a dealership with the lowest price and asking them to match it. The salesmen are completely in alien waters. 
I had a go at some recruiter guy who called me at my desk at work. I asked him how he got my number and he said he called the switchboard and asked to be put through. I work for a massive multi-national! Like I'm going to start talking about a new opportunity with my boss in earshot. Idiot.
Reach out to recruiting firms in the area, preferably not ones who are known to be body shops. I know several people, myself included, only work through (reputable) recruiters and refuse every linkedin invite from non-colleagues and won't put our resumes on websites like monster.
I would recommend http://careers.stackoverflow.com/ One thing I like about postings on careers.stackoverflow.com is they will describe the company, project, and vision for the role. Craigslist postings almost always focus on technical requirements of the recruit, which isn't enough for me personally to be interested. Feedback on your posting: &gt; Does the idea of working at a cloud-based, mobile customer engagement platform excite you? Most job descriptions drop the cloud buzzword these days, but it doesn't tell the potential employee anything really. &gt; Do you want the opportunity to get in on the ground floor of a company that has already got paying customers that include Microsoft amongst its customer base? This make it sound like you're one of the various contracting shops Microsoft outsources their work to. Not really desirable from my perspective, its better to work for Microsoft directly. What is missing from the posting is what the person will actually be building, and what kind of impact that product has. That's what I am going to be be excited about. If your company's developers have an open source projects or blogs out there, I would list those. It gives me an idea of what type of people I'd be working with. I did see your posting last night (I watch Craigslist and stackoverflow jobs via RSS) before seeing this reddit post. I am qualified for the job but had no reason to be interested. The last posting I've actually responded to was similar (eastside, .NET web development) but they are building software to help deploy renewable energy technology. I personally don't want to work on the eastside but if the company has the potential to impact something so important then its worth considering.
I'm trying believe me! Headhunters get paid a percent of the wages you make for your first year. That's why they love to get you higher salaries!
Thank you for the crituque! It's my third day and I have so much to do. Redoing the JD's is already on the list.
I've been a developer who has interacted with recruiters a lot of the past 5 years. Go where the devs go. (User groups, conferences, etc) Learn what each one cares about. It will take time to learn the lingo, but we respect those who only push a job when it really is a good fit.
It had the same effect on me, but $159 for a test runner turned me off big time. If it was half that at $80/$40 for the license/upgrade costs, I'd buy it today. 
&gt; I'll even pass the domain objects directly for read-only views, because the real benefits of domain model / view model segregation is in places that you are taking user input, and being able to abstract front end validation, etc. I learned the hard way that it's not a good idea to have ViewModels for read-only stuff. Like you said, there's no benefit, and if you decide you want to display more data it can be miserable to do for no real reason.
Yes. Salary. Job description. Nine of this calling me to tell me you general have positions! 
That's not really vicious, it's desperate. If companies hire internal or external recruiters to fill jobs, there's not much to be done about it, from either side. And now I'm sad....
Thank you! Craigslist has a lot of chum. You would weep at the resumes and half assed cover letters I got off there for a PT Office Manager posting. Weep.
I've tried to research happy hours and networking but I'm finding nothing specific. I need to do more but right now I'm just trying to get some damn applicants.
Well, there is the benefit of "conforming to the standard", etc., but yeah, I found that for the readonly stuff I didn't gain enough from the ViewModels to make them worth it.
Yes, that is another place we use them... e.g. when redirecting from a POST operation, we'll put a "Message" in TempData and then retrieve it and stick it into the ViewBag on redirect. That allows us to do a simple null check in the view for the ViewBag item to display an arbitrary notification message when necessary.
Around here, C# devs are in demand. I don't have a better recommendation. I was only on the market for 2 weeks last time I was making a change. There are recruiters for consulting companies that I trust more than others. I talk to them first when finding a new contract.
PHP and node.js are *nix (although I'm trying out the new node.js tools for visual studio and they're pretty good thus far. Not perfect but good). Python is visual studio's python tools extension plus some other stuff. I develop in that the least though and have only used PyDev as an alternate IDE.
I'm not sure which standard that is but not one worth following at the cost of hundreds of pointless lines of mapping code.
Not really a standard, but the "one view model per view" best practice that a lot of people cling to. It's a good one for edit view, but unnecessary for read-only.
When you say reserved by the kernel, do you mean the same as below? And if not, what is the kernel doing with that space? &gt; Code that uses the highest bit to tag items (that is, data value versus an address value) fail. For example, a 32-bit word might be considered a user-mode address if it is below 0x80000000, and an error code if above. This is not true with 4GT. Thanks
Listen to this Podcast: http://www.dotnetrocks.com/default.aspx?showNum=954 I listened to it last night, it's about interviews in the industry and describes what recruiters can do better.
Oh. Well I use the same viewmodel for edit or create a lot too.
I used to do that a lot... I don't anymore. Often, my create concerns were different than my edit concerns for non trivial forms. My goal has always been to address the model binder side of this disparity. Namely that a view model should only contain those things that I want the model binder to bind in a post back if possible (that is it represents the contact between the form and the controller action). I do pass other view only info in them sparingly, but explicitly ignore them in the view model to domain model translation / mapping.
Thank you!
We agree. I'm not the one who placed the ad.
uhhh that's awesome. I will follow up on that!
Isn't "Don't fucking lie" like the first rule of everything? I love email too. Thanks for this.
asp.net has some great walkthroughs covering the various flavors of ASP.NET. Channel 9 (http://channel9.msdn.com/) also has some more generic content (general .NET and desktop development). 
Start going over C# syntax. .Net is kind of a virtual machine/abstraction layer, like Java uses. There are many languages that interchangeably work on top of that engine. Which is to say, you can do web development with C#, Visual Basic, F#, etc. Learn whichever one you're most comfortable with (although C# is probably the most commonly used). Maybe play around with [DotNetFiddle](http://dotnetfiddle.net/CsMvc) to get started. You can grab [Visual Studio Express](http://www.visualstudio.com/en-US/products/visual-studio-express-vs) for free. The IDE is one of the most important parts of the .Net ecosystem. Definitely make sure you have it. You can get [Sql Server Express](http://www.microsoft.com/en-us/sqlserver/editions/2012-editions/express.aspx), which is also free and pretty versatile, although obviously lacking some enterprisy features and not as scalable. I mean, you don't really have to *use* it in the .Net ecosystem, but if you want to sell yourself as a .Net developer it's good to have experience with administering Sql Server databases. So, to that end, grab [Sql Server Management Studio Express](http://www.microsoft.com/en-us/download/details.aspx?id=8961), which is a free version of the server admin tool. Play around with it. Learn how to create databases, tables, query, etc. Internet Information Server is included with most windows versions since XP, I'm pretty sure. You can set that up and deploy your apps to it... although, Visual Studio also has a built-in server that automatically launches and hosts your sites for debugging... and... I could be wrong about this, but you can also make your applications self-host as well: meaning they don't need to be deployed to a web server, but rather just run as an executable/service. I'm sketchy on that being a feature of full-on websites, as it's something I've only used for WCF, which is a more API centered framework. Oh, yeah, if you want to get up to speed with .Net web dev, you should look into the MVC and WebApi frameworks as well. Basically, you need to learn the Windows/ISS/SqlServer/C# stack... or... WISC, which I've never actually seen it called. But, it's the equivalent of WAMP. You can swap out the SqlServer part for pretty much any other persistence technology, as there are libraries for all of them. Otherwise, that's your stack. I'm done. That's probably enough.
I'm glad to see someone with your background exploring the world of .NET. You won't regret it. MVC will likely be a good place for you to start because it should be more like what you've worked with before. Web forms are kind of a strange way of doing things if you look at it from the perspective of someone who has been doing web development with other technologies for years. Web Forms was mainly a way for Win Forms developers to jump right in to web development. I'm not saying that Web Forms isn't powerful and good (I still like it better than PHP), but MVC does a better job of separating the server side code from the client-side code in a very good way. You could much more easily swap out the server side code with another technology when using the MVC framework than Web Forms. If you're familiar with JavaScript, then the syntax of C# is very close, with the exception of its strongly typed-ness. One of my favorite things about C# is lambda expressions and LINQ. While you are learning .Net and SQL server, you might as well learn how to use Entity Framework. You will probably love how easy it is to interface with the database using LINQ and the entity framework (although it can be more difficult when you want to do advanced/complicated queries or insert/update data in more efficient ways). Anyway, have fun! 
This is a great start! Thanks. A few follow up questions: - What sort of tools exist for development on Macs? I haven't actively used Windows machine since 2006 when I switched over to Ubuntu. Lately I've been developing stuff on OS X. - What is the best way to obtain visual studio? Is it pricey? - In general, do most C#/.Net/MVC/WebApi things use SQL Server? - Any book recommendations?
Visual studio web express is free. It's quite powerful and you can do a complete website with it. It mainly lacks add-on support and a bunch of project templates that professional has. VS is the best IDE I've ever used and it is well worth the money, but you can probably get by with the express version until you get paid for some work to offset the cost of buying the pro or ultimate version. Of course, if you get a job working for a company that does .Net development, they will most likely provide a licensed version for you. The best thing you can do is get certified and get an MSDN subscription so you can get visual studio and tons of other Microsoft software pretty much for free.
I also don't know how good visual studio would be if it were free. MS is constantly making improvements to it.
Fair point. If it didn't make Microsoft money they wouldn't have a lot of motivation to make it better.
1. Even though I haven't tried it myself it seem that most mac-.net-developers just uses bootcamp or a VM for development. However you have Xamarin Studio on the Mac but I don't know how good Mono works for webdevelopment, might work good enough to get started. Getting familiar with VS is pretty much a requisite if you are going to work with .NET development though. 2. To get started you can download the Express version which is free. 3. Usually yes although it's not a must. 4. http://www.apress.com/9781430242338 for the language and framework and http://www.apress.com/9781430265290 for ASP.NET MVC, those are my favorites but there are many good books.
N--- ... maybe
I think it might be possible, or just living the same life.
1) If you want to develop on a mac, get something like... Parallels, I think. You can run a Windows7/8 virtual machine and do your development on that. It sounds hokey, but I'm on a team with several people who use this setup and it works fine for them. You might be tempted to dual boot, but this is way more convenient. 2) The link from my prior post is for the free version of Visual Studio. It's totally valid for doing actual development, and more than enough to get started. If you're doing .Net dev full-time, you'll want to upgrade then. Either your employer will provide a copy (every one of mine has), you can buy one (it's fairly pricey), or get an MSDN subscription (also pricey, but with access to full versions of almost all Microsoft software for development use). I wouldn't worry about that for now. Just stick with the free version. 3) I've seen every piece of software out there used for persistence. All the SQL engines, all the No-SQL engines, Memcached, S3, Azure, everything. That said, I've also had to touch SQL Server in every position I've been in, or it's at least been on the "prereqs". So, it's worth knowing the essentials so you can put it on your resume. Hell, I'd say the same thing for MySQL, MongoDB, Memcached, Redis, S3 as well. Those are all things you should learn to use (the basic CRUD functionality) in any language. They *all* have use cases that they're well suited for. 4) Unfortunately, I don't. The last book I remember going through was unrelated to .Net specifically, just a general design principles book. There are lots of good tutorials online though, for just about anything you might want to do. I'd recommend going through a tutorial on MVC in .Net after reading about the MVC design patter in general (it is used in multiple languages). Do a tutorial on straight-up ASP.Net development, which is page-based like PHP.
http://www.codeproject.com/Articles/724245/But-How-Do-I-Learn-ASP-NET 
WinRT for the desktop, maybe?
WinRT already runs on the desktop, it's the layer which runs windows store apps on windows 8.
That's great for desktop devs. I'll stick to web and mobile.
Yes, but most of it can't be used for desktop apps right now.
Spoiler alert: WPF is going to be extended so that it can render as HTML. (No, I don't know that, but I could see something like that happening- that fixes the gap left by Silverlight's retirement)
Microsoft seems to let technologies stagnate unless there are competitive pressures. Certainly they did with I.E. I would guess that they are focused on mobile and tablet features, since that is where they have market share they want to capture. As for platform, the web is what I would use for a simple, widely deployed business app. Native apps deliver a different user experience.
XBAP's are essentially ActiveX all over again. I'm talking about actually having WPF render as an HTML5 app.
I agree with you. There are some minor changes (between SL, WPF and WPF in a browser) that make that easier said than done though.
It's just like why though? That's be the kind of transition that would call into question the whole point of a desktop app in the first place. Not saying you're wrong just curious why someone would go in that direction when HTML was always an option.
This is so fucking obvious. Add some chrome around winrt apps, add "unsafe" mode for the desktop stuff, retire wpf and profit. God fucking knows that wpf/rt rendering pipeline is amazing, why not just fucking let as fucking use it!! 
Erm, it's pretty easy when using intune + a company portal app.
I've yet to work for a company that even knew what that was, let alone used it. 
I would use azure and tfs. They host everything and tfs is pretty sweet if you use it right. Has some downsides too but it's all included with msdn or student licenses.
You may want to look into Bitbucket instead of Github, they have free private repos.
Lack of knowledge does not equate to difficulty. Every company I know with LOB apps for iOS or Android use AirWatch or some other MDM to distribute them, this is really no different from the intune + company portal setup that Win8/WP8 has. Don't start confusing modern apps with something designed to replace desktop applications, they are there to compete on the tablet front.
Web Applications have some differences from Desktop Applications. It is not clear that one API is ideal for both. 
Clearly you don't understand the term LOB or really anything that we're talking about in this thread so I'm just going to ignore you now.
You need source control (github or bitbucket). For databases, there are two types of things to sync: 1) data changes and 2) schema changes. Typically you do not sync data directly. Production should have backups running that can be restored from. Whatever test data development boxes need, you should be able to generate from what you put in source control. You should also be able to build the database schema from what you put in source control. So using source control is probably where you should start. 
I've been doing a lot of WPF work lately (in the last year). If there is a new version, I can't wait to see it. It's pretty hard to find fault with WPF as it stands now. The only things I feel are missing have to do with the 3d support. If you've built something in 3d with WPF, you know what I'm talking about. There are a lot of "Well why isn't this in there?" features, like proper shadows. Now that XNA is dead (AFAIK), WPF 3D could use a lot of improvement. I'd love to see it sped up. I'd love to see support for higher order beziers, and some more thought put into beziers (measuring) in general. I don't think what I use WPF for is what it was originally intended for. In my experience, the ease at which I have been able to bend it to my will is really a testament to the great work the WPF team did, and how much thought was put into the platform. I have nothing but good things to say about WPF 2D. I'd also like to see the enhancements put into Metro back-ported to WPF. Making it easier to move from WPF to metro (if it ever gets enough market penetration) would make my life easier. 
Thanks - this was very helpful. I'll look into different source control options.
Oh, I would LOVE that. WPF rendering to HTML5 with the same dev experience and all the Javascript hidden from me? YUM.
I refused to go anywhere near that stuff years ago and will continue to avoid it at all costs. I really enjoy C# and the .NET ecosystem but whenever Microsoft tries to throw it's weight against web standards it always fails. They can do whatever they want with it if they keep it to the desktop. Silverlight needs to die.
Setup a VPN to your home network.
Off-topic. This isn't about Silverlight and web standards, it's about WPF and desktop development.
I don't disagree. But that doesn't stop Microsoft from trying.
Have you done a sql profile on it?
See if you can install glimpse on the site. Might be able to give you a deeper insight in to what is so slow.
From the Article: *"Please note that identifying as a Windows Store, WPF, Windows Phone or Silverlight developer is okay, but I feel a developer should really identify as knowing XAML, not one of those specific platforms."* Really? I feel like they're all the same thing. The top comment here also mentions both WPF and Silverlight and isn't off topic? They're both based on the same terrible XAML framework. The thread asked for my thoughts, I shared them. My opinion is really geared towards XAML in general. I dislike both WPF and Silverlight equally. I hope Microsoft doesn't waste their time in this space. Anything UI related from Microsoft has a history of falling flat and being abandoned.
Pm me, I'll take a look!
I have written so many enum select list extensions its nice to see it finally be standard.
Supposedly there are certain features that only work in Windows 8, but I can't seem to find the list. I recall something about async and debugging.
I think you need to be on at least SP1 of Windows 7, but that's likely the case already.
you need Windows 8.1 to develop WinRT / windows store apps, when using VS.NET 2013. You need Windows 8.0 to do the same when using VS.NET 2012. So unless you're planning to develop windows store/winrt apps, the OS doesn't matter, as long as it runs .NET 4+ (which is Vista and up)
I'd like to hear from anyone who have used EventStore or the concept of Event Sourcing. How was the experience?
You probably need to optimize that query, maybe cache the results for a few seconds so that multiple visitors will get the same list, but the query won't have to execute for each visitor. You may also want to see if your query could use the help of an index. I can't remember off the top of my head how to check that, but I think you run your query in SSMS with show execution plan and it will give you tips on how to optimize it. You Can then copy the code it gives you and execute it.
If you are using LINQ to do your query, it is possible that you are doing something that is enumerating the query object earlier than you want it to. This can cause your code to execute a query that returns all 6,000 records from your table, transfers that data to your app, and puts them in memory before doing any of the other operations of your LINQ query. Make sure you aren't calling ToList() or accessing any properties on your entities that aren't columns in the database or joining on a collection variable that isn't part of your data context. Basically, you want your LINQ query to do all of its work in the database so it doesn't return so much data to manipulate in your app. Also, if you only need a few of the columns from the table in your result set, do a select new {Column1Name, Column2Name, etc} so it only returns what you need. If you need that selected entity to be a certain class type, then make a class and do the select like new MyClass{PropertyName = ColumnName} Also, make sure that if you only need N number of results, use Take(N) on your query before enumerating it so you only get that number of results back from the database. If you post your LINQ code on here, I can help you identify any problems. You don't have to try to format it properly on here.
I bet 5 bucks that he's doing something equivalent to ``models.Select(m =&gt; expansiveShit(m).ToList().Take(10)``. 
Very possible. Search style queries that are complex aren't really well suited for LINQ and have to be carefully thought out.
If you have access, check out TFS online. It's built for VS, and pretty fun.
Right, but still can't help but think there was something else.
I already got some people, thanks
Man all this is way over my head. I'm very new to the asp.net environment 
Post your code so we can find your problem
Do not use this code as is. There's a race condition because the cache key is being stored as a class level variable. This could lock an IP out of an action until the cache is cleared. 
There are a lot. [.NET Rocks](http://www.dotnetrocks.com) is one. Another one is [Windows Developer Show](http://windowsdevelopershow.com).
Whew, not doing too bad then!
This. FluentMigrator is my favorite. Don't forget a build system for quick and easy migration and restoration scripts.
SourceTree is a great tool for git source control.
Sadly, they probably don't know you all that well, and so how could they trust you? They assume you're dishonest because they understand the game theory aspect of competing against so many other recruiters, and it makes perfect sense to cheat. So, you just have to give that one up. Really. However, once you give them permission to submit your resume, you should be able to ask the name of the company.
Have you tried SourceTree? Its very cool git client that you might find useful. 
There was a story on Reddit recently about an idiot who tried to hire a prostitute on Craigslist and got mugged by her pimps and kidnapped for two days. Craigslist seems like a really great place to meet very odd, possibly dangerous people.
Awesome. Didn't know about all of those, thanks
Or at least help you post the right question on www.stackoverflow.com :)
I would write the UI separately. That way you can test and version control it more easily.
There's a mixed version... Make two access files: one for forms, one for data. Your forms file then becomes your front end. That makes everything easy, including upgrades. Access sounds fine for this... Where people go wrong is the try to really grow with access and ask it to do more than it's really made to handle. If you think of it as a quick and easy way to handle some data... It's fine. 
I shouldn't have been that surprised that Hanselman has a podcast too. I'm pretty sure he has clones, or just absolutely no life outside of his job and blogging. Dude puts put a LOT of content.
Find the file that has the code that gets the models list at the top from the database. It's probably an Ascx or Ascx.cs file
Look at the method GetAllForSearch and see that stored procedure that is being used. That is probably returning all models in the database. You need to copy that stored procedure and add some paging logic to it so that it only returns as many as you need to show. Then create a new method in that class that calls that procedure. This will be mostly copy and paste work. The paging logic in the database isn't very straight forward, so google how to page data in SQL. You'll pass the procedure the search query plus the page size and current page you are on and then reduce the result set based on those parameters.
man I need to learn how to program. This is way over my head
Well, that's likely where the problem is, so explore.
Openshift have been an amazing experience for my Python and PHP applications, I can't wait to use it with .NET
Nothing wrong with VB, but as stated, C# is more popular (there will be more samples, more tutorials, etc). Get Visual Studio. There are free (Express) versions and they are incredibly good. 
This is amazing. I love it. I've been writing little demo's for about the last 5 minutes. How does it work?
Neat, but so many types blocked (understandably; the first things I tried to poke at were system properties and reflection). Roslyn as a back-end?
Yep, [Roslyn](http://msdn.microsoft.com/en-us/vstudio/roslyn.aspx) is my best guess too!
OHMIGODTHAT'SAMAZING! Favourited. Nice work!
Any free &amp; local alternative to this other than linqpad (which has limited features in its free version)? 
Its not working. Here is my code. while(true){ Console.Write("This is cool. Next get .Net 4 and the async tasks working."); };
Not sure if trolling.. If not, the error message tells all. 
Not trolling. Just kidding around. 
It looks like we killed it. I can't even get their own examples to run.
What about [dotnetfiddle](http://dotnetfiddle.net/)?
I'd like to think this post title is meant to show the value out descriptive urls
Oh Sweet Jesus, no. I refuse. I've got no problem reading resumes. It's getting resumes that was giving me trouble. Good news is I now have 2 new projects of rewriting all our ads and finding better venues to post them. But WTH I'm paid by the hour so more hours for me.
I just need to find someone who can go through these ads that I've inherited and translate for me. I can do soft skills all day but it's things like "If they have exp. in this then it's a good bet they'll be able to learn this other thing quickly" Thank you for the reply!
ah :P I dunno, you could be ddossing their server with unlimited looping :P
could-that-url-possibly-be-any-longer-i-mean-seriously-that-is-one-really-long-url On topic: Nice tuturial.
A million times this. What I recommend as a companion to this is split the solution into 2 projects. One project is a dll project that has repositories and models. The models are just "dumb" objects that hold the data and the repositories is just an object that has a bunch of methods that pull data from the database and return back collections of objects or save objects to the database. The other project is a web project that references the data access project. The controllers just call the data access project and then draw it out with some html templates (I like Razor). This gives you some neat options. Say you need a console app to do a night reporting job. You can reference the data access project and not have to recreate all the database calls. This is a million mile overview and you may want to add layers in there but it will get you started down the right path.
scriptcs
Slightly off topic, but is there a downloadable / local-running version of something like this? I like linqpad, but it doesn't have intellisense (unless youre on a pro edition).
So my "please support .net 4" will ~~show up in~~ spam Elmah. Excellent.
Dumb title. Nice tutorial.
that's cool, I did not know that there was a dotnetfiddle
Knockout IntelliSense support. Download Now.
Cross-posted on programming. http://www.reddit.com/r/programming/comments/1zr2wp/my_february_pet_project_realpoll_10_technologies/ A toy project involving real-time, c#, javascript and a lot of stuff :)
Well, `Request["tempPrice"]` doesn't actually exist in your form... So yeah, since pages are stateless it'll always revert to `0`.
I have edited it some. If you could take a look now that'd be wonderful. Though Im still getting no output.
Well 2013 is similar, but they bulked them into a single project type. So now you go to web, and choose web application I believe. Then you can select whether you want Mac, webapi, forms, or a mix of those But the underlying 4.5.1 user management is a complete rewrite
Exactly &gt;.&lt; I am a much bigger fan of PHP at this point in time. I just figured since the assignment called for ASP.NET Razor C# seemed like a good way to go, and now I am all jumbled up with using Angular and Java at work and then learning asp.net and just having finished PHP. But back to matter at hand am I any closer with the use of session variables?
Best advice.... Forget php like completely!!!!!
Ye baaad idea. Use visual studio, much easier I haven't used we matrix in forever, can you make an MVC project? That's what you're looking for
Well I'd be all for that except alll six parts of the project are due tomorrow and this is the only section I have not completed so I was just seeing if it were at all possible?
I don't get why they didn't make the features you get from ModernMix default.
You're not going to complete it if you keep half assing everyrhing.
I'm glad I took a look at your username first. Doh!
I saw this and took a look, sorry but I'm in a rush for work but wanted to help if I could: http://bpaste.net/show/lfDuo0vYTChYGnzKvpAt/ The main change I did was to store the temp price in a hidden field, check if it has a value and then proceed. Also decimals for money. I used Visual Studio to test and debug and it seems to work but like I said I was in a rush. Don't worry about the people saying not to use WebMatrix or Web Pages (Razor), Microsoft put these products out there for a reason.
Well this section is what will likely make you fail :)
This may seem old, but it made my day
Yep that got it all working except it should only show my totalPrice when I click checkout. But thanks again for the help!
Well Duhhhh... How could I miss that lol. I guess instead of setting it on the view I can set it in the controller which returns that particular view. My only problem with this is that if, in the future, some other controller returns that view then they will have to 'just know' to set that flag. 
My only problem with setting it in the controller is that if ,in the future, another controller returns my View then the person writing that controller would have to 'just know' to set the flag. I think that is a worst situation then having a Session handled in the .cshtml file.
Google follows links. The links that exists at the point of visit from the Google spider are visited and indexed recursively. Those who do not are not. As simple as that. It doesn't matter whether or not they are dynamically created. Google does not post forms (search) AFAIK, if that's what you're asking.
Google generally won't make any POST requests, but it will make GET requests based on simple forms. Of course it can't know what to enter in text boxes, but it can try the values of selects and radio buttons. XML site maps are mainly useful for helping Google to find newly-created pages quickly when you've got a large number of pages and it could otherwise take a while for Google to find a link to the new page. There still need to be links to the page for Google to find later in order for the new page to rank well after Google knows it's there.
If you want to have pages that are dynamically created like that log them in your database and then add them into an xml sitemap. Like others have said google only follows links and it doesn't matter if those links lead to dynamic content or not. If there aren't any links but you would still like google to index those dynamically create pages you will need to tell google about them. Here's the reference for the sitemap format. http://www.sitemaps.org/ edit: same word twice
Hmm... the bit about get requests of simple forms is interesting. Is there a place where I can learn about more interesting behaviors like that? 
Read the tutorials in here, theres also an eshop tutorial. http://www.asp.net/mvc
I assume your search page is the results of a post back. Google will never see it in that case, as a result it will never crawl down through it to see the individual jobs. You could use an XML sitemap, but that would have to be updated in real time every time a new job is added. What you might consider is a category view, where it lists all the "job" categories and when you click on that it lists all jobs in that category and any sub categories, etc. that way every job listed will be able to be navigated to without a search, someone could view categories from a link on the home page then crawl them through the categories. This has the added benefits of google being able to index your job category pages so if someone is searching for IT jobs your category page has a chance to rank for it. Google can follow this kind of flow easily and will be more reliable than xml sitemaps. Honestly google reads sitemaps, but it doesn't listen to them. If you say content changes frequently it'll ignore it entirely unless the search engine itself determines that content really does change frequently. If they see your job listings are constantly being added to and removed they will crawl your site more frequently to accommodate the high rate of content changes. tl;dr; I would recommend having a category view, it should be dynamic as well, but use it as a way to get to each listing via anchor links only and no form posts.
I like that idea, thanks!
no problem, good luck with it!
If you are interested in a CMS, definitely check out Umbraco.
I think a lot of people take them as a starter and heavily mod them If you're asking if there is a wordpress/joomla like thing for .net, the only one I'm aware of is .net nuke, although I haven't used it in over 7 years, so i don't know if anyone uses it still.
Here's a good video from the dc F# meetup about using F# with eventstore and CQRS: http://youtu.be/MHvr71T_LZw
Check out dirigo edge's cms visual studio template. Its pretty light weight, basic cms functionality, code-first, MVC., etc
OK, I have been out of this for a while, so please bear with me. What is the difference between MVC and webforms? Where can I learn more about what you did?
The biggest boon you'll have in moving to MVC (directly related to your situation, at least) is that the ASP.NET uses (System.Web.)Routing classes to direct requests. The default routing is host/controllerName/actionName/&lt;optional_id&gt;, but it is really, really easy to change. There is a ton of documentation on MVC and custom routing, so google away. 
Can't help you with the converter issue, but as far as gridviews go here is my take. Webforms makes gridviews easy. But unfortunately that means you are making a site using webforms. If you wanna break into mvc and you need grids, jqGrid is the way to go. They have a nuget package for MVC. Easiest set up I've ever dealt with. How big is the site? EDIT: another thing I will just add my two cents on. I hate grids from a design perspective. They still have good use cases, but they are very '90s IMO. Whenever possible and appropriate I change a typical grid view into 'cards'. It presents the data in an easier to scan view, and you can click into them to see more details. I add some filtering stuff in so you can show the cards they may be looking for. Generally users really like it. It is a design challenge at times, the the UX payoff is worth it. Again, my opinion, which wasn't solicited, so take it or leave it :)
probably 15 pages that work against a handful of tables. The security framework will probably take the longest to setup. 
Msdn is your friend :) I'll try to get good links when in front of the computer
Sounds intranet ish? Security framework should be a breeze is asp.net, unless you have to migrate some weird php stuff. They want you to take the php site and I'm assuming mysql db and make it in asp.net with mssql right?
Kentico is my favorite one to use, but you need a client willing to pay for it if they want a fully featured version. Edit: who down voted this, and why? Just because a CMS isn't free doesn't make it bad. Kentico is awesome.
If you can get them to foot the bill for kendo UI, their grid widget is awesome for use with .Net MVC. It's better than anything else I've used. 
DotNetNuke (EvoQ) is a big player too: http://www.dnnsoftware.com/ opensource and commercial versions, long history and a big community
Welp I ended up ordering this and clean code today. Good job
You don't need to use MVC to do routing (not saying MVC isn't great, but it's not required). Here's a walkthrough to what you're trying to do with webforms: http://msdn.microsoft.com/en-us/library/dd329551.ASPX
Try ASP.NET MVC it is a better architecture. There is less abstraction, and thus, less things that go wrong. Web Forms is a hangover from the Web 2.0 days imo. Moreover, it works with the proper HTML5 structure - no "Web controls" weirdness. I made the switch with vs 2 and never looked back. 
does MVC use the backcode that webform uses? I found the webform system comforting because it resembles an application form on the cod side, but its a bloody nightmare trying to get information between the html5 and the behind code unless you really know what you are looking at.
Ive done similar searches. My requirements were : * Utilize my existing CSS * Utilize my existing Accounts system * Must be plug-able. Its own Controller, Model and views without much dependencies. * Uses standard [Authorization] stuff. * A single repository contract... so I can get it rolling with entity. (Seriously, I dont want 3 projects of abstraction). * Reasonable price with a free trial. The end result was I could not find anything. Most CMS are website platforms that tell you how to do your job. They make everything you do revolve around them. There is no separation of concerns, no, they are the concern. It makes it really hard to include them an a piece of custom software (api first). They are everything and a bag of chips, and the chips are pork rinds. Ive thought about making one with my requirements. The one hangup I have would be the "page designer". Markdown is too weak and I really don't want to re-invent web matrix.... wait a minute, Ill just use webmatrix for uploading new blog posts.... yes then I can use all my cool Bootstrap styles.
It still has regular code behind, but the structure is different. Instead of having a .cs file for each "page" you have a controller file (.cs) that implements actions that can each have a view (.cshtml) associated with it. I would suggest just starting a default MVC project is VS and go from there.
thank you. would you have any suggestions as to the issues I have above? it seems to me that VS2013 is extremely unstable when working on any sort of web project. I've never seen anything like it.
It sounds like you are just trying to wing it based on you app development experience. You'll find some common ground in the server side code but the way the web works in inherently different than apps and the UI especially so, being nonpersistent in nature. For example I don't know anyone who uses the designer in VS for asp.net work. I would recommend watching one of the free videos to get the basic down or the PluralSight free trial for even better content.
Just a word of warning, the code sample you have provided is vulnerable to SQL injection.
while true with the winging it side, I am not using the designer (honestly it doesn't even remotely work with site.master) the designer i'm talking about is the partial class of the pagename.ASPX.CS file that defines all the UI elements that the backcode has access to. unfortunately there seems to be a disconnect on how to assign those code elements to the &lt;ASP:textbox (label ect)&gt; that has been a nightmare trying to connect. either way I guess I'll do the groundwork and look into MVC
appreciate the heads up. this is just a test I've done with the local DB, it doesn't even work :/. when I figure out how to even get a proper connection and insert command to a local DB, I'll properly sterilize user input. just to be certain the concern would be at workerName.Text as that is direct user input, everything else is generated server side (as far as i know User.identity.name is server side as is the GetUniqueWorkerKey())
I have no problems dealing with C#/c++ projects. the majority of the the disappearing files seem to happen with a webform application I generated using VS2013 about 2-3 weeks ago, I noticed newer ones seem to have changed their entire directory makeup as well as their format, and have had significantly no real issues with files going blank.
No, Model-View-Controller has no 'code behind'. No 'controls'. No 'pages'. No 'postbacks'. MVC revolves around the natural http request/response cycle. Requests are routed to the controller. A data model is created and passed to the view. The view is pure html with access to the model using razor syntax. Take a look at http://www.asp.net/mvc/tutorials/mvc-5/introduction/adding-a-view 
also thank you for the pluralsight. looks like a good source of information, I'll give it a try
interesting. thanks for the reference.
Check [this](http://pluralsight.com/training/courses/TableOfContents?courseName=mvc4-building) out. Since you're already familiar with C#, it should take you about couple of days or less to get through that entire course.
&gt;aspx.design.cs files are not generating the proper structure to the elements present in the HTML5 file so I have to add them all by hand don't hand edit the designer files, did you read the comment block at the top of them? depending on how youv'e got everything set up, it should be just the aspx and aspx.cs files that are actually responsible for how things look and work anyway, the .designer file is usually pretty irrelevant, but hand editing it CAN cause things to go screwy....like they have done
that would explain things. I was getting issues with "doesnt exist in the current context" and a similar question on stack exchange had the answer as "just enter them manually if the form doesn't generate them itself. as that at least got rid of the error, I assumed it was a proper workaround to the file not generating itself properly.
You can use webforms with MVC or you can use the razor engine which is completely different.
do you have update 1 to VS 2013? Any extensions installed?
I have update 1 which I noticed changed the webforms which I assume is a partial fix to my pre update 1 project. no extensions.
nugget packages updated maybe? I pretty rarely use webforms(pretty partial to razor) so it's all I can think of. kinda strange problems you're having. sorry I couldn't be of more help.
Do not waste your time with DotNetNuke unless you enjoy failure. 
As the others say ... grids and repeaters in MVC aren't a problem. There's plenty of components out there that can do the heavy lifting. Do yourself a favor and use MVC. It runs circles around webforms in a way that's not even funny.
You're wrong about that.
Correct, although I would recommend you parameterise your query instead of concatenating strings.
We've had good luck with [DataTables](https://datatables.net/) at work, although the server-side implementation can be a bit tricky.
I really want to like DNN and have used it a few times (though not since 4) I always ended up switching away from it at the end of the day because it was just too complicated and convoluded for the end user. I also ran into speed problems on anything but a dedicated set up. 
I think I tried that one as well. Very flexible product, but yeah a but tricky at first.
&gt; either way I guess I'll do the groundwork and look into MVC I would really do that. The code is much clearer and easier to read/change than WebForms.
I just wanted to throw in here: thank you guys for helping me with this. looks like MVC is the answer to all!
I would say Umbarco or Orchard are the way to go. While the default ways to use them include websites the application design is a fairly well structured API. I have not done it yet (haven't needed to) but you should be able to rip the head off either of these projects and call the API as you like. IIRC from looking at Orchard a couple years ago there were some XML-RPC API's already in place. Honestly I don't see big content sites often which is when I use a CMS and when I have it's typically in an operation running something like Documentum already. 
8.x is certainly better than &lt;8, but I still can't leave ReSharper running all the time. I've tried disabling as much stuff as I can to speed it up, but for even small projects it becomes obnoxiously slow, at least in the VB side of VisualStudio. It's fine at first, but considering VisualStudio is pretty much permanently open, after a little while it just starts bogging down... so I disable ReSharper again (thankfully they allow that, otherwise I would give up on using it altogether). I'd love it if more things were able to be turned off completely, rather than toggling the whole add-in... cause there's really only about 7 things of ReSharper I actually use. Using VS2012, on a i5 @ 4.5GHz with 8GB DDR3 @ 2000MHz.
php&gt;asp.net converters... *Dear God...*
Using the webforms post back page event model is sometimes an exercise in tricking it to do what you want. From your description and background I would maybe look at using web methods (simple static functions that you call into from JavaScript) in the code behind and just make the aspx page hold HTML and js. Use Ajax to hit your webmethod end points. This will be easier to secure and encapsulate your pages. The "correct" way to do modern asp.net is mvc or webapi, but they are very different animals to set up and secure.
Something like a PHP-&gt;.NET converter sounds like... just... *the worst*. If the current site is bad PHP, the result will be WORSE C#! If it's your run-of-the-mill CRUD website, find yourself a decent .NET CMS (content management system) and work from there.
Hi, Really? How would this create a race condition? I'm very moivated to fix this, but why would the cache key held in the Filter class create a race condition?
To the void, as it should be. http was designed stateless for a reason! Seriously enough, I actually started in MVC. When I moved over to WF, it felt like an abomination that I had to post back to the server so it could update the view state when all I wanted to do was add a row to a table. Let the client handle the client's needs with JavaScript, let the model handle database &amp; business logic, let the controller handle fetching data and pages, and let the view handle the initial layout of something. It makes things so much more manageable. And without having to try and manage a view state, you're set up for unit testing!
How does it compare to Heroku and AppHarbor? Any ideas?
Very good advice, it took me many years to beat this bit of info into my coworkers. Basically 99.99% of the queries were concatenations. Hell, I even found stored procedures that were basically doing string concatenations to build a query, then executing THAT. We eventually ran into a customer that runs vulnerability scans on any web app that they use, and I felt validated when they started hitting us for pages being vulnerable to SQL injection which can be easily avoided by following your example. 
You must work for them. I gave never met another programmer who likes them. I have had at least 4 jobs where I was to remove them. Now I am against anything webforms because of the html generated but yelerik takes the cake. Those things are so heavy. Also, once you are in any mvc like project there is no need. So many wonderful light free things out there.
You are, of course, completely correct! I just tested it. It was my understanding that ActionFilters was constructed for every request, but that is obviously not the case. Thanks for pointing this out to me! 
I haven't read it yet, although we have a copy in the office library. As far as it concerns the book I suggested, it is written with Java in mind but the concepts the author expresses are universal and improved my way of coding dramatically 
&gt; You must work for them. LOL! Uh, no. My experiences are just the polar opposite of yours. We just disagree. I know there are tons of free frameworks/widgets out there. Putting them all together is a lot of work; at least a lot more work than Telerik. I work in a 2-developer shop, and if we had to build such nice pages by hand (using open source), we'd never get anything deployed. I'm exaggerating, but my point is Telerik saves dev time, and the support is 10x better than open source.
Haha I ended up ordering both this and the art of unit testing. Going to start with unit testing 
He's claiming you're using Web Forms when exposing WEB API's. I find that weird. He's even exposing the endpoint through an MVC Controller. Where's the Web Form in that?
I think you're misunderstanding what he wrote. He says it's easy to *integrate* WebApi into WebForms, not that WebApi is part of WebForms.
right. I misread the *Why Mix Web Forms and ASP.NET MVC*-paragraph. So basically he's not *recommending* WebForms for anything, just advicing on how to mix the technologies on legacy apps.
That's how I came across the article. I have an old webforms app which would be much better off as MVC. It's complex so I can't just convert it over, so I've been exploring alternatives.
My old sensei once told me. Nothing in excess including moderation. I find that the patters and principle that have arisen in the last five years fail to heed this warning. Everything is taken to the extreme or over simplified to the point of supplying no value. The Software Engineering world needs to turn back the clock a bit and re-think the over-engineering that has been going on. We need to get back to our roots. Write extensible code quickly. Everything else is fluff. *edit:* Formatting - Grammar
Openshift rocks!
Indeed! 
The main app I work on is mostly a legacy Web Forms monster. Think of a heavily modified forked ancient version of DotNetNuke... We view the Web Forms portion of the app as the configuration and the MVC layer as the API. All "tabs" and "modules" (dnn term) are the result of Web Forms Controls (*.ascx files) being placed on an aspx page. None of these controls use postbacks or viewstate which lets us build on a ton of output caching all over the place and is generally not expected to change. Many of the Controls make calls to interface with our APIs to access dynamic content. For example we have the following 3 modules, each module consisting of a "View" control and a "Settings" control: * Generic Searcher - displays a form (which one = settings), loads values based on a url parameter (whatever you searched for) and on click of a button triggers a new Get request for the new url. * Generic table - displays a table (which columns = settings) that loads results based on an API call (which api to call = settings, etc); some columns may be links to other tabs * Export lister - provides a list of hyperlinks (again, settings to which) that trigger the API to output the data as some format for external view (Excel, Pdf, Word, Calendar, ...) A client may have a page on their site with these modules (among others such as the "AJAX" versions of those 3 which use a hash parameter instead of reloading the page after a querystring param) configured to interact with a predetermined API. The API calls go to Actions on an MVC Controller (which is generated at compile time based on our classes and some attributes among them). We had 3 goals from the outset of this program: 1. Separate site configuration and testing of configuration from interaction (thus a relatively simple Web Forms app to deal with configuration requirements) 2. All interaction possible via some 3rd party application through API calls via an https proxy, some other sort of RPC or a class library. 3. Automated testing of the API. The MVC layer in our application is mostly a generated result of a post-compiler task the class library. We have no views (all output is generated via a ViewResult implementation that aligns an ActionResult instance with a desired format. In the first implementation (pre-mvc1) The whole API was a single http handler which dispatched to the correct method on the desired instance based on reflection of the class library. Moving to MVC (we are using MVC2 still) allowed us to get rid of the reflection code with a generated set of controllers. I've started the task of moving to a newer stack (our code is on the new framework but still calls out to the old assemblies for the MVC layer; obviously that is a bit of overhead we are dealing with) but the process is slow as we are using (via the code generation library) many intricate details of MVC2 that aren't exactly the same in the newest library and at this point we can't change the public facing aspects of the codebase (no test regressions at the library level are ever going to be allowed save for security concerns, no url, querystring or post data changes are acceptable and no output format meta-data-structure changes are permitted). 
Fool me once, shame on you! Fool me twice, shame on me!
&gt; Microsoft.AspNet.Identity 2.0 So Im going to have the pleasure to deleting my "Account Password Reset" additions? Cool.
If you're using TFS for source control, try deleting your workspace and then re-adding it. Also use a server, not local workspace. Large projects don't work well with local workspaces!
We're using Git for this project, so that's not it. I didn't know large projects don't work well with local workspaces. Why is that?
More than 100k files? Use a server workspace: http://msdn.microsoft.com/en-us/library/bb892960.aspx#server
OK - not in the same boat as me then. I've reverted to server workspaces on the main project I work on. Good luck finding a fix :)
Same here with the debug&lt;-&gt;release switch on a solution with 27 projects, VS freezes for a while. It's really annoying. No problems with renaming files though.
How long is "a while"? For me it's somewhere between 1 and 14 hours ...
Same here with a solution with ~50 projects and &gt;1000 files. Freezes for about 15 seconds.
Not anywhere near that, thankfully; more like 5-15 seconds.
Rename your .suo file in the solution folder. Those things get corrupted easily. If it doesn't fix it, name it back. 
&gt; OK - not in the same boat as me then. I've reverted to server workspaces on the main project I work on. Good luck finding a fix :) It's pretty safe to delete a SUO, it will be generated anyway on opening. I created this clean script, maybe it helps: http://pastebin.com/5UqNztN5
5-15 seconds is normal. VS is doing work in the background to make that switch.
Background operations, by definition, shouldn't freeze the UI..
Sounds like a job for procmon from sys internals. Fire it up and see what the hell visual studio is actually doing. Sounds like something io related if your cpu hasn't spiked 
Yeah, see my latest update. Apparently it was trying to connect to a server that wasn't replying for some reason.
I was also referring to the number of files and total file size, which is fairly small, but I guess I could have been more clear about that.
Depends on how CPU intensive the action is and if VS offloads the entire UI operations to a graphics card. But yes in general background operations shouldn't freeze a UI.
I remember hearing this would happen with VS2010 if your recycle bin was relatively full. No idea why though. 
Thanks for posting a final update with solution. Now I will know to look for this in the future. Way to make /r/dotnet a better place.
I just took the course, it is worth it.
I used an asp -&gt; asp.net converter once (back in 2005). It did get rid of all the includes and separated the view from the &lt;% %&gt; code inserted everywhere. I'm sure php would have the same problem, so it is possible.
[Here](http://distributedpodcast.com/2011/episode-5-cqrs-eventstore-best-frameworklibrary-ever) is a podcast on one company implementing it, among other interesting podcasts on that site I suggest listening to. Prepare for good mind blown strategies (CQRS and DDD has forever changed how I architect, even if I don't use them directly). [Here](http://msdn.microsoft.com/en-us/library/jj591556.aspx) is a case study on CQRS with EventSourcing. [More here](http://abdullin.com/)
If I recall correctly for 2012 you need the productivity power tools 2012 extension for this. 
Yup.
Sweet. Learned something new already this morning.
DAE remember Google Weirdos on DNR? Rory looking at google search term from his blog traffic.. frickin hilarious.
I have VS2012U4 with ReSharper and without power tools and it doesn't have it, are you sure you don't have power tools installed? (on a related note I'm installing power tools right now)
You are correct, I have it installed. I do not recall installing this... Scary!
And to expound...it's the Map-mode scrollbar.
Not quite sure what you're after, but are you basically saying you want to go from UserViewModel to UserDBModel automatically (like how MVC model binding can sort of do)? If so, take a look at object mappers like [AutoMapper](https://github.com/AutoMapper/AutoMapper).
Almost, I want to take this one step further. Normally you would have something like this in your controller (if you go for fat controller) public ActionResult SetPassword(UserViewModel user) { var userProvider = new UserProvider(); var userModel = Mapper.Map&lt;UserViewModel, UserModel&gt;(User); userProvider.SetPassword(userModel); } where userProvider.SetPassword has this signature: public whatever SetPassword(UserModel user) Now, I want to get rid of the Automapper line there and be able to call the userprovider function with the view model object and have the mapping done somewhere else. Makes sense?
Yup, I could do that, but then I would have to do that for every function, when I actually just want to do it once for every mapping. (And then use an attribute or something) Really just wondering how MVC does it. I don't think they generate the functions at compile time.
Makes sense. But where do you want the mapping done? You'll have to do it somewhere. Do you want to change the parameter of your controller action (if so look into custom model binding), or the parameter of your UserProvider method (if so do your mapping in there)? Either way something's gonna have to do the mapping. I guess you could use an implicit conversion operator on both models that does the mapping for you but that might get a little confusing.
&gt; implicit cast operator. Thanks! TIL So I would extend my model and viewmodel classes with the respective operators that call automapper... yup, that might work Also, didn't know that MVC is open source. Edit: Sweet, this works: class a { public string s1 { get; set; } public static implicit operator b(a a) { // Automapper code here return new b {s2 = a.s1}; } } class b { public string s2 { get; set; } } class Program { static void Main(string[] args) { stuff(new a {s1 = "blah"}); } static void stuff(b b) { Console.WriteLine(b.s2); } }
&gt; You'll have to do it somewhere. That's the thing. MVC does it somehow as well. You write the model mapping and it figures it out from there. I want to do the same, just outside of the controller. So yes, for the parameter of the UserProvider method. 
I just mentioned the cast operator because that's a possibility. Please, please! Don't use them for this purpose. It's a really dirty hack and obfuscates your code. It is really bad style.
Well, somehow MVC does exactly the same and it's a really nice feature, to be honest, if used consistently.
They for sure don't use implicit operators... Not even the Microsoft folk is that stupid. Can you explain how to get to your mentioned code using VS2013? Neither the new or the old MVC project template produces that code. When you can explain how to get the code, I can tell you how they do it exactly.
already redid the entire project in MVC. so far its been great, although there seems to be an issue with cached styles when locally debugging the program (all my styles are bat shit crazy, then when I publish they correct themselves) also seems to be an issue with whether or not a style applies to a @html.actionlink, half my links are standard style, the other half are correct, despite the fact that they are exactly the same (literal copy/paste)
Is this feature not available in express? I've just got the standard scroll bar options when I right click on the scroll bar. =\
Have you heard of SharePoint? it's a monolithic CMS (and more). Has a lot of users in the corporate space and a large developer community.
Start doing hobby projects with new technologies. "Where to start" is so subjective, there's no single or good answer. Just start tinkering.
some specific answers: http://msdn.microsoft.com/en-us/library/vstudio/ms171868(v=vs.100).aspx http://msdn.microsoft.com/en-us/library/ms171868(v=vs.110).aspx 
in this case the return values and calling code are all private to the class, so there's no leaky abstraction. I agree on favoring explicit casting over implicit for public interfaces. I hardly use operator overloading at all, so that's why I thought this 'refactor' was pretty nice.
Yeah I agree with this. Added an overload with an out parameter would allow you to not change any current instance of where the method is being used and allow you get the value you are looking for at the same time
All those reasons are why I figured it was probably ok in this case. Still, you don't know what goofy thing some one is going to do later and not expect it to behave this way. What you do is a matter of your priorities. You could spend the time now and do it the right way, or you could potentially spend a lot more time later trying to figure out why some bit of code is behaving in an extremely strange way. It's a judgement call.
This was the first thing that came to my mind as well...
If you want to catchup on what's new, you can look at the documentation that /u/JonnyRocks linked to. If you prefer video versions, here are a few that might be useful: [What's New in .NET 4.0](http://channel9.msdn.com/Shows/Devs4Devs/Whats-New-in-NET-40) [What’s New in Microsoft .NET Framework 4.5](http://channel9.msdn.com/Events/TechEd/Europe/2012/DEV331) [What's New in .NET Development](http://channel9.msdn.com/Events/Build/2013/2-303)
Hmm, ok. You should have a look at the custom model binding. It's really a cool feature of MVC. My question was not about using automapper but when to invoke it. MVC does something similar behind the scenes automagically and I want to plug automapper in there to not just map between POST values and view models, but also between view models and models.
I guess I don't understand what you want then. As I said, automapper is essentially what you are asking for. As for custom model binders, they can indeed be very powerful. But I don't think they are really very applicable here.
I wouldn't pursue that. The entire point of having a view model is to segregate the views model from the domain model. At the very least, all of your providers would need knowledge of your view models to do this (likely by method overloading and embedding the mapper there). Model binders are not magic, they are part of the route handler invoking the controller method... It essentially uses reflection to read the method signature and attempt to build objects to hand to it from a collection of values. In essence: anything that you wrote to try and do this will be at least more complicated than just using an object napper. It is literally the use case for them. And the controller is the right place to do that translation as it's one of the prime duties of the controller (to translate between view models and domain models). 
And I think it's the wrong approach. Your method now does two things: 1. Get the distance. 2. Decide whether it's above or below treshold. You should refactor the method to only return the distance, and write a second method that determinates whether it's below or above the treshold. You should also avoid Tuple, as the obfuscate the code. Accessing "Item1", "Item2", and so on... Later no one will remember what that is, and always will have to look it up. Same with implicit operators for custom types. They feel unnatural and hide what is actually happening. Make it at least an explicit operator, if you insist on this solution.
I think what people are getting at is viewing the code that MS used to map a request (i.e. POST/querystring values etc) won't help you create some sort of automatic mapping between ViewModel and DBModel. The most automated I've gotten in the past is to use a naming convention for all my view and db models like UserViewModel and UserDBModel (the "User" bit is constant") then do something like this on app startup: var typePairs = from a in AppDomain.CurrentDomain.GetAssemblies() where !a.IsDynamic from t in a.ExportedTypes where t.Name.EndsWith("ViewModel") || t.Name.EndsWith("DBModel") group t by TrimModelSuffix(t.Name) into pair select pair; foreach (var typePair in typePairs) { Mapper.CreateMap(typePair.First(), typePair.Last()); Mapper.CreateMap(typePair.Last(), typePair.First()); } Now, providing the mappings are simple (they are in my case; they all have identical property hierarchies) your conversion gets done in a single line (but you still need to write that line somewhere!). Whether that line is each time you call and receive an object from your repository, or in an implicit conversion operator or what that's up to you. The reason the mappings happen before you get to the controller action is that MVC has a whole pipeline for this sort of stuff. Obviously there's no pipeline for calling a repository method as you wrote all the code. You could easily create your own "pipeline" which was basically just a method that converted the type for you, but you've gained nothing as the conversion is a single line anyway.
out/ref variables are a pain (for things like testing) and generally are an indication you need to split responsibilities.
This needs refactoring into a flow of: 1. Get the distance, whatever that distance is. * Do stuff that you do for **both** "found" and "not found" distances * if the distance is "found". * Do stuff you do with distances that are "found" * Optional else: * Do stuff with distances that are "not found" step 2. can go before and/or after the 3. and 4., dependent on your needs.
Yes, that's the problem I ended up with when I used the implicit operators. It looks quiet nice but it does mean that the ViewModel has to know the Model at least to invoke AutoMapper. Also generics don't work, so for Lists and such I still need to .ConvertAll&lt;TargetType&gt;()... Bummer
Cool solution, although probably not one I would be proud of checking in to a collaborative source control system. I do appreciate the feeling of coming up with such an elegant solution though. And thanks for reminding me there is an implicit cast operator overloading in C# :)
The first solution you have suggested is exactly how we accomplished this in our MDI app. We had a custom reporting solution that needed a WPF Pivot Table control added to it as an alternate viewing method. We created a new WinForm Form, used and ElementHost control and plopped the WPF control into it. That WinForm is then called by the MDI Parent. So far this has worked fine. System response has been good even when used on a Terminal Server instead of the app being local on the customer's computer.
hmm, I didn't get the notification in my VS menu bar. 
Downvoted. There is no "service pack 1". [Update 1 was released on January 20, 2014](http://www.visualstudio.com/en-us/news/2014-jan-20-vs), which was 7 weeks ago.
Like I said, the detect method is used in over 50 places in if statements and for loops. I do not want to touch/write an extra 100 lines of code, just to satisfy one case. The detect method is private, so there's no leaky abstraction. My example is a bit over simplified, but the detect method uses more then just the distance to come to its conclusion. The only thing i'm interested in is true/false. The 'extra' returns result (distance, and some more variables) are only used in a few cases for debugging / logging purposes. That's also why I didn't want to go for out parameters. The method already has 5 parameters (2 optional). And i'm usually not interested in those. Using a struct as a return result allows me to add more variables in the future without writing extra overloads.
There's no Service Packs on Visual Studio 2013, only big Updates. The latest one (in development) is the Update 2. http://blogs.msdn.com/b/webdev/archive/2014/02/25/announcing-new-web-features-in-visual-studio-2013-update-2-ctp2.aspx
Good stuff. Sounds like the way forward, then!
This is confusing. In VS2012 they introduced the term Update, now they're back to Service Pack? mycall, could you elaborate?
It's usually a sign of a bigger problem. I agree, though in this case the class only has one responsibility. It's just a lot of code :) Maybe some parts could be refactored. But i'm also bound to a performance limit ( &lt; 33ms / 30 fps). So I don't want to add too many abstractions, just for the sake of clarity.
I'm slightly more rusty than you. Here's whats on my training schedule via Pluralsight ( which i recommend heavily now like everyone ) : A refresher on C#, MVC, Entity Framework &amp; LINQ, Unit Testing MVC, and IoC in MVC. Everybody wants MVC now, I rarely see WebForms jobs anymore and it's costing me job leads apparently. This should get you caught up with the .NET stack. But then you'll read up on Node.js and down the rabbit hole you may go again :)
.....
I like the idea of node but I gotta admit I haven't found a single use for it yet at work in a .net environment. Maybe if I have a high performance thing returning small payloads but that's rare for me too. Node is a great tool I'm just waiting to find something that'll use it.
I think most of the points are moot - 1. *Node is fast and very scalable* - So is ASP.NET utilizing OWIN and Katana - 2. *Node’s core programming model is very simple and straightforward* - C# and ASP.NET are simpler, even to a novice; in fact, I would say C# is the language where it is the hardest to do something the wrong way. - 3. *JavaScript is everywhere.* - While I agree, it does not mean we should push it in places it doesn't fit. - 4. Not listed - 5. Not listed
I would love to switch to NodeJS from Web API. I think using Angular and NodeJS is the fastest and best way to get something off the ground.
You must really know umbraco inside out. How did you learn the platform? I find the docs to be sparse at best. I'm considering an umbraco.tv subscription but not sure if it'll be worth it. I love the platform and have built one client site on it having previously worked with DNN. 
I think the reasons should be a comparison do the ASP.NET stack that exists already. It lists reasons why node.js is useful... But why for ASP.NET developers, when we have everything already?
I feel like an absolute amateur asking this, but in what instances would you use Node.js? If it's a server side framework then why would you use this over .NET, PHP etc? Or is it meant to be used alongside for specific tasks?
I concur with the guy above. We have an entire app built like this that's been running for about 5 years now. Pure wpf is better but I don't know of any other way to mix content like that. 
Put down the kool aid. JavaScript is a terrible language for maintenance. It's dynamic nature makes it difficult to refactor. There's no good reason to use this for business apps.
http://msdn.microsoft.com/en-us/library/aa705899(v=vs.85).aspx
Good question... Maybe if you're building a rapid prototype? Personally I wouldn't bother even then.
As you can't refactor everything in one go, I'd approach it this way: * examine the piece of code you want to refactor * figure out the feature/features it represents * after that, write tests against the current code (no mocking!) and check whether your assumptions about the feature of that code were correct. * only then proceed with refactoring only _that_ piece of code. The net result is that first you understand better what the code actually does, and you end up with a test which tests the new code that it works. Your tests will never cover everything, they're solely meant to check whether a feature actually works. 
You could use a cache table to write all of your currently online users to in the login even and when the session expires you could delete them. Then a a quick query of users you are friends with from that logged in table should do the trick. As far as storing conversations, probably for the current conversation cache it somewhere, but some sort of conversation table with a convo ID (lookup table between user id and convo id then a table of just plain text conversations written). That seems like a rough idea, hope it helps
You could perhaps look at what [Jabbr](http://jabbr.net) does. It's built on top of SignalR and it's source is available on [Github](https://github.com/JabbR/JabbR)
Was going to recommend this too. No reason to reinvent the wheel. 
oh one of those "teams/collaboration" guys, eh? i hate that shit. we collaborate on skype and screenhero and we sit 5 feet from each other.
I would have a web service (wcf or web API, it doesn't matter a lot) that the windows forms app posts to. I would make sure the web service is designed to handle async calls so your desktop app isn't waiting for responses. I would make the mvc app read from the same database the web service writes to. Some other notes: if database performance becomes an issue, consider splitting to two. You could have one database to handle heavy load as the web service writes to it and another for the mvc app to read from with a job to copy new data over on a schedule. Also, consider adding an authentication layer to your web service. Just don't mix web service authentication with authentication for the mvc app. 
What is the desktop application doing with the data? The easiest solution would be to use a database to store the data and have whatever web app just periodically check for new entries.
I use [Pusher](http://pusher.com/) to do exactly as you described. Literally same exact project - a windows form RFID reader communicating to a web front end. I also have it log the reads to a database but for the web frontend it uses websockets via Pusher.
Just want to second signalr. Definitely the way to go
Google.com
Definitely web apps. I'm a web designer that's trying to learn web development. I get by using PHP, but my new job uses .NET and a whole world that I know nothing about (IIS). I'm hoping that someone can point me in the right direction to at least developing a better understanding of what the heck is going on. 
http://www.asp.net/mvc ; pluralsight.com Not books but this hopefully will get you started until someone else jumps in.
[But How Do I Learn ASP.NET?](http://www.codeproject.com/Articles/724245/But-How-Do-I-Learn-ASP-NET) 
Perfect. This has a LOT of useful information. I greatly appreciate the guidance. 
Thanks!
I would second the advice on learning MVC/Razor over Webforms. This [tutorial](http://pluralsight.com/training/courses/TableOfContents?courseName=mvc4-building) from pluralsight should get you up and running in a couple of days. Just learn some basics of C# before diving in.
Thanks for letting me know. This is the first that I've heard of C#. I recently finished an associates in web and multimedia tech. I'd vaguely heard of ASP... but ASP.NET, IIS, C#... I kind of wish we'd explored things outside of using XAMP, PHP, and MySQL...although at least MySQL might come in handy. heh.
&gt; I kind of wish we'd explored things outside of using XAMP, PHP, and MySQL It might not have been necessary because what you learned (LAMP stack) is essentially a different set of tools to do exactly what ASP.NET can do. 
Hm. So learning this might not be completely painful. Good to know. 
[Pro Asp.Net MVC](http://www.amazon.com/Pro-ASP-NET-MVC-Adam-Freeman/dp/1430265299/ref=tmm_pap_title_0?ie=UTF8&amp;qid=1395018549&amp;sr=8-2) is a decent book that will walk you through building a functioning site from scratch. 
start at http://asp.net I wouldn't waste money on books. Its all free online with video tutorials and whitepapers. Once you know .net then get books for the more complicated topics.
why the downvotes? Google is the greatest IT support and development tool that ever existed.
It seems to me that working in Visual Studio is about 50% knowing the language and 50% figuring out how Visual Studio functions. It's worth it to take some kind of "course" just to figure out Visual Studio's kinks.
We see these threads about once a month or so, can someone sticky an FAQ on learning .NET somewhere?
Poke around the visual studio sample apps too, they are a good learning resource.
You can use the click event of the button that you add. It should have a sender parameter that tells you which button has been clicked and should have a parent that would be your user control. I'll have to check tomorrow if you want to know more. There might even be some kind of repeater controls you could use but I couldn't find one with a quick search.
If Xamarin becomes a part of VS I'll be in heaven!!!
Agree! Even for the Indy developer it is just too expensive in my opinion.
If they are purchased I hope they retain control of the products. And of course that dot net on ARM is pushed forward more and more. I recall my previous comment 4 months ago was viewed as "crazy talk" http://www.reddit.com/r/dotnet/comments/1qjjwk/microsoft_partners_with_xamarin/cde04g4
not to mention indie doesn't integrate with visual studio I've been learning Objective C though (and by learning I mean i did one course on Pluralsight lol) and it's not as terrible as I thought, even though I had to by a MacBook just to write IPhone apps :/
Two months ago, I filled out an MS developer survey for one specific reason: to ask MS to buy Xamarin. Xamarin is expensive, but there are aspects of their business that are still being run as if it were a free, open source project.
Please be true and end Java's reign.
I hope this is true, it's been a one of those no-brainer *why haven't they done this yet* things for a while now.
Nice, I was just thinking the other day that they should do this. Makes sense. 
I surely hope so!
Non hijacked, original version: http://bradwilson.typepad.com/blog/2014/03/getting-started-with-elasticlinq.html
Why are you guys rooting for this? It looks like the classic embrace, extend and extinguish tactic. What possible good could Microsoft do to Xamarin? I fear we would be given one, maybe two versions of VS with support for the Xamarin tool chain after which development slows to a halt and MS focuses on the next big thing and we're left with a buyout that simply removed a competitor.
People are expecting a MS buyout will make Xamarin included in Visual Studio / MSDN versus the [$1,000/year /platform/developer pricing](https://store.xamarin.com). 
If MS had wanted to kill them, they could have sued them long ago over the reverse engineering of libraries in the Fx that were proprietary libraries, or at least that has been the talking point even 10 years ago. It never happened, MS has become more open over the years. The slew of open source projects MS has put forward for .NET is a testament to that.
as far as I can read is something like RavenDB, or?
That would be an amazing development. Having xamerin built in VS without spending $1000 per year 
I had the same thought. But then I realized, that if there is no solid way to re-use existing skills/knowledge on mobile platforms that matter, devs will simply move to a platform which does (i.e. move away from C#/.NET and towards java/scala/clojure as those languages run on the JVM). So MS needs xamarin now to make sure devs stay on .NET. Therefore I think it's not that they'll invest in xamarin, but simply buy it. Investing in it is not solid enough. 
Exactly this, I expected everyone to be outraged ... This would mean the end to two somewhat independent implementations of .NET.
Interestingly, 4 months ago, Scott Hanselman said he didn't think it was going to happen: http://www.reddit.com/r/IAmA/comments/1qp91h/iama_we_are_microsoft_aspnet_and_web_tools_team/cdf1qrh 
What are the benefits of two independent implementations? I see a clear reason as a developer to prefer a consistent environment across platforms.
Well, "across platforms" is one point, right now we are have a broad platform support, one thing Microsoft is not known for. I really think it is great to not be 100% dependent on Microsoft.
Yeah well I think we've seen with this WinRT mess what happens when you placate the platform teams over the development teams. Dev div has always seemed to have their shit together way more, probably because they are developers themselves so the feedback cycle is quicker and more natural. Gu coming out of there and turning around the server\cloud stuff doesn't hurt either.
You don't even know what that term means. 
So? He's just a talking head, he has no real insight into what's going on.
This would definitely be a step in the right direction for mobile development.
That isn't going to work, no. And just because the company folded doesn't mean you inherit the license from them- that license was their asset, so unless someone explicitly transferred the license to you, you don't get to keep it.
To expand on that: Downloading and cracking VS is about as legal as keeping that version.
If I could develop windows phone apps without installing windows 8, I might do it.
Wow what would reddit do without your brilliant contributions.
I bet they would kill it for Linux though. 
It was part of the contract that I receive VS 2012 pro. 
That they *provide* it, or that they purchase it for you? There's a big difference between the two. The company may have folded, but I assume the human beings involved didn't die. I'd start with them, and then I'd work with Microsoft to recover your license.
Why would you think that? If anything, I bet they would invest more into it. Right now Xamarin doesn't invest in the parts that they're not directly making money from because they're still in startup phase. But Microsoft makes tons of money from Azure, and people can run Linux on Azure. I could totally see Microsoft improving Mono's web stack on Linux. It makes more sense for them to do so than for Xamarin to do so.
Elasticsearch is one of many open source object storage systems. It runs on Linux and Windows, and has an HTTP API, so it can be accessed from any platform. It supports high availability via automatic clustering. RavenDB is a proprietary database that only runs on Windows. It does not offer high availability via clustering. The one thing they have in common is that you can query them using LINQ.
Exactly. He's a loveable slug, but this stuff is above his pay grade.
Seriously, it actually does have a meaning beyond "whaaa, Microsoft is doing something I don't like". Step 1 means to support a competitors file format. For example, spreadsheets from Lotus 1-2-3 in Excel. Step 2 is to offer additional capabilities so that users will be reluctant to convert files back to the aforementioned format. Step 3 is simply a celebration of victory. It is a very basic tactic that has absolutely nothing to do with buying a company. 
Only by a day or two. He's the kind of guy you don't tell stuff to unless you want everyone else to know about it. I'm sure he can keep a secret in his personal life, but professionally his job is to advertise Microsoft products. So they feed him just enough to make it sound like he knows what's going on. If you want the real story you have to talk to the developers behind the scenes. The ones you catch manning booths at conferences while the big shots are having lunch. They aren't supposed to know so they aren't told to keep their mouths shut.
This won't have any affect on Java in the enterprise -- it's not going away any time soon.
Java has been getting better recently. Today, the release of Java 8 will narrow the gap with C#. Also, Wildfly + CDI + JSF 2.2 makes Java development fun again
&gt; Today, the release of Java 8 will narrow the gap with C# Java still doesn't have properties, events, async/await, unsigned integers, and other nice features of C#. And it still has its own big weaknesses such as `protected`, erased generics, primitive types... and there's the Java standard library and its many, many, many problems. Sure, Java 8 is better than Java 7, but it remains vastly inferior to C#/.NET.
About effing time!
They tried the same thing with Java but got sued, and made .NET instead.
Yes, there is still quite a gap left. Java 9 is looking to take care of some of the issues such as type erasure, primitive types and the complexity of JNI. Unfortunately, that won't happen for another 2 years. However, Wildfly with its modular, lightweight development approach is a huge step forward compared to traditional Java development (Weblogic and Websphere). It can be said that it is catching up and in a few ways exceeding that of .NET.
Yeah, Java is really lacking in both those departments. At least generics should be fixed by Java 9. 
Because if MS wanted .NET on Linux (which is a competing server platform), they'd have done it a long time ago.
But you love that MacBook huh?
C# 6 is pretty lackluster though.
Between this and MS investing into Unity3D, I see a possible roadmap for getting a new version of mono into Unity3D (Unity3D ran into licensing problems with Xamarin).
&gt; you have to talk to the developers behind the scenes. I'm sure he talks to tons of people at his speeches and the conferences he attends.
I'd actually love to move towards mono and get away from my decades in Windows land. Multi-platform (or platform agnostic) has always been the end goal for all developers, but it has never been easy.
That's what I'm expecting.
Why?
It's based on my mistrust of 1990's MS. Maybe they have changed. 
Well, Xamarin is still kind of a mess on Windows, and quite new. MonoDevelop/Xamarin Studio has been on OSX for years. Just in the past 4 months, I've seen huge improvements on OSX, like Xamarin not crashing every third time I open an axml file. That's the better experience. The VS add-on still feels like a bandaidy hack job, if you can even get it to work. And far too many of us - like the people at Xamarin themselves - do XCode, Android and Xamarin Mobile dev on Macs. Big market share. Mobile devs are nearly all Mac based and there are stacks of apps to maintain that do not warrant a rewrite in .NET. I still reject much of the marketing language surrounding Xamarin. You need to learn the fuck out of your respective target platforms, deal with all the idiosyncrasies (they are legion), and *then* enjoy the luxury of wiring everything up with c#. I love it, and it's my preferred language, but it's not actually opening up Mobile dev for every .NET coder out there. Put another way, once you can make an Android app in Xamarin, you're nearly ready to bang one out in Java. It's the ecosystem that takes time, not the coding. The best case scenario for a Xamarin app is if you have a ton of existing .NET code to work with on a big app. Honestly, you don't get that much for minor from-scratch mobile apps. You get some tasty collections and lambdas and stuff, but most of it is just framework plumbing and convention. 
Why? Because someone already did it. And it took them years and years with freaks like Stallman throwing crazed insults at them and ignorant kids saying MS was just going to pull the plug at any minute. You know, if you go back 6 years, this whole Xamarin thing is just crazy. It was nearly all FUD most of the way here. Mono could've just as well floundered and died, but it didn't by virtue of a ton of personal effort. *Now* MS wants to capitalize on it. Naturally.
TIL criticizing the platform teams gets you downvoted.
If you need crons and do not want to go all in on windows services, but you wanna know what actually happens in there use topshelf ...
This interface isn't so simple. IMO, you're better served learning crontab's syntax, how to execute commands (possibly setting ENV variables), and how to redirect output. Unix isn't black magic, my .NET friends!
I love that Library! 
There hasn't been any official announcements for C# 6, only unofficial "stuff we'd like to do" from some C# guys...
As much as I hate to admit it I'm warming up to it :) I just tried staying away from Apple as much as possible, but it's actually kinda nice You have to give it to Apple for the user friendliness element, although I still can't see it as a main development machine 
But the licensing costs for Enterprise are insane!!
15 years ago it was a terrible language for maintenance. Today there are plenty of ways to manage JavaScript (CoffeeScript, TypeScript, etc.) as well as frameworks and patterns. Plenty of great reasons to use it for business apps that are quite successful in the field. 
At least they upped the ram limit for standard to 128gb. With DB mirroring and allowed up to 16 cores we can at least upgrade to 2014 standard. Really wanted that in-memory OLTP. Oh well... can't have everything I guess!
granted, if you need them, you likely have a tremendous amount of data and therefore money is not that much of a problem, as the data is a core part of your business.
If you want an in-memory DB, you can always look at VoltDB, which has a .net client 
We already have redis running and are always looking around at other alternatives to SQL Server. 
Go into nuget and add the reference. Do the same for any other project in your solution that requires the same package. The tooling stores the package at solution level and updates each project to point to that location. Nuget resolves dependencies for packages automatically. If the .config file is part of the package it will be downloaded to the project level of each referencing project. Config files are only really relevant for the application project and not secondary assemblies. It really depends on the project type. Do not check in the packages. Enable nuget package restore. If you are using git there is a section in the gitignore file for /packages
Partially answering your second question, it's up to you whether you want to commit your packages to source control or not. That said, adopt an all-or-nothing approach to committing your packages. It will resolve dependencies for you, but I've read horror stories about NuGet getting fucked when some packages were in source control and others weren't.
I think most of their resources went into Roslyn this last round.
The great thing too is that if MS wants to kill it, they have to buy it. Then, new folks should start their own .NET replacement as it is a proven money maker.
While I like mine too, I hate switching between Windows and Apple keyboards (vmware just makes it even worse).
Not compared to Oracle or the hardware they expect you to run on it. Column store is a good example of what they are offering here. It partitions data in one million row groups. So if you aren't working with tens or hundreds of millions of rows it doesn't make any sense. 
Yes right, because I keep on writing application logs in my file.. so I do not want to close it, but I can flush. 
Care to look at this 32,000 line BusinessLayer class? Or the 800 UnitTests that Assert(True)? How about the 56 projects I just deleted from source control because they where not referenced in the solution? I know you viewed my statement in vacuum but believe me there are millions of reasons these guys suck. Which is why when I come across a checked in packages repo I assume its wrong.
it was pretty much answered on stackoverflow. You can't open a file using create if its already open.
I really despise libs that extrapolate to the point of mystifying how work is done or who is doing it. Their 800 line methods may use this their just dumb enough to be dangerous. But the stuff I deleted was opened up and reviewed prior to deletion. The majority didn't have any code in them at all.
Umbraco. Friendly and efficient 
+1
Thanks for the recommendation. Can you tell me why not DNN? 
Granted I've not kept up with DNN for a number of years but from past experience it's very clunky and bloated, very slow and difficult to develop in. I switched to Umbraco a few years ago and I've never looked back
That's even worse. 
DNN is like share point. It's designed for non programmers to drag and drop stuff around, not for developer productivity. Anyone that thinks virtual machines is a good way to set up a development environment should be shot.
Sometimes it does. Nearly all web apps are about managing content to some extent. A CMS is good when users want to be able to update their own site but not much beyond that.
Au contraire. Using a VM for dev means that you can have a standard environment for all the developers on the project. Couple the VM with decent source code version management and you can have a system that transcends any workstation OS issues. Its not without issues of course but does have some advantages.
Where does it say this?
Spin up a new Azure instance and test a few out :) Most of the top ones are 1 click installs in Azure
Everything has it's useful situations. In this case the heavyweight inflexibility as you put it is it's strength. I'm not a Windows admin. I'm a senior web/mobile application developer that's transitioning from something I know (Coldfusion) to something I don't (.Net). Sure I can write SQL but does that mean I need to know how to administer and care for a SQL Server installation? Not with a VM. I'm given a VM with a working installation and dev data installed for my project. Sure, in 3 or 4 years I may decide I want to try ViEMU (whatever that is, putting in on my to-investigate list) and since I've got admin rights on the VM I can change to that if I want. The VM allows me to focus on what I need to (porting CF code to Razor) and not what I don't need to (devops).
Sql Server is generally a standard feature in the OS image for a dev machine. Even if it's not it's a one off problem to install and it then requires no real maintenance. &gt;since I've got admin rights on the VM I can change to that if I want But eventually the base VM will change and you will overwrite your customizations. &gt;I may decide I want to try ViEMU (whatever that is, putting in on my to-investigate list) It's a VI emulator in visual studio. Normally someone in a similar situation to you I would recommend not learning it (there's enough shit to learn already). But if your porting code it could be a godsend. [Why, oh WHY, do those #?@! nutheads use vi?](http://www.viemu.com/a-why-vi-vim.html)
I hear sitecore is good. 
But I am writing 100s of times in a Min, closing and reopening will hamper performance?
Last time I used a CMS I came to the same conclusion. All the content came from an external system. It just complicated things in that situation. Sadly I couldn't convince management that a content *management* system wasn't necessary when your not *managing* the content in that system. 
I agree that c# is better but there are still a few places where java is better. Try with resources is great, combining try with using. So are anonymous inner classes, great for mvvm.
What is your main concern? Development story? Price? Ease of content author changes? The recommendations will change depending on some of these. Most of the ones mentioned this far are all about good development environments.
Kentico is a beast. It has just about every feature and integration point you could want. Works in Azure, good SEO, and it has an enterprise level marketing system + CRM.
I am currently doing sitecore, I would say better than dot net nuke
Why is dotnetnuke so bad?
Depends on the project. I've been involved in some that had suck elaborate or quirky integration requirements that trying to hack off the shelf stuff was just a waste of time. Starting with something really basic or starting from scratch made more sense. 
The UI, UX, workflow, implementation and extensibility are all bottom of the barrel. Originally, DNN was based on the IBuySpy portal from .Net v1 days. It was meant as a sample, nothing production should of ever come of it.
&gt; Why, oh WHY, do those #?@! nutheads use vi? Oh, good. I was prepared for this to be a post on why people should not use Vim, and was getting ready to burn the planet down. Everyone should use Vim. The end.
Most systems I've looked at are just complete overkill and more complicated than I've ever needed. 
&gt; automatic package restore. **Warning**, "automatic package restore" is the correct way but don't confuse it with "Enable Package Restore". It can cause some real problems in some scenarios. See this for details: http://blog.davidebbo.com/2014/01/the-right-way-to-restore-nuget-packages.html 
Yep it will hinder the rate at which you can write to the log but I am not sure it will be noticeable.
http://msdn.microsoft.com/en-us/library/dn170449(v=sql.120).aspx
http://www.lemoon.com/ it's mvc
I don't know what to suggest, all I can tell you is to stay away from Sitefinity. Trust me. :)
&gt; I still don't love NuGet. If it had everything I could see why everyone loves it. But as it is... It is just 1 more place to look for references &amp; dlls. You can set up your own NuGet server to supply in-house developed tools as well. We do, and projects around here use NuGet only at this point. It's a huge advantage. &gt; f I have two projects. The first project has a project.config which contains a node for WebGrease. Then the second project needs WebGrease as well. Do I add a node to project #2's project.config or do I just point a reference at the Packages folder where NuGet stores the .dlls? Does NuGet know to add dependent references to the second project as well as the first (assuming I don't add a project.config node). Don't mess with the config files manually. It will bring nothing but tears. Use either Nuget.exe, NuGet command line or the visual studio tools. &gt; Second question. Do you guys check your ~\source\packages\ folder into source control? No. You only need repositories.config and any .targets files. You could argue for checking in as well, but it's not strictly necessary. &gt; OK, I got another one, and maybe someone can point me into a better forum for NuGet help because this is becoming a thing. So, my project references WebGrease which references some other .dlls. I am told that NuGet will add those secondary references to my project as well (Oh awesome more refs!) At what point does NuGet do this? Every time I build, Everytime it re-gets packages, when I add the original .dll reference? When you build the solution. Don't add NuGet .dll references manually! It will seriously break your build at some point. Also, again, you can use NuGet internally as well so it won't be "more refs!" but the only place you get refs from. My biggest complaints with NuGet is that the Visual Studio user interface is slow, and the search field is for some reason cleared if you switch repository or between "Installed", "Online" etc. Other than that, NuGet has improved package updating, and has made us fragment solutions a lot more which has increased test coverage (due to simpler project interfacing and dependencies) and overall improved code quality, functionality and code re-use. We are now going with many small solutions with few dependencies where NuGet is used to resolve dependencies rather than massive solutions.
I like Orchard, easily the most extendible/customizable one i've used. I hear good things about Umbraco too but honestly haven't really played with it. People i rate, rate it though - so i'd go with one of those. And as someone else said, just one click install both to a free azure website and try them out :)
and hopefully should be out as SaaS on Azure soon !
I'm inclined to look at both the WinForms and MVC application as frontend for the third (hidden) backend project that actually handles the data. From what I understand from your question, the WinForms app allows for data input, while the MVC app displays it? You're going to want an intermediary backend project for data storage and retrieval. If you link the MVC and Winforms apps directly together, you're going to have a bad time. * One or both of the application is going to have to be responsible for data storage and retrieval. Yet both are frontend projects. * What if one of the applications needs to be changed? If it happens to be the one that implements data storage and retrieval, it's not going to be easy to rewrite an entire app while keeping some of the data-logic intact without any downtime. Make the backend accessible via web service (I mean a service that is remotely available. How it is set up is a matter of environment and preference. Look into options regarding your specific situation), have the WinForms apps send data directly to the service. Thay way, you don't have to worry much about multiple clients sending data in, as any web-based solution natively handles this. Then have the MVC application reverberate whatever data the web service serves to the application. If this data has a high updating frequency, WebSockets are the way to go.
Why
Umbraco for free or Sitefinity for pay. If money isn't a problem, then I highly recommend Sitefinity.
It's bad. All around. Buggy, slow, and unreliable as hell. Database is a mess. Broken API (thinking of the Linq one in particular, where queries will randomly fail with certain conditions). Nasty regressions with each new version. Also, broken promises from their team, all the time. "Yeah, that'll get fixed in the next version"... except not.
In our case "real world" bugs are from the various versions of the three major browsers (Chrome, IE, FF) and the various differences between our dev/staging/prod environments. The bugs from the former are going to show up anyway in testing and the bugs from the later aren't things to be coded around but are configuration issues in staging and prod. Showing the configuration issues in dev wouldn't help avoid them in the staging/prod environments. Plus we're in a pretty locked down environment, the only reason I'm not on Windows is because we needed to produce an iPad app a couple of years ago.
Meh.
Most CMS systems have a vast integration platform. In my currently company we are implementing a CMS system that layers on top of all our internationalization logic (60+ countries). Some previous developers thought it would be a good idea to build a CMS system for that very reason you had. What they found is that it is a complicated task to fully replicate a CMS system. You talk about very complex processes you have to build from scratch ..think workflow/delta revisions/permissions/etc.. On top of that you have to build an interface that is usable and feature rich. In short, maybe there are some isolated cases where building a CMS makes sense, however, I would recommend that as a option of last resort. 
My company is currently implementing sitecore as well ....... we might know each other....
Just an FYI, I'm the author of that blog. I'm doing daily community updates on those subjects. I normally also include stuff that target architecture, CQRS, unit testing and such. I get those links mainly from Twitter and a select list of RSS feed. **Technical details:** This whole process is done by having a worker role in Azure that pools all those links shared on Twitter (yep. The Fire Hose) and some RSS feeds and puts them into a Table Storage. Then locally, I retrieve all those links and store them into ElasticSearch for slicing and dicing and only keep the best. It's basically a curated source of links that I have visited and vetoed before posting them on my blog. If you have any questions with the process, feel free to ask!
In terms of .NET CMSs, I've worked in Ektron, EpiServer, Sharepoint, and Sitecore. Of these four, Sitecore is by far the best, but has one of the steeper learning curves. It allows easy integration with existing systems and if you already have a lot of .Net controls, you can use them within Sitecore pages (admittedly you could do this with the others mentioned as well). The hierarchy design and xml, xslt integration is great for fast and responsive querying of content objects. The API is well documented and easily accessible. Their support has always been extremely responsive. It is easily scalable for server farms or cloud integration. They only complaint I hear about them from clients is the pricing, but I really believe you are getting what you pay for in comparison to the other 3 mentioned. If you're looking for quick integration and setup, I would recommend EpiServer. They have many of the same features as Sitecore, but do it at a "page" level hierarchy. This means you don't have a fine a control on content when it comes to building hierarchy, but many websites do not need it. The only complaint I have about them is their user setup and permissions is a little funky if you are not using LDAP or Active Directory for UAC.
I can't seem to find the correct word that defines what I meant when I used 'extrapolate'. Maybe you have a better word for it? I am trying to use extrapolate to explain the action of Developers moving a piece of logic farther and farther away from the area of code that needs that logic. This type of development has become a cult. Dependency inject, plugins, factory factories and so on. If you have to open three solutions and run through 20 classes in order to find a piece of logic that performs a small business operation and CRUD then you are part of the cult. It causes confusion, raises the bar for entry, increases development time, increases code bloat and much more. Don't get me wrong. There are good places for all these things. But KISS should be the resounding principal.
Or 1 click locally via Microsoft Web Platorm Installer.
Sitecore is *fantastic* but it's expensive and they discontinued the free "Xpress" version. The API is definitely not well documented, but it's easy enough to learn and StackOverflow provides ample support. Of all the .NET CMS choices, it is the clear leader despite its flaws. I, however, vote for writing one in ASP.NET MVC. Chances are if you're posting on reddit without serious requirements, you don't need most of the capabilities Sitecore contains. But I've been proven wrong before...
I'll take writing WebPages over most ASP.NET CMS software any day of the week. Name one .NET CMS that has a global "View As..." command for admins (preview modes do not count).
I'm conflicted. I'd argue that Sitefinity actually has the best user story in terms of non-technical layout capabilities in all the .NET CMS's we looked at. Development wise it definitely has some warts, but there's only been a few places we've hit walls in terms of things we COULDN'T override and write our own version of... That said, it is a bit over engineered in typical Telerik fashion. Initial startup times are pretty long (like a minute or two) but it's fairly good after that. You aren't going to be running 100,000 requests a second through it though. We have hit a few places where we saw some long standing bugs (e.g. full text document indexing broke several times). However, there are others I would warn away from long before I'd target Sitefinity. Ektron comes to mind. DNN as well. If you have a bunch of content authors doing the actual editing of content, I think Sitefinity is actually a pretty good choice just for it's layout tools and module builder. I would much prefer, as a developer, to be working with Orchard, or even Umbraco I hear is pretty decent, over any of those choices though.
I think this is great.
Now go ahead and open source WPF so we can improve it.
Your stunning rebuttal full of thought provoking ideas has made me completely reconsider my position. 
I'm not saying never use a CMS, just that they come with a lot of overhead and that you need to take that into consideration. It's just making the right trade offs for any particular situation. If I was starting a new, public facing website tomorrow umbraco would probably be my jumping off point. 
Maybe yes maybe no
Do you know what the creepy baby is?
Ahaha no idea bro
sorry, I meant that they are similar from an API point of view, not from architectural point of view :)
Reason?
Bloated, inconsistent and very slow.
Can you post the code? If you are generating the columns manually, have you tried setting the bindings at the column level?
I've actually tried that before and it didn't help. Is there something I need to do with the column itself as well? I'm trying your advice again, I had to do a full rebuild so it takes about an hour to compile. 
It's definitely *one* part of the problem. I'd try this in a test application if you might have to deal with hour-long compilation. 
I'm really looking forward to seeing what JetBrains will do with Roslyn. Based on what I've read, it could conceivably mean a massive performance increase across all of Resharper's existing functionality. Here's some related info, for the curious: http://www.infoq.com/news/2011/10/Rosyln-Extensions
And you would be right. At least it's what is promised. Instead of having JetBrains do all the job by themselves, Microsoft has built the extension points within the VS and/or compiler to allow for those thing to be efficient. I'm curious as to where the future with Roslyn will take us.
I had not heard about Roslyn until just now. It's cool that Microsoft has finally started to open their books. Let the crowed in!
Not my blog. Just posting interesting content. If it's BS, I'm sorry. I try to curate most of what I post to avoid crap. If this is the case, please accept my most sincere Canadian apologies.
If you want to render shadows, you will be disappointed. The 3D capabilities in WPF are more meant for charts and graphs rather than games.
Oh hello people of the land close to where everything is trying to kill you even the plants. Loved your article. If you have a more articles about C#, I also included in my daily blog post. Enjoy!
No idea what you are trying but the 3D features in WPF are rather limited. Unity3D is much more popular for developers wishing to have a 3D interface.
Thanks for the kind words &amp; for including it in your blog :-) This post has done really well so I'm thinking about doing a follow up with even more examples. Ideally the right balance between "well, that's obvious but handy for beginners to know" items and "wtf, I would never have thought that could help!" items.
Author of said post here. My audience isnt't the kind of people that are very comfortable with the command line in general, so for them (and me) it's simple enough. Should i fear for my life now that a post made it to Reddit? Yes, i probably should.
I am actually love to hear more about how you use ElasticSearch actually.
&gt;var chosenAuthor = creator ?? publisher ?? blogAuthor; I've never seen that before, whats it called and whats it do? I'm guessing it sets chosenAuthor to blogAuthor if publisher doesn't exist, and publisher if creator doesn't exist?
It's called a coalesce operator. It takes the left value unless it's null. Then it takes the right one. Of course, you can chain them. Meaning it will take the first non null object.
It's all done client-side using JavaScript. For quick reference and to help with the search, you will find a lot of information under the umbrella of AJAX (I've heard the term AJAJ when using JSON, but it's the same concept). Conceptually, you use JavaScript to listen for push notifications from the server (you could also pull, but push has less traffic). Once you get a change notification, you will call more JavaScript that will update the DOM by injecting the new elements you need/want. Note this is not a fundamentally ASP.NET technology, but Microsoft does provide some AJAX controls you can use. http://www.asp.net/ajax I think they are meant for Web Forms instead of MVC though, so your mileage may vary.
As far as I know, SingalR is what you are looking for. It isn't for chat only, you can use it for other types of data transfer (like popups) as well.
http://en.wikipedia.org/wiki/Locality_of_reference
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Locality of reference**](http://en.wikipedia.org/wiki/Locality%20of%20reference): [](#sfw) --- &gt;In [computer science](http://en.wikipedia.org/wiki/Computer_science), __locality of reference__, also known as the __principle of locality__, is a phenomenon describing the same value, or related [storage](http://en.wikipedia.org/wiki/Computer_storage) locations, being frequently accessed. There are two basic types of reference locality. Temporal locality, refers to the reuse of specific data, and/or resources, within a relatively small time duration. Spatial locality, refers to the use of data elements within relatively close storage locations. Sequential locality, a special case of spatial locality, occurs when data elements are arranged and accessed linearly, such as, traversing the elements in a one-dimensional array. &gt; --- ^Interesting: [^Processor ^register](http://en.wikipedia.org/wiki/Processor_register) ^| [^File ^system ^fragmentation](http://en.wikipedia.org/wiki/File_system_fragmentation) ^| [^CPU ^cache](http://en.wikipedia.org/wiki/CPU_cache) ^| [^Paging](http://en.wikipedia.org/wiki/Paging) ^Parent ^commenter ^can [^toggle ^NSFW](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cg8t19x) ^or[](#or) [^delete](http://www.np.reddit.com/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cg8t19x)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
One option but there are quite a few ways to do AJAX.
Thats pretty awesome. Thanks.
css problems and sharepoint problems ? well you are fucked
Lol. SharePoint is definitely something I wouldn't want to be looking at, especially if it isn't configured correctly. You don't happen to work in Melbourne by any chance do you? :P
SharePoint is good experience if you're interested in making money. Though I don't remember hearing about mobile SharePoint so I'd suspect that some things don't work so well on mobile. If you're a decent .Net dev and want to learn responsive web design this could be your ticket to more money elsewhere if you're so inclined. Sounds like an opportunity to me.
The big H (if that's your reference) would spend a lot more time handing things off, because they spend money like crazy.
OK, fair enough. I had assumed SignalR worked by polling.
This is what ours looks like: #webpartwpq1 table table table tr td div div div span div table { width: 100% !important; *float: right !important; *zoom: 1; } Also, I did a count and we have 72 stylesheets for our single site collection. Yay!
Sharepoint 2013? Checkout Bootstrap for Sharepoint 2013 https://responsivesharepoint.codeplex.com/releases/view/112845
&gt;It isn't for chat only Sadly 99% of the tutorials are "how to make a chat app with SignalR". Hopefully people understand it basically allows the server to call a JS function on the client on demand (and the client to call a method on the server of course).
that sounds like what we are using, i kind of zoned out in the hand over meeting thinking "oh god why me"
agh Aweful. in the hand over demo there was a css problem, the contractor updated the css style sheet, which didnt work, checked that the selector was correct, played around with the specificity, still no luck. so now the contractor thinks its the cacheing, apparently sharepoint caches in more than one place. so we spend some time resetting various caches. still no luck agh
You would be better of looking at some recent examples, using EF5 or EF6. I would recommend learning "Code First" approach with EF, rather than designing db by hand or modeling it with a designer --&gt; http://www.entityframeworktutorial.net/code-first/simple-code-first-example.aspx http://surajdeshpande.wordpress.com/2013/10/16/entity-framework-code-first-approach-example/ http://www.asp.net/mvc/tutorials/getting-started-with-ef-using-mvc/creating-an-entity-framework-data-model-for-an-asp-net-mvc-application http://blogs.msdn.com/b/webdev/archive/2013/11/01/tutorial-series-updated-for-entity-framework-6-code-first-with-mvc-5.aspx 
This is true, nearly all of the tuts I've found are basic chat tutorials. 
Sure, you've got the browser cache, object cache, blob cache, output cache, configuration cache. Usually they resolve themselves in 10 minutes or so. 
right, i remember hearing something about a 24 hour cache, i guess in their wisdom someone has changed at least one of them to 24 hours.
If you want to simplify the whole thing, Telerik has some nice controls that abstracts everything. I think its better practice, esp these days, to learn how to do it , esp since we now have frameworks that simplify it. 
Agreed here. I built a site with similar functionality to Facebook using ASP.NET. Lots of Ajax and JSON. I found it a pain too with the Ajax and JQuery because as soon as some parts are replaced using Ajax, the JQuery for in that updatepanel doesn't work. Tricky but doable.
You could always use knockout.js or backbone to listen for change events and display it.
I am curious. Why Code First over DB first? I guess I am old school, but I'm open-minded.
Like others say, SharePoint is a mess to most developers. However, like ravinglunatic said, SP jobs do seem to pay really well. So look at the bright side: you can beef up your resume with this experience. May God have mercy on your soul.
In defence of JL her pluralsight videos are great. I learned a lot from them. 
Depends on your style and if you are doing brown field or green field. In any case, one you make your choice... You're not locked in. You can go from code first to edmx and from edmx to code first.
When I retrieve links from twitter or RSS feeds, I take the hash tags and it categories, the author and the date of creation. This data is stored in table storage but when brought back to ES, I use them as facet. It allowed me to find new hash tags to follow on Twitter and which one that brought me crap. You also see which author are horrible and which one are good.
I was hoping that would be the case. Thank you.
She did answer my email. See my EDIT in the OP.
I agree with you. But it just doesn't fit my style of learning which is why I am subscribing to SafariBooksOnline instead.
I assumed that you are learning to use EF (and possibly new to C#): (my personal opinion would be) that if you learned from code first, it would give you a better insight into how things work and at the same time, you'd use expressive techniques that would lend themselves to other c# areas as well. 
I know nothing about SharePoint except that it looks like a consultant's gold mine. What's so bad about SharePoint?
4) 2. is perfect.
Will using async / await in our code make the ASP.NET application spawn just one thread and reuse it for all requests? 
I learned over the years to tailor my resume towards what I want to be doing. I would never put a language or product on there that I hate. So anyone who says 'Sharepoint will be good on a resume!' is ignorant to the fact that the only jobs who care that you know sharepoint are the ones who will ask you to do more sharepoint.
Generally, yes. The scheduler has a thread pool and reuses same threads in subsequent Tasks.
I think it has gained a lot of traction with C# developers because they have been steadily moving towards functional programming in C#. With the advent of LINQ, we're already thinking in functional terms. If you spend very little time doing OO and most of your time in functions, then it is a short leap to F#. This article might explain it better. http://blog.ploeh.dk/2014/03/10/solid-the-next-step-is-functional/ 
Node was meant for a very specific set of applications: those that are virtually all i/o and no computation. But yes, if you are looking at that specific type of application, async will do the job.
Something like Node.js is what happens every-single-fucking-time MS gets fat and lazy and sits down on its monopolistic ass. You'd think Redmond would have learned by now, they have become more imitator than innovator. * *sigh* * The only reason why we don't have to worry is #5... and that worries me.
Can you really say MS has been sitting fat and lazy though? ASP.NET MVC has seen 5 revisions (2 of them major) in the same number of years. WEB API is exploding in features, etc. Really the only thing that's been "stagnant" is C# itself, but that's because they're undergoing a major rewrite to Roslyn, which is finally nearing completion, and let's be fair. Some languages like C++ and Java are only beginning to approach the level that C# hit almost a decade ago.
I'm talking about major wide sweeping technology innovation and not not just versioning. Anyone can snap-on bells and whistles. MS has a bad habit (with much historical evidence) of resting on their laurels. In the end we are the ones who suffer so I get a bit ticked when I see someone (like this author) try to defend them for sitting on their ass.
How about lack of native decimals? Type this into any browser console: 0.3 - 0.1 The answer will look like: 0.19999999999999998. I'm not completely against NodeJS, I follow it pretty actively. But I don't think I'd be too comfortable with a financial app written in it. 
It depends what you're doing. Often times an I/O bound async call will be handled without spawning a thread at all.
I work at one of their largest enterprise clients and have been writing MS based business software since DOS 3.x... so yes, I know support is critical. On the other-hand innovation should *NEVER* take a back seat, but that is exactly what MS does and why someone in Redmond didn't come up with Node.js.
In a recent discussion I had on reddit, Node uses IOCP on Windows in order to avoid requiring a threadpool for IO requests. Instead, it sends the request off and gets notified by the kernel later. Any idea if .NET async/await works similarly?
I'm going to have to take issue with the idea that Node.js is innovative. The Javascript language itself is a hack that was never intended to do anything substantial, and the only thing Node.js offers over its competitors is "Write server and client code in the same language". Well... Microsoft invented that. With Silverlight. Years ago. Of course the W3C is never going to approve a language like C# on the web; they can hardy even agree on new versions of Javascript, so we're stuck with this hacked language on the client.
I didn't have much say in it but we are switching to the "hack" for more reasons than we can write client/server code in the same language. It doesn't make me happy... MS sitting on their asses again, but #5 will always save them. 
Buzzword Driven Development. Just wait for a bit, the next flavor of the month will come around.
Only idiots think Node was something new. It wasn't. It just attracted a bunch of web developers because they could finally write "web scale" server side code without having to worry about some pesky programming language on the back end.
Async on .net doesn't necessarily spawn new threads: async away methods use a state machine to let the async code run on the calling thread. It depends on the caller's calling context whether thrads are involved at all.
Its not perfect its accurate. He hits the nail on the head there. That is my old firm and the very reasons I left.
A part of it may be that the F# Software Foundation was founded and that Xamarin started to support F#. I have definitely noticed an increased buzz around F# in the last year. 
It does indeed.
So what predates silverlight? The only thing I can think of as a candidate would be some kind of Action Script server framework that I've never heard of.
There are a number of modules to emulate them using strings. But beyond that your kind of screwed.
Java.
Yeah cant wait to integrate NodeJS with my LOB applications in Java and C# with AngularJS all powered by Go language
If you decompile the task factory, you can see its scheduler (the one responsible for the threads). The default is a thread pool scheduler. It will pick threads out of an already initialized pool and run them on it. The amount of thread available may vary based on your machine if I remember correctly.
&gt; Taking a queue from high school debate team, and because no technology decision (or opinion) exists in a vacuum, I’d like to turn the tables and consider a few reasons why ASP.NET developers might stay away from Node (or at least might think twice before making the leap). Its off putting to see a grammatical error like that in the first paragraph. But overall its a nice article!
It's actually my blog. If you go to the presentations page and download the one I did last week, you can read the presentation to learn a little bit about self-hosted Web API. You can also use the included code example to run Web API 2 OWIN self-hosted. :)
Yeah, it annoys me that data annotations and model binding are tied up in the System.Web namespace. However, you can take advantage of Web API via OWIN and it offers the same binding.
Nancy, SignalR, Simple.Web and Fubu are all OWIN-compatible. 
Data annotations are in System.ComponentModel.DataAnnotations.dll
Well, Microsoft made me worry when added support fore NodeJs before of classic .net to the mobile services 
Why the downvotes for an accurate statement?
* Java -- but not owned by Oracle * An Operating System Abstraction Layer (so long as the Operating System is owned my Microsoft). You can write Desktop, Server, Mobile, and web code with some of the same basic apis. * A better memory manager (Blue Screen much lately). This is actually a hard question to answer. Are you just explaining it to someone on the street? Really, they shouldn't care. 
I always use the house building analogy. Namely, if you're going to build a house, you can build it yourself using individual pieces, or you can use pre-engineered units that you just need to fit into place. Anyway, it's easy to expand on that analogy.
 here's a link that isnt broken http://www.tiobe.com/index.php/content/paperinfo/tpci
Well, first it really depends on what depth of understanding you want to achieve with these people. At it's highest level, ".NET" is a specification for a common language runtime (along with a common type system) and a large library of software that we call the framework. I'd suggest not delving much deeper than that since you are dealing with non-technical people and it will be asking a lot for them just to grasp that high level understanding. As far as showing the benefits compared to other technologies; I'd focus on the language independence and how that allows for a massive ecosystem of code as well as helping to bring closure between teams (VB and Java/C++ prior to .NET) .. teams can choose the right language for their needs and still benefit from leveraging each others libraries. Finally I'd show some of the innovative technologies that Microsoft has added (Linq, WCF, Workflow, etc.)
You have source? Love to read about it
What other technologies are you comparing to? Kind of relevant.
Wow that's pretty strange. The hype has even reached the inner depths of Microsoft.
Posts like this should make you worry :) Seriously though, yet another open source language and framework isn't going to have any affect on .NET adoption.
Great to know thanks!
Thanks, but I do not see a presentation page
.Net is microsoft's most recent development platform. The goal is to allow developers of business applications to focus on the business rules while it (.Net) takes care of all the nitty gritty dirty details. Those details being database access, multithreading, memory management etc. .Net also has the goal of "Write once and run on any windows machine". Theoretically you don't need to re-write your code for 32 or 64 bit operating systems. .Net Also has the goal of being flexible when it comes to choosing a developement language. You can write your code in VB, C# (similar to java), C++, F#, Delphi.net, ETC, ETC, ETC. So moving your team to this platform, might not mean learning a whole new language. There of course is a lot more to .Net than that But those are the big points.
I'll mainly be focusing on ASP.NET. So I'll be trying to convince them to use the Microsoft ecosystem compared to maybe Java or PHP. 
&gt; Want to do the same thing in .NET? Be prepared to learn about IIS, the Machine.config, the Web.config, the Process Model, how Global.asax works, either ASP.NET MVC or WebForms (huge paradigms in themselves), and how Visual Studio works. Bullshit. Just create a new web project. Hell, most .NET developers I've spoken too still don't even know that machine.config exists.
I get where you're coming from, but often you will have to tweak settings in these files to make your application production-worthy or even function under IIS. Learning them is not trivial.
&gt; When the thread pool thread that is doing the event work signals to the single listener thread that the work is done, the listener thread picks up the response and sends it back to the user; this is another very cheap operation. That "thread pool" is going to be idle most of the time because asynchronous operations in the OS are... wait for it... asynchronous. That thread pool doesn't really add anything when you are still waiting on the single JavaScript thread to do all of the computationally intensive operations.
Mono is interesting, especially with the rumors of Microsoft purchasing it (well, purchasing the company that is primarily working on it), and yes, it will run on Linux, OSX, IOS, and Android...but, given the context of non-technical people, why muddy the waters? 
&gt; •Node.js works natively with JSON, where .NET must serialize to and from JSON to interact with .NET objects. WTF? Does the depths of his ignorance know no bounds? JSON is a serialization format. Neither Node nor anything else works natively with it. They all have to be deserialized into something, if not JavaScript objects than something else. I guess the exception would be a database that ignores the content of the JSON and treats it as one massive string to be stored or fetched. But that's about it.
Luckily, I don't write financial applications. (yay). But, you are correct, it has more to do with better drivers and windows kernel. But, the notions of a buffer overruns and memory management are harder to convey. Do you just say "Makes programmer lives easier"? "Makes software somewhat safer"?
One of the few things Microsoft got almost right in the .NET 3.5 era was data annotations. I use them everywhere: web, desktop, and services. It's a bitch to set them up the first time, but once you bake it into a base class it works reasonably well.
From this comment, it's clear that you fully and completely misunderstand Node.js, IOCPs and thread pools. I'm not sure that explaining it further would help, but I'm happy to discuss it if you want to propose to me how these thread pools remain idle.
Um, you do understand that JavaScript has to be parsed, right? They don't literally take JSON strings and manipulate them as-is. They convert them into dictionaries, or rather dictionaries of dictionaries. 
Here are a couple articles that talk about control flow for C# async: [1](http://msdn.microsoft.com/en-us/library/vstudio/hh191443.aspx#BKMK_WhatHappensUnderstandinganAsyncMethod), [2](http://msdn.microsoft.com/en-us/library/vstudio/hh873191.aspx) Unfortunately, I can not for the life of me find the article I'm actually looking for. Somewhere on MSDN, there is an article that spells out how an async file read basically sends a request to the kernel, and the kernel sends an interrupt to the thread when the request is complete.
Ahh, you are correct. I have fallen victim to jQuery and the implicit leaky abstraction. I did not realize jQuery.ajax calls JSON.parse(str) under the hood. Thanks for clarifying, but maybe next time try to do so with less negative attitude? EDIT: I have updated my blog post. Thanks!
Node's request listener runs in just a single thread, but long running processes (file I/O, etc.) will run in a separate thread. Just because you see "node is single threaded!" everywhere doesn't mean it uses one thread for every possible task.
Thanks!
On the Windows OS file I/O doesn't require a thread at all if you use I/O completion ports. 
On Github.
Sorry, but JavaScript-based technologies really piss me off. Nearly a decade ago I was writing special purpose web servers on the .NET stack using http.sys. That's just as bare bones as Node or OWIN, but without all of the prancing around. Well except I got the performance benefits of a statically typed language. And I used actual multi-threading so I didn't need to block the listener while translating the database results into HTML. 
That's a common mistake. But parsing JSON in JS is so trivial in JavaScript, it's barely worth mentioning. Not to mention that, as you said, valid JSON is valid JavaScript (give or take a few quotation marks) so the mappings are unequivocally 1 to 1.
Which .NET async will do for you automatically.
Microsoft Java. Plus a bunch of nice features.
Honestly I don't care which thread pool variant I have so long as it's managed for me. That's why I like Task Parallel Library. Any libraries that I expose with it can just include a hook for specifying the task factory to use.
Frankly, I wouldn't focus on the technology at all. I would focus on the depth and quantity of talent you can find in your local marketplace. There's a lot of good to be had in any of those software ecosystems, but the technology is useless unless you can find the talent.
Which is the only reason I use it. The old IAsyncResult pattern was a pain in the ass.
Who are you comparing them to? Certainly not Node. I was writing code like that in the .NET 2 era using http.sys.
Funny, I made something similar a couple of years ago. http://peopledatagenerator.codeplex.com/ Feel free to take code if it helps your project :)
The readme is really... empty. What does this library do? Any reason why we would use this instead of just Json.net formatted output?
Long time since I posted, but after a two months break from this I finally figured it out. It was, of course, my fault and the error was obvious when I eventually found it. I separated the code more to make it easier to track down, and eventually I found the issue was with the constructor, and not the dispatcher. I'm ashamed at how stupid the mistake was, and how long it took me to figure it out. I from some, hopefully temporary, lapse into madness, had a ldarg_0 instruction at the start of the constructor. All it really should have been doing was calling GetProcedure on ldarg_1 (which it also did). So the issue was a stack imbalance. I still think the error message was very extremely unhelpful though. I think the reason why my "fix" made something work in 32-bit was by two wrongs making a right. Anyway thanks for the help.
Thanks a lot :)
Sweet! Thank you both!
Interesting, I think I made this about 3 years ago, but I hadn't posted it on Github yet. Yours is a more extensive solution, with full address capabilities, which is pretty cool especially for testing. Mine is just a quick solution for names only.
Java and .NET are so close to each other in concept, that they even share the weird confusion over what is meant when saying the name vs. each of their parts. 1. JVM = CLR 2. Java (language), Scala, etc. = C#, VisualBasic, etc. 3. Java (libraries) = .NET Framework libraries Yes, their implementations are slightly different, but their underlying concepts are identical. I can explain the above three points to someone who understands the Java ecosystem and they will have an immediate understanding of the core of .NET land. *Edit:* Love the name BTW.
It's probably doing that because the input has an invalid value. Is the form actually submitting?
Open the page up in chrome debugger. Find the event that is triggered when the button is pressed. This will probably be some onclick='Dostuff'. Usually this will be a javascript method. Debug through that and you will probably find some call to input1.setfocus() or some other type of javascript/jquery mechanism for setting focus. Another possibility is a page-refresh or form loading which has the input as the first tab position.
Over abstraction is what you're looking for I believe. I agree that this is becoming far too common judging from the code bases I've seen. At my current workplace, we check in our nuget packages because our bandwidth is terrible. It's a matter of reducing build times and decreasing frustration when working on projects that have had their packages updated since your last get (or pull).
Well, I was going to be an ass and say it's in your name, but I'm still new to reddit ;)
Make sure all your label tags are closed. If you can't share code it's pretty hard to help, but if you're still stuck possibly you could share some details about _how_ your code is. Are using HTML Helpers for your input labels? Are you doing client validation? Are you submitting with AJAX?
Since it's only IE it probably doesn't set a focus at all (IE will focus the first submit element on the page then instead). It would probably be enough to set the focus during Page_Load to the element you want it to focus like Button1.Focus().
You can use the WebApi Client library to talk to a Web Api (and probably others): http://www.asp.net/web-api/overview/web-api-clients/calling-a-web-api-from-a-net-client
Wow. This is interesting. I never realized this media-type formatter existed. var formatters = new List&lt;MediaTypeFormatter&gt;() { new MyCustomFormatter(), new JsonMediaTypeFormatter(), new XmlMediaTypeFormatter() }; resp.Content.ReadAsAsync&lt;IEnumerable&lt;Product&gt;&gt;(formatters); This application was originally based on .Net 2.0
Thank you. I don't know why I didn't see the client info before. 
Theses seem interesting. Right now most of the services we send to are key value pairs or XML, or we send via KVP and get back XML. It's painful when we add new partners since we have to build a new object for them in the transmission class to accommodate them. Most of these partnerships are 5-10 years old so this is how it's been done, but I'm trying to get my head around how we might rebuild this system using a more modern approach. FWIW, I'm the business / product guy and I'm just trying wrap my head around the options. 
I can't stop seeing 'Magneto'. Now I'm imagining having his as my tech architect. That would be a fucking scary job. Sorry for not answering your question OP. Not my field. 
You basically only need to copy over the CSS files and any images if needed to your project. For the data binding I think knockout is a bit easier to have success with as a novice. And I say this from experience. If you sign up for pluralsight (7 day free trial) there are some great tutorials on MVC and even covering taking a wrapbootstap theme and implementing it into your project. For $49 you could have a month full access and be able to download the project files.
thanks for suggesting knockout. I'll give it a try! :D
Asp.net formatters are pretty sexy 
Magento is an absolute nightmare for tying anything into. The database structure is probably the least friendly you can get: EAV, so without some form of API you're going to need LOTS of test data and VERY regular backups because you WILL destroy something irrecoverably many many times if you're thinking of doing any kind of db inserts. there is a website somewhere which allows you to browse the magento data structure and find related foreign keys etc....and it's really friendly and useful to use compared to just trawling the database....but that's in the same way that a shark is friendly compared to a lion. It MIGHT not kill you. do an image search for magento data structure, find the scariest looking thumbnail , and that's probably the most accurate.
I'm doing a project similar to [Quickbooks, an accountant system](http://www.youtube.com/watch?v=wqoF7NT61Q4#t=2381). Create orders, invoices, transacntions, etc. I have to populate tables, combobox, Im planning to have some auto-completed text boxes. I want everything to be dynamically, smooth and fast. After telling you that, what do you recommend?
Well if you're using SQL Server I'd definitely go with Entity, extremely simple, and then refactor from there. Look at ASP.net tutorials on their site, shows you everything
well, Im going to use mysql or postgres, so Entity wont work xD
Here you go http://dev.mysql.com/doc/connector-net/en/connector-net-entityframework60.html
NPGSQL seems to also have Entity support
thanks a lot! :D 
thanks, TIL that :P
Cant you use the soap api? Http://yoursite/api/soap_v2 I believe. I've been a .net dev for years but just got done a 6 month magento project - my client was using enterprise 1.13 though. I might be able to at least point you in the right direction. 
I've bought some admin themes from WrapBootStrap for use in .NET. I didn't use MVC but just webforms. It works very well once you get used to using it. I made webcomponents like a dropdown field and some other things too. The projects turned out really well. Worth the buy especially for $15 or so. Good luck.
I have seen the diagram you're talking about it really really scary. 
I didn't run it so I can't comment too much on usability. Get out of having SQL queries littered through static methods in random classes and get into EF (as you said), or have a look at MongoDb (NoSql) which may be more suited for this sort of application. Capitalize the first letters of your damn method names :) 
EF is the next step, I agree with you 100% on this. As for the method names - I'm coming from Java but I see your point and will fix it asap :)
Oh look at the SQL in the code behind. I'm going to be super critical. 1. Research Reddit's problems and history to avoid the same mistakes 2. Testing. You cannot test your pages. 3. Webforms. Stop. Using. It. 4. Ajax and WebAPI where is it? You should be using it. 5. SqlConnection is Sql Server the best choice for this kind of project? 6. You assume the server date is correct? System.DateTime.Now 7. Timezones, Locales, Languages? 8. Never use system time, use UTC. Your methodologies and code practices are not used that much any more. Not your fault, but you need to talk to people who use ASP.net daily to understand what not to use and the reasons behind it. Put your logic for your app OUTSIDE of the web front end. The web project should not have the database code in it. I think Entity Framework is the wrong thing to use as well. EF is slow. How slow? Try NPoco. Also try MongoDb, which is a perfect fit for this project. I am happy to discuss it with you and redo your project with you in MVC, Web API. 
I did a project that had a lot of similarities with reddit. I wholeheartedly agree with most of what you said. Except mongo, I'm not sure I would choose it again. Reddit does this cool thing where it does some query magic to sort posts and comments by their relative creation date multiplied by the item score - while it would be possible and even performant with sql, there simply no nice way to do it in mongo (maybe with $where, but that's not nice)
And this is why we discuss things :) An excellent example of what experience brings to the table.
MVC Entity Framework Ajax WebAPI Dependency Injection Unit testing Separation of concerns Your way is very out dated and I would honestly advice you not to put this online for others to see and use.
No idea mate. But I know they have an interest in the cross platform tooling that Xamarin have
Great! If you have a devops tutorial as well, that would be awesome. I'm an infrastructure person transitioning to development and I have a feeling I'll be seeing more of it in the future!
That's very true. I heard talks about an acquisition? I will be talking with the Xamarin team for sure. Undecided on the Xamarin party, though.
On the Long List of Shit To Do ^tm is starting a blog. If I had that rolling, I'd probably write about DevOps. For now, I recommend talking with colleagues about it, and reading things about software builds, network and server infrastructure, processes to help developers work together, version control. There's tons of stuff you'll learn on the way.
What is this? It's just a change log
Yes, the Xamarin guys will be there. They're hosting a party with Microsoft on April 2nd.
So this is just project templates?
MEF
What would you like me to find out about it?
MVC, EF, separation of concerns, web services are planned. I put this online for others to see and comment and gather valuable feedback, but sure, I could take it down until it is perfect and following best practices.
Will do. So far I've only heard of MVC and used in my windows forms .net projects, but I'll be sure to research the others you mentioned. Thank you!
As always we are happy to give criticism and help you along the way :) The best thing is that you're wanting to learn so much more and you just can't buy that these days. Good Luck!
Dont be ashamed of what you've got man. :) 
Well, in the state this project is now, I would not show this up in a job interview, but I will work on it further (pretty much rewrite the whole thing) and then we'll see :)
Does it need to be more?
As Cheese said, don't be ashamed of what you've done. Sure, it could be improved and made more modern (as others have said) but that doesn't mean you should hide it. Feedback is how you learn. Programmers can be very elitist about stuff, and I personally don't think it's helpful. Keep it up. 
It's a Microsoft built extension containing templates for open source projects. It also allows you to create other templates more easily. It's also open source.
EF isn't slow, poor use of EF can be slow.
as a fellow java programmer in remission, my coworkers get mad at me too :)
No way - I'm keeping it all to myself and going to stop paying monthly for the one I currently have. ;) I did have a dream last night that I broke my phone screen, however. It was ... emotional.
But ... but ... **W^h^a^t^a^b^o^u^t^i^t^?**
Tl; dr: http://blogs.msdn.com/b/webdev/archive/2014/02/18/introducing-asp-net-project-helios.aspx and http://weblog.west-wind.com/posts/2013/Nov/23/Checking-out-the-Helios-IIS-Owin-Web-Server-Host Basically, in the last several years, Microsoft has been cleaning house from the old monolithic model that ASP.Net had taken in the past (At least, some factions inside of Microsoft anyway). This started with MVC, which was an out of band framework (e.g. not tied to big .NET releases) built on TOP OF System.Web. Then came WebAPI, SignalR, etc., which were built without that dependency to System.Web. The lack of that dependency allows for WebAPI to be extremely lightweight. But it also allowed for this next step, which was decoupling from a specific web host (IIS) to allow for, for instance, self-hosting an API with massive speed improvements (e.g. as a Windows Service that listened to a specific port). This comes along with a lot of the push for Angular.JS type of development stuff, where there's this push for UI concerns to all be pushed to the client in Javascript, and the server side stuff to just be an API pushing out data (Whether or not you may agree with this or not). This started a big discussion that evolved into OWIN (I think some of it came out of some Ruby groups that were already doing similar things...), which was essentially a specification for hosts and servers and applications to talk to each other (Essentially setting in stone that a Host would just hand a Server a list of HTTP Server Variables, and the Server would hand this context to a pipeline of modules, of which your application would be one). I get a little fuzzy here, but here's my inderstanding: Katana, then, was Microsoft's implementation of this specification. The new Microsoft Identity stuff is all built on top of OWIN, for instance. Katana consists of a console based host (think web server), and a server (the thing that actually runs the pipeline and application). Helios, instead of being a stand-alone reference implementation of OWIN like Katana, is an IIS based implementation. It should allow for the same pipeline kind of behavior, but from within IIS, and without picking up the System.Web dependency and associated speed issues. Essentially, you know the IIS "Integrated Pipeline"? This replaces it, as it's slower than this approach. The downsides are: 1. This isn't fully supported yet. It's an experiment. 2. It is not 100% compatible. E.g. it'll run WebAPI or SignalR stuff, but I don't think it'll run an MVC site for instance which relies on System.Web and ASP.Net. Basically, OWIN, Katana, Project Helios, etc., are all very experimental still. If you're just getting into MVC, it's probably beyond the scope of what you need to know about. OWIN modules are supported in traditional IIS-bound apps via an HTTP Module that will run them in the OnPreExecute of the app (This is how Microsoft's Identity stuff works in MVC). But it's a bastardization of the spec, because I don't think you can do wrapping behaviors this way (E.g. in a pipeline one of my modules could be a performance logger that starts a timer, calls the next item in the pipeline, and then when that next step(s) in the pipeline finishes stops it and logs the result... I don't think this wrapping behavior is supported unless using a true OWIN pipeline server). If, however, you have an app that is completely Angular.JSized with a server side API, it's very interesting and worthwhile to look into for performance reasons. I'd imagine that this is a very small percentage of developers right now. A lot of this also came out of Node.js stuff and people being "wowed" by the "Write a web server hello world in 10 lines of code" examples. Well, this is essentially the equivalent in .NET now. I've even seen some performance numbers for simple self-host WebAPIs rivaling the throughput of Node.JS, which is interesting... really shows how much overhead the ASP.Net pipeline part is adding in. By stripping out everything into OWIN modules that we can load as needed, we could probably speed things up a good deal(load what you need, not everything and the kitchen sink approach).
I'll be at the Xamarin party. Always a good crowd. 
No idea really, it's the first I've heard of it. 
Yes, me too. I read up on it yesterday. Seems like a neat idea, but I'm not so sure it's useful for what I develop.
Your code hurt my soul.. in all seriousness I would fire one of my developers for writing code like this. Take some training courses, find a good development mentor. 
Thanks. I wanted to get input from fellow programmers and I find it's a good way to learn by listening to what people have to say. I'm all ears :)
It's not your fault. College classes are still teaching web forms with many of them not teaching MVC/RAZOR. Do yourself a favor and start learning MVC and Razor on your own, it's much better than Webforms!
"find a good development mentor" is not constructive critique. Do you have anything constructive to say that has not already been said in this thread? If not, you are just a troll in my book.
You're a student, you are supposed to try things, get some wrong, learn and get better. Hell, that's what being a developer is. The whole industry is continuously iterating doing things, some good, some bad, learns from them and round again we go. If you go to a job interview, showed me your little project, told me what you initially did wrong, how you understand what was wrong, why and how you fixed it, I would say: "hey, this guy didn't just grab a tutorial on how to do this, he knows how to learn and seeks to make things better". I've been programming for 13 years and not a week goes by where I don't learn something new. The more I learn, the more I'm humbled there's so much more I could learn.
* "You don't understand development patterns or how to apply them to code." - this is not constructive. Name the actual patterns instead and give links to more info about them. * Sorry, but the things you wrote have already been talked about (did you read the todo.md?) and mostly serve as talking down instead of being constructive. * I get the impression that you don't really want to help but rather want to show off how awesome of a programmer you are. 
Thank you, this was a great read. I'll keep it up and release a much better version asap :)
WPF 5.0
People have critiqued your code so I'll cover another subject: source control. The way you put your code in the Git repo means that the moment you add another project (and you will), you'll be forced to completely restructure your repo (probably losing lot's of file history in the process). Always make a Solution folder for your Visual Studio project. Your git repo should contain that folder in it's root in this way: /Git repo root/Solution folder/Myproject.Web. That way on the root you are free to add the readme, subprojects and the like. Then in your solution folder your solution has a place to grow. That said, you are using source control which is already a great start. 
REALLY looking forward to the announcement that Visual Studio Ultimate will be made free so that developers will once again favour the Windows platform. Also looking forward to the announcement that Microsoft will provide tools for developing across Apple, Android and Windows devices. The reduction of the cost of MSDN licenses by 50% - looking forward to that one. A return of the catchphrase "developers, developers, developers, developers" will raise a chuckle - highly anticipated. The guy announcing Windows 9 will be outshone by the announcement that Microsoft has acquired Burberry. So yeah - report back.
Are these all things that we call "wishful thinking?"
Another good NoSql DB is db4o, it's really easy to use
The call to Dispatcher.Invoke blocks the calling thread, not the UI thread. In his rather contrived example, you're correct that the Thread doesn't really do much. The point, though, is that you will at some point have a bunch of non-UI work that you want to do with a UI update at the end. You can move all of the background work into another thread, and then use the Dispatcher to invoke a method that updates the UI.
I think everyone accurately describes why you use .Invoke. But I am going to tack on an example that should make more sense then the book you are reading. So lets pretend you have a view like a windows forms or something. The view's entire purpose is to send a document to China. To do this the user will click a button. But our user is a whiny sob and doesn't want to wait... So when the button_onclick event is triggered you just update the database with a new row in your Work table. You know the server will grab any unprocessed rows from the Work table and do that work. When the server is done it will trigger an event on your view that is like bitch_WorkIsDone(event e). So your event is triggered.... but your User has moved on! The user stole the UI thread dammit. Now You have two threads. The first is the UI and the second is your WorkIsDone event. Well shit man... my work is done needs to update the UI and tell the user that... you know... work is done n shit. What do you do... WHAT DO YOU DO!!!! BOOM!!! INVOKE THAT BITCH!
This part is where I get lost: &gt;The call to Dispatcher.Invoke blocks the calling thread, not the UI thread. But if the UI thread is not the one being blocked, isn't the calling thread (that I guess is the one executing `myCheckBox.IsChecked = true`)running without problems (i.e. not being blocked)?
I get that part. But it seems that the thing I'm not understanding is the difference between `Dispatcher.Invoke` and `Dispatcher.BeginInvoke`. See this: http://www.reddit.com/r/dotnet/comments/21mjcf/why_would_i_use_dispatcherivnoke_in_wpf_if_it_is/cgeh4hd
The calling thread waits for the UI thread to execute the entire method (in this case, to set `myCheckBox.IsChecked` to true) before it continues to execute. Setting a single checkbox won't take much time, but for the small amount of time it does take, the calling thread is just sitting there waiting for the UI thread to finish.
Dispatcher.BeginInvoke will schedule the code you pass it back to the UI thread to be executed and then return immediately (before the code is actually executed). Dispatcher.Invoke will schedule the code AND wait (block the thread you're calling Invoke *from*) for execution to complete. You should be aware, the main UI thread is not a normal thread. It's not running some continuous block of code. Rather, it's executing a series of discrete blocks of code that have been *scheduled* to execute. When you use a dispatcher, you're inserting code into that schedule.
Is there really a intermediate thread?
I think you're misunderstanding the point of invoking an object's Dispatcher. Most classes in WPF (or other platforms for that matter) are not thread safe. You can't access them from multiple threads without risking throwing exceptions or having strange bugs from trying to read and write to the same sections of memory simultaneously. In WPF almost every UI object has a Dispatcher. This is just a fancy class that represents the thread that object is running on (which is usually the default dispatcher which represents the main UI thread). A Dispatcher lets you access an object from another thread by asking the dispatcher to run some code on the thread the object belongs to. If you have some code that is running in the background or calling back from background thread (such as an async network operation), then you at some point may want to manipulate a UI element. So before you do you ask that thread's Dispatcher to execute your code which manipulates the object. It will safely execute that code when its thread is free (which is usually most of the time). By designating 1 thread to be the sole thread which accesses certain objects you pretty much guarantee that you won't have cross-thread exceptions or bugs because a thread can only do 1 thing at a time. In your question you referenced the following information: &gt; The call to Invoke will block until your function has been executed. This simply means that execution is blocked on the active thread (NOT the thread you are invoking). This means that one thread is waiting for another. If you're invoking the UI thread then that typically means you're already executing on a background thread so there is no harm in blocking it. Although the only real purpose to block it as opposed to using the BeginInvoke function is that you may want to wait until the invoking function is done before doing anything else. That is, if for some reason you want to update the UI and THEN perform more background processing. Perhaps you are invoking to show a dialog to ask the user a yes or no question? Then based on the response you perform more processing on the background thread.
There is no intermediate thread, there is an event loop.
Yeah VS Ultimate for free for private usage would boost the C# devs
Great explanation of the different categorizations of OWIN modules! I've been keeping a close eye on this for a while now as I believe OWIN will provide everything we need to do truly customizable authentication providers, but I must say that getting some details on the whole big picture is way too difficult. Thanks again!
Too bad its just client side templates.
Nothing is stopping you from implementing yours. There is also Windows Azure templates in there.
Like you I've had a hard time following the developments here. There is really not a lot of documentation on this stuff yet. As such, done of the above may be incorrect... It's just my current understanding of it. But basically unless you are using something that can dump the System.Web dependency all together: nothing to see here yet.
Definitely would like to hear about anything about NodeJS tools for VS, which is supposed to have a Beta release announced at BUILD: http://nodejstools.codeplex.com/ Thanks!
Oh geez. I'll let you know what I hear, but I'll never be happy with node.js.
The only thing stopping me is that I tend to find what I need on github and places like that -- I typically need more than just the template to start with (for saving time sake).
Why not?
Something like this https://chocolatey.org ?
Might also want to consider [Chef](http://www.getchef.com/chef/).
Not what you asked for, but checkout the nullsoft installer. The language is a bit weird, but it's a lot more flexible than MSI.
You might want to look at Squirrel https://github.com/Squirrel
Thanks, I've seen Squirrel before, but I think it's more of a ClickOnce replacement than a pure end client solution. I need to consider cases where there is no internet connection, or one may be blocked.
Chef is cool, but I think it's better suited to enterprise infrastructure deployments than "packaged software".
Ah. Didn't see that requirements.
That's okay, I was just brainstorming. I just posted again to this same thread about using/embedding Chocolately.
Upvote for introducing me to expression trees. :-) How is the performance if this code? Does the expression tree have to be compiled every time the expression is executed?
Yes, it needs to be compiled. It'll be as fast as LINQ is since LINQ uses expression trees for all it's queries. I haven't done any actual benchmarks though 
Nice, this will help until "?." is part of C# VNext.
So, I went back and benchmarked it and yes the compilation was slow. However, I just released version 0.2 which allows for a precompile stage that will give you a function that has the if checks built out. This way you can get the same performance as any deferred action null check. I ran an action that did raw null checks 10,000 times and compared the average time to the average time of 10,000 times with the precompiled step and they were the same. Without a precompliation the expression tree compilation is 1000 times slower. The new version (and updated readme) is up at https://github.com/devshorts/MonadicNull
Exactly! Hopefully they also expose metadata about where the chain fails, vs just giving you the result.
I wouldn't hold my breath for the metadata but at least we'll the the convenience for Razor views and whatnot.
Nice 4 hour turnaround there, shorts. (with tests and updated doc and everything!) Gj, I'll test this out shortly for sure. :)
Cool. Let me know if there are any issues or things you'd like to see
Just wanted to say that a couple of months ago, I asked for help for a Platform invoke library I was making. Well, now it works, and it's available on NuGet. Why use this instead of P/Invoke? Well, several reasons. It uses interfaces, which means you can write tests for your wrappers. It also allows you to add pre- and post call functions, which is useful for debugging, logging and turning GetLastError into an exception based system. Since the thing is compiled to CIL (using Emit) omitting the last thing will remove any performance impact. And when it comes to performance since it is compiled to CIL it should have little to no performance penalty. I still have to do performance tests, so don't quote me on that though. It's all in theory. Two basic example are provided in the [GitHub repository](https://github.com/GeirGrusom/PlatformInvoker). There are some more features not yet documented, but more documentation is under way. edit: example for the lazy: using System; using Platform.Invoke; namespace Example { public interface IMessageBox { int MessageBox(IntPtr hWnd, string lpText, string lpCaption, uint uType); } public class Program { static void Main() { var msg = LibraryInterfaceFactory.Implement&lt;IMessageBox&gt;("user32", s =&gt; s + "A"); msg.MessageBox(IntPtr.Zero, "Hello World!", "Hello World!", 1); } } } Note that you can supply all of the arguments in the Implement function using attributes as well, but more work is needed on this, especially the LibraryAttribute needs to be able to supply different values based on operating system. But currently you can add [Library("user32")] and [EntryPointFormat("{0}A")] which would enable you to use Implementation&lt;IMessageBox&gt;.Instance or the empty overload for LibraryInterfaceFactory.Implement&lt;IMessageBox&gt; instead. There are a lot more details to this library of course, but I think that the wiki will be better suited for describing them.
Given Google Chrome's [death sentence for NPAPI](http://blog.chromium.org/2013/09/saying-goodbye-to-our-old-friend-npapi.html), I wonder what that means for Microsoft's commitment to continue supporting Silverlight to 2021. Do they plan on updating the plugin to use Chrome's Pepper PPAPI or releasing Chrome extension or simply doing nothing? Don't suppose it'd be possible to field a question along those lines, eh? You know... ^not ^that ^any ^^of ^^us ^^use ^^^Silverlight ^^^anymore ^^^:(
Not thread safe. The internals is what it is. A later version will probably cache the results. This literally does nothing but build the ifs out for you
Alrighty. I also realized, regardless of threading, that this means it would access property getters multiple times. _Theoretically_ this shouldn't be much of an issue, but it might trip someone up who has logging or other side-effects* triggering from accessing the property getter. ^\* ^but ^nobody ^ever ^does ^this, ^right? ^Right? ^:( EDIT: All in all, I like the library. I've seen this concept of using the Expressions API to fake a null-propagating operator, and I like that someone took the time to make a library (with tests!) for it!
Heh, people do which is dumb, but the cache fix is pretty easy actually. If I find a chance this week to do it I'll push a new version out 
Personal philosophy. I don't like that JavaScript is used to run web servers, and I don't like the amount of reinventing that's being done with node.js and JavaScript. Also, NPM.
Ah, interesting. I am almost certain there will be a lot of discussion on web technologies, so I'll see if I can sneak this one in there. I am not familiar with NPAPI, PPAPI, or Silverlight though, so I'll do my best to relay your question word-for-word. ;)
Thanks for your enthusiasm. The basic idea is that Silverlight is a WPF-light running the CLR in the user's browser. NPAPI (Netscape Plugin API) was a plugin API for plugins (like Flash, Java, and Silverlight) to be embedded and interact with web browsers. Google developed a new similar API called "pepper" (PPAPI) for various reasons, but AFAIK it's not compatible with NPAPI-based plugins. Google has started to block/phase out NPAPI plugins in chrome and by the end of the year, from what I understand, the NPAPI is going to be _removed_ from Chrome. This says to me that even if I _wanted_ to run Silverlight in Chrome, even for line-of-business internal use applications, it would not be possible. So I'm wondering how this squares with Microsoft's reduced development support for Silverlight and their commitment to support it in major browsers until 2021.
+1 for PostSharp Another aspect-oriented programming facility I've tinkered with is Fody https://github.com/Fody/Fody. It's open-source, which is cool because you can see how those kinds of libraries work. Also, arms open for a hug @AngularBeginner?
No session on WPF? sigh...
Not that I saw, but there is a Panel in which it can be discussed. In fact, I've seen some people asking about it. http://channel9.msdn.com/Events/Build/2014/2-563
I would imagine most XAML sessions would be sufficient and there are quite a few of those. WPF hasn't changed all that much in awhile.
Yeah. Wpf doesn't really need any more sessions. Just replay an old one from the archives. Ms is using these build events to promote their new tools. They don't need to promote Wpf any more.
Yeah, its a smaller simpler library for quick pretty printing. I'll probably add some more to the readme when I have some time.
There is also castle dynamic proxy, if your using IOC then I think this is a cleaner, simpler approach. It doesn't modify your assemblies.
Seriously? Your other posting is even still on the first page! And you did not even properly respond to my question. http://www.reddit.com/r/dotnet/comments/21bn9e/json_pretty_printerbeautifier_library_for_net_on/
Very bad and obvious 1st April "joke".
You think so? There's an actual plugin that integrates Clippy.
Make sure you install the extension! It's real and works with ReSharper - those are screenshots, not photoshop!
Just because it really exists doesn't mean it's not a joke.
So confused.. Obvious April fools, but also real. Mind exploding....
Man these April fools things are getting tiresome
I have a coworker just like this. I quickly learned not to ask him anything unless I'm in the mood for not accomplishing anything that day. Which is a shame because he knows the framework and language better than I do. The counter to this is keeping an iterative approach: start from a prototype, and don't forget to refactor as you go and correct bugs and add features.
You can easily mess up stuff that way - but you can do that with everything. And they do that, because there simply is no other way for aspect orientated programming like that. You can use the proxy pattern to work around this limitation.
How is it dangerous if it's doing things you programmed on thing you have decorated explicitly with an attribute? A proxy would certainly work but you'll get a little bit of a performance hit and you have to change your code everywhere to use the proxy. Post-compilation has the advantage of costing nothing in performance (in the end, it's as if you had called your log method before each method) and it allows you to quickly adapt lots of existing code with very little changes (add, change or remove and attribute here, change the behaviour in one single place). 
I think you are overestimating what it's doing. It's injecting your little bit of code into many places in your code after build. It's a really efficient way to do things but hey, it's your code.
Sadly Azure Websites haven't changed in price. For a low-traffic MVC app, I would go with a Shared tier Azure Website. That's 10$/~~hour~~ month. As everything with cloud stuff, you can find much cheaper hosting but you'll have a hard time finding one as flexible. With the click of a button you can have the same website run on a ridiculously large machine. You can even run an overkill machine for peak times and scale it down. You pay for the hours for the size of the machine you wanted. Edit: mixed hour/month.
APRIL'S FOOL TROLOLOLO ^^^^^/s
... And that's a medium VM.
Please tell my you meant $10/month?
10 free! http://www.windowsazure.com/en-us/develop/net/aspnet/
I know I am being a little over the top with my questioning, but at the same time I am already pursuing licenses within my company. I just like to play devils advocate in order to acquire as much info as possible. Thanks for the time!
For how long though? I'm betting that's a 6mo/1year introductory offer?
https://www.nuget.org/packages/RandomNameGeneratorLibrary/
https://www.nuget.org/packages/RandomNameGeneratorLibrary/
I added a little more content and explanation to the readme, hopefully it assuage your anger. I'll try to sharpen it up as I have free time and energy. I was responding to the request for a nuget package first, because someone asked for it on another project/post and it amused me. I'm sorry if I did not answer your question well or in a timely fashion, alas I can respond but only slowly.
I love SideWaffle and really use it to simplify my Angular work. Though, what really made me get excited for it was this video on C9 showing some really cool ideas about how it simplifies distributing your own templates and the ease of generating extensions for VS. http://channel9.msdn.com/Shows/Visual-Studio-Toolbox/SideWaffle
Nope, just resource constrained - not many computes and short on RAM.
Even with a database and URL? What about SSL?
Wow. That sounds like a pretty damn sweet deal for low traffic sites.
isn't it free for 10 websites?
How does that even simplify things? The point of using Razor is getting: - validation - intellisense (if you're in VS) - binding to an actual model - ease of updating (it's just a text file)
I'm really wondering if you will post for each version of your own libraries another link.
Is there some reason your on my case? I hadn't planned on it, but can't anyone post whatever they like? What's with the negativity?
Why yes, my mind slipped.
It's just really not nice if this subreddit is just used for self promotion, instead of discussion and sharing valuable resources.
Who cares who made it? Is it not a useful resource? This sub gets like 30 posts a week.
The "they don't need to promote WPF anymore" crowd is missing the point. There's a VERY sizable contingent that still uses WPF, because it's the best desktop toolkit for Windows (a lot of people would say the best development toolkit, period), and there are rumors of a new version coming out - Microsoft doesn't seem to be getting too far with WinRT. Some answers would be nice.
No. Well, I think you can get a 20mb db for free, but a URL requires a non-shared site (so not one of the ten free sites), SSL requires the same. Best advice, try it for a month, you can monitor prices daily, if it gets too pricey, roll back.
My first approach would be to use a system that supports transactions like a relational database. You get the benefits of robust concurrency support without implementing it yourself. If that's not an option use a hash function or index for lookup and avoid locking by comparing a last updated timestamp on the read object vs the original. You have a dirty read if they differ. I usually avoid locking because its one of the biggest problems when you scale.
Fits nicely: https://xkcd.com/927/
[Image](http://imgs.xkcd.com/comics/standards.png) **Title:** Standards **Title-text:** Fortunately, the charging one has been solved now that we've all standardized on mini-USB. Or is it micro-USB? Shit. [Comic Explanation](http://www.explainxkcd.com/wiki/index.php?title=927#Explanation) **Stats:** This comic has been referenced 375 time(s), representing 2.5058% of referenced xkcds. --- ^[xkcd.com](http://www.xkcd.com) ^| ^[xkcd sub](http://www.reddit.com/r/xkcdcomic/)/[kerfuffle](http://www.reddit.com/r/self/comments/1xdwba/the_history_of_the_rxkcd_kerfuffle/) ^| ^[Problems/Bugs?](http://www.reddit.com/r/xkcd_transcriber/) ^| ^[Statistics](http://xkcdref.info/statistics/) ^| ^[Stop Replying](http://reddit.com/message/compose/?to=xkcd_transcriber&amp;subject=ignore%20me&amp;message=ignore%20me)
Does it support WPF?
Cool, anything noteworthy?
~~If you are web dev you'll find a lot of goodies.~~ Check out the Build 2014 talk http://channel9.msdn.com/Events/Build/2014/3-602 Edit: The goodies aren't limited to Web Dev's
Nope. 
I wish. But no, that's not available at this time.
I skim read this, because who is calling Wait() on their async tasks?
People who don't know what they're doing. :-)
Exactly. "The Perfect Recipe to Shoot Yourself in The Foot - Not knowing what you are doing Part 2 - Deleting the filesystem using C# Async"
Is this a new thing? in the "Applying" window I'm sure i just saw : Windows Phone 8.1 SDK - x64 Windows Phone 8.1 SDK - x86 Windows Phone 8.1 SDK - ARM does this mean we might finally we able to develop on non 64-bit machines? I'm not expecting the emulator to work or anything, but at least the option to write code on x86 or ARM systems would be nice....and the ARM suffix? Develop on WinRT? Or is am i reading it wrong and there is a batch of devices coming out with x86 or ARM processors?
&gt; Do you hate writing this? if (user != null) { if (user.School != null) { if (user.School.District != null) { if (user.School.District.Street != null) { return user.School.District.Street; } } } } return null; Yes. That's why I'd write this: if ((user != null) &amp;&amp; (user.School != null) &amp;&amp; (user.School.District != null)) { return user.School.District.Street; } return null; Edit: no need to check user.School.District.Street for null and return null if fails.
Is this an upgrade or full install?
Unity *is* a framework; it just works at runtime instead of compile time. I'd like to see how you would do it differently in Unity, since the interception aspect API in Unity works in a very similar way to the PostSharp API (and just about every other AOP tool like Castle DynamicProxy, Spring, etc).
Edit: Such hostility. Remember not to lash out at people commenting, its rude, unprofessional and does not make you seem like the authority you are trying to be. No actually AoP is achieved by various injection frameworks using one of two strategies: * Compile time - modifies your IL post compile to inject in AoP Concerns - this tends to be the more popular impl and the one I am not the biggest fan of. PostSharp used to to this method only in the past, it now looks like they support the second strategy. * Runtime proxy - in this design the consumer of the object does not receive an instance of the object itself, rather you get a proxy (check out the type in the debugger) that wraps your type and provides the interception hooks without mutating IL post compile. Unity uses this option and it looks like PostSharp may actually support it now which is nice. As I said I would rather use a FRAMEWORK rather than ROLL MY OWN FRAMEWORK why? Because your solution is extremely type specific and requires tons of extra work and ceremony to intercept a new type. Using a framework like unity allows me to intercept on any method that unity has an interface for. I don't even need to know the type of the object. The interceptor class used in Unity is not dissimilar to what you are doing however the framework does way more work than you are doing here. If you only care about intercepting a handful of types and you know you don't have to add tons more all the time then rolling your own MIGHT preform better. A few other things an injection framework does with regards to interception: * does not require a base class * does not require the class being intercepted to have embedded knowledge of the interception process Honestly in cases like this I tend to lean toward frameworks because despite how clever you may think you are, you are likely not as clever as a group of devs working on a framework for multiple revisions. 
People who [read this](http://msdn.microsoft.com/en-us/library/dd997415(v=vs.110\).aspx).
The first way I see this type of coding manifest is what I refer to as the deep dive into legacy code or lack there of. In this scenario a developer learns a syntax that they think will increase performance/reliability for a troubled piece of code. They implement it while only skimming through the method/class that is effected. They fail to dive deeper into that classes dependencies and they miss the fact that lower in the call stack a multi-threaded method uses Wait(). Its not entirely the Devs fault because hey.. some projects are HUGE. It's a trap!!! that the original Dev didn't know he left behind because 5 years ago Wait() on threads was what you did. The second way I see this manifest is what I consider legacy developers. People who have been coding since vs 6.0 using C. They know what works and whats fast. They write a nifty threaded method and plug in a Wait(). They learn about await() and think it is just another way of threading. So they await a method which spawns some threads and uses wait() until those threads rejoin. 
How about logging if a piece of that fails. Now you're back at the original example 
Their definition of "universal" is sketchy at best.
I don't get MS. Nothing they made recently targets Win-7. As app developers, we are bound to target users who also use Win-7, we can't just ignore them. Which implies, we are stuck using dated tech.
Woh, jump to 27:27 to see some cool browser magic.
What you say is valid, but that's purely for a developer. For a client, it really doesn't matter. Also, you can't develop Win Phone 8 app on Win-7, but you develop a full fledged Android App.. The irony in that :P The new Native Preview is only for Store apps (although they tell coming soon). 
I still don't understand your distinction between Unity being a framework and PostSharp being a "roll your own" non-framework. I'm quite aware of the differences between runtime and compile-time AOP. I understand that the aspect that I wrote (using the PostSharp framework) is tied to the ServiceBase base class. However, I fail to see how switching to Unity means that I won't need to do the same thing. So, I'm not asking rhetorically: can you please demonstrate with Unity how you would accomplish what I'm doing with PostSharp? I'm not terribly comfortable with the base class myself, and I would love to improve what I'm doing.