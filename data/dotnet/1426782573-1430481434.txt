Microsoft press has exam reference books. Start with those. Also, I think MVA has video collections for some of the exams. The difficulty depends greatly on your daily environment. Are you an MVC dev that deploys a project to Azure? In that case it shouldn't be too hard with a bit of studying. Do you have zero experience? Prepare for a lot of study time.
Does "C:\Windows\Sysnative\hkcmnd.exe" exist?
C:\Windows\System32\hkcmd.exe does exist. I can launch cmd.exe, and some other programs in system32, but hkcmd.exe is causing me issues, for some reason.
Do you have NTFS permissions to the object?
I'm thinking this might be the issue? How do I determine if I have the proper NTFS permissions?
Are you launching as admin? Did you start studio as admin? 
http://stackoverflow.com/a/13976740/811902 Maybe this will help
I see one problem. Backslashes in c# need to be escaped so instead of \ it needs to be either / or two \\. This may be your issue. 
Step debugging FTW
I love github's network screens.
I had a similar problem long ago, it was before the [XML Web Transforms](https://msdn.microsoft.com/en-us/library/dd465326%28v=vs.110%29.aspx) in Visual Studio... I wonder if that XML Transform logic is available as a library?
Is it possible that the server is sending the domain name as the originating destination, whereas clients are sending the IP (despite both being on the same external IP)? Is there any way for me to check this? I can verify that the IP address is allowed and auth details correct because I can send emails from that address using a typical mail client. That leaves domain and "etc."... Hopefully my email host will know what to do to resolve this issue.
You could linq query the nodes you need with XDocument vs Xmldocument which doesn't allow that and is really old. The guy who suggested serializing objects was right though. If you know how to program with objects and you've got the leeway then it's pretty trivial to make some classes to match your Xml elements and write the serialize method. If you have a class called Car with properties like Make and Model, then your serialized xml will have car as the parent node and the 2 properties as child nodes.
No you don't need administrative privileges to run something from the System32 folder otherwise you wouldn't be able to run cmd or calc
You'll need to disable filesystem redirection since your application is probably running in 32 bit mode which means when you reference System32 you'll actually get the SysWOW64 folder. To do this you use [Wow64DisableWow64FsRedirection](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365743%28v=vs.85%29.aspx) and [Wow64RevertWow64FsRedirection](https://msdn.microsoft.com/en-us/library/windows/desktop/aa365745%28v=vs.85%29.aspx)
This sounds like a fun project. So if I put my cursor on a class variable it will slightly highlight the whole class. Same for function or loop. Or is it just at declaration?
Does the (email) server have an allowed IP list? If so, make sure the email server is allowing the IP of your web application's IP.
for some reason it helped me realize something. first, since I have a search function I need to put my stuff in the page_load method (or at least somewhere after the init), since I don't want to see stuff I didn't search. next would be the way asp creates controls in the control tree. first it will initialize the website but the page_load fires after the initialize-event those controls must either be added to the control tree manually or exist before the page initializes itself. duh everything is so obvious now. thanks edit: I quickly realized I could also switch the visibility-property of my images on/off depending on search. I will try this once I am at home.
Yep, I did find that out, however, C:\Windows\Sysnative\ should point to System32. What's exceptionally odd is that I can use rundll32 from system32. It's just hkcmd.exe and a couple of other System32 files that have problems being launched this way.
wow a dude with an irritating writing style!
Agreed. I had to stop reading!
My only hope is that they eventually pull the plug on TFS source control too. Git is so much better for branching and merging it's not even funny.
Ah, well that all makes sense then. With the open-sourcing of the library, do you see good reason to submit a pull request that would address the failings in the Microsoft implementation? I could see setting a "permissive" type option when doing the conversion that could be used to allow the parser to do some cleanup work. Despite what the haters down there had to say, I appreciated the article. Always learn something when you listen more instead of looking for reasons to dislike!
It's not. It reads exactly like a blog is supposed to. Personalized, opinionated, and characteristic. 
I thought so. It's very streamy but makes sense.
I'll definitely be making some Pull Requests to fix up areas in their code that I think could be improved such as the displayName quoting and the Content-Type/Disposition parameter encoding. It's already pretty good and the areas where I think their code can be improved shouldn't be too hard to patch.
Thanks for the idea. It lead me to further brainstorming onto a solution. The problem I have is that I don't exactly all the different details and content that can be contained in the XML i'm working with. If the full XML document can contain each letter of the alphabet, I'm aware of (and work with) AB and C, but there's a wealth of other details that I don't need to be concerned with -- but I need to support. Building objects to handle parsing of the objects I care about would make sense, but then becomes a question of how I handle all of the other objects, and how much extra work that becomes. Ultimately, my new plan is to either create a document from scratch or allow the user to load one, and following either operation, call a "Verify" function that reviews the document and searches for all fields that are necessary for my purposes. (I'm doing so by leveraging XPath search queries whilst using SelectSingleNode() calls.) If I find missing elements, I then generate and attach them to the document as necessary. It's still extra work, but not as much extra work as I was originally staring down. Thanks for the idea.
As Belenar has said, there are the proper references (and IIRC there are other relevent MSDN links alongside the "what the exam covers" section). There are "study quizzes" out there from third party providers that have near-identical questions which might be useful to judge how difficult the quiz is, though they're close enough that buying one is pretty much just cheating. Regardless, the tests are pretty easy assuming you know the stuff that Microsoft put in the relevent reference book. Personally, I'm not a fan of the tests (which we only do enough of to keep partner status) because they're easy enough in that you don't need to understand the technology to pass (you just need to remember trivial shit like the order of arguments in the framework methods); but hard enough that you can use the technology daily and still not know the answers. Hopefully that puts the difficulty in perspective. TL;DR: buy the book, read ("study") the book and rote-learn the book and the tests are easy. If you have a bad memory, the tests are reasonably difficult because answers are usually close enough that they'll all look familiar to a competent dev (but maybe with one piece missing). I'm not sure if they're offering them at the moment, but try to find an exam or coupon for a free second shot.
Why not just use a XML or JSON library?
What's about *connection pooling* in SmtpClient? I couldn't find any official documentation.
Nice post, however I couldn't get over how arrogant/ego the author came across as. If he's like this in real life, I'm sure he's a one man team that no one wants to work with... I mean this as nicely as I can.. Just was hard to read through it... People would be more accepting to this post if it didn't come across as its complete shit because I didn't write it... But you know they did a few small things that I didn't think of ok
I have been doing something similar (ownership of entity models with users in Web API). From the default scaffold for a web api project in visual studio, you get token authentication for free, just built in. Then you can access the user ID in your controllers via `User.Identity.GetUserId()` and then just make a `UserId` property assigned to that on your models. Then when you GET 'api/myCoolModels` you can return only the models that belong to that user. 
Why are you using the `ArrayList` class instead of [`List(Of String)`](https://msdn.microsoft.com/en-us/library/6sh2ey19%28v=vs.110%29.aspx)? Also the code `result = result &amp; resultPart` and `currentWord = currentWord &amp; character` may not be very efficient as you're going to be creating a new String in the heap with every instance of the loop (I have not seen any information showing that the compiler will optimize this). If you're dealing with concatenating an unknown number of `String` objects you'll want to look into the [`System.Text.StringBuilder`](https://msdn.microsoft.com/en-us/library/system.text.stringbuilder%28v=vs.110%29.aspx). Finally, I managed to turn most of your parsing logic into the following Regex: ((?&lt;=_)*[A-Z]+|(?&lt;=_| )|^(?!((dt|dr|ds|[id])(?&gt;[A-Z _]))))([^A-Z _]*) The only thing you should need to is fix the casing on the matches, but that should be the only thing. I'm not certain how fast your code will perform compared to it, especially if you switch to a `StringBuilder` instead of concatenation.
you really should look at the newer MVC way of doing things, where you generate some JSON on the server and include that in your page, with your image names/URLs inside, then you can feed those to a lightbox as needed (with javascript)
If only this was recorded, this is a talk that I have a high interest in seeing. Let is know if the slides or code are posted anywhere.
&gt; it just put me on the defense because I felt for the team I didn't think my review was really all that negative toward System.Net.Mail. I felt, coming away from reviewing their code, that it was actually pretty damn good for its intended purpose. Keep in mind, that while their parsers did not handle certain parts of the spec, that things like ContentType.Parse(string) aren't really meant to parse real-world mail headers. They're mostly meant to allow developers to do this: type = ContentType.Parse ("text/plain; name=\"fubar.txt\""); rather than having to do this: type = new ContentType ("text", "plain"); type.Parameters.Add ("name", "fubar.txt"); It also allows developers to load strings from their database or whatever where they might have email address lists that they want to send mail to. That's what it's really for. I think that, ideally, their parser would support the encoded forms of the parameters in their parser, but how many programs out there using System.Net.Mail will encode parameter values correctly before passing it off to ContentType.Parse()? Probably none, so it's probably not a big deal. Rebex is one of the few .NET mail libraries I have not played with (mostly because it's not free afaik). There's another one that I haven't had a chance to look at, either, called something like Blackbox I think? Both are commercial and therefor I can't easily get my hands on the code to review them. I think it'll be really hard to beat MimeKit for performance and overall handling of real-world messages. This is my fourth generation parser, each one improving over the last based on limitations discovered in previous generations. My previous parser, GMime, is very widely used on Linux and I believe is used by Brazil's biggest ISP to parse all incoming mail as part of their custom virus scanner - I think they told me that amounts to something like hundreds of millions of messages per day and they have never had a problem with it. BUT *I* was not satisfied with it and knew my design could be further improved, hence MimeKit. The change in language was largely due to the fact that I've moved on to writing C# more because I just find it to be a far more productive language than C. MailKit is more experimental than MimeKit, honestly, but I still think it's pretty rock solid in design, at least for a synchronous command pipeline (and this is the biggest area where it can be improved for IMAP especially, I think). I haven't had a chance to really play with .NET 4.5 async/await stuff yet, but I've been really excited about it for a while now. MailKit still has an async public API, but it's just Tasks wrapped around the sync API. In many ways, it would be better to have the core API be async and have sync wrappers (unless the developers using ImapClient and ImapFolder are already doing their own threading, then it's... arguable). My gut feeling is that both MimeKit and MailKit are probably as good or better than Rebex, especially if you don't use S/MIME (MimeKit marks my first implementation of S/MIME building up from low-level crypto APIs), but I can't say that with certainty. Maybe you can let me know :-) Note: I feel pretty confident in my S/MIME implementation, but I am no crypto expert and what I would really love is to have a crypto expert review my code and nitpick it. I also don't know how BouncyCastle compares to Rebex's crypto library. Post-Snowden, I'm a lot more paranoid about non-open crypto libraries, but that doesn't mean that just because a crypto library is open that it's better (or even good).
I know
I see ReSharper as completely neccessary.
It does not satisfy all use cases. See [this]( http://blogs.msdn.com/b/webdav_101/archive/2008/06/02/system-net-mail-with-ssl-to-authenticate-against-port-465.aspx) for more info. Also, using something has nothing to do with understanding how it works and knowing when it's the wrong tool for the job.
what kinds of things would you change?
Surely this would be better served with an AOP injector like postsharp?
TIL you use a function called SetProperty to set a field in PRISM.
Is your comment directed at the PRISM library? Because all the author did was to streamline writing properties as required by PRISM. Do you also not use snippets for your dependency properties as well?
`update myTable set id = id+1;`
is there any reason you are not wrapping your connection and sql command in using statements? This would eliminate the need to have to Close and Dispose the connection and commands edit: Grammar
you can put the script tag anywhere on the page, but there are 2 important things to keep in mind * if you want to reference html elements on your page or insert elements with javascript, you need to wait until the html is rendered * unless you define the async attribute on your script, it will delay the rendering of your page while it loads and executes in practice i don't think the 2nd point makes a big difference most of the time, and you can put your html references in an onload handler if you really want your script at the top of the page, but i think its best practice to put it at the end. * [https://css-tricks.com/async-attribute-scripts-bottom/](https://css-tricks.com/async-attribute-scripts-bottom/) * [http://javascript.crockford.com/script.html](http://javascript.crockford.com/script.html)
you need the relative path to the image in my example i had a images folder in the same directory as my images.aspx (both in the base directory)
hey nevermind with the postback problem, all I needed was to add onclick="return false" inside of the button tags
Everyone's got to start somewhere! Check out this link https://msdn.microsoft.com/en-us/library/system.data.sqlclient.sqlconnection%28v=vs.110%29.aspx
personally i think creating the context all the time uses to much time, we use a new context for each part of the application that is sort of atomic. for example if you open user management and do stuff you always use the same context until you close the user management
Contexts should be short lived. For a web application you should create a new context for every request.
If MySQL is a requirement, then EF should be dropped completely.
The lifetime of the context should be managed by the dependency manager. The data context connects to an unmanaged resource, so it should implement `IDisposable`.
I find that funny because the only time I voluntarily used EF was so that I wouldn't have to deal with MySQL directly. 
Yes, ok anything else...
Yep, unless EF is required. Gotta love corporate policies!
Then you man up and look for a new job.
In your other post within /r/Cplusplus, you wanted it center aligned. In any event, I am going to assume you want the contents **within** the "div" tag to be left aligned. So you need to track down the style sheet (.css file) that the page your working on is using. After you have located the file, find the ".row2" selector. Once all that is located, you will have to examine what rules are within that selector and adjust appropriately. Edit: [text alignment](http://www.w3schools.com/cssref/pr_text_text-align.asp)
My company currently uses it. Having to deal with Telerik makes me weep. I've come to the realization that Telerik obfuscates everything in order to keep their user base reliant on their API and should you want to migrate to another vendor you'll pay the price in major re-factoring. Telerik's examples are always the most basic of use cases. When you veer away from anything but the simplest of implementation you stand a good chance of being stuck and completely lost. Looking for help on Telerik's site is always like playing Russian Roulette. I rarely find help on their site useful. Often the staff will write "Could not reproduce" and close out the ticket or better yet leave a vague answer to the solution. 
We find the exact opposite with their WPF toolkit.
If you're pushed into a corner like this (Our stack involves EF and Oracle) I'd suggest pushing back for a provider that doesn't make one cringe. We tried using Oracle's Provider, and quickly wound up switching to Devart's. No, it's not perfect, but it seems to work much better than what Oracle was providing. It's relatively cheap, too (When one considers the time saved.) Full site license is ~2000$ for unlimited users for the oracle version, significantly less for the MySQL provider. They even have a tutorial for Identity with their provider. We used the Oracle version with good results. http://www.devart.com/dotconnect/mysql/docs/?Identity-2-Tutorial-Entity.html 
I use EF6 with MySQL all the time, no problems.
I haven't used Telerik, but I have had pretty positive experiences with DevExpress.
Can you post the web.config section where the lenght is specified? I had a similar issue just a few weeks ago, but mine was for asp.net 4.0. 
Agreed, their wpf toolkit has pretty good documentation
Did you try this http://stackoverflow.com/questions/3853767/maximum-request-length-exceeded
As a long time webforms developer I always loved the Ajax toolkit. It always had pretty much all controls I needed and the best part it is free. I haven't done webforms development in a few years so I can't comment on the new toolkit.
Is the AJAX control toolkit different from their kendo UI stuff? I can give you lots of feedback on that, never had to use any of the other libs like MVC or otherwise.
I recently joined a company which provides WISA MVC ecommerce sites but still maintains some webforms sites for clients that go way back and are unwilling to pay for a major overhaul. One of them was willing to commission a frontend update however, so I had to work in webforms for the first time in years. The Ajax Control Toolkit was used extensively but, honestly, I found it a complete chore to work with. Sure it simplifies some aspects when talking to the server, but making it look pretty is ten times more difficult. Nondescript tables everywhere, loads of markup overhead... I had some time and I stripped out all the Ajax Control Toolkit junk and replaced it with standard ASP controls and jQuery and told the clients to invest in MVC. I do not expect the Telerik tools to be much more useful.
They should push the release date of ASP.NET 5 until they are ready. It is a breaking change move and it is pointless to stick to the deadline for such release.
I personally dislike the new picker a lot. Navigation is a pain in the ass and I cannot paste a path to directly navigate to the desired location. That being said, I personally use Ookii dialogs in my projects. They are available as a nuget package and give you the same features as in Win7, unfortunately I don't think that they are stylable (just a Win32 wrapper).
I do not have much experience with the AJAX Control Toolkit, but I can tell you a fair amount about Telerik. This depends a lot on what you are trying to do. If the out of the box is good enough Telerik is great, grid is one of my favorite controls ever, clients love it. Although it seems like new features with a few exceptions (Grid and Editor being the most prominent) are just ported from Kendo UI (not a bad thing, but something to note). Skinning can be a pain in the ass, but the visual style builder can be helpful. http://stylebuilder.telerik.com/ Also just to note, Webforms is a weird thing. Its one of those technologies on the way out, but everyone realizes its going to still be viable for the next 10-20 years. If you have real control of the project think about going with webservices, MVC and kendo or a similar JS solution. Anyway Telerik AJAX is a huge toolkit so any more information about what you are trying to do or what is important to you would be helpful.
Try other browsers on the users machine. Could be some bad or corrupt plugin.
Would love to, but I don't have access to the machine (temp who works for the client.)
Can you post a simple demo of the issue someplace?
Have you tried performing the user's task when you're in release mode rather than debug? I know asp.net relaxes some restrictions when you're debugging so it could be related to that.
remove the execution timeout setting, and the maxAllowedContentLength setting, unless you've got a good reason to NEED them. you don't need it and you're just adding more restrictions to something which seems to be too restrictive already. You can alsays re-add them once you've debugged this problem, but for now you need to take out as many restrictive settings as possible ask her to email YOU the file, then you can upload it yourself on your test server. You can't possibly test without that file. you always need the EXACT content that a user is having trouble with. change that maxrequestlength value - the docs say that it's supposed to be set in Kb (although I HAVE had cases where it seems to take it in bytes) so it's quite possible that you're overflowing it. Your current setting is around 1 terabyte. Re-set it to something reasonable and sensible like 20Mb , 20000Kb ish. Double the size of your problem file and a REASONABLE limit for the server to handle. test it yourself with another file of a similar size, preferably a little bit bigger. I'm sure you can find an 11Mb file somewhere, if not - create a word file full of graphs and images and other crap until you get close. If it uploads your bigger file but not theirs, it's a problem with that particular file or filetype, that's a whole different alley of debugging. Obviously she's not actually sending a 1Tb file, so something else is going on here. 
I created this simple example to show some really cool things you can hook up with aspnet 5 middleware architecture.
maxRequestLength is in KB and maxAllowedContentLength is in Bytes. The values in each should equal the same size, not the same value. Caught my team up for days.
Or tell us what your dev console says for errors?
might it be an access rights issue ? 
Code example of this: &lt;style&gt; .my-table th { text-align: center; } &lt;/style&gt; &lt;asp:Table cssClass="my-table"&gt;
You should create a new context for every request.
Yeah, I figured it wouldn't be possible. I would suggest to do what /u/jimschubert and /u/adambeta said. One more suggestion would be to ask the user to get on a different computer and attempt to upload the file. If the problem replicates it may be an issue with the user account, depending on the membership your application is using. If it doesn't replicate, then it's an issue with the computer missing a plugin, browser problem, or any number of things, but in this case it would be an IT issue. As I said I had a similar issue a few weeks ago but the issue occurred because a group of users didn't have the right permissions to upload to the folder. It was very odd because I would think that the server would throw "POST Denied" or "Access Denied" but it didn't, it would throw a "Maximum Request Length Exceeded" error. Using Fiddler help me figure out the exact issue.
Having *everything* entity is probably not the best approach. The sql databases have been around for sometime and are designed to handle the processing power needs for complex queries. Plus, you're adding overhead to the amount of time it takes to run a query, hence the database server will now have to compile your linq to sql statements (since linq to sql simply generates raw sql to execute on the server). I would go with a hybrid approach where you have linq to sql for simple queries and keep your complex ones on the server.
I took over an ASP.NET project recently which used Telerik controls and their performance was awful. Replaced them all with various open source counterparts and sped up the UI significantly, also using a lot less memory on the client side. Personally I think they suck and are the equivalent to .NET Web Forms and Viewstate - use if you want something done quickly, for a demo or proof of concept, but there are better ways if you care about efficiency and scalability in production.
Interesting since this is the first time I have ever heard of MoonSharp. What language *doesn't* run in .NET nowadays?
The main issue I'm running into first is that I don't know how to create a field with an edit button like that which allows the user to modify the contents of the field. I don't know enough to pick the right keywords to get good results from google either. Any help would be appreciated!
Not enough IMHO. I can count 4 somewhat actively developed open source languages outside Microsoft's ones * IronPython * Nemerle * Phalanger * MoonSharp 
Linq is very powerful when you use it correctly. make sure you're using the from x in y select z syntax as there is some useful stuff in there, for example the let keyword (read it up!) can be very useful for in-query filtering. Linqpad is a useful tool for testing queries, but if you're not really getting anywhere, don't forget that you can use stored procedures too - that'll make your boss happier! 
If I remember correctly, IIS over localhost was using different settings in our case. Explicitly setting the values in the web.config fixed it for us.
Well, it's a lot more complex than that. This is all IMHO, although I have experience with another very similar product (ODP.Net + Oracle instead of Connector+MySQL). MySQL is really an Oracle product at this point, whether we like it or not. I'm guessing that doesn't instill a lot of love from potential outside contributors. But, even Oracle's Provider for their own database (ODP.NET) doesn't play THAT well with Entity framework. Per my post above we wound up going with a 3rd party provider (Devart) because Oracle's just wasn't up to task for our usage. And Oracle cares more about Oracle's Provider than MySQL's, so I can only imagine how the MySQL provider works in practice with EF (I'm imagining badly.) Also, ANY database that doesn't support APPLY can run into problems with EF. Even Devart's provider can run into problems with this; on versions of Oracle before 12, you wind up getting a runtime exception when you try to execute a query that EF Generates with APPLY. Many DBs don't support it. SUPPOSEDLY this is something that will be more 'bearable' with EF7 as the underlying provider will have more control over the queries generated. I'll believe it when I see it.
Easier to just use something like dapper for complex queries. Considering it's a read only database linq/ef might not make much sense at all.
RIGHT NOW! mmm-kay
I am not sure if the DLR is even included in .NET Core 5. 
We talked in work - we reccon it's for threading? It makes another copy of the reference even when passing by reference - so multiple threads can access the same pointer at once. And because of that there must be the overhead internally of code that sets the object reference to Null in the calling function (object tc) if the user does this inside the function(ref a): a = null; The runtime remembers to set tc = null as well...
So, after a little research, it appears that it depends a bit on the type that is referenced. When you use ref C# actual uses a pointer to the other objects pointer. This allows access to that object in the method and only allocates enough memory for the pointer instead of a copy of the entire object. Here is a link to an [SO](http://stackoverflow.com/a/16207741) discussion on this with code examples. Best of luck.
~~Each time you call GCHandle.Alloc(...), you get a GCHandle object. When you then call GCHandle.ToIntPtr(objHandle), you get pointer to the GCHandle object you received from .Alloc(). And since you call GCHandle.Alloc(...) three times total, you get three different addresses, because each returns a new GCHandle object.~~ Scratch that. Real answer: if you dig into `GCHandle.ToIntPtr(...)`, you'll see that it returns `m_handle` from the parameter passed in. Tracing `m_handle` reveals it gets set in constructor of `GCHandle` by calling `InternalAlloc(...)`. [This](http://stackoverflow.com/questions/28982669/does-gchandle-alloc-allocate-memory) SO question provides answer what happens in `InternalAlloc()` and it actually allocates a new pointer. That is why you are getting different addresses, because you have 3 different pointers to the same object.
Sounds like a little open source project waiting to happen...
Is there a way to get the internal reference? I'm guessing that *would* be the same in the Main function and the by-ref function?
Yeah, that's my point. It's setting a field. I got a chuckle out of it.
Thank you! Is there any way of using reflection to get the internal pointers used?
What exactly is the page doing? Is it a page under your control or a third party website? More information would help, it sounds like you might be approaching this in a very inappropriate way, but I can't say without more info.
Firstly, hi! Secondly, it might help if you formatted your code to make it easier to read. To do this, simply add four spaces at the beginning of each line like so... &lt;div class="clear hideSkiplink"&gt; &lt;asp:Menu ID="NavigationMenu" runat="server" CssClass="menu" EnableViewState="false" IncludeStyleBlock="false" Orientation="Horizontal" onmenuitemclick="NavigationMenu_MenuItemClick"&gt; &lt;Items&gt; &lt;asp:MenuItem Text="Back" Value="Back" NavigateUrl="Admin_MainMenu.aspx"&gt; &lt;/asp:MenuItem&gt; &lt;asp:MenuItem Text="Log Out" Value="Log Out"&gt; &lt;/asp:MenuItem&gt; &lt;/Items&gt; &lt;/asp:Menu&gt; &lt;/div&gt; You may want to consider self-closing tags on the asp:MenuItem, although I have no reason to believe that they'll fix your issue: &lt;asp:MenuItem Text="Back" Value="Back" NavigateUrl="Admin_MainMenu.aspx" /&gt; Also, you may want to consider asking this question at [StackOverflow](http://stackoverflow.com/questions/tagged/asp.net). Not that this subreddit isn't lively with questions and answes, but StackOverflow is set up specifically for Q&amp;A and has a larger community.
&gt;The object can outlive the scope in which it was constructed if another reference ends up pointing to it. As long as we're being pedantic, the object *will* outlive the scope in which it was constructed unless, purely by coincidence, the garbage collector runs immediately after the reference to it goes out of scope. 
I don't think it's that stupid. His example is forced, but a simple "object1.property1 == x" check with object1 being null could throw an exception.
There's nothing wrong with asking questions! Feel free to upvote my 'answer' though! :P
Use Visual Studio Online to store your code. you can keep publishing to that same web hoster.
I'd guess via reflection. http://stackoverflow.com/questions/4963160/how-to-determine-if-a-type-implements-an-interface-with-c-sharp-reflection
I saw that post earlier. It doesn't seem like any of that handles nested hashes, or hashes within array lists. :-\ An actual implementation (not my jank json compare) would have to be recursive -- iterating over enumerable items as it found them?
My team made a portal and tried out a number of prototypes: webforms, Sharepoint webparts, MVC. MVC was by far the most pleasant. And this was during the transition from MVC 1 to MVC 2, so I'm sure it will be even better now.
&gt; is AFAIK `is` is a shortcut keyword for reflection much like `async`/`await` is for Tasks. I.e. `is` *is* reflection.
Good reference architecture here http://www.pluralsight.com/courses/building-multi-client-end-to-end-soa-angular. May not be all you want but helps draw the lines between what is client driven and what is server driven.
Definitely try mvc, get used to it. First, it is genuinely better/more modern technology. Second, it is the main framework you'll be working with on asp.net vnext, where webforms are not even supported in the cloud (or core or whatever) framework I believe.
I honestly don't know how that works internally - do you have a source on that claim?
For structural equality, it probably would, at least in some cases. Why are you even using `Hashtable` or any other non-generic collections though?
It's just what I'm used to / I don't know any better. I know there is a Dictionary and a List, but I already started with Hashtable and ArrayList, and I don't know much of a difference. I'm always willing to learn though. As per the use: I'm building a bunch of data to be used to send to an external service via XML. 
Non-generic collections should (IMO) not be used at all in any new development and are there exclusively for backwards compatibility. If you want to build a tree... Then build a tree structure! :) Nested dictionaries could also work, but those would go only N-levels deep, where N would be fixed during development/compilation, whereas a tree would be more flexible - you'll have to pick and choose based on your requirements.
C# "is" operator generates a "isinst" IL instruction. You could argue it's using RTTI to do this, and thus is a form of reflection.... But generally speaking, when we talk about reflection, were talking about far deeper introspection of a class and it's members. On a side note, AS vs IS? Both can work here.... Eric had an amusing blog on the difference between IS and AS: http://blogs.msdn.com/b/ericlippert/archive/2010/09/16/is-is-as-or-is-as-is.aspx 
No I didn't install web essentials this time. 
I meant this: https://technet.microsoft.com/en-us/library/bb896645.aspx it will tell you what its trying to load when it freezes.
It could be something with codelens : https://connect.microsoft.com/VisualStudio/feedback/details/807273/microsoft-alm-shared-remoting-remotecontainer-high-cpu
sigh *forks repo* 
Always work with lists over arraylists. Except for initializing, there's nothing to get used to. Incredible amount of benefits on top of speed (int, string etc get boxed with ArrayLists)
Thanks! Your post just reminded me to buy your book! I came across it at a time when I wasn't doing any .NET programming for work, so I wasn't going to get much out of it. I'm happy to say I'm writing C# code again and your book has been ordered!
Take a look at the build definition, you can configure that. Don't think there's a code coverage rule though, but you can pretty much do anything with scripting.
Well, I'm biased to answer this so obviously my answer is going to be yes. [The ToC is available](http://books.filipekberg.se/Content/CSharpSmorgasbord/CSharpSmorgasbord_ToC.pdf) for you to have a look at which might give you a good indication if it's something you'd be interested in reading? The book covers things like testing and mocking, inversion of control, parallel and asynchronous programming and more. Read the first free chapter and see if the writing style and code samples connect with you?
Am having a look at the rulesettings files in the build definitions and they look promising. 
Start here: http://aws.amazon.com/sdk-for-net/ You want to use the Amazon Simple Storage Service (Amazon S3). (api intro here: http://docs.aws.amazon.com/AWSSdkDocsNET/latest/DeveloperGuide/s3-apis-intro.html ) The basic code to upload an object is here: http://docs.aws.amazon.com/AmazonS3/latest/dev/UploadObjSingleOpNET.html and retriving it back with http://docs.aws.amazon.com/AmazonS3/latest/dev/RetrievingObjectUsingNetSDK.html You store the keys to your uploads and request them back when clients ask for their files. Also, you should be keeping backups of the files! 40 GB is so small and easy to manage. 
Thanks! That's the one I'm playing with now. It seems like it has most of the functionality I need, but I'm not thrilled with the speed so far.
There are tools to let you upload directly into S3 buckets. If you keep the same filenames, then this should be fairly easy/straightforward.
Thank you! I'd actually downloaded ExcelDataReader and investigated it until I discovered the lack of write support (as should have been evident from the name!). One of my primary goals is actually to migrate a ton of the data we manage to SQLServer, but sadly it is critical that I be able to work with existing spreadsheets as both inputs and outputs to my processes.
Have you tried epplus? 
Performance. Your deep compare is an order of magnitude or more slower (varies with how many items are in your collection) than a single reference comparison. Object.Equals is used way too frequently for that to be the default. You'd bring the entire. Net framework to its knees if a deep compare was default. 
interesting. I'm new to .NET, and have been working in ruby for the past four years, where this kind of behavior is default. Like this: &gt; h1 = {a: 2, b: 3, c: {d: 1}} =&gt; {:a=&gt;2, :b=&gt;3, :c=&gt;{:d=&gt;1}} &gt; h2 = {a: 2, b: 3, c: {d: 1}} =&gt; {:a=&gt;2, :b=&gt;3, :c=&gt;{:d=&gt;1}} &gt; h1 == h2 =&gt; true Is it really a big enough of a problem in .NET where, it would get super bogged down? Ruby has never had a problem :-\ (maybe there are some internal differences with how ruby treats dictionary-like data, though that are more efficient than in .NET? idk) edit: the way ruby handles reference equality is through the eql? or equal? methods http://www.skorks.com/2009/09/ruby-equality-and-object-comparison/ so == always invokes a deep value compare
In case you were wondering about the right terminology: your site is hosted on a web server that you have FTP access to.
&gt; Ruby is all immutable values what do you mean? I can modify h1 by doing this: h1[:item] = "value" I see what you mean though, about optimizing memory, and storing values of things only once - that'd be nifty
&gt; Does anybody know why this behavior isn't default? I feel like a .Equals(...) should always do a deep value compare. :-\ Yes, it should. That is a design flaw C# inherited from Java which inherited it from C++ which inherited it from C which inherited it from Algol. Deep comparison is the default in the new .NET language F#. Numbers, lists, arrays, sets, maps, dictionaries and all other types are deep compared by default. It works perfectly and makes life a *lot* easier. 
&gt; You'd bring the entire. Net framework to its knees if a deep compare was default. In point of fact, deep compare is the default in F# and performance is excellent. 
yeah, coming from ruby, this is a little rough. Ruby automates everything.
1. If this is a package for MVC 4, why doesn't it has any dependency on the MVC 4 NuGet package? 2. Why even MVC4? That shit is old! MVC5 came out in 2013. 3. The Project page usually links to the source code, not to some blog post.
Yeah...that looked fairly unintuitive. The whole thing was actually pretty clunky, but seems like it does the job. I'm currently playing around with [ClosedXML](https://closedxml.codeplex.com/) and it seems pretty awesome apart from the load speed and inability to handle read-only opens.
Yeah, just look at the example [here](http://codereview.stackexchange.com/questions/11804/symbolic-derivative-in-c).
To break it down so OP knows what you did. 2 000 000 000 char * 1 byte/char = 2 000 000 000 bytes 2 000 000 000 byte / 1024 byte/kilobyte = 1 953 125 kilobyte 1 953 125 kilobytes / 1024 kilobytes/megabyte = 1 907.348 megabyte 1 907.3486 megabyte / 1024 megabyte/gigabyte = 1.862 gigabyte 
Well i don't know if it would. It's vb.. :-P but just out of curiosity why / when would you compare dicts? 
.net uses utf-16 encoding, i think it's two bytes per character.
For unit testing purposes I still prefer https://github.com/kbilsted/StatePrinter which serialized the data as reable strings and compare. It has the added benefit that asserts can be automatically generated and even automatically re-written when the business code changes.
I doubt they do it directly any time soon.. they're already partnered with Xamarin in that space.
Disappointing there's not a free (both meanings) alternative to Xamarin.
There is technically a free (as in $$$) version if Xamarin, although with severe limitations. I may be off base, but I *think* they might have a free indie license for OSS projects. If not, the indie license is not too shabby, and reasonably priced (within the realm of the MS stack as a whole). They're a young company though, they're in need of capital.
Xamarin is included in Visual Studio 2015 CTP6. Edit: Screenshots - http://imgur.com/a/vxAjj?gallery
At one point the free version was so crippled the example programs were too big to build with it. Very cool product otherwise. 
Yup. Not recommended. Strings are immutable. You may end up making too many copies without even realizing
Is a Xamarin licence required? Or did MS strike a deal with them? 
The Indie version of Xamarin is [free for students and teachers](https://xamarin.com/student). No project size restrictions, etc. Very useful. The biggest limitation of the Indie version is that there is no Visual Studio integration (you have to code in their own IDE). See a breakdown of different versions [here](https://store.xamarin.com/). I found their sales support very helpful too. Took a genuine interest in my situation. But if you want/need VS integration then the business version isn't cheap unfortunately. I'm hoping that might change with a closer partnership with MS.
Relatively slow, if it's only a once off check then the speed is irrelevant. The most common libraries in .net (mvc, IoC, ORM) all use quite a bit of reflection and it's not an issue.
Libraries will generally take the result of the reflection and compile a DynamicMethod to speed subsequent accesses up to native MSIL speed. If you're calling MemberInfo.GetValue()/SetValue() and .Invoke() every access (the naive approach), it's going to be slow *every time*.
When you know C# but not Js. (Not in depth) *probably
Isn't that the use case for TypeScript?
I bought a license. Worth every penny!
This is what typescript was designed to address actually. "javascript for enterprise"
Considering a Xamarin Business License (the minimum license for Xamarin Visual Studio integration) currently sells for [$83/Month or $999/year](https://store.xamarin.com/), I doubt it'll be suddenly free for everyone. At least not in it's current form. One day perhaps...
You can get a better result by using TypeScript and some automatic C#-to-TS transpilation during the build step.
Sorry for the formatting, but I'm on mobile. item. GetType().GetGenericArguments() is probably what your looking for. This will return a collection of types as it's possible for a generic to have multiple types associated with it. After that you get the type of the generic, then you can call GetCustomAtrributes with the type of the attribute your interested in. I know you said that the attribute should always be there, but there's no way to make the compiler check that for you, so make sure you handle cases where the attribute isn't present.
Thank you for the feedback. I must admit I spend most of my time using Nuget packages and not really thinking about where the code is hosted. I have made the following updates: 1. I put a dependency to MVC 4 on the Nuget package. I haven't really tested it with MVC 4 to be honest, however I know a lot of people in my line of work that are stuck on MVC 4 due to company upgrade policies. 2. As I said above I know of several people that support MVC 4 applications, had this in mind when I created the project. 3. You are absolutely right, seems kind of self serving to push them to my blog. I have since released the code on github and updated the project site to the github page. Thank you for your feedback. 
EDIT: Looked up BsonDiscriminatorAttribute using System.Reflection; // for the GetCustomAttribute&lt;T&gt; extension public T Add&lt;T&gt;(T item) where T : class, new() { var discriminator = typeof(T).GetCustomAttribute&lt;BsonDiscriminator&gt;(); if( discriminator == null ) { throw new SomeException( "Missing BsonDiscriminator on " + typeof(T).Name ); } _db.GetCollection&lt;T&gt;( discriminator.Discriminator ).Insert(item, WriteConcern.Acknowledged); return item; }
This will be downvoted to hell, but it looks like ReactNative is going to rule the roost in terms of near cross-platform app development.
But how would you use this with EF?
You can use EF inside each DAO, however using EF in DAOs might be a bit overkill, considering EF lazyloads related entities when you retrieve entity from database.
How does that work on the CI server? Wouldn't you have to create the transform manually? How does it handle parallel branches?
I'd be interested to hear what kinds of things you've done without issue. I'm starting a large project right now and I already love EF and our database requirement is mysql. I got the connector, wired up a database, tried the basics...no problem. I anticipate anything complex I'll just go to stored procedures, but if you have any tips on what to watch out for I'd love to hear them
An approach I've seen work well is to have these values set during your deployment. Ideally your deployments are automated - and the configuration information required would be stored in whatever tool you use. Personally I'm partial to tools like Octopus Deploy, but I've used MSIs, and Powershell. At that point, you just need to secure your deployment tools (which ideally you're doing anyway) 
I may be blind but I don't see a reference to this on the mobile site - is there a trial version available? I want to give this a test drive and if it works for us try to convince my company to buy my team licenses, but I'll never be able to convince them without a trial.
This isn't actually a terrible question. I've been using a similar pattern for Entity Framework for some time now. I wasn't really ready to share this, but [here's what I've got](https://bitbucket.org/mobileapped-shared/mobileapped.core.persistence/wiki/Home).
So you've made it as a website, so how does it check the deals automatically without you browsing the website every 10 minutes?
Part 2 of the article where he serializes to JSON, instead of XML, can be found [here](http://geekswithblogs.net/LeonidGaneline/archive/2015/03/30/xml-transformation-xslt-vs-.net.-part-2.aspx).
Should be fairly straightforward. Add a new field of 'target price' (or, apply a 'target percentage' globally if that's what you like) and when it checks, if it meets the target price, it triggers an alert.
Ah, it only triggers when you visit the site? Yeah... that's not terribly useful. But if the rest of the code is there, it shouldn't be that hard to schedule a check every X minutes.
While I am not a massive fan of XSLT they can be enhanced in .NET using precompiled transforms.
[Hangfire](http://hangfire.io/) is one of the more popular libraries that specifically supports recurring tasks within an ASP.NET application. Another is [Quartz.net](http://www.quartz-scheduler.net/). If you're using Azure, there are WebJobs and also Scheduled Jobs.
Start here: http://www.asp.net/aspnet/samples/aspnet-mvc Between the samples you find and the links to forums and MSDN based sources you should find plenty to get you started. You would also do well to read up on the [MVC](http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller) pattern in general 
Quartz runs in-process, so it suffers from the same condition - once the app domain is destroyed by IIS, you lose your scheduling until the site is visited again and app domain is rebuilt... Therefore, as you mentioned, for recurring or long running jobs it's probably better to use Hangfire, Azure functionality, Windows Services or (the simplest option) scheduled tasks with simple console apps if the app is hosted by you or it's an "internal" app.
Community!!!
Yay, Ultimate will be within grasps.
I know a generic can represent more than one type but how can you associate multiple types with it?
By precompiled transforms, I'm guessing you mean compiling them into an assembly, possibly using XSLTC. In the author's code, he's loading them in by URI. Precompiling would probably help in that case. I know that you can write inline functions (msxml:script elements) in the XSLT, but that affects performance since the compiler would have to be called each time the stylesheet is loaded. Precompiling would definitely help there, too.
Best news ever. 
Unfortunately I have to work in winforms every day so I can't initialize those memory segments 
What? He Said WebForms, not WinForms.
The Git pull requests are far superior for code reviews. 
Why reiterate something that has been covered by bloggers for the last two years at all?
Given MSFT's recent moves, I find it bizarre that we still have multiple editions of VS2015, and and that some of them are non-free. If you want developers to support your platform I would expect that your goal would be to remove as many barriers to entry as possible. Especially given MSFT's legacy support problem There's lots of things you could criticize Apple for, but Xcode is distributed as a single free edition. Certainly Xcode is not as robust as VS, but there's a lesson to be learned. I'm looking at you SQL Server. You're worse than Capcom and the Street Fighter II series.
Actually, the mentioned code uses the XslCompiledTransform class :) readonly XslCompiledTransform _xslt ; public XsltTransformer() {...
doing this would be a great way to get your code posted to DailyWTF when someone comes across it. That being said, it sucks actual pattern matching isn't coming in C# 6, I think I remember seeing them considering it. Maybe C# 7!
It's great though if you're already paying for MSDN, you get X credit per month.
They weren't considering it for C# 6, but I mistakenly reported that they were because it was mixed in with all of the actual C# 6 news. Still, there is hope for it in version 7.
Onto, like, any server? o.O You will have to set up your own server (or install IIS on your own machine) or rent server space from someone, or grab the 30 day free azure hosting trial.
Yeah! Okay so I have a server, But the files that are published aren't... Index.htm obviously. I dont see a default file either. Just wondering what... What is the equivalent of an index file or am I missing the mark on this entire process completely.
Is it an MVC project? You mention a views folder up there. MVC projects wont have an index/default file in the root folder. You would just go to whatever your default route is.
I was doing database first and just importing what I needed. I have since moved onto code first, since that is how EF7+ will work.
i have $120 /mth in azure credit from work and an old grandfathered promotion i got years ago al together i run 2 vms with (2gb ram each and dual core processors) and 4 small databases(2 integration / 2 prod) with money left to spare i host my internal applications (jira, team city, etc) on one of the vms and my web server on the other i would say thats a pretty good bargain 
first you are going off a blog post from over a year ago to base pricing on. I wouldn't say he's wrong, it's just changed. That being said, it has changed. Pricing for the entry level website is free - http://azure.microsoft.com/en-us/pricing/details/app-service/
I have a feeling this wasn't suggested as a serious technique.
http://www.asp.net/mvc/overview/older-versions-1/controllers-and-routing/asp-net-mvc-routing-overview-cs
I was hoping it would just change variables and things so I wouldn't have to wipe out the style all the time to quickly update a page! I have been watching intro to MVC videos on Microsoft's Virtual Academy and they talked about scaffolding and updating the database as if it would update to reflect the additions you made to the model classes, but dang it I guess not! Thanks for the clarification:) I'm just diving into MVC and it feels great!
I started watching these! http://www.microsoftvirtualacademy.com/training-courses/introduction-to-asp-net-mvc
This is a rather broad question, but I'll take a stab at it. * ASP.NET Web Forms is the odd man out here. The rest are all (loosely speaking) built around a core of HTML, CSS, and JavaScript. Web Forms uses special controls and code-behind files to shield the user from having to deal with those technologies too much. But the tradeoffs are: 1) It can be really tough to apply standard CSS and JavaScript to your pages, and 2) you don't really build any reusable skills. If you dedicate yourself to Web Forms, you learn Web Forms. Full stop. If you focus on any of the other three, you can reuse a lot of what you learn on any of the others. * ASP.NET MVC and ASP.NET Web Pages are extremely similar. The primary difference is that MVC gives you a lot more guidance and opinion when it comes to your server-side code, while Web Pages are intended as a lightweight way to build dynamic pages that don't need all of that structure. They both use Razor syntax, which is pretty nice. * Single-page applications are written in JavaScript and run in the user's browser. They typically interact with your server through an API or web services. Common SPA frameworks are Angular, Ember, Meteor, Knockout, etc. * A SPA is not mutually exclusive from MVC or Web Pages. The SPA defines how your *client-side* code is structured, while MVC/Web Pages define how your *server-side* code is structured. In fact, it is quite common to build an API in ASP.NET MVC that is consumed by a SPA.
Well I suppose that's a good answer for a rather broad question! The way you describe web forms intrigues me though- what if someone needs to re-skin an entire .net website built with web forms? 
You're right that you're paying too much - they have a Free tier, for exactly the kind of situation you're interested in. Considering that the shared tier is sufficient to host small client sites in, it's well good value. You should definitely read the terms of what you're signing up for first though; assuming that a blog article over a year old contains info on current pricing isn't a great idea.
I'm going to piss some people off, but you're better off staying away from Web forms. It's not very clear how much longer MS will be supporting it. 
My site is 5/month for SQL Azure with a free website. It even has SSL out of the box.
Why would anyone be upset, webforms is garbage. I can speak from authority here I've had the bad luck of having to maintain a webforms app for four years, its a nightmare.
I try to think stuff like in what way Web Forms would be objectively better for a project. Other than "develop faster" (which anyways is a function of the developer skill set and not the technology), I always come up empty. Having used both extensively I loath and hate the projects I maintain in Web Forms. Part of the hate Web Forms get is unjustified because a lot of developers were just shitty at the time the technology first came around and a whole generation just stuck with it. You have people sticking the entire logic in PageLoad() or a callback event with blatant copy paste and abuse of isPostBack and queryStrings. And these people just shat their shitty code wherever they went and somehow got the job "done". People also did this with PHP back in the day and is not PHPs fault (yes PHP has it's problems as well but that's another discussion). However what can be said is that Web Forms Controls will make your life a living hell with their non standard JavaScript and CSS for which you don't have any, ahem, control and have to resort to server side hacks and other glue code nonsense to fix.
Sure, here's an example. Say I have a DbContext of Products. Products looks like this: public class Product { [Key] [HiddenInput(DisplayValue=false)] public int ProductID { get; set; } [Required] public string Name { get; set; } public string Description { get; set; } } And I have a DbContext class called EFProductContext, and it looks like this: public class EFProductContext : DbContext { public DbSet&lt;Product&gt; Products { get; set; } } I'm going to go into the Package Manager Console, and enter Enable-Migrations -ContextTypeName EfProductContext Now lets add something to our Product model. public decimal Price { get; set; } Next I'll go into the Package Manager Console and enter Add-Migration 'Added a price property to Products' This will generate the code for Updating the database for you. Then it's as simple as entering the following in the Package Manager Console: Update-Database This has been assuming a completely Code First approach, and I haven't tested it just now for an initially Database first approach but I don't think that it'll be much different. If it is, please let me know. I hope this helps!
I'll have to track down the details again, but supposedly it will be dropped from the next version.
They have back pelted a little on that saying now that asp.net is open source someone can build in support for vNext.
So I went ahead and did a DbFirst migration to see what might be different. When creating the ADO.NET Entity Data Model, make sure you select the option for Code First from Database. Next, after you Enable-Migrations You're going to want to do a Add-Migrations Initial -IgnoreChanges This will set up an initial database migration for future migrations to work off of. I'm totally not sure why this is required, but it seems to solve some headaches later with an "There is already an object named YOURDATAOBJECT in the database." error. after you've added the initial migration, run an update-database Then make a change to your model like I showed in the previous post, adding whatever new columns you might want. add-migration 'be descriptive you don't want a billion autonamed migration files seriously you will thank yourself later' and update-database and you're good to go. When using code first it's important to note that you should basically never modify the database directly and instead rely on the generated scripts to do things for you unless you want to have a bad time. Good luck!
Thank you! I'm away from desktop but will try ASAP!
I guess I wasn't entirely clear with what I was saying. Its possible to have a generic type, like a tuple or a dictionary, that has more than 1 type actually associated with it. In that case, when you call GetGenericArguments() you'll get an array of those types back in the order that they are declared, or supplied, for the type. My point was just to not expect that GetGenericArguments will return a single type, even though the majority of uses for generics are generally focused on using just one type. Hopefully that clears up what I was getting at.
I'm changing code in the model's class file. So I have a model class and I'm adding adding or removing different properties. When I add or remove things, I would get an error with the database being out of sync. After updating the database, I would then get an error because the html code for the view would have the old property variables being displayed in the for each loop and not the new ones. 
I would agree that it is partially because it's hot right now. The real answer is... because we can. Even my shitty gs2 has more than enough power to run serious JavaScript and css, those technologies are very mature now. It makes for a much better user experience and that, in my opinion, is what drives sw dev right now. Not to mention you get one codebase that will work on almost anything with a cpu. Also as kind of related side note, why do these js frameworks keep calling their view-models controllers? It's driving me nuts. A real controller shouldn't have any "logic" in it.
I was just renaming them myself, no refactoring. Hmm I'll try this. No separate DLLs. Just a new MVC 5 project in visual studio 2013! **EDIT** I was able to register and get resharper for free as a uni student so I will see how that works! :) 
Oh sorry I didn't say in my comment! I tried using visual studios refactoring and it didn't affect the views at all. I'm excited to try resharper though! I'm a lazy programmer, though I think that's one of the best kinds of programmer ;p
Interesting, could you give an example of the view code you were expecting a change for?
My beef with the article is that it has no date. 
Sure! I have a model class called Idea that holds different properties. Say I changed the string Title in public class Idea { public string Title { get; set; } } to maybe public string Name { get; set; } i would then expect the html in the view for this model to change all of the title references in &lt;dt&gt; @Html.DisplayNameFor(model =&gt; model.Title) &lt;/dt&gt; &lt;dd&gt; @Html.DisplayFor(model =&gt; model.Title) &lt;/dd&gt; to &lt;dt&gt; @Html.DisplayNameFor(model =&gt; model.Name) &lt;/dt&gt; &lt;dd&gt; @Html.DisplayFor(model =&gt; model.Name) &lt;/dd&gt; Also in adding or removing model class properties, I would like the html to either remove scaffolded code, or to add new code based on the model. Does that make sense?
Yeah dude, that seems like the same thing I did. I feel like that should work even without resharper. I'll try it again at work tomorrow and let you know if I'm just imagining things. I just remembered you can disable resharper easily, so I can test it myself. With resharper, you have the advantage that it looks for text matches and asks you if you want those to change as well. Which is good for routes, comments, tracing and even any references in jquery scripts you might have. 
Had to log in to get some actual work done, so tested it right now and yeah, resharper does change it and visual studio doesn't. That should solve your problem. :)
Oh my goodness thank you so much! I can't believe someone on the Internet went through all that trouble just so I could figure that out. I appreciate all the help you've been and I look forward to using resharper. Thanks!
You could use C# 6's `import static` to simplify that, with one static class to import and methods like `match`, `when&lt;T&gt;`, ...
Yeah, [they are considering it](https://github.com/dotnet/roslyn/issues/206).
It's useful in a few cases, e.g. with `System.Math` if you call math functions a lot.
This could be one of those useful cases, too, although it'd be nicer if we just had built-in language support for pattern matching already.
I would have called `When.Its` as `When.TypeOf` instead, and add in a `When.Where` instance method taking a predicate as well. Y'know, I might just do that during my commute this morning. EDIT: I've forked the project and have started working on my own implementation based on it, but haven't pushed anything up yet. https://github.com/coldacid/Pattern when there's code worth considering (probably tomorrow).
Here's my personal favorite way of structuring apps. http://jeffreypalermo.com/blog/the-onion-architecture-part-1/ 
Talking to the dev team of Roslyn, they would have *loved* to do that. But with the previous compiler codebase, every feature no matter how big or small was equally expensive to implement.
I don't think he's talking about refactoring, I think he's talking about addition and removal of properties on the model. Or rather I thought he was before reading the rest of the comments below. Hell, visual studio pops up options to rename references even without resharper.
I've been struggling with the same thing. Here is the approach I'm currently taking... * Project.Domain - (POCO classes for EF code first) * Project.Repository (I'm using the repository pattern to access data) - dbcontext here * Project.UnitTests * Project.WebUI - Areas - Controllers - Views - Models (put viewmodels here) The Areas folder has an Admin section with its own Models, Views, Controllers folders. 
This is exactly what we did on our project and it worked fine. Our data model is sufficiently large that we didn't create the complete model in EF - swaths of tables were only referenced by legacy data access code. As a result, we added tables to the EF code first model as needed over numerous releases. Adding existing tables to your EF model is ready, too. Just implement them as though they were new tables, and when you create a new migration, delete the contents of the Up() and Down() methods that try to create those tables.
Never heard of it. Thought that looks interesting. I'll try it out. Thanks!
More complex architecture = more complex debugging. A lot of people nowadays are advocating for so much abstraction that people get confused and think it means "I should abstract all the things, all the time", and it's just not the case. For instance, do you really need DI or IoC containers in a small app that you aren't even going to bother with unit tests for? Probably not, so why add the complexity? In a bigger app with lots of unit tests though, you probably absolutely DO want that (Unless you're lucky enough to have VS Premium or whatever gives you their mocking framework that allows for CLI level substitution so you don't need DI to do unit tests...). So the answer is: *It completely depends on the solution*. For a simple app: * Company.Solution.Web.UI - Shove everything in one solution For a slightly more complex app * Company.Solution.Web.UI - UI / API (Note how much better this gets in the vNext, right now it's kind of messy because you include WebAPI seperate) * Company.Solution.Core - Models, Services, etc. For a much more complex app: * Company.Solution.Web.UI - UI / API * Company.Solution.Infrastructure.Facebook - Abstracted 3rd party service reference * Company.Solution.Core - Globally shared extensions, etc. * Company.Solution.Domain - Models, Service classes, etc. For a highly modularized application: * Company.Solution.Web.UI - UI / API * Company.Solution.Infrastructure.Facebook - Abstracted 3rd party service reference * Company.Solution.Core - Globally shared extensions, etc. * Company.Solution.Domain - Models, Service classes, etc., that are more global in scope * Company.Solution.Modules.Promotions - Models, Service classes, etc. that are promotions related * Company.Solution.Modules.Cart- Models, Service classes, etc. that are cart related It's all kind of arbitrary really. The only TECHNICAL reason that I would create a new project is if it needs to be referenced by other projects in my solution, or if I'm abstracting a third party reference. Beyond that it's all organization. Couple of warnings: 1. Try and avoid really simple libraries (e.g. one class, etc.) unless it serves a very specific abstraction purpose (e.g. my Facebook abstraction above). 2. Don't abstract ALL third party DLLs. For some things, it just makes sense to use it directly. Logging is the best example of this as it is almost always cross cutting to your entire application. If you really worry that much about it, use Common.Logging and call it a day, but don't abstract it. The other one is people abstracting EF and other ORMs into repositories with UnitOfWork patterns. EF and NHibernate ARE generic repositories, and you abstracting them is just going to limit what parts of those libraries you can use. 3. Don't abstract just for the sake of abstraction. Unit testing is absolutely a good excuse, for instance, for DI, but DI may be an unnecessary abstraction if you aren't doing unit testing or need the loose coupling (I'm about to get yelled at by SOLID proponents, even 4-year-ago-me, but I have not found many good reasons for it outside those two cases). 4. Start simple and abstract out to libraries as you find reason to. *As you get better you'll recognize where these lines might be a good idea, but at the beginning, its good to feel the pain points so you recognize them later.* 4. There is no universal solution to architecture. Any architecture you choose today, will likely be wrong tomorrow. Don't sweat it. Requirements change, and so must our code. Fear of rearchitecting when it is called for will lock you into old decisions that are no longer valid. Don't try and look TOO far into the future. Even when you get good at this architecture stuff. A lot of people go down the road of "Well I might need this later, so I'll make it complex now to accomodate X later". You aren't going to need it (YAGNI). And when you do, it's almost always not what you were picturing three months ago. In the beginning, its REALLY EASY to fall into the architecture rabbit hole. Don't look for a panacea that solves all issues, it doesn't exist. Becoming a good programmer means knowing what options are available to you and more importantly, when to use and NOT use them.
Doesn't having everything in one project limit how you can deploy your application to the web server if you want or need to scale your API layer seperate from your UI layer?
https://github.com/VikramN/Pattern#conditional-match I've added conditional matching. Is this what you had in mind?
What do you mean by calling their view-models controllers? Most of these frameworks refer to themselves as MVVM. In the case of angular: * Model = data from the api / service * View = html * ViewModel = scope The controller only comes into play here when taking data from your service and sticking it into the view-model.
Business Perspective - absolutely not. The product is working fine, there have been no complaints. Maintenance time (I'm assuming) isn't too much over the top IT Perspective - not immediate concern but it'd be nice to modernize the application to a) keep up with the times, b) reduce technical debt (overhead caused by building on older technologies or poorly coded apps) c) ensure the technology used isn't abandoned and goes unsupported. There's a case for both but the Business will generally win out because rebuilding an application takes time and money. If net revenue generated from the rewrite isn't in the black, why do it? The longer and longer this is put off those, the more likely the business gives in. Definitely a delicate balance between the two. At my workplace, we're actually faced with the exact same dilemma; web forms app, works decent enough, but the principal developer is long gone and I'm the main person to maintain it and I have little web forms experience. To answer your question specifically, I believe that there is a risk with staying with web forms as eventually microsoft will stop supporting it. They're waiting for the older generation of MS web devs to die off/retire before doing so however. :)
I just used that idea the other day, for logging: public static T Create&lt;T&gt;(params object[] args) where T: class, new() { var tname = typeof(T).Name; if (typeof(T).GetGenericArguments().Length &gt; 0) tname = typeof(T).Name.Replace("`1", "") + "&lt;" + typeof(T).GetGenericArguments()[0].Name + "&gt;"; var argNames = string.Join(", ", args.Select(arg =&gt; arg.GetType().GetGenericArguments().Length == 0 ? arg.GetType().Name : arg.GetType().Name + "&lt;" + arg.GetType().GetGenericArguments()[0].Name + "&gt;").ToArray()); log.Debug(string.Format("Begin Create&lt;{0}&gt;({1})", tname, argNames)); ... 
Guessing it would piss off some devs who don't like the current direction of web dev. Web Forms was originally built give Windows App Devs an easier path to web development. Guessing there are aren't nearly as many developers that fall into that category any more.
If your class library at the beginning is simply Company.Solution (instead of *. Core) , it makes refactoring easy and it should also make it easier to see if/when you should split out certain namespaces into their own library. 
The extent of your abstraction really depends on the size and complexity of your application, as well as the likelihood that certain components can or will change over time. For a small and simple app, you can get away with just putting everything into your MVC project (as long as you don't mind your web API routes starting with "/api/"). But let's say you aren't 100% settled on your choice of ORM/DAL. In that case you'll want to abstract your implementation of the ORM/DAL so that you can change the implementation later on if you want without having to change all your callers as well. You can extract this principle to virtually any layer of your application. Also, you ideally want to abstract potentially different dependency implementations into interfaces that your clients can call in a consistent manner. 3rd party logins (Twitter, facebook, etc) are a good target for this treatment. Create a wrapper interface (IOauthRequest, for example) and then have concrete classes implement that interface for each service. It's extra work up-front, but makes things a lot easier in the long run. Hopefully that helps you!
Came here to post this.
2: I'm torn about Abstracting EF. On one hand, It's easy to go overboard with EF abstraction, especially because of everything can be done. On the other hand, there's a lot that EF does NOT readily do out-of-the-box, (Locking a record, properly re-attaching detached objects filled from DTOs, Undoing changes to a single entity) and a good repository/UOW layer can make a handy place to put in the pieces you decide are worth keeping around. That way if you ever have to create a new project using EF, or another ORM and you now have at least an abstraction that you can drop in easily, and adapt as required. 4: Agreed, per my experience dealing with Abstracting EF 5: Dear god, YAGNI is something I fight with at work all the damn time. 
We use a mix of web forms, mvvm web forms, a semi-Mvc style web forms and SPA. The right tool for the right job. Trying to get the team to move towards Mvvm/Mvc, straight web forms is fairly limiting from a testing perspective. My biggest complaint with straight web forms with no structure at the back (eg no Mvc or mvvm) is that dev's get lazy and start cross cutting the layers into the post back events where things should be getting handled in controllers or viewmodels. I've had juniors making straight db calls in the events FFS.
Precisely! Data stores, regardless of their underlying implementation, are all relatively the same. However, as the original author of the architecture states, this is a sledgehammer and mostly applicable to large scale enterprise applications. I don't let that stop me from using it for smaller efforts though. The author has also posted a template to github that you can use for your own purposes. I stole many aspects of this template and added a lot of features/references that are specific to my company. We use that template for any new applications we create now. It saves us a ton of time wiring up boilerplate code and arguing about where business entities, validation logic, and data access logic should live. This is the only structure I've ever seen where the placement of classes just makes sense. 
Our application is MVC ish the Css acts as both the M and the c all I need to do is define the view and tell it where to put the pieces together. 
Don't worry. Stick with it and keep asking questions. It takes a while , but once you "get" it, you'll never go back to web forms.
It's one of the things. My own work uses `Predicate&lt;T&gt;` though, and I'm still working on a couple other features such as return values (available in my repo in the develop branch right now). I'm also looking at throwing if no pattern can be found, unless a non-matching "pattern" is in the list to handle such anomalous situations. I've started a rewrite that feels (to me) more in-line with Microsoft's own style for the framework, by the way. EDIT: My rewrite is now up at https://github.com/coldacid/PatternMatching
I ran into the same problem. Having a seperate webAPI project to serve data to your mvc project just feels weird since you have to use httpclient. I feel like in this case WCF wins because you will #1) get real .net classes to use and #2) communicate over TCP instead of HTTP. Lets think about scaling now. When converting from wcf to webapi I would guess (at least from what I did ) that each service becomes one controller. Lets say you have a couple of crud controllers and a search controller. If search starts getting hammered, you cant just spool up a new search and load balance it. You would have to throw up another copy of the whole WebAPI. If you have any ideas let me know (where I work we don't use MVC we consume the webapi from the front end with jquery and use javascript templating to render our views so I don't have this problem right now).
I get it. That is kind of what I am doing now. Lots of copies of the same view with minor tweaks.
Can someone explain to me how this is different than the traditional layered tiers? It seems the core of his argument is that the database is central in the traditional layering but I don't agree. If my Business Logic layer relies on a interface of the repository pattern I am not tied to the database or WCF or any IO. I can change those whenever I want. 
Are all the views significantly different than each other?
Some are some aren't. Here are a couple of examples. 1) users from client 1 should have different links on their navbar than someone who works for our company. 2) client 2 uses different names for fields on the datagrid. they also use american date format instead of european. 3) client side validation is different when editing records for clients 1 and 2. etc. I appreciate the help by the way. Thanks
Pseudo code but here's how you do it: if(user.IsInRole("Admin")) { &lt;div class="admin-style"&gt;&lt;/div&gt; }. That div won't render in your razor view unless the user is an admin. Those are the kinds of conditions that are ok for a view. If you want to extrapolate it a little more than you could have an admin partial that only renders for that condition. In the same place as the div you'd have HTML.Partial(_AdminDiv, adminDivViewModel). You'd be passing a view model to the partial so it has the data you need and _AdminDiv would be a partial razor view with only the markup for that condition.
This is interesting. One concern I have is that these clients can not know about the other clients. Lets say I want to have different logo images on the page depending on the client. Would you have 15 different divs with 15 different if statements? Or would you use a css file and select the correct style? My problem with the latter is that a tech savy person from client one could look at the css file and see the images for the other clients. Thank you for the suggestion by the way it has given me something to think about.
Reading what you wrote shows me what I am really doing is creating multi tenancy. I will research that further. I agree with what you are saying and will have to think about how to make this an actual process that can be followed. Thanks for the help!
&gt; For instance, do you really need DI or IoC containers in a small app that you aren't even going to bother with unit tests for? Probably not, so why add the complexity? Because developers like to stroke their ego's and over engineer everything.
Hybrid is still not the way to go. There was some advances, but native can't be replaced yet, at least not for more complex applications. I'm talking more about this in my blog: http://blog.ckl.io/should-i-develop-hybrid-mobile-apps/
Did you pass 2255 through the firewall? I always forget when setting up custom ports. 
Have you made sure domain name is getting to the right IP in your environment? Have you looked at the 404 in fiddler to see if there isn't something hinkey going on on the wire. This stuff usually just works and this sort of thing is typically some sort of dns or spelling error more often than not.
yup pinging the domain name results in the same IP as the other sites set up on that box.
Did you check your iis logs to see where the traffic is being routed?
If it works correctly over localhost, its not a permissions issue or related to the general setup of the site. Have you checked dns? Are requests to that domain definitely reaching that machine? 
yes - like I said elsewhere, I added a binding to an existing working site (stopped the working site temporarily) and still got 404.
There's something else going on here that you're not telling us. Using the network tools in your browser, is it DEFINITELY domainname.com/Default.aspx (or whatever) that's generating a 404? Or is it redirecting?
We do something similar on our stuff. We schedule regular jobs to pull data in to store to a table which is then truncated on a regular basis for the new data to be stored. This abstracts the user requests from the data source. 1) I would store it in a database. If you don't need to keep it then truncate it when new data comes in. 2) We've had good luck using [Quartz.net](http://www.quartz-scheduler.net/) to schedule jobs which actually pull data in on some schedule we set. You can create a windows service using something like [TopShelf](https://topshelf.readthedocs.org/en/latest/overview/faq.html) to process the jobs.
I liked the good old days when objects were expected to maintain a reasonable internal state, e.g. person.emails was always a collection, even when it was empty.
They would piss off a lot of big corps that are littered with tons of portals and intranet sites written in web forms. Not supporting it is probably out of the question at least for now, but it does seem that they will be stopping new features for it. A lot of good posts here, web forms hate is due to its heavy abstracts of the http layer as well as trying to make the web work like fat clients do. Web forms is not inherently bad, just gets a bad wrap. It's not like working it in guarantees hell and not working it guarantees blissful development. I've seen horror on both web forms and mvc side, at the same time, I've seen wonderful developers build out great foundations in both. Learn both, form your own opinions, never immediately write off any particular technology because the internets tell you so. 
This is a fantastic idea, I'd never considered you could use the cache like that. Thanks a lot!
Cache is useful for a LOT of stuff. Especially tables that can be stuffed with fairly persistent data but require frequent lookups. I.E. If you have a lot of user permission rows because of a large/complex mess of a system, keeping the user permissions cached can help performance greatly, so long as you make sure to keep the door shut by having a flush per user method that can be called by whatever is changing permissions. Edit: Also, There's no shame in having a refresh method that is called via a console application running as a scheduled task on wherever you're deploying your server, or, preferably, wherever your separate middleware processes live. http://windows.microsoft.com/en-us/windows/schedule-task#1TC=windows-7
I really liked Adam Freeman's Pro ASP.NET MVC 5 and it's companion, Pro ASP.NET MVC 5 Platform. I think that Microsoft's Contoso University sample is also pretty solid for introducing a lot of the content of the framework. It'll come down to how you like to learn. I like to code along with a book resource, so that's typically the route I go.
I'll second the Adam Freeman books. IMO, the problem with the Microsoft tutorials is that they rely too much on templates and code generation. Basically, a bunch of stuff that you should actually learn is generated for you with no thorough explanation.
&gt; http://nerddinner.codeplex.com/ When I was learning in the beginning, I found this to be very outdated. That's just me though. 
That example was super inappropria... oh.
Hands down the best place to start IMO. Not sure if MS has always had walkthroughs and examples this thorough but I've found recently that anytime I'm trying something I haven't delved into yet I wind up on the official MS site. Had to put together a quick and dirty app as a proof of concept using azure mobile services, followed the getting started guide from MS and it was easy as hell.
I prefer System.Runtime.Caching, introduced in .NET 4.0. It works the same as WebCache, but has no dependencies on ASP.NET, so you can integrate it directly into your object libraries (very handy for N-Tier setups). Recently, I've also added a static accessor template on top of the caching, which objects can reference internally, and which preconfigure everything except for the app-specific fetching mechanism. It was a bit more work to set up but paid off quickly through portability and maintainability. That's probably not super-useful when there is a single universal way to access data, but it's still a handy tool to have in your belt.
As the others suggest, this IS the behaviour you would want. You don't want your own changes in the view to be overwritten when you change the model. If, for some reason, you are not changing ANYTHING in the view, then you could use one of 2 approaches: * delete the views and controller and scaffold them again. This is a manual action. * write a T4 template (google how the Text Template Transformation Toolkit works) that generates your desired view on build time (you can use reflection on the model class to figure out which members you need to generate view code for). That way your views are always updated to your model (and even customisable in the template) without extra effort. However, in my time as an MVC developer, I have never had the need for this, as we always had a lot of custom changes to the views. And we didn't want layout to change because of a model change. You'll probably realise this too once you get going.
Don't worry about "must" knows just build things and you will discover most of what you need. Find a hobby or an interest that you have and build a site around that. When I first started out one of the sites I made and remade several times to try different approaches was a movie review site as I love films. Pick something that interests you and build stuff around it.
I would suggest you not spend time learning asp.nets MVC. It was released too late to really gain traction. The current focus from what I can tell is WebApi with a JavaScript heavy front-end. Often some kind of JS framework, Angular etc.
Right, it was the port # I was referring to. Guess its a typo.
I meant setting its expiry but thanks for your post ;)
Bullshit. SPAs are very good for certain apps, but suck for others. They serve two very different purposes, and if you think there is ever an architecture that is universal, then you haven't been around very long, or haven't been paying attention.
This is hardly true. WebApi is good to know if you plan on expanding your site to custom ios/android apps. I, personally, would rely more on mobile friendly bootstrap themes at the beginning stages of the app. I would also argue that the most universal thing going on now is a MVC site that contains mini SPA's using Angular/whatever. An example of this would be a web app that also has a blog attached to it, which has a custom back-end that controls both the app's and blog's content.
There's a Plural Sight video by Dan Wahlin: [Building ASP.NET MVC Apps with EF Code First, HTML5, and jQuery] (http://www.pluralsight.com/courses/web-development) It's a bit older (2012), but the example app he builds uses the Google API to query stock prices, update a backend database, and make the data available to a website he crafted via MVC. You can sign up and watch it for free, you just have to cancel your membership afterwards. I'm pretty sure he built this Example as part of a MS conference, so you might be able to find the Account At A Glance MVC/EF sample somewhere and just view the code. Edit: Found a link to the app: http://dl.dropbox.com/u/6037348/AccountAtAGlance.zip Older blog on how they built it: http://weblogs.asp.net/dwahlin/building-the-account-at-a-glance-html5-jquery-application 
Thanks for this will give it a watch, already paid subscriber on pluralsight so no problem there!
Oh hello what is that hiding at the bottom of your error page? [HttpException]: Store Not Found at VirtoCommerce.Web.Client.Modules.StoreHttpModule.OnBeginRequest(HttpContext context) at System.Web.HttpApplication.SyncEventExecutionStep.System.Web.HttpApplication.IExecutionStep.Execute() at System.Web.HttpApplication.ExecuteStep(IExecutionStep step, Boolean&amp;amp; completedSynchronously) The VirtoCommerce HttpModule is breaking things for you by throwing an exception in its request initialization step. The error code 404 is not really a "not found" error - presumably IIS just does not have any better code to give due to this exception happening at an inconvenient time and defaults to this.
Gourd damnit - I scrolled through the log, apparently completely missed it. It's up. Thanks!
NCache was recently open sourced.
SPA is client/server architecture circa late 90's except that the client is a web browser. My rule of thumb is avoid SPA unless you have to. A lot of application can get away with a few rich screens + simple html forms. 
Yes. We were thinking this could potentially be an issue as well. Especially because some of our data pulls can take some time. The way we addressed this is that for every table where we perform this kind of operation we have a corresponding temp table. First operation truncates the temp table from the previous data pull and then gets the fresh data. Then once that is complete we perform the truncating/full table copy to the main table as a single operation. 
Honestly, http://www.asp.net/ is probably by far one of the best resources out there--aside from that I've done most of my training on Pluralsight (definitly worth the money if you can afford it or get your employer to pony up for it). Otherwise, this blog post has some of the best advice with books listed that I've found for learning C# (and actually helps point you down any path). It was invaluable to me until I finally forked out for Pluralsight: http://www.nicoschuele.com/posts/teach-yourself-to-code-with-c-and-net
You sound a lot like me a year or two ago. At the time Umbraco was going through some issues so I ended up rolling a custom CMS. If you really want to go that route I'd just recommend looking at other products taking what you like, making the database design and then diving into MVC. But I'll also throw a shout for Umbraco. I'm sure there are a few others, one I know but can't think of at the moment but the is a lot of benefit in not rolling your own CMS as well. For instance, I'm rethinking my while design now after finding some performance concerns.
C# in a Nutshell is an amazing book for learning how C# works in general. The first two chapters in particular are the most amazingly terse (and thus dense) overview of a technical subject I've seen, while still being readable. The caveat is that you have to be really studious to read it effectively--the book rarely addresses anything twice (except to expound upon an oversimplification), and if you don't understand what it means, you'd better be able to notice and stop and figure it out before going on, because it's going to assume later on that you got it. That said, for an experienced polyglot, I would expect most of the book to be pretty straightforward. You'd want a different book for asp.net/mvc, though.
From what I've read, they have no intention of doing this .... Desktop UI is platform specific, and MS is really focusing on Windows for desktop platform. They'd rather let third parties build the platform specific UI bits. 
And who can blame them. Writing cross-platform UI's is ridiculously hard.
Cross platform WPF replacement ? http://xamarin.com/ **EDIT** If you don`t mind the battery-drain and bloat of a game engine : http://unity3dfoundation.com/ Its a ui databinding kit for unity. Use C# and MVVM.
vs2015 even comes with a free cut down version of Xamarin. 
And how about the rest, how much is still closed sourced? &gt; They'd rather let third parties build the platform specific UI bits. This makes sense, there's already better GUI frameworks out there.
Now that I think about it, there's already third party GUI frameworks who do the job better. &gt; Why don't we just go ahead and say HTML, CSS, and Javascript are the standard for GUIs and be done with it? I think this, or similar, would be a great idea, especially for small apps, no?
Geared towards phone apps specifically there has been http://phonegap.com/ for a few years now. It works pretty well as a thin client application backed by some web api functionality. Chrome apps work very similar from a dev experience. https://developer.chrome.com/apps/about_apps I honestly doubt I will ever write a GUI application in a non-html framework ever again. Outside of HTML I have never seen a framework that is documented by a third party standards body and contains multiple implementations which are all essentially interchangeable. The only one that even comes close is XUL, but there is really only one serious implementation there and I am not aware of a standardization process (it comes close in that it is pretty good at working on multiple operating systems).
Isn't awesomium abandoned? 
Shit. Is there a tick box to not install Xamarin then? Waste of space to install it if it is still that shitty useless version of it.
Couldn't you do something like this? var zNodes = [{ "name": "@Model.NameOfNode" }] Or use Raw on the SerializedTree: var zNodes = @Html.Raw(Model.SerializedTree) 
&gt;I code many custom controls Use WPF. XAML makes this easier, like, seriously easier. &gt; •What's the recommended way? Seriously use WPF, WPF and XAML are lovely to use, and I've only recently started learning them and much much better than WinForms. Plus you can separate the UI and business logic with MVVM. WPF can host WinForms controls as well, for if you wanted to use your existing WinForms controls, although I've not used that option before.
I haven't tried the more recent CTPs of VS2015, but the one I did install didn't really install any Xamarin stuff by default, but rather there were several Xamarin application templates. When you'd start a new project with them, VS would say you need to login to your Xamarin account to open the new project. But I'd imagine it's easy enough to remove the project templates or hide them.
Was reading complaints on the support forum that the underlying engine is outdated and bugs aren't getting fixed. An "is this project dead?" question from one enterprise user from back in March is still unanswered. Big red flags for production consideration.
I use an html helper I wrote to directly serialize nodes on my model, basically exactly like this SO post: http://stackoverflow.com/a/8502797/108993 This way I can test against the strong typed model from within my unit tests and not be concerned about returning possibly too much data from a source further inside my stack. edit: depending on how tightly coupled your view is to that string, you may want to simply do something like var zNodes = [{ "name": "@Model.NameOfNode" }] For the general aspect of passing some object into the js of a page, a `@Html.Json(Model.JsContext)` or something like that works great. I prefer to avoid `@Html.Raw` wherever possible. It helps avoid the "oh shit I hope I am protected against this new XSS vector" feeling whenever the security team comes across a page in the site which appears to directly place some input from a previous page into the source on the new identified location. By using a specific method for whatever task I am doing, I can then fix those classes of vulnerabilities with a fix specific to that class of use cases.
Thanks Someone suggested using @Html.Raw which got my code to work. What are the advantages to using your wrapper compared to this approach?
&gt; * What's the best way to do that in the .NET framework. Panel, or the User Control? For custom controls take the UserControl &gt; * Will I be able to put controls over a panel, with no flicker? Double Buffer is your friend on flicker related Problems &gt; * What's the recommended way? Use WPF; WinForms is deprecated. 
heh, I noticed his comment and edited mine accordingly... `@Html.Raw` is a necessary evil as far as I am concerned. Whenever you use it you need to be making certain the contents being passed in are checked to not be introducing vulnerabilities in your site (particularly XSS ones). I prefer using a method specific to the use case where I can perform a general set of checks instead (in this case to ensure the output is always valid JSON). This doesn't get rid of potential XSS vulnerabilities but it does reduce them to the string properties on the object I am serializing and then using in js. Unfortunately it is sometimes the tool you need (I guess... I haven't needed it yet in any real code, but it is very useful for debugging). 
WinForms is not deprecated. These days it gets the same number of updates as WPF. But please do use WPF, or look at WinForms owner drawn controls and then come back to WPF :)
TL;DR
&gt; how much is still closed sourced? I believe that all of Winforms and WPF are (and probably always will be), along with a large chunk of 4.6 +. They are really focused on opening the web / .NET core / universal apps side of things, not so much on desktop. 
ASP.NET MVC matches the ViewBag property name to the select list property name. In your `@Html.DropDownList("SiteID",...` internally it looks up any IEnumerable&lt;SelectListItem&gt; set for the ViewBag SiteID property. If it finds it, it uses it. If you comment out the ViewBag.SiteID line in your controller you should see an exception about not being able to find a select list in the ViewBag. I agree this is not that clear and is somewhat confusing. My guess is Microsoft decided it would be easier than having to do something like `@Html.DropDownList("SiteID", ViewBag.SiteID as IEnumerable&lt;SelectListItem&gt;, ...` or `@Html.DropDownList("SiteID", (IEnumerable&lt;SelectListItem&gt;)ViewBag.SiteID, ...`
Are you sure about that? According to the page you linked to, only p/invoked libraries are disallowed.
thanks for the info. Hard to find facts like this on the internet.
I'm interested in seeing what others do as well, especially when EF code first databases are involved.
Thanks for this - is that kind of behaviour documented anywhere? Do you know if it applies to any of the other HTML Razor helpers?
Also, referring to my other post here, it's probably too late for them to work on it now with WinForms perhaps not getting "officially" obsoleted by Microsoft, but at least ideologically. WPF and Modern UI / WinRT is where Microsoft want you to be today if you aren't supporting legacy apps. Seems crazy to move to a third party WinForms implementation in 2015. I wish they'd just deprecate it. They're just misleading devs with that implementation today.
Well, it depends on a lot of things. Usually when I'm working for clients, Publish to file system, manual SQL migration (if needed), upload the files to their FTP with instructions and SQL scripts joined to the mail. When I'm on my own server, webdeploy for the files, database migration from dev to production with either SQL scripts (made by hand) or migration with tools like the SQL toolbelt from redgate https://www.red-gate.com/products/sql-development/sql-toolbelt/ I have unfounded trust issues with EF migration. I still plan to try them at some point. How often is usually once a feature (or feature set) is finished.
I use teamcity and webdeploy to automate deployments
All sites I'm currently working on are on Azure Websites (now Azure Web Apps). Deployment is done using the included Azure-hosted Git (projectkudu). Using Jenkins we compile the code using "msbuild /p:DeployOnBuild=true", pull the Azure-hosted Git repo to temp, delete all files in there, copy the deploy-compiled output over (we copy it directly from obj../..PackageTmp ;) ), then "git add -A", "git commit", dump all changes to Jenkins' output and stop and this point. Then we use second script to "git push" the repo to Azure, either automatically for staging deployments or using a manual step using a button in Jenkins. Works like a charm since the launch of Azure Websites! Deployment is actually fun, instantaneous and safe if you throw in the manual step that forces you to check the output of "git add/commit". For one customer we set up a version of projectkudu on-premises and do the same deployment there.
The last .NET shop I worked in used TFS for builds/CI. Deploying the code portion of a build was done via a home-built system that used MSDeploy to update the target server. For database changes, we'd generate a change script (either using a Database Project or EF Migrations). If the change script was "valid" (according to what our DBAs said we were allowed to do), then it'd run as part of the process, otherwise we'd have to go to the DBAs and have them approve it.
We use Jenkins CI to build, package and test a new release every time someone pushes to our git master branch. So that's usually a few times a day. When tests pass our development/staging environment is upgraded using the built package, again by Jenkkns. We can then manually promote a package to be deployed to production.
Thank you for the input, I'll give it a try
We are using webdeploy and 10$ version of Bamboo, it is agent-less, so we can deploy as many instances as needed from one bamboo. We put all the configuration that changes client to client into parameters.xml file, and each client has it's own *.setparameters.xml file with actual configuration. Those are also versioned. i.e. one repo for project and either separate repo or the same repo for those xml files with parameters. and simple 2 step build and 2 step deploy in bamboo - get package + client setparameters.xml file and run package /Y 
What about database changes?
So where did he mess up? Surely the issue isn't with making a cloud environment but rather his implementation. How should the web api be implemented?
You responded to the wrong person. 
Up vote on this one. I LOVE Octopus Deploy. We also create migration projects that are run at deployment for data-migrations and it works elegantly. 
We use TFS to compile and web deploy to deploy.
Octopus is so amazing. The other thing we've thrown into the mix is http://dbup.github.io/ which allows us to package our sql scripts with our builds. 
Quick question for anyone with this setup: Ever find a way around the two build configuration problem? I.e., when using Octopack, the package isn't added to the artifacts (and the TeamCity internal NuGet server) until after the build FINISHES so you have to trigger the Octopus deployment in a dependent build configuration instead of being able to do it all in one build configuration? Only way I could come up with was doing a manual pack and pushing to the Octopus (or other NuGet server) manually instead, but obviously that's not ideal.
Teamcity to run msbuild with a package parameter, which gives me a zip for every web project. I then use MS Web Deploy to push that to IIS. Then this is layered into several build dependencies for different things/schedules.
Thanks for the advice. I will definitely check out Xamarin.
If you require different build configurations solely for the purpose of having different app/web config transforms then I'd recommend flattening these down to one realese.config transform that paremeterises your config file such that you can use Octopus to provide the values: http://octopusdeploy.com/blog/variable-substition-in-files
That looks like a sane SQL deployment tool. We have just been bundling DB diff scripts with our deployments. 
I come from a C++/SQL background into the web world and I'm looking about building a responsive dashboard site. Two quick questions - just poking your expertise for the best places to learn what I need to learn. On a very basic level I'm looking to do something like http://stephenwalther.com/archive/2015/01/29/asp-net-5-and-angularjs-part-6-security but with a pre established database and the angular bits of http://themeforest.net/item/metronic-responsive-admin-dashboard-template/4021469 to build a website. 1) On a high level is it even possible to avoid the Razor completely and use SQL/EF to populate the data/handle authentication and AngularJS to render the front side? 2) If so, should I be using the MVC 6/ASP.NET 5/Angular route like the first tutorial links?
Nope, has nothing to do with web.config transforms. Octopus handles all that just fine. This is an artifact of using TeamCity's internal NuGet server, and having Octopus PULL from this feed. TeamCity publishes the packaged NuGet package that Octopus uses at the same time that it publishes the build artifacts: At the end of the build configuration, NOT at the end of the build step. So if I have a build configuration that I want to build a site, publish the package, and then in step 2 call "Octopus Create Release" and create and deploy an Octopus release for that build, I can't do that all in one build configuration because at the time that Step 2 runs, the Nuget package built in Step 1 hasn't been published to the feed yet. Instead, I have to have a dependent build configuration that runs AFTER the completion of the other build configuration, when the package has already been published, that calls that "Step 2". This, of course, means that I must have two build configurations instead of one for every project, which of course uses up the "20 free build configurations" in 10 projects instead of 20 like it should. We have a paid version, so that's not an issue, it's just messy and ugly, but apparently necessary. The only alternative being what I outlined above: Don't use the TeamCity NuGet server, and instead publish either to Octopus's built in NuGet server, or some other internal NuGet feed. I was just wondering if anyone is DOING that (we're not), and how it's working out for them as an alternative.
I don't understand the issue. Octopus deployment should always occur after the build finishes. Why would you need to use a separate TC build configuration to trigger the deployment? Maybe I don't understand since we do this the opposite way. We run octopack during the TC build and use the TC NuGet server. Difference is that we create the QA/PROD releases from the Octopus UI instead of from TC.
[Start here for Web API](http://www.asp.net/web-api).
Have you tried SQL Server Data Tools? We version database objects as part of a Database Project and deploy with SSDT Publish. It takes some getting used to, but once you get over the trust issues, deploying is just a right-click away. (Assuming you are using SQL Server because Red Gate.)
There's also FluentMigrator if you prefer a c# flavor. It's been a solved problem for more than 10 years yet people still insist and more complicated solutions. 
There are some pretty significant changes in 2015 in terms of projects, MVC, and Web API. They ripped out the guts of ASP.NET and replaced it. It's very similar, but different enough that my advice would be to work through those Web API 2 tutorials first (say, using the free [VS2013 Community Edition](https://www.visualstudio.com/en-us/news/vs2013-community-vs.aspx)) and then work through [this tutorial](http://www.asp.net/vnext/overview/aspnet-vnext/create-a-web-api-with-mvc-6) to get a feel for what has changed.
Straight from programming numbers that every programmer should know. I've seen versions of this that use a custom "ORM" that resulted in lazily loading (n+1) queries over multiple network hops. A simple page could cross network boundaries thousands of times and take 30 seconds to load.
Thanks u/flukus but I'm stuck with the DB design for now. As it stands, each survey is made up of one to many sections. Each section is made up of one to many questions. Questions and sections can be reused. That means a question can be in more than one section and a section can be in more than one survey. (I am personally against allowing questions to be reused as they can quickly lose their context)
Big freaking whoop. Still no VS for indie, still not using it. It kind of annoys me, because it seems like such an idiotic move, and because I *want* to use it. I just don't particularly feel like spending a thousand bucks not being held hostage to their crappy IDE.
Not trying to piss on anyone's bonfire, but what is this and what could you use it for?
May be the following articles using C# might help? * [Instrumenting Direct3D Applications to Capture Video and Calculate FPS](http://blog.nektra.com/main/2013/07/23/instrumenting-direct3d-applications-to-capture-video-and-calculate-frames-per-second/) * [SQL Server Interception and SQL Injection Attack Prevention](http://blog.nektra.com/main/2013/06/26/sql-server-interception-and-sql-injection-attacks-prevention/) * [Capturing Unencrypted HTTPS Requests and Responses (As Seen at BlackHat Arsenal)](http://blog.nektra.com/main/2013/08/01/capturing-unencrypted-https-requests-and-responses-as-seen-on-blackhat-usa-arsenal-2013/) 
The only one that surprised me was the interface default value. But I don't agree that it is evil. Not only is the type evaluated correctly, but I can't imagine it would be a good idea to think that you should (or could) override or change the contract of an interface. 
Default parameter values is a compiler feature, not a CLR feature, which is why it behaves like that.
I really could have used this a few weeks ago, bookmarked. All the MS "tutorials" just say "start a new vs project with these options ticked". They explain absolutely nothing. 
My apologies firstly, I'm not the MVC/Entity Framework Champion you likely want or need - I'm my very own ASP.NET Nublet. That said: Assuming you have a Users entity, and that Users entity can have multiple agreements, but an agreement can only ever be associated with one user you would represent that like so: public class Users { public int ID { get; set; } public string User_Name { get; set; } public virtual ICollection&lt;Agreements&gt; Agreements { get; set; } } public class Agreements { public int ID { get; set; } public int UsersID { get; set; } public string Agreement_Name { get; set; } public virtual Users Users { get; set; } } What it took me ages to get my head around was how that code knew to map the Foreign Key - if you name a property ClassnameID, entity framework will pick up on this and generate the relationship between the two tables. Things I think I know about ASP.NET Identity: 1) It will work both in its own context and with your model in the ApplicationDBContext but I expect you are going to have problems if you are trying to use pieces from both contexts in one set of queries, but I could be talking out my ass. In response to your question, I've never had a problem when I start scrapping things from my model. In the Package Manager Console: 1) Enable-Migrations 1a) If you have two contexts you have to specify the FQN of the context, IE - Enable-Migrations -ContextTypeName MySolution.DAL.JobContext 2) Add-Migration descriptionhere 3) Update-Database I've never had a problem working like this. If the database is being stubborn I will add a -force to the add-migration parameter and that seems to push through model changes. It's difficult to say without seeing what error you have. The appropriate code to seed and drop the database, I have this in an Initialiser class: Here is an example of one I've pulled from a working application using SimplePSA.Models; using System; using System.Collections.Generic; using System.Linq; using System.Web; namespace SimplePSA.DAL { public class PSAInitialiser : System.Data.Entity.DropCreateDatabaseAlways&lt;PSAContext&gt; { protected override void Seed(PSAContext context) { var contractTypes = new List&lt;ContractType&gt; { new ContractType{Contract_Type_Name = "Support"} }; contractTypes.ForEach(c =&gt; context.ContractTypes.Add(c)); context.SaveChanges(); var ContractInvoicePeriods = new List&lt;ContractInvoicePeriod&gt; { new ContractInvoicePeriod{Contract_Invoice_Period = "Monthly"} }; ContractInvoicePeriods.ForEach(r =&gt; context.ContractInvoicePeriods.Add(r)); context.SaveChanges(); var company = new List&lt;Account&gt; { new Account{Account_Name = "REDACTED", Account_Prefix = "ROG"} }; company.ForEach(c =&gt; context.Accounts.Add(c)); context.SaveChanges(); var site = new List&lt;Site&gt; { new Site{Site_Name = "REDACTED", AccountID=1, Site_City="NOPE", Site_TelephoneNumber = "DEFINITELY NOPE"} }; site.ForEach(s =&gt; context.Sites.Add(s)); context.SaveChanges(); } } } Note the dropcreatedatabasealways - the only time I have ever had problems with this is when I have views open with table data in VS2013 to show rows etc, this locks the database in certain cases and prevents it from dropping when you launch the application. My web.config looks like this: &lt;entityFramework&gt; &lt;contexts&gt; &lt;context type="SimplePSA.DAL.PSAContext, SimplePSA"&gt; &lt;databaseInitializer type="SimplePSA.DAL.PSAInitialiser, SimplePSA" /&gt; &lt;/context&gt; &lt;/contexts&gt; Which tells it about the initialiser. Assuming you are using the localDB instance, If you're in shit creek with migrations, just delete the Migrations folder out of visual studio, show all files in your solution explorer (it's a button), expand App_data, delete the MDF file - in SQL server object explorer, drill down to your database - right click, delete. Tick both boxes - all gone. Re-enable migrations, add a migration and continue. I've been dealing with this kind of thing myself over the last two weeks and this is what has helped me. 1) Use version control and commit often with DECENT notes on each commit 2) Instead of reverting when you see a problem, figure out exactly the reason you are getting that problem first and understand the reasoning for the code not working - this will give you the skills to not make as many mistakes 3) Don't rely on the scaffolding in VS, it's not very good for anything but basic use. It doesn't deal well with abstract models, I found this out the hard way. 4) Sort your identity out before you start your application. In your position I would just start completely from scratch with a default ASP.NET with individual accounts and then I would utilise the ApplicationDBContext and let your tables co-exist with the identity stuff. This seems in my mind the simplest solution. Disclaimer - I genuinely am an ASP.Net newbie so some, all, most of the above may not follow best practice but it is what has worked for me. 
They went super happy with convention, lots of magic happens.
Hmm... If you only small website, I believe that Azure is affordable one. Formerly, I used Azure to host my asp.net site. Since I require high resource in database, the bill is very expensive. You should check their calculator pricing first at http://azure.microsoft.com/en-us/pricing/calculator/. I then switch to rent shared hosting again from asphostportal.com. Save a lot and it's quite reliable.
Why do software engineers (who make money selling the software they create) have such problems buying software! I bought a business license for iOS, it's really not that expensive 
Have you tried using Glimpse? It's really good at showing what is going on in MVC. There's even an EF plug in. 
Thank you for the amazing response. I am going through all of this and the others, and working on this. 
1: Yes, your MyReport model should contain the property and validation. I can understand not including the validation, but where else would you even put the property? :P 2: This comes down to a stylistic choice I guess, both are valid solutions. I feel like using validation attributes and a model here (for just two fields) is a bit overkill though. Would you just send the model state errors back via json if it is not valid? 
http://i.imgur.com/BkeC6y9.png
This is probably one of those things where just because you can doesn't mean that you should. 
Yes.
Ok, I was hoping to figure this out without having to do this, but I'm still stuck. Starting from where it last worked (all of the default create/edit/index work for the models, the registration works, just separate from my user class) I add UserID and virtual User to my Identity class, and Virtual ApplicationUser to my User class. I move the dbcode from the Identity model into my other context, and modify the construction of it to match. I end up with Bloodhound.DAL.IdentityUserLogin: : EntityType 'IdentityUserLogin' has no key defined. Define the key for this EntityType. Bloodhound.DAL.IdentityUserRole: : EntityType 'IdentityUserRole' has no key defined. Define the key for this EntityType. IdentityUserLogins: EntityType: EntitySet 'IdentityUserLogins' is based on type 'IdentityUserLogin' that has no keys defined. IdentityUserRoles: EntityType: EntitySet 'IdentityUserRoles' is based on type 'IdentityUserRole' that has no keys defined. I have run into this error no matter which way I try it. Here's my relevant code- BloodhoundContext.cs using System; using System.Collections.Generic; using System.Data.Entity; using System.Linq; using System.Web; using Bloodhound.Models; using System.Data.Entity.ModelConfiguration.Conventions; using Microsoft.AspNet.Identity.EntityFramework; namespace Bloodhound.DAL { public class BloodhoundContext : IdentityDbContext&lt;ApplicationUser&gt; { public BloodhoundContext() : base("BloodhoundContext", throwIfV1Schema: false) { } public DbSet&lt;Agreement&gt; Agreements {get;set;} public DbSet&lt;Contact&gt; Contacts {get;set;} public DbSet&lt;Item&gt; Items {get;set;} public DbSet&lt;ItemFile&gt; ItemFiles {get;set;} public DbSet&lt;Message&gt; Messages{get;set;} public DbSet&lt;MessageUser&gt; MessageUsers {get;set;} public DbSet&lt;Preference&gt; Preferences{get;set;} public DbSet&lt;Rating&gt; Ratings {get;set;} public DbSet&lt;Request&gt; Requests {get;set;} public DbSet&lt;RequestComment&gt; RequestComments {get;set;} public DbSet&lt;User&gt; Users{get;set;} public DbSet&lt;UserPreference&gt; UserPreferences {get;set;} protected override void OnModelCreating(DbModelBuilder modelBuilder) { modelBuilder.Conventions.Remove&lt;PluralizingTableNameConvention&gt;(); modelBuilder.Conventions.Remove&lt;OneToManyCascadeDeleteConvention&gt;(); } public static BloodhoundContext Create() { return new BloodhoundContext(); } } } User.cs using Microsoft.AspNet.Identity.EntityFramework; using System; using System.Collections.Generic; using System.ComponentModel.DataAnnotations.Schema; using System.Linq; using System.Web; namespace Bloodhound.Models { public class User //: IdentityUser { public int UserID { get; set; } public String Username { get; set; } public double Rating { get; set; } public DateTime AccountCreated { get; set; } public virtual ApplicationUser ApplicationUser { get; set; } public virtual ICollection&lt;Message&gt; Messages { get; set; } public virtual ICollection&lt;MessageUser&gt; MessageUsers { get; set; } public virtual ICollection&lt;Contact&gt; Contacts { get; set; } public virtual ICollection&lt;Agreement&gt; Agreements { get; set; } public virtual ICollection&lt;Item&gt; Items { get; set; } public virtual ICollection&lt;UserPreference&gt; UserPreferences { get; set; } public virtual ICollection&lt;Rating&gt; Ratings { get; set; } public virtual ICollection&lt;Request&gt; Requests { get; set; } } } IdentityModels.cs using System.Data.Entity; using System.Security.Claims; using System.Threading.Tasks; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Bloodhound.Models; using System; using System.Collections.Generic; namespace Bloodhound.Models { // You can add profile data for the user by adding more properties to your ApplicationUser class, please visit http://go.microsoft.com/fwlink/?LinkID=317594 to learn more. public class ApplicationUser : IdentityUser { public int userID { get; set; } public virtual User User { get; set; } public async Task&lt;ClaimsIdentity&gt; GenerateUserIdentityAsync(UserManager&lt;ApplicationUser&gt; manager) { // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie); // Add custom user claims here return userIdentity; } } /* public class ApplicationDbContext : IdentityDbContext&lt;ApplicationUser&gt; { public ApplicationDbContext() : base("DefaultConnection", throwIfV1Schema: false) { } public static ApplicationDbContext Create() { return new ApplicationDbContext(); } } * */ } 
He's talking about building the [Abstract Syntax Tree (AST)](http://en.wikipedia.org/wiki/Abstract_syntax_tree) for a program. Consider the calculator program `A * (B - C) + D`. The AST graph that that turns into would be: `Add( D, Multiply( A, Subtract( B, C ) )` Which represented as a graph would be: + / \ D * / \ A - / \ B C
Usually. I don't know if it still works this way, but originally the .NET Micro framework interpreted IL code IL (a.k.a. MSIL, CIL) so they didn't have to allocate memory for a JIT compiler.
I'm reading definition 2 as two separate definitions, depending on which part of the "or" OP would like to use: &gt; convert (a program) into a lower-level form C# -&gt; AST -&gt; CIL -&gt; binary 1st part of my answer &gt; convert a program into a machine-code C# -&gt; binary 2nd part of my answer Is this incorrect?
&gt; because the JIT is taking time and because the code is lower quality, total CPU usage is higher and more power (battery on a mobile device) is consumed. It gets more interesting when it comes to mobile devices and .NET. Microsoft obviously supports Windows Phone and Xamarin has been supporting Android and iOS for some time now. Apple forbids using JIT engines on iOS devices so the CIL is compiled to the ARM machine code by the Ahead of Time (AOT) compiler. This happens before deployment, usually on the developer's machine. Android doesn't have such restriction and the JIT compiler is distributed with the application (with runtime working alongside Dalvik, which is a runtime and JIT for Java apps). When deploying for Windows Phone, developers compile their apps to the CIL and send that to the store. There (in the Microsoft's service behind the store) they are compiled to the so called "Machine Dependent Intermediate Language" (MDIL) which is a mix of machine code and pseudo-instructions that can be easily and quickly assembled on the users' devices into executables on install. And then there's Unity with its newest IL2CPP with the lovely transformation of C# into CIL into C++ &lt;possibly into LLVM IR&gt; into machine code) and Microsoft's .NET Native of course.
Trying that now, back to the same error. I even changed User to BHUser as I started to wonder if there was just too many built in references named user. Changed all ApplicationUser references to BHUser, all ApplicationDBContext references to BloodhoundContext. Bloodhound.DAL.IdentityUserLogin: : EntityType 'IdentityUserLogin' has no key defined. Define the key for this EntityType. Bloodhound.DAL.IdentityUserRole: : EntityType 'IdentityUserRole' has no key defined. Define the key for this EntityType. IdentityUserLogins: EntityType: EntitySet 'IdentityUserLogins' is based on type 'IdentityUserLogin' that has no keys defined. IdentityUserRoles: EntityType: EntitySet 'IdentityUserRoles' is based on type 'IdentityUserRole' that has no keys defined.
Going to copy my response to another user back to you, because your post was fairly instrumental in my sanity today. I'm finally close. It's frustrating, because I've been at 'this' position before.... but after all the responses and tests I've managed today, I'm more positive that it *should* be working. Hopefully what is my *last* error for this (knock on wood) is this Multiple object sets per type are not supported. The object sets 'ApplicationUsers' and 'Users' can both contain instances of type 'Bloodhound.Models.ApplicationUser'. Now, I have completely removed the user class. I've removed all migrations, and even completely deleted the migrations folder and re-enabled migrations. I changed from using the DB on my webserver to a local db again, after clearing out the database by hand didn't fix it. Don't suppose you've run into that? (hopeful) Thanks again.
That's actually exactly what I've done. Users is completely gone, but it refuses to migrate, even if I delete the migration folder entirely. 
&gt; public DbSet&lt;User&gt; Users{get;set;} &gt; public DbSet&lt;UserPreference&gt; UserPreferences {get;set;} Is that code still in your application?
^ this....also does the user class still have a virtual property of it's own type?
I replied in the other part of the thread :)
ASP.NET Web apps are not like collections of PHP scripts, where there is usually a direct correlation between the path and a file on disk. It might be better to think of an ASP.NET app as a long-running process, being passed requests from the web server and then handling them appropriately. A typical web app will have files similar to your outputted folder, which IIS (web server) knows how to fire up and run. 
You got that out of the BloodhoundContext, correct? If so, it's completely commented out. 
Just double checked, and it's deleted from the commented out portion even. lol.
Post up your new code again sir :)
Maybe try using the -force flag after update-database in the package manager console. If that combined with deleting your database (maybe clean and build the project for the heck of it) doesn't work, there has to be a User class somewhere still, I think. Might even break the user and dbcontext classes into their own appropriately named files and delete IdentityModels and see if something got missed somewhere. Agreed it'd help to see the current user context code since it sounds like it's changed a lot.
School computer not letting me get the full reply formatter, so apologies for not code-formatting this. I just deleted the DAL folder entirely where users was mentioned. Same thing. Easier to post code now as nearly all relevant code is in the one file using System.Data.Entity; using System.Security.Claims; using System.Threading.Tasks; using Microsoft.AspNet.Identity; using Microsoft.AspNet.Identity.EntityFramework; using Bloodhound.Models; using System; using System.Collections.Generic; namespace Bloodhound.Models { // You can add profile data for the user by adding more properties to your ApplicationUser class, please visit http://go.microsoft.com/fwlink/?LinkID=317594 to learn more. public class ApplicationUser : IdentityUser { public String FirstName { get; set; } public String LastName { get; set; } public double Rating { get; set; } public DateTime AccountCreated { get; set; } public virtual ICollection&lt;Message&gt; Messages { get; set; } public virtual ICollection&lt;MessageUser&gt; MessageUsers { get; set; } public virtual ICollection&lt;Contact&gt; Contacts { get; set; } public virtual ICollection&lt;Agreement&gt; Agreements { get; set; } public virtual ICollection&lt;Item&gt; Items { get; set; } public virtual ICollection&lt;UserPreference&gt; UserPreferences { get; set; } public virtual ICollection&lt;Rating&gt; Ratings { get; set; } public virtual ICollection&lt;Request&gt; Requests { get; set; } public async Task&lt;ClaimsIdentity&gt; GenerateUserIdentityAsync(UserManager&lt;ApplicationUser&gt; manager) { // Note the authenticationType must match the one defined in CookieAuthenticationOptions.AuthenticationType var userIdentity = await manager.CreateIdentityAsync(this, DefaultAuthenticationTypes.ApplicationCookie); // Add custom user claims here return userIdentity; } } public class ApplicationDbContext : IdentityDbContext&lt;ApplicationUser&gt; { public ApplicationDbContext() : base("DefaultConnection", throwIfV1Schema: false) { } public static ApplicationDbContext Create() { return new ApplicationDbContext(); } public DbSet&lt;ApplicationUser&gt; ApplicationUsers { get; set; } public DbSet&lt;Agreement&gt; Agreements { get; set; } public DbSet&lt;Contact&gt; Contacts { get; set; } public DbSet&lt;Item&gt; Items { get; set; } public DbSet&lt;ItemFile&gt; ItemFiles { get; set; } public DbSet&lt;Message&gt; Messages { get; set; } public DbSet&lt;MessageUser&gt; MessageUsers { get; set; } public DbSet&lt;Preference&gt; Preferences { get; set; } public DbSet&lt;Rating&gt; Ratings { get; set; } public DbSet&lt;Request&gt; Requests { get; set; } public DbSet&lt;RequestComment&gt; RequestComments { get; set; } public DbSet&lt;UserPreference&gt; UserPreferences { get; set; } } public class BloodhoundInitializer : System.Data.Entity.DropCreateDatabaseIfModelChanges&lt;ApplicationDbContext&gt; { protected override void Seed(ApplicationDbContext context) { base.Seed(context); } } }
Teammate helped me figure it out.... was able to build on his version. Gotta get home and build... Something stupid. Had to change the DBset&lt;&gt; to override IDBset, or something like that... Will let you know if it doesn't work.
Very cool, thanks for sharing!
Dude... Nice.
Good stuff, thank you :-)
Great! I need to implement OAuth to my site soon.
Xamarin has just enabled the AOT compiler for Android too, but it's optional and doesn't support debugging, for a release build though it's a good idea.
how old are you talking about? webforms or [still mvc](http://www.asp.net/mvc/overview/older-versions/using-oauth-providers-with-mvc)? Just use a google search with date range of the period of your code. 
I'm interested in at least two of them, thanks!
Here was the final version of the portion that needed fixing public class ApplicationDbContext : IdentityDbContext&lt;User&gt; { public ApplicationDbContext() : base("DefaultConnection", throwIfV1Schema: false) { } public static ApplicationDbContext Create() { return new ApplicationDbContext(); } public override IDbSet&lt;User&gt; Users { get; set; }
Hangfire is awesome. Having both a nice API to schedule tasks and a great built-in UI to keep an eye on them. Fantastic. I haven't tried Topshelf but it sounds exactly like something I've had wished to have in the past.
We work with a big legacy (vb6, .net, win forms, distributed). We use TFS builds To produce a set of installshield packages, msi, web deploy, etc. this deliverables are then installed in the same way in all the environments (UT, St, releaSe test, etc) using Microsoft Release Management, using powershell dsc. Dsc has problems on its own as it is declarative while most of the time you want to do things regardless and not based on the state of the machine, but it looks like the way to go rather than agents. For database changes we have an in house solution where all the database is in Tfs scripted in rerunnable scripts, data changes are also scripted way, everything is idempotent. The TFS builds generate a database package with just the scripts we have changed as part of the release and with the right configuration (a release can create 5 or 6 db packages as the data scripts are different for each client). A brief description can be found here http://geekswithblogs.net/ndsrf/archive/2014/04/07/application-maintenance-traceability-of-sql-scripts.aspx To be honest if I started with a fresh application now I would use other methods for the database but... Merging release branches into main for example is not that complicated with this method.
There is Battle.net support in the Nuget package https://www.nuget.org/packages/owin.security.providers I just haven't gotten around to adding the documentation on the website yet ;)
A couple of additional libs: - BCrypt.Net - .Net port of jBCrypt http://bcrypt.codeplex.com/ - Stripe.net - https://github.com/jaymedavis/stripe.net - ServiceStack - full-featured Services Framework based on ASp.NET https://github.com/ServiceStack/ServiceStack - ServiceStack.OrmLite - Typed ORM for .NET https://github.com/ServiceStack/ServiceStack.OrmLit
Congrats to the Akka.net team. I owe you guys a beer. Akka has been a huge boost to our teams productivity.
I know there is! My comment was about the possibility to use it :P
You can find a lot of that information here http://www.asp.net/vnext/overview/aspnet-vnext/aspnet-5-overview
Nothing on Linux hosting.
Its exactly the same basically. You do k run. Then you just use nginx proxy pass to pass it through at the moment. Or another way to pass it though (or expose it directly). K run starts off kestrel which is a web server. Its the same as how you effectively do it with mono and asp.net 4. Start a hosting process, proxy it through to the main web server. (as described here, should give you some tips on how to accomplish the same with nginx and k run EDIT http://www.mono-project.com/docs/web/fastcgi/nginx/ missing url 
Microsoft have said that Kestrel will be used for production hosting on Linux (along with a 'real' web server like Nginx or Apache in front of it). However, at the moment it's still very much experimental, hasn't been tuned for production scenarios, and can lock up under heavy load. I believe it'll be tuned and optimised before the final release. 
I'd recommend at least 1 GB of RAM, 512 MB isn't enough for a few .NET apps and a database server. Also currently ASP.NET 4.5 and MVC 4 or 5 are more stable than the beta of ASP.NET 5. Both run on Linux via Mono. I'd suggest using ASP.NET MVC 5 until MVC 6 is more stable. 
Yeah I got it running on my Macbook ages ago but was waiting to see anything for integrating with nginx or Apache but I haven't seen anything at all. Thanks anyway :-)
If it's out of beta then it should be stable. Unless you're doing a corporate installation you shouldn't need to use an LTS release.
The matching Hacker News post has a lot more: https://news.ycombinator.com/item?id=9353668 I'll throw in (might be crossover with HNews post, they recommended a ton): - NPoco (https://github.com/schotime/NPoco), a mini ORM based on PetaPoco with a few more bells and whistles - Glimpse (http://getglimpse.com/), a ASP.NET plugin that provides a bunch of diagnostics (and has a number of plugins of its own) - We have a gazillion DI frameworks for .NET, and a lot of them are awesome, so here's a URL that lists quite a few: http://singhtechies.com/ioc-container-benchmark-performance-comparison/ I love Autofac and SimpleInjector; a lot of folks love StructureMap and TinyIOC. So many great choices, find the one that makes you happy. - FluentSecurity (http://www.fluentsecurity.net/), ASP.NET MVC security library (works with MVC 5, though their site doesn't mention it)
Akka vs MassTransit? Im reading a lot about these microservices, and until today I was planing in using MT... Why should i pick the once instead of the other?
It's another model to architect applications in. If the application you are going to build needs to be massive this would allow you to break it down in a whole bunch of distributed and resilient services.
I didn't put a lot of effort into it, but I skimmed it for a couple seconds and noticed your threading is way messed up. You are creating a Task within a BackgroundWorker and immediately waiting on the result. This doesn't gain you anything because the minute you ".Result" you block. I would stick with straight async/await with Tasks and ditch the BW worker. Also, cancelling in a BackgroundWorker doesn't just stop the thread. All it does it set a flag so within your DoWork you can periodically check if the cancel flag has been set and exit from there.
Were you able to advance on your project?
Do you have virtual properties? That could make find the record very easy, just query the db for your Question object Question data = db.Questions.Find(questionid); and go backwards like this: Survey survey = data.SectionQuestions.Section.SurveySections.Survey; or for the id only int surveryid = data.SectionQuestions.Section.SurveySections.Survey.SurveyId; 
Yeah but I'm thinking about the case where using ASP.NET MVC is not an option.
You certainly can, but it will sort of fight you on your way.
Single-page apps? Asynchronous loads? The idea that client-side binding is "insecure" seems kind of bogus to me.
The MVC pattern predates C# and .NET. Heck, it predates C++. See [Smalltalk](http://en.wikipedia.org/wiki/Smalltalk).
#####&amp;#009; ######&amp;#009; ####&amp;#009; [**Smalltalk**](https://en.wikipedia.org/wiki/Smalltalk): [](#sfw) --- &gt; &gt;__Smalltalk__ is an [object-oriented](https://en.wikipedia.org/wiki/Object-oriented_programming), [dynamically typed](https://en.wikipedia.org/wiki/Dynamically_typed), [reflective](https://en.wikipedia.org/wiki/Reflection_(computer_science\)) [programming language](https://en.wikipedia.org/wiki/Programming_language). Smalltalk was created as the language to underpin the "new world" of computing exemplified by "human–computer symbiosis." It was designed and created in part for [educational](https://en.wikipedia.org/wiki/Education) use, more so for [constructionist learning](https://en.wikipedia.org/wiki/Constructionist_learning), at the Learning Research Group (LRG) of [Xerox PARC](https://en.wikipedia.org/wiki/PARC_(company\)) by [Alan Kay](https://en.wikipedia.org/wiki/Alan_Kay), [Dan Ingalls](https://en.wikipedia.org/wiki/Dan_Ingalls), [Adele Goldberg](https://en.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist\)), Ted Kaehler, Scott Wallace, and others during the 1970s. &gt;The language was first generally released as Smalltalk-80. Smalltalk-like languages are in continuing active development, and have gathered loyal communities of users around them. ANSI Smalltalk was ratified in 1998 and represents the standard version of Smalltalk. &gt;==== &gt;[**Image**](https://i.imgur.com/S9ZBecr.jpg) [^(i)](https://en.wikipedia.org/wiki/File:Smalltalk80book.jpg) --- ^Interesting: [^Dolphin ^Smalltalk](https://en.wikipedia.org/wiki/Dolphin_Smalltalk) ^| [^Seaside ^\(software)](https://en.wikipedia.org/wiki/Seaside_\(software\)) ^| [^AIDA/Web](https://en.wikipedia.org/wiki/AIDA/Web) ^| [^Amber ^Smalltalk](https://en.wikipedia.org/wiki/Amber_Smalltalk) ^Parent ^commenter ^can [^toggle ^NSFW](/message/compose?to=autowikibot&amp;subject=AutoWikibot NSFW toggle&amp;message=%2Btoggle-nsfw+cqbnrnz) ^or[](#or) [^delete](/message/compose?to=autowikibot&amp;subject=AutoWikibot Deletion&amp;message=%2Bdelete+cqbnrnz)^. ^Will ^also ^delete ^on ^comment ^score ^of ^-1 ^or ^less. ^| [^(FAQs)](http://www.np.reddit.com/r/autowikibot/wiki/index) ^| [^Mods](http://www.np.reddit.com/r/autowikibot/comments/1x013o/for_moderators_switches_commands_and_css/) ^| [^Magic ^Words](http://www.np.reddit.com/r/autowikibot/comments/1ux484/ask_wikibot/)
I don't know anything about JSF, but here's a link to the web form page life cycle: [https://msdn.microsoft.com/en-us/library/ms178472%28v=vs.85%29.aspx](https://msdn.microsoft.com/en-us/library/ms178472%28v=vs.85%29.aspx) As you can see here, the web form handler is doing a lot of unnecessary nonsense if all you care about is rendering a view. An .ashx would be a better choice for emulating a single-pass HTTP response.
Again, nothing stopping you from using them but you'll quickly find it's counter productive. The things about events is that with .net you typically end up tightly coupling your components together which kind of ends up destroying reuse. Components tend to spiral out of control very quickly where as MVC pattern specifies a much more unidirectional data flow. In a sense you still have events in that you can engage an action (say a click) have have something happen, it's just that in this case you're dealing with a restful action rather than a coupled event. As for viewstate...well it's really the same idea, viewstate exists to rebind a control collection on postback. In the MVC world where you're stateless, you wouldn't be posting back, you'd be processing actions in which case you don't send the whole control tree and viewstate back to the server, only the information that's needed. Viewstate was a necessary evil for a long time but even in a strictly webforms world, I would disable it where ever I could. In complex apps disabling viewstate can cut your page weight in half. This is especially important when you remember that in a post back all that massive viewstate gets sent back to the server.
&gt;Ideally you will be completely replacing your server side templates with client side templates, why...dear god WHY would you EVER want to do THAT? Maybe if you've been forced to use .NET but you only really know javascript? &gt; This can result in a much, much faster and better experience for the user i very much doubt that if it's done server side, everything is drawn before the client even gets the page if it's done client side, the page is significantly bigger, the client then has to wait until it's downloaded all of the required data and assets, starts processing the binding instructions, and THEN gets the same page they would have done if it was server-side. &gt;Why would you think there's necessarily a security issue with client side binding? because the only possible reason i can think for using this involves circumstances where you have no ability to store the api access credentials server-side, or your entire API is open to the public.
....Just wait until you realize there's no LINQ, no async/await, no delegates, no properties, no value types, no a + b if you're using Bigdecimal (because no operator overloading), no extension methods, no real generics, no a ?? b (null coalescing operator), no object or collection initializer syntax, no new {A = a, B = b} (anonymous classes), no var, no proper type inference on generic methods, no sane DateTime API, no WPF, no ASP.Net MVC, no System.Linq.Expressions, no File.ReadAllText(), no............ Then you will beg to go back to the XML stuff, seriously.
*shudder*
&gt; why...dear god WHY would you EVER want to do THAT? Maybe if you've been forced to use .NET but you only really know javascript? Are you implying I only like client side binding because I can't program in C#? That's a cute argument. C# is my native language. I lambaste JavaScript constantly, but I'm comfortable enough with it to not be afraid of it when it presents a better solution. &gt; i very much doubt that Doubts that are no doubt based on copious JavaScript and client side binding experience? &gt;if it's done server side, everything is drawn before the client even gets the page &gt;if it's done client side, the page is significantly bigger, the client then has to wait until it's downloaded all of the required data and assets, starts processing the binding instructions, and THEN gets the same page they would have done if it was server-side. I'm not sure how its relevant. Perhaps you can restate this point in terms of "faster and better user experience". If someone designs a single page application, they will certainly have to consider the problems you are talking about. However, that does not mean they are incapable of producing said "faster and better user experience". One technique might be to server side render the initial page, and silently prepare the client side assets in the background so that when the user switches pages, it occurs instantaneously. But we can speculate about hypothetical abstract problems and solutions all day long. If you have concrete problem in mind, that would be a more appropriate foundation to discuss pros and cons of using either type of binding. You seem to be intent on having an client side vs. server side argument, with the intent of demonstrating the client side binding is never useful. You seem to be looking for a client-side-binding-is-always-right guy to argue against. The problem is, I'm not that guy. *Whether client or server side binding is better depends entirely on the sites purpose*. All the points you raised against client side binding are false. But that still does not change the fact that *whether client or server side binding is better depends entirely on the sites purpose*. You can still go about your life and use primarily server side binding, I don't care. I use it too, when appropriate. However, disliking JavaScript isn't going to make it go away or make it stop being a superior solution for certain classes of problems. 
Factories, factories everywhere! Also, no unsigned types, which if you're talking to things over the network not written in Java (ie, pretty much everything else) is highly annoying. But apart from that, and everything on your list, Java's fine.
Yes you can, I posted a tutorial on here a while ago and it got a bit of criticism along the lines of "why would you want to do it like that" but like you it was because using the traditional solution wasn't really an option. The post is below and there is also a link to the code on Github ... http://coderscoffeehouse.com/legacy-net-websites-and-what-to-do-with-them/
Use Intellij and try out scala (compatible with java)! I know this is /r/dotnet.. but I like scala even more then C# :)
Can't you use Scala - or persuade the powers that be that it's a more viable option? From my understanding Scala is the JVM language closer to C# these days than Java. Also, you're right about Eclipse but IntelliJ compares pretty well with Visual Studio and again, you should have a word with your line manager and tell them you need the right tools for the job!
Agree, Jetbrains make very good products. I have PyCharm installed, I found it a lot better than the PyTools for VS.
/thread :D
No LINQ, should have stopped there.
ASP.NET is open source. If you don't like what you see you always have the opportunity to address it in some form or another...
You've never been in a place where poLOLitics get in the way? Running a site that predates the current tech? You're going to have a tough time convincing your employer to upgrade "just because that's what the cool kids are using" (that's an actual quote from a previous employer.) I've worked at large DotComs, and they simply refuse on the basis of cost. They see it as fixing something that isn't broken. And lets be perfectly objective and honest - it ain't broken. The site has been functioning well for years. Sure, it's a PITA dealing with WebForms or whatever "old" thing you are trying to get rid of, but there were a team of people arguing for its use, and chose to use it. Are their arguments now redundant? Possibly. The bean counters aren't going to see it, though. No matter how clear you spell it out.
It is widely viewed as a *component-based* MVC framework. Check this: http://stackoverflow.com/questions/5104094/what-components-are-mvc-in-jsf-mvc-framework ASP.NET MVC is action-based. They're different but that doesn't mean it is not MVC.
I got no responses on IRC. You all immediately decided to make fun of me for not using Source Control. I'm reporting you to mods because you're harassing me now.
use quotes around the file path i dont see a var in the code provided, so this isnt all the code
Further, how I respond to such harassment and how I respond to people making fun of me because I don't work according to what they believe is best, not to mention your comment, all have absolutely NOTHING to do with this post.
That's somewhat irrelevant. I ended up rolling my own oauth provider. You don't need to use microsoft's libraries to do so.
Dear ortund, Please do not threaten me in private messages. &gt; If you continue to post comments ANYWHERE that mention me or cast a negative light on my character, I will not hesitate to report you to moderators for harassing me. &gt; Furthermore, I will also not hesitate to contact whatever authorities I have to in order to levy legal against you for defamation of character. &gt; Consider this your first and final warning. [Imgur](http://i.imgur.com/TPq7ci5.png) Another gold-piece from the IRC log: &gt; &lt;ortund&gt; Participant okay fine, LETS CHAT! Why do you think professional software developers are arrogant, useless and unhelpful shitstains by comparison to the rest of humanity? Why do you think it's conceptually impossible for any of them to just help a person when he asks a question instead of being a condescending fucktard? You said you are charging your customers. This makes you (by definition) a professional software developer yourself.
Yeah, Ive heard good things about both Scala and IntelliJ. Unfortunately this is one of those "existing code" things, and the prior guy has moved on. Management doesnt understand how different these worlds are, and doesnt think they need to hire someone else just yet. Yay me.
Oh Im learning alright... Ive quite verbose in Indeed.com right about now! :)
Probably not for brownfield development.
Personally I'd like to be someone who writes software, in general, and not tie myself inextricably to just one ecosystem.
I was in that IRC chat and Mr. Ortund is mistaken when he claims he was harassed. Many people attempted to help him but he refused to listen. This is typical behavior for him. After repeatedly spamming the channel with childish ascii art and other vulgarities he was permanently banned.
You are showing yourself to be far more unprofessional than I have been in the last 24 hours. Since you're pasting logs, lets look at what caused all of this shall we? [http://pastebin.com/eQ2Rp0Bt](http://pastebin.com/eQ2Rp0Bt) This is a pastebin of the logs from ##csharp to which /u/AngularBeginner is referring. Note the time stamps. Note that 10 minutes after I joined the channel, I had already put a user on /ignore for abusing me. Note that I attempted desperately for half an hour to maintain at least some civility in the face of on-going abuse from multiple users who had, early on, taken it upon themselves to mock me - without cause - for not working the same way that they do, utterly ignoring my original query. Please tell me, how would you have handled the situation any better? I have messaged reddit admins about your abusive conduct on this website with the links to your comments as well as the above transcript of the IRC logs. Further, I have just completed [a complaint form which has been filed with the IC3 - Internet Crime Complaint Center](http://i.imgur.com/Es2iGjw.png) as a first step of laying criminal charges against you for this harassment. Please note that I will collect any further harassing content posted by you against me for evidence. That's right, I was not threatening you. I urge you not to test me further.
This is my livelihood. If I don't get this error fixed, I don't eat for the rest of the month. Do you honestly think this is a game to me? This peanut is actively (and sadly effectively) sabotaging ALL my efforts to get this error fixed and from where I'm sitting, so are you. If you are unable or have no intention of helping me, get off this thread and stop wasting my time. If I see you post further irrelevance here, I will report it to the moderators.
&gt; Please show me in the logs where someone tried to help me? Everyone just went crazy making jokes about the fact that I don't use source control... Nobody once addressed my original query which was about: I asked you for a stack trace. You finally pasted one inline in the channel, which is against the rules. I asked you to put it in a pastebin, and you never did, preferring to instead moan about how you weren't getting the free help you thought you deserved.
&gt; [18:52] &lt;+canton7&gt; ortund, I put it in a pastebin You said "I put it in a pastebin". You never asked me to put it in a pastebin. That's why I never did, I though that maybe you'd decided that you'd help me and so copied my copypasta into pastebin. All of you constantly think I go in there with an entitlement mentality... Want to know what I go in there expecting? Some common courtesy. I don't go in there expecting all of you make me the joke of the hour because I haven't had the opportunities and exposure to learning materials that you have.
Kid, you're not entitled to free help in this world. If you're nice to people, don't abuse them, and you're seen to give away free help yourself, then people will often lend a helping hand. If you're abusive to people once (and you do have a bit of a history in ##csharp), then they will tend not to give you free help in the future. I've never seen you hang out *giving* help in the places you're *demanding* it. If you can't handle the social give-and-take of community support, then it's time to buy a support contract with someone.
One more thought: No one is trying to sabotage your efforts. You're just not that good at what you do. Pay attention to those offering you constructive advice, and perhaps that will change.
I did typo that, it's true. I also shouted "PASTEBIN" in the middle of the spam :P You *do* have an entitled attitude. You are *not* entitled to free help. The channel's reaction to you this time was based off previous exposure - after a few encounters, people like you garner a reputation, and the channel becomes less tolerant. The Version Control stuff was half jokey, and half good advice. Things started to get nasty when you started spamming the channel, and it really blew up only after you lost your temper.
This entire thread is about abuse because /u/AngularBeginner made it so. That aside, this suggestion solved the problem, so that you very, very much. To answer your question: I had also thought of doing that, but I hadn't tried because I couldn't understand why it would fix anything as the code in both files would have been the same since it would have just involved a copy/paste.
Oh my.
Yeah, single page apps are a bad idea usually too. The back button exists for a reason. Got any examples of a good one? One where a multi-page solution would have been measurably worse? Got more than.....say....10 examples?
&gt; Then jeers from JakeSays of "I can't believe you charge people" and whatever the hell RandomStranger said... How was I not supposed to lose my temper? By growing up. Stop behaving like a twelve years old having a tantrum.
Don't have to. Usually do
&gt; but social convention dictates that when someone asks a question, a response by those being asked is required. Not in a 500-person IRC channel it doesn't. Think about it: if everyone in the channel chimed in with "no, sorry" every time there was a question they couldn't answer, the channel would be so filled with spam it would never function. The same goes for SO, or any other discussion forum with lots of people. The social convention is to only respond if you have something useful to say: if you don't know, or you don't want to get involved, you ignore the asker. Now, ##csharp is not a help channel. It's a discussion channel. There's no burden on anyone to try and solve your little problem. There were a couple of helpful voices (including mine, at first), and a lot of discussion around what you were saying (*discussion* channel, remember?). You're painting this big picture about how you received a shit-ton of unprovoked abuse, but that's really not how it turned out. *Before you started being abusive*, all you got was some teasing, coupled with good advice. Most of the stuff you're complaining about here happened *after* you kicked off the abuse. To be honest, you were swearing at me while I was still trying to help you. &gt; [18:48] &lt;ortund&gt; you guys gonna help me or just keep looking down on me as if you'd rather talk to a lump of dog shit? &gt; [18:49] &lt;+canton7&gt; ortund, there's no more help to give, surely? You asked whether deleting the designer files was a bad idea, we said "YES", you restored them. Problem over &gt; [18:49] &lt;+canton7&gt; ortund, everything from here on in is just trying to get you to be a less shitty software dev &gt; [18:50] &lt;ortund&gt; canton7 problem NOT over... Why the fuck do you think I deleted the files in the first place? Because they were fucked and that shit hasn't gone away Also, having an attitude of "I don't use X because I can't be bothered to learn how to use it, and that's OK" is a very bad idea. You lose all respect among a community which survives by learning all it can about everything. Yet you're putting effort into defending that viewpoint here as well. In all honestly, I can't believe you charge people either. We've fired people more competent and with a better attitude than you. Bear in mind that many of us will have been screwed over by contractors who charged money, but were hopeless, and who risked the success of our project.
Ahh, it's phrasing, so JSF components seem to be no different from webforms, Java developers have just decided to jam talk they're way into presenting it as an MVC framework which I suppose it is in an abstract sense. In that same abstract sense, webforms would be an MVC framework. Neither are patterns you want to be using ideally. Take a look at rails or even some of the front end MVC frameworks like angular or ember and you'll get a better idea of what I'm talking about.
We are in the same situation buddy. I got 8 years of .Net. Then three weeks ago they say "oh btw you know this shitty system we built? Ya your the guy!". Get this idiotic business choice. We have a website built with .Net MVC, restFul APIs, SQL backed, EF ORM the whole .Net standard stack really. So along comes big bad business guy who goes "You HAVE to use this CMS system for updating your site. It has a built in redirect/rules engine so there will be almost no work!". Guess what? That CMS system is Teamsite, Livesite, OpenDeploy. These systems are all java based. OK, thats fine I guess, its just the front end so really you should only need javascript, jquery, css, handlebars that kind of stuff. Ohh... but wait... business really wants to put a stick in your ass so what do they do? They built their redirect/rules engine in java! Oh that is just fucking great. We now have javascript calling a java engine which calls a .net rest api. The java engine deals with redirects/rules/session. It is basically a huge fucking Controller who's primary role is to call our .Net api, take the results, manipulate them, redirect to a page and turn the results into a JQUERY variable so the javascript can access them. The business has just FUCKED themselves. They now *must* hire a front end guy, java guy, .net guy, sql dba. Just to do basic maintenance. Oh but do they? noooooooo, they tell the .Net guy that he is now "Full stack!" What a great fucking opportunity to neglect my core skill set and learn fucking java. How nice of you company... how nice. ' &lt;end rant&gt;
I'm articulating it just fine. That was the reply I've been given once or twice before. It's a quote, after all. However what it is, is an anecdote of the kind of office politik that is met by devs all the time. That's all. It could well be a (the?) reason OP is stuck using WebForms - because his boss (or god forbid an ivory tower architect) is unreasonably demanding it.
All of the SPA frameworks have routing for this exact reason. Seriously, learn what you're talking about before trying to argue about it.
I know you were trying to help, and for what it's worth - although it may not seem like it at all - I am sorry for having treated you that way. Know that I am proud neither of how I have conducted myself in the channel in the past (not just last night) nor of how I have conducted myself today on reddit. Know also that I've never been proud of how I have conducted myself on the channel either. My temper, as you've seen is short and volatile and, yes, unacceptable for a man my age. It's something I've struggled with my whole life. I remember when I was 13, the toaster wouldn't stick at the bottom to toast my bread and I'd had a hard day at school, I freaked out so bad that not only did I break the toaster, but I also almost threw it at my grandmother. Lets not even talk about the bedroom doors, windows, computer peripherals and other miscellaneous objects I've destroyed in a fit of rage... Regardless of all of the above, you fail to take into account the fact that you're only seeing me at my very worst. I only ever come into the channel as a last resort because I know all of this crap is going to go down before anyone deigns to help me. Before I come onto the channel, I've been on Skype asking no less than 7 friends for help, I've been on facebook posting questions there, I been searching on SO and other forums, blogs and MSDN as well... When I come into the channel I'm annoyed and frustrated because of several hours worth of fruitless work to find the answer to the question I ask. You don't see what I'm getting right when I'm not there. I assure you, I'm a far more capable developer than you're assuming from what you see, but that said, there's a lot that I do battle with and even more that I don't understand. I can charge people because I can do what they need and they're happy to pay me. You maybe interested to know that I only charge 40% the hourly rate that other professionals in my country charge for similar services. That's because I know I'm not good enough to charge as much as they do. This also means that people come to me because I'm cheap. Because I'm not going to charge them $5000 for a simple point of presence wordpress website that doesn't even have an image slider or contact form. I sell them what they need at a price they are happy to pay and I do it quickly and, with more than a little help a lot of the time, well. &gt;"I don't use X because I can't be bothered to learn how to use it, and that's OK" You're making assumptions. I've learned how to use Atlassian SourceTree and BitBucket. I read the tutorials and blogs that explain how to use it the same as I read countless blog posts about Polymorphism. I didn't understand that until my friend explained to me in simple-as-can-be terminology what it is and how it works. I don't understand how to use source control not because I'm too lazy or otherwise unwilling to learn. I don't understand it because I don't understand it. I am not capable based on the information in the tutorials and blogs of comprehending how things are meant to be done. Maybe I'm retarded in some way. Maybe its my ADHD causing problems. Maybe I'm just a basket case who should live in an institution... Who knows...
I wasn't suggesting it's on par with LINQ ;) Oh and yes, the verbosity is a Java-wide issue. I don't mind some verbosity to make your code more readable and maintainable, but Java takes to a whole new level...
Please use pastebin or dotnetfiddle or something so your code is nicely formatted for future reference.
Ah, terminology issues. What you are saying is correct, WebForms almost by default follow the **MVC pattern**. But most web frameworks use the **Web MVC pattern**. Web MVC has absolutely nothing to do with MVC. It is completely unrelated and the person who came up with that name was an ignorant moron. That said, the Web MVC pattern is much more appropriate than the MVC pattern for websites. It is a good pattern with a stupid and confusing name.
Can you pre-pay Windows Azure? Basic websites are free and SQL Server is 5/month.
We were going to use Azure, but because their billing occurs monthly, we can't go with them. I guess I'll shoot their reps an email asking if there's a way to do yearly. 
The purpose of the viewstate is to rehydrate the controls on the page between post backs. At that point, each control is like it's own view, with the viewstate as it's model. You're going into Inception mode. Part of the reason for MVC was to simplify the the web page generation pipeline. Not take something from WinForms days and throw it on IIS. I get politics and what not. I've worked in large corporate environments and had to go guerrilla IT warfar to push through the very first application that wasn't based on on SmallTalk or ran on a 3270 emulator. You might want to look [Here](https://msdn.microsoft.com/en-us/magazine/jj991978.aspx) and [Here](http://www.davepaquette.com/archive/2013/12/30/so-you-inherited-an-asp-net-web-forms-application.aspx). Both articles talk about slowly migrating WebForms code to MVC. With ASPNET5 this becomes the default ( the ability to run Routing, WebForms, and MVC all in the same project). Sometimes it's better to work with the enemy for long term gains. 
That's a fair point. I'm actually not sure whether abstract expression trees are supported or just anonymous functions. Still, that covers a lot of scenarios.
&gt; no LINQ Stream API &gt; no async/await Fibers &gt; no value types Guava &gt; no proper type inference Lombok &gt; ASP.Net MVC SpringBoot or DropWizard &gt; no WPF JavaFX (Java8) &gt; no sane DateTime API JodaTime
I swear by JetBrains tools myself, IntelliJ is quite nice, don't go near Eclipse. I used to be a big fan of Java, then I got my current job in a mostly dotNet dev group last year and don't even want to think about going back anymore lol C# and F# are so very nice to work with. I'm pretty damn happy it's going cross-platform now too, no need to switch languages when I program on linux.
Did they already get enumerables and generics?
You are saying I need an additional framework for framework basics?
I will definitely check that out. Thanks for the link! 
Yes I know you java people have inferior, retarded alternatives to a lot of C# features. That doesn't make java less retarded and useless though.
Ovh.com you can pay any quantity of months in advance. https://www.ovh.com/us/vps/vps-cloud.xml this is what i used. Windows licence included.
I think, and don't quote me, azure has reserved instances like aws, which you can buy for the year at a discount. I'm sure they won't say no to a full payment up front, but you still may have to put down a credit card for overages/extra services
Does it work if you give it the path to a shortcut to a folder? MyDocuments isn't an actual directory, it is a screwy shortcut of some sort. You may need to "unwrap" a shortcut first and get its target path, then do your kung-fu on that path.
Why do people still use eclipse when IntelliJ exists?
we have a winner
I'm going to try and get in touch with Azure tomorrow, somehow ended up on the Microsoft general help BS chat.
Oh okay. Posted code for the first time. Will keep it in mind.
How you know that they are inferior if you haven't tried them out? 
Great joke there.
Relevant username 
Whoops, didn't realize I was talking to a fanboy with nothing useful to contribute. 
He works in a school, if you bothered to read it.
Yurp
Woohoo
I think a lot of it comes from the whole "everything is a file" perspective from the Linux world. Im not new to Linux, so I expect it. But boy can it be frustrating at times. I actually appreciate the Java guys - you simply have to really know whats going on under the hood to make things work. Would never take anything away from them. But going from one to the other can definitely be a pain in the ass.
I actually don't work at my school, I'm a student building a system for a department at the school as a semester-long project. It has to do with the school being a state agency and having to fill out forms for purchases made using their credit/funds.
I'll be sure to give it a look, thanks!
Ive seen this before at another company I worked at. Full Microsoft stack for nearly a decade, then all of a sudden new management, and in comes Oracle and Linux... I stayed for a few years after, and at this point they have FrankenSystem. They have to staff an army of .NET, Java, Tibco, and CMS developers. Add to that the BAs, project managers, testing teams, contractors... The IT department is larger than the customer service department. One thing I have learned over the last 20 years of my career - systems never go away. No matter what they think they will do with retiring this or that... it doesnt. And frankly, it's quite scary. Think about big banks, government, etc, and the complete hodge-podge of systems they have built over time to do just the simplest of tasks. Take an order. Issue a credit. Spit out an invoice. And then we wonder why hackers are able to do what they do. Another company I worked for wanted to retire an expensive mainframe system. You know what they did? Instead of rewriting the application (deemed too expensive), they hosted a virtual mainframe on Linux, just to run their ancient code! Yeah, couldnt stay there long....
You're right. :)
I looked at using http://www.nopcommerce.com/ for a client a few years ago; I can't vouch for it as we didn't go with it (ended up going with a php one instead) but it was the leading option for us at the time. If you're building something yourself, make sure you have a proper scope defined. From past experience, ecom projects can quickly snowball with features (e.g. integrating with various shipping companies and payment gateways, dealing with taxes, product weights/variations, and so on). All the more important if it's for someone else, as they may be thinking Amazon to your weekend project.
Have their info shoot over to an online payment processer. In all honesty though, I'd probably just use shopify or something similar because it's simple and easy. Or if it absolutely has to be in .Net and I'm feeling lazy, I'd probably use something like [this](http://www.nopcommerce.com).
You'll quickly find its a lot more than that. Search integration, coupon codes, timed promotional deals, voucher payments, PayPal integration, credit card payment integration, handling refunds, handling customer order email notifications, cancelling orders, refunds, endless reports for management , expedited delivery options, and the list goes on and on 
Kentico, telerik sitefinity, sitecore commerce. 
I just made a site using nopcommerce and I can vouch for it. It is very well built and fairly well supported, you get a lot of stuff out of the box.
Dependency on Eclipse plugins
Not real generics though.
I haven't tried it but this one looks very good ... https://piranhacms.org/
That has nothing to do with ecommerce.
I have a bunch of experience with version 2.10 and lower of nopCommerce (pre-MVC) and I can personally attest to the quality of it. It is a bit over-encumbered with a metric ton of features, but there's really nothing missing from it.
[Umbraco][1] is a CMS system, but a couple of E-Commerce solutions exist for it. [Merchello][2] is a popular choice. [1]:http://umbraco.com/ [2]:http://merchello.com/
I support this, as a long time Telerik user Kendo, and the ASP.Net AJAX/MVC components are some of the best in the industry.
Can you think of anything that formats the code directly? Or does stylecop do that?
Haven't used it personally, but some people I trust swear by [code maid](http://www.codemaid.net/)
I use code maid and I love it. Very featureful, lots of configuration options to fit your style, can appply it on a lot of different scopes (files, folders, projects, solutions). Supports simple stuff like whitespace as well as class structure; our style guide says that a class is laid out as members, constructors, properties, methods in that order, and code maid supports reorganizing to fit that structure.
There's an excellent (if lengthy) reply at StackOverflow that I reference each time this comes up: http://stackoverflow.com/a/8896840/3320402
Depending on your actual financial means, you can also look into microsoft's action packs (they are similar, if a little lighter-weight, to msdn subscriptions)
If you've got full-blown MSDN then you have access to windows server and exchange for setup though I would run with the 180 day eval copy as that will be a lot easier to deal with than standing up an operating exchange server.
Best. Tool. Ever.
If you have an active MSDN subscription then you should already have licenses for Windows Server and Exchange you can use for testing and development purposes. We have a dedicated VMWare ESXi host that runs roughly 2 dozen test/dev VM's at the moment, all on a separate AD domain from the production network using our MSDN entitlements.
Go old school and use the text file as your database. Something like this maybe? Sub Main() Dim tDictionary As String = File.ReadAllText("american-english") Dim regex As Regex = New Regex("\d+") Dim match As Match = regex.Match(tDictionary, "Apple") If match.Success Then Console.WriteLine(match.Value) End If Console.ReadKey() End Sub I snagged Debians dictionary as a test. How big is your file? p.s. I like VB, dont judge me :)
&gt; How big is your file? 52,449KB; 196 610 words Do you think that using text file as database would be tolerably fast? I mean: I suspect that users won't wait 10 seconds until I give them result. People are impatient, the close webpage when it's loading more than few seconds.
asphostportal.com, hostforlife.eu. You may also check them for asp.net hosting
Like Rec0de said, using SQL Server or Oracle could be your best option. If you try its RegEx engine and find the performance wanting still, you have options. Using a FULLTEXT index on SQL Server, you can even use an index to conduct a pattern match search. However, that will not use regular expressions and you will need to do some digging to see if the FULLTEXT operators give you the functionality you need: https://msdn.microsoft.com/en-us/library/ms142583.aspx Another option you may want to consider is using Lucene.Net: http://lucenenet.apache.org/ In that scenario, you have to work a bit harder to get Lucene to index things for you, but it's quite a useful technology to get into from a search perspective, so you may find that to be worthwhile as well. Personally I used Lucene on a Java project for fuzzy data extraction and matching, and it worked quite well. 
If you are employed by a company to develop software they should be the ones paying your MSDN subscription, not you. Also, a MSDN Premium sub is only $6,000 for the first year, annual renewal is only $2,500, which is a drop in the bucket compared to the value it provides a developer (and is a marginal fraction of the cost of the human resources for your development team anyway). If you are a startup, then what the heck are you worrying about? Go sign up for Bizspark, you get 5 MSDN licenses free for 3 years, including $150/mo in azure credit for each developer.
We use EditorConfig http://editorconfig.org/ here. Works with numerous editors as long as you load the plugin.
lol. I bet you write all yo shit in x86 assembly too.
Just applauding your eliteness... And *every* UI takes some sort of config file. That's what they do.
 50 MB is nothing man, I load 500mb plus files into memory all the time. You can also do this as an application variable so that it is loaded only once for all sessions. 
ok tested with 50MB text dictionary, load time 340ms, search time &lt;1ms.
INTERNET RAAAAAAGE. &gt; grow up and learn your fucking tools I learned you within 2 replies. No problem, dude. &gt; and unwilling to admit that I'm right, lol.. I dont think you really need my approval to help boost your ego any further along than it already is.
I added to my response. Have a good day, gramps.
I can see that it bothers you when you're being called out. The subject *has* changed, in case you havent been able to keep up. It's now about you and your elitist attitude. I'd say it's not good for you or your health. We can agree to disagree though if you really get too irritated to talk it out. Yawning frequently is a sign of irritation. Dogs do it when their masters leave for an extended period of time. Ill be back.
&gt; You're the one that started a bitchy thread about Actually, if you read other replies, you will see that *you* were the only one who took a holier-than-thou attitude. Everyone else was respectful and had some great ideas around the topic. Good conversation, and I *appreciate* them. But you lack people skills. If you dont like a post topic, dont reply to it. It will help keep you from looking like an ass. Pay attention to how other normal people react and you just might realize that you need to do things a little differently. You are free to go now. Im done. 
It sounds like you might be over-complicating things. The reason your DB inserts are slow is because you are inserting them one by one. Look up Bulk Inserts. With bulk inserts you can insert one million records (into a table with 10 columns) in about 15 seconds. ** But ** Maybe a different approach might simplify things. On Web Application start, read the text file using ReadAllLines(). Iterate through them, adding each to a dictionary. Then cache the result dictionary in the WebCache (or perform a bulk insert to the DB). If storing in the web cache, you can try to find results using Dictionary.ContainsKey(word) (fast), or if it doesn't you could then fall back to using LinQ+regex on the Dictionary.Values. Don't forget you can use Parallel.ForEach if you every need to iterate through the entire collection.
I'm not sure there will ever be a formal installer package for OSX. You may see it bundled with things like mono though.
I'm not quite sure what you mean do you mean do the test take into account that you took the JavaScript test instead of the Csharp test?
Resharper can do a code cleanup based on customizable templates. It can do it for files/folders/projects/solutions. It can also highlight code that does not conform to standards that you set up.
There hasn't been anything official as of yet with regards to an official release. Generally they save these type of announcements for major conferences, so I suppose that an announcement at BUILD would be possible, but I wouldn't hold your breath.
Codemaid will format code to stylecop standards and is free. I'm sure Resharper does a better job or has more features though it does alot.
If you login to the mcp website all possible permutations of your test path are displayed. So you can see exactly what credit you have / need. You can always call. They were pretty helpful when I had a issue getting my credit assigned to my company. https://mcp.microsoft.com/Auth/Login.aspx?ReturnUrl=https://www.microsoft.com/learning/members/en/us/mcp/mcp-default.aspx Edit: Damm autocorrect and added link. 
For general dev, don't connect to those services. Have a DummyAuthProvider, DummyEmailSender etc. It also let's you impersonate users for debugging purposes. If your actually developing the parts that use these services then the developer should be able to get access to the real one, but these interaction points are usual small and not error prone. Test/Staging might be different, it will really depend on the app.
the only thing i have seen is that they anticipating a summer release but they won't release it until they are sure it is ready 
I often name to the top-level control or window in the XAML file "This" just to make things easier. But that's a personal preference, there is no magic in the name.
It doesn't necessarily have to be. However, as is `System.Math` is not a good candidate for future use (if there are plans to continue extending the mathematics library for the CoreCLR). Currently `System.Math` cannot be extended to support `System.Single` as it would break backwards compatibility with code that does something like `Math.Sqrt(2)`. Previously it would resolve as a call to `Math.Sqrt(System.Double)`. But if `System.Math` is extended, it would then resolve to `Math.Sqrt(System.Single)` which causes a loss of precision with no warning to the caller. The CoreCLR team 'could' decide that it is worth breaking backwards compatibility (which would be great). However, if they don't decide to break backwards compatibility you will end up with at least two seperate `System.Math` libraries (one for all the old APIs, and one for all the new APIs - or just for the Single-Precision APIs). Having two seperate `Math` APIs doesn't make as much sense as providing the math functions as static methods in the existing primitive types. Now what may be a better idea than deprecating `System.Math` entirely, is to just have the existing functions pass-through to their new locations (meaning `System.Math.Sqrt(System.Double)` would really just end up calling `System.Double.Sqrt(System.Double)`). Either way, this is just the preliminary PR and is still a WIP. Feedback is much appreciated and can ensure that we get the changes that are needed (an extendable and more feature complete mathematics library) and that it is done in a way that will please the community.
I'll be making blog posts about what I used to study and what proved to be useful for each test as I take them. I plan to take that one second.
I've had it happen in the past with Flash apps built into executables. You can double check your app and all of its components with https://www.virustotal.com/ they also have an API if thats useful in at least giving you a heads up on the false positives The whitelisting process takes a long time though, and good luck getting someone at Norton/Symantec/whoever to put you through to the right people to get your app whitelisted. I think by the time I had our app whitelisted, we had a new version ready to release. Try code signing all of your DLLs, EXEs, MSIs, and powershell scripts with your code signing cert and signtool, that may help at least. Make sure you also timestamp when you sign with signtool. As an alternative to ClickOnce, you could look into Squirrel https://github.com/Squirrel/Squirrel.Windows It was built as ClickOnce done right, and right now I know its used by the Slack Windows Client installer, Atom for Windows, and a few others whose names escape me. And if all else fails, and ClickOnce is your false positive source, do it in WiX http://wixtoolset.org/ 
I like the approach. Would it be totally silly to add the new APIs on each respective types while leaving the existing API as it is without Single? Marking it as Obsolete with a warning (but never actually removing it) seems like the right thong to do.
There is some level of precedence for the convention (providing the functions through the primitive type).`System.Decimal` already did this with most of its math functions and the `System.Math` version is just a passthrough. The new `System.Numerics.Vector` types also do this for their math functions (albeit without the passthrough from `System.Math`). And as /u/WeAreAllApes mentioned below, marking `System.Math` as `Obsolete` does not necessarily mean it has to be removed. It is just used as a warning that, the preferred method is to use the new APIs provided through the primitive types. 
Leaving `System.Math` as is (other than marking it as `Obsolete`) and adding the new APIs to the respective primitive types is exactly what the current proposal is :). I would assume, if this route is what gets decided on by the CoreCLR team, that `System.Math` would never actually get removed (given that it is/was a popular API and would break a considerable amount of legacy code if it was actually removed).
Would you be so kind to describe how this tool has helped you? I'm curious. 
I dislike the fact that they are adding a new type that has a higher precedence for it's implicit conversion. For instance https://dotnetfiddle.net/MNvBq3 Shows how in Roslyn that int will be coerced, not to a double, but a single. I can't help but feel that they shouldn't have done that.
Marking System.Math as obsolete means a *lot* of existing applications will suddenly fail to compile (with warning as errors), because... it'd be better for them to use the new methods that do the exact same thing. I understand why you can't just add overloads, but such a far-reaching change doesn't seem worth it. Why not only add the `float.*` methods and keep `Math.*` for doubles?
How certain are you that you only have to take the one recertificiation-exam 2 years after your **last** exam? I'm looking at my transcript, and I've taken the 3 exams pretty far apart: Januari 22 2013, October 11 2013 and December 6 2013. Yet, my MCSD achievement date is June 12 2013, meaning I'll have to recertify in about a month, as opposed to at the end of this year.
I forgot about System.Decimal, but myself and most code I've seen still use the Math methods since they are more convenient. Having to go after the specific method by type sounds very annoying.
Just checked mine again and its from the date of the last test I took and passed... 
I've had the same issues (using OSX). I've got stuff working but it's a moving target and easy to break things. I've now shelved this until release - it's a pain it seems we have to wait until VS2015 is released. One thing I was really looking forward to was decoupling .NET development from Visual Studio! Also, it looks like the Mono team are working on a 4.0 version which I assume will be used for ASP.NET 5. I played around with the nightly beta5 ASP.NET builds and couldn't get it to work but found the new version of Mono referenced.
Mono has an installer package for OSX. ASP.NET is then installed via NuGet.
Every (major) edition of Mono has one.
Thanks for the leads. Surprisingly Symantec has been super responsive in the whitelisting process. Though I don't expect this to persist forever..
As someone else pointed out, what is more annoying: `float.Sqrt(x * x + y * y)` or `(float)Math.Sqrt((float)(x * x + y * y))`. The biggest inconvenience will be 'porting' old code, which is recompiled against a new framework, to get rid of an `Obsolete` warning message. Typing `double.Sqrt` is just as easy as typing `Math.Sqrt`. There would, of course, be some mistakes due to muscle memory, etc. But, in the long run, moving them to their own types provides the most room for extensibility. However, it would still be nice for CoreCLR to decide to break backwards compatibility in order to still provide the methods through a centralized location (meaning `System.Math`).
There are plenty of non-uniform methods and classes in the BCL already, *because it never breaks backwards compatibility*. If it did, changing Math functions would be pretty far down the list of changes to make. Obsoleting one of the most widely-used helper types in a library requires a very good reason, and this doesn't look like one. I wouldn't be surprised if the CoreCLR team closes your PR because of that. Python 3 is a very good example of the effects of breaking backwards compatibility. And there aren't remotely as many Python programs as there are .NET ones.
&gt; Has there been any talk (official or otherwise) on a release date for asp.net vNext? Unofficial: http://stackoverflow.com/a/27560914 &gt; I'm desperately waiting for the day I have an installer package for Mac OS. I've tried the "do it yourself" method a few times and always come up with errors. :( There's a brew package for OSX that has existed for a while. Instructions are on the Github page: https://github.com/aspnet/home. Be aware that it is a very painful time right now, as KVM is being phased out and DNVM is being phased in, so something terrible will probably happen when following those instructions. Beta and all. :)
I think marking it deprecated is the right choice. It isn't going anywhere (marking it deprecated simply solves the issue of how to enhance it) and nothing is actually being changed inside of it. There are a few minor issues in `System.Math` as well that cannot be fixed because they could break existing code. One example is how `System.Math.Atan2()` doesn't match IEEE 754 specs (or what MSVC does). [The documentation for this method](https://msdn.microsoft.com/en-us/library/system.math.atan2\(v=vs.110\).aspx) states: &gt; If *x* or *y* is NaN, or if x and y are either PositiveInfinity or NegativeInfinity, the method returns NaN. Yet the specification does have a value defined for 4 of these states (they aren't all NaN): &gt; atan2(∞, -∞) is 3π/4 atan2(-∞, -∞) is -3π/4 atan2(∞, ∞) is π/4 atan2(-∞, ∞) is -π/4 I am not sure that should be fixed in `System.Math` but no reason to bring it forward to `System.Double` or `System.Single`.
&gt; I agree that deprecating System.Math isn't the greatest, but the wrong thing to do? Probably not. It most definitely is the wrong thing to do. Libraries should be deprecated when they are actually broken or dangerous to use, not just when something better comes along. Saying that we all have to switch from System.Math to your baby reeks of ego.
I'm assuming you've googled it, but incase you haven't there is an example here which seems to do what you have described directly from .NET: http://weblogs.asp.net/hernandl/startprocessasuser If you are still struggling you could consider having your external process triggered via a batch file, which definitely does support run as. https://social.technet.microsoft.com/Forums/scriptcenter/en-US/e20ddf85-26ba-45a7-a987-89de076eda23/solved-run-program-as-different-user-through-batch-file?forum=ITCG
You know, being *correct* doesn't mean you have an excuse to be an *asshole*.
I've used [WinHost](http://winhost.com) in the past for my Windows-based web hosting. I'm pretty sure they do yearly billing, and they give you the latest versions of Windows / SQL Server / etc. for a reasonable price.
Yes. A company I was working with implemented MVC using Web Forms (due to office politics regular ASP.NET MVC was off the table). Postback and ViewState are turned off. No ASP.NET controls, just plain HTML. All UI logic was handled in the aspx file using a combination of inline server code and JavaScript. Code behind was indeed acting as the controller. I preferred the regular ASP.NET MVC method of doing things, but that implementation was clean and didn't have the "magical naming" convention of ASP.NET MVC (something I've never been completely comfortable with).
At work we made a web service that is in charge of executing SSIS packages. This service is hosted outside the IIS, it's installed as a Window Service. Maybe you could do that, as soon as the users hit the button you just make a web service call to begin the execution of the process and host the service with the user account that has the privileges necessary to execute the process. Check this out: https://msdn.microsoft.com/en-us/library/aa529311.aspx
I've never been turned down a job because I *didn't* have it. I already have a great, fulfilling position making more than I need, lets me teach others new technologies, and gives me plenty of vacation time. I'm wanting the certification for personal reasons, not so much as a way to boost my career. I want to make sure to fill in any gaps I may have missed along the way in my career, and studying for these exams seems like a great way to go about it. Sorta gives me deadlines to help push me to read more, learn more, etc. I tend to work harder if I have a measurable goal to achieve. Passing the tests is that goal for me. That said, I'm not sure that it would help your / my career. But it couldn't hurt it, right?
I am not saying this will help you but just throwing this out there. [http://hangfire.io](http://hangfire.io/)
Looks neat, thanks. This is a definite one-off for us; a bailing wire &amp; duct tape interim solution until we can get our deeper integration stuff built. 
This is definitely the approach to use, though I'd suggest mass transit over hangfire. It's shouldn't take more than a day to implement, quicker and better than a duct tape solution. 
Sure looks like it from that link. Thanks o/
This is how I would do it.
&gt; On a side note, it would be nice to have C# code formatting for code blocks in comments. C# is a language. The language has nothing to do with formatting. The editor would have. There are no such things as "code blocks in comments". They're comments, they are not code. If you comment out code (which you shouldn't really ever do), then it's not code anymore.
Glad to help!
I think he's meaning reddit comments having a C# syntax-highlighting for code-blocks :)
So would it work with desktop applications or is it purely ASP.NET?
I highly recommend a framework like [Topshelf](http://topshelf-project.com/). Setting up a basic service is easy, once you want to take a best practices approach to shut down/restart/recovery/etc you really want to just let someone else handle the details while you implement what is special about your service. 
Will be when VS comes out, who knows when though.
Would you say Code Main is worth it then? I too notice Resharper slows it down.
CodeMaid is free. Download it and give it a try. It's very easy to set up. I use it every day and I love it. I give it my top recommendation.
Made this because I didn't find anything that does this on NuGet. Gonna post it there later when I'm back home. Edit: Now on NuGet as [BitStream](https://www.nuget.org/packages/BitStream) Please post any critique or suggestions :)
What's a use case for this?
I just started a project to redo my comany's app in C# and it will involve a windows service for server. Through prototyping i discovered i wanted a console version of the server for debugging and service version for production. Am I correct in understanding i can use topshelf and have just a console version that can optionally be installed as a service in a production environment?
You can also rearm those, 2 or 3 times to keep it active, slmgr /rearm. After that you'll need to re install 
Yes, dual start configurations are quite normal. You should be able to find examples as you dig in. I tend not to be the biggest fan of the YACW (yet another console window). Consider using a logging framework and outputting to a file and use a log tail when you wish to see what is going on. If you leverage the ability to see config file changes during runtime you can easily turn up your logging level and start tailing without having to restart a running service. I find this is often easier particularly for critical services. Dumping to a log also allows you to more easily remotely monitor your deployed service through splunk or other logging toolset. 
Well, for example implementing LZW compression, which is the reason I made it, since I needed that for my GIF de-/encoder (just for fun). Alternatively, it'd be useful for any binary encodings where you have or want to use single bits for booleans or just less than 8 bit for certain values.
Scala for net is dead.
https://msdn.microsoft.com/en-us/library/9w4cf933.aspx
Similar, but Typescript syntax is a lot closer to JS than C#, but with the compile time type checks etc.
Can you use this in vs2013 .net 4.5?
Thanks for the extra info. Sounds like a cool project. So Akka is a form of message bus?
It's more like a framework for building an application. Looking up the Actor Model should give you more info.
OK, I'll dig into it.
They will just show up encoded as %20. Most people use dashes to represent a space.
I like the mediator pattern for this type of thing. Jimmy Bogard has a good writeup on it here https://lostechies.com/jimmybogard/2014/09/09/tackling-cross-cutting-concerns-with-a-mediator-pipeline/ Its based on query command segregation. The basic idea is to encapsulate transformation and processing to a single location in the app (the handler).
Nope. .Net 4.6 VS 2015
Don't use spaces in urls! Url encoding is not pretty and prone to error. You can use hyphens or underscores. 
Sorry to be pedantic, but nope. You need a c#6 compiler (vs2015) but it will work with older framework versions. Just tried with 2.0 for example.
I have been in the same situation as you, depending on how much you have to map I would recommend the following: 1. Have a common lib (where you have written the mapping code) where you handle the mapping, then you can always call into that. I would use this for simple mappings 2. Use AutoMapper - http://automapper.org/ (From their website: *AutoMapper is a simple little library built to solve a deceptively complex problem - getting rid of code that mapped one object to another. This type of code is rather dreary and boring to write, so why not invent a tool to do it for us?*) I would do this if you just want to delegate the work, or if the mapping is complex and/or taking a long time to write.
Yeah...it was a bit painful!
Will look into this
To be fair looking at the logs and you and others were a bit of a jerk to him.
tbqh, 2GB of RAM at least if you plan on having some heavy usage.
Hyphens present their own set of challenges as well. Nothing an actionname can't fix, but not as simple as just adding a hyphen. 
Pretty much. The formal definition of REST never matched it use anyways, so little was lost. 
I agree that most people i hear saying rest don't know what it means. If you want to say "appropriate use of get/put, standard document formats, flexible loosely coupled network structure, links rather than hard coded paths and generally the flexibly of the Web" what word do you use now? I generally say "real rest, not the rubbish that ignorant programmers call rest".
Do I really want to make a dozen requests to walk a link graph just to avoid "hard coded paths"? No, no I don't. Real REST (tm) is mixture of good and really bad ideas. So it's no wonder that big parts of it are ignored. 
I always think it's cute when newbies think following links will magically make their system "loosely coupled and resilient". They're so sweet and innocent before they get out into the real world and find out that loosely coupled is a lie and bad performance is indistinguishable from an outage to most users.
Also checkout boxstarter.org
Interesting project, but the goals are different. I'm not interested in installing software, just automating tasks related to a project. I can see using Nitrate after Boxstarter for the "last mile" config though.
Nice tool for Orchard CMS. Keep it up :)
If your XAML is simple enough and renders in the same way on all targeted platforms then it makes sense to try and reuse it. If preprocessing makes that happen - there is no reason not to do it. If you have complex XAML and substantially different platforms such as windows phone and desktop then you will probably want to keep separate XAML files for both projects. There is time and use for every approach and it is up to you, the engineer, to make the decision which one to take in which situation.
Full disclaimer: Random newbie guess (probably wrong). It sounds like it's not a true postback on the control, as the master is changing the culture, then redirecting/reloading the page, in which case the text values would not be saved to viewstate. Maybe set a public property flag on the master that gets set when the culture changes. The control can look at the property on the page unload, and cache the current user submission in session. When the controller page_load fires, it can check the cache and pull the current values out of cache. However if you have multiple controls, this gets harder because you have to determine when it's safe to reset the flag on the Master. Good luck?
Whenever I set a bp on page_load 1) IsPostBack was set when responding to the radio button event 2) ViewState and Request.Forms was populated with my control values 3) the .Text property was never empty But it doesn't render. I did not notice the page_load event firing twice in succession if that's what you mean. It fired once when navigating and again in response to the radio selection.
Thanks for your feedback! Glad it was helpful! Be sure to follow us on Twitter https://twitter.com/NVSoftware. We will be publishing more tutorials soon.
Wow, very slick. Thanks for sharing.
Do you have a TextChanged event declared on your textbox?
Yes. Or maybe, depending on how you ultimately choose to design this. What's currently happening to you is that your redirect (that's handled on the Master page) is throwing away all your posted form values (including the textbox value you want to preserve). A very naive way you can preserve the value is to add a TextChanged event handler on the textbox and implement it in the child page codebehind. In the codebehind, when the event fires, store the new value somewhere other than ViewState - like the Session. You can literally set Session["MyPageText"] = MyTextBox.Value and that value will be available in the Session after the redirect. I'd suggest go ahead and try that just to get familiar with what WebForms is doing. It's not a complete solution since it's not scalable and requires you to do too much cleanup (you need to manually clear the Session["MyPageText"] value, or the value will be there every time the user visits that page during the session!) How this can work: 1. Arrive at the page and enter some text 2. Click the radio button to change culture 3. The postback event for the text changed event fires, and you stuff the value in the Session. 4. The postback event reaches the Master page culture change, and you redirect to the same page again. 5. In the child page Page_Load, you check and see if that Session value is set. If it is, set TextBox.Text to the value in the Session. Now, you definitely don't want to do this for an entire website - that's wayyy too much manual packing and unpacking of data just to handle an event on a master page. But give it a try to get a feel for ViewState and how the Event Lifecycle behaves. I found watching it in a debugger far more educational than reading blogs and looking at flowcharts.
This (Dynamic Data, not this specific demo) seems kind of similar to Akavache. Anyone know what are some of the differences?
"You're stack stack!"
&gt; Can you use MVC to create a website that has no database backend to it; an example would be a blog style site or a site that basically is 3/4 pages with information on it that only changes once or twice each year Sure you can. You certainly won't be using MVC to its full potential, but you can definitely do it. You're essentially asking if you can use a race car on your morning commute. Even on a static site, you can still take advantage of things like layout pages, razor, the routing engine, and content bundling. Your controllers will basically be full of actions like this: public ActionResult Foo() { return View(); }
M doesn't mean database, it means model. Your model can be a XML file. You mentioned a blog. How are you supporting the posts? Whatever the medium, that's your model.
I see thank you very much. I haven't looked into a blog with MVC as of yet so I have no idea to be truthful. Edit: I will be buying a couple of books on the subject over the course of the next week do you have any recommendations? I have no real C#/ASP knowledge a little bit of JavaScript, html and CSS ftom about 3 years ago. Would the Adam Freeman book be worth it, I see that's been mentioned in other posts?
Thanks and I do understand this and that's what confused me and made me think it wouldn't be worth learning. I will be buying a couple of books on the subject over the course of the next week do you have any recommendations? I have no real C#/ASP knowledge a little bit of JavaScript, html and CSS ftom about 3 years ago. Would the Adam Freeman book be worth it, I see that's been mentioned in other posts?
To be honest, I don't buy tech books. I haven't read one in a long time. I tend to just start coding on a toy project, read blog posts, and watch videos on youtube. So not the best person to ask, but I've read that they're supposed to be good... So maybe?
Thanks for this! I didn't get a chance to go this year.
It sounds like you could drop the v and c as well and use a static site generator. For a blog I find hexo to be fantastic. Wright all your content in markdown and publish with a couple of simple commands. If your not doing anything dynamic or dealing with complex data then static site generators are fantastic. 
Model is a conceptual representation of your data ie your data layer you dont have to use a database if you don't want to, you could simply fill all your views with static HTML and never use the model layer if you wanted to use it that way nothing is stopping you. The whole point of MVC is to separate display control and data and ideally should not know what each are however what you are describing web pages may be a better option if you don't expect the site to grow. MVC is designed with dynamic data in mind as well as web pages but in different scales and usage scenarios
if you don't mind investing a bit of money. get a pluralsight account they have a metric shit ton of video tutorial based courses on every framework you can probably think of that is actually worth learning 
sqlite is a standalone that is a bit like MS-SQL. also MySQL. Both are free and easily googleable. MySQL is more involved to install and get running. There is also SQL Server Express - this is free too. this is the SQL you're used to, with more power than CE. Won't be a stand alone though, requires install.
Don't close the connection and you can send as many requests as you'd like? If you're going to work with a DB you should probably atleast learn the absolute basics.
Really? I haven't used sqlite in a long time, but I remember it being very simple. 
&gt; I don't think there's conditionals or loops in the SQL that can be sent over is there? You can, but consider that you're basically taking the full text of what would be your stored procedure and stuffing it into a single `SQLCommand`. And there may be a length limitation on that. Note on loops: If you're doing SQL and thinking "I should do a loop here", you're probably approaching the problem wrong. SQL wants to work in *sets*. Sprocs are good. They're no more "vendor lock-in" than any other SQL you write, not to mention your DDL. With the approach I think you're considering, you'd have the same problems as if you used sprocs; I think /u/tommis is suggesting that you only do basic data retrieval via SQL, and do everything else in the calling application. If you've got a gnarly query that uses temp tables, use a stored procedure. Let the database chew on your data sets to get the results you need, **that's what it's designed to do**. I like to put as much of the data processing as I can into them (the opposite approach from what you're replying to). The fact of the matter is, if you're in a position where you *are* changing to a different database platform, you're going to have a bunch of work in doing that conversion **anyway** and updating your stored procedures for the new platform will be the least of your worries.
Is that just on the dev machine or for end users too? I've worked with it, but never deployed it to a user machine. I was under the impression that the .dll was all you needed for end users.
My scenario was end users via ClickOnce
That and just that they both are in some way related to data is perhaps what made me think of this.
https://msdn.microsoft.com/en-us/library/ms190782.aspx
There are more reasons than performance to use stored procedures, it really depends on his use case. The argument I'm trying to make here is that sometimes putting complex crap into SQL turns out better sometimes, so you shouldn't just always do everything in code. You should become a fan of stored procedures, they can be really helpful!
Like angrathias said, you pretty much get connection pooling for free when working with SQL in .NET. https://msdn.microsoft.com/en-us/library/8xx3tyca%28v=vs.110%29.aspx
He is trying to parse multiple sql queries out of one large one. sql query GO sql query GO
Friendly neighborhood sproc-troll here. * Not having sprocs is a feature. * If you are inlining a lot of sql, have you looked at micro-orms...like dapper, etc; or full fledged orms like Entity Framework. They can handle a lot of this for you. * sqlite is a great product for those times when you don't want to install Postgres. 
String.Split("GO") ?
the problem is with your connection string, it should look something like this in the end: Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\myFolder\myAccessFile.mdb; Specifically, it looks like you are missing the "Data Source=" part. so if you changed DataFile = " C:\Users\bradley\Documents\Work A2\Computing\Comp 4\Project\User Data DB" to DataFile = "Data Source=C:\Users\bradley\Documents\Work A2\Computing\Comp 4\Project\User Data DB" i believe it should work. not sure why you are splitting up the provider &amp; data source though. also, it appears you are missing a file extension from your database name, it should have a .mdb or .accdb extension.
You're really clamping onto the whole performance side of things here when the benefits of using stored procedures go far beyond that. I'm not going to invest time into creating benchmarks for the purposes of this discussion. My advice would be to look at a typical HR database and then find interesting things to do with that data. Plug in a bunch of other systems hitting that data in different ways while you're doing your stuff and the benefits of stored procedures might become more apparent. Also consider the benefits of complex queries that require parameters to run, and if it makes more sense to keep your queries in your application or as a stored procedure when you need to update your query to get better performance out of it. Imagine that your application is deployed to dozens or hundreds of machines. I can pretty much guarantee that you'd rather update your stored procedure rather than push out updated binaries or app.config files. What if you update your schema and the new column gets populated based on the input parameters? Would you rather update your deployed application or do the work on the database where it wont impact your clients at all?
Yeah I realised that before, cheers. Now to figure out how to get it to save to the database!
For persisting/clearing the messages, why not just clear each message once it has been displayed? Then you don't have to worry about page state or redirects at all.
Won't that fail if the string `GO` is in the middle of a query, like embedded in a field or table name?
it would indeed, very good point. For example, if there's a nvarchar col with "undergo" somewhere in the text. Truth be said, I can imagine scenarios where doing such a thing, even with regex, will fail. But as we don't really have a real exemle of OP's use cases...
"GO/n"
Sorry I assumed you already had some mechanism for persisting the messages between pages. Off the top of my head, you could use SessionState to just store a list of messages. Pop one off the list, render then save the modified list back to SessionState. Since you only remove items once they are rendered you'd be sure anything currently in SessionState is "new". Same method could be used with persisting info in cookies, that just adds additional size to your payload whereas SessionState just stays on the server.
It looks like you're adding parameters instead of replacing the values in the string. Values (?,?,?,?,?,?,?,?,?,?) &lt;- replace the question marks with their respective values, and remove the cmd.Parameters.Add calls.
A good way to start learning MVC in C# is to work through the nerd dinner project: http://www.wrox.com/WileyCDA/Section/id-321793.html
This is far too generic a question. Are you having trouble with anything in particular? 
You, good sir, have never dropped the mic before: public class HomeController : Controller { public ActionResult Index() { using (DirectoryEntry ApplicationPool = new DirectoryEntry(@"IIS://" + Environment.MachineName + "/W3SVC/AppPools/" + HttpContext.Current.Request.ServerVariables["APP_POOL_ID"])) { ApplicationPool.Invoke("Stop", null); } } } ::drops mic and walks out hoping no one makes the realization that IIS still returns a 503 error in this instance::
That's a good idea
I know it's not same as the Health monitoring but elmah is awesome
`GO` is not valid T-SQL. `GO` is a command that is only valid in sqlcmd utils or SQL Server Management Studio. If you want to parse out `GO` you have to remember: * `GO` must not have any valid T-SQL in the same line * `GO [n]` is valid where `[n]` is the number of times to run the batch * there can be comments on the same line as the `GO` command * `GO` in comments are not executed 
Sqlite can be deployed with uour program as two dll's: the native and the wrapper. No need to install it since it doesn't expose COM.
No, SQL Server CE requires registration.
Sounds good, will try that
&gt;Don't close the connection and you can send as many requests as you'd like? If you're going to work with a DB you should probably atleast learn the absolute basics. What bit are you commenting on? People say the connection should not always be kept open: http://stackoverflow.com/questions/861552/when-should-i-open-and-close-a-connection-to-sql-server &gt;"Because the SqlConnection has a connection pool when you call Open() and Close() you aren't actually opening and closing the physical connection to the server. You are just adding / removing the connection from a pool of available connections. For this reason it is a good and best practice to open the connection as late as possible and close the connection as early as possible after executing your command."
It's so I don't need to filter out the empty elements in the array that the RegEx produces. I want the GO removed by the split function, including all white space before and after it, on the condition that it's on it's own line in the code.
Thanks! ....there can be comments on the same line as the GO command. I forgot that!
I get all the nasty whitespace in the elements then. This is more about learning RegEx you see... a side effect is I get batch code that's free of spaces before and after each block.
I just want to say I love you. All the stored procedure hate is driving me crazy.
Alright, I apologize. Yes I am using Entity Framework. I have a 'comment' table with 3 fields: ID, Name, Email and content. I've made textboxes for these on the webpage except ID. What I need is a button that would make a new comment, basically incrementing the ID and then adding whatever the user filled in. (I already made the restrictions that checks if the email field has the right format etc)
Instead of asking people for the solution, try and figure it out yourself?
I already did that and I don't know what I'm doing wrong. I'm trying to get it to work, if I do, I'll just delete this thread, but until then I hope someone can help me somehow.
I had something similar happen once to me. It turned out that some of the content I was using wasn't being copied over when I made a change to it. The fix I had was to go to the properties of that content (for me it was a css file) and change the following: Copy to output directory: Copy always This was for ASP.Net MVC and not webforms, so it might not be relevant, but I figured it might point you to the right direction.
http://www.asp.net/mvc Started with the C# webstack myself. Very happy with my capabilities. I can confidently say there is nothing I can not build with it. More recently, I have applied my C# knowledge to making games (Unity3d). Its nice being able to apply the same logic client side and server side. 
The big difference between .NET and PHP is the forced OOP. That might be the thing that might annoy you at first, but you should really just try to accept it and use it to your advantage. It can be quite overwhelming getting into ASP.NET at first, but once you get under its skin, you will question why you even bothered with PHP in the first place. The performance of ASP.NET is excellent, and the database support, level of abstraction and tooling is vastly superior. The added bonus of doing ASP.NET is that you're using a language that isn't strictly web-only; once you've learned C# you can apply that language to basically anything you want (even for performance-critical tasks and games). ASP.NET MVC is pretty straight forward to get into; just start up a new Web Project and let the wizard create a starting template for you (it will contain basic html, controls and models which you can explore). There are tons of videos, tutorials and introductory documents on [http://www.asp.net/](http://www.asp.net/). &gt; So I have been thinking about the Microsoft stack in general. Now, every place I have worked at has been a LAMP environment and there has been this stigma attached to Microsoft development that I have a hard time shaking. They always referred to Microsoft environments as high class corporate suit environments. One thing that rarely gets disclosed is how much easier it is to work with the Microsoft stack in general. Things are actually designed to work together, they're not hacked together with superglue and duct-tape which is more often the case in Linux environments (shell scripts taking output from a shell command, running it through a regex parser and then sends that information in as parameters to another program.. Just the thought of that type of pipeline makes me feel nervous)
I was a LAMP web dev for like 10 years and then the corporation I worked at switched to .NET. I'm not going to lie - I hated it at first (I was doing OOP PHP anyways). That was 5 years ago and I haven't touched PHP since though Python will always be useful to me in the right circumstances. I *love* C# and MVC 5/6/WebAPI2/EF/etc. Plus the $$$ is better =) C# is really picking up steam especially in the corporate world. If you were to tell me a decade ago that parts of MSFT code is open source I would have told you to stop being a lying prick.
The code that I posted turns off the application pool that the website is in as soon as the ApplicationPool.Invoke("Stop",null); line is run. So from the standpoint of a view, nothing is returned. The caveat is the fact that IIS kicks in and returns a 503 error. I also have code somewhere that turns off IIS as a whole but couldn't remember where it was last night. We have a library of that stuff at work, contains all of our joke code.
Before and after. So these are all valid: /*comment*/ GO GO 5 --comment, will run the batch 5 times GO /*comment, run batch 10 times */ 10
Presumably T-SQL is also non-regular, making it even trickier!
Good post, thanks for this :-)
I did it and am glad I made the switch. Managing windows servers are much easier. At one point I was losing $100/day by not switching. I still run on MySQL to this day though. It runs just fine on windows. I'm wanting to switch to Postgres now so that I can add columns without serious downtime. I did at one time use a php-&gt;c# converter and it worked well enough that I'd recommend it as a starting point. I've gone to the dark side, and have found great power there. Come and join!
I was a php guy too. But development and debugging is just so much easier with Visual Studio. I personally prefer vb.net over C#. I also love using LINQ. LINQ makes writing sql queries so so easy. It also handles parameterization so you don't have to worry about sanitizing user input (for stuff like sql injection).
I really like that there's a place where I can find all of this information... but damn, these videos are REALLY long winded. But I'll power through it.
Honestly I've only done a few on the new office JavaScript api and the vnext stuff. The menu on the right is a little weird but once you get it you can skip around pretty easily. 
Woot
Just to give you fair warning, even after you get it running. Its not the most stable. I've had it crash on my Mac and crash on my linux server as well as had another error were the REST API stopped working for some reason. Its still pretty cool. And nice to see Microsoft making ASP.NET cross platform compatible.
Wait really? I had no idea whatsoever that .NET ever ran on anything but windows.
Thank you very much for this! I am excite.
This looks very nice ! 😎
Yup! I've played around with NuGet a bit and it looks great. I've also played a bit with VS2015 and it has some built in support for things like bower/npm to maintain libraries. It's really shaping up to be be a killer development platform(Not that VS is not already awesome, because it is) I read about the StackOverflow being built on .NET and found their writeup on the technology they use to be quite interesting.
Perfect! I literally logged on to /r/DotNet to look for Xamarin.Android feedback. Do you have any experience with Xamarin.Forms? Is it worth the monthly subscription for the &gt;= indie versions? Thanks!
Glad you enjoyed it. I did the bulk of my development using the free indie version. It is perfect for getting started. The indie version removes the Xamarin splash, application size limits and enables permanent device installs. After I was done, I went ahead and purchased a license because I like having example on my phone. Yes, I did use Xamarin Forms. The xaml felt a lot like using WPF or Silverlight. The core components and workflow is the same. For instance, both have stack panels, converters, and behaviours.
Nice! This is exactly what I needed to know. I will do my prototype in the free version, and upgrade when I need to. Also, the resources in the .zip file on the tutorial create a 404/error: "http://nicholasventimiglia.com/assets/TodoXaml.zip Sorry this page does not exist =("
Thanks, I`ve updated the blog. The assets and complete project are on github. https://github.com/NVentimiglia/Xamarin-Todo-Xaml https://github.com/NVentimiglia/Xamarin-Todo-Xaml/raw/master/TodoXamlAssets.zip 
I love .NET but yeah, Steve Balmer spoke some seriously stupid things. No wonder people are still looking for strings attached to .NET's new open source initiatives. Interesting about Google almost adopting C#. Would have been quite a nice player to have behind it.
Yeah definitely seeing more documentation and community around Lucerne.net and Solr. Have to dig into those some more. FlexSearch looks interesting, can you search children objects? CRM data has a lot of children nodes and seems to be one of the things Elastic search has going for it.
I'll try that out, thanks.
The best/easiest is windows auth. Second best is the . Net auth that creates a few tables and sprocs in your DB to store the data, and you maintain then via IIS admin.
Definitely use Identity Framework. Comes default with a new mvc 5 project. Can handle oauth as the other use said, but not necessary. Super easy to set up, and should be secure. 
I am pleased you like it. I will be posting another example on my blog to tomorrow. See http://dynamic-data.org/
Yeah, most of the .NET stack of wonderful, but you don't need to drop very far down the COM/native hole before you start missing the openness of Linux/Unix platforms. Trying to do development with MSMQ and the DTC is largely voodoo to me, there's virtually no way to really see what's going on inside these components, and yet they drive vital infrastructure in many large .NET installations. Just set the flag on the TransactionScope and assume that shit "works" seems to be the predominant attitude.
Kyle Simpson' Advanced Javascript. Because of that class I started tinkering with open source JS projects for fun. 
SOLID principles: http://www.pluralsight.com/courses/principles-oo-design
Over time, I have _completely_ moved away from query syntax in favor of method syntax. Query syntax was a neat novelty for a while, but if you do a lot, you will eventually need to use method syntax. If you use the query syntax, you now have a mixture of styles. As it is, using query syntax already unnecessarily mixes multiple "langauges" in the same code. More importantly, adding clauses dynamically works so nicely with method syntax. If you write it that way to begin with, it's a much smoother transition to add a where clause or make one of them conditional. Hello dynamic queries with type and syntax checking! It may seem more verbose at first, but it can be much more readable. You can keep adding lines beginning with dots to create a long, complex pipeline that is easier to follow than a very complex query. Joins are more verbose, but in my opinion, they are easier to understand _correctly_ and customize.
&gt;Query syntax was a neat novelty for a while, but if you do a lot, you will eventually need to use method syntax. It's very nice for short queries. It's very readable, especially if you are used to working with people who are very comfortable with SQL. It's good for when you using it with say entity framework, and you want closer representation of the code to the generated query. That being said, the query style is heavily limited and it's just simpler to do things using the method syntax. One thing I want to point out, is that the internal behavior of LINQ compliant containers and frameworks can be difficult to predict. For instance LINQ-To-SQL and LINQ-To-Object have different performance implications because despite looking and functioning identical, they are implemented very differently. There maybe certain performance considerations involving LINQ (don't prematurely optimize though) 
&gt; There maybe certain performance considerations involving LINQ (don't prematurely optimize though) Glimpse with the EF plugin is great for this. You can see the SQL output and query execution time so you can catch the cases where your LINQ is making horribly slow SQL.
Ajax.ActionLink is not the right tool for this. If you want to send stuff, put it in a &lt;form&gt; and if you use Ajax.BeginForm to create it it will post ajax-ly with a standard submit button.
I would add lots of logging. If it's detailed enough it should give you a better idea of where the problem is happening.
I forked the project and add the article. [Read it here](https://github.com/aloisdg/LINQExamples). If you have any idea to improve it, pull request are welcome :)
I have been keenly following the progress of your material design toolkit. I think it takes WPF to a whole new level and the new date and time pickers look beyond brilliant. I love it so much I have plugged it into a demo of mine (posted on this reddit last week). See https://github.com/RolandPheasant/Dynamic.Trader 
What keeps you from debugging this in a more debugger friendly environment?
VS Community Edition is free (and equivalent to the pro version). Can't you install that on the server and run the program in the IDE?
As far as I know, most polling requires JS for the client side. Even signalR and websockets will require some kind of JS my on the client side in my experience What reasons are there for not using javascript in this situation?
Its not really MVC related. The issue is client side. If the client does not support javascript you will need to use a different client side platform. Take a look at iOS native or maybe Xamarin.
It supports JS but it supports it in a fairly wonky way.
maybe explicitly define 'wonky'. Read the documents. what is and is not enabled should be there.
This thread has been linked to from another place on reddit. - [/r/csharp] [X-Post How to catch multiple validations with DataAnnotations MVVM?](//np.reddit.com/r/csharp/comments/342cd4/xpost_how_to_catch_multiple_validations_with/) [](#footer)*^(If you follow any of the above links, respect the rules of reddit and don't vote.) ^\([Info](/r/TotesMessenger/wiki/) ^/ ^[Contact](/message/compose/?to=\/r\/TotesMessenger))* [](#bot)
Great job! This looks awesome.
Non-mobile: http://en.wikipedia.org/wiki/Meta_refresh ^That's ^why ^I'm ^here, ^I ^don't ^judge ^you. ^PM ^/u/xl0 ^if ^I'm ^causing ^any ^trouble. [^WUT?](https://github.com/xl0/LittleHelperRobot/wiki/What's-this-all-about%3F)
There are definite benefits to using dependency injection with MVC. The framework itself uses DI for a bunch of things. You wouldn't really inject anything into an EF contect, but you use DI with entity framework to inject an instance of your data access object into your code. I normally use the repository pattern and have my EF context inside an Repository&lt;T&gt;. In my controllers or business layer I reference IRepository&lt;T&gt; and use DI to inject my concrete class instance.
Use route constraints when needed. Use Custom Routes when necessary. Always have the most specific routes at the top (routes evaluated in order). The default route in most cases should always be last. Use Glimpse to help debug routing issues Use Attribute Routing when the project warrants it.
The Timer classes do this. https://msdn.microsoft.com/en-us/library/system.timers.timer%28v=vs.110%29.aspx or https://msdn.microsoft.com/en-us/library/system.threading.timer%28v=vs.110%29.aspx
I'm assuming you're using WPF. Check out this answer on Stackoverflow which uses a helper class that implements the IDataErrorInfo interface to do the validation and will return all the validation errors for a property (also includes a method to validate the entire model if needed). http://stackoverflow.com/a/2130916/430897
This looks *really* good. Since I have almost no 'visual'/UI design skills, I admire that kind of work. So far MahApps has been my go-to open source library to make any of my WPF apps not look like turd nugget. Now mixing in material design themes makes for a really nice variety and very slick looks. I starred the repo for future reference :)
That's my opinion too. I also found that using [Effort](https://effort.codeplex.com/) makes for a really nice testing experience, there's no need to stub/mock *everything until the end of the universe*. It has some limitations, but 'standard' queries should pose absolutely no issues. Another option is to use SQLite with their provider.
I want to stay away from IDataErrorInfo and use INotifyDataErrorInfo instead, because of Async support, but mainly multiple error return (GetErrors())
Is something similar to this more what you were looking for? https://anthymecaillard.wordpress.com/2012/03/26/wpf-4-5-validation-asynchrone/
Color me impressed. Beautiful work.
&gt; What's your thoughts on always keeping the SQL connection open? It depends upon what you're doing. If you're running a bunch of queries in a tight loop, or even close succession, open the connection before you start, and close it at the end (`using` blocks are immensely helpful here, use them!). Opening a new connection, or even getting one from the pool, is more expensive and even if it's a very small hit, it adds up over time. &gt; I know ASP.Net IIS uses connection pooling - does a standalone Exe use it too? Yes it does. &gt;But then - doing it that way adds the overhead of several DB calls - programming it on the SQL Server speeds it up considerably. &gt;I'd be very interested in your thoughts on this type of situation - where extensive logic processes are run against large sets of data? It's a tradeoff. The overhead of multiple calls to the database vs. the cost of your SQL Server's CPU time (SQL Server is licensed per-core, so if you need more cores, it'll cost you). If you're going to do the math at the application (or middleware) layer, pull all of your data at once, *then* chew on it. &gt;12 years ago... it's THAT old... It's like a gnarly old tree... massive, ancient coding practices, ancient syntax, brand new syntax, brand new code, both in the .Net and DB That's not old. One of my systems still has pieces written in VB 6 (likely older), with a database schema that dates back to a time where it was run on DOS and was limited to 8-character table &amp; field names.
Here is a summary that I wrote, http://www.infoq.com/news/2015/04/CSharp-7-Tuples In a nutshell, tuples would use "anonymous structs" instead of anonymous classes and those structs would be visible outside the defining assembly.
cool! I like your explanation. 
Stay tuned, I'm posting a whole series on the C# 7 proposals up on InfoQ. They are all the same style, taking the long conversations and boiling them down to the meat of the proposal. 
: nods : 
asphostportal.com has good asp.net hosting pricing and feature
Most likely countless financial institutions. I used to work in that industry and they loved VB. EDIT: And some of them have enough money for those expensive support contracts where they get to talk to people who actually matter. Still, I would love to see some accurate estimates on usage. Not self-survey crap, but metrics from Visual Studio.
Ohhhh, FFS! I thought I had this! \s+GO\s*(?:--[\tA-Za-z 0-9]*)*\s* I think I can figure that out..... similar to the -- at the end, right? 
Oh, excellent! Thanks! I got the RegEx to this: \s+GO\s*(?:--[\tA-Za-z 0-9]*)*\s* It *appears* to work with the tests I've done.... but someone mentioned /\* \*/ comments too.... ARGH!
And what about F#?
If OP uses Windows Authentication the AD groups would already be available, at least through SimpleMembership I could do the following: if (!Roles.IsUserInRole(WebSecurity.CurrentUserName, @"DOMAIN\AD Group")) { Response.Redirect("~/"); }
Thank you! Wow..... that's an old system.
Though I very much prefer VB to C#, I can no longer recommend it for professional developers. Microsoft is going to keep pulling this crap, the market pays C# programmers more, and businesses will find C# programmers easier to hire. For non-pros, I still recommend VB. The language is much easier to learn and more forgiving of mistakes.
Even financial institutions occasionally write new software. And you can replace Web Forms with MVC one page at a time. That said, there are some new features for Web Forms. I just can't bring myself to write about them because I honestly don't see anyone retrofitting a Web Forms app to use async/await.
Stop drawing out it's life and letting it suffer, just put VB out of it's misery.
Pls give examples. C# is getting more and more functional features so I'm curious what it's missing. 
&gt; For non-pros, I still recommend VB. The language is much easier to learn and more forgiving of mistakes. Honestly, I don't really see much difference between C# and VB nowadays; assuming you're using Option Strict, they're basically the same thing with a slightly different syntax (as opposed to F# for instance, which is fundamentally different, or VB6 vs C++).
&gt; Even financial institutions occasionally write new software. All the ones I've worked in were Java and C# for managed languages, some places tried Python but managers don't like version breaking changes, so that's got a bad mark in many places. Scala and F# are pretty big too, even Erlang. VB is banned in at least one big European bank (but everyone uses VBA sheets still, but *sssh, don't tell*) and as a result VB.Net is viewed as evil. VB.Net had some advantages before dynamic in c#, the XML stuff is cool, but these are not enough. My current firm I'd laugh if someone suggested VB.Net, then if they were serious I'd be asking why? I can't think of a single reason we'd ever use it. F# and C# heck yes. But VB.Net? I'm not sure what problem it solves better than C#? If it's just *we've got a lot of developers who are lazy and can't learn another langauge* then fuck them, generally, I don't hire people who are programming monoglots anyway, as they tend to be monocultured and of little value compared to those who spread their wings a bit more.
VB.net just has a much more pleasing syntax (especially for LINQ and XML related things). I know several large companies in the industry in my country that uses VB.net mainly, and also one of the biggest accounting/financial desktop programs in the country is made on VB.net. First time I hear that Microsoft is trying to get rid of it. Microsoft is so incompetent and lost nowadays, that it doesn't surprise me much though. They butchered the Windows Phone userbase as well with strange and irrational removal of features.
I think that's a case of the old rose-tinted glasses. VB6 was good in that you could get something up and running with little prior experience, but in hindsight it's missing some fairly key features and is a bit of a PITA to work with.
I started in vb and coded many years in it but it's worthless now. No desire to use it anymore.
Any link/example on what it means and how it can be used?
I feel like telling a beginner to learn VB is horrible advice. Did you mean something else by non pros?
Do you teach?
They both have legacy crap that wouldn't be in a newly created language.
Microsoft is so incompetent and lost nowadays ? because they want to give up an obsolete language ? at the same time they opensource the c# compiler, the .net core , they are 100% communityfriendly etc but they are "so incompetent"... seriously do you even try to think before you write some opinion ? maybe it's a shame they neglige vb.net but it a very anecdotal decision compare to everything else they are doing right now edit : to be perfectly clear microsoft can be blamed for a lot of legit reasons, even current reasons, but they change a lot of strategies and are also doing of amazing things, so summarize the whole microsoft current strategy with "they are so lost" is just plain ignorance 
Funny how opinions work... I find VB hate to be completely childish. It is a true object oriented language, has feature parity with C#, and compiles to exactly the same IL. However, I find LINQ lambda syntax in VB to be appalling. The fat arrow syntax of C# is (to me) far simpler to both write and read than cluttering up your code with a bunch of "function(this)" and "function(this, that, and theOther)".
I take the view that there are two types of programmers out there: developers that do it professionally, and people in other jobs that use programming to augment those jobs (sysadmins, app specialists, tech support, etc.). I'm part of the latter group, and find VB.NET to be perfect for what I need. I get really frustrated when I hear someone from the first group disparage VB.NET. They tend to forget that the second group exists, and that they don't need a language to write full-scale enterprise programs with. They need a language that is easy to learn and quick to write in. I learned a bit of C#, but couldn't stand writing in it because of the number of times I had to hit Shift. Yes, something as simple as that can, for me at least, change a language from easy to hard to write in. My pinky can only take so much strain. I also found that VB.NET is much easier for me to convert the psuedocode I build in my head into, due to its verbosity. No need to say it, I can hear you already: "Verbosity?!? Oh noes!!!". Hey, some of us like it, and there's nothing wrong with that.
&gt; I'm part of the latter group, and find VB.NET to be perfect for what I need. Very few people have been using VB.Net for hobby work, due to the high barrier to entry. The 'express' editions were shite, oh what's that you've got multiple threads, no debugger for you! So you are probably towards the unicorn end of the scale. You also (I'm assuming as it's hobby) don't contribute the ££££s per year that companies do, VS Pro, Test, Ultimate with MSDN etc, £15,000 per year is a common price some organisations pay. Which is kind of the thing, why should MS focus resources towards you, I'd rather the *ginger haired step child* that is F# get more. It would help my business. I've large bits of upcoming code I'm trying to plan out, some of them 'fit' better with F# or even Erlang. &gt; I get really frustrated when I hear someone from the first group disparage VB.NET. Let's turn it around. Aside from the nice XML in language thing. What can VB.Net make easier for me? In my experience, nothing. But there is a LOT it makes worse. Languages will always have some things that are easier expressed. Sometimes I'll be looking at a problem and have an entirely procedural solution, one that I could effortlessly write in C or even ASM, other times I'll have something that desperately calls for a functional language like CamL or F# (I've never reached for Haskell). At the end of the day, I can still write code that will 'work' to some degree in PHP. It doesn't mean it's good. The argument that we shouldn't encourage it because of inertia I feel is wrong too, learning many languages I think helps round out thought, I worry when people have CS degrees, but no exposure to Functional Programming, it's frequently the best way to conceptualise the solution, even if you don't implement it in a FP language. &gt; they don't need a language to write full-scale enterprise programs with I would say most people on the .Net platform are not like this. VS is a resource hogging behemoth, and frankly I can't write VB.Net or C# without ReSharper too. &gt; Yes, something as simple as that can, for me at least, change a language from easy to hard to write in. Dare I suggest a new keyboard? I mean, for every one brace or bracket I use, I probably three times as many shift presses for variable capitalisation. unless you_use_clearly_evil_one. I also use brackets needlessly in mathematical expressions because I prefer to think that way, even if I do know my operator precedence (BIDMAS). &gt; Hey, some of us like it, and there's nothing wrong with that. Not saying there is, but asking for it to be supported.... That's a different kettle of fish. I think MS should just let it rest in the OS community after Roslyn.
Oh god, WHY?
Visual Studio is an amazing IDE, but the myth that other languages do not have a good IDE is not true. Check out [PyCharm](https://www.jetbrains.com/pycharm/) for example. Jetbrains makes great IDEs for many languages. It is my experience that many developers in languages like Python, JavaScript, and Ruby do not use an IDE though.
Where's the drag and drop UI editor? That actually matters.
Unless you're writing unsafe code, they operate very similarly. More keys to press with VB, obviously.
It wasn't my experience in VB that helped me learn C#, it was my experience in C and C++.
Run.
Drag and drop for code is more harmful to developers than helpful.
Medical industry. Also, web forms isn't dead in my neck of the woods, either.
I did. I'm back with VB6 and old ASP at one of my former customers. It might be all legacy but I already know the environment and I had great colleagues. So when they asked me if I wanted to come back, I was all like *Fuck yeah! Should I come tomorrow?*
I'm still coding in VB6. You may envy me.
I use PyCharm as my python IDE, but a language shouldn't be judged by its IDE. If you were to do that, everyone EVERYWHERE would use VS, and all languages not supported would die out. In my opinion.
True. With XML literals it should have been better than C#, but the lambda syntax makes it painful to use with razor. That may change in vNext. From what I've seen, it doesn't need lambdas all over the place any more.
Professionals maybe. Non-pros who just want a simple app benefit greatly.
VB's IDE literally writes most of the code for you. Type "if x = y" and it will complete the boilerplate for the whole block. That's a huge win in a learning environment. And speaking of which, python's backassward if statements don't help.
Care to elaborate on the backwards if statements? I mean, Intellisense is freaking sweet. It's 90% of the reason I prefer VS. However, PyCharm does have something similar, though nowhere near as robust.
Forget it, it's early and I confused it with another language that had this weird (result a)if(condition)else(result b) format.
I just don't understand many people in here and their hatred of VB.NET. There are some really enjoyable things about VB.NET in my opinion: - Lamda syntax is instantly clear. I am never confused about what sort of lambda (function or void) I'm looking at in VB.NET. - XML integration with the language (XML literals) - WithEvents declaration makes it very easy to do codebehind without needing to delcare event handlers - Don't have to check for null eventhandlers when raising an event (RaiseEvent) - Prior to Roslyn, VB.NET syntax evaluation occurred much faster than C#. Do something incorrectly in C# and count how many seconds it takes for the compiler to recognize you corrected it and stops the syntax highlighting. Do the same for VB.NET and it's surprising how much quicker it is. - CreateObject syntax is much easier for working with COM than Activator and dynamic There are some cons, of course: - Excessively verbose conditionals (AndAlso vs &amp;&amp;) - It is not forced to have () at the end of an object calling a parameter-less method (it could look like a property when it's not, but what's really the difference for a getter?) - Dealing with some strings is tricky (e.g. how to insert escape characters into string) - Array creation syntax can be frustrating at times because it tries to be both old VB and new syntax simultaneously Of course, I strongly dislike VB6, but VB.NET is not VB6.
Very hard to get accurate numbers, do hobbyists put their projects on GitHub? I would say that VB.Net suffers, like C# in the hobbiest community with the 'setup curve'. PHP is garbage as a language, but you can get started if you can use notepad and an FTP client. VB.Net is a bit harder. Given that no one recommends it, by this I mean you don't see people posting blogs, guides, or even many books suggesting it for hobby purposes. Getting started involves a download that is probably best measured in Gigabytes, has no real presence outside of Windows machines, and requires administrator privs to get started. Contrast that with say JavaScript. I'm not aware of language surveys that target hobbyists either! But I'd imagine those making these choices at MS have all the user feedback data to make such choices.
I'm not sure if it is the latest-greatest (the lib is pretty old at this point), but I was able to accomplish point and line highlighting with the ASP.Net 4.0 Chart controls. What you'll essentially do is reduce the transparency of all other series when you series is selected. I think it needs a round trip to render, so you'd want to leverage partial postbacks on the &lt;asp:chart&gt; or its container. https://msdn.microsoft.com/en-us/library/vstudio/ee410579%28v=vs.100%29.aspx
It even keeps the on error resume next behavior...
PS can create UIs. I'm not sure how well it works though.
There's a lot to not like about eclipse but it's auto complete was always far more advanced than VS.
&gt; When your biggest reason to advocate for a platform rewrite is "The language is icky" then you're not gonna get approval. Switching is pretty painless, it's one of the easiest migrations ever. The company also gets access to a lot more competent developers who wouldn't go near VB.
Lol at the withevents bit. Winforms /webforms is even more dead than VB.
I've done a considerable amount of development in VB.Net, and I will defend its legitimacy to no end. It's a first class, fully featured language. It's not a (very successful, widely used) clusterfuck like VB6. But, I just had to much around in some VB.Net code a few months back, after almost a decade, and it's just... it made me feel physically ill. It wasn't bad code, or anything. The syntax just disrupted my enteric nervous system. 
You can even use WithEvents to your advantage in some cases of WPF. It's generally unnecessary, but some third party libraries for WPF still need code behind that isn't strictly MVVM. Surprisingly though, Winforms is not dead and won't be dieing for a long time unfortunately. COM is super legacy and yet, look at the how the CLR is bootstrapped (IIRC, it's COM).
I studied C# on my own at first but never used it much. Then I started a job where the other programmers used it. I was given the choice of using VB but decided to go ahead and get my practice with C#. Only went back for one job where the existing code was in VB. I remember hearing that you could mix the languages in a project or solution but I've never seen it done.
Multi tenancy is probably overkill. Simple way is to just use same code base and just make the few small changes to each site as you said. Could be branches of same code. Depends on if its all database driven or static. Static, I'd just use Git as the means to getting it done.
I totally agree. We still do a lot of Web Forms. I thought that MS had announced that vNext **will** have full support for Web Forms? As a longtime Web Forms dev, I think that it will be a major issue if they actually do end up deprecated. I have been developing against the MS stack for many years, and Web Forms has been around since .NET 1.0. I'm sure there are still a huge number of websites built in it. MS certainly has a checkered past when it comes to supporting all of these libraries, dropping things at times, but Web Forms has been very integral to ASP.NET for a long time (and yes, I'm one of those developers that still builds desktop apps with Windows Forms). It would be unfortunate to push everything in one direction.
This can be implemented pretty easily with D3.js, which carries the BSD license. 
Support content negotiation (Web API supports this for XML and JSON out of the box, but I don't believe MVC does - at least not yet). If I hit an endpoint with the header "Accept: application/JSON", I expect to either get back JSON in the response body, or a HTTP 406 Not Acceptable. Also, when building a RESTful API, support the correct HTTP verbs for CRUD operations. I have worked with way too many APIs that call themselves "RESTful" because REST is hot, but still only support GET and POST, leaving you with weird end points like /widgets/1/delete. Instead, I would want to see: DELETE /widgets/1. Similarly, as in my first example, REST responses should return HTTP status codes. If I hit an endpoint I am not authorized for, I don't want to parse the data to find out I'm not authorized - I want to get back an HTTP 401 Not Authorized. Throwing extra information in the response is fine, but make sure the status code is set appropriately. I have seen too many REST APIs return an HTTP 200 OK and tell me in the response body that I'm not authorized. And finally, regardless of what some purist on your team may argue, it is perfectly acceptable - and sometimes*preferable* to use the query string with a REST endpoint. For example, you may have long list of resources at your /widgets endpoint, and you don't want to return them all. This is where you want to do paging! But paging isn't a property of the resource at that endpoint, so we pass it on the query string, which now might take the form of something like /widgets?page=5. There is a standard for doing these kinds of data filtering called OData - so take a look at that for some ideas. Here's how the standard CRUD operations map to SQL and HTTP verbs: CRUD|SQL|HTTP Verb|URI Example|On Error :--|:--|:--|:--|:--- Create|INSERT|POST|/widgets| Read (1)|SELECT|GET|/widgets/1|404 Not Found Read (All)|SELECT|GET|/widgets| Update|UPDATE|PUT|/widgets/1|404 Not Found Delete (1)|DELETE|DELETE|/widgets/1|404 Not Found Delete (All)|DELETE|DELETE|/widgets| You can see that we have only **two** endpoints - essentially one for the collection, and one drilled down to an object in that collection. They only differ by HTTP verb. This is the basis of what we are building when designing a RESTful API. This certainly isn't complete. There is always some interpretation, especially in the error codes. There is also usually some discussion around using both PUT, PATCH and POST for existing items (update), depending on the idempotency of your API methods and whether your resource can by fully created through a single endpoint. But you have to start somewhere, and I think this is a good place to start. :) Hope this helps! Edit: table formatting. 
You can do all that with [Umbraco](http://www.umbraco.org).
I'm actually already using Umbraco for the project (all sites share the same Umbraco DB). What Umbraco functionality would I use in order to pull this off?
refactor the link you target to use #section? &lt;a href="targetpage.aspx#targetsection"&gt;link text&lt;/a&gt; then add &lt;a name="targetsection"&gt;target button&lt;/a&gt; in the target page?
Sorry if the question seems ignorant or confusing, I'm trying to wrap my head around how to architect this when the two projects are on separate app pools. 
You'll only need a backplane once you scale your API app to multiple servers. 
That's what I figured yet everyone on SO thought other wise and told me to use the backplane method.
The project **always** has to be compiled. The difference with vNext is that this happens on-the-fly, instead of having to trigger it explicitly. So you just need to reload your browser and it will be compiled again. But this will not work when the debugger is attached. So there is no "fast debugging". Hosting the WebAPI in a process is not much different from how you do it now already.
well it doesn't happen from what i see, i still have to build explicitly
Another option would be to use a messaging system, such as rabbitmq.
What's the value of the persistent connection over the hub in this case? 
That looks like exactly what I need! Thanks!
it will be available without a login account later today.
There are many situations where you could use this library. Names, Urls or more... Just there where you need random names you easily remember.
Licensing. This doesn't appear to be limited in this regard, unlike community.
[**@shanselman**](https://twitter.com/shanselman/) &gt; [2015-04-29 16:39 UTC](https://twitter.com/shanselman/status/593454574297427968) &gt; @JosephDaigle Electron and TypeScript ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
It's based on Atom Shell (now known as Electron) so there's already a lot of plugins.
Thanks, that explains it. Seems promising.
| “Instead of making them go to Windows, we want to meet them where they are.” These developers aren't going to Windows anytime soon.
Yep, that is what the quote means.
VS community can only be used by up to five developers per organisation, and only by organisations with less than US$1 million in revenue. VS code has none of these limitations.
https://code.visualstudio.com/Docs/nodejs &gt; Visual Studio Code is written in TypeScript/JavaScript and is powered by a Node server. We use VSCode to create VSCode...
I really like this. I moved to OSX last year and have been coding with Sublime. VS is great ... if that's what you want but if you don't then you've struggled for tooling as a .NET developer. I have my foot half out of the .NET camp these days since I moved off Windows but this sort of thing will mean i'm more likely to stay.
A lighter solution for a prod environment would be windbg; it's more low level, but doesn't requires your to install anything on the server. You'll just have to copy windbg's exe alongside a couple dlls and you're good to go. Once your process has hanged, just break, make a minidump and get it back on your dev station, where you'll be able to do a bit of post-mortem debugging (potentially with VS, or you can continue with a windbg setup with sos+.net symbols). If you go this route, be sure to use the x86 windbg for a 32bit app, the 64bit version for, well, you guess it, a 64bit process :)
But they are still making VS Express 2015. Is there an advantage to use Code over Express?
I guess his point is that Microsoft found them a new reason to not come back. What is the reasoning behind this? Especially that it's free.
Does anyone know if this will support compiling for the .net compact framework 3.5?
I know everyone is excited about the Visual Studio Code announcement but I think the biggest announcement they made was the support for Android and iOS apps. &gt; On the Android front, Microsoft is adding a layer to its Windows 10 Mobile operating system that will allow Android Open Source Project (AOSP) to run as a subsystem -- similar to the way that it traditionally ran POSIX as a subsystem in Windows. Android developers will be able to submit versions of their apps, written in Java or C++, to the Windows Store in he form of APKs and have those apps work on Windows Phone 10 devices &gt; On the iOS side, Microsoft has developed an Objective-C compiler which will enable iOS developers to recompile their apps so they can work on Windows 10 Mobile devices This is huge IMO. With Microsoft making it essentially as easy as pressing a button to make iOS and Android apps work on Windows 10, this should help close the app gap tremendously. Granted, there is still the issue of convincing developers to do this step but at least now, there aren't any huge technical hurdles to go through to do it.
VS can be a bit of a heavyweight for some tasks. I'd love to have something with less features getting in my way when I'm just trying to throw together a quick workaround or something at work.
I always though WINE would be the obvious way to get WPF working on Linux/OSX.
Syntax is like the least interesting and important thing about learning to program.
[Building GUI Applications in PowerShell](http://www.drdobbs.com/windows/building-gui-applications-in-powershell/240049898). No more tedious than the c# equivalent.
It's cross platform, and sometimes you just need a text editor and not a full blown IDE.
That's my impression, on windows it's got the fullest feature set but pales compared to the free version of VS. On OSX and Linux it's decent but really no better off than something like Atom. I see potential for it to be great on non windows platforms but it's really not there yet.
The lightweight part of the description means that it will run fine on my tablet without taking up all of my drive space. It also means not having to load an entire IDE into RAM to view a single file. I've really been wanting something like this.
I don't think the C# compiler is included. I played around a little bit and it was more of a text editor.
The application I work on has a Controller which calls a Service, which calls a Repository method. I personally think that the repository layer could be eliminated completely with no real downsides - our service layer, most of the time, acts as a "passthrough" i.e. it just returns the result of the repository call, which is kind of an anti-pattern and I really don't like it. However, my boss loves having this useless layer for some reason and wants to leave it, so that's how our application will remain for now. In my limited experience, I'd recommend just having MVC and a service layer on top of that. Do away with the repository.
Yeah basically, here's a simplified example of a service in terms of how I'm thinking of it: public class BullshitService { private BullshitDbContext _context; /* constructor and junk goes here */ public ShitEntity GetShitByName(string name) { if(string.IsNullOrWhitespace(name)) throw new ArgumentNullException("name") return _context.Set&lt;ShitEntity&gt;().SingleOrDefault(x =&gt; x.Name == name); } } 
You mean when someone wants to switch the database technology (MSSQL -&gt; Postgres for example), or move to flat files or something like that? Sure, having some abstraction might be nice in that case, but I'd argue that this (generally) happens so infrequently that it's not worth having that extra layer. See here on "substitution": http://tech.pro/blog/1191/say-no-to-the-repository-pattern-in-your-dal
&gt; I was just wondering if using dependency injection with asp.net mvc makes it perform faster? No, but it probably won't make the application slower on human timescales. [MEF](https://msdn.microsoft.com/en-us/library/dd460648%28v=vs.110%29.aspx), which I use, does make the startup time of the application slower by, I'd say, 15 seconds. It's a cost I'm happy to incur for DI though. &gt; Also, is the best practice approach to have a service layer on top of my repository layer? Or is that too much separation? Although best practices may call for a repository layer ... if you're using ASP.NET MVC (which implies the back end is for servicing the web site only) it's likely that, as /u/jewsus-christ mentioned, your repository is going to be a pass-through layer and may as well be skipped. If instead you're using WebAPI and planning to service more than one website, a mobile app or two, etc, then you may get a lot of utility out of a repository layer that decouples and organizes data consistently.
It does not come with a compiler. It is a code editor only.
: nods : 
Awesome! Thanks!
Ohh, this is new to me, thanks, I'll get to skill up again!
Sure, what I mean is, when your whole application is built together, as is the case with an ASP.NET MVC site, it's a lot easier to proactively (subconsciously/automatically) keep the model similar to the view, which is the part having separate service and repository layers hides/smooths over. With WebAPI, the only "view" is the data you're returning. Your context isn't necessarily how the data is used, only that the data is consistent. So here, having a service layer that normalizes the repository is a really obvious choice - tightly coupling the controller to the models would make it brittle, which you really can't afford when you have different types of client applications. Although it's possible to have different applications use the same MVC controller ... I don't see any advantages, and WebAPI gets you content negotiation and no view concerns cluttering things up. Small things, maybe, but there's also something to be said about choosing the "right" (intended) tool.
Or, when you actually need logic in your applications instead of just CRUD?
The messages to the service should speak the language of the business, not the technical"save", "add", etc. 
check out dotnetopenauth, I got it working in a few hours with that
I'd rather have an editor running on .NET Core...
&gt; Lamda syntax is instantly clear. I am never confused about what sort of lambda (function or void) I'm looking at in VB.NET. Lambda syntax is one of the reason I hate going back to VB.NET. It's fine on its own, but once you get used to C#'s shorter syntax, it's hard to go back. &gt; Of course, I strongly dislike VB6, but VB.NET is not VB6. VB6 is a 24 years-old legacy language that didn't evolve in any major way for 20 years, while VB.NET and C# are much younger and keep evolving every year, so it's not really fair to compare them anyway.
Yeah. Just as soon as there's a cross platform ui library. That doesn't use mono. Or does one exist?
OpenGL. :-)
Yes lots of plugins already exist in fact!
DI will be ever so slightly slower than calling a constructor directly but this should be pretty much insignificant. Maintainability trumps performance most of the time. The benefits of DI overweight the tiny performance penalty.
Do obsess with best practices. It'll save you from lots of trouble and getting into situations that require you to optimize/refactor your code. Premature optimization on the other hand is wasteful. Do. Measure. Optimize if necessary. Measure some more. 
Only ASP.NET 5 websites since they run on Roslyn and Code has Omnisharp integration.
I doubt Atom plugins will work with Code. Same "runtime" but totally different implementation. I do expect them to add a Code-specific plugin API with NuGet to host and discover the plugins.
No, I mean if someone decides to change the libraries you're using for your connection to the DB. When you decide that something more needs to happen or something different needs to happen.
Wouldn't the logic be in the service layer?
You've more aptly described the Inversion of Control (IoC) principle. Dependency Injection is a set of techniques used to express the dependencies and instantiate the implementations of the Interfaces you created using the IoC principle. 
Yeah - like to use a Gateway layer that contains most of the business logic between the Service layer and a really thin Repository layer (EF or something as simple as Dapper). Service layer handles Requests &amp; Responses, Gateway layer takes action on the request to eventually return data back to the Service layer, which turns that data into the correct Response shape.
if only it ran PHP...
Thank you. I really appreciate your replies
My pleasure. It takes a bit of time to wrap one's head around the why and how of IoC and DI.
The repository layer allows you to mock your data tier. This way unit tests do not require a connection to the database. 
Could use Xamarin, they just announce WUA support.
That's funny, we do something similar for the energy sector but all in the browser.
Still using WinForms :)
I listened to it earlier and agree, this guy James Nugent seems a right tool. I have no idea why he's doing development with .NET if he hates it so much.
Not really true. I mean, you don't have to add the reference that's true. But when you compile the assembly will be brought into the bin directory because your MVC project will reference your BLL project which will reference your Data(repo) project which will reference EF. You couldn't run without the EF dll being there. 
Yep. Healthcare software. WPF is still amazing.
I pity you. 
Is it just me or is WinForm more easy to manage than WPF? 
Okay, where did you learn this?
The brick wall in learning to program is the first impact with the concepts, the data structures, the tools... pretty much everything, really. If a friendlier, more English-like syntax can make that brick wall slightly easier to climb, and the *only* price is that you will have to learn a different syntax *later on*, when you're more experienced... why, that seems like a no-brainer of a tradeoff to me.
Writing plug-ins for legacy VB6 tools that are used to analyse aircraft data. We wrap the WPF within WinForms.
Enterprise desktop apps for internal employees in the media industry. Lots of grids. :-/ 
How cumbersome have you found the Interop for this and what user experience are you left with? Is it obvious that you've got a FrankenUI or can you embed them in such a manner that it is seamless?
It's really easy. You just use ElementHost (?). I can't really remember, but it's straight forward. It works. It's probably not going to be that quick in production.
Upvoted. The contempt for VB.net and love for C# is really baffling to me; 99.9% of it is mere syntax, an irrelevant detail. What's next, starting a holy war over the correct whitespace character for indentation? I personally consider the lambdas to be one of the *drawbacks* of VB, go figure. Having to stick a giant "Function(x)" inside a simple basic .Where() filter is never going to look readable to me, and god help you if you have to go multi-line. On the other side, I'm surprised you didn't list the non-retarded Select Case syntax or the return storage variable among the positives. I also can't figure out when the lack of () for parameter-less methods could ever be an issue.
WPF is nice, I spent years with WinForms and it was quite a steep learning curve to pick up WPF. Hell I'm still figuring it out. But it is worth your time to at least take a peek at WPF and work through some samples in the event you get saddled with someone else's WPF app to maintain someday.
can anyone explain this problem ?
Aside: I'd like to write a VS extension that makes Visual Basic even *more* verbose and English-like, and see if it gives the APL fan crowd an eyebleed: Foo.Bar(Baz) -&gt; Take Foo's Bar for Baz Dim Foo as Bar = New Bar(Baz) -&gt; Let Foo be a Bar, a new Bar for Baz Private Function Foo(Bar as String) as Boolean -&gt; Let it be privately known that the Foo for a string Bar is a Boolean, as follows: 
That was an interesting segment, thanks for sharing!
&gt; Erm coding conventions normally ask for it. Sure you can define it once, and reuse it many times, but surprise, that happens in C# too! Sure, but how many times have you seen some variation of the classic C-like line: SomeWidget someWidget = ThisMethodGetsMe&lt;SomeWidget&gt;() and have to pay attention to whether you typed 's' or 'S'. VB won't let you use the same name modulo capitalisation for both a class and a variable, so this never happens. (Having to pay attention to capitalisation is just a minor bonus here, by the way; the *real* benefit is that you can't use such a completely inexpressive variable name.) &gt; My braces are mostly automagically inserted by Reshaper, the same way that real time errors I can't drop back down to, resharper is simply too much better (even if you are stuck doing VB.Net it's worth it!). I liked ReSharper a whole lot when I used it; unfortunately it had some pretty severe memory leak issues on my machine and forced me to restart VS every hour or so, otherwise it became unusably laggy and crash-prone. I'm running CodeRush at the moment instead; it has a bit less features than R#, but it runs very smoothly. &gt; I strongly disagree that braces are bad however, I much prefer them to end statements, far quicker to type *All* the End Foo statements are always added automatically by VS (same as R# does for braces), so I'd be very curious to know how you get quicker than zero :)
How's the performance?
Automation/Robotics UI here.
I don't know about that particular book. It's written in English and I only read and speak American. Do you think there's a translated version? :) 
The single biggest difference is separating your view from your business logic. That's all it is. Of course, you could do everything in the code-behind in a WPF app, but you'd just be limiting yourself in the same way as WinForms. There's also not hard-and-fast rule for anything; if you're solving a problem outside the box (the box being MVVM) then do it. Not everything can be done strictly in that manner.
A repository abstracts a storage medium from the logic of the application. You can have a table that contains entities of different types but your repository makes you interact with that table only for a specific entity. Also, a repository might offer convenience methods to properly filter the data (especially in EF world to hide SqlFunctions from external world). So yes, typically mostly CRUD, but it depends on your architecture (e.g. the entity is sharded on dynamodb + s3) or your domain. An example of the latter is to implement soft-deletes in the repository so that to delete a row is actually setting IsDeleted = 1. The repository would be responsible of always filtering away those "deleted" records.
We use DevEx's stuff: https://www.devexpress.com/Products/NET/Controls/WinForms/ In particular we are heavy users of the grid, charting, pivot grid, and scheduler controls- but there's dozens of useful items in that control library
&gt; You're constantly trying to figure out how to do something No, you're not. UI specific code belongs in code behind. The rest doesn't. Doesn't sound too complicated.
What does the winforms DXGrid allow that the DX WPF GridControl doesn't, please?
Not only this, but basically XAML + DataBinding is the future of Windows UI, while winforms is nowhere to be seen except legacy support.
&gt; view logic Also known as useless boilerplate that is replaced by proper DataBinding in WPF, saving your time writing useless platform locked in code. 
Thanks for the help, but unfortunately, it didn't work. I upgraded Owin to 3.0.1 and it still has the exact same problem. I forced an uninstall and then reinstalled, and still the same problem. There is obviously an old reference to version 2.1.0 but I have no idea where it is.
Very true. You know what you know, and if you knew something else, maybe that would be easiest, to you.
Well said. Even if Microsoft kill WPF (and WinRT), which they wont, whatever they replace it with will also be XAML based. Might as well learn it now, and learn how to use it correctly now.
What if you run this command from the Package Manager Console? &gt; Install-Package Microsoft.Owin.Security -Version 2.1.0 That doesn't tell us *what* has a broken dependency on it, or *why* the error seems so opaque, but that might at least unblock you so you can work on what you want to work on.
I have encountered this problem before, it was a while ago but ill have a go at explaining. One of the life cycle events of aspx pages is the equivalent of "session ready". Every time that event occurs it takes a write lock on the session, this means only one page can read the session at a time. If you don't need to write to the session you can set this SessionStateBehaviour to "ReadOnly" See more here: https://msdn.microsoft.com/en-us/library/system.web.sessionstate.sessionstatebehavior(v=vs.110).aspx and another explanation of a problem here: http://stackoverflow.com/questions/26905032/asp-net-readonly-session Your question should be marked as duplicate IMO
&gt; Whatever you saw in 2009 is no longer relevant. winforms is useless. Yeah, well I've got couple thousand active daily users that would disagree with that :) &gt; I can do this in WPF with a simple ItemsControl and a couple of DataTemplates in 15 minutes, in some 50 lines of XAML, including the fading mouseover animations and whatnot, I really don't need to pay $1000 to DevExpress for that. Suit yourself. If you think you can replicate a 100+ control, decade old mature and well supported library with 50 lines of XAML then you are apparently a far better coder than I. IMHO, the DevEx stuff has an ROI that makes that $1000/yr among the biggest bargains in the developer world. And even if I switched to WPF I'd *still* be using one of the component libraries in my development. 
No. It will probably be slightly slower. The advantage of using a dependency injection container is making it easier to modify or test your application and managing life cycles.
Thanks for you tip, I have actually tried to downgrade already. The problem is, it seems you have to downgrade multiple packages to get them to work then. For example, just trying what you suggested got the the error: "Unable to find versions 'Microsoft.Owin.Security.Cookies, Microsoft.Owin.Security.OAuth, Microsoft.Owin.Security.Facebook, Microsoft.Owin.Security.Google, Microsoft.Owin.Security.MicrosoftAccount, Microsoft.Owin.Security.Twitter' that are compatible with 'Microsoft.Owin.Security 2.1.0'."
I probably want to use the container controlled lifetime manager as well right? This will only create one instance of my applications db context ergo increasing performance and not having to connect to the db every time correct?
&gt; If you think you can replicate a 100+ control, decade old mature and well supported library with 50 lines of XAML then you are apparently a far better coder than I I pointed specifically to the image of the "Data Grid WinExplorer View Enhancements", I didn't say I can replicate the entire DX suite in 50 lines of XAML. Read again. And yeah, for the record I DO use the DX suite on WPF. A powerful platform like WPF and a powerful toolkit like DX allow me to create powerful data driven UIs with literally no code. All my Views have the following code behind: InitializeComponent(); And nothing else. In contrast all your winforms stuff requires a bunch of non reusable code behind. I'm not debating the quality or lack thereof of the DX suite. I'm stating the FACT that winforms is useless and retarded. Whatever you can achieve in winforms, I can achieve the same in WPF with 30% the amount of code, in a more reusable, platform agnostic way that is then eventually portable to other platforms such as Universal Windows Apps or even Android and iOS via Xamarin. You're living in the past and wasting your time by using obsolete technology. You could as well try to use Cobol to create modern applications. And no the amount of "active users" you might have is not relevant and does not change the fact that winforms is retarded. Your users do not care what technology you're using, and banks still run Cobol based stuff from the 60's and have lots of "active users", however that doesn't make Cobol a usable technology that anyone would choose today in 2015 to build anything. winforms is exactly the same. it's LEGACY.
&gt; I didn't say I can replicate the entire DX suite in 50 lines of XAML. You included the cost of the entire DevEx suite in your statement. &gt; I'm not discussing the quality or lack thereof of the DX suite. I'm static the FACT that winforms is useless and retarded. &gt; You're living in the past and wasting your time by using obsolete technology. You could as well try to use Cobol to create modern applications. Ok, well that's your opinion. Again- there is a *massive* installed base of successful and functional WinForm development out there. So calling it "useless" is, IMHO, naive. FWIW, I never once made a statement as to the base superiority of either stack- so I'm not quite sure why you've decided to go on your little rant in this portion of the thread. I stand by my statement that in 2009 when I was making architectural decisions that the DevEx WPF suite was far behind the WinForm offerings. 
&gt; in 2009 when I was making architectural decisions that the DevEx WPF suite was far behind the WinForm offerings. far behind in what way? Maybe you thought there were missing features because they didn't mention features that are actually GIVEN by the WPF platform?
&gt; The control suites weren't even close to parity back then Which is very understandable since winforms is a much older technology, and they've probably been working on all that way before WPF was a thing. None of that makes winforms less useless, given the state of affairs today, in 2015, when Microsoft is emphasizing Universal Windows apps (XAML + DataBinding + platform agnostic ViewModels) and winforms is seen the same way VB6 is seen, as legacy. I really really like to see how you're running your winforms stuff, on Windows Phone, or Android. 
WPF here after all these years. It's a dual-display media playback kiosk application. WPF video playback isn't ultra reliable, so the video player is a WinForms application hosting AxWindowsMediaPlayer. The two executables are separate processes and communicate with each other over NetMQ. 
Yes. winforms is "easier to manage" than WPF in the same way GW-Basic from 1960 is "easier to manage" than today's .NET and C#.
&gt; Which is very understandable since winforms is a much older technology, and they've probably been working on all that way before WPF was a thing. Ok you now are just changing your argument. I said that the control suites were not at parity in 2009. You asked for examples and I provided them. &gt; None of that makes winforms less useless You apparently have a strong inflexible opinion on this so there's no point in arguing. 
Web and Win forms do data binding, too. Just as straightforward. The major benefits come in the nice styling provided by WPF instead of it being handled in events on forms.
Yes. Please show me the winforms equivalent of [this code](http://i.imgur.com/lGewngw.png), which produces [this](http://i.imgur.com/HBTGM1E.png) 1000-item `ListBox` with support for selection, UI virtualization, and in place editing. Please.
Good luck porting your Cobol code to anything usable when people stop using PCs, in a couple of years.
Me too! [Here] (http://medxchange.com/software-update-for-the-drshd-1080p/) is the product page.
&gt; You're constantly trying to figure out how to do something you could have easily done in 5 minutes using a straightforward event I understand your concern. Everyone preaching MVVM is a needless purist. Keep the view-model business specific. The moment you start to implement a bool property to bind for some weird UI concern, stop. Attach your own "PropertyChanged" event handler within your xaml code-behind, and touch your UI directly from the code-behind. As time goes on, you will easily smell whether what you are doing is a UI concern or a view-model concern.
The moment I feel like my view model is handling UI concerns, I use code behind. Fuck it. It isn't going against the grain either. Its how things should be taught.
Or more accurately, a little as possible belongs in code behind.
It is for a casino gaming platform.
OK, so it's similar to the binding source of Winforms. Hardly ground breaking binding functionality.
Do you have Update 4 of Visual Studio installed?
Please show me how you do that in winforms. Until then, all your blabbering is useless.
IME there isn't a big difference. Most places using WPF are using it with code behind. 
&gt; But this will not work when the debugger is attached. So there is no "fast debugging". Is this really a limitation? Without this then dynamic compilation seems rather pointless. 
Then they're doing it, I won't say wrong, but they're doing it wrong.
Agreed. But if you say that to a team that's been doing it that way for years then you get labeled arrogant. 
+1 then for WPF, you can edit the XAML file and have an idea of what's going on :)
My initial comment was one about User Interface design, not ease of programming a UI, and .Design files are just as text based, and semantic, as XAML files are, so I don't really understand your line of reasoning. +1 for arbitrary framework
It is very easy to include wpf into winforms. It obviously looks different than winforms, but user experience is based on interaction patterns that are framework agnostic. We used wpf reports windows in winform app with great success, for example.
Pretty kewl
You still seem to be a bit preoccupied with performance. I'm not saying that performance should be ignored, but /u/ours's advice was sage and bears repeating: &gt; Premature optimization on the other hand is wasteful. Do. Measure. Optimize if necessary. Measure some more. Database connections are going to be served from a pool. You can read about connection pools here (I assume you'll be using SQL Server, so read that section): [Connection Pooling (MSDN)](https://msdn.microsoft.com/en-us/library/bb399543(v=vs.110\).aspx) The takeaway here is: don't worry about it, .NET is handling these problems for you. Sometimes the default ways it handles is isn't good enough, and you may need to make changes down the road. EDIT: I also want to let you know, that no matter how well you plan, or how good you are, that whether it's your first big project or your 5th, you aren't going to get everything right the first time, and that's OK. When you use the latest and greatest tools, you must give yourself time to learn them. The only way to learn them is to use them. So, go. Start. Do. Play with it, delete it after you've realized you've done it all wrong, and start again.
Excellent, happy to hear it's getting out into the wild :)
Yep. Real time trading systems. They run fast, look good and are powerful. And I'm also actively developing WPF stuff on GitHub: [Material Design In XAML Toolkit](https://github.com/ButchersBoy/MaterialDesignInXamlToolkit) [Dragablz](https://github.com/ButchersBoy/Dragablz)
Maybe for small forms that never change. But the crap you need to go through to auto-size controls in WinForms... dear lord. WPF has a really steep learning curve, but once you know it you'll never go back.
I work with on trading systems and WPF does the job brilliantly Check this [demo](https://github.com/RolandPheasant/Dynamic.Trader). 
WPF and XAML makes always fun... [MahApps.Metro](https://github.com/MahApps/MahApps.Metro) In our business we are using WPF for big fat clients apps, but the future is maybe WEB and cross platform developing...
&gt; for orangutans to play Don't we all? Oh you mean literally.