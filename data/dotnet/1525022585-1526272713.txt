It's hard to know without seeing your code. Here are several working examples. Maybe you can take these examples and apply it to your project. https://github.com/codenesium/samples?files=1
You may want to look at https://github.com/StefH/System.Linq.Dynamic.Core/blob/master/README.md It's questionable from a quality standpoint whether you should use this but it will solve your problem. 
I just started a new dotnot console application.
Hmm, that doesn't seem to be free and is also locked to MSSQL. I didn't post any code because after hours of Googling searching, it just seemed like using Nancy wasn't going to be the way to do it.
Ah. You should search for "web API.net core". You'll find tons of examples. 
I'm not exactly sure about your goal/question. Have you tried creating a basic RESTful API with ASP.NET Core? You're speaking about learning the ways of .NET Core, but you mentioned Nancy, which is really weird for a beginner to choose instead of ASP.NET
I just want to use .NET Core, no ASP stuff.
Because ASP forces MVC.
I don't get it, you want to build a WEB api without using WEB technology? :D
*Insert WAT meme* What are you talking about, that's the ASP.NET MVC. ASP.NET Core itself is just like any other web framework, gives you options for any kind web app types. Can't you point arguments how does it force to use MVC?
I originally created an ASP .NET Core project by accident and I was able to create a controller which would create routes and allow for POST,GET... etc. I ended up restarting and using a new dotnet console project. This is what I actually want because it doesn't tie me down to a design pattern. However, now that I am using a console project, I don't have any access to ASP Controllers which allowed me to build my API originally. So, now I am stuck wondering if what I want to do is possible (Nancy just has so many issues and searching "dotnet core HTTP Framework" comes up with fairly unhelpful results, except ASP/MVC related topics). I just want a lightweight console application which I can build a server REST API with and then eventually integrate an HTTP client. 
It doesn't actually. You can use ASP without using MVC at all, and MVC as a web framework also doesn't force MVC as a design pattern any more than in the loosest possible sense. It seems like you're caught up on a term rather than what you're trying to do. In what way did your accidental [ASP.Net](https://ASP.Net) project force you into a design pattern that didn't work for you?
I added a web api to a desktop application to enable it to be controlled over the local network, is that a valid use case? Or can you embed asp.net core inside it?
Unfortunately, even bring blessed by Microsoft isn't much of a guarantee... The original code contacts library and tiling is pretty much dead these days. 
I didn't get that far with the accidental project (whcih still forces the use of a controller, but other than that, I was always told .NET pushes MVC fairly hard. Even when doing searches, the majority of searches are MVC oriented). But I noticed there was a lot of bloat. Stuff such as wwwroot and dependencies that I won't need/use that came with building an ASP project.
That's not supported at the moment, but there's no real functional difference from just using the folder that `dotnet publish` gives you instead of a single file. You can copy and paste it in the same way, and invoke it in almost the same way (just give it the path to your entry point file).
^ Yep. This is how you make "Windows aliases", .NET or otherwise.
Being written by Microsoft is almost a guarantee it’ll be abandoned
I've done that on several occasions. It's valid, useful, and more understandable and maintainable than some custom network protocol. It's so easy to integrate now, love it.
I wish this was helpful. I think you are making a lot of assumptions. I was attempting to use Nancy as my web framework and use Nancy Self Host to server (which is the web server I talked about in my original post). I also attempted WCF but both of these come back to compatibility issues. I don't think it is weird to do it this way. I'm ultimately asking if there is an alternative to Nancy/Nancy Self Host that people are aware of that doesn't force ASP or MVC. 
dotnet publish packages the entire .net runtime into a folder, any referenced assemblies, and creates a stub executable that you can run without needing to use the dotnet command. In order to get the stub executable, you also have to specify a target runtime during publish -e.g. win10-x64 If you simply 'dotnet build' your project, the resulting .dll can be run by anybody else that has the dotnet command installed. With Java someone would do 'java foo.jar' but with .net core you would do 'dotnet foo.dll'. 
I'm not entirely opposed to ASP.NET Core. I'd rather not. For me to be able to deploy an ASP.NET Core project, it would have to do it "headless".
Thanks, that confirms my approach. For my application (one-off program for controlling a machine vision camera) I kept finding ASP.NET results when searching for .NET REST api but was confused. :) Got it all working with System.Net.HttpListener.
Not having a state might still mean that stuff like a database connection is injected. You should be able to call a service without having to know anything about the underlying datasource or even if it’s a web service or database.
System.Net could work but I was looking for something that is wrapped around it (like Nancy or Falcon for Python).
you are way too much focused on names like "asp", "framework" and "patterns". They are just words the way you use them because you display no knowledge of .core. If you want, you can build all the stuff from scratch, but that's pointless. asp.net core web api is not much different from .net core console app. It's pretty much the same thing and you can move the code around as much as you like to. the word "asp" is just a stupid word that means nothing. 
Which means deploying it using kestrel instead of iis. Any asp.Net core project is fully capable of being hosted inside of any process including plain old console projects. Asp.net core also does not force you to use controllers. Even asp.net core mvc will not force you to although in that case it wouldn't really make sebse not to. Having used both Nancy as well as Asp.net Core (webapi) I can tell you, you will gain almost nothing in choosing nancy in the areas you are asking for and will gain a lot of other hurt (especially if you're new to. Net). There is a good reason asp.net core is so widespread in use. It is extremely lightweight in use and forces you to almost no design choice. You want a small rest api with just some routing if incoming requests to some functions in Startup.cs hosted inside a console app? Fine. it can do that. It can ofc. Also do a gigantic monolithic multitiered MVC app (although j wouldn't recommend making one ever) 
Thanks for the friendly help
As I've said, I'm fine with using asp.net core. I was just under certain impressions about it, which is why I stated I didn't really know. Do you have any examples of non-mvc asp.net core rest docs I could look at? I'm just trying to learn here.
You could also use Fiddler, it’s very handy to use and gives very exact timings
Yeah I use that alot but need it in a Powershell script.
You could have fat binaries that support several platform. That's what Apple did for the ARM32 ARM64 migration
Would Self Contained Deployments be what you are looking for? https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd
I actusslly use fluent validation on my models. I had not considered using it in my repositories but it should work. 
Thank you for that. I spent the better part of my sunday dropping in this lib - I effectively convert bitmaps to jpegs and create a mjpeg stream. Compared to the native c# lib and imagemagic (which I dropped in a while ago to get more performance) I go from around 90% CPU usage on a E3 on linux with 60 streams to about 20% CPU usage with your lib! Amazing!!!! Thank you again
It's a zip file of classes for JRE to run.
There’s a specific PowerShell cmdlet for this: `Measure-Command`. 
The people who like to make the service layer stateless seem to be DDD people. I shall take your advise and do some reading on it \(as I don't really know what kind of 'driven design' I am doing :\)\) Thank you
That sounds about right to me. What do people typically call that logic layer though? Seems that that will be the fattest layer, and everything else fairly skinny?
Sounds confusing! haha....I suppose it all just turns out to be different for everyone...I think I'll have to do more staring :\) Thank you for your advice.
I use Postman and Chrome developer tools for this.
You don't *need* to change anything. If you trust the users, then you just change the connection string to the network server (this should be in configuration anyhow). At the end of the day, someone is going to have to connect directly to the database server. If you don't trust the users, then things get a little more complex. I'd suggest writing a simple [HTTP API using ASP.NET Core](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-web-api?view=aspnetcore-2.1). There's no such thing as a "simple" app that uses WCF. It may be easy to throw together initially, but I've never had to maintain one that I didn't want to rewrite as a plain HTTP API sooner rather than later.
I believe this is already used for uploads such as Facebook, Gmail, etc. Where it'll show a thumbnail of an image on the page, for example, as you're uploading it.
To be honest you haven't described the problem scope much at all. WCF is a ten ton gorilla, only utilize if you are you sure that's what you need. - What is your security model? How is authentication handled? Is database authentication ok? Are all users fully trusted? - Does this need to work over the internet (you implied not-web, but are you absolutely sure)? - What does the concurrency look like? Writes on the same table other users are reading? - Are you looking to create a "server" application (inc. APIs)? To be frank if it is LAN only and you fully trust the users, you could just do EF connections directly into a shared database solution, authenticate using database credentials, and call it done. A lot of enterprise software works this way, the biggest limitation is they often need to expand to web, and you don't want your database sitting open on the internet (and VPNs are a bandaid). 
Like I said it is a simple application, the only thing I need to worry about is concurrency. Usually only one person will be using it, but there may be rare occurrences where two people will be using it. When that does happen they will need to be reading the same data. Having them connect directly to the database was what I was hoping to do, but I wasn't sure how best to make sure the data they are viewing doesn't become out of date and new data doesn't get overwritten by old data. 
I'm so happy they're fixing the billion dollar mistake and not taking the cowards way out 
I'd try to purely use .NET core's validation. It's finally good enough you shouldn't need a 2nd library. 
It's not going to solve the null ref problem from a compiler standpoint but I disagree that it compounds the problem. That isn't the problem Option is trying to solve. What it does is make the return value far more clear in terms of code clarity. When you return null there is always lack of clarity. What does it mean? Did something go wrong so a value cannot be returned? Did you intentionally return nothing? Is nothing a valid response at all and should I continue or fail as a result of getting nothing? Option (and discriminated unions) help to address this problem. I agree though that it sucks that Some(null) can exist. It requires a bit of discipline to use in that if you're returning an option for you should never return null. That is, at least until we have nullable reference types, then we can build Option types where that is no longer possible.
It's a bold decision for sure. It takes courage to change something so fundamental to the language. IMHO it is absolutely the right decision. Personally I'd rather them take it that final step where once it's enabled, it is compiler error and not compiler warning. But I'll take that compromise if it at least moves us in the right direction.
Everything can return a null; I need something that says it doesn't return a null.
That's what option does semantically. It says if I have an Option type, I will not have a null because it never makes sense to return null. Unfortunately it just can't be compiler enforced yet. 
This page should give you all the information you want regardless of whether you're building a mvc app or not https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/handling-concurrency-with-the-entity-framework-in-an-asp-net-mvc-application 
No, you couldn't. Binary formats between the platforms aren't remotely similar. There's nothing you could build they can all execute. 32 vs 64 bit is relatively trivial. 
Thank you, that was very helpful. I think I know how I have a good idea of how I will handle it.
True, both EF and NHibernate support projection. And same stands for varchar/nvarchar column types - if the column is marked as ANSI a varchar parameter will be used. 
How about https://github.com/SignalR it has Android and .NET Clients for real-time messaging.
\o/ glad it's useful
You might want to make AJAX requests from your template to your API endpoint. https://developers.google.com/web/updates/2015/03/introduction-to-fetch
C# is practical, it has good syntax, it has many modern features, it performs reasonably well. If I had to directly compare it to the ones you mention, I think Java is behind the times, C++ has cool modern stuff and a lot of flexibility but also a lot of complexity, Javascript is an impossible to understand mess of nonsense semantics and Python is unacceptably slow, but not a horrible scripting language. Swift would be a good example of an OO language that I really like the design of. I think the C# designers have done an admirable job in keeping the language clean and the design focused while adding new features. It certainly has *some* things that could be cut or would be better if designed differently, but that's basically impossible to avoid if you evolve a language as much as C# has over the past two decades. 
Sorry, but this is pure clickbait. "Oh hey, I use this ORM and when I use it to pull everything in 1 query back to the client it was slow and caused problems!!!11" And of course because of the usage of 2 of the most slowest, least optimized ORMs in the .NET space, all ORMs therefore suck! &lt;/s&gt; The query fetches related entities, this means the .NET code uses Include() (or the NH equivalent), to prefetch / eager load the related data. ORMs can then choose to fetch 1 query per node in the graph (EF Core, LLBLGen Pro) or use a massive join to fetch everything (all other ORMs). The massive join is in most cases slower, and while I wouldn't mind arguing here that EF 6 does a terrible job here, it's of course pure silliness to use this as an argument against ORMs: you asked for all data, well, you damn well get it too. Of course, the developer should have made a more efficient query, but isn't that always the case? The article really falls apart if we are going to look at what EF Core / LLBLGen Pro do here: they will fetch 1 query per graph node, so the whole memory issue will go away, but not only that: it also gives the author a problem: what is the alternative for that? You want to manually merge the sets in memory using your plain-sql DbCommand? Good luck with that. Like I said, clickbait with no counter argument what is a better alternative. But I wouldn't expect anything less from a person focused solely on SQL. It feels like the good old 'Stored procedures are better than your ORM' debates from 10+ years ago!
other than disagreeing, with the statement about python being a horrible scripting language. I would say your spot on.
Long and ugly is OK one you have reviewed it and don't need to re-examine it.
Love the language, never felt like it was bloated. Not only that but I love the frameworks that we have at our disposal. I feel I can literally build anything in C# and there is tons of documentation and support from Microsoft and Stack overflow. 
He said it wasn't a horrible scripting language, but that it is slow :)
&gt; The alternative is to pick the fields you want, as Tara you wrote in the post. Only the SQL query. If you want to project that to a graph of objects you still have work to do (if the ORM doesn't support the exclusion of fields like EF doesn't). So the point of the article starts out with an eager loading query fetching a graph of objects (oh wait, we don't know, but we can only assume that, why otherwise end up with a projection of *all* data), but you can't turn that around mid-way in a point to return a flat list instead. A flat list in memory isn't an object graph. So to get that object graph _without_ the big data fields, you have to exclude fields from the fetch OR define a custom projection per node and do projections yourself, with the ORM. If you want to do this manually with DbCommand/DbDataReader you have a lot of fun writing it all up. See, it's really easy to bash an ORM when all you have to provide is a SQL query as 'argument' but that's just half of the story: the SQL query has to be ran and the resultset(s) have to be consumed and projected. Indeed, just fetch the data you need and not the rest. But most ORMs, if not all, allow you to specify a projection in any form you want to get precisely that, but in a flat list. Some allow you to specify which fields *not* to include in the resultset, which offers you an alternative, namely fetching the query also as an object graph. But that wasn't the point of the article, to illustrate that. The point was to bash ORMs as they tend to let people do bad things to the database, and to illustrate that a query no-one would fetch is used as an argument. I've seen this all before countless times, it's tiresome. I get it, you know a lot about databases and you want to illustrate that knowledge by showing you know details regarding what not to do. Fine. But don't make us ORM devs look like a silly bunch who don't know how to optimize our runtimes or our users as a bunch of idiots for using an ORM, because they apparently lead to problems. 
Except you can, and people are, just this stupid in plain SQL too. You're criticizing the took for the user. You can do projections and select your columns in EF, you can use raw SQL, you can design your DB in a way that doesn't look like a brain dead monkey three faeces at the wall. You can also do select * in SQL, or write some horrific stored proc and you can definitely design that DB. ORMs allow you to get what you asked for even when what you asked for is stupid, but the stupid is on you.
&gt; I know this is hard to believe, but in our line of work - emergency performance troubleshooting for SQL Server - this is exactly the kind of thing we see all the time. Not everyone is as well-educated as you are about the tools that you use. (And I do mean that as a compliment.) "Write", I'm a professional ORM developer (that sounds like I'm at a support group, but alas... ;)) I hear you, and I don't want to imply you're lying: as we're the ORM and the black box in the equation, often devs point their finger at us when things are slow while they haven't even touched a profiler yet to figure out what they're doing in the first place! That said, why not make it a point of 'working together' instead of 'us vs. them'? The article starts with re-stating the hate for ORMs (with a reference to an article with easy to refute points, but like I said, it's tiresome after a while) which is IMHO the wrong way. It pitches the 'database people' against the 'devs using an ORM'. Why not make it an effort to see both groups working for the same thing: a better performing application stack so everyone benefits? It's often a matter of education: tell the devs that the DB isn't some sort of black box on the moon with infinite resources and make it visible to them: show them how a profiler works, or at least enable traces to see what queries are really executed. I now write ORMs for over 15 years and what has always surprised me is the 'us vs. them' mentality seen with DBAs. They work for the same damn company often, but it's apparently 2 camps which are in constant war. Devs with ORMs, oh boy, the DBA will tell these twats what it takes to use the DB better, the devs without a clue what the DBA does or why it's so important to tweak things at times, doesn't like being told not to do things their way and the fun starts. So what I always try to do is make them work as a team, not as 2 groups. That also means a DBA has to deal sometimes with the queries coming from the ORM and yes the dev sometimes has to write a custom projection because it's much faster. But they both work for the same goal, not against each other. Sorry to say it, but this article doesn't help in that regard. 
would with(nolock) help this at all?
It is, but you're still blaming an ORM for something that: 1. It doesn't have to do. 2. Is the users fault. 3. Only happens if the DB is designed by a brain dead monkey.
Ah yes, the old "guns don't kill people" argument. Got it.
/r/iamverysmart
Though no the actual focus of the article, this is quite emphatically false for EF: \&gt; Queries grab every single column, regardless if they are needed or not However, I'll grant that non\-DB proficient developers tend to be greedy. Regardless, if you don't want all the columns use a slimmer model or an anonymous class and then fill a larger model. 
So, for JWT to work you need to get a token, and have that token be part of the HttpHeaders collection. You can do that with HttpClient, keeping track of the token for each request. The trick is getting the token initially. You can do this as part of YOUR webapi layer, or as suggested make it an AJAX call, get the token, and then route the communication between the external API through your API.
Partially support projections. You can't update a row from a projected object.
The problem with that, in EF, is that you can't update records from projections.
No. The, if you don't understand your database properly you're going to fuck it up regardless of your tooling. Anyone who tells you that you don't need to know or understand your DB if you use an ORM is lying. You can use a select out of linq to project onto individual fields in a dynamic object or a DTO or what have you. You can or at least could do that in NHibernate too the last time I used it. Dummy mode EF is fine for the performance requirements of most DBs, but with shitty DBs it's harder.
This isn't an anti-ORM rant, it's a warning about what happens when you use an orm naively. This is exactly what developers need to be reading. It's not click bait to say something might cause a problem. Neither is it wrong to mention the 2 orms where the problem is seen.
This isn't quite true. If you want vanilla EF, sure. However, [Z Lib's EF\+](http://entityframework.net/ef-plus) does this fine. Given the nuget\-ization of the .Net ecosystem, this should be an OK solution.
Well sure, with third party addons that most people have never heard of you can do anything.
If you can simply plead ignorance, then everything is hard, bad, and should probably be avoided.
1. I prefer it over a lot of languages (Java, C++) but do find programming in dynamic languages like Python and Ruby more pleasurable. 2. Yes. It's far more complicated now than when it first came out (it was basically Java for .NET). The focus towards more functional practices doesn't sit so well with the years of OO frameworks, libraries and practices for me. I sometimes feel the language is too complex and trying to do too much. 3. Yes, mainly in the functional space as this is where programming seems to be going (for obvious reasons to do with concurrency).
&gt;And please don't tell me to use Angular/React/Vue or other client only stuffs What you are asking for is a client side function. Please understand your use case before making assumptions. Regardless, you have several options - write some vanilla javascript ajax and get the JWT. Then save the JWt in localstorage.... or save the JWT as a cookie and then your mvc app can access it.
Enables writing your entire App in C# and distributing on web, while still having full access to the entire JavaScript API and JavaScript library ecosystem (if you want it). 
Here's a simple sample using just the native JavaScript DOM API. https://deck.net/welcome
Invent a project that has meaning to you, perhaps something that involves a hobby, and build an app. A personal website is one example of such a project.
ViewModel is a really confusing term by itself. Because Model sounds mainly like it just holds data for the View but actually it's doing interaction as well. In fact the way it's used as a dumb value store to build views is maybe closer to what you expect from it's name.
C# is doable with ReSharper as you'll be remembered to refactor to LINQ and other language features you might forget but there's so much to it also in connection with .Net features that it's really hard to get to know all nooks and crannies.
True. It was supposed to just hold data about the view, but without interactions that rarely works.
WebAssembly can't come fast enough.
Hmm, well IMHO it's positioning a problem without giving source code where the query comes from nor code what to use instead. It solely gives sql and as a solution a sql query, while starting the article with the rehashing of the hate for ORMs by the author. No offense but that's not really helping at all. Like I said in another reply: why not work *together* instead of creating an 'us vs. them' mentality or at least keep the suggestion alive that it is 'us vs. them'. The article clearly doesn't create a 'let's work together on this' vibe, on the contrary: "Look how bad ORMs tend to turn out, SQL is the real way" (like that's a comparison other than apple/oranges). 
How's that even a valid comparison? The SQL query still has to run, the results still have to be consumed, the rows still have to be used to materialize objects. Where's that coming from if you replace C# lines with a sql query? That's the silliness of the whole "Don't use an ORM, learn SQL" argument. They're not the same thing, so you can't replace one with the other. 
No it should be delegating a lot in fact. Take a decision based on information provided by the other parts and then tell another part what to do. You could call it a Manager because it only takes decisions and forwards the real work to others. Even complex decisions can be made by other classes, like InterestCalculator providing the information about the interestRate which in turn helps the Manager decide if this rate is too high and reject the offer or we accept it and save.
So he/she asked for an example, but then deleted the user account. For completeness here is an example of using asp.net core with routing and no controller (or seperate class) in the official documentation written by Microsoft: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/routing?view=aspnetcore-2.1#using-routing-middleware
WebAssembly is here already. But, if you want to break out of whatever language (assuming C#?) you're using to compile into WASM and jump into JavaScript, then some form of a binding library will be required, such as Retyped.
No, the rows don't necessarily need to be materialized as objects. Quite often one well crafted stored procedure can eliminate multiple round trips to the database. 
Hey, thanks for the answer! That makes sense, and I'm glad you understand why I thought it looked odd. And yeah, returning the button is at least *less* odd/ugly.
sure, if you want to process sets of data with some logic. But in general that's not where people use ORMs for. E.g. crud operations and related data manipulations, no way you're going to do that in procs, or you're in for a lot of maintenance on an ever increasing API. 
Still, semaphore waits are the least of your problems if you update those 16547 rows one by one.
Good read... Thank you for that. Also, Happy cake day!
Primarily architecture, particularly with the DB and ETL processes and systems. However, I will be getting involved somewhat with some business layer development, which I've been out of the loop on for a few years.
Thanks for the WPF improvements! Keep them coming please!
You don't really need a "layer" per se. Look at [AdaptiveClient](https://github.com/leaderanalytics/adaptiveclient) for a simple, scalable way to inject services where you need them. Disclaimer: I'm the author. 
I got nothing. I mean, go learn JavaScript. It's not hard (well as long as you ignore having to deal with 2000 package managers) and it's infinitely more marketable. I admire the effort this must have took, but I definitely don't see the point, and the sample makes me a little sick looking at it.
Looks cool, but I think for me at this stage, not the thing I'm after. Thank you though.
Yeah, the example linked in another reply. I get that it's just showing that you can write JavaScript inside the c#, but it's bad JavaScript... Directly manipulating the dom and a click event that mixes c# (the console write)... It just feels dirty. Where's the separation of concerns? I guess if you absolutely can't be bothered to learn JavaScript and you need to do something simple, it could work, but writing code like that just doesn't look maintainable at scale.
Try using ZedPDF.com It helped me a lot! Best regards Addison Ervis
Loved the idea... but the docs (or maybe YouTube) needs at least one real demo app. Like writing the backend layer in c# and keeping it. Then writing the frontend layer in c# and compile into js. I also didnt find the means of writing the UI in the docs, I just found the first example showing I can manipulate html using js code (compiled from c#). So does that mean we can use html and css to make the UI ? cuz that's what the majority of people loves to do Also in what way this approach is gonna contribute in making the architecture of my apps looking better ? For me I would love writing in c# instead of writing the js code (like we use ts files)... something like (cjs file) and then compile it into js when deploying.
The rules for doing this are highly context dependent. I doubt anyone would be able to make a nuget package with more code than you could write in an hour. 
I believe the sample just demonstrates what is possible and doesn't actually suggest any architectural approach. The way how it could fit the application architecture is up to developers. Some of them will be manipulating DOM, others will be using it for logic only. We don't have to necessarily use a different language to achieve separation of concerns.
You got it right, you can use Bridge and Retyped to generate a specific set of JavaScript (not the whole app), so markup can still be implemented in HTML and CSS. One demonstrative scenario is validation logic - initial implementation in C# could be easily ported to JavaScript, so you'll have identical rules enabled both on client and server sides. You may want to check the page listing existing projects, demos and articles: https://github.com/bridgedotnet/Awesome 
It will be interesting, but not the first time :) Honestly, I'm one that doesn't mind getting my hands dirty some (I find it keeps me level-headed in balancing design and efficiency). I just wish someone told me a little sooner so I could have at least prepped myself for this project (and address any stale skills in a less rushed state).
I am in Southern California. I work primarily in finance where WPF is notoriously popular so perhaps I am seeing only part of the picture. 
I think this is where it is valuable. Writing business logic that is required on both the server and the client such as validation logic. I cannot imagine actually doing UI work with it when there are frameworks in JavaScript to do it. That is my initial impression anyway.
Ah, interesting. I've avoided the finance sector due to religious and ethical reasons but I do remember talking to people in London that worked for banks using WPF and even F#.
Take a look at how SimpleInjector manages versioning. I suggest you follow the same approach. 
ODP.NET on .NET Core is pretty much still beta, it is supposed to offer the same feature set as the managed driver. http://www.oracle.com/technetwork/topics/dotnet/downloads/odpnetcorebeta-4077982.html So to answer your question, if you are using the certificates or cypher algorithms supported by the managed driver it should work.
There's a managed driver that works with .NET 2.0?
There's no .NET 2.0... There's .NET Core 2.0, .NET Standard 2.0 and .NET Framework 2.0 of which only two are at least somewhat interchangeable. .NET Framework is whole other thing. please be specific
Do yourself a favor and ditch odp.net. It doesn't even have async support.
You knew exactly what they were asking about. Nobody is using or discussing a version released in 2005. 
Faulty assumptions but nevermind. Then tell me if he meant .NET Standard 2.0 or .NET Core 2.0, regarding his specific question that question is still super important.
&gt; Then tell me if he meant .NET Standard 2.0 or .NET Core 2.0, regarding his specific question that question is still super important. No it isn't. ODP.net's support for standard and core is the same. 
I'm using .NET framework
Just to make sure. We are talking about .NET Framework 2.0, the windows only, non-crossplatform framework running on the CLR20, which is so old it could starr as a porn actor? You might think it's weird i ask you to confirm this, but because you were so unspecific early on all attempts to help you here were based on the assumption, that you'd use .NET Core 2.0 the 2 year old cross platform open source framework running on CoreCLR. I didnt know anything about ODP before you asked the question here. What i found out is that somewhere there must be a version of ODP.NET for .NET Framework 2.0, because it was announced for it in the same year of .NET Framework 2.0's release. Haven't found a download yet. What i found funny is that Oracle themselves didn't use the correct term for the framework they are targeting with their .NET Core 2.0 Beta Driver either https://i.imgur.com/YudylkI.png
What kind of finance work if you don't mind me asking? I'm working in finance myself so I was wondering if there was much work in your area for a guy with that kind of experience.
I am in Germany, there is contracting work in lifescience control laboratory machines or factory control.
Get PluralSight.
Banking, mortgage, investments, general accounting. There is a lot of work.
This is a very good question. They bang on about separation of concerns for years then Razor pages come along.
For me though this comes down to cohesion. You **can** lump all your code in a controller action. You **can** also lump all your code in the methods behind a Razor page. If you care about SOC at all, you probably won't (in either case). With controllers you often end up with many actions, all nominally related to one area of your application. What that area is, rests on you, the developer. I've seen some pretty massive controllers in the wild! This freedom of choice means you can build a "customers" controller just as easily as you can build a "customer profile" controller. One is quite broad and vague (and will possibly end up with a lot of actions), the other is more narrow and focused on a particular feature of your application. With MVC the code is often separated on "technical" concerns (what it is, rather than what it means for your application). Hence you get ViewModels, Controllers and Views all separated from each other. But, it could be argued that all three of these make up the feature in question, and, as they change together, should live together (change the ViewModel, your View probably needs tweaking, change your controller action from a GET to a Post, your view also needs changing). This is where the cohesion argument comes into play. Jimmy Bogard recently wrote a couple of articles musing these ideas which are well worth a glance. [Migrating Contoso University Example to Razor Pages](https://jimmybogard.com/migrating-contoso-university-example-to-razor-pages/) [Vertical Slice Architecture](https://jimmybogard.com/vertical-slice-architecture/) You can use feature folders with MVC to keep your Views, ViewModels and Controllers for each feature next to each other and if you do, Razor Pages seems like a natural extension of this idea.
People are seriously overestimating the difference between "Razor Pages" and "ASP.NET Core MVC". They are different takes on structuring your app, but are built on the exact same core and IIRC anything you do in pages you can do in mvc (there are some missing features the other way around I think). They are even documented as "new feature of ASP.NET Core MVC" ( https://docs.microsoft.com/en-us/aspnet/core/mvc/razor-pages/ ). So the same spaghetti code you think you'll write in pages you are probably writing already in mvc.
 Think of razor as (it's not, but think of it this way) as a replacement for a framework like angular. In angular, you have a code behind - per view - to keep that page up to date. This is the same thing that Razor does, just it does it in C#, not typescript. You can see do controllers, build a webapi, and have the razor views call back, and your PageController just be (think of MVVM, the view-model part) that binds that data together to be presented on your page. Could you lump everything behind it? Yes. Should you? Probably not unless it's a quick prototype.
Hi guys. I am relatively new to the blogging thing. And new to both F# and Azure Functions too. I would love any feedback you guys might have! This post is getting some downvotes, as is expected, but I am open to hearing why. What can I improve? Thanks!
Spin up a couple of cheap Digital Ocean or Linode instances for like $5/m each. Assuming you'r not looking to host a MSSQL DB
I'm not particular about the DB... I don't really know the difference or if it matters for me at this stage...
&gt;Does a SQL DB from Microsoft really cost hundreds of dollars a month!? If you buy a license, yes. The SQL Azure hosting starts at around $5/month. They also offer a free level of their shared App Service for hosting a website.
An encrypted channel, I'd imagine.
But what does that mean? if I didn't include them and instead simply declared it as `public DbSet&lt;Genre&gt; Genres` wouldn't it implicitly give the variable a public get and set? 
Microsoft Imagine has student offerings for Azure (free). If you want more performance for less bucks then you'd spend on Azure I'd recommend getting a dedicated server (or VM if you like), and deploying it with a Ubuntu/mssql combo. 
Another vote for Devart. Their Driver is great, even the free one.
You're talking about two different things. public DbSet&lt;Genre&gt; Genres { get; set; } is a property, which behind the scenes is actually two methods, one for the getter and one for the setter, and can have extra behaviours which can be overridden. public DbSet&lt;Genre&gt; Genres; is a field, which is accessed directly from memory and can't do anything extra when it's accessed or set.
This is really sweet, I've been wanting to hear more about "channels" for a long time. It sounds like they're doing a lot more with it than I realized. Also who named the Go implementation of QUIC `libquic`? Missed opportunity there to call it `goquic`.
You could try Heroku https://blog.devcenter.co/deploy-asp-net-core-2-0-apps-on-heroku-eea8efd918b6
I liked the post. Very informative on Razor Pages and some of the cool features. I disagree with some of the things the author pointed out in the beginning. I get that ASP and razor pages are different technologies, but I also think a lot of the key "differences" are just coding patterns. I worked on a legacy ASP system and we had all sorts of hacks and third party libraries we'd implement to use DI, MVC components, etc. The issue isn't that ASP was a bad technology, it's that the pattern of binding a rendered page directly to code is a pain. Newer patterns, like MVC, and the advent of API's have made life so simple for SOLID principles and reusable code. 
I have a couple of personal apps running .net core \+ ngnix on the lowest tier linux VMs using Postgresql. For getting started/R&amp;D I think it's a really good choice since you can easily scale up with either more VMs or a larger VM. Another option is Azure if you're tied to SQL Server; they have a free tier, but obviously it'll be limited. And of course you can scale that tech stack up nicely as well.
This may be a dumb question but isn't this essentially like a service bus? I've used an architecture where I have a set of plugins that receive every request and if the request is something they care about they do something with it. This mediatR seems to work similarly where you explicitly register a handler for each request type. Having said all of that isn't it better to just have a REST API instead of a dedicated piece that all of the requests run through?
&gt; isn't this essentially like a service bus? Not exactly no. A service bus is basically an implementation of the Pub/Sub pattern, which MediatR also supports. From the wiki: https://github.com/jbogard/MediatR/wiki#basics &gt;MediatR has two kinds of messages it dispatches: &gt; &gt;- Request/response messages, dispatched to a single handler &gt;- Notification messages, dispatched to multiple handlers Request/response messages are your CQRS approach. You dispatch a request (e.g a query for data or a command to update data), which is picked up by one specific handler that then issues a response (e.g. a DTO from a Db table). All logic needed to complete a query or command is contained inside its handler. Notification messages are the Pub/Sub approach you're mentioning, whereby you can dispatch a notification that could have 1...n listeners, all of which can be doing different things. Notifications are `void` methods by design. &gt; isn't it better to just have a REST API instead of a dedicated piece that all of the requests run through? MeadiatR works really well with REST APIs as you can easily write a command or query that encapsulates each of your REST endpoints: https://lostechies.com/jimmybogard/2016/06/01/cqrs-and-rest-the-perfect-match/ This means your controllers become super skinny and only have a dependency on MediatR to dispatch your queries and commands. e.g. public class UsersController : Controller { private readonly IMediator _mediator; public UsersController(IMediator mediator) { if (mediator == null) throw new ArgumentNullException(nameof(mediator)); _mediator = mediator; } [HttpGet] [Route("users/{userId}")] public async Task&lt;IActionResult&gt; UserDetails(int userId) { UserViewModel model = await _mediator.SendAsync(new UserQuery { Id = userId }); if (model == null) return HttpNotFound(); return View(model); } } Some light reading on CQRS and MediatR: https://iamnotmyself.com/2015/06/04/a-non-trivial-example-of-mediatr-usage/ https://blogs.msdn.microsoft.com/cdndevs/2016/01/26/simplifying-development-and-separating-concerns-with-mediatr/ https://www.stevejgordon.co.uk/cqrs-using-mediatr-asp-net-core https://jonhilton.net/2016/06/06/simplify-your-controllers-with-the-command-pattern-and-mediatr/ https://jonhilton.net/2016/08/31/how-to-easily-extend-your-app-using-mediatr-notifications/ Happy to help if you've any other questions. 
Postgres is crazy lean. It's incredibly fast, too.
Consider extending your ef model with generic extension methods rather than hiding it. You do NOT need or want a god class.
No, because in your example you've declared a field and not a property. I'm not an expert in the underlying details, but the CLR actually implements property getters and setters as methods, whereas fields are just simple references, so this presumably affects how EF scans your classes and implements its proxies.
I sort of get this, but I don't feel like it's a beneficial paradigm shift that MS and others are making it out to be. A buddy of mine loves them because of the simplicity. Though I only looked at his code briefly, I think he put his view model in the Razor cs file, and he didn't have to manage an extra controller or view. I got nothing against them really, they are easy to understand and simple enough, but if someone asked me to give a scenario where MVC should be used over Razor, or vice-versa, all I could really do is shrug. 
Wow. How can you say that about async/await? It is a great feature and one being implemented or desired in other languages. Would you prefer to write your own async state machine anytime you want to write async code? How could the syntax get any better than awaiting on a promise? Seems so succinct.
Here's how I implement JWT - // Create JWT Token private JwtSecurityToken BuildJwtToken(ApplicationUser user, string clientId, DateTime now, TimeSpan expiration) { var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(_tokenConfig.Key)); var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256); //add claims here var claims = new Claim[] { new Claim(JwtRegisteredClaimNames.Sub, user.Id), new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()), new Claim(JwtRegisteredClaimNames.Iat, new DateTimeOffset(now).ToUniversalTime().ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64), new Claim(JwtRegisteredClaimNames.Exp, new DateTimeOffset(now).ToUniversalTime().Add(expiration).ToUnixTimeSeconds().ToString(), ClaimValueTypes.Integer64), new Claim(JwtRegisteredClaimNames.Email, user.Email), //new Claim(ClaimTypes.Name, user.UserName), new Claim("client_id", clientId), new Claim("email_confirmed", user.EmailConfirmed ? "true" : "false", ClaimValueTypes.Boolean) }; var jwt = new JwtSecurityToken( issuer: _tokenConfig.Issuer, audience: _tokenConfig.Audience, claims: claims, expires: now.Add(expiration), signingCredentials: creds ); return jwt; } // Create Refresh Token private async Task&lt;RefreshToken&gt; BuildRefreshToken(string userId, string clientId, DateTime now, DateTime expiration) { var refreshTokenId = Guid.NewGuid().ToString("n"); var refreshToken = new RefreshToken { Id = GetHash(refreshTokenId), Subject = userId, ClientId = clientId, IssuedUtc = now, ExpiresUtc = expiration }; var result = await _repo.AddRefreshToken(refreshToken); if (result) { return refreshToken; } return null; } // GetHash helper private static string GetHash(string input) { HashAlgorithm hashAlgorithm = new HMACSHA256(); byte[] byteValue = System.Text.Encoding.UTF8.GetBytes(input); byte[] byteHash = hashAlgorithm.ComputeHash(byteValue); return Convert.ToBase64String(byteHash); } }
Emails and usernames can change. Your Id should not. So use the Id.
Castle allows for creating some really cool stuff.
Newbies will need guidances, especially with routing. Now there are three types of routing, the global one on startup.cs, using attributes and then razor pages.
I've worked in ASP, as in Active Server Pages, the thing before webforms and MVC. The tech from the 90s/00s. ASP was very much like PHP pages from the 90s/00s. Single pages that you could reference extra files and classes from. I also briefly played with Web Pages in the late 00s (?!? I think they were called that, before Razor + MVC came out), web forms without having to compile it, you could just add new code to the cs files and it would work. The new Razor pages look and feel identical to those clusterfucks. Call me alarmist but it looks like a real mess in the making. There's a lot of very, very good reasons we moved off this layout and structure.
yes, Retyped package for Vue is available on NuGet. However, such frameworks as Vue or React, they could require some additional C# logic/wrappers to adapt the API for practical usage. The reason is that something really complicated written in JavaScript, then described in TypeScript terms, and only then converted to C# does likely require some manual edits to fit the target language in a more natural way. Nowadays Retyped is mostly automatic generator, but there are already some means to polish generated code based on a set of manually created rules. And this is going to evolve in time. Anyways, a simple demo project for Retyped.vue package is available, so you can evaluate whether it's applicable in your scenario before making any decisions. https://demos.retyped.com/dist/vue/
&gt;I rank async/await as one of the greatest and most important features to ever come to the language. I agree. But they might have been implemented differently, and might not have needed new keywords/structure. They introduced a new dimension of method modifier. We already had modifiers for access (`public`, `private`, etc.) and scope (`static`). Now there's this new thing, `async`. How many keywords prior to a method name is too many? Next bone: having to retrofit old code with `async` and `Task`. This can get tedious, and there really aren't any shortcuts. Maybe there's something fancy Resharper can do, I don't know. We also have all these public methods on `Task` that make it *look* like you can do async without needing the keywords. It *looks* like keyword LINQ/fluent LINQ all over again, but it's not. Code with the keywords works completely differently from code without the keywords. Therefore: &gt;I still don't love their syntax, but I see why they're necessary -- it's not really bloat.
Do you mean by using a framework for logging and IOC? Or rather how you would implement these yourself if you had to do it?
I tried LCOW a few weeks back and it was still pretty lacking. Its exciting that its happening at all though.
Yes how I would implement these. I know I can implement them , but I wanted to see real world open source examples to bolster my knowledge 
/u/no1name did you get it to work? I am currently wondering how to solve this myself and would love to hear if you were successful. 
Can't seem to find any good sources sadly but for IOC it's not too difficult to get started, just some boilerplate work. Most of the frameworks work sort of the same. 1. Create a static class 2. Create a public static container object specific to the framework 3. Create a static Start() method 4. Register your services interfaces with there implementation Example: Container.registertype&lt;implementation, interface&gt;() 5. Call Start() when app starts 6. Now you can acces the container from everywhere Use container.resolve&lt;interface&gt;() and get the implementatie back as result. Or something along these lines. Implementation differs depending on framework. Refer to documentation for specific implementation.
Are you implementing a protocol here, or is this custom? I'm on mobile, so it's really hard to read. Also, why is the code hashing a GUID? If you want to prevent token guessing you would be better off using bytes from a strong crypto source.
[AdaptiveClient simple console application example](https://github.com/leaderanalytics/AdaptiveClient.SimpleConsoleDemo)
"Isn't really true. The runtime engine is going to be the native Android / iOS runtime" Thanks for your response. I think with this quote though is almost equivalent to saying the machine (server hardware) is your runtime in traditional web development as opposed to Node itself. 
&gt; If ASP.net core is more of a back-end web framework to handle &gt; HTTP requests and so forth, what usually compliments it as the run- &gt; time platform? Well, given that you talk about web, then the logical conclusion is that the runtime is the browser - http and javascript (and whatever you actully work with on top of that). &gt; Express would be the similar back-end web framework that &gt; ASP.net fills and Node.js would be the runtime platform Actually no. As long as you write web pages that run in a browser, the runtime platform is ALWAYS ONLY HTTP, CSS AND JAVASCRIPT. Period. ASP.NET core handles the server side. It has various sub-elements that can turn out web pages (Razor, RazorPages) or people actually use it to be the backend of a modern SPA written in for example Angular. Did it occur to you ever to read documentation or example? The question is quite moot if you actually just generate a sample project and care to read the generated code.
Ok I see what you're saying. You are putting the AccountStatus object on your account which is the alternative to what I was talking about where you would return an object that has all of the accounts and account statuses but in separate collections.
It's a custom implementation that made sense to me while using protocol as an outline. For the hashing of guid - like I said in my first comment, it's a rough implementation and I'm sure there's better ways to do it. It made sense why I did it 6 months ago, and unfortunately, I don't recall the exact reason for now. :)
Well, the premise of the OP is that the backend runs in ASP.NET, right? So what is your question here? That part was part of the definition. If it not Node.js on the backend when the backend is written in ASP.NET. If you would bother actually reading what I wrote... well, programmers in 2018. Reading, the lost art.
&gt; Does a SQL DB from Microsoft really cost hundreds of dollars a &gt; month!? Wowzas! It would help if you would be able to just read the pricing at azure, for example. Get a windows virtual machine, insttall SQL Server Express (free). No hundreds of dollars anywhere. Matter of fact, you really need to be quite enterprising (i.e. put a lot of work) into finding a small offer for hundreds of dollars a month. THis is like saying "is it really that the cheapest used car costs 25000 USD" while all used car shops sell them for a lot less.
ASP.NET is a framework, Node.js is not. Express is a Node.js framework that OP mentioned. My understanding was that OP's question was: If Express uses Node.js as a runtime, what runtime does ASP.NET use. Also you can gtfo with that elitist, vague insult bullshit 
Agree. Being not smart enough to read pricing is a goood reason to actually use another product. Please, keep your religious war to yourself.
Well, I am sorry for your parents.
That's rich from someone who's biggest hobby seems to be insulting people over the internet
It is still true. See, how I talk facts - you talk about your hurt feelings. Really sorry. Now fuck off.
The only objective fact you stated was in your original post, though I believe you misinterpreted the question, that's still up for debate. Other than that, it seems your crybaby ass got upset and started hurling insults because I suggested that you may have misinterpreted OP and I did so respectfully in the begging. &gt; Now fuck off. Same, hopefully the mods ban you and your borderline troll shit. I'm done here.
What I do: 1 Create the interfaces: public interface ILoggerFactory { ILogger GetLogger(); } public interface ILogger { void Info(string text); void Debug(string text); //etc... } 2. Inject the ILoggerFactory implementation into your container (registering your implementation) 3. Example Class: public class YourClass { private readonly ILogger logger; public YourClass(ILoggerFactory loggerFactory) { this.logger = loggerFactory.GetLogger(); } public SomeMethod() { this.logger.Info("Hello World"); } } 
Yeah, their pricing page didn’t make it very clear.... I’ve decided to just host at home on my raspberry pi for now.
Haven't used it for anything major myself, but there seems to be a cleaner integration of MVC with React than Angular, [ReactJS.net](https://ReactJS.net). Angular is a full framework and thus offers things that could be provided by [ASP.NET](https://ASP.NET) MVC. React is a library focused on creating the view, so it's focus is more doing razor stuff.
&gt; I don't want my domain objects to have those weird navigation objects the way entity framework has. If you don't want to use the programming model of a given framework, don't use that framework. Maybe look into Dapper or do raw SQL queries if you don't want to work with Entity Framework the way EF expects you to work with it.
What benefit does the ILoggerFactory really provide when you only have a single logger? I'd just inject the ILogger directly and skip the factory to simplify code. container.RegisterType&lt;ILogger , MyLoggerImplementation&gt;(); public class YourClass { private readonly ILogger logger; public YourClass(ILogger _logger) { this.logger = _logger; } public SomeMethod() { this.logger.Info("Hello World"); } }
Hi, no I put it to one side after finding that my project doesn't run on Azure. Sigh ....
This whole question centers around this question. Should your domain objects have those reference properties? I don't know that's why I'm asking about it. 
Well I've seen 2 benefits. 1. Actually having different loggers. So the logger factory helps out that way. 2. ILoggerFactory.GetLogger(string name) - Useful for NLog named loggers and what not. So yea, you do you and imma do me too.
Last time I worked on a system using JWT we used reference tokens. The tokens' size ranged from 1kb up to a pretty massive 4MB. Having a constant sized reference to the actual JWT really helped with managing request throughput, but ofc your server application will become a bit more complicated. 
New features in this release (details below): * Project templates updated to use Bootstrap 4 * Async event handlers * New component lifecycle events: OnAfterRender / OnAfterRenderAsync * Component and element refs * Better encapsulation of component parameters * Simplified layouts
\[Something like this maybe.\]\([https://pastebin.com/fMi9u4z1](https://pastebin.com/fMi9u4z1)\)
Now ?. will work! As will "using static"!
MVC and MVVM mean nothing without knowing what platform you're using it on. Web is such a different beast than WPF or totally unrelated to .Net but also vastly different iOS development.
In my experience, I simply haven't found a way to keep my "free" AWS RDS-MSSQL tier free... I end up paying like 8-10 dollars a month. Anyone able to avoid any costs at all? I have everything on lowest performance, backups are turned off etc.
Just don't call the container everywhere, or you'll fall into the service locator antipattern.
Does anyone know of this works on .net core? I think I saw .net standard which ... I don’t remember if that will work on the other platforms.
.net standard libraries will work on Mono, Core, and Framework (if they support the version of standard the library uses--and personally I've noted that a lot of important libs are not .net standard 2.0), but Blazor itself targets Mono. I'm guessing they won't be looking at porting it.
I have the same problem with JWT. It doesn't take much before they get ridiculously large and wasteful and every request. I went back to a hash / request signing system instead. 
Uh. What trailing slash?
If you're trying to install this and are confused about why the installer insists it's already installed, it came with the Windows 10 April Update.
EF will only look for DbSets on PROPERTIES. removing the curly braces and get; set; makes it a FIELD which is a completely different type of member on a class. As to why, I have no clue, you'd have to ask someone at Microsoft. AFAIK there's no technical reason why they couldn't have. Probably just to force consistency.
It targets mono? I find it strange that .Net core isn't the default target. Any idea why this is the case? Thanks
I wasn't aware of the Elvis operator, thanks! Definitely could be using that in a few places. I love the rest as well. Don't forget the ?. operator, which only evaluates a member reference if the variable is non-null, otherwise does nothing. something?.Function(); is equivalent to if (something != null) { something.Function(); } The System.Linq namespace is also my favorite namespace. Write APIs that can take any list or array type. Condense long, unwieldy for loops into short one-liners. Very useful.
It follows the pattern on the platforms targetted by each Framework. Framework has a lot of Windows specific optimization via syscalls. Mono winds up in Xamarin, Unity, and other places where it is a heavier integration with system specific stuff. Core tends to be much lighter because the main focus seems to be speed while providing functionality shared similarly across Windows, Linux, and Mac. Of course, UWP deviates from that, and I don't have the technical explanation for you.
&gt; ?. `?.` is the Elvis operator.
It targets mono because mono is what compiles to wasm. The libraries to compile core to wasm are still early stage / experimental. **This is all what I've read on reddit**. No idea if this is actually true or not so take this with a grain of salt. On the phone or I would google fu for you.
Hmm, googling Elvis operator got me ?: and [this explanation](https://en.wikipedia.org/wiki/Elvis_operator) which does not match ?. ?. is the safe navigation operator.
Dang, we're calling it the wrong thing in the office then. &gt; In C#, the null-conditional operator, ?. is referred to as the "Elvis operator",[8] but it does not perform the same function. Instead, the null-coalescing operator ?? does.
It makes more sense when you consider mono is the runtime for "clients". It targets iOS and Android, wasm is a natural extension from there.
I also heard this. Mono can be compiled to wasm easier?
It was more of the fact that the mono team was already working on getting it to compile to wasm when Sanderson started this so it was just easier to go with it. 
Really!?
It's amazing that it is currently under development. I recommend this video for anyone who is not yet convinced to idea of c# in browser (starts at 20:00) https://youtu.be/MiLAE6HMr10 Isn't it beautiful to finally be able to write code instead of fixing JavaScript? :)
Yes. If you put two UserControls on a page there will be two separate instances of the object created each with their own set of properties, etc. You can confirm this by setting a breakpoint in your UserControl's constructor. When you load your page, the breakpoint will be hit twice.
&gt;Does the compiler instace 2 classes usercontrol1 and called them Cont1 and Cont2 or what excatly (at the level memory/debuging ) ? are the properties accessible at Cont1.Myprop , Cont2.Myprop ? Pretty much yes. Having two user controls is just like having two other C# classes. When you put two of them it simply creates two instances. Just like any Label or TextBox that you have multiple versions of.
The bit in he middle felt like they were having a go at people for using it without backing (paying) them. I get what they're saying but that is kind of the point of #free open source software.
?
Awesome! This guy knows how to do a good presentation!
I once used to use this kind of channels to get knowledge about C# when I first started learning. I thought might be a good contribution for others to come.
No, don't remove it. I'd consider myself expert level and I don't find this offensive. What you're trying to do is provide materials for beginners and that's great! This sub is about dotnet in general. We have csharp subreddits for more advanced technical discussions anyway. Downvotes don't matter. If someone Google searches or browses Reddit and they click your link and learn from your video, it'll be worth it. Reddit points are worthless.
async void functions are generally evil, for example exception handling gets really weird. I recommend you'd read up good practices on async/await first, then you can decide whether you want to keep the code you have right now, or change it to something more GUI friendly, using events and stuff like that.
You liked the user experience of the storyboards better than your custom game loop. If there's going to be more users than coders then maybe you should put the user experience first? I would focus my attention on making my storyboard code cleaner. Also you can use Stopwatch.StartNew() to create and restart a stopwatch instead of calling reset and start discreetly. 
The point is that if you are using OSS software for your work, consider supporting it financially so it can be sustainable.
[async void](https://i.pinimg.com/originals/0b/43/9f/0b439f8abcf6964c7b1235558a2a40ca.gif)
I'd say this is one of the fairly rare cases where you want `async void`. It's an infinite loop, so if it returned a `Task`, it wouldn't really make sense to wait for it. And if there's an exception, `async void` means it will crash the application, which is the right thing here, there is no good place to catch it up-stack.
Yup. The Mono team is working on WebAssembly so that Unity can run in the browser. The CoreCLR team is also adding WebAssembly support in the CoreRT project, but they aren't as far along as the Mono team.
Sorry, I have to disagree with you. Async void only makes sense in event handlers for me. I would prefer a Trigger/Event invoking the Storyboard in this case any time, which is even possible in XAML only.
Yes, because that makes it easier to find and debug.
I'm curious if you have a recommended way / fastest way to load and draw images to the screen in GTK?
ReactiveUI *almost* makes me wish I was writing line-of-business apps. 
Build something that provides value, if only to yourself. Finish it to completion. E.g a grocery list app Build another thing, create a website for it. Sell it like a product. Do another one. Even if you get one customer, you’ll have learned a lot through all of it. Now you have some interesting, real world projects to list and discuss in an interview. Just don’t get caught up *only* reading tutorials and books; real world experience is king. 
Self taught here, now a senior dev for an enterprise. It's all about the desire to learn, be good at solving problems, and being consistent.
Yep \- first job out of high school. As others have said, start building a project portfolio. Have been self\-taught since 2009 and in that time have built various projects from web \(mainly\) to desktop \(WinForms, WPF\). Get a Github or Bitbucket account going and get those projects going!
Yes but I started in the late eighties, early nineties, completely self-taught and migrated to C# when it came out. A critical asset to master is understanding the tech enough to converse comfortably about it. Underlying universal concepts like the Atomic and SOLID principles are also good to brush up on. Emphasize your ability to learn independently and willingness to continue said education while on the job. 
Serilog sinks that support structured logging are the main reason to use it. Console and file sinks lose a lot of the value.
Find a place that is willing to help teach you the ropes and have other developers around you that you feel comfortable bouncing ideas off of. By being self taught, you've proved you *can* learn how to code. Working with other, experienced developers, you'll learn how to do it right.
Thanks @p2seconds, are you using visual studio 2017 as well as your dev platform? If not can I ask what ide/build platform you're on?
Who is reading the logs?
I had an ex-coworker who went to school for 1 semester. This was during the dot com boom, then he started working. It was in Delphi at first, then he moved to .Net. He is now the Architect at a small company.
Got an entry level position at a startup while working on an associate's at a community college. Got my foot in the door due to making friends on the internet. 3 years of experience there got me a regular developer role, and finding jobs since then hasn't been hard. Maybe someday I'll go finish that degree...
I started out in support, then moved to debugging, now I'm lead dev. Companies are usually pretty open to self taught as long as you can prove you know your shit. Which can be hard if they do work you aren't familiar with. It's forced me to be a jack of all trades, master of none 
I would argue there are few truly self taught people. I learned a lot working on my own, but working with a mentor and peers who have had different experiences is like a cheat code. If you have the right people around you who want to exchange knowledge with you you will level up very quickly. What might take someone days or weeks of scouring the internet to fully understand can be explained and worked through with a mentor in hours. Find those people in your area that are willing to mentor and get in contact with them. Many communities have a developer slack channel, and from there you can usually find many subject specific meetups. Go network and learn. I don't have a degree and now I'm a manager/mentor/senior dev at a small company but I've held jobs at larger companies as well. I took a job for a small IT and software company when I was in my first semester of college. Within a year I went from IT Support exclusively to a mix of development and met my first mentor. I stuck around there for awhile and was paid below market value. I felt like this was paying my dues. I got lucky in that the small company that gave me my first chance was working in a dying tech. Since no one else young was learning that dying tech I suddenly had value on the job market. I helped people rewrite from that legacy tech to .NET for my first well paid job and its all been up from there. Also, don't let a degree requirement keep you from applying for a job. Both of my last two jobs have had a degree requirement. If they like you its not a requirement in many cases. Now, as someone who hires myself, I like to see some knowledge of patterns, SOLID, unit testing, ORMs. Even if you don't have experience using these things in a job having the most basic knowledge shows a certain amount of effort and curiosity. Our doors are always open to people with "non\-traditional" CS backgrounds. My last two hires worked in retail and restaurants and had two year degrees. They are working out wonderfully.
Most of the advice here is already good so I won't repeat it. My only addition is find a place you can help other developers. I find my understanding becomes much more in\-depth when I'm forced to explain it to someone else who doesn't understand. Often times I find I don't actually understand something I previously thought I had down. Try your best to always understand the code/framework one level lower than is necessary to use it. 
What gets downvoted will get downvoted - that's just, like, some people's opinions, man.
*beep beep* Hi, I'm JobsHelperBot, your friendly neighborhood jobs helper bot! My job in life is to help you with your job search but I'm just 228.1 days old and I'm still learning, so please tell me if I screw up. *boop* It looks like you're asking about interview advice. I'm ~39% sure of this; let me know if I'm wrong! Have you checked out CollegeGrad, HuffPo, LiveCareer, etc.? They've got some great resources: * https://collegegrad.com/jobsearch/mastering-the-interview/the-eight-types-of-interview-questions * http://www.huffingtonpost.com/rana-campbell/10-ways-to-rock-your-next_b_5698793.html * https://www.livecareer.com/quintessential/job-interview-tips * http://people.com/celebrity/worst-job-interview-answers-askreddit-answers/ * https://www.thebalance.com/questions-to-ask-in-a-job-interview-2061205
Check out Pluralsight, Microsoft Virtual Academy, edX or YouTube. Although, Pluralsight isn't free it is a great resource. The others are free and good as well but very general. Actuallt, it might be good to start with the free YouTube or MVA intros and then start building stuff.
Right now just the developers and ops. Eventually there are report writing people that will read appinsights.
I got my first job believing it was a C++ dev job, when it fact it turned out to be VB.NET. So technically, yes.
Yep. Taught myself with a Sams Teach Yourself ASP.NET book at night while stationed in Iraq. Just me, that book, and my laptop from 8pm-midnight every night for a year. When I got out of the army, my first job was actually not technical at all, but had lots of opportunity for automation on an individual level. I started automating small daily tasks with macros in MS office, and spent a lot of time after hours writing larger (and more complicated) programs to batch process my co-workers outputs...mostly because I hated one of them in particular and was determined to automate that person out of a job. Though I never achieved enough automation to eliminate that worthless person, In hindsight it was the after-hours work that set me apart from my peers. When you’re that invested in improving the business, you gain insights about biz-ops that your co-workers would never realize in a million years. It was that insight and the track record of small automation wins along the way that helped me convince management to let me tackle larger and larger automation tasks, and eventually gain enough creditable experience to leave the company for an actual development job with one of our competitors. Fast-forward 7 years and I’m a Sr development manager responsible for teams in Bangalore, San Francisco, Kansas City, Kiev, and Minsk. Sometimes I can’t believe it myself. All because of that book. The .net framework is a finely tuned, highly optimized business-process-automation-machine. I’m so glad I chose it instead of one of the bullsh*t Java frameworks that were barely functional at the time.
 I got hired and learned it on the job. I’m not sure if that disqualifies me from your question though.
I did it. Best advice i can give is to *do projects.* You've gotta have something motivating you to learn the next thing you don't know.
I started my career in enterprise IT (no CS degree), then started learning to program on my own in 2014. Landed a junior dev job in 2015, left for a mid-level position in 2017, and am now working from home full-time on a product I really care about. Like others said, build stuff. Put it on GitHub. Build a website for your stuff. Contribute to other open source projects. If you're passionate and have some innate talent, you'll get there sooner rather than later. Make at least a couple things that are super easy and quick for someone to pick up and start using. For potential employers to demo. Some other things to think about. What environment do you want to work in? What kinds of projects do you want to work on? Once you have some experience, focusing on a specific goal would be good. I started in government, and I didn't belong there. The politics, slow pace, retiring-on-the-job coworkers, etc. It all made me very unhappy, and I'm thankful my current job found me. Get comfortable with criticism, if you're not already. That was hard for me at first. Code criticism seemed to evoke more defensiveness for me than normal job criticism. Don't get discouraged if you're not getting call backs or interviews. Even after a couple years of legitimate experience, I was having trouble getting interviews for even junior positions that were barely higher than the one I had. Like, months of applying. I was getting pretty bummed, then suddenly I got mid-level position and was told no one else came close to me. So why wasn't I getting callbacks for junior positions? No idea. Just keep at it, and stuff will work out eventually. Keep in mind that those other developers out there aren't perfect. They don't know everything. So don't feel unworthy of a dev job because there are more experienced people out there. There's a lot more that factors into fitness for a job than raw years of dev experience. Keep your love of coding and sense of wonder alive. Some people turn into boring assholes. Don't be that guy. :)
Sounds pretty solid! I am working on a similar stack right now and my biggest pain point has been AWS in general, which can mostly be attributed to my unfamiliarity with it. &amp;nbsp; I also use [MediatR](https://github.com/jbogard/MediatR) to keep my top level controllers light, and try to compose Requests and handlers together when a data model starts to get big and clunky. &amp;nbsp; One thing I wish I thought about more up front is validating incoming models. If I started over tomorrow I would want to try to incorporate [FluentValidation](https://github.com/JeremySkinner/FluentValidation). The data attributes just feel... meh... But even with that library I still would not have a good way to share data validation logic between my Data Transfer Objects and database entities. &amp;nbsp; Last time i used dapper I also used [dapper.mapper](https://github.com/dotarj/Dapper.Mapper), but it has been a while and can't speak to it be super useful now, especially if you are sticking to SPs. &amp;nbsp; And of course there is a lot of good stuff over [here](https://github.com/quozd/awesome-dotnet). &amp;nbsp; And I guess lastly if your feeling into trying some more functionally oriented C# you could take a peak at this robust [option](https://github.com/nlkl/Optional) type, or if you really wanna get crazy check this out -&gt; [functional base class lib for C#](https://github.com/louthy/language-ext) &amp;nbsp; Oh! also [SQL Operations Studio](https://docs.microsoft.com/en-us/sql/sql-operations-studio/download?view=sql-server-2017) for light weight SQL stuff has been nice! &amp;nbsp; Have fun! 
Wow, this is such a good resource for everyone! Helps students, employers, employees!
Self taught out of highschool. Started working in the corporate dev world 12 years ago, now I am the senior software architect for an agency over many who have way higher degrees than most. I also make in the 6 figures so it's possible to do well you just need to work hard and keep learning :) I didn't have pluralsight or any of those in my start so I had to read a lot of code, documentation and just write lots of code until I got comfortable with it. Over time the need to look things up / reference material goes down.
&gt; My only addition is find a place you can help other developers. Find a place where you can work with developers who are smarter than you are. It gets so much easier to go from wet-behind-the-ears to seasoned veteran in a few years. Having those other developers to lean on when you get stuck is a big performance improvement.
Do you know what reply url it is returning? The error will hopefully say the reply url *** does not match. Are you possibly using a proxy or anything else that may be modifying the url that is requesting? Sorry for not being able to add more.
When one of them becomes unresponsive, remote into the machine, copy over a debugger and check where all the threads are stopped at. https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugger-download-tools
I kind of did it backwards. I started with the job, and learned second. I was initially hired as a contractor just to do documentation, but slowly that progressed to doing some basic troubleshooting, and then some easy minor dev tasks, and just grew from there. When my contract was up, they hired me full time as a junior developer.
Unity has their own tech for compiling to WebAssembly (IL2CPP, also used for iOS), which is actually separate from both mono and CoreRT.
Not possible. Ditch MVC, it's archaic. Go and learn Vue/React/Angular instead.
So I'll just preface this with I didn't make the decision to use Serilog. I inherited and modified an existing serilog setup. That's why I might come off as being "forced" to use serilog. I guess my point is that at this juncture, Serilog doesn't seem to give me much, and I much more value the more robust and mature configuration of the default asp.net core logging than I do all the extra things serilog brings to the table. OTOH, once I learn the ins and outs of the configuration I'm sure I'll be much happier. If I were doing new ASP.NET Core project from scratch tommorrow with the requirements of just logging to the console and app insights I would skip Serilog. If I needed to log somewhere else, I would totally look at the Serilog sink for that. If I was adding logging to an ASP.NET standard project, I would use Serilog, because its much better than log4net an the built in event tracing.
What's your age and background now. I am a college drop out. Did vb6 as a security guard clerk. Work overnight tech support. Became a php developer. Then Unix admin then dotnet programmer. 
Yep. Worked a customer service job in an office (2012-2014). Made some simple Excel macros to speed up some repetitive data entry, then learned some advanced VB stuff to make some more complicated Excel tools for my department, then learned SQL Server and vb.net and made my bosses a database to store retail sales data. That was over a span of about two years (and I was lucky enough for the company to agree to let me tinker on the clock for this stuff). Parallel to this, I completed a Udemy deep dive into HTML, CSS and basic JS in my free time + did some basic C# tutorials. I attended a local .NET user group social and gave my contact info to recruiters. I took a bunch of developers out to lunch to ask them for advice (just like this). Eventually, a combination of connections lead to an interview for an entry-level junior dev job working on my first MVC app (with the promise I'd catch up with my skills to match the team). Now, three years later, I'm a senior .NET full-stack dev. I made something of value for my employer (it was amateurish, but functional), I demonstrated a capacity and desire to keep leaning, and I asked people more connected than me for mentorship.
This is correct. Mono is the official client runtime (think Xamarin for example) and has an excellent wasm project in progress already so it made sense to use that.
What does consistent mean in this case?
&gt; That's why I might come off as being "forced" to use serilog. Each to their own :-) Hopefully in time you'll see why many of us choose Serilog, and help guide us to improve the bits that are lacking (we know there are still plenty!). Cheers!
Aside from the tutorials and official docs, I would also recommend this free book from developer Nate Barbettini: https://nbarbettini.gitbooks.io/little-asp-net-core-book/content/
I'm self-taught, I taught myself using the book Programming Windows by Charles Petzold. I started making AOL programs back in the 90's as a young teenager. I then went to classic asp to asp.net and been doing this now for a very long time. 
Yeah, I have. No degree 67,500 a year at 21. You're going to have to work your absolute ass off. You will have to prove yourself every step of the way. Don't stop practicing.
I used alot of Bob Tabor's tutorials initially I also got a subscription to his site which had very simple tutorials and practical activities to try and test your understanding. I also did a computing course through the Open University which really helped me get an understand basic computing. I'm really lucky to live in Scotland because I qualified for student awards so the studies barely cost me anything. I agree with the majority of the comments that it gets to a point where you need to take a jump from the tutorials to just trying to build something. My hubby is a self taught (very patient) programmer and I there's no way I could've got this far without his help or guidance. He did keep reminding me that failing is learning. I don't know if this is stating the obvious or not but Stack overflow is good when you need some help. 
Just make a cairo surface and paint it, I think: https://github.com/jcupitt/vipsdisp-tiny
Saying what you will do and then doing it. This is hard because there can be a lot of problems that get in the way. Being able to foresee those problems and explaining that they are there and how that will impact your delivery (schedule, increase in tech debt, etc) is important. This comes from experience - the more software you deliver the better you get at it.
Self taught here. I did dabble in BASIC programming when I was a kid but found it too hard. I struggle to learn anything of value from books, I learn from *doing* stuff. But at the time, we didn't have internet, so the only thing I had to learn from were a few dry books that my dad had. I tried multiple times and made a few games and stuff, but it never 'clicked'. Decided to re-try at university (doing an unrelated degree) and learned Java. With the internet to help debug problems as I went it finally started all making sense. My first job was in Java, working for someone who was also self taught. I left to do engineering, but eventually drifted back into programming. They hired me because: 1. I already worked for them. I was known as a problem solver. They trusted my ability to be given a technical problem and sort something out to solve it. 2. I automated everything.I wrote a lot of VBA utilities, but also just super complex excel spreadsheets that got stuff done. Ties into 1. 3. I noticed when they had rubbish software products and rebuilt them. Often over weekends/evenings. They had some awful c++ and even Excel 'Proof of concept' products they were trying to sell. I figured even *I* could do better and just re-wrote them/did demos of how we could do it better like X or Y. 4. No one else applied when they tried to hire a software engineer!
I can only confirm this. Nswag is so great. Consider looking at identity server 4 for jwt. Have it currently running and works fantastic
I'm self taught, no degree, and currently a senior developer / manager. I was taking classes at the local community college and volunteering as an aide in the computer area when another aide said he applied for a job but didn't get it. Maybe I should try. So I did. That was over twenty years ago, before .NET. They barely paid me anything, but I got enough experience there to get an offer at another position. They used a '4gl' system, and the other company also used it, and there weren't a lot of candidates that really knew it. You'll see the same thing today with less popular technologies like clojure, scala, etc. They are kind of niche. If you have niche tech on you resume, there will be a few jobs that you are pretty much the only candidate. During that time I primarily focused on C and C++ development in my spare time, and ended up getting jobs doing C++. One of those jobs had a research project with this new '.net' 1.0 beta that was just released. I've been using it ever since. #1 take away that's still true today as was twenty years ago is that, depending where you look, there are more open positions than there are people to fill them. Keep learning, keep applying for positions, eventually you will get in. #2 take away is that it's not about software at all. It's about solving business's problems. If you can solve the business's problem by gluing two phones together then maybe the solution is glue not code. 
I've been working for 18 years professionally with no college experience, no certifications, and entirely self taught. The resources available today are much more accessible than they were in the past, so my advice to someone looking to get started would be to use all the online resources available to you, and do your best to get your foot in the door at a company that has potential for growth. A company like quicken loans is a great example of the kind of place that you could start a career at. You start off just doing reports or being a QA tester, and surround yourself with knowledgeable people. Handle your job, but aim at progressing. leave your ego at home, be a sponge when it comes to knowledge, ask lots of questions, and show you're interested in learning more and moving forward. I would highly recommend this approach, as opposed to going to work for a small company and being disconnected from more knowledgeable co-workers. 
While i have a university degree i learned all programming languages by myself (except that one obscure study language one of my professors prefered). I'm currently in my third job and i never had problems regarding my claims of programming/language experience. They try to check it and that it's. If you have a certificate that probably helps but in the end i don't think it really matters as long as to can prove it.
very nice tutorial. [http://dotnettec.com/asp\-net\-mvc\-tutorial\-for\-beginners/](http://dotnettec.com/asp-net-mvc-tutorial-for-beginners/) Thanks
This is what Redis is for. If you must, you should take a look at memory\-mapped files \([https://docs.microsoft.com/en\-us/dotnet/standard/io/memory\-mapped\-files](https://docs.microsoft.com/en-us/dotnet/standard/io/memory-mapped-files)\) for write performance, and maintain indices of the data for read performance. So basically build a very simple db engine.
I'm 53 and have a bachelor's degree from the late 1980's in programming. I started in COBOL (puke) then went to Clipper, then started going into VB when I fell into a classic ASP vbscript job 20 years ago. From there, the team I was on decided to move into .net, first in VB, and then in c#. I'm still at that job. Everything I learned after COBOL, I learned on my own after college. My advice is simple. The best way to learn is to do it. Find an app you want to build or a problem you want to solve and then go do it. Break it down into manageable steps, figure out how to do those steps and build from there. If there is something you don't know how to do, chances are, someone else has figured it out already and posted about it on the internet somewhere. Start small - even a "hello world" app if you need to. 
Or this is a fancier one: https://github.com/jcupitt/vipsdisp Again in C, but much closer to a full image viewer. There's also this: https://github.com/jcupitt/nip2 Which is a full image processing package with a GTK front end and libvips on the back. It's gtk2 though. 
I've always dabbled in programming since I was 13 and my big brother tried to get into me and gave me a big fat C# book of 700 pages. I never read a single page of it. Did a javascript/java course in school when I was 19, but nothing else. At 22 I started to program at my free time in C# after work hours. Doing that for 4 months I was laid of my job and started doing this full time. Did it full time for 8 months and then I landed a job at age 23 in september. Started as an internship which became a steady job, worked here ever since and I love my job. Best job I've ever had and so happy I decided to pick up programming. 
It won't read anything on its own, it's merely a OS-level buffer (is my understanding, which may well be wrong). You would still need a stream to read from it. 
Does the project build perfectly using VS 2017 ?
I don’t know what all that is... What is the life cycle of the app? Is it supposed to last forever or will it be replaced. Try to design it is easy to switch tech. Use interfaces and services so it would be easy to switch from AWS to Azure. Also, chose your front end Framework with caution. Web front end technologies are constantly changing. React and Angular might be popular now, but maybe everyone will be using something else in a few years. Remember you users have know idea and don’t care what tech/ Framework you use.
thank you! , reading up now on the link you sent 
I'm self taught, first job was as the lead (read: only) dev at an industrial printing company. Now I run my own consulting business, wrote a book on building Shopify apps, and do a lot of open source work in my spare time. I have never once been asked what school I went to, nor has being self taught stopped me from doing something or taking any job.
A lot of great technical focused responses. I don't know how old you are, but I'll assume you are young\-er, or haven't worked as a developer yet. In addition to the technical side of things, familiarize yourself with business too. Learn what agile/scrum *is*. Learn about *security* and *troubleshooting*. Start interviewing for developer positions as soon as you can, you will learn a lot about what people want just by going through the interview process. Be a \-human\- in the interviews. Personality goes along way. Connect with people, network, attend .net user group meetings \(if there are any in your area\). This is me...[https://www.linkedin.com/in/johnfly/](https://www.linkedin.com/in/johnfly/) if you want to connect there, I'll see if I can help you out somehow.
Check out newrelic or application insights. PM me if you want to talk more, there are a lot of ways to attack issues like this.
Still nothing . 😓
I've been in the industry since 95. Completely, 100% self taught school of fake-it-til-you-make-it. Got my first real developer gig by automating my job....
If you need to find multiple values for a longer stretch of time (so, not just once or twice) then the best solution is to use an SQL database engine. Using filestream read in the chunks, and push them to the database. This will be basically the fastest way if there is no order in the files. However, it could take a long time to create the database from the pairs.
Check Stackify Prefix
If you’re looking for an MVC-specific, built-in Razor helper method for date pickers, you’re out of luck. Fortunately there are plenty of 3rd party date pickers from which to choose (jquery ui, bootstrap, flatpickr, etc), or you can use the html5 date input as another poster mentioned. And to make it reusable, you can create an EditorTemplate view for DateTime types and then use the HTML.EditorFor helper method to render it. 
See [this stackoverflow thread ](https://stackoverflow.com/questions/12633471/mvc4-datatype-date-editorfor-wont-display-date-value-in-chrome-fine-in-interne) for an example of using the Html.EditorFor helper with DateTime properties to render a date input. 
Not sure because VS 2017 is only on windows agent where I cant log in due to permissions. In VS 2015 its working.
Loads and loads of jquery datepickers available. 
Where are the files stored? Ideally they're on physically disparate storage and you can parallel read up to the 10 partitions number. 
Sounds like all you need to do is install the .net 4.5.1 developer pack on your build agent. (In this case I think 4.5.2 would cover you) https://www.microsoft.com/net/download/visual-studio-sdks
It can really mean whatever you want to be honestly. Code every day, learn every day, being able to keep a schedule, being able to deliver software, etc.
I agree with airbreather on this as well. I had to parse 500mb email storage files back in 2005 as quickly as possible. One of the biggest gains I had was loading 1\-2mb of the file into memory at a time as a buffer. Disks were super slow back then, and most OS reads do so at 4k \(while SQL reads 64k a time I think\), while the drive itself might try to read more \(eager loading\). Drive reads are expensive operations, so reading 1mb has the simlar OS overhead as one 4k read because it has to pass through the kernal, plus the disk is already right there in the spot you need. You can check this by looking at the kernal times in task manager, because you are basically moving things over to userspace. That project took kernal times from 40\-50&amp;#37; to almost nothing and then started to overload the sql server it was dumping metadata to. Now, other things you could do. Make every line exactly the same size. Then you can jump from "row" to "row", look at the first byte, check if it is the first byte you are looking for, check until it matches or doesn't and keep going down the line until you get a match. .Net's string compare does something similar but converting from byte to string does do some allocations. Ideally you would order the data and you could do a binary search on the whole file which would be super quick. A binary search tree would also be great, but you would need pointers to leaf nodes.
Read the files and store the values in redis
For as little memory as possible then something like File.ReadLines streams the data to you, rather than loading it all into memory. Not sure how you would do 'fast' under these scenarios. 
So in addition to improving your craft you need to do two things: 1. Try to program for your day job or other places that you could put on your resume. Its hard to get that first job as a developer. If you can make it look like on your resume you are already a developer that makes things easier. 1. Network. Go to meetups and training events and stuff. See if you can work on something to present at meetups. Even if its just a "back to basics" or a "these are weird tricks I learned." Mention your looking for a real development job. 
Don’t use text files for a database
Edit the model and add a DataType(DataTypes.Date) attribute to enable a browser specific date picker plugin.
Buffer for your reader
I had to look up survivor's bias, and I gotta admit that I probably am guilty of it to a degree.
Sort of. Like u/chopstyks, I started with a Vic 20. I worked in restaurants and programming was a hobby. I knew paper was going to be an issue, so I took a 15 month "intensive" program. That led to an internship, some drama, and then a job. None of the things we studied were directly relevant to the jobs I've had, but it got me back in the habit of getting up early and made me familiar with what was current in the industry. The groups that were starting as my group was finishing the course had a new curriculum that included web stuff. 
You shouldn't be applying any business logic to the data models used for entity framework, so if you need both an Account and an AccountStatus for some piece of business logic, then the Account should have an AccountStatus property and you should apply the business logic to the Account domain object (which doesn't necessarily have to be your DTO if you use a 3-model approach, but usually is your DTO). Consider using [Automapper](]https://automapper.org/) to convert from the objects used for persistence to the objects used for business logic and return to the client.
Heres a cool demo I like. Try 200 actors on javascript vs wasm http://aws-website-webassemblyskeletalanimation-ffaza.s3-website-us-east-1.amazonaws.com/
How i could access to them , lets say i have a Window with 2 (my) Usercontrol and a textbox and i want to databind the Content of a property in the Usercontrol to the content of textbox , is this feasible &lt;Textbox Content="{Binding Cont1.property}" 
Why dapper over entity framework? Better to have official supported frameworks straight from Microsoft 
Maybe persistent would be an alternative work? I would agree with persistence as being a good trait for learning any skill.
I really agree with this. My solo learning is what enabled me to pass the technical interview for my first junior dev job, but I a.) would not have gotten that interview had it not been for the mentorship I sought out from experienced devs, and b.) would not have progressed beyond the junior position if not for everything I learned from the senior devs on that team. I learned more in the first month as a junior dev than I did doing the solo thing. (But I wouldn't have gotten the junior dev had I not done the solo thing.)
Speed and ease.
I've been using Shouldly mostly for better asserts.
Anything specific? Because I’d associate speed and ease with EF core too. But to each their own I guess.
No, I meant consistent.
Both really. Sure, you need persistance to not let things get in your way. But my point is you need constency to have that constant to keep going.
https://exceptionnotfound.net/dapper-vs-entity-framework-vs-ado-net-performance-benchmarking/
Does fluentassertions compare?
"How do I achieve X with Y? X is going to be suuuuuuuper complicated because of Y" Answer #1: Do all sorts of complicated stuff Answer #2 through #N-2: variations on #1 Answer #N: change Y until X is simple
My personal preference is the Bootstrap v3 Datetimepicker. Available as a NuGet download, just be aware that the default is a Less package, and you need to target the CSS one specifically if that’s your thing.
If you are using MVVM you never bind to anything in the user control. You will have a View Model behind your View (User control) that has the properties to bind to. If your *ViewModel* has a reference to another ViewModel's as a property you can bind to it into he View as you describe. But unless you've got some kind of recursive tree structure it's unlikely your view model will have a reference to a ViewModel of the same class. Generally you don't have your View named and referenced like that with MVVM.
I assume that when the OP requested a message in the assertion, they meant that they want an explanation associated with an assert. I've down-voted you because your recommendation does not meet that requirement. If I misunderstood the requirement, I apologize.
&gt; Shouldly vs fluentassertions FluentAssertions sports a... more fluent interface, resulting in longer, however easier to read code. ``` // Shouldly: "Name".ShouldStartWith("N"); // Fluent: "Name".SHould().StartWith("N"); ``` Throws: ``` // Shouldly Should.Throw&lt;ArgumentException&gt;(() =&gt; calc.Divide(0, 0)); // Fluent: Action divisionByZero = () =&gt; calc.Divide(0, 0); divisionByZero.Should().Throw&lt;ArgumentException&gt;(); ``` At the end of the the day they're very close to each other, with FluentAssertions having a considerably larger and easier to discover library. The winning argument for me is the availability of the `because: ` argument to all operations. ``` calc.Add(1, 2).Should().Be(3, because: " 1 + 2 is 3"); ``` 
You can change your panels itemsPanel. Somithing similar to this tutorial: https://www.wpftutorial.net/ListBoxItemsArrange.html
Thank you - I was using the new Reddit UI which supports GH-style code blocks, forgetting the old UI does not.
Thanks for the reply. I have the list box looking how I want, the issue is getting it to act like a combobox. So it has a drop down and is selectable. 
Sort of, I'm looking for messages for xUnit asserts (like nUnit has) and I'm feeling lazy about adding them all myself :) I've used FluentAssertions before and often found myself needing to use nUnit's Assert to be able to produce a good message. 
In that case I apologize for misunderstanding. Can you give me an example of "messages for [...] asserts" because I an not sure I'm familiar with what you're describing.
You understood the general need :) I'm looking for some code that adds the message overloads to the xUnit Assert class. (fluent asserts would work fine for these simple messages) Assert::True has a parameter for a message Assert.True(loadedInvoice != null, "Should have been able to load the invoice"); Gives ==&gt; Message: Should have been able to load the invoice Expected: True Actual: False Assert::NotNull doesn't. Assert.NotNull(loadedInvoice) Gives==&gt; Message: Assert.NotNull() Failure 
I taught myself C# 3.0 about 10 years ago and never looked back, feels good man. Luckily for me, I had a supportive employer who let me learn on the job, otherwise I may never have had the time to learn.
Exactly. OPs use case wasn't exactly clear, so if the data doesn't fit into main memory, it's a poor choice - in that case, you should use a database. If memory is not an issue, Redis has fantastic performance and can persist to disk. They describe it better than I ever could here: https://redis.io/topics/introduction
I see. I'd personally try a few things, in order: 1. Move to Fluent Assertions (because it does honestly read better) - that's your nuget package that implements all the asserts with messages :) 2. [Raise an issue](https://github.com/xunit/xunit/issues) with the Xunit project. 3. Submit a PR to [assert.xunit](https://github.com/xunit/assert.xunit) 4. Write own extension method(s) while either 2 or 3 are implemented.
Oh, my bad. I will look into using EF Core.
To be fair, installing and setting up a database server might seem complicated if you're used to making quick console apps or something. But the rewards of doing things the right way cannot be overstated. These are skills you need as a programmer, and best to develop them now. Also, long term maintenance is 1000x easier. 
Why can't you load the key-value pairs into a database? If you're getting several requests per second, you might want a NoSQL solution like these posters are suggesting. But if you aren't, you could even just dump them all into a SQL server database and index the keys. 
I tried both Jquery UI and Bootstrap.Datepicker. I specifically need datepicker that doesn't target a model's attribute - user just needs to select a date and pass it to controller method. I've tried both plugins to work in many ways, none worked.
As tweq points out, that's pretty much the worst possible solution for your goal to minimize memory usage. You're probably looking at something like 25GB of memory usage in that scenario.
So, you are talking about a selection that immediately pipes the output into a POST back to the controller, without any further action from the user? If so, I don’t think what you are looking for exists in a plug-and-play form. You will have to wire up the output of one of the tools mentioned such that it immediately transmits that chunk of selected data back to your controller in a POST action instead of just filling a form field in the view. Kind of like how selecting a checkbox can also submit the form that the checkbox is a part of. This is custom JS we’re talking about here. Good luck.
2 &amp; 3 =&gt; :( Did they give any reason as to why they don’t want them added?
&gt; a custom encoding for the pairs that lets you load the whole thing into an in-memory hashtable using a lot fewer bytes I wonder what the performance would be like with a sort of custom hash table that only keeps the key hashes and file offsets in memory.
https://github.com/xunit/xunit/issues/350 &gt;We won't be changing our minds on this issue. Shouldly, Fluent Assertions, and xbehave are mentioned as alternatives in the discussion. &gt;The move to make our assertions available as source was also motivated by a desire to make them optional. We've heard from a decent portion of our user base that they end up using other assertion libraries like Shouldly or Fluent. So they seem to know people feel that something is missing, but they don't want to change it :P
Maybe I didn't explain well. User selects FROM date in datepicker, TO date in datepicker, an attribute, and submits the trio to ActionResult whatever (Datetime from, Datetime to, string whatever). My initial problem is - I can't get any of the solutions to work. I tried adding jquery&lt;version&gt;, jquery_ui* and jquery.css, along with the Textbox and script. I tried variations of this by including the Bundle, or by calling a script on each of the files (2 js's and 1 css). Same with Bootstrap.Datepicker. Maybe I am missing something that's obvious to front-end devs, I'd appreciate a step by step, with explanation on what exactly to do with JS portion ($. something).
How about this jQuery one https://jqueryui.com/datepicker/
Have you been adding the appropriate HTML? Many JS datepickers depend on the correct HTML+Attributes in order to determine where they should hook in and display themselves. Could you post all relevant pieces? Like, the JS that is supposed to trigger the datepicker and the HTML of where it should be sitting and the form elements it interacts with?
Are they ini files? You might be able to find a parser. 
Ya, still need to switch to source to add the partials. The exceptions it throws have hard-coded messages :P public static void NotNull(object @object) { if (@object == null) throw new NotNullException(); } public NotNullException() : base("Assert.NotNull() Failure") { }
Here is a codepen https://codepen.io/JeromeAtWork/pen/WJEBPm
Now I'm getting this http://prntscr.com/jdtuqf (bottom one is when I click on textbox). I must be overlooking something really simple 
Now I'm getting this http://prntscr.com/jdtuqf (bottom one is when I click on textbox). I feel like I am missing something obvious
Oh… *eheh…* OOPS. @Html.EditorFor(x =&gt; x.Email, new { htmlAttributes = new { @class = "form-control", maxlength = 256 } }) An example from my own code. This would also work: @Html.EditorFor(x =&gt; x.Email, null, new { @class = "form-control required", maxlength = 256 } ) and is probably better from a clarity standpoint, as instead of piping the HTML attributes into the template, you are explicitly setting a null template and utilizing an explicit overload that handles the HTML attributes.
Try creating a blank html file and dropping just the date picker code into it and see if that works. Seems to work for me.
ClickOnce is terrible. Underlying DFS path of a share changes? you are hosed. Oh you want to roll back? You are hosed. You want to do incremental rollout of x users per day? you are hosed. With that said if you want a simple solution that works well 95% of the time clickonce is the solution. 
I use [Squirre'](https://github.com/Squirrel/Squirrel.Windows). Its not perfect but it is super simple to get going.
Clickonce is a pita and full of unexpected bugs. Also Microsoft dropped it. Try squirrel
Tried it, I'm getting TypeError: $(...).datepicker is not a function. Don't know how to resolve it, searched and it's probably double calling of jquery, but I am not calling it more than once so I don't honestly know.
Visual studio. Can't use EditorFor since I am not using any model in my Datepicker, merely getting a value for controller method. "Weak" @Html.Editor returns the same old nothing (only the specified class), while complaining that $datepicker is not a function.
Every time I look at it, it seems to totally miss out the part in the docs about if it does or does not support automatically grabbing the new version from a HTTP server or not. Does it?
It somehow always does *almost* what you want and that last bit is almost impossible. 
Windows apps. Assuming you have a sane local domain you can [create a private app store](https://docs.microsoft.com/en-us/microsoft-store/distribute-apps-from-your-private-store) and enable it on everyone's machines. Once that's done, you can [package up your application using the converter tool](https://docs.microsoft.com/en-us/windows/uwp/packaging/create-app-package-with-makeappx-tool) or since you're asking in the dotnet subreddit [you can properly package it up](https://docs.microsoft.com/en-us/windows/uwp/packaging/packaging-uwp-apps) and then [distribute it to everyone in the company.](https://docs.microsoft.com/en-us/windows/uwp/publish/distribute-lob-apps-to-enterprises) No dealing with ClickOnce, users can update whenever they like (or you can force updates with the right API), and you don't have to deal with the distribution system. Using this method you can actually convert existing things (like Notepad++) to private app store apps and distribute them that way too.
It does, we skip the whole server side and just have scripts to update the text file it looks for and handle correct naming on the upload script run from jenkins. 
&gt; I am not using any model FYI you are playing with fire, here. You should *always* use a model for any form, for security and data validation purposes. Some of the more effective data validation packages, such as Fluent Validation, *require* a model to work with. Not using a form puts your POST at risk for hijacking and undesired data manipulation. Keep in mind that I am talking about a generic model, and not specifically a data model for the database. You should also never have a data model be punted out to the view; you should always build a model specifically for that view, and then populate that model with data from the database. Once it comes back to you, you extract the data out of the view's model and insert it back into the data model before updating the database.
It has a pretty rich tool-chain. Being able to automatically generate typescript and C# SDKs from the swagger json is a nice to have. It also has swagger 3.0 support, and can target ReDoc as well with minimal changes to the configuration.
Don't know about the [docs](https://github.com/Squirrel/Squirrel.Windows/tree/master/docs) I did this by pulling and reading the squirrel source about 2 years ago. I had a simple example from the previous developer that set me on the path, no idea where he got it but its not hard to see. The client side relies entirely on your impl to tell it how to access your endpoint, be it a file system or HTTP. Implement your own client side by implementing IFileDownloader and let it do as you like. Ours uses WebClient to access azure storage. You can implement what you like and the code seems to just do a series of GET requests using default IMPL. We added the downloader to support auth using azure storage.
Have you used it with something like [Bridge.NET](https://Bridge.NET) / OOui? Seems like the NSwag generated code could be used on both the front end and back end of a web app based on those.
Is that true? I don't think it is. I thought you have to read all lines in still?
Memory Mapped Files I believe there is a .NET class for that.
Sorry, that's a known limitation of Swagger.
One of the pluses of using Shouldly is that all (? at least most) asserts support adding messages for when the assert fails. Also, the errors include source code context where it happens, so there's more info when a test fails. Using other libs for asserts seems to be intentional from the xUnit team (see https://github.com/xunit/xunit/issues/350#issuecomment-78211551 ). Apparently when people start using more advanced assertions they tend to jump to specialized libs, so they didn't see a need to go for more than the basics, perhaps. This is why I think my recommendation matches the OP's requirement. Makes sense?
&gt;Is that true? I don't think it is. I thought it still loads the complete file in memory in order to iterate through it. I think what he really needs here is memory mapped files. FileStream does not require loading the entire file into memory. I would recommend using it, rather than memory-mapped files, for most use cases that simply need to read or write an entire file from beginning to end (and, honestly, most other cases), especially 32-bit applications where virtual memory address space is at a premium.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/azure] [(X-Post) Deploying to Azure using a local git repository](https://www.reddit.com/r/AZURE/comments/8h3jqz/xpost_deploying_to_azure_using_a_local_git/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
As Redis operates in memory, seems like it wouldn't be a very good solution for OPs question. That'd be 10GB of memory depending on how well optimized Redis can store it. Pretty much any other database other than Redis or memcached would be sufficient.
I use VS2017, we have a .NET .sln for WET that is available internally in the government. 
Guess my 7zip self extracting exes and bat scripts are kinda low tech...
If you have no Computer Science education at all you can expect people question whether you understand basic CS concepts.. data structures, algorithm complexity, recursion.. that kind of thing. 
Cool I see 
Swagger follows open API spec I'm not sure if you have actually gotten an overloaded path to work (I believe it will always pick the first one if there is an overload but not 100% sure) but it's not part of open API spec so swagger will throw an exception if you are trying to do a non standard thing with the generator. If you really wanna hack up the swagger docs just write your own swagger.json
\+
Companies look for the same thing in self taught v comp science majors. The business wants the applications to do things. The companies want developers who can make the computers do what they need. You need to prove you can make working applications. A working developer gets 1,500 hours (or more) of on the job practice each year... If you want to be employed as a developer than code, code, code and code some more and apply for jobs too.
It will not pick the first one, it will break swagger. We have an option to use ResolveAmbiguousAction to choose which one to pick first or last. 
The same thing they look for in all programmers. I'm not going to lie, not having a degree will close some doors for you. However, this filtering will happen at the resume stage. If you get called in for an interview they are basically over it. If you answer the questions competently and seem like a good fit for the team that will matter a lot more. Just keep in mind that a month might not cut it. Whether self taught or no, it takes a lot of work to be at the level where you can be professional. A great way to offset the lack of a formal education is to create a portfolio. You say you have a lot of time, so you can put it to use. Put together a list of personal projects you are proud of, and try to show off one that's most relevant. Another thing you can do while you're looking for a salary position is to work as a contractor. I'm no expert on this side of things but if you can pick up some odd jobs you'll gain professional experience to put on your resume. I imagine a portfolio will help here as well. When you do apply to jobs, I recommend startups, small, or medium companies rather than larger corporations. This is because larger corporations are more likely to have HR teams that do the hiring that use software that will filter you out based on education before a human even sees your resume.. and larger corporations are also more likely to have tiered salary schemes based on education. You can find lists of interview questions online to get a feel for the process and also learn where you have more learning to do. Remember, school matters most for the first job. It's relevance on your resume will sink into obscurity once you get some years under your belt. As a young man, I floundered for years working gas stations and fast food joints even though I could do the work. I felt that because I didn't take the standard path that being a software developer was closed to me. It doesn't have to be that way - it's possible to forge your own path. Especially today. It just takes work. Good luck. Source: I've been in the industry for decades, and have been involved in hiring programmers for ~15 years now.
Yes a very similar scenario. 
I have an ActionConstraint that takes care of the api selection.
You might want still want to take a look at OrchardCore in essence it is a modular framework you can use to build a CMS. Even if you don't want to take the entire package you can plug in some of the modules (like templating, widgets, etc ) into your own MVC application. 
I used contentful.com recently and it worked really well. You can build your editing and publishing workflows in contentful, and the scope of your .NET project would be reduced to API calls (and some caching) of the content. Worked really well for our use case. We built some pretty elaborate data models too.
if the data rarely change could be to do an initial scan and insert into one or more sqlite tables and then do selects towards sqlite. But as others mention why can’t you use a lot of memory - how mush memory can you use?
Really depend on the usage, but yeah, if it's rarely accessed data, then any ordinary db would be better than Redis. 
Regardless of if you have some hacky thing to determine when "5" is a string and when "5" is an int it still doesn't conform to open API spec. If you want to check out the full documentation you can find it here https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md 
So I got it working, Need to use "ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12" Hope that helps someone. 
I interview, but I don't screen resumes. If you get past the resume screen, it's all on the interview, but getting past the resume screen will be hard. I have no insight to give there. I'm at a large place, so a good chunk of the resume screens are automated. Those will be hard to bypass, but it is certainly possible. At the interview, there is little difference between you and a college hire. Demonstrate technical knowledge, know basic CS principles, be familiar with data structures &amp; algorithms. That kind of thing. Between you and an industry hire, I am going to try and probe collaboration. Self-taught developers have often never worked with anyone else before. Trying to figure out if you can do that will be a major focus. Contributing to an open source project is a great thing to cite here.
TIL that ActionConstraints were 'hacky'. Thank you for sharing the link, but I have read through the standard and that is why the title of the post clearly says is there any way to 'circumvent this annoying constraint!'. If you could contribute something that is of any actual use that would of great help. 
i use contenful too, works ok. been tempted to switch to prismic as their slices feature is kinda neat.
A degree in computer science or an equivalent usually.
&gt; But as others mention why can’t you use a lot of memory? - how much memory can you use? OP said "as little memory as possible", so I factored that into my reply
Yes I know, you did a good job answering OP
I've used Umbraco in the past and I think it could provide what your looking for. We used it for a wide array of clients where the amount of customization and ability to manage content was very minimal all the way to extremely customizable. This would range from editing a single text area on the page to having the ability to create entire pages, partial views, and forms on the fly using different layouts to control the look and feel. The good thing about Umbraco is that as the clients needs change it does not require a lot of effort to expand on the editing and content management capabilities on a per page basis. Also the framework doesn't get in the way, it's still an ASP.NET MVC project at the end of the day and you just leverage the Umbraco Libraries to interface with the CMS. https://umbraco.com/
Immediate disqualification and blacklisting. Its one of the basic tasks of recruiting, timeline verification.
I think generally they will look for understanding of programming as a whole. Most languages the core concepts are very similar. As log as you can demonstrate an understanding of that some entry level positions will be open to you. Make sure you nail down key concepts, OOP, data structures, design patterns etc. Obviously if they are advertising for a particular framework it will help a lot.
To ensure the correct styling, you should copy the control template, like so: https://stackoverflow.com/a/15063634 This gives you exact copy if the styling, which you can edit to your liking. :)
Why wouldn't you make your second route /api/client/{id}/otherResource/{otherId}?searchMode ?
When you're working between operating systems, it's no longer styling, which is skinning. At the OS level it's called themes. Look up WPF themes.
I believe OverridesDefaultStyle turns off the entire default style, including anything that was used for layout, so the entire template.
They can't really verify either way I don't have a degree but out on mine that I went to cc and transferred to University for comp engineering I never explicitly stated I have the degree, but they always assume I do
Hmm so I should just keep that option disabled then?
School doesn't matter for programming. I've been doing this 20+ years and have zero issues getting a job anywhere. Real world experience bears out a degree almost every time with the only exception being some type of science based job. Places where you'll be working on MVC and some flashy ajax front end have not business asking for a degree since those topics aren't even taught in University courses. Basically self taught engineers will get the same questions as those with degrees, however they'll both be on equal footing. Out of all the years I've worked for big companies, small companies, and everything in between, I've not met a single person with a degree related to the job.
I think so
This is the reason they bother true professionals with fizzbuzz and other horseshit. Because they need to weed out the fakers.
I second. Read some books about algorithms as well as practicing Project Euler.
This is excellent. I started a library to do something very similar but ended up losing interest. I will definitely use this.
Nice
Just expose the second one at a different endpoint. I wouldn't think it's worth fighting the frameworks just to get an arbitrary url to work.
This brings back memories from Turbo Vision and Slackware setups.
Awesome! 
This looks great, but one issue I have with using C# for smaller applications like this, is it's not a single binary (I think). Assuming the individual has dot net core already installed, it doesn't seem like they can get just a single file and run it. Instead there are tons of other files, even when doing ```dotnet publish```.
Is there any special reason why you almost everything is var, instead of label, textfield etc?
Have you installed the .NET Core Web Hosting bundle? It includes the ASP.NET Core Module which is used to communicate between IIS and Kestral. Do you have a web.config? If you do, make sure your not using the placeholder values.
var is useful for maintenance of the code (depending on the situation), e.g. if I decide to start passing a double instead of an int, that local reference doesn't need to be retyped. Might not seem useful in such a small example but it can be very beneficial in larger team projects with frequent change.
[Costura](https://github.com/Fody/Costura) should help. Haven't tried it with dotnet core yet, though.
You can always ilmerge them back into one binary
Ok, thank you for a very informative answer!
You can use iterators as an alternative to the async approach. Have you tried that? 
Great stuff! I haven't had a chance to try it yet but I will be tonight! Looks awesome!
I just started using buttercms for my in development ASP.Net Core website. It's amazing. It takes literally minutes to get up and running. It's a headless CMS and pricing is much more affordable than contenful. I haven't used it in Production yet but so far no issues at all integrating it. It's exactly what I was looking for. 
I tried Costura with .NET Core a week or so ago, it’s not supported. They did say they’d accept a PR for it though. https://github.com/Fody/Costura/issues/227
There is nothing wrong with VB.NET. I wrote all kinds of enterprise level software in both c# and vb.net. I never found anything in c# that i couldn't do in vb. Use it if you like it. 
I think it mostly comes down to syntax. Most people are used to C-like syntax, and when facing different syntax, even if only slightly different, they tend to not enjoy it.
You should learn axml first. You should learn how to build apps natively first before you learn to build apps in Xamarin.Forms.
They are both XML based. The real question is do you want to use Xamarin.Forms or Xamarin.Android. If you're confused read [chapter 1 of this great ebook](https://docs.microsoft.com/en-us/xamarin/xamarin-forms/creating-mobile-apps-xamarin-forms/) . Xam.Forms is good for making quick, simple UIs (or forms) with Xaml. I find it easier to work with (perhaps because I've used it more). If your project's UI grows in scope and complexity you will find yourself writing custom views, renderers and workarounds out the wazoo. This will eventually lead you to question your original choice in using Xam.Forms. I suppose the benefits of using Axml (Xam.Droid) is that you've got more control over your layouts, more things to work with as you're just using Android stuff more directly. If your goal is strictly Android development: Unless you have a particular love for C# or F# (as many do), you should probably just migrate to Android Studio and develop natively. If you're considering job prospects you should do a job search to find out what's more popular in your area.
Should I expect this NOT to work in Mono? Not having much luck there.
It's a capable language but as a professional I don't want to to tell clients I am using basic anything. I know it's a lame excuse. I switched from VB to c# when it became a thing.
I live immediately next to a college that teaches C# 
The last few jobs I've had required me to give permission for them to request records of various types. You must have gotten lucky, and I don't recommend this approach.
I love VB.NET, still use it. C# has been pretty enjoyable though.
I first learned to code in VB6, so I’m one of the reasons people hate VB. I think a lot of dislike is because more amateur coders use VB and so you get more amateur code. I switched to C# when I could because I think C# is mostly easier to code in. But there is nothing wrong with VB.Net. 
Just thought of a another gripe. I guess I'm in a ranting mood. **I hate the For loop syntax.** ' I want to print every other element in an array, so For i as Integer = 0 to SomeArray.Length - 1 Step 2 Console.WriteLine(SomeArray(i)) End For for(int i = 0; i &lt; SomeArray.Length; i += 2){ Console.WriteLine(SomeArray[i]); } And a bunch of other minor language gripes, such as the syntax for casting variables and lambda expressions.
I don’t think it’s the language so much as who tends to use it and how they tend to use it. There’s a pretty strong association between VB and poorly architected legacy enterprisey apps written by people who weren’t programmers and weren’t very concerned with the quality of their code. 
simply put, the syntax is awkward and unpleasant to use compared to C#.
I agree with your post. Just want to talk about this: &gt; End If, End While, etc. are better than just closing everything with a brace. If you've ever looked at 5+ lines in a row of closing braces in a C-like language, you'll probably agree. IDEs and extensions can assist a lot with bracket grouping (e.g. [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer)). You don't have to live with confusing bracket matching. If you have several closing braces (or even VB's End If/End While's) in a row the code often could be refactored. A lot of times excessive indentation can be avoided by inverting or merging if branches and splitting loops's inner scope into its own method. Doing so is easier to read and easier to maintain/reuse, often the compiler is smart enough in production mode to optimize out the "extra" method. if(person != null) { foreach(var kink in person.kinks) { switch (kink) { case Kink.Feet: person.experiences.Add(ShowFeet(footModel)); break; case Kink.Voyeurism: person.experiences.Add(SexyTime(someoneElse)); break; case Kink.Pain: default: foreach(var bodypart in person.bodyparts) { person.experiences.Add(pain(person, bodypart)); } } } return person; } Vs. if(person == null) { return null; // What should happen here? } foreach(var kink in person.kinks) { switch (kink) { case Kink.Feet: person.experiences.Add(ShowFeet(footModel)); break; case Kink.Voyeurism: person.experiences.Add(SexyTime(someoneElse)); break; case Kink.Pain: default: ProcessPain(person); } } return person; 
&gt; There was never really any good reason to use VB.NET over C# * COM interopt (including Office) * Working with XML * WinForms (withevents beats manually wiring and unwiring up events) * Anything needing to deal with late binding (i.e. dynamic typing) Today none of those reasons are valid (except maybe XML), but at various times VB was definitely the way to go for some projects.
&gt; VB uses parentheses for everything. Yes and no. VB doesn't need parens for `if`, `while`, `using` like C# does. 
Frankly the fact that VB.Net still supports this bullshit is why a lot of people dislike it: [On Error Statement](https://docs.microsoft.com/en-us/dotnet/visual-basic/language-reference/statements/on-error-statement). And while Microsoft recommends against it, and VB.net fully supports regular try/catch/finally ("structured exception handling"), it [continues to be used](https://visualstudiomagazine.com/articles/2016/11/01/life-without-on-error-resume-next.aspx) because VB6 programmers kept writing VB6-style code but in VB.net, or just have a huge converted VB6 application brought into VB.net 1:1. 
When I first started using C#, I thought it was the verbose one. All this extra syntax to avoid using a simple keyword. Consider `public string Name { get ; set ; } = ""; ` 12 tokens `public property Name as String = ""` 7 tokens Of course "verbose" is mostly opinion.
Are you kidding? Have you seen C#? It's like a bastard of legacy C syntax shoved together with random OOP concepts. Let's be honest here. If we were to design a language from scratch with no legacy baggage, neither C# nor VB is what we'd come up with.
1. It has the word "BASIC" in its name. That's enough to hate it. 2. It isn't based on C. When C# was released, the major languages people were talking about were C, C++, Java, JavaScript, PHP, and Delphi. 
[My test framework](https://github.com/CreateAndFake/CreateAndFake) has that, but it's not really the focus of it. Still, it's there if you want. I'm not sure of any others besides the fluent ones others have given, which I've never really been a fan of. I made my own so I could add value equality details without having to be dependent upon any other test framework. Making a plain assert helper class is pretty easy to do yourself though, really.
I learned VB (. net) before c# because of a team member at the time (over ten years ago ) had a lot of excel macro experience and it was just easier for them to pick up. After maybe a year the team changed and we moved to c#. From my experience I think the many times the people that get into VB don't have classical computer science degrees where you might have learned c, c++, Java or JavaScript (now not back when i went to school). VB is easier to learn especially from a VBA background. 
Great post and great feedback from the community. I am new to programming and have compete coursework in VB.NET and this thread has been helpful for developing insight into the current status of VB.NET in the community. Where would you advise me to go from here? What options would be best for career opportunities? Thanks.
If you have more than one client you might want to take give the client a permission set ad well. We did an intersection of the scopes the user and the client can access and the resource exposes. That way even if a user has a ton of scopes it can access for a given resource, if the client can only manipulate a few of those only those end up in the token. 
Well I hate VB.NET because it got an `Aggregate` LINQ clause and I am a jealous dude
This may not be a primary reason, but there are some code-generation tools that only output in C#.
If you make it a getter only property the c# code will be a lot smaller than the vb. Net one... 
I think it’s more of an issue where dev teams want everyone writing in the same language, and c# won the popularity contest. 
I just looked at the top 20 engineer positions in my city. All require degrees. You won’t even make it past the filter at my company without a degree. Even the head shops in my area require degrees. Not saying this is good practice, I’m just stating a fact. Also not saying you can’t get a dev job without a degree, but it unequivocally opens doors otherwise not available.
Consider `public string Name { get ; } = ""; ` 10 tokens `public readonly property Name as String = ""` 8 tokens 
I was thinking of readonly with a backing field, but fair enough ^_^
I think that is a strongly biased opinion. None of C is pleasant to look at, and the syntax is pretty hacked together from other languages. Visual Basic at least maintains the concept of being easily readable while still doing almost everything C# does. The syntax is inherently easier to "use" by design so I'm not sure how one would call it "unpleasant" from any unbiased standpoint. The only thing you could really argue is unpleasant about it is, again, its inherent difference from every other popular language.
I agree the legacy stuff in VB weighs it down a lot, and might be a leading part in it's death... which is a shame because of how inviting of a language it can be. A lot of people got their programming legs from old VB and moved on from there.
As a VB.NET programmer, C#. Microsoft has all but given up on VB.NET, and they've straight up said a lot of newer stuff like .NET Core, ASP.NET Core, Blazor, etc. will never get full VB support. Learn VB.NET all you want but don't rely on it for your future.
Unrelated, but... best example code ever. :D Did you make this up to take the piss or is it actually from somewhere?
4. Microsoft keeps wanting to drop VB.NET. I love VB.NET and have used it on enterprise software, but if you're looking to the future (.NET Core) you much much more certainty using C#. Microsoft never seem forth coming with VB.NET and overtly have wanted to drop it for years.
A lot of VB6 devs found the jump from VB6 to VB.NET so steep, that they might as well switch to C#.
I've had var bite me in the ass enough times that I have severely limited the use of it to local variables that aren't the return result of a function and get used in the next line or two and no where else. Also if the type isn't able to be ascertained without hovering over the name (on the line its declared), then don't use var. Following those rules means intellisense works really well when you refactor and break things. Its also a lot easier to read and understand what the intentions were. Biggest downside is working with multiple people where its use is a judgement call so its never strictly adheared to or enforced.
Very much depends. I enjoy PowerShell a lot, even though the syntax make scripts look very messy with just a few lines of code. Structure and discipline is important to keep them clean. I'm looking forward to learn F# and R for my work, piping comes very natural to me so it looks interesting. As you can probably guess I adore LINQ fluent syntax in C#. There's just something about VB syntax that makes me frustrated and angry.
Sounds about right. We started over with a C# app but with the same guy who wrote the VBA application. As you can guess he just repeated his mess.
Try `e.Handled = true;` at the end. Wild guess. Why is your function called GotMouseCapture? Is this the UIElement.GotMouseCapture event? &gt; When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. Are you using capturing for what should only be a mousedown event? Cause then I imagine some other textbox has your mouse captured and that's how you get weird things happening.
The problem with VB.NET is that's it's neither one thing, nor another. It's **NOT** the next version of VB6, and it's not something like C# either. You have the shitty syntax of VB hiding all the same complexity of C#.
VS 2017 Microsoft straight up broke [VB.NET](https://VB.NET) compilation and IntelliSense across several minor releases with changes they made to parallel project initialization. Most of those issues seem to be fixed in the latest minor release, but that was painful and it was pretty clear they weren't performing exhaustive testing on [VB.NET](https://VB.NET) solutions.
I've been coding in a mix of VB.NET and C# for about 8 years now. As a language, VB.NET really isn't that bad \- under the hood it still compiles to MSIL, just like C#. The syntax is definitely more verbose, so there's more code to scan/write. In some places the syntax it's just plain annoying. I especially dislike: **Lamba Syntax** VB.NET Dim filteredItems As IEnumerable(Of String) = items?.Where(Function(i) i.Id = 10).Select(Function(i) i.Name) C# IEnumerable&lt;string&gt; filteredItems = items?.Where(i =&gt; i.Id == 10).Select(i =&gt; i.Name); **Null Conditional Operator:** VB.NET Dim status As String = If(product.Status = ProductStatus.Active, "Active", "Inactive") C#: string status = product.Status == ProductStatus.Active ? "Active" : "Inactive"; **Null Coalescing Operator:** VB.NET product = If(product, New Product()) C# product = product ?? new Product(); To be fair, VB.NET also has some nice features C# does not. One thing I really like about VB.NET is multi\-line string literals: Const sql As String = " SELECT Name, Description FROM Product WHERE Id = @Id" [https://github.com/dotnet/roslyn/wiki/New\-Language\-Features\-in\-VB\-14#multiline\-string\-literals](https://github.com/dotnet/roslyn/wiki/New-Language-Features-in-VB-14#multiline-string-literals)
Just made it up. Got to keep myself amused :) 
VB.net and C# both compile down to the same CLR calls and there's no technical advantage or disadvantage to either. People who used VB as their first language were more comfortable with VB.net and people who used C/C++ liked C#. It's just a preference. 
Like: `&lt;&gt;` is far clearer and more readable than `!=`
VBA is not VB.NET. Just sayin'
With statements can be pretty handy. With statements that take up an entire page or more, not so much.
Take the stackoverflow survey and show your managers and ask where they are going to find people who want to work with the most dreaded language. They'll probably get mediocre or bad developers. But the good ones that can be picky about jobs will go to better gigs. All focus from MS goes into .NET Core. Can you even use VB.NET on .NET Core? Pretty much ALL examples for .NET Core uses C#. So your developers will have to know that anyway and then mentally transalte it to VB.NET. VB6 --&gt; VB.NET is a huge step. Going the additional step to C# isn't that big. 
IMHO... Back in the day there were a lot of really bad programmers who used vb, and the language itself supported crappy hacks. Good developers who moved from java, c and c++ naturally went to c#. At least in Australia if the company uses vb still its almost garanteed they their applications are a total clusterfuck. Any vb left in any place i work for i convert to c# for one simple reason. After im gone the company will hire better developers. This will come across as highly opinionated and frankly rude. If you are one of the few good vb developers, im sorry for being so brash. Come join us in the c# land, your life will be easier.
It's not VB.NET that is dreaded, it's the programs written in it. If you had to write a .Net program, why would you pick VB.NET over C#? Most likely because you were a VB6 or VBA programmer. And lots of VB6/VBA programmers are citizen programmers that write code that works and stop at that. This means if you're given a VB.NET program to maintain it will likely be: - something boring and enterprisey - written by someone who wasn't a professional programmer: badly structured, with terrible variable names, full of globals, duplicated code, swallowed exceptions - full of outdated VB6 idioms: `option strict off`, modules instead of classes, no model (everything stored in controls' properties)
He mentioned Office macros. I wanted to make it clear people who come from that environment couldn't have learned how to do things properly themselves as the very environment they're in encourages bad practice.
I learnt on vb4 - vb6 then switched to c, c++, java... then went to c#... i didnt want to associate with the kind of programmers who wrote vb. Which is the fundamental problem with vb.net now. Anyone who still writes it is too god damn stupid to evolve.
\&gt; The only thing I really don't like is that the community isn't nearly as big as C# since, well, developers favor C# over it, so not as many new applications are being developed in VB.NET and the community is diminishing. This is definitely true. And that being the case, you will most likely have trouble finding quality [VB.NET](https://VB.NET) developers to hire for this project in the future. If you are porting to a new language anyway, why not port to C# and pick up the more popular/respected/supported language? Also, I think the transition from [VB.NET](https://VB.NET) to C# is much easier than the transition from VB6 to [VB.NET](https://VB.NET) since it's mostly just syntax. They both use the .NET Framework after all.
My company chose the VB6 -&gt; VB.Net route. We knew that development on the VB6 version would not stop while the .Net version was converted. So changes made to the VB6 code would also need to also be made to the .Net version. Using VB instead of C# meant keeping the .Net versions in sync with VB6 was less complicated. The plan has worked out pretty well for us. Now we are testing c# the conversion. This jump should be less time consuming than the jump to .Net. What's getting us most is cleaning up lingering VB6isms. LEFT$, RIGHT$, MID$ can't blindly be converted to Substring. LEFT, RIGHT, MID don't care if you specify a length greater than what remains in the string. Substring really really cares.
COM worked with c# for as long as it did for visual basic if I am not mistaken. And it worked with c++ since its inception.
Thanks for the feedback. It makes me wonder why my school wants to use it in the curriculum instead of a more popular language. Probably has to due with outdated course material and financial interest surrounding the mandatory purchase of course material. 
Yes, if you call ToLocalTime(), it's going to return a new DateTime that's not equal to the original. DateTime stores no timezone information, so how could it be equal (unless you were in Greenwich UK). Use DateTimeOffset. Alternatively, *stop hitting yourself*, and use NodaTime.
I think it's mostly because C# is a lot like c++. It has the syntax as C++. Coming from a C++ world its easier to do things in C# than it is in VB. Microsoft has also recognized that C# is more popular that VB and therefore they tend to give C# more love than VB. 
That's one of the reason VB is disliked, people don't actually know about its shortcuts and try to write in a C# style.
COM in C# ranged from annoying to neigh impossible. For well behaved libraries, you could add `Missing.Value` all over the place for the ridiculous number of optional parameters. For poorly behaved libraries, you could only access some methods via late binding (or really complicated reflection code). This actually surprised me, because there would be a static API, just with one method missing from the interface definition.
&gt; Also, C# is more popular by a long shot. Roughly ten to one last I heard from Microsoft. VB is still more popular as a first language, but they don't stick with it.
Like he said, stop hitting yourself. If you are storing Utc,and comparing with Local time, you deserve your bugs. This is like dating, remember to not cut your fingers when cutting onions...
&gt; &lt;&gt; is far clearer and more readable than != I'm going to have to disagree with that one, HOWEVER, I strongly recommend this code font instead anyway: https://github.com/tonsky/FiraCode It changes != to ≠ (without actually changing the code itself), as well as a bunch of other characters and makes everything much more readable.
People are scarred by the legacy applications they have had to support written in VB.
Sure, I'm in different to any OO language. I've done 3 years of professional vb.net work and I really don't care. I personally find the c# syntax faster to read, but the vb syntax easier. As to my comment it was to point out you can give an example in any programming language that is more concise than another. 
I needed it for PowerShell, think I’ll have a play with Postman for some other stuff actually so thanks for the info.
Which is the point of the article... Do you think the argument is to stop using DateTime? It's called sharing experiences. There are languages where constructing a new 'date/time object' is UTC by default. In dotnet its local by default. It's easy to accidently miss that. Have some empathy, sheesh. 
C# has verbatim string literals: https://stackoverflow.com/questions/1100260/multiline-string-literal-in-c-sharp#1100265 Not sure if that differs from the VB version...
I love Slackware! I miss using nCurses programs...
Because it's written in C#?
Compiler support? VB.NET had the first hostable compiler for .NET. That's why macros in Visual Studio we're written exclusively in VB. To my knowledge they never added C# support for macros. Refactoring tools for VB we're free for the first decade courtesy of DevExpress. Meanwhile C# devs were paying through the nose for resharper. Code generation was pretty much on par since that's just a trivial template change. &gt; My impression is that they needed a few cycles to recreate a lot of the maturity that VB6 had, giving the C# team(s) a huge head start on upping the language. That may be true, but I'm more inclined to believe that it was the "VB programmers are noobs" mindset Microsoft had with shit like the "mort" programmer.
This is why is use UTC everywhere internally and only switch to local for display purposes if I have to
I had a similar bug years ago. When the text box got focus I would call select all. It worked sometimes. Turned out it was not working if focused by clicking. The events were running in the order mouse down -&gt; focus -&gt; mouse up. So when the mouse up ran it reset the selection. It took me a long time to figure that out. My point is usually there is something else going on that you haven't accounted for. Maybe try hooking up over events to see if different ones fire when it fails / works. Try to think of anything you are doing differently when it fails. It's unlikely to be a bug in SelectAll.
In the example, New File, Close, Quit start separate methods, a logical thing would be a new Dialog. It isn't clear from the documentation are Dialogs not overlays or should that method in effect be a new "Init\(\)" I.e. the method Quit\(\) can't access from Main so in effect I will rerender the entire "screen" ? Thanks so much!
Not really a .Net thing. Usually in similar situations I've seen the print stock under lock and key and the printer non-networked/shared and hardwired to the PC doing the printing. 
Can you restrict who can access the printer on your network and then create a special user for your app to run under. Or fire the printing to a service running under that user? More of an it issue than a C# one I would say.
MVVM is basically just an extension of MVC. The defining feature would be two\-way databinding.
Clipper was great for doing CRUD applications.
As the other posters have said either the printer is hardwired to the PC and not shared over the network, or you would restrict access based on user accounts and have the .NET application print using a dedicated user account for only this task. You can use the WindowsIdentity class to perform impersonation as that account if you don't want the .NET program actually running under that account (and thus save it solely for the action of printing). An alternate method is to use Process.Start to launch a process as the user in question to perform the actual printing. But that may be more or less complex depending some some factors. There is a special type of user account called a "resource account" which is not intended for use by a person but by automated processes. That type of account is specifically for this sort of thing.
Definitely good to know. I always make sure when comparing times that they are going to be both local or UTC in the first place, but I would not have expected this behavior.
The problem is you would expect, for example, 6PM GMT to be equal to 1PM EST (GMT-5). But the comparison would show the GMT time as bigger.
I would not expect that No, because I know you cannot compare two timezones without their offset.
Well it's just a matter of stopping to think for a second and processing the input into an internal form that makes sense for your app. Is your app distributed, for example any web-based app is. Then you probably want to convert any user-entered date/time into UTC before storing it. If you need to display it back to the user you can convert it back to their local time. So if they switch timezones the times will adjust but it will still be the "same" time. Sometimes it makes more sense even if the user changes timezones for the time to remain the same. For example an alarm clock to wake you up at 6am should probably keep waking you up at 6am. So those times would be stored in local time.
I tend to do the conversion to/from local time in the UI layer. Everything from then on down is strictly UTC.
I will be eventually using this for my blog. I can see derived CLI projects using this to generate a blog from a set of markdown files, themes, etc.
Thank you for your help! After learning about Xamarin forms limitations, I decided to go with Xamarin.Android first. Learning how android works under the hood won't hurt me at all and will carry more benefits in the long term. Thank you a lot for your help!
Thanks.This gave me some ideas.
I just want to know how long it took for tickets to sell out this year.
i just wanna know how people can afford build D:
Iirc it went head-to-head with Google I/O this year and didn’t sell out. At least not a few weeks after registration went live. Once they stopped giving away hardware, seems like demand has died down. 
Despite the criticism by more experienced people. These kind of posts need to be made because whether people want to recognize it or not, not everyone knows this.
Same here but my company has more interest in sending us to AWS re:invent. Not that I complain to spend a week in last Vegas totally paid for, especially since I fly there from Europe... 😎
There's a digital online experience. https://developer.microsoft.com/en-us/events/build I'm hoping to catch a few presentation and workshops.
The real learning point here is immutability. DateTime is immutable and you need to realize what implications that has for the underlying structure. Yes there are alternatives but \`System.DateTime\` is something all .NET developers should embrace. Nodatime is cool but will never be more than a sensible alternative to DateTime. It can never be a replacement. 
maybe it's easier if you could tell us, what you problem using it is?
&gt; There are languages where constructing a new 'date/time object' is UTC by default. In dotnet its local by default. This is not true. In .NET it's `Unspecified` by default. There's a constructor overload to specify the kind.
Thanks, great that you got it working :) 
At 2:45 PST there's going to be a dotnet roadmap event will Scott Hanselmann. I really they'll mention the survey from last month and maybe show off some of the stuff that survey was indicating
Roundhouse?
My suggestion is DbUp - https://dbup.github.io/ If you want to just run a SQL script, there are libraries that are structured around that (DbUp and also Roundhouse are two). Other migration libraries want to give you a different API to express all your migrations in C# (EF, FluentMigrator). While some of these can just execute SQL that's not really what they're meant to do.
Yep I think this is the one . thank you!
If you need to manipulate or create images in dotnet core then I'd recommend ImageSharp
Are these usually available to stream/download after the event?
I'm there, or will be once things actually get rolling today. 
Just to clarify, the issue is that you're unable to access your application from port :5000 on your host machine \(outside of Docker\)?
I think that you shouldn’t bind to localhost in the Dockerfile’s CMD because it will prevent any connection from outside the container
Yes that is correct
What is the alternative? 
Did you try with http://0.0.0.0:5000?
Yes I have tried with both `CMD ["dotnet", "run", "--server.urls", "`[`http://localhost:5000`](http://localhost:5000)`"]` and `CMD ["dotnet", "run", "--server.urls", "`[`http://0.0.0.0:5000`](http://0.0.0.0:5000)`"]` However I still receive `ERR_EMPTY_RESPONSE` when accessing from outside the container. 
Ahh that shows me this: docker logs 943e3a5a419c warn: Microsoft.AspNetCore.DataProtection.KeyManagement.XmlKeyManager[35] No XML encryptor configured. Key {f757e95f-6d96-4ce2-a6b4-20cf0cf5f23f} may be persisted to storage in unencrypted form. warn: Microsoft.AspNetCore.Server.Kestrel[0] Unable to bind to http://localhost:5000 on the IPv6 loopback interface: 'Error -99 EADDRNOTAVAIL address not available'. Hosting environment: Production Content root path: /app Now listening on: http://localhost:5000 Application started. Press Ctrl+C to shut down. I'm not sure why it can't bind?
have you set [this](https://nickjanetakis.com/assets/blog/docker-for-windows-expose-daemon-without-tls-5118c5ffd844dd8dbb9e6b2935c108035bd0fc6b06565774db3aed18f138acc3.jpg)
I don't actually have that option under my 'general' section: [https://imgur.com/a/vnbLub0](https://imgur.com/a/vnbLub0)
^(Hi, I'm a bot for linking direct images of albums with only 1 image) **https://i.imgur.com/unmqa2K.png** ^^[Source](https://github.com/AUTplayed/imguralbumbot) ^^| ^^[Why?](https://github.com/AUTplayed/imguralbumbot/blob/master/README.md) ^^| ^^[Creator](https://np.reddit.com/user/AUTplayed/) ^^| ^^[ignoreme](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=ignoreme&amp;message=ignoreme) ^^| ^^[deletthis](https://np.reddit.com/message/compose/?to=imguralbumbot&amp;subject=delet%20this&amp;message=delet%20this%20dykxt02) 
Nobody enjoys powershell a lot.
What's under daemon? Might be there.
I see this [https://imgur.com/a/i5sblW1](https://imgur.com/a/i5sblW1) but I looked under all the headers and didn't see anything like 'expose daemon' like in the image suggested
Well I went to get my dockerfile to show you what to do, but instead, i seemed to have lost all my dockerfiles.... You need to run the dll that the `dotnet build` command builds. The entry point will be the exposed port!. so ` CMD ["dotnet", "run", "Myapp.dll"]`
After finding "Unable to bind to http://localhost:5000 on the IPv6 loopback interface". I looked into why this might be and found this: [https://stackoverflow.com/questions/43948847/net\-core\-web\-api\-error\-4090\-eaddrnotavail\-address\-not\-available\-on\-azure?utm\_medium=organic&amp;utm\_source=google\_rich\_qa&amp;utm\_campaign=google\_rich\_qa](https://stackoverflow.com/questions/43948847/net-core-web-api-error-4090-eaddrnotavail-address-not-available-on-azure?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa) They suggested adding .UseUrls\("http://\+:5000"\) to the Program.cs and this worked! 
Okay so the dotnet build command builds to a location like this: `/CoreSampleProject/WebApplicationBasic/bin/Debug/netcoreapp2.0/WebApplicationBasic.dll` So I guess in CMD command I would do something like the following: `CMD["dotnet", "run", "CoreSampleProject/WebApplicationBasic/bin/Debug/netcoreapp2.0/WebApplicationBasic.dll"]`
Thanks, I'll keep an eye out.
https://docs.microsoft.com/en-us/aspnet/core/?view=aspnetcore-2.1
How are you running the container? You need to specify the port mapping like `docker run -it --rm -p 5000:5000 mycontainer`
**Disclosure: This is my project, yes I am biased.** I made [SpoonCMS](https://github.com/BenTMatthews/SpoonCMS) for just this purpose, with input with some folks on this subreddit. Its extremely lightweight and fairly simple; content in and content out. I can be headless, or use the builtin admin page. I use it on all of my projects right now that don't require anything fancy on the CMS side, just a way to update content on the site without having to redeploy. There are a lot of good options out there for CMS, but the downside to most of them is that it requires you to change the way you develop or organize your project, or at least it was non-trivial to do so when I was trying them out. By just treating the CMS as a content repository, life became pretty easy for me and whatever side project I put up. [And here is the post](https://www.reddit.com/r/dotnet/comments/7zqtft/spooncms_a_minimalist_net_core_cms_for_devs_who/) I made on this subreddit about it where I got some good feedback and we had a good discussion on how to improve it. 
I don't think so. you already set the working directory. Should just be the dll. I would also recommend using the build-env aspnetcore environment. The whole point of docker is to create a 'static binary'. A consistent way of replicating the environment you were developing under. It creates a larger container for sure. But it's way better the old vm days.
Tip: if you use Dapper with something like Dapper Extensions or DapperSimpleCrud, your life with the database will be easier - at least with the job interview. A lot of companies are using it. You'll need to use Nuget for this to work. Afterwards you can dive into ADO.NET and native DataReader.
You don't need to. Just download the source code of the library and compile it. Next, copy the produced DLL and PDB files to your own solution. If you've consumed that library via NuGet, then overwrite the appropriate files the `packages` folder, but the difference is that this time you'll not only have the DLLs there, but also the PDBs. This way both will be copied to the output folder \(`/bin/Debug`\) and this will allow you to put breakpoints or break on exception inside the library and the source code that you've downloaded will show up \(because the full path to the .cs files is encoded inside the PDB files\).
I was going to do the online version. But my employer told me that it would be a waste of my time because all the pressing work we have.... i spend most of my days on reddit.... so yea
If you have ReSharper, you can set up DotPeek as a symbol server to allow you to step into decompiled sources. I'm also reasonably sure Rider allows you to do this out of the box. That's the easiest way I've found of debugging third-party libraries.
Just talk knowledgeably about what you do know, and indicate a desire to learn new things.
&gt; I have some experience in C#, but not necessarily .NET WTF - that doesn't make sense? Fake it until you ~~make it~~ get found out.
Not saying you're wrong about familiarity lending a hand to readability... but claiming one is better than the other just because you're used to working with it isn't fair to the point I was trying to make.
I'm surprised and pleased that they are moving to Core on the desktop- this seems to suggest that the whole framework will eventually be moving to Core 
Potentially Unity or something.
Will this be cross-platform? If not, it means platform partitioning again. Because .NET is so inconsistent people stay away from it :/
Absolutely! I never expected .net core to go beyond web, so I’m really interested to see where they take this! Exciting times!
Not clear from the blog post- are they planning on any of those desktop frameworks working anywhere other than Windows?
Still, it does open the possibility later. 
I was really surprised with the amount of desktop UI support questions on that questionnaire. My suspicion is that there is a metric asston of legacy WinForm stuff still out there in enterprise land and Microsoft is well aware of that fact.
What about the decade+ of legacy applications using WPF/WinForms? My guess is that they are looking at having that stuff move to Core- not necessarily facilitating greenfield development.
This is a game changer for me. I was wondering when Azure would get this type of notification service. It'll be great to not have to host servers myself and worry about the scaling. Now I can put smooth gliding progress bar on everything.
They could build abstraction layers over the UI frameworks for iOS and Gnome? Unlikely, but a man can dream!
Do not bind to localhost:5000. Bind to +:5000. When you bind to localhost, application is accessible from internal network only. This option is used when you use another server like Nginx that reverse-proxies traffic to Kestrel.
*Most* programmers in this space are familiar with working with C-style languages. Java, JavaScript (ES2016), Typescript, C#... they all look roughly the same. I think if you want to introduce something that looks really different into this environment and force people to learn it, you have to justify that. Ruby, Python, Lisp -- OK, fine choices but then you're not really a .NET shop anymore. F#, OK you can probably justify it in terms of immutability and functional programming being the future. If your team can learn it. VB.NET... just why? Because your team is not programmers and don't want to learn? Well then they shouldn't be drawing a programmer's salary IMO. Get current with the rest of the world or be irrelevant. My 2c. 
Even if it isn't the whole UI framework, porting the basics like the XAML parser and any app-specific view-models would be helpful.
How is this different than having a .net framework WPF UI depending on a .net standard library? What are we getting by it being .net core but still windows only?
Yes, but they shouldn't. WPF has a lot of design mistakes that were corrected in WinRT/UWP. What I would really like to see is investment in Avalonia. It solves a lot of the problems I saw in Microsoft's XAML-based UI such as the need for ICommands.
It's pretty amazing. Azure is fast becoming "the computer" to deploy to.
Where do I apply?
Better performance, and no legacy. 
&gt; We’re working on new build tools that will bundle your app and .NET Core together as in a single executable, as a new option. Finally!
Even Silverlight?
Can't get my head wrapped around this one... Why would they build a windows only option here? 
Anyone know what this means for SignalR? is it production-ready too?
So a given app is currently a Windows-only .NET Framework app. First, you get that app to move to .NET Core, which requires .NET Core be able to support everything said Windows-only app has. Then you can look to perhaps migrate to a newer UI, perhaps Xamarin, which is cross-platform. Make sense?
Side-by-side installs so they can advance the Framework (Core) without accidentally breaking apps (as they can stay running against the version they were compiled against) rather than the machine-wide update?
This is first step I assume. There are barriers to writing desktop clients on separate OSs. Maybe there will be work done to handle the lower level operating system differences.
Get a PluralSight subscription for a month. Consider keeping it, because there's a ton of stuff on that website.
Just my personal opinion: I have no doubt that .NET core is the future -- the only reason they're developing regular old .NET in parallel is to keep existing customers satisfied. MS is pouring lots of money into competing with AWS and Google Cloud. They know their closed-source, Linux hostile approach of the past was a failed one. Good news for .NET developers, and I fully to expect a lot of cool stuff coming down the pike. 
It still has legacy APIs
I don't mean by APIs, I mean "legacy code" (.NET Core vs NETFX)
I'll disagree with "screw compatibility". This is worth it simply because it could get us closer to retiring the .NET Framework CLR. I don't relish the idea of supporting apps in the future where they can be multiple CLRs deployed. .NET Framework by itself is enough of a nightmare because of the variations in 4.0 vs 4.5+. Supposedly upgrading the CLR to 4.6.x for apps running 4.5 assemblies wasn't supposed to create issues. It did. And don't even get me started on the CLR quirks mode. Yes, the CLR has a quirks mode. It was a bad idea for IE, and always was. Unexpected side effects are the result. It was so bad that the .. unnamed very large customer I was working with at the time had to roll back upgraded servers to 4.5 because of it. So, yes this is about desktop, but that just makes the problem worse if your app is deployed on many thousands of clients. No, I like the direction this is going. Avalonia does look nice though. 
For WinForms and WPF, I think they would argue that it has to be a drop-in replacement. As long as they can do it without contaminating .NET Core with binary level quirks cruft, I say go for it.
Less CLRs to support in the field.
Again, I agreed with your assessment of why VB should be avoided. I'm not campaigning for anyone to use VB, I was just trying to convey the message that from a complete layman's standpoint, Visual Basic is inherently easier to read than C#. Saying C# is easier to read just because you already know it is not fair to my original statement. Its "BASIC", its "VISUAL," its supposed to be "easy" to read, and it is... Therefore I stated that it is more pleasant to look at, not that its a better language.
People who know and love C# already are going to downvote this because they can't get past the part where you said "with no legacy baggage." To follow your point, people can't use the excuse "I like C# because the syntax is familiar." or "C# is better because it looks like everything else."
It would be for web. Thanks for the link!
Well thank god. I was anticipating a big huge argument after I said people who recommend VB for greenfield should not be drawing programmer salaries.
&gt; decade+ of legacy applications using WPF/WinForms? Yeah, that should be "decade(s)"
.NET Core is faster, so it's still a benefit to us.
I don't think we're that far off from AI that will write your implementation if you write the unit tests. Getting closer every day. 
Right, I am basically trying to play MJPEG's to screen, however I also want to be able to rotate / scale and sometimes modify the color etc. 
Was that ever officially announced? Last I recall they just hinted at it by saying IE for WinRT would have Flash but no other plugin.
Those are just plans. The planned release date is in about 12 months.
VB 6 was for Mort, C# is for all 3. https://blog.codinghorror.com/mort-elvis-einstein-and-you/
Because it's much easier to port from Windows to Windows. A cross-platform UI stack would require significantly more work.
Winforms is only 16 years old, wpf less than that
Oh definitely not. I'm just annoyed that Microsoft kills products without actually telling us they are dead. Take WinForms and WPF for example. Is that still a viable product? Yes, actually. They are still getting new updates for things like high DPI displays. But many people think it is dead because, like Silverlight, Microsoft stopped talking about it for months or years at a time.
We're just a few steps away from that dystopia where we're all subservient to AI that the Unabomber was trying to warn us about. But seriously, I hope programmers aren't irrelevant in a few decades...
So you haven't used any .NET/Mono namespaces in Unity such as System.Collections, System.Linq, System.Reflection, System.Globalization? I was under the impression that Unity compiled to managed/.NET dlls, then these get run through IL2CPP to get native binaries.
Amazing stuff, looks awesome, can’t wait. 
This worries me as non-windows .Net developer since it smells divide and conquer. 
How in the world does it 'smell' like that?
You are redirecting the user to another page so to what page/model state do you think you'll be adding the error message?
That depends in part on your distribution model. Are you selling a physical box, a website download, or via an app store? And is that where you want to be next year? Another consideration is that Windows 7 hit end of mainstream support on January 13, 2015 and extended support (i.e. corporate only) expires in 2020. 
Easy. To a clueless person who doesn't know what that expression means or why it was so effective, everything "smells like extend-extinguish-embrace".
Instants in the past should always be stored in persistent storage using UTC. Never ever store instants in the past in anything other than UTC. Displaying instants in the past should be mapped (at display time) to local date/time using NodaTime and the IANA timezone for the user. That makes them friendly to the user. Events in the future are usually done against the local clock (2pm on May 19 2034). When dealing with future events you need to set some expectations (and record them). Is that 2pm where the user happens to be in whatever local time zone they are in on that date? Or is that 2pm specific to some IANA timezone? Because you don't know what the daylight saving rules will be in the future, you cannot just calculate a future UTC using today's daylight saving rules and have it be accurate. Instead, you need to separately store a calendar date, the local time of the event, and the expected IANA timezone. And even then there's room for nonsense to creep in (i.e. it was originally scheduled for 2pm May 19 2034 in America/New_York but now the user is in America/Los_Angeles). So you can either lock the time of day to a specific IANA TZ or let it float based on the user's location on that day.
UTC only works for instants in the past. And possibly instants in the near future (sometimes even two weeks from now falls afoul of a daylight saving change). For future dates, you need to store: - The local date. - The local time of the event. - Whether that local time is locked to an IANA TZ or whether it can float to match the user's local timezone. And you'll still run into the fun (using the floating approach) of someone flying east or west and screwing up your calculations faster than you can make them.
Yes, SignalR is in ASP.NET Core 2.1-rc1 too :)
nice. i wish directx would go cross platform along with this
Rest assured that software developers will be the *last* people to be replaced by AI. Because once that happens - once software is as capable of writing itself as we are - it closes the loop, allowing AI to recursively self-improve themselves in a very fast feedback cycle, leading to what I. J. Good describes as an "intelligence explosion". We'd end up with AI so intelligent we'd be less than ants to them, and there's no telling what happens to us beyond that point.
Avalonia is cross platform, WPF/Winforms under Core 3 is not.
That isn't the point. The point is supporting the existing legacy code base w/o conversion. Cross platform is not a high priority issue for the enterprise desktop. 
What about Avalonia? Surely Microsoft must be working on something similar.
I've no idea what tiered compilation is, can you please tell us n00bs :\)
about time, really looking forward to trying out ASP.NET Core 2.1
http://i0.kym-cdn.com/photos/images/original/000/173/576/Wat8.jpg Can you be a bit more specific? 
It will probably be a standalone 100 MB EXE though. Just to set your expectations straight. ;\) \(the .NET Core framework will be bundled with each app\)
&gt; We have a version of [Paint.NET](https://www.getpaint.net/screenshots.html) running in our lab. In fact, we didn’t have access to Paint.NET source code. We got the existing Paint.NET binaries working on .NET Core. We didn’t have a special build of WPF available, so we just used the WPF binaries in the .NET Framework directory on our lab machine. Cool, and explains how little migration might be needed. Paint .NET is not a simplistic .NET application after all.
True but they already have .NET Core running Paint .NET even with just giving the binaries the new framework. I don't think the major features here are changing at least.
True, OP's article even says that Paint .NET ran faster with .NET Core without them even having done any optimizations.
I see, new *Mr.Clippy* inside Visual Studio :-)
Because you can share the library code between platforms. You could have 3 projects in your solution with: * Win.UI.exe * Linux.UI.exe and both referencing: * SharedLibrary.dll
Okay thanks. So we can use OctoPack even though we do not wish to use Octopus deploy right?
Well I eventually got it working. For some reason it only worked when I defined the new style in the same xaml document, not when i used the "application" option to define it for the entire program. At least it's working now though! Thanks again for the help. 
Hello. Not yet, sitting my exam this week. 
Oh, well good luck with it. I'll be probably doing it in a few months so I was wondering if you could share or recommend any resources you used to prepare for the exam and what do you think is the best ?
The structure in the nuget package created by OctoPack seems to be incompatible with what the usual .NET developer/tool would expect. After skimming over the documentation, it seems that OctoPack created packages are only used for consumption outside of the .NET development environment \(read: when you develop your installer/tool that uses those packages at run\-time\). TL/DR: Don't use OctoPack to create packages for your developers.
If you haven’t tried ml.net, go try it now. It really is going to make a huge difference in your skill set. 
You can, yes.
If it's read performance you are after; ayende has written some awesome posts on the subject: [https://ayende.com/blog/posts/series/176034/making\-code\-faster](https://ayende.com/blog/posts/series/176034/making-code-faster)
I can try. I've created a web based database for data collection using MVC 5. I also have a .Net Framework 4.6 C# standalone Windows application I created. My MVC project had a front page, with a link to the database, and the other to what I hope will be where I can run the windows application. Is this possible? I'm trying to incorporate the 2 into 1 project.
For code signing you can genereate a certificate from within Visual studio 2015.
Actually I just disabled ReSharper intellisense while rest of ReSharper is running. So now I'm giving it a go.
Yeah I have found that when sharing libraries with nuget, it’s best to just create it with the executable. 
&gt; ran faster **Started** faster which isn't surprising because many optimizations slow down startup. 
&gt; Wow, .NET is moving fast. Is it? I wouldn't have considered it ready for 1.0 until it supported the whole of F# (including the REPL) and WPF on Windows. Until then I consider it still beta release. 
&gt; Good news for .NET developers Is it? I'm struggling to find anything in here that is solving any previously unsolved problems whilst they've broken support for half of the stuff I use in VS2017. So I don't see this as a step forwards so much as a step towards getting back on track as we were a few years ago. Meanwhile the interesting modern stuff like web development seems to be neglected. 
&gt; And really, with HTML 5 + frameworks like Angular 5, there is just not much call for it. Language? 
&gt; We’ve made background analysis of closed files optional (“Only report diagnostics for files opened in the editor” under Tools &gt; Options &gt; TextEditor &gt; JavaScript/TypeScript / Project). I wonder if this means I will stop getting build errors on my TypeScript when I'm using an external build tool.
&gt; WPF has a lot of design mistakes that were corrected in WinRT/UWP And WinRT/UWP introduces lots of new design mistakes like broken generics and no tail call optimization and... 
Octopack.exe uses the nuget file format to package files for deployment. It does not have the same directory structure that is expected by nuget.org (it is basically a flat zip file, compare to nuget.org file structure with a "lib" directory etc.). You should just be able to use nuget.exe (and an optional .nuspec file) as easily as you can use Octopack. In theory you COULD use Octopack.exe with a custom .nuspec file to generate a file that does match nuget.org strcture, but as I understand it Octopack.exe just uses nuget.exe under the hood anyway, so why bother.
Are you trying to consume data from the mvc site into your windows application? If so, you could expose a controller to return json data back to your app. 
That wasn't the current plan. I'm wanting them to be accessible from the same site with a common front page, they aren't really interacting with each other outside of being accessed from a common location. 
Dapper \+ Fluent Migrator is so much more pleasant to work with than Entity Framework I'm using in my day job. Was on the beta branch, will switch over to the Nuget build when I get home!
It's also faster. They showed a demo to count the folders or something like it, which the NETFX app took 512ms, and the Net Core app took 207ms. 
.NET Core 2.1 had great perf improvements. It will probably be even better with .NET Core 3. 
Anyone know if there's a way to upgrade non-preview vs instance instead of full install? My work laptop only has 2gb free :(
Nice to see VS for Mac now has proper front end support (Razor, JS etc). Yay!
Why the choice of VS 2017 over VS Code for TypeScript development?
Thanks! I've pretty much just been using the same resources mentioned by the other commenter. I've been using MVA for Azure/.NET Core. I've been working through many of the tutorials on the asp.net website as well. 
I mostly develop ASP.NET MVC or Web API applications in C#. For me VS 2017 is still supervisor of you're doing .NET development. If I'm developing an app that doesn't use .NET, I use VS Code.
That makes sense. The overwhelming majority of work I do with TypeScript is in Angular, so had just I assumed most people's use for TypeScript would be similar.
I wonder if these target pack things will fix missing method exceptions on types in Core: Unhandled Exception: System.TypeInitializationException: The type initializer for 'Sybase.Data.AseClient1.AseConnection' threw an exception. ---&gt; System.MissingMethodException: Method not found: 'System.Security.AccessControl.DirectorySecurity System.IO.Directory.GetAccessControl(System.String)'. at Sybase.Data.AseClient1.AseConnection.LoadLibraries() at Sybase.Data.AseClient1.AseConnection..cctor() --- End of inner exception stack trace --- at Sybase.Data.AseClient1.AseConnection..ctor(AseConnection realConnection, String connectionString) at Sybase.Data.AseClient.AseConnection..ctor(String connectionString) as far as I have found I only see this: https://github.com/dotnet/corefx/issues/9872 
You can vaguely think of it like how javascript executes. The first time some code is seen, it is parsed into an executable format (in the case of .net here this means JIT compilation of the IL) but this is done with very little optimization (only the optimizations that have 0 up front costs such as constrained virtual calls to struct types which can be obviously done with a static call). If the method gets called a second time, JIT compilation runs again with a "tier 1" optimization pass allowing more optimizations to run (like method inlining of that constrained virtual call). If the method gets called a 3rd time, JIT runs again with "tier 2" optimizations enabled... for however many tiers are defined. This provides a faster path for executions that are very rare (1 time) as well as allowing for more optimizations to be applied to long running code (because they take too long to apply to an average case today) at a cost for code that happens to run a few times but doesn't run enough to overcome the cost of the optimization pass.
I mean let's be honest, you need a new hard drive. You can't even install Windows updates with that much space left. When's the last time you ran the likes of CCleaner or [Windows 10 Storage Sense](https://www.windowscentral.com/how-use-storage-sense-free-space-automatically-windows-10-fall-creators-update)?
Tell me about it, I delete files once a week. CCleaner was banned at work a few months ago because of their big vulnerability. I made the nmistake of requesting an SSD on my last refresh and got a 128gb drive :) But still question was can I upgrade an install, rather than full install. I can always uninstall just wanted.to know before losing 6 hours of my day.
You \*should\* be able to upgrade VS in place, but honestly I wouldn't even try to use a hard drive with less than 10&amp;#37; free space. You're just asking for a no\-boot disaster scenario.
Don't overthink this. Whatever makes most sense to you is what is best. 
Any idea how to get installer to go into upgrade mode? Seems to me it recognizes itself as a different application, hence the question
Maybe I am. I just don't want to go through the entire thing then show it as a portfolio and a future employer look at it and it's full of mistakes and bad practices.
Well wpf wasn't going to happen anyways. Directx is windows only and is to deeply intertwined in wpf. But at work we discussed the possibilities of another alternative coming up. Wpf requires the runtime to be able to use c++. And its already confirmed that there will be managed c++ for net core 3 which makes an OpenGL alternativ more than possible.
Bug reports and/or pull requests for libgdiplus gratefully received 
Ok. The main benefit of Silverlight over Angular for me was the ability to use languages like F#. 
A service to write documents for professional document writers? No.
The cscareerquestions sub has a resume advice thread: https://www.reddit.com/r/cscareerquestions/comments/8huri3/resume_advice_thread_may_08_2018/ fecak, one of the sub's moderators, does resume writing.
Already reported an [issue](https://github.com/mono/libgdiplus/issues/372#issuecomment-383409740) (that turned out to be 2 issues) and that's currently being worked on. 
I have been successful in my most recent job search with the following approach. 1) M$ word document for the scrapers. 2) LinkedIn profile for the recruiters. 3) Interactive HTML/CSS/JS resume with linked source code repository for the technical people. Reference each document from the other, SEO with original content updates on LinkedIn and the website. 
The Xamarin blog said it was in the works a few months ago.
Warning, warning: Microsoft is attempting to [insert limb movement here]! deploy EEEeeeeeeees. DirectX, WinForms, XAML, .NET, WPF are all Microsoft _created_ "standards". afaik they're not built ontop of any existing standards out there. EEE is based on the principal of taking a very well known standard and extending that with Microsoft proprietary functionality to cut out the competition. (So says the article you linked). All Microsoft is doing in this release is basically saying: Hey WinForms and WPF developers, if you want to move away from .NET Standard to .NET Core you can do that now! I get the concern for Microsoft doing bad things, but the EEE crowd needs to give it a rest, if you complain about everything Microsoft ever do then when something of real concern rolls around everyone will be bored enough of hearing it that they may not listen when it actually matters. I doubt Microsoft could do anything in the .NET space to appease the EEE crowd at this point. If Microsoft pulled out of .NET on Linux completely they'd be lambasted for Embracing Linux and then stabbing these developers in the back. And if they (which they are) increase support for Linux then they'll be lambasted for attempting to corner the Linux Market and then somehow EEE it.
it's [down](http://www.isitdownrightnow.com/blog.ndepend.com.html) right now ... maybe some `NullReferenceException`?
As far as I'm concerned .NET Framework was more than fine for these apps, now we are bringing in a lot more work for the devs to maintain instead of focusing on a new cross-platform option.
Agreed... meanwhile System.CommandLine, something that should have existed since forever, will never make it out of the corefx labs. 
Thanks, your point is valid.
Thanks for the response.
Okay thanks a lot.
All below responses are valid, but I just confirmed with Octopus and they said the packages are normal Nuget and we can use them without using Octopus deploy. The application on which I am working is already using OctoPack that is why we are not willing to change it for now.- https://help.octopus.com/t/octopack-to-create-nuget-packages-and-without-using-octopus-for-deploying/19977
What is this? I can't seem to google for it?
Hmm, well Typescript ain't half bad. You might like it. OTOH - You might like to code C# for the browser. Try out Blazor if you don't mind learning a framework that might go nowhere, but give you more of what you're seeking. 
It’s under dotnet/corefxlabs on GitHub. It’s been there (doing nothing really) for years.
I was hoping for them (MS) to grab the Avalonia guys and fast track their project into an official cross platform UI framework for .NET. I personally know multiple devs and companies who hoped for it because otherwise they can't realistically argue for using Avalonia in any line of business application any time soon.
TL;DR: No, WPF won't be available for Linux, Mac, iPhone and Android. Nothing to see here. Go back to your Blazor development - HTML/SVG remains the future.
Because it isn't 1998 anymore?
Xamarin.Forms 3.0 has a WPF preview.
It's not Paint but Paint.Net that is being tested.
It doesn't make sense for Microsoft to maintain so many versions of .Net. That would lead to slower development for all of us. They needed to go cross-platform so it made sense to take out the Windows-specific features from the .Net framework (.Net Core/Standard) and reinsert them as a package for WPF or UWP.
For those of you wondering "why the hell even bother if it's not going to provide cross-platform UI application support?", Scott Hunter appeared on .NET Rocks recently and gave a good overview as to what the benefits are going to be. [Announcing .NET Core 3 with Scott Hunter](https://www.dotnetrocks.com/?show=1543) The relevant bits about Core 3 support for WinForms etc can be found around 19:20 onwards. In Summary: * Shipping the framework alongside the application, no need to have the full framework installed on the target machine so side-by-side framework versions for WinForms apps are a thing * Utilise advanced linking techniques to tree-shake the application, including only the assemblies/packages required to run the app * Performance improvements in any non-UI/non-Windows specific libraries (Core libraries replacing full framework libraries)
I think he idea is people aren't going to stop using wpf and WinForms so bring into core then later they can drop the full framework without breaking these legacy apps.
Would it be stupid to hope they went back to Silverlight and just... made it into the "WPF everywhere" solution it was meant to be? In practical terms HTML &amp; SVG are where we mostly want to be, a sandboxed "ActiveX for 2025" in the form of something Silverlight-y seems to be where the happy middle ground would be found...
&gt; And its already confirmed that there will be managed c++ for net core 3 which makes an OpenGL alternativ more than possible. What do you mean by that? C++/CLI? Could you link source?
Even if they pull out of linux iirc core and stamdard is mit licensed and the community could continue. If anything with this move they are pulling more people from their closed source framework to a far more open and developer friendly setup. 
Yeah, this move has me wondering if their plan is to phase out the framework.
https://twitter.com/runfaster2000/status/993520188032147457?s=19
That's awesome! Thanks :)
Hey thanks. I have updated the post
Yes. To clarify this, the libraries will be the same .Net standard libraries, only they will be run under .Net Core rather .Net Framework if you are referencing them from a .Net Core application.
If it's similar to html, flexibility and better animation I guess.
I would suggest not making it terribly verbose. We get resumes that are 5+ pages long, and include every acronym known to computer science. It doesn't help.
Everyone knows CSS, ease of use.
Try Avalonia ... http://avaloniaui.net/
LinkedIn has a service to connect you to local people who do that sort of thing. 
Thanks for the replies, I tried doing e.Handled = true; but alas, same result. So what I did, was set the Event Handler "GotMouseCapture" for all the tb that are intractable, and there are a lot. I also use the event handler "GotKeyboardFocus" for all of the tb when tabbing through and that part works fine. So what I am hearing here, if I understand correctly, is I should be using "MouseDown" event instead of "GotMouseCapture"? I will give it a shot and hopefully that will solve the problem.
Why should your controllers be thin? This is an example of the [Single Responsibility Principle](https://en.wikipedia.org/wiki/Single_responsibility_principle). The controller class is recognised by the ASP framework as performing the role of being an entry point where a HTTP request hits your code, and a HTTP response is returned. That is its responsibility. it should not have others.
**Single responsibility principle** The single responsibility principle is a computer programming principle that states that every module or class should have responsibility over a single part of the functionality provided by the software, and that responsibility should be entirely encapsulated by the class. All its services should be narrowly aligned with that responsibility. *** ^[ [^PM](https://www.reddit.com/message/compose?to=kittens_from_space) ^| [^Exclude ^me](https://reddit.com/message/compose?to=WikiTextBot&amp;message=Excludeme&amp;subject=Excludeme) ^| [^Exclude ^from ^subreddit](https://np.reddit.com/r/dotnet/about/banned) ^| [^FAQ ^/ ^Information](https://np.reddit.com/r/WikiTextBot/wiki/index) ^| [^Source](https://github.com/kittenswolf/WikiTextBot) ^] ^Downvote ^to ^remove ^| ^v0.28
SelectPdf just released a version of the PDF library for .NET Core: [https://selectpdf.com/selectpdf\-library\-for\-net\-2018\-vol\-2\-now\-with\-net\-core\-support/](https://selectpdf.com/selectpdf-library-for-net-2018-vol-2-now-with-net-core-support/) A free community edition is also available: [https://code.msdn.microsoft.com/Convert\-from\-HTML\-to\-PDF\-d63582e8](https://code.msdn.microsoft.com/Convert-from-HTML-to-PDF-d63582e8)
Try SelectPdf library. The .NET Core version has just been released: [https://selectpdf.com/selectpdf\-library\-for\-net\-2018\-vol\-2\-now\-with\-net\-core\-support/](https://selectpdf.com/selectpdf-library-for-net-2018-vol-2-now-with-net-core-support/) It includes a free community edition with a state of the art html to pdf converter: [https://code.msdn.microsoft.com/Convert\-from\-HTML\-to\-PDF\-d63582e8](https://code.msdn.microsoft.com/Convert-from-HTML-to-PDF-d63582e8)
I didn’t like the article because of the profanity. There is no need for that and it degrades the content.
&gt; that there will be managed c++ for net core 3 which makes an OpenGL alternativ more than possible. The two have nothing to do with one another. You can already use OpenGL from .NET, and you don't need an extra C++ layer to do it. WPF already has no need to call into C++/CLI in order to access Direct3D, either -- it's just a legacy architectural decision that's never been revisited. It would likely be fairly expensive to rewrite that entire layer in C#. But, you can easily use SharpDX for access to every part of DirectX. 
https://www.google.com/search?q=why+not+C%23+type+provider
I think this is a fair point. If it adds nothing to the article, why even use it? It does little other than narrowing the audience of people who will appreciate the content. I personally do not care, but this caught my attention while reading and I couldn't help but wonder why it was included.
Thanks for pointing it out buddy, I have updated the post.
A simple way to do this would be to implement basic authentication on the API, and give the Client its own credentials for communicating with the API. In doing this, you're trusting the Client to handle user authentication, and setting up and implicit trust only between the Client its self and the API. That's not to say that the API doesn't still need to implement _authorization_ of individual requests, but at least you'd have authentication handled, and authorization would be a matter of having the Client pass the user identifier along with requests where it's relevant.
DRY is underrated right now in my opinion. SOLID is all the rage at the moment - and that's fine because SOLID is good. But it is possible to write SOLID code that contradicts itself. You can't write DRY code that works against itself. I see it coming: DRY vs. SOLID - please don't. They are both valid and useful and work together perfectly.
Driving immense GUI frameworks from managed c# would be a little harsh but of course you can do OpenGL in csharp,yes. If wpf didn't have to use native platforms I don't think they would write an entirely new CLR support just to Port wpf through runtimes. How hard it is to actually go though with cross plat managed c++ support I dont know and I'm not really knowledgeable enough about the CLR + native construct. I just thought it sounded like they were going the route I described.
I didn't like the article because it holds the last half hostage, demanding you provide them with your e-mail address and subscribe to their newsletter.
What would be the best way of storing the credentials on the client side when it needs to be shared between multiple clients?
Why would you share it between clients?
Is there an other option when multiple WPF clients (unknown number of instances) want to access the API?
Almost every example of EF show this , it's literally telling new devs how to screw up
Yeah, it is a real shame.
Two actually. A** is one. The ‘f word’ is another. The a** I didn’t care for. The ‘f word’ was completely inappropriate. It didn’t need to have more than one of either to be inappropriate. The words added nothing to the article and made me not respect the author. It isn’t that professional people don’t ever use the word. Professional people may use the word a lot. But professional people know when it is appropriate to use the word.
You wouldn't share credentials between clients. Each client would have its own credentials for accessing the API. Unless when you say "multiple WPF clients" you're simply referring to multiple running instances of _the same_ client. Then I suppose you'd share credentials among them. How do you do that? There's a million ways to do it. How do you manage secrets in any environment? Use whatever strategy you currently do, unless the current strategy is to hard-code them into the source. Config files, environment variables, something like Hashicorp Vault, etc.
This. The reason for having a small controller is not any sort of secret. Just read a few chapters from Uncle Bob's book and you can figure it out on your own. Many great tech writers share their wisdom on Medium, Wordpress, and other blogging platforms without asking for a cent for compensation \(or spamming your email inbox\). This author, however, is teasing readers with low\-medium level knowledge for self\-promotion. I don't want to be rude, but it's really frivolous. 
Here's a real life scenario to consider: You have a Dropdown list on your front end and javascript is used to call a controller to fetch and then populate that list. The values require in that list all come from a database. The business also requires that the order of items in that list start with the 2 most popular options and the rest are in alphabetical order. How would you organise the code? Here are my 2 options: 1. Inject a service class into the controller. The service class contains the ordering and fetching logic \(DB repo injected into the service\). Basically Single responsibility principle for each aspect. 2. Put all the code in a CDN service like controller class. Since the requirement is to only serve up a list of values which is basically just some front end content, is there a need for the abstraction layers. I'm curious about peoples thoughts on this and even wondering if there are more obvious options.
1
Have you looked into identityserver4? It's an oauth2+openid connect implementation in asp.net core. It would allow you to share identity between your applications.
How have you found Avalonia? I've mostly been using Eto.Forms (https://dotnetcoretutorials.com/2018/03/19/cross-platform-winforms-kinda/) and it seemed a bit more feature rich (In terms of XAML or Code layouts etc). 
Need more info. From your comments it seems like the client is running on multiple machines with the same account yes? Is this a domain account? A better way of doing this would be adding the users that needs access to the api (and client) a role in the domain, and then do some form of authorization on the api end. This would probably be best handled with WCF (No aspnet core/rest, no linux *sadpanda*). Another solution is having some sort of identity server like /u/thakk0 is suggesting. That way you'd authenticate with the identityserver (probably using ws-trust or something), get a ticket from the server and authenticate against the api with that. Or use client certificate authentication on the API side and bundle a client certificate with the WPF clients. Depending on how critical the security is on the api a really easy solution would be to have a shared access key, added to the headers of the request. Be sure to use Https. :)
Look into impersonation. Hard unless you are rolling WCF API's on windows. Some solution might be possible with some of thinktectures stuff
I like where you’re going with this. I think the key problem is that it’s hosted on Linux. Since Linux isn’t joined to an AD domain, it’s not going to know what to do with the clients windows credentials. (If the service were hosted on Windows, it would be a totally different story.) I think this is going to need some kind of federated identity solution. This feels like an insanely complex problem that has almost nothing to do with code and tons to do with server-side identity infrastructure. Run it on an azure app service that’s configured to talk to Azure Active Directory (AAD)? That way you could just use “easy auth” and nearly everything is handled for you. 
Is it worth bringing in F# libraries to a C# Web Api project for data source integration? How does the language for into the big picture of the .NET ecosystem?
You could use refresh tokens and keep the token alive in a background thread.
ADFS, Okta, or Azure AD. And you cannot do Kerberos impersonation.
Bad idea. As someone who hires programmers, a fancy resume will get you absolutely no advantage whatsoever. Just write it yourself: - One page (maybe 2 if you have many years of experience). - List skills. Include how many years (months if you're fresh) experience with each. - Read an article or two online about how to write a good IT resume. - Have a (native English speaking) friend proofread it for you at the end to fix spelling errors and such. 
It's something we struggle with on a regular basis. I think the big mistake at the start was injecting the database context into the controller. Which leads to having lots of logic in the controllers to handle edge cases regarding data.
This. 
This may not be what you want to hear. You should not build a security system if you don't deeply understand security from the perspective of an attacker and a defender. Once you are competent to build up an identity system from scratch, then learn the frameworks.
I've never used the option you described tho I have seen it. I believe that if you have working knowledge of how docker and ASP net core interact, you have already won half the battle. Maybe you can check the documentation for the dotnet cli, which IIRC also can create projects structures based on built in templates such as the docker one. If that fails, the reverse engineering option always remains. Good luck, both technologies are amazing and when used together even more so! 
Wait, why should I not inject a repository?
Honestly, I don't even run my app in docker locally. I only dockerize it when deploying.
Try googling the following commands and adding them to launchSettings or launch.json in vscode docker exec -i namehere ${debuggerCommand} debuggerPath": "/root/vsdbg/vsdbg" 
‘Add docker support’ add a new project in the solution. This project contains the docker compose that essentially defines how many images there are in the solution and how they communicate. This is nice if you want for example test all the images before push to your docker registry. You can define different configuration for debug your projects inside containers or for release as well
I did something similar. I created the dockerfile and compose file myself, and didn’t see visual studio recognise it. I then decided to “Add Docker Support” and see what it produced. The extra steps I needed to do was: Create a .dcproj file that has some settings related to the docker configuration. Then add a setting to the csproj that points to the dcproj location. 
You shouldn't inject your repository into your controllers, as the controller shouldn't be doing any business or data logic. Instead, inject your repository into a service, do your logic there, and inject said service into your controller. This will keep your controllers thin with little responsibility. I do find the pattern a excessive though when you're just creating a simple REST API, where it'll seem like your services are just forwarding on requests to your repository.
ZetPDF.com it works quite well, its best
i will try on this site, thanks.
harry, visit the website, its perfet
F# will shine in Blazor especially if people start using Redux
fantkm, kindly visit Zetpdf.com.
I was waiting for someone to pull the EEE card. I sure wasn't disappointed.
Am going to try this website, thanks
am going to check on the website
easy to use, i try this website.
ZetPDF.com, am going to use the site.
Thanks for your comments .. I will update 
Some open source projects have been mirroring it into their own source though.
I think it is fine for what you are using that solution for. In my mind, the only other option for this solution (with this usage) would be to have a single **unit test project** and have individual folders for each chapter instead of separate assemblies. Each folder would also contain unit tests for that chapter to verify your code. With what you have now, I'd swap out your console project with a unit test project. You can still use the `Console` class to output whatever you want -- the output will show up in the test in test explorer when you run or debug a test. Should mention that you wouldn't normally implement the very code you are writing unit tests for in a unit test project but this is for educational purposes so it's like your underwear -- it's up to you.
ah ok I guess I was somewhat incorrect about my assumption. I thought .NET was a specific set of libraries, not necessarily all of the main ones you'd pretty much always use. Thanks for clearing that up for me!
With the help of some of the comments here and some more digging into .NET Core and VS2017, I think I'm starting to grasp how this all comes together and demystifying the magic around it. From what I can tell, interaction between Docker and Visual Studio is made possible via the "Docker Tools for Visual Studio" extension, which is available in preview form for VS2015 and is built-in on VS2017. I'm intending to write up a blog post explaining what I've found so far, but suffice it to say that nothing "Add Docker Support" generates is actually special. It's all stock Docker and Docker-Compose, except for the .dcproj which is what lets VS identify a project as Docker-enabled and allows it to debug a container in real-time. To answer your question more directly, the knowledge you need to dockerize your full framework app isn't so much around VS docker integration, but more around Docker itself. All "Add Docker Support" does is generate some minimal default files for you. I found the following links especially helpful in learning how Docker and Docker-Compose work: * Docker: https://www.youtube.com/watch?v=YFl2mCHdv24&amp;t=0s&amp;list=FLtKZJ17MYxYlb-sM3KNT9FA&amp;index=2 * Docker-Compose: https://www.youtube.com/watch?v=Qw9zlE3t8Ko&amp;t=14s&amp;list=FLtKZJ17MYxYlb-sM3KNT9FA&amp;index=1 * Docker-Compose Overrides: https://docs.docker.com/compose/extends/
I'm sorry - I don't know why I typed that. You're correct. It was just an ASP.NET web site
Ah, yes, I also tried that. I renamed myform.aspx to default.aspx and republished, but that did not work. 
I would recommend you to look into Asp.NET MVC with .NET Core. WebForms is still supported but it's getting outdated fast. [Quickstart guide](https://docs.microsoft.com/en-us/aspnet/core/tutorials/first-mvc-app/start-mvc?view=aspnetcore-2.1&amp;tabs=aspnetcore2x) WebForms is the old Microsofts solution to building web. It tries to be similar to WinForms which is used to build desktop applications (also getting old). As you can imagine, web is a lot different from desktop and this makes it a bit hacky to run desktop architecture on it. This is why MVC pattern is used today since it's designed specifically for web. At some point you also have to decide between .NET and .NET Core. Both are actively supported but Core is newer and might suffer a but from some maturity issues. On the other hand, it is faster, simpler to set up and also runs on Linux.
I can remember about 4 years ago now being the only guy on about a team of 15 devs and trying to explain this concept to them and they just could not grasp the concept. They kept saying "but no your business logic is suppose to go in your controller!". Needless to say I wasn't there that long. And also saw the same thing at future company.
You need "ref" in front of the variable foo in the CompareExchange method call. In C#, passing variables by reference isn't super common and you have to indicate to the compiler that you are doing it intentionally by putting "ref" there.
Thanks for the tips! I created solution folders for each chapter. Are you saying I should I actually go into file explorer and create a folder to put each chapter in? 
Found a better one already in C# here: [https://munir.wordpress.com/2006/07/26/simple\-tcp\-port\-scanner/](https://munir.wordpress.com/2006/07/26/simple-tcp-port-scanner/)
On my phone, so I can't check myself but maybe check the Accord Framework? They may not have it, but it's a place to check 
Not sure if this would actually work: Merge the two actions into a proxy action with a HttpGet and no validation whatsoever. Put a switch in that action, and make it call two other actions that have no HttpGet attributes but each have their respective validation attributes.
Thanks. Seems like machine learning only which I am not good at, and doesn't seem it's compatible with Visual studio or?
Check this out perhaps: https://github.com/mathnet/mathnet-numerics
They do other regressions as well and yes, it is all on Nuget
Hey thanks for the reply! I definitely need to continue learning about Docker. I just looked at it a bit more, and your description of what VS does helped me out. I guess the VS integration isn’t all that scary haha. Will look at the links you posted. The Docker tutorials /docs are very impressive, so I’m looking forward to picking up where I left off there. Cheers!
Hey thanks for the reply! I definitely need to continue learning about Docker. I just looked at it a bit more, and your description of what VS does helped me out. I guess the VS integration isn’t all that scary haha. Will look at the links you posted. The Docker tutorials /docs are very impressive, so I’m looking forward to picking up where I left off there. Cheers!
WPF isn't going anywhere. Please stop spreading this rumor.
&gt; If they drop WPF without a comparable replacement (read: NOT UWP) You are extremely out-of-the-loop regarding the current and upcoming state of UWP.
I would also recommend looking into .NET Core, but either way you're looking for route mapping. Mapping URLs to either a controller or to an aspx file. In full .NET framework you can do this mapping in the global.asax file or using Route attributes on a Controller/Action https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions-1/controllers-and-routing/asp-net-mvc-routing-overview-cs https://msdn.microsoft.com/en-us/library/dd329551.aspx
Oh how I wish this wasn't true so I could stop seeing VB6 at work
I am not sure about the first one because you are not showing the CheckOpen function signature, but either a) CheckOpen function only took one parameter in the old version and you made it take (object, EventArgs) in the new one, b) it only takes zero/one arguments... in which case you should remove the EventHandler constructor and just pass in the function reference directly or c) VB is more forgiving with function references than C#. If it's a) you need to create a separate (object, EventArgs) function for your purposes instead of modifying CheckOpen, and just call CheckOpen from the new function. If it's c) you will still need to do this, but it'll be VB's fault, not yours. Thread can only accept functions with 0 or 1 arguments so change the code so this can happen. If you need more arguments you can either create a struct to hold all the needed data and pass in the struct as the sole argument, or use a lambda function and grab the data from the outer function, though you have to be careful there's no cross-thread issues. Incidentally, check out System.Threading.Tasks and the await/async model. It's a better way to do multithreading. Since you're just porting existing code I wouldn't bother with it for now, but for future efforts you will likely find it useful for writing multithreaded code. For the second code block, you want an int, not a long for foo. long is shorthand for Int64, and the call takes Int32. I believe VB defines long as Int32s. So any VB longs should become ints in C#. As well, there is a better way to do locking. Again, this is just porting, but for the future you can use the C# lock keyword to ensure only one thread can enter a block of code at once. Put every piece of code accessing a variable inside a lock operating on the same object, and now you've ensured only one thread can manipulate the variable at once.
I mean - can you imagine VS as a UWP app? *shudders*
[Please no](https://media1.tenor.com/images/1cf715b08859240bb0e8878ebd42464a/tenor.gif?itemid=5267813)
These aren't rumors. You can proof it yourself, just create a wpf application and start it in Windows 10, for me that doesn't look like great support but just ugly af. Also check this link: https://www.codeproject.com/Articles/818281/Is-WPF-dead-the-present-and-future-of-WPF Also, for me wpf should get the support it deserves with feature updates and so on, not just bug fixes.
But the support they give visual basic is just bad. It's like keeping something alive with live supporting devices, yes, it's not dead, but it's also not really alive. C# got some really nice feature updates recently and visual basic got nothing new in years.
I actually read this article but it doesn't give a lot of information which role these ui Frameworks actually play in future, especially when it comes to cross platform development. What happens after these frameworks are migrated to .net core 3? Will there be something new for cross uis? Or won't there be any UI for multiple platforms in near future?
The future of UI on Windows is HTML. Please (plan to) stop writing Windows-only apps and *set away from the single platform technology*. Learn Blazor now or be left behind.
&gt; If they drop WPF without a comparable replacement (read: NOT UWP)... Since the future otherwise looks like HTML5, and MS has more experience than anyone hosting fully capable controls in HTML (ActiveX): wouldn't the most predictable and viable solution be something like an updated Silverlight with platform specific plugs for 'the hard stuff' and some WPF-compat extensions? I mean, ideally the XAML and logic would be drop-in compatible, which seems feasible if everything is already on .Net core, and then you'd have a lot of options for execution leveraging new sandboxing opportunities with Core and things like Blazor... In my head that would deliver on the original premise of WPF "best of the client best of the web", assets would be preserved, thick apps could run fully in the host but you'd otherwise be mostly HTML based. There is so much good in WPF, and there was so much good in silverlight, that feel like they could be fully realized in 2020 now that the eco-systems have caught up.
I think the advantage of supporting WPF on .net core is that the target machine doesn’t need to have the .net framework installed, as you can ship the bits you need with the application itself.
GraphQL. There is a Tutorial series being posted on this subreddit.
I was going to suggest Odata, but really it's not hard to implement these things yourself with linq to sql. 
I would vote with roll your own. The cost benefit of a 3rd party library vrs rolling your own seems like a no brainer to me. I started writing a quick example then the wife turned up. :O
Well, yes .. but I don't think this is likely to be a useful suggestion given how far along the OP says they have come. So much easier to just add paging to what they already have than to switch (or proxy) to a.totslly different model from the REST stuff they have done already. To OP I would say - honestly it's easy! If you already have lists of results just add a 'limit' and 'offset' parameter (or a 'from' and 'skip' parameter) yourself by editing the code you alrrady have. And if you have to retrieve more data than you need from db first just to be able to skip through to the relevant results don't sweat it .. the I/O you avoid by not sending the result over the internet is an order of magnitude greater than the I/O delay between database and memory on the server so you're still making a huge performance improvement. Filter parameters are a little more complex. If you absolutely insist on not using odata approach I'm not sure what is the best alternative but it'll end up being domain specific to what you are doing probably. 
Paging: List&lt;MyEntity&gt; GetData(int pageNumber, int pageSize) { List&lt;MyEntity&gt; data = DbContext.MyEntities.Skip((pageNumber - 1) * pageSize).Take(pageSize) ... Filtering: List&lt;MyEntity&gt; GetData(string firstName, string lastName, double? accountBalance) var data = DbContext.MyEntities; if(firstName != null) data = data.Where( e =&gt; e.FirstName == firstName); if(lastName != null) data = data.Where( e=&gt; e.LastName == lastName); if(accountBalance != null) data = data.Where(e =&gt; e.Balance == accountBalance); return data.ToList(); Sorting is similar to filtering except you use OrderBy instead of Where.
It was a bit of a joke, imagining diverging as complicated as VS using the look a feel of a tablet app. That said, there were some major restrictions of uwp the last time I looked a it (though these may have been rectified by now): stuff like not be a to launch subprocesses, or access arbitrary filesystem locations.
The role these frameworks will play in the future is basically the same they play today, writing native windows applications. They're moving to core because Framework is probably going to be deprecated and people still want to be able to write native apps. If you look at what Microsoft are doing themselves they, along with pretty much everyone else, seem to be going down the path of electron for cross platform UI. That's the horse they're betting on, and I wouldn't expect to see an alternative to that any time soon. I would expect to see some support for building electron apps with Blazor or an equivalent product, but almost certainly nothing trying for native cross platform UIs. In terms of what to use right now, it's somewhat difficult because the best current solution has the worst longterm prospects and vice versa. In the long run UWP or something similar is the most likely candidate, possibly combined with the electron platform someday as a form of cross platform solution. Right now though, it's only barely acceptable on the very latest versions of win 10. It could take several years before a high enough percentage of windows users is at this level, especially corporate users, and it's honestly still not great today. For right now, WPF is probably your best bet if you want a rich Windows UI, but it's a very heavy development process and XAML is unlikely to see long term support. If looks aren't super important to you, winforms is still pretty good.
UWP is still tied to the somewhat fantastical idea that people want mobile style apps on Windows and UWP features are heavily tied to windows patch level which is pretty horrific. 
WPF is almost certainly not going to be Microsoft's long term UI solution. That doesn't mean it's disappearing tomorrow, but office is moving to UWP and Visual Studio may disappear altogether. It's already fairly unnecessary for dotnet core development and for better or worse, heavy full features IDEs are not the direction the industry is going. 
There was a great course on Pluralsight, that went over this very topic. It included sorting, paging, and data shaping. It was by Kevin Docx I believe. Here is the course example code. https://github.com/KevinDockx/RESTfulAPIAspNetCore_Course?files=1
They are currently in the process of completely rewriting the XAML designer (for UWP). Let's hope these changes also apply to WPF.
Very well written, thank you for your comment! Thats also what I thought, I really hope that WPF will continue to be around for the next few years because I love the development process, but for this year, I also want to check out Angular and some stuff like that.
Will do, when shitty JavaScript let's me directly access serial port communication
I would guess that .Core is going to support more things by 3.0 and that most of the WPF code will work without much rewrite. The biggest change will be how the assemblies are organized
I create WPF apps and run them in windows 10 everyday. It's literally my job to do that. They look and run waaaaaaay better than forms. MVVM actually simplifies architecture. Forms is antiquated garbage that exists solely because of inertia. 
Exactly. There are huge industries of us out here writing applications that access hardware. All these people writing cookbook and dick pic sharing apps don't understand the real work being done that JS/HTML just can't do.
&gt; That's the horse they're betting on, I doubt MS is betting on anything that has to do with JS. More likely Blazor in some form. Perhaps we will see XAML move to Blazor (?) I would love to see JS, HTML, CSS all go away. These are old technologies and its time for them to retire.
They essentially have no choice if they want their enterprise customers to stay current on the OS releases. Force a fortune 500 company to go rewrite a bunch of functional VB6 crap that and they'll just stay on the OS where it works.
VS Code, SQL operations Studio, UWP, and Excel getting JS support very much show that you're completely wrong about Microsoft and JS, HTML, and CAR. Blazor might come to something, it might not, I'm not at all convinced that webasm is the future and I'm really not convinced that an interpreted language in webasm is even feasible. JS is here to stay man.
I actually mean the theme, it doesn't fit to the windows 10 design. The listview is the same from windows 7 and the button looks far too dark. That's what I meant. I absolutely love wpf, I love the way Databindung works, the design of extensions and behaviors, and so on. But without mahapps.metro or another theme, i maybe wouldn't like wpf as much as I do.
Be very, very careful with Microsoft. [Embrace, extend, extinguish](https://en.wikipedia.org/wiki/Embrace,_extend,_and_extinguish) is deeply rooted in their culture. &gt; JS is here to stay man. God help us 
Oh, sweet Jesus, it's not 1995 and Microsoft are not the same company. They can't afford to be.
If you're using .NET Core [Sieve](https://github.com/Biarity/Sieve) looks like an interesting project. Have not used it personally but it was posted here a few months ago.
Avalonia/blazor are two very promising cross platform UI frameworks for. Net.
Avalonia/Blazor my dude.
Don't use Javascript. Use C#. (see Blazor). The serial port access is done server-side (which can be on localhost).
What is it that the localhost server can't do? Because if you say access the serial port, you're wrong. UI is for UI. The backend is for everything else. I'm sure you know the difference between presentation and application layers.
I would say it's almost always a better use of time to use 3rd party. Especially if open source projects already exist.
So you're saying that instead of just distributing a single executable application to the users that need to use the hardware, I should deploy an entire fucking webserver to their machines instead. And on top of that, instead of taking advantage of `System.IO.SerialPort`'s event's to passively wait for data from the serial device, I should manually poll and read data from the serial port from a controller?
No, that would be fucking stupid. Roll Kestrel into a windows service, locked down to localhost and have it access the serial port data via a repository pattern.
If you dont need the extra performance then youve just added an extra layer of complexity and your business logic is now split into two places. You also cant test it with EFs in memory database. And the most dangerous thing? Youve just added stored procedures to your project, things can get messy quickly if they start getting used a lot.
Interesting, I could literally write a paging solution in an hour or two. I woudn't add a 3rd party library to save me that amount of time. Adding more complexity and risk to the build for so little gains seems like a false economy.
yeah I was thinking the same thing; it was kind of underwhelming this year from a app dev's perspective
Generally the 3nd party ones are heavily tested and proven to work. Writing your own is way more likely to introduce bugs. Then as you require more features it means more testing and bugs.
&gt; Use C# Fuck C#.
Yeah while it's simple.
Um. This is /r/dotnet ?
Sure, stored procedures CAN get messy, but so can ORM generated or any other code. I'm going to assume from your comment that you're independent / just learning / have a small team. Like most things, it really depends on your team. You may have several DBAs who are comfortable writing stored procedures that you could take advantage of and take the load off of your developers and get the job done more quickly. You can also make changes to your stored procedures \(as long as inputs and outputs don't change\) without having to deploy new versions of your app. There are tons of advantages to stored procedures in addition to the performance benefit. If you think they're always wrong because they "can get messy quickly", you might want to spend some time with them so you don't pass them up just out of inexperience. Up to you though, they're optional.
https://github.com/joukevandermaas/saule
Ouch, that was savage... There was a popular trend a while back before ORMs became popular to use lots stored procedures in projects. Now we are stuck with these projects that have half their business logic in the code and half of it in stored procedures that call views, that call more views. Some days i get to follow the path to find out that there are 20 views being used behind the one stored procedure. If your really lucky you will find a trigger or two. Heres the crunch, you cant really refactor these projects out of the db without creating duplicate functionality mimicking the db stuff, which is an easy way to introduce bugs and make debugging twice as hard. It creates quite a problem. So, the choice to use stored procedures should be weighed and carefully considered. I still use them after deliberation, and when I do im happy ive got all those years of experience writing those stupidly complex un-refactorable pre ORM applications that everyone now hates.
How complex can paging, filtering and searching get?
Oh come on man. Even your username disagrees with what you just said.
3.5 SP1 is still a supported .NET version: https://blogs.msdn.microsoft.com/dotnet/2015/12/09/support-ending-for-the-net-framework-4-4-5-and-4-5-1/ What about .NET 3.5 SP1? Is that no longer available? This announcement does not affect versions prior to .NET 4. You can continue to use .NET 3.5 SP1 beyond January 12, 2016. 
Holy cow, you are quite correct.
Each of those is literally easier to complicate than the last, though.
I’m certain it results in nested selects. We had an issue with a query that dynamically appended clauses in a loop that broke sql. Apparently there is a limit as to how nested you can get. I don’t remember if it was 100 or 1000 or something similar. Either way I’m pretty sure the query was originally written by an idiot (me a couple years earlier) and I was able to get it out of the loop and down to 2 clauses. 
Searching can get incredibly complicated.
I am using LetsEncrypt azure extension successfully, I have to admit it wasn't the easiest thing to configure but a bit of tinkering and experimenting you should be able to do it with 1-5 hours. https://github.com/sjkp/letsencrypt-siteextension
Thank you very much!
Ya! On reflection yeah your kind of right. Software development would be a great job if it wasn't for clients. You know the ones, your in a meeting and they just need to add their 5 cents so they suggest being able to search on some obscure thing that no one will ever use, and it needs to be grouped by something that no one cares about. And your simple and elegant UI gets fubar.
All good, I was laughing at the time. It was a pretty good roast. I guess my point is there is a cost with stored procedures and that should be considered. If I can avoid them I do. If I cant I drink a cup of concrete and get to work. 
Great conversation. I've always used a single where but separated my skip and take. I will have to investigate further.
A relatively cheap option \(depending on what your definition of cheap is\) is hosting on DigitalOcean You can create a machine for as little as 5$/month and use it to host your aspnet core app without problems, using nginx as a reverse proxy; this way you can let nginx handle the ssl part with letsencrypt You can find a full guide here: [https://tonyranieri.com/blog/2017/10/27/Hosting\-.Net\-Core\-On\-Linux/](https://tonyranieri.com/blog/2017/10/27/Hosting-.Net-Core-On-Linux/) Digitalocean smallest machine \(1GB ram / 1 CPU, the one you get for 5$/month\) is perfec for a small to medium sized app, but you will need a bigger one \(or a separate one\) if you need to have a sql server database \(i've made successful test with a 4GB / 2 CPU machine, which costs 20$/month\)
Wow! Thanks!
im going crazy trying to figure this out 
Can you RDP to those azure instances? Otherwise I'd say install this instead: https://certifytheweb.com If your IIS is configured, this will read the domains from IIS, and will get you a renewing SSL certificate in like 5 minutes
I do this as well. The problem with AWS is that the portal is a mess for beginners and you wouldn't use most of the options they provide. 
Azure hosting is amazing, I use Cloud Flare for free SSL on my production web app as well to keep costs low as possible.
I recommend this over Certify: https://github.com/PKISharp/win-acme No 5 site limit and just as simple.
Exactly. For personal projects it'll be fine but once customers/management get involved it's a different story haha
I need a custom domain. But I use this for testing :)
Wow! I guess you can't beat free :) Thank you very much
This is how I roll and it's super easy to manage. Using nginx as a reverse proxy makes it easy to publish new services with little changes to the config.
You probably meant EC2 instance. S3 is for object storage.
I wrote a tutorial on it ... https://coderscoffeehouse.com/tech/2017/11/24/aspnetcore-ssl.html
You're right, I meant EC2. Thanks. I fixed the comment
As long as you can install a certificate against the server, you can use let's encrypt. Sites like https://www.sslforfree.com/ are really good for helping you do this. You will just have to manually reapply a new certificate every 3 months.
So it's windows forms with VB? And you are running on a windows machine and also want Ubuntu themes in the app?
If your app is stateless, Serverless on AWS API Gateway is a very cost effective solution that provides free SSL and supports custom domains. If your usage is very low, it will likely be FREE (as in beer) for at least the first year. You will need to add a nuget package to your app and implement a custom startup file for the API Gateway to wire up, but it's actually pretty painless and doesn't otherwise affect how your code runs. Here's a blog post on how to get setup: https://aws.amazon.com/blogs/developer/serverless-asp-net-core-2-0-applications/
If you don't want a domain, you can even use an api gateway! The first 1 million calls are free and they only charge 9 cents per terabyte of traffic. The correct way to configure it would be to put the ec2 on a virtual private cloud (VPC) , then on the gateway configure a VPC link so that traffic between the gateway and ec2 never leave a private network between the two. Api gateways use ssl by default and their communications are never exposed to the internet (assuming all you want is a domain) 
What about all the windows specific api?
Are you saying it's vaporware? It's already in beta...
Good question!
You can get the arguments sent to a program. Have a look [here](https://stackoverflow.com/questions/2633628/can-i-get-command-line-arguments-of-other-processes-from-net-c)
You do pick the subdomain on *.asurewebsites.net, if that is sufficient for testing. Otherwise you're paying for the service.
DigitalOcean was mentioned. Linode is good too. I recently had to move a website. Both have a $5 a month option. I added the backup option which adds a few dollars. Both use SSDs. You can use nginx as the reverse proxy. I ended up going with Linode. So far it has been great. You have to of course be able to set up and manage the server. If you are generally comfortable with Linux this should be no problem. Both companies have great guides for setting up and hardening your server. I have two websites hosted. Neither gets a lot of traffic. One uses MySQL. Both perform wonderfully. Both companies have coupons for a free month or two, so look for those. Also both will refund your money if you aren’t happy. 
yeah i suppose when the bot is done, or at least stable, i can set it to run on start and maybe restart it every day or so just in case with a kill and start script. 
https://stackoverflow.com/questions/5497064/c-how-to-get-the-full-path-of-running-process
I've used PM2 for nodejs before, is there something like that for dotnet core? If there isn't some sort of watchdog process manager for it, maybe one needs to be developed at this point, with the popularity continuing to rise.
You can run your dotnet app as a service as well. If you're running Raspbian, it uses systemd, so you can create a service file that executes "dotnet bot.dll". If you enable and start that service, it'll run on startup as well. 
Building an ASPNET core and angular from scratch by Neil Cummings. :)
I think the easiest will be to use "screen". You start up `screen`, run your app `dotnet bot.dll`, detach from screen (`Ctrl+A, D`), disconnect from SSH, everything works.
Look into nohup .
if it is a long-running script instead of one that fires on a schedule, you probably want some sort of process manager that will look for it crashing and restart it and start it on system start etc. For that, IU recommend a systemd service. You can do something like this: https://github.com/PaluMacil/dwn/blob/v0.0.3/README.md which is for a Go binary, but you'll just change the exec command to /absolute-path-to-dotnet/dotnet bot.dll and the start and enable commands are in that readme. If you are managing the scheduling / timers in the application, it's probably beneficial to consider making it a simple commandline one shot app and instead use a systemd timer (or cron) because that will take a lot of time and scheduler logic out of application code and place it in something maintained by others.
Something functional and F# based. Suave maybe.
Nooo, I should have been more clear. Sorry I haven't slept and I've been busy this morning. I'm trying to do this: https://www.youtube.com/watch?v=FuwIyTBp9-Q&amp;t=49s That might make more sense of what I'm trying to do. 
https://www.youtube.com/watch?v=FuwIyTBp9-Q&amp;t=49s I should have done that and explained much better. Like I told the other guy I haven't slept yet so I didn't realize how unclear I was. In the toolbox nothing shows up after I build.
I need the .net part only anyway, thanks! :)
At work we are on .net core 2 and love it. 
Giraffe, right? 
.NET Core. Also, using the SPA templates can accelerate the process. I've never tried the Angular templates, but the Aurelia templates are great.
If you're new to .NET, please accept my apologies for the confusion among "which .net" to use. We are currently in a transition period between two flavors of .NET at the moment, but the newer (.NET Core) is now production-ready and should definitely be your choice barring edge cases. More specifically, you're looking for [ASP.NET Core MVC](https://docs.microsoft.com/en-us/aspnet/core/mvc/overview?view=aspnetcore-2.1). There is another (relatively new) way of writing ASP.NET web apps called [Razor Pages](https://docs.microsoft.com/en-us/aspnet/core/mvc/razor-pages/?view=aspnetcore-2.1&amp;tabs=visual-studio), but I don't think this fits your use case of working with an Angular front end. As I understand it Razor Pages is a less flexible (but potentially more productive) framework to make dynamic pages without the overhead of controllers (the C in MVC). Good for sites which are largely static dynamic, but with the ability to use a template language (Razor) and add C# code right in the view. Welcome to the back end! Cheers.
If you are deploying with Kestrel you would want to use IPAddress.Any. Keeping it localhost is perfectly fine for local development but pushing to production would not work. Only reason I bring this is up is that at work we spent the better part of 5 hours trying to figure out why the container was not accessible. We dug through the Docker Swarm configs and github issues to no avail. My coworker found the offending code in program.cs. I felt like a bastard because I wrote the code. 
Thanks for the nice info!
I mentioned them in [my own response to my original comment](https://www.reddit.com/r/dotnet/comments/8hbf8d/why_do_people_not_like_vbnet/dyiqc6b). I don't like lambda expressions or anonymous functions in general, but I think C#'s syntax is slightly better. Consider this code to find the largest value in an array that's less than 6 \(using Linq\). int[] SomeArray = {1,2,3,4,5,6,7,8,9,10}; var Answer = SomeArray.Where(m =&gt; m &lt; 6).Max(); Console.WriteLine(Answer); // 5 Dim SomeArray as Integer() = {1,2,3,4,5,6,7,8,9,10} Dim Answer = SomeArray.Where(Function(m) m &lt; 6).Max() Console.WriteLine(Answer) ' 5 Of course in either case, I'd rather just write a short function so that I could just write it like this: var Answer = GetMaxValueUnderLimit(SomeArray,6); Dim Answer = GetMaxValueUnderLimit(SomeArray,6)
I would advise a fire once app (that exits after its task) on a timer over a service but in my other comment I specified how to set up a systemd unit for a service which is almost identical to a timer. The document I linked to is an example where I do specify how many times to retry. I do think scheduling within an application is usually not ideal unless the application starts to become fairly complex. In that case Quartz.net is a fantastic library, and running as a service makes sense.
The key argument is that not every application should be a SPA. SPAs greatly complicate your deployment process, and you're offloading most of your view generation to a platform outside of your control which can introduce unexpected problems. Also, the tooling around SPAs isn't terribly mature and is undergoing rapid evolution as people try and figure out a way to do client side JS that isn't a disaster (they won't find one, but they're trying). I wouldn't automatically say, "Never do a SPA" or "Don't do MVC"- it really depends on the specific application and your development team.
Every time I attempt a SPA, it results in me regretting it. Every. Single. Time. Now I no longer try.
I don't like linq in VB.net.
Interesting, ill have to dig into that. Its actually a chat bot service that async responds to commands, so most of the time it will just be idling waiting for a query. The whole scheduling thing is just to check for failures because the previous implementation was in python and for some reason it would just die randomly without outputting any failure. I just want to make sure that i dont need to constantly manually restart the service, and it doesnt have any state dependent data so restarting wont lose anything.
The "With" reserved word is useful.
New projects? Definitely go with ASP.net Core 2.0. There is very little reason to use ASP.net on .Net Framework anymore. They've even ported SignalR to ASP.net Core now, so no worries there.
Wait a year when Blazor mature - then you can go crazy with SPA. For now, go with Razor pages with mostly traditional form/pages and a few javascript rich pages.
As others have said, you want ASP.NET Core 2.0 MVC/WebAPI (they are both similar, but the 'webapi' template is closer to what you want). I would go so far as to recommend using ASP.NET Core 2.1 rc1 with the angular template (i.e. 'dotnet new angular'). That will give you [JavaScript Services](https://github.com/aspnet/JavaScriptServices) integration, which will start angular using the angular CLI when you start debugging your .NET project, and makes publishing your application easier. This also enables SSR (where .NET can delegate to node to render), but I thought it looked difficult to setup, and have not tried it before.
That definitely wouldn't have the best support, documentation, or integration with Angular...
Awesome constructive info love it thanks!!
Seconded. And with v3 coming out soon, it's going to get even better.
wow that sounds incredible. Server-side rendering in the browser basically.
API plus SPA is definitely the way to go, but you won't have to suffer with Javascript for much longer. Blazor is absolutely amazing. Yes, yes I know, "it's not ready for production yet", but that has not stopped me being the most productive I have ever been (full stack) today, and it was a very pleasant experience and all with smooth as silk Di, WPF-like bindings to HTML and all backed by asp.net core 2.1. Sharing POCOs client and server side was amazing and its just so easy to move between server and client code. They can call it experimental all they like, I'm writing reusable UI components using HTML/Razor client side in an SPA, using async HTTP calls mapping responses directly into POCOs and binding those directly to components... I really, really like Blazor. I am NEVER going to have to use any language other than C# again, and I could not be happier.
Same
I do the exact same thing using tmux which is built into Linux. Simply run ‘tmux’ and start your from within. Then disconnect from tmux using CTRL-B+D 
And i thought the frontend was in a big transition xD **Thanks for all the great input people!**
You're missing out on some great apps. VS Code is pretty fantastic. 
What would you say is the greatest learning resource for someone wanting to do web dev in core 2? I'm trying to upskill outside of work.
Screen!!
3 is like a year out still.
I'm sure someone else will reply with some cool resource, but I'm having fun with .NET Core 2 using AWS Lambda. Serverless.com has some guides to get started and its a good way to get into this new API architecture imo since .NET core is supported. You might have to update the sample code to 2.0 tho. 
Thank you for this!
You should be able to go with 2.1 at this point. 
If you are comfortable with javascript, then go for Node.js as a backend (Express JS) . Search for MEAN Stack. If you want to go for Enterprises , Then you have C# and Java. Java is most common in this market if you are not targeting Windows OS. Grails is a popular Java web framework. Dot Net Core is gaining momentum but not there yet, for this type of market. If you want cheap good hosting, a very common language for backend then you have PHP. It is the one. Wordpress &amp; Drupal are based on. Always start small then grow from there. I would recommend that you start with Node.js if you have an entry level backend experience. 
Isn't it only RC? Or did I miss the release date..?
This is the right answer. 
Same blog I follow and exact same article where I realised that CF was a thing
It's literally just a roadmap right now, so a year is optimistic if anything. But we did just get big news about Core 2.1
Depends how much faith you have in Microsoft, but officially they do condone use of the RC in production: https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/ &gt;Today, we’re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 **RC 1 is now ready for broad testing and for production use.** Our quality, reliability, and performance testing give us confidence that the release is ready for the first set of production users.
Man, I'm sorry to hear that. Now that I've been in the ecosystem, I don't think I would ever do a web app as anything other than SPA frontend + nginx and some form of web API. Unless you are serving static content, it feels like the slight increase in deployment complexity is offset by a much cleaner and robust system. React + nginx / .NET Core Web API for the win hosted on some Linux distro for the win!
SPA frameworks have become quite mature. React is my go to. It's quite powerful and here for the long haul. It might be slightly more complicated to deploy a detached frontend hosted by something like nginx or even IIS as well as a web API, but frankly it's not that much more work. The benefits to separating your system like that (loose coupling, easier to coordinate parallel work without stepping on toes, etc) far outweigh the issues. Unless I was serving static content, I would never use a traditional HTML response based server again. You just can't get the user experience that you do with an SPA, no matter what anyone says. It's intimidating to get into the SPA world, but once you are in it, I don't think you ever look back. Just my 2 cents.
It also runs worse than either Emacs or Eclipse, the latter of which is a proper Viual Studio-style IDE.
https://www.nuget.org/packages/Sieve/ Use: [HttpGet] Thing Controller.Get(SieveModel sieve Model) ...and never have to worry about paging, filtering and sorting ever again. It's all done automatically for you. Just give it the IQueryable. Bloody genius!
No, it really doesn't. Eclipse is way more of a bloated pig than code is.
In EF Core 2.1, [yes](https://docs.microsoft.com/en-us/ef/core/querying/related-data#lazy-loading).
The Asp.net Core 2.1 Preview with Angular project template is very different from the Core 2.0 template, and I would say, much better. You'd need to install Netcore 2.1 preview and vs 2017 preview to run the project. By the time your app is ready, the 2.1 will have been released. Or has it been released yet? I haven't updated in a few weeks. 
Which is a testament to how at least on my machine VS code runs worse than Eclipse.
I just verified. With nothing open, Eclipse Neon is almost 50% worse than VSCode in terms of memory. That's with a pretty vanilla Eclipse install and a stupid amount of plugins in code. Eclipse is also significantly worse to work with.
I'm just getting into a project that's basically what you described, React on the front and .NET Core API on the back. I am curious to know, how are you running/deploying the React side? I had considered just deploying that to S3, how does nginx come into it for you? 
[removed]
Tell me real examples that UWP is "mobile app"... 
They actually announced MenuBar for UWP ;)
Will still work, no?
It's currently in preview in EF Core.
In the sense that it is sandboxed. In the sense that behaviours that are totally normal in a desktop app are either difficult or entirely forbidden in a UWP app. Things like running a long running background process . In the sense that UWP apps are primarily distributed through a locked down content moderated store. In the sense that touch is not just a first class citizen, it's almost the only citizen. Some of this is changing, but those changes are tied to windows updates so they aren't usable. UWP was built to unify Microsoft's now nonexistent mobile platform with their desktop OS, and that heritage is very visible.
After doing a bit of research, it appears that this is in fact the "new" way to do things with Core. So I think I answered my own question, unless someone can give me some further info on this.
What's the new way? Microsoft recommends hosting production .net core apps behind a full featured web server like IIS, not self hosted in Kestrel.
Not from what I'm reading. They actually suggest using Kestrel fronted by IIS or some other full blown web server.
What use case would you combine angular and razor?
No. Exposing kestrel directly is not advised; it exposes you to security vulnerabilities (look it up, there was one just recently but not if you were behind a proper webserver)... and I didn’t think it handled https at all currently? For an *internal microservice*, I imagine its probably fine. ... but um yeah. Just in general... IIS? Not really a great webserver. Thats why kestrel exists now. Perhaps look at nginx to proxy kestrel safely for public apis.
As angular cli has its own boilerplate init. i think theres no need to use third party templates (in this case microsofts template) Thanks for confirming which version to use!
Can you show a link to the vulnerability? I couldn’t find it. 
I am not sure that I would have any, it was just more of a "I guess that's cool" kind of thing, if it lets you do that. 
&gt;Roll Kestrel... Kestrel is a web server.
It's too late. MS abandoned the desktop in favor of MOBILE FIRST, CLOUD FIRST, and the developers left (Hey- I don't need MS to write webapps that run on someone else's hardware), and I'm guessing rather few businesses are paying to have any significant systems made only for the Win desktop at this point. Pro devs walked away and I don't feel we're coming back. What little cred MS had with the enterprise devs started fleeing the ship as soon as win8 and increased dramatically when Build 2010 (iirc) started the talk of apps made with JS.
Hmm I see what you mean but OP talked about servers so I'm assuming he meant to have the server always running and waiting for tasks. But if that is the case, then yes, your solution is better :) BTW, I don't see a linked document :S
I mean, a crap ton of desktop apps are still being made and maintained on the finance and government side. Not many of them like it, but there's a whole lot of them.
How do blazor components talk to each other? Is constructor injection supported yet, or just property injection?
string.Join(string.Split(new char[] { ' ' }).Skip(2)).Join(' '); That just skips the first two words. I think split automatically includes empty entries, as in if you split a string with two spaces in between a word it'll include an entry where it is an empty string (string.Empty). If you want it to exclude empty entries, have the string split method have SplitOptions.RemoveEmptyEntries as a parameter after the new char array.
[String.Split](https://docs.microsoft.com/en-us/dotnet/api/system.string.split?view=netframework-4.7.1#System_String_Split_System_Char___)
You could always serve the client for your app using ng and serve the .NET side by running 'dotnet run' each from the appropriate folder. You can run multiple terminals inside of VSCode so that you could stop and restart them at will. I find it more convenient to have my dotnet project start the angular one and only have to deal with one debug task and one server, cert and auth scheme being presented to the client.
Hmm... you're right: https://community.devexpress.com/blogs/ctodx/archive/2018/05/08/build2018-winforms-and-net-core-3-announcement.aspx Oh well... I only said "soon". That is soon. :P
While there may be less new apps created for it there are a huge amount of legacy one that depend on it. And tbh Web adds extra layers of complexity if the app is only being used on desktops. We have like 200 laptops in the field with no Internet I'm not managing a web server on all of them because it's popular :P
yeah, you don't have to tell me. Also, the legacy apps aren't going to be UWP, and you're not likely to move them to linux/.netCore either. MS forced the issue for us.
I play in that space and the government, is all-in on web systems backed by java and open source/free db's. The Fed is starting to move to the 'cloud' and containerized systems.
&gt;Hey\- I don't need MS to write webapps that run on someone else's hardware That's an odd thing to say about a company that is making money hand\-over\-fist as an industry leader for hosting web services. \&gt; Pro devs walked away and I don't feel we're coming back. According to the Build conference \(which admittedly might be biased\), regular Visual Studio users \(who use the app multiple times in a month\) is up more than a million users in the last year. If desktop developers are leaving in droves, they are more than being made up for by web developers using Microsoft technologies.
Why aren't u fond of IIS? 🤔 Have been using it for a while with standard .net asp websites and it has been pretty comfy. Until core fixes all issues with the 2.1 version im kinda stuck with the previous one for Web APIs. 
I would stick with server\-rendered if your customer base is using high latency/low bandwidth scenarios, such as satellite. The payoff in traffic and maintenance is much better with APIs, but you need to be able to download all packages needed to render the site for the first time in under 5 seconds on slow connections. The new reddit bombs for me daily; I'm on satellite. You could theoretically get around this if you have a landing page. Reference all of your js packages but only use page\-embedded js on landing. They will be loaded in the background and buy you a break of a few seconds while the user figures out what to do.
Their stats seemed to suggest otherwise? But if everything is really moving away from desktop then can you blame them for this approach? There is of course plenty of desktop activity and most enterprise environments will be windows, .net, SQL server... It's a brave CIO that moves away from that. The only places I've worked at that made the move ended up back in MS world quick sharp. Any saving you make in licensing is lost quickly to faffing around with more niche tools. 
I think it's almost exactly the same except for maybe the semicolan
Kestrel does not exist because IIS is bad. IIS is perfectly fine for proxying Kestrel. What are you basing that point on? 
Thanks I managed it to work 
Ah, but not a "whole fucking" one, like IIS. It's a few K and so runs from the command line or in a Windows Service. It's just another layer in your app and you can lock it down to 127.0.0.1 if you want. The plus side is that you can now develop UI for any OS and you don't have to worry about Microsoft changing their minds in 24 months and "dropping" it. Your app is NOT the UI. That's just the bit for the hoomans. Im just trying to be helpful here. The future of apps is NOT UWP, for the same reason it wasn't Silverlight or Windows phone or Java applets or Shockwave Flash. I do hope you didn't buy into developing for those either - they were single platform/plugin tech that died a death for single-platform, not technology reasons. UWP is great though, right? Well maybe, so why did Microsoft fuck Skype up so badly, porting it to UWP? The answer was the huge complexities in maintaining multiple versions across multiple platforms, all upgrading out of step with each other and incompatible, even within a single platform. They're never going to fight their way back from that and now they are up against Google Hangouts with its single, HTML/JS-based codebase. And they will lose. Google has to maintain just one code base, Microsoft has to maintain the Apple app, the iPhone app, the Windows app, the Windows UWP app, the Android app... Nope. Fail. Dude, you're invested in the Windows desktop, I get that. If that's your future, go for it. But please, please give Blazor a go and tell me it isn't awesome. Then I'll let it drop.
It should be fine, just put a proxy in front of it.
Xunit is simple and quick to get started with. This guy keeps it simple - 8 mins - give it a go... https://youtu.be/LQHA-WPQGeI
How can we believe that Microsoft takes dekstop UI frameworks seriously when even important Microsoft products like Visual Studio is based on the Electron terrible **shit**.
&gt;Ah, but not a "whole fucking" one, like IIS. Eh? It is a whole web server. &gt;It's a few K and so runs from the command line or in a Windows Service. A Windows Service just to access a serial port? &gt;Im just trying to be helpful here. You are giving one idea. It's just a bad one. &gt; The future of apps is NOT UWP, for the same reason it wasn't Silverlight or Windows phone or Java applets or Shockwave Flash. I do hope you didn't buy into developing for those either - they were single platform/plugin tech that died a death for single-platform, not technology reasons. We've been writing cross-platform apps since a long time ago. &gt;UWP is great though, right? No it is not right now. &gt;Dude, you're invested in the Windows desktop... That's a lie. &gt;... I get that. Considering the lie It's clear you're not getting anything. &gt; If that's your future, go for it. It's not my future. It's actually the present. Just some few ignorants like you think cross-platform app development is something new thanks to HTML/CSS/JS or that was something hard before that stack. &gt;But please, please give Blazor a go and tell me it isn't awesome. It is awesome. &gt;Then I'll let it drop. Drop more jokes?
We run in different circles then. I haven't been able to propose a native win app since Win8.
Weird, I worked on a large base, and pretty much every app was C/C++ wrapped in a managed layer wrapped by a C# desktop app using WPF and WCF. The web stuff was Oracle DB and lots of Oracle Forms being slowly owed to MVC5. Two other friends are working .NET Core, but only because they are 100% green field projects. The government space is huge and can accommodate a lot of different environments.
I'm pretty certain you cannot have a nullable PK. What does the FK object use as a PK? I'm not sure from the wording of your question whether OtherThingID property as shown below should return zero or null. Maybe you can use this as a starting point: public class Thing { private int? otherThingID; public int? OtherThingID { get { return (!otherThingID.HasValue || (otherThingID.HasValue &amp;&amp; otherThingID.Value == 0)) ? (int?)null : otherThingID.Value; } set { otherThingID = value; } } public virtual OtherThing OtherThing { get; set; } } public class OtherThing { public int ID { get; set; } // needs a non-null ID } 
&gt; But if everything is really moving away from desktop then can you &gt;blame them for this approach? Yes because they kicked it over the edge and decided to invest and _promote_ everything but native Windows apps, with the exception of Windows Store Applications (or whatever they changed the name to yesterday at brunch). They did this because the market for mobile got HOT, they knew there was little growth in desktop computers, they saw Apple slaughtering every earnings report with mobile apps and they realized that they could help provide the backend infrastructure (cloud) for all those massive numbers of Windows Store Applications they were going to have rolling in when they forced the millions of Windows developers onto that platform. Hey! Remember how long there was no sideloading except for registered, paid devs? Genius!! Their Azure play worked but it was because companies and orgs were moving their on-premise infrastructure to Azure, not because they're picking up tons of converts from nonMS shops. Their mobile apps got whacked, and their winstore apps never went anywhere despite the fact that even on OMG Mission-Critical servers still boot/login to the Metro side and ask me if I want to read the Sports or buy some games. Ya know how "Find" defaults to "Everywhere" ? Wow, inspired. So now it's a UWP play, to try to reinvigorate the app store and see if they can get any more money from it. But it's too late- devs are gone working on webapps frontend possibly in one of the nonMS frameworks, backends in node, java, serverless, whatever. Maybe all the spying in Windows will bring us back!
Numbers if studio users- my suspicion is that the free versions are capturing devs who'd used other ide's or pirates coming in from the code. Also, I'm wondering if it doesn't include Code and Xamarin ide's. Believe me, I'd love to be proven wrong, I've got _tons_ of arcana that was hard won and appears to have been trashed by ms' promotion of all things linux and open source. 
which orgs? Ours is dumping anything that requires a license as soon as reasonably possible, with few exceptions.
I see some .result on async methods. Read this good explanation: http://www.mithunvp.com/fully-asynchronous-aspnet-core-2-web-api/ 
I remember it was reported on GitHub
Found it: https://github.com/aspnet/Announcements/issues/295
Kestrel probably exists just because it is simpler and portable.
Web server implementations in core, https://docs.microsoft.com/en-us/aspnet/core/fundamentals/servers/?view=aspnetcore-2.1&amp;tabs=aspnetcore2x
Would AWS API Gateway be considered a proxy?
You can use [session state](https://msdn.microsoft.com/en-us/library/ms178581.aspx) to store information that needs to be shared between pages.
Lots of them? Dod, FBI, space.
No, but I believe you can set up a proxy integration with AWS API Gateway
DAE hate le Electron???
Huh, that kind of explains why the Installer feels almost as heavy if not heavier than the actual IDE lol
So what an API Proxy does for you: * Transport Security * Monitoring * Performance * Quotas to protect yourself from DDOS attacks, etc. A Gateway is a bit of a bigger beast but does things like: * Authentication/Authorization * Orchestration * Mediation/Transformation Now, some Gateways are encompassed in an API Proxy - but also some of them you have to turn on that capability. I've never used AWS API Gateway before - so you should probably do your own research on this, but I'm going off the fact that it looks like it's an option you have to run on. https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-create-api-as-simple-proxy-for-http.html
Neither the PK nor the FK are null. The FK is 0. I need EF to treat it in the same way it traditionally treats nulls.
Why the hate on Electron: * Electron performance is awful, it sucks all your bloody memory, runs on top of a VM and a web renderer. * Spreads the plague that is the web ecosystem, HTML&amp;CSS, node, JavaScript and its dependencies for adding two numbers, all of them are a complete mess. At least Microsoft somewhat saved us with TypeScript. * More performant and robust solutions are not being used in favour of fastest development time delivering a suboptimal product in less time, something I don't mind from a developer standpoint but suffer as an end user. I need basically a gamer PC just to run Spotify, any Chrome-based browser, (I personally use Opera), and Discord at the same time, which is just unreasonable. 
&gt; Electron performance is awful It's 2018, RAM isn't exactly a scarce resource. My mid-2014 MacBook has 8 GB of RAM, of which VS Code is consuming 95 MB (1.2%) and Discord is consuming 48 (0.6%). &gt; Spreads the plague that is the web ecosystem, HTML&amp;CSS, node, JavaScript and its dependencies for adding two numbers, all of them are a complete mess. Yeah, JS has traditionally been pretty shit, but the JS you see based on the latest ECMAScript standards (in particular ES6+) isn't too bad. In any case, there's always the option of using TypeScript (which is wonderful), in which case raw JS is only ever coming out the ass-end of your transpiler. &gt; More performant and robust solutions are not being used in favour of fastest development time delivering a suboptimal product in less time If an Electron-based application runs fast enough that it doesn't feel "heavy", what's the point of developing the application another way that might technically run even faster but takes a month longer to develop? &gt; I need basically a gamer PC just to run Spotify, any Chrome-based browser, (I personally use Opera), and Discord at the same time, which is just unreasonable. Really?
Sure. That's only a multi-year project. 
Sure -- but failing to fix it will likely sink the business.
As someone who is un-fucking a system that went way too far down the wrong path with the exact same failure modes you are describing, if the data is business critical the business will suffer from data corruption. If it really is just a "silly" schema, why bother building a front end at all?
What kind of error msg do you get if you use code like I provided where you test for null and use zero instead? I'm pretty sure you need to use a nullable type because that is what tells EF the child object is optional.
&gt; It's 2018, RAM isn't exactly a scarce resource. My mid-2014 MacBook has 8 GB of RAM, of which VS Code is consuming 95 MB (1.2%) and Discord is consuming 48 (0.6%). Chromium uses a multi-process architecture, all of VS Code processes suck up 400 MB of RAM right off the bat, the same thing goes for Opera/Chrome (the latter being the worst), while I agree RAM is not a problem nowadays (on Windows kind of is actually, but that's another topic), it is still not ideal that a 'text editor' takes 400 MB of RAM without a single file being opened yet. &gt; Yeah, JS has traditionally been pretty shit, but the JS you see based on the latest ECMAScript standards (in particular ES6+) isn't too bad. In any case, there's always the option of using TypeScript (which is wonderful), in which case raw JS is only ever coming out the ass-end of your transpiler. I see where you're coming from, but I think for now I prefer those things to stay in the web ecosystem where they belong, I don't think that is a bad thing to say &gt; If an Electron-based application runs fast enough that it doesn't feel "heavy", what's the point of developing the application another way that might technically run even faster but takes a month longer to develop? As I said &gt; I don't mind from a developer standpoint but suffer as an end user By the way, there's no way you can make an Electron app not feel heavy, it is what it is, it is going to be slow because of how it works, of course you can make more bearable like Microsoft did with Code. &gt; Really? Of course not, it is an exaggeration, but the RAM and CPU consumption gets pretty ridiculous on Windows 10 specifically. As an end note, I don't really hate Electron, I'm just telling you what most people hate about it. I'm actually indifferent on the topic as I don't even develop GUI desktop applications, but I think there are good alternatives that need help and I would've liked to see grow like for example Avalonia. 
&gt; Chromium uses a multi-process architecture, all of VS Code processes suck up 400 MB of RAM right off the bat Ah yeah, you're right. Crappy macOS Activity Monitor doesn't group them like Windows task manager. Eyeballing it, it does seem like VS Code takes up around 400 MB.
In financial, we're stuck based on peripheral vendors in China and Taiwan making "Windows only" drivers and refusing to allow help to develop Linux drivers. We've tried to move to Linux, but it always comes down to cost of paying a vendor to "redevelop" some old ass driver for Linux and they are scared of non-enterprise support models. "where's the 1800 number when the system goes down!?" Microsoft, please oh please keep chasing vendors away. It's getting better but not enough yet.
IIS/Windows servers are pretty bloated. I don't think this is news to anyone
Also just something I thought about, you’ll want to make sure you install 2 way SSL between your gateway and the server hosting your api application
This might be a stupid question, but what is a sentinel record? Google turned up nothing
As /u/snarfy said, all chaining where clauses does is expand the LINQ expression tree. What and how that expression tree gets turned into depends entirely on the underlying query provider. IME with EF6 targeting SQL Server chaining where clauses in itself definitely doesn't cause nested selects to be generated, however it's possible to stuff some complex expressions in the where clause, so I have no doubt that it is possible to come up with a scenario where you can chain together wheres generating a nested query every time. tl;dr, always sanity check the SQL being generated by EF ¯\\\_(ツ)_/¯
Ye comparered to a Linux server it does take more resources to run but disregarding that (and the increased price) there doesn't seem to be anything wrong with it. As u mentioned the bloat part shouldn't be a surprise to ppl browsing this sub 😅 hopefully 