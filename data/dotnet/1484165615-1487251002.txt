Please repost with sensible title
You should do some research. But to answer your question stick to the standard .Net framework as it is more robust. At the moment .net core is really for people who have a reason to use it. 
I don't know if drudge work is the appropriate term. But after you've created 10 controllers with several views each, doing more of the same I guess. Creating new controllers, new views, new methods in the service layer.
I'm already using Automapper, but I look into making custom scaffolds for my project.
Imo it is no problem using ASP.NET Core, but just stick to full framework as a lot of stuff is not yet available in .NET Core.
code generators like CodeSmith used to be quite popular, though I haven't used one of those in a few years. https://www.jetbrains.com/resharper/ is very popular for making every keystroke count. I wrote a tool NimbleText (there's a free edition... i'm not after your money!) that i use for millions of little "Adhoc" text generation tasks, stuff like creating new classes, new controllers, new views... anything that's "partly repetitive but partly a little bit different each time". I'll create a pattern in NimbleText, generate what I need, then throw the pattern away. 
Where can I find Web API tutorials? Thanks
[Microsoft's resources on Web API](https://www.asp.net/web-api) are actually pretty good in my opinion.
.NET Core doesn't yet conform to the best .NET Standard but .NET 4.6.1 does. .NET Core 2.0 (due later this year) I think is going to. 
I've been porting my company's libraries from the older .NET Frameworks (3.5 &amp; 4.5) to .NET Core over the last year or so, and since the 1.0 release, it's really been a pleasure to work with. While it does have the occasional bug and many of the community libraries aren't yet available, I haven't run into any major issues that I'd consider a dealbreaker so far. Documentation/StackOverflow availability is getting better, and the team is generally helpful and quick to implement fixes. In my opinion, since ASP.NET has maintained backward-compatibility for a decade or so at this point, there's a lot of cruft in the framework code that really made things more difficult than they needed to be. One of the main goals for .NET Core was to rework that code using modern best practices, and they really killed it. The dependency injection and middleware patterns that they've used lead to remarkably flexible and maintainable code, and not being required to run applications on Windows/IIS has made the process of provisioning hosting far easier (and in some cases, cheaper) in an enterprise environment. I understand and agree with most of the other comments - the older stuff isn't going anywhere anytime soon and most .NET shops are still using it so if you're trying to find a job that's a good choice, but .NET Core is really slick and possibly easier to get started with if you're already familiar with other languages/platforms like node.js, ruby, or python.
"Both" isn't really the answer you're looking for but I'd say you really need to know both over the next couple of years. For jobs MVC5 will be around for a long time, but Asp.Net core is definitely the future. So initially you should get on board with MVC5, but keep an eye on what's changing in Asp.Net Core so you're aware of the differences. Most of the MVC5 knowledge will be transferable anyway and you'll likely need to know how to migrate from MV5 to Asp.Net Core. 
When I interview I don't take much notice of certificates, I'm much more interested in what you've done and what you can demonstrate, but I guess some people (non technical HR/recruiters in particular) may see it differently. There doesn't seem that many major differences between MVC4 and 5 I can see other than attribute routing (which was available with a nuget anyway), but I tend to work on the latest versions so I may have forgotten something. I can't offer much insight into the courses either but I will say that there's no substitute for hands on experience so I'd say that building something for your portfolio and sticking it on github is a great way to learn and show off what you can do. If you know someone who can code review it as well then that would be incredibly useful for you.
Oops, this comment let's me kinda regret my decision in starting my recent open source project (WhatsApp+Twitter clone) for my portfolio with an ASP.Net Core Back-end. Somehow I thought that proofing the ability to build something under difficult circumstances (i.e. spare documentation, few library's, small community, etc.), would help in finding employment :-/ Oh well, now I will stick with it and do the next project in classic(?) ASP.Net.
Have you done any direct performance comparisons before/after porting any of your web/MVC projects from 4.5 to Core?
You are going to be using these api's as your data source. If that has paging built in, that can work. If you want to preload all of the data and urls on load and keep it in memory and use that instead, that should work. A lot of variables there, would need some more info to be more specific.
Check out Auth0. Basically it allows you to use facebook/google/twitter as identity providers for your application. You dont NEED to use Auth0 you can just use any identity provider you want. If you want to build your own identity provider, check out IdentityServer.
SignalR is the balls!
Abstract away as much shared code as you can into base classes or helper classes. Using generics is extremely useful if your code varies only in the variable types used. If you have a bunch of classes which are largely the same this will help immensely. Remember, if you are copying and pasting large chunks of code chances are there's a better way to do it.
Designs that don't need real-time messaging. RTM is expensive and the vast majority of the time people don't really need it. For example, I've got jobs that can take anywhere from minutes to several days to run. The customer wanted RTM notifications when the job was done, but really just polling the server once a minute was good enough for the users. Net result was a huge reduction in complexity. 
My view is: If I can fit what I need in cookies, then its cleaner than using sessions
How does SignalR work across multiple servers behind a load balancer? I don't know the client side ramifications, but I do know that it means I've got to couple my worker services to the web servers so that they are notified, otherwise they can't tell the web clients.
well, if its not web based client, you could use WCF Duplex channels and achieve almost the same thing.
Also fairly trivial to solve with SignalR. Typically I've used Redis for this use case; see here for more info: https://www.asp.net/signalr/overview/performance/scaleout-with-redis Requires one extra line in your startup code (.UseRedis(...)) Yes, then you have to have a Redis server which could go down. But if you're using a cloud solution like Azure or AWS, you usually don't have to worry about that.
What people don't seem to understand is that SingleR results in a lot of coupling between the web client and the backend processes. Polling sucks, but at least it it gives you a clean separation between components.
depends on how your servers are setup/architected and overall solution, but not much changes. the one big thing about signalr that I think most devs overlook is client's don't need to be a web page. they can be anything really, and if it's a .net application, it's even easier to use. so, right now I have an application that has a master server and several delivery servers. master sends a message to it's clients (the delivery servers) and in turn, those delivery servers contact their clients (web pages). Then it goes back up the chain. I'd expect your long-polling solution works similarly if the processing jobs are not run on the delivery servers? Here's the basic premis using redis: https://www.asp.net/signalr/overview/performance/scaleout-with-redis
Sorry, you're saying push notifications have no application? You are seriously retarded.
Just an example, but I have to create a Google Sheets-esque application in the next few weeks in .NET Core. It's perfect for notifying the user when database content has changed so I can update their UI.
Yep. Nice and simple. And really, you need to do it anyways at least once in the case the client isn't connected at the time the message is sent and later reconnects. 
Absolutely: as a general rule, we use SignalR whenever we do background processing and need to alert the user that their background processing job finished or we want to notify the user of something that is happening in the system that affects them. For example, I'm currently working on a heavily used call center application where we typically have thousands of agents online at once. Speaking generally, our company is a logistics company, so we need to transport certain things and there are lots of external factors that could limit our ability to do said transportation. We're using signalr to notify specific (and sometimes all) agents of: - Incoming calls - Realtime inclement weather conditions that might affect transportation on a given day - Results from actions they've taken. For example, during a call, they might need to go through a certain workflow to get approval to transport something, and this requires another user (manager) to click "approve" at which point we transition the agent's workflow to the next step automatically (when we get the notification that someone else approved) - When we release a new version of the application, they'll get a notification that says "a new version of the app has been released. refresh your browser to get the new version" -- very similar to how Google Inbox does it whenever they do a push to production. You can also see SignalR used in other applications like Azure. Whenever you spin up a new resource like a virtual machine, it takes ~10 minutes. Instead of refreshing an endpoint every minute to see if the operation completed, Azure uses realtime notifications to alert you when the process has completed. Could you do all of these things by polling every minute? Sure, but SignalR works fine, is easy to set up, and in my experience is a really clean solution to this problem that doesn't rely on a bunch of different HTTP requests to the server. In my experience this tends to scale better and puts less load on the app server and db server.
No, I'm saying that I've found that it simply isn't necessary the vast majority of the time. 
&gt; Instead of refreshing an endpoint every minute to see if the operation completed, Azure uses realtime notifications to alert you when the process has completed. So on average the end-user is losing 30 seconds of time waiting for something that is already ready. That's probably not a big deal. &gt; For example, I'm currently working on a heavily used call center application where we typically have thousands of agents online at once. This, on the other hand, would definitely be worth setting up SingalR.
Right - see my last sentence: if you prefer to maintain all of your own infrastructure and babysit things yourself, sure, I agree that it's extra complexity in that case. Otherwise, I've never had an issue using a managed Redis instance on Azure. Could I still have an issue? Maybe, but it's also easy to set up a load balanced, geo-redundant cluster on Azure, so chances of things going wrong are minimized.
1) in that setup, my original comment still applies &gt;For something as trivial as as notifications, SignalR probably has a smaller code foot print than setting up a polling system. 2) and more importantly, are you not concerned about security with that setup? I'd be nervous about have a DB server not heavily firewalled away.
&gt; If, however, you firewall off your DB server to only allow internal network traffic (and hopefully limit to specific internal servers), you are not exposing that DB. Yea so? Your web servers still needs some way to talk to the database, no matter how many hops you put between the two. And the polling is going to use that same route.
Either you're a troll, or God help us if you're in charge of anything remotely sensitive.
I've given up on Core. I'll target .NET Standard so that Core projects can use my code, but that's as far as I'm going for the foreseeable future.
He specifically mentioned a Socket.io-like framework. 
None the less, eliminating the need for it entirely is often a valid option.
Not sure where you're going with this. I already provided a few examples of where I actually do need RTM capabilities - application has thousands of users online simultaneously, need to notify them when things happen and processes finish. I'm not going to make an extra 1000-2000 http requests every minute to check for new notifications, so I would not approach this problem using "short" polling, period
Meh
Ah makes sense. Thanks for the reply
don't forget arrogant replies from Fowler on github issue list.
I think you've forgotten what is a real spam. This information is useful and will allow free find bugs in your code.
Why make it so complicated to purchase? I understand vendors often requesting initial contact when there's a deal of customization or variance in product/service, but this seems like a straight forward pricing table would do just fine. I can't consider this for my team if I've no idea whether we can justify the price. I'm sure it's a fantastic bit of kit, but I can't ask my manager for time to spike an investigation into this software because I know their first question is going to be "How much is it?". Just a thought is all.
PVS-Studio is a B2B product, and it is a standard practice for such products that we do not publish prices on our website. Individual developers can use the PVS-Studio analyzer for free.
That's quite interesting! I take it that the concurrency makes ordering non-deterministic? 
Tiobe is a complete joke, just ignore it. 
I think that your opinion is unjust. I talk about how to use the PVS-Studio analyzer for free, and you call it a spam. If you want to tussle with evil, then fight YouTube which aggressive shows ads in every clip. :)
Thanks, and why is it better? 
Well, thanks then, I guess. Perhaps you could add a // This is not another PVS-Studio spam. // Dear redditor, please check it. header to your non-spam posts in order to separate them from real spam.
From 0.5% to 3% over the course of 6 years. It's not that big a deal.
There are tons of corporate devs out there still writing their Web Forms and other LOB apps in VB because that what they know and have been using for a decade or more. They've always been there but maybe they were overlooked before.
Actually it is deterministic (ordered) because of the lock that occurs on the enumerator. The lock occurs on enumeration and is added to the queue in order. 
But the article explicate says they will not publish the package, they generate it, but does not publish it. And thereafter they copy it to the other projects. &gt;And voila, you got your project packed up. Don't worry about metadata, you won't publish this on NuGet anyway. Now take the generated YourLibrary.1.0.0.nupkg and copy it. We'll paste it in the second step. ... &gt; Paste the copied library into a folder near the package consumer. For example, if you have a git repo called MyCoolApp, create a folder inside and name it NuGet and paste it there. Which means not using the automatic versioning and update handling NuGet provides. Am I missing something?
Sorry I only scanned the article and you are right. Copying the packages by hand don't make any sense to me. You don't even need a Nuget server to serve packages. A shared folder will do so there's no excuse to at least do it as it's meant to with update/rollback support and all. 
&gt;We don't know how we can build a successful business in the sphere of static analysis by selling individual licenses. This is why we still see PVS-Studio as a B2B solution. Do you think you are going to be able to charge more per seat with an enterprise license than with individual licenses? 
VB6 isn't supported any more and there's a ton of places that are now "migrating" to VB.NET because they think it's a direct/incremental upgrade and not a completely different paradigm.
And there never was a true Scotsman.
Use a label control, they render as spans on client side http://www.mikesdotnetting.com/article/64/bind-data-from-a-sqldatasource-to-a-label
Then mix it up a bit and be transparent with your pricing. I get that you can offer variable pricing based on what you know/assume the companies you are working with can afford. However, plenty of other companies are transparent with their prices and offer various tiers of service with different price points, all up front and visible for people to see. Hidden pricing is archaic.
I've never heard of it, so I have no context. What's yours?
For one, it doesn't reflect usage (as implied by the submission's title) but nebulous "popularity": &gt;[Basically the calculation comes down to counting hits for the search query `+"&lt;language&gt; programming"`]( http://www.tiobe.com/tiobe-index/programming-languages-definition/) It's a useless, inconsistent metric with completely nonsensical results. It is solely based on the writing habits of people online, filtered through the lens of search engines and SEO. If you look at their historic data, you'll see massive fluctuations caused by things like Google changing their algorithm. Bash is apparently less "popular" than Q and only slightly more popular than some IBM mainframe language. Sure.
good reply. thanks
Right! I can't stand when I see a "contact sales" button for products like this. I almost always skip over them to the next alternative.
Put a label on a blank web form and run it in the browser, view the page source in the browser and you'll see all the label control really is, is a client side span tag
The documentation has been the biggest source of my frustration. I think they're pretty set on the project format by now, though. I'm waiting for VS 2017 to reach RTM before I dive in.
For your web form code you will want to have some sort of a repeater like this: &lt;asp:Repeater id="rpt" runat="server"&gt; &lt;ItemTemplate&gt; &lt;asp:Label id="lbl" Text='&lt;%# Eval("data_field") %&gt;' runat="server" /&gt; &lt;/ItemTemplate&gt; &lt;/asp:Repeater&gt; The &lt;ItemTemplate&gt; will repeat for every row of data you throw at it and will have text equal to whatever field you specify in "data_field". You will then need a datasource to bind to the repeater, this could be a DataTable, a SqlCommand.ExecuteReader() or whatever. Dim ds as new DataSource(); //Fill Data Source Here rpt.DataSource = ds; rpt.DataBind(); EDIT: Optionally you could simplify this even more with respect to server side controls and the label: &lt;asp:Repeater id="rpt" runat="server"&gt; &lt;ItemTemplate&gt; &lt;span&gt;&lt;%#Eval("data_field")%&gt;&lt;/span&gt; &lt;/ItemTemplate&gt; &lt;/asp:Repeater&gt; This uses more standard HTML which might be a good option if you are passing this to widget
Well, my company have a project that I've been working on for quite some time now. Things are not really so simple right now, but in the beggining I was tasked to do something similiar with your scenario: speed things up when doing CRUDs over and over. So, at the time, I've looked into T4 templates, and after a few hours I got things working together. A Nuget command would generate my views, a Controller (with dependencies injected, actions and so on), View Models for all views, and of course would wrap everything on corresponding folders. The generated views had a simple layout, and the razor code would call @Html.DisplayFor() or @Html.EditorFor() on all the relevant properties my entities had. Of course I had previously set up my Editors / Displays for the most used Types, so I got a js datepicker for a DateTime, a masked input for decimals, and so on, everything worked just out of the box. For my backend, I've used a lot of generics, so the services injected on my generated Controller were just some IService&lt;T&gt;, with all CRUD operations already exposed. I got most of my insight on T4 templating from [Steve Sanderson's T4 Series](http://blog.stevensanderson.com/2011/04/06/mvcscaffolding-overriding-the-t4-templates/), but this technology It's probably outdated. If I had to do something similar today, I'd look for [Yeoman Generators](http://yeoman.io/) and try to customize them for my needs.
Have you ever played with [Ix](https://github.com/Reactive-Extensions/Rx.NET/tree/v3.1.0/Ix.NET/Source/System.Interactive) (the `IEnumerable` counterpart to `IObservable`)? They seem to have a lot of operators that are useful for this sort of thing.
Architecturally, JavaScript and java give you a good base to learn C#. C# is OOP, but has some FP aspects to it, lambdas, closures, the TPL, Linq, etc. UWP and XAML are probably the area you will struggle the most, but it's a lot cleaner than Android.
Copy the Java code into a c# code file. Change any 'using' to 'imports' and compile. This works on a LOT of code files. I was a professional .Net developer before I went to school for development. A lot of assignments were Java, and I did the copy/paste/compile to go from c# to Java. 80% of the time it worked every time. 
This doesn't work on almost any non-trivial code file.
True. In a well architected solution most code files are trivial. Edit: I am not a Java expert, but I am know c# very well. I have been writing it for over 10 years. Knowing c# made Java easy to code with in school. It worked the same, and I was not lying when I said I used the copy/paste/compile on almost every assignment all the way through to my Masters degree. OP, if you know Java, and you want to learn c#, you have a super simple job in front of you. My advice would be to learn Visual Studio. Mastering the IDE will be more of a hurdle than the coding.
C# in .NET uses OOP concepts. If you have developed in any Java IDE, .NET (Visual Studio) IDE is probably five times easier to pick up. It configures your environment almost completely for you with minimal setup. C# Syntax is almost identical to JAVA core syntax. However, Difficulty level is relative to your OOP experience. Good luck!
This is pretty old (relatively) by now, not sure why it's being posted.
It will only work with IQueryable as if it was an IEnumerable. 
The Android framework is very different from traditional desktop frameworks, so I don't see any chance that this can work. Traditional desktop applications use a window metaphor and are relatively tightly coupled, whereas Android uses screens (called Activities) and are relatively loosely coupled. The UI and system APIs are unlike everything else I saw, so at least the UI has to be completely rewritten.
You are assuming that NuGet packages need updates regularly and that the submodule is available in the first place. The problem I faced is when I needed library A in my project B without using submodules and without publishing to a NuGet feed and without a common visible place. In fact, I wanted to assure that project B never has to even think about some place it needs to search for the assembly A, it needs to carry it with it. Just as you would do with regular assemblies. So why go through the trouble of building NuGet package when just copying assemblies would suffice? Because assembly A might depend on some other assemblies via NuGet and if you don't explicitly add those to project B, your code will fail at runtime. NuGet packages dll but also writes down all other NuGet dependencies so the assembly A is self sufficient.
Shared folders might be an overkill and once you have such place(s) you kinda have to guarantee it is always there, it cannot be temporary. My solution is simply an upgrade to the 2000s way of copying external dependencies in a folder named `lib` or `deps` and committing that folder to source control.
So, off the phone and with a real keyboard, I can expand a bit. First, Android Java is quite unlike "standard Java" by not using the usual ``public static void main(String[] args)`` entry point into app like on other platforms. It is instead probably hidden in the runtime, but as an app programmer you don't see it. Instead, all activities (a.k.a. screens) are declared in the manifest along with the events (called intents) that start them. The most feasible way I can see would be to have a portable Java library not dependent on either runtime environment (or only the shared things, which also means you can't use Java 8 nio) and two different UIs for desktop use. This wouldn't be a native windows app but probably using stuff like [Swing](https://docs.oracle.com/javase/tutorial/uiswing/), [Java FX](http://docs.oracle.com/javase/8/javase-clienttechnologies.htm) or [SWT](https://www.eclipse.org/swt/). The Eclipse IDE is based on SWT, Netbeans on Swing, for example. An alternative would be the above approach using [Xamarin](https://www.xamarin.com/platform) on Android and having a native UI on Windows. I dislike web technologies for desktop/mobile app use and really don't know much about it, but it would probably be the only way to have a single codebase for all platforms. **edit:** Source: I'm an Android developer during daytimes.
Java and C# are more different than you think (although I think C# is probably the nicer language). School projects are seldom comparable to real project, so I don't think your argument is valid. In real projects, the system has to interact with its environment and there, much changes. The general syntax of abstract algorithms may be quite similar, but I can't see how this should hold up as soon as one expects some real use out of the programs. Especially, as I commented somewhere else, the Android environment is quite different from general Java, which makes your suggestion appear even more bogus to me.
SPAs work when you don't need a lot of server interaction, or when you have a consumer focused application / site. They are also great for Cordova apps when no server exists.
&gt; This allows you to support more clients with less servers, and utilize less outgoing bandwidth compared to full page renders. With out a doubt. It keeps your instances as sleepy as possible when all they are running is JSON requests 99% of the time. With cloud continuing to eat the world, keeping unnecessary UI processing off the server side is the way to go. If its a bought and paid for server that is on site, then yea, go crazy. &gt; The upside of SPA is that there it little downside other than reliance on javascript and the usual litany of browser issues. Many of the newer frameworks are quite easy to use. I'm rewriting an website in React right now, and it has been about as easy to use as ASP MVC. I know since 2010 (when I first starting diving into the SPA world) until somewhat recent, things had been moving at a ridiculous pace in terms of new frameworks coming out almost every week or popular ones completely rewriting themselves and losing developer confidence. However, the dust has somewhat settled and some leaders have emerged that people can commit to; React definitely being one of those. I also find that once you learn one, picking up others is a breeze because they all basically do the same thing and just try to achieve it with their own quirks to make things more efficient (even if sometimes it isn't :) ). 
&gt; or when you have a consumer focused application/site. Ahh, the dichotomy of consumer facing vs. line of business apps. Beautiful thing.
I think SPAs have their place, but with tools like React and Vue gaining so much popularity, you realize that for most projects you can still have most, if not all, that rich client experience while still working within a multi-page paradigm. The things I don't like about SPAs are: * Duplication of work. You need to define routing twice. You need to manage authorization for endpoints twice (if your route hierarchy is asymmetric, some frontend endpoints might not have a corresponding API call so no opportunity to handle a 403 client side). * More complex session management. Most people will advocate the use of JWTs and localStorage, but when you try to emulate the same experience you get with multi page apps and sessions stored via cookies, I've found most client side frameworks' solutions don't work well in the real world. * You need to set up refresh tokens. You will probably do most of that work by hand: 1) You will introduce bugs. 2) Concurrent token refreshes from the same client (multiple tabs) need to be handled appropriately. 2) If a token refresh fails due to network issues, you need to handle that. * User credential updates require a new login * Disabling users means they still have access to your app for the remainder of their current access token's lifetime * If you choose to store sessions via cookies, then you might think you don't need to worry about refresh tokens since they could be updated on every API call. Again, if you have asymmetric route hierarchies, your user might be navigating client side routes that don't require an API call. Sooner or later their session expires. * Providing initial state (current user, app settings, etc) to your javascript app requires an initial API call that introduces latency. This can be handled with server side rendering (which also as other benefits) that introduces more complexity. These are just off the top of my head. To me, the only practical benefit to SPAs is really just routing. For frontend applications where you need complex routing behavior (presenting a deep route hierarchy simultaneously, for example) handled in a sane way, it's ~~totally~~ **maybe** worth it.
All valid points. I was going to dive into the state management since the post had already gotten pretty lengthy. If you are working within just MVC/WebAPI, you can rely on their organic session/user state management. I've had to do applications where their application and service tiers are on completely seperate environments and state/token management isn't as simple. I wouldn't advise a beginner/novice to take on that kind of effort. &gt; To me, the only practical benefit to SPAs is really just routing. I wouldn't entirely agree with that. If you had to compare solutions that had to multiple areas of a page requiring inline editing, being able to launch CRUD modals/sections from anywhere, async notifications, WebSocket updates, etc. (Trello probably being the best example) I'd argue that the SPA approach would have a much more maintainable code base then trying to implement a fraction of that with a traditional MVC approach. That isn't just achieved with better routing options. Granted, I'm sure a team or architect that doesn't know what their doing could mess up the other way just as easy. 
IntelliSense can be tricky. For me, the parameter info only shows up when I'm actively filling in the parameters. If I were to come back and hit the shortcut key to show the info, I'd only get your screenshot. Here's something you can try playing around with. On the toolbar with the bookmark buttons, there's two buttons that I think are hidden by default: Display Parameter Info, and Display Quick Info.
I've tried filling in the parameters, but same thing happens. It just shows ? sign same as on the first picture. I've also tried both buttons you mentioned, but they just switch between those info dialogs I already get by default.
&gt; What do you mean by this? I don't have much experience with MVC, but in this context I believe WebAPI is the same. It doesn't natively provide any session management. You have to set up the middleware yourself while using Identity Framework. Token management is pretty bare-bones. The developer has to do the legwork. We might be talking about two different topics since "session management" is a pretty broad term so I apologize for the confusion. .NET (regardless of using Forms or Windows Auth) is already tracking the users identity with what is essentially a cookie. When requests come through server side, you know who the source/user is since IIS is already managing that. In this case I won't even bother tracking who is submitting client side, say an update to FooObject, since you can just access that server side and it isn't vulnerable to being intercepted and modified. There can be a lot more that goes into session management if we are talking caching in localStorage and things of that nature. This option of course goes away if you have your API and Application tiers separate. &gt; And that's fine, but having to do so much work just for session management doesn't seem right. You still have to work on the actual app! This. So much this. Why can't users just be honest and make our lives not revolve around security. I just want to build cool stuff. 
&gt; .NET (regardless of using Forms or Windows Auth) is already tracking the users identity with what is essentially a cookie We're talking about the same thing. When I developed an SPA using WebAPI and EmberJS I actually disabled the cookie middleware and just used JWT and localStorage following general recommendations found on the Web when building SPAs. The genesis of my pain. &gt; This. So much this. Why can't users just be honest and make our lives not revolve around security. I just want to build cool stuff. Lol. 
BTW, I found [this blog post](http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-for-sessions/) regarding using JWTs and localStorage for session management really insightful recently.
[removed]
Are we talking about webforms, MVC or some other framework?
MVC using asp.net core 
It depends, but assuming you work with all parts and not just business logic, maybe a year to feel very comfortable seeing up a service from scratch with all the bells and whistles. 
With no prior web dev experience, 6 months.
Week or two for MVC/EF with a solid background in C#.
6 months and still not comfortable with it just because of the large churn on project format.
I got a webforms job before I had ever written a line of c#. A few years later mvc came and I was already comfortable. So something negative? 
[removed]
DI, Testing, and Linq is what people seem to ask about a lot. 
Brush up on design patterns. Learn ASP.NET MVC, ASP.NET Web API, ASP.NET Core MVC, or ASP.NET Core Web Api Pick up a Javascript framework.
As someone in a similar position, I am focusing on asp.net core. I think the future of programming for us will be creating browser apps, that run for industry. No more winforms, no more exe's all server based. To met that they need back end C# ASP.net developers. There is a new video series on it on Pluralsight, by Mosh? I think, thats really good and gives a good overview of it. 
Are refresh tokens really necessary? I found myself avoiding them just to avoid complexity (complexity = bad security). Besides giving an attacker less time to perform their malicious activities (which, IMO, if they stole a token once they can do so twice &amp; thrice), are there any other downsides to not using refresh tokens altogether? Asking out of curiosity!
Honestly, I'd get some experience with the non-webforms end of .NET web development. The contracts and jobs that pay better and offer the best opportunities are more on the MVC/WebAPI end as far as .NET is concerned. The teams I help hire are really looking for experience in apps that look like this: Entity Framework or NHibernate for data access, with experience in writing LINQ queries. Dependency Injection/Inversion of Control using .NET services to get a testable middle tier. WebAPI, Nancy or MVC controllers using that underlying .NET business layer. A rich UI framework like AngularJS, ReactJS or KnockoutJS running the client end of things. I do only contract work and that overall template keeps coming up, over and over again in the gigs I see. The more of that stack you can be good at, the better off you'll be when it comes to finding a good job.
There are three basic routes you can take: 1. Front-end, where you focus more on JavaScript, CSS, Angular, etc. and only learn enough C# to do minor patches and call the database through Entity Framework. 2. Back-end, where you learn everything about C#, at least one relational database (SQL Server or PostgreSQL) and one NoSQL database (Hadoop for real work, MongoDB for resume padding). 3. Full-stack. That probably means ASP.NET MVC, as Angular is probably too much to learn on top of everything else. Heavier focus on Entity Framework than learning SQL and what it can really do. Back-end pays really well, but there are fewer job openings. (One back-end developer can easily support 4 UI developers.) Front-end is a right pain in the ass because the framework of choice changes every year or so, but you'll always be able to find a job. 
You can also consider the possibility of using Xamarin, which allows you to create Android, iOS and Windows apps with shared C# code.
They get 60 days before having to login again. I'm using passwordless login so it should be easier.
Thank you for a very thorough answer. I think I will do the same as you and start with ASP.net and just do all the tutorials I come across. 
Thanks. Definitely giving this a look.
The dicks at stack overflow eh. Can you like your question? I'm interested.
Because I've never seen a question on SO be answer only by dicks, so I'm curious why you made that the opening to your post ;)
Well, back in the days when I was a complete newbie I posted some off topic questions on SO, today, when I have some knowledge of programming ALL of my current questions are valid and on topic but today I was banned after asking a new question (on topic, even got one upvote). After asking on meta how I can get it lifted it was marked as a duplicate, some dicks downvoted all of my posts and I am just tired of this community.
There's a reason why I post it in two different forums, when I do the loop in page_load it throws an error "Object reference not set to an instance of an object" and I need it in page_load, else I cannot register a linkbutton click event.
It throws an error: Object reference not set to an instance of an object
Sharing your code would give us all a better idea of where the problem is
https://hastebin.com/eqiruyaqom.cs &amp;nbsp; https://hastebin.com/vesifofeja.cpp &amp;nbsp; https://hastebin.com/lufasewoxe.cs &amp;nbsp; There you go :). The DeleteUser method does not execute when I click something. The code is used to look up users in the database and being able to delete them (By the way I no longer get that error for some reason, but instead the DeleteUser method won't execute)
So most likely it's one of two things. Either your control isn't being registered correctly, a la http://stackoverflow.com/a/21383994 or you're not filtering/casting your controls correctly or not looking through their hierarchy. Try something like this: private IEnumerable&lt;Control&gt; GetFlattenedControls() { foreach(var control in Page.Controls) { yield return control; foreach(var child in GetFlattenedChildren(control)) yield return child; } } private IEnumerable&lt;Control&gt; GetFlattenedChildren(Control parent) { foreach(var child in parent.Controls) { yield return child; foreach(var control in GetFlattenedChildren(child)) yield return control; } } private void Page_Load(object sender, EventArgs e) { var buttons = GetFlattenedControls() .OfType&lt;LinkButton&gt;(); foreach(var button in buttons) { button.OnClick += whatever; } }
I've not yet familiarized myself with Core, why did the initial reply list them separately? Why did you point out that there is no difference?
So got the url?
Start with this. End when you grasp the very state of the universe!
Thank you for your help but the button still doesn't execute the DeleteUser method.
If your linkbutton is not being created by the code-behind, try setting the click event on the markup instead of Page_Load. &lt;... stuff... Click="DeleteUser"/&gt; 
It is being created from code-behind, I am basically creating a bunch of dynamic buttons from code behind with a loop. How can I make it work then?
At this point I'm not sure. Try setting the click event when you create the control instead of in page_load? Beyond that start setting breakpoints in the code and inspecting variables to see what's happening
Thanks but I tried that too. I tried breakpoints as well but the method is not even called. I tried creating a pre-defined linkbutton from the behind-code in page load and it works so maybe you can only register events from page load? maybe its not working for me because if I loop through the controls on page load (before the page controls were loaded) it basically will loop through nothing? And if so, how do I fix it? I am really not sure.
Have a read about the page life cycle in ASP.NET: https://msdn.microsoft.com/en-us/library/ms178472.aspx When you do a postback, the state information that gets included in the post gets restored at the end of the Init phase. This includes information about which control had triggered the postback event. If you are dynamically creating controls and you want to handle an event like a click, the controls must be created before Load occurs, or ASP.NET won't correctly trigger the event handler. So in short: try creating your controls inside a Page_Init handler and not a Page_Load handler.
It's basically historical. Web API was originally a completely separate HTTP pipeline that tried to avoid the (comparative) bloat of ASP.NET MVC. They couldn't make MVC lightweight, so they made Web API. ASP.NET Core is written to avoid that bloat in the first place, so both "MVC" and "Web API" features are basically just subtle variations on the same core services. It's a legacy of Microsoft's marketing, they still advertise them as different approaches, but they're no longer different frameworks.
This guy has it right. Also keep in mind you don't need to be a pro at all of these levels - eventually you will be as you go full stack but just start experimenting and grasp it. If you've been webforms for a while, MVC might take a bit to grasp but when it does - the light bulb goes on and you're in a better world.
Thanks. I have tried to loop through my controls (in order to find the previously dynamically created controls) and it still comes up with nothing.
I've responded to a few of these comments but also want to say - it really depends what type of industry you are going to go into. If you're doing corporate development (finance, law, etc) you can skip the front end frameworks as long as your javascript/jquery is solid. If you're going consumer facing, you'll need to be aware of those frameworks..although I generally still stick with javascript/jquery
Videos aren't the best fit for everyone, do you learn better from books or articles instead?
Oh lord, this kid has tried everything, you should probably call a priest or something. I'm just mocking you a little bit. To be honest I saw the title of this post and I downvoted it immediately, but then I was curious about what problem you we're having. After reading this post and all its comments, I feel that you're dismissing every single thing that is being said. I just found it funny, I hope you figure it out. 
But, why does it throw a null reference exception? What object is null? Imo you should not dismiss something because of a single exception, keep digging 
Just completed Mosh's C# Fundamentals yesterday. Doing his intermediate today. He's pretty good but it wasn't as engaging as other courses I've had but maybe that's because it's all so business software centric.
I found the ASP.NET Core courses on Codeschool to be super beginner-friendly. I could've forgone their kinda silly tone, but they're short, learn some real basics from them, and then go back to more advanced courses elsewhere.
You could always go to http://ASP.net they have some pretty good articles and videos. I also have frequented Microsoft's code academy with mixed success. Also, you could find some good information and stack exchange as well. The problem I've discovered for our beginner developers is there is so much to learn for a web application: C#, MVC, Identity, Entity framework, JavaScript, CSS, HTML. It can make for a messy architecture starting out. Keep in mind as you learn and get better you will go back and look at code from your past and think, what the hell was I doing. Best of luck!
Yeah, and then I think they have an intermediate course behind the paywall, but I happened to catch it on a Codeschool free weekend.
I came across his ASP.NET course, seems like I have to check it out. I didn't know he wrote C# course as well. DO you have experience with them?
I have only done his Clean Code C# course, I've also done his ASP.Net course on Udemy as well as his Full-Stack .Net courses on Pluralsight and they've all been excellent in my opinion.
My personal recommendation is learn MVC first then Core. Like other have told you. Core is pretty new and resources are limited compared to MVC. I own a small development shop and we are waiting to switch to core until it is a little more common. ASP.net MVC is solid and you can't go wrong with it. Your going to find it hard to find a consistent answer on the core vs. MVC argument, we all have our personal preferences. 
More people suggesting me MVC than Core, so I guess I will switch to MVC 5 tutorials and courses. Thanks once again!
I've been using MVA (https://mva.microsoft.com) and quite enjoy it. There is a surprising amount of content there for free.
Wow, never knew that being a .net developer was a free ticket to sex dating land. Thanks /u/Williamcelmo!
The apps were originally in .NET and I ported them to core so using .NET code is fine. The main logic is just pulling json data and then organising it into entity framework. I don't know C++, I only have experience of C# . I guess I must go with a mono GUI then. Thank you for the advice.
No use https://github.com/AvaloniaUI/Avalonia It uses XAML so its very similar to WPF, don't try gluing Qt or WinForms onto it, because that will be messy. Avalonia supports many OS's including running on .NET Core. The other guy was just spreading FUD, of course you can make a GUI. A GUI is just a library or framework.
Their github says it is in alpha. Is it suitable for an end user release?
Exactly, I mean .NET core itself is the most pre-alpha type software I've used.
I'd rather use ETO. But yes, Mono is required.
I think this will take a few practice runs before it feels natural.
This requires Mono and it seems to use Gtk#.
I would probably say no for a few reasons: 1. EF doesn't call class constructors with parameters, I believe it uses something like `Activator.CreateInstance(&lt;type&gt;)` 2. EF wouldn't know what order to place constructor parameters. You could have `new &lt;...&gt;(firstName, lastName)`, or `new &lt;...&gt;(lastName, firstName)` 3. Because of the two above issues, `get`-only properites would cause EF to throw an exception when trying to populate them. So, if they can figure out how to map the constructors, then there should be no reason why EF couldn't use them. I feel like other people would consider them to be anti-patterns, though.
That's part of the reason I created Chain. It will read the constructor definition and create a matching SQL query. So now you can build those immutable objects everyone keeps talking about without using a mapper.
I would recommend MVC 5 as well, [this book](http://www.apress.com/us/book/9781430265290) is a good start.
Instinct is the former. Once the event of adding it, paid or not yet, happens you would want to keep track of it. From there, manage the state of the add. "Pending" or "Completed" or "Failed" seem to be obvious ones. If the payment fails, I imagine you would want to log that too. It really depends on how you have your workflow in your app, but this would be my first impression.
&gt; get-only properites would cause EF to throw an exception when trying to populate them. The properties of `ValueTuple&lt;&gt;` are public fields, so they're mutable. https://github.com/dotnet/corefx/blob/master/src/System.ValueTuple/src/System/ValueTuple/ValueTuple.cs#L625
I've been building a production API in Core since early July, it's been just fine. Some things are a little difficult because there isn't a wealth of info like for the full framework, but I've had only one issue and it was addressed on GitHub the same day I reported it.
still maintain curly brackets would look more natural, but then maybe i've been tainted by js.
Which version are you using? It's been the default for some years now.
2015 version of express for web
That's weird. Apparently, you aren't alone. Try this: http://stackoverflow.com/questions/32613505/missing-mvc-template-in-visual-studio-2015
It's just different frameworks, so you'll use the same libraries, including whichever database driver you prefer. Web forms mimics desktop development and is focused around components with it's own lifespan. A form, for instance, would be composed of a series of input components and button. Instead of talking about "posting the form", you'll attach an event-handler to the click event of the button. MVC is much more closely aligned with the flow of web requests. You have a sharp separation between what occurs on the server and what is rendered to the client: A controller (pure C# class) handles incoming requests and data processing, while razor views does the rendering. There's no component lifecycle and you are responsible for posting to the server using forms. MVC is the only one actively developed, and (being a bit subjective here) you'll generally have a much better time with it than web forms.
- ASP.NET 5 and MVC 5 are basically the same thing (technically MVC is a subset, but it's all part of Asp.Net) - Asp.Net/MVC 6 was renamed Asp.Net Core (ironically to avoid confusion) - Scot Hanselman has a great summary of what all these thing mean [here](http://www.hanselman.com/blog/WhatNETDevelopersOughtToKnowToStartIn2017.aspx) - Here's some opinion on [what to learn right now](https://www.reddit.com/r/dotnet/comments/5nf3j6/what_version_should_new_developers_learn_aspnet/) Unfortunately it is a bit confusing at the moment. .Net Core still needs work but it's moving quickly and I think later on this year it will really start to take off.
.NET core is missing a few features like SignalR support for example (you can still use it, but you're all on your own for finding out what to do though). I think SignalR support is slated for .NET Core 1.0.2 though. Anyway: I recommend starting with ASP.NET MVC 5 or even just building a simple console application that accepts input values and outputs an object. That's a very common interview task as well. Learning with ASP.NET MVC and all the front end frameworks that are available..it can be overwhelming at times imo. Baby steps :)
You have layout pages in MVC, which is the same as master pages. You have a startup.cs, which is the same as global.asax. I don't think you gain anything be choosing web forms, but you definitely lose something, as it is abandoned by Microsoft and no longer developed.
Try [electron](http://electron.atom.io/). Not sure if applicable, but if you expose your console apps with their own api you can call that api with the js app in electron.
&gt; ASP.NET 5 and MVC 5 are basically the same thing (technically MVC is a subset, but it's all part of Asp.Net) No, this is not true. ASP.NET 5 was the working name for ASP.NET Core.
Easy to get confused with this mess. It was likely named **5** because the team initially thought this would be the next .NET version - instead of *just* a new flavor like it's now.
ASP.NET Core no longer automatically bundles Identity, or creation of tokens. They are trying to slim it down so you choose what goes in. [This is what I used for a personal project and it works.](https://stormpath.com/blog/token-authentication-asp-net-core) I chose it because I wanted to see under the hood how this all worked together. Keep in mind this doesn't solve user creation, or even checking to see if a user's password is valid. If you use ASP.NET Core Identity, you get UserManager and SignInManager so you could use those to create users and check to see if their login attempts are correct. [Identity Server 4](https://identityserver4.readthedocs.io/en/release/quickstarts/2_resource_owner_passwords.html) would be one way of solving this in a similar manner to the link above. It's going to provide the same things (and way more!) but in a neatly bundled package. Again, it does not handle creation of users, but it does have examples of how to connect it to ASP.NET Identity. ASOS, from what I gather, is attempting to solve similar problems as IdentityServer4. It will not handle creation of users or validating their passwords. [Filters](https://docs.microsoft.com/en-us/aspnet/core/mvc/controllers/filters) are for executing logic before an action is run in a controller. Authorization filters are run first before any other filter. You would attach these to your controllers themselves, or their actions individually, to keep boilerplate logic out of the action itself.
This looks good! Being able to make the front end in HTML would be ideal. How do I provide the endpoints?
&gt;I dont think MVC Core is less capable than MVC5. It's not really, unless you're using EF. From what I understand (though I haven't coded with it directly yet, that's this weeks plan), EF Core isn't even close to EF in terms of reliability/functionality.
Dot net core is direct competitor for node is for running on all platforms and using native code?
Good article. Couple of suggestions. if (db.Tomatos.Where(t =&gt; t.Id == id).Count() &gt; 0) // Check if element exists Simplify to.. if (db.Tomatos.Any(t =&gt; t.Id == id)) // Check if element exists As for using JObject everywhere, why not just directly use the Tomato class? The modelbinder should handle deserializing the JSON. An action filter could handle boilerplate for rejecting null models, but that might be too in depth for the article. Ideally you also want to separate DB entities from your controller, but the article is meant for beginners so not a huge deal.
Yeah - don't use NancyFX and just use the built in attribute routing?
This, we are dropping our development for Core, until EF has more capabilities.
I'm not really looking to be a professional .net developer, just trying to find a BE language (That's not node) to use for passion projects. I am a FE developer by day so I'm used to being overwhelmed :P Thanks for the response!
The way the form is submitting looks off. Try taking away every type="submit" from all your input tags, and then change your save &lt;input&gt; to a button. 
of course that works too. I'm just just showing how simple is to have automatic content negotiation and zero configuration dependency injection with NancyFX.
Yeah, I was just answering the question: &gt; Can writing a WebApi get any simpler? :)
Well, ef wasn't in the question, and using full fx, you could still use EF6.
How would i do that? 
I'm not sure what you're asking and not knowing your apps makes it difficult to answer, but I think you should expose your apps as libraries and use electron-edge to call those libraries. 
Web forms is supported, it is not dead, and it has not been abandoned. It will remain full framework only. Jeff Fritz is still working on new ideas for Web Forms. If you don't believe me, he's on Twitter @csharpfritz
Empty your mind of all the jargon. Use .NET Core to be future proof, but all of .NET is .NET and the knowledge and experience will be quite transferable. The APIs are all very similar. If a paradigm changes, you can learn that in a heartbeat. There is no bad choice in my opinion. 
Awesome, thanks for the advice! 
Unsupported from MS? I don't think so.
&gt; unsupported from MS. Old and mostly outdated, but MS is still fully supporting it
Sorry, you are right. I'll edit my initial response accordingly.
Your project needs to target the full .NET framework (net451 or whatever version you're after). Then just add EF6 as a dependency to project.json. One thing that does *not* work well are the PowerShell migration scripts. I found this project very helpful in letting me get my command line migrations back: https://github.com/migratordotnet/Migrator.NET EF Core isn't ready for enterprise work, but the rest of the Core stuff has been pretty good.
True. But doesn't that kind of defeat the purpose of using Core, at least for now? Core is still maturing, and while it's "mostly" there, the biggest reason you'd choose it right now aside from "it's the future" is that it's cross-platform. But if you end up targeting full .net framework just to use EF, you're now locked back into a Windows environment.
I get a 404 (mobile)
Thats literally one search away: https://docs.microsoft.com/en-us/aspnet/core/data/entity-framework-6
Asp.net core is better by design regardless of which framework you run it on.
It may be the future, but if you're looking to make a job out of it, then nobody will touch it until it's feature complete and the tooling isn't garbage. Learning older MVC/WebAPI 2 stuff will be more useful right now, and it will make migrating to .NET Core when it's viable easy. It all comes down to choice and what you need it for, though.
It's such a mess :(
Sorry it was an issue with cloudflare but its there now....
&gt; Guess OP removed that blog post nope I didn't. It was an outage on my site :( It is fixed now...
I'm getting a certificate warning in Chrome
yes and no. If you build your libraries against .net standard (portable libraries), you can use them with ASP.NET Core and EF6 running on the .NET 4.6 (the full framework). This will restrict you to Windows until EF7/EFCore reaches feature parity with EF6. When you're comfortable with EF7/EFCore features, you can easily switch over to .NET Core with most of your codebase intact.
Not sure if it's compatible with .NET Core, but I would give Xwt (sponsored by Xamarin) a try: https://github.com/mono/xwt
Yeah I remember reading something from Hanselmann about that, I guess for the time being it works but it would be nice to use msbuild so that the transition from framework to core is a smoother one
Sure - add the file to your app's project and set its `Build Action` to `Content` and it will be packaged along with your app. You then will be able to access it through `Package.InstalledLocation` - however bear in mind that it will be read-only.
If you use Core 1.0.1, the tooling is pretty stable and is being used in production in many companies. But I do agree, my main reason for using Core was to deploy to Linux &amp; for performance but if you don't care about those for now then it's okay to wait. 
Why not just drop EF for an ORM that doesn't suck? No matter how many capabilities they paste on top of it, at the end of the day EF's basic design is still a very poor fit for how databases are meant to be used.
Thanks, worked like a charm.
I have not personally used it, but I've been recommended [RabbitMQ](https://www.rabbitmq.com/tutorials/tutorial-one-dotnet.html)
I couldn't find a single ORM that has stored procedure support.
ZeroMQ
If you are using a deployment pipeline like TFS, it is fairly easy to tokenize the config files and inject the secrets into the app config or environment on deployment. TFS variables can be stored encrypted. I'm doing this on a single person project because I really don't need the credentials for the prod instance in source control and I don't have to worry about them getting leaked if I make a mistake later on.
Like [Jadian](https://www.reddit.com/r/dotnet/comments/5oflxl/is_there_a_reason_to_not_check_in_secretsconfig/dcj0fj3/) points out, you're leaving a bomb in the code. Maybe it will never go off, but it will always be there, waiting. Because you're learning new things, this seem like a distraction you don't want to side track you. But I'd suggest just figuring out a solution right now. Then you can do this project right, and it won't be a pitfall in your next one either. 
Give me a break, I looked everywhere and a solution can't be found. And stop with that stupid excuse of "we are not here to do your work", in my SO thread I provided them with my code which means that I tried to solve my problem but didn't manage to, if I didn't need help I wouldn't create a question on SO.
What I've found useful is to create a template file. Like secrets.txt.example. check that in but all the values will be your.email@host.com, etc. Enough of a reminder that you or someone else will know what to put in the but has no sensitive info.
just make a config file that contains that data and you dont upload it
+1 to using a CI system with encrypted parameters. TeamCity also supports these and will allow you to back up to its persistent datastore (Git, SVN, etc) so you won't lose them.
Yes.
Nice screenshot!
One scenario to also consider is if you ever have another person work on the project. If you keep the secrets to the production environment, the other person can safely work on your code without access to prod. This is great when working with freelancers.
People have already pointed out the issues with wanting to make the repo public later. Another issue is what happens when your password has to be changed. You can't now go back and check older versions out and run them since the password will now be wrong. Passwords and secrets are part of the configuration and not part of the source.
100%
Lol thanks, I thought I was missing a point somewhere, was really confused on how that was simpler than MVC.
You can put them in source control, just use a different repo and restrict access to it. 
That makes sense. Thanks for your feedback! MS really likes to push how fast Kestrel is, but I agree it's unlikely to matter in most web applications.
I store my secrets in a secret server. Phabricator to be exact. There are lots of similar tools available. I've used Thycotic's secret server in the past. Also, lyft has a tool named Confidant available on github. To me, it's safer and you can still maintain proper access control. One of the most important features of these tools (and others like them) is that they all make a log each time the secret/credential is viewed or modified. At this point, you just have to worry about injecting the secret into your configs somewhere along the line in your CI deployment process.
&gt;can writing a WebApi get any simpler? Yes. &gt;can writing a WebApi with .NET get any simpler? Maybe, but it's pretty close probably.
We are using sql server 2014
I would advise against this strongly. If your source control becomes compromised, it is likely that everything in there will be accessible. It would be better to store them somewhere else that requires separate credentials as mentioned in other responses.
Thank you for your detailed answer. I will definitely look into VueJS. Also, we are not building a SPA. We are looking for a framework that can help us because using only JavaScript + jQuery seems to be a bit unorganized and we find it hard to maintaining big modules that rely heavy on UI. 
A group of properties (variables, basically) and items (such as files to be compiled, library references etc.) respectively.
You should profile the application. It will help you find any bottlenecks in the server side code. [Beginners guide to profiling](https://msdn.microsoft.com/en-us/library/ms182372.aspx). I highly doubt it is caused by using partial views, but without reviewing the code I can't really make any assumptions.
That certainly seems off. Are you sure it isn't calling into code elsewhere?
I disagree. Revision control has nothing to do with access control. &gt; it is likely that everything in there will be accessible. That's a big assumption. If you store it in the same repo, sure. The point of revision control is to track changes. This is not counter to access control and proper security of the system. What if the system goes down and must be restored from backups six months ago, but you changed the encryption key three months ago? How will you decrypt the old data if you don't also have the old key? 
I'm very certain it's not calling elsewhere
I use Angular in both SPA and multi-page applications. It works great in both scenarios. For multi page apps it's also worth looking at Knockout. 
I think it's personal preference. Mine is PostgreSQL 
In seeing all if the job openings for Angular out there, why would you suggest staying away from it?
I'm not against Angular, but it's a full framework where the other ones are libraries. If you want to do a full SPA then Angular comes with a lot of things backed in that you'd need to otherwise assemble yourself using the lighter libraries. But this comes at the cost of complexity and a larger learning curve which wouldn't be worth it in OP's case. Also, you see a lot of job openings for Angular because it comes from Google and that's appealing for enterprises when shopping for layers of a stack. There's the famous saying "Nobody ever got fired for choosing IBM." It's not necessarily the best option but it's appealing to the suits.
I would not recommend angular if it's not an SPA. Angular does alot of bootstrapping and should not be used as a View layer. You will see performance issues. If your going SPA angular can be a fantastic choice (angular 2). 
Vue or React (with MobX). React has a huge ecosystem and community, but you need to make a lot of decisions, which library you use for other stuff than the view layer (e.g. routing, state management, ...). Vue is a framework that includes most of what you need. I probably would give Vue a try. I'd stay away from Angular 2. While promising I think it's still not mature and proven enough. And a lot of marketing is going on, so you really don't know what's the real status.
Yes, you are correct. My bad. I failed to realise that the MCSA course actually includes the 480 and 486 courses(which are my primary interest, especially 486 - Developing ASP.NET MVC Web Applications, since I focus on building MVC apps in my work). Thank you and sorry for not researching enough 
Postgres aside from feature reason , it would be support since npgsql is written in 100% c# and works on entity framework core
Most times it's not even mentioned. Like in this article, totally ignored and assumed we all know it
&gt; No reason. It does make examples confusing, though. And things being confusing is a theme common in .NET Core, unfortunately :(
I am on a large project (~120 devs) and we have been using Core for 2 years now. Can confirm, the tooling situation has been frustrating. That said, the Core libraries have been stable for well over a year. I would highly recommend moving greenfield development to Core.
Is there a way to share the build variables across different repositories (Can't even copy a build from one repo to another without a custom tool :P) If I ever get the time, I will change to a more comprehensive release process (maybe using Octopus), for now, I just automate what people were already doing by hand. 
Yeah, this. React with MobX is great. We recently moved from Knockout to this combo in Typescript, couldn't be happier. I found Angular 2 (and 1) to just be over the top. You have to do things the angular way or nothing. 
.NET Core support won't be available until all dependencies are ready to run there. The most notable ones are GTK# and Skia#. We need either of these to run on non-windows platforms.
You can clone builds by clicking the ellipsis next to the build definition in the build definition list. It's the page with "All Definitions" and the status of each build. Not sure about sharing across all builds, if you want to go crazy you could use something like azure key management or vault to store the secrets and register your build or release pipeline as an application. Otherwise you'll need to clone and modify variables in each definition.
I can copy/clone my builds within the same repo. This is fine for the different flavors of builds. Its sharing across repositories that is problematic. As far as I know, you still need a custom tool to get a build from ABC to BBB. The tool exports the xml and then imports it into the other repo. https://something.visualstudio.com/Something.SiteAAA/_build/explorer https://something.visualstudio.com/Something.SiteBBB/_build/explorer If we only had 2 repos, it wouldn't be much of a consideration, but we have about a dozen so when I have an idea, I have to copy it to a lot of places :) 
Terraria? I installed it more than a year ago after having played Starbound. Seemed like a huge step backwards.
Thanks for the feedback tweq. This was primarily done as the result of a great deal of feedback that I've received. This feature was an attempt to resolve some of the CDN-related issues (that Visual Studio still doesn't handle) as well as scenarios like single files (i.e. File &gt; New HTML File), as well as problems related to bundled references, among other things. I'm still in the process of working out some of these features and determining the best way to handle them to strike a medium. The current course is to take advantage of some of the [newer 2017 Intellisense Filters](https://blogs.msdn.microsoft.com/visualstudio/2016/11/28/productivity-in-visual-studio-2017-rc/), which would essentially allow a user to pick and choose which supported libraries they wanted to include. Obviously a menu option to toggle the supported libraries would be useful as well. I've [created an issue related to this](https://github.com/rionmonster/Glyphfriend/issues/77) and will look into it. Thanks again.
Oh, team projects. I was confused by the term repo. Yeah, that isn't easy to do in the tooling.
Doh. I should have said "project" :) 
Not a static tool that will walk the target execution tree ahead of running but this tool may give you some of the info you're after... http://www.hanselman.com/blog/MSBuildStructuredLogRecordAndVisualizeYourBuilds.aspx
Well it is several years older then Starbound, and the inspiration for it. I believe one of the creators of Starbound also made Terraria.
[removed]
I recently did mine and was supprise I ended up with 3 certifications instead of 1. MCSA, MCSD: Web Applications &amp; MCSD: App Builder 
You could try MSBuild Explorer http://msbuildexplorer.com/
MSBuild Sidekick will do just that: http://attrice.info/msbuild/
The documentation on memory limits for apps covers you. [Source](https://msdn.microsoft.com/en-us/library/windows/apps/jj681682.aspx).
It's because it was written in .net
The best place I've found using static is inside extension classes. Say you're creating additional string methods, like contains that supports case insensitive or TrimEnd that supports a string instead of char. When I extend BCL types I import them statically and then it "feels like" inheritance even though it's not. 
The only place where I have found it helpful is in writing expression trees. For example: https://gist.github.com/bbarry/d4be83785e57e2088496 using static System.Linq.Expressions.Expression; makes return Block(typeof (void), new[] {x, y}, Assign(x, nx), Assign(y, ny), IfThen( Not( OrElse( AndAlso(Equal(x, nullconstant), Equal(y, nullconstant)), Call(Convert(x, nType), nType.GetMethod("Equals"), y) ) ), Block( Assign(result, efalse), MakeGoto(GotoExpressionKind.Return, end, efalse, typeof (bool)) ) ) ); considerably nicer. (this is just example code, I've got much more thorough code that looks vaguely like this that I cannot show) edit: spelling males-&gt;makes
Many purist would frown on this feature as mgroves points out as it does add confusion. But imagine long enum type names like (and this is an exaggeration) enum MyFavoriteColorsOfAllTime { None, Red, White, Blue } var todaysColor = Blue; //instead of var todaysColor = MyFavoriteColorsOfAllTime.Blue; 
I think React is pretty dope. I've only used it for a small side project but it clearly shined in it's ability to keep code modular and organized. You make many small components and link them together. Data flows through them in a very obvious and simple way. I will use it again for sure. [Couple more thoughts about using it](http://miniml.ist/dotnet/budgeting-app-with-aspnet-core-part-5/).
The only benefits would be for lazy people, not having to type "Foo." Actually, maybe if you #ifdef the using to use different static classes for different builds? This would prevent a bunch of #ifdefs in code, and instead, a single one at the top of the class file.
Wrox books with less than 12 authors, that makes them collectible /s 
While this appears nice on the surface it is akin to `import *` from countless other languages and I have never appreciated that. I, personally, prefer explicit item importing such as (pseudocode): `using System.Console.{WriteLine, Write, ReadLine};` Which would allow you to write code like: `WriteLine("My str"); ReadLine();` etc. I am not suggesting the C# team make this change (in fact they've gone way too far to even consider this, it would not be a welcomed breaking change), but just expressing my preference. Static item importing like this is getting closer and closer to Delphi's `with`, which was a massive headache in my experience.
Also used a lot when writing anything to do with Roslyn. 
Visual Basic has had that since .NET 1.0. I don't know why it took C# 15 years to get it. So when are we going to get `with`? with (builder) { .AddFoo(); .Range = 15; .AddBar(); .Range = 12; .AddCar(); return .Build(); }
Not sure its exactly what you are looking for, but Do Factory has real world examples. http://www.dofactory.com/net/design-patterns
Working Effectively with Legacy Code by Michael Feathers has been incredibly helpful for me in similar situations supporting legacy ASP.NET apps. It's not specific to ASP.NET, but it should be very useful to you in general. Definitely get up to speed with basic ASP.NET and understand page life cycle. It's drastically different than how MVC works.
[removed]
The MediatR library is just an abstracted service locator. I would like to use it, but the fact it is a service locator causes me too much cognitive dissonance. 
I'm on my phone and that has not formatted well. I hope it makes sense though 
ordered it - thanks for the rec
Look into aspnetboilerplate. 
Since you're dealing with 20 different apps -- understand what .NET framework each application is targeting and what is/isn't available for each framework version. For example, strongly typed data binding for WebForms wasn't introduced until .NET 4.5 so won't be available in earlier framework versions. Understand DataBinding to webform server controls. You're probably going to find a lot of it -- DataGrid (Pre .NET 2.0), GridView (2.0), Repeater, etc. https://msdn.microsoft.com/en-us/library/ms228214.aspx?f=255&amp;MSPPError=-2147217396 My first milestone taking over my last webform legacy app was to upgrade to Framework v4.5 and the Roslyn compiler so I could take advantage of strongly typed data binding and C# 6.0 syntax. From there it was adding global error handling and implementing a good logging framework to better identify issues and track down bugs. 
Well, I've seen some commits related to Linux support recently, but the main issue is to build the native lib for every Linux distribution (and building skia without bloating your binary to ~150MB is also kinda tricky). Xamarin also wants changes to NuGet: https://github.com/NuGet/Home/issues/3114 
I've been doing almost exactly the same with FilterDefinitionBuilders all week. using static MongoDB.Driver.Builders&lt;MongoDB.Bson.BsonDocument&gt;; var query = Filter.Or( Filter.And( Filter.Eq("SelectedEntities.Type", "User"), Filter.Eq("SelectedEntities._id", user.Id)), Filter.And( Filter.Eq("SelectedEntities.Type", "Group"), Filter.In("SelectedEntities._id", groups))); 
I work in a similar job where I maintain a lot of legacy webform apps but also build new apps. Main thing to understand is .Net webforms has been around a long time and people follow alot of different practices. You will likely see very procedural code as well as OOP code. Some devs shove literally everything into .ascx user controls. Some devs had no concept of css and will have server controls with TONS of properties for form elements such as width, color, font, border etc. Be prepared to encounter the .Net AJAX Toolkit. Learning a bit about the page lifecycle, viewstate and how to pass values between pages as well as the different events for databinding controls like listviews and gridviews is important and will help you utilize everything the framework has to offer. Some things about webforms can be annoying but there are actually other areas where I prefer webforms to MVC. Also, there is a big difference between .Net 1.1 and 2.0 or greater. Hopefully (most likely) you will only have to deal with the latter.
No more 400 line exceptions.
I reject your code style and substitute my own. Will be nice when this hits closer to where stylecop is in terms of options so we can enforce our stylistic world view on each other in a more standard way.
I've had a lot of success with MediatR. Sounds like maybe you are overusing it though by putting to much business logic in it. I think it works best as a layer between the controllers and business layer. It manages user input so that it can be used against your business logic, basically decoupling the two layers.
A very important thing to keep in mind is that that software potentially implements a lot of undocumented business rules. Be patient and don't stress out, it takes time to get a good understanding of those rules. Keep track of everything you learn and more importantly whom to ask for what. Maintaining legacy software is like being a detective. 
C# already has that var bar = new foo () { Baz = 1, Zip = "fdsa", Qux = false };
Yea, but was that reason because he felt it was a bad idea? Or just because other things were more important?
You need to qualify your opinions! Until then, this is just spam.
That's a good point. You're not totally wrong. However, I like that it changes my code to be in a message passing style. It helps with managing state and allows for some aspects (logging, caching, etc) to be easily managed. I think I'm struggling a bit to not go over board which is why I posted my experience.
Why just between controllers/web and business? My bigger issue was really decoupling my business and data layers. I was already using a CQRS style in my data layer and MediatR dropped in easily and structured the code more. I guess that's my big thing: I want to use it between all layers, not just web/business.
Another spam garbage shit article. He frequently posts this, check his history.
Make sure to set up good test environments that can hopefully closely mimic production. Manual testing will be your friend. 
I have a ubtunu setup script that will install dotnet core on a LAMP/SSH-enabled installation if you are interested. I use it with xen-server to test .Net core. I'll pm it to you if interested. Regarding non .Net core (regular ASP.net) Mono isn't bad, but I'd still recommend Windows. 
Our company is productionising most of our new microservices on core / Linux / docker. Seems stable/solid so far, though compared to working historically in .net, the tooling and support for some common open source libraries is not quite there yet, meaning significantly more time burnt pulling hairs out with incompatibilities. 
Yes, Mono is solid and production-ready. You'll easily be able to use it in the next 5 years. .NET Core is in my opinion not ready. It will likely still take a year to sort out everything and get it to a ready state.
Any chance there's another table named STG_ATTR_FEED under a different schema? Are you running with dbo as your default schema? You can use `SELECT SCHEMA_NAME()` to find out your default schema. I'm not a dba and I've only used schemas for namespacing tables, but perhaps it could also be something to do with permissions?
We use it at work and it definitely helps slim down controllers when dealing with MVC. Since it is a CQRS pattern, it fits nicely with respect to websites if you think of POSTs as commands and GETs as queries. On a side note, I was just like you, when I first discovered MediatR I wanted to use it everywhere, try to resist the urge :P Edit: With regards to logging, I would suggest looking at something like [Ambient Context](https://blogs.msdn.microsoft.com/ploeh/2007/07/23/ambient-context/) since logging is a cross cutting concern before considering CQRS. 
You are correct. A recent MSDN podcast had Rowan Miller (EF program manager) on and he stated that lazy loading hasn't even been implemented yet in EF core 1.1. 
yeah, .net Core 2.0 is set for spring 2017, should be a great addition that makes it usable, because right now it isnt (not even standart sockets..)
Blog spam for an expensive library..
... using a 30 day free trial of a closed source paid DotNetBrowser component that just wraps Chromium If you're interested in this approach, try https://github.com/cefsharp/CefSharp instead. It's free open source software. I've never used it, but I feel like if we just post free alternatives to all of these "Check out this sweet tutorial" that are actually ads, maybe people will stop posting them here. 
This sounds more like an advertisement to me. You can use CefSharp which is free. Rather than manipulating DOM, you can spin up an OWIN web api server and provide a standard JSON API - then your "frontend" could just be a bog standard web app using React and making AJAX calls to your local server... This might be a little slower, but allows your backend to be agnostic. The server component could also be completely split out (moved to a real server, developed in another tech, etc...)
Try to write automated deployment scripts from day one. Make them so that it's a clean install every time. Use them for deployments to test envs. Having production deployments not be a scary is _huge_. Invest in tools like ReSharper (static analysis and automated refactorings) and OzCode (brilliant debugger enhancements). Don't be afraid to refactor code simply for the purpose of understanding it. Be prepared to throw the results away, because the change is too risky to actually deploy. Lean heavily on source control. Keep your commits small and frequent, so you can always easily identify what you did to break things - even before committing, since you can see the diff. Try to reorganize legacy code to minimize the scope of local variables. Also, prefer locals over fields because mutable state is the source of many a bug. Put centralized error logging into place. Tools like ELMAH and Raygun (commercial) are invaluable. Use a profiler. If you can't get dotTrace or something equivalent, use Stackify Prefix. When fixing performance issues, always start by figuring out where the problem is, not just assuming you know. Learn the basics of WinDbg and crash dump analysis. Sometimes you can't reproduce issues locally. Doesn't mean you can't gather enough data to figure it out anyway. Try to slowly move the code to a direction that lends itself to unit testing. When you find a bug, try to write a failing test first. Pick and choose from these tools once you know what you are doing. This is pragmatism, not dogma. :)
Oh good, they finally decided to name it 2.0 instead of 1.2. I thought it was weird before that .NET Core 1.2 was scheduled to use .NET Standard 2.0 despite Standard 2.0 bringing in major changes.
I actually wrote a basic browser using CefSharp. It's definitely the way to go: https://github.com/xcjs/NotificationWebView
Continuing on this idea, it pretty much serves the needs you have. For some jobs, the document stores fit better. I would see them more complementary, and I would never go just with a document store for a complex application. Yes, I also like RavenDB. However, it is not free for closed-source C# development.
exactly my thoughts
What's the difference between .NET Core and the normal .NET on Windows? If I'm just writing .NET applications on Windows is there any benefit from looking into .NET Core?
I've made simple single threaded script which parses one log and compares to another. It runs 9 times smoothly and 1 times failed with cryptic error. That is not "solid". Though, it could be counted as "production-ready", if you may restart failed service fast.
Another reason not to use EF.
any alternatives besides the old sp DAL?
Last time I looked about 3 months ago the two stopping points were -Nunit support... -EF support... There is MSTest to work around NUnit but i dont really see that as... optimal, and EF support is pretty baron the last I looked.
Slap a commit in the middle...its probably the database trying to parallise the inserts 
In terms of automated deployment scripts - I think my team may have something like that already written. I'm not sure exactly how to write a deployment script to be totally honest. I've used a little bit of ReSharper and am sure that there are some tools that the company is already using. I will look up the ones you recommended so I can talk to them about tools day one. Source control is good advice, as is refactoring code solely so I can understand what's going on. And def appreciate the advice about minimizing scope. Thanks a bunch rytmis
This is a really helpful post. Microsoft you're stupid marketing team give poor names to stuff and hurts adoption because no-one knows what they actually are.
I moved the company off Windows to Linux a couple of years ago. We still have a couple of Windows machines but most things run on Linux now including our websites. These currently use Mono and not .NET Core and there were some issues but I was able to overcome them. My biggest problem was lack of documentation when I hit problems - examples returned from google searches were always using Windows with coding done in Visual Studio. As is mentioned elsewhere in the comments .NET Core doesn't quite seem 'ready' which is why I haven't adopted it yet. I just found it to be a moving target. The runtime is certainly stable and 'production ready' so if you release something now it won't crash but the development experience isn't great. That said the 1.0 release was some time ago and they're adding new APIs all the time so I can see myself making the switch soonish. In any case, moving to Linux is a safe bet imho. I don't ever see myself going back to Windows. FWIW I've documented my experiences working on POSIX with .NET on my blog [here](http://coderscoffeehouse.com) which includes a few tutorials I wrote simply so I had something to refer to later on because there is / was so little out there for us .NET folks not on Windows. 
There are, even if you don't explicitly say there are. The commit will force the database to finish writing before the next insert. I know it's none intuitive, but that's how a database works...you try to make a change you automatically get a transaction
I might have seen this before, but I didn't read past the frst few to get to the funny ones. "API Big Boss" "RealPlayer(TM)" 
&lt; 100 lines of code for the UploadModule.cs which is really the main chunk of code...And that has the "POST" method duplicated for 2 possible ways of accepting data! Everything else is really just .NET boilerplate, and might not seem like a "small amount" since I included basically everything lol. :) Thanks for the feedback!
Also: the article completely covers deployment to Azure, which may add some heft. [Lines of Code Screenshot](http://i.imgur.com/0ZWbNGG.png)
I wish they would stop trying to brand the services, and just use descriptive names. Azure is the only brand that matters for marketing purposes.
I only used Delphi briefly in school so I'm not sure if a lot of people shared the opinion that &gt;Delphi's with, which was a massive headache in my experience.
Use xUnit, even Microsoft don't use mstest anymore. All the core code is tested in xUnit. 
Because my business logic is shared among it self using DI/IoC. Its very defined so I can be more dependent on other pieces of BL code. Its usually build more generically as an API. You can use mediator as that unique code that loosely works with multiple parts of your business logic. It the unique logic that connects defined logic with more of a specific purpose. Example: A UsersFavorites mediator request would connect your UsersManager BL and your FavoritesManager BL to build a favorites list for the frontend.
Thanks. As soon as I opened it I was like wtf i seen this before.
Where are you stuck? What have you tried? Your post lacks a lot of information and is essentially just "I tried, I gave up". When using the shared hosting model: - Install .NET Core on the target platform. You can find instructions on the .NET Core website. - Make sure you have the `libunwind8` package installed. This is a required native dependency. - Copy your **published** application to the server. - Run `dotnet run &lt;pathToYourMainAssembly&gt;`. With the standalone model: - Make sure you have the `libunwind8` package installed. This is a required native dependency. - Copy your **published** application to the server. - Change the chmod of the main executable file to make it executable. - Execute it.
No problem! If anybody else has an interest and sees this, pm me and I'll be happy to send you the code with a small bit of instruction. 
Some observations: * The Service Fabric description is misleading. It is not at all like AWS Lambda (perhaps the author was thinking of Azure Functions?). Service Fabric is an evolution of Cloud Services. * The Application Insights description is close, but it's more like New Relic than HoneyBadger. * Azure Functions not mentioned * VM Scale Sets not mentioned
if you're interested in dapper, take a look to the [nreco.data](https://github.com/nreco/data) that was specially designed for .net core. It almost fast as dapper, but provides higher level of abstraction: no raw sql (abstract query structure is used), lightweight alternative to DataTable (RecordSet) for schema-less data access. Also it supports data annotations and can be used in addition to EF Core to overcome its limitations. 
thanks!
Will do
It specifies the name of the parameter that the value is for. https://msdn.microsoft.com/en-us/library/dd264739.aspx
Noob here; what's wrong with JSON?
And it's absolutely useless for methods with 1 or 2 parameters too. What a weird example OP found.
It's from the official Microsoft documentation at http://docs.asp.net ("Introduction to ASP.NET Core") :)
Hmm, not yet though?
If there are a bunch of parameters with default values, you don't have to put in the defaults just to get to the one you want to give a non-default to. 
Sometimes I'll use it for clarity - most notably with boolean parameters: MyMethod(false); vs MyMethod(cacheResult: false);
That really depends. If I have to use an API like `widget.closeConnection(false, true)`, I'd rather have the args spelled out as `widget.closeConnection(reuseLater: false, killOtherConnections: true)`. Even better: `widget.closeConnection(ConnectionReuse.ReuseLater, ConnectionKillMethod.KillAllOther)` with enums.
I'll have a look, but it looks like your tutorial covers alot more than the previous once have done. Thanks!
Nice, I can see how that's handy some times
Cool!
I'll admit I rarely have a need for CLI parsing in my work, but do you perhaps have a few words on why someone should use this over what Microsoft introduced with .Net Core? That's likely to be a developer's first port of call when looking for a CLI parser, so can you sell your library as an alternative. https://www.nuget.org/packages/Microsoft.Extensions.CommandLineUtils/ 
Maybe the method has several optional parameters? This would enhance readabilty, I guess.
named parameters
Your Nginx config is probably wrong.
Had a quick Google but couldn't find anything. Does anyone know what new APIs .NET Core 2 will have that .NET Core does not?
Yeah thanks!
LOL, so true!
I don't think this translation works as good it does for AWS. The names are much more descriptive in Azure. But it might be just me. 
My biggest issue with Mediator pattern is that it can cause overly de-normalized code. So you have many pieces of code that do one small specific thing all over the place. It makes it harder to manage and find what you need. It also means a lot of dependencies when you need to pull multiple parts together. This might cause you to write new code instead of figuring out how to reuse existing code. Its simpler to have all your data managed behind generic interfaces in a repository layer. So any BL that needs access to user data then uses the UsersRepository that contains all queries to user data. The BL then manages/works with that data to provide generic functionality. From there your mediator requests uses that BL in unique ways that are custom to your interface. Its hard to explain in a short summary. If I can build a working example then I will try to share it with you.
I like to use named params for literals and when variable name is not the same: Messagebox.Show(title:"Save Result", message:"Save completed successfully"); rec = recordRepo.Get(recordId: list.First()); value=dict[key: id];
I dont understand. Sorry 
Most reliable option is to host a endpoint on your website to authenticate licenses. You could use some locking logic on the sql end to determine how many users are logged in. Ya know... put a row in a table per session with a timeout. Clients occasionally ensure their record is present. Remove row when user logs out or timeout is reached. Make sure to hash user ID and machine I'd in row.
To make sure I understand: I would log the UserId, MachineId and TimeOut into a table every time the user logs in (hashed). Then validate every time I make a call to the database that it's the same UserId and MachineId and update the TimeOut.
Thank you for your guidance.
i dont know how to help u i am sorry :P
I think I'm following what you're saying but any code samples are good. I think you're right about overly denormalizing code. I was just excited to see my dependencies reduce and code paths get shorter because the messages were more direct. Maybe it's because I'm using Dapper and a unit of work pattern instead of a EF and a repository so MediatR slots in more. EF and NHibernate have DbContexts that function as a repository that I don't get with Dapper or other frameworks putting me closer to raw ADO.NET. I'm still exploring my usage of the Mediator so this discuss is really helpful. Thanks!
Your questions are very broad. The specific answers were vary depending on if you go with Azure or AWS or something else. Also change depending on if you want to use the higher level services of Azure/AWS or want to avoid "vendor lock-in" and use as few services as possible. A lot of things also will change based on how your application works and how much you're able to refactor it. Your company should probably look into hiring a consultant for an initial evaluation of your situation and application to give suggestions about the direction you should go in. Then you can make decisions. I don't think a post on the internet will help you much directly.
Why not enforce that the accounts are declared upfront (and can be swapped out); instead of allowing more than the allocated number of accounts to be registered, but limit the number of simultaneous logins? This simplifies the issue somewhat as you're not having to juggle logged in users. 
We have a similar scenario. We licence a software per doctor. We just check periodically if the customers adhere to the license and we tell them about that upfront. 3 years in we never had a problem and customers like how simple it is. But that only works B2B of course and even then not everywhere... If it would work like this for you I'd strongly suggest you do it like that. Nothing that can break and bigger flexibility. 
Azure sql + azure webapp built with mvc+webapi to make backend stuff and a responsive web and azure webjobs instead of "windows service"
You should also keep in mind that many programmers can bypass local checks. You can make it harder to override the user limitation but it will never be impossible.
I don't think there is anything "reliable" about trying to implement your own license manager. IMHO it would be a terrible reinvention of the wheel and it will be a very poor wheel at that. Cheaper and better to use something off the shelf and concentrate on delivering meaningful user features.
That would be fun, get up early in the morning to finish up that project, at 17.00 someone decides to kick you out. I think it's better to just inform the people, so they can solve this themselves. Resharper does it like that, and whenever i couldn't open my VS I just shouted at everyone to close unused instanced (shouted via slack ofc) and there were always guys willing to close one of their instances.
If your website goes down, your business goes down, that's too much risk especially if OP is just starting out and may not have the funds or resources to guarantee uptime.
Use the Yeoman generator instead. It has many more options, including project name, and it includes far more templates. 
Candy man is cool 
Instead of actually sending the email, write it out to disk in development.
Any chance your project is on Github or anywhere we could poke around a little? I'm happy to help, but seeing everything in context makes it a bit easier. Edit: just noticed the pasted code from the comment above. I'll have a look and let you know if I see anything.
I look if they have only the allowed amount of 'Doctor' users and if the free ones are not using more than one day a week for appointments. It's still manual but would be easy to automate if necessary 
I, personally, downvoted it because it's wrong. You're not using .NET Framework libraries on .NET Core. You're using .NET Framework libraries with ASP.NET Core on the desktop .NET framework. ASP.NET Core [supports](https://www.nuget.org/packages/Microsoft.AspNetCore/) the desktop .NET Framework. It's not inextricably linked to .NET Core, despite the similar naming. The parenthetical part of the title is the only part that is accurate, meaningful, or interesting, though trivial.
The author mentions a lot of things, but either misunderstands what is happening, or has completely confused .NET Core with ASP.NET Core. &gt; you are more than welcome to target your .NET Core application at the “full framework” so that you can use the libraries you need. &gt; How to use .NET Framework libraries on .NET Core Targeting the desktop .NET Framework makes it not a .NET Core application. An application using *ASP*.NET Core can target either of those two frameworks. The information in the article is good and useful: If a required library does not target some version of `netstandard` or a suitable portability target, one can continue to use ASP.NET Core with that library by changing the target framework. But by doing so, you have dropped all notion of ".NET Core"-ness. 
Can you recommend any solutions? If there is something out there that works I will definitely use it, but if I have to code it myself I will. I'm looking for guidance on how to achieve my goal.
I pulled the basic stuff out and stood up a new project and dropped it on github for you: https://github.com/brsmith080/docker-dotnet-sample. This is roughly what Im using as a dev environment, if you want something deployable you would produce a docker image that already contained stuff produced from your .net build. This builds the app in the container and runs it. Let me know if you have questions
The goal to implement is: 1. Only N "unique" accounts can be created. If the company buys 10 accounts, they can only have 10 accounts created. 2. That every accounts only be logging once at a time, so there's not a situation where a company buys only 1 account and shares it across 5 users. Im looking for guidance on how I could implement this.
Try https://mailtrap.io/ There's a free option too.
the json format was retarded, and even the latest .net core uses it its being removed I assume when .NET standard 2.0 and vs 2017 is out, but that is up to a year away so its going to be a long time of people having to use "that json format that is now deprecated without a replacement".
Can't recommend Papercut enough!
MailGun is pretty easy to use and worth the cost for production
This should be your go-to place when you want to find out what's planned for .NET Core https://github.com/dotnet/core/blob/master/roadmap.md
From what I understand, the main reason was that the msbuild team didn't have enough resources to also support the new json based format. So they decided on a middle-ground, where they took a lot of the improvements in the json format, and ported it to the xml-based format.
Mods pls
Multi-line editing has been around for a while but many IDE's and editors contain this feature including Visual Studio and Notepad++ Press SHIFT+ ALT + UP/DOWN arrow keys on a desired row and use the cursor key to move down or up to select multi-line editing
Of course this won't work well when you properly document your code.
“A long descriptive name is better than a short enigmatic name. A long descriptive name is better than a long descriptive comment.” ― Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship Naming convention should be preferred over comments. A class with clear naming is more readable then a class full of comments. I'd also like to add, if a method requires comments it could be a code smell in that the method may be doing too much.
Something new I didn't know, thanks for that!
Perhaps, but both of the above are "nice" generalisations, there are a huge number of times when they don't apply. They're the kind of thing that sound great in theory when you're learning code and want to write the cleanest, most perfect code ever... but then you hit the world of legacy VB6, interfacing with 3rd party systems and libraries you've got no control over, and large teams where you don't have time to train interns and can only point them at the documentation and hope for the best. The quote you put forward from Robert C Martin, for example, is fine for teaching college majors in CompSci 101... it's a great theoretical target to aim for: but what about if I'm using some kind of JavaDoc/CodeDoc style dynamically generated documentation? That would require comments, no matter how perfect my naming conventions are. /// &lt;summary&gt; /// Some description /// &lt;/summary&gt; /// &lt;optional&gt;true&lt;/optional&gt; public int veryDescriptiveVariableName { get; set; } /// &lt;summary&gt; /// Another useful description for the documentation /// Note: Uses UTC /// &lt;/summary&gt; public DateTime descriptiveDateTimeName { get; set; } In this scenario, the quality of my documentation is far more important to me than code readability because, apart from anything else, you shouldn't be "reading" the code to find which variables you need, you should be reading the documentation. But it still gets in the way of the multi-line editing I'd also add that while code should be generally well presented and named for readability, such that you never have to explain **what** you are doing, code should absolutely explain **why** it is doing something, especially if that thing may not be immediately obvious, or is project specific. public string methodNameClearlyStatingWhatThisMethodDoes { string result; result = wellNamedMethod(); /* Comment explaining why we use anotherWellNamedMethodHere eg because the system we interface with can't handle backslashes or something stupid that happens in the real world. Up yours, Tim. */ result = anotherWellNamedMethod(); return result; }
Your code shouldn't need documentation, and if it does then your tests should cover it
Name a single popular .NET library that has "descriptive names" and does not require documentation. Besides that, the quote you posted does not mean to not to document. It just means use a descriptive name - and ideally also document it. Documentation should be used to add information not visible by name. Give information not visible in the code. Give background information. But realistically a lot of developers use "descriptive self-explanatory code" as an excuse to be lazy and to not document their stuff. I had to deal with a lot of poor code where the developer wrote "clean and descriptive code" and did not bother documenting it. So much information is simply lost. So much shit to wade through.
I wish. We build them but I think Im the only one who actually runs thr unit tests before pushing. As you can imagine most of our test suite is outdated or just missing
Your code requires a high level documentation at the least, how subsystems talk to each other etc. Most of this can be achieved via diagrams, process flow diagrams etc. Your class/methods should be as self documenting as possible.
Another cool feature that was just added to vs code and is present in other ides is the ability to edit multiple locations based on content. Highlight what you want to edit and ctrl + D as many times as you want to edit that many instances of the selected text.
XML is over verbose. Classic committee-created standard.
Looks interesting! The README might benefit from showing a more complete example - otherwise, to understand what the library offers takes more effort than many casual visitors will be prepared to invest :-) Good luck with the project!
It's not really a problem. We do it maybe once a year with the few edge cases we have. You notice when someone new is there and everyone is generally honest.
&gt; launch: launch.json must be configured. Change 'program' to the path to the executable file that you would like to debug. Seems like launch.json was auto generated for me but the program section looks like this: "program": "${workspaceRoot}/bin/Debug/&lt;target-framework&gt;/&lt;project-name.dll&gt;", Also I see this message: &gt; Couldn't find 'project.json' in current directory
its ALT+SHIFT+A in Eclipse (block selection)
Sounds like you are using Visual Studio Code not the "normal"/classic Visual Studio. There should be a way to work with ASP.NET projects too but I can't help there. What StabbiRabbi possibly meant was the "normal"/classic [Visual Studio](https://www.visualstudio.com/vs/community/) (the community edition is free if you are working alone or with less than 5 people using it). There should be a .sln file somewhere in your project which you can double click after the somewhat long installation finished. Then you can start the debugging with F5.
Oh I see. I am on Linux, and it seems like the classic Visual Studio doesn't have a Linux version. The only thing that was available was Visual Studio Code. Am I SOL?
Interesting. That's a big help. Thanks for the information. There is a Windows machine in the office, I was hoping to avoid using that but I love trying/learning different tech/languages so I'm down. I've just been thrown into the deep-end without a PFD but I'll get there eventually. Especially with the help I have received today from everyone here. Thanks everyone! :D
If you don't have to learn it for work, don't bother learning ASP.NET Web Forms. It's pretty much in the dying moments. Only legacy software or people refusing to learn better are still using it.
Mailtrap.io or writing to a drop folder are the two things that I use. They both just need some slight changes on the .config
I have a class that wraps all the email sending and when in development it will change the "To" and "Cc" of all emails to the developer debugging the app. Primarily to prevent users from getting emails during testing and also allows the developer to receive all emails sent during his debug session in his own mailbox. 
Now, you google
Yeah, this is the bee's knees. A junior developer told me about it a couple year's back, and all I could say was. "Where has this been all my life."
Or people who don't mind earning lots of money supporting those ancient systems. Still, you're right, ASP.NET is moving towards MVC/WebAPI and no one should spend time on web forms unless it is for work purposes.
I waited as long as I could and it was worth it. No project.json for me :D
Thanks! I've been using this one for a week or so now and love it.
Sorry, I was being somewhat of a shit head. Lots of "how do I get started posts" on this sub. 
I reserve the right to bikeshed about these things for hours on end
[removed]
I would probably suggest you just wrote your own given how easy it is to generate and scaffold forms and the like. https://www.asp.net/visual-studio/overview/2013/aspnet-scaffolding-overview Its not how I would suggest you built scalable, decoupled web applications however.
I'm not sure what batchEditManager is or what that method is doing. I suggest taking to the people that made it.
I believe you may be looking for this: [MonoDevelop](http://www.monodevelop.com/)
Its wierd....I tried installing it yesterday and that failed saying I already have 4.6.2 or higher version installed.! Today after posting...i uninstalled VS2015, re-installed it and then again tried installing the developer offline installer and it worked :| Thanks for the advice anyway. :)
Not very descriptive. Telrik what? I use a few pieces of their software, your giving us a needle in a haystack.
Why not just bring up a VM, you might have student licenses for VMWare (you can merge the desktops together, almost like you're not emulating). You should have a Windows license on your computer that you can use for the image too. In reality, VS is the photoshop of IDEs, it's really a pleasure to work with. You're going to run into a lot of issues working under Mono, e.g. broken stack traces, random segfalts, assembly resolution issues, etc (I do work with mono a lot). Data Grip on the other hand is just amazing. 
tl;dr; Pinned objects no longer prevent nearby objects from being moved to better locations. Empty space in old generations are no longer wasted. 
+1 for Rider. This thing is going to absolutely kill Visual Studio once it has a few more features -- it's a small install, loads quickly, and already feels like a nearly complete product. Works with .net core, so it would work on Linux. As a bonus, you can install things like PyCharm/WebStorm as a plugin to Rider since it uses the same base code as IntelliJ, etc.
[removed]
Use unity, can only use 3.5 feels so bad man!
Can anyone tell me the relationship between .Net 4.6.2 GC and .Net Core GC? Will .Net Core see the same improvements? 
https://www.reddit.com/r/csharp/comments/5pzheg/significant_garbage_collector_changes_in_net_462/dcv6lgv/?st=iycyquhc&amp;sh=26c7180c Because doing Asynchronous I/O calls mean that the buffer you passed had to remain fixed in memory until the call completed, so a GC compaction cycle was not able to relocate it. 
Probably, for instance previous GC enhancements have made their way from Desktop/Full CLR to CoreCLR, see https://github.com/dotnet/coreclr/commit/4f74a99e296d929945413c5a65d0c61bb7f2c32a
So do the biz users say to the devs "I want this, you figure it out"? 
I believe that Paint.Net gets away with it thanks to their [license](http://www.getpaint.net/license.html)... But of course there are plenty of ".net" websites out there.
Do it camel case (.Net) and you'd probably be fine, especially if you own the same domain, "&lt;Something&gt;.net" There's nothing on their trademarks page, though: https://www.microsoft.com/en-us/legal/intellectualproperty/trademarks/en-us.aspx#5ffe264e-ac9b-4ba3-8dd1-941afa5fe9b0
Nice. Generic OAuth with LinkedIn as the example.
There's also the fact that Paint.NET was initially a Microsoft project!
I would definitely review that Adafruit code before using it. I work in a few subject areas including embedded dev, and I've seen Adafruits code before... it's not always the best to say the least. I imagine they have a lot of C++ism's going on in the library. I've had a quick look and so far there is a mix of conventions, and weird ones at that. For example, public methods follow the normal naming conventions. But the private methods seem to take whatever convention the author felt like at the time such as `private someMethod()` or `private some_method_()`
The real question is why you want to name your application according to the language it was written in? This should have zero impact on the product, and may only serve to confuse people. The only ones who have any concern for the language are the ones coding it.
Yeah thats what I meant, internally at MS.
maybe op is porting something over from another programming language and wants to clarify its written in .net
Exactly. What is to prevent me from going to court saying that my *Program.NET* really is short for Program Network and not not the .NET brand? I might lose to Microsoft lawyers... but the principle is there if I wanted to fight it.
Yeah, async tasks generally aren't worth it for tiny amounts of data. Their overhead may be insignificant compared to the latency of a network transmission, but when you end up reading countless individual values that probably come from a local buffer anyway, even just the `Task` allocations really add up. A third option to the two you identified is to read the XML source asynchronously and then parse it synchronously. This is a trade-off for memory usage, of course. I should note that many [consider it bad practice](http://blog.stephencleary.com/2013/10/taskrun-etiquette-and-proper-usage.html) for APIs to "pretend" being async by using `Task.Run()` under the hood.
Is the delay low enough now where you can develop in a VM without being frustrated? Years ago that was always the case but maybe times have changed ? I'm not clear on how that c9.io works.. Where for example is the New Project Template? 
My suggestion would be to go with .NET Core and Visual Studio Code as your dev environment. The setup is fairly easy. I forgot I actually tried this out after reading your post originally and [wrote about it](http://miniml.ist/dotnet/how-to-setup-a-csharp-dev-environment-on-linux/).
.net is one of the original domain specifiers (along with .com, .org, .gov, etc.), so it can't be trademarked. 
Possibly... built in to where, though? And could it be disabled?
&gt;Obviously this would not work for things like UWP apps and games yet I mean, why not? Compile it, and then send a binary via a download that has network-enabled debugging or something. I don't even think it would be that hard. Now I kinda wanna make a proof of concept.
Check out Eclipse Che: https://www.eclipse.org/che I do believe it support .NET Core.
Stephen Cleary has some awesome articles on async. I would highly recommend you read the details from him. Here's a good one... http://blog.stephencleary.com/2012/02/async-and-await.html And here's an MSDN article that closely relates to your question too... https://blogs.msdn.microsoft.com/pfxteam/2012/03/24/should-i-expose-asynchronous-wrappers-for-synchronous-methods/ But here's my notes... - Say your entire stack is async. And method A calls to B which calls to C. There isn't 3 async tasks and threads spawned. In execution, only one task is run when the bottom layer reaches out to a resource (like a file). So there isn't really a bunch of tasks running just by using the pattern. - Task.Run grabs a thread from the thread pool to execute your task and blocks the calling thread until that task is complete. Keyword there is "blocks". If you have async all the way to the top and bottom of your stack, then when the await is called at the very bottom of your stack to read the file no thread is blocked. All threads are freed up until that read completes. When it completes then a continuation is started on another thread from the thread pool to finish the execution of your method and return up the stack. This async execution frees up threads for other work. That increases scalability and frees up UI threads for allowing the user to continue to use your app while the long file read executes. - There is some overhead. So reading 100 small files one after another is going to thrash your execution with continuations. But the magic is in await, not really async or Task. So instead of awaiting each read, call the ReadAsync method 100 times and then await once on Task.WhenAll(tasks). 
You can but that would be lame
&gt; Task.Run grabs a thread from the thread pool to execute your task and blocks the calling thread until that task is complete. Keyword there is "blocks". A thread is blocked, but it's not the calling thread (as in the thread calling `Task.Run()`), so it'll still work the same for the purpose of freeing the UI thread etc. &gt;But the magic is in await, not really async or Task. The magic behind `await` is really just `Task.ContinueWith()`. You could write identical code without async/await. &gt;So instead of awaiting each read, call the ReadAsync method 100 times and then await once on Task.WhenAll(tasks). This makes no sense due to the way `XmlReader` works. `ReadAsync` doesn't return the data, you need to actually inspect the properties of the reader after every read. I suspect it'll also simply crash if you attempt to begin another read while the previous hasn't completed yet, after all you can't just hop in the middle of an XML document and start reading, the parsing depends on the preceding context. Moreover, `Task.WhenAll` isn't free or a shortcut. It'll just set up a continuation on each task much the same as your own code would do.
.NET isn't a language.
That would do.. I can take it from there. Thanks a lot!
Maybe it's the OSX build that has the problems, I've been using it on Windows
True. Your suggestion about reading the xml source async and then process it synchronously seems smart. However I'd have to chunk this so the whole file doesn't have to sit in memory. Not sure if that is worth the dev effort in the end. It certainly seems possible, but will require more tests and code.
What I meant was that the binary would run locally, and it would hook in to a debugger on the cloud instance. Does that make sense?
If the files are too large to sit in memory entirely (which I would think is pretty rare for typical XML documents?) mixing async IO with a synchronous `XmlReader` would certainly be a lot more difficult, as there'd be no easy way to know ahead of time that the next synchronous `XmlReader.Read()` will cross a chunk boundary and would require more asynchronous buffering.
I'm not sure exactly where you're having difficulties, so I put together a simple TabControl binding example using something like what you described: https://github.com/samcarton/wpf-tab-chat pm if you have more questions :)
Are you using ReSharper? Because i know that ReSharper uses these dots as a suggestion, as in: "you could also do it like this". You can also view more information if you hover over them
Oh, I see - but not using ReSharper just plain old VS2017.
As a fellow Scandinavian I'd recommend getting used to writing comments in English for a couple of reasons: 1) It's most programmers' working language 2) Even in your local community it's unlikely you'll only work with people who share your language 3) Since code is written in English it's easier to think in only one language rather than constantly switching between one language for code and one language for comments
Aside from the other answers in the thread: comments are usually in English and those comments don't look particularly informative (hei :p) - you can already tell at a glance that it's filling the viewmodel with data and returning it. I'd personally recommend dropping the comments unless you're doing something more complicated. It's not a good idea to explain basic language syntax and operations that are already clearly described by names of methods, properties etc - it only increases the amount of text you need to keep up to date while not adding any value. There's a lot of different opinions on this, but I go by the rule that comments are a "code smell" - if you need to explain what you're doing, you could be doing it in a clearer way to begin with. 
Okay, so this is actually my specialty. I am going to throw a whole bunch of stuff at you here, and hopefully it won't be too much. If you are talking about totally separating front end and back end, can I assume that your front end will be a SPA with no server side rendering? If so, I would make a separate project in the same solution, and then use Webpack to build it and dump its output into the wwwroot folder in your API's project (that way you won't have to deal with the nightmare that is CORS). With the Webpack Task Runner plugin for VS, you can bind this to Build time, so that this will happen whenever you build. If you want to get fancier with it, you can use Webpack dev server to make life easier during development -- it is a light web server that connects to your browser and can hot reload different assets as you change them (which can also be bound to happen as soon as you open your project). Finally, if you really want to get fancy, you can build your web application with React, use Bootstrap to make it responsive (same site dynamically alters layout to be suitable for mobile or desktop), and then use React Native to build your phone app, which would let you reuse all the code you made for your website -- you would really only need to build the specific "hooks" to tap into the OS. Again, I realize that this is a lot, and that I didn't go into any of it in great detail. I hope that something here can be a jumping off point for you, and you can feel free to ask any other questions.
He may also want to cut down on the not-really useful comments like "return the ViewModel to the view" on "return View(productNameVM);". It's just describing the obvious.
Yep, I agree!
They're helpful for me while learning (trying to internalise) this stuff, but pretty obvious I guess for others, yeah!
If it helps you then they have a purpose. I tend to reserve comments to explain "why?" instead of "what?" and invest more effort into better variable/function names instead. In your case just from that snippet I can understand what the code is doing thanks to clear and explicit variable names.
ALT + Enter is Android Studio! :)
He mentioned C# in the title. Would you prefer I said "platform?" It's a windows app, that's the point. Unless the target audience is other developers then naming the application anything related to .NET is pointless. But hey, he can name it whatever he likes.
Get the web api to do the fetching part and returning the data as json 
Color me interested as well, I've been meaning to break out my backend for independent usage as well
Do you have a specific use case/problem in mind? 
I just wanted to see how it would be done, when you have your Hangfire client and Hangclient server residing in different sites. 
Probably using jquery.validate. You can try temporarily disabling it in the web config to see if that is where the delay is. Set appsettings/ClientValidationEnabled to false and it shouldn't emit the validation attributes on the inputs.
Have you seen a project called Xpence on Code Project? I'm using it for my own self study. Edit - Source code https://github.com/OxyProgrammer/XPence Article https://www.codeproject.com/Articles/753332/XPence-A-WPF-metro-style-smart-client-expense-trac
&gt; The magic behind await is really just Task.ContinueWith(). You could write identical code without async/await. Have you tried writing "identical" code with ContinueWith and callbacks? It gets messy real fast as soon as you try to add control flow like loops, conditions, error handling. The magic is definitely in the compiler and how it transforms simple code into a complex state machine.
Like others have said, try and build some basic apps and learn as you go. I have found that most of the quality WPF resources are somewhat scattered around. Also, I would suggest taking the time to learn it in the MVVM design pattern. Your code will be decoupled, highly testable, and much cleaner.
Thanks, good info!
For authentication, I usually secure *the API*, and keep all sensitive data out of the front end app. Then, the authentication on the front end becomes just a way to ensure a consistent user experience -- you only keep them from going to the admin page because they can't do anything useful there anyway. To actually do the auth, check out JSON web tokens and OAuth. As far as Webpack goes, it is much better suited for what it does than Gulp. The niftiest thing that it does is extend the definition of Node's "require" syntax, and makes it super easy to build clean, modular applications without having to worry about where all the files are relative to one another. It is hard to describe how awesome this is until you really start to dig into it, but once you grok it there's no going back to Gulp.
Tell me more about converting it to a silverlight desktop app. Would it not matter if there's no Silverlight support? **Edit:** I found [this page](http://timheuer.com/blog/archive/2010/03/25/using-sllauncher-for-silent-install-silverlight-application.aspx) and I did what it said, I'm not getting any kind of response, not even an error message, and no desktop or start menu icons show up.
The element names in MSBuild (csproj xml format) might not be great, but the json format seemed like it was just replacing the elements with braces :P 
SL is essentially an old/weird version of WPF. In the SL project I worked on, we often had problems that were easy to fix in WPF, but required special code in SL. IIRC, the generated service references in SL were not normal. Does anyone who worked on the SL app still work there? This looks like a good overview: http://robertsmyth.blogspot.ca/2011/12/migrating-from-silverlight-to-wpf.html 
That's not the case everywhere. I work for a Austrian government-related entity and or comments are usually in German. Also not every programmer knows English well enough - especially the older generation. Honestly, if you don't know German you can't work on these projects anyway because you can't even go to meetings or read the instructions. I usually write my classes and attributes in English but the comments all in German.
I don't mind the new csproj it's basically just as simple as the json was. I can largely read and understand it now which was my biggest complaint with the original.
Yeah, in my point of view gulp !== gulp plugins, they are more like comparing IoC and concrete classes. IMO Webpack provide the implementation (concrete classes) for all of the problems above, rather than trying to make yet another task runner. The fact that you can do all of the common tasks with Webpack is because NPM itself is a simple version of Gulp (means you can purely use NPM to script a run through all those tasks). Interested read: http://stackoverflow.com/questions/33558396/gulp-webpack-or-just-webpack
100% this in every way. Exactly how my team does things too.
Build RTM?
[removed]
No, it still has the "RC" branding all over it. It's closer to RTM though. My guess is that they'll wait until around the time that the Windows 10 Creative Update is released. 
&gt; We’re sorry, but we can’t find the page you’re looking for.
You can still multi-targeting classic .Net, so yes, at least within current limitations. I have no idea if apps containing references to UI components would build
My VS 2015 is very stable and very fast. I use it for MVC,WCF,WPF and xamarin forms. Most of the time serious performance issues are the result of an extension/addin(not saying any names... Resharper). Maybe I'm just lucky and your issues are indeed VS itself. If you do use the above mentioned unnamed extension, try running without it for a bit and see how it goes. Good luck!!
[removed]
1) start with your existing devs, be clear you are hiring full time, give them a shot and ask for recommendations, otherwise linkedin or stack overflow careers? 2) reasonable full time salary range is 100-135 depending on years of experience 3) yes if you are honest about hiring up front, involve them in process and make it clear you want them to help new dev be successful. 4) don't make the decision without consulting your existing resources, or they may not be as helpful. If there is a risk they walk or hold your code hostage make sure to inventory tools used, source code, and other processes.
You get to control what comes in and what goes out. You might have a very large object but in order to create one (for example with an HTTP POST), you might only need a few fields. It can be nice for the client to only have to construct an object containing the minimum amount of data. There are other ways of limiting data with attributes but DTOs are a fine option.
&gt; very fast Large solutions will put a burden to it. But any decent company should be putting their devs on SSDs these days unless it likes wasting dev time.
I don't see the reason on why to **build** the .NET Core application in the Docker container. It will just blow it up. Build locally, then deploy into a Docker container.
MSBuild supports using wildcards to include multiple file, so you can use a minimalist file to build directly with MSBuild. Visual Studio (2015 and earlier) doesn't use that approach, it creates an explicit entry for each file. I would expect to see 2017 convert older project files from the verbose syntax to the wildcard syntax. 
Just curious, what other options are there? 
This seriously sounds like a problem with something you guys have installed, or something related to your systems as a whole. My team uses VS2015 and it's butter smooth with very large projects. I think I see a crash maybe once every few months and it's always related to something not VS related. Usually a registry issue, like performance counters. If I were you guys, I'd troubleshoot why that's happening rather than assuming it's the software for the sake of your entire teams' sanity.
Thanks
That is weird, what does the event log say? Is there a pattern of type of files you are editing that causes the crash? I mean I use Visual Studio everyday and if it crashed at least once a day, I would be pissed as well. Have you sent any bug reports to Microsoft? On top of visual studio is that little smiling guy, you can send a frown which is basically how you can report bugs. As devs we all know, if we don't know there is a problem we can't fix it.
There was Nitrous.io that had a good cloud solution. Unfortunately it seems the subscription numbers never made them profitable and they folded. They seem to indicate they might open source their stack. It was a VM running with a IDE accessible through the web. I used it for small throwaway test projects, like testing code from SO. 
If you for example reinstall your computer with Debian testing without checking if it's compatible with running dotnet CLI. Then it's really handy. ;)
I am asking for a VM to test 2017 since using 2017 on a local machine was a mess
I see Xamarin so much lately. Is now a good time to get in and learn it? It seems to be gaining some traction, though the things I've been reading about it ain't that good.
Unfortunately the update was pulled. Some more waiting until to try out ASP.NET Core with some tooling that doesn't kill the project after clicking update packages once :'(
Instead of reinventing the wheel, I highly suggest that you use SignalR. 
I talking about publishing ASP.Net WebForms application
I would ask why, but there are also people that still create web apps with HTML 4 and PHP 5.3 using Notepad. I guess not everyone wants to upgrade to modern tools.
true, good point. came across this project and thought it was interesting, so i just shared it
Glad they're honest about the hassle here. Excited to see core mature a bit more.
Why do people keep saying "WCF is dead" anyway? It's a mature API with many advantages in my experience and I for one am not ready to toss it aside....
It is, but distribution of an assembly that depends on native DLL is trickier for cross platform case.
As far as I know VS Code plugin is only suitable for .NET Core development. If you're on windows you can use VS Community or maybe Xamarin Studio.
If you're not using core then you're pretty limited and will have to use full visual studio. 
Lol the Core CLI will compile with the 4.62 framework but I have to manually specify the framework, target binary, and dependencies in the package.json It's annoying, but it works. My specific example is scraping a file from SharePoint Online that 503's literally every other access attempt. I'm using a while break loop but that's shitty practice 
i thought this is obvious, but a) for those who use PCRE b) the regex in .NET is powerful, but actually written pretty poorly imho, so its a lot harder to use
If you're using MVC Core, you can do it by adding the following middleware early in the Configure method of your Startup.cs, where SslPort is an integer allowing you to specify a non-standard SSL-port: app.Use(async (context, next) =&gt; { if (context.Request.IsHttps) { await next(); } else { var port = SslPort == 0 || SslPort == 443 ? string.Empty : $":{SslPort}"; var httpsUrl = $"https://{context.Request.Host.Host}{port}{context.Request.Path}"; context.Response.Redirect(httpsUrl, true); } });
[removed]
When the hell will they add it in official Ubuntu repos?
You might want to use SharpDevelop then. I've been working a lot of thing successfully using it. And it's very lightweight.
I'm new to the .NET ecosystem, but I just want to say that I understand what you're trying to do. Using VS code instead of full VS is a valid personal preference. Some of the responses here could be a little more friendly. I've had some trouble myself finding documentation for using VS code with the full framework. Though it's possible, the docs generally assume you're using full VS with the full framework. Good luck. 
1) Focus on MVC 5, most of your knowledge will easily transfer to Core once is more mainstream. 2) I'm hearing different things on certifications. Some places they matter some places don't care. If your company pays for certifications it certainly can't hurt getting it but I'd never pay out of my own pocket. 3) Personally I'd learn the basics of WCF. You'll learn its easy to understand. I'd focus more on WebAPI. 4) Javascript can be very useful for certain tasks on the backend. Node.JS is a backend system. Javascript is basically everywhere these days. Getting a good base understanding certainly won't hurt. What I've done is focus my attention on best practices for everything. Learn about dependency injection and why you should use it.
&gt; Focus on MVC 5, most of your knowledge will easily transfer to Core once is more mainstream. This. Definitely this. Core is fine for simple projects for now, but it is still missing too many libraries and features. Wait until it is a little more mature. Right now there is absolutely nothing wrong with sticking with MVC5. &gt; I'm hearing different things on certifications. Some places they matter some places don't care. Posted about this before, so here is a cut-and-paste: &gt; Certifications serve one major useful role: getting past the Human Resources department and in front of an interviewer who actually knows the job you are applying to. &gt; &gt; While many to most smaller companies don’t have HR departments, and as such the people who will be managing you are typically the same people who will be receiving your Résumé/CV in the first place, the same cannot be said about large(r) organizations. There you will have the HR department as the gatekeepers -- no job opening gets posted and no job application makes it in unless it goes through them first. &gt; &gt; Plus, they are nearly always the front-line decision makers on which applications actually make it to the manager that has the opening. While they may talk to the managers to get a list of desirable skills, keep in mind that they often have no clue whatsoever what those skills mean. Their job is to create a list of checkboxes against which a candidate can be validated against, and if the candidate does not meet certain well-defined and non-technically described thresholds, the candidate can and will be rejected regardless of how valuable the candidate could be as an employee in that position. &gt; &gt; As such, HR has to break things down into very clearly defined categories that are likely to appear and be easily recognized on a CV for what they are. &gt; &gt; Think of the difference between a bulleted list of one-word web development terms (as a list of skills you know) as opposed to a detailed description of how you built your last project (including your achievements and interesting features added). The former is pure gold to an HR department (easy categories) but mostly useless to a manager looking for a hire (no indication of how proficient). The latter is golden for that manager (details, details) but utterly useless to HR because they cannot break it down into no-thinking-needed checkboxes. &gt; &gt; Certifications bridge the HR-Manager disconnect. They provide something that is not only easy for HR to validate a candidate against, but can also provide a manager with a baseline expectation concerning the candidate and some general idea of their real skill level. The big takeaway: HR departments won’t know jack shit about what is in your Résumé and what it means, so you have to provide the information to them in a paint-by-numbers format that is easily digestible and very simple to categorize. **You need to make it past HR to get in front of someone who can actually evaluate you in an effective manner, so make this part of the process as frictionless as possible for HR.** The actual managers you will be working under, on the other hand (and assuming they are competent), *will* know what the stuff in your Résumé means, and as such you need to get down to the brass tacks of convincing them of your worth. If you are lucky enough to have them as your first point of contact (if there is no HR department, for example), then you should craft an entirely different Résumé that focuses on your achievements and ability to handle new stuff.
Yeah...unfortunately not. I had some issues with dotnet quitting unexpectedly due to some OpenSSL problem. had to google around a bit and then found that tons of people had this issue. fortunately it was solved quickly by running brew update and brew install openssl, but it definitely didnt work immediately
VS (whatever flavor fits your situation) would be the best option. Wanting to "live in one place" is an arbitrary limitation you are placing on yourself, you should choose the right tool for the right job, even if that tool is outside of your comfort zone. Having experience with another IDE or tech is never going to look bad on a resume.
Above comments are great, but also remember to not exclusively focus on tech skills. What sets apart great developers is their attitude, positivity, communication, ability to work with other people, ability to learn etc etc. (Also... learn about basic security problems and mitigations, source control, CI and SQL) 
Semi-related, may be useful: the Serilog project's been [collecting a few Dockerfiles](https://github.com/serilog/serilog-docker) for various self-hosted log storage back-ends.
&gt; My JS skills are pretty basic. Should I invest time in improving them, even though I prefer backend development? Absolutely. The broader range of skills you have, the more tick boxes you can hit with a hiring manager. 
There you go ☺️what suggestion? 
I definitely don't mind working on WPF client apps. And, as you say, once I get to NYC there will be a lot more opportunities available to me(far more than in a Midwestern suburb). I will also definitely take your advice and look into consulting firms and maybe even some recruiters. Thanks!
I've spent a lot of effort my first year working on learning best practices in OOP. In fact, I've convinced my team lead to start using DI in our product, and have been slowly steering them toward writing classes that are well encapsulated and follow the SOLID principles. My main worries about interviews are questions about specific technologies and tricky algorithm problems.
do you have a github account?
You seem to be getting considerable flak here for apparently trying to avoid multiple editing environments. You might get something better during the work week. Debugging in Code is not and likely never will be as fully featured as it feels in VS (I am thoroughly convinced VS provides without exception the best debugging experience you can find anywhere). That said, it might be comparable to what you can get in comparable PHP-centric tools. The documentation does suck in many ways (please file bugs [here for code](https://github.com/Microsoft/vscode/issues); not sure where for sharepoint; *). Fortunately many of the problems you have or will come across should be one time things (like targeting 462). btw there is an awesome sql server extension for code that I highly recommend: https://github.com/Microsoft/vscode-mssql \* I've personally had a shitty time with trying to figure out what to do about full framework pain points in the core project system. There appears to be a considerable amount of internal politics going on at MS which leaves me trying to figure out how to contact the right people via the right tracking tool which might not even be possible since I have no MSDN sub. I'm going to step out and say fuck playing those politics. Register a twitter handle and use that smiley face in the bottom right corner in code and make noise (there are people listening). If you think it is appropriate, go right ahead and file a framework bug [right here](https://github.com/dotnet/roslyn/issues)(or the corefx repo maybe). Don't be afraid to make a mistake, but don't use any of the private avenues (except for secure data transmission) because they enable the hidden politics.
[removed]
I have no idea why I'm being downvoted- I am asking for help with a pretty specific use case- C# scripting, maybe I shouldn't say debugging but the way we debug isn't step by step execution because it doesn't exist in most of our ecosystem, and for ~100 lines of code it's not crazy to use the console And to be honest, I would happily use Core but it looks to me like virtually every MS API isn't compatible- my specific example here, the SharePoint CSOM, I have no idea what it's doing, maybe it's just wrapping REST, but it's convenient to use Modding the package.json works, maybe I'll write up how to compile a .NET framework x64 binary with the Core CLI, but I thought for sure someone has been here before and written it up or built a tool, guess I was wrong, thanks for your help!
nice content, but your blog layout is messed up, the header logo is super large and offset
Full description: &gt; Python for .NET is a package that gives Python programmers nearly seamless integration with the .NET Common Language Runtime (CLR) and provides a powerful application scripting tool for .NET developers. It allows Python code to interact with the CLR, and may also be used to embed Python into a .NET application.
I'm in the UK but I'll try to offer some advice: 1) Best to focus on MVC 5 atm. It's what you're going to see most of in production. 2) I got the software development fundamentals MTA as part of my training. I get to say I'm an MCP which has impressed some interviewers I guess, I didn't pay for my cert though, I probably wouldn't. 3) Worth learning WCF as you'll see it in use, but most new systems are Web API. 4) Definitely get better at JS. It's something I had been neglecting but if you're doing webdev you will have to tackle some JS at some point. 
Thank you for providing a concrete example on how to use this. I've been wanting to get into Roslyn but never found the time to read through book-like posts. This is very concise.
What's the advantages/disadvantages of this compared to IronPython?
Using CPython would be my guess. The example on the website shows numpy being used which you can't do with IronPython. Python has a lot of great libraries and the fact you can't use them with IronPython probably hinders its use - it's a similar problem with JRuby which offers big performance benefits but suffers from adoption because you can't run Ruby libraries with C extensions.
Last I checked IronPython only supported Python 2 as well.
Quality content shared, thanks for description.
Instead of configuring every field I have a convention: public class TinyTextConvention : Convention { public TinyTextConvention() { Properties&lt;string&gt;() .Configure(c =&gt; c.HasColumnType(MySql.Data.MySqlClient.MySqlDbType.VarChar.ToString()) .HasMaxLength(255) .IsOptional()); } } Apart from that I think the limitation is only on the IdentityUserLogin table because it's using a composite key.
Have you tested it?
Thanks for the response, I would not only rewrite because of the Webforms part. There are multiple reasons for it (CMS version, website has been build by 4 different companies and the structure is really a mess,...) There are no ongoing new features in development at the moment so this would be ideal to propose a first stage of the new website. I do understand the points you raise, so I will take this in consideration!
You'll be able to cover more of your code with unit tests, reducing the amount of manual regression testing you need to do before each release to make sure your changes haven't broken anything, and enabling you to refactor portions of code safely.
It would be nice to be able to extract from an IIS running directly in Windows without any VM.
Well that's pretty nice if it means that I can finally use numpy, sklearn and theano straight from .net!
I see that two people have added a file, would you like me to delete both from the proj file? /s I doubt it would fix 90%, it just doesn't handle xml very well. I remember similarly named files having issues with the mismatched elements when we had a lot of nested files. 
If you're looking for free VM software [Oracle VirtualBox](https://www.virtualbox.org/) works great. I have only used it from a windows host though so your mileage may vary. I had a windows 7 VM and used it for years for development without any issues.
90% of the ones you look at and wonder "what is wrong with this tool".
OP here, just to be clear, I'm not intentionally disrespecting the dot.net core stack. Rather, my intention is to objectively share my real-world experience with it. Maybe this will help you make a better informed decision of whether or not to switch. Thank You. 
Good question. I should have mentioned that. Anyway, Visual Studio 2015 Update 3.
Normally I would agree with you about selective memory, but I've fixed three "merge conflicts" today that were just two people adding a new item to the project file.
This is one of the areas I like Java better esp with a Maven or similar build system. Rather then enumerating each file to build in a project there is an assumed folder structure. Code on src is app, under test is unit tests, etc etc. 
I'm primarily a .NET dev and use an iMac and MBP for it, but I have opted to use Boot Camp on both for my .NET work, where I use Windows 10 in both cases. I've had no problems and this is how I prefer to do it. You could definitely just install Windows in a VM, I personally use VMWare Fusion because I'm an idiot and got locked in but I'll more than likely move back to VirtualBox in due course. Either way, I think Windows is (currently) the superior OS for .NET work, mostly because of Visual Studio, which I personally feel is a grand IDE, though it is not without its quirks. Learning how to use it well is a job in itself as well. I've also tried getting projects up and running on my Mac and I've had some success though it's not as easy. Visual Studio for Mac has a very long way to go, and I am not sure how you would use LocalDB or SQLite with .NET on a mac, though I haven't looked into it. However you can easily [setup MSSQL via Docker](https://docs.microsoft.com/en-us/sql/linux/sql-server-linux-setup-docker), and then configure your .NET project to connect to it. If I was doing it on a Mac, I'd use the aforementioned Docker container and VS Code with the C# and MSSQL extensions, as they're both pretty fantastic and I have done so in the past, and VS Code is a surprisingly fantastic editor. This is a good [guide on how to debug with VS Code](https://docs.microsoft.com/en-us/dotnet/articles/csharp/getting-started/with-visual-studio-code) which you'll need at some point. There's also the [Yeoman ASP.NET Generato](https://github.com/OmniSharp/generator-aspnet)r which works well and I suggest checking out if you want to continue to pursue .NET on a Mac. **TL:DR;** find a way to run Windows on your Mac that you can tolerate and go from there or read the parts on .NET on Mac.
That's the plan for C#. I don't know if it will be extended to SSDT projects, which is where I seem to get hit the most. P.S. I actually force VS 2015 to use wildcards in some of my C# projects. 
I still like TFS in general, but for source control I'm using Git now. It's got a lot of those total-BS problems like that.
I really appreciate the writeup. We have been considering Core and have decided to pass. We don't have any strict requirement such as multiplatform so we don't have a necessity for it. However we wanted to position ourselves for the future filled with Docker and Linux. The question was do we bite the bullet and eat the pain now or do we wait for a year or two until Docker is imminent and then port (lift n shift). So anyway, I found this extremely useful and pretty much gives me warms and fuzzy about our decision to skip it.
Software almost always has the 3 version rule. This is mainly due to the realities of development: * Revision 1 - We have an ok idea of the problem domain and a vague idea of how the application should work. * Revision 2 - We know we had no idea on rev one and while we have a much better idea of the problem domain we know most of the rev1 code does things wrong, all wrong * Revision 3 - After fixing everything broken from v1 in v2 now we can get the final polish on the product and get all those other features into the release some of which have been sitting in feature branches and developer local stashes for months or years.
Excellent write up. Thanks for taking the time
I think there is a reasonable case for using Asp.Net Core, hitting those first 4 pros (and 5 cons, though I'd argue they aren't all really cons particularly since with a complex enough app on MVC5, you were already doing this, and WebPack is pretty straightforwards today though it still isn't quite as integrated as it should be). I think targeting .net core is a mistake at this time (target 461 or 462). I haven't worked with EF at all (my existing databases don't play nicely) but have heard EFCore is missing things. Fortunately targeting full framework you can use EF6 (and every other library you have ever dealt with so long as they weren't web stack specific stuff). --- I would strongly recommend taking your project here in multiple steps: 1. Asp.Net Core on desktop framework (4.6 or 4.5 or whatever), EF 6, Angular 1.6 2. Asp.Net Core on desktop framework, EF Core, Angular 1.6, someday in the future when EF Core can do the things you need 3. Asp.Net Core on core framework, EF Core, Angular 1.6, someday in the future when the rest of your dependencies support Core I would not attempt jumping from today's production code directly to #3. 
Where do people come up with crap like `dot.net`? It's `.NET Core`. It's not hard. It's not `FireFOX` or `MICROSOFT` or `JAVA` or anything else like that either.
Author here, any questions fire away.
&gt;There's much less help available on the internet. Almost any problem I encountered before developing in Core could be solved by by googling a few keywords. The dot.net core answer base is much, much smaller. Sometimes you'll just be on your own. This is partly because the core technology set has had three different names, e.g. vNext -&gt; ASP.NET 5 -&gt; ASP.NET Core, EF7 -&gt; EF Core. I agree with that. Thought I'd share a work around for anyone interested: perusing framework source code in .net core is a breeze. On occasion, it has been a more efficient than googling. 1. You can clone a single package from github, for example "microsoft.aspnetcore.antiforgery" 2. Add its src folder path to global.json, for example "&lt;path&gt;\\Antiforgery\\src" 3. Relevant projects within the package will appear as part of your solution 4. You can step through framework projects while debugging. You can also search within them. Microsoft have done a good job of being consistent with their design patterns in .net core, so their packages are quite easy to navigate. Can totally understand why .net framework may be preferable over .net core if you aren't building a cross-platform application though. Could take a while for popular libraries to be net standard compatible. 
Found a script that ordered all csproj files on build. It is kind of a pain b/c when you add / delete files you have to rebuild again. It is worth it to not have the merge hell that csproj is.
You should define 'production' if you're referring to your production environment :) . We're very excited about the general direction with dotnet core but when we evaluated it ourselves, we strongly felt it's not yet ready for prime time. Several gaps across the board. We're confident (hoping?) they'll get filled out quickly - but not just yet. Estimating that 6 months after VS2017 and the tools' release is a good time to examine any porting.
I agree with you, and thats why I'm waiting for .net core 2 before migrating to it.
We use it in production too and by production I mean 18 to 40k users, for a complex architecture in Azure (with micro-services and webjobs and service buses and sql database sharding and blablabla whatever you want, multiplateform apps, api, multiples websites in ReactJs). Of course you need to learn a few things, like the tools of the Js-centric community by example but ASP.NET is a web framework so if OP thinks that's a con, stop reading right now and go learn it, they do have the best toys. Of course EF Core is not ready, it's literally written on the web site, why would you use it? Of course VS is buggy and the tools keep changing and that's bad, that's why we usually wait before upgrading versions, because we want them to stabilize. Don't want to rework the project structure ? don't upgrade. Now that those open doors are dealt with, it's not because the barebone framework is empty that features aren't in a separate package or on Github. Sure there is a lot of things lacking and it's often difficult to find but it's sound and I think the idea is to push the developpers to contribute on Github with missing blocs and recreate the community. Is it harder now to do a website than a few year ago, yes. But Webforms and Wordpress are still available if you don't need the hassle. Accept to use the right tool for the right task even if it means learning a few overlapping technologies or closing some doors. PS :OP, harrassing the EF Lead over a project which is known for being a complete fiasco will probably not put it on the right track. Just let it die, they will succeed, eventually. PPS : Good luck on your project.
I wrote this (https://www.hidefsoftware.co.uk/2017/01/03/getting-started-with-core-on-mac-or-linux/) to help people with this kind of problem. Check it out and feel free to ask questions if you have specific problems.
I'm running SPs from within EF Core with no problems. context.Blogs .FromSql("exec usp_Blah {0}, {1}", var1, var2) .ToList();
Please share.
Great write-up. Reflects my own experience, although I think a little more detail on what's up with the tooling would be useful. I feel it's becoming a common myth that the tooling sucks, when actually it's just due to evolve again, so a few tiny and avoidable bugs haven't been fixed.
&gt; Participants must be over 18 years old and be Belgian residents. Well... Even as a French, I am to far.
What I'm most interested in is the core clr native stuff on linux. Is it now possible to build a native linux apps like Hanselman demo'd about a year ago? (at 20m30s in https://channel9.msdn.com/Events/Visual-Studio/Connect-event-2015/010)
It's not supposed to be mature so I don't get why you would even bother using it in its current state?
Shame this can only be used for apps related to Office or other Microsoft services.
Really? I thought this meant I can't use it for anything except Office related services? &gt; &gt; 1. Fabric Assets License and Guidelines &gt; a. License Grant. &gt; **Microsoft grants to Developer, a non-exclusive, limited, worldwide, non-assignable, non-transferable, royalty-free license to use the Fabric Assets solely for the purpose of developing for Office and other Office 365 endpoints including, but not limited to, Office Add-ins, SharePoint Web Parts, SharePoint Apps, and Custom Office 365 apps.** For the avoidance of doubt, the Fabric Assets are not to be used for marketing purposes. “Fabric Assets” means the (1) Segoe Font Family located at https://dev.office.com/fabric#/styles/typography; (2) Office icons located at https://dev.office.com/fabric#/styles/icons; and (3) Microsoft trademarks, symbols, marks, etc. located at http://dev.office.com/fabric#/styles/brand-icons (“Trademarks”). Microsoft reserves all rights not expressly granted herein. Developer may not use the Trademarks in the name of any product, service, or in any way that would cause confusion about whether Developer’s product or service is a Microsoft product, and Microsoft may revoke this license at any time.
&gt; the JS side of things **requires** multiple components to get it to work properly The problem is this is just plain not true, or at least it doesn't require any more components/setup than the existing asp.net bundle setup. The bundle config and the js files is *literally* all you need, which is exactly the same as it has always been. Use a package manager (NuGet, bower, npm or any combination) or just download the js files and drop the into the project it really makes no difference
I've been on git for about a year, it has different issues, at least with VS integration It seems like whenever I need to merge something that has deleted files in one branch; VS says there is an error and I need to go to command line where it merges just fine.
Thank you, I will make sure and do this...
if anyone faces this problem, it should be " D:\home\site\wwwroot\yourfilename.xxx" without the quotes. figured it out by finding how would one write a file to the root folder.
Yes, what you state would be more accurate. Hopefully what I wrote was still clear though. Thank you.
I was looking for the "Why I decided to abandon .NET Framework and return to VB6" article but all I could find was this. FeelsBadMan
Weird, I've never run into that.
Thanks.
&gt;Conflict or simply they got it wrong Its hard to know if its one or both. The json project thing always looked like a mistake to me, but I really thought it stemmed from something like I'm-smarter-than-you or not-invented-here syndrome. IIRC at some point they were just not going to include reflection. In the near future, I'll probably try to target .Net Standard 1.2 and just ignore which runtime I'm on. 
Nice! Me and a buddy are currently in the process of building a personal project on core myself. We originally wanted to use Asp.net core Web API with EF core, and Angular on the FrontEnd, How ever we've have been having so much trouble with EF CORE, so we are trying to evaluate if we should user ASp.net core with EF6 instead. Last night I recreated the project with EF6 and had no issues. So tonight I am gonna show my friend the new project so we can decide if we want to continue with EF core or EF6 Based on ur experience do you have any further advice to offer?
Just as another note, just because you don't reference the "Microsoft.AspNetCore.Mvc.Core" package directly doesn't mean you don't use it. Open your project.lock.json file and search for the package as this lists the dependencies of your dependencies. If you are on Preview 4 this is project.asset.json More info here : http://dotnetcoretutorials.com/2017/01/29/denial-service-vulnerability-asp-net-core-1-1/
Production ready is a relative term.
"doesn't work" is not a useful error description. Also, procedural code doesn't become object-oriented just by splitting all your static methods into multiple files.
Hmm, I just created my first .NET Core 1.1 MVC project earlier today using VS 2017. Apparently new projects automatically grab MVC 1.1.1 from NuGet as I already had it installed under my NuGet dependencies.
Yes, but 9/10s of those years can be professional. Learn an MVC framework, make a portfolio site, make a linkedin. Make six figures in 4 years. Works for some people..
I've always liked to use the car or animal example to explain object-oriented programming to people. Typically I usually start by saying that a car has what, and then I let the person who's attempting to learn object-oriented programming to tell me what a car has. A typical car has Wheels, Windows, Doors, engine brakes. Now when you think of a car there's a very basic understanding that a car has four wheels, four doors (sometimes two), one engine as well as what a car does, turn on, off, change direction speed. So if someone (Audi Subaru GM) wants to make a new car object they can, or if they want to make a new type of car they can too with out redefining a car. 
Are you familiar with debugging practices? Like how to set breakpoints, watches and using a stack trace? How about stepping through code and into methods etc? If not that's the best place to get started for very basic programs like this. Is it crashing, not compiling, or just not working? These are useful things to mention in a post. If it's not compiling you would need to mention what errors you are getting. If it's running but crashing then it should break on exceptions. If it's not breaking on exceptions then you might want to turn this on in your IDE. This depends on what IDE you using. If it's Visual Studio it will be an option under Debug-&gt;Exceptions. You'll likely want to have it break on thrown common language run-time exceptions as well as unhandled exceptions. If it breaks on exceptions you can examine the local variables as well as stack trace to see how it got to throwing an exception. If it's running but just not working then you'll want to start setting some breakpoints and stepping through your code to see if it's doing what you expect. If you already know all this, and can't figure it out, then you'll need to be more specific! 
You have a very functional design as is. I would avoid static method calls if possible, it's hard to manage global state when you hide it behind static method calls. Try to understand your dependencies and how classes use each other. Why does the list manager need to know about the console to manage a list? Maybe the list manager should accept items as input and focus on generating a list. You don't really need a list manager for this, just use a list. Generally you see the program cs file handle simple menus and argument parsing (sometimes passed to an argument parser). You don't really need a static class for this, it can just be a static Help() method on the program class. One tenant of good design is tests, maybe write a few tests to understand how your classes should work. Writing testable code will often drive you toward eliminating global state and creating classes that accept their dependencies.
Object oriented programming splits code into "Objects" which are often classes (but don't have to be, depends on the language). These objects link together data and methods that do something with/to that data. The three main principles of object oriented programming are encapsulation, inheritance, and polymorphism. Encapsulation means that your classes should be self-contained insofar as is possible. The way to achieve this in C# is by using access modifiers like public/private/protected. Ideally your data should be private (not counting properties in C#), and your methods may differ depending on whether they are part of the interface for interacting with that object, or just something that does some internal work. Inheritance, somebody touched on below. It is essentially the idea that a class can inherit some/all of the functionality of another class. Polymorphism is the principle that the same name can refer to different things. Virtual methods in C#allow this in an inheritance context, whereas at the same level having different arguments but the same method name is also polymorphism. A good online tutorial, coursera course, or book will cover this in a lot more detail. Static methods/data don't fit well with OO as they tie the data/method to the class itself as opposed to instances of that class. If I was to have two variables with ListManagerBrains in them, they will both point to the same instance of the object behind the scenes. In comparison, if the data and functionality in there were non-static, I could have two of them working independently. To get to your code, your main problem in terms of functionality appears to be a misunderstanding of how Console.ReadLine() works. Every time you call this, it will stop the program to get a new line of input from the console, whereas in terms of, for example ListItemChangeNotification, that's probably not what you want. In terms of OOP principles, get rid of the statics, certainly for this as they're not needed (with the exception of main), and try to separate things out better, as has been alluded to in other comments.
&gt; Works for some people.. So does powerball. The only thing, and sorry if this sounds harsh, you accomplish by prematurely launching yourself into a programming career, is constructing lots of shitty, horrible code because you're still not qualified - and it will put enormous stress on you, your client/employer and may cause serious trouble in the form of security breaches or critical flaws. Getting that shitty, horrible code out of the way is best accomplished by actually investing time into it as a hobby, coding and reading because you actually enjoy it. Very few people who program without honestly enjoying it rise above extreme mediocrity.
Does this describe your issue? https://blogs.msdn.microsoft.com/oldnewthing/20110303-00/?p=11313 (Sorry for the short replies. I'm currently on mobile.)
My understanding is that the lock/login screen runs on an isolated desktop just like UAC prompts do. In other words, it's designed specifically so programs can't interact with it.
I will say there definitely had to be TONS of shitty code. 90% of my code is probably in a recycle bin. And I'm typing this a little drunk. I believe it's an easy field if you have work ethic, have the bare minimum wisdom required to absorb the knowledge that's available to you, and are honest with yourself and company that you don't know what you don't know. No need to gain that knowledge for free.
I created a PR with comments on GitHub. Hope that helps you to clean it up a bit and get closer to working version.
Except it doesn't necessarily work that way. If you have a solid foundation, you *can* learn on the job - fact of the matter is, you will never stop learning by doing unless something went horribly wrong in your career - but that foundation is absolutely critical and it takes time to develop. However, if you start out without a bunch of important background information, you can end up writing some frankly dangerous shit when deadlines and pressure start mounting.
Well sure, you can also have a masters degree and spin up a DbContext that will load an entire data farm on startup. Yes you need a foundation, yes you need to know security (Ws-fed if you're in .NET land, OpenId Connect, OAuth, etc x10000) Yes you need to understand your stack, but I don't think you should ever limit yourself because you can do some damaging stuff. You're going to have at least one catastrophic failure before you retire, in fact I won't hire someone if they haven't experienced failure. They either don't have a real user base or haven't touched enough pieces of the puzzle. Resources like PluralSight, CodeCademy, and Stackoverflow alone have way more information than my university ever did, and frankly if you get hired into a position where you are making unchecked dangerous decisions then the company had it coming. 
http://dot.net/
I don't necessarily think it's a replacement, but something that allows IL to be far more accessible from within VSCode
Please format your code like you care about it.
I know but it seems to be the only thing that's close enough
Wait wait wait. You can run Core on .Net 4.6? What exactly does that mean... your project is in Core and you use the Core libraries but you deploy and your app pool is .net 4.6?
One problem we had was in dealing with mixed projects... Suppose you have a solution that contains a couple library projects, a winforms project and an asp.net MVC project. To migrate this solution to the .Net Core Project System, the WinForms project needs to be removed and its dependencies need to be turned into a dll reference instead of a project reference (it might be possible to have them in the same .sln now, I haven't tried in a while). 
Yes. Basically, you have three levels of full framework vs Core: * Runtime: The CLR that executes your IL code. * Libraries: MVC 5 and EF6 is compatible with the full framework only. MVC Core and EF Core have packages for the Core runtime AND the full framework (1). * Tooling: The bits used to work with the environment. In the full framework you rarely deal with this (Visual Studio does this). In Core, you don't have to either, but in my experience it's the best way to deal with EF migrations, for instance. (1): https://www.nuget.org/packages/Microsoft.AspNetCore.Mvc.Core/
What about adding a feature to the program that will allow me to enable Windows Hello and simulating that a fingerprint reader is connected and send a code that will unlock the pc?
I don't know. I suspect anything that interacts with the login process for a Windows system is highly protected and behind several layers.
When we started, we started with winforms. Instead of a car with wheels, we had a window with buttons, a listbox, a browser, etc.
I've tried so hard to make it happen. The security in Windows 10 is really well protected and all I ask is to send keys. You cant even use vnc from the lockscreen.
I'm a big proponent of the all or nothing approach. Otherwise in my experience you've got the start of the lava layer anti-pattern: http://mikehadlow.blogspot.ca/2014/12/the-lava-layer-anti-pattern.html 
You don't need to do anything so hacky, you can implement your own [credential provider](https://msdn.microsoft.com/en-us/library/windows/desktop/mt158211.aspx#custom_credential_providers). This is going to be a lot more complicated than just sending a few key strokes, however.
How you authenticate users in both scenarios? If you bundle them together you are using an MVC endpoint that serves a static HTML with authorize attribute? When separated do you use jwt or standard cookie?
This compiles the source-code to an in-memory assembly then decompiles that into the IL that you the user are shown.
well holy shit you made my day
You may find relevant information under the term "Single Sign On"/SSO. One secure method is generating a cryptographically signed token that can be passed by whatever means from one application/server to another and verified there. This way the two systems don't even necessarily need to be connected in any way. See [JWT](https://en.wikipedia.org/wiki/JSON_Web_Token) for example.
You're probably not going to be able to get php and .net to share an authenticated session. I would take that as a good thing, forget php, and find a .net forum that has shared authentication. I used one a few years ago that would allow shred authentication with the rest of your site, but I'm afraid the name escapes me. Have a look at "yaf forum" , I know we DID use that at one point, but whether that's the one we used on this particular task I couldn't say. Any forum that used standard .net membership provider or indentity provider (depending on how the rest of your site is built) should work and allow you to share the DB and the session state.
Oh wait, you are migrating TO phpBB ? Then you really should reconsider. If your main app is in .net, you should pick a .net forum software. If you are comfortable with using another tech stack for the forum, [Discourse](http://www.discourse.org/) is currently what I consider to be the best one from a user perspective. Again, I understand that you might not be free to pick up that choice for various constraints, but it would be the "right" thing to do. If the documentation talking examples in vanilla ASP wasn't enough of a hint to the state of phpBB...
Cool, thanks. I'll take a look at them, but at this point I think the CTO will be displeased during our meeting tomorrow if I'm just like, "So forget everything I've done the last month and a half, let's go with this other product I found yesterday" :(
Sorry :( Then again, he might be pleased to not have to deal with PHP anymore :) Its always better to pivot early than to rack up technological debt. And if you are back on familiar grounds your productivity might allow you to still complete the project on-time. 
I would avoid Discourse like the plague. While the software itself may not be bad, the lead developer (Jeff Atwood) threw a tantrum then banned all the members of The Daily WTF community from the Discourse support boards because he didn't like how one bug was reported. No, seriously, an entire community was banned from the support forums [because of a screenshot taken on an android phone web browser to show a bug instead of a desktop web browser](https://what.thedailywtf.com/topic/17231/wtf-how-can-this-be-so-wrong-aka-the-discopocalypse-thread?u=abarker). As for why this is relevant, The Daily WTF was asked by Mr. Atwood to do testing of Discourse... even going so far as giving Jeff Atwood and fellow Discourse developer Sam Saffron admin privileges on said board so they could check some of the metrics themselves.
Since phpBB is open source, it is possible to rip out its authentication subsystem and replace it. The only catch is that any later upgrades to phpBB would need you to do this same replacement. Maybe put it in a separate file and `require` it would be a messy solution to that. As for older software, PHP isn't known for making breaking changes. Usually, there's a toggle somewhere in php.ini to re-enable older behavior even if it isn't recommended.
Cool. Must read later
Here == this thread tweq is the only person I saw when I first got to this thread that had real info on SSO and the RIGHT way to do this. One person just talked about how this guy should change his BBS/Forum software, another said you can't share authentication across .NET and Php apps (yes, you definitely can, it's called SAML or JWT), and then finally someone mentions pulling the authentication system apart from phpbb and updating it and that's just insane. So yes, tweq was, and still is, the only person with good info in this thread.
I put a few minutes looking into this for phpBB. It looks like hacky bullshit all around, so good luck. There's a saml plugin [here](https://github.com/anelis/phpbb-saml) which is probably your most robust solution but it'll require a saml provider, which is additional work. For code that I get to keep I'll always go for the more robust solution, but for this you may just be better off hacking something together like most other people did.
I'll be totally honest, he could have just created and compiled the project directly on the Raspberry Pi using the `dotnet new` and `dotnet publish` commands. The `helloworld.runtimeconfig.json` file is generated at compile time based on the version of .NET you compiled it on. As a general rule, increasing that version should be fine, but decreasing it may cause issues if it references classes that don't exist in older versions of .NET Core. As for json files, the most recently released tools for .NET Core ~~1.1~~ 1.0.3 on Windows finally ditch project.json and instead use [project].csproj files instead. ~~I'm not sure if the 1.2 beta tools use it, but the latest 1.1 tools on amd64 Linux still create project.json files.~~ This is because the 1.0.3 tools are the mostly recently released tools and can (oddly) also target 1.1 This is important to know, because project.json is how you define the NuGet dependencies a project uses. NuGet is .NET's primary dependency manager and is used to pull in things like ASP.NET MVC, Entity Framework, and other technologies you might use. (Side note: `dotnet new` creates a Console project by default. Its `-t -h` arguments will give you the available project types) 
Fine thanks, just reporting spam and you?
Oh man ... you are looking at year 2 to be sort-of productive and not a net-negative. Learn how to use a debugger. Read other people's code. Read technical articles. Try to follow logically the code. Ask questions. A LOT OF THEM. Don't be afraid of asking for help. we all were like that in the beginning. :) Also, if you are in the .net world, would recommend learning C# unless your company is strictly vb.net. Create side-projects for your own entertainment. 
PCRE has its own unique features.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/csharp] [\[REQ\] .NET wrapper for Stanford Network Analysis Platform (SNAP) \[x-post from \/r\/dotnet\]](https://np.reddit.com/r/csharp/comments/5rtag3/req_net_wrapper_for_stanford_network_analysis/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
Honestly, a while. I had developed for myself for like 2+ years before i got my first professional gig. My first week i was so overwhelmed. The web in and of itself is such a large domain, so it's tough to wrap your head around all of it. You should pick one area and focus on that if you can till you feel comfortable. I'd start with MVC controllers. Understand the request pipeline and what the request had to go through to get to the controller, then what will happen after the controller. There are a lot of other pieces, SQL, Html, js, etc, so just try to pick up on those as much as you can along the way. Once you feel really good about MVC, move on to the next topic that you feel is the most important. Believe it or not, it won't take you as long as you think because you're in it every day. Read books at home. Watch Pluralsight courses. Find talks on YouTube. There's so many resources to learn. Good luck! 
User /u/nsivkov has great concise information here, make sure you start to learn C# regardless. And he's right, you won't be productive for awhile and be a bit of a burden there. It's not a bash, it's just accurate. That's how everyone starts and they should be expecting it. Ask a lot of questions, but also learn for yourself too. Struggle and work to grasp some concepts on your own, because that will help you have some "Eureka" moments where things click. Find the balance between asking for more help and working through it yourself.
Pair programming - it's the fastest and most in depth way to pick up an entire tech stack plus the domain knowledge.
I'll also be totally honest: i found this useful.
I have been programming for a long time and stay very current with the latest tools out there. Some thoughts 1) You should always be learning and improving 2) Keep it simple -- if something is complex you are probably doing it wrong and look for a simpler solution. 3) When writing code be organized and consistent. 4) When I knew a little I thought I knew it all, now that I know a bit I realize how little I know 
It does as of version 3.1 But I don't know anything about oauth. Googling now...
&gt; with examples in Nancy No thanks.
thanks for the recommendations on Julie Lerman's books, checking them out now.
Years it will take at least 2-5 years and at that point you still only understand a fraction of a drop of water that is in the bucket of everything you can learn in this field. ProTip: The second you start thinking you have got all this down is the second you start letting your skills and knowledge slide. 
If you have gotten on with a shop that has senior devs, then you may be in luck. If these are good to great devs, let me assure you that nothing strokes their egos more than being asked for help. However, follow this advice: 1. Queue up similar/small questions so the number of times you go to a dev in a day is limited. We love teaching, but hate getting interrupted. Once or twice a day is fine, every half an hour will get you on their shit list. 2. Record/write down what they tell you so you never have to ask the same question twice. 3. Never be afraid to own up to a mistake, even a big one. By taking ownership of a fuck-up, you show you can be trusted to not let it slide under a rug, and that you are more interested in fixing a problem and learning from it than hiding it. Bonus points if you come to them with a remediation plan already in hand (although critical emergencies like deleted production data - *cough*gitlab*cough* - require immediate attention). 4. Ask them for sessions (maybe a half hour to an hour) where they walk you through some of their work and explain the reasoning behind their design choices. Some devs can do this, others are too instinctual and will not be able to articulate *why*, only *how*. 5. Ask to have near-historical examples of their work to go over and screw around with at your leisure. That way you can examine their work directly without fear of fucking up code destined for production. 6. And probably the most important - Google all your questions first. If you can show that you’ve done your due diligence and homework, but have become tied up in ways that Google can’t help (or haven’t found anything relevant in the first place - rare but possible), you should be golden. On the other hand, going to the devs to ask how to do a Ternary operation in C# will get a rather annoyed response to “just fucking Google it”.
What's wrong with Nancy?
Buying a .NET Core book at this point seems like a bad move. Things are moving so fast that it'd be outdated fairly quick.
I think the concepts will be long lived. Unless you're looking or a recipe book I think you're fine.
This book is about concepts. The examples are in .NET Core but you can use them in other technologies
Everyone has given good advice already. [Just stay calm, and you'll get through it.](https://www.youtube.com/watch?v=0lo2mx8lYOE)
Bought one as well! Thanks for the discount!
I couldn't get source code to work. Ran it and couldn't find the page. (Chap 1)... maybe something related to nancy. wish I could get it to work because they talk microservices at work and I want to have a book to give me clear examples of what to expect
A bit crap you can't download the Kindle version more than once, now I'm stuck with PDF after a Dropbox upload failed.
Being able to use a debugger is an essential skill. Being able to write unit tests is not. 
Wrong. Just plain out wrong. TDD has its place and testing is crucial, but "do not learn to use a debugger" is frankly just shockingly poor advice.
I think it has something to do with the concept that you can teach someone a language you can't teach someone a desire to learn, and willingness to do work.
Well, I don't know where to look for that. I assumed Session.("WindowsUser") was something inherited from the framework he was working with. The call tree goes back to System.Web.UI and the header of the page has a line CodeBehind="intra_template.master.vb" Which continues my belief that this is a VB .net app I hoped Session( "WindowsUser") was some commonly known system call. When I search the code for all instances of Session I get around 8,000 plus hits. when I search for Session("WindowsUser") I get 14, none of which are assigning a value to it.
This is a good answer, but I would like to say that Git is much, much better at branching and merging than TFS is. You can use Git repo's in TFS now so it would be pretty easy to try some of your branching and merges in Git and see how well they go. Having said all that, if your code is a mess then it will still need to be refactored and cleaned up. Nothing beats team communication to make sure people aren't stepping on each other's toes. One other thing to consider, why do you need to update the code so often? Are you sure that you can't move a lot of configuration to be in a DB instead of in your code?
That's my assumption as well. Someone else pointed me to IIS Authentication which was different. Now they are the same.. still same error. Not sure if I need to restart something to make the change I made take effect though.
Make the settings changes and just recycle the app pool that hosts the site. If you want to be extra super sure, restart IIS. Easiest way is administrative command prompt and type "iisreset". 
The yubikey app can be installed from the windows store. I'm taking from my own experimentation with it. Yubico had a blog post a month before but they are usually not that detailed.
Learning how to use git properly makes most problems go away but nobody really ever learns how to use it properly, unfortunately. Most people don't have any clue what they're doing
Might be a good place to start: http://up-for-grabs.net/#/ Basically a bunch of open source projects post issues that need work. Would give you good exposure to a bunch of different projects.
Any new job will take about 6 months before you start feeling comfortable, especially when you are joining a team with an established code base. Just keep in mind that you will be doing it wrong for quite a while, but don't get defensive and don't become overly attached to your code. Grab every learning opportunity you can and don't stop. You don't have to be perfect, just learn from your mistakes and show steady improvement.
One other thing to check: your QA server's eventlog may have clues as to why it's not working.
From the review: &gt; There are still few minor topics that could have been covered (like versioning, discovery services, deployment practices, etc.), but these are details one can forgive :) Nope, can't forgive. Those three example "minor topics" are some of the actual hard parts of microservices, and no one needs a book about the easy parts.
Learn to do things the right way on the job and when you go home, learn to do things the right way some more. Eventually you will be a good programmers after about 10 years.... as long as you're not dumb.
&gt; easiest way to restart a specific website is to save a change to that site's web.config file. Through IIS Web config tool, or manually with notepad? I've been using IIS's webconfig tool. &gt; try closing your browser completely (not just the tab) when testing. I take that a step further. I'm using a virtual machine to test, so I log out completely which closes my Remote Desktop Connection then I connect again and start IE fresh. I've noticed a difference between the Webconfig he asked me to edit and the QA one, and since it involves setting an identity impersonate to true for a given user. I'm not going to set a production user id up in QA without authorization.
What's Nancy?
Don't consider any code or any behavior as "magic", as something that just works. Go down the rabbit hole, there's so much to be learned by finding out why things work the way they work. And read books. Lots of it. . 
Agree with all these great answers. Restructuring the code, using Git/GitFlow to improve the branching methodology and benefitting from improved merging functionality are all things to aim for. I would also advocate progressing from Continuous Integration to Continuous Delivery. This will require a large allocation of resources (both in terms of personnel and equipment) as well as commitment from management to achieve, but being able to prove and deploy any change will give much-needed confidence in the quality of your code and that you're not going to inadvertently screw one or more of your clients. 
You should not branch your code by environment. All work should be checked into either the trunk or a feature branch and then merged to the trunk. When you deliver your code you should be labeling it (a branch). Fixes to in production code should then be done in the trunk and merge back into that branch and however many versions back you support. If SAAS then only one and you're good. The idea of using SC to isolate your dev and test environment is ultimately wrong. You need to build your code continuously and save the result of the build and test against that. If it's broken in test you should fix the mainline, unit test in dev, check in and redeploy the test build. Once you release the code, that should be branched and labeled. To improve your productivity I suggest continuous integration, gated check ins and continuous deployment. It's easy to spin up a VM with your code deployed for a specific branch or even revision. Even easier would be to support SxS installations but ultimately you need to test environments too so either a VM or Docker can mitigate environmental differences. Merge conflicts can be avoided by using exclusive locks but between trunk and a label this is not possible -something will need to be merged. There should be a senior developer on your team that has worked in a full sdlc or you need to hire a consultant. Have that person setup a process that everyone follows. It will be painful at first but once you get used to it you will find its much smoother and scales better than Wild West programming. Edit: gated not gates. 
That's cool - I didn't know Twilio partnered with Microsoft too.
Yeah, I don't want to do it that way. I would feel pretty guilty.
Hi, thank you for your comment. Basically, I have a mentor. He is the only software developer, in the junior so basically two developers. I take it that it's a good thing but I'm not sure. He said it takes around 6 months to catch up so basically I'm doing 6 months of training, on my own as well as his help. He's giving me a mini project, which I think he wants us both to be working on. So that's my situation. 
Thank you, I don't have any personalities, the company has two developers me being one. The other is the senior, who is kinda like my mentor. I have my own office for training for 6 months with his help. I just need a way(plan) on how to become better, YouTube videos ? Pluralsight( seems to be mentioned a lot). Books? What books ? Courses? (Company is happy to pay for them). But thank you! So much for your help 
I've tried to do that too, and in my opinion from experience, it's a fool's errand.
I don't think any particular flavor of source control will help you. What will help is an automated pipeline that builds code from dev, runs tests and deploys to a test environment. Then some way to deploy the same code from test to prod.
[removed]
Before changing anything, start removing complexity. This includes "helpers" (and I put that in quotes because anything that's a "helper" is usually a pain in the ass). Most of what you rambled on about wasn't really useful to understand what the actual problems were. At least you might feel better after venting though. If you want actual help, provide actual technical information.
Typically there is a separate context per database. In this case, the repository pattern might make sense moving all of those database queries into a repo on a per context basis. If the database is normalized with relationships it will typically be DbStore - Server Validations - Logic - Client Validations - View Data 
For the database, use SlowCheetah to modify your connection string for each of your Debug, Test, and Release build configurations.
These haven't been come up to my mind. Thanks for great advices.
[removed]
Sent private message
I think there is a large interested in the subject of onvif and .net. The blog is fine, a little sort. Onvif is a challenging subject, its a large used standard, with different profiles / versions. 
Do be warned there is no accurate way to distinguish pages unless his website is structured as so. Could still work by marking the X first DIVs as printable. 
Right. I just assumed (perhaps incorrectly) that OP really cares about specific content rather than the page number. It seems odd to want the user to only print the first page regardless of what content it contains.
Yes, modifying the connection string in app.config.
We don't have enough details but I'm guessing he wants some sort of paywall for the website print. I could be wrong.
That's a possibility. But in that case, the content should never be delivered to the client to begin with. Not that there aren't plenty of paywalls out there that use CSS or JavaScript to "secure" licensed content. Haha.
I hope so, as I find it fun to explore new things, even if they might be complex and hopefully help someone else if I share what I find :) Thanks for comment, but do you mind elaborate what you mean with "a little sort"?
Why private message? 
Woo! Thanks :D This is actually really big news for cross platform GUI's.
X-Post referenced from [/r/csharp](http://np.reddit.com/r/csharp) by /u/Frozen1nferno [Let me know what you think of my first NuGet package, NYoutubeDL](http://np.reddit.com/r/csharp/comments/5sba3o/let_me_know_what_you_think_of_my_first_nuget/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Figured this was relevant for both communities. NYoutubeDL is a simple and easy-to-use library for interfacing with youtube-dl via C#. It's a cross-platform .NET Core library, so it works great in Visual Studio, MonoDevelop, and Project Rider. Feedback and criticism is welcome.
Oh yeah it's a half assed solution . Plenty of paywalls that are as bad or worse.
The problem with all those certification exams is that... they don't test actually useful knowledge. They test your knowledge about some very specific stupid things like being able to tell which two of the four blocks of javascript code have syntax errors, and which one of the remaining two has a runtime error... Or, you know, I could do like a good dev does AND WRITE TESTS FOR IT and not try to wrangle my brains in an already stressful exam on a crappy 15" screen with a resolution that doesn't let me read the question and the choices at the same time! It's even worse if you started out fairly recently and went full on with the latest stack - you're almost guaranteed to get every last one of the XML configuration questions wrong. Certification is a joke until they decide to ACTUALLY start weeding out the non-hackers and make the certification exams dynamic and correspond to the most current best software development practices, asking you questions more along the lines of writing maintainable code and even more importantly - asking you to WRITE code. While it's bull in situations like job interviews (whiteboard coding), in exams - that's mandatory. If the exams are designed around static select options, I'm sorry - every man and their granny is going to cheat on it, and you're half expected to. In short: Get the practice exams and stop feeling bad about it. Every outsourced code monkey from India does that exact thing because that's who the exams are basically made for. It's not your friend, it's not something you study for. It's something you learn the answers for, and then regurgitate them later. Sorry if that's not the answer you want to hear, but it's the only answer there is. 
[removed]
&gt; From the name library it suggests that it handles all of the downloading itself, but it uses a third party program for it. So I'd call it a wrapper, personally, as that's a common name for code that works with an external executable like that. I had that debate with myself. I just didn't like how lengthy it started to get by adding Wrapper to the name. Good point, though. &gt;Also, you have one giant file with many classes and interfaces. I'd split them up. Nah, it's just one class. It has some enums in it, sure, and I could break those out pretty easily. But as a whole, it's one coherent object class.
Ah, I gotcha. Yeah, the main reason I haven't set up unit testing is because I haven't decided how I want to approach it yet.
Proof of concept
Moreover, it's one class with 700 lines, which is far too big, I would outsource parts of the functionality in seperate classes, this would make it more readable.
Yep, proof of concept. And we'd be looking at the MVC5 &amp; jQuery module. The it's a relatively cheap framework if it does what it says it does and just provides a solid backbone to start a portal on. I'm not sure if it does, and was looking to find someone with first hand experience in it. To just hire to build a small application as way to kick the tires.
Here's the thing: that person is not part of your team. I don't think they can give a good contribution to whether it is a good framework or not. If one of your team can take one or two days just to play with it then you will get a much more beneficial input. 
...One giant class? No thanks. It needs to be split out.
How would you go about that? It's one object that controls one thing. Multiple classes would just convolute the control flow. Sometimes less is more. 
&gt; It's one object that controls one thing. Multiple classes would just convolute the control flow. It's a god object. The sheer number of public properties is the first give away. The second is the size of the god object. A lot of these extra features and options can be pulled into classes of their own.
I agree with the sentiment, for sure. But god objects do have their (very limited) uses, and I feel like this is one of them. The background process is really the god object, everything else is just data that flows to it. I could split the properties into data classes, but all that would get you is more lines of code and more convoluted control flow. I see what you're saying, I'm just not sure it makes sense in this particular use case. I might give it a try and see if I like it more, you never know unless you try, I suppose.
Why didn't you take the person who showed some interest? Its hard to gauge if $200 per form makes sense; Personally I wouldn't take a chance on such a small project. You might have better luck with an hourly rate. Did you always post questions with your offers? That might bring out the sarcasm. 
Can SerialPeripheralInterface be used as a stand-alone library for RS-232 communication? One of the things keeping me from using .NET Core is its lack of a serial port class and the .NET Core team's dismissal of this important functionality. There are a couple of amateurish/abandoned ones on NuGet but I don't feel comfortable using them in production.
It was an outsourcing company from India -- I am looking to work with a person not with a company. I want to interact directly with the programmer. I didn't mention that in the post it is $200 per form right now we are looking at 10 forms. If this works out well we want to get the person involved in additional work.
No, SPI is something entirely different. https://www.maximintegrated.com/en/products/interface/controllers-expanders/MAX3107.html You need something like that, to convert SPI to UART. I agree, it's shocking that .NET still doesn't have a proper serial port class. Allegedly, the guys who wrote the existing one for .NET had never even used serial before they were just given a rough shitty requirements list. Ideally they would have worked on it with some of the kernel guys who were familiar with the Windows API's for serial.
200 US$ per form is a joke.
I see. The wait continues then.
I'm not in a hurry to move to .NET Core, I'll just wait.
There will be following posts which will demonstrate the pieces with code examples. This article focuses on overall design and main goals behind the approach.
I had the same problem on a dev box recently on windows 10. Only happened on one machine Solution was to download and install IIS express manually. Try 10 first, if that doesn't work uninstall and try 8. 8 isnt preferable but you'll have no issues for the class. I honestly forgot if 10 or 8 got me past it. On a side note, after reformating the box I had no problems with a fresh install. https://www.microsoft.com/en-us/download/details.aspx?id=48264 https://www.microsoft.com/en-us/download/details.aspx?id=34679
Figured out how to slim down docker images for .net core and wrote it up. Figured it might be useful generally - esp since the default generated in VS is so fat. 
Update: No luck on either of those suggestions :(
Ok then it sounds like it might be a failure to build issue. Do you have more than one project in that solution? If so, make sure your MVC project is the one set to start by right clicking and setting as startup. Also, right click and build each project individually and see if any are throwing errors. And finally there's more recommendations in this thread http://stackoverflow.com/questions/5864520/error-while-trying-to-run-project-unable-to-start-program-cannot-find-the-file
This is about what we do at work. Smarter people than me have come up with the process, so it must be good.
Thanks for the article Adam! It was very useful, I've built our build process/CI pipeline based on your suggestions. We ended up ditching CAKE though, and we're just using plain bash scripts now. Any thoughts on why we should stick with CAKE on the long run? :) Cheers, Tamas
+1 to this. Also, Forms at moment aims to address the UI in simple apps, although you can write your own native elements and later expose them to Xaml. The performance is close to native, specially in iOS because the code is AOT and there is no runtime involved. The Android version is more complicated to explain, but allows the .Net runtime to communicate with the Android one. I'm one of the guys behind the iOS platform, so I'm more than happy to explain our side of things if anyone is curious. Also, we are open source now :) https://github.com/xamarin/xamarin-macios
Is there a good tree view control?
About 12 years. Started with BASIC on my Texas Instruments calculator. Learned Visual Basic after that in school and now coding professionally in C#.
If IIS Express fails completely, just install regular IIS. It's a windows feature so just add it via the "Add/remove Windows components" setting. Just create a website there with some port and * as a domain, point it to your solution folder and assign an application pool with your .NET version. Then just switch the debugging in the VS project from IIS express to local IIS and hit that "Create virtual directory" button. It should work the same as with IIS Express and you can also debug the same.
Around 19 years, 13 or so professionally. I started learning to program when I was 9 when my uncle gave me a copy of VB4. I then moved onto VB6 and PHP. When .NET came out I started out with VB.NET and then moved onto C# a few years later. 
Hobbyist since I was a kid with a Vic 20, professionally since 1999. 
I just started going through some of xamarin's tutorials and I think I would agree that it's fragile. I've run into a lots of problems compiling for Android and even when it does compile I get immediate runtime errors. I've figured some of them out but overall I feel like I spend a lot more time figuring out problems than coding.
Xamarin is tough to set up (let it mature enough maybe), but it's worth it. Now I can make native or portable apps with my favorite language :D
Recently, like 2 months ago maybe.
If Unity was more CPU-friendly, I'd develop non-game apps for mobile with it, but even the simplest screen of buttons and lists will suck your battery dry like it's an intense game. (And yes for any Unity apologists reading this, I've tried the FPS limiters and all the other optimizations I could find.)
I have written about this very topic on my blog among other related topics: https://thedon.me/2016/11/15/is-xamarin-worth-learning/
A comment in your blog convinced me to not learn xamarin
I don't feel like there is a ton of difference between the two regarding "weight". Run 10.
I see how being outdated can be a problem, especially in a corporate environment... I guess I'll try w10 and see what happens.
Ya I definitely wasn't advocating for mixing the two...I linked a SO post mainly because it *is* possible, just not something that would be smart to do. I also never said Angular would be able to parse the Razor stuff...I actually said it wouldn't be able to, though the amount of effort to use a cshtml file as a template is much less than I thought it would be.
X-Post referenced from [/r/programming](http://np.reddit.com/r/programming) by /u/avikeid2007 [How to create a WCF Service and host it with Windows Service .Net.](http://np.reddit.com/r/programming/comments/5rytrs/how_to_create_a_wcf_service_and_host_it_with/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
In 1978 with a programmable adding machine that had a cash-register paper printer. Did ASCII art, dealt blackjack hands, etc. Moved to a DEC PDP-11/70 time-share (aka, the Cloud), on a combo keyboard / 128-column printer, which was simply amazing in the late 70's. This was my first experience with BASIC, where I learned to increment line numbers in my code by 10. From there, Lotus 1-2-3 macros, then Symphony, on IBM PC's with dual 5-1/4 floppies (we were well-advanced past 8-inch floppies by then). Advance to today, and my phone has 100x more power than that DEC VAX which supported 100's of users. My BI cubes process 1000 x 100 more rows than my largest data set that I could imagine in the 80's. I can't wait to see what the next 40 years brings. 
Two months ago, I wanted a mobile app to shutdown my NAS. All I did was to install visual studio 2015 community edition, and I was ready to go.. Here you can see what I did : https://github.com/blackhorus/DnsShutdown 
I don't have much details, but it works as you explained, but not running on the local server!
Never heard of it, it just looks like a basic website with the SuperHero bootstrap skin: https://bootswatch.com/superhero/
Can we.. please not... do stupid meaningless polls and resort to discussions instead?
I tried it out a long time ago. I've since come the the conclusion if you want a CMS then ASP.NET isn't your best call and WordPress is hard to beat.
Scary. I'm not sure I want to know any of those things ;)
Its a CMS using bs for their site.
&gt; long time ago Times are a changing. https://github.com/quozd/awesome-dotnet#cms &amp; https://github.com/thangchung/awesome-dotnet-core#cms show a few options, and there are more...
&gt; deeper. And deeper. And even deeper. Go to definition. Oh, not that one, the other one. Oh, a little bit deeper. Yes! Coding porn? ^yes ^that ^exact ^quote ^appears ^in ^the ^article
&gt; https://github.com/thangchung/awesome-dotnet-core#cms Some of those have been around years and I've tried a few of them (and some of them quite frankly are very poor). Umbraco is probably the best and it's tiny in comparison with WordPress and only runs runs on Windows.
Just use Parallels instead of boot camp
I like this library -- https://github.com/richardszalay/mockhttp -- to mock http traffic, because you can "expect" specific calls to be made, very easily handle different requests with different responses, and make sure you don't have any outstanding requests or unexpected requests. 
Does anybody know how close is the project file format to its final version? I have over 50 sample projects to convert and I don't really want to do it twice.
New new things :P
From what I understand, the csproj changes for the 1.0.0 release have all been finalized at this point
Huh. I knew Magicka was C#, didn't realise it used XNA.
I posted a link to a project made with Xamarin. Sorry if you can't see it!!!
no, apple makes it super easy to make a bootable usb (most macs haven't had disk drives for a few years). also, apple makes the windows install process pretty straight forward with bootcamp.
I remember when I was excited about .NET Core. Now it's just an unending pile of crap and file formats. I am not looking forward to making a library I wrote function with it.
If your library is an MSBuild project as opposed to project.json, a lot of pain switching to Core goes away after the csproj switch hits RTM.
The format should be stable. You could grab RC4 and try converting a few to see what happens.
Good, I avoided .NET core totally when I wrote it, as it runs on Mono. There's nothing technology specific in the library but Mono was the only sane Linux target for it at the time.
Yeah you don't *have* to know about any of them, but sometimes it's fun to peak behind the scenes
I'm more curious as to the statement that wrappers are generally not a good idea. Not specifically in regards to httpclient. More the blanket statement. I'm not a big fan of blogs that make wide sweeping statements without backing it up. 
write tests for the wrapper.
I didn't see this comment before. Most of my bugs and likely slowdowns were from Forms. There were one or two Mono bugs, but it was Forms mostly. Sometimes the Xamarin infrastructure was very frustrating, which wouldn't be limited to Forms, but for the most part it's something you learn. I'm not certain about the slowdowns on Android honestly, I suspect it's Forms, but then why is it so much faster on iOS?
Ahhh, yeah it's been forever since I've used those controls. I've become a master of the kendo ui (javascript/jquery) controls lately though. Good luck on your quest!
Modern web apps take very experienced engineers and/or entire teams of people. It's very common for someone to be a full-stack developer these days but getting there takes *years*. This is completely normal! If you want to escalate this, I would focus on the area you feel the most comfortable: * Front-end (HTML/Javascript/CSS), * Middle-tier (C#/ASP.NET/MVC/WebAPI/Entity Framework/Azure) * Back-end (T-SQL/MS-SQL Server) * Infrastructure (.NET/Windows/TFS/Azure/Networking) Picking one of these will take you about 6-months to a year to start feeling proficient (so trying to chew all three will take you 1.5 - 3 years). The good news is that once you start getting proficient in one lessons learned really translate through all areas. Beyond that I would focus on Line-Of-Business (LoB) applications that do CRUD (Create, Read, Update, Delete) as this is usually the simplest form of *n-tier* web application. As others have said I'd switch to C# is you can and I'd start following tutorials and read as many articles as you can. Good luck!
Xamarin really needs to fix the install process. Just starting a blank Xamarin app is broken (especially if you plan on using XAML pages instead). Just saying...
Yes, I understand what all of it means. It's shitty and disorganized.
It works exactly like you'd expect it to. It's part of the installer. The doco is a mess because it was a separate product a year ago. It installs even faster and easier in 2017.
One obvious reason is that if we can do it without a wrapper, why create an extra layer of abstraction? and then possibly we need to test that wrapper too, anyway, I'm sorry I should have written it's not a good idea to create it if we can avoid it.
This is good news. I like how MS is opening up the development environment to more choice. I rarely need to use the full blown Visual Studio, so being able to manage a project solely from the CLI is great.
&gt; C:\Users\scott\Desktop\poop Lol :) That should be the default system folder for quick experiments.
It's not SQL (server) permissions, but .NET (framework) permissions. Have a look at partial trust/full trust and "Code Access Security".
Yeah, last time I tried Xamarin, it failed to finish installing and I couldn't create or compile the default app.
Testing this right now.
&gt; It works exactly like you'd expect it to. Then why even have the docs? I don't have much confidence in a company whose product documentation is a mess.
But then I'm back to needing to mock the httpClient ;) 
It seems odd for the DB to be deciding the http error codes. Why is the result list made up of objects? Are you not using some sort of OR-mapper?
Did you check css files? Is it Javascript menu or .net?
All the CSS files are identical and appear in the list of files in the same order on test and prod. (I [posted](https://www.reddit.com/r/css/comments/5sowqj/menu_different_width_same_css_same_aspx_different/) and was problem solving with folks over in /r/css yesterday)
Well I was thinking since there is already an error code convention ( HTTP) and my API should return these error codes, why not return them straight from the DB? Also I am not using a mapper... Maybe I should, but I'm using viewmodels and JSON to serve data from controller to view, and the data isn't often very normalized. I'm not sure what to do here...
It's a distributed graph database and query processor. https://www.graphengine.io/
Unless you're going to do heavy graphics-related things or gaming in Windows, it's probably more time-saving to just install in a virtual machine such as VirtualBox (free) or Parallels (I think free?). In my experience, at least on my old 2011 2.5Ghz i7 MBP, Windows couldn't make use of the turbo boost and had bad battery life because it was always using the discrete graphics (AMD) instead of the integrated one. I ended up using VMware Fusion
Well, ofc I searched and looked on the main web site, I just didn't quite understood what it is. At first I thought it was some kind of distributed WorkflowFoundation. Anyway so I guess it's something like Neo4j? :)
I'm excited! Anyone know what is coming? 
What does that even mean? Can you explain how a distributed graph database works!? How it difference from a regular relational database, and when you'd want to use a graph database? 
Visual Studio 2017
yep it is dead for sure. Most people are just going to develop a web API on the server and then have a pure JS, CSS, and HTML front-end. Razor is horrible to deal with especially when you use separate .js files for your javascript.
Test server show ASP.NET v4.0, ASP.NET v4.0 Classic, and three BodDetectAspNet20AppPool (and 35 and 40) Prod shows .NET v2.0, .NET v2.0 Classic, .NE v4.5, .NET v4.5 Classic andClassic.net AppPool In Production there's also a column for .NET CLR Version, and for my app it shows v4.0 In Test, there is a similar column with a title of .NET Framework Version with V4.0 showing in it. The closest thing I can find in the config files i that there is a commented section that contains the line &lt;httpRuntime targetFramework="4.5.1" /&gt; There isn't even a commented version of this in the Test config. And... Ding ding ding.. we have a winner. Prod: &lt;pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/&gt; Same line was commented out in TEST.. no clue why. I uncommented it, recycled the pools to make sure the change took.. and now my test menu is the same length as my production menu, so my users should be able to successfully navigate and parallel test this legacy version against the new version. Thank you for your help.
No BI tools I guess ?
A graph database is a database that stores information and objects in a graph instead of in tables. Most graph databases model relationships that are inherently non-relational. They are especially useful for semantic and nearest-neighbor style queries. The canonical example is something like Google's Knowledge Graph or Bing's Satori. Check this out: https://arstechnica.com/information-technology/2012/06/inside-the-architecture-of-googles-knowledge-graph-and-microsofts-satori/ A distributed graph databases would work like any other distributed data store such as Google File System, BigTable, Hadoop DFS, Amazon's EBS or Dynamo system, etc. There a bunch of papers on the topic if you want to dig in. Many of the implementations are open-source too, so you can read the code if you want. It looks like GraphEngine is the long referred to Trinity project in MSR that underlies Bing's Satori system.
So [this](https://developer.xamarin.com/guides/ios/getting_started/installation/windows/#Linking_to_your_Xamarin_Account) page is wrong?
[removed]
Congrats. I'm glad I could help. Just FYI not all of those app pools are the ones your site is running on (usually one per site). There's probably only one that your site is associated with. The rest are usually just sample app pools that come with the IIS/Windows Server installation.
Did you not read the bottom about community edition? There was always a 'free' version of Xamarin, but it was useless because it was under the GPL and Apple won't host copyleft software on the app store. Community is Microsoft Public Licence so you can do whatever you want.
Technically accurate
Maybe give 2017 a try, it's still RC, but the release is in about a month and the install process sucks a whole lot less.
It's noticeably faster than 2015. 
Separation of concerns is the point. You see how in the first pattern you described, your view needs to be bound directly to your model in the codebehind. Want to change your UI? Better make sure you change that codebehind property over. How about if your models change, oh shit - now it's time to change your codebehind of all your views that rely on them. Without separation between different tiers, small changes cascade through your entire app. More things to change and more things to test to make sure they didn't break. Usually you should avoid binding directly to your models, a better practice is to bind to an intermediate ViewModel type class that implements INotifyPropertyChanged. This ViewModel class can handle fetching the data and doing whatever magic it needs before updating its own public facing properties and calling PropertyChanged when it does so any databound views can refresh. This leaves the models "dumb" in that they are only responsible for persistence and the views "dumb" in that they are only responsible for presentation. Consider if you had to change the persistence from a database store to a web service, or if you had to implement some kind of caching - by using ViewModels and data binding you can handle that in code without changing your XAML views (or their codebehinds) at all. Consider how easy it would be for a designer to take your view apart and redesign them knowing only the public interface of the ViewModel. Your model changes? No big deal - just remap it in the view models. Your view changes? Doesn't matter, just move your bindings over to the new UI elements and you're fine. It's true that configuring binding and commanding in vanilla WPF is less than elegant. Rob Eisenberg created a library called [Caliburn.Micro](http://caliburnmicro.com/) which tries to address these faults by using convention based data binding and actions. If you plan to use WPF in any depth with data binding it will let you use this MVVM pattern much more naturally. 
You can make your INotifyPropertyChanged implementation easier using a framework. Some people like MVVM Light, but I prefer Tortuga Anchor. Here is an example, public string FirstName { get { return Get&lt;string&gt;(); } set { Set(value); } } It isn't much more verbose than normal properties. Plus you can get cool things for free such as validation, change tracking, and 2-level undo. https://docevaad.github.io/Anchor/Modeling.htm
Since I see a Mac at the screenshot as well with Visual Studio. Are they going to release Visual Studio for Mac as well then? 
Have your vote! I fell right into that one.
If I recall, "VS for Mac" is effectively just Visual Studio Code. http://m.windowscentral.com/microsoft-announces-visual-studio-2017-rc-and-visual-studio-mac
Be gone.
I think VS for Mac is Xamarin Studios. Xamarin Studios isn't half bad either. Not as good as VS obviously but not unusable either.
Or someone can do the legwork and document the basics for the POC app and streamline developer uptake!
Yeah, but is it worth? I mean, does Xamarin *really* work? 
You can dl the RC version already, it's pretty stable :)
MVC seems quite powerful, don't know if is it possible to start from scratch tho.
One day pal, one day...
I don't think Microsoft would have purchased Xamarin and continued their product line if it didn't _work_ (whatever that means).
False it's effectively Mono Develop (or Xam Studio)
Yup it's what I do every day
I mean, without any experience server-side. Thank you btw ! :-)
Thank you, but as you have probably noticed, English is not my primary language :-)
In my experience you are doing something wrong in implementing MVVM pattern if you need to reference UI elements in code behind Cs files ;)
I just started a course on pluralsight called "Building Your First API with ASP.NET Core. Here's the description from the course: &gt;"Both ASP.NET Core and Entity Framework Core have been built from the ground up, and a lot has changed. ASP.NET Core isn't an upgrade to ASP.NET, it's a new framework altogether. In this course, Building Your First API with ASP.NET Core, you'll learn about the important concepts of ASP.NET Core related to building an API, like working with middleware, MVC, services, and Dependency Injection. First, you'll start out with the basics to ASP.NET Core including how such a project is structured. Next, you'll explore how to implement all the functionality you'd expect from an API. Finally, you'll discover how to create a database using a code-first approach and how to work with migrations. After this course, you'll have a good understanding of what ASP.NET Core is and how to build an API with it." I'm only two videos in so it's still too early to tell if it's any good but I'm currently using the free 3 month trial period for Pluralsight provided by my Visual Studio Dev Essentials account.
I'd second the shout for using IIS instead of IIS Express. It also has the advantage that you can view the website without having to start it through Visual Studio (or even have it running). I wrote an article about setting it up last week, which might help you: https://goo.gl/s55rs2
Another aspect you have to look into when deciding Foreach vs For is memory consumption. If you have 100,000,000 million records in a database and you need to iterate over them, you probably don't want to bring them all into memory at once. Foreach will allow you to build a IEnumerable implementation that will page through the records and make it seem like all the records are in memory. Foreach/IEnumerable are very powerful because of this ability to delay execution and loading into memory.
I've been running Windows in virtualbox for five years now as a Windows .net dev. Windows 10 feels a lot lighter and faster than 7 ever did. But I did uninstall a bunch of stuff (crapware, like Skype) using powershell. I'm running this on a fairly hefty 12-core desktop. It's a pain on my XPS13 with only 4GB of RAM. If you are going to do it on a notebook it might be worth it to get a second notebook.
Fur sure I know some rare situations were code behind is necessary... But in most cases behaviors, attached properties, data templates and converters are enough to write even complex UI. This is what I have learned using WPF and MVVM pattern... ;) And yes, separation is important in both ways as you are writing.
I don't tend to do that without good reason. Creating a new collection with filtering what you don't want is often a good approach. Immutability and all that.
&gt; I think that's rather extreme. The view is the one place where referencing UI elements by name is appropriate. I agree that it's the once place, however I'm of the opinion that you only do this if absolutely necessary - and keeping as little code in them as possible is a worthy design goal. Writing a custom control might be once such scenario where one may need to make an exception. But if you are just writing a regular view that isn't doing anything so complicated that there aren't better ways to do it, then I try to avoid it. I've seen several new WPF developers do this, because that's how it was done in VB6, WinForms and old ASP.NET WebForms. There is a better way - most of the time.
For in-place removals?
I haven't had the need for in-place removals. I think a filter shows clearer intent.
How would the code look like using goto statement? 
I currently have both installed and can use both without any issues.
I'm considering that actually since the notebook has 8gb of ram which might not be able enough. There could be an old notebook lying around with 6gb of ram that I can use instead for Windows only.
Native Android is written in Java. Since you know C#, you already know Java. You'll transition to Android development, whether with Java or with Xamarin, easily.
It sort of depends on what you mean by work. In the write once deploy everywhere sense, no. Nothing actually does that. In the write the backend once and do a custom UI for each platform, but using the same syntax and tooling, yes, it does.
Have you tried updating both ? Both work after being updated ?
Angular is a client side MVC framework. ASP.NET MVC 5 is a server side MVC framework. You really shouldn't use both at the same time for MVC. Create two projects: 1. MyApp.API -&gt; Your ASP.NET WebAPI. It's just controllers returning JSON, no razor views. 2. MyApp.API.Client -&gt; A static html site using Angular + webpack. 
Looks awesome! Thank you! Any plans to add something like ReadPassword() similar to getpass?
Like snarfy says, angular2 and .net mvc does the same job. if you use angular2, you use .net core merely as a service for your angular 2. basically all your html and webpages are built in angular 2 and whenever it needs data you use the api you build on the back end
Anytime that you need deferred execution (enumerables and yield return), its foreach
That might be the way to go if you are dealing with simple mass updates or projections, but now image you are working for Contoso World Bank in fraud detection. You might need to iterate over a large number of transactions and find transactions that happened in a particular order. This can be done way easier in a language like C# or Java than in SQL.
Not that you would write this (`list.RemoveAll` already exists), but to do it and keep the list stable, wouldn't you do it with a forwards loop?: static void RemoveAll&lt;T&gt;(List&lt;T&gt; list, Func&lt;T, bool&gt; condition) { int replace = 0; for (int check = 0; check &lt; list.Count; check++) { if (condition(list[check])) { list[replace] = list[check]; replace++; } } list.RemoveRange(replace, list.Count - replace); } edit: ~~[A while loop implementation is simpler.](https://www.reddit.com/r/dotnet/comments/5t7v37/foreach_or_for_that_is_the_question/ddmfayh/)~~ edit2: I was seriously overthinking the for loop (shows how often I write them I guess)...
To integrate webpack, use task runner. https://marketplace.visualstudio.com/items?itemName=MadsKristensen.WebPackTaskRunner 
That it will be the next Silverlight.
Second this -- I *hate* seeing a project with a ASP.NET WebAPI and a SPA web application crammed into one project -- it is just so gross and messy to have all of the JS config files (package.json, webpack configs, tsconfig, tslint.json, etc) in the same folder as all the ASP.NET project files (project.json, startup classes, etc).
With a reverse loop you don't have two separate looping counters touching the same loop variable. Plus the code is a lot simpler.
Web deployment package https://msdn.microsoft.com/en-us/library/dd465323(v=vs.100).aspx
I saw this on HN yesterday, and it looks pretty cool. Have you thought about abstracting the console input and output so it doesn't directly call the `System.Console.*` methods? I could see this being useful in a lot of places that aren't actually a console window, like text input in a GUI app or something like a debug console in a game. 
This makes sense. Thanks. 
You can also do this using a Service Bus Relay mechanism. See https://pfelix.wordpress.com/2012/03/15/asp-net-web-api-creating-an-host-using-azure-service-bus/ This allows you to expose an API on a private machine on a different network where or bus the results to your MVC. 
You can't imagine how much more helpful your library will be with this feature. 
I would use SSIS for that. I am sure there are times when the best technology is some OO language though. But my point was that people tend to instinctively use C# or some other framework for tasks that would be better suited to some other technology. 
PLEASE don't tell me we have to deal with this json shit/manually editing files for full .NET starting in VS 2017?
Take a look at this Pluralsight course that uses Angular 1.5 on the client side + ASP.NET 4.6 Web API on the server side: https://app.pluralsight.com/library/courses/angular-web-api-front-back/table-of-contents Follow along this course and whenever the instructor uses Angular 1 code..... go ahead and substitute in your Angular 2 code.
don't worry! no need to be so defensive! even if you had an opinion, it would have been ok! ;) Anyway, I like to know the types I'm working with. Take the Startup class we need to start ASP.NET Core applications. You use the Configure and ConfigureServices methods that might take or might not take some parameters, like the ILoggerFactory and the IHostingEnvironment. So it makes the framework hard to discover. Also, I don't believe that having a Startup class without a proper definition has no impact in the performance of the app. Exploring for which method to execute isn't cheap... Ok with the Startup class. Let's get into Middlewares. Middlewares in ASP.NET Core are also duck typed. But with no real benefit. They need to have ONE method with a specific signature, you can't even add extra parameters... So why the duck typing support?
In my experience duck typing is only irritating for a short amount of time once you discover it coming from strongly-typed tooling. It is only a pain to work with when the interface is not covered thoroughly in documentation ("what is this property used for? where? when is this method called and why?" etc). If you are provided adequate docs and examples then implementing middleware (or any other word for plugins) is simply a matter of gluing their pieces to yours.
Thanks for the info! Lol! I'm ambiguous because I'm new. But what you said makes sense. I'm coming from js and Python into c# and really appreciating knowing types for large things. Just another topic for me to look into over my coffee. Thanks. 
One thing I'm confused about in Phil's blog is the following: &gt; Interestingly enough, certain features of C# already use duck typing. For example, to allow an object to be enumerated via the C# foreach operator, the object only needs to implement a set of methods as Krzystof Cwalina of Microsoft points out in this post… This got me intrigued, I thought we had to implement IEnumerable&lt;T&gt; for enumerable classes. Is this now invalidated in newer versions of C# (I see this blog was created in 2007)? I just tried to enumerate a class which doesn't implement IEnumerable&lt;T&gt; and it fails. class Program { static void Main(string[] args) { var enumerableTest = new EnumerableTest(); foreach (var element in enumerableTest) { } } } public class EnumerableTest //: IEnumerable&lt;int&gt; { IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } IEnumerator&lt;int&gt; IEnumerable&lt;int&gt;.GetEnumerator() { yield return 1; } } What does Phil actually mean here? Or am I understanding Duck typing incorrectly? **Edit** Reading [Krzystof Cwalina's](https://blogs.msdn.microsoft.com/kcwalina/2007/07/18/duck-notation/) blog, it looks like you could do this in older versions of C#, but not newer.
Yeah I don't stand by that blog. I just googled Duck Typing because I didn't understand it, and found this, posted as my baseline of context for the conversation. I did't pull out my comp to test code was on phone. Thanks for the link 
I have updated both, the only thing I noticed was while Xamarin Studio will run and update as needed. VS For Mac, will constantly ask me to install the latest mono, as each new mono version is released, it asks to install it on startup, I have had no problem installing the newest version of mono in regards to Xamarin Studio. 
This is part of .NET that I often hate and IMO it encourages bad practices if you try to replicate what they did. I often have a hard time tracing why they do most of what they do though from what I can tell in some cases it's an attempt to hide the true implementations or prevent/make difficult use of undocumented features. Clean object API's with interfaces you can inject do allow you to use things in ways the original framework developers may not have intended. That does not mean I like what they do but it does help explain some of the reasoning if not all of it. 
Duck typing is used in C# in several places. For `foreach`, this works for me: class Program { static void Main() { var list = new MyList(); foreach (var i in list) { Console.WriteLine(i); } } } public class MyList { public MyIterator GetEnumerator() =&gt; default(MyIterator); public struct MyIterator { private int i; public bool MoveNext() { i++; return (i &lt; 5); } public int Current =&gt; i; } } The problem with your code is that the methods there are private; your code works if you make the GetEnumerator method public(either one will do but the other needs to be removed): public class EnumerableTest { public IEnumerator GetEnumerator() { yield return 1; } } Another usage is in the LINQ syntax. This is valid C# (and prints true): class Program { private static void Main() { var musicalArtists = new MusicalArtists(); var aArtists = from artist in musicalArtists where artist.StartsWith("A") select artist; Console.WriteLine(object.ReferenceEquals(musicalArtists, aArtists)); } } class MusicalArtists { public MusicalArtists Where(Func&lt;string, bool&gt; fn) =&gt; this; } 
Thanks /u/tragicshark, that now makes sense, silly me, you learn something every day! Interesting about the Where clause too, looks like C# really does rely on Duck typing in places. class Program { static void Main(string[] args) { var enumerable = new EnumerableTest(); foreach (var element in enumerable) { } } } public class EnumerableTest //: IEnumerable&lt;int&gt; { public IEnumerator&lt;int&gt; GetEnumerator() { yield return 1; } }
I disagree with this completely. Of course you don't comment "obvious" instructions but, taking the OP's complaint as an example, just providing an interface and not explaining the different public members is not helpful either. A function signature doesn't necessarily tell you at what point in an application's lifetime it is invoked. It can and probably should attempt to but `Startup` is a bit vague.
It's absolutely possible in newer versions of C#. More than just loops, it works with async too. https://blog.nem.ec/2014/01/01/magic-methods-c-sharp/
That `async` return type restriction is being lifted in C#7.
If you don't know what OP is talking about, this is the complete parameters for StartUp class https://github.com/dodyg/practical-aspnetcore/blob/master/hello-world-startup-basic/src/Program.cs.
Gotta say I agree with you completely, tried .net core a while back when it was fresh -&gt; no docs -&gt; practically anything that's beyond the trivial "here's some code, paste it" examples required you to browse framework code to find where some magic string happens to be a method name that framework looks for and figure out the parameters it wants. Personally I don't see any benefit at all and I'm not seeing a single reason why it couldn't have been an interface or abstract class. Heck it's possible to make a virtual middleware base class with empty stubs and simply not hook into stubs that if it had no override for 0 overhead
You know , I couldn't figure out why I didn't like core when I first played with it (albeit a long time ago), but I think this is it. Interfaces (especially intuitive interfaces ) allow you to discover stuff. The way it is now I have no idea what I'm doing . Throw in crappy or out of date documentation (as was the case at the time) and it's a recipe for lots of headaches.
Not sure why you say so. I make a distinction between things that the compiler uses (enumerator and awaiter) and things that we are meant to use. I might find non-optimal the first case, but I am not so exposed to it. If I play around with awaiters I know what I am doing. I find the choice non-optimal when it comes to components that you produce or consume every day. Also, the link you posted broke over night. If you fix it, I will take time to pay more attention. Although I remember it was an article I had already read.
Let's make a distinction between system documentation and code documentation, shall we? For the specific case, If UseStartup&lt;T&gt; had a generic constraint like "where T : IApplicationStartup" and such interface has the two methods you need, you would have little or no need to google around looking for their signature. (sorry, no back tick in mobile keyboard)
I settled on creating a publish target to FileSystem, then using cygwin lftp to upload (ftps). 
Telerik is the only company I've ever really recommended for anything 
It could be a controller, but for instance if you want to create a library to share across many microservices doing so with a middleware is an easy way to go. I think there is nothing obscure with this solution. You only have to worry about the health check function. 
Just run `get-package | update-package` in the Packet Manager Console. It will do it all for you.
[removed]
Wouldn't refactoring everything to use paket take longer?
No, it doesn't.
it depends. there is an auto conversion out of the box. used it on a 400+ proj solution. went very well. and having a single source of truth for package versioning in a very big solution is really helpful. i look at you binding redirects... edit: typo 
I gave examples in my post. Primarily I need it because my cache access is async and I build my domain from multiple objects from that.
My solution with 58 projects takes 15 minutes on nuget console, not very quick for me at least 
I don't quite get it, I looked at your sample too. I don't normally read streams during a mapping operation. It tends to be more like : async get data map data to other model return mapped data. 
Yeah that works but it takes hours on a large solution. I'm looking for something quicker. 
Exactly. In my experience they take about the same time
it isn't that fast as your solution. (package update took about 5 min) but it made merging of csproj files a lot easier. two or more people added package refs to a project. don't merge the project. merge the reference file. paket install. done. and you can define depo groups. add the group to the reference file, paket install. voila every package installed
Damn I am old!
&gt;They need to have ONE method with a specific signature Maybe its related to the expression "When all you have is a hammer, everything looks like a nail" 
Check options under compile setting of the project, you could be forcing it to run in debug without building debug. Also make sure you didn't customize your debug settings to release in build options dropdown
Thank you sir. That was it. Your kindness brings you gold.
Woo typo filled phone posting while working from memory. I have it 50/50 spot of even being intelligible. Thanks
It only takes me a couple of seconds to update a ~80 project solution using [the NuGet CLI](https://docs.microsoft.com/en-us/nuget/tools/nuget-exe-cli-reference). If you have Visual Studio open, it will take a long time because the projects have to unload and reload. It should be super fast if you close Visual Studio, update from the command line, open the solution, and build. NuGet.exe Update -Id NuGetPackageName SolutionName.sln
Thank you for responding so quickly.
I've been using it since then. Though originally in VB.net because my boss at the time was married to VB. That lasted all of six months before switching to C# like civilised people and I've not stopped since.
The example I have uses a stream but it doesn't matter what the async source is. Just assume it's valid. The scenario is more like: - Object A gets mapped to Object B - Object B has Property P that needs data from async source - grab async data for Property P I want to encapsulate all of the above in a single converter object since mapping logic needs to be reused in several places or be nested. 
I guess from the down votes no one else has needed to build a domain object from multiple sources of data and some of those sources needed to be async?
You need to save the access token you get from facebook, and then you need to call their api. You could use a third party library for this, or use HttpClient, but then you need to handle the different status codes FB will send you. You also need to handle that users can unselect email. I can share some code snippet with you if you want.
Have you checked claims that you are getting back (ClaimsIdentity or ClaimsPrincipal). Also, check this: http://andrewlock.net/an-introduction-to-oauth-2-using-facebook-in-asp-net-core/ and this https://docs.microsoft.com/en-us/aspnet/mvc/overview/security/create-an-aspnet-mvc-5-app-with-facebook-and-google-oauth2-and-openid-sign-on#ap
[removed]
&gt; I'm just a guy who knows how to code random small parts of a gigantic application that he's working on. That's pretty much all of us, dude. Other than a few small apps I've coded start to finish or had the luxury of working on for &gt;6 months, I've never felt like I understand the entirety of any application I'm working on. As long as you understand the business processes behind what the program is meant to be doing, and you can (with or without Google/StackOverflow) develop whatever you need for the chunk in front of you today, you're probably doing okay.
Not OP, but the thing I don't like about it is that it means I need intrinsic knowledge of what the duck-using function does in order to feed a duck into it: I have to know what methods and properties of the duck are used in order to ensure they're there. That's just too, well, imprecise for me. And resolving that tends to make documentation messy, in exchange for no real benefit that I can see. Code is complicated, business processes even moreso - the more we can simplify things the better, and this kind of smart-ass logic just feels to me like it flies in the face of that: to me, there's a reason inheritance exists in the first place **If it looks like a duck, swims like a duck, and quacks like a duck, why doesn't it extend duck? (Or at least share a commonly inherited/implemented hierarchical ancestor)** Then again, I tend to just not use it, so it's not usually a big deal: the times I run into it tend to be when I'm going "Wait wait wait, how does that work? You can't pass there" in which case it's just an un-necessary distraction: I've run into the same Configure one that the OP mentions, and spent a while trying to work out how the hell it all fit together. Admittedly I was new to .NET Core at the time, so was generally wandering around the code and documentation in a slight daze, but I rather felt that proved my point: a new developer starting with a piece of code is already disorientated, lets make things as easy as possible for them in both the code and docs.
Depending on your methodology you might be exactly where you need to be. If you are in a scrum or agile methodology if you can pull a task off the board and get it done. On my team our people who know all the systems have been here 13 years+ Most of them are not aware of the newer technologies. It is simply not possible to master all of the technologies. I would recommend the book Code Complete which is language agnostic. If you have a pluralsight license give up a couple nights to follow shawn wildermuths classes on mvc/angular/bootstrap websites where he really shows how it all fits together. Pluralsight isn't free but in a month I will watch 40+ hours of training. I go a little crazy on it. If you only do your coding during your 40 hours at work. You will never get to where you want to be. Meetings and other interruptions never actually give you 8 hours a day. 4 hours during work is a good day for me. If you do 2 hours a night of training/learning you will noticeably exceed your peers in knowledge. Not many people want to put in that work.
I compiled successfully (and update everything to 1.1.0). Then I tried to run it and it comes with all sort of runtime errors. Things just get weird after that. Even with a brand new empty project. Once you change that target from netappcore10 to net461, things slow down and crashed. It is RC4 and to be released in a month. 
OK I'm getting this error You must add a reference to assembly 'mscorlib, Version=4.0.0.0, Culture=neutral. https://forums.asp.net/p/2113733/6109730.aspx?Re+VS+2017+ASP+NET+CORE+WEB+Application+adding+reference+to+external+class+library+giving+error
Identity is a great option if you want to manage everything yourself. If you don't want to deal with the hassle of learning and maintaining the security stuff you could look into [Auth0](https://auth0.com/) and [Stormpath](https://stormpath.com/) - both have simple integration with .NET and free tiers to play around with. I've been using Stormpath in some of my work projects and it's great.
&gt;I feel like I'm not really a developer, I'm just a guy who knows how to code random small parts of a gigantic application that he's working on. I think most of us feel that way sometimes.
I got everything back together again through the most stupid way possible. Start a new web project and putting files back in. It's hard to know how to fix things with aspnet mvc core. It's quite frustrating because I am not exactly a n00bie on aspnetcore and I still wrestles with issues. 
That might be nice. I have no idea how I'm supposed to do that stuff. Nobody explains it anywhere. :-/
What's wrong with WinAPI calls?
Indeed. WinAPI is probably your best bet unless you're going to invest in a commercial control that can do what you want. 
THANK YOU for this. It truly does help knowing that it's not just me feeling this way. How do you determine when you know "enough" beyond just completing the task in front of you? Just two weeks ago, I was tasked with adding a "load more" feature to an existing pagination control in our system. When I sat down with my team lead for code review, he showed how he would've done it (very generally), and it was so much more efficient than my solution. The crazy part is that he's never done it nor seen it before, yet he just quickly found a solution that took me over a week to accomplish! Rambling aside, I feel like because my lead has a much more solid foundation or knowledge base, he was able to "see" the solution as soon as he started on it, whereas I need to "feel" around for it due to my lack of knowledge. Does that make sense?
I've had same problem, ended up recreating solution/project in VS2017. Even after migration, VS was screaming that project requires migration. My project was and still is targeting .net 4.6.x
&gt;I would recommend the book Code Complete which is language agnostic. My career manager recommended the same book, so I'm guessing it's a must read. Does it matter that I'm very much a junior developer in terms of knowledge and experience? I worry that it's like reading a Calculus book when I've just barely started Algebra. I will also heed your recommendation for pluralsight. Would you say that it's worth the cost long term? I've never had any training resource that's subscription-based, so I'm not sure if my question even makes sense. &gt; If you only do your coding during your 40 hours at work. You will never get to where you want to be. Meetings and other interruptions never actually give you 8 hours a day. 4 hours during work is a good day for me. If you do 2 hours a night of training/learning you will noticeably exceed your peers in knowledge. Not many people want to put in that work. I really value this advice, and what I'll say next is by no means meant to be an excuse or sound defensive. I just want to know what your response is! Ever since I started my new position, I've worked about 50 to 55/wk, mostly because it takes me a long time to complete my tasks. Even after putting in these hours, I'm still motivated at home to push for more knowledge. I'll look into pluralsight like you advised. Is there anything else that you'd recommend? I've seen it recommended that I should build an app from start to finish, will this help me if I already know how to build with existing apps? 
This really just comes down to practice in messing with code. How are you with design patterns? Do you understand the process in which you get from the source your write to the execution code at runtime? Do you understand how .NET manages memory, process or resources? I find many developers that start with code and struggle to get further because they lack the core fundamentals of how things actually function. Once you understand how things work you are often better able to spot the more obvious solutions. One thing that helped me, all these APIs and stuff we use, just other developers writing code and often making arbitrary decisions not because its fun but because there are 100 ways to skin a cat; 10 that are pretty decent for your situation and 2 or 3 that are so similar you sometimes make the choice by throwing darts. 
Thank you! Do you know of any resources that guide developers through creating an app from beginning to end? I've researched training materials online, and perused through pluralsight's catalog (a few others here recommend it), and the courses seem to only show small, independent examples, as opposed to working on one fully functional application. The thought of building my own CMS would be awesome! Having worked on the CMS at my own company, I can't imagine how much I could learn from building one from scratch. My problem is I wouldn't even know where to begin! Any advice in this regard?
&gt; How are you with design patterns? Do you understand the process in which you get from the source your write to the execution code at runtime? Do you understand how .NET manages memory, process or resources? The only design pattern I know (I think?) is OOP, but I've heard it said that OOP isn't really a design pattern. I learned it in school, and I'm embarrassed to say that I don't know any alternatives. To answer your other questions, I have no understanding of the steps between my code and execution code, and I don't know how .NET manages memory, processes, or resources. &gt; I find many developers that start with code and struggle to get further because they lack the core fundamentals of how things actually function. &gt; Once you understand how things work you are often better able to spot the more obvious solutions. You nailed it perfectly, this is exactly where I am! I'm overwhelmed by how much I don't know! To give an analogy, I feel like I've been tasked with building a car - I know how to build a steering wheel, a gas pedal, doors, and seats, but I've no idea how to put it all together, nor do I even understand how the gas pedal works with the engine to move the car forward. My intention with this post is to get some guidance on how I should go about filling my knowledge gaps. I don't mean to just sound like I'm complaining!
Indeed, but he's your lead for a reason I suspect your skills are a little under-developed from what you say, but a lot of it will come with learning on the job. Just throw yourself at it and don't be afraid to ask.
You are in the right place. I was at a similar place at 5-8 years. What I did was dove into fundamentals. Like you I worked on cars but only had a vague idea on how the engine worked. I made it my mission to understand the underpinnings of technology. I even went back in time and read about the first computer systems and old postings about challenges in making technology work today. I also found those blogs where people tear apart and re-purpose old hardware from the 70's, 80's and 90s both fascinating and informative. Once you understand where all this comes from it is def easier to understand it in whole. As for design patterns and such. I would recommend 2 books for you, neither of which do C# heavily but the concepts taught are critical and apply to nearly all platforms. * [Head First Design Patterns](http://shop.oreilly.com/product/9780596007126.do) - This book uses Java for it examples but it should not be too much of a problem. This book is one of the best primers on design patterns out there. * [Beautiful Code](http://shop.oreilly.com/product/9780596510046.do) - You often hear developers talk about nice looking code. This book does a great job os explaining and showing examples of what that means. Clean code means less confusion which allows you to focus on the problem you are trying to solve rather than the intricacies of how your syntax should appear. Aside from that I would strongly suggest starting to learn another programming language (Java is a good place to start for a C# dev) as it can be very helpful in learning fundamentals. Also when you begin to understand how all of these platforms deal with most of the same problems and technical challenges the relationships of how things work become more clear. Best of luck and feel free to message me. 
Thank you, first simple but good article for dotnet and docker that made good sense.
Thank you SO much for taking the time to post this! I'll definitely post when I have more questions 
Just go on Amazon.com and search Code Complete, honestly it is a book that is valuable from no programming experience to the other end of the extreme where you have been programming for 20 years and you would still pick things up. I heard about it at a Code Camp and I read it cover to cover. (I started my job not knowing C# or VB, or anything other than about a 2 week class on javascript) As for pluralsight, so as I said above when I started my current job, I didn't know what a constructor was, a data table, how to use sql, how to use a thread, how to create an interface or literally how to do anything. I would go home and read MSDN and read the Microsoft APIs with notes the next day to do whatever I couldn't figure out the next day. Honestly this probably set the ground work for my training habits. If you have a .Net Developer license (legally you should), log in to MSDN and in subscriptions you should see a pluralsight license that gives you access to 10-15 classes. (what is offered varies) It is very possible some decent start to finish classes are offered. Just take a look at what is there that might answer a lot of your questions. There is also a free trial where you could try any class you want for about 10 hours or 10 sections whatever comes first. Anyway to directly answer your 50 to 55 hours. If you can identify why you are having problems if you see a class exists on pluralsight you will be using your time better. I only put in 40 hours at work, if I put that other 10 hours into training at home with some time to rest I get more out of it. The stress and anxiety of not completing your work is probably causing more harm then good. Also know which coworkers you can go to for help. I have 10-15 go to people depending on the topic and project. If I'm spending 2+ hours on something that should be easy, swallow the pride and ask for help. I have people with 8+ years experience asking me for help. And I have been a developer for 4 years. I have now been a sr. developer for a year. Your teammates would rather you be productive and if you can't follow the patterns or need a little help you would be surprised how many people tell you the code you are looking at is really bad and they have difficulty with it too.
Thank you for this. This looks very interesting!
What! your not still downloading sql 2005/8 to write reports for a report server from 12 years ago?
Is .NET Core something worth looking at right now? I'm familiar with ASP.NET in general but it's been a while since I've looked at like MVC and WebAPI (it was just when WebAPI was gaining traction as the "preferred" way). Is .NET Core stable enough to consider right now?
It was a rough launch.
What else could the problem be?
And, very often, does not do want you want or has trivial limitations. That is my experience at least which some controls. Some features built just for the demo breaking in real life use.
We just chose not to go with a massive bloated framework like angular 4(literally about to be 4). Sure it does it all but it has so much boiler plate to get anything done and it doesn't feel like your actually programming js. The learning curve is steep. Will it do it all though? Sure. But vue.js is super small and may do everything you need. We opted for vue.js because it was easy to get up and running quickly and the migration to angular 4 would be trivial should we need to. The time to get rolling is short and it made sense because it brought business value immediately for complex portions of code. Not crazy jquery madness. The vue js site has a section that compares it to other frameworks on their site. The best way to learn is their site. Googling vue awesome. The laravel community has some videos that people recommend. But hands down the best video tutorial I've ever seen was surprisingly a udemy course. Vue js all complete, something like that. Anyways it's super simple to get rolling and sprinkle it through your app. Just mount it to div and away you go. Much easier than knockout. No requirement for jsx files like react but you can. And it's fast, just try to avoid watchers with a preference to computed. Watchers are for async. 
We use lots of angular1 for our admin pages, and next to none for our public pages.
I believe [Identity Server 4](https://identityserver.io/) is the Microsoft recommended option if you want to do everything yourself. You can also check out [Auth0](https://auth0.com/) and [Stormpath](https://stormpath.com/) - both have simple integration with .NET and free tiers to play around with. These services handle everything for you and make it easy to integrate with multiple web and mobile apps. I've been using Stormpath in some of my work projects and it's great.
I'm not a front end dev, so I can't say much about the general proliferation, but one thing that bothers me is having all the source code of all the script libraries inside my project. When I search in files (Visual Studio find in files), they often fill my search results with irrelevant results. Can you imagine if we had to have all source code of every dll we use in every project? 
IMHO DotNet Core is getting very, very close to being production-ready. My best guess is that v2.0 will be what shoves it over the edge.
I'll have to check some of that out, I did look at Angular and it seems very popular, but pushing TypeScript seems a bit much (I remember when CoffeeScript came out and Rails 3 jumped on it, and I was like why the hell don't you just learn Javascript properly, not make Javascript like Pythonic Ruby, or in this case make Javascript like C#). Knockout looked cool because it reminded me of the declarative stuff from WebForms, but there's so many it's overwhelming especially since I bet many companies other than cutting edge type of startups (i.e. regular corporate dev jobs) don't know or care about half of them.
I get that, the issue I've found is very few places tend to want to have 10 different libraries, even if each does one thing really well, because it's harder to manage 10 libraries (read: They often don't know of/want to use the tools that let you manage them). So I am thinking mainly of a "What makes me marketable" approach; I saw this same thing years ago with Rails where everything was including like a dozen different Rubygems (or plugins at the time IIRC, the SVN version of Rails before they moved to Git) in your project, but it means you're more dependent on different things. The common argument I see being that you have 10 plugins that are created and supported by a handful of people, who can decide not to maintain it on a whim, rather than 1 framework that is (usually) supported by a large entity so has less of a chance of just drying up one day as all the hipster types move to the next big thing.
https://reactjs.net/ is where I started. Integrating any frontend framework with a Visual Studio project isn't the easiest, but the tutorial and material on this site is definitely a good place to start.
&gt;I get that, the issue I've found is very few places tend to want to have 10 different libraries, even if each does one thing really well, because it's harder to manage 10 libraries (read: They often don't know of/want to use the tools that let you manage them) How have you "found this"? My observation is the exact opposite. Every developer and framework now a days makes use of a package management technology whether its nuget, npm, or whatever and every dev team I've ever worked with uses one for internal modules as well. &gt; The common argument I see being that you have 10 plugins that are created and supported by a handful of people, who can decide not to maintain it on a whim, rather than 1 framework that is (usually) supported by a large entity so has less of a chance of just drying up one day And if they decide not to maintain it then everything being loosely coupled means it won't be very painful to migrate that one library to a competitor. The risk is much smaller. &gt;So I am thinking mainly of a "What makes me marketable" approach; Don't bother. By the time you learn anything you're going to be outdated. Instead try to get good enough to create something sufficiently complex in whatever and good employers will realize that those skills are transferable to different tech stacks. I program primarily in a .Net stack, but a contract job came along that used Django(Python web framework) and while it took some time to get up to speed, at the end of the day its all the same thing.
Sadly like every company I've worked for has barely known what NPM or the like is, only in the past like 4 years have I met anyone who knew of Nuget.
https://github.com/aspnet/JavaScriptServices That's the Microsoft supplied boilerplates for Angular, React, React with Redux etc. Fantastic starting points for learning .Net core, react etc. Do note you'll need to install Typescript 2, it's not listed anywhere in the instructions. And whatever you do with front end stuff, no matter which framework you choose, use typescript. My god does it make life easier.. Stick with it though! React + .Net core is fantastic once you get things up and running smoothly.. 
Be the change you want to see in the world. :)
I'd describe it as "SignalR-like", but it's a largely new framework. It seems much more powerful, flexible, and modular than SignalR is. Clearly still under heavy internal iteration, but it looks really exciting. I'd recommend watching it later if you get time and want to do the kinds of things that SignalR does today.
Typescript gives you static analysis, classes, typing, interfaces and inheritance. 
Yea.... but no actual functionality, as opposed to a framework.
I am, I feel like not knowing angular is holding me back from getting better jobs.
Typescript has some value. Just depends some people like types, and it can help reduce errors and it's nearly identical to javascript. I'm totally with you on coffeescript we never adopted it. But I would do typescript with angular. Just don't do angular &lt; 2. Yah knockout has the webforms mvvm style to it. Most adopt the pattern just not quite the same. You do a lot of work to get anything done with knockout. If you want a heavy inclusive framework angular will probably be your best bet. But it's really heavy. But if you want to build like a pwa and do enterprise probably your best bet. Plus the angular team has a roadmap with a lot of releases planned. If you just want to learn something for the sake of being a better developer than pick your framework. Elm would be good. The whole redux flow is derived from it. GitHub is moving to vue. They have a write up about why they did it. Also why would you want to be a regular corp dev? Lol. 
The popular pattern these days is to use a client-side package manager (bower or npm) combined with a JavaScript module loader (SystemJS or Webpack). The libraries are imported with the package manager and the local package cache (./bower_components or ./node_modules) is hidden from the VS project, so it doesn't clutter up your search results. At build time, the module loader figures out which JS libraries you are using and compiles a dedicated JS "bundle" file with all of the relevant libraries minified and concatenated, delivered to your server environment (which is also hidden from your VS project.) So you never have to deal with Angular, jQuery, Knockout or whatever cluttering up your project.
I personally have settled on ASP.net Core, WebAPI, Angular2+/TypeScript and Webpack as my chosen stack for future projects. Microsoft has yeoman templates available to get projects on this stack set up very quickly on any platform (Windows, Mac, Linux.) TypeScript and Webpack make client-side development bearable (especially for the mindset of a C# developer.) Angular2 makes SPA development bearable. And WebAPI makes API development bearable. The tradeoff is that Angular2 is *extremely* verbose and very opinionated, and it can be way overkill for small projects. But if that small project has *any* potential of becoming a big project later on, the discipline that Angular2 enforces will become a lifesaver later on.
ya, that is true. It definitely doesn't *expand* the javascript framework.
Yeah -- https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f is a good summary.
Exactly. Seems like the same stuff from Rails. Person: How do I do X in Rails? Railshead: Don't do it by hand, use the Hamfish library! Joe Railsguy wrote Hamfish to make X easier, everyone is using Hamfish now! Clone it from Git here... And then you have to figure out Git, and maybe RSpec if you're into testing, and the regular HTML syntax was lame so here's also Haml, and then you can't use Haml without SASS, and don't forget a few javascript libraries and then Coffeescript, and...
Probably not accidental -- a lot of the JS stuff we see developed from rails types.
https://www.typescriptlang.org/ Video, about 5:00 min in. It does not work for everything, but there is a fair number of things that can be compiled down without having to polyfill.
Yeah that's definitely what it seems like; it's just "Oh hey here's X. No wait, X isn't good let's do Y. Nah, Y is too hard, here's Z instead" and just the same "let's continually improve" without building any sort of foundation for stability. I mean, I get that it's churning but it seems a little ridiculous sometimes, there's like zero structure which very few corporations will accept, maybe your Web 3.0 (or are we on 4.0?) startup types will jump to the next big thing every time, but most established organizations will not. Also, it feels weird. I saw some ReactJS I think code and it mixed HTML and Javascript (JSX I think? It was a method that output HTML interlaced with Javascript); I thought we were well past those days, but here they are again. It's a little interesting to say the least how things tend to circle back in a different way.
To be honest, I don't recall any big site that I use on a regular basis that is a SPA. I develop SPAs at work with angular2, but I somehow don't like the feel of it. For whatever reason I miss the web-feeling that are postbacks when switching to a completely different site. Maybe I'm just weird though 
I don't think I'm understanding you here. WinForms uses the Windows API. So does WPF. Etc. etc.. they all have to use the Windows API. Virtually anything you can dream of putting into a UI on Windows will be created using the Windows API. So... what am I missing?
Ok fair enough.... if you're targets not up to ES5(Using a browser released more than 6 years ago....) and not polyfilling.... then typescript will let you reach those users.
For mobile devs, like me, who are already proficient at creating Android apps with Java and iOS apps with Swift, there's little incentive to use Xamarin. Now those who're jumping in fresh by all means go Xamarin. Save yourself the struggle of learning two distinct platforms. If back then Xamarin were as big as it is now then I would've learned it first for sure.
For me because of C#. I prefer it over Java. VS is a great IDE. And as a newbie to mobile application development I'd like all the help my tooling can give me.
https://github.com/pauldotknopf/react-aspnet-boilerplate This solution uses everything you mentioned, as a boilerplate.
Anyone know where I can get VS templates for bootstrap with that kind of UI. The one with the collapsible left navigation bar? 
CoffeeScript is a one to one language subset of JavaScript with a stricter syntax. It doesn't add anything to the language to help people write better programs. I also don't understand why anyone ever thought it was a good idea. TypeScript is a strict superset of JavaScript (every JS file is a valid TS file). It does often add verbosity to the syntax, but with this you get the ability for significantly better tooling (examples: null checking at compile time; type based intellisense). For small programs, all that extra non-JavaScript stuff in TypeScript is annoying and probably not worth bothering with. But when you start getting into the type of things that you will be maintaining or months/years, the safety that TS provides is nice. Angular inherits this rational that TS has (and thus using the TS language is a reasonable fit). There are a lot of formalisms in Angular where it almost forces you to do things in a verbose way. This is a cost you are paying to scale project complexity better. It is designed to enable things like long term maintenance of applications like Gmail or Google Docs and there was little planning for smaller projects or for "sprinkling" it into an existing application like you can with Vuejs or Knockout. 
I found this advice useful from `Retsam19` over at [this](https://www.reddit.com/r/programming/comments/55okik/how_it_feels_to_learn_javascript_in_2016_xpost/) post on /r/programming &gt; You really just need one thing to survive in the modern JS ecosystem - basic engineering common sense: &gt; * Don't use a tool until you need it. &gt; * Don't use a tool just because it's what all the "cool kids" are using. &gt; * The bleeding edge is fine for small projects and hobby projects, but bigger projects should stick to tried-and-tested solutions. &gt; I don't really know why people ignore these then blame it on the JS ecosystem. &gt; All of these tools and technologies exist because they're useful for dealing with specific problems: but if you're only using them because some Rockstar Ninja Coder told you that it was the One-True-Path-to-2016-JS-Nirvana, you're not going to appreciate what they bring to the table. &gt; My advice to new JS programmers is to start out simple: vanilla JS, CSS, HTML, and solve problems as you run into them. &gt; If you find the DOM API is obnoxious? Try jQuery (ignore the JS hipsters like me who say you don't need it. You don't, but if it helps you learn, go for it). &gt; Maybe you decide you want more powerful CSS, so you drop in LESS or SASS: that'll lead you towards adding a build tool like grunt or gulp, and you'll understand why you need it, instead of doing it because someone told you to. &gt; You'll eventually find adding all of your dependencies as &lt;script&gt; tags obnoxious, too, and that'll lead you to a module system. &gt; As the project gets larger, odds are you'll start to see the advantages of static analysis tools like Typescript and eslint, too.
Just use jQuery, and if things get really complex, add some KnockoutJS.
I think a lot of people stick to using Automapper for very simple mapping situations (DTOs, etc.) and your scenario is a use case most people would prefer writing custom mapping code.
You can use [Costura.Fody](https://github.com/Fody/Costura). I've used it in the past and it's very convenient.
Vue JS is the right answer
I agree with your assessment of React and Angular...It's nice to just start a project and have all your stuff just there (Angular). But I will say that React does state management much better because data only flows in one direction. Imo this makes it a bit better for scaling apps because you're more easily able to control what data is being passed around where. Getting your stack up and running is a bit of a pain, but you can always get a configuration working and reuse it for each project. I've been using React for about a year and a half now and I really love it. I've been using Angular for the better part of the last 3 months and have also really enjoyed it. It's really a matter of preference. I think React will probably outlive Angular simply because it has more innovative ideas, but no one said you had to he innovative to be successful which is why I think Angular will still be around for a while to come.
You've just got to find what feels right for you. For me it was Web API with React-Redux-Immutable, but that's only because I like the way it makes my brain think, and it's made JavaScript fun for me. I tried pretty much everything - Knockout with MVC, WebForms with JQuery, Angular with... everything. Mostly because I really enjoy trying out new stuff, but also because I really disliked WebForms and MVC just never felt right to me. I like the idea that I can take my backend and craft a completely different face for it, or take my React frontend and point it at a Spring api, or maybe Firebase, if I ever figure that out. That's just me though, I'm sure most of it is a waste of time. If you're overwhelmed by it, just don't sweat it. 
I would say it scale project complex more easily, less decisions to be made in terms of your internal conventions, and best practices are closer to being established. But you can learn those by just watching other communities. I would hesitate on the gold stamp of 'better'. How about a silver stamp of 'better'? The downside is most people that try angular 2 but know javascript well, typically have a hate on for it. You feel like you've become an excel programmer instead of a real dev. You become detached from js in the abstraction. Maybe that isn't a bad thing, could be super productive. But maybe it breeds framework programmers that know very little js. Likely a bit of both. My hope is, when the requirement for angular becomes necessary for us, that the bloat becomes less apparent and the developer experience is just amazing. 
Your advice is so simple, yet has given me new perspective. I think I'm so busy getting overwhelmed by everything that I don't know, I forget that I should just ***start***. Thank you!
Im a long time .NET developer, and I find Angular in combination with Typescript really awesome. They totally match our .NET development styles with modules (we use somerhing like simple injector packages), components (view+viewmodel), async + await, full DI everywhere, etc. But I would not say it is verbose. Have you ever developed WPF applications. Now that is verbose, heavy and hard development. All these little gottchas with DataTemplates, Bindings, Styles. We use both WPF and Angular 2 for rich client development, and I would choose Angular any day. It is a little harder to setup all the build things, like webpack, aot, lazy loading, tree shaking, electron and so on. And also get comfortable with many many dependencies and technologies. Afterwards Angular development is really lightweight and so flexible and mostly just works as expected. That is not the case for WPF. (Also VS Code doesnt take ages to load even on bigger projects than a task app)
Well I wouldn't say Angular is only for developing SPAs. Now that you can lazy load modules you can split pages into different modules and load it only when needed. But the main benefit in my opinion is the seperation between data and view. And this is always a good thing. 
I think you're missing the point. End-users should never be touching those 150 files, so there is no need for them to be 150 separate files.
Been working with Angular 2 for almost a year now. Do not like it.
Important notice: IBM Data Server provider for .NET Core is has "1.0 beta" status, and according to the license this version can be used only for test purposes + test period ends 2017-07-31.
In many cases you don't need SPA. The problem with SPA is that it makes everything more brittle. With page/postback, a lot of stuff are isolated to the page. I prefer using "rich page" approach. Use JS heavily only at the functionality page that requires it. Everything else work fine on just postbacks.
Exactly. There's just not a lot of material for using angular/react in "normal" websites I recently discovered. Reason maybe that it's hard to google
IMHO, if your targets are using IE8 then the problem is not your code..
[removed]
Ha, I read that the other day - it's brilliant. Have an up vote for posting :-)