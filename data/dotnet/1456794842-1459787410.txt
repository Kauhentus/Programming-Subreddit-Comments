Indian University :( They lag behind 
So you have the same database tables being shared by more than one client? Sounds dodgy. In our kinda multi tenant app we have a separate database per client and then we just look at what client the code is running as and connect to that db. Skips a lot of the problems you're seeing. More DB maintenance though.
That's a lot to wrap the head around. Can you link me to some sample you did or saw?
The article also links to DynamicFilters library which serves the same purpose for me I think.
But what if your clients have to pay for upgrades? You can't migrate them and their DB schema separately.
Clients will be only paying for the services which is using the app. We will be paying for the infrastructure and other hosting stuff.
Well as long as all clients are always on the same version that's fine
I hate when people try to show a path for no resharper. My 96 core 1TB machine handles resharper just fine, well so long as you don't expect to use their unit test runner
Also found this: https://github.com/jbogard/EntityFramework.Filters Similar stuff though
sorry. please see my comments.
&gt; What version are you running? The version of DNU matters, not of some crappy text editor.
That is not the output of "dnu restore".
dun restore from the terminal works and ends with: Restore complete, 10957ms elapsed Feeds used: https://api.nuget.org/v3-flatcontainer/ My problem is with VS Code returning an error when launching the command from it.
Wait wait wait, what language(s) can you do that in?
Sorry if this doesn't apply, I'm on a phone and it's hard to see... But DbContext from EF itself is a unit of work pattern. There is no need to wrap it in your own interface.
I think you're over thinking this. Doesn't seem to be any problem with the original code - you're still generating postbacks and getting the data on each change so you're not saving any server work.
That is not the reason actually. My implementation of repositories have some other utilities like logging or auditing before or after CRUD operations. So this encapsulates all the data related functions from the controller.
You are most likely correct. Many areas of the system I am working in could do with a refactoring, but I must be seeing errors where there aren't any serious issues.
You can use partial classes to add on that functionality to the EF data context.
Are you here on an H1B?
I'm also wondering, that's why I asked :)
Thanks! I'll have to play around a bit more, I doubt we can use it for our current "major" project since it's basically done and uses the oldschool format, but it's good to know for future stuff I can show my boss to get great performance and not have to code like it's 2002.
I don't think you'll have noticeable degregation in performance on the client side, dependent on the size of the data being redrawn on the grid. (We currently use data grids in angular that house 20k rows with active filtering and it works blazingly fast.) I dont think its that much work to implement on the client side, but this problem is systemic of the tight coupling of the data to the UI. 
I dont have any examples that I pulled from, this is just from experience. Here's an [article](http://www.tugberkugurlu.com/archive/generic-repository-pattern-entity-framework-asp-net-mvc-and-unit-testing-triangle) on repository pattern. and an MSDN [article](https://msdn.microsoft.com/en-us/library/ee817667.aspx) on factory pattern. hth
I second Dapper. I've used it to great effect with a SPROC-heavy system. It's a great fit and easy to use.
http://stackoverflow.com/a/20479268/1565402 My project is already targeting 4.5 and this says this is implicitly set to true. So any thoughts?
EF6 already wraps `SaveChanges` in a transaction ([MSDN](https://msdn.microsoft.com/en-us/data/dn456843.aspx#default)). Your SaveChanges code doesn't do anything that isn't already happening. You only need transactions if you do multiple `SaveChanges` inside the transaction. (Also, if you do use transactions, you don't need `try` `finally` `.Rollback()` because the `using` statement already rolls back via `Dispose()` if you didn't commit due to an exception in `SaveChanges`. Also, *don't swallow exceptions*. `throw;`.) Also, `SaveChanges` is virtual so it can be overridden in a base DbContext for logging etc if you don't really want to work with two unit of work abstractions. **Alternatively**, in my opinion, a repository should *be* a unit of work or else you haven't modeled your aggregate roots properly. A single repository should load a single aggregate (including children), save a single aggregate (including children), and have any special methods needed to create read-only view models. The fact that you have two different repositories in one unit of work concerns me. In special cases where you need a transaction across more than one aggregate root instance, a domain service coordinates the transaction. **For the amount of engineering you're putting into this, it would be best to follow domain design principles** or stuff will get gnarly.
&gt; EF6 already wraps SaveChanges in a transaction (MSDN). Oh lovely. Just when I though that EF couldn't get any more annoying, I learn that its taking out write locks without my permission. 
1. Don't "unit test" database interactions, it's a waste of time. Write CRUD style tests instead that actually touch a real database. 2. I'm not fond of this whole "unit of work" thing. It seems like just an excuse to add complexity hold transactions open longer than necessary. I'd rather see service classes with well defined and encapsulated methods. Service classes can be mocked, as they don't leak database details such as IQueryables. However, I again stress that CRUD tests are far more valuable than mockery tests.
Not everyone uses DDD so the aggregate roots may or many not be relevant. 
Correct. If you are going put that much engineering into your architecture I will recommend DDD principles though.
I don't think a solidly engineered design necessary requires DDD. It's a design paradigm for specific scenarios, imho. 
Nope. but as of right now, I'm working on a small project and I intend to use and learn Angular in the process.
Yep. Still waiting. lol Do you have something for me?
Sorry for the late response, I was travelling all day Sunday then completely forgot about this post. I will do my best below to answer your questions and explain what I know about Asp.Net Identity and the process it uses. I'm going to assume your project is not an Asp.Net Core 1.0 project (Asp.net 5, vNext whatever) as the process for that is probably quite different. Before I answer your questions I want to explain the process for Asp.Net Identity. Understand that some of this information may be incorrect, I am by no means an expert on any of this, most of the info I have I learned by looking at the source online or the decompiled sources using resharper. In the Startup.Auth.cs file there is a method ConfigureAuth. This is where all the setup is taken care of for identity. I have pasted a section of the code below which shows setting up the CookieAuthentication. The part to pay attention to is the call to SecurityStampValidator.OnValidateIdentity, which tells the Identity system how to check for new info app.UseCookieAuthentication(new CookieAuthenticationOptions { AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie, LoginPath = new PathString("/Account/Login"), Provider = new CookieAuthenticationProvider { // Enables the application to validate the security stamp when the user logs in. // This is a security feature which is used when you change a password or add an external login to your account. OnValidateIdentity = SecurityStampValidator.OnValidateIdentity&lt;ApplicationUserManager, ApplicationUser&gt;( validateInterval: TimeSpan.FromMinutes(30), regenerateIdentity: (manager, user) =&gt; user.GenerateUserIdentityAsync(manager)) } }); When the user logs in a ClaimsIdentity is created by calling GenerateUserIdentityAsync (this is done for you by the SignInManager). The claims identity is turned into a cookie and attached to the Http response. When the user makes another request the login cookie is checked for a couple of things. First it will check the timestamp on the cookie. If the timestamp is older than the timespan specified in validateInterval then the security stamp will be checked. The security stamp is compared to the value from the database, if they are different the user will be logged off. If they are the same GenerateUserIdentityAsync will get called again, refreshing the info from the database. So setting the validateInterval is a ballance between how often you want the perforamce hit of checking the database and how often you want the most up to date info on the user. We have ours set to a TimeSpan of 1 min. Long enough that multiple requests in a row wont uneccessarily hit the database but short enough that if an admin removes access to a feature for another user that users next request should get the new access restriction. To be honest I dont know exactly where the code is that puts the ClaimsIdentity info into User.Identity but I know it happens before the controller action is hit and it gets the info from the cookie unless it needed to be updated from the database because the cookie was too old. With all that said I believe I answered your questions about GenerateUserIdentityAsync and I will answer your other questions below. &gt; Can I declare there some objects that are already in database? I mean: what if I wanted to add to User.Identity variable that contains user ID? Do I need to simply add new variable called "ID" to ApplicationUser class and it will cointain this ID from database, or do I need to do something more? You are in luck this is already available on the ApplicationUser and the ClaimsIdentity stored in the cookie. There is an extension method available on the User.Identity object that can retrieve it for you but it will be a string (so if like me you changed your id column to be an int you will need to parse out the result when using the extension). I'll paste my version of the extension method to retrieve the user id as an int below (there isnt any error checking in the code below I'll leave that up to you). You can use this method for really any information in the database, doesnt really matter if it is on the user table or not. public static class IdentityExt { public static int? GetUserId(this IIdentity identity) { var claimsIdentity = identity as ClaimsIdentity; if (claimsIdentity == null) return null; var idAsString = claimsIdentity.FindFirstValue(ClaimTypes.NameIdentifier); int id; if (int.TryParse(idAsString, out id)) { return id; } return null; } } As you can see above you will have to cast the User.Identity to the concrete ClaimsIdentity class in order to be able to work with everything that is available. I encourage you to debug and check to see what claims and information is available on the actual User.Identity object stored. Intellisense will only take you so far when working with the IIdentity interface, debugging is definitely your friend. Now if you would like to pull in some info and you've checked User.Identity while debugging and it is not available. And you have checked the ApplicationUser properties (dont forget it has a base class check its properties also) and its not available there either. You will then need to either add a new property to ApplicationUser if it is on that table (AspNetUsers) or add a new class and add it to your ApplicationDbContext(if the class/table is associated with the user you can setup a foreign key and navigation property on the ApplicationUser class - lots of tutorials on this look for Entity Framework navigation property, feel free to PM if you need help with navigation props it can be tricky). once you have done all that you can add the claim like I have shown in my previous comment in GenerateUserIdentityAsync. When GenerateUserIdentityAsync is called it is done so after populating all properties of ApplicationUser from the database. If the information you need is not available or tied to the user then you should probably not store it in the User.Identity and consider cache or just pull it every time you need the data. If you really must store information not directly associated with the user on the users ClaimsIdentity object you can do so by requesting the ApplicationDbContext from the owincontext like below. (its uses an extension method so you will need to specify using Microsoft.AspNet.Identity.Owin) var context = HttpContext.Current.GetOwinContext().Get&lt;ApplicationDbContext&gt;(); //you can access the database through the context object (see Entity Framework for info)
https://msdn.microsoft.com/en-us/library/dn314429.aspx
Yep but the pricing seems pretty steep for what is currently a small startup project. Lowest I see is a 10GB SQL pool for $150/m. Am I missing something? **Edit:** Nevermind, realized I was looking at elastic models and there was a single database tab. $15-$30 for a 250GB storage is much more reasonable. I guess I'll have some time to see how it goes with the 2GB limit. I'll probably switch to azure if necessary when my hosting is up or if I make my money back off my hosting costs.
Thats poor design. Tightly coupled UI to the DB is goign to cause problems as things change with the system. 
Not as much work as front-end binding I disagree that its bad design. I know its trendy to say so but its really not. Binding the UI to the Data is the entire.point of 99% of what we make. Almost every website is a case.of "I've got this data, and I want it putting on a page" Yes, we may have to do some work if the design changes at a later date....so what...the customer will pay us for it. Performance is better with server-side and THAT'S what we get paid for. We dont get paid to make our own jobs easier and sacrifice the website in the process.
OP should look into something like Octopus Deploy. Handles transforms and also allows variable replacement, at a per environment level. 
Number of packages != richness(?) of language?
While raw numbers usually don't tell the whole story, the .NET OSS ecosystem is indeed relatively small, and in my experience Nuget is underutilized compared to equivalent systems in other popular languages.
Our deployment system did use MSBuild under the hood but had some custom stuff wrapped around it, I am doubtful I can go into details. Octopus (as /u/elkazz mentioned) is where my team is currently moving to. edit: I've since removed that bit from the post because it has sparked discussion about which I cannot elaborate on. 
What, in my experience almost every library you're likely to use is available through nuget. But yeah, the OSS community is a lot smaller than for the JVM languages.
Wow, that's the most precise answer I have ever received. Thanks ;)
If its built into the CLR there's no need to download a package. It is the stupidest graph I have seen in ages; data looking for a purpose == noise!
That would have solved the problem. It's a shame that information isn't available on the [SlowCheetah extension page](https://visualstudiogallery.msdn.microsoft.com/69023d00-a4f9-4a34-a6cd-7e854ba318b5). Thanks for sharing ! I've updated the post with this information.
Regarding your update: &gt; Assuming I intend to use EF Filters, it wont work because I dont have link to Organization for each and every entity and if I put OrganizationId in all my entities then does not that make the database denormalized? As they say, "Normalize until it hurts, denormalize until it works." "Bolting on" multitenancy is hard to get right. In such as case, making every entity class require the tenant would give me some peace of mind that there were fewer holes (assuming a general "apply the tenant ID" is used).
For structured data you would be using Table Storage which is still under the same umbrella as Blob Storage. Check out this post to see if it's what you're looking for: http://www.troyhunt.com/2013/12/working-with-154-million-records-on.html Table Storage is also much, much cheaper than spinning up a SQL Server in Azure. Since you said money was a concern, to give you an idea about cost, the above blog post states: &gt; if I want 100GB of storage and I want to hit it 10 million times, it’ll cost me $8 a month.
As bizspark developer - you'll get $150/month credit per developer and msdn subscription. It's pretty nice program.
tl;dr: **regex [ -~]**
Yes, follow the Web API tutorials on asp.net. http://www.asp.net/web-api/overview/getting-started-with-aspnet-web-api/tutorial-your-first-web-api
Not entirely sure what's prompting the question, but I think there's internal discussion of what to do for APIs that are not implemented into .NET Core, by design.
If a user sees it it means my unit tests suck.
Sounds like a case for adding a new unique exception if the current ones can't handle the concept. I'd still think a unique message would get the idea across just as well.
So why don't they just not include that method or class?
There is actually a `IgnoreSection` method in ASP.NET Core 1.0 MVC (or whatever I should call it..).
I use it for both. Its the exception I'll throw in the default clause of most case statements to catch when I'm missing handling a case. Its also a placeholder exception I'll put on things that are not finished yet.
When the time comes reply and post a link its not like we are going to switch anytime soon :)
That sounds horrible. There are IDE plugins that specifically flag NIEs as incomplete work.
There was a good thread about this not too long ago: https://www.reddit.com/r/csharp/comments/40zpvc/for_those_who_also_know_java_are_there_any_tips/ C# and Java are similar enough (especially if you know Java 8) that you should be able to dive in without a problem. When I started in .NET, I found myself Googling "&lt;Java Classname&gt; C#" all the time, and you'll be in the swing of it within a month. What part .NET you should play with will really depend on the job. Front-end? Back-end? Desktop? Web? Mobile? From what era?
I may have mischaracterized that. Immo is the program manager for .NET, and it [does sound like they use PlatformNotSupportedException](https://twitter.com/terrajobst/status/705106373592256512) for cases where it's not meant to be implemented. Reading it again, it sounds like they may end up releasing .NET Core before it's 100% implemented, and don't want people to be under the impression that those functions throwing NIE *won't* be implemented, just incomplete. I don't know, but the link above is to the discussion.
[**@terrajobst**](https://twitter.com/terrajobst/) &gt; [2016-03-02 19:03 UTC](https://twitter.com/terrajobst/status/705106373592256512) &gt; @robertmclaws @DamianEdwards @blowdart That's how we use PlatformNotSupportedException. ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://np.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
The plugins won't be inspecting .net core code while you're developing so what's it matter?
Be aware that C# allows you to use almost all new features even if you target pretty old runtime, usually you just need to reference some helper library that contains some classes that are used by compiler for some feature. Almost all new features are compiler based and not CLR based.
nice. now we wait until the new mvc is stable...
It's simple. * Not Implemented: it will be implemented in the future * Not Supported: it will NOT be implemented in the future (for this specific subclass, platform, etc)
Last year I went from .NET only to having to do Java. The best advice I can give you get familiar with Visual Studio cause the IDEs are a bit different and that really slowed me down trying to find stuff in IBM RAD. Then it really depends on the work you are doing, if you are going to be doing mostly MVC, you are probably good. If you are going to be doing WPF well then you really need to go learn about WPF. Other than that learn as you go, from what I learned pretty much anything that you know in Java there is an analogous technology in .NET (sometimes literally the same thing Log4J .. Log4Net) What skills do I use, well depends sometimes I write windows services, sometimes class libraries, sometimes database stuff so really depends on your job. The one thing that you should look at if you are doing web work is how to manage and configure stuff in IIS. Other than that you should be good to go.
Exactly, in java to call a web service from code I needed like 10-15 modules (due to dependencies). In .NET it's in the CLR.
Core code sets the pattern for the rest of us to follow. In terms of patterns and practices, most of the best code I've seen looks indistinguishable from framework code.
ItsTheSameButWithPascalCase ;)
The .net framework is huge, encompassing and mostly right. I know when i went from c# to java i was surprised at how many third party libraries were the defacto standard for getting things done (IE: guava). Look at what Microsoft provides before going third party. If you find your self needing some functionality, it's highly likely that Microsoft built it at some point. For everything else it's a nuget package (aka Maven). Oh, also, C# only really has one build system: MSbuild. 
Maybe we should compare JVM vs CoreCLR then. Not sure how really modular Java is, I've never had patience for it... 
&gt; IBM RAD Condolences
It's revolutionary and all languages should have it 
I'll tell you what it means. It means the original interface designer got it wrong, made the surface API way too wide, and should go look up Single Responsibility Principal. And the poor devs having to implement 2 years down the line have to throw exceptions cos there's no way they'll ever be able to pad out their concretions to that kind of level.
I do desktop Windows stuff, and web stuff using MS and non-MS tools. I enjoy working on both "platforms". I can tell you that npm is full of crap, half baked ideas, which quickly get superceded (and superceded again) by the next kid on the block. But yeah, the OSS community is definitely smaller in .net...but growing.
I can be your friend /u/asdfman123
Not sure why you think the purchase of Xamarin is significant at all? * Mono is an open source project. The fact that the Xamarin team lead it is irrelevant - if the project is mismanaged then others will take over or fork. * Microsoft have had a good relationship with the mono project for ages now - since *well before* there were any suggestions of them buying Xamarin. * Anyway, Mono has been integrating large portions of Microsoft reference source in to Mono for several versions now - so the codebase is already largely a MS codebase. * Microsoft has been pushing their own open-source .NET core pretty hard. It will be interesting to see what happens, but I suspect there will be some convergence, with both projects borrowing from each other. TL;DR: What are you even on about?
With the purchase of the main mono.NET team a new path is needed.
No, stop drinking antimicrosoft hate cool aid. Long story short so far Microsoft's big open source push has been really impressive and generally they're handling it as well as any other open source project. So mono.NET shouldn't change management until there is a point in time it's mismanaged, then we'll see many forks which eventually will lead to one fork that becomes the spiritual replacement of the main mono.NET.
I see no issue with having an alternative to M$, as has been the case for years before.
In the new ASP.NET Core you can just inject IHttpContextAccesor and you you then have access to HTTPContext on that (They auto populate the property). They made that so much simpler.
So far I am staying on Win 7
No issue really, just it shouldn't be Microsoft has their hands on it therefore I need an alternative. There should be a reason to call for an alternative based on merit. Like Microsoft mismanaging or neglecting it first.
.NET is going into a consolidation with the acquisition by Microsoft, if in two years you wish to have an alternative now is the time to start. I do not hold Microsoft in contempt I would have the same issue if it was apple or google that had centralized control of .NET
Wow, that video is oddly specific to the question.
I posted a while ago, and did not intend spam.
In what aspect. Out side on Microsoft the development was Xamarin and Miguel with that loss there is an open spot for community developer(outside of M$)
Get a Pi and a Fez Hat: https://www.ghielectronics.com/catalog/category/538 Then install windows 10 IoT, use the provided sample code at http://connectthedots.io
I used LonWorks back in the day. 
Just a heads up, the beta signup is open now, and it seems like people are instantly excepted into it right now. It's pretty great right now. It's not exactly a VS+Resharper killer but it's probably already a solid alternative to Monodevelop for the OSX and Linux devs out there. 
My team ditched EF and we are using PetaPoco, works well with SPs, views and TVFs. Also check NPoco.
As pretty much everyone has said, unless this sensor has some kind of digital out then you would need to convert analog to digital or pick up the signal through the audio card and the Mic IN jack. Just about any small embedded computer can act as a analog-to-digital converter. There are even .NET based controller like the [Netduino](http://www.netduino.com/).
Totally, anyone come to mind at the top trusted independent(non-Microsoft) developer?
We don't need a hero, just contributors.
Good point I now more then ever see the value of having a healthy developer community with no center "hero"
what kind of sensor?
Hahaha, what!? I don't know what's funnier, you wanting someone to debug for you (for free!) or using VS2008.
This statement doesn't even make sense.
Neither of which interface with a sensor.
When you take out 90% of the abandon ware in npm the comparison looks a lot better.
I want a way to connect directly to the sensors. I already have a Windows machine, I do not want to add on top of that a Linux machine.
 Generally speaking I looking from something that could talk SPI or I2C directly from a Windows machine. Another person mentioned the USB device Nusbio. It looks like it can do that directly from C# or VB.NET. I am going to look into it.
A few comments. 1. you are worried about bandwidth for a 4 byte value? 2. USB isn't limited to 13kb/s. 3. both Arduino and that nusboi both FTDI chips to convert RS232 to USB.
I don't mind helping to pitch in during any spare time I've got. I'm a little bored and have been looking for something more challenging. Starred and will try to take a look this weekend....
I cannot believe Microsoft is ignoring this... Why not use Mono's System.Drawing?
&gt; We, and we believe many others in the community at large want a first-class 2D imaging library with a simple API that is not simply a wrapper round an existing library Why not? 
Why not a wrapper? Several reasons. If it's a wrapper then you have vastly increased build complexity, distribution of code is more difficult, your implementation is limited to the constraints of the underlying library and suffers all the bugs, debugging is more difficult, and code contribution requires knowledge of at least two languages. I believe we'd be much better off going the same direction that Golang have with their own implementation. With a single, unified codebase imaging is far less daunting to the average developer. 
Ignore that liberty guy I'm pretty sure he is high or has no reading comprehension skills. How experienced with electronic engineering are you? You might want to look at the One Wire temperature sensors such as the DS18B20 IC if you have some electronics knowledge. Linux has a kernel module that supports them and I use this on a Raspberry Pi.
I am not high. I just want to do it directly from a Windows machine. 
You're probably going to write bugs as well. If you choose a well known project they're probably experts and do their stuff better than you will since they are invested in it At least with a wrapper it will be less of a big project for you to take on. You can write your methods and unit tests for how you use the underlying library and help them identify bugs if any are found. 
I didn't know this was out there. One of my main stumbling blocks going to .Net Core was the lack of System.Drawing. So this makes my life easier as I was thinking I was going to have to find time to write this code myself. And I have a set of about 80 color matrix and convolution filters that I could easily convert to this that are missing from your list. Need to figure out which ones would be useful for the general public though... Probably not the ones dealing with bump map and normal map generation but I'm sure that I have a couple that would work as a pull request.
Maybe check this out and see what the difference is. http://archive09.linux.com/articles/53582 Edit: super old but could help
This one is something else, mono is working without any problems but it's just a part of the dotnet package.
Not a link, just a quick pointer on dlls and exes, (I find compiling and linking really confusing in Java now I am on dot net, it's handled so nicely in Visual studio) Dlls and exes are largely the same thing - libraries - the main difference being an Exe has an entry point, it can be run rather than just referenced. An Exe, however, may also be referenced in another library. Some dlls are stored by the Windows system (in the GAC - global assembly cache - or 'Gacked'). These can be referenced simply ~~and will be copied to your bin directory (where VS compiles to) when you build~~ (thanks /u/DonDavio for correcting my brain-fart) and don't need to be copied with your app (unless you have gacked them yourself, at which point it becomes more complicated and an advanced topic). You can also referenced ungacked dlls by their full path. If you are using Visual Studio, it's all handled in the references section of the solution explorer, otherwise you need to add them as a parameter to your msbuild call. More on the .net byte code can be found Googling IL or ildasm, and for a real deep dive into the compiling process Google Roslyn (some great YouTube videos are available)
You sir, are a genius. It's working like a charm :)
ya gotta love linux. when all else fails, just lie your ass off about your core configuration parameters and it'll probably work out okay eventually. :D that was a complete guess about which file it might be in, by the way, but then again, "ya gotta love linux" sometimes. by convention, that's where it usually is, so why mess with it. which os string did you end up using? and did you find the list within DNX or just find a random one that worked? good on you for taking my vague suggestion and making it work so fast, too!
I'll try to take a look in the next few days, after a new challenge
Yeah, there might well be bugs but I'd much rather have a bug I can easily spot and fix than one I can't. I'm able to write significant features also like my collection of resamplers, the gif encoder (A massive improvement over System.Drawing), or simply the multithreaded approach I've been able to use in the core. I think it's fair to say I'm invested in the work and field. I've been running the entire project for four years now. (Though I'd never consider myself an expert)
I can't speak to the database connection because you only stated that there are problems but not what the problem is. As for the changes. In a MVC site by default the views are not compiled so you can update and save and after refreshing the browser you'll see changes. However, the models and controllers are compiled so you'll need to rebuild your project to see those changes.
Thanks... Also, that's a good point. I keep forgetting about that tag. I have registered the project with http://up-for-grabs.net but I keep forgetting to tag the lower-hanging fruit. 
honestly i'd love to see the normal and bumpmap ones in there, too.. or maybe as a plugin? I'm struggling with so many things trying to do gamedev without jumping unity (forever missing xna). Stuff like this would help.
I simply replaced every occurrence of "elementary os" with "ubuntu" and "0.3.2" with "14.04". In /etc/os-release file, of course. Nothing else was needed to do. As you said: ya gotta love linux :D
It partly depends how large your database is and how important speed and memory efficiency are. Your approach would work but won't be as quick as something that operates closer to the data (instead of going through the process of creating the objects then saving them), and it will be heavy on memory usage. For a large-scale operation that will need to be repeated you could consider an ETL (Extract, Transform and Load) tool, which can process and modify data rapidly using pipelining (meaning your operations form a pipeline through which the data flows, with different steps being done at the same time to different records). If it's a large database and you will need to do the transformation often this can be worthwhile for the speed gains and the ease of seeing what's going on. But if it's a small project and a transformation you will seldom do, then that might be overkill and writing a custom utility as you describe would get the job done.
Another solution is to take all the logic code into a seperate class. And then using events to communicate from the view classes to the logic class when something happens. This way none of the views know each other or know about the controller. The controller knows about the two views. 
I kind of just skimmed the first part of your post... you really need to post your schema we can tell if there's a problem with your primary keys or relationships. To answer this, however: &gt; So the question is if it's possible to solve this without breaking the request into multiple pieces, inserting the tournament first, reading the id back, then creating one and one fight for that tournamentID, adding the fight participations for that fight, etc. Sometimes this *is* necessary. You can wrap multiple related database actions in a transaction. Inside the transaction you call `SaveChanges()` and the db will *act like* it's been updated (you can access generated ID's, etc.), but unless you call `Commit()` all of the changes will be rolled back when the transaction object goes out of scope. using (var transaction = myDbContext.BeginTransaction()) { InsertFirstThing(); myDbContext.SaveChanges(); InsertSecondThing(); myDbContext.SaveChanges(); if (EverythingWasSuccessful()) { transaction.Commit(); } }
Glad to see they are improving Git support. It's a fucking abysmal source control, and using it with VS is terrible. I honestly miss at work being able to just right click and do "Get Latest" but now because of how fucked up Git is I have to piss around with totally inconsistent with each other commands on the command line just to achieve what TFS managed years and years ago. Of course it might just be how badly work set Git up I have no idea but my productivity has gone down a lot with wasted Git time.
I'd go the naive implementation then, but create a dbcontext for his database as well. Then you can read data into objects, automapper to map to your objects, save your dbcontext.. Definitely a slow approach, but it's very readable in code, everything is defined.
That's a good idea!
In Visual Studio, it is either New -&gt; Solution or writing one by hand. I would guess Project Rider is similar. If you want to write one by hand, the file format is pretty simple: https://msdn.microsoft.com/en-us/library/bb165951.aspx If you already have a csproj, then you can usually just open that and a sln will be auto-generated (at least in Visual Studio).
I think there are still issues with the Core stuff which is why I'm avoiding it for the moment. Do you have a specific need or do you just want to code with .NET? If the latter than it should be straightforward to install Mono as Elementary OS is Debian based. Here's a tutorial I wrote for setting up Mono on Ubuntu Server if it helps ... http://coderscoffeehouse.com/tech/2015/12/09/mono-linux-setup.html And here's the second part for setting up ASP.NET ... http://coderscoffeehouse.com/tech/2016/01/19/aspnet-linux-setup.html
Did you get an invite to project rider?
I signed up and immediately got access. Not sure they're really dealing with invites right now, did you sign up? 
Sounds lime yeoman and project rider aren't doing a very good job Why not just use vs and do it properly with better tools?
Yes I registered interest but there was a questionnaire and a waiting list, for me at least. I'll take another look, thanks!
Thanks for the link. I'll have a read tomorrow morning. I'll let you know how things go.
Project rider is basically an early beta right now but it's already a nice alternative to monodevelop. And im not using vs because I'd rather not work in a windows environment. And using an IDE like Rider is much simpler considering it's Jetbrains and I use like 3 other Jetbrains IDEs already. Switching between OSes for different frameworks is just a bit inconvenient. And the majority of my work isn't dotnet. 
Vs code? https://code.visualstudio.com/
Then what is calling IdentityConfig.ApplicationManager.Create()? Something in the framework which you can't control? We're kind of just guessing here without a code sample. If that's the case, you're screwed. I wouldn't disable the runAllManageModules setting as that's how MVC/WebAPI accomplish their extensionless routing if I remember correctly. Best bet in such a case would be to separate the assets onto a different site not running .NET at all, e.g. content.yourdomain.com.
You use node as you normally do to compile two scripts. One for the client, and one for the server. This is what webpack recommends (see here: https://github.com/webpack/react-webpack-server-side-example). So, yes, you can use node-sass for the pre-compilation of your scripts. I have finished a complete example of using this ViewEngine in a production React application. https://github.com/pauldotknopf/react-dot-net
https://github.com/pauldotknopf/react-dot-net
This isn't really a "product" that supports X or Y. It is a typical React application, so anything is possible. However, I am currently working (on another branch in the repo) to make an exact copy of the default ASP.NET 1.O Core (ASP.NET 5) default template with Identity, account management, etc. From the UI side, this React template will look and behave the same. This is still a WIP though. What this template currently provides is a path to building React applications *correctly* in ASP.NET. The two big guys out there (NodeServices and ReactJS.NET) do it wrong. I could elaborate further if you like, but this should be the go-to approach for building React apps in ASP.NET.
First off, I don't believe Identity exposes any JSON endpoints for you. This will have to be handcrafted, but this project will eventually have the boiler plate code for it. [redux-auth](https://github.com/lynndylanhurley/redux-auth) can do everything in React (forms/validation/tokens) for you, you just need to implement a server API that conforms to what redux-auth expects. It is just a matter of building some JSON endpoints. I'm thinking about using redux-auth in this starter template. But, as I said, this project is ready to go without any *quirks*. It is basically an empty React application with a demonstration of how to integrate it into ASP.NET MVC. There isn't anything more outstanding, because their isn't a lot of opinions here. The membership addition I was referring is simply one way to skin a cat with this project. When it comes down to it, if your are comfortable with React, and comfortable with ASP.NET MVC and WebAPI, you are free to do as you wish with this project.
Neat! Will have to try it out, I've been looking for good examples and so far it seems wildly different than what I want from a good solution with the separation of back end and front end.
I could swear this is a word for word repost.
Just wait and see what they will announce at the build conference.
Microsoft bought Xamarin because it wants more apps built for Windows 10. It will surely make it dead simple and free to port your existing (Xamarian-based) iOS, Android app to W10. I believe Xamarian will be included in the Community Edition without limitations but I hope it will also be open sourced in the near future.
Please tell me where u have seen this because for once I actually write something by just what was in my head. Didnt even know something like this was ever posted. 
Good idea.
I found the old post which was 4 months old, it wasn't word for word at all. The guy was very happy with the acquisition as well and was very excited in their post. Don't know why people are down voting you.
I'd read it as either a planned feature is not yet available, but will be in future releases. Or how I've used it: where something possibly expected is not available by design. For example I have an API, but some resources can only be read (GET), not created (POST), updated (PUT) or removed (DELETE). The latter three operations return "Not Implemented", because someone used to CRUD API's may expect them to be available. By returning Not Implemented, rather than Not Found, I'm giving positive feedback that the client isn't just sending the wrong request, but that I've deliberately chosen not to implement it
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/sysadmin] [Help with ASP.NET issue x-post from \/r\/dotnet](https://np.reddit.com/r/sysadmin/comments/49dta2/help_with_aspnet_issue_xpost_from_rdotnet/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
The japanese characters are comments. They should have no effect on the script. 
Man, I dunno. .75 gigs of ram isn't a lot... I can't imagine running much of an app on the specs they have at the $15/month tier. Plus, I don't see any low-tier support for job scheduling/cron.
Depends on your load, really. Personally I've found it to be fine and not that expensive compared to traditional hosts, especially when you consider how damn easy it is to set up and run, and all the features you get. I haven't played with them myself, but I think azure webjobs are supposed to be scheduled/cron style stuff, have a look..
Need idea, making it cheaper to run SQL Server without Windows licenses.
Really? The Windows license is a drop on a hot plate compared to the SQL Server licences.
I still feel like I'm going to wake up from this dream at some point. Or the team from Sliders will appear and tell me I've been whisked away to an alternate reality.
I wonder if they'll rely on this implementation on Linux for some of their azure offerings. 
You could use it to host an OWIN runtime for a pretty capable web server.
Visual Studio 2015? Have you installed the update 1? Fixed the error for me even though the update took something like six hours on my subpar laptop. 
Oh boy!
There's nothing wrong with Windows but it's been apparent to me for the couple of years using Linux that it really shines as a server platform. Linux and Windows are both great platforms but they have different USPs. In the past Microsoft would take this as a challenge to do whatever it could to kill the competition even if it's own product was inferior but the current CEO mercifully seems to have a more forward thinking approach. This announcement makes sense: Fortune 500 companies do not use Windows for their RDBMS systems and this was never going to change. Now Oracle really does have to up its game.
&gt; VS 2015 does take tsconfig.json file into account Does it really? I think this only counts for the new .NET Core related project types.
My bad, typo. It should be "does not" thus the problem.
Hangfire.io can handle your scheduled tasks. No need for support beyond asp.net
MSSQL is already pretty big in a lot of banks.
WPF is newer and is likely to be supported longer. For older software Forms is likely to be used and can be used for new development as part of an org's standards.
Thanks for the reply! I've not heard of this list before and its definitely handy. I've just submitted a pull request (first one!) to update nUnit's VB.NET samples. Again, thanks a lot for the help. Really appreciated.
I started with win forms and moved to WPF and never looked back. WPF is definitely where you want to be. You have much better control over the UI, the code is separated with MVVM making it unit testable. I could go on. 
You can create html5 desktop apps using node, nw.js, and edgs.js for .net interfacing: http://tangiblejs.com/posts/nw-js-electron-compared
Wpf no question. Forms has MAJOR hangups that makes developers and companies prefer wpf. Seriously fuck forms. That was my first and I'll likely never touch it again due to it being outdated.
As most have said, WPF/XAML is really where things are heading. They're a lot more versatile, have access to a wider range of controls, and are generally more aesthetically pleasing. The drawback to WPF in your situation is that they are somewhat more complex, and are really best in conjunction with MVVM. It's not really that big of a deal, but diving into it with no previous C#/XAML/MVVM experience *might* be a bit much, right away. But I guess it also depends on what you're hoping to do with it. WinForms are probably going to be a lot easier to get started, with, and they can even look pretty nice with some third-party libraries (like [MetroModernUI](https://www.nuget.org/packages/MetroModernUI/)). So if you're just looking for getting started with it for personal projects, I don't think there's anything inherently wrong with starting with WinForms... but if you have your eyes at all set on anything more than that, WPF is definitely the place you'll want to end up.
[removed]
I'm surprised you haven't found any open source projects that need unit tests. I can't say that I've ever found one that *didn't* need them... BADLY. Most don't even have them and those that do seem to generally only have a few minor tests with minimal API coverage. That said, I've been slowly trying to improve the unit test coverage of [MimeKit](https://github.com/jstedfast/MimeKit) and [MailKit](https://github.com/jstedfast/MailKit). Of the two, MailKit is by far in the most need of them. I think I'm up to ~83% coverage for MimeKit and the last 17% or so for MimeKit will be absolutely brutal. If you're interested, though, a huge hunk of the missing unit test coverage is with my HTML tokenizer. MailKit coverage, on the other hand, is at a sad 43% which probably means that there is a lot of low hanging fruit (such as testing that proper ArgumentExceptions are thrown for various null or invalid inputs). Update: The projects in the GitHub list that /u/Cyclons posted are probably better to get involved with over MimeKit and MailKit due to their popularity and the potential exposure you can get out of contributing to those (which can result in job offers and such down the road). MimeKit and MailKit probably won't gain you anything long-term, sadly, but if you love email as much as I do, I wouldn't mind the contributions especially to unit tests :)
WPF is basically in deprecated state and didn't have an update since around Windows 7. It also still uses DX9 as render engine. WinRT/UWP is the new GUI technology that will be supported further. If you don't need any WinAPI interop or desktop features - it's the best UI framework to date in simplicity, paradigm and performance.
Still don't you want to go UWP in most cases anyway? Is the difference between UWP and WPF that big? 
Thanks for the info. I've cloned MailKit and am happy to add a few tests. I was thinking about adding a few within SaslMechanismTests, especially to capture the various exceptions that could occur. Does this sound like an okay plan?
WPF has insanely bad performance compared to UWP, especially with video and with DX interop. And there is nothing wrong with COM. 
* Windows 10 only * It may be restricted, but for most cases, especially if your program works without admin privileges and don't need to change system settings it's good enough. Edge is written in UWP and it's a damn complicated piece of software.
COM, then COM+, then DCOM, then suicide. 
UWP is windows store only no? I don't run windows 10 and don't expect a lot of users to either. My mindset is business use cases which can force generally decide what OS the user runs but for business use cases they probably aren't on 10 anyway. Could easily still need to support xp.
So, I wanted to ask if you guys have seen that error before. Also: C:\Program Files\IIS Express&gt;iisexpress /config:"c:\Users\Crowley\Documents\visu al studio 2015\Projects\ContosoBooks\.vs\config\applicationhost.config" /trace:e rror Starting IIS Express ... Initializing the W3 Server Started CTC = 64585693 W3 Server initializing WinSock. CTC = 64585693 W3 Server WinSock initialized. CTC = 64585693 W3 Server ThreadPool initialized (ipm has signalled). CTC = 64585693 Failed processing with hr = 800700c1 Error loading global modules. hr = 800700c1 Terminating W3_SERVER object Start listenerChannel http:0 Initializing the W3 Server Started CTC = 64586816 W3 Server initializing WinSock. CTC = 64586816 W3 Server WinSock initialized. CTC = 64586816 W3 Server ThreadPool initialized (ipm has signalled). CTC = 64586816 Failed processing with hr = 800700c1 Error loading global modules. hr = 800700c1 Terminating W3_SERVER object InitComplete event signalled Process Model Shutdown called Unable to start iisexpress. For more information about the error, run iisexpress.exe with the tracing switch enabled (/trace:error).
http://stackoverflow.com/questions/11687267/iis-express-will-not-start
I write software for a living. Both web based and desktop applications. As long as you are programming for the web, stick with WPF.
Windows Forms is deprecated. Go with WPF all the way. 
It just felt like I would get weird errors, and I'd have to spend hours and hours and hours (okay, maybe not that much) combing through docs to figure out what was wrong, because SO didn't have the same situation as me. It just feels like WPF is more debuggable, more beginner friendly.
Oh, God. WPF for sure. It's not as easy to learn as WinForms but it's such a modern, and well designed framework and it's very capable. 
Stacktrace?
WPF
I mentioned Fortune 500 companies not using Windows and also praised Linux. I imagine even those benign observations would be enough to rile some.
If it's a mission critical system, something core to your or someone else's business then I would say no. I've found Core is a moving target and I'd give it time to settle before using it in production. If you want to do cross platform MVC5 works perfectly well on Linux. Here's a tutorial I wrote for getting set up ... http://coderscoffeehouse.com/tech/2016/01/19/aspnet-linux-setup.html
You may have been down voted for saying Fortune 500 companies don't use Windows for their RDBMS which is incorrect. 
My team has been keeping an eye on things since dnx first was released - and took a bit deeper look last month in prep for a new project. We decided against it. Not ready yet.
Yes they do use Windows for things like Active Directory which can't run on anything else but for other systems Unix is preferred for its stability. I've worked for enterprise organisations where everyone used a Windows client but all the back office systems were using Unix. It might have changed but historically MS SQL didn't offer 24 hour support which is unacceptable for mission critical systems.
We are trying to write our code portable so that we can upgrade in the future (maybe even run on Docker), e.g. use Owin, use Path.Combine, etc. 
I have been using asp.net core in production now for ~2 months. It has been a pleasant experience, although my team members might have a different opinion. The biggest advice I can give you is be a stickler when it comes to design/architecture of your code. Don't just copy code off the internet. Don't follow the tutorials and use a DbContext in you controller action. Make the assumption that the frameworks you use will change, and make decisions with that in mind.
COM is good, when used correctly. As is everything. We have developed custom framework for live video processing that is obviously written in C++, but has .NET C++ managed layer, that communicates with native libraries through COM, but still has nice .NET API to be used in all the applications. Since we started developing on this model, productivity quadrupled at least. Regarding the WPF vs UWP issue, I'd like UWP features in WPF. Migrating to UWP is (for my work projects) impossible.
I have one that I made as a demo for a WPF MVVM presentation at a local code camp a few years back, Netflix got rid of their OData API so it doesn't function anymore but it's a straightforward read. https://bitbucket.org/snuxoll/campflix/src
I appreciate you taking the time to post your call stack and exception details. I'll show you my thought process on this and I have an option at the bottom that I believe is pretty reasonable. Are you running this on a Windows 7 or another operating system? Looking at the exception and stack trace... Message=Could not find Windows Runtime type 'Windows.Graphics.Display.DisplayProperties'. Here is GraphicsDevice.cs https://github.com/mono/MonoGame/blob/develop/MonoGame.Framework/Graphics/GraphicsDevice.cs You are using this constructor on line 201 public GraphicsDevice(GraphicsAdapter adapter, GraphicsProfile graphicsProfile, PresentationParameters presentationParameters) { Adapter = adapter; if (presentationParameters == null) throw new ArgumentNullException("presentationParameters"); PresentationParameters = presentationParameters; Setup(); GraphicsCapabilities = new GraphicsCapabilities(this); GraphicsProfile = graphicsProfile; Initialize(); } Initialize is basically dropping right into PlatformInitialize() on line 257. internal void Initialize() { PlatformInitialize(); PlatformInitialize is different for DirectX and OpenGL. https://github.com/mono/MonoGame/blob/develop/MonoGame.Framework/Graphics/GraphicsDevice.DirectX.cs https://github.com/mono/MonoGame/blob/develop/MonoGame.Framework/Graphics/GraphicsDevice.OpenGL.cs Looking at the PlatformInitalize() for OpenGL. I see no reference to type Windows.Graphics.Display.DisplayProperties so OpenGL isn't interpreting any type of Graphics information nor using this type. So looking at GraphicsDevice.DirectX.cs I do see calls to this library for certain "Windows builds" private void PlatformInitialize() { #if WINDOWS_PHONE UpdateDevice(DrawingSurfaceState.Device, DrawingSurfaceState.Context); UpdateTarget(DrawingSurfaceState.RenderTargetView); DrawingSurfaceState.Device = null; DrawingSurfaceState.Context = null; DrawingSurfaceState.RenderTargetView = null; #endif #if WINDOWS_UAP CreateDeviceIndependentResources(); CreateDeviceResources(); Dpi = DisplayInformation.GetForCurrentView().LogicalDpi; CreateSizeDependentResources(); #endif #if WINDOWS_STOREAPP CreateDeviceIndependentResources(); CreateDeviceResources(); Dpi = DisplayProperties.LogicalDpi; CreateSizeDependentResources(); #endif #if WINDOWS CreateDeviceResources(); CreateSizeDependentResources(); #endif _maxVertexBufferSlots = _d3dDevice.FeatureLevel &gt;= FeatureLevel.Level_11_0 ? SharpDX.Direct3D11.InputAssemblerStage.VertexInputResourceSlotCount : 16; } The #if WINDOWS or #if WINDOWS_STOREAPP are "Conditional Compilation Symbols". DisplayProperties is only available on a minimum of Windows 8 if you are using WINDOWS_STOREAPP. https://msdn.microsoft.com/en-US/library/windows/apps/windows.graphics.display.displayproperties.logicaldpi DisplayInformation is only available on a minimum of Windows 8.1 if you are using WINDOWS_UAP. https://msdn.microsoft.com/en-us/library/windows.graphics.display.displayinformation.aspx You can edit this in your project properties http://i.imgur.com/MncVkKc.png. Here is a list of them for mono-game Android - TRACE;ANDROID;GLES;OPENGL Linux - LINUX;OPENGL MacOS - MONOMAC;OPENGL Ouya - TRACE;ANDROID;GLES;OPENGL;OUYA PSMobile - DEBUG;PSM Windows - DEBUG;TRACE;WINDOWS;DIRECTX;WINDOWS_MEDIA_SESSION Windows8 - TRACE;NETFX_CORE;WINRT;WINDOWS_STOREAPP;DIRECTX;DIRECTX11_1;WINDOWS_MEDIA_ENGINE;WINDOWS_UAP WindowsGL - TRACE;WINDOWS;OPENGL WindowsPhone - TRACE;DEBUG;SILVERLIGHT;WINDOWS_PHONE;WINRT;DIRECTX iOS - IOS;GLES;OPENGL If you are developing a windows 8 or 8.1 "app" that would run as an app rather than a windows standalone application, you have to run it on a machine that has the appropriate assemblies. I believe if you change your compilation symbol to WINDOWS, your program will be able to build and run fine. I'm pretty sure barring some odd library issue, you should be able to ultimately build/test for WINDOWS and then build (but not run) for WINDOWS_STOREAPP, WINDOWS_PHONE,WINDOWS_UAP. You'd have to port the app off your machine to another machine. If you are developing on 8, 8.1 or 10. We can discuss this further :D
I'm with Oxoron, www.microsoftvirtualacademy.com is a giant free learning center from Microsoft. Everything you need from beginners to certification.
Ok - I understand. Thanks for the advice. 
Tortuga Chain needs tests, but not unit tests. It's an ORM so you'll have to write tests that actually hit the database. https://github.com/docevaad/Chain
We need unit and integration tests for PetaPoco. I've added a lot but there still plenty the go
Man, this needs to be added to the FAQ or something. :-)
I didn't catch if it is open source. I wouldn't read too much into that marketing. On the other hand, supporting PLINQ is a nice idea.
I'm using React with MVC, but as an SPA + WebAPI. I am only going to use Razor if I need it. This way, I can use React Native someday and learn new things. Also, when coupled with Webpack and NPM, there are tons of packages to use. Check these out: http://blogs.taiga.nl/martijn/2015/12/10/develop-reactjs-asp-net-web-api-apps-in-visual-studio-2015/ https://github.com/martijnboland/VSReact 
Interesting perspective. I don't know enough about COM to understand all of this but makes me want to look into it 
To be honest, me neither. Our C++ guys coded the lower tier and the managed wrapper. But for example, contacts for the API is written in C# and the managed code implements it. Btw one of the reasons this being successful must be that we have put a lot of time into negotiating a fitting API. Which was again possible because of managed C++ and COM.
Find the source code of [Papercut](https://github.com/jaben/papercut). Papercut is written in WPF with Caliburn.Micro.
Google
Yea I tried to google it, but theres not like an entry on wikipedia or whatever. Its not like I need to know which companies do use .net, more like what industries do use it. Thanks for your answers anyway. Would even appreaciate "let me google that for you" links when you checked if the results are what I look for.
&gt;I am trying to initialize a GraphicsDevice **in a windows forms application** like this: One of the things I kind of ignored is that your windows forms template may not be setting up the environment to use the monogame library. Are you creating a windows forms application and then just referencing the library? Is there an intent to just use some 3d objects in an existing windows forms application? or are you trying to create a monogame game? 
I managed to fix it by editing the xml of the .csprog file, added HintPath to this line: &lt;Reference Include="MonoGame.Framework"&gt; &lt;HintPath&gt;$(MSBuildProgramFiles32)\MonoGame\v3.0\Assemblies\Windows\MonoGame.Framework.dll&lt;/HintPath&gt; &lt;/Reference&gt; I guess just referencing the library isn't enough, it works without error now. Thanks for the help!
No problem! Glad I could help.
Add a route that just maps /StaticContentDir/* to StaticFileHandler?
While the core content may be static, it still may need to be represented by a view for layout purposes.
The weather here isn't bad at all. It is only really hot for a couple of months of the year. When it is hot, you are going from an AC house to an AC car to an AC building and back again. The rest of the year, is beautiful.
The code example linked does not indicate that is needed in this case. The raw content is returned as is, no view markup with it at all so a static handler is likely the easiest scenario however you are stuck putting static content in specific folders or writing one PITA of a route manager. 
In the case he linked to, it was 100% views. My understanding is OP is just looking for a way around a hard-coded switch statement, which is what I provided in my other post.
I saw strings being passed to the View method that indicated static files. I could be mistaken as its been a few years since I last did MVC but that simply returns the content of those .cshtml files. There is no actual view, you are telling MVC that the view to return is those files. No processing of the output is done.
The view still inherits the layout. StaticFileHandler does not utilize layouts.
The second way looks more concise.
What about InsertOrUpdate vs Upsert?
Java programmers have to wear glasses...because they don't C# :)
501 error
Not if you grew up in Java. 
So to follow up, I kind of just settled using cookies, because I couldn't get session data working. At. All.
I chose Upsert since it's pretty widely known concept - even though some vendors implement MERGE, the idea seems well accepted.
We're saving Merge() for something more interesting than a single record. So Upsert it is. Thank you.
Thanks.
I get that's what I will have to do with API calls, but when the winforms app loads a mvc page, can I pass the bearer token along? Will the mvc page recognise the authenticated user? 
Version 2; InsertOrUpdate =&gt; Merge/Upsert My DAL in house replaces `.AsObject&lt;Customer&gt;().Execute()` with `.ToObject&lt;Customer&gt;()` and I have `.ToList&lt;T&gt;()` for the `.AsCollection&lt;T&gt;().Execute()` structure. I also have a `.ToNestedList&lt;T&gt;()` which joins 2 (or more) objects in C# (think eager data loading). Insert, update and merge accept `params T[]` and have `IEnumerable&lt;T&gt;` overloads.
It should be doable, though I believe that WebAPI and MVC have a default configuration that forces them to use different authentication methods as it's probably more 'correct.' In the WebApiConfig there's a setting: config.SuppressDefaultHostAuthentication(); which you may need to remove. Do some spiking to be sure though 
It looks verbose now, but the reason we have the .Execute() part is the fold. First, you can write .ExecuteAsync instead(). Saves the trouble of doubling the number of ToXxx methods. The second reason is more interesting. You can put extra modifiers between the materializer (AsXxx) and the .Execute call. Out of the box this includes caching, logging, overriding CommandTimeout, and listening for SqlDependency events. 
&gt; I also have a .ToNestedList&lt;T&gt;() which joins 2 (or more) objects in C# (think eager data loading). That's a good idea, I'll look into it for ours. &gt; Insert, update and merge accept params T[] and have IEnumerable&lt;T&gt; overloads. How do you map the params to column names? Currently we only support objects (property name=column name) and IDictionary&lt;string, object&gt;.
Oh, I misunderstood. You're talking about saving a collection of Customer objects. I thought that you meant `.Insert("dbo.Customer", "Tom", "Jones")`, not `.Insert("dbo.Customer", customerList)`; Yea, we're going to need to support that at some point. One of the things I'm thinking about is normal vs bulk insert. Right now we have some options: //Return the primary key dataSource.InsertModel("Customer", customer).AsInt32().Execute(); //Return the whole object (useful if you want to read back defaulted and/or calculated fields) dataSource.InsertModel("Customer", customer).AsObject&lt;Customer&gt;().Execute(); //The same, with caching dataSource.InsertModel("Customer", customer).AsObject&lt;Customer&gt;().Cache(c =&gt; "Customer: " + c.CustomerKey).Execute(); I can probably do that with collections using SQL, but not bulk insert.
Build conference is starting soon, and the chances are very high for them to announce it there.
I would be extremely surprised if we don't see that this year. 
&gt; Every DataSource instance is immutable and can be cached or passed around and serialized; they don't really do anything on their own; merely contain a set of commands queued up for some future execute call. Same here for normal data sources (though we do offer transactional ones as well). &gt; We are much closer to a full ORM than we are to Dapper, but we don't track changes to the objects or necessarily manage caching of results. I'll have to show you our caching logic some time. Sounds like you could easily bolt it onto your library with minor changes to our design. 
My xbox have just been the 'YouTube player' in my house for th epast year
Have a look at umbraco 
Human sacrifice, dogs and cats living together... mass hysteria!
Yes I have access go the db so I can see the tables and figure it out but I didn't know about the diagram ability within there so I will check it out. I was only generating the model for an easy diagram and it kept breaking shit. Thanks!
I haven't tested this out, but I have fiddled around with different identity providers enough to have a general idea: MVC apps probably don't do much with bearer tokens by default, because they're generally meant to be used from a web browser that won't send bearer tokens to the server unless it's an AJAX request. What I'd look into doing at this point (assuming you have control over the web app) is create an API endpoint that accepts the bearer token and transforms it into a cookie-backed ClaimsIdentity. You can then use that cookie with the browser control.
Razor views are typically deployed as .cshtml files, so yes, it's technically possible. Assuming you don't want a CMS product like Umbraco, one way to approach this would probably be by writing a theme-aware custom view locator that would default to the application's own theme, but would also know how to use theme-specific overrides. If you host on Azure, you probably want to store the themes somewhere other than the local filesystem, though.
Go with the code first approach from database and then use SQL management studio to design your database. No EDMX file and your connection strings look "normal"
Sounds like a job for ItemsControl.
thank you, looking into it
well this is basically what i need except a tad bit simplier as i should have all courses 2-3 hours long. Thats why im currently more inclined towards items control cause it seems easier. Altho i need to look more into it since handling overlaping will be the deciding factor on how to get this done
full license I hope, which is interesting.
**Personally** I store nothing in the `wwwroot` directory. Not a single file. That directory is completely generated upon building the application, and can be completely moved to another folder. I store all my relevant files in **feature** directories, so a vertical cut. This is different to the classical MVC (and template) layout where you have a horizontal layout and split up between "Controller", "Views", "Etc". My directories are roughly something like this: - FeatureA/Controllers - FeatureA/Scripts - FeatureA/Styles - FeatureA/Views - FeatureB/Controllers - FeatureB/Scripts - FeatureB/Styles - FeatureB/Views The controllers and views are figured out with a bit MVC setting fiddling. The scripts and styles are compiled (TypeScript &amp; Less to JavaScript &amp; CSS), tested (unit tests of JavaScript), minified and then copied to the `wwwroot` directory by a Gulp script, which automatically runs upon file changes (a watch task).
[removed]
[removed]
I like this approach. Unfortunately my team doesn't agree with it just because it goes against the template.
[removed]
Yeah OP is thinking about this backwards. Visual Studio is not crashing his drivers, his drivers are crashing themselves during normal operation of Visual Studio. OP should update his drivers.
Do you have features that require so little code? I'd say the other way around it's more common. But even if, who cares?
That is a bit odd. It feels wrong, especially since you have multiple top layers. Where do you put your IOC? I say keep each layer in a separate namespace / folder. 
http://hossambarakat.net/2016/02/16/asp-net-core-mvc-feature-folders/
There is absolutely no need to tell someone to go kill themselves. Consider this your one and only warning. If you talk like that here again, you will be banned permanently.
I usually use the stack trace to start with as it can give you clues as to what the problem is.
Seriously? Who downvotes a HELP question?
I think you might be targeting .NET compact rather than full framework. Have a look in the properties of the project you are publishing.
How do I do it from Office 365?
Easily solved by getting into the habit of never putting your credentials, passwords, api keys or otherwise private settings in source control.
It depends on the platform. On iOS you need to create special URLs from your application, email or website: https://msdn.microsoft.com/en-us/library/office/dn911482.aspx?f=255&amp;MSPPError=-2147217396 This is what enables developers to go straight into an installed app from an email message for instance. Custom URLs work for any application on iOS. They also work under OS X and now I think of it that's probably how Torrent sites handle opening torrent links under any OS including Windows or Linux. Would this help? https://msdn.microsoft.com/en-us/library/aa767914(v=vs.85).aspx http://stackoverflow.com/questions/22987005/is-there-an-application-url-protocol-for-ms-word
Windows for now
thanks a bunch! It worked right away... I feel kind of stupid. When I saw the same solution on stack overflow I forgot the "() =&gt;" so it did not work...
Yeah, I think SO link is what am pretty much after.
&gt; Applies to: Office 2010 SP2 | Office 2013 | Office for iPad | Office for iPhone | Office for Mac 2011 | SharePoint 2013 Windows, iOS, OS X
() =&gt; is a shorthand for invoking a function, also called a "delegate" in this context. If you see "Func" in your intellisense then try using this syntax. http://www.growingwiththeweb.com/2012/08/func-and-action-basics-in-c.html
&gt; SQL management studio to design your database Nah, SQL Server Data Projects (part of Visual Studio) does that much better.
OP, what are you trying to accomplish by using async/await with LINQ to SQL? This works, but I'm dubious of what benefits it provides. You're essentially involving multiple threads per request where if you had just used the synchronous LINQ to SQL, you'd only be using one. Performance would probably be better without the Task.Run and await. That depends heavily on usage patterns but I'd bet most cases would perform worse. If you want the performance benefits of async, you want to move to EF or a data access layer that has it baked in. If you're just doing this to say that you're using async/await, then the Task.Run will work.
The only place you'll want to add async code is in your WebAPI controller action methods themselves, as doing so will free up the ASP.NET request thread to handle other requests. If you are adding async tasks downstream then you are likely INCREASING the burden on your system.
I'm fairly sure this is more of a closely guarded secret than the ingredients to coke.
Welcome to /r/dotnet, otherwise known as "how do I internetz?"
You're almost there with your grid/itemscontrol – though, you're overthinking it a little. Before I go any further, it seems a lot of your design choices will rely on the overlapping capabilities. I can't think of THE way to do it other than to have grids inside a StackPanel. 
As I understand it, EF is not thread safe and therefore you cannot do parallel DB calls. So I don't see how this could help in performance since if you fire and forget a call you don't know if it succeeded or not
right in the feels
Sadly, I've seen this more times than I wish to admit.
I think this guy did a good job of summing it up http://johnatten.com/2014/04/06/asp-net-mvc-keep-private-settings-out-of-source-control/
Gold, upvote by 100.
Just remember that unless your site is under heavy traffic and you are trying to squeeze some extra performance out of your server, you're probably overthinking it.
The results of several months of hard work, finally out today! :-)
Our daily viva64 post give us Resistor. Please stop spamming this product everywhere. It leaves a very very bad impression on it.
[removed]
Thanks for the tip, that was a pretty good article.
Lol. Say what you will but after days of probing one link from a comment actually got things working. Help comes in all forms and sizes.
What's wrong with the tutorial from the WebForms site? http://www.asp.net/web-forms/overview/presenting-and-managing-data/model-binding/retrieving-data
I believe I am doing so. public async Task&lt;IHttpActionResult&gt; GetProduct(int id) { var product = await Task.Run(() =&gt; GetAllProducts().FirstOrDefault((p) =&gt; p.Id == id)); if (product == null) { return NotFound(); } return Ok(product); }
If you only have one server hosting your api you could use [MemoryCache](https://msdn.microsoft.com/en-us/library/system.runtime.caching.memorycache(v=vs.110\).aspx). It would be far more robust than application variables. Edit: fixed link
EF already implements unit of work and the repository pattern. 
EF already implements this. Now, if you ever plan on switching up your data access object, then using a repository pattern may be the way to go...
do mvc 5 web apis even use aspx files?
Any IOC container like unity can help you. Something like UnityResolver.RegisterInstance(new ClassYouWantAsInstance()) Then you can just UnityResolver.ResolveInstance&lt;ClassYouWant&gt;() any time you need it. I'm on my phone so this pseudo code is rough but this is an approach you can use to guarantee your instance is only created once. 
You can do &lt;Element Property="{Binding ...}" SecondProperty="" ThirdProperty=""&gt; The IDE will keep all of them aligned, and your version control can track each line independently.
Oups. Yes I keep it on 1 line. If VS was able to align the new line on Binding instead of the Property I would definitively do it on more than 1 line.
Data binding is a way of automatically mirroring the data you have in an object (that object is called the ViewModel) So, first create a ViewModel object e.g. public class Item : INotifyPropertyChanged { private string _property1; public string Property1 { get { return _property1; } set { _property1 = value; this.NotifyPropertyChanged(); } } // Implement INotifyPropertyChanged - Just copy/paste this into all of you ViewModel objects (or put in a base class) public event PropertyChangedEventHandler PropertyChanged; private void NotifyPropertyChanged([CallerMemberName] String propertyName = "") { if (PropertyChanged != null) { PropertyChanged(this, new PropertyChangedEventArgs(propertyName)); } } } Note that all that extra stuff necessary for the XAML to be notified when the properties change so it knows when to update. Next you need to be able to refer to you ViewModel throughout your app - easiest way to keep the data for the lifetime of the app is to create an instance as a static property on your App object i.e. in `Application.cs` public static Item MyViewModel { get; set; } // Initialise in constructor Now you need to hook the ViewModel into the XAML - the easiest way to do this is in the code-behind constructor i.e. DataContext = App.MyViewModel; Now in the XAML, you can do &lt;TextBox Text="{Binding Path=Property1, Mode=TwoWay}"&gt;&lt;/TextBox&gt; Forget UpdateSourceTrigger for now but you do need `Mode=TwoWay` so that changes in the UI are sent back to the ViewModel (and not just read from it) Place a debug stop in the setter of `Property1` on you ViewModel, launch your app and type some text and tab out of the box - the breakpoint should be hit. Similarly, try setting `Property1` to some value in a button click event handler - it should auto update in the UI 
I've honestly never figured out how to use LINQpad. I can't get it to hook up to my data source and I have no idea how to use it anyway. Looks like it would be a great program if I weren't incompetent.
Sorry about that, memory cache has nothing to do with aspx other than thats the extension of the documentation page I was linking. It's fixed now.
It natively supports Sql Server, and if you want something else you'll need to find a driver for it.
Unfortunately, our industry sucks because we use "Senior" to refer to a guy who just learned how to code last week and a 15 year veteran hasn't been promoted due to political shenanigans. So the pay scale varies wildly because they have no idea if you have no idea. My advice is to only interview with the ones who are offering the most, if you can back it up with your skillset. 
How often do you repeat that? I don't even use EF and I still say it once a week.
lots of places that don't value people or tech will offer less, then say they can't find anybody and pull someone from overseas.
::Facepalm:: thank you kind stranger I'm kind of a Cowboy developer where I work so I don't quite have someone to review stupid bugs like that. 
That seems crazy low for TO
this question is more meaningful in terms of job title/responsibilities than in years of experience. you can [ask salary.com for this kind of information](http://swz.salary.com/CanadaSalaryWizard/Level-III-Software-Engineer-Salary-Details-Toronto-ON.aspx).
At a quick glance i can't see anything wrong with any of the queries. Add breakpoints, check the result of each variable in the watch window to see which of the 3 queries is going wrong. If the last query works then there's something wrong with your gridview and we'd have to see your aspx file. If one of the queries fails then remove some of the joins and see how it changes the result. Because you have circular dependencies in your db you may find it's a data issue instead.
Start with learning the language of your choice, preferably C#.
I don't know why people post code questions here. Issues with c# code are answered in minutes on stackoverflow.
This wont work on MySql I presume?
IEnumerable also contains all of those extension methods so if your thing is a list all you need to do is include that namespace
I prefer to use this sub for .net news, or maybe discuss broader technical issues, so I generally don't read the questions. That said, they don't bother me all that much, as it's usually apparent from the title that they are questions.
Sub doesn't seem to be overflowing with submissions... doesn't seem to be hurting.
Microsoft virtual academy has great starter tutorials. I made a filewatcher service after 1 day of classes
I haven't noticed an issue. EDIT: Except, you know, people downvoting just because they disagree. 
It seems like there's less snark here, especially towards newbies. There tends to be more involved discussion, especially towards beginner issues here than SO. This sub is an all around friendlier, less intimidating place which I think a decent number of people are looking for. I've seen some of these discussions which appear to cover some very basic aspect of something delve into pretty interesting and nuanced discussions of the details too, so it's not just a place for beginners to hang out either, though there's no denying they make up the majority of posters. I don't see it as a problem right now. Perhaps if we were getting buried in repetitive questions it would be an issue, but I haven't really seen that over the years I've been subbed here.
I think you're making a pretty big assumption about the work entailed based on the CMS a company uses. Didn't you discuss this with them in your interviews?. Also, I wouldn't say you'd be hurting your growth by accepting the position. Working and maintaining legacy code is something most software developers have to do - it's valuable to understand WebForms. Unless the position is strictly maintaining legacy applications then you may want to reconsider.
&gt; less snark I have nothing but good feels with Stacked.
The hostility towards posters is a pretty common complaint about SO. I've not directly experienced it but I've certainly seen it on display frequently enough to understand why it's such a common concern.
Hello, Can you please explain more on the part why it's valuable to understand WebForms? I'm currently in a position, which is almost identical to OP's position. I'm a Junior .NET Developer and I used to work on MVC project, but now my company assigned me to work on a kinda old, WebForms project. The question I ask myself is - do I really grow as a developer when working on a old WebForms project. (The project I'm working on helps me get better at JavaScript and some JS frameworks, can't complain about that.)
I'd agree with this - there are a few, but not enough to be a problem and as you say it's not like the sub is so busy it can't handle a few extra posts. Something that may need to be addressed in the unlikely event post counts quadruple, IMO.
This seems to be the direction of nearly all programming subs I have been on. There does not seem to be much room for other types of discussion and as the SO style posts get more popular you will actually be downvoted and shouted down should you try to post things other than simple help me style posts. Further there is no room for actual discussion within these style threads as like SO the attitude is there can only be 1 right answer even if in computing many things can be cut many ways. 
Seems like it's down to how bad you want to live in Austin vs. enjoying/being challenged by the work. If your first priority is living in Austin, then take job and suck it up for a year. Work on a side project to make sure you're keeping up with modern tech.
FWIW, whenever I've had a C#/.Net question I've found the answer on SO -- I've never had to actually post a question. That said, I would definitely grow a very thick skin if the need ever did arise for me to post on SO.
As someone who has asked a question here, it's because of the required specificity / "quality" requirements on SO. If I have a question that's quite broad which will be down voted and ignored on SO, I turn to this subreddit. I've only asked one or two but I got my answers and feedback which was awesome.
Do you currently have a job? Then reject it and look for something else. Do you currently have a job? Take it and keep looking for something else.
"Dated" is, of course, a relative term. Some things are better for certain applications than others, and the business world tends to move at the slowest possible pace. WebForms for example, is the bread and butter of database-backed web applications for businesses. WebForms are *forms*, and most business is data-driven form submission, which means a lot of CRUD database calls, calculations, reports, and event-driven grids. Business-related web applications do a lot of their heavy lifting with reports and grids....two areas where WebForms *shine* in comparison to may alternative frameworks. And, despite there being more and more alternatives (and adoption thereof), businesses are notoriously slow to adapt when it involves massive code changes so there will be *many* jobs for the next decade at least where having WebForms knowledge is very useful as a developer.
If you like your current job and are not desperate to get out, turn down the offer. DotNetNuke was great once upon a time, and its predecessor PHPNuke was really groundbreaking when it came out. Web tech is developing so quickly right now that DNN on your resume will not be as valuable as more time at your current position. Keep looking. Unless you are trying to escape a bad situation, don't feel bad about turning down a job that isn't a fit. They would have no problem turning you down for the same reason.
You'll be encountering older tech throughout your career. In fact you'll probably spend most of your life coding the latest and greatest tech of 5-10 years ago. Most places don't rewrite their entire code base every time something new comes out.
Backend versus front end makes sense, and so does web versus desktop. 
This is absolutely correct. In my day job I work on a 10 year old web app using custom c# to basically do what asp.net mvc does, but not as well. In my spare time I write personal web apps in node or mvc or angular. I work from home and have young kids, so the perks of the job outweigh the lack of using modern tech. Most places have you write something as a test, so as long as you have good job history and know the language they want you to know you should be fine. Plus, if you stay with a company for 3-5 years, odds are there will be something new to know when you are looking for another job.
While you can have a job as a maintenance programmer and can make good income it may not be what you want and IMO can limit your career options. More money and variety is had on new systems and integration work. I have avoided anything that even somewhat looks like maintenance programming mainly because after getting a look at the hiring process at most companies its basically a situation of "once a maintenance programmer always a maintenance programmer" unless you really do something to break out of the box. A lot of assumptions are made about someone who does maintenance work and most of them are not that good for things like expanding knowledge or getting that next promotion. All that said I have worked a quite a few companies like the one above, on projects to replace whatever craziness they had in place. If that is what they are planning you may want to jump in. Also how much of the job is old DNN work vs other stuff? You sure you are not attaching to one part of a much larger role?
Too generalized for specific .net or c# questions.
Oh my god I need this right now. All our DBs are MSSQL, no excuse not to have it. 
Honestly if you're looking to get into the austin area and you got an offer for 90k I'd take it. Give it a year. If you still hate your job look elsewhere. Austin is such a great city and there are plenty of open jobs. Take the pay bump and use it as a negotiation point for your next job.
that's nothing.. I still get offers to do VB6 maintenance sometimes 
Try being a 50 year old coder and *still* getting calls from recruiters for a **"really super C++ position with MFC and COM"**. Just doing aspx is not going to kill you. As you said, it is hard to get interviews out of town. I only interview out of town candidates if I can't find anybody locally. Give it a year. If it doesn't work out, start interviewing again. When you're young, it's understood that you change jobs, just don't get a reputation as a job hopper.
Or they are closed immediately by random people just for spite
&gt;as a recruiter, Could you please not comment on things you have absolutely zero understanding of? Literally everything you've said is not only wrong but exactly the opposite of the truth. MVC is much closer to the actual abstraction that we use to communicate over the web than Webforms. It maps so closely as a matter of fact that you actually have to know something of the HTTP protocol to get it functioning well.
Are you high? Or just a keyword search recruiter?
Older tech isn't a problem, ASP.NET WebForms, ASP Classic, VB6 and MS Access can all provide a fulfilling career with satisfying challenges and opportunities. Personally though, after developing on top of DNN for a couple years I wouldn't take $90k/yr to go back to it. Not unless the team I'd be working with was amazing and the company itself appeals to me for more than just salary. 
nope.
It really does depend on your frustration tolerance. If you can be a bit zen about it, and learn to work with legacy tech while also expanding your skillset and looking forward, this could be a good place for you to post up for a year or so while you're looking around for other options. A salary bump is always a great thing, and you'll be in a better location to really become part of the Austin scene, making a future move easier and more valuable. And there really is something about learning to put with and minimizing the pain - you will always have to live with other people's choices from time to time, and learning how not to fight that too much is a valuable skill in itself. But if it kills your passion for development - and you start performing poorly, that can be very very very bad for your career, with long ranging ramifications. Think carefully and look inside. 
I'm at a company in Austin that works with DotNetNuke to build custom websites and/or ecommerce shops. DNN can be a little frustrating when you are first starting out but in our case it is literally just a wrapper for the real work. We train our clients to add marketing and SEO content using DNN's UI, which it is actually really good at. From there for the small custom clients that we do custom work, mostly contact forms or little wizards, we can throw some angular in and be done with it. In rare cases (especially for the last year) we would make some ascx actual controls. DNN has very good documentation compared to other CMSs. Their videos can get you up to speed and company sr devs should be able to walk you through anything else more complex. Ask them specifically if they use DNN like us or go full aboard the DNN train. Even if they do, modern DNN 8.x is much more MVC friendly than prior versions.
Personally, I probably wouldn't take the job as you described it. Or if I did I would be working really hard in my free time to expand my skills, because that job is probably not going to help advance your career. There are a lot of good jobs in Austin these days. If you take one, plan very carefully where you live because Austin has the worst traffic I've ever seen in my life. I went to ElixirConf in Austin last year and stayed with my cousin. Without traffic he lives about 5 minutes away from where the conf was at. With traffic it took about 45 minutes to get there in the morning. Just a heads up.
&gt; Let’s just call him ‘David’. Cause his name is David Piepgrass...
No and no: bona fide developer... But if someone had only ever done MVC development, would you hire them for anything other than a purely MVC role? I'd want some evidence that they've got reasonable knowledge of lower level concepts that MVC and .NET abstraction hides.
I'm not a recruiter, I'm talking about "If I was in the position of being involved in hiring someone", which can come under the remit of a developer at many small companies and is something I've had an input on before. MVC abstracts the web communication very well, and I'm not saying MVC+Webforms would allay any concerns I had... I'm just saying that MVC is quite high level and there's a benefit to being able to show you've worked with lower level development: because (again particularly in smaller companies) you aren't likely to have such a niche role.
This looks like a great way of wasting company time teaching people the new syntax of this code generator and confusing junior programmers. If it's not in the core language you really need to consider the other developers, now and in the future, who will be maintaining and adding new features to the project. 
Additional to the downsides already mentioned i would never write code in any way that depends on this single anonymous guy named david and the hope he keeps supporting it. Oh and you should maybe turn down the sensationalism. Its usually not a good strategy to convince it professionals. Or at least not in my case. Edit: User already deleted? Of course.
Denver-ite here. Decent .net presence here. Portland &amp; Seattle are my top two relo spots if I were inclined. Austin's got a decent .net population I'm told. On the east coast I've seen jobs in DC, NYC, Boston and Arlington areas. I've seen plenty of .net contractors and was one for much of my career. Though .net systems can be large and require dedication similar to Oracle enterprise systems more than smaller scale Rails or JS projects. 
Interesting. It makes me wonder if the lack of contract .Net folks could be geographic. Raleigh is (generally speaking) a bit of a tech hub, although Red Hat isn't helping us bring in the .Net crowd. 
Are you looking for contractors or FT? I know some good devs in that area, but they are indeed contractors and they would work remote other than meetings. I've been a .Net contractor for about 5 years now, but I do 98% of my work remotely so geography doesn't matter much.
These folks are definitely going to be contractors, but 95% on site. It's an Agile environment, and culture is extremely important for them. That actually brings up an interesting point. Do you see more remote work in a Waterfall type environment vs Agile? 
Look into Flyway. It's migration based and it's dead simple. [https://flywaydb.org/](https://flywaydb.org/)
IMO agile and culture don't mandate on-site, it just mandates interaction and the right people. Yes, with remote it's easy to hide behind email, but you have to have the right people who know when to jump on video chat etc vs email (hint, most of the time) and realize that managing relationships are as important as the code. As for agile vs waterfall, I would say far more agile, but that's because that's what we do. If a client mandates process to us there's a good chance we're going to walk away, that's not the type of work we want. 
[removed]
He was already trying to promote this stuff in /r/programming, with the headline "New C# features". Kinda pathetic.
That's gold. All I can imagine is watching someone sitting behind a computer getting nailed with a brick out of thin air. 
In Atlanta there are several contracting/consulting shops that specialize in .NET. I work for one based here, but we have clients all over the east coast.
Remote work is irrelevant to the development methodology. It's more indicative of culture and understanding that work can get done without you standing over a dev's shoulder.
Web forms is much higher level than MVC though that's the point you're missing it's also not procedural which you called it. Literally nothing you said was true.
Same (or close). Work in Boulder, but I don't know how long I can last. I love my job but housing/rent is absurd Edit: And I really really don't want to drive 50+ minutes twice a day
Orlando, FL here. We seem to have a nice blend of contract / permanent positions these days. Our dev community is incredibly active (above and beyond just .net) which has been very empowering for our local Devs. Many started their own contracting / consulting groups to have more control over their company culture / working situation. I personally moved out of being a full time developer to contracting, then eventually into teaching development. We're going through a culture change down here of being less corporate and more start-up esk because of how informed our dev community has become. It's amazing what just a few people can do to impact so many. :) Oh and most of the openings are C#, a touch of C++, good luck finding anything F# or VB.NET
I actually just managed to fix it. All it took was installing the Update 2 RC package that Microsoft released 2 weeks ago. You can get it here: https://www.visualstudio.com/en-us/news/vs2015-update2-vs.aspx
Look into http://projectroundhouse.org
Are you contracting in the UK doing .Net? If so, how are you getting on and what area are you in?
I am indeed. I live down by the coast but currently commute to London as most the contract work is here. There's a lot of contract work around at the moment, and the general standard of developers feels fairly average. I'd recommend anyone making the jump as the freedom to pick and choose clients every year or so is empowering.
Er, you at least use a templating tool to generate those statements right? Like, you're not manually going and finding every knock-on effect of removing that column?
No, I meant the other way around. As in "Oh god, you're not trying to find every unintended consequence manually are you?". Because you're going to miss them... Code-based migrations would generally be "smarter".
Out of curiosity, can you please define "fairly average"? :)
Don't do this. 
Are you using EntityFramework? You are? Great. There are Async overloads for the methods. public async Task&lt;IHttpActionResult&gt; GetProduct(int ind) { var product = await GetAllProducts().FirstOrDefaultAsync(product =&gt; product.Id == id); if (product == null) { return NotFound(); } return Ok(product); } Let me see your `GetAllProducts()` method. 
Jacksonville, FL. Lots of .NET full-time positions here and I see a lot going unfilled. Some banks, health insurance companies, hospitals, and some tech shops. Most of the openings are IT type work. I get an occasional reach out on LinkedIn about contract positions but I'd guess around 80% of listings are full time. .NET developers are a commodity here.
San Diego here. Lots of government/military software contractors, many of which are catching up to more recent .NET technologies. But you'll probably also have to maintain older applications at the same time. But you get to live in a vacation destination... It's 70 degrees and sunny today. Was yesterday too. Will be tomorrow.
It's a good idea to have things spelled out, even if they seem obvious.
For a lot of businesses agile is synonymous with daily stand ups.
Some interesting articles, however none are backed up by any data, so I'm hesitant to convert to the church of CPU bound asynchrony without further investigation. What I would say though is that I tend to use async only when I know things will be happening in parallel, or the system is subject to unusually high load (thousands of requests per second). As with most things, just because you can it doesn't mean you should, only that you've something to profile.
Boston checking in here. Lots of everything here with the burgeoning startup scene, but enterprise is dominated by .NET and Java.
Yup, totally agree. It has developed a really bad name for that reason.
Indeed. Jacksonville is a very large .NET hub. Jobs are plentiful. 
Don't. Had you started with RC1, RC2 will bring you a world of pain due to tons of breaking changes to the namespace and classes. I know it because I have an RC1 app and I just tried in vain today to make it work in the nightly build of RC2 :( I needed to upgrade because EF RC1 has a bug where it will through exception when you try to do a direct string comparison. So wait for RC2.
Wrong URL. You need to link to an article about the integration, not your home page. Otherwise we treat it as an advertisement.
The code way is more flexible. You can do things like add custom attributes to select which migrations are being run. You can have migrations that add test data for instance, that you don't want run on production/staging servers.
Kansas City here and there aren't enough .NET developers and tons of jobs open for them. My current position was supposed to be contract only for a few months but they ended up hiring me full time. We have a ton of projects to get done but not enough .NET developers so we have to contract out a lot to get some work done - and even that has been difficult to do. With cost of living here being fairly low, it's a pretty good place to make some money right now IMO.
Hey fellow midwesterner. The Detroit area is very much a .NET hub right now. GANG is awesome, and I've definitely seen over 100 there a couple times.
I just wrote this up right now, but is there a reason why something like this wouldn't work? http://pastebin.com/z2a8fKsH I feel like the code you posted just is a bit to complicated for what it's doing. Obviously, you'd add the appropriate error checks. Edit: And I should apologize, I know this wasn't a code review per say, but if I reviewed that code the first question I would ask is why aren't you using Linq? 
Web Developers and App developers is one split recruiters don't seem to realize. We largely use the same tools and technologies but they are very different roles with different things to focus on. As with everything else there is a continuum too. Web developers will often be working with a CMS etc and on smaller code bases where maintenance isn't as much of a concern. App developers will generally work on much fewer, but larger projects. Desktop/Web/Mobile is another one, most people tend to focus on one or the other. Any decent developer can adapt though.
Hello from the Toronto Ontario Canada area. We have a healthy population of .net folks up here (and a couple of awesome user groups as well) but the majority of us are in full time positions, typically in the financial or similar large corporations. I believe there is also a healthy population on the west coast due to the proximity to Redmond.
Charlotte here, maybe close enough? .Net is big here. Lots of BOA and Lowes employees are desperate to get away from said companies.
St. Pete / Tampa, FL. I am not scared of being out of work. If I was going to move then Denver or Seattle would be my top picks. *Not for the reason you're thinking!* I just really like those cities
Whether you refactor it to use Linq or not (I probably would), I would probably do something strategy pattern-ish. Right now if you ever add a new `StringJoinOption` you have to change the `Join` methods to add another branch to the if statement. My first refactoring would break each branch out into a class that implements the joining algorithm for the option type and have them both implement an `IJoiner` interface with a method like `string Join(IEnumerable&lt;string&gt; values, string seperator)`, so you'd have a `DiscardEmptyStringJoiner` and a `SkipNullsStringJoiner`. Next I would add a static `Map&lt;StringJoinOption, IJoiner&gt;` to `StringUtilities` that gets populated in a static constructor (either explicitly or using reflection to find all the IJoiner implementations. You'd have to add a `StringJoinOption` property to the interface). Get rid of the if structure that checks for option type and just pull the right joiner out of the map based on the option parameter. If the option you're passed isn't in the map then you can throw the not implemented exception. Now if you ever add a new `StringJoinOption` you just have to implement `IJoiner` and add an instance to the map. If you used reflection to populate the map you don't even have to touch `StringUtilities` at all. 
That sounds horribly over-engineered for a library function. Maybe it would be alright for application code, but for libraries performance trumps.
Redmond.
Seattle by way of Chicago
Just small things. In the Join, can't values never be null since you can't call an extension method of a null object. You're also checking the separator variable for null but right before you have a possibility of sending it to the string join, do you care if you send a null seperator to the string join?
Just create an F# module :-) 
OP, if you're more interested in the mechanics of how version control systems work, rather than just how to use them, [Chapter 9 of the Git Manual](https://git-scm.com/book/en/v1/Git-Internals) might help.
It would be nice to know the reason for writing this function, or how it differs from [string.Join()](https://msdn.microsoft.com/en-us/library/dd783876%28v=vs.110%29.aspx) besides additional null and empty options? Looking at [string.Join() in referencesource](http://referencesource.microsoft.com/#mscorlib/system/string.cs,84), I suspect that both faster and better solution would be just to filter out resp. empty or null strings and use string.Join(), like StringJoinOption.None does. On code itself, it could be clearer and more succinct. For example: * if... else if.. for StringJoinOption checks, switch.. case would be both faster and easier to understand. * Considering that the difference between two StringJoinOption if-blocks is just the compared value... DRY. * (after previous point is addressed) Why use GetEnumerator() instead foreach? Foreach becomes while-loop with GetEnumerator() in IL. * The two Join() methods are identical. Remember that generic method will be JITted per-type - and string.ToString() is "return this;". * ReleaseStringBuilder() and AcquireStringBuilder() methods should be private * It would be better to initialize StringBuilder inside your method and use it as a local variable. Extremely minimal speed increase of re-using threadstatic object really aren't worth it, imho. ...now I have to get back to work I am actually paid to do, otherwise I might have a couple more minor comments. I am starting to wonder, though - is this a developer test assignment? Either "do this string.Join()" or "review this code"... 
Hi why don't you eliminate the code duplication of the two join methods by doing this: public static string Join(this IEnumerable&lt;string&gt; values, string separator, StringJoinOption option = StringJoinOption.None) { return Join&lt;string&gt;(values,separator,option); }
Yes, you can use DNN or umbraco. It will compatible with your requirements
It isn't exactly the same because the generic version needs to run this function callvirt instance string [mscorlib]System.Object::ToString() It probably isn't expensive enough to measure, but if we're trying to optimize then using `call`, or better yet simple loads, is faster than `callvirt`. Though that makes me realize that I've been making redundant calls to callvirt instance !0 class [mscorlib]System.Collections.Generic.IEnumerator`1&lt;!!T&gt;::get_Current() instead of just caching the result. 
RedGate recently released their own migration framework http://www.red-gate.com/products/sql-development/readyroll/
&gt; if... else if.. for StringJoinOption checks, switch.. case would be both faster and easier to understand. I seriously doubt that it would be faster. Looking at the IL, there are the same number of comparisons and branches. The only difference is where they are placed. But since we're only calling it once, we probably wouldn't benefit from any branch prediction. But I can't read machine code, so if you can show an example of it where it does matter in .NET JITed code I would like to hear about it.
&gt; Considering that the difference between two StringJoinOption if-blocks is just the compared value... DRY. Can you do that without repeating the check on the option parameter N times?
 Func&lt;string, bool&gt; predicate = x =&gt; option == StringJoinOptions.DiscardEmptyStrings ? x == null : string.IsNullOrEmpty(x); or: Func&lt;string, bool&gt; predicate ; if (option == StringJoinOptions.DiscardNullStrings) predicate = x =&gt; x == null; else predicate = string.IsNullOrEmpty;
Trivial REST endpoints that need to concat first, middle, and last name without adding double-spaces. I'm not doing this because my application needs it. I'm doing it because I'm going to go crazy if I don't have something beyond copy-and-paste code to play with over the next 6 weeks.
Its worth considering making that a `struct`, changing value to `{ get; private set; }`, and adding in equality overrides. This is actually really nice, but the concept doesn't really add a lot of value to C# until pattern matching logic is introduced.
I honestly can't imagine what the fourth option would be. And even the third is probably going to be quite rare. But if that happens, it literally takes one keystroke to change from one to the other. But back to the question of performance, this quote seems to be on point: &gt; A situation where the switch is slower is when the actual runtime of the program has a very skewed distribution of inputs. If my assumption that option 0 is going to be the most common and option 3 the rarest, and if statement should be faster. (Of course that assumption is hard to justify in a library where you don't know what the application is going to want.)
I don't disagree with your scenarios. But I disagree that code-based migrations are what make them possible or easier. That's just tooling support, and could easily be replicated if the migrations were SQL scripts. What I'm getting at, specifically, is why create another DSL on top of SQL?
How much performance gain are you actually getting?
Fair enough, I agree. I'm not hung up on the particular method as much as I am the general. Even with the code one there are situations where SQL is needed.
Depends if you have a List&lt;T&gt; or an IList&lt;T&gt; wrapping a List&lt;T&gt;. Given a simple expression `x =&gt; x % 2 == 0` and a lot of iterations: * IList w/foreach loop and if statement: 793 ms * IList w/foreach loop and Where clause: 568 ms * List w/foreach loop and Where clause: 568 ms * List w/foreach loop and if statement: 327 ms So yea, LINQ is expensive relatively speaking. But iterating over an IList&lt;int&gt; instead of a List&lt;int&gt; is even more expensive. I'm going to have to rethink my whole approach. 
As you can see, there are no repeated measurements, so absolutely nothing definite; also guid-as-string is not good and realistic test data. If I have time in the evening, I will see about doing a better test with better formatted results. const string separator = ","; foreach (var count in new[] { 5, 10, 50, 100, 1000}) { var testData = GetStringTestData(count); var sw = Stopwatch.StartNew(); var r = string.Join(separator, testData).Length; sw.Stop(); Console.WriteLine($"string.Join(), count {count}: {sw.Elapsed}, string length: {r}"); Thread.Sleep(100); sw = Stopwatch.StartNew(); r = testData.Join(separator).Length; sw.Stop(); Console.WriteLine($"StringUtilities.Join, count {count}: {sw.Elapsed}, string length: {r}"); Thread.Sleep(100); sw = Stopwatch.StartNew(); r = string.Join(separator, testData.Where(x =&gt; x != null)).Length; sw.Stop(); Console.WriteLine($"string.Join(Where(x =&gt; x != null), count {count}: {sw.Elapsed}, string length: {r}"); Thread.Sleep(100); sw = Stopwatch.StartNew(); r = testData.Join(separator, StringJoinOption.DiscardNulls).Length; sw.Stop(); Console.WriteLine($"StringUtilities.Join w/DiscardNulls, count {count}: {sw.Elapsed}, string length: {r}"); Thread.Sleep(100); sw = Stopwatch.StartNew(); r = string.Join(separator, testData.Where(x =&gt; !string.IsNullOrEmpty(x))).Length; sw.Stop(); Console.WriteLine($"string.Join(string.IsNullOrEmpty), count {count}: {sw.Elapsed}, string length: {r}"); Thread.Sleep(100); sw = Stopwatch.StartNew(); r = testData.Join(separator, StringJoinOption.DiscardEmptyStrings).Length; sw.Stop(); Console.WriteLine($"StringUtilities.Join w/DiscardEmptyStrings, count {count}: {sw.Elapsed}, string length: {r}"); Console.WriteLine(); } } GetStringTestData(): public static List&lt;string&gt; GetStringTestData(int count) { var strings = new List&lt;string&gt;(count); for (int i = 0; i &lt; count; i++) { strings.Add(Guid.NewGuid().ToString("N")); } return strings; } 
You mention SSDT in passing, but it's my preferred choice. I spend a lot of time doing database design, development, and architecture. SSDT installs a SQL Server project type that you can use directly within Visual Studio. You can import an existing database into it, and it breaks everything down by schemas, tables, procs, views, functions, etc. Just like any other VS project, it has a build function which validates your entire schema and throws build errors if, say, you're referencing columns or tables that don't exist, or whatever other schema problems the solution might have. It integrates pretty seamlessly with TFS, so you get your versioning, rollbacks, etc. Have not tried with GitHub. It also has pretty powerful and fine-grained publishing options for migrations. I've had some pretty complex changesets to publish, and it gets everything in the proper order. I've only ever used RedGate's source control stuff in the past and was not very impressed, so take my advice with the perfunctory grain of salt. Having said that, as a very db-centric .Net dev, I've really come to enjoy the SSDT stuff in VS.
I'm not familiar with F# but this does seem like the thing attributes where designed for. Am I missing something?
You can use implicit/explicit cast operators to make a type act like another type - but don't abuse it. Something like this could differentiate types of IDs like you're talking about: public struct ID&lt;T&gt; { private readonly int _ID; private ID(int _ID) { this._ID = ID; } public static implicit operator ID&lt;T&gt;(int _ID) { return new ID&lt;T&gt;(_ID); } public static explicit operator int(ID&lt;T&gt; typedID) { return typedID._ID; } public static bool operator ==(ID&lt;T&gt; id1, ID&lt;T&gt; id2) { return id1._ID==id2._ID; } public static bool operator !=(ID&lt;T&gt; id1, ID&lt;T&gt; id2) { return id1._ID!=id2._ID; } public override bool Equals(object obj) { return obj is ID&lt;T&gt; &amp;&amp; this == (ID&lt;T&gt;)obj; } public override int GetHashCode() { return this._ID.GetHashCode(); } public override string ToString() { return this._ID.ToString(); } } Then you can have code like ID&lt;Person&gt; PersonID = 123; ID&lt;Address&gt; AddressID = 234; and you can only pass the correct type into each method I use the explicit cast back to int to force the developer to know when they're going out of their way to compare or treat the ID like an int - an example would be writing a JsonConverter to write these values as ints and not as this class. You'd have to do something like jsonWriter.WriteValue( (int) PersonID ); I use this for Guids and so far it's proven easy to use (minus the couple of serialization hurdles to jump through) and makes passing in incorrect IDs difficult. However, I just use it for IDs of my aggregates, so there are only a handful of different types of ID&lt;T&gt; that I ever use. It might be overkill to have every string value in a class be a different generic version of MyString&lt;FirstName&gt;, MyString&lt;EmailAddress&gt;
Just for naming, Join is already a LINQ extension method for IEnumerable&lt;T&gt; that [does something completely different](https://msdn.microsoft.com/en-us/library/bb534675.aspx). I'd name it something else... Maybe an extension method named ToString()? I haven't given that a lot of thought, but that's what you're trying to do here, it would look like a parameterized ToString() call and seems a bit more intuitive to me.
* I believe if you are strictly looking for performance gains you could do better with specific overloads for `T[]`, `List&lt;T&gt;`, `string[]` and `List&lt;string&gt;` * Use `nameof(values)` and `nameof(option)` * pull `"Option is not defined."` out into a static read only property in some other class (better localization opportunities) * cache the expression `en.Current?.ToString()` so that it doesn't get called inside `StringBuilder::Append(object o)` * this expression `en.Current?.ToString()` should be: `en.Current is IConvertable ? (en.Current as IConvertible).ToString(CultureInfo.CurrentCulture) : en.Current?.ToString()`(and `CultureInfo.CurrentCulture` should be cached): there could be cultures that would ignore certain values for whatever type you are formatting (technically this still doesn't match the contract for `StringBuilder.Append` because that class calls `.ToString()` for `object` and `.ToString(IFormatProvider)` for some well known types that implement `IConvertable` (primitives)): ... var formatProvider = CultureInfo.CurrentCulture; using (var en = values.GetEnumerator()) { if (!en.MoveNext()) return ""; if (option == StringJoinOption.DiscardEmptyAndNull) { string current; //find the first non-empty string while (string.IsNullOrEmpty(current = ToString(en.Current, formatProvider))) { var moreRecords = en.MoveNext(); if (!moreRecords) return ""; } var result = AcquireStringBuilder(); result.Append(current); //add the rest while (en.MoveNext()) { if (!string.IsNullOrEmpty(current = ToString(en.Current, formatProvider))) { result.Append(separator); result.Append(current); } } ... With an extra method: [MethodImpl(MethodImplOptions.AggressiveInlining)] private static string ToString&lt;T&gt;(T current, CultureInfo formatProvider) { var convertible = current as IConvertible; if (convertible != null) return convertible.ToString(formatProvider); return current?.ToString(); } 
Good point.
It is somewhat more involved to parse and understand. That said, it doesn't matter, it should be judged by the type safety and maintainability when used.
Jimmy Bogard has a generic ValueObject class in one of his posts. public class EmailAddress : ValueObject&lt;EmailAddress&gt; https://lostechies.com/jimmybogard/2007/06/25/generic-value-object-equality/ 
Now try ordering the List&lt;int&gt; before the measuring and be ready to be amazed!
I forgot to add my bin directory to git
I have not. Why would you want to?
Has anyone tried [Bonobo](https://bonobogitserver.com/)?
No, after watching the videos we decided to look for something else (short of Mercurial) and if Bonobo does what it says it can, it is perfect. I was hoping to get some real world feedback.
Even though I haven't tried Mercurial, I'd advise you to stick with git man, it is more like an standard for web stuff.
this implementation I just threw together indeed generates 6 join methods with different signatures and different IL: https://gist.github.com/bbarry/009447c27f8a09ce13d3 I am playing around with some benchmarking code now to check out how much of an effect these differences have, but the differences I notice in IL are: 1. `List&lt;T&gt;` and `List&lt;string&gt;` use `call` on the enumerator methods (`IList` versions use `callvirt`): `call` will universally be faster; the array variants use `ldelem` as expected (which would likely be even faster... if the `List` versions used `for` loops, they would instead use `call` on the indexer property here) 2. `string` variants skip the `ToString` call versus the generic version.
We run GitLab CE on Ubuntu 14.04 in a Hyper-V environment. Has a lot of features and installation and updates are a breeze. That is if you are open to a non windows solution. https://about.gitlab.com/
And it turns out based on some testing it is really hard to be decisively better than `string.Join` patterns that are about the same... 
Hyper-V is a Hypervisor developed by Microsoft to run virtual machines. I guess you can compare it to VMware Workstation. It is a feature included in Windows Server 2008 newer as well as Windows 8 and newer. I use it quite often on my workstation for development and testing purposes. With Git it don't matter if it is .NET, Java, C, etc. Git handles them all the same. Our shop does mostly .NET development and we never had a problem using storing .NET code in Git.
&gt; PositiveInteger So, uint?
An alternative to what? What are you trying to do?
I don't mind homework posts if the OP shows some diligence. What I don't like is when people give the full answer. Instead, they should point the student in the right direction and encourage them to work out the answer on their own.
Your MVC/API controllers should not perform any of the heavy lifting in your app. In this case, code accessing the DbContext (EF) should be moved to another layer of your app. In .NET Core, convention is to move this code into a "service" class that gets injected into your controllers. In addition, you should be using data transfer objects to expose your model to the world instead of exposing entities directly (I like to use AutoMapper to make this easier).
"Getting started" to me is all about the vocabulary. Using **Given, When, Then** syntax for acceptance criteria then bleeding that in to tests. Then merge that with a TDD mentality and you're on your way. Once the vocab is down, implementing a Gerkin tool like Cucumber with Specflow becomes a relatively minor tool usage issue.
I disagree with you on this, because in many cases the tools provide a framework for understanding and familiarizing oneself with the underlying concepts. Tool leads to conceptual realization leads to better tools? Or something like that. I agree with you on it at the same time in that this should be the goal, to understand the mindset and work flow of BDD.
Look into bitbucket, they allow some number of private repositories for free, I believe.
Nashville; tons of .NET jobs here, and I don't know what the contractor ecosystem is like.
From agile to fragile in five years!
What's your aim for this project?
Yes, everything we do is web. Thanks for the recommendations!
There may also the issue of policy compliance. Due to HIPPA and other regulations or policy doesn't allow anything outside of the corporate firewall.
Thanks for giving ad companies ideas. Idiot.
Tooling can give a false sense of achievement imo. And tests are not the most valuable part of BDD. 
The future of Windows mobile is very much in the air right now, very few businesses are willing to fork the cash out to make WP versions of their apps given the tiny/declining userbase relative to Android/iOS. I would explore things like Universal Windows Apps or Xamarin if you like working within the .NET framework.
You're right, there's as much to learn in .NET as any other platform, and at a bare minimum it's just as complex - but I feel like MS tools make it easy to comprehend and manage that complexity. I mean, we've *never* been tied to a GUI - .NET evolved from the world they live in now -- we used to have to do all that manual grunt work, but we don't anymore because Microsoft has been accumulating and growing the framework based on the work that we as developers have been doing for decades. It's as mature and robust a platform as anything available now. We've always had the ability to do things the hard way like they do it. *That's how we used to do it*. 
I'm the person in question. I'm actually a huge fan of .NET and was a developer for 3years, I found this thread because I'm subscribed to this sub. I admittedly moved out of the stack years ago, but I am looking forward to vNext quite a bit. I am mostly JS and Java now, but C# is still my favorite language. You claimed the OP didnt need to do the stuff listed if he switched to .NET. But in fact he needs all of it in some way or another and switching to .NET doesn't fix any of it, it just shifts it to something different. For instance, Switching to TFS over GIT is still source control. Switching to IIS over NGINX doesn't change a whole lot. Switching to managing Windows server over Linux.... doesn't change a whole lot. It shifts it to something else. Then you still need all the DB and Frontend stuff. "Easier" is debatable and highly dependant on the person doing the administration, my point is that the work is still there. If you're not the one doing it, then someone else is. You were wrong. Then you completely misunderstood what I said and went way off track thinking because you were under the assumption I'd never worked on a MS stack before. And now you're trying to vote brigade against me. And to the people who replied to me there, I know about Powershell. But the comment I had replied to was directly referencing a comment mentioning not needing to learn command line.
correct answer.
What costs are you referring to? Hosting?
&gt; I'm the person in question. No you aren't. I never pointed anybody out, I only mentioned the sub because my comment was downvoted a lot. I didn't link to any of your comments and I didn't mention your name, this isn't about you. I was curious about the quality of my advice because I felt like it got unfairly shat on by the whole sub. It's okay though, people here have confirmed it - there *is* an irrational hate toward .NET, just as I suspected. &gt; You claimed the OP didnt need to do the stuff listed if he switched to .NET. No I didn't. You keep saying that. Quote me. &gt; "Easier" is debatable and highly dependant on the person doing the administration, my point is that the work is still there. If you're not the one doing it, then someone else is. No shit it's debatable, the OP was asking for debate. That comment was me making my case for the MS stack as a relatively easy and fun way to do the work (the work that yes you are still doing because yes it's still there). &gt; You were wrong. Then you completely misunderstood what I said and went way off track thinking because you were under the assumption I'd never worked on a MS stack before. And now you're trying to vote brigade against me. Nobody cares if you were an MS developer or not. Who cares, seriously. It has no bearing on the point I was trying to make. I *wasn't* wrong, I was well within bounds of the conversation and completely on-topic. OP asked if web development was really that complex, and my answer was no not at all, not for me anyway. I've worked in other stacks, I stay up on what's going on -- I sincerely think the rest of you are working too hard. JS and java? lol no fucking thanks. &gt; the comment I had replied to was directly referencing a comment mentioning not needing to learn command line. I've been doing this for 15+ years, hundred of millions of dollars have flowed through my code... here's the extent of my command line knowledge: ping reg_iis iisreset that's pretty much it lol 
&gt; .Net jobs tend to pay very well so i'd rather have people shit on MS development so the market doesn't get flooded with newly acquired fanboys. I honestly contemplated not posting my comment for this exact reason. The less competition for these killer jobs, the better (for you &amp; me :)). I felt like I was throwing the OP a bone haha... That's why it suprised me when it got downvoted before it could even be read. 
I agree - SQL Server is totally unaffordable for most small/mid sized businesses, but I think the .NET stack still brings a ton of value and isn't worth throwing away over that. There's also the hopeful long-term outlook that Linux can be your server with .NET Core :) For what it's worth, MySQL and Postgres (with http://www.npgsql.org/) both have providers and are totally supported with EF6! I haven't ever used the provider for MySQL because I personally don't like that database at all, but the Postgres one seemed to work just fine - even code-first was working fine. The SQLite provider also works really, really well when that makes sense. I have built a couple of smaller applications that use it. If you do use one of the other providers, don't forget to change your default schema. For some reason EF is hard-coded to use "dbo". :-/
lol yikes you're doing it wrong buddy. There's a much better way than whatever the hell you're describing here, trust me. 
Hey thanks for caring &amp; sharing. I'm sorry your job is hell, mine isn't. You sound like a massive wet blanket who doesn't know what the hell he's doing. 
Very fair. People sometimes try to write it off as simple and it can be just as complex. VS is nice, until it fucks up your project and you have to go and read/edit msbuild proj files by hand etc... I thought their response was pretty unfair though.
Lol, okay. Look everybody, we found the teenager in the thread! .Net enterprise apps are everywhere - new and old projects.
I saw a hello that was green when I first went there. This was on alien blue on an iPhone 5
There is a kind of sweet spot for the benefits of Windows, for instance SQL Server in High Availability cluster. The cost is fairly low for us, about £10k per year, it's about a third of the hardware cost. Managing a low number of Windows servers is utter childsplay, the cluster updates itself in stages during our scheduled downtime then tests itself once that's completed. It really removes the need for me to have any kind of full time ops person. Now obviously that value for money sweet spot wouldn't scale if we had say a thousand servers, but we don't, it isn't our business model. So we look at things like the benefits of using C# over say Python the performance improvement is enough to negate the software licensing by the hardware reduction. Meanwhile a 'faster' language like C wouldn't be worth it due to the increased development time.
You've obviously never actually tried this.
First of all, I'm a big fan of .NET, C# and F#, and I would use it at my job if I could, but Java and Scala are where it's at (and I like Scala anyway). I was with you until you mentioned TFS. I've never heard anything but complaints about it. I've used Visual Studio Online for a bit with Git, but I found it not such a nice tool if you want it JUST for the git server functionality, which a lot of companies would do because they need to manage build-servers, issues, and sprinttasks in other places. Buildservers need to be polyglot usually, issues need to saved and easily queried, and sprinttasks need to be easily seen by other teams. I'm not sure about the current state of VSO or TFS, but when I used it, it wasn't immediately obvious how to do all that. The reason people don't like GUIs is because it's hard to automate things over them. Admittedly, for a starting web dev it doesn't matter and it helps having a GUI. But as soon as you need automatic deployments that are not trivial for example, the Linux ecosystem does it a lot better and easier. Not to mention there are more resources on it. Another reason to use Linux is indeed the scalability software it provides. Docker, CoreOS and Mesos are getting huge traction right now for a reason. It's relatively easy to (auto-)scale services with that software, and it promotes what we currently view as good software design. It's getting too big to ignore for MS. And in the end that's why it's so important for MS to on the one hand get foot on Linux with .NET, so people can use all the nice things Linux provides, and on the other hand to provide their own platform with Nano Server, so people can choose other things than Linux while still having (most of) the benefits of that ecosystem. I'm not saying you're completely wrong. Yes, MS makes it easier, but it's harder to switch later if you're used to MS tools, and it lacks a lot of things Linux does have. Lastly, if you have been for 15+ years in the MS ecosystem, I respect your experience in it, but I would also strongly advice you to take a look at why people want .NET on Linux at all.
I've seen this attitude amongst my junior developers. There is some kind of urge to do things the hard way and thus feel like a hero. For example, I'm quite an experienced developer and regularly use the OSS tools on the command line to do some things, such as git CLI and Vim. One day a junior developer thought this was cool and decided to do the same, except that he was not at all productive in this way. On many occasions, I demanded that he used VS built -in Git support and editing features with which he was more familiar, but I kept catching him struggling with vim and Git CLI. He has since moved to another team where he gets to play with the "cool" stuff. What this generation of developers seem to forget is that those of us who appreciate the power of VS have been through the pain of editing .BAS files in edlin.exe, have dealt with dBase III and Clipper, and VB and COM, and CORBA, and J2EE, and a myriad of other evolutions that have led to the current tools, which are infinitely better. It's OK if they want to come out a hero by having doing things the hard way whilst having fancy colours in their Vim editor (which was a luxury in my days), but to deride progress without knowing what preceded, that's just disrespect. 
Looking at the thread you've posted, people didn't "shit on you" for suggesting .net, they shit on you for suggesting that OP's long list of things to learn would be lesser if he switched to .net. For those watching this little car crash, here's what OP's list looks like: &gt; 1. FTP and web host setup &gt; 1. Basic terminal usage &gt; 1. Basic SSH &gt; 1. Github basics &gt; 1. Learn how client and server talk to each other &gt; 1. RESTful web services &gt; 1. HTML &gt; 1. CSS &gt; 1. Javascript &gt; 1. Jquery &gt; 1. CSS Tools: Precompilers (SASS/LESS/Stylus) &gt; 1. CSS Frameworks: (Bootstrap/Foundation/Bourbon with Neat/Gumby/Skeleton) &gt; 1. Responsive Design with CSS &gt; 1. Task Runner (Gulp, Grunt) &gt; 1. Dependency Management (Browserify, Webpack, Require.js/AMD) &gt; 1. Front End Build Tools (Bower/package management / Yeoman.io / Front-end performance) &gt; 1. MV Javascript Frameworks (React.js/Flux, Angular.js, Backbone.js, Ember.js, Mithril, Ractive, Clojurescript &gt; 1. Unit Testing (Mocha, Jasmine, Karma) &gt; 1. Back end language (C#, Python, Java, PHP, Node.js, Ruby) and whatever backend framework goes with it (for Python alone, we have choices between Django, Flask, web2py, CherryPy, Pylons, Pyramid, TurboGears, Tornado, Bottle, Hug, webpy, Zope, Appier, and many many more) &gt; 1. Unit/Functional testing for chosen language above &gt; 1. Databases (MySQL, MongoDB, Redis, PostgreSQL, Cassandra) &gt; 1. Caching (Nginx, Apache, Datbase(Redis), In-memory) &gt; 1. APIs/RESTful services &gt; 1. Security &gt; 1. Authorization/authentication (OAUTH2, JSON WebToken) &gt; 1. SOA (Service Oriented Architecture) / Microservices &gt; 1. Deploying your app &gt; 1. Websocket &gt; 1. Devops &gt; 1. Webplatforms (Digital Ocean, Rackspace, AWS, Heroku, Azure, Engine Yard, Google App Engine, Nodejitsu, Openshift) &gt; 1. Server Management/Configuration management (salt, puppet, chef, ansible, linux, docker) &gt; 1. DevOps workflows (Vagrant, Capistrano, Fabric, Flightplan, Deployment strategies) &gt; 1. Continuous Integration (Github Hook deployment, Travis CI / Jenkins) &gt; 1. Docker (CoreOS, Mesos, Docker-machine, Kubernetes, Mesophere, Panamax) There is literally nothing in this list that does not apply to .net development. Nothing at all. Developing a .net web application requires an understanding of everything on that list. I am not surprised you got downvoted, though from looking you didn't even get downvoted that much. You got downvoted for not understanding OP's problem, not for suggesting .net.
Well there's this thing as a general opinion. If you go to /r/iOSProgramming the general opinion (*yes, really*) is that Swift is immature and why would you need anything else than Objective-C anyway? If you go to /r/Swift while it's still all iOS devs for some funny reason people all really seem to like Swift, but for example if your opinion there is that extension/protocol based programming over OO maybe isn't the silver magic bullet to all problems you get down voted no matter how well written your post is. People just down vote if your opinion is against the group think no matter how well you write it, of course more so if it's a really trollish post but if 70% of people is convinced Micro$ucks is shit no matter what then there's no real chance of getting much upvotes. Most people really don't have any opinion they are just locked in a certain dogma.
&gt; There is literally nothing in this list that does not apply to .net development. Nothing at all. Developing a .net web application requires an understanding of everything on that list. That's funny because I've been doing this for a decade &amp; a half, I'm the lead developer on a team of 7, I have dozens of applications in production across several companies, -- but I don't know &amp; have never used half the shit on this list. &gt; Developing a .net web application requires an understanding of everything on that list. I have several applications in various stages of development or production right now, built by developers who never had to think about or understand half the things on that list. *Might* they need to know *any* of those things at some point in their career? Absolutely. Do they HAVE to know ALL those things to do their jobs effectively? Nope. 
I came across Panopticlick and wanted to see if asp.net server side info was enough to be unique. So far it looks very poor. I didn't know about AmIUnique.
Thanks.. that was quick, I think that concludes the experiment. Device fingerprinting is poor server side, which is good I suppose.
I don't understand the question.
&gt; I'd bet $10000 that you write some bullshit C# and have no idea how .NET works, or how your deployments work, or how updates are rolled out to your Windows Server clusters. We need to find a way to make this bet happen. 
&gt; This is what ASP/ASP.NET/ASP.NET MVC were designed to do. I agree with you right up until this line. ASP.net was designed for far more than these smaller applications, the platform is incredibly powerful and versatile way beyond that.
We have big retail sites as well. We have a video streaming site with 5-10 million users at any given time. We have some applications that talk to satellites in space. So no, not just LOB for small audiences
I've been developing within the .NET ecosystem for years and I certainly have run across every one of those items in various applications over the years. You can certainly get sucked into the corporate vortex and not need much of that, but if you are deploying apps to the general public the standards are different.
Azure is as low as $10/month (not counting the free dev sites they offer). Need SQL server? You can get r for as low as $4/month. So if $14/m is too much for you, I don't really know what to tell you. Btw - this is just Azure cloud. There are plenty of really cheap Windows server host providers that include SQL db, but to be honest - it's just too easy to build up something then publish it directly to the cloud straight from Visual Studio.
There is nothing magic about Panopticlick (at least, I don't think it uses plug-ins like flash to identify). They give a summary of what techniques they use, it won't be hard to search for how to do each one in asp.net 
Yes, they do use Flash or Java to get the information about the installed fonts.
&gt; I don't know &amp; have never used half the shit on this list. I don't know why you're so proud of that.
All true, but if you are going to dismiss Docker as "just another CI tool", that is foolish, and you haven't been paying attention. Microsoft is throwing their weight behind Docker in a big way themselves, and for good reason. Gulp, grunt, and all the movement on the front end side is a huge battle royal of bullshit right now, but they *are* moving in a much better direction than the drudgery of being stuck in jQuery land that we've been in for the last decade. Yes, you can build stuff the old way, but you should not sell yourself short by not keeping up with them. Microsoft themselves are in a huge revamping stage where they are absolutely starting to tracking the industry on this shit: all of the items in that list are totally things you should be keeping a watchful eye on.
Can you give a little more info? What kind of project are you building? What have you tried?
Has Hangouts already released a public API?
&gt;i have no reserves given we are a university and nearly everything is free/included with our MSDN license Huh, how does your project get funding? Because I was under the impression that those licenses were non-commercial only. Unless you're working on purely educational or administrative software I guess
Yes that is correct. Everything I write is for my university. I'm talking about a new software project for WORK. not for play. 
Learn Xamarin. Learn native iOS and Android UI programming. Windows Mobile development is not the thing I would bet on now.
Who says I'm proud of it? It's just a fact. I'm not proud of the fact that I don't play violin either. I'm not doing any Bach recitals anytime soon, so it's all good. 
Decided to actually click on this, man that's a bad web page, literally cannot read any text on it, apart from the screen shots
Declare an interface to the DLL using c# extern keyword (read about P/Invoke) using C++ headers as a reference. Do not forget your calling assembly to target either x64 or x32 CPU depending on the DLL bitness (if you host the application on IIS your application pool must also be appropriately configured).
Hey Buddy...Could you please let me know exact issue with this link.. I can read all content. Thanks
I'm on a phone and the background is black, some code is is also black therefore it is unreadable
I would personally decouple the page/site and the hardware though something like a service bus, event queue, or other asynchronous communication mechanism. Binding request to hardware actions seems like a potentially problematic plan of attack. Even a distributed lock throttling throughput of the commands to the hardware would be better than waiting on the hardware in the web controller via a c# DLL binding.
We don't need another one. Dapper is fine.
This. Invoking hardware directly from a webserver is not a good idea because it will not scale. If this is for a proof of concept, it's fine, but you should be thinking about real world usage.
Maybe this is something similar to what I had to do in the past, a kiosk with some hardware attached to it. The interface was web for flexibility, the hardware devices were hosted inside windows services exposing WCF endpoints. The communication from the web interface to the windows service was done with WCF. From windows service to web was by http requests if I remember correctly. From the web app to the actual browser displaying the interface either by long polling or websockets. 
Do you have a top-level feature comparison?
1. This needs much more significant tests. 2. How do you do a projection (either a column subset or a calculated colunn)? 3. Can you sort in the database? 4. How do you limit the number of results returned? 5. A common pattern for APIs that have members following a `Prepare` and `Execute` design is to be designed in such a way that a statement can be prepared once and executed several times; I don't really see that kind of workflow here. Perhaps I am missing something. Can you do something like this? codewise, I note some minor things I would do differently: * https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.SqlServer.net461/SqlServer/CommandBuilders/SqlServerDeleteObject.cs#L41 - instead of `"Delete from " + TableName` getting passed into a constructor, a subtype of the class would be better; and then lazily build this string when it gets used (don't build strings eagerly if they might never be used). * On the line above that, use `string.Concat("DELETE FROM ", TableName.ToQuotedString(), " ", output, " WHERE ", where);` instead * https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.Core.net461/CommandBuilders/DbCommandBuilder%602.cs#L20 - use a `get` only auto property instead. More generally, various bits of this source are using C#6 syntax and other parts are not and it is not consistent. 
If you are working strictly from stored procedures, Chain doesn't offer much over Dapper. The main difference is that Chain doesn't require you to manually manage your connections, which admittedly isn't that big of a deal. If you are using inline SQL with Dapper, I think you'll be pleasantly surprised by this.
No, that's not really feasible given how incredibly different each one works. What I can offer you is a draft of an article showing how to implement common repository patterns in EF, Chain, and Dapper. https://www.dropbox.com/s/wedeceekpdgljtc/Comparing%20Basic%20CRUD%20Operations%20using%20Entity%20Framework%2C%20Dapper%2C%20and%20Chai.docx?dl=0 
&gt; Can you sort in the database? &gt; How do you limit the number of results returned? We don't support that yet. (This was originally written for a environment where that would be handled inside stored procedures.) Proposed syntax for sorting and row-limiting: https://github.com/docevaad/Chain/issues/43
&gt; use a get only auto property instead With a property set by a constructor? &gt; More generally, various bits of this source are using C#6 syntax and other parts are not and it is not consistent. Yea, this is the first project I've been on that allows C# 6 so I'm still feeling my way around it. (Day job is stuck on 5 because they won't update the build server this close to delivery.)
I like that. Thank you. You've been most helpful (not just for this comment, but in general).
From the top of my head.. You Are probably using System.speech and should be using Microsoft.speech assemblies. Separate speech sdk download. Good luck
Nope, iPhone 5c. Using alien blue to view it 
Guys. Stop downvoting him. bobbybottombracket has declared that we only need Dapper and I think everyone would agree that he has the final say in what is and is not developed. If only the java community had such wisdom they wouldn't have the huge number of open source developed libraries.
Hmm. Not really unfortunately. Most of my experience is in Azure, so it would be the Azure Service Bus, Azure Event Hubs, Azure Blobs (for the distributed lock), Azure Queue Storage, etc. I know there are some things like RabbitMQ, and file system locking that could get you by, but you'd have to look into it yourself. For the azure stuff, just some googling and the official Microsoft docs/tutorials should help you out.
Let's be honest here, we already have a lot of data access libraries available for .NET (close to a dozen from Microsoft alone). If I can't prove that I'm better than Dapper for some use cases, then I'm wasting my time and everyone else's. I don't need to convince him specifically, but I do need to answer his challenge.
Working just fine on my iPad 3 using Alien Blue. Also looks good on my Android. Thanks for the read.
&gt; There's a difference between using something because it's "new and cool" and using something because it solves a problem that you think you don't have. For you it's "good enough". It's not a problem I *think* we don't have, it's a problem I *know* we don't have. &gt; and nobody wants to hire people who don't know what way the wind is blowing, who don't know what a container is. I'm not worried about getting hired. In 15+ years I've never gone more than 3 weeks without a job, and I'm in high demand now. I don't have to say, "hey, I know docker!" to get a job, I can just link to the many large &amp; successful sites I've built, and that'll demonstrate my ability to get things done and learn new things just fine. Deployment methods have varied across just about every job I've ever had -- if I ever need to learn a a*new* way to package &amp; deploy, no big deal. I will. I work for a Microsoft partner, we have MS guys running around this place 24/7, consulting, teaching and yes, selling -- and not once have any of them ever mentioned docker for our company. They'll push everything under the sun at us hard if they think we might need it in any way. If Microsoft Evangelists can't identify a need they can push, then it's just not there. We hire developers just about every year, none of us who do the interviewing gives a damn if candidates know about containers. I need developers who can build applications, not architect my network.
You are looking for WPF with MVVM (Model View ViewModel). Personally I have found the [APress books](http://www.apress.com/9781430243656) to be pretty darn good in this area. Esp if you are looking to learn how it works and how to use things. I would not suggest loading a framework on top of any implementation you are doing until you understand how MVVM and WPF works and what any extra framework may be doing. 
Thanks! Installing now. :D
we did a school project with the MVVM pattern. personally I saw no advantages over WinForms for when you are developing apps for yourself. I guess this is due to my ignorance on the topic though, we kinda had to rush through the whole thing. A few people in my class were however very versatile in MVVM and they don't like it. can someone explain to me what is so good about it?
I'm not convinced it should be avoided, MsTest integration with VSTS is interesting from an outsiders perspective. But to get the most from it you need VSTS and/or TFS. Outside of a corporate environment you don't have that. What you do have are many people who have VS Community or Sharp/MonoDevelop or VS Core. Objectively the only real reasons I have are that it is unsupported by common open 3rd party tools like Travis CI and that it is not known to be being developed with support for .NET Core. 
I suggest you use the [Azure LetsEncrypt Site Extension](https://github.com/sjkp/letsencrypt-siteextension). It simplifies the process of using LetsEncrypt on Azure. The only problem I've encountered so far is that you have to request the certificate for `yourdomain.tld` separate to `www.yourdomain.tld` otherwise it will fail silently.
Two books that I thought were good: [Pro ASP.NET MVC](http://www.amazon.com/Pro-ASP-NET-Experts-Voice-ASP-Net/dp/1430265299) [Professional ASP.NET ](http://www.amazon.com/Professional-ASP-NET-MVC-Jon-Galloway/dp/1118794753)
If he's using dotnet, that's no longer a problem :)
ASP.NET (the website) has some good stuff, also TONS of good ASP.NET stuff on Pluralsight. (full disclosure I'm a .NET course author for CodeSchool which is a Pluralsight company) I would recommend my courses, but they won't be out for at least a few months. But look up people like Scott Guthrie, Shane Boyer, John PaPa, etc. They are very good resources for development in .NET. Also look up channel 9, another good resource. For solving problems StackOverflow is a solid resource as well to sad yourself hours of debugging problems others have fixed thousands of times before you, etc. It's also good to find someone knowledgeable to be a mentor. They can help you figure out things you're doing well or poorly do you know where you need to focus on becoming a better developer :) Edit: I skipped on books only because with .NET core most books are out of date :( as .NET core changes ALOT)
What's the requirements of your caching? Here's a few options: - http://www.cachemanager.net - MemoryCache - Redis - ConcurrentDictionary I am not very familiar with UWP but hopefully some of those can get you on the right track. I utilize MemorCache / ConcurrentDictionaries pretty heavily when I implement caching. Super easy and works great.
&gt; What's the requirements of your caching? I don't know; that's the point. In theory you can pick any of those, implement a thin adapter that inherits from ObjectCache, and plug it into my library. In practice, well...
You are completely misunderstanding System.Runtime.Caching. Yes, it includes an in-memory cache, but that's not the point. It is supposed to be a common interface that can be used to expose any cache, local or distributed, so long as you can wrap it in an ObjectCache adapter.
&gt; SSL certificates are x509 certificates applied toward the purpose of securing SSL TLS connections (The SSL protocol is actually no longer used, TLS replaced it but everybody still calls the whole general idea 'SSL'). Actually TLS 1.0 was "just" an upgraded version of SSL 3.0, so in some sense the SSL protocol is still in use, just under a new name.
&gt; I would refactor this code to try and be source compatible with Frans Bouma's Raw Data Access Bencher project. We are faster than everything except Dapper for individual selects: Non-change tracking individual fetches (100 elements, 25 runs), no caching ------------------------------------------------------------------------------ Handcoded materializer using DbDataReader (GetValues(array), boxing) : 0.17ms (0.01ms) Handcoded materializer using DbDataReader : 0.17ms (0.01ms) Dapper v1.40.0.0 : 0.19ms (0.01ms) Raw DbDataReader materializer using object arrays : 0.25ms (0.02ms) ***Chain v0.6.5924.37016 : 0.26ms (0.02ms) Massive using dynamic class : 0.29ms (0.02ms) Oak.DynamicDb using dynamic Dto class : 0.31ms (0.02ms) ServiceStack OrmLite v4.0.50.0 (v4.0.50.0) : 0.36ms (0.09ms) LINQ to DB v1.0.7.3 (v1.0.7.3) (compiled) : 0.45ms (0.01ms) LLBLGen Pro v5.0.0.0 (v5.0.0), Poco typed view with QuerySpec : 0.46ms (0.02ms) PetaPoco Fast v4.0.3 : 0.48ms (0.02ms) LINQ to DB v1.0.7.3 (v1.0.7.3) (normal) : 0.51ms (0.01ms) LLBLGen Pro v5.0.0.0 (v5.0.0), DataTable based TypedView : 0.70ms (0.01ms) Entity Framework v7.0.0.0 (v7.0.0.11116) : 0.79ms (0.04ms) Entity Framework v6.0.0.0 (v6.1.40302.0) : 0.93ms (0.05ms) Linq to Sql v4.0.0.0 (v4.6.1038.0) : 2.02ms (0.08ms) LLBLGen Pro v5.0.0.0 (v5.0.0), Poco typed view with Linq : 2.18ms (0.55ms) PetaPoco v4.0.3 : 4.46ms (0.10ms) But we suck at bulk selects Non-change tracking fetches, set fetches (25 runs), no caching ------------------------------------------------------------------------------ Handcoded materializer using DbDataReader : 155.30ms (3.06ms) Handcoded materializer using DbDataReader (GetValues(array), boxing) : 161.24ms (1.06ms) Raw DbDataReader materializer using object arrays : 172.42ms (1.24ms) LINQ to DB v1.0.7.3 (v1.0.7.3) (normal) : 179.37ms (2.40ms) PetaPoco Fast v4.0.3 : 180.86ms (4.40ms) LINQ to DB v1.0.7.3 (v1.0.7.3) (compiled) : 181.13ms (6.20ms) LLBLGen Pro v5.0.0.0 (v5.0.0), Poco typed view with QuerySpec : 181.89ms (1.30ms) LLBLGen Pro v5.0.0.0 (v5.0.0), Poco typed view with Linq : 197.57ms (20.53ms) Dapper v1.40.0.0 : 207.91ms (1.69ms) ServiceStack OrmLite v4.0.50.0 (v4.0.50.0) : 218.59ms (23.42ms) Entity Framework v6.0.0.0 (v6.1.40302.0) : 218.78ms (4.21ms) PetaPoco v4.0.3 : 229.83ms (21.90ms) Linq to Sql v4.0.0.0 (v4.6.1038.0) : 233.28ms (18.82ms) Entity Framework v7.0.0.0 (v7.0.0.11116) : 292.95ms (17.94ms) LLBLGen Pro v5.0.0.0 (v5.0.0), DataTable based TypedView : 340.55ms (9.18ms) Massive using dynamic class : 619.42ms (5.32ms) Oak.DynamicDb using dynamic Dto class : 689.19ms (27.28ms) ***Chain v0.6.5924.37016 : 1,079.26ms (72.62ms) Change tracking fetches, set fetches (25 runs), no caching ------------------------------------------------------------------------------ DataTable, using DbDataAdapter : 255.03ms (11.74ms) Linq to Sql v4.0.0.0 (v4.6.1038.0) : 295.24ms (14.08ms) LLBLGen Pro v5.0.0.0 (v5.0.0) : 312.84ms (16.71ms) Oak.DynamicDb using typed dynamic class : 678.75ms (24.99ms) NHibernate v4.0.0.4000 (v4.0.4.4000) : 2,494.10ms (50.87ms) Entity Framework v6.0.0.0 (v6.1.40302.0) : 2,674.74ms (110.76ms) Entity Framework v7.0.0.0 (v7.0.0.11116) : 3,814.16ms (457.44ms) We're going to have to do something about that. 
if youre familiar with programming already i wouldn't bother with books, just keep using google every time you get stuck
Maybe you should have explained that's how you are using it.
Coolio!
if we up and downvote long enough, the correct answer will arise. Reddit is love, Reddit is live!
I'd suggest posting this over in /r/programming/. You should get a better answer there. I don't believe C++.NET is still supported and C++ doesn't fall under .NET.
Well I thought of using that approach too, but then when I do that, I find myself often missing "best practices" about a specific language, etc. In other words, I end up having ugly code that almost always needs a complete rewrite.
I like the format of this book. Pity there isn't an MVC 5 edition yet..
I'm a big fan of BitBucket server. It's a little resource heavy, but a very nice bit of software: especially because it's very similar to the regular BitBucket and by extension very similar to GitHub. That means the vast majority of developers are already familiar with it, and it's just generally a nice interface IMO
Welcome to .NET lol
Try stackoverflow careers. http://stackoverflow.com/jobs
Uh, that's why I said " theory any cache provider can expose an adapter for this, " in the question.
This is the best one IMO. https://github.com/pauldotknopf/react-aspnet-boilerplate Server-side rendering, react-router, redux, aspnet membership.
Did you post a job on LinkedIn? It would probably reach a wider audience than just making connections. Indeed.com seems to index job postings from various companies sites. ... I'm not in your area
I have read that it's a pain in the ass to use with C++, especially with non-pro versions. 
&gt; For some reason, coders outside of .Net developers have some innate hatred for it, and I've never understood why. Easy, because it used to be shit. ASP Classic and VB6 were fine (but no more than that) when they came out, but compared to what came later with PHP/Ruby/Python, damn they were awful. PHP has its flaws, and it's also a bit of a whipping boy for web devs now: mostly because of the low entry barrier and untrained people developing using it... but at the same time it did basically revolutionise web development. Now I'd personally say that modern MVC C# is superior to PHP/Python for "I like coding in this"-ness, but it took a long time to catch up. Even early MVC was pretty messy a lot of the time. In short, people try something, decide it sucks and then take some persuading to make them realise it's been updated and doesn't suck any more. So yeah - the point is that while C#, ASP.NET and MVC/Web API are all good now, they used to be pretty bad - or at least not as good as the competition. It's only ~2 years ago I started to consider C# a serious contender for web development
Its a scale thing, for the kind of application you would write in school the complexity was likely not high enough to really see the advantages more than just some extra work. The kinds of things MVVM enables is often for larger projects where re-use tends to be much higher and automation is needed around testing to ensure everything always works as expected with any change.
I'm afraid you may be right on the money with the small pool of qualified candidates in the area (and who is available socially). These are fantastic advice points. Thanks a lot! :D
She's definitely doing personalized contact and is quite good at outreach. She has built our entire digital marketing department with her advanced tactics, but due to the teeny tiny pool in Central Indiana, she is pretty discouraged about finding a .NET developer. Our culture is pretty freaking amazing. We have beer afternoons, mimosa mornings, and french toast fridays. Xbox One, pool table, ping pong table, and N64. The overall camaraderie is really felt, and our social media person goes out of her way to showcase the culture (as social proof to coincide w. the recruitment message), but as others have said, the developer pool in Indiana is dismal. The tip about depressed markets is gold! I never even thought of that (although that doesn't mean she hasn't). Your personal experience on this one is greatly appreciated. Thanks a ton for all this. 
Turns out he called corporate and had them forward him to my location.
I'm looking now for a new remote gig if you've got any well defined projects and would like to talk. Mainly just interesred in project based contracts, not sure if you're looking for longer term assets.
+1 for Channel 9, they also commonly have video walk through's on how to use their new and upcoming technologies.
cold-call off linkedin, yup
Try tapping Louisiana, especially around Lafayette and Baton Rouge, for potential reloc candidates. Between LSU and ULL this state pumps out a respectable number of CS graduates (undergrad and graduate degrees) and there are definitely more job seekers than the job market here can support; the market for .NET developers, especially generic full-stack devs who don't have a specialty or niche, is pretty dead. 
Original ASP.Net was a total cluster fuck. Classic ASP was better! But yeah, MVC has been turning it around ever since.
I usually go to LinkedIn and search for the .NET keyword, under Software Engineering. The more i search for it, the more relevant (mostly .NET related jobs) will start to appear more. And i think we also have a subreddit that is dedicated to this kind of thing. I am not in your area either, shucks :( Good luck!
That's... Your suggestion isn't it? 😏
craigslist
I know it's super counter-productive, but at this time they are not supporting remote working for this particular role. I'm a remote worker (marketing) and we have some remote developers who have other specialties, but I think that since there is a solid team in place in the main location, they are being hesitant about opening it up. I talked to the recruiter today and expressed the importance of opening it up, so I think she is going to chat up the higher ups and try to get a green light on that. Redditors have been awesome on this thread!
Oh?! Are you in the Fort Wayne area? If so, I am sure she would love to chat with you or some of your colleagues :D Our recruiter has been trying to source for months and she feels like she has reached the bottom of the pool in her search. We currently have about 30 developers right now, but due to the rapid expansion of the company, we are always needing fresh and experienced talent. 
Great to know. Thanks!
Thanks for the feedback. Frankly, I had no idea there was a difference between WPF and UWP. They both use XAML and look the same, and no where had I read they are different, so thank you! Regarding the Price property...I'm not sure how I fix this. I want it to be a decimal, so I must cast or parse it somehow. Where best to do that do that? I tried explicitly casting with: ...Price="(decimal)40"... But it does not like that. Do you have a suggestion?
That looks to be another difference with UWP. The code you have above would work fine in WPF.
It's not about paying their salary, it's about finding them in the area or somewhere else and being able to incentivize them to move to central Indiana (no one wants to move to Indiana from really anywhere). We need .NET developer with a solid job history -- that unicorn with the right amount of experience and training who also happens to live somewhere in the surrounding area.
I'll move out there for $200k. Full-Stack software engineer. C# (Web Forms, MVC and Web Api), JavaScript, Java, C/C++. Experience with designing and implementing single page applications using Angular and Backbone/Marionette. (so I'm not just a jQuery monkey) Experience with responsive design using Boostrap and Foundation Framework (more of the later) Knowledge of both Linux and Windows administration. I could go on about the million javascript frameworks I have strong experience with, but I'll save the space. 
Are you trying to dox me? :)
I understand, but whoa is it not central! But fair enough, I get your point. I'm from Indiana and have family in Fort Wayne, so it's a bit more obvious to me. 
They said details would be coming out during Microsoft Build (next week). I would personally hold off until they say what their plans are then.
The deal to buy xamarin just went through recently, not a few months ago. And when they announced the deal they said they would talk more about their plans at //build 2016, which is next week.
While reading [this book](http://www.amazon.com/gp/product/0984782850) I've found [the website](https://www.careercup.com/resume) from the authors of this book which has some tips on how to make a good resume, and they also offer a [resume review service](https://www.careercup.com/resumereview), but I personally haven't used that so far, so no comments on that one. I also find [these tips](http://ofb.net/~niniane/resume_howto.html) from ex-googler and ex-microsofter pretty useful. But I'd also like to hear some experiences from anyone who used those resume writing services, my experience is getting close to 10 years and I'm starting finding it a bit troubled to highlight everything important in one-two pages.
I looked it up because I was sure they announced it a few months ago, but it was in February. Wow. &gt;And when they announced the deal they said they would talk more about their plans at //build 2016, which is next week. Awesome. I hadn't seen that detail before so it seemed like they'd just gone silent about it. Thanks!
If I recall correctly, the put out a passive-aggressive statement the same day, saying that Mono does not and would never copy or borrow code from Microsoft's .NET.
Very well! That's awesome.
Well that is good to hear. I suppose the article on /r/csharp on the day of the announcement was either fake or retracted. I'd hate to see "Microsoft is the devil" loonies spoil an open source project again.
You may be thinking of someone else. Miguel de Icaza (Mono/Xamarin lead) posted [this](http://tirania.org/blog/archive/2014/Nov-12.html) on the same day: &gt; Like we did in the past with .NET code that Microsoft open sourced, and like we did with Roslyn, we are going to be integrating this code into Mono and Xamarin's products. 
Do you have the tsconfig.json file in the root of your app? I believe the IDE expects for typescript projects to have their own folder so you can have multiple typescript projects in your web project. You'll probably need a typings.json file as well. It should look like: -WebProj -wwwroot -angulartsproj -typings -components -typings.json -tsconfig.json your tsconfig should output to the wwwroot folder and exclude the node_modules, wwwroot (directory which are a above your tsproject directory). Exclude the typings directories as well. You can use gulp (or whatever else you're using) to move other artifacts to the wwwroot folder as well. **Edit:** Having trouble finding the source that I read this from. **Edit:** nevermind I found it. https://github.com/Microsoft/TypeScript/wiki/Using-TypeScript-With-ASP.NET-5
[**@amcdnl**](https://twitter.com/amcdnl): &gt;[2016-03-23 22:06:31 UTC](https://twitter.com/amcdnl/status/712762476903968768) &gt;Using the [#dotnetcore](https://twitter.com/search?q=%23dotnetcore)? Want code watch compilation with auto\-reloading in ur [#gulpjs](https://twitter.com/search?q=%23gulpjs) / [#nodejs](https://twitter.com/search?q=%23nodejs) workflow? Check out [*github.com*](https://github.com/Swimlane/gulp-dotnet) ---- [^[Mistake?]](/message/compose/?to=TweetPoster&amp;subject=Error%20Report&amp;message=/4botrv%0A%0APlease leave above link unaltered.) [^[Suggestion]](/message/compose/?to=TweetPoster&amp;subject=Suggestion) [^[FAQ]](/r/TweetPoster/comments/13relk/) [^[Code]](https://github.com/joealcorn/TweetPoster) [^[Issues]](https://github.com/joealcorn/TweetPoster/issues) 
&gt;Dedicated to developer job sourcing? I'll have to dig for it! If i remember correctly :D , it has been awhile since i saw a job posting for a CS Job on reddit. Usually, I lurk around /r/cscareerquestions/ for recommendations and others stuffs. You can try to ask there as well! I don't know if they have a rule against job posting on it (they might), but it is still worth a shot. Other than that, if you guys open up the application for people outside your area, just drop me a pin.
I appreciate the modularization of the BCL. But do we really benefit by having System.Console as a separate package? I know the tooling is supposed to be fairly mature: Intellisense will suggest packages for you. But I worry we'll end up in a new sort of DLL hell. Couldn't they have created a slimmed down xplat version of mscorlib/System.Core? 
Does anyone have an idea about how to convert old .NET console apps to the new ".NET Core" format? 
Personally I would use Web api with dapper to return the sql data into json, and use highcharts or d3 on the client side. If you need more info on using any of these techs, let me know. It's soooooooo ways though once you get rolling to create an interface like this. 
Thank you so much for your thoughtful response. I think tailoring each resume to the specific position is a great idea, and I completely agree the soft skills are just as important. I wonder if there would be value in having a professional write a generic/default version and it can be customized from there? I think once I have something worthwhile it'd be easy to tweak. Thanks again!
I appreciate the modularization of the BCL. But do we really benefit by having System.Console as a separate package? I know the tooling is supposed to be fairly mature: Intellisense will suggest packages for you. But I worry we'll end up in a new sort of DLL hell. Couldn't they have created a slimmed down xplat version of mscorlib/System.Core? 
For similar jobs sure start with a generic developer resume, that amp up and down various points to better cater towards the potential employer. 
There's a severe shortage of developers, there's not going to be a fantastic hidden cache. But LinkedIn is where I've gone when hunting offers. 
May God hear you 
[removed]
This seems like the most likely path forward which would not hugely disrupt Xamarin's ability to drive revenue through licensing. It seems unlikely that you will be able to deploy Xamarin builds to an actual device with any "Community Edition" of VS+Xamarin. That said, I would be surprised if at least free support for Simulator builds does not become available. I'm most curious to see what the plan is for Xamarin Studio. Currently, XS is much better for Xamarin development than VS and given that VS must be synced to a Mac build host, it may never be as fast XS.
right. Right dude. They put out an article shitting on MS and then retracted it and then MS was like "we'll buy you!" You're full of shit. And if not, find the /r/csharp post. you got confused. You had the wrong idea in your head for over a month, just get over it. This whole "everyone else just had typos!! I'm not misremembering!" is fucking so sad to watch.
Unless you have lots of free time, don't even bother trying before .NET Core RC2, all of the command-line tools have changed.
As above, don't make a decision right now. The short term future of xamarin will be revealed next week at Build. They'll either tell us what's happening or they'll say nothing which will be a pretty solid indicator that nothing is going to change this year. I'm expecting that at the very least we'll see xamarin free with MSDN subscriptions, though I'm not sure if a community or free version is as guaranteed. Fixing the licensing issues on mono are likely to take a little longer. 
Probably not, unless you had dependencies on some of the "platform services" stuff in .NET Core RC1. What changed are tools like `dnx/dnu/dnvm` being phased out in favor of `dotnet`. The framework monikers have changed as well, but I have no idea what's old and what's new.
https://github.com/docevaad/Chain Fair warning: we're still in development. It seems stable, but we are still finding the occasional edge case.
I have a busy life and haven't exactly been holding my breath and don't keep a diary of Microsoft's business deals, my apologies, your worship.
&gt; Does C# not work on Android? Not directly, hence Xamarin. AFAIK, Android only directly supports their Java SDK and their C++ NDK.
Pretty damn cool. In what format/where are you saving the precompiled materializers? Is the idea to use `WithChangeNotification` in concert with the built in caching appenders?
I played around with CS Script a few years ago and not only is it really good but Oleg Shilo provided awesome and fast support whenever I had any questions. Looks like it's had some great improvements added since I last looked too.
Looks pretty useful, code looks neat. Starred.
Looks useful, might give it a go. Also starred
Direct link to the relevant article on the blog: http://piotrgankiewicz.com/2016/03/18/sentry-the-api-watcher/
Yes that's one of the possible usages of that project. The general description can be found here http://piotrgankiewicz.com/2016/03/07/sentry-project-description/.
xUnit has "fixtures" that allow you to share context between tests and test classes. Is this what you are looking for? https://xunit.github.io/docs/shared-context.html Also, have you looked into FluentAssertions? http://www.fluentassertions.com/
[They offer a free subscription for students.](https://www.xamarin.com/student) [Here's my "bill" from last year.](http://imgur.com/njgypiA)
I've only seen these "junior" and "senior" titles in job offers, as a way to say approximately how much of experience a candidate requires to apply for the job. The "intermediate" title is pure bullshit though.
Yes, if they release a community version, they will get more developers, maybe that's the reason for the acquiring 
It seems to me there are tons of C# scripting options. I've been playing around with them and I'm not sure which ones I prefer. [Microsoft's Roslyn](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) [ScriptCS](http://scriptcs.net/) [Mono Scripting](http://www.mono-project.com/docs/advanced/embedding/scripting/) [CS Script - The one you mention](http://www.csscript.net/)
Previously it was named ASP.NET MVC 6. Then it got renamed to ASP.NET ~~MVC~~ Core 1.0. They deemed a major version bump as not expressive enough, considering that this is a complete rewrite. There will be no MVC6 anymore.
Once Roslyn picks up Core support and Mono picks up 4.6.x framework support, you could probably use Roslyn universally. You'd be restricted to Core and .Net Framework 4.6.x at that point though
&gt; Pretty damn cool. In what format/where are you saving the precompiled materializers? Just an in-memory cache that associated with a given data source. Here's the code: https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.CompiledMaterializers.net461/CompiledMaterializers.cs As you can see, it's not very fancy. It just builds the same function that you would have written if you were using System.Data directly without an ORM. *** And for comparison, the old reflection-based approach. (Try not to laugh.) https://github.com/docevaad/Chain/blob/master/Tortuga.Chain/Tortuga.Chain.Core.net461/Table.cs 
I love this. It's wonderfully succinct. Thanks for sharing. 
Can you dump the SQLite to *.sql then import that?
seems like a good way to go. Suggestions for how to do that for the entire database, everything seems to be a table by table solution. 
Nothing in my public API exposes the script engine that I'm using, so if we see better performance that I can make that change. One of my concerns is that I'm not seeing any UWP support from anyone. It's not that big of a deal, as UWP pretty much means SQLite, but I would like to offer the option.
Shiny. I don't have time to look into it in detail right now, but this is definitely something I would love to have in new projects moving forward.
Here you go: http://www.infoq.com/news/2016/01/Net-Core-1.0
Thank you. Hopefully in the next few weeks I'll be able to provide more functional, tested and well documented version. For now feel free to play with the actual examples in the repository. 
Microsoft .NET Development Utility Mono-x64-1.0.0-rc1-16231 ---------- System.UnauthorizedAccessException: Access to the path "/home/paul/www/NuGet.Config" is denied. [stacktrace] ---------- Restore failed Access to the path "/home/paul/www/NuGet.Config" is denied. I have tried doing different things and getting different errors. All of which I've searched but seem unrelated. 1. *.locked.json write access denied issues during dnu restore (I think it might be because other packages fail) 1. Some packages will fail during a restore because of odd exceptions. Unable to resolve service for type 'IAssemblyLoadContextAccessor', The authentication or decryption has failed. in the web request 
Yes, I'm aware, maybe I'll think of a better, unique nam in a future :). Thanks.
I have a resume already with projects I'm proud of as well, I just don't feel like my qualifications and accomplishments stand out like they should. Having a hard time writing only a few sentences per project that would make the reader go "oh wow, that's impressive".
Actually basically every single one of your posts in here contains either: a complete inaccuracy or an excuse for why you were spreading inaccurate information. Where do you people come from? How do you stay employeed?
BTW, I think it's hilarious you made an account just to be an ass on this thread. Your life must be awesome.
Thank you all for clearing this out for me!
How does Xamarin work? 
Restore happens before the build process takes place. 
http://www.thesaurus.com/browse/sentry **** You can also use a prefix. My set of projects is called "Tortuga ..." to ensure the package names are unique. 
&gt; I think that's true that a restore happens on build, but I think if you build and then send it to another computer, you just need to restore and run. I would have to agree. &gt; Understanding ASP.NET Core by Roland Guijt. (Sorry, pluralsight paywall). In a 4 minute section, he hand waves the setup of mono and libuv. He then copies the files, runs 'dnu restore' which happens to target Mono-arm-1.0.0-rc1-16231. Then he runs 'dnx web' and that's all it takes. Same here... I think we need to address the error itself. It appears the mono runtime can't access the NuGet.config. I would execute the following as sudo: sudo dnx web If you haven't already that is.
I'm going to reset my VM. But I know if I do "sudo dnu" I will get "dnu not found". I'll try the dnx with sudo though.
Why are you even using RC2 bits? If you don't want to spend time and effort to run CI builds then stick to stable. RC1 is stable.
The big update happening right now is moving the ASP code base over to the new dotnet tooling. The APIs that you use in RC1 should not change in any significant ways. Some changes might be necessary due to changes in how applications will be hosted but these changes should, mostly, not affect the way you write applications. In short, stick to RC1 for now, it's stable and APIs won't change much. It's a good version to use for learning.
I've had very few issues with RC1. Im using CLR though, on Windows.
Visual Studio -&gt; Publish WebServer1 \\WEBSERVER1\www\ Config= release, Target DNX= dnx=coreclr-win-x64.1.0.0-rc1-update1 paul@WebServer1:~/www$ dnvm list Active Version Runtime Architecture OperatingSystem Alias ------ ------- ------- ------------ --------------- ----- \* 1.0.0-rc1-update1 coreclr x64 linux default &gt;dnx run Unable to resolve project from /home/paul/www &gt;sudo dnx run sudo: dnx: command not found &gt;dnu build Microsoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231 Unable to locate project.json. Total build time elapsed: 00:00:00.0034996 Total projects built: 1 &gt;dnu restore Microsoft .NET Development Utility CoreClr-x64-1.0.0-rc1-16231 CACHE https://api.nuget.org/v3/index.json Restoring packages for /home/paul/www/approot/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc1-final/app/project.json CACHE https://api.nuget.org/v3-flatcontainer/system.runtime/index.json CACHE https://api.nuget.org/v3-flatcontainer/system.console/index.json Writing lock file /home/paul/www/approot/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc1-final/app/project.lock.json **System.UnauthorizedAccessException: Access to the path '/home/paul/www/approot/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc1-final/app/project.lock.json' is denied.** at Interop.CheckIo(Int64 result, String path, Boolean isDirectory, Func`2 errorRewriter) at Microsoft.Win32.SafeHandles.SafeFileHandle.Open(String path, OpenFlags flags, Int32 mode) at System.IO.UnixFileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent) at System.IO.UnixFileSystem.Open(String fullPath, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, FileStream parent) at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) at Microsoft.Dnx.Tooling.LockFileFormat.Write(String filePath, LockFile lockFile) at Microsoft.Dnx.Tooling.RestoreCommand.WriteLockFile(LockFile previousLockFile, String projectLockFilePath, Project project, List`1 graphItems, PackageRepository repository, IProjectResolver projectResolver, IEnumerable`1 contexts) at Microsoft.Dnx.Tooling.RestoreCommand.&lt;RestoreForProject&gt;d__69.MoveNext() ---- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult() at Microsoft.Dnx.Tooling.RestoreCommand.&lt;&gt;c__DisplayClass68_0.&lt;&lt;Execute&gt;b__2&gt;d.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.GetResult() at Microsoft.Dnx.Tooling.RestoreCommand.&lt;Execute&gt;d__68.MoveNext() ---------- Restore failed Access to the path '/home/paul/www/approot/packages/Microsoft.AspNet.Tooling.Razor/1.0.0-rc1-final/app/project.lock.json' is denied. Feeds used: https://api.nuget.org/v3-flatcontainer/ 
So I ran 'dnx web' from /home/paul/www/approot/src/HelloWeb I finally get: &gt;Hosting environment: Production Now listening on: http://localhost:5000 Application started. Press Ctrl+C to shut down. If I use IP:5000 from my windows machine, I get connection refused. So I did 'wget -r http://localhost:5000'. The contents look about right. Some css is off but like 98% right. ~~So I think my last issue would be to get the IP issue fix. But I feel close :]~~ http://stackoverflow.com/questions/33462774/asp-net-5-0-beta-8-in-docker-doesnt-start I added the command: "web": "Microsoft.AspNet.Server.Kestrel --server.urls http://0.0.0.0:5000" and everything works now! The issue was I was calling 'dnx web' from top most directory instead of the './approot/src/ProjName/'. No 'dnu restore' required. Which makes a little bit of sense because you can have several projects in one solution. 
Oh nice... So, you got it up and running. Good stuff.
My linux machine doesn't have a gui. I did a wget and that worked. But I couldn't connect to the website from my windows machine on the network. But if you are interested: https://github.com/TotzkePaul/LinuxDotnet/blob/master/approot/src/TestWeb/Startup.cs 
Yes. It might be a firewall thing but it seems like I get "ERR_CONNECTION_TIMED_OUT" when I host from windows. But I got "ERR_CONNECTION_REFUSED" immediately when I ran it on Linux.
Yep. Especially relevant after this week's debacle with Kik and NPM for Node.
Well, before I publish this to the NuGet, I'll definitely think about that :D.
~~Well, you are 100 % wrong.~~ ~~ASP.NET Core 1.0 is the basic framework which allows you to host your web app and accept the HTTP requests. ASP.NET MVC Core 1.0 is a framework on top of it. It makes no sense to get rid of the MVC, because they are two different things. You can use ASP.NET Core without MVC.~~ I was wrong. It is indeed only named ASP.NET Core. Source: https://blogs.msdn.microsoft.com/webdev/2016/02/01/an-update-on-asp-net-core-and-net-core/ &gt; The whole “ASP.NET 5 MVC 6 Web API 2″ sub-component versioning scheme was confusing. We’ve been working towards “One ASP.NET” now for years and we’re there.
RC1 is fine to start a project on since essentially you can use Visual Studio with these projects no problem. RC2 is definately not. there is no developer tooling for the new dotnet-cli and its a huge nightmare. Compiling/Debugging/Running netstandard applications is a nightmare right now. Must be said though that there is a significant difference between RC1 and RC2. A lot of the APIs &amp; Namespaces/Assemblies have changed in name and implementation.
You go from "never touching anything else" to "NO" I'd like to know, what is it about this platform that is making you so patient with the development changes?
Definitely going to wait for RC2 to be stable. Thanks for the help!
Myrtille is an easy way to connect remote desktops or applications from a native web browser (no plugin, extension, application or configuration whatsoever). Its main interest is it works, without installation, from any web enabled device (including touch pads), on any OS. Server side, it uses the .NET (C#) framework. Feedback is welcome! thanks :)
Assuming SQLite even has the same syntax as SQL Server?
Thank you for correcting me. Indeed I was wrong with my correction. And thank you for changing your previous immature comment. A rule that I have to learn myself again is: Always provide sources to your claims. You could have prevented my comment by providing a source, I could have saved myself from the embarrassment of my wrong answer by looking it up first.
The SQL generated by the SQLite dump should be compatible. There may be a data type that's incompatible but you can search/replace that before you import in SQL Server. I've done this going the opposite direction and it worked fine.
Check job listings in your area, my guess is you're going to see a lot more C# than VB. It's not a bad thing to have in your skillset though, occasionally it pops its head up. In my own personal experience it's been legacy stuff that I've had to either fix or convert.
I used it at a job that started about 2 years ago, no legacy code. I wasn't there in the very beginning. It worked really well actually, same as C# just different syntax. Don't use VB. If you know C# then you can easily claim to know VB, the other way around also took me about 4 hours to learn.
As others have stated, VB.NET bears little real resemblance to VB6 and more to C#. It's a strongly typed language but with different syntax, a few additional helper libraries, and some different editor prompts and options. If you know one, you can learn the other fairly quickly and easily. Each language has a few features the other doesn't, but nothing earth-shattering. In my experience as a consultant, the majority of projects I work on are in C#, but there are a handful of VB.NET ones. Most VB.NET projects tend to be in worse shape with lower quality developers when I arrive on the scene, but I have seen VB.NET projects with decent code bases, too. My advice would be, don't bother learning it until you have a concrete reason to.
My work has several applications written in VB. I have told management I will not work in VB. As soon as those apps need changes or updates, I won't work on them unless I can rewrite them. 
&gt; it's basically the same thing Yeah. Tell that to your aching wrists after wiring a few hundred lines of VB.Net code. The equivalent C# code is about 1/3 as many characters and is therefore easier to read and maintain, IMHO. Functionality wise, yeah there aren't many differences. 
Yep, most of the time when you see VB it's because someone who wasn't a programmer wrote a program which eventually required an actual programmer. VB is very approachable.
Same. Recreating a vb6 app now into asp.net
There's no reason to learn VB if you don't use it. It's not dead, there's a lot of code around still written in VB but it's not picked for greenfield projects. The last major piece of software I remember using VB was DotNetNuke and they rewrote it in C#. With .NET going multi platform I can't think anyone coming over from the JVM will be interested in it. UPDATE: I would add that VBA (Visual Basic for Applications) is used a LOT, especially in finance. But VBA is really targeted at business owners and middle managers as a productivity tool - it's often more productive for them create some rudimentary software rather than submit a project request to an IT department.
The `My.Application` style extensions are huge time savers. VB supports LINQ to XML, which is a huge time saver when generating client-side HTML or working with pre-JSON web services. VB has WithEvents, which is really useful for those who still do Windows UI programming. I've lost track of the number of bugs I've fixed in C# code from not wiring and unwiring events correctly. VB has a less verbose syntax for LINQ expressions, including support for aggregates. VB supports mutable anonymous types, a feature that I really, really want for the ORM I'm writing. VB allows you to reference the `this`/`me` variable when initializing fields. For example: private _PrivateList As new Collection(of integer); public readonly List = new ReadOnlyCollection(_PrivateList); C# can do the first line, but the second has to be pasted into every constructor. VB supports anonymous iterators. C# only supports anonymous functions. When writing WPF/XAML controls, C# has to create static getters and setters. VB's equivalent would be parameterized properties. (Which unfortunately it can't actually do because C#'s limitation was backed into the WPF framework.) VB has an optional scripting mode where you don't have to worry about type declaration. Not too useful for mainline application code, but still handy when dealing with badly designed 3rd party libraries or writing quick and dirty scripts. A lot of the syntax is just nicer. For example, a real Select Case instead of the crappy C-style switch. And you can pass properties to ref/out parameters, trusting that it will generate the correct copy-in/copy-out semantics. **** Prior to the introduction of the `dynamic` keyword, C# was incapable of working with many COM libraries due to the way they required late binding. Likewise, the lack of support for optional parameters was a nuisance when working with COM. These days you see optional parameters everywhere, proving that COM wasn't the only use case. Prior to the addition of the `?.` operator, just raising events in C# required boilerplate code. (Which most people got wrong.) *** Really the only thing I see in C# that I would like in VB is the shorthand for anonymous functions, which is a must-have when working with Razor. Pretty much everything else in VB is as good or better than C#. 
Ha! In a lot of the code I write C# requires significantly more lines of code to do the same thing. WithEvents alone is proof of that, but there are other things such as simply chaining methods: return variable.Method().Method2().Property(); Return variable.Method.Method2.Property Or how about idiomatic single-line if statements? If x then y else z if (x) { y } else { z } And don't get me started on their ridiculous C-style switch block. No automatic fall-through for non-empty blocks AND you still have to include `break` statements? Sure, the C# keywords are shorter. But if you count tokens instead of characters, the C# code is almost always more verbose.
What do you mean by that?
&gt; but nothing earth-shattering. Except LINQ to XML and XML literals. Those are huge features that you don't see anywhere else.
I hate to say it because I love VB, but long term that's probably the best choice. 
In VB you have statements and you have expressions. In C#, everything is an expression. Which means you can do assignments inside other expressions such as the idiomatic for loop: for (var i =0; i &lt; 10; i++) The downside is that you can do assignments inside expressions: if (boolX = boolY) x = Foo(++x, x++); The first one is a common C# bug that can't happen in VB. The second one... well it'll get you hung up by your toes in most shops. *** From a language design standpoint, having separate expressions and statements is a huge win. Not only does it reduce bugs, it allows you to do things like have multi-line statements without the need for either a line terminator (`;`) or a line continuation (`_`) character. It also means you can have situational operators. The `=` in VB means assignment or equality test depending on the context. You don't have to invent another operator such as `:=` or `==` to serve one of the roles. If you ignore the legacy crap like On Error Continue, VB is a better designed language than C#. (From a theoretical standpoint. From a marketing standpoint you can't beat a C-style language.)
Oh, don't even get me started on this. Seriously, in C# it's perfectly valid to do this: "if(x) y else z;" You chose like the best VB.Net formatting against a really bad example of C#. Secondly, I prefer to have empty parens when referencing methods because then you know it's a method and not a field or property--this improves readability, even if it is a little bit longer. In your career as a software engineer, you'll read far more code than you'll ever write, so, readability is important. Give me (almost) any example of VB.Net code and I can rewrite in C# to have fewer characters (even using the same identifiers)--the few instances where VB.Net comes out shorter still don't make up for the fact that C# is generally more concise. 
&gt; The equivalent C# code is about 1/3 as many characters and is therefore easier to read and maintain, IMHO. If that matters, why write C#? Why not write F#?
&gt; No automatic fall-through for non-empty blocks AND you still have to include break statements? There is no fall-through for non-empty blocks in VB.Net's Select Case either. C/C++ and possibly other C-like languages support automatic fall-through, but this is often a source of bugs since the developer often forgets the break statement. The break statement is necessary for the compiler to know if you're intending to use the automatic fall-through of an empty case label or making a simple empty case.
It can and does matter because you read far more code than you ever will write, by like a factor of 10. F# is a completely different beast. Microsoft has shown huge productivity improvements with F# compared to C# within their own internal development. However, I'm not talking about F# vs C# here. I'm talking about VB.Net vs C#. 
As someone who works in both languages, I can assure you that VB.net is way easier to type. Mostly because it's case insensitive and requires fewer special characters.
No fall-through for non-empty blocks is a good thing. Requiring the `break` statements when the compiler could just infer them is the problem. But if we want to go down that road, it isn't the only problem with `switch`. The fact that you only have one scope, rather than one scope per case block, has bitten me on more than one occasion.
Well, I guess my fingers must be good at typing all those "special characters" because I've never found them to be a hindrance. And well as far as case sensitivity, well, Intellisense handles that for me.
&gt; I follow the philosophy that if it doesn't need to be there, then it shouldn't. In the same vein I'm also annoyed at how most developers always include the "private" modifier on their private class fields &amp; methods because, well, the default is private. That I agree with. On my current open source project I made the concession to include `private`in order to satisfy the guy working with me. But aside from that I'm as minimal as I can be, especially on projects that I run. 
Had they not been slavishly following C, we could have had: switch(foo) { case Bar.Bat: // it's an empty case! case Bar.Baz, Bar.Bop: DoSomething(); } 
Ya, they just wait until they got a cobbled together Frankenstein that's uglier than sin and then ask it for help....
True... But honestly I rarely need code like this so it's really not much of an issue for me at all. I tend to avoid the switch statement where I can.
Are you using a raspberry pi by any chance? I like that you can specify runtime per project. Correct me if I'm wrong, but I hear Mono needs to use the same runtime across the whole OS. 
The server I'm referring to is a 4 Core production server I deploy to and is running CentOS. Sure, it's great to have a runtime per project and you're right Mono is the same across the whole OS but for me this isn't a problem. When Core settles down I'll no doubt start to use it but I can't think of any sites I have running that specifically need different runtimes right now.
And since all keywords in C# are lowercase.... 
No automatic fall-through is a good thing. Forcing you to write "break" when there is no automatic fall-through...debatable.
On mobile so I can't provide a link, but if you look on their github road map, they list it as a feature for v2, not the initial release. So definitely, but not for awhile. 
yeah, since everything is character and VS autocomplete pretty much you hardly need to type anything. But i still prefer C# any day, it is much more elegant and readable than VB.net
They didn't have a choice. The awesome type inference requires it.
There is very little that C can do that VB can't do more simply. Until recently I would tell people that one of the few things that VB can't do is over-ride operators and make + mean - , but I'm told that is no longer the case. So now I don't know anything VB can't do. However, you will always make more money if you can impress employers by knowing where to put brackets and semicolons in using C!
This is true of all VB code I support (at work), there is actually very little left since I have re-written most in c#.
Can you elaborate on your last point? There are some things VS does that it's supposed to.
I like VB's version slightly better, but have no strong preference. a = if (x, y, z); This, on the other hand, is better in C#: a = b ?? c; a = if (b, c);
I just wanted to jump in and talk about the culture and community side of VB vs C# for a second. This is a fuzzier but very important part of the equation. In general, I have found more innovation and smarter (at least more driven) people in the C# community than the VB.net community. I should elaborate on this a bit because these 2 communities co-exist a LOT. If you go to a .net event (user group, code camp, conference) most of the examples and talks will be in C#. Most of the open source projects on nuget are written in C#. The average pay of a C# dev is higher than the average pay of a VB.net dev. If you do a pluralsight search for C#: 3424 VB: 335 VB.net : 96 Now if you are a single programmer, just trying to rock out some code then none of this matters. But if are trying to do lifelong learning in a professional setting it makes a huge difference. And if you are a Manager trying to decide which language to choose you make a huge change to your hiring pool. Also related, but tooling seems much more robust for C# than VB.Net. We found that many refactoring from Resharper where not there or were unreliable in Vb.Net. I Don't believe Visual Studio have refactoring for VB by default. Unsure about Code rushes implementation. 
 Dim sb As New StringBuilder() sb.Append("no"). Append("they"). Append("dont")
If your looking to get deep into the trenches and you are set on going the C++ route OGRE is the way to go. It is much more lower level making it more flexible but much more difficult to work with. If you want to get to market faster and don't mind switching to C# then Unity would be the way to go. IMO Unless you have some off the wall new idea for a gaming experience Unity is the way to go.
Put your Modules folder in App_Code and be done with it.
I can't see why I'd use Task over ValueTask given a choice.
They sounds more like a dependency management problem than an F# problem.
I delisted VB.NET from my CV/LinkedIn a couple years ago.
The short answer is yes. MS was actually going to remove VB support natively in ASP.NET 5.0; turns out that the geek cult decided it wasn't worth the trouble. But wouldn't you know, the backlash from the enterprise community that actually pays the bills was pretty powerful, and they relented. It's used a LOT, especially in smaller companies where cutting-edge development isn't the primary focus. http://www.infoq.com/news/2015/04/VB-Core
Well if you target RC1 you don't have that problem. And if you just kep to Visual Studio it should not be hard transient to RC2
I have several large apps that were never moved from vb6 to .net. some because there was simply no need and others because the investment to move them was just to high.
Well, if you are using Visual Studio, you can set the files to "Compile" in Properties.
Honestly, I always go with 'tried-and-true' -- sure you can be adventurous and try out some design decision that you're not 100% sure on, but there is greater risk, no doubt. I stick with http://aspnetboilerplate.com/. Hands down the best package I have found for new asp.net mvc applications. It is actively maintained and updated as well.
Not sure how I've never seen this. Thanks for he resource.. Both the free and paid (ASP.NET Zero) boilerplates look very appealing.
Single page application is not always the right decision. 
non-interactive websites. that is, sites where you're only focused on content and you're users reading. How do you plan on making a CMS work as a single page application?
For the last thing: you mean because Task is an object and you want to save to manipulate later for something like Task.WhenAll (assuming it even would allow which I know doesn't).
The more experience I have with them the more I'm not sure they are ever the right decision. 
I wouldn't bother. If you know C# well you will know enough to be able to work around in or rewrite anything that's in that verbose monstrosity as needed. The consensus among most .net developers I've met is similar to my dislike of it (which is primarily rooted in its excessively wasteful syntax). You might find it a bit in legacy code and smaller dev shops but I doubt it's very prevalent elsewhere.
As someone that has been using the paid version of Zero (and the unpaid nuget packages for over a year), the devs are very responsive to any issues (more responsive if you pay obviously) and they're always fixing and adding more features. The paid version basically gets you a full template with a front-end admin interface for managing the users/tenants/editions. It was worth it for me since it saved me making it all and gave a ton of nice extensions. The option to go MPA or SPA is also a great starter feature.
I get what you're saying but... you're just flat out wrong :)
I mean that `Task` is a reference type and when you already have an instance, returning it is easier that returning a bigger struct. For example, if you have a method that returns `Task&lt;bool&gt;` there are only 2 values possible, `true` and `false`. So if you create 2 instances and always return them instead of allocating new ones it would be slightly better than using `ValueTask`.
Agree with you :) The internet is full of people giving THEIR views on the state of frameworks and design patterns etc. SPA's have their place but are not always the best solution. MVC is by no means obsolete lol.
Look, I simply don't make this kind of mistake. The "benefit" of avoiding the nearly zero possibility of making a mistake doesn't outweigh the clutter all the extra { and } make.
the brackets can get annoying depending on your keyboard layout though. For me {}[] brackets are altgr+numbers, while () are simple shift combos.
Operator Overloading has been a thing since 2005 in VB.Net :/ So actually for over 2/3rds of its lifetime it has supported this now.
Is there anything of any importance that VB can't do that C#cant within the context of Visual Studio?
Your question is not clear since you used "can't" twice, but I'd say VB.Net has no equivalent for C#'s unsafe blocks. edit: and in the context of visual studio: there are more project templates for C# for some technologies. You can still do the same in VB.Net, but have to add references manually etc.
Sorry for the typo. And I admit I don't know what an unsafe block is, so I'll look that up. I've created some nifty desktop applications in Visual Studio and simply had found a reason to think I was missing out on anything that would make my life better by switching to C#. But you can't know what you don't know...
Use IdentityServer3 (https://github.com/IdentityServer/IdentityServer3) for the token generation. All you'll have to do is fill out the interface for fetching a user.
On the Internet - your web host need to support hosting of ASP.NET applications. Your home or office - you will need to have a Windows operating system with IIS installed to host your ASPX page.
No, not really. There is only one difference (where I messed up a lot of times): You can create web application, or web site in VS. If you create a web application, then you must compile the site, and only need to upload the aspx files and the bin folder (and every other things, like css, images, js, etc). VS 2015 has a publish option, which can compile and upload everything what needed using an FTP, I personally prefer that. But please note, it can be slow, because it tends to reupload pictures and other stuff as well. If you create a web site, then you don't need to compile, just upload everything to the server, and you are done. During runtime, there is no difference really (at least, I didn't found any difference). The biggest one is inside the VS: with web application you can add more projects, which is useful.
 Dim giantLiteralStr as string = &lt;root&gt;&lt;![CDATA[ I can put any fucking string in there I want. Newlines? Got em. Question marks? Sure. Special characters? &lt; &gt; &amp; check. Can copy-and-paste any damn thing I want in here and instantly work with it. It is super nice. ]]&gt;&lt;/root&gt;.Value
Nice idea. It seems your controllers are doing a lot of the leg work and consequently have several responsibilities. Did you consider a mediator? 
Of course it is. It's intended to be.
&gt; That's just a compiler limitation &gt; That's easily overcome by offering an overload Almost everything can be done in C# if you change **both** the compiler **and** the underlying framework. But until then (and even after) there are reasons to prefer a `Task` over a `ValueTask` in most cases.
A mediator pattern is really beneficial when you have a large number of requests/comments and are reused in other areas of your app. Since this is a boilerplate, I'd like to keep the number of opinions low. I really would only like things implemented if they are the absolute recommended way of doing things in all cases, but that is just my opinion ;)
THISSS Don't roll your own. Use IdentityServer.
&gt;Look, I simply don't make this kind of mistake. Rookie mistake. 
Thanks for the advice everyone...I now have it up and running succesfully :) I had to adjust my web.config a bit and set up IIS, but all is well.
That what I said: if you create a web application, you must compile the site, upload the bin folder (with the DLLs) and the aspx files. But in case of web site, you only upload the aspx and aspx.cs files - the IIS will silenlty compile them. You don't (as far as I remember, you even can't) compile the website, you can treat it like a HTML or PHP file. Just upload and it will run.
Have you looked at TFS? 2015 update 2 will drop soon and has release orchestration built in. Other option: Octopus Deploy.
I'm just saying that this may have only happened to me once in 20 years of coding in C-style languages--certainly not enough to justify putting { and } everywhere. There's no rookiness here at all. It's not overconfidence. It's experience with myself and the kind of mistakes I make. I can reliably spot this type of error and I don't make it myself... so... Furthermore, if you know your language, and you know that formatting has nothing to do with syntax, then why do you need { and } everywhere at all? Can't you just look at an if-block and see that only the first statement is part of each branch when no curly braces are present, regardless of indentation? Programmers are supposed to have brains, why do we chose to shut them off where this is concerned? ADDENDUM: I think misunderstanding that formatting has no impact on the semantics of the language is worse than a rookie mistake, and as a developer you need to develop an eye for this type of problem--and many others.
I'm not so sure. Haskell uses Hindley-Milner type inference like F# and OCaml, but the order of source files doesn't matter AFAIK. edit: According to a comment in [this](http://www.markhneedham.com/blog/2009/05/02/f-stuff-i-get-confused-about/#comment-16153) article, they could implement multi-pass type inference, but it could result in worse error messages and worse Visual Studio UX.
Personally really excited about the IOT sessions, the game dev sessions, and if there is any new stuff happening to visual studio in response to the new IDE from Jetbrains.
Right click file, Properties, then in Properties window, select the correct Build Action. This might not work with a Web Site project. 
Ok, thanks.
Awful English. &gt; It only forward only over a collection. This is a better query data from out-memory (like remote database, service) collections. When we access a data from a database IQueryable execute select query on server side with all filters. It support Lazy Loading that was better for paging.
Makes it hard to read, don't get me wrong nothing wrong with blogging but would be better if they spent some time proof reading or getting someone else to read over it. Fundamentally the article doesn't really add anything that you can get off of MSDN.
I'm getting an error: "An error ocurred attempting to determine the process id of the DNX process hosting your application". I used the code from website given by Thornsten.
I'm not sure how to accomplish this on Azure websites, but you will also want to make sure to send HSTS headers (strict transport security).
Articles written by AIs should be prohibited. 
It's not even AI, its indian.
Reckon anyone will do a consolidation afterwards of key points?
Are you using DNX? Don't you think it's important to mention when you use preview alpha software?
There are plenty of well written articles by Indian authors on MSDN.com and elsewhere on the Internet. 
They are in the minority. If you are working at Microsoft or any big company like that, and especially if you are working on public literature, you're going to have to be good at English.
Was someone having trouble telling the two apart? Why was this article written?
Everything! Everything is different between the two. Except for a small set of things that are the same. That small set would have made for a far more interesting post.
The article is crap. I've reported it as spam. But that's about it. Maybe it's not a good idea to judge all "Indians" based on retard posts like these? Peace!
I suggest you to take a look at AppVeyor (http://appveyor.com), a CI service that works with .NET. Similar to Travis CI. You can even install a deploy agent on your VM to automate deployments on your own servers.
I use TeamCity as well. It is AMAZING how much they give you for free. There's a lot of different ways you can chain build projects together for compiling-testing-deploying scenarios.
Do you use Azure?
We use Jenkins for this type of thing. 
Learn msbuild and do it through that. I just use TeamCity to detect source code changes and kick off msbuild.
Have a look at https://appharbor.com/ . Its got ridiculously simple steps to setup CI with your projects to automate build and deploy. I used it for some of my MVC projects mainly coz it was easy and free. Other option is to use the built in Azure continuous deployment to deploy from you github. You can also use Visual Studio Team Services to write build definition for your repositories that can automate deployments . 
We use Jenkins to run out unit tests and then deploy to artifactory
I came across this article the other day: https://exceptionless.com/simple-app-deployment-azure-continuous-deployment-github/ 
Azure supports triggering deployment based on git pushes. Besides that you'd want to look at setting up a continuous integration/delivery system. We use http://www.appveyor.com/ at my company.
My windows is 64 bit.
May not be a popular choice, but visual studio team services(formerly visual studio online) has CI components built in. The entire system is built on top of powershell so you can do pretty much anything. What I have setup for my developers is a build triggered on checkin within vsts, the last step is a call to our on premise Jenkins instance that deploys the binaries to the dev environment. Once they're happy with the code in dev they promote the code to the next environment within Jenkins and binaries move to the next environment.
I do this too and it's awesome
Download it again. Sounds like a corrupt file. 
Our setup at work &gt; commit code &gt; build with TFS build ( this can be team city too ) &gt; pack as octopackage &gt; get to the dev enviorment Our build service : TFS, Deploymetn service: Octopus Deploy ( it's freaking amazing) 
What OS are you using? Are you fully up to date with your windows updates, including service packs?
As someone who straddles the line between Open Source Linux CLI work every day as well as .NET development, I can attest that most Windows developers I meet are not keen on CLI as much as Linux people. Part of the Windows draw is the GUI. Now, with that being said, with things like PowerShell more and more Windows developers are using the command line. And I'm not saying they all fear it. But the difference in perception between Windows and Linux people is stark. 
As a new developer, the simplicity of the tool let's me focus on the project.
me. main thing is having to type 8 directories deep and getting the exact syntax
Between business knowledge, software architecture and a whole slew of different technologies, my job provides me with well more than enough complex ideas to juggle into a working bit of software. I am by no means afraid of the command line, but it requires holding more knowledge in your brain than a good GUI. The command line holds power in that you can string together complex workflows with simple text files but I do not want to have bother looking up some complex syntax for something I don't do that often. I get paid to spend my time worrying about the higher level concepts, not the nittiest and grittiest of details. I feel there are lot of things that fall back to console tools simply because no one wants to bother writing a decent GUI (sometimes because that's hard). Git is a perfect example. All of the things that git does are representable graphically. All of the good documentation and tutorials explain the concepts and operations with pictures. Some one just needs to make that interactive. I don't see that happening anytime soon because the open source world is choking itself on it's arrogant attitude of what "real" developers should look like. "Real" developers don't use GUIs, they write their code in VIM. The mouse is a puerile device dreamt up by inferior computer users. Ugh.
I use a CLI quite often, and don't have any problems with it really, but I primarily use *Visual* Studio.
It works pretty well. You can either use Xamarin Studio or Visual Studio. If you use PCLs you can share most of your app logic (we get about 70% code reuse). If you use Xamarin.Forms you can bump that number up higher but you're limiting your UI. I use it for cross platform Android/iOS/WP apps and even android/WPF. Xamarin used to be pretty buggy but the last year and a half has seen it get very stable. When MS open sourced .NET it allowed mono to pull in a bunch of fixes into their .NET implementation. On Android they bundle the .NET runtime with your app so it's larger than a native Java app but not by much. I'm not sure how it compares with ART JIT/AOT but I always found it faster than the Dalvik JIT on Android devices. I believe iOS is AOT compiled into native code (they have limits on some things like reflection).
I wonder, and this is purely hypothetical, if this doesn't somewhat closely follow the line of people who went to a 4-year school and got a BS in Computer Science vs many who are self-taught, went to a vocational program, or came into programming from another angle. For me, going through college in the early 2000's, .NET was actually still a "newcomer" to the scene. We used Solaris terminals in college and wrote C/C++ code in *vi* and used command line GCC compilers. If we were fancy, some of us dual booted our personal computers to Fedora and used an enhanced text editor that provided code block coloring (I forget the name of it, but it wasn't standard in Fedora). Then we had to FTP the contents to our personal directory, secure shell into one of the Solaris terminals in the lab, and compile our code. That took a lot longer to do, but we had the massive benefit of having a nicer text editor and *multiple files open at the same time.* If you ask why none of us installed GCC on our personal computers, that's because university was running an ancient version and it had some custom "tweaks" that made things work differently (I think mostly to fuck with students). Anyway, my point is that I was forced to learn on a CLI, and .NET was totally foreign to my education; the university taught theory, not programming. After college, my first programming job was actually C# WinForms development and Classic ASP maintenance, neither of which did I have a flying clue about what I was doing. So I moved away from a CLI and into a GUI.
Major issue for me is lack of tab completion for most 3rd party applications and the fact that every application has a different way to do params and many don't fail with help syntax error ,message but try to execute with incorrect parameters. Do I use -, --, /, space? What about separator? :, =, space? Case sensitive? Powershell is great though
A soon to be graduate CS student's nooby question: what kind of job context entails such a seemingly vastly workflow (open source Linux to .NET). It sounds awesome.
Team City is pretty easy to setup. Poke around and you should be able to get a build running. For msbuild, I create a project file with a bunch of targets. Start with the official documentation to get it to build a project or solution. Then, you'll have to Google your way into getting stuff deployed, whether through web deploy, copy, or building an msi.
Sure, great question. I'm in a very senior position (6 figure salary) so I work with a broader array of tech. A more entry level position requires you to focus on a smaller breadth of tech, then prove yourself at that, before growing from there. Good luck!
You can tab complete CLI param names? There is a 90% chance I have to Google or man a command before I can use it
Develop with RC1 in mind, and deploy to 4.6.1 when it breaks. That said, I have a large app that is RC1 and it is going great. It is a really nice step in teh right direction, but I have the safety net/option to deploy to IIS and .NET 4.6
I have windows 10 and it is fully updated. I'm fairly certain I have the latest .Net release. 
It makes me feel better to know I'm not alone. This has been incredibly frustrating to the point where I'm considering doing a full fresh install of windows. The worst part is there is very few occurrences of this error under these circumstances and so troubleshooting it has been an uphill battle. 
More than you'd expect. Example: My first company develops primarily in VB, but the database was originally Postgre and later ported to Oracle and Netezza: the latter obviously not being Windows based systems. Another project at the same company uses SQL Server. Being a small company, I was involved with each of those projects in some way because we didn't have the resources for different teams for each. That's a fairly small company (~10-15 employees) with only a handful of products. Within larger companies the use cases for different technologies can be vastly different and incorporate a lot of different systems. My current employer is a large organisation of ~3000 employees, and again we use .NET/SQL Server for most development, but with large Oracle systems within the organisation. I don't actually currently work on both systems, being a .NET developer here, but the guy at the next desk works with RedHat/Oracle.
If this appeals to you, be sure to apply to places that seem to ask for every technology across the board. Places that focus on just .NET or just Java are great for those that like that, but personally I find that a little confining. 
It's still a valid point, because the .NET space has overloaded the TLA, and therefore neophyte programmers may miss the distinction and set the tone for themselves for years in the process.
I'll argue that, for most tasks, a CLI is not as productive as a GUI. Here's an example: without IDE/GUI integration, do an intake on a work item (TFS or otherwise), change a source code file, review the changes, check it in, update the work item, and receive and review the automated build results. This is a LOT more laborious without GUI tools. In the days of yore, sure you could do all that in command lines (even the file editing), but.. ::shudder:: Why bother with a CLI when VS or another IDE makes the moving parts around that process so much nicer? Let's not forget that Eclipse / IntelliJ support essentially the same use cases once the correct plugins are installed. The vast majority of developers ARE migrated to GUI-centric workspaces already, even for *nix style development. Most of the things one could use a command line for (e.g. searching a filesystem for a file by filename extension) are also just as easily accomplished in the IDE as they would be in the command line window, and I don't have to remember or lookup the particular syntax of the command line. Now if I want to get fancy (e.g. reboot a machine in two hours time 'shutdown -r -f -t 7200' (it just rolls off the fingertips at this point), it's a different story, but 99% of the time, it's just a waste of time to resort to the command line. Re: PowerShell - I'm a programmer, not a sysadmin. I can't be bothered.
I had a similar problem at work. Fresh new machine, got all the corporate ~~crap~~ software installed. I could not for the life of me get Visual Studio 2015 installed. I've tried everything (except SFC/DSIM, which I didn't think of): web-installer, ISO, copying it from another PC, etc. Eventually, after wasting about a week, my boss got my PC reinstalled without the corporate software, I installed VS2015 without a fuss, then got that software installed afterwards. Maybe running "sfc /scannow" in an administrator command prompt will tell you that there are corrupt system files. If so, run "dsim /Online /Cleanup-Images /CheckHealth". ***Bonus tip:*** Now, the only problem I have is that the corporate firewall blocks a lot of the NPM and other package management software's connection to the web (another week lost trying to configure those). I figured out that all I have to do is have Fiddler running as it acts as a proxy between my machine and the firewall.
To me it seems to be going the other way. I think more .NET developers are embracing the CLI. Especially with Nuget having a console window (which just a powershell window) accessible from inside Visual Studio I see it used more and more. I recently started working with Entity Framework some and seemed to be doing a lot from the PowerShell CLI. Don't necessarily assume Visual Studio use is anti CLI. I think the irrational thing about CLI use is the assumption that if its not your preferred input method then you're irrationally afraid of it. If a person has been programming for longer than .NET has existed they've probably been exposed to a CLI at some point and there day to day tasks don't demand they need to use one. (They may be able to but have alternatives to not.) Also consider that many (not all but most) .NET utilities either hid the CLI commands or didn't have them early in .NET development. It's only really in the last few years that MS and .NET has started pushing more CLI usability in there products. I don't think this is because they suddenly felt CLI is better. Rather as with everything they do it is a strategic move. Reducing the GUI in Server was the start and had wide ranging effects. Increased security but also started really enabling remote management of servers. (You've always been able to it was just a pain to do so.) This was gearing up for Azure. Along with that they started moving more and more functionality into Azure remote management. This has crept over into more things now. Because you can't verify the GUI environment your applications will be running in (or if there will be one) CLI interfaces are becoming more prevalent. Its allowing developers to move from local windows machines to linux to hosted azure vms using the same command set.
We probably all started with some kind of UIs such as the xaml designer, Winform Designer or WCF configuration utility. But some of us will start to look for alternatives once we reach limitations. For example, I find it much easier to hand type the xaml with the aid of intellisense instead of using the xaml designer. In our environment, most of our CI, Build and Unit Testing process are done using CLIs with a mixture of powershell and batch. On the dev side, we pretty much stop creating UI screens for system configuration and administration functionalities. Instead we create custom powershell cmdlets. It saves so much time and force some of the developers to use more CLI.
I'm fairly certain I have but I will try again and report back. Thank you for the response.
&gt; it requires holding more knowledge in your brain than a good GUI. The command line holds power in that you can string together complex workflows with simple text files but I do not want to have bother looking up some complex syntax for something I don't do that often There it is in a nutshell. If I did a lot of admin tasks, Powershell would be worth the time to learn, but as a developer I don't find myself needing command line tools often.
https://en.wikipedia.org/wiki/Three-letter_acronym 
Tech lead in a .Net/Windows shop: I am the only person on the team who knows how to use the CLI. :(
What's taking you two hours in IIS? I mean, it sucks and everything, but nothing should take that long.
Quite a few these days. In my case I develop services and reporting systems / dashboards with .NET and the Microsoft SQL Server stack, but have a number of data sources and ETL processes that run against a Hadoop cluster which are a set of shell script jobs on Linux. ThisIsWhyIFold's answer is correct; As you progress and advance the scope of your responsibility increases.
.net developers use visual studio. There's no reason to use a CLI, so when someone says to use this single CLI tool that's completely outside of my workflow, I'll say no thanks. I work with nodejs on headless Linux systems on a daily basis, and I'm not opposed to the CLI, but I'm 100% against changing my workflow significantly for a single tool.
Personally, CLI's don't bother me in the slightest! I seem to be in the minority here, but when it comes to Git, I prefer the command line to any Git GUI I've come across. When it comes to using node and node based tools, VS now has the build in task runners and bower package management tools which provide a GUI for this, but I still go straight for the command line. Nuget GUI or Package Manager Console? Console every time. In terms of Azure? I barely go near the web based GUI, and prefer to do everything through Powershell. I guess it depends on how your brain is wired. Some people just need the GUI, personally I like the fine grained control provided by a CLI wherever it's possible.
my last shop was a bit mixed about 30% were very well versed in CLI tools but used a mixed tool work flow, as most .net developers prefer to use visual studio they get annoyed at leaving visual studio because it is a break to there thought process to switch to a cmd prompt to run commands, hence why someone had the idea to bring tools like grunt in to VS via plugins, I personally still use a mix ie i still prefer to use cmd line for many things like i will run msbuild over visul studio rather than take the time to launch a heavy IDE if i just need to build a project for so it will run in IIS for example, or run grunt from command line to build our deployment packages and run webdeploy , I will tend to use Visual Studio if I am going to be debugging or coding on a project for a while as I prefer to have the debugging tools as opposed to using Omnisharp Atom for smaller tasks where i don't necessarily need enhanced intellisense, use the tools to fit the job IMO, i have code reviewed so many projects where someone was all gung ho about the fact they used notepad to write the application where the code was crappy and unreadable and in a lot of cases took the longer to write than someone who used Visual Studio which is packed with productivity tools 
I think some older developers feel like they're walking backwards being in the CLI because the movement to GUI is supposed to be a step forward from CLI. I use the CLI for things like git and grep, but I'm not fond of the experience in Windows -- even with some kind of *nixy compatibility layer and conemu. 
Seconding Adam's book from Apress. It's a long read but it covers more than just MVC.
&gt; I wonder, and this is purely hypothetical, if this doesn't somewhat closely follow the line of people who went to a 4-year school and got a BS in Computer Science vs many who are self-taught, went to a vocational program, or came into programming from another angle. I don't think unix/cli is a big part of university anymore. My interns didn't know what a command prompt was and just recently I made it to a second round job interview for knowing what grep was (apparently very few candidates know it).
That's more of a visual studio problem, that it doesn't interact well with the environment/cli.
The more experience I have the more I realize fancy web 2.0 designers don't understand tabbed browsing and want complete control over my experience. Most of my apps these days are a hybrid between SPA and MPA.
I have to be pragmatic about my tech choices, there's a limited amount of learning bandwidth available for devs who clock off at 530.
May I ask what you do on the command line for EF migration? I'm getting into Entity Framework but haven't come across anything in the MS docs regarding command line work. 
Working as a .NET developer for the last 10 years, sometimes I feel ashamed that I am still noob at using CLI and regret much that I could automate most of my daily tasks, should I use CLI more often. But common laziness gets over me, and I feel a bit reluctant to go through the documentation of some tool, searching examples that would fit my particular case. I feel trapped in my Windows environment when it comes to my day to day job. But when I am doing something on a side, I use Linux, vim and python, and feel the full bliss of using CLI. I wish had a job outside Microsoft's world, but I am afraid to switch, because I am not that good in open source technologies as I do in .NET. Just feel afraid of leaving my comfort zone maybe, I don't know. But I do feel ashamed, and consider myself as a noob in front of young devs who use open source tools.
My way of thinking is: - is the initial of arg name, -- full arg name, space means a subcommand within the tool. I don't know about / and other chars
The big difference is that for a long time the windows CLI was a pain to work with compared to Linux. Powershell has made it a breeze now.
I work for a major US retail company, the majority of our systems have Windows clients (more and more web based as time goes on, but large companies move very slow) that talk to to almost exclusively Linux based backend application and database systems. I just finished creating a provisioning and management system to control the configuration of 100,000 Windows desktops and the 9,000 management servers are all running on Linux. I wrote the client and server portions. It was a ton of fun. The clients were c#, the server was all php running in Apache with mariadb, and zeromq for messaging up to a c# central orchestrator.
[removed]
Windows sucks for command line, but they finally made some improvements in Windows 10 for both powershell and cmd
Relevant user name?
I've done a fair bit of work with it but not with the shopping elements part of it. Moreso checking queues and parsing of PNRs that are on them. Having also worked with the TravelPort and Amadeus one too... they're interesting beasts to work with
It did take me a bit to wrap my head around it the first and only time I used it. There was a little too much magic IMO. I just did a lot of googling as I hit a wall Side note: ASP.net MVC is open sourced :)
Windows CLI has been so terrible for so long can you really blame anyone for not using it? We finally get a terminal worth using in Windows 10. 
IIS is piece of shit 
I recently implemented it over on our projects. It's definitely not that simple if you step outside the walled garden. Getting started is nice and simple if you're fortunate enough to stick with the schema that Identity.EntityFramework expects, but it sounds like you may not be able to. What we did was create our own UserStore and UserManager classes to fit our schema and role structure. I will say that while doing so required a considerable amount of research, the end result is significantly more powerful and testable than the existing FormsAuth setup. To answer your question though, and as someone else here has mentioned, it's easiest to just iterate over your roles and store each one as a claim. I'm happy to help out if you have any other questions!
Docker is free, and .NET Core works without a problem. There is even a dockerfile provided by Microsoft.
I've played a bit with Docker &amp; .NET Core (MVC) Docker is free, DockerHub is not (I think). It's pretty easy to get it up and running. * Install Docker * Create MVC project ( I used yeomand http://docs.asp.net/en/latest/client-side/yeoman.html ) * Add Dockerfile (yeoman will add it for you) https://hub.docker.com/r/cl0sey/aspnet-coreclr-mvc/ * Build and image and pubish/deploy You can nicely automate the build and deployment of Docker image using DockerHub (you can have 1 free build and deployment)
If your boss don't trust open source, i guess you need to stop using asp.net as well :) https://github.com/aspnet
Thirding that book. He explains even the errors (with screenshots) that ensue in case you screw up.
Since we're here, has anyone been able to get DateTime objects with EntityFramework working on both Linux Dockers and Windows?
Normal js?
The other advantage of "tried and true" is that a decent developer should be able to get started on the project very quickly as everything is, basically, familiar. I try to minimise project-specific quirks as much as possible, as it's amazing how much time can be lost when you have to get someone up to speed with something unfamiliar **and** the project itself
&gt; Oh, and the IIS configuration would also be stock. Why? Surely if there are things you could do to harden the server, you'd want to do that?
Did they get Docker working in Windows Server 2016 beta yet, or you talking about running it on a Linux Docker instance?
Angular 1.X. I know it's dirty, I know I'll regret it in the future, but I am so productive and fast using the tech. I can pump out solid fast and feature rich websites in no time. I plan to look at react, but I'm at a point in the company where we need to get shit done, so it really isn't a choice. Controversial, I know, but whatever. You can come make fun of me in tow years when I'm regretting everything. 
Don't use VB. 
I have practiced a small amount of angular 1.x and knockout. But every webapp .NET MVC shop I have worked in actually uses the Telerik Kendo UI; with access to MVC wrappers. That's not even an option on your survey, and it has a pretty strong penetration rate. 
Can't wait to hear Carl totally miss the point of bash on windows while Rich laughs bad jokes.
If I add that, I might as well add every jquery plugin. I'm only talking client side applications (MVVM).
Full disclosure, PowerShell team member here. Could you elaborate on what's terrible about PS cmdlet discovery? I've always thought that the tradeoff the original PS creators made between verbosity and terseness was what made PowerShell so much *more* discoverable than bash. When I want to use a new technology or product I just Get-Module *thing* To find out the module is called, for instance, PSThing. Then I just Get-Command -Module PSThing and I get a list of Get-'s, Set-'s, Remove-'s, and New-'s. 
Canceled *today's episode*. I didn't mean to imply anything otherwise.
Angular 1.X has an 2.x conventions guide that if you follow it you will be able to upgrade to 2.X without much hassle. I've talked to a few companies that are following it for new development. Also, I think you called me an unhelpful prick once. That was mean.
I've done my work in Angular and that is our new standard. I've done a little work with handlebars (templates) and require.js (resource loading) with a custom built MVVM setup. But it no longer made sense to re-invent the wheel.
Have you looked at that page on mobile? The speakers list? Did they all have some horrific accident?
Was a long time ago, about a year now I think. I used to have you tagged but you never seemed to be a jerk again so I just let it slide. ;) 
Fuck I totally forget. But it was a good one. 
Hopefully it's announced there. I really want to get into mobile development but I don't want to have to learn Java
The Telerik UI is a MVVM UI control set....
It's saying that my UWP projects aren't compatible with VS 2015. I'm hoping that I just accidentally uninstalled something but I'll update this post once I've had a chance to check a couple of things. **** I had to set the target version to build 10240 before the project would load. 
It looks pretty bad on Windows+Edge. I shudder to think what you're seeing.
Less than a dollar a day. For a tool. With that mentality, they would starve to death if they worked construction.
Haven't seen them yet, but I've been looking
Oh nice! Did they tell you if it's going to be free? lol
I mean, a wrench would be easier and more convenient, but it is $25 and the pliers are free...
Looks fine on my phone. 
They said they have been kept in the dark too, so they didn't know.
Aw man, well I guess we'll find out tomorrow. How are you liking the conference? I'm only an entry level dotnet dev and have never been to any sort of conference, but I would love to go to one some day
Keynote was bleh, but I've picked up enough new tech and stuff to fill my backlog for the next 3yrs. I'm a sr architect in my team, so this is my 2nd \\\\build and my 3rd ms conference. Super useful to keep up with new tech from the ms world, and the networking is priceless.
Been running this since the CTP and it fixed the crashing issues I had with update 1
It has worked for me since before update 1. What issue are you having?
I'm intrigued, but they could be way clearer about what this actually is. The getting started code is almost indistinguishable from the nodejs getting started. Is the processing done locally or remotely?
It looks like Edge handles it differently than on Chrome. I can reproduce what you're seeing by changing the width of the Edge window. When doing the same in Chrome the images are handled different. 
Make sure you've got the latest WebEssentials installed? 
Unfortunately it seems its x86/64 only. Is there an ARM/RPi build I'm missing? I know it's possible to go Win10 IoT but I would like to stay Linux for now.
Might be the es6 causing the problem. I have done jsx using es5 and tsx using typescript and highlighting works fine. 
Free as in speech!
The processing is done remotely, because this is using a neural artificial network behind the scenes. This requires a large data set to meaningful understand the natural language in all its complexity. This also means the more people use it, the better the detection becomes (theoretically).
Razor views &amp; a bit of jQuery. Planning to learn Aurelia.
No, I knew both Java and VB well before that and those two combined are basically C#.
Yeah, I asked for details about something, and they said they would change tomorrow so why bother?
looks like you need to update your comment :).
I like how my post was removed for some dumb reason. it's free for small teams and is being open sourced. https://store.xamarin.com/
Free for all MSDN subscribers and for VS Community Edition. AND Open Sourced!
The BEST possible scenario! I love it. Time to get back into Android programming!
Never mind! It just got announced today! Xamarin is now open source, and free to all VS users.
Xamarin is free now: https://blog.xamarin.com/xamarin-for-all/
went ahead and called Xamarin, they clarified that there is no cost to build and deploy to any platform
Under five devs at your company, or you're working on an OSS project.
Awesome! https://blog.xamarin.com/xamarin-for-all/
This is huge! I've avoided cross platform/mobile dev due to the costs and the fact that I hate the ADK and don't own a Mac for iOS dev (I know I still need one for packaging/distribution). This may make me reconsider developing for mobile again. 
So freaking excited about this!
http://arstechnica.com/information-technology/2016/03/xamarin-now-free-in-visual-studio/ Awwww yiiiisss!!
Any pointer to where I can look? Can I just geto rig an custom authorize that does User.IfInRole? Because that works just great. Though It looks kind of bad if have an if statement whenever I want to implement role authorization...
Thank you for the response. By not finding anything I guess I was more wondering how bash can be useful to me a .net dev. I've seen tons of articles about bash coming to Windows, but I couldn't quite grasp why people like bash so much. 
Its free, the only question is how do you get Visual Studio. https://www.visualstudio.com/en-us/products/visual-studio-community-vs.aspx
For iOS you still need a Mac for debugging as well.
Yes
To clarify, Xamarin Studio is bundled with MSDN, but Xamarin SDK is now free for everyone, for teams of all sizes, regardless of your MSDN subscription. 
Pfff, my users can debug for me
I'm honestly not sure. I got a brand new Mac Mini from Apple about 2 years ago for £400GBP (i3, 4GB Ram, Spinny HDD), works fine for native iOS development, I imagine it would work as a Xamarin build server equally fine too. You could hopefully get one of those, or something similar, for less now, on eBay.
whats your learning strategy for Xamarin? Would love to bounce ideas!
macincloud.com lets you buy 30 hour blocks for a dollar an hour, or you can get managed build server plan for $28/month.
Well I have experience with WPF, so my strategy for building an MVP is Xamarin Forms initially as conceptually it is really similar (XAML, MVVM, etc), but going to use Pluralsight to properly dig into the whole Xamarin ecosystem properly when I have the time. Feel free to PM me!
Well I can manually add if(User.Identity.IsInRole("regular)) { //authorised exec } But I find it strange that [authorize] does not work. Maybe I did overwrite it... Where does on overwrite or override the [authorize] ?
Now just make Visual Studio for OS X/Linux and I'll die happy.
It's worth noting that you won't have the ability to do anything until you upgrade Xamarin to version 4.0.3. If you're like me and clicked download as soon as possible after the announcement you may still have 4.0.1. 
To be fair, if you have 252 employees or make more than $1M in revenue you can afford to buy it.
It's not even a Xamarin issue, it's just that iOS is the most hostile dev environment I have ever seen. 68000 Assembly made more sense. I'm trying to request a bloody certificate, paid my $99, agreed to the Program License Agreement, but Apple won't let me get a development certificate until I agree to the agreement I just agreed to. Why does anyone make apps for Apple products? This is literally the most messed up toolchain I have ever used. I thought TI's ARM toolchain was bad, Apple's system was clearly set up by idiots who can't tell good software from a hole in the ground. Probably because they are run by the same idiots who staff the "Genius" Bar, insist that Linux is incompatible with Unix-base Mac OSX, and think soldering RAM to the motherboard is somehow okay and makes a $500k Mac superior to a $500 PC with twice the hardware.
[Everyone gets Xamarin](http://i.imgur.com/kAvSuxm.jpg)
.tfignore is still not working. It may be an item in RC3.
You don't need a MacBook. A Mac Mini works great!
I am using Xamarin iOS for two years now (i am a pro) what you need is: An Apple developer account -&gt; $99 / year to deploy to real ios devices (even just for local testing) and to deploy to the AppStore The App Id / Provisioning profile / Developer certificate / Distribution certificate are just organisational things you setup using the developer.apple.com apple Developer MemberCenter Website (if you are a member you can setup as many certificates/provisioning profiles/app ids as you want). 
I don't think you are going to regret it. The thing is you need to write angular 1.x in a different way than you are (probably) used to. Here is a list of things you should do to have an easy time: - No Controllers. - Only use .directives and .components. - Only use .directives with isolated scope. - With components/directives (parent-child relations) pass data down send events up. - Use services for inter-component/directive communication. - Do not use $scope. - Use Typescript 
awesome! But could someone tell me if I need to pay the 100$ fee to Apple in order to publish an iOS app for my friends and family? Also, can I test/deploy meaningfully with an iPhone4 as my only Apple device?
Thanks for the explanation. I have a deep-rooted hatred of all things Apple, so it is extremely irritating every time I hit a snag on this. Right now I'm trying to figure out how to request the certificate. I figured out how to get the keychain to generate a request file, which I guess I need to upload to developer.apple.com, but this Macbook has no USB ports and I can't use the e-mail option because I don't have the Gmail password the e-mail client is demanding. 1. Why do I have to upload a fucking file to get a certificate? Does Apple not trust their own OS? Does Apple not not understand how to do network communications? Considering I gave up last night after a getting error messages saying I need to agree to the legal agreement that I just agreed to, and the browser console was being flooded with error messages, which eventually resulted in a pop-up explaining "Database error: Cannot read [key], value is NULL", Apple's developer site is apparently run by fucking morons. 2. Why do I need a fucking $99 certificate just to compile code on my own machine? That's 100% bullshit.
&gt; You have to register the app on the App Store. Basically it's about reserving the package ID. But why do I have to register it before I can even compile? It's not going on the App Store. Requiring people to register their personal apps is really fucked up and pointless. &gt;A certificate that you need to install the app on a physical device. And why, exactly, do I need Apple's permission to install my own software on my own device? This is why I stick to Windows, Android, and Linux. &gt;It's needed to digitally sign your app. Again, ***why!?*** Why does Apple require me to have a license, registration, and pay $99 to develop software for personal use?
if you are doing an Xcode project it is simpler because xcode tries to create certificates / profiles for local use by itself as long as you logged your AppleDeveloper account under Xcode-&gt;preferences-&gt;account 
Yes, you must pay 100$. Same goes for android, i think, 25$/year.
Depends on your perspective. If you're a company making money from your app, or even an indie developer who sells $100 worth of apps a month for a bit of pocket money it's fine. If you're someone looking to learn or just make hobby/free/very low volume apps, it's a lot.
I can't see that one as they have Visual Studio Code for cross platform. But then I again I never thought I'd see SQL Server on Linux so you never know!
I've done this a few times (the EF -&gt; Dapper route), because whatever benefit that EF provides in rapid development is offset fairly quickly by the performance concerns. That being said, although both are/can be ORMs, Dapper doesn't auto-generate SQL for you like EF can. So I've always started hand-coding stored procedure and replacing calls one at a time. I've never found a more global approach, nor do I think such an approach would work. In the case of your search request - a simple stored proc that accepts the search parameters and returns either JSON or a class that can be serialized would work well. You don't need to know any MVC really to replace an EF calls with a Dapper call, the end result will just be a class either way.
If it pretty much just does search canning sql off altogether might be an idea. Maybe investigate something like lucene.net which is designed for search. Other tips before you go gung ho on rewriting stuff. Make sure ef is updated to the latest version - the fact your on mvc 3 suggests it's probably not. Also make sure your db is actually optimised a bit, indexes etc. And maybe cache stuff rather then always running off to the db. Dapper is great, I love it ... But I also use ef on a site that gets 1mil+ hits a day and we don't have issues with resources (and we run it on pretty light specs) - it does Ofc depend massively on the types of queries. People are quick to slam orms a lot of the time but mostly it's because they don't use them properly (this is partly because they are so easy to use granted) but overall ef has a lot of extra stuff that will make your app more performant - eg caching repeat queries etc, it's well worth looking at how your using it rather then making our mind up on if it's a problem straight away. As to how you go about it it you decide dapper is the way - That sort of depends how much separation of concerns the code base has going on ;) if it had non start with that, interfacing up your data layer / business logic so it doesn't matter what the data provider is. Hope this helps! 
I'd go for the low hanging fruit and take out the most complicated queries down first with Dapper. As long as you stay on the simple side of CRUD EF is not a huge problem. Don't go for the big redesign from the bottom. You'll keep stakeholders waiting for too long, too much chance for regression errors because you don't focus on one particular part of the application and of course the opportunity to make people go wow about another feature getting 10x faster again instead of getting all the praise at once. I'm ready to throw out EF for Dapper as well on my main project but it doesn't stop me from writing new things in EF n places that are not hurting my performance in a critical way.
1) - Finding an employer who wants to hire junior developers at low cost is probably most important. Job fair seems like a great way to do this. 2) - Good attitude (be excited when talking about development) 3) - Ability to articulate and discuss concepts in the .NET / C# (or VB) ecosystem 4) - Being straightforward and admitting that you don't know something, rather than trying to bullshit your way through the interview. They don't expect you to know everything!
I'm involved in the hiring process where I work. We're a small company and everywhere is different so take this post with a grain of salt. &gt; I just started my own project that is going to utilize a front end, back end and database to eventually show off to prospective employers. This is important. When you show up to an interview and you're nervous, this will give you a chance to talk about something you're intimate and know well and can be calm about. It also shows you actually know how to code, which even among college graduates is a surprisingly rare trait. If you can make a full stack application and can actually show the code and go into details about it you're going to be miles ahead of everyone else applying for a junior dev position. 
This is the correct answer. Define an interface that lists all of your Database operations, make the EF stuff a concrete implementation of this interface (Creating your repository, if you don't already have one) and then just create the dapper implementation. Should be a simple switch over when it's ready.
Nah waist of time. Our industry doesn't care about degrees we care about experience. I've worked with tons of highschool dropouts who do front end and many of them are great. Degrees are BS in our field. It might give you a legg up at first but after 3-5 years of experience their useless. Specialized fields are the exceptions.
1. profile the queries, see which are the most expensive 2. Use another approach in EF, or tech or simple SQL procedures to rewrite one query at a time, and prove that it's faster the original EF by profiling again. 3. Repeat until general performance is "good enough" Don't optimize until you are sure about the bottleneck. And don't optimize further than needed - it may be very well that one single query improves everything. the existing code was probably tested and fixed to cover all sort of cases, you don't want to redo all that again.
I was a longtime Unix/Liniux/Java/Oracle developer that believed all of the anti-MS bullshit. The thing about Linux is it's a pain in the ass to get and keep running. Sure huge tech companies run everything on it. Lets face it most of us aren't implementing Google or Facebook. Nor do we have the time and money to hire an army of sys-admins. Windows Server just works. It installs and runs every time, on every computer no matter the hardware config. Its reliable, trouble free and it automatically patches itself. I can't imagine why you'd pick another server platform for a mid-level tech deployment. Factor in ASP.NET and SQL Server; they are well integrated and robust. Visual Studio is the best IDE I've ever seen. Everything is integrated. Everything works well together. In our situation as a web-dev shop we need to launch projects profitably with the least amount of labor possible. Once launched those projects need to run reliability. When we have failures and security issues its almost always in a PHP app or esp the MySQL databases. Our data center provider did an emergency reboot of our servers. SQL Server went down, machine rebooted and SQL Server came back up with no data loss. While all three of our MySQL instances corrupted all of their databases. 
I'm the lead developer at a smaller design/dev shop that primarily uses Microsoft stack in the majority of our projects (.NET MVC, Kentico CMS, Sitecore, DNN, etc.) I can't speak for everyone but I personally would most certainly hire you if you meet the following requirements: * Ability to set up and configure basic settings of a site within IIS. * Show that you're interested in furthering your experience and knowledge of not just .NET development but all things related (e.g. design patterns, debugging, best practices, and ability to convince me which keyboard is best). * Fit well with company culture. (i.e. Show passion for something - literally anything, help account managers and be constructive when they're getting an earful from a client because they feel their user error is our fault, understand we're all here to make money and build stuff we're proud of that helps someone or a group of people). * Ability to jump in and just start doing, even if it takes you twice as long or more as senior developers - as long as you're learning and putting forth a good effort. Most people aren't going to expect amazing things from a junior developer. Go in with a "can-do" attitude and an openness to learn. You'll do just fine.
I know a lot of engineers like myself that don't have a degree, but most do. Probably 5-10% that I know don't. 
The .net core isn't even released yet and is still in a preview state. All production web work is done in Windows still. Feel free to play with the Mac stuff, but I'd get familiar with visual studio community on PC first
Seems quite easy to land that job if you're willing to go like 35-45k. 
I'm a senior dev for a large corporation. I look for a few things: * eager to learn * ability to problem solve, more so how you approach a problem, not can you write bubble sort from memory * if you have any experience, what, even if it isn't with .net. again I'm looking for your ability to problem solve and fundamentals (like inheritance for example), not just spit out code. In my opinion, it's easier to teach someone the in and out of a language, but doesn't matter if you can't learn some of the more complex features because you don't understand fundamentals or can't see how it might be useful. 
The API is finally stable. Now we're just fine-tuning the build process and getting things ready for adding PostgreSQL and MySQL support. 
This is great advice, if you want to show of your code and not email the zip of the solution, put it on github, or bitbucket. This way you can add all of your history, which shows how you develop an application over time. That is important as well
I have been considering doing this. Was thinking using t4 templates and some custom code to generate dapper, but haven't gotten that far yet. Let me know if you do something automated like this to start
It's free. 
You're getting groups because of the max number of concurrent requests. Notice that all of the requests in your results spend 10 seconds waiting, i.e. approximately 10 seconds to process on the server, and some number of seconds "stalled" i.e. waiting to be sent. So I don't see why you think your Thread.Sleep is being skipped. Make sure no other requests are being sent before initiating your ajax requests. You'll see that the first six finish together and then the next 4 start as the previous complete. Next, try actually adding session state modification to your test action, something like Session["thing"] = "ok"; You'll see very different results - requests will take way more than 10 seconds on the server due to session state blocking. Then if you add the [SessionState(SessionStateBehavior.Readonly)] attribute the behavior will revert back to the original behavior. 
Thank you all for the replies. I plan on doing a bit of networking at the job fair, and plan on sending out resumes shortly after. I am pretty confident I'll be able to land a position by mid summer.
You enabled session state in web.config?
That's why I wrote Chain. 90% of the tedious SQL is just Insert/Update operations. For the other 10%, raw SQL is still probably going to be easier to write than the EF equivalent.
Use a global logger to find the slow queries. http://stackoverflow.com/questions/27196944/entity-framework-6-timing-queries
On my phone right now, so I can't start up Visual Studio... but come to think about it, I don't think I've written C in over 10 years. I've only created C++ projects.
Why do you believe the C language needs ming/ubuntu? People have been writing C apps for Windows since Windows was invented. Also what does this have to do with /r/dotnet?
So use a different compiler on windows.
You can have multiple versions of Visual Studio installed at the same time. On my home computer I currently have both 2013 and 2015 community editions installed. I suggest installing 2013 without uninstalling 2015 and trying it. It has a good likelihood of just working. At work I have 2008 - 2015 Update 2 installed and they all coexist just fine. You do tend to run out of space on your path at some point though. I think I only had that problem because I had SSMS 2005 - 2014 installed too but after removing some of the ssms versions things were good again. 
Keep in mind that you can not use C#6 in VS2013.
I'm sorry.
Whoever came up with this rdp system did not know what they were doing to be honest or more accurately sounds like a desktop developer making solution match his skillet instead of picking best solution. From description you just gave this screams Web app/site. By your requirements either asp.Net or mvc.Net. 
What is the problem that you are having with it? What does it do?
Yes he understood Clarion and back then it was not a Clarion.net or anything related to .net. Nor did he approve of anything microsoft related. He did not want to depend on windows and made the choice back 20 years ago.
Here are the requirements we have now. • Windows Server 2008, 2008R2, 2012 &amp; 2012R2 w/ latest Service Packs (32 or 64 bit)* † • We recommend a minimum 8GB RAM • 2.0 GHz or higher processor or 1.6 GHz or higher multicore processor • At least 10GB of hard drive space reserved for Application • It is recommended that there be some sort of redundancy in place for the hard disk where Application is stored (RAID 1, 5, 6, or 10). • 100/1000 MB NIC strongly recommended Workstations: • Windows 7 to Windows 10 with latest Service Packs (32 or 64 bit)* • 2GB RAM or higher recommended • 2 GHz Pentium 4 or higher processor or 1.6 GHz or higher multicore processor is recommended • 100/1000 MB NIC strongly recommended Updates are done via creating a zip file application Winzip and the user initiates the download the unpacking is set in the winzip application. No dev team, just me. I'm having to learn as I go. The nice thing is I have the clarion code which is like C# and I have the existing UI to base everything off of and the SQL database is already perfect. I'm not looking to recreate a new look. We'd like the users to still have the same experience but have an updated program. The main reason for moving to .net/winforms/wpf is it's hard to find Clarion Developers and we'd rather have a more modern application framework for expanding and growing for years to come. 
Web. Given that so many different businesses use it, deployments alone make that decision easy for me. In general, I think you have to have specific reasons to build something with WPF. Your clients will appreciate not being tied to windows. 
In general when learning WPF or Winforms I only have to learn Winforms or WPF and EF7, but with web, won't I need to learn Web App with ASP.NET Core RC1, MVC 6, EF7 &amp; AngularJS &amp; CSS &amp; other things, or something like that? Seems like the learning curve is tremendous for web.
The learning curve is large for web, you are right. However, the maintenance is much much 'easier' for web than it is for desktop applications, if you know what you are doing that is. On the flip side, browsers that use these web applications are updated frequently, so they may be stuck with using an older version for compatibility. If they use Internet Explorer, they may be fine as it actually can default to older versions according to the spec's provided by the website. Having to update a desktop application means they will have to go and install it. Depending on how many people are working there and at what pace, that may be a problem. If you go the web route, I would recommend learning: linq2sql (easiest and best performing for the least code needed), Angular JS (which you can think of as a client-side MVC framework. - Will take some time to learn though, in which case maybe stick to simpler ASP.NET, the basics of CSS, as most can be used from the default bootstrap. Now if you are managing a simple application, there is another option in the microsoft stack, called 'Lightswitch'. The learning curve is much lower if you follow the tutorials. In fact, the harder part is probably just getting it onto the server to run it. I have had success with this for a smaller office, but for a larger one I had experimented with Angular JS, which has a high learning curve but does wonders after you learn it (or when MS eventually supports it in visual studio). As you probably realize, there are a lot of advantages to using Web, which is probably why Windows has gone that direction for their new apps. It can be cross-platform, updated on the server in one location with no unpacking procedures, and can last a lot longer than software that relies on outdated OS. *As a side note, I recommend using a Web API (currently recommend using ODATA v3, even though it breaks some software design principles in their examples of how to use it), but that is a whole 'nother topic. I would stick to LINQ2SQL in a backend controller (ASP.NET MVC project) to access the DB and send information to the app as it does AJAX calls. HOWEVER, this gets complicated for beginners. Stick to the basics as much as possible before you go down the rabbit hole.* Source: Am web application engineer and developer for a medium sized company.
Great suggestions. Pluralsight seems to have a lot of courses on this. Below are just a few. Not many with Linq2SQL. Would you still use EF7 with Linq2SQL? 1. Building a Web App with ASP.NET Core RC1, MVC 6, EF7 &amp; AngularJS 2. Building Web Apps &amp; Services with Entity Framework and Web API 3. ASP.NET Core 1.0 Fundamentals 4. OAuth2 and OpenID Connect Strategies for Angular and ASP.NET 5. ASP.NET MVC 5 Fundamentals 6. Implementing an API in ASP.NET Web API 7. Getting Started with ASP.NET MVC, ServiceStack and Bootstrap 8. HTML5 Line of Business Apps with Bootstrap, MVC4 and Web API 
And regardless of what anyone else here will say about that approach, the fact that the app is still being used today 20 years later means that it has been a screaming success. How many other approaches would have worked over the last 20 years without having required significant changes and rewrites to keep current with changes in browsers, HTML, etc? Hint: Not many. Anyway, yes this is a natural candidate for a web application, but if you are not yet semi-fluent with web apps, you could find this to be a rather stressful experience if you're under a deadline. But it could be the perfect place to start for you as well in building your own resume. You'll have to weigh the risks against the rewards and live with the outcomes either way, so good luck!
You're correct vplatt. I'd like to think it's going to help me build my resume even more. I've written a lot in C# but most have been interfaces and backend code. I'd have to learn WPF, Winforms, or Web App, so I wanted to make sure which ever I choose helped the company and myself. I have at least 2 years to get this first application complete, and I'm making sure the correct place to start. I don't see many CURRENT LOB examples of Winforms or WPF, but it seems lots of web samples. The problem with Web is its so many different examples to look at (lots of parts).
MS has always done a great job with making sure multiple versions don't break anything. I've used VS since the pre -.NET times and never had issues. 
Right now I am using CLion and Code Blocks with Clang to compile with Clang. I will keep this in mind. 
True, but condolences are still in order. 
Both of these questions really seem to speak to dependency injection and service location. In general I think you will find that this path has been heavily trodden in blog posts but most will for the most part be outdated - but if you go back to 2009 you should find plenty of content. If you would rather have a book I'd recommend reading https://www.manning.com/books/dependency-injection-in-dot-net as it is specifically geared for .Net. I personally think that you will also want to study at least one or two IoC containers in the OSS space, I would suggest StructureMap, AutoFac or Castle.Windsor - there is a lot of content out there that is free if you go and read the authors of those OSS projects. Specifically, to the IDateTime, while I personally think the name is bad (I tend to go with IClock) I agree with the intent. DateTime.Now is a static method and is very hard to mock which means doing date/time oriented tests can be very brittle. It is far easier to control the interface and then test things like this using tools like Rhino.Mocks and NSubstitute. So, back to the title of the post, how do you get to the next level of programming? I personally think that you will need to read a few books, the one above is a good one to start with. Additionally, I feel strongly that going to local code camps (if possible) will connect you with others and by having a shared experience of code you will find that you can uncover and learn a great many things with much less effort. As far as conferences I'd highly recommend the DotNet Fringe conference if that is with in your means.
There are tons of WPF apps out there, but they are all mostly internal apps so you don't see much about them. There is nothing wrong with sticking with WPF and your company likely does not mind as they already don't mind the costs of carrying the current system. If you do go web the first trick is to pick your stack, then when building you need to look for solutions around that stack. One of the things people often consider when picking parts of the stack is how often that tool is used in that way so there is more support out there for them. Finally how far you get into some parts of web is also up-to-you. There are many pre-made libraries and controls that minimize your need to work with the nuts ad bolts of things like javascript however you will need to accept a lot of default look and behavior if you don't want to change things much. 
I doubt it's because of Express having been installed previously but it's possible. I'd go through add/remove programs and remove anything that looks like it's visual studio related and then try to reinstall. 
&gt; I'm using VB Do you have to?
Look into [Xwt](https://github.com/mono/xwt) or [Eto](https://github.com/picoe/Eto). Under the covers, they still use WPF, Gtk# or Cocoa depending on the platform you are on but they expose a single, unified API for ease of use. There is also [Perspex](https://github.com/Perspex/Perspex) but I don't know much about it to comment. I think the author is on Reddit (/u/grokys), so he might be able to give you more insight about it. 
Thank you for Xwt and Eto - they should have the clues that I need. I think Perspex is custom drawn (not native controls).
Alternatives I've come across: * [IronPython](http://ironpython.net/) * PowerShell * [CS-Script](http://www.csscript.net/) * [F# Interactive](https://msdn.microsoft.com/en-us/library/dd233175.aspx)
QtSharp is another option. https://github.com/ddobrev/QtSharp
Small example - This means I can edit and develop my Jekyll based site on my Windows box without jumping through hoops. On my Mac, setting up Jekyll took me about 10 min and I was ready to go. On Windows, it took me an hour of Googling, and nothing worked quite as it should - various gems failed, things broke, and it was such a pain that I went back to the Mac. And I can think of dozens of similar situations. You can't understand what a big deal it is if you haven't developed on a Linux/Mac box and then tried switching to Windows. There are so many tools that you just take for granted on *nix, and while Windows has alternatives, the cognitive overhead of learning keeps many people developing on Linux (or a Mac). Microsoft has recognized that developers need to be able to use best of breed tools, and also recognized that new devs using things like Angular, React, etc are defaulting to a Mac/Linux just to use the tooling. They want those people using Windows. Visual Studio remains hands down the best IDE (in my opinion), and having bash tools on Windows is hugely exciting for me. It's making me reconsider my next laptop - it was going to be the next MacBook, but now I find myself reading reviews of the X1 Carbon, and the Dell Infinity XPS. That's a powerful change.
And ScriptCS!
&gt; from reading books, watching tutorials, etc You get to the next level by practicing. If all you've done is read then you are at `null` level
If a little syntax gets in the way of your choosing a programming language appropriate to the needs of its community, then I really wonder why you bother being so picky about using a language that fetish'izes using brackets. 
... VB. &gt;"A **little** syntax". 
Checkout https://github.com/Perspex/Perspex
I had the same problem while ago, ended up with this: decorate your controller with: [SessionState(System.Web.SessionState.SessionStateBehavior.ReadOnly)] if you need to write to session, then decorate an action with [SessionState(System.Web.SessionState.SessionStateBehavior.Required)]
Precompiling is a good idea though, otherwise the first hit is horrendously slow. Also if you have your application pools set up to recycle, doesn't that mean the first hit after each recycle will be slow? I'm not 100% on that though
Good. Thanks :-) And for how long have you been programming?
What don't you get? It's the next major version of VS, just as 2015, 2013... and so on.
The final one will have a new .NET version, most likely, and at least a new compiler version.
Just like VS2013 (which I skipped). At least I have a MSDN subscription now.
Is anyone familiar with Eto? Just in case I'm misunderstanding how it works. It says that it is modelled on WPF but the base controls don't have padding, margin, alignment, etc.
Based on the .Net rocks I gather it enforces a responsive design, and implements its own 'layouts', but I haven't actually used it.
So really it is mostly just showing off the newer versions installation processs.. I guess I shouldn't be expecting them to re-write it as a UWP app or anything crazy
The wait is painful at this stage; I really want RC2 to be released so I can start pushing the god awful coldfusion app I am working on to be converted to cross-platform .NET
It does have new features: https://www.visualstudio.com/news/vs15-preview-vs I think you might be getting sidetracked by the announcement for minimal installer (see the "Visual Studio '15' Preview with new installer" item in the above link). It lets you filter what gets installed to minimize footprint, which is something older VS installers did, so that in itself isn't a big deal, IMO.
How was your experience using Cordova and Ionic?
ok this is what I needed to see... Everything I saw just was talking about the installer.... There was something about 2 versions of the installer that I didn't understand though