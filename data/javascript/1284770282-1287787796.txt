Completely useless for almost everyone, yet completely awesome. Love it. 
But JS is already OO and has inheritance and polymorphism, just odd flavors of them. (I'm actually not familiar with inversion though)
[Project site for Zaphod](https://mozillalabs.com/zaphod/) In a project [blog entry](https://mozillalabs.com/zaphod/2010/09/18/28/) (dated tomorrow!), it explains much better what the tool is really useful for. This is primarily a language research tool for javascript similar to Python's pypy. It greatly simplifies the ability to experiment with new language features.
 Firefox 3.6.8 : 17fps Chrome 6.0.472.59: 12fps Chrome 6.0.472.62: 15fps Dell Studio XPS 1645 Laptop Windows 7 Ultimate 64-bit Intel Core i7 Q820 1.73Ghz 8GB Memory ATI Mobility Radeon HD 4670 1920 x 1080 x 32-bit Samsung PM800 256GB SSD Didn't bother to test other browsers.
I tried Minefield once, and then a nightly build (I wanted to compare with IE9 platform preview) But to be fair, that was quite a while ago.
Also check out http://html5.cynergysystems.com
Of course they are a useful organization. But we can recognize that fact without being childishly dogmatic about using only open source software.
[It's definitely possible.](http://pastie.org/1166089) Edit: [Updated for feature detection.](http://pastie.org/1166711)
That was incredibly helpful, thank you.
There are a few things wrong * no variables are declared, and therefore, everything is a global * Your function is being created on each iteration of the loop, but no new closure is being created. When the onclick is called, the 'i' will be the last value. This is what you want: var ii; for (ii = 0; ii &lt; 4; ii++) { btn.onclick = (function (n) { return function () { foo(n); } }(ii)); }
Thank you! My lack of understanding on how closures worked is what got me here. I've read up and understand it much better now. Thanks again. 
IE9 -142fps Chrome - 15fps
I wrote this article a while back.. come to think of it I should probably expand the article a bit, but this should help (hopefully!): http://davidbcalhoun.com/2009/pitfalls-of-declaring-variables-in-javascript
No problem, man.
Nice document, good guide to declaring variables. My problem was with closesures it turns out. However, declaring 'i' should have been done as it does not need to be global in any way.
Yo dawg?
If you don't want the FF installer - and just the zip: http://ftp.mozilla.org/pub/mozilla.org/firefox/nightly/latest-trunk/
BIOS: Not overclocked. Rating: 4.2(WEI) AMD Athlon 64 x2 dual core 4600+ at 2.4GHz RAM: 3GB Windows 32bit Windows 7 professional - fully patched, with DirectDraw2D hotfix. . . Resolution: 3840 x 1440 at 85 Hz, 32 bit (2 monitor) GFX card: NVidia GeForce 6800 GT RAM: 256MB Core: 370Mhz AGP: 8x Memory: 1GHz (2GHz data rate) Driver version: 257.21 Windows performance: Set to high performance. (not quality) Dunno what BIOS I have... . . I'm glad FF Beta 6 fixed the DirectDraw bug - hardware acceleration stopped working for me when I tried that one. **Results** --- Firefox 3.6.10 full screen "slow" test (1920x1440): 6 FPS Firefox 3.6.10 full screen "fast" test (1920x1440): 9 FPS --- Chrome 6.0.472.62 full screen "slow" test (1920x1440): 6 FPS [flickers when screen is resized!] Chrome 6.0.472.62 full screen "fast" test (1920x1440): 10 FPS [flickers when screen is resized!] --- Firefox 4 beta 6 full screen "slow" test (1920x1440): 55 FPS Firefox 4 beta 6 full screen "fast" test (1920x1440): 250 FPS --- Internet Explorer 9.0.7930.16406 full screen "slow" test (1920x1440): 83 FPS Internet Explorer 9.0.7930.16406 full screen "fast" test (1920x1440): 333/500 FPS (flips between both) 
FF 4 beta 6 has HWX on by default!
I'd suggest _JavaScript: The Good Parts_ if you want to improve your understanding of the language's idiosyncrasies. Just keep in mind that undeclared variables default to global scope and there is no "block scope" (as in, say, C++ or Java) so you often have to work with anonymous functions if you want to trap a value (e.g. in a loop). The funny thing about function scope is, too, that variables you declare within the function will always behave as if you declared them at the start of the function, which is why you should always move your declarations there, even for loop variables (i.e. if you use two `for`-loops, each with the index variable `i`, you'll re-use the same variable in the second loop, even if you attempt to re-declare the variable). JavaScript is full of little surprises like this. For example the for-each loop will not behave as in most other languages either, and don't get me started on prototypical inheritance -- few people get that right.
It'd probably be safer to check for the capabilities you want to use rather than relying on browser detection. Other than that, it's a good example.
You should try the pre-beta 7 nightlies too. [Bug 593268](https://bugzilla.mozilla.org/show_bug.cgi?id=593268) causes a significant hit to performance with beta 5/6. With that patch in, I see IE9 and Firefox both showing 111/125 fps on the "slow" page and 333/500 fps on the "fast" page on my laptop. (edit for clarity)
&gt; Minor quibble: Well, it will only error if you supply an invalid or unsupported selectors. It will still return an array for other supported selectors.
&gt; Wish he had covered Sizzle specifically in the analysis, or is it fair to assume that all the complaints concerning jQuery also apply to Sizzle? When the author mentions jQuery you can equiv it to Sizzle as jQuery runs off Sizzle.
I think his statement comes close to covering your opinion to use jQuery even if it's buggy when he writes: &gt; or has read and understood the problems but has not appreciated the consequences deeply I am well aware of these issues and can avoid them so I can appreciate jQuery for the good things it provides. That said if you lower your fanboy shields a bit you will find this article is full of a lot of really good information that you won't find in many places.
Doesn't jQuery add extensions on top of sizzle?
I find his tone refreshingly honest. His expectations aren't unrealistic as several other css selector engines exist, as mentioned by 9jack9, that actually do put forth a greater effort toward cross-browser consistency and css3 compliance.
Sure jQuery adds some custom selectors but the issues the author covers are with valid css2 and css3 selectors and not custom/3rd party ones.
Kindle: 0fps. ;) http://imgur.com/d0Avl.gif Actually, it sometimes got 2fps.
Recently updated to include sweet menu.
I like the idea. If you can't leave them, starting fighting them.
I wish I could hate that website to death.
This site is everything I hate about current trends in web design...
&gt; The use of any one of these libraries is a substantially irresponsible and uninformed decision that puts quality and long-term success of his project at risk. This is pure FUD intended to undermine several notable JavaScript libraries. It's OK to be "refreshingly honest" but it's not OK to cast aspersions like this. This attitude is prevalent in comp.lang.javascript in which the author is quite active.
Doesn't leave much wiggle room does he ;)
I don't know of any books, but the Mozilla canvas tutorial is pretty good: https://developer.mozilla.org/en/Canvas_tutorial
I sort of did the same thing about a year ago and started with Mark Pilgrim's Dive Into HTML5: http://diveintohtml5.org/canvas.html
It's open source, it could probably easily be improved 1. add some little self replicating mechanism 2. remove the "unlike all" button 3. ? 4. Happiness and everybody "likes" everything all around.
Well the canvas has just a simple (2d) graphics api. You can draw basic shapes like rectangles and circles and build a path with move to, line to, arc to, and curve to operations. You have the same operations in SVG, for example. So knowing that all you need is a short introduction into the javascript language (not DOM, mind you) and you are set to go. Javascript knows functions, variables, assignment, selection and iteration. Oh and you can construct objects, kind of. There really isn't anything to it, just get started on some nice project. As others have mentioned, the Mozilla canvas tutorial and the dive into html 5 are good starting points. I believe Opera has something similar. PS I asked a similar question some months ago and the answer was then that there really isn't a book. As far as I know not much has changed. At the same time getting started was not that difficult. The first projects were somewhat inefficient but going through you'll get more experience.
Haha, that would be awesome.
I like the part where I have to scroll for the main content
Searching on Amazon I found Pro HTML5 Programming: Powerful APIs for Richer Internet Application Development. Came out 8/31/2010 so it seems like it's probably on top of things. Worth a look?
Well, *your* tests probably superfluous. Or may be you havenâ€™t read the article. Everything that could be converted to number without becoming NaN or Infinity is numeric. I use is() function every time I need to check the type of a variable.
do you know any programming language, or do you just don't know javascript? in the second case, i'm pretty sure you'll be better off with online tutorials, an open editor and gchrome (it's javascript inspector beats firebug imho). in the first case, ditto.
Not trying to be that guy, but what makes this better than jQuery?
[There's a comparison page](http://rightjs.org/comparison)
it is smaller, faster and fully object-oriented
its not object oriented to the user though? Is the OO all behind the scenes?
commenting for bookmark
Interesting, but the notion of "call by name" smells too much like `eval` for my taste (I know it's probably not implemented that way, but still). Good luck with that, I say. Having more frameworks is always a good thing.
same
So much trouble went into the programming of it, they forgot that **hundres** of commits are written quite differently.
There's a save button right under the post title :)
You are so that guy...
That's great! My biggest issue with jQuery is that projects end up to be a procedural mess. 
Has there been great attention made to keeping the global namespace as clean as possible? I see lots of globals...
Good call :-)
Thanks for all the tips everyone. I don't know Javascript and it's been a long time since I've done any programming. I've been looking to learn it and it seems like it would be fun to do it while messing around with the canvas. Thank you all for your input and links provided.
I've used Prototyped, Mootools, and jQuery. I'm not against new libraries, but I am against libraries claiming their way is better. Let's walk through some of the points they make &gt;The main difference is that jQuery is more oriented towards procedural and functional approaches. RightJS on the other hand provides basic functional and procedural programming features too, but itâ€™s more object-oriented and designed to be familiar to server-side developers who work with dynamic languages like Ruby and Python. This is simply a matter of preference and certainly not an advantage/disadvantage &gt;Another major difference is that jQuery isolates all its processes inside of an own scope whereas RightJS extends the JavaScript unit prototypes and thus provides instant and more semantic access to most of its features. This is a common argument point of whether it is appropriate to extend native types. I personally am on the side of avoiding it, but it doesn't mean I don't see the clear cut benefit of it. &gt;+ Extensive object-oriented abilities This is a coding style preference &gt;+ Immediately available native class extensions This is argued amongst the community whether you should be doing it &gt;+ Additional handy features like â€˜call-by-nameâ€™ Ok this is nice for cleaning up code, but it isn't a make or break for choosing a framework for me &gt;+ Shared modules Observer and Options From quickly looking it over they both appear to be pretty nice, but once again nothing that makes this superior. The Options appears to be a more OOP way of doing what is already done in jQuery of passing an options object. &gt;+ More readable and cleaner syntax It does have some nicer, cleaner syntax. This is a major benefit of extending the native types, but this once again gets into whether you even should do that. &gt;+ Much better performance A definite reason to switch if they can keep up the performance in lieu of other libraries. At the same time, browsers are getting faster at executing JavaScript and machines are becoming more powerful to help execut it. If you're writing really complex JavaScript and need to get that extra performance PureDom is better than them all when you look at the benchmarks on rightjs.org. However, the benchmarks on rightjs seem to lack a lot of the functionality found within libraries, which could make the results rather deceptive. &gt;+ Much more compact and modular UI library A modular design is good as long as there are prepackaged UI elements made up of the modular elements &gt;+ Cleaner and better organization of internal code At the end of the day the developers using it should hopefully never need to be concerned about this aspect. &gt;- No safe-mode (at least not yet) This is pretty trivial and shouldn't stop someone from choosing a library.
well you would obviously deny on the server any form without a captcha filled out
I think the question the OP is trying to ask is if it's possible to handle the entire captcha process using javascript. By handling it on the server side (which is the standard operation), this, at least in my opinion, completely ignores what is question actually is. I assume he is familiar with Javascript but perhaps unfamiliar with any server side language.
This might have been interesting, but I didn't get past [this](http://i52.tinypic.com/atoebl.png). For a tool for building web interfaces, this doesn't bode well. Sorry to pick on you guys, since this is all to common on the web, but this is particularly irksome. 
If you're just converting any old thing into a numeric value, why bother with the overhead of a regex and not just use isNaN then? I use the isNumeric I mentioned above because it's accurate, and doesn't convert just see any random thing as a number. I did read the article. And the is() function seem very useful to me is all.
http://rightjs.org/tutorials/safe-mode
it is not eval. it is reflection of a Rails' idiom of proc.to_sym it is used quite a lot in ruby and many folks including me are got used to it
Thanks for spending your time writing this, but the page is a bit outdated, RigthJS 2 already has safe-mode and dom-wrappers. there are no dom-extentions anymore, as for JavaScript core extensions they are optional, as well as the global functions. And as for the other points, well you have your opinion, I have mine. I'm a server-side developer, I think OOP is a much better way of dealing with code and RightJS is a mere attempt to have a lib that will fit my habits. About the performance, I agreed with the point that you always can fallback to pure dom, but then why would you need a framework? The truth is that majority apps use framework's standard API and majority of programmers are not ready to drop down to pure dom and deal with all the cross-browsing trickery. Either way having a good speed out of box is a good thing. I'm not saying that if framework A does something 6 times faster than framework B, then A is 6 times better than B, but I think denying the advantage and positive impact on UX is a bit ignorant. 
No, unfortunately it's badly written CSS. A lot of CSS uses fixed sizes and positions for div's so when someone has their font size set differently than the developer, the content gets clipped or it overlaps other content. This shows poor testing and I see it constantly. 
well, they don't with RightJS 8)
RightJS is a multi-paradigm library, internally it's mostly OO, but as a user you can have as much OO as you like. You can write everything jQuery style if you want, we even have the jquerysh plugin for that 8)
To find out what SproutCore is: 1. From the blog post click the "Home" navigation link. 2. From there, click "What is SproutCore?". 3. On that page, scroll about a page down to the "Until Now" section. 4. Read the first couple sentences of that section: &gt; SproutCore works by doing the only thing that can truly eliminate the latency problem: it moves your business logic to the client. SproutCore applications are full-fledged programs, written in JavaScript. They should come up with a pithy, 1-sentence description and put it in their blog template.
Well, I'm a beginner and I see a lot of things that I think will be helpful to me. Thanks for all your work and for sharing! I will update if I get some time to try it out this morning.
Sigh. I dream of a web where one day developers will learn to use flow layout properly, instead of boneheadedly trying to force HTML/CSS to conform to their ass-backwards, legacy WYSIWYG/Photoshop-lead expectations of how pages should be designed and laid out. I don't know how many times it needs to be said, but [the web is not a sheet of paper](http://philosophtly.blogspot.com/2008/12/web-is-not-sheet-of-paper.html). It's an entirely new medium with different strengths and weaknesses, and things like absolute positioning the entire layout, or assuming things about your audience's browser/client, screen/viewport-size or capabilities or method(s) of interacting with your content are simply *bad web design*.
On my Motorola Droid (Android 2.1), I get precisely 1 fps @ 1200 MHz (overclocked). At the default 550 MHz, it runs at about 0.5 fps, so that seems fairly consistent.
That's actually pretty amazing. Can you watch (HTML5) videos?
Everybody I work with does this and it drives me nuts. To me, it is one of the simple things that helps define the difference between people who understand JS/jQuery and people who copy and paste example code and can make it work.
Everybody I work with does this and it drives me nuts. To me, it is one of the simple things that helps define the difference between people who understand JS/jQuery and people who copy and paste example code and can make it work.
I always use return false but deep down inside felt wrong about it, didn't realize there was a better way!
return false is such a guilty pleasure than having to write any of the prevent or propagation methods. I remember once in the YayQuery podcast some of the (pretty experienced) dev's admitted to using return false at times just because its easier to type that than any of the other three.
Doesn't seem like it; it appears to be missing the drivers. :-( I was attempting: http://www.kaltura.org/apis/html5lib/kplayer-examples/Player_Fallback.html
I'm not sure how core extensions work in RightJS, but I remember Prototype ran into this http://ejohn.org/blog/getelementsbyclassname-pre-prototype-16/ problem. In a corporate environment this could be problematic upgrading/scouring through code and making these changes without proper QA/Regression testing. However, I really like your design choice of basically wrapping the safe-mode into core extensions for those who want them for convenience and cleaner code. I was a server-side developer and am switching to a new job as a front-end developer. I can appreciate both an OOP approach and more of a functional/procedural approach. I've just seen cases of where I think people go what I feel is overboard with making JavaScript OO and feel a lot of what the language is used for doesn't really require that approach. I personally like a thin layer of OOP, especially as to keep it simpler for developers who aren't as skilled at JavaScript, since documentation of advanced OOP practices are generally above their heads and not as common.
The introductory section claims "I don't know if there is a standard name for this specific behavior, but I've come to like the term 'hoisting'." I don't believe the associated code is an example of hoisting, whereas the following would be (taken from *Closure: The Definitive Guide*): function hereOrThere() { return 'here'; } alert(hereOrThere()); // alerts 'there' function hereOrThere() { return 'there'; } 
We've been working on some heavy-duty javascript projects for some of our recent clients, and docs are fairly weak on writing your own custom jQuery UI widgets, so I wrote this up. 
I'd like to know too..
You could add a click event that logs the container of the link (class=" thing **id-t3_dgux2** even even link") and then when they come back to the page you can make it scroll to that element. I'm not sure how reliable this would be, just a thought.
I'm already doing something like that, and it scrolls there, but then the browser overrides that and scrolls even further, to where the browser "remembers" it last was on that page.. that's what I'm trying to prevent.
Maybe try to make sure that your scroll happens after the browser's scroll?
A decent thought.. guess I'd have to detect the browser's and scroll back up... it'd make for an even weirder / hackier experience so I'm hesitant to let this be the final solution, but I may have no choice..
There's no way in Jquery to scroll so that an element "x" is visible, regardless of current position? I was pretty sure there was. You should be able to: 1. Wait for browser to scroll or not 2. Scroll to desired element This way it's browser behavior agnostic. 
Do you do an onload event or ondomready event to check the scroll? If it's onload, you could try to delay the scroll by a little bit.
Cool, looks interesting. I'm gonna dig in and try using it for some of my personal experiments. The idea of separating out support for older browsers into another module and only including it when necessary is something I have been toying with. The only suggestion I have now is you make it easier to get to the source from the main page. After reading the about section etc, that's like the main thing I wanna see.
Yeah, it's a userscript, so it can only run on document ready... I guess it sounds like my only option is to let the browser do its thing, and then undo it myself...
Javascript isn't causing the scroll here, so there is no easy way to disable it via JS. The scroll information is stored in the browser session, and the only way to disable it that I know of is to pass the Cache-Control: no-store http header (which tells the browser not to cache the HTML page). I don't think you'd have access to this since you're simply modifying Reddit's client-side code. The only way I can think to do this is to set the scroll position to the top of the page on document.unload so that when you return it will be at the top of the page. The user may be able to see this, but if you covered the page in a full screen white div first it'll simply appear to them that the link they clicked is loading. Then via JS scroll back down to where you were before you left. Good Luck, and thanks for all your amazing work on RES.
Thanks for the informative reply, really appreciate it. I knew javascript wasn't causing it, but I thought there might be some way to prevent it (if it triggered a javascript event, for example)... alas that doesn't seem to be the case... Crafty idea on the document.unload... I'll give it a shot, thanks! Glad you enjoy RES, by the way. :-)
No, there will be no such issue, in RightJS there is a difference between the JavaScript core units and DOM classes. We don't touch the DOM units anymore, there are just a few of JavaScript core extensions like Array, String, etc. but they are optional as well. As for OOP, you don't have to use it at all, RightJS is multi-paradigm framework, you can write all your code in procedural approach and deal with simple things in simple ways. But if you know your magic you can easily bring up heavy artillery and can start writing OOP, inherit DOM units (we allow that easily) and so one.
The examples at the site are definitely cases of hoisting, they're just not overwriting as your example interestingly shows. The examples can probably be simplified: // Example 1 // variable declaration hoisting alert(a); // undefined var a = 1; // how the above code is read by the JS engine: var a; alert(a); a = 1; // Example 2 // function hoisting b(); // 'hello' function b() { alert('hello'); } // how the above code is read by the JS engine: function b() { alert('hello'); } b(); // Example 3 (modified from bolinfest's code) // function hoisting/overwriting function c() { alert('first'); } c(); function c() { alert('second'); } // how the above code is read by the JS engine: function c() { alert('second'); } c();
The [jQuery Developer Guide](http://jqueryui.com/docs/Developer_Guide) mentions \_create -- instead of \_init -- as the initializing method. Are they the same or did jQuery's widgeting system change? Also, in your blog post, you wrote: &gt;Widgets strings all start with `ui.` in their names. Donâ€™t be fooled into thinking this is a namespace. Itâ€™s not. Youâ€™re required to use `ui.` there. Iâ€™m not sure of the design decision behind this, but you need to watch out for it. However, Rebecca Murphy of [jQuery Fundamentals](http://jqfundamentals.com) [wrote](http://jqfundamentals.com/book/ch08s05.html) the following &gt; The ui namespace is reserved for official jQuery UI plugins. When building your own plugins, you should create your own namespace. This makes it clear where the plugin came from and whether it is part of a larger collection. Here's one of the examples: $.widget("nmk.progressbar", { _create: function() { var progress = this.options.value + "%"; this.element .addClass("progressbar") .text(progress); } }); Any thoughts?
&gt; JavaScript library for mobile devices [iPhone/Android are not all of mobile](http://www.flickr.com/photos/icrossing_uk/4342659861/) (remember to take into account the population of each country there)
**Init vs. Create** I haven't had the need to verify the difference between \_init() and \_create() myself, but the answer I received from IRC was that they have ever so slightly different semantics with regards to attaching a widget several times to an element. Both init() and create() get called when you attach the widget $("#thing").my_widget(); // Calls both _init and _create But when you call it again, only _init gets called. $("#anotherthing").widget(); // Both $("#anotherthing").widget(); // Only _init(); **For the namespaces** I investigated, and it appears that the namespaces do actually "work" for very limited definitions of work. This gist shows where things get put in the namespaces. Notice that the namespace gets lost when it comes to the outside world applying the widget. https://gist.github.com/77c51808d1890814b024 In this gist, the cb version of the widget gets run, since it was defined second. Sure enough, the namespace being lost causes a conflict. You can swap the two widget definitions, and see the UI version get run first. https://gist.github.com/7d151ee33cdfd659adf2
tl;dr: takesSomeFunction(function doDebug() {debugger;}); will drop into a function named "doDebug" in Firebug. Delete "doDebug" on prod if you're anal.
Watch out for JScrpt bugs with NFE â€” http://yura.thinkweb2.com/named-function-expressions/#jscript-bugs
To be fair, he did say "for mobile WebKit" in the title and made it very clear in the post that it was only for WebKit-based mobile browsers. &gt;Since zepto.js targets only Webkit browsers
I do like anal.
I opened Firebug to check out a case in my code where you get into some anonymous calls, just to see how annoying it is. Check it out out this stack: (?)() $() $() (?)() I F() We have 4 opaque jQuery frames and 2 anonymous functions. Yeah, this stack trace is definitely useless. But then again, Firebug knows the file name and line number. Why doesn't it show them next to the stack frame? I don't know. But you can hover over them and click on them to go to the source code. This has always been good enough for me. Firebug could be better, but this just isn't big enough an issue where I'm going to start using JavaScript preprocessors and implementing a project code standard where anonymous functions must be named with some prefix.
I agree, to gain just the function name in the stack trace in firebug seems like a small gain after you tailor your code and dev environment to use jsmake which doesn't look very straightforward to use.
In MooTools you can simply call `stop()`. Is that short enough? ;)
True, it's not hidden, I just want to raise awareness that WebKit mobile is a small subset of the mobile browser population.
The MooTools `stop()` is the equivalent of `return false` in jQuery. It both stops propagation and prevents the default behavior.
Ooo, I did not know that. Thanks.
If you break on all errors, you'll be shown the exact line the error is in anyway...
Hey!
Well written article, I enjoyed it, and it was not something I knew about.
from the bottom of the page: "* LikeBomb is under development and does not currently support AJAX-ified "Like" links. These links only account for a small portion of "Like"-able things anyways, so whatever. Suck it." This means it won't work on "Social PlugIn" like button. When someone does figure out how auto-like those "Ajax-ified" Like buttons that would really be something special.
&gt;this just isn't big enough an issue where I'm going to start using JavaScript &gt;preprocessors and implementing a project code standard where anonymous &gt;functions must be named with some prefix. The preprocessor name the anonymous functions for you.
Thanks for the detailed response. The jQuery UI source code does confirm your findings regarding the difference between \_init and \_create. As for the namespace, I'm not sure why it's designed that way. It seems to be designed to support widget developers instead of widget users.
Note that these changes have already been merged into jQuery master: [Github commit](http://github.com/jquery/jquery/commit/9dc6e0c572b9c809a3a4c123071d96d48a01dd1c).
While a function-that-returns-a-function will work, it isn't necessary, and I think the code is easier to understand without it. Here's a simpler approach: function foo() { for( var i = 0; i &lt; 4; ++i ) setClick( i + 1 ); } function setClick( n ) { var btn = document.getElementById( 'button_' + n ); btn.onclick = function() { bar( n ); }; } 
Awesome. Regexen make me dizzy.
These are good optimisations but do you really think that they will make much difference? Because of its functional nature, jQuery is never going to be that fast anyway. EDIT: I just did some benchmarking and these optimisations have no measurable effect on the performance of jQuery. Most of jQuery's execution time is occupied with building the jQuery object and looping through its nodes. The parse time for a selector is effectively zero for any jQuery operation. That said, it was still interesting to read about how to build efficient RegExps. :)
The edit makes all the difference in your post :)
I had to answer my own question. ;)
I agree, real namespaces would be a huge benefit. It's now on my todo list for a patch to send them. I figure the syntax could be either: $("#thing").cbHello(); or $("#thing").cb.hello(); or $("#thing").cb_hello(); I sorta like the second one, with the .ui namespace hoisted up like it is now. So in my conflict gist, it'd look like: $("#thing").hello(); // ui.hello $("#thing").cb.hello() // cb.hello I dislike changing case in #1, as a user I don't want to type "cb.hello" and have it transform into cbHello. And the third one doesn't fit the snakecase jquery naming scheme.
I like: $("#thing").cb.hello() For backward compatibility, the current behavior should be preserved (i.e. whatever that was defined last becomes the default behavior). They should be able to co-exist. Users can specify the fully qualified name to avoid naming conflict.
I've seen pages take a long time to load due to time sitting in some of the jQuery regexps -- i vaguely recall the regexp used to distinguish xml from text xhr results being at fault. So some of these regexps can take time, but they have to be thrown at huge inputs (which can happen on occasion)
exactly right. why everyone is in such a rush to use closures everywhere possible is beyond me. use them where appropriate, do not use them for everything under the sun. There is a point where you start to dig yourself into a hole if you use too many of the 'best practices' all the time. There is a use for everything and adding a closure here really isn't necessary. 
Would you mind sharing some details (general or specific) of the benchmarking? Without some idea of that, it's sort of pointless to say "I checked and it's no faster". Also, it'd just be interesting to see the figures. Don't get me wrong: I don't doubt that these result in little appreciable difference for most users. There's probably only a tiny handful of cases that will see any benefit.
I just found a bug in Firefox Infinity &gt; 99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 // true Infinity &gt; 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 // false
It seems anything greater than that is considered equal to infinity: Infinity == 999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999 // true Infinity &gt; Infinity // false Also, it happens in Chrome too. In ECMAScript 5 edition it states: &gt; Infinity is 10 ^ 10000 (a value so large that it will round to +âˆž). So that probably has something to do with it.
TIL Infinity is Read-Only.
[IEEE-754](http://en.wikipedia.org/wiki/IEEE_754-2008) is "the most widely-used standard for floating-point computation" (it's certainly what JS uses). It mandates the following values for Infinity on 32 bit architectures: +Infinity : 0x7f800000 : 0111 1111 1000 0000 0000 0000 0000 0000 -Infinity : 0xff800000 : 1111 1111 1000 0000 0000 0000 0000 0000 And these on 64 bit architectures +Infinity : 0x7ff0000000000000 : 0111 1111 1111 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 -Infinity : 0xfff0000000000000 : 1111 1111 1111 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 So it's not only the case that Javascript has an `Infinity` value. Rather, that the vast majority of software and hardware systems have standardised on a format for representing numbers that has `Infinity` built in from the start. 
Need to know what the fPageMove function does. The function doesn't exist in the snippets you've posted.
Something happens in `fPageMove`, but it's is not there. Set a beakpoint on the call to it using firebug and step over it until you find what you are looking for. Have you looked in `/cgi-bin/html/en/script/prototype.js`? You can also peek at the connections made to the server using firebug in the net-panel.
I think PageMove is defined here http://pastebin.com/7zB3t6xB [Here is the contents of /cgi-bin/html/en/script/prototype.js?](http://pastebin.com/sH5bdx2t)
I think PageMove is defined here http://pastebin.com/7zB3t6xB
Or maybe you found the true value of infinity, just start partitioning until you find the exact value!!
The script sends a POST-request to `/cgi-bin/top.cgi` (it may or may not work if you send a GET-request instead) with the parameters: `gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=154462930c8a697c8b46ba34a0e6b31c&amp;gRRR=756077239300488814` The gSSS and gRRR were already in the form to be sent - they may (and should) be changing between requests functioning as CSRF-prevention. This means you may have to scrape the values from the webpage each time you want to shutdown. (This can easily be done using a simple script.)
Interesting. The main reason I'm trying to work this out, is I want to be able to run a script from within XBMC to shutdown the NAS drive when I'm done with it. I feel I still have some way to go before I manage to get this sorted!
There would be a joke here if I were an intelligent person.
I'll use WireShark... Purely Linux.
I can help you. I assume you need a shellscript?: #!/bin/sh #v0.4 host="LINKSTATION_IP_OR_HOST" echo "Fetching magic page.." scrape=$(curl -- "http://$host/PATH_SHUTDOWN_PAGE" | grep 'id="gPage"' || (echo "Could not get hold of magic variables. Router down allready?" &gt;&amp;2 ; exit 1 ) ) gSSS=$(sed 's/.*name="gSSS" value="\([0-9a-f]\+\)".*/\1/') gRRR=$(sed 's/.*name="gRRR" value="\([0-9]\+\)".*/\1/') echo "Got: gSSS=$gSSS and gRRR=$gRRR" echo -n "Sending shutdown command.." curl -d "gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=$gSSS&amp;gRRR=$gRRR" -- "http://$host/cgi-bin/top.cgi" || ( echo " Failed!" | exit 2 ) echo " Done." This should work, but I have no way to test it.. EDIT: fixed it a little (nottice the versioning)
Thanks, the drive is currently busy for the next few hours (scraping) so I'll have to try this later. I take it I need to manually add the Linkstation IP, but does the PATH_SHUTDOWN_PAGE need adding too?
Yes, it needs that page to scrape the missing values from. Let me know how it works.. (it probably needs tweeking.) I'm also not sure if `Key` should be `undefined`.
OK, well I shall carry out some tests shortly and get back to you. Thanks for taking the time out to help me with this, really appreciate it! Once it's solved I'll be posting the method on buffalo tech forums and xbmc for others to make use of.
Firebug's "Net" panel would be a lot easier to use than reconstructing packet traces.
... (also available in Windows colors!). http://www.wireshark.org/download.html
Yes fPageMove just sets form values and submits a form, so sending the above as a post to top.cgi should do the trick. Your best bet is via curl as recommended below.
I knew about it already. I accidentally hit the value when I wrote a buggy recursive script. Ouch.
On Kubuntu: Chromium 6.0.472.53 runs pretty smoothly at 13 fps. Both Fx3.6.10 and Fx4b6 run at about 9 fps. Konqueror doesn't report the fps, but runs pretty choppily; it runs at about 15 fps but hiccups every half second or so. Epiphany locks up completely after two frames.
So if I want to wrap the shutdown code in a script (python or bash) for use within XBMC, not a browser, how can I scrape the valid values for the session? Thanks for helping me out with this, it would be super useful to get this functionality. It's a shame they had to go and complicate this procedure, as other Linkstation models are far easier to accommodate. I also think it's a shame there is no WoL either, but hey. Do you personally use a shutdown script yourself?
Thank you!
What about using bitwise | for bitwise add? 1+2+8+16 == 1|2|8|16 == 1|2|8|8|8|8|16 In other words: function bitwiseAdd(number, numberToAdd) { return number | numberToAdd; }
Something like (and this is fairly pseudo-code): if ('action=shutdown' in document.location.href) { button.click(); }
Every time you represent bitfields as integers, God kills a kitten. 0x00000000 0x00000001 0x00000002 0x00000004 0x00000008 0x00000010
Hex is hard for the brain to deal with. 10 == 16? I just chose the easiest thing to put in code.
I thought about that first but then second guessed myself and went with the way I knew. I will append the code with your suggestion.
I have a first version of the patch at my github fork. http://github.com/jquery-ui It uses the ugly syntax, since it was easiest. $("#thing").cb_hello(); It has tests, and seems to work as expected. The preferred syntax for $().cb.hello() doesn't work, since you lose the jquery object chaining when you go into the sub-hash there. Not sure if that can be fixed easily. 
1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 vs. 1 2 4 8 10 20 40 80 100 200 400 800 1000 2000 4000 8000 10000 20000 40000 80000 100000 200000 400000 800000 1000000 i'll take hex
Actually, the simplified version I posted *does* use a closure: the `onclick` handler function nested inside `setClick()` uses the variable `n` from the parent function. You just don't need to go through the function-that-returns-a-function rigmarole to get a closure here.
Ah, that's right. I don't think there's any elegant way to support that "." format. Maybe $("#thing").widget("cb.hello"); $("#thing").cb("hello"); $("#thing").cb().hello(); But yeah, the underscore format looks good too.
I believe this might be as simple as it gets without reducing functionality: http://ejohn.org/blog/simple-javascript-inheritance/
I don't see a way to call the super-class' method in an overriding method. Other than that it looks cool with easy mixin/MI support which might help out on our very-long-term project with tens of thousands of lines of javascript code.
It took me ten minutes in JavaScript to create something infinitely more useful and informative than your entire blog post: // Bitfield Object: Bitfield = function(code, spec){ this.bitfield_spec = spec; this.value = code; }; Bitfield.prototype.getBitPos = function(name){ for(var i=this.bitfield_spec.length;--i&gt;=0;){ if(this.bitfield_spec[i].name == name) { return this.bitfield_spec[i].bit; } } }; Bitfield.prototype.has = function(name){ return (this.value &amp; (1&lt;&lt;this.getBitPos(name))) != 0; }; Bitfield.prototype.set = function(name){ if(typeof name!= undefined) { return this.value = (this.value | (1&lt;&lt;this.getBitPos(name))); } else { return this.value; } }; // USAGE: var AD_UAC_SPEC = [ { "bit":0, "name":"SCRIPT", "description":"Logon script" }, { "bit":1, "name":"ACCOUNTDISABLE", "description":"Disabled" }, { "bit":3, "name":"HOMEDIR_REQUIRED", "description":"Homedir required" } /* ... */ ]; var myUAC_code = 0x02; var UAC_bitfield = new Bitfield(myUAC_code, AD_UAC_SPEC); if ( UAC_bitfield.has("ACCOUNTDISABLE") ) { UAC_bitfield.set("SCRIPT"); } UAC_bitfield.value;
For some more hot bit-on-bit field action: http://github.com/imbcmdth/Bitfield
Sounds cool, but a little too early for me to be fiddling with
I thought about #3 to maintain the chain. That's probably the direction I'll head in. #2 would conflict with a widget named 'cb' that has a hello method. It also would make the widget code more complex to disambiguate. #1 is ok I suppose, but I'm not a big fan. It would be complex again, since the widget() call would do different things based on the number of arguments. Options I have now: $("#foo").cb().hello(); // Probably where I'm headed $("#foo").cb_hello(); // What's there now $("#foo").cbHello(); // Snake case the widget name. Either way, I like the idea of extending namespaces into this area. Just seems right, and it's easy to maintain the backwards compatibility. 
If you're "solution" to inheritance in JS involves the words "class" or "klass" you're doing it wrong. JS isn't C# or Java or Ruby or Python, and it doesn't want to be. All it does is mislead newcomers. Please stop.
The easy way to do inheritance in JavaScript is **TO LEARN JAVASCRIPT** instead of trying to hammer JS into whatever your favorite language is.
:)
No excuse for not producing vaporware now.
Finally! And IDE that I *might* consider using (if they can get the speed bugs taken care of, that is)
&gt;Node first mentioned on The Dev Show Ahm... which episode? (And why isn't that episode linked to in first place?) Edit: Google says it's [episode 17](http://5by5.tv/devshow/17). Edit2: It's also mentioned briefly at the end of [episode 16](http://5by5.tv/devshow/16). \*shrug\*
Sounds similar to [Mozilla Labs Skywriter](http://github.com/mozilla/skywriter), I hope they collaborate on some of the pieces.
When I see an "IDE" I ask IIBTV (is it better than vim - specifically at the task it sets out to do). Other then visual studio for windows programming. I've found the IIBTV is always a resounding 'no'.
Staying with vim here... The thing that an IDE offers is integration, something that I feel is just not so easily done for Javascript. There are too many things you have to worry about, and js lint can only go so far. What it comes down to is the browsers you are running it on, and therefore, nothing beats running it in the browser. Despite the work on Rhino/Env.js/etc., nothing fully emulates a browser's DOM and JS implementation. Here's an example, I need to write a webapp, and I want to take advantage of some HTML5 features, but I can't exclude IE users... So I need gracefully degrade. How would this IDE help me with that?
I think this is a fantastic start. I would focus on performance and extensibility. I would say, first - if performance is affected, it doesn't have to look like a desktop IDE. It just needs to get the job done. Second, writing extensions in javascript should be much more attractive than, say, vimscript. take that by the horns.
Komodo can be extended (via extensions and macros) with JavaScript (and Python) for example.
Is this for real? I need to start checking it out.
It's so small too!
Damn. It's fast. Too fast to measure. What's really nice about vapor is that it plays nicely with various other libraries, too. jQuery, prototype, dojo, and various others are all supported. The code is *very* clean. I would normally expect to find a few obvious bugs in a newly released library such as this. But honestly, I've been poring through the code for the last hour or so and it looks spotless. It could maybe do with a few more comments, but that's a minor thing. The code is all fairly self-explanatory. 
Finally decided to take a look at this, and its really slow... Even in Chrome, on an i7 system. I looked at it a bit with the inspector, and the text area is actually broken down in to hundreds of elements. This seems to be an unscalable approach.... The Mozilla Bespin project also aims to be an editor int he cloud, but they soon learned that the only real way to get something that performs well was to use canvas. http://benzilla.galbraiths.org/2009/02/17/bespin-and-canvas/
What is the native JS way then? 1. Write a constructor function that does nothing. Because otherwise it's a bitch to use for prototypes. 1. Write an init function that you always call after calling the constructor. This is the real constructor. 1. Write a function that does for (var i in obj) this[i] = obj[i]; and use it to mix in JS objects into your prototype because writing MyFancyConstructor.prototype.someMethod = function(){...}; is a pain. 1. And apparently the step that you just can not take if you are a real JavaScript programmer: Wrap it all up in a convenience function. 
This framework is 15 years old, originally created by Brendan Eich in 1995, and is build into all browsers. -1
That was a waste of time.
Cross-browser compatibility!!
What I like most about it is its complete compatibility with the [Super Simple Storage Service, aka S4](http://www.supersimplestorageservice.com/). They seem made for each other.
Well actually this approach beats bespin in terms of speed and scalability. Chrome is slow in the current release due to a bug, not due to the architecture (we'll debug that coming week). In firefox this bug doesn't occur so you can see the proper speed there. It's especially fast in FF4. The code editor is actually fastest in Chrome. You can try the demo of the standalone code editor in common/ace/demo to see this. It scales by having a virtual viewport, so it only renders the visible area of the editor: http://www.slideshare.net/fjakobs/kick-ass-code-editing-and-end-to-end-javascript-debugging
Fabian Jakobs said in his presentation that you should compare Cloud9 to Eclipse as Google docs compares to Microsoft Word. Meaning it runs in the cloud with all advantages that the cloud brings. http://www.slideshare.net/fjakobs/kick-ass-code-editing-and-end-to-end-javascript-debugging
Where is the documentation?
Just tried Cloud9 IDE, def has potential, nice work! Will it index all the JavaScript code, so it will be possible to implement awesome code completion, follow function calls, and so on? I have used IntelliJ IDE a lot for Java Developement and I relly miss ctrl-space and ctrl-mousclick, ie autocomplete and follow.
Yep, thats the plan! First we'll focus on making it stable and perform well and then we'll add features like that.
While ACE is impressively fast, the notion that Bespin slows down on larger screens is bogus. Bespin does not paint the entire canvas on each redraw. It keeps track of invalid rectangles and redraws those (and even then not pixel-by-pixel... it uses canvas' drawText API)
Yeah, it's totally awesome.
One thumb down my friend. No offence but I don't have time for this. ARRR!!!! -Pirate
Good to know! We were mostly testing the scroll speed which we assumed to require a repaint of the full canvas. I think the work you guys have done on bespin is awesome. As someone said below, a collaboration between the two projects might be beneficial to all javascript developers.
you sound like the perfect canidate for [ViEmu](http://www.viemu.com/)
What to you are the killer features of vim?
I really like the use of whitespace in the code. Makes it much easier to read. We need to keep this in our back pocket for First of April. 
You are likely correct that the vast majority of the time is jQuery object creation and DOM access, but that doesn't mean we shouldn't add these in. The big advantage in most of these are the false cases. If you were to put XML in an attribute that one of these regexes hit, then you would absolutely want it to kick out once it realized it couldn't use the data. Moreover, some of the crappy browsers (IE!) have problems with regex speeds, and this will surely help.
Post this in r/web_design and watch the confusion begin.
&gt; `insert(elm).before(elm2)` Eww! Eww eww eww eww. I MUCH prefer Prototype's syntax. elm.insert({before:elm2}); You can also use after, top, and bottom, or just pass the element itself and have it default to a normal append.
It's fine to abstract away some of the details about inheritance, it's just not necessary (and actually pretty difficult) to try and make it like traditional class-based systems. Once you go down that rabbit hole people expect a `super` keyword too. Prototype actually does a decent job of building a class-based OO system. If people really want that they should just use, or at least mimick, Prototype. Just because JS's prototype inheritance is flexible enough to create a class-based system doesn't mean we should blub ourselves into *only* using class-based inheritance. Something like Crockford's `object()` function, or ES5's Object.create function, is usually all that's needed. 1. Not intuitive because of how class-based systems work, but not really a problem in practice (unless you work with people who don't actually know JS). 2. I haven't found a need for this yet. (I've only been writing a significant amount of JS for a couple of years, maybe I'm too green.) 3. I don't find it a pain. Completion ftw. 4. You misunderstood me. I'm only against the pseudo-classical inheritance systems. They rarely go far enough (like Prototype) and mask the underlying simplicity and beauty of prototypes. Once people know that they can write their own and understand why it might not behave 100% like traditional classical inheritance, or just use Prototype or something. I think it's *good* that the webOS guys use Prototype. I don't think it's good when everyone decides to write one just because they can. edit: Writing this out I'm having a bit of a change of heart. I guess it might not be that bad if a JS noob learned some classical style system while getting a handle on things. I still think it can be misleading but I guess not everyone likes being thrown in the deep end like me.
We fixed the chrome issue. Please pull to see it. It's now really fast in chrome. Especially when showinvisibles is turned off.
har har har.
It's nice they link to Firefox specific JS docs, but how about the rest of the world? IE users? Webkit (android/iphone/chrome/safari) users? How about the 3 of us that use Opera? There's docs out there. http://msdn.microsoft.com/en-us/library/ms533043(VS.85).aspx http://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/WebKitDOMRef/index.html http://www.opera.com/docs/specs/js/ Sure, they might all be similar, but you'll quickly notice the difference when building a JS-heavy web app. Couple this with the spec being littered with 'may' and 'should', and you end up having a wonderful day.
Yes, absolutely. Fabian and I had some good discussions, and I do hope that we find some good bits we can share and work on together!
I don't want "II AS GOOD AS VIM" or "it has similar key mapping support to classic VI", in which case I have netbeans (albeit netbeans needs a gui and takes up about 100 times more resources to do the same thing) ... no, I want "better than". The correct approach would be something like "Ok, so in vim, you could do x,y,z like this, like this, or like this. With our editor, it's much better and more versatile" not "with our editor you can also do x,y,z under the conditions a,b,c". this is what I see too often; and I'm not going to switch editors just to get the same feature set, but in a new and different way And as a more direct answer, I like that it's installed on every machine I ssh into - it's fast and versatile and can work equally well writing a 10 line shell script and working in a 250,000 line complex program. It doesn't insist on my code using it's own idea of a build system or makefile. In fact, it doesn't give a flying shit - but you can still do intellesense (omni-completion) and complex code navigation. I can open up the c++ file directly - I don't have to generate an ABOUT, TODO, COPYRIGHT, or project.pro or project.cmake or project.scons or project.dsp or project.dsw before I can acually use it. It has syntax highlighting and auto-indentation by default for more languages than I have ever heard of and it's fast. Starting it up is like starting up ls, or mv It's not cumbersome and doesn't assume that I don't know what I'm doing. It doesn't put a bunch of annoying interface layers between me and writing the code. It's customizable to the hell and back. If I don't like the way something works, then I sure as hell can change every damn thing about it. It's piecemeal like that too. I can add and remove things as I see fit. Don't like tabs? No real-estate will be used for them? Don't like file navigators or split view? None there either. The screen isn't populated with shit that you don't want. And, did I say that it was fast? 
Wanted: A JavaScript IDE that provides a REPL. Features of the REPL: 1. configurable key bindings (vim, emacs, etc). Not required, but a big bonus. 2. key bindings to submit a function or file to the browser for evaluation (to replace the existing implementation). All corner cases are handled correctly (F.E. firebug REPL fails to replace certain types of functions). 3. command history for the REPL. For an example of a super powerful REPL with the above features (vim only, and only for the JVM) see vimclojure. 
I always use "[mdc javascript](https://encrypted.google.com/search?hl=en&amp;source=hp&amp;biw=1305&amp;bih=789&amp;q=mdc+javascript)". The mdc keyword specifies the Mozilla documentation, pushes the relevant results above the spam sites.
What does jQuery's "functional nature" have to do with its 'maximum attainable speed'? I mean, is there another programming paradigm that you can use that has a higher 'maximum attainable speed'?
We are already in contact with them. Had interesting discusions with Joe Walker and Kevon Dangoor at JSConf.eu.
Upvoting for minor novelty, but there is really no reason to disregard innerHTML. It is a perfectly crumulent part of HTML5 and has been supported by all modern browsers for quite some time.
Extending native object to allow this kind of interface is subject of debate.
We are considering to use [JSCTAGS](http://pcwalton.blogspot.com/2010/05/introducing-jsctags.html), which would probably give us the best JS code completion out there but first we have to stabilize the IDE and implement all the fundamental features.
nice article, although the first example is a bit arcane: if (typeof mysite == 'undefined') var mysite = {}; could be rewritten as var mysite = window.mysite || {} To reduce the typing in the first example, you could also use an object literal: var mysite = {section: {subnameSpace:{}}} *(assuming that this is the initial declaration of the namespace at the very beginning of the code)* but the mentioned namespace function definitely has its place, when you want to extend/create namespaces at different places in your code.
http://www.ecma-international.org/publications/standards/Ecma-262.htm
Did it work? I'm excited! :D
Avoiding innerHTML is sane, when using object-bound event handlers and a strong object to code relationship. You won't achieve this easily when basically serializing perfectly good object and function pointers, that are context aware, into strings. I use a very similar library myself for quite some time now and never looked back. 
That's nice and all, but what's published as a standard typically isn't what's done in practice. Case in point, IE and pretty much any standard.
My own - I didn't bother to put it public due to lack of documentation and constant procrastination about that. PM me, if you want it.
innerHTML is _MUCH_ faster than than creating DOM objects on your own. The browser is built to take strings (an HTML page in an HTTP response) and turn it into DOM objects. The pattern I've used for large scale apps is to create an array and push HTML code onto it. When done join and innerHTML. 
&gt;Please don't: Send out IMs, tweets, or any other sort of message asking people to vote for your submission -- or comply when other people ask you. A link should get points for being good, not because the submitter is part of a voting clique. THIS ISN'T DIGG, AND WE DON'T PUT UP WITH THAT KIND OF SHIT HERE.
I never claimed otherwise. However, I *really* don't like mucking around with strings in JavaScript (especially HTML strings), so I'm not going to. Also: In my rather informal tests I've found that HTMLBuilder and string manipulation (via `.join`) + innerHTML take approximately the same amount of time to insert 2000 `p` elements with a class name and content into the DOM, just sayin'.
Ok, I've upvoted this you as You asked. Later.
Well yes, and for 2.0 they're reworking prototype to use a wrapper just like jQuery, but I'd still prefer $('elm').insert() over what the article is suggesting.
Read: "How some people are using node.js disappoints me"
GTFO
*prefers [PURE](http://beebole.com/pure/)*
Lets not forget that web development is still client-server. I can understand the whole argument for the same language on client and server (hesitant about *inexperienced* frontend devs mucking around in my backend), but the same context argument would require more abstraction than I am comfortable with. 
An example would have been nice.
I've always loved Mozilla's documentation.
I think what he's looking for is [Aptana Jaxer](http://jaxer.org/)
I'm still waiting for $('#body').buildAwesomeWebsite()
 Infinity == 179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497791 false Infinity == 179769313486231580793728971405303415079934132710037826936173778980444968292764750946649017977587207096330286416692887910946555547851940402630657488671505820681908902000708383676273854845817711531764475730270069855571366959622842914819860834936475292719074168444365510704342711559699508093042880177904174497792 true
I was just thinking of making one of these. Also, the text input is pretty hard to find. It took me a minute or two to find it.
Javascript really never ceases to amaze me. I hope one day I can transcend to the level of some of these guys..
here, here!
Alternate title: Use frameworks to make writing cross-browser JavaScript less painful.
Not tried yet, I promise I will give it a go tomorrow. I have left a script on my desktop, there is no way I can miss it when I get back from work and I'll report back.
I used to think the same about 'these guys'. I'm still not writing tweet-sized mandlebrots or raytracers, but honestly, just start trying to write a little 'matrix rain' script or some silly little effect and you'll soon have something that looks pretty decent. For next year I'm going to experiment with the terrain generator theme and try to get something cool done.
That sounds awesome.. Thanks for the inspiration..
Kinda depressing to get your arse handed to you by a [1023 byte chess engine](http://js1k.com/demo/750) ... 
Wow. A "don't miss" event.
seriously, geeze if it wasn't for the fact there is no en passant (sp?), I would lose sooner
Like people are saying, innerHTML is much faster due to one block of parsing rather than individual node appending in the DOM tree and repainting for each node. If you need a reference to a node, add a random ID (if the user hasn't already specified one) and do the ol' document.getElementById();
&gt;ou know what would be awesome? If we wrote our libraries so that they could run either on the server or on the client, and they did so in a transparent way. Node + YUI3 looks pretty great. (Check Dav Glass' talk.)
I just recently jumped into node.js myself and it blows me away. Node is exactly what I envisioned a server should be, a concurrent event driven monster. Im not going to get into the common complain of lack of 'instant x' frameworks though. If I ever meet Ryan irl he will leave the bar drunk for as long as I am in town.
The similarity ends on small tests. If you go to the route of modern heavy DOM web apps, there is no comparison. *innerHTML* is the only fast option with today's browser. And you can use a JS template engine to separate well the HTML and the JS. We've built [PURE](http://beebole.com/pure), it is rather different than the usual &amp;lt;%...%&amp;gt; tags family but it strictly separates the HTML and the JS logic. There are plenty of other engines available today.
A very interesting read, thanks!
I wonder how this bit makes the tetris music: &lt;html&gt;&lt;body&gt;&lt;script&gt; C=12;R=[]; for(P=0;P&lt;96;) { k="/SN;__/NK;OL/QN;__/OL;NK4L@@_C4_G@OL4SO@__4QN@OL3NB?_G3_K?OL/QN;__/SK;__4OL@__4LC@_G4LC@_G4_C@_G".charCodeAt(P); D="\0\0"; for(j=0;k&lt;95&amp;&amp;j&lt;1e4;) { v=Math.max(-1e4,Math.min(1e4,1e6*Math.sin(j*Math.pow(2,k/C)/695)))/Math.exp(j++/5e3); D+=String.fromCharCode(v&amp;255,v&gt;&gt;8&amp;255) } R[P++]=new Audio("data:audio/wav;base64,UklGRgAAAABXQVZFZm10IBAAAAABAAEAwF0AAIC7AAACABAAZGF0YSBO"+btoa(D)) } e=252; o=function() { P=P%96; for(_ in[1,2,3]) R[P++].play(); setTimeout(o,e*=0.997) }; o() &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 
node.js gives this guy a boner ?
Theres also JSONML (which I rather like)
Node.js server-side JavaScript, powered by V8 (the JS engine in Chrome), with evented (that is, asynchronous) IO. Node is unbelievably fast, in performance tests it easily matches, and usually surpasses, Nginx it throughput tests. The exciting part about all of this is that you can write web applications in *one language* and avoid costly context switching when you go from working on the client to working on the server. Another good thing is that you can finally get away from the horrendous API that is the DOM, though that means no jQuery, no Prototype, and no MooTools. [Here](http://www.youtube.com/watch?v=F6k8lTrAE2g) is a pretty good presentation about Node and its capabilities and implementation.
Wait, why would I want to get away from the DOM? Or I guess I should ask, how would I manipulate the DOM without my beloved jQuery? Also, how does Node.js stack up with delivering assets? (jpgs, gifs, css, js) etc?
You [can](http://blog.nodejitsu.com/jsdom-jquery-in-5-lines-on-nodejs) use jQuery on server with node, if you wish.
Node.js doesn't implement the DOM because it's a server-side JavaScript server, so you don't need it. The DOM itself is an integral part of *client-side* JavaScript development, but that doesn't mean that its a good api, but it's the only one. Thankfully we have jQuery and the like to abstract us away from the DOM and let us get things done. I believe the performance tests were for serving files. (So, as good as Nginx) **Edit:** There is some work being done to bring to DOM to Node.js for use in web frameworks, &amp;c.
Can it be considered an alternative to PHP or RoR? Can I connect to a Mysql DB for example? Can I code an MVC framework using it?
You can write bad ass server-side applications in a language you already know. Also, you get to re-use a ton of code. I do a lot of things in node. - http://github.com/marak - http://github.com/nodejitsu
I'll test the vapor.js sounds cool :P
While I know that I could have Googled it and learned about it in the process, I prefer to post it here so I can read the experiences from the javascript pro users, and also provide a good discussion about it. Anyway thanks for the tuts link looks very good!
node.js gives *this* guy a boner!
&gt;&gt;Every I/O operation in Node.js is asynchronous, meaning that the server can continue to process incoming requests while the I/O operation is taking place &gt;Every fucking server does that. Umm not to start a pro/anti node flame war, but every server does not do that. When a server goes into IOWAIT it does nothing while it waits on IO (hurp dur). That means nothing, it's just sitting there waiting on a function call to return. Most servers get around that by forking more processes, or using threads. Node gets around it by doing IO asynchronously. Behind the scenes some api calls use OS provided async functions, in other places it uses threads to hide the complexity for you. Essentially it goes like this: Non-async server: Hi host OS, I'd like some data, I'll wait and do nothing while you go and get that. Async server: Hi host OS, I'd like some data, I'm going to go do something else while I wait for you to do that, let me know when you're done. There are pros and cons to each method, but they're not the same. 
I always read those dialogues with the voice of "I'm a PC"
I'll also add that [YUI 3 has a module that creates a DOM in Node.js complete with event support](http://www.yuiblog.com/blog/2010/04/09/node-js-yui-3-dom-manipulation-oh-my/)
I'm trying... to......... watch the presentation. It's....... not great....... so far......................... I'm going to try to watch the whole thing though
He's not much of a speaker but he covers basically everything there is to know about Node.js.
&gt; Another good thing is that you can finally get away from the horrendous API that is the DOM, though that means no jQuery, no Prototype, and no MooTools. You wrote that in a very confusing way. Why were you talking about the DOM in server-side in the first place? We won't have to deal with the DOM in Node.js as just as we didn't have to deal with it with PHP. (That's at least what I understood from his question)
I deleted my comments due to (imho unwarranted) down voting, sorry. Apparently there is a bit of a hivemind here behind node.
How do you debug apps written in server side javascript?
And why are people hyped up over it as if its a [new idea](http://docs.sun.com/source/816-6411-10/partfeat.htm)? (that's 1998)
You removed your contribution to the discussion because your Internet Self-Validation Points are too low?
No, I just don't like to interact with such a community. I probably won't be back to /r/javascript. If I cared about points I wouldn't have the username I do. 
kthxbai
He said that he loves jQuery and I was pointing out that it isn't going to do much without the DOM.
o_0 If you don't care about points I don't see what the problem is, nobody seems to have criticized you unfairly, or at all.
Because in 1998 not only was there no XHR, but Javascript could also not add or remove nodes from the DOM. Hence client-side Javascript only had access to the DOM the server side delivered and could not query the server to fetch additional data (say, in JSON format). As a result there was almost nothing to be gained by choosing one server-side implementation language over another, whereas with AJAX and server-side Javascript one gets benefit from sharing code and data structures across client and server. One approach is to translate your server-side language to Javascript for client-side execution. This is the GWT approach. Node.js is sort of the opposite approach; simply adopt Javascript on the server side. The other reason people are hyped up (other than the fact that people generally just get hyped up about stuff) is that Javascript is starting to look like a better language for web development than the kind of imperative OOP language us old farts are used to, because of its functional features.
Well it's fast now.. **And** it has asynchronous IO!
Sigh, well now I'm looking hypocritical since I keep replying, but oh well. I don't mind criticism, I even welcome it. However, if in a subreddit I hit -9 on a valid post within minutes with no responses between me being at 2 and -9 then I'm disinclined to stay. On that note, I personally think reddit needs to rethink its moderation system. 
Okay, note of caution from a #node.js (freenode btw, come by ;) ) regular: BEWARE THE BASTARD! HE DOES THINGS!
Since I don't see any ansers to your questions*: &gt; Can it be considered an alternative to PHP or RoR? Yes, it can. However it is far younger and thus not as stable (even though I haven't had a single node.js crash that wasn't my fault). &gt; Can I connect to a Mysql DB for example? [Yes](http://github.com/felixge/node-mysql), there [are](http://github.com/masuidrive/node-mysql) a [few](http://github.com/sidorares/nodejs-mysql-native) mysql [drivers](http://github.com/Sannis/node-mysql-libmysqlclient) out there. Don't know which one is the "best" though. &gt; Can I code an MVC framework using it? Yes, you could. However there already are quite a few good frameworks and you should probably focus on either using those or help making those better. (But no one will keep you from creating a new one ;) ) Overall there is [this](http://github.com/ry/node/wiki/Modules) overview of modules available for node.js - ranging from DB drivers to ORMs, helpers and god knows what. \* maybe they were in the deleted comment?
Hmmm maybe /r/javascript forgot to read [reddiquette](http://www.reddit.com/help/reddiquette)?
Thank you, great answer! EDIT: just one more thing if you don't mind, which IDE you advice for node? And as [amatijaca](http://www.reddit.com/r/javascript/comments/dk066/can_someone_explain_to_me_what_is_nodejs_and_why/c10rzip) have asked, is there a good debug system, with line to line debugging?
&gt;Apparently there is a bit of a hivemind here behind node. There is
I tried #!/bin/sh #v0.3 host="192.168.0.2" scrape=$(curl -- "http://$host//cgi-bin/html/en/script/common.js?param=20091191959" | grep 'id="gPage"') gSSS=$(sed 's/.*name="gSSS" value="\([0-9a-f]\+\)".*/\1/') gRRR=$(sed 's/.*name="gRRR" value="\([0-9]\+\)".*/\1/') curl -d "gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=$gSSS&amp;gRRR=$gRRR" -- "http://$host/cgi-bin/top.cgi" And it didn't work. Any ideas?
Not in its current version (maybe I'm doing something wrong)... More info to follow.
How would you debug an app written in python or php? Same way.
I vaguely remember watching another presentation on Node.js, I'll see if I can find it.
But why would you want to? jQuery is designed to do one thing really, really well and really unobtrusively, that one thing is manipulating the DOM. Which doesn't exist on the server. jQuery sucks at everything else it does.
I don't know about the debug thing. (except for cloud9 which is still too early in development, if you ask me) I switch between Netbeans (on my desktop) and Komdo Edit (on my netbook). Both have their advantages. But I'm constantly hoping for something more javascript oriented to pop up.
A different solution would be to change the target attribute of all loaded links to "_blank" to cause them to open in a new window/tab.
Yeah, the problem is people have specifically voiced that they do not want that to happen....
Right. It's come of age. However, as someone who is constantly shafted by being ahead of the industry, I am somewhat bitter by the fact that [visionary pioneers](http://en.wikipedia.org/wiki/Dynabook) who really did see the future, as it actually went down are too often forgotten and discarded simply because their ideas lacked the infrastructures of [technology](http://en.wikipedia.org/wiki/Psion_Organiser) and [community](http://en.wikipedia.org/wiki/Phantasy_Star_Online) in order to be deemed significant at the time of development. Additionally, the eventually accepted technology often lacks the true innovation and vision of the iterations that came before. The monikers of [success](http://en.wikipedia.org/wiki/CU-SeeMe#History) and [genius](http://en.wikipedia.org/wiki/VM_%28operating_system%29) are as much a function of [work](http://en.wikipedia.org/wiki/Oberon_%28operating_system%29) as they are of luck. I almost feel personally obliged to remind people of those who may have done [plenty of the former](http://en.wikipedia.org/wiki/ViolaWWW), but unfortunately, had none of the latter.
 printf("hi mom\n") :( 
&gt; But why would you want to? jQuery is designed to do one thing really, really well and really unobtrusively, that one thing is manipulating the DOM. Which doesn't exist on the server. When you accept user input that at some stage is going back into a browser, sanitizing it by building the DOM to only make sure it contains the markup you would want to permit is incredibly handy.
[xdebug](http://www.xdebug.org/) , Zend Debugger for PHP. Never coded in Python thought.
http://dailyjs.com/2009/11/27/node-debug/ for nodejs
Just read this http://amzn.to/dB8Doz Javascript: The Good Parts
I did, and I think it gave me a good grasp on the language itself. But this is really about how to design objects with JavaScriptâ€™s model in mind.
Agreed. I feel queasy when I think of using JQuery on the server side. JQuery is optimized to work around (and depend upon) all the browser DOM quirks and features and moreover to work in IE6/7. All of that would be dead weight to a server-side process and lots of shims and adapters would need to be built to make it work properly. Anyway JQuery isn't itself a DOM library, it's a DOM *manipulation* library. The browser provides the stream parser and the DOM API. On the server side, what we need is a combined SAX/DOM/Query engine. If it could imitate the best features and idioms of JQuery that would be a bonus. [edit] Not just SAX but HTML-style parsing too.
Well really in node.js there is nothing new. Evented IO has been done, SSJS has been done, it borrows Google's V8 engine. It's just an amalgamation of pre-existing ideas and technologies. If you dabble in the node community, you'll see some fanboys who treat it like it's all new, but by and large these people are keenly aware and constantly paying tribute to the giants on whose shoulders they are standing. That's been my experience anyway. And it also bears repeating that Ryan Dahl (and the other node devs) deserve credit for some pretty keen insight in recognizing the opportunity, and technical chops to put it all together. //end fanboi rant
Wow, no post so far explains what node.js is.
Cool find, though I caution against using it on the Reddit home page (or really any page with a ton of markup) because it slows to a halt.
This bookmarklet is crazy fun. For something similar, you might want to check a Firefox add-on called [Destroy the Web](https://addons.mozilla.org/en-US/firefox/addon/14572/).
best thing evar.
The reddit homepage is a long stage to beat. Also, you may need a better browser.
DOH! this was previously posted by the author: http://www.reddit.com/r/reddit.com/comments/df8fp/hey_reddit_i_made_this_procrastination_enabler_in/ I didn't see it in my original search. Sorry for the double post.
Apparently, I just killed Glenn Beck. Everyone kills Glenn Beck their first time.
Well, debugging Javascript is easy on Firefox - use Firebug in-browser debugger... What about server side Javascript? There is no browser...
You're thinking about javascript incorrectly. Think of it like a real language, not dependent on a browser. You don't need a browser to run javascript. The browser is just a way to show the output. Like the link I posted, there's plenty of server side debugging tools, unit test tools, and even the old write to console. Node even has their own console.log() which works pretty nicely. In addition, node will throw an exception if theres a syntax error. Same way python would. You have to setup your own logging and check the console for errors.
The article you found sums up your problem and the potential solutions pretty succinctly. I tend to write js in a style where, for your example, a new ListView() would simply be a property within FancyListView(). Maybe not what you're used to (or what you want to use in this situation), but I do a lot of top-down as opposed to bottom up inheritance.
Generally speaking if you want to deal with JavaScript the "javascripty" way you really need to throw out your OOP design patterns books. Inheritance in JavaScript is a bitch. [Prototype.js](http://www.prototypejs.org/learn/class-inheritance), [Ext.js](http://www.sencha.com/learn/Manual:Intro:Inheritance), [MooTools](http://mootools.net/docs/core/Class/Class), and [def.js](http://github.com/tobeytailor/def.js) all provide work arounds to have some semblance of traditional OOP. Your best bet (if you truly want to be 'javascripty', the language is flexible enough that you can use the above tools to get your desired effects) is to stop thinking in OOP and start thinking in Functional programming concepts and use JavaScript's overridable objects and prototype class system more for namespacing and scoping.
Try setting the prototypes equal to each other. I think this is the effect you want to achieve: ListView = function(){}; ListView.prototype.something = 1; FancyListView = function(){}; FancyListView.prototype = ListView.prototype; var view1 = new FancyListView(); view1.something++; var view2 = new FancyListView(); console.log(view1.something); // 2 console.log(view2.something); // 1
http://www.google.com/search?hl=en&amp;q=site:stackoverflow.com+javascript+prototype
You can make a web crawler to extract data from pages by traversing DOM with jQuery.
People know about the [Mother of all Demos](http://www.youtube.com/watch?v=JfIgzSoTMOs). It seems a little melodramatic to me to get irritated at the hype about node on the account that they're not paying respects to Engelbart... Now, if you want to get irritated about hype about node because it's hype, by all means feel free, because hype is irritating :P
Aren't JS prototypes basically like OOP without classes? An object "inherits from" / "extends" its prototype, doesn't it? And it can override its prototype's properties, too? That's why you shouldn't modify the `Object` prototype, right? Personally, I consider the prototype system a dark art until I finally grok it and for the time being, I'd rather stay away and use OOP-ish systems like the one MooTools provides.
You mustn't scrape the js-file. On the scrape line you must provide the link to the page from where you got the "Shutdown Page HTML (from web interface)". I added some echos to the script (in the original comment) so it can tell you what happened. One of the things i wonder about is why there is no authentication required. Don't you have to provide a password? It it still does not work, try debugging it. Run each command for them selves and look at the output. Ie. curl -- "http:... see if you get the right page. curl ... | grep .... See if you get a bunch of &lt;input&gt; tags..
I login to my NAS at http://192.168.0.2/cgi-bin/top.cgi and the URL in the address bar never changes. Even when I navigate to the shutdown menu. Going through the source for that page, there is no reference to "gPage" so I doubt grep will locate it. I found reference to gPage in that js file, that is why I used that. Oh, and yes, I need to provide a username and password to login to the NAS.
I've tried following what happens using Firebug and Httpfox when I press the shutdown button. It sends 5 requests in order but I'm still non the wiser.
I tried to be objective and outline my points. But fine. node.js might actually give me a boner :)
You are also recording subsequent requests. Only POST requests are of interest, I belive.
You'll find "gPage" on line 724 in the pastebined source. Is it authenticating using httpbasicauth, ie. is there a dialog like "the website ... is asking for a password" or trough a webform?
I'm not subscribed to /r/reddit.com, so thanks for reposting this here!
V8 has a JSON-speaking remote debugger you can connect to from Eclipse. Breakpoints, looking into variables, all that nice stuff.
Not true. http://ajaxian.com/archives/google-chrome-eclipse-debugger
http://github.com/ry/node/wiki/using-eclipse-as-node-applications-debugger
I missed it :(
Ok, now this answer makes sense - thank you very much !! 
Yeah, I see V8 has a JSON remote debugger - as LeekyAbstraction said.. I was looking for more advanced stuff like conditional break points, evaluation and changing of variables while debugging etc...
I didn't link node to engelbart. That was you. And yes, *I despise hype*. This is engineering, not tigerbeat.
&gt; Aren't JS prototypes basically like OOP without classes? An object "inherits from" / "extends" its prototype, doesn't it? To an extent yes. I personally wouldn't say JavaScript is "OOP without classes" as that implies that JavaScript, in it's purest form, is OOP. An object does "inherit" from its prototype, but a better way to think about it is the prototype is the fallback for JavaScript to try and execute a method. If an object doesn't contain the member "foo" it will scan the prototype(s) looking for "foo". Really there's nothing significantly different between the results of `var obj = new Foo();` and `var obj = {}; obj.__proto__ = Foo.prototype; Foo.apply(obj);`. Doing an `obj.foo = function() {};` will just add the member "foo" to the object, even though the original "foo" will be still present, but in the `__proto__` property. &gt; That's why you shouldn't modify the Object prototype, right? Modifying a prototype is not a big deal, it's a nice way to inject methods and have them exist for all instances everywhere. Yes, you really shouldn't remove any prototype methods that weren't user created, and yes you should make sure if you alter an existing method it still behave the same. But beyond that adding methods is no big deal. The main complaint about libraries like Prototype.js injecting methods into system prototypes is that it present the potential for conflict with other libraries (say another library decides to inject their own .bind() method into the Function prototype but it behaves different, which library wins: prototype, or the other?).
c'est la vie sur reddit http://i.imgur.com/wOY9d.png
Is it like JScript? 'Caus you can run that on a server too. Connect to DBs, write files and all that.
You certainly did, but you're clearly being grumpy engineer today, I fear you guys. Leave me alone.
Ummm, because it's more specific, so easier to optimize? Dur? EDIT: The Live vs. Static NodeList's part is interesting, but you wouldn't know it from the title.
Another explanation is getElementsByTagName() returns objects by reference, while querySelectorAll() returns a copy of the objects. The copying process takes up time. \* This is a gross generalization which is used to make a point.
That is why we have document fragments. They don't have good PR though.
really? I stayed away from engelbart. He is a friend of mine. In fact, I took his 5 chord 3 button mouse and a bread board, converted it to RS-232C, then wrote a mouse bus driver in linux for it in the early 2000s. It went over DB9 at 300 baud if I'm not mistaken. It was a fun project. The underside of the mouse has two metal wheels; one for horizontal and one for vertical movement. As long as you pick your surface well, it works great. The 5 chord is another issue. It's a bitmask that is sent with some timing info. I had a hard time finding a use for it. edit: It's worth noting that after the first wood box one, there was the one with plastic casing. There's a handful of those. So it wasn't the first museum-worthy mouse, but one of the first 'production run' varieties. I am not one of inquiry so I never asked many details about it. I know that uc davis, uc berkely, and moffet field all have one - along with a guy named dr dave in vacaville who lives on a repurposed nike missile site he bought in the 80s --- fantastic place. Another edit: Alan Kay of dynabook fame is a wonderfully modest guy. I didn't know I was talking with him until after the fact.
I think this is close to what he wants, with the exception that anything he wants different should be changed in the FancyListView constructor. So... FancyListView = function () { this.something = 2; // update what differs from ListView here }; list1 = new ListView(); list2 = new FancyListView(); console.log(list1.something); // 1 console.log(list2.something); // 2 
Whoa, where are you getting this? If you manipulate the nodes returned by qsa(), the changes appear in the document. That wouldn't happen with copies.
\* This is a gross generalization which is used to make a point.
But it doesn't make any point because it's not true. What point?
Downvote it then. If you don't like what I said, either right me or downvote me. Stop trying to ridicule the comment because it doesn't agree entirely with your view or knowledge. You're supposed to be teaching others here.
http://developer.yahoo.com/yui/theater/video.php?v=glass-node Node+YUI3. Check it out. It's just plain awesome.
That html is created on the fly once I've clicked through to the maintenance page, as like I said, the url never changes, it is always http://192.168.0.2/cgi-bin/top.cgi so by default, if I navigate to that url it takes me to the login page, and the html is as [this](http://pastebin.com/3AzLHeDE) I tried running the following, and still no joy: #!/bin/sh #v0.3 host="192.168.0.2" scrape=$(curl -- "http://192.168.0.2/cgi-bin/top.cgi" | grep 'id="gPage"') gSSS=$(sed 's/.*name="gSSS" value="\([0-9a-f]\+\)".*/\1/') gRRR=$(sed 's/.*name="gRRR" value="\([0-9]\+\)".*/\1/') curl -d "gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=$gSSS&amp;gRRR=$gRRR" -- "http://$host/cgi-bin/top.cgi" 
This seems pretty inferior to using an HTML parser, tbh. Also, why not use MooTools, instead of jQuery? All the DOM-y goodness (if you want) plus it's actually useful outside of esoteric edge cases.
I much prefer this one. http://code.eligrey.com/shell/shell.html
Breaking out like this gets rid of one nesting level. Well, if you hate `if`s that much you can of course also write `err &amp;&amp; throw err;` instead. :&gt;
 &gt;&gt; var byName = document.getElementsByTagName('a')[0]; &gt;&gt; var byQuerySelector = document.querySelectorAll('a')[0]; &gt;&gt; console.log(byName == byQuerySelector); true &gt;&gt; byName["foo"] = "hello"; &gt;&gt; console.log(byQuerySelector["foo"] == "hello"); true &gt;&gt; byQuerySelector["bar"] = "bye bye"; &gt;&gt; console.log(byName["bar"] == "bye bye"); true Doesn't look like that either of them is a copy. From the code posted in the blog, it looks like they both return Node pointers, not references or copies of instances.
Thank you for proving me wrong the way I would have expected. This is the kind of response that allows people to learn what's going on behind the scenes. I just hate it when people get so caught up on verbiage that they forget about why we're here - to teach and learn. I may have been wrong, but that's what downvotes are for.
If you mess up, it's harder to fuck up your system from a bad Linux install in VirtualBox than a bad Cygwin install on your "real" system.
No you can't because "throw" is a statement and the &amp;&amp; operator expects two expressions. It is a syntax error.
is it? can you post some numbers?
It's clichÃ©d to be cynical about IE
Try \1 or \2 as your backrefences 
Ah good point.
Congrats! You've found a bug! Did you [report it](http://www.windowsvalley.com/how-to-report-bugs-or-submit-feedback-for-internet-explorer-9-beta/) yet?
The most straightforward (imho, ymmv, etc) to "subclass" in a way that does what you expect is to use a JS runtime that supports the magic .\_\_proto\_\_ property to expose the prototype chain of an object. You'll end up with function ListView() { // stuff setting things on "this" goes here } ListView.prototype = { method1: function(){} /*...*/ }; function FancyListView() { ListView.apply(this,arguments); // more stuff setting things on this. } FancyListView.prototype = { __proto__ : ListView.prototype, method2: function(){} /* ... */ }; Without \_\_proto\_\_, things get more awkward. Some frameworks iterate through the parent prototype and copy members on the subclass's prototype. Presumably, you could use Crockford's object method like such to still set \_\_proto\_\_ to what you want function object(o) { function F() {} F.prototype = o; return new F(); } FancyListView.prototype = object(ListView.prototype); FancyListView.prototype.method2 = function(){}; /* ... */ The benefit of those approaches is that the inheritance link is "live", meaning adding new members on the parent class will be automatically reflecting on the subclasses. 
I think that might be the way Windows'/.NET's regex engine works
Social news sites are the new bug trackers.
Windows 7 32 bit, ultimate.
You should try clicking links in the article. http://jsperf.com/queryselectorall-vs-getelementsbytagname
Yup, *\1, \2... \n* is the ECMAscript standard: &gt;An EscapeValue is either a character or an integer. An EscapeValue is used to denote the interpretation of a DecimalEscape escape sequence: a character ch means that the escape sequence is interpreted as the character ch, while an integer n means that the escape sequence is interpreted as a backreference to the nth set of capturing parentheses. ... &gt;Parentheses of the form ( Disjunction ) serve both to group the components of the Disjunction pattern together and to save the result of the match. The result can be used either in a backreference (\ followed by a nonzero decimal number), referenced in a replace String, or returned as part of an array from the regular expression matching internal procedure. To inhibit the capturing behaviour of parentheses, use the form (?: Disjunction ) instead. Source: http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf
Keeping to a single convention is the starting point and nodejs developers have chosen the callback style. Actually they tried promise style at first and then switched since v0.1.30. See the [changelog](http://nodejs.org/changelog.html). With JavaScript black magic you can easily write a wrapper: [WARNING: untested and not production-ready](http://gist.github.com/603981). edit: minor fixes.
I really liked how you started with the old browsers which no normal people use those days, and then didn't mentioned Ext errors in IE6 test. Mission accomplished, RightJS is officially suck! 8) But, thanks for letting me know about the issue (you could just mail btw) will fix those in the next release.
&gt;I really liked how you started with the old browsers which no normal people use those days well, 80% of the clients of my clients(website users) use IE, within this percentage,IE6 represents 25% and IE7 &amp; IE8 represents half/half of the 75% that's why I took them into account. I did not use IE5.5 because well... it is not a meaningful figure anymore. Looking forward to your next release. I will add some comments about Ext errors, I did mention them in the chart but forgot to write about them! my bad! 
But that is only for the pattern, in the replacement part you need to use $n
All I get is a dialog saying "Internet Explorer has stopped working Windows can check online for solution... etc" Every single time. That's after I allow the script to run, IE9 seems to block all JS from local files (why?).
em, I don't also really know it ^^ I'm inured to this kind of style since jQuery and I'm still loving it. It has many advantages to pass parameters (variables and callbacks) as an object: * you are compelled to separate your code in different functions - more readable (maybe not for you, but for reviewers) * optional parameters can be omitted * in future versions of node.js Ryan Dahl can add/remove parameters IMHO it's confusing you can do this fs.readFile(filename, callback) and this fs.readFile(filename, encoding, callback) .. looks like overloading, of course it's not ;)
the key word is "normal", I don't say noone uses it at all (my condolences by the way about 80% 8)) my point is that the article more concentrates on how rightjs is not so right rather than the actual css3 selectors analysis. There are some troubles with RightJS and css selectors, but there is also a reason for that. We use default native css selectors, because 99.999% of sane developers use selectors like "div.boo" not "div[class=boo]", so instead of fixing the things that not everyone use we keep it simple and offer you a choice: 1) You can keep it simple and be happy with fast native selectors 2) Or if you need more features, you can hook up any existing css selectors engine with just couple of lines of code. So, my point is that it is not exactly correct to compare things this way. Optional doesn't mean buggy
&gt; no normal people use &gt; the key word is "normal" You should give me your definition of normal. Your code seems to assume the following: if(!document.querySelectorAll) -&gt; old browser -&gt; implement css3 selectors. But this sole verification is not enough. IE8 does have document.querySelectorAll but only offers css2 selectors. Don't you think you should rethink your handling? &gt;Optional doesn't mean buggy Your library seems to offer an implementation for css3 selectors for older browser and that's a good idea but optional does not mean it should not work as intended. If your documentation does declare that the selector engine the programmer is using is browser dependent then fine. It does limit the advantage of using the framework though, don't you think? &gt;2) Or if you need more features, you can hook up any existing css selectors engine with just couple of lines of code. Sure but then load Sizzle instead of your implementation perhaps? Unless the documentation states that your implementation only offers a subset of actual selectors. &gt; sane developers use selectors like "div.boo" not "div[class=boo]" You should also give me the meaning of "sane". I guess div[href^=https] to add a little key or div:nth-child(even) to add different colors for rows seems sane to me. By the way, your library does not handle css3 selectors properly across all browser tested that's why I've written so. I've specified also that YUI and Prototype were very very slow in older browsers but forget about Ext errors in IE6 that's true. Anyway, &gt; will fix those in the next release. Looking forward to your next release.
yeah. the horror that is. the abomination. the monstrosity. the hellhole. the unspeakable. the unthinkable. it's quite seldom that I downvote an entire post. if I don't like, I just hide it and move along. but somehow you managed.
You're right, the documentation probably should mentioned that some weird CSS3 selectors are not supported, or actually make them work, and I said in my very first comment that I'll pay attention to that in the next release (I even created a ticked right after reading your article) But I think you're missing the point that in my opinion, those unsupported selectors are rarely used by majority of developers, and when they are used, people would probably want more and should hook up Sizzle. In jQuery it is built-in, in RightJS it's optional, which makes it a design choice, not a bug.
&gt; some weird CSS3 selectors I am very sorry but "weird" should be clarified? What is your notion of weird? &gt; in RightJS it's optional, which makes it a design choice, not a bug. I've never said that auto loading the engine for older browsers was a bug but that the condition to load your engine was buggy. I think that loading on demand the engine is a good idea as long as the engine works as one can expect as per the documentation. Hopefully, you will have this cleared up in your next release(either at the doc level or at the implementation level or at both). 
doesn't work properly when you launch the bookmarklet on a scrolled page. Otherwise, nice. You should tidy it up and submit to [js1337.com](http://js1337.com) when that launches.
I'm not talking about autoloading of the olds module, I'm talking about a partial support of css3 selectors. You have a set of tests and and everyone who doesn't fit you call "not right". And that is not correct because there are other ways to look at it. You cover just one side of the story completely ignoring the others. To me, having a choice between using `:nth-child(2n)` or using `:nth-child(even)` but load some additional code is a perfectly valid option.
From your doc: &gt;RightJS supports all the CSS selectors up to the Level 3. It will use a &gt;browser native css-selectors functionality if available. and the test was about... css3 selectors,their speed and implementation. Your doc seems like you handle them, your code seems like you handle them (there is source code to implement them for older browser, right?). Your engine is not failing completely on IE6 and IE7 because you don't support them but because you don't support them well. &gt;You have a set of tests and and everyone who doesn't fit you call "not &gt;right". Every framework that states supporting them but do not support them are therefore failing the test,indeed. 
1) Your main loop is running at ~100 fps which is about three times more drawing than you need. Cut that down and you won't be punishing your users browser so much. 2) Use [Raphael.](http://raphaeljs.com/)
okay, I think it's pointless to continue. will see you around
If you aren't looking for accurate orbits you can take a look at something I did a couple of years ago. [orbittest.html](http://www.pcallan.com/shizz/orbittest.html) Its rather basic (from before I seriously jumped into js), but should help you out a bit. Also you might want to up the interval to once a second or maybe even several seconds for redraws which will reduce cpu usage a lot.
It just covers the visual field of the browser with the grid, yes your right it doesn't cover entire site with the grid frame. if you have scrolled page you and click again on the bookmarklet and it will recalculate the new visual browser filed.
sure. I ll update the test from time to time by the way and will add a word about Ext failure in IE6 in the actual article. Thank you for the reminder! 
no problem. poke me if you'll discover any other troubles with rightjs, I'd appreciate that.
The gridlines obscure the page quite a bit. Why do you use 2px lines rather than 1px lines?
Good observation. I was convinced that it was 1px but it wasn't.I will change this later. Thanks!
Yes but mind-blowingly *fast!* (for an interpreted language, anyway)
 console.log('foo');
Event-style programming is more inline with node's design, I'd go with that.
We reported it directly to MS.
Doesn't work. var x = 'test'; alert(x.replace(/(t)(e)(s)(t)/,'\4\3\2\1'));
Could you somehow display the x,y coordinates of the cursor?
It can be definitely be useful, i will try to integrate it in the next version. Thanks for the tip.
Huh, you're right. Shows how often I use String.replace in JavaScript.
Ah yea, you are of course right.
Oh my, there's a good article there. I thought it was a self post.
How do you turn it back off? The grid intercepts all mouse events, you can't interact with the page once it's up.
Just make the element the full height of the document (grab the offsetHeight of the body).
I haven't looked at your code... however this might be of use to you... if you're plotting pixels with canvas, you need to specify the coordinates +- 0.5 - otherwise it "straddles" the point and you end up with 2px lines. Search for "Why did you start x and y at 0.5? Why not 0?" on this page: http://diveintohtml5.org/canvas.html#divingin for an explanation! *Excellent* little app, by the way ! ! !
Thanks, as I already stated, the fps is too high at the moment (just to see if it moves correctly) I think I'm making thoughts on problems I don't really have to care about as the planets will take multiple times to rotate.. Thanks for the recommendation of Raphael, looks nice!
Just refresh the browser (F5)
Excellent suggestion! Thanks
UA sniffing was never supposed to be alive to begin with. It's a horrendous philosophy- let's code only to a subset of known browsers and versions! Screw futureproofing. Feature detection was promoted by good JS developers as far back as I can remember.
You can't feature detect everything but other than that I agree with you.
Oh sorry, I've tested these expressions: 'abc'.replace(/(xxx){0}(.+)/, '$1 - $2'); 'abc'.replace(/(.+)(xxx){0}/, '$1 - $2'); Both in ie9 beta and chrome 6 the results are: " - abc" "abc - "
This will only work for javascript feature detection/support. Browser bugs and quirks are a whole different thing, for which you will need UA sniffing anyways if you want to deal with it.
&gt;IMHO it's confusing you can do this fs.readFile(filename, callback) and this fs.readFile(filename, encoding, callback) That's not too uncommon in JS, see the [function constructor](https://developer.mozilla.org/en/javascript/reference/global_objects/function) where the only required argument may be the first argument or the 100th etc.
I'm not a fan of passing maps to functions where regular parameters would work, I can't think of any non-library function that works that way. You could have two separate callback arguments I suppose, but the problem there is it becomes very verbose in situations where you want to perform *similar* tasks whether it succeeds or fails.
True, but in that case you should only bug-detect, and you should only bug-detect "dead" versions: create a specific code path for a specific current or previous version of a specific browser. In that philosophy, the MSIE conditional comments are good: they're mostly used to special-case IE6 and IE7, which are known static targets matched with pinpoint accuracy. Is it possible that some specific un-feature-detectable CSS bug will still be there in IE8? Sure, but at least you won't still match when IE9 fixes it.
I can't get this to work. Anybody had any success? I'm using firefox 3.6.10. It just does nothing. Maybe the server is too busy to send the script file to me?
I just tried to download the script file: http://bookmarklets.heroku.com/bookmarklets/1786.js the contents appear to be "document.write("404");" 
maybe once in a while you should bother actually reading the article.
Bah, sucks, I read the headline as "browser support of jquery", as in browsers being specifically aware of jquery and offering useful introspection features (example: firebug displays jquery objects/collections as arrays of link to DOM nodes (as if displaying the nodes themselves), which is rather more useful than the Webkit tools which show `[Object]` and when opening the object keys to a bunch of non-linked `HTML*Element`. That's completely useless, and as a result a user has to `console.log($some_element.get())` to get useful informations.
The .cb().hello() syntax is now implemented on my jquery-ui branch on github. http://github.com/cschneid/jquery-ui I am now working to get it pulled into the official release.
&gt; I would probably be content to only support 'Chrome' (the latest release). Since Chrome automatically keeps itself up to date without any user involvement, this seems like a perfectly acceptable option. I wish the other browsers were so motivated. I tend to take the same policy with Safari as well. From my experience Mac users are pretty good at staying on top of their software updates.
I wish windows users did. I still get hundreds of hits from IE 6 and 7. I can't believe anyone uses those. Tempted to just cut them anyhow. Nobody has actually even gone to the checkout page on my site with IE 6 in ages.
Hmmm. It looks like the applet just looks at all images, finds the biggest/largest image, and submits that URI to [http://jigsawr.org/](http://jigsawr.org/). Fun, but not necessarily amazing. (function () { var doc = document, imgs = doc.images, bestSize = 0, bestImg; for (var i = 0; i &lt; imgs.length; ++i) { var img = imgs[i]; var size = img.width * img.height; if (size &gt; bestSize) { bestSize = size; bestImg = img; } } location = 'http://jigsawr.org/?u=' + escape(bestImg.src) + '&amp;d=24&amp;j=1'; })(); ;return false 
wasn't able to get it to work on windows or linux windows says it is missing node in a certain place under common.. don't know how to install it there or on windows at all. tried in linux mint and it just says common/nodebuilds/lin32/node not found start with node on command line axconfig port 1 not active axconfig port 2 not active call me crazy but you know what would be nice would be a link I could click on to try it.
To me UA sniffing still has its place, but not in futureproofing, more like 'pastproofing' Instead of testing for all the shit IE6 doesn't have, I'll just check your UA and tell you to GTFO.
Nice article. Thanks.
Mozilla has the option too, although it's up to the web devs to implement... http://hacks.mozilla.org/2009/06/defer/
The link is forthcoming :). We're working hard on getting it to run stable and in a multi-user setting. We now just released a developers preview. The node builds are included in a repo linked as a submodule. It will automatically download these for you when you use the shell script for your platform in the bin folder. Please read the README at http://github.com/ajaxorg/cloud9. If you still need help please let me know at the google group: http://groups.google.com/group/cloud9-ide?lnk&amp;pli=1
feel free to xpost to /r/webdev, this is really awesome ( or i will tomorrow! :) )
yeah, I followed the directions in the readme, the autodownload seemed to complete but those directions ended in the failures I described.
that video was about 1.5 minutes longer than necessary.
What's with all the downvotes?
This reminds me of jGrowl: http://stanlemon.net/projects/jgrowl.html
WebKit just implemented "async" and "defer" attributes last week :) http://webkit.org/blog/1395/running-scripts-in-webkit/
Why is his clicks so loud? Is he using a hammer on his mouse?
Interesting points are made in the comments, there are situations where you *do* want the javascript to execute before (or immediately after) certain page elements are rendered. One example is the *My Reddits* link in the top left of every page; first of all the feature is done badly in that it does nothing if JavaScript is disabled; but a good implementation would: * have *My Reddits* link to a static page listing my subscribed subreddits * use JavaScript to create the event handler for the dropdown You would want to apply the JavaScript in this scenario as soon as possible to reduce the likelihood of a user clicking it too fast and loading a new page when they expected a dropdown, since this is a very important piece of UI and is very simple to code it could even be included inline, thought here are cons there that need to be considered. Other options would be to only display the link once the JavaScript is loaded using some css like: body.js a#myreddits { visibility: hidden; } body.loaded a#myreddits { visibility: visible; } And having JavaScript set classNames on the body tag as the page is loading and once loading is completed. This ensures it only appears when it is usable when JS is enabled, and for non-JS people it is always visible. This option also requires JavaScript to run before the page renders. edit: i'd appreciate a reply if you're going to downvote me, what's wrong with my point?
If you flush after emitting the script tags in the head, then they get loaded in parallel as you generate and emit your dynamic content. putting scripts in the head can be a very definitive speedup, on all browsers, in all reasonable environments. It just usually isn't. Here's a pseudo-code example: emit_script_tags(); flush_output(); ----- BROWSER DOWNLOADS THE JS AND ----- STARTS INTERPRETATION ON CLIENT SIDE withhold_further_output_emission(); ----- THIS IS FINE BECAUSE THE BROWSER BLOCKS HERE ANYWAY ----- BUT THE SERVER DOESNT KNOW ABOUT THIS AND INSTEAD, ----- KEEPS PROCESSING WHILE THE CLIENT IS DOWNLOADING AND ----- INTERPRETING THE STATIC JS. database_intensive_operations(); ----- BY THIS TIME, THE JS IS DOWNLOADED AND INTERPRETED ----- IT'S READY TO GO! flush_output(); That is the style. I've seen 40% performance gain by moving script tags to the top in sufficiently complex applications. Sometimes, cherry picking specific JS files to the top and leaving others at the base is the best solution. There is no simple test case, because you only see this measurable performance gain when you are dealing with projects which have many many kilobytes of javascript and fairly complex data models - you can't take a simple millisecond loading time example and put it in a huge for loop and then measure it that way. In the most recent application of this, it was for an ecommerce site that wanted a very custom order tracking system. Here's a firebug screen shot illustrating the parallel loading while waiting for database principle: [screen capture](http://qaa.ath.cx/parallel.png) It's worth noting that my development machine for my clients in an old clunky P3. Also, if you had the script tags AT THE BOTTOM, then they wouldn't load until after that 2 seconds had elapsed and all the DB transactions were complete. This would then slow things down. In this case, at the top is the more performant option.
Not to be mean or anything, but he makes it sound like he's discovered something new.
Sidenote; that monospace font used in the code blocks looks really good
For what its worth, I get really upset that most mainstream languages make a distinction between expressions and statements. I think everything should have a value. There shouldn't be a need for the ?: ternary operator because you should be able to just use if.
Wow, they don't even credit Resig.
this is a really old templating system, probably older than resig's micro-template. even so, resig didn't invent javascript templates. this solution is very different than his.
Yes, I realize Resig didn't invent the concept, but when I glanced at the meta characters they chose to use, it did have a striking resemblance. Was it coincidence? Did Resig borrow ideas from these guys? How old are you saying this is? [Resig did a writeup on July 16, 2008](http://ejohn.org/blog/javascript-micro-templating/), but as far as I can tell, EJS has existed in some form since 2009.
It looks like they took their inspiration from Ruby's ERB. The actual "inventor" of this idea isn't clear. 
This one has existed since 2005: http://erik.eae.net/archives/2005/05/27/01.03.26/ 
Very cool, thanks for that.
&gt; You may easily assign clojures to your various REST resources and serve up an application in no time. That should be "closures". "Clojure" is a programming language that runs on the Java virtual machine.
It's a first order programming language - it's a "functional language" with it's roots in lambda calculus. Of course it's a real language - and anyone who even tries to argue differently is arguing from a lack of history, not knowing the language features or programming semantics, nor what the hell a functional language is anyway. It's also acting as a catalyst for research into things like new implementations of polymorphic inline caches... http://blog.cdleary.com/2010/09/picing-on-javascript-for-fun-and-profit/
&gt; Yes, I realize Resig didn't invent the concept, but when I glanced at the meta characters they chose to use, it did have a striking resemblance. These meta characters (I assume you mean &lt;% and %&gt; etc?) are pretty standard fare for templating languages and have been around since the 90s. For example this is what JSP uses. [edit] also ASP.
Does anyone know if there is a template system similar to Jinja2? I'm just thinking it'd be pretty cool to try out a js templating system without learning the new syntax.
Ok, so I just dug through the code, and it's pretty nasty. It reads like someone thinking JS is Java lite (Even a Scanner implementation in JS). Here's just a few: * Spits out globals * Uses prototypes poorly * Forgets semicolons after lines * Uses 'new Array()' instead of '[]' * Doesn't recognize var hoisting * Lazy regexes * update() allows for a url, but render() does not (api inconsistency) There are better templating engines out there. That said, this is still simple enough to get started quickly. Edit: Formatting
Are you implying the author doesn't know what he is talking about?
awesome! How did you solve the problem?
No, I'm just trying to prevent a horrible, horrible future in which people run around talking about how they program evented servers with clojures. *shudder*
Well, I know jQuery much better than MooTools but I believe any JS framework will work. Also, for jQuery to work on serverside you still must build DOM, so html parser is necessary anyway. It's just a matter of syntax. jQuery is better/more familiar for many people.
Great: A question, what is so vectory about these drawings? I cannot move pieces of the drawing around?
You're right. I am looking to build some educational software with canvas and would like to see some vector drawing mixed in with free style drawing. You know it is quite fun to draw with other people without knowing them. This concept could be developed further I think: for example after drawing together and you like working together a kind of chat would be nice; or drawing together where after all decide if the picture is to be saved (for display on the server) or not; ... Never mind; I start to ramble
The point is that jQuery is *useless* on the server. The few things it does which are not DOM manipulation (which you have hardly ever need to do on the server), are *much* better handled by other frameworks. Off the top of my head the only useful things in jQuery on the server would be $.map and $.filter, compare that with MooTools which adds dozens of very useful methods all over the place. On the client, jQuery has its place, on the server MooTools kicks its butt very comprehensively. EDIT: spelling
Wow, that went black fast.
Huge fan of globalization, anyone know if official release means that it's production ready?
I find the Google Chrome ads on that site particularly funny.
And how did that go?
 // 1: how could you rewrite the following to make it shorter? if (foo) { bar.doSomething(el); } else { bar.doSomethingElse(el); } &gt; I was looking for something like: bar[foo ? 'doSomething' : 'doSomethingElse'](el); Seriously? You think the second version is more readable? Terse is (usually) good, but in my opinion the first version was short enough already. Now imagine having to add an elseif-clause to the second version.
I have to agree, the second isn't more readable plus it has issues if you ever need a third option. if you can make your calling code set the value of foo to the function that needs to be called, then you can just do bar[foo](el); I think this would be the best option because foo is controlling which method to call, we are only specify which object to call it on.
&gt; *S*he really should have mentioned this at the start. FTFY, and I somewhat agree. Something like "Not taking readability into account, how could you make a one-liner out of this?" would be fairer. It's an interesting question to ask to potential candidates, though, because it has multiple levels of "right" answers.
Yeah. This guy is full of himself. bar[ foo ? 'a' : 'b' ]( blah ) ...inexcusable. I am all for function delegates: action = getAction(); bar[ action ]( blah ); but shove a ternary operator in there and I'll shove your code right back at you as unmaintainable and dangerous. Now... if it's a performance sensitive inner loop and has like 15 lines of comments explaining why you're acting like an idiot and not writing the code in a more maintainable way I can excuse it but I will pass on a guy who idolizes code like this. --Robert
Disclosure: I am the author
Well, the simple answer is that she says "shorter", not more readable. Asking someone to make a piece of code "more readable", I would argue, is not a good question to ask because that phrase means different things to different people. I would venture to guess that there are a lot of people who's brains will parse the ternary operator just as easily as if/else, purely based on repeated use. You can't claim that this is universally more complicated just because you are less familiar with it. Depending on the situation you're in, you may have to write only 'while' loops to accommodate people who don't understand 'for' loops. Does that make it any more readable, or better practice to do so? Requiring a third option is a possibility, but you have to keep in mind that this is Javascript. 99% of the time I'm using the ternary operator, it's to check if some browser feature / DOM element exists, or doesn't exist. I then branch off into one of two directions based on that. There is no mysterious third state of being that will occur, and I think the ternary operator is the best way to express that. But again, she's not asking "What is the universally best way to improve this code?", she's simply asking you to rephrase something based on basic programming knowledge. At it's core, it is a test to see if you've ever read a programming book, or glanced at the source of any Javascript library.
&gt; Well, the simple answer is that she says "shorter", not more readable. Fair enough, but with the headline "Writing Readable but Terse Code", she at least suggests that its readability is in the ballpark of the first version. &gt; Asking someone to make a piece of code "more readable", I would argue, is not a good question to ask because that phrase means different things to different people. If you ask someone that, they'll at least have to think about it. Of course there's no definite answer. Being clever, however, rarely helps neither readability or maintainability. (The rest of your comment is founded on assumptions not present in mine.) 
&gt;(The rest of your comment is founded on assumptions not present in mine.) Fair enough. I'm mostly reacting to the idea that the ternary operator is clever or unusual, which is something people suggest every time it comes up on one of these sites.
Well we need to keep a few things in mind: 1) None of these answers are held up as "The objectively best things to do in all cases"...she prefaces most answers with something like "What I was looking for is..." 2) I don't think anyone said it is "more readable". The question was to make it shorter while maintaining readability. 3) The point of the test is familiarity with the language, style, etc.... The question pretty clearly is leading you towards the ternary operator. You may have valid stylistic or practical objections, but if so you should add them to the answer. "Well you could do ... but I think the original is better because..." Again, this is a test of familiarity...if you look at her answer and don't immediately understand what is going on...that's a red flag IMHO. FWIW, I share your objection to her answer... if anything foo ? bar.doSomething(el) : bar.doSomethingElse(el); is the "farthest" I would go... 
&gt;The question was to make it shorter while maintaining readability. Oh that's easy. There are minifiers for that.
your source code should be readable. Then, when deploying, use Google's online Closure Compiler to remove whitespace, rename variables, optimize "if" statements, etc. http://closure-compiler.appspot.com/home Why the hell would you go to all the trouble to change this: if (foo) { bar.doSomething(el); } else { bar.doSomethingElse(el); } to this: bar[foo ? 'doSomething' : 'doSomethingElse'](el); EDIT: Even Google suggests: foo?bar.doSomething(el):bar.doSomethingElse(el); 
I agree that the initial version was good enough in the first place, but what struck me in particular was that the suggestion used string literals in place of functions (maybe it's just me, but I find that repulsive). If forced to rewrite it in a more "concise" manner, I'd probably go for: (foo ? bar.doSomething : bar.doSomethingElse)(el); As you say, though, this completely falls apart if another condition is introduced. Likewise, the "maybe too clever" solution falls apart when the method names aren't as ridiculous as in the example (really, any solution that involved "constructing" a method name should make your alarms go off -- it's most likely a terrible idea).
Of course, I'd first convert the code the coffeescript to make it _really_ readable.
I agree that foo ? bar.doSomething(el) : bar.doSomethingElse(el); is the first thing that came to my mind and the last. I would never do that operation inside the object index itself.
That was pretty fun! I learned some stuff for sure.
Did you ever work out a way to get the unit to shutdown? I'm still trying, but have gotten no further. It doesn't even have to be a one-liner. I'd like it to be a (bash) script. How exactly I can scrape the session values is still not clear, I'm sure curl is capable, I'm just not proficient enough yet.
async will be lovely in 15 years, when HTML 5 is finally done and properly supported by the most used browsers.
And by then I'm gonna have a super sweet flying car! 2025 is gonna rock!
we wont even have web browsers then, just headsets that burrow thoughts into our minds.
That was an awesome way to learn. Thanks!
Given that more than 50% of the people out there don't use IE, your statement looks pretty stupid. It also shows that you don't really know what HTML5 or progressive enhancement is.
Glad you enjoyed it. If you have any suggestions please leave a comment on the blog http://hackingon.net/post/Javascript-Koans-Are-Available.aspx
Earliest instance I can find of the async attribute being in HTML 5 is from 2008 (first spec), and 2006 (first WG discussion involving async). That means over 2 years have passed since the first draft, and still only one browser supports it. Guess what? That browser, along with all others, does not have majority market share. Not sure what IE having under 50% has to do with it. ONE browser in 2 years does not equal most used browser. It equals a popular browser. When Chrome (which came out after the first WD), Firefox, IE, AND Safari support it, then you can say it's supported by most used browsers. Don't make the incorrect assumption that someone means IE when they say most.&lt;/rant&gt;
Extending the prototype of built-in objects is itself a bad idea, but even if you really had a good reason to, it seems weird you'd want to extend Boolean. You should be using JSON.stringify() for the above example, but even so.. without modifying anything you could use toString() to get the same result: true.toString(); // "true" JSON.stringify(true); // "true"
Easy enough without optimising the nested ternary operator too much: **foo ? bar.doSomething(el) : yuk?bar.doSomethingElse(el):bar.yetAnother(el);** I find the problem lies with experience. Beginners struggle to learn each new part of the syntax and API, and celebrate by using it lots. (If you hold a hammer everything begins...) The more experienced discover how to make terse statements, and start wrapping up logic instead of unwinding it into easily understandable chunks. Sadly some "professionals" never get out of this habit - they consider it's professional only if it's very short and uses some really obscure syntax to save a character or two. It's like a badge of intelligence "Look how succinctly **I** can use the language!" If a programmer ever becomes confident and relaxed enough, they then realise that if they're writing for a company they need to write clear code that's understandable quickly and maintainable. This means unravelling nested ternary operators, so that programmers of any level in the company can look at the code and maintain it. The only time a doubly nested ternary operator should be used is for performance critical reasons, if for some reason the JIT or whatever makes it a little faster. In that case I'd consider putting the un-ravelled code first - commented out with lots of comments, and a line saying "The above is optimised for the JIT below. Please amend the top block re-copied below to test, and then optimise that. Or in the newer syntax(is this "new"?) **bar[foo ? 'doSomething' : yuk ? 'doSomethingElse' : 'orSomethingOther' ](el);** It looks a lot like a badly constructed IF in Excel!
&gt; bar[ foo ? 'a' : 'b' ]( blah ) I've been out of the loop a while and people keep adding bits to Java. (Or I missed it completely) How did this : bar[ foo ? 'a' : 'b' ]( blah ) Appear from the syntax that I remember? foo? bar.a(blah): bar.b(blah) Do you know what this construct that creates the difference is called?
&gt;bar[foo ? 'doSomething' : 'doSomethingElse'](el); I've never seen that syntax before... the *function name* is selected by the ternary operator... yet I don't see "Eval"... So I expect **bar['function1'](attribute1)** Is equivalent to **bar.function1(attribute1);** What's the mechanism with the square brackets looking up the name of the function ?! Does that mean I could also pass in the square brackets a variable with the function name in it like this: var funcName='doSomethingOther'; bar[foo ? 'doSomething' : funcName ](el); So if true: bar.doSomething(el); If false it's like this?: Eval("bar."+funcName+"(el);")
* read, read, read, read.* Hm, I couldn't answer any of those comfortably, and I've been dipping into JavaScript for many years. =(
Why is it a bad idea in general for built-in objects? For instance, what's wrong with Array.prototype.unique?
Extending the prototype of *Object* is bad, I don't see why extending other built-ins is too much to worry about. That's exactly my point that it's weird to extend Boolean, that's why I want to see if there are any valid use cases. Also, the above example is not mine, just the only case in the wild that I've seen where it is used (and that's by crockford who tends to *fairly* well respected views).
Don't feel bad, the author seems a bit smug about it all.
It's generally bad because you are essentially creating your own version of the JavaScript API. So, now you are introducing side-effects of your library that other programmers will not know about or will be confused by the non-standard method of the built-in classes. If it's for your own library and own uses, then there really isn't a problem. However, you should be considerate in extending the built-in objects if you are creating a library that you want others to use.
Localized library-intended changes to the JavaScript API is reasonable because they serve a purpose and are not mixed with other non-related libraries. Crockford was simply using the JavaScript API as an example of how its possible to augment existing objects. He never really condoned extended objects in the global sense -- Just showed that it is possible and can be localized when convenient. Notice he always said, "Yeah, they forgot to add this useful method. I __can__ add it to the prototype and get what I want." So, yeah, there is nothing wrong with augmenting built-in types, but it is wrong if you just blindly do it and assume the programmer can just figure it out on their own.
Nicholas Zakas explains it better than I ever could here: http://www.nczonline.net/blog/2010/03/02/maintainable-javascript-dont-modify-objects-you-down-own/ My comment is at the bottom - I generally agree with his post, but I think exceptions could be made for adding methods based on the ECMAScript standard which are not yet universally implemented, such as this: if(!Date.now) { Date.now = function() {return (new Date().getTime())}; } But I could imagine it's possible even that might create problems.
I'll read that soon, but my point is kinda meant to be more broad than regular programming practices, maybe I should ask "is there a prototype method for Boolean that could be included in a spec and be useful?".
&gt;[Firefox], along with all others, does not have majority market share. It got over 60% in Germany for example. Well, even if it's "only" used by 30% of your visitors, why wouldn't you add that little attribute (if possible) to improve things? Many people do a lot more to improve the experience for only 5% of their visitors. Also, every non-IE browser is updated regularly. It's perfectly fine to improve the experience for some of your users. Even more so if that percentage will grow in the future.
Hope you're not trolling. JavaSCRIPT... var bar = { 'a': function(){ alert('hay'); }, 'b': function(){ alert('bee'); } }; var foo = true; bar[ foo? 'a' : 'b' ](); var foo = false; bar[ foo? 'a' : 'b' ](); ...bar is an object with methods "a" and "b". In javascript, bar.a() and bar['a']() are exactly equivalent (methods are basically functions in slots on an object). Try this: &gt;&gt;&gt; typeof bar "object" &gt;&gt;&gt; typeof bar['a'] "function" &gt;&gt;&gt; typeof bar.a "function" JavaScript is pretty cool... check here: http://developer.yahoo.com/yui/theater/ (especially anything by crockford) and especially this one: http://video.yahoo.com/watch/630959/2974197 --Robert
Do you mean [this one](http://www.dontclick.it), perhaps?
This one: http://janne.aukia.com/zoomooz/
Not trolling! &gt;In javascript, bar.a() and bar['a']() are exactly equivalent(methods are basically functions in slots on an object). : nods : I see. In the murky depths of my mind I remember reading about C++ and accessing member functions via offsets to function pointers... seeing those square brackets was making me think some kind of compiler behind the scenes stuff was going on... You know like in Java when you declare and define a string in the well recognised "shorthand" notation: String abc="String!"; yet when you de-compile the bytecode it comes out as something like: charArray abc=new charArray(); String def=new String(charArray); def.set="String!"; But the compiler natively recognises the "short form" - it's not some operator overloading in an obscure add on class somewhere... I'm off to watch that lecture, it looks interesting, thanks! (I'm really out of practice of so many languages - they're all mushing together, so my syntax isn't near 70% even.) (I need to grow a beard, I think it would help).
Damn. I spelled cheat right 3 times before and got it wrong on the final submission. I've failed my English teachers.
In javascript, bar.foo() and bar[foo]() are the same thing. You can access any properties with either the dot notation or the bracket notation. This is also one of the points of confusion for people learning arrays in javascript. var bar = { "hi": function(){ console.log("hi text"); }, "bye": function(){ console.log("bye text"); } }; var foo = "hi"; bar[foo]();
ASP.NET uses &lt;% %&gt; I use jQote which is Resig's version in a jQuery format and I always have to change it to &lt;? ?&gt; to avoid conflicts.
Sounds almost like http://www.cooper.com/ but I don't think that's it either. :/
A friend of mine actually asked for an example of how something like that could be done. He requested a demo of a 3x3 website that starts in the middle, and links would navigate you to other blocks of the site. I've never done anything like that before, but here's what I came up with if you're interested: http://www.firststepaffiliate.com/scrolltest. Only the first 3 buttons work because it was really late, and I figured he got the idea.
title.replace(/Advanced/, 'Performant'); // IMO
Awesome, took me a little while to figure out that it's actually interactive! I'm definitely going to be messing around with this... http://www.nihilogic.dk/blog-files/background.js
Im having a hard time understanding this new templates thing. Can someone elaborate for me?
Sheeeeeeeeeeeeeeeeeeeeet.
What about sending the data across as JSON, with no HTML, and generating the HTML from the JSON data on the client side? That would avoid any slow selectors and the need to use `$.parseJSON()` (also a likely bottleneck for IE). Like: &lt;table id="fooTable"&gt;&lt;/table&gt; &lt;script type="text/javascript"&gt; var data = [ {"foo": 1, "bar": 2}, {"foo": 3, "bar": 4} ], // Work with a new table to prevent a bunch of redraws table = $('&lt;table&gt;', { id: 'fooTable' }); $.each(data, function (i, val) { var row = $('&lt;tr&gt;', { data: { ps_data: val }, html: '&lt;td&gt;' + val.foo + '&lt;/td&gt;&lt;td&gt;' + val.bar + '&lt;/td&gt;' }); table.append(row); }); $('#fooTable').replaceWith(table); &lt;/script&gt; 
That would be another option, though it could have its own performance issues as building that huge structure in memory and then appending it to the DOM would probably also tax IE quite a bit. In addition, there are some architectural limitations in that particular project which make this approach hard to implement, but that's not relevant to this discussion. Though for science's sake, I should try how fast building that table in memory would be compared to just emitting it as page content.
You don't appear to share the whole table template from what I can see, so this is wholly based on assumptions. You're using 'class="lineitem"' to separate content from headers, aren't you? Don't! You already have &lt;th&gt;, &lt;thead&gt; and &lt;tbody&gt; for that. You are even allowed to have multiple &lt;tbody&gt;ies. tbody = document.getElementById('#whatever') for (var i = 0, row; row = tbody.rows[i]; i++) { } It shouldn't be able to get much faster than that. @JSON You could probably use a [DocumentFragment](https://developer.mozilla.org/En/DOM/DocumentFragment) to add the data in chunks and possibly [avoid pagination](http://humanized.com/weblog/2006/04/25/no_more_more_pages/) if applicable.
I was a little disappointed to find all you can do is run and jump. Pretty awesome though.
Took me a while to find out how to get past the first level. But, the same trick works on all 4 levels.
&gt; How to kill IE performance: use any Javascript &gt; and how to fix it: block IE users FTFY
we are making heavy use of theads and tbodies. The reason for the lineitem class is that the same logic doesn't only apply to table rows, but also to &lt;div&gt;'s for example. .lineitem is used to tell the JavaScript running that this entity is the visual representation of a line item. This can be that table row, but line items can also appear on their own, not as part of a table. Being able to do all the event handling based on a .lineitem selector is very helpful (of course using delegate). The article was about providing an insight into IE's performance caveats (broad selectors, script-tags). It wasn't about how to correctly select elements in my particular case. As such, the article provided just enough sample code to highlight my points. None of the code samples are in actual use. 
How about a .then method that runs the passed function if this.valueOf is true and does nothing otherwise: (test &gt; 4).then(function () {/* do something */}) you could also have an .else value that was the opposite: (test &gt; 4).then(function () {/* do something */}).else(function () {/* do something */}) Nothing that's not already possible but it could make code that was a little cleaner in some instances. I've never used this functionality, to answer your question.
Nice to see a writeup on this, but jQuery 1.4.2 was introduced February 19th, 2010. I think it's inaccurate to claim to be introducing this feature.
I can't think of any situation where the same logic could apply to divs and table rows, but ok. &gt; The article was about providing an insight into IE's performance caveats (broad selectors, script-tags). It wasn't about how to correctly select elements in my particular case. As such, the article provided just enough sample code to highlight my points. You chose to add "and how to fix it" on Reddit, which is the title I noticed, and selecting an ID followed by iterating over the selected elements children is certainly one way that should fix it. Another way that should work is to use the 'defer' attribute, which were first implemented in Internet Explorer 4. Yet another possible solution is to do this: &lt;tr data-prodid="1234" data-quantity="1" data-price="10" data-foo="bar" data-blah="blah"&gt; Neither of these should require an abundance of script tags or broad selectors.
Thanks!
It's been out for a while but just got promoted to an official plugin. I don't know what that implies but it sounds like it's good enough for production use.
I think a lot of these issues come from the fact that Javascript, at its heart, is a functional language. Its syntax resembles that of an iterative language, and its got support for some iterative looping constructs but that's not enough to completely hide its functional programming roots. I think a lot of confusion and bad practice could be avoided if programmers wrote Javascript as if it was a Lisp or ML variant than if it were a Java or C variant.
That wouldn't be too hard to do. For example: Boolean.prototype.then = function (fn) { if (this.valueOf()) fn(); return this; }; Boolean.prototype.else = function (fn) { if (!this.valueOf()) fn(); return this; } However, I'm not sure if it really makes the code cleaner -- mainly because of the bulky `function` expressions. Plus with the ternary operator it's a bit redundant. Regardless, I wish it weren't so looked down upon to extend the prototype. I understand the consequences (which is why I don't practice it), however it seems like a waste not to use this language feature on the built in types. We could come up with some really concise code if it weren't for that. Oh well :(.
What's the DOM structure? And I think you should use `removeChild` and `appendChild` instead of array operations.
&gt; And I think you should use removeChild and appendChild instead of array operations. Yeah, I don't wander out of jquery too much, so I used what was familiar to me. I'll take a look at those. The dom is basically &lt;div&gt; &lt;div class="slide"&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="slide"&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;a href="url"&gt;&lt;img src="url" /&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; The script goes through and displays the slides. The code snippet I posted is to make the links rotate each time the slide is shown. It works fine, only in IE it is removing (or not adding) the image tags from within the links. 
Here's my approach: var slideHolder = this.sliders[this.pointer] , itemToMove = slideHolder.getElementsByTagName("a")[0] if (itemToMove) slideHolder.appendChild(itemToMove) Not tested, hopefully it works :) edit: check the reference for more: https://developer.mozilla.org/En/DOM/Node.appendChild
Works like a charm. Thanks again. Will look at the reference.
Cool script, just wish it wasn't named something so common.
Yeah, I hate naming things. Every name sounds so hokey.
There are a few things you can do to make the accuracy of the tests a little better. For instance, the length property requires JS to loop through every item. Inside a for-loop, that changes it from O(n) to O(n^2). Try this: for(var i=0, iLen = array.length; i &lt; iLen; i++) Another point is that you are comparing Apples to Oranges. The DOM is notoriously slow, and maybe that's the point of your comparison. But it doesn't seem fair to compare this giant beast of an API to the most basic, native object in the language. It's like comparing bullet speeds between a rifle and a slingshot. Use the tool that fits your needs best.
about 38 times.
[here's my version of this idea](http://qaa.ath.cx/javascript_loadlib.html). Appending to a document.head can be ignored and their are lots of other issues. Google's analytics code injection works by breaking up the string in an interesting way. I've found that browsers with security restrictions about a top level element will actually be ok if you inject scripts a slightly different way. Also, you need some type of callback you can execute at a certain time along with a way of detecting if it's been loaded before
If you have to decide if you want to generate a graph from a table of data (progressive enhancement) , it can be useful to know *of much* slower it is to do so instead of just using JSON.
Does anyone trust these for cross browser compatibility testing?
works great for me. although "no installs" is misleading as you have to install a plugin.
What do you mean? Are you concerned about security?
OP is author of blog, JSYK.
No I'm just wondering if it's pixel perfect and a has all the quirks of the real browser. I found that MultipleIEs didn't actually render every browser the same as a machine with that version natively installed. I've also seen different versions of IE6 render differently on different machines. Since then I've been wary of this kind of silver bullet.
They're not completely sandboxed, but work well for most testing. I use them daily for front end development on a website with 400k users. They're much faster than running VMs. I've heard they can't always replicate XDM bugs though, but cross domain isn't something I have to deal with.
Also, 'childNodes' will loop over newlines if there are any in every browser except IE which might affect your data in some cases. You can substitute with 'children' in modern browsers, but that's much slower for some reason going from ~16x slower to ~22x slower here. Luckily, table and its sections have the 'rows' property which you can use instead and the rows in turn have the 'cells' property which is as fast as 'childNodes'. Using 'textContent' instead of 'innerHTML' is also much faster, going from ~16x to ~12x here. All deviations above are in the Â±.7 range when I tested.
This would be a great article to sprinkle with links for http://promotejs.com/ 
Absolutely wrt to callback. By "it's been loaded before" I'm assuming you mean the script to be loaded and not the loader itself. Yeah, save bandwidth. Was considering a privileged var that would hold the list of scripts that have been loaded. I'm also considering not appending it to the head at all, just putting it somewhere in the document. Since the script will be executed as soon as it's loaded, it doesn't have to necessarily be appended before the script calling it. If the user can pass in a callback.
All I get is "Sorry, SPOON isn't available for Linux!"
"Sorry, Spoon isn't available on your browser yet! Please try again from a different machine or browser." So not really
::sigh:: back to VirtualBox or rdesktop I suppose.
I have used it myself with really no hassles while working in web QA. MultipleIEs doesn't separate the browser engines (so it seems) which is why I never use it due to reliability. Spoon.net seems to sandbox/virtualize the apps and settings. Granted, you may not always catch some of the browser + OS specific bugs, those are usually very rare in occurrence. I personally trust that it is safe to use in terms of development and non-mission critical QA testing. 
Thanks for the feedback. I'll give it a try.
"Sorry, Spoon isn't available on your browser yet! Please try again from a different machine or browser." Don't launch until there's something worth launching.
If the plugin is already installed, it will work for all browsers. When I first tried it, the plugin wouldn't install in chrome. Using firefox, it worked for me. Give it a try. You'd be surprised.
I'm on a Mac. The only thing I would need to use this to test is IE.
I like the Head First books; I have several of them. I find them to be just right for quickly getting up to speed on something. I have both the ones you mentioned.
This is the first thing I noticed too.
I was a big fan of the Head First Design Patterns book. My favorite book for learning Javascript was Stoyan Stefanov's [Object-Oriented Javascript](http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141/ref=ntt_at_ep_dpi_2).
I don't have any experience with the "Head First" series. FWIW, [Javascript: The Good Parts](http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/) is the gold standard in javascript books.
&gt; Using 'textContent' instead of 'innerHTML' is also much faster, going from ~16x to ~12x here. Unless you're in IE, in which case you're going to want `innerText`.
I went through Head First: Java. Really liked it. Explained a lot about OOP.
could someone tell me how does it actually work? haven't installed it yet. is that Flash? does it display bitmaps created server-side? what's the technology?
Dude. That's me. I just frontpaged it. I am the lucky 7777th reader. Sweet.
Yes, please get this. Douglas Crockford is not only incredibly knowledged about javascript, but he is very good at conveying what you need to know without going into anything unnecessary, you will get a very high knowledge to effort ratio with anything of his. 
Polyfill is necessary. That's what it is.
Nah, it's me, I just unsubbed and resubbed.
Sorry to disappoint but as of right now, you're looking at 7777 :)
Yeah, you are out of luck there unless you use some sorry of virturalization software of your own. There's something in the faqs about macs I think.
It's not flash nite is it just bitmaps. I'm nit sure what they are doing behind the scenes, but the application functions as if it was a native app installed on your machine.
You should probably contact [appendTo](http://www.appendto.com/). They're based in Denver and about as legit as they come when it comes to jQuery.
LOL... I'm a web dev, but also a seamstress/crafter. [Polyfill](http://www.amazon.com/Mountain-Mist-Fiberloft-Polyfill-Stuffing/dp/B000GIEULG) is also a stuffing for pillows and such. I was confused for a minute there...
Sweet, now I can do 4*7777 damage on Ruby Weapon for every turn.
I really hate that neither the table nor the graphs tell you what the numbers represent. Without labels the data is meaningless. 
In my limited testing, the fastest for() loop is a while() loop. Start with a normal for(): for (var i = 0; i &lt; values.length; i++) { ... } Take out the property access: var len = values.length; for(var i = 0; i &lt; len; i++) { ... } Reverse the loop: var len = values.length-1; for (var i = len; i &gt;= 0; i--) { ... } Finally, remove unnecessary fluff: var i = values.length; while (--i &gt;= 0) { ... } At least, in Firefox the last one should be the fastest way to go through an array. EDIT: I added some while loops: http://jsperf.com/fors-vs-while
I think the numbers are supposed to be the number of iterations per second for each method.
I am guessing that bigger is worse? As in longer execution time? But means the ipad/iphone are the best? So, it must be the opisite of that?Totally worthless data.
My computer gets 2 brazillion!
Why don't you just try building things with it, and hit up #jquery on freenode if you get stuck with something? Sorry if this sounds like non-advice, but I think it's the only real way to learn programming. If you really just need an introduction, I think you're better off with some YUI Theater Douglas Crockford videos. I'd also check out the Peepcode Jquery screencast, if you can get your hands on a torrent.
I'm not really understanding all the flack that this is getting based on the comments. I've been using Spoon for a few weeks now strictly for IE testing (IE7/IE7) and have found it to be pretty invaluable. IETester worked somewhat nicely but I found I get more accurate rendering results with this. Installed the Chrome plugin and got it running without any problems.
I'm on Chrome in Linux - I don't see a video, just a picture in the lower right corner. Clicking doesn't do anything. Am I doing it wrong?
Would be sweet if the video kept playing even while broken up.
Related: http://github.com/mootools/slick/wiki/Reversed-Combinators
It does here. Chrome 6, Linux.
This has also been my biggest question. jQote2 rocks. It's fast, it uses standard Javascript, and it's based off Resig's work. I'll keep using jQote2.
Isn't the official template plugin backed by Microsoft? That would explain a lot.
This has been done before, and IMHO way better: http://www.craftymind.com/factory/html5video/CanvasVideo.html (The OP's code kills my browser, while this code remains smooth as butter)
You can just write `for (i = a.length; i--;) {...}`. You can of course also write `i = a.length; while(i--) {...}`. (And yes, writing it like that is a little bit quicker.)
Have we seriously forgotten how to use for loops?
Hmm, I guess it just didn't seem to do that at first.
Though the effects look somewhat similar, the version you cited is actually quite different. Notice that in the OP's version the blocks bounce off one another while in craftymind's version the blocks simply overlap.
I'm on Chrome OSX. To be more detailed, on a 2010 MacBook Pro (2.4gHz, 4gb RAM) yours was nailing around 3fps the whole time -- unusably slow. 
Chromium on linux here also, works like a charm. Maybe you've got an old/bad build?
What does this new version brings to the table?
Doesn't work at all for me in Chromium 6.0.472.62 (59676) on Ubuntu 10.04.
Rule number one of screencast voiceovers: must have a strong accent.
God damn I love jQuery.
from the article &gt;There are a few areas in jQuery that have seen extensive changes since 1.4.2 was released: &gt; &gt;.css() and related css-handling methods were all overhauled. &gt;Logic for determining element visibility and toggling of display in animation code. &gt;Much of the traversing logic has been improved and changed (is, filter, closest, find). 
This guy's accent seems to be a mix between Borat and Christopher Walken...
Glad this helped out someone else as well! :-)
One anti-feature of jQote looks to be that it uses the same delimiters "&lt;% %&gt;" as ASP.NET which is gonna make it incompatible with .NET development.
"Windows XP x86 is not a supported platform for this application" Well I guess I can't use this at work where I would use it quite regularly.
Actually, it allows you to change the delimiters to whatever you want with a couple lines of code: $(function() { // Globally change the delimiters to &lt; $ .. $&gt; // right after the DOM has loaded $.jqotetag( '$' ); // From now on jQote2's delimiters defaults to &lt; $ ... $&gt; });
Define "major apps". I've been working with GWT and GXT for the last 2 years, built 3 apps for healthcare customer, about 50k SLOC each (not counting the "server" code), dealing with fairly large DTOs (9k SLOC just for DTOs). We've built a small "framework" for GXT bugs/quirks/workarounds and uniform RPC mechanism (no need for GWT Async interfaces to change). That said GWT is not really the core of my expertise, I mostly write GXT-compatible code. GWT just provides the way to get the Java code running in the browser. **Good:** * Debugging in Eclipse rocks! * Mostly everything can be done Java-way * GXT has a lot of features * Cross-browser works if you stick to core GWT * FF performance is acceptable, Chrome performance is great **Bad:** * GXT has a lot of bugs * GXT is bloated * Getting stuff to look/behave like you want can be a PITA * Dealing with large amount of inter-widget-data-dependencies (what you may call a "complex front-end logic") can be a PITA * Sometimes stuff just stops working and when you fix it you realize it should not be working in the first place. * IE performance is crap It's not in my power to switch from GXT to GWT-only so this is totally biased and YMMV. You can AMA.
Here's quick outline of my thought process: - JavaScript isn't hard - Cross-browser stuff isn't that hard (use jquery duh) - GWT adds a lot of bloat (multiple html files for one page? why? [answer: it's GWT answer to cross compatibility]) - You compile GWT (ugg!) - JSNI is a headache - GWT is NOT faster. This is a pet pieve of mine. Everyone says "GWT is compiled so naturally the JS is super fast and optimize". This is very untrue. Any performance gains GWT could provides quickly out moded by the overhead of maintaining Java semantics in Javascript (e.g. out of bound array checks). - There are GWT compiler bugs (I ran into one; took me a week to find it) - GWT complicates your build system - GWT pages load slower (IIRC, GWT first servers a "dummy" page that determines which OS and browser you're running, only THEN does it fetches the actual content. In other words, 1 page load == 2 page request. [what were they thinking?]) - I like JavaScript more than Java This is not a fair and balanced list. I'm sorry for that. I'm just expressing my experience and opinions.
&gt; GWT pages load slower (IIRC, GTW first servers a "dummy" page that determines which OS and browser you're running, only THEN does it servers the actual content. In other words, 1 page load == 2 page request. [what were they thinking?]) You forgot to mention that the "page switch" in GWT app does not mean another 2 requests for HTML. After first load you do "panel show/hide" to show different content and you only get pure content (without markup/bloat) from the server using GWT-RPC. Just making this clear.
GWT is not for building web pages. GWT is for *applications*. When building an app, page loads are less of a concern because there are only one, maybe two pages. You can also define bloat as a lot of cross browser cruft that never gets ran because you're in the wrong environment (IE "fixes" are downloaded but never executed because you're running in FF. More over, the checks for those fixes are ran *every time* the fun executes). Again, this comes down to what you're building. If you're building a web site with many pages that gets hit tens of thousands of times an hour then yes, use jquey and worry about download size and number of HTTP requests. But if you're building a long running app used by 1000 people or so, HTTP requests and download size are simply not an issue. GWT is not a competitor of jquery. They live in two different problem domains.
GWT is for major apps *only*. If you try to use GWT to build your blog site or something, you will have a *horrible* time. GWT is for large projects with many lines of code usually collaborated on by several people. It exists because developers are familiar with java. There are hundreds of dev tools for java projects. Collaborating on js projects is harder. GWT makes building large HTML/js/CSS projects easier by leveraging those java project tools. As far as my experience with GWT, I like it. It streamlines app development very well. GWT RPC bit me pretty hard though. Apparently it tries to ensure the content type of each request as UTF-8. One servlet container we support reports that content type as "UTF8" (no dash). So GWT throws an error. I lost a good bit of hair over that one.
&gt; Is anyone other than Google building major apps with it? Google isn't even building major apps with GWT.
&gt; JavaScript isn't hard Large JavaScript is pretty hard. Try changing the return type of a function or an argument. Well, you don't really change the type you just use a value with a different type. But how do you know other code didn't break. What about more complex refactorings? Unit tests is the common answer, but I really like having my IDEs help. &gt; Cross-browser stuff isn't that hard (use jquery duh) But GWT makes it trivial. You almost never have to think about it at all. &gt; GTW adds a lot of bloat (multiple html files for one page? why? [answer: it's GTW answer to cross compatibility]) Not necessarily. You can use server-side script selection to get it down to one page load. &gt; You compile GTW (ugg!) Yes, this is true. The Google Plugin for Eclipse makes life much better though. It incrementally compiles on the fly as you develop. Just reload the page. &gt; JSNI is a headache Hopefully you write very little JSNI. I only use it when allowing GWT to interface with other libraries or user-written script and then it's only a small shim. GwtExporter is awesome too. &gt; GTW is NOT faster. This is a pet pieve of mine. Everyone says "GTW is compiled so naturally the JS is super fast and optimize". This is very untrue. Any performance gains GTW could provide are quickly out moded by the overhead of maintaining Java semantics in Javascript (e.g. out of bound array checks). Who does bound checking in Java anymore?: for (foo : foos) { doFoo(foo); } &gt; There are GTW compiler bugs (I ran into one; took me a week to find it) A few. They get fixed very quickly if you work from trunk. There are bugs in any system. &gt; GWT complicates you build system True. &gt; GWT pages load slower (IIRC, GTW first servers a "dummy" page that determines which OS and browser you're running, only THEN does it fetches the actual content. In other words, 1 page load == 2 page request. [what were they thinking?]) Use server side script selection. GWT only requires two page loads because by default it does client-side browser detection. Generate your html from JSP, GXP, a servlet, or whatever and this isn't an issue. &gt; I like JavaScript more than Java Me too. Except for the lack of type safety, the horrible set of numeric types, major, major scoping problems, "this" is broken, eval() should be able to be turned off, no class system... The bastard child of JavaScript could be pretty nice, something with type inference, closures and function literals, but that's not happening soon.
At the risk of causing a flame war, I will reply to your arguments: - *GWT is for applications.* (See JSNI nightmares and compiler bugs) - *Downloading IE fixes you never use.* Fair enough, but I'd point out that jquery is only 24k. Hypothetically, a jquery that only worked on Chrome or FF could be as small as 10k (I made this number up). A 60% reduction in file size would be nice, but if you took that route, you would need a jquery for Chrome, IE, and FF. So, in practice you would end up with 30k worth of jquery code laying around. This doesn't include the jquery-version selection logic, nor does it account for the additional cognitive weight a slightly more complicated webapp. But fair enough, for cross compatibility you either need "bloat": either on the serverside or clientside. Pick your poison. - *GWT and jQuery are in two separate domains.* Though I mostly agree, I feel that their domains overlap significantly. I know of several webapps (e.g. etherpad) that are built with jquery. - *GWT is not for blog engines.* Agreed. - *Developers are familiar with Java.* Fair enough, but I'd argue that Java is becoming a legacy language. A new version hasn't been released in nearly [4 years](http://en.wikipedia.org/wiki/Java_version_history#Java_SE_6_.28December_11.2C_2006.29).
GWT really shines when you're doing RPC heavy apps and use some of the more advanced features. * RPCs are incredibly easy to define, and serialization is handled automatically in most cases. Serializable exceptions thrown on the server are returned to the client. You can catch outgoing requests before they're sent to implement batching or validation. * Sharing code between client and server. Use the same validation logic, the same data objects. * UiBinder: Declarative UI in XML * ClientBundle and CssResource: css preprocessing, variables, obfuscation/namespacing, inlining. You get a custom Java interface into your CSS. * GIN: Guice (dependency injection) for GWT. Wiring large apps together is cake. Really though, if you're not doing Java on the server, you lose many of the benefits.
The main thing you should take away from my comment is this: GWT was not built to make traversing the DOM easier or to bridge the functionality gaps between the browsers. It accomplishes these goals but they are not its main purpose. GWT was created to leverage existing development tools and processes in medium to large development shops. It was created to drop right in to your existing development cycle. That's how it makes creating web apps easier. All of your statements indicate to me that you were using GWT outside of its problem domain. A lot of what you say has merit and I agree with (js isn't hard, you can build very nice apps with jquery). But if you already have infrastructure set up for building a non "web 2.0" app (servlets and jsps for example), it can be time consuming and hard to set up a different process for building the "web 2.0" app. GWT alleviates this. It's what it's good at. It's what it was built to do.
I've heard that Google Wave was done on GWT, not sure if it is true
It's partially true. Wave was supposed to be the GWT showcase app. Rumor is there was a LOT of reimplementation of really basic GWT stuff to get it to work.
A newer version of C hasn't been released in over 10 years, and I don't think C is going away anytime soon.
If you mean basic widegets, sure. Anyone who has used GWT and needed some custom widget behavior has done the same. If you mean code splitting added to the compiler, that was rolled out to everyone in 2.0.
the adwords web app is written with GWT. not a small deal.
Don't use it. Learn javascript basics, prototypal inheritance, objects, basic javascript types, closures and scoping. Learn the singleton pattern and build classes using prototype chaining. Then start to learn jquery and your life has become incredibly simple. Your apps will be faster, less bugs and you will be able to fine tune your code for speed and readability.
He's Brazilian :D I love his accent, hehe.
throws. youre velcome.
I'd love to see some commentary on this by someone who has actually built an HTML display engine.
Thanks. I didnt realize I made a error.
Thanks! I posted a little extra information above. But specifically regarding your comments, I'm curious: in our app performance is a really big deal. We've spent a lot of time tuning performance in IE7 to be at least within the same order of magnitude as Chrome and for the foreseeable future, performance in IE will matter a lot. How bad is the IE performance in GWT generated code? You list the "Java-way" as a benefit of GWT, and no doubt that's true for Java developers :-) But do you think that's also true for Javascript developers and other "web" people? I.e., will it be difficult to become productive in the GWT way of doing things if you've been working largely with a home-grown JS codebase that's grown quite large?
I'm pretty comfortable with JS ... but the question is more about growing a team of people who work with a pretty sophisticated front-end and add functionality to it. In practice, it's turned out to be pretty hard to find programmers who are good at / want to work with Javascript. So what I'm trying to gauge is whether using GWT might enable us to find more front-end developers (hitting up the relatively large number of Java devs) even if we already have a large Javascript codebase.
Yeah, but C is just a language and a small library of core features. The libraries I call from it are constantly improving. Java ships with a lot of stuff, it's a bigger issue for that stuff not to be updated than it is for C as a language to have solidified. Also C *is* progressing. http://en.wikipedia.org/wiki/C1x
I agree. I thought they were measuring milliseconds, in which case lower numbers would be better. But now I think it is iterations per second.
lol... I watched the whole thing and I think you're SPOT ON
&gt; Who does bound checking in Java anymore?: for (foo : foos) { doFoo(foo); } GTW generates type and bounds checks in the output js. Although the amount that this slows things down is probably negligible, I think that is what Xavi-avi was talking about.
I ran into a huge kick-in-the-balls with GWT-RPC. It tries to ensure the content encoding is UTF-8 on all requests it receives. One servlet container we support reported the encoding as "UTF8" (no dash) and GWT threw an exception. This isn't really GWT's fault, the servlet container is stupid, but the problem is there was no hook to override this check in RemoteServiceServlet (or maybe it was AbstractServiceServlet, I can't remember) as all pertinent methods are final. So, yes, it is really nice and easy to write GWT-RPC services but you relinquish a lot of control when you do.
Regarding the 'Java Way', there is a simple criterion: if more than 3 people will touch the front-end, then GWT will work better for you. Increase this number is you have better developers, decrease it if you have run-of-the-mill developers.
Comparing GWT to general JS is unfair. GWT is an compiler and an application framework. JS is a language. If you do serious JavaScript applications you will also need a MVCish framework like Ext.JS, Cappuccino, Sproutcore, Sammy.JS ... (Funny how http://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks doesn't even mention MVC or something similar)
&gt; performance in IE7 What you have to understand is that with GWT (more specifically GXT) you relinquish control over HTML/DOM part of you app. The whole structure is generated on the fly, which depends on browsers JS and DOM performance. In my experience the IE7/IE8 was way too slow for our customer to use. But that may be the consequence of GXTs bloatness. I can not provide data for IE9, though. I do believe (but have no proof or benchmarks) that pure GWT with custom widgets and declarative UI IS faster and closer to the "web people". If you have a large JS codebase and you feel comfortable working with it without generating more bugs every day than IMHO you should stick to it. On the other hand, GWT code will give you: * more structure, * compile-time checking, * image bundling (images turn into a sprite), * CSS bundling (CSS gets translated into JS), * code-splitting (the app is downloaded in portions so you can get your "index" screen shown ASAP and the rest of the app later), * string translation, * an efficient RPC mechanism (which uses POJO objects which you can reuse directly with your Java-based backed, if you have one), * debugging of your client-side code while communicating with production backend. I can keep listing the good and the bad but you should really invest a week or two to explore the capabilities and limitations. Create a small app and implement the most complex and data intensive screen that you have. Then interface it with your backend (either with custom RPC or GWT-RPC that does data translation on the servlet) and do some benchmarks. I see that you're working with ExtJS atm and I know that your impulse will be to use ExtGWT with GWT... don't! IMHO it brings more pain than good. Also commercial licenses are not very cheap. :/ Try and replicate your functionality with built-in/custom widgets, it may pay off big time. 
Thanks for the thoughtful response. I appreciate it! Our back-end is custom and we're not going to be migrating it to Java. The API itself is pretty platform agnostic and the front-end layer that talks to the API is pretty solid and easy to debug anyway. I think you're right about more investigation. Thanks for all the feedback :-)
&gt; Really though, if you're not doing Java on the server, you lose many of the benefits. This seems to be one of the recurring motifs in people's responses. In terms of the RPC benefits, our API has been around for several years and we've ironed out the issues between the web client and the API anyway ... so that particular strength of GWT wouldn't have been too compelling anyway (since we would not be re-writing the back-end in Java).
&gt;"this" is broken that's why you use [mochikit](http://mochi.github.com/mochikit/) and it's [bind](http://mochi.github.com/mochikit/doc/html/MochiKit/Base.html#fn-bind) and [bindMethods](http://mochi.github.com/mochikit/doc/html/MochiKit/Base.html#fn-bindmethods) methods. those methods sets your "this" pointer to be 'correct'.
I was thinking the same thing.
&gt; This would probably never fly on the App Store because it executes code or interprets it but is a very nice experiment. Therein lies the problem. Too bad, seems promising.
You're allowed to do that now, the licence was updated at the same time that iOS 4.1 was released.
Eh. Why not link to the original blog post instead? http://www.phoboslab.org/log/2010/10/impact-for-ios
I use jQote2 with ASP.Net all the time. I just changed the delimiters to &lt;? ?&gt; 
&gt;Sorry to be such a persistent git, but I've still not got there with shutting down my NAS, and &gt;I've found a script by someone else to shutdown a similar NAS (another buffalo that uses &gt;javascript to shutdown). &gt; &gt;They've used VB however, instead of bash. There's looks like this &gt; &gt;msgbox "[message-text]",vbExclamation,"Shutdown Terastation" Set xml = &gt;CreateObject("Microsoft.XMLHTTP") xml.Open "POST", "http://[user-name]:[password]@[terastation-name]/cgi-bin/ts.cgi?page=maintenance&amp;mode=shutdown&amp;type=setup", False xml.Send "txtClickButton=shutdown" Set xml = Nothing &gt; &gt;Apparently just passing the name and password means no further auth is required. I'll post this in the old thread for context. A translation of the vbscript would be just curl -d txtClickButton=shutdown "http://[user-name]:[password]@[terastation-name]/cgi-bin/ts.cgi?page=maintenance&amp;mode=shutdown&amp;type=setup" This, however does something completly different than what we tried before. Don't hesitate to ask for more help. Tinkering is fun.
I've sent you some other private messages. I'll be posting the complete script publicly, that much is for sure. Probably do an article on it too. I'm confident with the new findings that this is indeed possible, I feel like I'm (we're!) getting closer anyhow.
Interesting find. This seems to work as a workaround on the blur event handler (tested on Chrome 7.0.517.36 beta): setTimeout(function() { $("#is").hide(); }, 50); Edit: Alternatively, you can hook the mousedown event on the select-box (which fires before the blur-event on the text field), do your thing and then call preventDefault() on the event object to stop the blur handler from crashing the browser. You'd need to also hook the focus event on the textbox and set some variable that lets you test for this condition ("blur is imminent") in the mousevent handler. Edit 2: Something like this: // #it is text input // #is is select input $("#is").hide(); $("#it").bind('click', function() { $("#is").show(); }); $("#it").bind('focus', function() { $("#is").data('blurIncoming', true); }); $("#it").bind('blur', function() { $("#is").hide(); $("#is").data('blurIncoming', false); }); $("#is").bind('mousedown', function(e) { if ($(this).data('blurIncoming')) { $(this).hide(); $("#is").data('blurIncoming', false); e.preventDefault(); } }); This, however, causes occasional crashes Ì¶wÌ¶hÌ¶eÌ¶nÌ¶ Ì¶cÌ¶lÌ¶iÌ¶cÌ¶kÌ¶iÌ¶nÌ¶gÌ¶ Ì¶tÌ¶hÌ¶eÌ¶ Ì¶aÌ¶cÌ¶tÌ¶uÌ¶aÌ¶lÌ¶ Ì¶oÌ¶pÌ¶tÌ¶iÌ¶oÌ¶nÌ¶sÌ¶ Ì¶iÌ¶nÌ¶ Ì¶tÌ¶hÌ¶eÌ¶ Ì¶sÌ¶eÌ¶lÌ¶eÌ¶cÌ¶tÌ¶ Ì¶aÌ¶nÌ¶dÌ¶ Ì¶cÌ¶oÌ¶nÌ¶sÌ¶iÌ¶sÌ¶tÌ¶eÌ¶nÌ¶tÌ¶ Ì¶cÌ¶rÌ¶aÌ¶sÌ¶hÌ¶eÌ¶sÌ¶ Ì¶wÌ¶hÌ¶eÌ¶nÌ¶ Ì¶cÌ¶lÌ¶iÌ¶cÌ¶kÌ¶iÌ¶nÌ¶gÌ¶ Ì¶tÌ¶hÌ¶eÌ¶ Ì¶sÌ¶cÌ¶rÌ¶oÌ¶lÌ¶lÌ¶bÌ¶aÌ¶rÌ¶ . Go figure. Looks like your best bet is that setTimeout() hack.
I'm on the same version but nothing happens. Scratch that; I didn't read the instructions in the bug report.
I'm getting a 403 Forbidden on that bug-report. Your client does not have permission to get URL /p/chromium/issues/detail?id=58972 from this server. Tried opening it in a separate tab in case they were blocking certain referrals but no dice. Anyone else get this?
I don't get it, you're not specifying an integer nor a float - you're specifying a string. I just tried this on this very page, I opened the console in Chrome/FF and typed document.getElementById('header').style.fontSize = 12 + 'px'; then document.getElementById('header').style.fontSize = 12.5 + 'px'; then document.getElementById('header').style.fontSize = 13 + 'px'; This caused the header-div (the one containing "JAVASCRIPT comments related") to change sizes all three times. Perhaps wrap it in parenthesis due to this: typeof 12.5 + px; // "numberpx" typeof (12.5 + px); // "string" This is on Chrome 7.0.517.36 beta. 
Try [this blog post](http://chetansurpur.com/blog/2010/10/why-node-js-is-totally-awesome.html) out for size.
&gt;Even if Google fixes the problem, we still need to support old copies of Chrome. No, you really don't need to do that. Within a few days after release every Chrome user got automatically (and stealthily) updated to the new version. That's why Chrome would be the best choice for people who still use IE6, IE7, or IE8.
It's probably good to note that you can reduce this down to a non-jQuery specific thing and it still breaks. Just in case someone was wondering if it has anything to do with jQuery. &lt;script&gt; var $is = document.getElementById("is"); var $it = document.getElementById("it"); $is.style.display = 'none'; $it.onclick = function () { $is.style.display = 'block'; } $it.onblur = function () { $is.style.display = 'none'; } &lt;/script&gt; It's also probably good to note that this **does not crash** if the &lt;select multiple id="is"&gt; is instead &lt;select id="is"&gt;
Sorry, I misspoke with "integer." What I meant was that somehow the value is being rounded to an integer--12.4 renders as 12, 12.5 renders as 13. I could reproduce your success on this page with the js console. (12.1 is smaller than 12.4, which is smaller than 12.8, etc.) I commented out all js on my page and tried the same technique to my particular element, but it's still snapping to integer values. (?!) (I'm running Chrome 6.) This makes no sense. 
Works fine one mine. (Chrome 6.0.472.63, Windows 7 64bit)
Seems like a basic logic conflict. Basically you are telling it to hide the select menu when you take focus off the text field, while at the same time telling to to select something from said select menu... which is now hidden. Obviously it doesn't know what to do in this situation, but should be simple enough to fix. Strange it only has this issue with multiple select.
That seems way faster than the blur I implemented over the weekend: [http://morethanmachine.com/projects/jsexperiments/blur/falling.html](http://morethanmachine.com/projects/jsexperiments/blur/falling.html) I draw the image scaled down, run a box blur, and then scale it back up. It's less than a second, but the results aren't as nice. 
&gt; Perhaps wrap it in parenthesis due to this: In your examples the string concatenation will work as expected, there's no need for parenthesis.
It's possible that chrome can only display fonts at discrete sizes (don't know), try using '%', 'em', 'pt' etc. to see if you can get anything to display between 12px and 13px. Also best to try other browsers to compare the results (helps suggest if you have a bug in your code or Chrome has a bug).
Don't want to be nit-picky about this, but the data structure he describes is really called a [queue](http://en.wikipedia.org/wiki/Queue_\(data_structure\)), not a stack. So it should be called Queue Blur. Apart from that I think this looks interesting. Anyone care to do a comparison between Queue Blur and Gaussian Blur?
A crash bug might later lead to a buffer-overflow or security issue of some kind (they often do) so I guess they've hidden it until they decide.
Is your bug now marked as a security bug? I get a "403 Forbidden" error when looking for it. Other bugs open fine.
[Stack (data structure) - Wikipedia, the free encyclopedia](http://en.wikipedia.org/wiki/Stack_%28data_structure%29)
If you like this, you might want to check out [Summed area tables](http://en.wikipedia.org/wiki/Summed_area_table), they allow you to very efficiently do box blurs with a large radius by doing some pre computation on the image. There are also many tricks for [making gaussian blurs fast](http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/).
I called it StackBlur rather for the way the pixels are weighted and moved inside the kernel than for the kind of data structure used. But yes you are right - since it is FILO my "stack" is really a queue.
Bought Head First AJAX and regretted doing so. It's pretty neat if you have no prior knowledge and want to get a good understanding fast, but it's useless if you know more than the absolute basics.
the guy looks like he knows English enough for all of his JS, but he writes all his code comments in Japanese(correct me if I'm wrong) it'd be nice if those were in English too....
I think it's pretty self-explanatory. For example, I bet I know what `Main.FPS`, `Main.SCREEN_W` and `Main.SCREEN_H` do. 
It's only a matter of time before we return to the before times of long, long ago and start to see full 3D spinning cube navigation systems for sites a la Flash circa 1998! Using only JS and canvas of course. And can we please bring back loading bars? :D
ever heard of Google translate: / ** * The main class. * / function Main () { this.initialize (this, arguments); } / ** * [Constant] is the frame rate. * / Main.FPS = 60; / ** * [Constant] of the screen width (Unit: px) is. * / Main.SCREEN_W = 465; / ** * [Constant] height of the screen (unit: px) is. * / Main.SCREEN_H = 465; Main.prototype = { camera: null, scene: null, renderer: null, _wingLeft: null, _wingRight: null, _count: 0, _intervalId: 0, / ** * Provides initialization. * / initialize: function () { / / --------------------------------- / / 3D Initialization / / --------------------------------- / / Initialize the camera this.camera = new THREE.Camera (60, Main.SCREEN_W / Main.SCREEN_H, 1, 10000); / / Initialize renderer this.renderer = new THREE.CanvasRenderer (); document.getElementById ("container"). appendChild (this.renderer.domElement); / / # container added this.renderer.setSize (Main.SCREEN_W, Main.SCREEN_H); / / 3D scene initialization this.scene = new THREE.Scene (); / / --------------------------------- / / Create content / / --------------------------------- / / Ground var mat = new THREE.MeshColorStrokeMaterial (0xe0e0e0, 1, 1); var plane = new THREE.Mesh (new Plane (1000, 1000, 10, 10), mat); plane.rotation.x = -90 * (Math.PI / 180); this.scene.addObject (plane); / / Butterfly / / Create a butterfly's wings material (PNG file for reading) var matL = this._loadImage ("http://clockmaker.jp/labs/101003_js_3d/imgs/butterfly_wind_r.png"); var matR = this._loadImage ("http://clockmaker.jp/labs/101003_js_3d/imgs/butterfly_wind_l.png"); / / Create a plane butterfly wings pasted this._wingLeft = new THREE.Mesh (new Plane (200, 200, 1, 1), matL); this._wingRight = new THREE.Mesh (new Plane (200, 200, 1, 1), matR); / / To use the matrix calculation, automatic updates are turned OFF this._wingLeft.autoUpdateMatrix = false; this._wingRight.autoUpdateMatrix = false; / / Add to the scene this.scene.addObject (this._wingLeft); this.scene.addObject (this._wingRight); } / ** * Play. * / play: function () { / / Animation this._intervalId = setInterval (Delegate.create (this._intervalHandler, this), 1000 / Main.FPS); } / ** * Stop. * / stop: function () { clearInterval (this._intervalId); } / ** URL of the image * Create an instance of the Material. * @ Param {String} The URL of the image. * @ Return {THREE.MeshBitmapUVMappingMaterial} Materials * / _loadImage: function (path) { var canvas = document.createElement ('canvas'); canvas.width = 32; canvas.height = 32; var material = new THREE.MeshBitmapUVMappingMaterial (canvas); var image = new Image (); image.onload = function () { material.bitmap = this; }; image.src = path; return material; } / ** * SetInterval is a handler. * / _intervalHandler: function () { / / Set Animation / / Left wing var ml = this._wingLeft.matrix; ml.identity (); ml.multiplySelf (THREE.Matrix4.translationMatrix (-100, Math.sin (this._count / 10) * -25 240, 0)); ml.multiplySelf (THREE.Matrix4.translationMatrix (100, 0, 0)); ml.multiplySelf (THREE.Matrix4.rotationZMatrix (Math.sin (this._count / 10) * 40 * Math.PI / 180)); ml.multiplySelf (THREE.Matrix4.translationMatrix (-100, 0, 0)); ml.multiplySelf (THREE.Matrix4.rotationXMatrix (-Math.PI / 2)); / / Right wing var mr = this._wingRight.matrix; mr.identity (); mr.multiplySelf (THREE.Matrix4.translationMatrix (100, Math.sin (this._count / 10) * -25 240, 0)); mr.multiplySelf (THREE.Matrix4.translationMatrix (-100, 0, 0)); mr.multiplySelf (THREE.Matrix4.rotationZMatrix (Math.sin (this._count / 10) * -40 * Math.PI / 180)); mr.multiplySelf (THREE.Matrix4.translationMatrix (100, 0, 0)); mr.multiplySelf (THREE.Matrix4.rotationXMatrix (-Math.PI / 2)); / / Camera motion this.camera.position.x = 500 * Math.sin (this._count / 80); this.camera.position.y = 700; this.camera.position.z = 500 * Math.cos (this._count / 80); / / Render this.renderer.render (this.scene, this.camera); / / Rentaringukaunto this._count; } }; / ** * Delegate is a utility class that handles the transfer of the scope. * / var Delegate = { / ** * Create a transfer function scope. * @ Param func The function to execute * @ Param thisObj you transfer Scope * @ Return Function transfer functions have been * / create: function (func, thisObj) { var del = function () { return func.apply (thisObj, arguments); }; / / Property information is defined as a function del.func = func; del.thisObj = thisObj; return del; } }; var main = new Main (); main.play ();
So the jQuery Templates people bitched because you made them look bad. I don't understand why they are pushing it so hard when it's * More complicated than jQote2 * Slower than jQote2 jQote2 is dead simple, you just use any plain old javascript, giving you unlimited flexibility. I really don't understand the push for jQuery Templates over jQote2. Is it just because Microsoft is paying them? 
yeah it's just a general peeve, while his code makes sense and is well written not all code is this way.
I think it's awesome! I don't get exposed to other languages often, so it's fun to see once in a while though I hear what you're saying. Because of JavaScript's character support, you can do stuff like this: function Ï€() { alert('3.14...something'); }; Ï€(); Great for obfuscation, evil, fun, etc.
Best guess is that it has something to do with the way that multiple select boxes are rendered by the webkit rendering engine. Are you more worried about the crash or more worried about a workaround? Workaround, I'd just give it way negative margins and toggle the margins, rather than toggling the display, or I'd see if rewriting and destroying it on the fly each time works.
Except that underneath there is still a fully accessible website / navigation (if done correctly) so you can turn off JS and still have a normal webpage, [like this](http://mrdoob.com/projects/chromeexperiments/google_sphere/) as an example
It's not very encouraging that a browser release breaks a JavaScript library.
I really don't like the tone this article adopts; some extracts: &gt; For those of you geeks who donâ€™t live in caves, skip to the next &gt; section. For every one else (noobs, Iâ€™m talking to you too), keep reading. . &gt; Okay, you know how server-side code is usually written in PHP, or Python, or (sigh) .NET? Also, it's not all nice and good with async programming. With async programming comes the perils of callback-driven-development which is not managed properly might even drive you crazy and result in a complete mess. Of course, Node.js is a pretty nice thing to have if you know how it works and are aware of its shortcomings etc. But making it sound like the next best thing after sliced bread and that too with an attitude won't do it any good...IMO
Good to know! This actually explains why I've been slowly going mad trying to use chrome. I was *sure* things were subtly changing on me all the time. Guess they were!
Actually, the original issue we ran into was with a regular select. Our front-end developer was originally not using a select multiple, but a regular select box. (He says he changed the height and size to cause it to appear 'open' and the elements to be listed like a listbox whenever you clicked on the input box.) If you click on one of the select box's options instead of the select box itself (which I guess you could only do through that hackery), it also crashes. We tried a select multiple just for debugging purposes, and ended up using that for our boiled-down test-case because it required a lot less code/work, and we can't post a link to the app we're currently developing :)
Yep, I just checked and about an hour after I submitted it the bug was marked as "SecSeverity-High" and restricted to the security team. Sorry about that - I copied the details to duplicate it into the original post.
It has the same issue with a regular select if you select one of the options instead of the box itself - this is actually how we originally ran across this bug. And yeah, the logic is a bit buggy, but I was still a bit startled to see the browser crash on it consistently :)
Had considered the setTimeout hack, but was looking for something a little more elegant like your mousedown solution - which unfortunately crashes as well :) Looks like we'll be using setTimeout. Thanks for all the work you put into this!
Ah, well, in that case it works fine with non-multiple &lt;select&gt; under Chrome 6.0.472.63.
I rewrote the script in python. This one should really work according to the info provided. If it works, you can add command line parameters so that you don't have to hardcode the credentials and ip. #!/usr/bin/python from urllib2 import build_opener, HTTPCookieProcessor from re import search ipaddr = "192.168.0.2" credentials = {"user": "myuser", "password": "mypassword"} # post credentials, get auth-cookie # get CSRF-keys # send shutdown command shutdown_data = 'gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=%(gSSS)s&amp;gRRR=%(gRRR)s' auth_data = "txtAuthLoginUser=%(user)s&amp;txtAuthLoginPassword=%(password)s" url = "http://%s/cgi-bin/top.cgi" % (ipaddr) # session stores cookies session = build_opener(HTTPCookieProcessor) # login, get back html for interface request = session.open(url, auth_data % credentials) html = request.read() # in the html, we find the CSFR-keys CSFR_keys = { "gSSS": search('name="gSSS" value="([0-9a-f]+)', html).group(1), "gRRR": search('name="gRRR" value="([0-9]+)', html).group(1), } # send the shutdown command session.open(url, shutdown_data % CSFR_keys)
Yeah, I presumed that the gSSS and gRRR had to be scraped after a successful login (after which the unique keys are issued). In your python script, do I hardcode the credentials like so? credentials = {"user": "fakeusername", "password": "fakeuserpassword"}
I know. Fixing it involved moving some of our few remaining browser sniffs to capability checks so this won't happen in the future.
Something something GÃ¶del's Completeness Theorem something something.
Indeed, if you look at line 20, you'll see that the dict is formated by the string in `auth_data`.
This is a cool site! I'll have to put up some examples from my own WebGL library: [WebGLU](http://github.com/onegeek/webglu)
You've already got the point. The module pattern is nice and pretty and will suit you well for most projects. For large-scale applications, where performance is a factor, then standard prototypal inheritance is the better solution. 
What would be some of its shortcomings?
Makes sense, are there any other benefits to prototypal inheritance besides the performance bump? I can't imagine the performance differences are significant until you get to at least thousands of instances.
There's a big one that (oddly enough) proves useful for trying to mimic class-based inheritance. You can (re)define `Foo.prototype.bar` and instantly have a `bar` method on all instances of `Foo`, even those that you've already instantiated. This works because when you do `someFoo.bar`, and `bar` isn't defined on the object itself, it will look at `Foo.prototype` to attempt to resolve the reference.
have you read godel escher bach?
I'm getting through it slowly. About 2/3 through now.
Sencha sucks. 
that is my favorite book. have you seen the mit series? http://ocw.mit.edu/high-school/courses/godel-escher-bach/
I plan to watch through those, but I'm already pretty busy forever with work and class.
I might not be able to paint a perfect black-n-white picture for you but a few points/posts you might want to have a look at: * GC which is still not on par with some industrial strength GC's out there (namely jvm and .net platforms) * Still not proven its worth when compared with languages like Erlang which have truly awesome concurrency support * [Clojure, Nodejs and concurrency fail](http://dosync.posterous.com/clojure-nodejs-and-why-messaging-can-be-lame) * [Problems with using nodejs](http://www.quora.com/What-are-the-disadvantages-of-using-Node-js) IMO, one of the biggest advantages one might have of nodejs is the use of Javascript language which is pretty ubiquitous and is a very beginner friendly language, at least as compared to something like Clojure and Erlang.
I was hoping for code :(
I also prefer the Crockford pattern over the messy prototype/class implementation in Javascript. One often overlooked drawback of private methods: You can't test functionality hidden in private methods, therefore you shouldn't use them over excess. A possible solution would be to factor out private method functionality to a new, testable class and use a private instance of it in your main class.
That yielded: Traceback (most recent call last): File "/home/keito/Desktop/NAShutdown.py", line 25, in &lt;module&gt; "gSSS": search('name="gSSS" value="([0-9a-f]+)', html).group(1), AttributeError: 'NoneType' object has no attribute 'group' It's about time I provided all the info I have gathered thus far. I've now got a bit more of an idea of what is going off when I click the shutdown button from within the web interface. I've used a Firefox extension called HttpFox to record the shutdown. The sequence goes like this... 1) POST http://192.168.0.2/cgi-bin/top.cgi **txtHelpSearch=&amp;gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=3f2f463d76dfef1fad158c26805bab2b&amp;gRRR=159115330146361903&amp;hiddenDummyText=dummy** 2) GET http://192.168.0.2/cgi-bin/html/en/style/style240.css?param=20091191959 3) GET http://192.168.0.2/cgi-bin/html/en/script/prototype.js?param=20091191959 4) GET http://192.168.0.2/cgi-bin/html/en/script/common.js?param=20091191959 5) GET http://192.168.0.2/cgi-bin/html/en/script/menu.js?param=20091191959 6) GET http://192.168.0.2/cgi-bin/html/en/script/title.js?param=20091191959 7) GET http://192.168.0.2/cgi-bin/html/en/script/title.js?param=20091191959 8) GET http://192.168.0.2/cgi-bin/html/en/script/maintenance.js?param=20091191959 All of the GET steps seem to query the same string. It's really just a case of successfully scraping the **gSSS** and **gRRR** variables now, then the curl post should work. Below is the command I use to shutdown via curl using an old gSSS and gRRR value: curl -u keitousername:keitopassword -d "txtHelpSearch=&amp;gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=33a378849e3d9431ce5a57dccc155832&amp;gRRR=397932968884081594&amp;hiddenDummyText=dummy" -- "http://192.168.0.2/cgi-bin/top.cgi" it returns [this](http://pastebin.com/1j2amFu2) in the terminal. If I try to issue a shutdown without a gSSS or gRRR value like so... curl -u keitousername:keitopassword -d "txtHelpSearch=&amp;gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;hiddenDummyText=dummy" -- "http://192.168.0.2/cgi-bin/top.cgi" then it returns the same as the pastebin above to the terminal, except it is missing the following lines... &lt;div id="divMessage"&gt;&lt;div id="divMessageTitle"&gt;&lt;div class="set_headder"&gt;Re-confirm&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt; &lt;div id="divMessageItem"&gt; &lt;div id="divMessageText0"&gt;&lt;table border="0" cellspacing="0" cellpadding="0" class ="setbox"&gt;&lt;tr&gt;&lt;td&gt;Either the session has been disabled or reached a timeout. Therefore please re-confirm the User Name and Password.&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;div class="non"&gt;&lt;/div&gt;&lt;/div&gt;&lt;br /&gt; &lt;/div&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;
You misspelled "privileged".
The operation(s) needs to be done "offline" for greater accuracy. Remove the table element from the dom, do the work, then add it back. Doing it live is just wrong, however a pleasant fuck you it is for IE users.
Why not [jsPerf](http://jsperf.com/) this test? And obviously parsing a table will be slower.
Have you tried adding the `-u` option to the curl-based script? BTW, you (accidentaly?) posted your password.
Ooops! Cheers. I have tried the -u option, in the script I posted, is that what you meant? If you meant add it to the following, then no, I haven't... #!/bin/sh #v0.4 host="LINKSTATION_IP_OR_HOST" echo "Fetching magic page.." scrape=$(curl -- "http://$host/PATH_SHUTDOWN_PAGE" | grep 'id="gPage"' || (echo "Could not get hold of magic variables. Router down allready?" &gt;&amp;2 ; exit 1 ) ) gSSS=$(sed 's/.*name="gSSS" value="\([0-9a-f]\+\)".*/\1/') gRRR=$(sed 's/.*name="gRRR" value="\([0-9]\+\)".*/\1/') echo "Got: gSSS=$gSSS and gRRR=$gRRR" echo -n "Sending shutdown command.." curl -d "gPage=maintenance&amp;gMode=shutdown&amp;gType=shutdown&amp;gKey=undefined&amp;gSSS=$gSSS&amp;gRRR=$gRRR" -- "http://$host/cgi-bin/top.cgi" || ( echo " Failed!" | exit 2 ) echo " Done."` Where would I put it? I think I need to 'login' before I scrape... So putting it on the 'curl' line seems too late. Still not sure what to do with &gt;http://$host/PATH_SHUTDOWN_PAGE either.
Er, don't you mean *localization*?
link to demo: http://antimatter15.github.com/weppy/demo.html
Hm... couldn't you capture the `video` data and put it in an `img` with a `data` URI? That way you'd avoid messing with the DOM too much (plus, this would make `WebP` work in CSS), I'd think.
Prototype predates jquery
&gt;Probably because of that John Resig decided to give him special role in JQuery and later the $ sign was implemented by Prototype and MooTools. Prototype: Created by Sam Stephenson in February of 2005. MooTools: Originated from Moo.fx, a popular plug-in Valerio Proietti produced for Prototype in October 2005. jQuery: Released in January 2006 at BarCamp NYC by John Resig. But hey, who has time for history lessons or fact checks anyway? Sorry, but I am downvoting your submission for factual errors and grammar mistakes.
I think that prototype was first, but that is a dark point on js history. 
You are right, I was convinced that jQuery was the first to implement the $. I will update the article. Thanks
Prototype was the first to use it as a shorthand for getElementById.
Most awesome! It just cannot not be any simpler to clean up some web site annoyances to make their content actually digestible. An effective peace and quiet bringer.
I always use jQuery(function() { }); I don't use $. How many others do that?
This is a good article. I wish more of Reddit was like this.
Additional Items: Official DOM3 Events List: http://www.w3.org/TR/DOM-Level-3-Events/#event-types Various built in functions related to Events: http://www.w3.org/TR/DOM-Level-2-Events/events.html A list of all the DOM Events from the HTML5 spec: http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html#event-handlers-on-elements,-document-objects,-and-window-objects Did you know the new version of XMLHTTPRequest (for AJAX) has event handlers too? http://www.w3.org/TR/XMLHttpRequest2/#event-handler-attributes Did you know CSS3 will add the ability to control which elements can trigger events? http://dev.w3.org/csswg/css3-ui/#pointer-events This is already possible for SVG (which is where the concept came from): http://www.w3.org/TR/SVG11/interact.html#PointerEventsProperty
Prreeeetty sure the time saved using a smaller format isn't much of an advantage when you need a script just as big and processing time on top of that.
Nice! :-)
Yay, new toys to play :)
There are many drawbacks to Crockford's pattern: http://bolinfest.com/javascript/inheritance.php Erik Arvidsson agress http://erik.eae.net/archives/2009/11/09/21.12.16/ noting "Michael argues that the functional pattern is not good because methods cannot be inlined and the end result is much larger. He also says that it uses more memory. I think it is important to realize that it uses a LOT more memory and is significantly slower. Given a class with 1 methods It is about 100 times slower in Chrome, 20 times slower in Safari and about 10 times slower in Firefox."
And some of the older ones just got new engines.
[jQuery Mobile](http://jquerymobile.com/) looks awesome.
TIL JQuery is way cooler than I thought.
jQuery made my life so much easier. Congratulations on the new release, jQuerians!
Ooh. I didn't realize it was out yet. I've been looking forward to this for a while now.
How the hell do I test it, since I'm on a desktop browser? Isn't the whole point of a demo to demonstrate something? Its not like I'm writing JavaScript on my phone's keypad. 
Great reads, thanks very much.
*native* blurbox?
No, naive. Rudimentary, basic, a lack of experience, unoptimized. :)
So instead of the comfort and features of a real editor or IDE, you have to write your code in a flimsy browser editor?
Trying to understand the guy narrating the video (his mic quality was awful), it seems like it's an in-browser editor that's not as good as bespin, that runs server-side JavaScript, which makes no sense?
So they did not only outsourced from India the implementation, GUI, and probably design (software-wise), but the narrator as well? :P
All I could hear was 'womp waa waa womp womp warble'
Erbix has two parts: the editor (the "IDE" that you use to edit your account) and the engine (that does the hosting, takes care of account isolation and RAM/CPU management etc). We'll launch soon source repository integration which should make it possible to use the engine without the editor or the other way around. The use-cases for coding in your browser are mainly universal accessibility to your coding environment and your code (see more about this at http://www.erbix.com/documentation/overview/introduction/ ). And due to HTML5, we're more close than ever to build Eclipse-like editor features in the browser. Who knows, tools like distcc might be just the beginning in terms of benefits that you might get when coding with hundreds of computers behind to help you (just like gmail uses hundreds of computers to help you find old messages in your inbox -- in both cases you require intensive computing resources for short periods of time to get instant results with low latency).
The engine implementation is actually based on RingoJS, an open-source JS engine, on top of which we've added account isolation features (so that i.e. code running from 2 different accounts stays isolated from each other). You can get it at [www.ringojs.org](http://www.ringojs.org) and run it on your own box. The editor is also open source, [www.codemirror.net](http://www.codemirror.net), and we've added integration with Google Closure library (i.e. the tabs, the tree widgets) to allow an hierarchical directory structure and support other features. About the accent - not Indian but rather Central-European. I do apologize for it, we're at a stage when we're mainly interested in iterative feedback and idea validation, but we'll hire a professional to do it once we reach sustainability and critical mass. :)
The editor is [www.codemirror.net](http://www.codemirror.net). A comparison with SkyWriter is not straightforward; I imagine SkyWriter making progress in the near future and becoming the standard solution for browser-based code editing, but at the moment we took the more pragmatic approach - CodeMirror has better cross-browser support (runs on IE8 while SkyWriter requires support for the canvas tag), mixed HTML/JS highlight and overall looked more stable in our tests. As for server-side JavaScript, there's a whole movement trying to bring the same language on both server-side and client-side, you can read more about the standard that we implement at [www.commonjs.org](http://www.commonjs.org).
Oh shit, I didn't mean it seriously, I was just making a joke on your accent sounding like indian tech support :) I hope I didn't offend you! :)
If you are on Linux, GNOME Gmail works well (http://gnome-gmail.sourceforge.net/). The home page has a mailto: based Send Link bookmarklet that should work for you wherever, if your mailto's work with Gmail. I got your URL to work by dropping the ui=1 argument
From where I'm standing, that appears to suggest that Indians aren't very good at software development? How very ignorant.
I love the idea, it reminds me of Heroku. They started with an in-browser editor for ruby, later added an integrated hosting platform, before eventually ditching the editor altogether to focus on the hosting side of things, after they realised the editor wasn't attracting the interest they had hoped for. But regardless, their hosting platform is doing great nowadays, so if I were you, I'd tread carefully to ensure you're not spending time on things people don't necessarily want (i.e. the editor), and neglecting those they do (i.e. the hosting.) But good luck; I only wish you had Node.js support! ;)
Thank you so much Daves. It is working again! Also, since I am on Ubuntu, I will take a look at GNOME Gmail. Merci encore cher ami anonyme. C'est aussi pour des instants comme celui-ci que j'aime autant Reddit. Bonjour de Paris 
I've said this before, rule #1 of all programming screencasts: must have extremely strong accent.
Nice, now I will have something to do tomorrow.
thats impressive, better than anything I can do thats for sure
link is borked edit:...sometimes...
I love how they give Brendan crap for inventing JavaScript ("WTF were you thinking?!?") and yet he maintains a completely level, even jovial, attitude about it.
I don't understand other's fascination with these talks. They proceed at a snail's pace and have unreadable code samples. I'd much rather read about code than watch a presentation.
On one hand, I agree somewhat. I can't really learn through watching someone talk unless I'm constantly pausing, or I watch it multiple times. However, I think some of these videos are less academic lecture, and more of a look at the state of the community. I think if you like Javascript, and didn't have a chance to attend any of these conferences, these are pretty cool. I encourage everyone to at least watch Chris Williams' talk, because it's not so much a Javascript lecture as it is a great "programming speech".
You've persuaded me to watch the Chris Williams one. :)
but you don't support client-side Java Script for now, right? 
near as i can tell you can just serve whatever
You can use the fs-base module to access the content of any file in your account (client-side JS, static images etc) and serve a JSGI HTTP response with it - see the code sample at http://www.erbix.com/documentation/js-reference/files/ .
It's entirely possible (although not exactly cheat-proof...). How difficult it would be depends on your experience with JQuery, JavaScript and ability to solve abstract problems. The fact that you posted this question here suggests a lack of experience/familiarity with this JQuery/this type of project so I wouldn't expect you to find it easy, but a great, fun and interesting way to learn JQuery whilst excercising your brain a bit.
You could do it even without jQuery. In fact the jQuery would play a very small part in the game.
http://www.bennadel.com/blog/1737-jQuery-Powered-Mine-Sweeper-Game.htm
Thank you for pointing out Chris William's talk. That was inspiring.
Got it! thanks! btw love the idea! 
Usually, they aren't really tutorials so much as "Hey guys, look at this neat thing! And I have a unicorn in my PPT presentation!" But yeah, I agree with you. I just like going to conferences to meet other developers. 
jQuery cannot build anything. You'll have to do it yourself, though it might be a bit easier when you're using a library...
I think node is awesome today like Linux was awesome in 1993. That is, there's lots of potential but there's Work To Be Done. The codebase is rapidly stabilizing but perhaps not production-ready, plus I'd like to see some better documentation (it's not bad, just sparse) and it needs more robust support for charset encoding. I've really only dabbled but this is my impression so far.
I'll just leave [this](http://www.reddit.com/r/programming/comments/dsttm/this_is_going_to_be_the_best_operating_system_ever/) here
That doesn't remotely indicate that Indians are bad developers. It just indicates that you're an idiot; I'd love to see some of ***your*** code/work, should be funny.
jQuery can save you a lot of time, so it's probably a good idea to learn it anyway. It took me about 2 hours to get the hang of it, and an other 8 to implement some of it on my homepage (a lot of subtle mouse-over feedback things, animated menu, collapsible sections, and an ajax-carousel-plugin). It's well worth your time. As for the game, it will make performing actions on (groups) of objects a lot easier, so it probably useful in making the game.
Well, it's not possible to write a complete game in jQuery, because jQuery isn't a programming language. It's a Javascript library which provides a layer of abstraction to help you write cross-browser Javascript. What you'd use jQuery for in your game is event handling, Ajax (if you want to interact with your web server), and DOM manipulation. JQuery does all of these things pretty well, and your life will become quite easier than if you were to do that stuff with raw JS. jQuery is just Javascript, so knowing Javascript, HTML, and CSS will be what determines how difficult it is.
but the famousmadphilosopher will need to support old versions of Safari and mobile versions of WebKit.
this is all i have bound to orientationchange and it seems to work fine for me, despite multiple change events: function onOrientationChange(){ var orientation = window.innerWidth &lt; window.innerHeight ? 'portrait' : 'landscape'; $('body').removeClass('portrait landscape').addClass(orientation); } Haven't done anything dealing with viewport measurement yet, though.
Thanks for the insults. No need to take it personally, Indian developers are regarded as grunt-workers of the IT industry, and from my own personal experience their code is usually not up to par with standards of coding. And regarding my own code, send me your google talk to my orangered, I'd love some code review ;)
you can't call yourself incredibly fast without data comparing your time to the other popular templates.
I know that jQuery recently got a templating engine. Is there any other templating engines in JS, that are widely used?
moustache.js, Ext.Template and Ext.XTemplate, jQote YUI and Dojo probably have their own solutions, I'm not familiar with either
A lot of JavaScript templating engines that call themselves "incredibly fast", actually aren't. If possible, it would be great if you could add a Bujagali example to the JSPerf templating shootoff, here: http://jsperf.com/dom-vs-innerhtml-based-templating/22
This is either a poor test suite, or a poor set of tests. The results are erratic at best.
How do you mean? JSPerf is based on JSLitmus, which tries to be incredibly accurate about benchmarking with warm loops and normalizing the results, compared to naive JS benching. Perhaps you're talking about the variation across different browsers -- that's just the nature of the beast in JavaScript. The same code will have wildly different performance characteristics when run on different JS engines.
jQuery is a great library. However, it won't be of much use if you write a game since you won't need any of those really annoying things, jQuery makes so much easier for you. For example the only thing you need to do with the DOM is this: var ctx = document.getElementById('canvas').getContext('2d'); Yea... you probably can do that just fine without jQuery. Handling those few input events on your own also isn't very hard.
I ran the test repeatedly in several browsers with random results each time the test was ran. If the benchmarking method is good, then I suspect that this specific test wasn't written very well. The test should perform at least similar results each time it is ran. I can give specific examples if you are experiencing something different.
On github, I don't see the python script that actually converts templates into JS. Is it hiding somewhere else? Also, if http://github.com/rdio/bujagali/blob/master/bujagali/bujagali_server.js is really deployed on a production server on rdio, this is going to end hilariously. If you're going to run arbitrary JS code on a nodejs server, at the very least use the sandboxing APIs. (necessary, but not sufficient to prevent pwnage.) 
I'd like to see that! (I added mine and was disappointed at its performance.. where's my profiler!)
So when can I play Minecraft with this?
I use document.documentElement.clientHeight (clientWidth). That seems to do the trick for me.
http://github.com/rdio/bujagali/blob/master/bujagali/__init__.py contains the python that does the actual conversion. You just need to create a "Bujagali" instance and call "generate" on it. Obviously that server is pretty dangerous, so we make sure it can't be accessed from the outside. Sandboxing introduces a lot of complications for very little real benefit, assuming you control what hits the server. Node.js's sandboxing has some weird rules that make it difficult to make this work correctly, so it wasn't worth my time. Of course, if you contribute a patch I'd be happy to take it :). It would be really cool to be able to set up a server available to the world that you could spit templates at and get rendered pages back.
As I've been saying in other places around the interwebs, Bujagali optimizes a lot more of the pipeline than just raw rendering performance, so it's hard to compare apples and oranges. However, a lot of people want to see those numbers, and I have an intense love for underscore, so perhaps I'll run some numbers, just for you :). As a side note, currently Bujagali is an innerHTML based system because those are way easier to write and more flexible in many ways. I'm pretty convinced DOM-based templating using DocumentFragments can be made faster, but I would want to apply it as an optimization on top of Bujagali, which may increase complexity more than it helps performance.
Oh thanks. I somehow have this tendency to ignore __*.* files, which apparently isn't a good habit with python. I'd still vote for fixing that nodejs thingy.. all it takes is one entrypoint on that server that can be used as an http proxy, and what would otherwise be a relatively minor open proxy situation becomes a remote compromise. I haven't tried using the sandboxing API, so my knowledge of them is mostly that they look good on paper, and that they really need a timeout/instruction count limit baked in. 
Just found this earlier today: [Bujagali](http://justin.harmonize.fm/index.php/2010/10/bujagali-incredibly-fast-javascript-templating/)
What do you mean: preserves whitespace?
Saw that, too. But since it doesn't mention whitespace (or tabs or spaces or whatever) anywhere, I decided to skip it for now. There are over 30 template engines for JavaScript after all. I just can't try them all.
jashkenas (irc.freenode.net/#node.js) pointed me to that [template function in the Underscore library](http://documentcloud.github.com/underscore/#template). Seems to do the trick.
Well, I got well formatted CSS with some placeholders. Of course I would prefer if the output remains well formatted in order to allow quick copy &amp; paste.
The more I look at the JS templating landscape, the more I wish there were a frontend/backend boundary in their design, to allow one to match specific performance/rendering characteristics with whatever templating format best suits their needs. I guess that would require a well thought-out intermediary form, though. Back to the topic, I don't really know jQuery, but if their tmpl stuff is related to jeresig's fast templating thingy, it's trashing whitespaces because its templates are stored in DOM fragments, which is not likely to be the case with most other templating mechanisms. 
What does the CSS have to do with the template? Client-side template engines usually (and by that I mean always) insert the rendered template into the DOM (which doesn't appear in `view-source:`). So I'm still confused as to what your looking for/asking.
The templates are CSS with placeholders. This CSS is rendered as pre-formatted text in the browser to be copy &amp; pasted by the user.
Please please please compile a list (maybe put your top 3 at the top?). I'll be dealing with finding a js template engine soon and would love somewhere to start :)
http://github.com/ry/node/wiki/modules#templating (node.js - many of them also work on the client-side though) http://jsperf.com/dom-vs-innerhtml-based-templating If you use jQuery, jQuery's tmpl thingy is probably an obvious choice.
http://jobs.jsninja.com/ linked from John Resigs blog
I've been there...they don't "support" Los Angeles.
Gotcha.
Have you tried checking for JavaScript meetup groups in or near LA on meetup.com? They are usually good places to get connected to JavaScript devs. It's not in LA, but you might find someone in the Bay area willing to relocate- the bajax meetup group there us probably the largest JavaScript meetup group in the country.
I can help. Fill out my contact form at socktan.com
You could try just simple variable replacements then. SHould preserve whitespace and serve as your template engine. Afterall, that's all the template engines do.
I also want to do some math tho. With the one from underscore that works just fine.
You can type in a location in addition to the drop down list.
Chrome is the secret. Ctrl+Shift+J.
While chains of anonymous function calls / closures typically found in popular javascript librarues are painful to debug, you can usually do quite well with the a debugging suite like Firebug. Check out [this](http://www.digitalmediaminute.com/screencast/firebug-js/) for a introduction to using Firebug's features, like the console.* functions and setting breakpoints / stepping through. Once you learn to use `console.log()` you'll never want to use `alert()` again :) You'll also find that the developer tools found in Chrome, Opera and even Internet Explorer 8+ works in pretty much the same way. 
&gt; The language itself is easy to understand, but debugging is nearly impossible. I have been told to use firebug, but I never figured it out. Uh? Just go into the Script tab (or whatever it's called), you'll have a full-fledged debugger. &gt; So javascript pros, what is the secret? What are some good debugging tools to use. 0. Watch Firebug's introductory video. 1. the `debugger;` statement, just put that in your source code and if you have a debugger available it'll drop you there 2. Firebug's [Console API](http://getfirebug.com/wiki/index.php/Console_API) is fast becoming a standard in browsers, Firebug implements it of course but the Webkit Developer Tools (Safari and Chrome) have complete support for it as well (there are a few differences in e.g. how it displays jquery objects, but that's about it). I believe Opera is also in the process of implementing it in Dragonfly, and even IE8 might have a start of implementation. 3. Try out the webkit developer tools (in Safari or Chrome), they might be simpler &gt; Or is javascript just harder to debug than traditional programming languages? In B.F. (Before Firebug) javascript was a hellish pain to debug, either you used MSIE and Visual Studio and had the Visual Studio debugger (pretty good, but on a shitty browser and unable to debug toplevel statement) or you used Firefox and you had [Venkman](http://www.mozilla.org/projects/venkman/), the old JS debugger (slow, buggy, messy, ugly). And forget about logging, introspecting the DOM or fixing CSS rules, it was terrible. After firebug, the job has gotten trivial. You just need to put in some efforts to get started.
Well, the linked example uses table cells, not canvas. DOM would be the way to go for minesweeper I think, lots of little squares that don't do much but change color.
Protip: use console.debug, not console.log. The former adds a link to your code!
I wouldn't use the DOM for that. Canvas is a lot easier and more lightweight.
 alert("What is this I don't even... #5382");
 document.write("I'm 58 and what is this?")
There is a reason for that... JS is usually a "glue language"... ie it's there to glue stuff together, not make a whole product. Now, this has changed with Node, but it's still pretty new. Your best bet is to hire a good *programmer* and have them learn and program your javascript. 
A good dynamic languages programmer - a good Java programmer could easily give you awful JS code.
&gt; use console.debug, not console.log Any of `console.debug`, `console.info`, `console.warn` and `console.error` should do that, fwiw.
A good java programmer will give you awful code ;)
I tend to use the following pattern: var mySingleton = new function() { var privateVar = 'x'; this.property = 'x'; this.method = function() { } function privateMethod() { } } The 'new function' creates a new instance of an object using an anonymous constructor.
http://enterprise-js.com/17
I have used that one a fair amount, but I'm actually quite partial to this one these days: var mySingleton = (function() { var privateVar = 'x'; // will remain private function methodA() { } // will be exported as public function methodB() { } // return public interface return { "methodB": methodB }; })(); I like this because you can write bog standard javascript in the body of the closure and you just export the functions you want to expose in the bottom; everything else is private. Plus you don't need to use "this." everywhere, just call the function name / variable directly.
Yeah I use that too, though not as frequently. I agree having 'this' all over the place can look clunky, though I tend to feel that a well designed module generally has few public methods in ratio to its private functions. (note I said generally)
"MC Chunk Loader" would be a terrible name for a rapper.
I tend to avoid private methods or variables in js because it creates non-extensible code at the end of it all.
Until recently most developers disregarded Javascript as the crappy language you googled for solutions to the problem you were having getting in the way development in the "real" langauge, as such people that *know* javascript are few and far between. Rule of Thumb: If the developer you're interviewing doesn't at least know about prototypical inheritance he's not a seasoned JS dev. 
Hardly good OOP principles, plus the nature of JS lends itself to open source anyway, so it's not strictly going to stop anyone modifying your code or extending it. Having a well defined public interface to your functionality surely makes the library easier to port and share?
Javascript is actually a very powerful language - it's approaching things like scheme or lisp in places, although it has a syntax instead of being almost entirely free-form. It historically gets a bad rap because browser support was inconsistent and buggy, but that's a reflection on browsers, not on the language itself. It also gets shit because the DOM API is unwieldy and awkward... but again in spite of the fact you often spend a lot of your time manipulating the DOM in Javascript, it's an independent, language-agnostic API that does not reflect at all on the quality of Javascript as a language. Finally Javascript gets shit because the development tools (text editors and browsers) are primitive, but *again* that's a criticism of the tools, not the language itself. TL;DR: Javascript is a powerful, flexible, well-designed language, and people who criticise it - apart from specific, precise technical issues - are usually clueless, or misattributing flaws in other tools to the language itself.
I'd disagree with that- with Canvas you'd have to write all the game logic, AND the code to display a bunch of boxes in a grid (however little there may be). With DOM you'd just write the game logic, the code to display a bunch of boxes in a grid already exists (tables! or even divs, but the linked example makes a great use of tables) To each his own, of course. If you were going to write, say, Astroids, the answer would be different.
so write getters and setters.
bingo.
I always think of this as "jQuery style", because that's where I first saw this kind of thingy: (function(window) { Lawyer = function() { this.name = 'Bob Loblaw'; }; Lawyer.prototype = { get_name : function() { return this.name; } }; return (window.Lawyer = new Lawyer()); })(this); Basically accomplishes the same thing as his last example, but if this were a bigger project, you could use the prototype to extend Lawyer. This puts 'Lawyer' into the global namespace, but you would probably want to instead put it into your own global namespace object or something. [JSLint](http://www.jslint.com/) is pretty comfortable with it, either way.
Thanks; this is all new to me. Time to do some leaning.
&gt;Overall it's pretty painful as it's so easy to break the code I think that's the point. Java does it too. Why would you want to risk writing code that's wrong and not realizing this when you send it out? Please tell me what a good language is. C#?
console.log is great too because you can pass it an object and then view it, whereas if you did this in alert, you would just see [Object object] or something similar. 
Wouldn't you want to attach the `Lawyer` constructor itself to the global namespace so you can have more than one lawyer? Some thing like: (function (window) { Lawyer = function (name) { this.name = name; }; Lawyer.prototype = { get_name: function () { return this.name; } }; return (window.Lawyer = Lawyer); }(window));
ie8 will use console.log() but if you don't have the debugger open it just breaks your code.
For most things Firefox with the Firebug plugin is a good choice. There are no great javascript debuggers out there, but that is about the best you are going to get. Firebug at least lets you do breakpoints, watches, stepping, etc. Nothing "fancy" like seeing the call stack. Also, install the "Web Developer" plugin for a host of other good utilities. Firebug isn't just for script debugging. It is great for other things like perfecting CSS in realtime on the page. It also has a resource monitor and a profiler that come in pretty handy. Google Chrome has a debugger that is getting close to rivaling Firebug in its functionality. It isn't quite there yet, but it keeps improving. They update regularly, so make sure you have the latest version. While Firebug is still more feature complete than Chrome's debugger, I still often develop in Chrome and just switch to Firefox when I need something from Firebug or WebDeveloper. Chrome is a lot faster and more responsive, and so I find it more pleasant to work with. Microsoft has their script editor, and maybe other people like it? (Does anyone?) Personally I have found it to be buggy and impossible to be productive with. When a script is being debugged it locks the browser too and causes all sorts of issues and hangs. Sometimes you really need a debugger for the IE side and it may do the trick, but often a few alert() calls can be a lot less painful then trying to use their script debugging. 
usually I have something like if(typeof console == "undefined") { console = {}; console.log = function() { }} at the top of my JS files. 
Or âŒ¥+âŒ˜+j (Option-Command-j) to bring up the JavaScript console if you're using Chrome on a Mac.
I like the idea, but the "special" character buttons are hidden behind the keyboard. 
That's cool, I usually make a function like with a try/catch in it and use that. something like function log(blah){ try{ console.log(blah); }catch{} }
If you think you've never been good at JavaScript, I doubt it's because you don't know how to write code or use logic. The most frustrating thing about writing JS for me for a while was cross-browser compatibility issues, which isn't so much the code itself as its environment. Fortunately, a lot of frameworks do that hard work for you, so you don't need to focus on trivial issues every time you go write code. I like jQuery as a framework because I ultimately end up typing the least code, but other frameworks like Prototype have even more powerful functionality. The best thing about jQuery is its DOM manipulation capabilities and event handling. Replacing a button's text after someone clicks it is as easy as: $("#theButtonId").click(function(){ $(this).text("New text!"); }); It will also completely alter how you view JS, from a chintzy little scripting language to a powerful object-oriented language. Plus, it's created by John Resig, who mods this reddit, so I guess you have to.
It depends on what you need, but yep, you could definitely do that if you want. Although I think if you're gonna make more than one, there's no point in wrapping it in a self-executing function, and passing any of it to any scope. You can just put Lawyer and Lawyer.prototype exactly where you want them, and it would be less complicated. My point was just to show one way to end up with a single instance. I may be wrong about this, but I think what makes it *not* a singleton in this case (and his last example) is that you could potentially make as many Lawyers as you want, within that main function.
You're right, but then why use `Lawyer.prototype` to add properties inside of the self-executing function?
FWIW, B.F. there was a relatively unknown way to debug JavaScript code using [window.dump](https://developer.mozilla.org/en/DOM/window.dump), which prints messages to the standard output. In fact it still exists today but it's largely ignored, at least by web developers, since firebug is much better :-)
jQuery is really cool. It is the reason I am taking javascript more seriously.
&gt; In fact it still exists today but it's largely ignored, at least by web developers, since firebug is much better :-) There's also the issue that you have to launch Firefox via the console, which is pretty rare unless you're a linux user. Which most web devs probably aren't.
How come this appears to be completely broken on every desktop browser I try? 
 &gt; Heard its a rather problematic extension for chewing up memory. This is the only truth to the above statement.
Good point! Habit, I guess? I was thinking about inheritance, but there's no real use here.
I don't get it, his last example is stil the typical self invoking "singleton" javascript pattern (returning an object as the public scope).
Run your finger over the stripe of special characters next to "Complete" and "Run".
because desktop browsers don't fire `touch` events.
I'm completely iphone-clueless, so I have to ask: What is gained by having buttons listening for "touch" rather than "click" events? 
I'm not sure, presumably touch events support multi-touch
Interesting. An IDE on a phone is not something I see myself using full time though. I'd rather not fight with a small keyboard.
I'm pretty sure the event fires faster than "click" so it feels more responsive on touch devices.
They fire click events though. And so do iPhones.
But the app we're talking about listens for `touch` events, not `click` events. http://files.stefanlh.de/public/jscoder/build/default.js
jQUery is the reason so many web apps are so poorly written, because it makes it easy for noobs to hack together something that works poorly. People who don't understand how a browser works aren't going to do much better using jQuery than without it, but it will enable them to put out garbage that I have to fix. Half my job is fixing jQuery 'plug-ins' that are so poorly written I have to wonder why they were even written to begin with. I'm sure i'll get downvoted by the hoards of jQuery faithful, but there is a real lack of common sense in so many of the plug-ins i've found, and even the jQuery library itself. 
That makes sense, but you can't really think that language innovation is a bad thing because it allows other to play the game. 
If you go the DOM route you still have to write the code which generates the DOM, you need different classes for different cell states, and of course you need code which changes the classes of specific cells. Just iterating over your 2d array and drawing the corresponding image is more straightforward. Whenever a click happens, you update your 2d array and just redraw it. It can't get any easier than that. Well, in this case either option is pretty easy. I'd still go with Canvas, because it's a lot more fun to work with.
I'd like to see it adapt to the ipad resolution as well. Add in offline use, plus maybe some common js libraries cached, and some export function - and you're looking at a dev environment as good as we ever learned on back in the 8 bit days. it's not native, but you don't need native if your goal was to make a hangman game or such. 
PHP is the most backward language I have ever encountered. I used to really like it because it was easy to dive in, but after you really program, you can tell that the whole language's development was so sprawled.
Don't use minified libraries for development. I can't tell you how often I'm helping a friend debug something, and I load up their test site, start the debugger, and start stepping through a section... and bam...I'm hit with an inscrutable wall of x = y.Z(a);a++;b=q;{.... It's often very helpful to be able to follow the logic into the library and see what's going on there. The tiny benefit of knowing you're developing using the exact *precise* set of code you plan to use for launch is not worth it.
Well if you're writing say, a library...I can see how it would be nice for users to be able to reach in and touch some of the "internals". That's why I sort of like "soft" private properties (prefixed with _ or something like that). Sure, someone could modify the library code...but now they're maintaining their own separate branch of the library. They can't use a CDN, and they have to re-patch every new version that comes out. Avoiding "hard" private properties doesn't make your public interface any less well defined...it's exactly the same as your hypothetical interface...just with some extra options that the user doesn't even have to worry about if they don't care to. It's easy to say "just define your interface really well", but by having a well defined interface AND allowing users to dig in if they care to...you allow a level of extensibility that is just not possible with the former. I could see how there may be some stuff you want or even need to protect, but I think the most desirable outcome is as few "hard" private properties as possible. 
Bluetooth fold out keyboard + tv out (or maybe in a few years, projectors)
Try [knockout.js](http://knockoutjs.com/) ?
Haven't seen this one before. Looks promising. I'll dig deeper and report my findings. Thanks! :)
Close! But not quite... I tried to implement this into my jQuery Templates, but I run into a complicated road block. It expects to a well formed model object, and a call to "ko.observable" on each element, which is tricking when this object is coming from a JSON request. My attempts to get around this issue haven't been to successful so far... but this is as close as I've gotten to what I need. The concept is there, but this implementation has some limits that need to be figured out. I'll keep playing with it... but if anyone else knows of something similar to this, let me know! Thanks :)
Whittle your template down to the narrowest possible template (or *templates*), which that you can update WITHOUT affecting the form the user's working on (or whatever's causing your problem). Don't use a single template for the whole page, in other words. If you just need to update a variable in the page, wrap it in a span and give the span an id. Then just do `$('#whatever').text('new text')`. You aren't going to be able to find a library that will let you update the page without updating the DOM because the page *IS* the DOM.
That's what I've been doing already. Every variable is wrapped in a span, and I update each accordingly. But this makes complex templates very cumbersome when I have to set ID's manually. If this could be integrated into the template engine, it would be simple. Have the template engine auto wrap each variable in a "&lt;var id="tmpname-varname"&gt;&lt;/var&gt;", and allow a simple function to update this without having to call the specific ID (rather hook to the root template). And its not like I'm using a template for the whole page, in fact its broken into dozens of sub-templates... that's why doing the ID-per-variable becomes very difficult to manage manually.
The jsperf thing doesn't work: ReferenceError: builder is not defined. message: builder is not defined stack: ReferenceError: builder is not defined at http://jsperf.com/jsonml2-vs-builder:82:42 at [object Object]._run (http://a.jsperf.com/benchmark-101020.js:7:1632) at http://a.jsperf.com/benchmark-101020.js:7:1464 type: not_defined arguments: builder name: ReferenceError
this is difficult to really address without seeing your code but maybe you could run your incoming data through a function that would iterate over the JSON and wrap the values for you: { 'color': 'blue', 'direction': 'north' } becomes { 'color': '&lt;span id="var-color"&gt;blue&lt;/span&gt;', 'direction': '&lt;span id="var-direction"&gt;north&lt;/span&gt;' } After you did that once and used that JSON with the template, the next time you load the data you would just update the spans directly.
Aren't you supposed to create only one permanent viewModel per widget, and update it manually with data fetched from the server? I.e. don't call ko.observable directly on received data. You could make a generic wrapper that just iterates over the JSON object and sets matching properties in the viewModel.
Absolutely. There are hundreds of text editor colour themes that are *way* less ugly than that.
Just be thankful it's not Lisp.
yes, write better code. There is no reason you need a for loop nested in two if statements nested in an anonymous function nested in a global function, etc. A nice object/class with cleanly written methods that only do what they need to do will generally look much cleaner than this mess.
not really, you could try to avoid nesting your anonymous functions so deeply but honestly it's a personal preference. var functions; functions = { fA: function () { return 'a'; }, fB: function () { return functions.fA() + 'b'; }, fC: function () { return functions.fB() + 'c'; } }; alert(functions.fC()); // 'abc'
&gt;There is no reason you need a for loop nested in two if statements nested in an anonymous function nested in a global function That's not what's happening. I'm writing a node.js app, and I'm using redis as my database. Anytime I need to get a value, I have to do: redis.get("key", function(err, reply) { do_something(reply); }); as opposed to: reply = redis.get("key"); do_something(reply); You can see how it gets out of hand. 
Touche. I *like* it, though. 
&gt; Once you get into jQuery it gets more confusing with functions being passed into functions? Yeah... and the ability to pass functions around just like variables in code is one of the things that makes Javascript so phenomenally powerful compared to languages where it's not possible. I'm afraid that this criticism is very definitely at the "clueless" end of the spectrum when it comes to programming. :-( Think about it like this - you're doing the equivalent of claiming power-tools are bad, because you're used to using rubber hammers and crayons, and to someone used to rubber hammers and crayons, power tools are "difficult". &lt;:-) However, it's insane to claim that rubber hammers and crayons are *better* than power tools, aside from the trivial (and largely irrelevant) aspect of "how easy they are to learn with no previous experience".
You are looking for something like this? https://projects.forum.nokia.com/Fragment I haven't had time to experiment that in depth yet, but it might be just what you are looking for. That claims to be very efficient and via bindings you can modify single properties easily. The wiki section offers also detailed reasoning behind the code. The code may not work in all browsers, though, it's not a ready-made "library" as such.
I know man. Each to their own ;) But, seriously, I know what you mean. I like to build everything as objects, and factor out common callback functions into methods. With a bit of magic like this: Function.prototype.bind = function(obj){ var self = this; return function(){ self.apply(object, arguments) } } ..you can avoid the nested functions (that are common in event-based programming) by calling methods, like this: var SomeClass = function(redis){ this.redis = redis } SomeClass.prototype.makeRequest = function(whatever){ this.redis.doStuff(whatever, this.processResponse.bind(this)) } SomeClass.prototype.processResponse = function(whatever){ // do stuff } The `bind` call there ensures that when `processResponse` is called, `this` refers to the actual object. Yes it's a bit less efficient, but it can make this kind of code a lot simpler and more maintainable. (apologies if I fucked something up there, that code is untested) Edit: Decent article on the subject: http://alternateidea.com/blog/articles/2007/7/18/javascript-scope-and-binding
Yeah, but that's kinda the tradeoff with node. Its performance is mostly a result of embracing async coding models. In theory, code like your second example would be possible _if_ JavaScript did what Ruby 1.9 is doing with [fibers](http://www.igvita.com/2009/05/13/fibers-cooperative-scheduling-in-ruby/), but that would require extensive support from the underlying engine.
Not quite following that code example, but this sounds like you're talking about coroutines, or at least the ability to decide at runtime whether a piece of code is blocking or nonblocking. First: the ability to manipulate the call stack the way you're describing would make JavaScript VM implementors cry. Certain existing features of the language (like `arguments.callee` and, well the `arguments` collection itself) are being phased out because they make certain kinds of optimizations impossible. (The former was replaced with named function expressions; the latter will be replaced with something akin to Ruby's [splat operator](http://theplana.wordpress.com/2007/03/03/ruby-idioms-the-splat-operator/).) Second: an interesting library called [Narrative JavaScript](http://www.neilmix.com/narrativejs/doc/) uses Narcissus (the javascript-parser-in-javascript) to make this feasible. You write simple, callback-less procedural code, and it rewrites it into something inscrutable but asynchronous. The translation stage makes this little more than a toy, but it's a fascinating toy nonetheless.
So I want coroutines, do you know any scripting language with coroutines built in? I've not used the likes of python / ruby in any advanced way.
Like savethecocktower, I don't quite follow either, but does this do what you want: function some_async_func(test, callback) { return callback.call(null, this, test); } 
Yeah, when you use parentheses that much, it's not really practical to close them all on new lines. There are too many of them to be visually useful anyway. (This ((is the) (kind of)) (formatting you (would use))) (instead.) The closing parens are better off squished together at the end of a line of code. Any decent editor will take care of matching them for you. [More info on formatting from a Scheme perspective](http://community.schemewiki.org/?scheme-style) **EDIT:** I'm talking about Lispy languages here, not Javascript.
This works well on my Android too :) could use a few fixes for dimensions of things though. (Keyboard must be taller on Android)
No, I'd want to control whether the top function returns anything or not via the callback function.
Both Ruby and Python have versions of coroutines. Python has generators (which, btw, are also [implemented in SpiderMonkey](https://developer.mozilla.org/en/JavaScript/Guide/Iterators_and_Generators)) and Ruby has continuations and fibers. Many languages in the Lisp family support them as well.
Are you using [acidx](http://qaa.ath.cx/acidx.png) by any chance?
[CoffeeScript](http://jashkenas.github.com/coffee-script/) perhaps?
&gt;redis.get("key", function(err, reply) { &gt; do_something(reply); &gt;}); &gt; &gt;as opposed to: &gt; &gt;reply = redis.get("key"); &gt;do_something(reply); How about something like function do_something(err, reply) { blah(); } redis.get("key", do_something);
I see you are talking about (deeply) nested callbacks. I use Redis and node.js at work :) There are some libraries for this problem but I think this is where you should invent your own wheels 'cause: * It's easy to implement (see my gist below) * You'll use it everyday in node.js * It usually handles critical errors (e.g. talk to database then fail) so you should understand how it works really well. * It involves functional programming in JavaScript, which is the good part. And here's my little helper: http://gist.github.com/623874 (with test!). Hopefully it helps. EDIT: minor fix.
Strange, it worked yesterday Edit: I just checked and it worked fine.
Odd. Browser? Chrome here.
Same.
Maybe you've got something cached that I don't?
That's possible, let me try in FF4 (I never use it so the cache *should* be clean)
this is a bad idea. then your code is logically out of order. youre suggesting that first you write ALL of the code that happens AFTER a step, and then writing the step. at that point, youre essentially writing half of your code backwards, and the other half forwards. seems just a tiny bit messy by my reckoning.
Nice!
This is the correct answer. don't let those procedural programmers get you down. What you did is called the "extract method " refactoring, and is a standard practice in event driven programming as a result of the asynchronous call to the server. 
I personally have just gotten used to it. I just see a }); as a different type of }
seriously, you are hitting the limits of the syntax, js semantics are pleasantly powerful, but the syntax isn't elegant for heavy expressions. CoffeeScript is a great start to solving this problem. people telling you to write better code have no basis from the given image.
Around these parts, we call 'em "Sad Stallmans".
I also have a `Function.prototype.bound` defined, like in [smellycoat's comment](http://www.reddit.com/r/javascript/comments/du9um/i_like_javascript_a_lot_but_is_there_any_way_to/c12yl5v). Then I work like this: obj = { getJSONP: function(url, args, callback) { // ... }, loadData: function(thing) { this.getJSONP("http://somewhere/data", {thing:thing}, function(result) { if (result.error) this.handleError("an error message"); else this.handleData(result); }.bound(this)); }, handleError: function(message) { alert(message); }, handleData: function(data) { // process data // do something else this.loadSomeMoreData(data.someThing); }, loadSomeMoreData(someThing) { this.getJSONP("http://somewhere/more", {thing:someThing}, function(result) { if (result.error) this.handleError("a message"); else this.handleSomeMoreData(result); }.bound(this)); }, handleSomeMoreData(moreData) { // process moreData } } That is, do everything in small chunks, keeping the code that has to do with the async call in the callback, and calling another function to work with the result of the callback. &lt;half-assed-plug&gt;I've applied this technique in [playit](http://punosqnp.nl/playit-dev.html), my reddit youtube/soundcloud/vimeo player.&lt;/half-assed-plug&gt;
What are you talking about? Logically out of order? Because I defined the method before using it? Ok, define it after you use it then, just make sure it's loaded first. Or better yet define it in an object with related data/methods.
Assuming this is a reference to Richard Stallman? Just out of curiosity, why would he in particular be made sad by this pattern?
Stop nesting callbacks so deeply.
I agree that building objects is a good way to go. It really takes a whole new outlook oh how to build a program. Building HTML is just string processing, so all the complicated functional programming stuff is feels foreign. In time, you'll pick up tricks.
Tilt your head to the right! Also: *Italics*.
Depending on the JS engine, there can be pretty significant performance gains to writing the code this way as well. Named functions are typically much faster than anonymous functions, and non-closures are typically much faster than closures. If this were in a browser, it'd be even more pronounced, since IE has issues coping with code that frequently uses deeply-nested anonymous functions.
HA, got it
Why are you using your own `function.bound` method when v8 supports native ECMAScript 5 `function.bind`?
I didn't know it does! I'm by no means a JS expert. I do need it to work in other browsers, though.
I'm finding that in node it's not unusual to be nested into callbacks three or four levels deep. You can define the functions separately and pass in references, but then you lose the lexical scoping.
Skip the debugger for now. Just use the console. If you don't have a background in desktop applications, a debugger will look weird and intimidating. Logging is all you need to start.
Love it. I'm a fan of JsonML and perf is the hardest part of any DOM-based approach. How does it hold up under IE, with all of its DOM quirks?
sexyjs, callback chaining
Then use a [`function.bind` fallback implementation](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind#Compatibility) for other browsers.
Yeah, don't worry, I already do that to make IE do Array.indexOf and .map. 
Creationix's [Step](http://github.com/creationix/step) is pretty nice. &gt;A simple control-flow library for node.JS that makes parallel execution, serial execution, and error handling painless.
&gt; Yeah, don't worry, I already do that and &gt; I also have a Function.prototype.bound defined You've lost me...
The parent function can create and return some object and it can also hand the very same object to the callback. The callback can then change/add/remove properties of that object. For example, over [here in demo.js](http://forums.indiegamer.com/showpost.php?p=234333&amp;postcount=29) I let the parent function return some object and I also hand the very same object over to its callback function. Which is admittedly sorta fucked up if you think about it too much. Over in the callback I only read properties, but I could of course also add some more if I'd like.
Oh, he wouldn't be. }); just looks like a sad man with a beard.
Ah. Sorry I wasn't clear. I already define fallback implementations for other functions, like Array.map. I didn't know Function.bind extists, you say it does, great. It would probably have been better to not mention that I need it to work in other browsers -- most likely we all do. Or -- I was pretty clear that I was talking abou Array.map and not Function.bind, in my opinion...
It's not the parentheses that are on separate lines, it's the braces. You could say the same thing, but most people agree it's easier in the long run to put them on separate lines (easier to modify in the future). Sometimes it's better to use a few named functions instead of too many anonymous ones, for readability.
I actually don't know, I don't have any windows boxes (or licenses) to test with so I haven't been able to check.
Use a Deferred! Here is the Closure implementation (which was ported from MochiKit, which really took it from Twisted): http://code.google.com/p/closure-library/source/browse/trunk/third_party/closure/goog/mochikit/async/deferred.js Basically, a Deferred represents an asynchronous operation. You can pass it around and add callbacks (or "error-backs") to it.
This is a totally obvious and also genius idea. I will attempt this!
I'm similar but I like to make my code even more verbose var jQueryAJavaScriptFrameworkByJohnResig = jQuery; jQueryAJavaScriptFrameworkByJohnResig(function() { }); 
"If you need more than 3 levels of indentation, you're screwed anyway, and should fix your program" - Linus
jQuery can do this. As of 1.4.3, it's baked in: http://api.jquery.com/link/ Before it was baked in, you had plugins to do this: http://plugins.jquery.com/plugin-tags/databinding
Huh.. this is something I was unaware of.. I don't care about IE... but how big would the performance gains be on typical modern browsers? My Reddit extension for Firefox, Safari, Chrome and Opera has a number of anonymous functions that probably should've been named, but sometimes I'm in a hurry just to get things working and I'm not as clean as I should be :-\
That's basically one of two main styles of coding in node.js You have a lot of events, and each event handler needs some context because the same JS thread is handling potentially many thousands of requests at any given time. So the usual way is to just use closures to keep the context, which can give you glorious pyramids of code (a bit less pyramidal, if you make a point to define your functions-in-functions before calling them, as [ripter](http://www.reddit.com/r/javascript/comments/du9um/i_like_javascript_a_lot_but_is_there_any_way_to/c12yrqj) points out, although you will still end up with large quantities of left white space. The other way is to use context objects that you pass around. Effectively, instead of using an implicit closure scope, you use an explicit object. That allows you to keep the vast majority of your code in top level functions. As [smellycoat](http://www.reddit.com/r/javascript/comments/du9um/i_like_javascript_a_lot_but_is_there_any_way_to/c12yl5v) points out, you can use "this" to hold your context. Another alternative is to just pass your context object as a parameter to functions that need it. That's more or less my own approach. I'm not particularly religious about it though. I still have instances of code with 3-deep nested inner functions, although they're kept tiny. The context object for me tends to represent a user, and ends up having a "persistent" component that keeps needed data/state between requests, as well as a "transient" component that holds only data relevant to the current request. I end up having a number of function that look like `function doStuff(ctx, ...)`, and those are the ones that care about context. It still means I have to wrap them in some way when passing them as event listener, in a way similar to smellycoat's .bind() method. 
I doubt we really need another convoluted syntax, and this only makes debugging more of a nightmare. 
Sorry, I should have been more clear. I was talking about Scheme/Lisp.
They do look good on paper and I spent an afternoon trying to get things to sandbox properly. I never did figure out exactly why I couldn't since every reduced test case I had worked, but I couldn't get it to work across all templates for some reason.
Have you looked into CoffeeScript? The syntax really isn't anything crazy, it feels like how I would write javascript if I could indent instead of use curly brackets, and it's designed to make debugging as painless as possible. The main developer is also really nice and open to suggestions. If you haven't already, I'd recommend checking it out a bit before dismissing it.
I'm afraid your comment is in the "pompous and arrogant" end of the spectrum.
This. :) it's over at www.sexyjs.com, go have a look.
[Lisp style bracket placement](https://secure.wikimedia.org/wikipedia/en/wiki/Indent_style#Lisp_style)
Linus writes in C. In Java, 3 levels would suck, because everything must go in a class and Java programmers usually indent class bodies (that I've seen). In Lisp, 3 levels would suck. JavaScript is more similar to Lisp than C (e.g., anonymous inner functions).
I don't know about node.js, but I know with DWR, this also helps address scope issues since the callback is executed asynchronously. 
"hey all you pregnant women stop being pregnant."
Thank you! Lot's of refactoring now.
Oh, I see now. I can see how it could be interpreted either way.
You've gotta be doing some real extreme programming to need something like this. I already get frustrated when programming with non-clicky keyboards, can't imagine doing it with a touch keyboard. Besides, when I want to program on my phone, I just fire up vim or ssh to a desktop :P.
http://github.com/creationix/step
I don't know why this submission is getting so heavily downvoted. Anyway part of the problem is I think really good JS programmers tend to be employed (imagine that). If you can lure one away from his/her job be prepared to pay them a better than average salary (50k/year won't cut it).
Yes, my point is that the app is doing it wrong. It doesn't need to specifically listen for touch events. Click events are ubiquitous.
I especially love the object literal syntax. With objects often being used in the same way as keyword arguments in Python, it's quite pleasant not to have to wrap them in braces every time. I'm not too sure about the implicit parens for function calls, though. (i.e. `foo bar, qux` == `foo(bar, qux)`). It seems useful, but in nested calls it has bitten me in the behind a couple of times. Also, it makes jQuery-style chaining look weird: `(($ 'foo').bar 'qux').foobar()` (in JS: `$('foo').bar('qux').foobar()`)
That's the problem I face at work, we're a PHP house with a lot of Java programmers, so it's hard for a lot of them to grasp that Javascript is a functional language that uses prototypal inheritance. I get a lot of flack for the "unconventional" style I use when writing javascript
PS: it has the ability to query the Reddit API very easily: jfu.ready('reddit', function () { this.front_page.hot({}, function (data) { $.each(data.data.children, function (i, post) { console.log(post); }); }); }); 
If Im understanding you correctly, you would like to build your own blocking functions? Such that you can move from procedural to asynchronous and back? That would be extremely powerful. But I suspect the problem is more difficult then you think. I believe javascript engines all work on an event loop system, where there is an event stack for chunks of code. After a chunk of code finishes running, the browser checks for CSS/HTML changes and does what ever needs done for rendering. Once that is completed, it will grab the next bit of code from stack and run it. So, I think what you are asking for is a way to stop a chunk of code at an arbitrary place, place it on another stack, which can then be started again another chunk of code. Does that seem to make sense?
It's still a tad slower in V8 bench though. But yea, it's f-ing awesome that they managed to catch up.
I will be using this =)
Awesome :) Let me know when you do, would love to see where and how it's implemented! 
Lua support coroutines as well.
May the JavaScript speed war continue forever.
I have checked it out, and it ain't for me, that's for sure. I'm a javascript programmer, and I do not need coffeescript. How exactly are you going to efficiently debug coffeescript if you can't use firebug to directly debug the code? If you are using coffeescript to produce javascript, you have cut yourself out of effective debugging using the best tool for it. Some of the tools I've developed let me modify javascript code on-the-fly as it is running in the browser. Coffeescript really seems like a solution in search of a problem. Just learn javascript, know it, love it. There is no value in learning coffeescript, except to exclude yourself from the rest of the web development world, who are busy learning and using javascript. There are so many reasons to not use coffeescript, the list would be huge if i kept going. I happen to love curly brackets, there is nothing wrong with them. If you have something against using them it is more of style fetish than a reason, and coffeescript will not make you a better front-end (or node.js) coder. What really tweaks me about coffeescript is that it is attempting to dither the playing field with useless fetish coding styles. Just learn the damned language (javascript), it really isn't that difficult. 
yay. now all we need is for every IE user to upgrade to IE9, and we'll finally have universally fast JS on the desktop.
 while(1){alert("...and ever");}
If you add a 'yql' module to the mix, your library will gain instant access to a lot more (including non-jsonp) data sources. The trade-off here is that the JS APIs probably won't feel as custom-made as the one you have now for reddit, for example. If users of your library make a habit of grabbing multiple JSONP urls per page, they could also use YQL to pool requests together so they'd get their twitter/reddit/flickr/watchamacallit feed data back in one request. Or maybe your library would do it auto-magically for them.. 
That's a pretty awesome idea, thanks for reminding me about YQL. I'll see if I can add something in. It's always nice to have it as an option!