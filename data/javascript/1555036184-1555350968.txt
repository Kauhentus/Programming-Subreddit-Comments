It’s not a JS superset...it’s a completely new language.
You’re just plagiarizing what I’m thinking. I like you. jQuery pretty well shaped what modern browsers can do, and now we really don’t need to create new projects in jQuery because JavaScript adopted almost all the great solutions jQuery provided.
Something like this? Could abstract away the property accessors if you need it more functional. const matchedEvents = (events, selectedFilters) =&gt; evts.filter((evt) =&gt; { const { eventTypes, countries } = selectedFilters; return (evt.types.some(t =&gt; eventTypes.includes(t)) &amp;&amp; countries.includes(evt.country)); })
Someone downdooted you, so I thought I should share an updoot. Also, my autocorrect is fighting the hell out of me for typing this response.
I use jQuery to sizzle my Vue modules before I preprocess them into OCSS and Ember.js React Component class constructors in Webpack. It helps encapsulate Dom elements as objects providing faster build times for my Nosql object store in docker. When I deploy, bamboo massages the `$` a bit, and it helps emphasize animation dexterity when I execute from an alpine box. Also, it’s inclusion in Bootstrap, saves time when compiling my asm.js modules without having to utilize a typescript compiler or importing Ratchet.js or Knockout to look cooler.
I loled alot, literally somebody spend so much time to express a joke and make a pun on some best practices. Legend lol
Where I work at, we don't use jQuery at all in new projects for at least a couple years. Basically, it had 3 reasons for us to use it, which are all better handled by better tools: * DOM handling: React or Vue * Ajax: Axios, Rx or a Fetch polyfill * Utilities: Lodash and / or Ramda (if we're using Babel, some plugins and macros are also pretty handy) However, I do recognize jQuery's importance in the evolution of JavaScript. I would never recommend it for new projects tho, since everything I mentioned above does a better job at it.
It depends on the company's culture too
Along spa lines, ember.js is right up there with philosophy of jQuery... Except ember is moving with the crowd a bit rather that 'only' iterating on itself to be the same, but better. Ember hasn't been cool because it's stable, and the teams are very dedicated to LTS releases and backwards compatibility. Ember only recently has made a move to remove jQuery integration by default. (Today, this is a feature flag, but will be default in a few weeks)
lol &gt; IF not then vanilla JS is great, of course, but you'll soon start building your own mini-jquery because typing 'document.getElementById' all the time is boring. Do you even use vanilla js? document.querySelector is where it’s at.
It says it's for demo purposes :)
Do you mean something like [this](https://jsfiddle.net/3ghLa24u/)?
Like a text box linked to a variable on a linked js file
I’d say the tendency to cobble together plugins over understanding and solving the problems yourself can quickly become a bad habit.
Are you retarded?
Maybe one of [these](https://jsfiddle.net/nspjvg45/)? Do you want to load a text file in an html object?
 document.querySelectorAll('button').forEach((el) =&gt; { el.addEventListener('click', () =&gt; { console.log('a button was clicked'); }); }); vs $('button').on('click', () =&gt; { console.log('a button was clicked'); }); --- --- document.getElementById('something').dispatchEvent(new CustomEvent('custom-event', { bubbles: true, detail: 'foobar' })); vs $('#something').trigger('custom-event', 'foobar'); --- --- var el = document.getElementById('something'); el.dataset.enabledFor = 'something'; el.classList.add('enabled'); vs $('#something').data('enabledFor', 'something').addClass('enabled'); --- document.querySelectorAll('button').forEach((el) =&gt; { el.addEventListener('click', () =&gt; { console.log('a button was clicked'); }); }); vs $('button').on('click', () =&gt; { console.log('a button was clicked'); }); jQuery still provides a more enjoyable programming experience than the DOM API.
Perfection.
If it's open-source then yes. If not then no.
Hoisting in JavaScript: Use const and function declarations. Your code will be cleaner, easier to reason about, and won't have ridiculous errors that could have been avoided.
Do you really need an article about hoisting? Come on
&gt;For developers, JS is easy to learn and fast to get into active development. Its syntax is easy and flexible for newcomers. It also simplifies the development of complex applications by enabling developers to simplify the app’s composition. &amp;#x200B; I would disagree with this benefit, &amp;#x200B; 1. It is not easy to learn you just have more resources as it is very popular, if you really want to write proper code in js you actually need to spend quite a bit of time to get to know and understand some things. 2. I agree that syntax is flexible (partially) but completely disagree "with easy for newcomers" part (especially with ES5 and ES6) it is very confusing if you are just starting.
Just not their salary.
It’s omnipresent because there’s no other choice in the browser. To think otherwise is silly.
Hi /u/prajeevan, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I guess they don't stop bugs..they Track\*\* your bugs. But still funny :)
Uh... You okay dude?
Don't forget about 'use strict'
Hey, I was being nice!
No it isn't. It's an appropriate pattern for small tasks. Don't build an app with it, but if you have a website and you want to make a few small DOM manipulations, it's acceptable. The politics are indeed terrible.
With electron, cordova, node, xamarin, Pwa's etc, js is poised to become even more dominant.
Everyone who isn't using pure blippetyblopp-script in 2019, are just wrong. Sure no browser is using it yet, because I just made it up, but you can easily compile it into regular JS + CSS + HTML. And if you're not, your probably like **40,** or something!
&gt;Fixed But it was already fixed.
Those tools are not always automatically better...of course if you want to build a UI with more than one dynamic element using these quickly makes sense..tbh if you wanted to tell me you need to throw a boat load of npm dependencies on the project to implement react to load some REST data and append a new element to a list I would first laugh at you, then doubt you have an understanding of Javascript (and problem solving) but only know your frameworks...
Clever +1
Placeholder
You OK mate?
BOOM!
`$('#smurfpappnenene mouth').slideUp();`
It also depends on how fast you need something to be created. Most of the dev work I do is 'ASAP', which involves a lot of using plugins. A lot of good plugins nowadays are still tied to jQuery, so I have to stick with it anyway.
I learned how to do things ”the jQuery way” rather than learning how JavaScript works. jQuery sometimes make hard things a bit too simple, makes it easy to write bad JavaScript. But maybe I shouldn’t blame jQuery as such. More the way it was used and taught. Not really a problem unique to jQuery. The same problem exists today in some circles with newer frameworks like Vue.
What would you say is the differences between an object with properties as member variable and functions versus a class? It seems like you get the same single dependency injection, I don’t typically need to extend built in classes, am I missing anything else?
javascript learning wasn't that much easy !!
It may be clear in your case, but from that filter object, how would I know where you mean AND or OR?
In my opinion there is no difference. The class keyword is just an abstraction that looks nice. And from what I've observed it is the nicest pattern to read and work with.
I love that $ is basically a functor type. It implements map and everything ;)
Clicks are clicks right? Nice movie huh (from your name)
no semicolons, no upvote
Thanks, so you think a foreach loop inside the first filter?
Yep, you're right, But I mentioned it in the conclusion &gt; Keeping all your data in a file might not work properly in production, you should persist it in somewhere less volatile, such as a database. It could be Redis, InfluxDB, ElasticSearch, MongoDB, etc.
https://developer.mozilla.org/en-US/docs/Web/API/Performance/now
I use standardjs style linting [https://www.npmjs.com/package/standard](https://www.npmjs.com/package/standard)
``` client.sayHello(params, function(error, response) { if (error) console.log(error) console.log('The Result Is: ' + response.result) // 'The Result Is: 5' }) ``` i dont get where does client.sayHello come from ? shouldnt this be client.Add or something, where is the definition of sayHello?
It's less succinct than jQuery maybe but it's JS and not a library so you can use it at any point and in any JS code where there will be a DOM
Thank you! It works
Drupal and WordPress be like "oh, let's embed jQuery 1.4 in the core fam"
Very nice! I have no use for this, but great job nonetheless
Not required since ES2050, keep up mister.
They are better solutions though, solely because of scalability. Your one page static site may become an SPA after a single scope change, and then you'd have to refactor your asynchronous requests, templates and everything else to have a maintainable code base. Isn't it better to just start with an already scalable starter?
The advantage jQuery has over Angular, React, etc is that it is essentially a utility library, not a framwork.
Hi /u/7Eleven2019, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
No thanks. I would rather have functionality like this not be a third-party dependency.
Thank you for your comment &lt;3 I'm working on it
What if your child dependency needs a dependency? How will this work multiple levels down? Seems like a lot to remember
[removed]
It's not better because you serving a bundle that is about 10x to 100x larger compared to what its needs to be for solving a problem that does not even exist yet.
and its an abomination :P nah, to each their own. i just find it absolutely horrible for readability.
Only if you're not optimising or tree shaking. I built 2 Vue SPAs in the past month consisting of 5 main views, about 20 components, image heavy, svg rendering, WordPress api integration, and they're less than 2MB each, WITH images.
You've nailed it. JQuery is fine for it's purpose. But the problem is people only knowing JQuery and solving much bigger problems with just JQuery. And often doing it in a dirty way which makes the whole thing even more brittle and complicated. Some tools are better for some situations.
Really?
yeah dude
&gt; xamarin Wait, what does Xamarin has to do with js?
A lot of correct answers so yes just loop through and then filter as you like then select index of data in array you require.
I still use setters and instance creators like \`Reporter.createReporter(...dependencies)\`, those were just quick examples.
Pretty cool, one UX thing would be to detect a mouseLeave event or similar to stop the rotation when you live the container.
Well, I wouldn't. For starters, if it was so simple, I would only need a few KB in minified Vue + Axios. Vue is better than jQuery for DOM handling in any scale, and using jQuery only for Ajax is also throwing KBs away. Then again, with tools such as Yarn and Parcel nowadays, setting up a project that uses "MBs of node_modules" is really trivial and will create really small compressed files. If you can't create a small file base for a simple React project, then the one who doesn't know JavaScript is you, because times change. A small static site with React for simple interactions is better than jQuery just because if some day your site scales, it's already on its way.
Hi /u/AlienNumber24601, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Did you manage to get this sorted? Seems like quite a few answers but this basic example can be applied to anything. It is simply showing how to append a variable to html. For this example a variable stores a value we want to use for a link so we append it to the href. [https://jsfiddle.net/TJRemirez/47uf5etp/](https://jsfiddle.net/TJRemirez/47uf5etp/)
I think author mixed it with quickstart tutorial from [https://grpc.io/docs/quickstart/node.html](https://grpc.io/docs/quickstart/node.html)
Map? 🙈
 [controljs](http://formeditor-dev.controlsjs.com/?controls=dev#singlescriptapp=1@parentcode=playground@parentcodeid=1555060777956) in the browser is nice and 100% what I want. However, it is unclear if it is still developed. Installation on ubuntu in Netbeans fails with crazy errors. Maven link is a 404 error. So I want something similar but maintained.
You're crazy OP (lol)! You can't access an object inside a function like you're trying to do, the function would need to return the object and then you write `acc()` to access that object.
 function acc() { return { fName: 'a', lName: 'b' } } console.log(acc().fName)
I think the point is that sometimes you don't need to write a whole SPA, just a webpage with a tiny bit of dynamic functionality. And that functionality can't always be neatly compartmentalized into a "component" either. Think, for example, of adding a class to certain elements that scroll into view, or some minimal validation on an existing form, or whatnot. In that case, it's really either jQuery, DOM, or a crazy misuse of Vue/React. And jQuery is still way better than the DOM, even the newest, shiniest version of it.
Hot take: whenever there's a "Javascript way" and a "jQuery way", the Javascript way is almost always worse and provides no substantial advantages to learn. CMV.
Bingo. This whole nonsense argument is because people mix up SPAs and regular webpages, with a little bit of Javascript functionality. And those are fundementally different use cases. I don't think anyone really says jQuery is the superior technology to build SPAs, nor would anyone claim that React or Vue is the solution for the minor, non-component-based functionality jQuery is great for.
RemindMe!”try this tomorrow”
What should I use instead of jQuery for my website?
jQuery is still JavaScript. Why wouldn’t you want to understand what it actually does behind the scenes? I’m just saying that some of the shortcuts jQuery take are good to understand so you know if it’s a good idea to use them for your specific use case. You do you, but in my humble opinion I’d rather have code make as obvious as possible what it actually does. Even if it means it will be longer and more verbose. Readability trumps smart. Again, that’s my opinion. I’ve worked long enough to know it doesn’t always apply. :)
Why?
So much salt, the JavaScript community is definitely a toxic one
This is probably the only thing I'd use, the vanilla JavaScript API is very solid nowadays. ``` const $ = document.querySelector.bind(document); const $$ = document.querySelectorAll.bind(document); ```
I'm not sure what you mean, most of the "optimizations" you are talking about here seems to involve just deleting the code. That's not optimization, at all, since the code wouldn't be doing what you wanted it anymore. An important aspect of optimization is that you make the code run faster while still achieving the same goal. Obviously it doesn't work if you just delete all the code, then nothing works anymore.
Why don't developers optimize nothing doing code, how is the browser supposed to know this shit does nothing?
The original has now been updated, many apologies
Read up on the halting problem.
Yes. Also it's easier if the selectedFilters keys (eventTypes, countries) match the actual property names on the objects (types, country), so you can reference each other dynamically.
Knowing that it does behind the scenes might be interesting, but that's about it. Especially since what actually happens behind the scenes changed with browser versions. But I disagree that plain DOM code, even the swankiest new model, is more readable than the equivalent jQuery code, like 95% of the time. If you go to that "you may not need jQuery" site, it honestly reads like an uninentional ad for jQuery, with only a few exceptions.
Thanks !!!
Start with `console.time("label")` and end with 'console.timeEnd("label")'
This kind of nonsense is why it is bad form to modify the array while you are iterating over it.
Yes.
Can you give some specific examples jQuery or Vue encourage you to write "bad" javascript? I've been in this game for a long time and see some seriously questionable/borderline bullshit comments about this and that, especially jQuery. I mean if you wrote bad javascript it was because of you and not because of jQuery, Vue or probably anything else really. &amp;#x200B; I don't use jQuery directly for much of anything these days because there are absolutely better tools out there but this "it made me write bad code" and one of the other comments above about "back when pages were just static in 2008" are seriously bogus. XMLHttpRequest has been around for a long time, jQuery made using it even easier especially when it came to updating DOM. What kind of bullshit statement is "back when web pages were static in 2008", christ, lol, what the fuck. Talk about jumping on the hate band wagon just cause the cool kids. Fucking children don't know what it means to work for your money. :)
Of course it works, but if you are just making a few don't manipulations why bring in a whole library?
what is goal of `while(true);`?
Very cool. Thanks for sharing that. &amp;#x200B; Just in case you aren't aware, the "Offline Converter" link doesn't do anything. &amp;#x200B; Keep being awesome.
Yeah currently I’m developing the offline converter too. I’ll update you guys after it’s done ❤️
Code doesn't have goals, programmers have goals. You'd have to ask the programmer who wrote that line. Google uses an infinite while(true) loop in their JSON data to prevent certain types of attacks. There might be other use cases as well.
In this example, none.
not exactly a gui form builder but does help in rapid prototyping. [https://github.com/mozilla-services/react-jsonschema-form](https://github.com/mozilla-services/react-jsonschema-form#property-dependencies) It is a form builder based on json schema.
My goal is that browser optimize my code. Google should find other protection.
You can build a custom SPA framework base for your app in Vanilla JS or jQuery, and quite cleanly too, if you know how to architect and structure an app properly. Where a lot of sites go wrong is they didn't have any architecture or coding standards to begin with and just cobble together scripts and functions to get it working. Then they hire some junior developers to hack on it some more and it turns into a big mess.
Hi i am not really familliar with the benefits of converting csv to sql. Can someone explain that to me ?
From the link: &gt;The timestamp is not actually high-resolution. To mitigate security threats such as [Spectre](https://spectreattack.com/), browsers currently round the results to varying degrees. (Firefox started rounding to 1 millisecond in Firefox 60.) Some browsers may also slightly randomize the timestamp. For more accurate results it's better to measure a few hundred repetitions of the algorithm and compute the average time.
Can you add a CSV to a MySQL database directly? You can convert those CSV lines to SQL queries and then add to the MySQL db.
[Why not import the csv into a table using load data?](https://dev.mysql.com/doc/refman/8.0/en/load-data.html)
Before you can optimize your code you have to learn what "optimization" means. If you simply delete a bunch of code from your project you aren't optimizing, you are just deleting all your work.
&gt; Google uses an infinite while(true) loop in their JSON data to prevent certain types of attacks. Can you explain more how that works and what attacks it prevents?
Could you name me any language which is easier to learn than JS in your opinion?
Modifying an array while iterating over it is just asking for problems. It's much harder to reason about than doing it in 2 separate steps.
controlsjs.com
Because the web designer might not be a very good coder. The web is meant to be democratic and jQuery plugins lower the barrier to entry. This is a good thing.
Came here to say the same thing
It's pretty clever. A hacker can make a webspage that tricks the visitor's browser into fetching data from their google accounts with cross-domain &lt;script&gt; tags. Normally this wouldn't be a problem since all you'd be getting out is JSON data, which is still stuck in the user's local browser and the hacker wouldn't be able to see it. Normally you would never load JSON data with a &lt;script&gt; tag since it does nothing, data is dead unless there is code to act upon it. It would simply be loaded and then nothing else would happen. However, since JavaScript is so dynamic, the attacker can change the prototype functions of JavaScript's arrays and objects on his webpage to automatically do an AJAX call to upload the data to the hacker, and it would instantly trigger when the data is loaded. So, to prevent this attack, google has a while(true); loop at the start of it's JSON data, so if you load it with a &lt;script&gt; tag, it would crash/timeout the JS execution and prevent the hacker's prototype functions from triggering, thus saving the data.
Python is what first comes to mind. But that is more focused on scripting and not visual things.
nice ! thanks v much!
For example u can consider python which is quite simple to learn
This exactly. If you're a web designer and you want to add a few dropdowns to a page, jQuery is perfect. People complain that it's an unnecessary dependency, but it's only 30k packed, and it's such a lovely API. I don't use it personally, but I still look back on it with fondness.
jQuery `find` is a little more than `querySelectorAll`, especially when it comes to queries attached to an element, not to `document`. The advantages are described at: [https://github.com/jquery/jquery/blob/3.4.0/src/selector-native.js#L11-L34](https://github.com/jquery/jquery/blob/3.4.0/src/selector-native.js#L11-L34) For one, jQuery supports leading combinators: ```js elem.find('&gt; .btn .name') ``` Another difference is sensible rules for scoping. Consider HTML: ```html &lt;div id="test"&gt; &lt;div id="test"&gt; &lt;/div&gt; &lt;/div&gt; ```
Controls.js is available under the GPLv3 **BUT** the code at http://formeditor-dev.controlsjs.com is strictly commercial software. I was on the phone with the company. Only the Netbeans based Form-Editor is GPLv3.
Good point thanks
Spaghetti code. When an app has multiple interactions, those interactions can become combinatorial. You end up with cycles and nets that are impossible to work with. For more complex apps we tend to use a tree-shaped architecture, when interactions update a central store and the data then flows down into the elements on the page. This is Flux. It depends on what you want to build though. You need to pick an appropriate architecture for the size of your project.
The DOM is not React. React is an abstraction for making web apps, as is jQuery.
If you're building a simple website with a few forms and dropdowns, then use jQuery, or else read up on DOM scripting.
`document.querySelector();`
because developers can save time by optimizing when computer can optimize much faster. because browser analyze code. 1. while alone do nothing. word true do alone nothing. loop does not have code inside. 2. const is constant so browser does not must check constant condition every time.
Please explain, what case you have in mind that could require scaling so much that you would have to use use a full js framework to query a rest interface and add an item to a list accordingly...what measures would you take in order to make vue/react scalable? You mean I could use your script and deploy it to thousands of machines for scaling without even looking at it before? In my experience you would still have to refactor most of the project in order to really scale...I have observed that many prototype projects are (planned to be) completely rewritten from scratch once scaling is relevant... So if you applied for a job with me and you proposed to implement vue/react to simply add an item to a simple list I would still laugh at you and show you the door as soon as I had caught my breath...
ok. for compatibility reasons browser should instead of running empty infinite loop throw error. or don't you like it too?
what do you say for second example? &amp;#x200B; should browser optimize constant condition? &amp;#x200B; i personally have code with constant that i check later. but constant can be defined by different ways.
&gt; const is constant so browser does not must check constant condition every time. function ApparentlyConstantValue() { this.value = 0; } ApparentlyConstantValue.prototype.valueOf = function () { return this.value++; } const getA = () =&gt; { return new ApparentlyConstantValue(); } const a = getA(); console.log(a &gt; 5); //false console.log(a &gt; 5); //false console.log(a &gt; 5); //false console.log(a &gt; 5); //false console.log(a &gt; 5); //false console.log(a &gt; 5); //false console.log(a &gt; 5); //true console.log(a &gt; 5); //true console.log(a &gt; 5); //true console.log(a &gt; 5); //true console.log(a &gt; 5); //true
This guy has been making some Firebase libraries that you might find useful https://github.com/bijoutrouvaille
Browsers actually do optimize constant conditions. Make sure they are actually constant and not merely "a variable I probably won't change" since the browser doesn't know that.
It only happens when you take google's JSON data and attempt to run it as JavaScript code rather than parsing it for the data. It's a security technique, as nobody attempts to run JSON data as code, it doesn't do anything. Just take a look at this JSON, you can put it in a .js file but it doesn't actually do anything by itself: {fruit: 'banana', sweetness: 5} So there is nothing to optimize in that particular situation.
ok. in this case constant is not constant. but in case that getA() return number, string or other primitive value browser should optimize it. &amp;#x200B; btw your code does not work for me for some reason.
optimizing helps. because it stops to crash tabs.
The tab only crashes if this JSON data was run as JavaScript code, instead of being treated as JSON data. That is something which should never ever happen, unless somebody is trying to do some very shady shit. Optimizing to help hackers steal your google data faster is hardly a productive endeavor.
point is that i can send link to site with infinite loop. then you will not able for seconds to close this tab. what is sure bad thing.
No money in the world would be enough
Agreed that's a bad thing, and it wouldn't be a bad idea to prevent it, but it wouldn't really be an" optimization". When 15s have passed and the tab crashes, the code after the while(true) will not have been executed, so completely removing the while(true) would cause the code to behave differently (as the code after the while(true) is now free to run). That's a very bad idea, because now depending on what browser you have and how aggressively it removes infinite loops like that, your JavaScript code will behave differently from person to person. I wouldn't mind a while(true) causing the tab to stop execution of JavaScript entirely though, reporting to the user that the code is stuck in a loop. But malicious while(true) loops are so rare that I don't think there is much of a point in having such a feature.
I actually like React a lot for UI development, and it’s pretty easy to implement, in my opinion. Not quite as easy as just throwing a jQuery CDN link into your HTML file, but easy enough. You don’t even have to put your components in separate files if you don’t feel like it (for smaller projects), but using Rollup or CommonJS or whatever is pretty easy if you do. And React is only a few kB bigger than jQuery, comparing the g-zipped minified sizes.
I disagree. Python is a nightmare, and not just because half of all sources contain outdated 2.7 source code.
On the other hand why not just group those functions into a module.
Perhaps doing runtime type checking on every assigned variable to eliminate a simple comparison wouldn't be very performant. Or perhaps because if there are optimisations like this in JS, it's done under the hood in the engine and isn't evident from looking at the source code...like every other language in the world. works fine in chrome.
Ok. I agree that it's better to stop execution as skip loop. &amp;#x200B; But anyway... What about finite loop then? :P function finiteLoop(){ for(let i=0;i&lt;99999;i++){} } CPU is still more faster and faster so why don't jump into future and skip executing of this finite loop? :P
Easy, no need to be hostile. :) First off, I love Vue and think jQuery has its uses. I’m not saying either encourage me to write bad JavaScript either. I’m saying that, like most frameworks/libraries, they hide/abstract away the complicated stuff. And when you know the why and when of using a library that is great. But a long time ago, when jQuery was my default, I *didn’t* first properly learn JavaScript, which made it easy to write working but bad code with jQuery. When I tried doing that with vanilla I usually couldn’t. Simply because I was doing it wrong. And I’ve seen those same problems in Vue applications in some spaces and when reviewing code by junior devs. You can blame me for that and technically you’re not wrong. The problematic part is the way the community, my teachers and peers often encouraged me to delve deeper into jQuery rather than taking a step back and acknowledge my knowledge gaps. So, *again*, I’m not really blaming jQuery for this but rather the way it was hyped; I’m also explaining the reason for the anti-jQuery mentality among some.
To be honest that loop would probably be optimized away. As long as you don't do anything important inside of it.
If I had a nickel for every time I wrote a library for a functionality that already exists thinking it doesn’t exist...
&gt;m.uber.com What constitutes as a real programmer ?
hhahahahaha, cheerio, that's jQuery of web scraping
Really, I guess that's preference because I don't think the Reddit App is very good at all. The browser is much better.
Learn JavaScript instead you fools
no. I can't close my tab now :(
Loading CSV data is natively supported by MySQL. I really can't see any use to this
I think most people prefer to write highly imperative code, which is why JavaScript can feel easier to most people. Languages like Haskell or C++ tend to require very different paradigms for setting up your code base to begin constructing logical systems. If you want to build something quickly, it often pays to use a library. With JS, you can literally just tell the browser “find that box, and put it right here,” and it just works. Super easy, and highly imperative (as opposed to object-oriented or functional). I didn’t have to build a well-designed class or write up all my monads ahead of time. I just run a script to call the API and it works as expected. On top of that. You don’t have to worry as much about data types, memory management, bit-level operations, etc. JS provides you with seriously powerful abstractions over all of that, so you can just tell the browser/server to do exactly what you want, and it just works. You don’t need a library to quickly build something cool. But to scale up a JS application, it gets complicated very quickly, and simple imperative scripts won’t cut it any more. And then, building up a logical framework to manage state, UI updates, server calls, etc. becomes a headache, and then the dynamic type system starts to become more of a hinderance. JS is often frustrating at scale, I would argue.
Do you know sure that constant condition will optimized/removed? I read many times that constants are optimized. But I don't remember that I read how they are optimized.
There are no rules for it, it's really up to the browser developers how they want to optimize. The only promise you have is that any optimizations they do shouldn't affect how your code ends up working, all optimizations should be "invisible", so to speak.
Huh, that's strange. I can't see any reason why it wouldn't optimize such an empty pointless loop away.
Again I’m so curious here. What is better about the browser site? Do you use just reddit.com or m.reddit.com? I open posts on either of them and there’s flickering and the page moves around before settling. That really bothers me. And is consistent with all web apps I’ve ever used.
Nice, the code is really clean and compact. Did you test it with different CSS markup?
Er. That is not because of jquery. It was selector API level 2 which came out 2013(?) and was standard by 2016 - available when jquery came out. All jquery had to do was implement it via sizzle for IE7 or older.
Or better yet, try to make data structures immutable as well, and only modify a copy, so the rest of your code (both inside and outside the function) can easily reason about the shape and content of the data.
Me personally , I like to open a lot of different tabs at a time. I see an article that I find interesting, I open it in a new tab and read it later. While on the mobile app, I can’t really do that. It’s just cumbersome finding information sometimes.
Gotcha. Tabs aren’t a bad point. Of course the app has a saved post feature that accomplishes the same thing for me. To each their own. For me the horrible flickering and janky experience of the browser is not worth is.
Thank you very much. Yeah, I tested it with some libraries. Bootstrap, Foundation, and Semantic UI. All of them worked as expected. But, I think it needs more testing. That's why I have included a link for bug reporting. Thanks.
Yeah that's what I'm doing and figured jQuery was the appropriate tool. So I became curious when the user said that I don't need to start new projects with it today.
Yes the saved feature kinda accomplishes the same thing, but you still have to continuously go back and forth between posts. While on the web browser, I can have multiple windows up at a time. The mobile reddit site and the native app , don’t seem that different to me. I haven’t experienced the flickering you speak of.
Arguably from a behavior point of view, a module could be considered as a Singleton. At this point it's just different paths to achieve the exact same things. I mean, we could also just create an object containing these functions, in fact that's what a module is, just like about everything in Javascript.
Why not use ES6 features?
Bookmarked. Great tool, thanks!
You are welcome.
I mostly wrote it for browser support.
Hi /u/aqzaqzaqz, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AlienNumber24601, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/blondicie123, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/bukharim96, this post has been removed. You posted this just 3 days ago. Please do not repost unless there's been significant updates.
Hi /u/ChethiyaKD, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
You could transpile it (if you want to use new features now).
Hi /u/The_Aoki_Taki, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/stvaccount, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/rayhan666, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/colorsdontlie, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yep. I knew that without much context it will be difficult to judge. The thing is that I'm not fully controlling the mutation. Imagine an array of functions which execution may or may not change the array. Based on that change we have to run or maybe not the rest of the functions.
Hi /u/bennyman32, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Here is a little bit of more context [https://www.reddit.com/r/javascript/comments/bcayem/foreach\_or\_not\_to\_foreach/ekpstol/](https://www.reddit.com/r/javascript/comments/bcayem/foreach_or_not_to_foreach/ekpstol/)
Hi /u/stvaccount, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/straightouttaireland, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah, I know. I just enjoyed writing in the old JS. ;)
Git it! Sorry for the inconvenience caused! :)
Hi. Can I anyway know in what is my post bad?
I'm not sure anyone who wants to use a CSS minifier is going to be using IE11, but okay. I'm trying to figure out what positions = new Array(patterns.length).join('0').split('').map(function(val) { return parseInt(val) - 1; // -1 }); is meant to do. Is there a reason to not just ` positions = Array.apply(null, Array(patterns.length)).map(function(){return -1});`? I guess there's no pretty solution when you don't have `fill()`, but chaining `join()` and `split()` looks gross.
Can I load the page, run the minifier... then load the CSS all on the browser? ;)
Agreed. I hear it all the time that vanilla JS and css3 can do it just fine without jquery, but then oh... here come the polyfills. I think its great what you can do with the new things but as far as having solid cross-compatibility right out the gate I'm just sticking with what i know jQuery can do just fine.
r/javascript is one of my favourite sources for JS articles, but I've always wanted to get the top posts in my inbox instead of having to visit the sub every day. I built an app that does exactly that -- it turns the subs you select into a daily newsletter, so you can stay productive while getting the top posts. A few friends and I have been using it for the last month, and we think it's lived up to it's promise. Hope this community will find it useful! Would also love your feedback. Get r/JavaScript by email: https://redditbyemail.com/javascript Stack: React, Material-UI, Amazon Lambda, MongoDB / mLabs, Amazon SES and S3.
Lol and post deleted. Top class, OP
Well so is most JavaScript code you find online.
I see, my experience has been positive for both Javascript and Python.
That’s brilliant, kind of hacky but it makes so much sense...
You are distorting what I said, I never said to use Vue to add an item to a list, your hypothetical situation is not relevant to real world scenarios. You use plain js for that. I'm saying that, as a project, what may start as a "simple" static page may quickly become a behemoth of spaghetti code, been there many times. If you were interviewing me and thought future proofing and scalability from start are not important, I'd walk out the door myself, don't worry.
Too many webdevs are intimidated by the idea of learning another language, not realizing it's the environment and its API that are the hard part, the rest is just syntax. If that is too hard, just stick to frontend.
r/learnjavascript
It doesn’t optimize code. It optimized the execution of your code at runtime. The JavaScript code will not change. But the browser will interpret the code differently based on the context, making certain assumptions about your code that it can trust. But it won’t actually change your code.
Freecodecamp github youtube
Node is like 8 years old. Whatever it was poised for, one would hope it did it by now. Any more current adoption is just companies humoring the labor supply.
Cool project; do you have the source public at all?
&gt; I'm trying to figure out what &gt; &gt; positions = new Array(patterns.length).join('0').split('').map(function(val) { &gt; return parseInt(val) - 1; // -1 &gt; }); &gt; is meant to do I think you might want to spend some more time in Javascript, friend. This is easy code. This makes an Array out of `patterns.length`, then applies that as an argument list to nothing, then maps the resulting array by parsing items as integers and subtracting one from them . &gt; I guess there's no pretty solution when you don't have fill(), but chaining join() and split() looks gross. It looks just fine, and `Array.fill` would not make this any cleaner.
Thanks!
Hell yeah, nice job mate! way to go!
Sorry, I didn't get what you meant
Thanks, mate
If you start with a class however, and want to use instances or statefulness, then you'll be adding `this` context confusion into the mix. On the other hand you can add state/instances to a module using the revealing module pattern with no such downsides.
I know what it does, I meant why does it need to look this ugly to do what it does. &gt;Array.fill would not make this any cleaner. `positions = Array(patterns.length).fill(-1);` Really? "positions is an array of length `patterns.length` which is filled of elements with value `-1`" "positions is an array of length `patterns.length`, each empty element is joined into a string with separator string `'0'`, then the string is split character-wise back into an array and each element's value is mapped to be parsed as an integer from which 1 is subtracted"
Nice!
I was being awkwardly silly / absurd. The idea being load the web page and CSS in the browser, load the minifer code in the browser, then minify it.... ;)
You can do everything you need using DOM scripting, so you don't need it, but it doesn't hurt.
You are honestly citing *principles* as your reasoning for not using a programming library. You will never be gainfully employed in this industry.
Sick! Would absolutely love a weekly version
You make a good point and I seem to be misremembering. We couldn't use querySelector because of IE6-10 and jQuery became the de-facto polyfill, but you are right, it did exist pre-jQuery.
W3schools will teach you web design, and JavaScript. Good place to start
[removed]
I'm citing principles because I would hate to work with someone so closed mind. JQuery has it's uses, as any other tool. Use the right tool to the right job is way more important than working with someone who only thinks in money.
 .foo { background: #ccc; } Output: .foo{background#:ccc} Expected: .foo{background:#ccc} --- .foo { background: #aabbcc; } Output: .foo{background:#aabbcc} Expected: .foo{background:#abc} --- .foo { background: #aabbccdd; } Output: .foo{background:#aabbccdd} Expected: .foo{background:#abcd}
Interesting stack, so this is all serverless then?
Just about every CSS minifier is written with JS. [https://github.com/cssnano/cssnano](https://github.com/cssnano/cssnano)
Thank you!! A few subscribers have been telling me that -- I will add it to the project roadmap!
\# All Fixed Can you check now?
take a freeonline course, structured learning is important, especially when you are starting out, you don't want to have big gaps in your knowledge. Harvard has a famous course called CS 50: [https://online-learning.harvard.edu/course/cs50-introduction-computer-science](https://online-learning.harvard.edu/course/cs50-introduction-computer-science)
Yep! All serverless. I wanted to minimize cost while ensuring availability: * I wanted to have a number of different projects without running multiple servers * I wanted computation to scale up if I was lucky enough to get more visitors &amp; subscribers * There is a cron job that runs nightly to pull posts from Reddit and send out daily emails. Triggering Lambda with a CloudWatch event makes this easy So far, I'm a big fan of serverless! Oh, P.S. It's a lot easier to start a project serverless than to convert something to serverless halfway through. I learned the hard way. Let me know if you have any more questions about serverless! It's my first serverless app, so there was a bit of a learning curve, but I'm happy to share what I know :)
Looking nice! Just wondering, how do I unsubscribe?
Calm down :) My comment above didn’t say that pages were static in 2008. I said that “2008 me” was building “SPAs” with jQuery. But in reality, the first large-scale “SPA” that got massive adoption (by the millions) was probably GMail, in 2004. But it took years for normal people to get quality toolkits to build SPAs. Up to the late 2000s, most pages were generated server-side and XHR (AJAX) was primarily used to augment the experience of “static pages”, but not to create full-blown SPAs. For example, submitting a form without refreshing the page could use XHRs, but navigating to other pages often required a full page reload. Angular 1 came out in 2010 and that’s when you started seeing more and more SPAs like we build today. (And funnily, many people are arguing we shouldn’t always build SPAs and rather go back to server-generates pages :) )
Seems fine. You should have unit test.
Yeah, thank you. I'll keep that in my mind
Nevermind the import system. Good luck figuring out why your code can't find module x.
When has there not been some web/mobile innovation about to take over the world? Enough poising, where's the dominance?
Is there too much recursion when your own post gets to the top? Seriously though neat project, thanks for sharing.
I can’t tell if joking or serious.
In the daily newsletter, there will be an unsubscribe link at the bottom. (I don't think that link is in the initial confirmation email though)
Here it is -- let me know if you have any questions or any tips! [https://github.com/AKhoo/redditbyemail](https://github.com/AKhoo/redditbyemail) Note: The code is not nearly as readable, efficient or well-written as I'd like. Hoping to do some code reviews with a mentor soon and refactor things a little bit.
And when one of those functions (that are out of your control) removes a previous element? You'll end up skipping an element in your for loop and not even running the code against it. It's going to be chaos.
Haha, that'd be a pretty sweet achievement: "Topped my own newsletter on April 12th". Glad you like it!
Said that obviously joking (Drupal core latest is set to jQuery 3.2), but their sites: &gt;https://www.drupal.org/ &gt;&gt;jQuery.fn.jquery &gt;&lt;"1.4.4" &gt;https://www.wordpress.org/ &gt;&gt;jQuery.fn.jquery &gt;&lt;"1.12.4"
Interesting research, thanks for sharing. Regarding the use of Service Workers, I'd always assumed they were intended to be decoupled from their originating pages so that they can run in the background and do *stuff* (e.g. process push notifications), and so assumed that this is how stealth cryptocurrency miners worked (without user permission they would fall back on standard workers). &amp;#x200B; Nevertheless, perhaps as a defense against this type of hijacking we could implement one of the following on our potentially-being-hijacked page(s): * If we know that ServiceWorker i snot going to be used on a page we can set: `Object.defineProperty(navigator, 'serviceWorker', {writable: true});` `navigator.serviceWorker = null;` * If we want to use ServiceWorker we could either create an alias for it and use the alias: `Object.defineProperty(navigator, 'serviceWorker', {writable: true});` `Object.defineProperty(navigator, '_serviceWorker', {writable: true});` `navigator._serviceWorker = navigator.serviceWorker;` `navigator.serviceWorker = null;` ... `navigator._serviceWorker.register(...` ... or create a stand-in shim that allows us to filter for allowable worker scripts: `let myServiceWorker = {` `register: (scriptURL, scope) =&gt; {` `if (scriptURL == "`[`https://www.allowedURL`](https://www.allowedURL)`") {` `return (navigator._serviceWorker.register(scriptURL, scope));` `}` `}` `}` `Object.defineProperty(navigator, 'serviceWorker', {writable: true});` `navigator._serviceWorker = navigator.serviceWorker;` `navigator.serviceWorker = myServiceWorker;` `navigator.serviceWorker.register(...` The shim could obviously use a little more meat but all of the above appear to work in Chrome, Firefox, and Edge (haven't tried elsewhere).
Seems pretty disturbing
input: `#ab{background-color: red;}` expected: `#ab{background:red;}` actual: `#ab{background-color: red;}`
It’s not just in tech. I saw a “young entrepreneur” write about blowing thousands on starting 10 “startups” in a year. All of which failed. He just wanted to seem like a guru on Medium.
React is so overrated it actually annoys me
His code operates on the values in the split Your code produces an array of negative ones
... then send it back to the server!
I don't know if I follow what you're saying. You take an array, join it into a string, split it into an array and map the elements to a new array and store the return value in your variable. The return value of his code is an array of negative ones, just like in mine.
My main issue is not in using it but in using it because you needed it for one thing and one thing only, but importing the entire library. Or because you don’t know how to do it at all without it.
stop scaring the nontechnical people. you're going to get our cool new browser features taken away. webservice workers aren't very useful as an attack vector. they're only activated while processing http requests and only process requests for the host they were loaded from... they also die every 24 hours so if the domain was transferred there's no risk of the ghost of script kiddies past coming back to cause trouble. nothing in either this article or the presentation it references is novel or clever. none of the modern features they drug out to make this seem relevant were necessary to build the system they described.
Could you elaborate on why, and possibly provide a suggestion with an alternative? Otherwise, you're just shitting on someone's parade for no reason other than "me no likey"
Use the best resource in the world to become a Programming Master https://eloquentjavascript.net
Found the angular user
i misread this originally. you're right. i apologize i still don't think this is all that gross, though that said, i guess you could new Array(patterns.length).map(cell =&gt; -1); and be done with it
/r/programmercirclejerk
Javascript.info Prob best site regarding modern syntax and regular expressions
Node is JavaScript. A quick gist of it is: Your submit button would make an XHR/AJAX or fetch request to an endpoint on your node server. Your node server is then listening for requests on specific endpoints and can return a response object. Your front end would then await this response object and you’d use the data as you please. so say your node server is set up on localhost:3000. Your submit button would make a POST request to localhost:3000/numbers. Your server would listen for a POST request ‘/numbers’ with the stuff you submitted being part of the request body. You’d do whatever you want with the request data and send it back in the response body. Your front would then get that back and you can display it as you please.
Just like PHP GET method? Pass data using the URL?
True, I think the value of using frameworks like Vue or React is that it enforces a particular structure to your codebase which has been battle-tested and proven to be reliable. This is especially important for creating an architecture that scales. In one sense, jQuery is a little bit too powerful. Anyone on your team can select an element and do whatever the hell they want with it, independent of what the rest of the team is doing, disregarding the global data flow, etc... Its almost too easy to implement a hacky solution to an urgent problem, instead of working out a more coherent solution that will work for the long term. The hacked solution is just too....*available*. Now, all of that can be mitigated with proper code reviews, and a solid design pattern laid out ahead of time. But why go through all that trouble recreating the wheel for your UI architecture, while relying on the sheer *discipline* of your developers to stick to design patterns that won’t totally fuck up your program down the road?
Well, I certainly thought so, too. But if you pass the `new Array` constructor a single integer, it returns an array with that integer length, but with *empty* slots. `Array.map()` only invokes its callback on elements with assigned values (incl. `undefined`), which means it won't work on the empty array.
My favorite method is definitely server rendered pages with Vue components in them.
A recent HN post, [https://www.dannymoerkerke.com/blog/web-components-will-replace-your-frontend-framework](https://www.dannymoerkerke.com/blog/web-components-will-replace-your-frontend-framework) Relevant because batteries are included vanilla in the browser. So React seems like a non-easily-compatible with standard DOM alternative (JSX, even if it's optional), (and yes) with a lot of hype
Why are being a dick?
Node is just a JavaScript runtime, so all you need to do is set up a server to run on it and do a bit of plumbing. You can do this by hand for a very simple case but there are tools like [express-generator](https://expressjs.com/en/starter/generator.html) that will save you the effort. After your server is ready, put your HTML and CSS files in its `public` directory. You'll need to embed a bit of JS on the page to [send the data to the server](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Fetching_data) and display the response when it comes. Then you'll need to add your script for doing the calculations, and add [a route](https://expressjs.com/en/starter/basic-routing.html) so that it responds to the client's request.
Exactly. Give me a C/C++ support in browsers and I would forget JS in a millisecond. And no, I don't mean WASM.
I'll give it a try. Thanks mate
The downfall of React is that it is a difficult environment to set up as well as a bit of a learning curve to get into if you're not strong with es6+. Web components have been around for a long time, they aren't anything new that's going to sweep react/angular out of the market. In fact, the reason React and Angular are so popular is because they give the user the ability to take advantage of custom components (relatively) to quickly and efficiently build reusable UI components without having to write all of the overhead yourself. If you aren't competent enough with es6 to learn react, well you're definitely not going to be able to write this stuff yourself. React has a lot of hype for a reason.
It depends. With a POST request, you typically send an obj in the body of the request. so something like &gt; const userObj = { firstName: ‘Test’, lastName: ‘User’} &gt; http.post(‘api/users’, obj) but you can use the content-type of x-www-form-urlencoded if you want to pass stuff in the URL in a POST. &gt; http.post(‘api/users?firstName=Test+lastName=User)
Thanks mate
Agree entirely, and love your flair.
You can google design patterns, and the first page will be filled with explanations that have withstood the test of time. This particular article is just rehashing those sources, it adds nothing new.
You can't shorten it like that because you can't tell if there is another rule which matches the same element(s) and which contains other background related declarations. The background shorthand sets everything. https://jsfiddle.net/jfcdn73m/
Hey! Nice job. &amp;#x200B; Just a few comments from a cursory glance: &amp;#x200B; 1) Look into \`plugin-proposal-class-properties\` from babel. You can use arrow functions on your React classes and you won't need all of those \`bind\` statements in your constructor. You'll also be able to set the default state directly on the class instead of in the constructor -- you can do away with the constructor all together! &amp;#x200B; 2) \`Array.sort\` mutates the original object so you don't need to reset the variable in \`handleSubscribe\` in \`App.jsx\`. &amp;#x200B; Otherwise it's not a bad project! I'd keep at it. &amp;#x200B; Feel free to reach out for any questions or advice.
There are various ways in which you can do that. You can have the road be a ring. Like it is on a sphere, either on the inside or outside surface. You can make the road be static. That is, you do not really move forward, just the texture is animated in a cycle and you _appear_ to be moving. You can add pieces in front and remove them from the back on a loop. You add and remove the pieces out of _viewing distance_ so the player doesn't notice. Each option has its advantages and disadvantages, naturally. In any case, I would suggest asking about this in a more "game development oriented" subreddit. I mean, this is not about JavaScript or Three.js in any particular way.
There's no setup involved besides including the library and calling render.
WTF is this shit
Ha, thanks!
This isn’t a roast per se but from looking at your mobile homepage I have zero idea what this service is
Great advice -- Thank you! I'll definitely look at `plugin-proposal-class-properties`. Have you tried writing with React Hooks? Does it make life a lot easier? I've just started looking into it.
Hi /u/digi8, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Had a look, not interesting thumbnail pics though
You're welcome! &amp;#x200B; I actually rewrote an old project of mine with Hooks. I enjoyed it very much. I'm still on the fence on the whole component vs application state discussion. I worked on a project recently where I kept everything in Redux and I found that to be very useful and my components were generally pretty small and easy to read. I do think there's value in controlling component specific visual state via component state and I do think React Hooks makes that feel much easier. I actually enjoy writing function components more than classes and Hooks makes that much easier to do.
i searched "horse road" to play my favorite song that all the kids are listening too and i didn't see it until i scrolled down quite a bit, whereas Youtube knew exactly what I meant. also, not a fan of the hover effect on like a dozen elements to reveal what the heck the site is about.
Okay. Thanks for the reply. Sorry about posting in the wrong place
Okay. Thanks for the reply. Sorry about posting in the wrong place
This is cool, I recently looked into creating something similar for /r/rnb. (You should charge for this service).
Author of the library here. I created this library to easily manage api versioning in [axios](https://github.com/axios/axios) since I got tired of copy and pasting the code between projects. I've tried my best to create clear docs which you can view here: [https://weffe.github.io/axios-api-versioning/#/](https://weffe.github.io/axios-api-versioning/#/) &amp;#x200B; If you have any questions or suggestions, then feel free to ask/suggest and I'll try to respond as soon as possible.
It was a little difficult to find the volume control when I started a video, so the video was blasting out for 10 seconds. Otherwise, it looks good from what I saw.
https://github.com/tomanagle/Apollo-Next.js-GraphQL-starter
Holy fuck, no one wants a jack in the box UI... You literally have big dumb ass buttons which you have to click on to show a single sentence, and oh, by the way some of them randomly do other unexpected shit. Add the text under to be seen without a click, and make links / actions more clear and anticipated. From mobile btw.
What is it? Why would I add it to my home screen?
* Purpose - as someone else mentioned, I get it's about music, assuming a music streaming service, but an introduction of sorts would be helpful * Columns/Rows Icons - Nice looking but I might makes these a little smaller so when someone lands on the page they can see them all without scrolling my resolution is set pretty high but had to scroll to see the last time * Responsive - layout is nice and responsive when resizing the browser * Functionality - I wasn't able to see any option to play audio or video, clicked the controls at the bottom but nothing
Thank you! I been thinking about allowing users to add any sub they want (instead of keeping it constrained to a preset list of subs) -- but I figured that could be a v2 feature ;)
do it in Rust.
[Nightlab timeline](https://timeline.knightlab.com) is one of my favorite web widgets from times gone by. Lordy I wish there was a modern/react take on this.
The images look blurry on retina displays. To fix this use images two times the size of the space that you expect them to fill and then scale them down by half.
What's wrong with a library? You have to learn something with Angular... you have to learn a lot with Angular. And when you don't like something the "angular way." it takes way more effort to swap out. And when the angular team changes the way things work, you're stuck anyway between versions. &amp;#x200B; I've had far better luck picking libraries than dealing with angular's mousetrap maze of doing what should be the simplest of things. Angular is not easier, it's just more familiar to you. I've been working on ng 1 and 2+ apps for nearly 7 years... I'm familiar with it.
jQuery is about 30kb gzipped. React + React-Dom is 36kb. Might as well start with React or Vanilla Javascript. jQuery was an important part of the web growing as a platform. But there are few good reasons to use it for new projects. Goodjob on them keeping it up to date though.
I think this potentially a useful attack vector or even potentially a vector of abuse by a popular website. Of course I think the benefits far outweight the risk, but I do think it might be something worth monitoring for.
&gt; which means it won't work on the empty array. Oh, right. They're holes, and js `.map` skips holes. Guess you're stuck with const a = new Array(patterns.length); for (let i=0, iC=patterns.length; i&lt;iC; ++i) { a[i] = -1; }
You lost me at the "Pac-Man vomiting a sparkling rainbow" icon.
Starting with the logo. Letters amdcl are lost. Generally, the title is clashing with the circle. UI. You have to click before you get even the faintest idea of what the site is about. Icons. Daft. Why the arrow and the target represent "always available offline" and the pacman puking the rainbow out is "unlimited use" is beyond me. Overall, this reminds me of good old days of Flash sites, where visuals overshadowed the content. But at least some of those were highly entertaining.
What exactly are you trying to do? Detecting overlaps requires that you know where other elements are on the page, and more importantly, where they are as the user scrolls. Then compare the two coordinates. Is there a reason that kind of solution wouldn’t work for you?
Hi /u/fluid-Friction, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ChethiyaKD, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/dcpc10, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Raheem387, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Thanks! Learned something
Looks nice. No idea what it's for. Looks like a youtube-ish skin clone using some site that has a lot of cover music.
How about using Intersection Observers? https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API IE will let you down, as usual though...
I've worked with AngularJS, Angular, Vue and React, so I know for a fact that AngularJS and Angular are pretty much completely different frameworks. AngularJS is more similar to Vue than Angular. It's just obviously clear to me now based on this post that you never even understood it. You're supposed to do everything the Angular way, that's the entire point of a framework. You're not supposed to swap out the Angular's Forms for some other library, that's just dumb. If you wanted complete freedom over everything, why stop at React? You might as well go completely vanilla if that's your argument. Lol I also can't believe you're trying to argue that there's a lot to learn when it comes to Angular like it's a bad thing. Is that why you had to give it up? Too hard? Are you just gonna act like you don't need anything else when building a real world app? If you want routing you're going to have to install react-router and you've gotta learn their api; If you want state management, you're going to install redux and react-redux and you've gotta learn their api. You want forms? Same story. So with React, you look up the highest starred library for whatever thing you need to solve and learn that, but with Angular you complain because they told you what to use? And sure, you can instead decide to use some obscure library since you have that freedom, but good luck when you find a bug and the last commit is from two years ago. Overall, there are reasons to pick React: bundle size, performance; but simply claiming it's easier to do everything in React is not one of them.
Hi /u/bitbytebit42, this post was removed. To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/SanxUnicorn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Correct, and I didn’t claim there was. My point was that react provides a way for people to build reusable UI components more quickly and efficiently than web components and imo has a simpler interface. It’s like saying “you can build all you own css so no one should ever use bootstrap, materialUI, etc”
That site was absolute murder on my laptop. Fans started spinning up like crazy as I was reading (not even scrolling). Was it mining for bitcoins or something? Sheesh. Kind of ironic considering the topic is about optimization...
 [https://i.redd.it/klc3dwkilvd21.gif](https://i.redd.it/klc3dwkilvd21.gif)
*shrug* because it's fancy and I think it looks cool. Why does anyone do anything?
I can't argue with that :)
No better way to really learn something than porting it yourself! …if I get bored I may try this weekend.
Don't mind him, it's a good effort and thanks for sharing it
Thanks best friend, I appreciate the kind words :)
Use processing.js!
Anything less than 60fps hurts my eyes.
For visualization I would be suggesting you use Mapbox heatmap feature. Actually the Mapbox engineer had wrote an article on that [https://blog.mapbox.com/introducing-heatmaps-in-mapbox-gl-js-71355ada9e6c](https://blog.mapbox.com/introducing-heatmaps-in-mapbox-gl-js-71355ada9e6c) &amp;#x200B; For database you could store data in MongoDB but if you run interactive queries from your UI you'll need some cache layers for that.
You are at a good point. If ´background-color` is the only background rule that is on #ab, it would be perfect. But, we cannot say there are other rules for this in another file.That's why those aren't converted to shothand rules.
The attack is that a user visits an _attacker's_ website by clicking some link in a reddit/youtube/facebook/etc comment/page and then after visiting _that_ page it starts the service worker to mine Monero in the background or whatever. There's nothing you can add to _your_ innocent site to prevent an attack on some other site. Really, the browser vendors need to step up and show in the UI that there are background service workers running in the background and give the user the option to kill them.
Javascript Weekly is basically just a scrape of the frontpage. Funnily enough, it's why I unsubscribed from it since I already see my reddit frontpage every day
JavaScript noob here. Is there any way to do this for mobile users? Like a trail that forms under a swipe up when the user is scrolling down the webpage that disappears right after.
p5.js*
I like this idea
No, it's not. It's annoying AF.
Don't do it. Things like that died in the 90's. And for a good reason.
How better is it then processing.js?
But... why? :-)
Precisely why I switched from watching the mousemove event to requestAnimationFrame.
We were so busy wondering whether we could, we didn't stop to think about whether we should
Definitely, and in fact that's basically how it would work if I chose to watch for touch events on top of mouseevents. I just didn't really think that would be as good of a user experience :)
I'm looking forward to 90s design comeback personally
Well that's just like, your opinion man.
The whole jQuery hate thing is just people trashing it because it isn’t the newest, shiniest web technology anymore. Its really silly.
Amen
Well, if you're planning to use JSX and/or target older browsers, you'll need to use a transpiler like babel. And most projects also use a tool like webpack to bundle their modules. But yeah, if you use a framework like create-react-app, that's all done for you.
5 times
You could do this without React pretty easily, right?
Chrome has a bounty specifically for SWs that can break their detection of over-long registration/lifecycles. Does MarioNet actually succeed in this?
Haha yes of course. But I used to use the Khan Academy version of processing.js. I figured out how to make it completely work offline. In fact I've made a Khan Academy project downloader!
Definitely! I coded it in vanilla JS before porting it to a component for use in my Gatsby site. Basically just take the logic code and use event listeners instead of the useEffect stuff.
The original paper/project is quite interesting. And unlike this article, its definitely targeted towards browser vendors and spec folks who are already thinking about these sorts of problems.
Great work, thanks for sharing! \- /u/javascript
ORDAINED BY GOD ITSELF.
People also trash jQuery because you can do a lot of things in pure JS that removes the need for jQuery. It provides unnecessary overhead
Yes but many of those things have appeared only in the last few years. For example, fetch arrived only in 2015 in the evergreen browsers.
Watching TV or a movie must suck for you.
Hi /u/garboooge, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I actually didn't notice at first which sub this was posted on and thought it was going to be some Rust -&gt; WASM stuff.
Hah I wish, I want to learn Rust someday. I think the stuff going on with WASM is super cool. The title is somewhat dishonest because it's not guaranteed to be 60fps. It could be higher (if your monitor supports higher refresh rates) or lower (if your computer can't handle 60fps or your monitor is worse), but generally it stays at 60. [requestAnimationFrame](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame) definitely allow some cool stuff.
WAAAAAY too much code in your component
Not sure if you know, but it's 2019 right now.
We’re aware, it’s should only happen on Safari. We’re looking into it.
How could I improve it?
Do you use an adblocker? I had five hits on uBlock.
After looking at your code, I rewrote the drums with BiquadFilter as well and tried to tweak the hell out of that and this is what came from it: [https://stdiopt.github.io/bittune/#5ba801000090000000e01000002000000020208000221000006000100020008000a0000000208000006200000028010000a084100020000000a201000020000000](https://stdiopt.github.io/bittune/#5ba801000090000000e01000002000000020208000221000006000100020008000a0000000208000006200000028010000a084100020000000a201000020000000)
Perfect reply 😬
I don't think there really is one, you just build the front-end using JAMStack with frameworks like Gridsome or Gatsby and pick any CMS you'd like to use as an API
You’re saying? It’s a Wordpress site and we use some analytics tools, yes? 🙂
I'm saying if /u/phpdevster finds the site murders a CPU, blocking multiple analytics tools is probably a good start for them.
Not a lot of them, and nothing with the dominance Wordpress has in PHP land. Maybe Ghost? https://github.com/TryGhost/Ghost
Ah, yeah. Completely misunderstood that one. My bad 🤭
If you are using node.js you don't need database for that. What you need to do is to keep track of current game state in some sort of data structure on server, and whenever someone enters your game you send them the latest state. This game state would hold all important variables, such as position of each player, health, etc. depending on type of your game. Also, you would need some sort of token to handle existing players (reconnection), and for security of course.
Thanks for the response. Honestly haven't dived in to node.js yet! I'm coding in JS, jQuery, and HTML/CSS. would "someone entering the game" be as simple as a page refresh? As in, "player A has 2 moves to make. Player A makes 1 move. Page refresh. Move 1 registered. Player A makes move 2. Page refresh. Move registered and turn ends."
You don't necessarily need a database if the state can be maintained in memory and the servers won't restart frequently. If you do decide you need to be able to keep state between server restarts then you can use any database you like or even just store the data in JSON files.
Awesome. Do you know of any resources I can read to learn more about this kind of thing? I'm coming from a place of zero knowledge of web servers, etc.
It depends on type of the game, if it's real time you should read this: https://www.gabrielgambetta.com/client-server-game-architecture.html
From what you said on the other comment I am actually thinking you will want to go the real-time update route eventually. If you google for "Node.js [socket.io](https://socket.io) mongodb chat" you will find some chat application code that can probably be adapted to your game. Instead of sending chat messages you send game commands or updates like "MOVE blah" or JSON objects with the commands. There are ways to do it like I mentioned JSON files or a PostgresSQL DB or just in-memory, also you might use sock.js instead of [socket.io](https://socket.io). There are options but if you start by getting an example running using popular stuf you can always refine parts of it later if you come up with a reason.
`if (prompt = "red")` This is an assignment statement. You're setting the `prompt` variable to the value red. What you actually want is a comparison statement. `if (prompt === "red") In JavaScript, we use triple equals most of the time to do comparisons. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators
It will actually be asynchronous! But I'm going to read everything I can. thanks!
Super cool, thank you!
That fixed part of it, now it's only returning the else statement.
var response = prompt("What color signal light do you stop at?") if (response === "red") ... prompt === "red" is always false because prompt is a function.
The JS code works, though. The python 2.7 code doesn't in most cases.
Project Page (?): https://github.com/micku7zu/vanilla-tilt.js *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Project Page (?): https://github.com/micku7zu/vanilla-tilt.js *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
So you want to generate pdfs, yes? [pdfmake](http://pdfmake.org/) supports both absolute positioning and images.
That is the reasoning behind that comment?
I hoped this was going to be an illustration of the mouse tracking for the sake of mobile users.
If you're going to make a cursor effect that's only visible in the background of the page it's a good idea to check whether around half of the visible area of the background is going to be covered by code blocks that have an opaque background
There is a practical consideration you are missing. If you are a full stack dev and do everything in JS/TS, any other full stack dev that knows it can get in your code. If you pick another back end language, you get a smaller pool of potential devs that can fill in. In a company I know they have PHP, Python, Java, and Perl back ends. They need specialists to maintain all those systems. If everything was JS/TS, managing human resources would be less of a hassle.
uhuh... why not just declare `replace` as a `string | function` ?
No. It's because vanilla JS can do it now. People are annoyed because some "developers" rather than being competent professionals litter projects with unnrcessary dependencies to cover up their lack of competence in language and browser api fundamentals.
&gt; The actual problem was in the fact that I used `forEach` instead of `for` no the problem was you where using `forEach` insted of `reduce`
Last time I checked mapbox was able to render heatmap based on the density of points only but not really on the values associated with these points in geojson (llke number of calls in op's example). You could play a bit with calculated weights, but I couldn't get the results I wanted to achieve with the current SDK.
If you're a student, you might try CARTO. It is available for free for students through the [Github Student Developer Pack](https://education.github.com/pack).
Lol, make sure to measure the performance improvements it gives you. document.querySelectorAll('style').forEach(style =&gt; { style.textContent = cssminify(style.textContent) }) document.querySelectorAll('link[rel="stylesheet"]').forEach(async link =&gt; { const url = new URL(link.href, window.location) const css = await fetch(url.href).then(r =&gt; r.text()) link.parentNode.insertBefore( Object.assign( document.createElement('style'), { textContent: cssminify(css) }, ), link ) link.remove() })
But human eyes can't see more than 24 FPS! Kappa
I'll admit to not being the biggest fan of Typescript, but this is correct. If you're defining multiple possible types (and you have absolutely no control over that), then defining their various possible types is how it should be. There shouldn't be a reason for having a field that tells it whether something is a function or not if you've set your types correctly. I think it might need to be `string | () =&gt; void` for the definition, but I could be wrong on that point.
Having different projects in different languages has both upsides and downsides. The biggest downside as you've mentioned is that managing the projects requires more individuals, or individuals that are multi-skilled. The biggest upside is that you're able to potentially take on more contracts or take on specific bespoke projects without having to hire someone new. We use full-stack JS for server-side, front-end/web, and mobile, and have specialists in each area. Even with the same language, I expect that our back-end devs wouldn't be able to work on our front-ends effectively, and vice-versa (I'm multi-skilled in that I can work on Node, Front-end and Mobile with relative ease). This comes with it's own downsides though. When you have a project that isn't best-suited for JS (e.g. writing native code to interact with hardware due to specific requirements), then you have a bit of a problem. Hiring someone who knows the specific languages (C#, Java, etc) means that they may not have many more projects over time. Making the projects work isn't impossible by any means, but it's always going to be more optimal if you have someone who specializes in the native languages.
Honestly, it'd be better if it straight up wouldn't work instead of providing a bad practice snippet.
It's intimidating because it shouldn't be needed. With a single language, it should have been possible to write for all possible platforms. This is sort of what ASP promised (and to some extent, what Java achieved) but it still required knowledge of JS, HTML, CSS, etc. You are quite right that then environment and API's are the 'scary' parts. The language and syntax are the same, but you can't approach node in the same way as you can react, angular, jquery, regular ES6. For data parsing and such, much of that is the same (e.g. maps, filters, etc), but actually writing something that works require different approaches. You also have to factor in the human element. Humans are motivated to do what interests them (at least in many cases) - whether that interest is for monetary gain or not is a different topic. For example, I'm motivated by being able to write code that talks to each other by creating API's at the same time as I build front-ends and mobile apps. Other developers are motivated by creating stunning front ends while others are motivated by dealing in data and writing backends. Sometimes, it's not that it's too difficult, but that there's no motivation for an individual to do so. It doesn't make them a worse developer, and the chances are they'll be able to specialize in one area and be better at it than someone who is capable of writing towards 3 independent areas.
The reason is that it has no purpose. It was supplanted by vanilla js and standard browser api's.
Now this is just dunning-kruger at it's finest. The problem with jQuery people have is not that there is React or something like that. It's that vanilla js and browser API's out did jQuery. It's you who drag in needless dependencies for small tasks the other developers look down on you for.
This is the first time I’ve heard the term JAMstack. I’m a professional js dev, but maybe I’m behind the times. I looked it up and the terminology makes sense, but had no idea that it had been coined.
*People* later tend to build SPA projects, depending on hundreds or thousands npm packages....
Oh very nice, it works on mobile.
Just got the newsletter and the link is in fact present. Won't click it since I like the service pretty much. Nice work, thank you!
if the callback returns something `T` then it should be `string | () =&gt; T`
This isn't THE answer, but i like netlifycms. https://www.netlifycms.org
The company wasn't looking for developer, they were looking for "as cool as they" developer. You can't beat it with any reasoning, most of today's teams want to be cool and they don't understand that different people write code differently and they can't also understand that mature developer can change this way of writing code. Sad but true.
I specifically coded it so that the cursor would be behind content if there is any so it doesn't disrupt the reading. If you go to the home page of my website you'll see the effect takes up most of the page, it's meant more as a fun side-ux thing than a main feature :)
Most new successful frameworks community response begins with 'a breath of fresh air', until they get old/big enough that the community becomes divided. That is the sign that the popularity has peaked. Look in this space for yet another 'breath of fresh air' framework by 2022 that will make React the jQuery of the enterprise of 2012.
How is this relevant to the article content?
That looks interesting. I'll check it out
Glad you enjoy it buddy! Appreciate the kind words :)
I think that's because most people just call it "Gatsby". There might not be a single clear winner (or even leader) in the "JS CMS" space, but judging by all the coverage I've seen Gatsby is the *clear* dominating library in this space (and I say that as someone who doesn't even use Gatsby personally).
I've never heard of jamstack. I need to do some research
I recently learned about react and decided to learn it a little to build a desktop PWA. It is an alternative front-end for google tasks and is mainly for my personal use. I often rely on google tasks in my job (I am an mechanical engineer not a developer). As deploying apps is so easy nowadays I decided to make it available for others to use as well. This is the desktop PWA https://haench.github.io/haenchs-planner/ The GitHub repo: https://github.com/haench/haenchs-planner You need to log in with a google account and can access your tasks and calendar from my app. But calendar functionality is still work in progress. Also it’s not mobile friendly and targeted to desktop.
Looks cool, but just so you know it jumps around on mobile safari.
I’ve used Gatsby a bit but I thought the main strength there was the compilation of static files into a local graphql server. If it’s just JavaScript, external api, and markdown, it doesn’t make much sense to me that any project would be leading since that’s about as barebones as you get.
Well, if you need SPA, when yeah, you'll end up with few dozen libraries which will compose your framework. As for 'hundreds' that an issue people get with monolith architectures. The solution is not to do monoliths. And modularize your application. Something you should be doing like 5 years ago. It's not uncommon for "one" web application to have 2-4 front ends.
Very cool
It's unfortunate that people are downvoting you for saying "please don't be geocities"
Control your backend securely from your frontend. Try the real time todo app to get started!
So if hooks were never meant to replace classes, as the React team itself emphasized, what is the lie exactly?
Hi /u/BorjeoVonDingle, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ayanamiasuka, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
How is this different from Prisma? I believe prisma also allows you to communicate from the front-end.
Hi /u/dumildekok, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah, it's mostly people with bad taste who think all these flashy scripts are somehow good. They are not. There's a reason major websites don't use them.
Hi /u/theycallmeepoch, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kun101, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/jkvandelay, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JohnDeighton, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/nirapatel, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Great question! You can consume these APIs directly from the frontend. There are quite a few security measures built in. Here's a link to the docs https://spaceuptech.com/docs/security Also this is completely schemaless and doesn't need any code generation to work and has more modules (like file management and functions).
Thanks!
Niceley done. Leave a link to the app from the Github repo - it's how some users will find your app.
I never learned it as it wasnt necessary when I started a year ago. I think it's just that it's unnecessary now and pretty big.
I guess prisma itself recommends to not communicate with it directly from frontend.
Beginner? Haha this is cutting edge JS 🙄
Good idea, thanks.
I didn't downvote, but if you are wondering why, here's my thoughts: The clickbaity headline is definitely not appreciated, and I would get rid of the 'hmm's. They don't add anything and just made it read like it was supposed to be an interview. Second, not sure who this is aimed at? It seems like you expect the audience to have knowledge of what hooks are, but there's not really anything beyond beginner knowledge about them.
True!
Well, it's not really as if I'm trying to appeal to the same people that mainstream websites do. It's a personal website which, by nature, is meant to be a showcase of ability and flair. I think the various animations I have add a little of that, much moreso than if I just had plaintext describing my experience.
I’ve not looked at the code, how easy is it to add stream processors to Kafka? Is it just normal Kafka? And in the readme you state you need mongo, why not just use the baked in rocksdb? I’m also assuming I can and should cluster in the normal Kafka way?
First of all, that's not fair because.. Ok, that's fair.
&gt;Posting this from Edge+Chromium Is that why all your characters look wrong?
Oops. There is no dependency on mongo! Its just for the quick start guide. You can use any database you want (or even multiple) Kafka is used as merely a distributed log for the realtime module (in case of a distributed setup). It can essentially be any other message broker which supports at least once semantics for reliable delivery. We don't rely on kafka (or zookeeper) for clustering. Stream processing isn't on the roadmap in the near future. I believe the golang APIs for kafka streams aren't mature enough. Any use case you have in mind?
Map reduce for starters would be amazing, one of my first uses of this will be a replacement for a very brittle api that maps all kinds of crap data to a Golden database for machine learning and statistical analysis
&gt;Here's a link to the docs Hey, just a quick observation. I don't have the scroll bar when browsing the doc. I'm on google chrome.
Ah. Why don't you open up am issue and lets see what we can do about it?? As a quick fix, can we do this... Make space cloud dump all data to kafka instead of a database. We can use ksql or whatever works for processing the streams and then use kafka connect to dump it into you data warehouse (or a massive database)
Rgr that.
Rgr that
Thats super embarrassing! Can you open up an issue for that? Or maybe help us fix it. Can't seem to reproduce that error!
Nats is simply used as a high throughput pub sub layer for the functions module. The ideas is to keep all these technologies pluggable so the user can choose what works best depending on the environment. As i mentioned earlier, stream processing isn't in the short term roadmap. Do open up an issue if you could so we can record your thoughts and ideas. Would really help.
why is this not graphql by default :(
This is my first open source JavaScript project. I made it because I wanted it for my own blog. Would love any feedback!
Im really trying hard to figure out a way to do that without giving up on the schemaless nature! Please please please raise an issue on this one. Help me make it GraphQL enabled by default.
Everything you said it's true, my point was simply that Vue can be used without tooling much like jQuery.
I love how you achieved this just through using transform. I originally thought this was WebGL, but you took a much less heavy handed approach!
Sure, but I don't think anyone's claiming otherwise.
Very nice!
Yeah the previous post said: &gt; here is no value in delving into the deep end of react or vue and all the tooling that will come with it
I was actually responding to the section [in the paper](https://www.ndss-symposium.org/wp-content/uploads/2019/02/ndss2019_01B-2_Papadopoulos_paper.pdf) that describes the ways that unwitting sites can be hijacked (section beginning with "There are also several cases where a website can end up hosting such malicious content unintentionally.") The authors extend this section for an additional paragraph to deal with iframes and note that this is probably the preferred method for most attackers, instead of the methods you mentioned. &amp;#x200B; So including the code I mentioned on one's site would be a good way to prevent such hijacking and a similar approach could be taken to develop a [Chrome](https://www.formget.com/chrome-extension-inject-javascript/) or [Firefox](https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Modify_a_web_page) extension (not sure if this can be done with Edge or Safari, however). &amp;#x200B; The problem with relying on the user to shut down a background ServiceWorker would be that the user would actually have to know that they're running in the first place. The paper mentions ways to throttle the resource usage of the background worker which may not cause any suspicion. Furthermore, I'm not sure how comfortable most casual users would be in shutting down service workers, especially if they're being served from randomized domains (by the way, this is functionality is already available [in some browsers](https://www.chromium.org/blink/serviceworker/service-worker-faq)). In this way, URL blocking in the browser, similar to what Chrome, for example, does now, would probably be a better upfront approach--but this *would* require he browser manufacturers to include blacklisted MarioNet-like sites too. &amp;#x200B; Personally I think I'm not opposed to a WebService debugging/inspection option in browsers, especially for developers, but I don't think it'd be that useful to the average user. Using automated options like script injections or up-front warnings would probably be a lot better.
...but why?
Upvote for good attitude
[nah](https://i.imgur.com/es6tLMA.jpg)
Ruby was much easier for me when I was getting started.
Good point. I don't think that MarioNet has a workaround for this. From *A. In-browser Mechanisms*: &amp;#x200B; "... one could suggest to restrict the liveness of service workers, making it proportionate to the user presence in the website that hosts them (i.e., the service worker is suspended after the user leaves the website) or apply a time cap (i.e., a service worker gets terminated if it keeps running for an unreasonable amount of time). By doing so, the persistence characteristic of our attack will no longer be available. " &amp;#x200B; The worker *could* be adjusted to do four minutes and 59 second's worth or processing before taking a break, then restarting a short time afterward, but I don't think that's what happens.
He's not saying that you need to use jQuery when you use Vue. Just that sometimes, it's better to go with jQuery and no Vue at all.
Ah, gotcha, you're talking about not needing Babel. Sure. Btw, you could also, in theory, do in-browser transpirations with React too. It's not great performance though.
Like I said I don't use Gatsby so I'm the wrong person to defend it, but judging by its popularity it's *definitely* leading.
Thanks for both of your comments. They are enlightening and will help us improve. Cheers!
In a nutshell the lies you you might hear about React Hooks, that we examine in this article are: 1. React Hooks are completely replacing class-based components 2. Render props and HOCs are not relevant anymore 3. You don't have to change your testing set up &amp;#x200B; The article elaborates on the above!
Title doesn't match what this is. If I want a VoIP server at home, I would just setup an Asterisk box. If I need to routing around the SIP protocol (advanced use cases), I would use this.
This is fantastic!
Rust IS amazing. I just started with it a few weeks ago.
Thanks a ton. Really appreciate the enthusiasm! You think you can join us on our discord server to help us make this better?
You can debug js using this method https://www.w3schools.com/js/js_debugging.asp or you can using nodeJS to run within Code's terminal.
Thank you for your help!
You need to reference the js file in your html head, line this: '' &lt;script src="./app.js"&gt;&lt;/script&gt;'' Then you need to bring your html elements into your js code like this: '' const form = document.getElementById('form1');''
Maybe something like [this](https://jsfiddle.net/mvcp4dgL/)? Also check [console.log](https://www.w3schools.com/jsref/met_console_log.asp)
Today I published a vscode extension for auto transforming object accesses to safer (nullable) object accesses e.g &amp;&amp; chain. Get it on Marketplace: [https://marketplace.visualstudio.com/items?itemName=orenaksakal.vscode-oat](https://marketplace.visualstudio.com/items?itemName=orenaksakal.vscode-oat) Repo: [https://github.com/orenaksakal/vscode-oat](https://github.com/orenaksakal/vscode-oat)
Yes exactly like this. However, i know i can write js directly into html. but i was experimenting with my html pointing to the javascript file locally and seeing if it would output my functions sum Thanks for the help!
No, but, who is making those claims? I don’t recall devs making such claims, especially in light of what the React team itself is saying.
I've started doing Tips &amp; Tricks GIFs for Firefox DevTools this week. If you wonder why this came to be, the reasons are simple enough: - I’ve been using the Firefox DevTools every single day since they were being developed. Initially as the QA Owner for a bunch of them and after that in my day to day work as a JavaScript Developer on the open web. - The Chrome DevTools get a lot more love on the internet, but Firefox DevTools have an amazing engineering team behind them with a lot of useful features. Some are on par with Chrome, some are better and some aren’t even in Chrome yet. Of course some are better in Chrome (I’m looking at you, Debugger), and I’ll be sure to point out the differences for the tricks I’m showing when there is a difference between the two. I'm planning on doing this every week on Twitter. If you want to see this week's #devtricks, you can [on my Twitter](https://twitter.com/lakatos88/status/1116698023810224128)
Nice! It would be easyer for people to help out building functionality, it would be helpful if you added setup instructions on the Readme of the repo.
There seems to be an implicit "yet" in the "not replacing classes" line. Hooks dont have all the features necessary to fully replace classes, but once they do I can imagine that line will start to change. The react core will support classes for a long time simply for the purpose of backwards compatibility, but they might enter some form of extended deprecation state.
I agree! After stressing whether my kata solution was going to fit in with the best practice solutions, I found this instead and it really lightened my mood.
could this be used as a game server (turn based games and realtime positions) ?
Oh i see.. then something like what /u/omegacoo explained: Have 2 files in your folder, 1st "index.html" and 2nd "script.js". In your "index.html" add this code: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;script src="script.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body onload="myfunc(1, 3);"&gt; &lt;div id="display"&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; In your "script.js" add this: function myfunc(a, b) { document.getElementById("display").innerText = a + b; }; Now if you open your index file, you should see the result of the myfunc variables. Basically we included the "script.js" with `&lt;script src="script.js"&gt;&lt;/script&gt;` and call the function from `&lt;body onload="myfunc(1, 3);"&gt;`. Our function `function myfunc(a, b)` found our element with id "display" and set its text to a+b.
I he’s hinting at optimizing it to not try and render an area that is gonna be covered anyway.
I have a few ideas and tips, pardon some are obvious but idk what you know or don’t so no assumptions. 1. Elevator pitch for why you are looking for new job. Sell yourself and your skills. Under no circumstances bad mouth previous employer. 2. Have examples from your resume ready. Be able to explain in detail points on your resume and examples of what/how you did something. GitHub as well just in case. Example: I implemented a feature that does this using this tech. 3. Js stuff Closures Callbacks Scope == vs === Favorite new features of es6 Library vs framework Promises 4. data structures See https://medium.freecodecamp.org/the-top-data-structures-you-should-know-for-your-next-coding-interview-36af0831f5e3 5. Prepare for coding challenge Leetcode try some coding exercises. Also be able to talk through what you are doing. The developer interviewing you does not care if you can get the question 100% right, they care that you can write code and can think through a problem. Hope this helps, I’ll try to update some more later if anything come to mind.
This is a good place to learn regular expressions
If your string is always your domain's name then you can get it your domain name with [window location](https://www.w3schools.com/js/js_window_location.asp). If you have to deal with a string then you can parse it with something like this: function getdomain(url) { var prot = url.split(":")[0]; var link = document.createElement('a'); link.href = url; return prot + "://" + link.hostname; }; console.log(getdomain("http://mydomain.com/content/"));
You could set the css attribute "pointer-events: none;" on the canvas and put it in front. But I think the effect looks great in the background, no need to overdo it.
Is the string always a URL? const split = 'http://mydomain.com/content/'.split('/'); This should return \["http:", "", "my domain.com", "content"\]. Then you can select the elements you want to build the string back up with. const newString = \`http://$\{split\[2\]\}\`;
If the string is always a url, you can use the `URL` constructor to figure that out var url = new URL("http://mydomain.com/content/") /* URL { href: 'http://mydomain.com/content/', origin: 'http://mydomain.com', protocol: 'http:', username: '', password: '', host: 'mydomain.com', hostname: 'mydomain.com', port: '', pathname: '/content/', search: '', searchParams: URLSearchParams {}, hash: '' } */
&gt; 180kB if optimized for size, and 260kB if optimized for speed. Neat! ES5 only, but one could always compile to ES5.
One other option is to use node. You have an \`index.js\` file with whatever function you have exported, and a \`test.js\` that requires index and asserts that the function is doing what you expect. If you start the program like this -- \`node --inspect-brk test.js\` it will put a debugger on the process. You can then open chrome and visit \`about://inspect\` - this will list all the debugging ports and you can start the inspector on it. If you're using code, you can also configure it to be the debugger as well - set up some \`launch options\` but a breakpoint somewhere in your code and run it - should work as you expect. If you \`console.log\` you'll see those output to the \`output\` window in vscode - if running from the command line, it'll show up as stdout. If you've got chrome inspector on it, it'll show on the \`console\` tab.
awesome tool!
This is the best answer here, because it has the behavior [OP](/u/FuckYouWhoCares) wants and accounts for edge cases so you don't have to think about them yourself. It also makes it more clear to other readers what you're doing with your code. Writing some one-off regex or string manipulation function requires the reader to pick it apart just to understand.
Hey “fella”, I see from your post history you just see women as sex objects, but they can also be developers.
OP, this is the right answer. `(http\:\/\/.+?\/)`
I did this before doing some interviews over the last year: [https://www.udemy.com/javascript-interview-prep/](https://www.udemy.com/javascript-interview-prep/) Also if your company is a larger company, I'd do a search to see if people have posted past interview questions on Glass Door.
I see this is the explanation i was looking for! thank you very much. i was unaware of the onload attribute for the body. i'm assuming you could use this attribute for any tag? such as like a &lt;div&gt; or &lt;p&gt;?
`.main-wrapper &gt; .content-wrapper` is set to 100% width and is being offset with the `left` property. So its width is the entire width of the viewport and overflows 300px past the right edge; so the scrollbar exists, it's just 300px past the edge of the screen. You could technically fix it by replacing `left: 300px` with `padding-left: 360px` (since you already had 60px of left padding)
True, could do. Will have to think of how I'd implement that.
Yeah I played around a lot with that rule but ultimately decided i preferred it like this. I'm glad you like it!
Unfortunately no, according to [w3schools](https://www.w3schools.com/jsref/event_onload.asp) the only supported tags are: &lt;body&gt;, &lt;frame&gt;, &lt;iframe&gt;, &lt;img&gt;, &lt;input type="image"&gt;, &lt;link&gt;, &lt;script&gt;, &lt;style&gt;
No. Don't do numbers.
I don’t see a problem with it seeing as 404 is in my opinion more clear than notFoundPagePermission or similar
Great tip on the past interview questions - I found a few for a similar position using Node. Would you say that course was helpful?
I passed and was offered multiple senior level positions. It definitely goes over everything. I used it to practice white boarding and did the solutions on a white board.
Holy shit... I was talking to someone about this concept literally yesterday and wondered why it hadn’t been done yet. I definitely think this type of stuff is the future. Can’t wait to try it out on one of my side projects
Seems quite similar to [Hasura](https://hasura.io) minus GraphQL. Love that this is becoming more of a thing.
The job of a variable is to convey meaning to people reading your code. As a result, the question isn't so much should your use numbers or not, but what variable name best conveys your meaning. Based on your example, it's perfectly clear to me the purpose of your access404PagePermission variable, so the usage is appropriate. However, it would not be appropriate if that number indicated the value that the variable should contain such as theNumber32, as variables are not locked into one value. In a case like that you would use a constant, but even then, you would chose a more meaningful constant name such as maxBytes, or something else that conveyed the intent of why "32" was so important.
Use something jsfiddle and the console in browser for quick easy practice.
While I generally agree with you, I do not in this context. `404` in the context described by OP is not a number in the sense that it conveys numerical meaning (e. g. I could add 1 to it, and it would retain some kind of meaning). Instead it conveys the same syntactical information as a longer description, e. g. `PageNotFound`. For me this means that using the number is totally fine, since it's not really a number, just its' representation is.
Try hasura for that I'm having good time with it: https://hasura.io/
Yea exactly what I need.... something to spread my personal data everywhere.
Alright, sold! Thank you so much for the help. I'm hoping since it's more mid level they won't go *quite* as hard on me, but I don't want to count on hope, only what got me here to begin with. Back to the grind!
Have faith in yourself; don't second-guess your first instincts. You got the job for a reason, there were others interviewed too.
It's only clearer if you already know the HTTP codes
Are you confident in your skills relating to the stack you’re working in?
For invalid page permissions, you should use the 401 (unauthorized) status code, not 404 (not found). Regarding the numbers, I would try to avoid them if possible. I would go with isUserAuthorized for the boolean name.
TypeScript has one of the most flexible static type systems I’ve ever used. It’s not the language’s fault that you can’t figure out how to use it.
When I learned js, the place in worked used query everywhere. I ended up learning the jquery api before I learned the actual browser APIs. Speaking from experience, jquery severely fucked with my understanding of javascript and how it actually works. Since then I learned and loved vanilla js and, up until recently, only used jquery for the ajax api. Now we have fetch, I'd choose to burn jquery every time. Its just a lazy mans tool which, imo, will cost you more time in the long run.
 function isFunction(x: unknown): x is Function { return typeof x === ‘function’ } I’m sure you know this but to add to your point, use typeguards everyone.
I think you only agree because you know what HTTP code 404 stands for. Would you feel the same about a 413, a 503 or even a 401? If not, then you should probably use the human readable name instead for all of them.
Read the code repository that you will be working in. Understand how it's written. Don't stop learning. Maybe continue your self-education taking online coursework from one of the many online video services now. Don't wait to ask questions to long, but also do some research before asking others.
Chances are that for example `ServiceUnavailable` wouldn't be that much clearer than `503` for me. I know roughly what the different HTTP code classes mean (4xx: client fucked up, 5xx: server fucked up), which I'll assume most devs roughly do as well. In this case a `503` is at least a little more clear. Any dev that is not often dealing with HTTP codes will have to look up the specifics of almost any code anyways.
 &lt;frameset noscript=flashing_rainbow_bg_300.gif border=draggable&gt; &lt;frame bg=spiders_square_dancing.gif&gt;I&lt;/frame&gt; &lt;frame bg=ivy_growing_slow_rotating.gif&gt;Agree&lt;/frame&gt; &lt;frame bg=white&gt;&lt;img src="under construction lens flare.mng"/&gt;&lt;/frame&gt; &lt;/frameset&gt;
I created a static site generator using MithrilJS and Parcel. Still in alpha but most of it works https://github.com/nedpals/riz
I was in the same position as you about a year back. I still get impostor syndrome quite frequently - it never really goes away (at least in my case). My first day on the job they had me work on a NodeJS backend with MongoDB, and Angular 1 front-end. I didn't know a single one of these standards... but the best thing to do is just dive in... see what you can break... figure out what connects to what... Note: make sure you're NOT on the production database when you're "seeing what can break".
Keep a journal, write something each day or every week. Write about the things you learnt, no matter how small or insignificant you think they are. Write about what you found difficult. It can serve as a starting point for self improvement. If you start to feel like you're an imposter and not learning or contributing, you can look back through your journal and remind yourself of everything you have learnt and accomplished so far, the things which you found difficult at one point but no longer do.
I really love the clean and minimal yet classy design of your website. PWA-enablement is a nice touch too! I hope you don't mind if I use some of your design in my own upcoming website.
Congrats! You will be fine. Be open minded about different ways to solve problems, don't work too fast, and as a QA engineer, please, for the love of God, unit test your code some.
Thank you, the compliment means a lot! Don't mind at all, here's the source for the whole thing in case you missed it: https://github.com/Egrodo/noahyamamoto.com Let me know, I'd love to see what you come up with :)
thank you, appreciate the support 🤘
Read the style guidelines &amp; naming conventions and stick to them, new joiners who don't are very annoying. The other guys and gals will be happy to help you get up to speed with the work, so long as you give them the opportunity by asking questions.
Oh my God I needa do this! I'm new too and am learning lots, but simultaneously lose track of stuff cuz my "intake" is so high it's hard to retain everything. From like day 1 I'm being slammed with so much jargon, abbreviations, old tech, new tech, stuff completely out of scope of what I was hired for... I get so overwhelmed and feel so insecure...
You're a junior dev. Everyone will expect you don't know much, so you'll be fine. Day 0 will most likely be meeting the team and setting up your workstation. The remainder of the week will be getting to know the code and maybe doing some small tasks or bug fixes. I'm also looking forward to next week's TIFU post from you explaining how you took down their production systems. /s
I started my first career 7 months ago. I'm also only new grad under my boss (not only new grad, just to my boss I am). He likes that I am ignorant/naive (unspecialized) and can absorb a little bit from everyone. He's patient as I try to learn on my own and even asks me to teach him a thing or two as I learn it. Currently, I'm tackling my projects like they were at school. I ponder about possible solutions, and then jump in. Be patient with yourself, admit when you are somewhat naive, but also actively learning to overcome the shortcomings. I am slowly becoming a full stack despite being hired for front end, as I need to learn to access databases to create APIs, create remote servers and account for security, etc.
Sure! Why not? Interestingly we were in the midst of trying that out! You think you can help out here!?
Wow this looks great can’t wait to give it a go. I have been re writing an app I built with PHP, MySQL and JavaScript with Vue and Firebase. I was thinking why Firebase wasn’t more straightforward, thinking it should be something like this. This loooks way better and way more straight forward. I love that I can use a SQL database too! Great job
Haha! Thanks for the thumbs up! Really motivates us to make it better. Why don't you join our discord server? We'll be able to work more closely and maybe you can help us make it better!?
Congrats. Keep showing willingness to learn.
Yeah I’m super down, I can see this being my go to tool. There is a lot of great things and the docs are straight forward.
Haha! One of our design goals is to make it dead simple to use. Do drop by our discord server. Would love to have you there! Here's the link. https://discord.gg/ypXEEBr
You think you can submit a PR?
Can't wait to hear from you on how it goes!!! Why don't you join our discord server!?
Ok what do you need. Im building a game of checkers
This is hasura and way more. Its got kick ass security mechanisms in place (inspired by Google Firebase), has file management, integrates with tons of databases, its realtime feature works reliable in a distributed environment, and what not. Do give it a try once!
Hmmm. Do you have any concerns? I'd really like to know if you do?
You think you can join our discord server? Maybe we can move the discussion there?
&gt; `503` is at least a little more clear Clear in what sense? Do you mean that you've memorized it? Would you be rather code review something that does if (!req.userId) throw new Error503() instead of if (!req.userId) throw new ServiceUnavailableError() Genuinely curious, because a lot of framework/library designers opt for the second approach. I'd even argue you couldn't even attribute the latter bug to a typo, whereas it could definitely be the case with the former.
ok where
What do you have so far?
sure where is it?
Here's the link to the discord server. https://discord.gg/ypXEEBr
Awesome just joined! Thanks for all ur hard work
You need to modularize each step of each task. How do i create a button in HTML? How do I create the scores function in isolation of everything else? You’ll be surprised at how easily it comes together.
To add to this reply, I'd suggest using jsfiddle to help you with this.
Oh you'll be fine, people overhype it. Just don't try to be a hero and chain together 12 functional array calls, and test your code, and you'll be fine.
Takes things one at a time. Some ideas to get started. 1. Get an HTML page setup and add a button. 2. [Figure out how to attach an event listener to a button.](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener) 3. Create your test scores variable: `const testScores = [60, 70, ...etc];` 4. Create a `doMath` function and call it when the button is clicked. Play around with this function to see what you can do with your `testScores` variable. This is the meat of your program. 5. Figure out how to prompt the user for information. If you want to get fancy use a form, or keep it simple with [prompt](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt) 6. Figure out how to display information to the user: [innerHTML](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML), [writing to the document](https://developer.mozilla.org/en-US/docs/Web/API/Document/write), [alerts](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert).
Really cool stuff! I'll star the project and give it a go at some point.
When you ask questions, make it clear what you’ve already tried before asking. It makes it much easier for the to answer your question, and youre respectful of their time by doing your due diligence before asking them. Most devs are happy to help as long as it seems like you’re making an effort before roping them in.
Whoa!! This sounds incredible!!! Do join our discord server to stay in touch! Here's the link https://discord.gg/ypXEEBr
 L L L Ll L L L Lunch L L Lj L L J L J L L Jl L L Ll Lj L K L L L Lj Lj L L L L L L L J L L L L L J L Lj Ll L L L K L L L L Lj J L L J J Jl L J Ll L J L L L J J J L Jll
Imposter syndrome never fades. In fact, if it does, you're probably in trouble 'cause someone else has caught on to the fact that you think you know everything when you don't. Embrace it. Also, as others have said, you got the job for a reason. If you didn't lie on your resume, represented your skills well enough in the interview(s), you'll be fine. In the mean time, keep doing what you're doing. Keep engaged in the community, keep abreast of changes. Learn your project's toolset inside and out. Devour the documentation for whatever testing framework is there. You know, don't suck. ;)
Eh. I think using `404` is appropriate if you are specifically dealing w/ HTTP status codes. Likewise, I think it's acceptable to name a type `uint32` because that's literally how wide the data type is (whereas something like `word` is actually architecture-dependent). However, I don't think it makes sense, for example to name a SSR'ed React component `Error404`, because at that abstraction level, you presumably care about what the users will see, and unless they are HTTP nerds themselves, they probably don't care one bit about three digit codes. So, just like you name things `&lt;Modal&gt;` instead of just `&lt;Div&gt;`, I think the variable name should take into account the abstraction level you're implementing.
Really appreciate it!
It’s better than Firebase as you can use real DBs, but coupling your apps/front ends to a custom API may not be a good long term choice.
Hi /u/FuckYouWhoCares, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DieDieDieD, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Sebsun93, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/6below_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
git push master -f
Hi /u/ham-ar, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DrakeAusir, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Guardiansfolly, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Any suggestions?
Add some docs when you have a chance! I'd love to check it out
That text underline preloader is pretty dope too
GraphQL and/or REST
 *looks at username* *squints eyes* Idk about that
I
It's all good, man. Take a breath. I've been doing web development, among other things, since about 1995. There's not a day that goes by that I haven't felt like a Jedi Master at some point and a clueless Jar-Jar imposter at another. The important thing is (1) do your best, (2) always keep learning, and (3) don't be a dick. The rest will take care of itself.
Thanks man, spent way too much time on it.
So right now we are using the mongodb query syntax (for all databases) which is in json over http (for js) and gRPC (the other clients). Is that Good enough?
This is very impressive even if you were a developer! Well done, been looking for something like this.
No. The api would still be coupled with your project.
So help me understand this a lil better. Would something like GraphQL be a good bet? Any other alternatives to GraphQL?
Hey, I've made a PR for the issue, but I used the link from the doc page.
Let me check! Really appreciate the contribution! Thanks!
Can't see the PR! Maybe send a link?
I sent the PR here [https://github.com/YourTechBud/space-cloud/pull/1](https://github.com/YourTechBud/space-cloud/pull/1)
Yes because GraphQL is a standard protocol with multiple clients. Think of it this way, if you replace a REST API from Node to Go, would you need to change the apps that are consuming that API?
Makes sense. GraphQL is top priority for sure! Thats some great feedback. One last thing, you think you can help us implement graphql?
&gt;Edit: Your "edit docs!" link at bottom of doc page and github link at top of navigation have different urls. Can you raise an issue for that? https://github.com/spaceuptech/space-cloud/issues
Hi /u/Japanairlines, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I’d love to but I really don’t have time to contribute to open source projects.
I understand! Do join our discord server though! Dropping a link just in case. https://discord.gg/ypXEEBr
I pity this part of our industry.
What part do you pity? Why?
Today I updated my threaded-class library to add support for worker\_threads under the hood when running in newer NodeJS-versions (previously it used child-process in NodeJS). It supports web-workers too :) [https://github.com/nytamin/threadedClass](https://github.com/nytamin/threadedClass) Try it in browser: [https://nytamin.github.io/threadedClass/examples/browser.html](https://nytamin.github.io/threadedClass/examples/browser.html) I'd love feedback on it! It's intended to provide a simple way to move computationally-heavy classes to a separate thread, while keeping the interface to the class mostly intact.
Now on Linux+FF, I don't see anything weird. Was joke?
Indeed! Thanks for your feedback.
This is a damn, good thing, i am using this for my next project OP.
Can give me the link?
The part that has decidedly given up on much of what the software development community had learned over the past couple of decades, only to lead to many websites serving not only needlessly complex application code, but also megabytes of runtime, thanks to the operating system these apps were built for - the browser - still being woefully inadequate for what everybody is trying to do with it, making projects that should be straight-forward ludicrously bloated and costly, and then having the gall to innocently call all of this "frontend development". Now downvote me, label me as some old dinosaur with outdated opinions, and get on with the insanity. (But don't forget to use Redux!)
Here you go. https://discord.gg/ypXEEBr
Thanks buddy!!!
&gt;I pity this part of our industry. Says this as he uses a product of this "part" of the industry.
Please tell me what your alternative is. Because I guarantee you React is cleaner than it.
if you're not a part of this part then idk if you're even a part of it
Just wanted to say that as a front-end dev, the things you mention are definitely things that I prioritise on projects. - Bundle size - Good coding practises - integrating ideas from the last 20 years of programming - Writing code in a way that’s reusable and low on external dependencies where it can be React genuinely feels lightweight compared to what the alternative might be, and it allows us to deal with manipulating the DOM in an extremely elegant way. I would say redux is massively overused, but for a very narrow set of use cases it’s a really elegant way of solving data flow on the web. I’d encourage junior front-end devs to pay attention to things like performance, code quality and reusability. Understanding fundamentals makes it much easier to know when it’s appropriate to bring in a library.
What do you do, then? Do you program COBOL all day? Doesn't your company ship products that have a user interface? Don't all digital products have some interface through which you interact with them?
 What do you do, then? Do you program COBOL all day? Doesn't your company ship products that have a user interface? Don't all digital products have some interface through which you interact with them? Do you consume products like Netflix, or no? Or are you too good for that? [Here](https://worldwideweb.cern.ch/) is the rebuild of the original CERN web browser so you can use plain unstyled hypertext like a real man. I can give you my ICQ username and you can tell me how that goes for you.
Thank you. If you find bugs, please let me know.
I couldn’t agree with you more. It’s really sad to see things sliding backwards after so much progress.
The part that makes it more clear for me is that I immediately know it's an HTTP error that stems from a server-side problem. Neither the HTTP part nor the server-side part are necessarily implied with the second approach. Though that would be fixable by either prefixing the class name with `http` or, even better, `503`.
Of all the things that bother me about the current state of our industry, it is this sort of binary thinking - that you're either a forward-thinking, webpacking, reduxing child of the future, or a COBOL dinosaur who never really built anything new since the 70s - that bothers me the most. Good luck with that attitude.
I love that you say that, considering Reddit was extremely light on the frontend craziness for the longest time, and when it eventually relaunched as a typical SPA monstrosity, it earned nothing but criticism. Also, I'm using the Android app, how is that related to frontend development exactly?
I love that you say that, considering Reddit was extremely light on the frontend craziness for the longest time, and when it eventually relaunched as a typical SPA monstrosity, it earned nothing but criticism. Also, I'm using the Android app, how is that related to frontend development exactly?
Hi /u/jaumesegarra, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
There's no need for the negativity, and there's absolutely no need to insult people who work in this part of the industry. Do you feel better now, at least?
Why not show some compassion instead. This is one of the fastest developing parts of the industry so it's bound to get a few things wrong along the way, especially since many of its challenges related to user interaction are relatively new and it's developing alongside the actual hardware (for example screens with different sizes, resolutions etc).
Hello fellow dinosaur.
There is absolutely need for negativity for bad things.
Umm, yeaah but you know there are very good reasons to keep it in the backend
In all honesty, I've seen more than one project - and sometimes even entire companies - grind to a halt after making the decision to shift to a new "modern web" stack without ever identifying a need beyond being more attractive to young (= inexpensive) potential hires. Pity is the only thing left for me to feel about all this.
I agree. Depends on the use case right? Can you mention a few examples so i understand what you are referring to?
I think it is a cool idea what you've done and I can see benefits for some situations where developers lack certain skills. But for one I am a bit confused how can you possibly be secure when the frontend has every secret public ? Anyone can access the same data if they get the frontend app, which they do. Secondly even if it was secure, it gives away the database data structure away. This one I am not sure if it is a big issue.
As a follow up maybe you limit data access to the authenticated user's context which could make it viable
The database model doesn't seem to be a big issue for many! I'm open to discussions on this one. Maybe you could open up an issue regarding this?? So we got a rich set of security rules to protect access to data. Here's more on it https://spaceuptech.com/docs/security Also, we do have provisions to let the user write custom logic on the backend in the form of functions. Not everything can boil down to CRUD right?
Oh and you don't ever make bad decisions? Things would never progress if everyone took a conservative approach. You need both, of course.
Try discussion instead.
Isn't this exactly what you're doing by 'pitying' an entire part of an industry? your attitude is exactly the same.
Yeah, this was expected.
Yup. I think we can still make it better.
There are node functions that can communicate with the database which can be implemented in the back end. In this way you can secure your database structure.
Test
You LITERALLY "pitied" an entire programming stack because somehow you couldn't be bothered to have a nuanced opinion and instead the web is some "webpacking reduxing child of the future". You're exactly what you're criticizing. There's so much more to web development than webpack and redux but please continue to sit happy in ignorance looking down on us fools as we build billion dollar industries
Oh please, have you seen how many dependencies Are required for a dumb Hello World with React?
Vue is supposed to be pretty clean
thanks
... react? You do realize all the other dependencies like webpack are to make development easier for larger scalable projects right
Is the kind of discussion where I ask you where I said that I pity the "entire programming stack" not beneath you? It certainly is beneath me, so don't even bother.
I love that you set up a hypothetical scenario in your head and then said that hypothetical scenario you constructed was beneath you. What a tool
You're being downvoted, but there is some truth to this. jQuery wasn't just a way of getting browsers to work consistently it also brought with it it's own patterns and plugin system which vanilla JavaScript still doesn't provide (often for good reasons). I'll never use jQuery again but I was always grateful for it and I can still see a use for it if you aren't using a larger framework. It is still a legitimate choice, albeit not necessarily for cross-browser compatibility.
I'm still hopeful that WASM will eventually give us the best of all worlds. JavaScript, for all its many glaring faults is still a great language because it's so flexible and approachable. I'd love to see it cleaned up and stripped of all the baggage (backwards compatibility be damned). If this means making it a WASM-targeted language then so be it.
It definitely sounds interesting. Curious to see what the performance comparisons look like between a few of the other existing platforms in this space including Hasura, AppSync, etc. - How long has SpaceCloud been in development for? Seems like early days? - Can the “functions” be deployed to AWS Lambda or Google Cloud Functions, or similar? - Does the real-time functionality piggy back off DB triggers, or something else? - Is there scope for GraphQL being integrated in the near future?
Oh look another old man looking for attention
It's been open source from the beginning.
Excellent survey, although some entries left me scratching my head, I actually like how opinionated this is. Also, let's ignore the old men looking for attention in the comments below ;-)
How it compares with Duktape?
We still need to benchmark this tool against the competitors. But I'm pretty confident it will have similar performance characteristics if not better due to the use of golang! Infact I am open to working with Hasura to see if there are any synergies between us since there are some overlapping functionality. Here's the answer to your questions: * Space Cloud has been in development since almost a year now. We open sourced it recently (around a month back). We already have a few clients using it in production. * Currently all functions run as longed lived microservices with plans to integrate with AWS Lambda, etc. * The realtime functionality uses message brokers like Kafka under the hood to gaurantee reliability * I am actively looking for a way to add a GraphQL interface. Haven't been able to figure out how without compromising on some key ideals.
I don’t quite understand the comment about web components not gaining any traction when Ionic 4 uses web components by default, Angular Elements has gained traction, lit-html/LitElement is blowing up and every company seems to be switching to web component-based design systems. I guess if you primarily follow React news, that might still be your opinion, but from where I sit it seems like there’s plenty of movement on that front.
What a great free resource!
Kind of a late post as it's no longer Saturday. But today I published the lightweight framework `chaz-js` on npm. You can find it here: [https://www.npmjs.com/package/chaz-js](https://www.npmjs.com/package/chaz-js). The goal I had in mind for this framework was to be very familiar to people using frameworks like Spring and Angular and to have to know very little before one can start immediately being productive. I've personally using a version of this framework for my own projects for a while and I decided that it is worth throwing a README together for and publishing to npm. If it helps a handful of people throw something cool together, that's good enough for me. I wrote up the README document super fast, however I believe it has enough information to get someone up and running. I plan on adding more info there soon along with some sample projects. Enjoy! I'm going to bed!
I don't know. You and words. That's not going to be a thing, is it?
I particularly liked the "Stepping away from SASS" article.
The guy is getting roasted, but I don't think he used "pity" in a beneath him context. I pity the frustration of frontend development myself. It's a rat race and I'm glad it's not the main focus of my job, learning things that could easily become useless in a year or two is a depressing thought.
Something that makes me sad about this industry is that there are so many Dunning-Kruger effect sufferers out there; people who think they really know their stuff when in reality they are less knowledgeable than their peers. Sort of the opposite of the impostor syndrome. These are the sort of people who will loudly express their cynicism toward a newish technology, even though they don’t know much of anything about it and can’t be bothered to learn. A simple hello world world in React has two dependencies: React and React-DOM. &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;So many dependencies!!!!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="app"&gt;&lt;/div&gt; &lt;script src="https://unpkg.com/react@16/umd/react.development.js"&gt;&lt;/script&gt; &lt;script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"&gt;&lt;/script&gt; &lt;script&gt; ReactDOM.render( React.createElement( 'h1', null, 'Hello, world!' ), document.getElementById('app') ) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; Of course, no one codes React like this. Most people are going to use JSX and transpile `const App = () =&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt;` into something resembling the above, which doesn’t require any other further front-end dependencies. Granted, ReactDOM is a pretty large dependency. Fortunately, no one is out there importing 100+ kB of code just to output “Hello, World!” to the DOM.
Anybody know of a quality guide like this but for backend development? Js or python ideally.
It's unbelievable that this community could misinterpret your vague language that you aren't clarifying...
I did not like it. It's cool for small requests, but when you try to send something more complex than list of groceries, it's starting to annoy. Also, it uses only posts, and sending a file to server is a nightmare.
Another depressing thing to think about is the fact that all of these SPAs will need maintaining for years to come :)
I actually can’t confirm it’s cooling down. I use GraphQL in production since a year now and like how easy it is to add new features or even deprecation ones by just adjusting your query. Monitoring and caching on server side could be still better, but teams like Apollo are actively working on it (e.g, Apollo Engine for monitoring).
Very nice and useful! Thanks!
Really, the React team made a point to emphasize all of this and then some. The only people who would make claims like this are people no one listens to anyway.
im currently evaluating switching to GraphQL for a recently started project. Not really sure since it seems it solves alot problems rest has but adds another set of problems.
I use GraphQL via Apollo as my API for leveluptutorials.com and I love it. Honestly no complaints, it simplified how I access my data and how I deliver it. I maintain an Apollo client and server and both have been wonderful.
Why would my not using a larger framework affect my decision of weather or not to use jQuery?
The thing about the way react is developed is that it’s dependencies are fairy modular, so you can swap parts out or write your own versions of most of the stuff that’s required to work in that ecosystem. React itself only has 4 very small dependencies. The thing to consider isn’t the number of dependencies, but the size of those dependencies. Using your example, of a hello world app, you could achieve that with a single dependency if you used a package called create-React-app that does it all, but it might not be the most appropriate way to bootstrap a production app. I think the other thing to consider is the split between dependencies and dev dependencies. The things you’ll want to be adding onto the client should be pretty deliberate and making sure that the page works gracefully with bad internet connections and is accessible should be priorities of a good front-end developer.
What sort of projects do you work on that being a part of the JavaScript sub is something you chose, but you differentiate yourself from “this part of our industry”?
There have been enough comments in this thread where I believe I sufficiently laid out my position.
Plugins. Also I think it still has some convenience features for DOM manipulation over the vanilla API. I miss even little things like chaining calls when I'm doing something a little more complex.
But you can just do those things with vanilla. I have little utils I wrote for things like that, then I don't need to import a whole library just for the one or two things it does.
Always love these handbooks, thanks for sharing! I used the 2018 version loads last year! One quick sidenote, the site goes a bit funny on mobile when you open the side menu, not the biggest deal but looks odd! (See on Chrome, android) [Screenshot](https://i.imgur.com/WEosvyH.jpg)
This is the first time I ever heard about just .
Vue is great! I use Nuxt at work which sits on top of Vue. But react is pretty cool too. Some people are just cynical and want to complain, especially if it might make them appear knowledgable.
It's really not that bad... people love being the doomsday type. Things are literally fine, people are so hyperbolic.
Web applications, two thirds backend, one third frontend. I don't "differentiate" myself from this part of the industry, I merely pity it. Only very little related to software development has ever been as complex as modern frontend development, and in many cases needlessly so. But hey, who am I kidding? Just give me that downvote.
This sledgehammer is way to big to make my bird nest, why does anyone ever use them!
Man, either I don't get why you were so downvoted or I don't get the subtlety of your phrasing that cost you so many downvotes. But I upvoted you. Not so long time ago, we were all talking about the JavaScript *Fatigue*, and not for the good, remember? If I include into this one the CSS ramifications, the Frontend *Fatigue* will have some beautiful days ahead. _Disclaimer: I don't say it's bad, but it's definitely confusing. And I know it's part of our industry.._
Hey that's great, I didn't need the source per se, I would like to see how I can implement a few things here and there. That said, keep up the good work! I will, maybe show you what I come up with for my website!
Hi /u/coffeetasse, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TinyVersion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sickcodebruh420, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That goes without saying. jQuery is written in JavaScript, so of course its capabilities can't go beyond it. It is a convenience library. In the case of plugins you can't assume that any one will use a particular subset of the jQuery API so you can't necessarily use it piecemeal (well maybe now you could with ES modules).
Ah so your problem is witg the modern SPAs? We should not be trying to make better UIs instead stick to geocities websites. Gotcha.
I don't even
Very useful, is there anything like this but for Back-end ?
I wrote my own reply to have an actual conversation. Not to send you into the abyss. How long have you been a developer? I haven’t been doing this professionally very long so these complex systems are all that I know. The closest to simple front end I’ve done is razor with vanilla JavaScript. And that was for some very small projects. Do you think that this level of complexity on the front end has added any benefit? If you take MVC .net for example, it’s quite complex, but from it, you gain a pattern and an ease of understanding what will be where. You also get the robustness of a language like C#.
I wrote my own reply to have an actual conversation. Not to send you into the abyss. How long have you been a developer? I haven’t been doing this professionally very long so these complex systems are all that I know. The closest to simple front end I’ve done is razor with vanilla JavaScript. And that was for some very small projects. Do you think that this level of complexity on the front end has added any benefit? If you take MVC .net for example, it’s quite complex, but from it, you gain a pattern and an ease of understanding what will be where. You also get the robustness of a language like C#.
There is plenty of movement. It just fails to make any impact. And when you think of it the reasons are quite clear. Web components offer niche advantages which for most companies aren't all that relevant. Those niche advantages are, cross framework compatibility - irrelevant for most companies which work with unified tech stack. Exceptionally small bundle sizes which becomes relevant in countries with developing economies. Other than that, there isn't any. And things like lit-html are quite awful actually when you put it to scrutiny. Like it's bunch of strings which represent xml which are when parsed by regexp with fluff syntax inside it. Strings which cannot be debugged, type checked or evaluated as code. But they use native web standards... and, so what? That's not an argument.
I cloned it, built it, and ran it, but I can't seem to get anything to play? When I hit enter on a station, the application crashes. Sometimes it tries to search for \`metal\` and becomes unresponsive. Any ideas?
it seems, its Coffee script's shorthand for this ( https://coffeescript.org/#operators ) (i dont know coffee script, just found it on the internet)
ah, I see thanks. It is strange why the guy uses `@` sometimes and sometimes don't. Anyway I think the case is solved. THANKS!!!!
&gt; thanks to the operating system these apps were built for - the browser - still being woefully inadequate for what everybody is trying to do with it This is true, but as Churchill put it, "Browsers are the worst form of UI platform except for all those other forms that have been tried from time to time." Writing direct GUI code for specific operating systems is not an improvement over browsers. Making good UIs easy to implement is a hard problem that hasn't been fully solved yet. I think you're reacting to that work that's still in progress. But if you have some suggestion for a viable alternative solution, I'm sure many of us are all ears.
I love the idea of using Rust almost exclusively on the front end. Haskell would be cool as well.
How do you like Germany? I'm interested in hearing about what the tech scene and culture is like there.
I started on codecademy years ago but the codecourse youtube channel has much better lessons. Free obviously and very in-depth. Here is a good example for learning OOP PHP and building a login/registration/session system. [https://www.youtube.com/watch?v=c\_hNNAdyfQk&amp;list=PLfdtiltiRHWF5Rhuk7k4UAU1\_yLAZzhWc](https://www.youtube.com/watch?v=c_hNNAdyfQk&amp;list=PLfdtiltiRHWF5Rhuk7k4UAU1_yLAZzhWc)
this is great!
Isn't it possible to use requestFrameAnimation() instead of setInterval()?
It all depends on your learning style. I can do courses forever but only building something really helps me truly learn. My advice is to think of a simple app that you could use, and build it. If you get stuck, just google what you are stuck at, or check stackoverflow
A short word of advice on learning. Learn the actual underlying technologies, before learning abstractions. Don't learn jQuery, learn the DOM. Don't learn SASS, learn CSS. Don't learn JSX, learn HTML. Don't learn TypeScript, learn JavaScript. Don't learn Handlebars, learn JavaScript ES6 templates. Don't just use Bootstrap, learn UI patterns. I like this. I've been focusing my studies on creating "green field browser only" demo projects lately. Really simplifies development.
&gt; The worst part of React is that it is a difficult environment to set up I was just responding to this.
Great!
Thank you
And of-course post questions if if you have any :)
LitElement is what any normal dev would use and it's damn fast. Native components is an arguments. Native api is the whole damn reason we have things with webpack and babel. Web components has really grown but right now the hype of React and 'web frameworks' is still big. 5+ years from now we'll all be using web components.
What software doesn’t need maintenance if its going to be used for years to come?
Project link: [https://github.com/PxyUp/FastDom](https://github.com/PxyUp/FastDom)
Nice effect, but I prefer the method of realising programming experience in the résumé.
Why are you loading require from a cdn? I would have thought it needs to be included with your other assets in your config?
Example simple express app in `chaz-js`: [https://gist.github.com/shafeen/2f868b5568e7d651b9ad759d4097c889](https://gist.github.com/shafeen/2f868b5568e7d651b9ad759d4097c889) To run it: \- create project directory with `app.js` file and `src/`, `resources/` folders (see readme [here](https://www.npmjs.com/package/chaz-js)) \- `npm install chaz-js express` \- create file `ExpressApp` from the gist anywhere under `src/` \- your directory structure should look like this: &lt;project&gt; | +----src/ | | | +----ExpressApp.js | +----resources/ | +----package.json (with chaz-js and express installed) | +----app.js \- run `app.js`
I'm going to assume you have an `ArrayBuffer` containing GIF bytes that you want to display. Otherwise can you elaborate? If it is that maybe you can turn the bytes into a base64 string and create a data URI: * https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URIs * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding
Run a preprocessor like SASS or LESS and when it renders it will compile all your sheets and @imports to one file. You can even minify that final style.css file. Then link to that compiled file.
ig this will do. Ty for now
Cross platform compatibility is irrelevant? Say this to all the companies with AngularJS systems that where thrown away. Other than cross platform, Web Components offer web security - since you can’t enter a component markup if shadow dom is closed - and awesome performance. Also, micro Frontend are waaaay easier to implement with Web Components.
That will start a new loop everytime you click the button. I doubt that is what you want. You could end up with a bunch of loops changing things at the same time. Guessing you want only one loop Maybe there should be a variable that keeps track of whether or not the game has started, and the timed loop can check that variable to see if it should animate.
There's a difference, in CoffeeScript anything with an @ is an instance variable and anything without it is a local variable
This is super neat. Well done!
English syntax error: `#bookPadding &gt; section:nth-child(6)`
Never used usm for vuex, is it worth the boilerplate? On a different note, where would I use depency Injection in a vue app? I am not very familiar with it
[https://github.com/PxyUp/FastDom/blob/master/src/observer/observer.ts#L5](https://github.com/PxyUp/FastDom/blob/master/src/observer/observer.ts#L5) I don't quite get this. Optional's should be the last params IMO.
I agree, I think that was rudiment. They both optional, but forces by default false
How do you manage a technology non-agnostic environment? Do you tell every team they must use Framework X and Library Y? What happens if Library Y updates? Does every team then have to update simultaneously? What was the problem with a technology agnostic front end? We're thinking about it at my place, and my first thought is that if you have to bundle say AngularJS, Angular 7, React, Redux, Vue, VueX... Then your bundle size is going to be astronomical, without much gain for the user.
Lord Chode of BonerFell is attempting to chat on mobile but m’responsive layout is not working. Rides on ios 12.12 chrome latest
This should never happen on a site called "front end masters"...
How about instead of just keeping track of your packages you also work towards reducing the number of packages required by your code base as well.
It's a neat effect but already done alot of times. You might try to let the lines become thinner when the dots get further away.
thanks for the information!
Hi! pkg32/64 are just helper scripts for bundling distribution binaries. That sounds like a mplayer issue, did you install it? The unresponsiveness is likely fault of your internet connection, you can try changing the default source from icecast to shoutcast or radio; I've found icecast to be lagging from time to time.
Correct me if I'm wrong but doesn't React use web components to achieve their implementation of components? Pretty sure I have seen a tech discussion where this exact topic was addressed. It might have been a dev from the React Router team.
Pretty good experiences from it so far.
He could alternatively deregister the event listener when the loop is started or disable the button and re-register when it stops.
I remember when johnpapa used to be good. Swallowed up by the corporates.
Awesome! Is there more similar stuff? Doesn't need to be related only to frontend.
Micro frontends are poop
Would prefer to log in with email
What, m8??? I’m super confused. You can’t use PHP inside JavaScript, JavaScript runs in the browser. PHP runs on your server. By the time the client gets the code, the PHP part is done. You would want to use AJAX to send the call to the server and return the response.
Well, I can use it the way I did it above. And I know about the limitations you mentioned. I think I have to use AJAX then, thank you!
You're going to want to look at AJAX. It'll give you the tools to do what you're wanting.
Thank you! Also, did you see how I called the php-function in javascript? Is there a better/different way?
Not really a JavaScript question, but make an endpoint in php that accepts a post or a get that accepts your value and make an Ajax call from your js.
Perfect, that's the way I will do it. Already looking into ajax
When you set this up as an AJAX request it'll start to lay out how to do these effectively. You're going to essentially move your function somewhere that can be accessed by the route you're passing in through the AJAX request. The way you called it is fine, though.
Other people seem to have answered your question. I have a recommendation that's not directly related to but I think it may be helpful. You shouldn't mix your PHP code and your JS code. They should be entirely separate and you should only communicate between them using ajax calls. Embedding PHP in your JS code makes it confusing and limits its reusability. Another side note. This one is a little more advanced. You should make restful endpoints (using PHP) that you can make calls to from your JavaScript.
Yeah, so, you need to have the PHP section be written in a piece of PHP code that will live at an endpoint (some address you can hit) and replace the variables with $_POST['whatever']. Make sure if you are using a database or writing to the console, that you have properly prepared or escaped them—or at very least, require them to be specific primitive data types to avoid injection. Anyways, lastly, you’d just `$.post('/my/endpoint.php', {var1: myvar1, var2: myvar2}, function(response){ // do stuff with the response });`
As I was learning about Microprocessors while reading [the Manga Guide to Microprocessors](https://nostarch.com/microprocessors), I implemented half-adder &amp; full-adder to add positive numbers using boolean operations.
So in easy words: I use ajax to request a php file to create the desired select. This data is being sent back to the point where I set up the ajax request initially. Now I have the "select form-data" natively in javascript?
I am down, I've been trying to learn JS but I've been lazing out tbh. You got Discord?
@anasfari#6695
Are you claiming there's no setup to creating a new app with react? If so, that is very much incorrect. To set up a react application there is a quite a few steps you need to take, including setting up a babel and webpack config, just for the very basics. Fortunately, CRA has automated most of this work for you, but there is still a hell of a set up needed just to get a simple "Hello World" running.
I think the term is evergreen browsers?
Sent one
&gt; I use ajax to request a php file to create the desired select. In an ideal world, you would use a routing library in your PHP code so that you don't request a file but if you're just starting out sending a request to a file is fine. &gt; This data is being sent back to the point where I set up the ajax request initially. Yes &gt; Now I have the "select form-data" natively in javascript? I'm assuming select form-data is what is returned by the PHP. In which case you will have access to it natively in your javascript as a string. fetch('http://yourdomain.com/selectFormData.php') .then(function(response) { return response.text(); }) .then(function(text) { // text is string that is equal to whatever was echoed in your php file }); However, this isn't what a restful endpoint is. I would recommend learning about RESTful APIs sometime in the future when you have some time. This is how a lot of websites are built. Especially when the website wants to send data back and forth between the frontend (JS) and the backend (PHP).
Okay, I will look into this, thank you!
Yeah, ok. [https://i.imgur.com/Bz81BP4.png](https://i.imgur.com/Bz81BP4.png)
lit-html beats out preact/vue in bench testing? Where are you pulling this false information from?
You pick a framework and roll with it across teams exactly for the reasons you listed. Once you've reached "critical mass" you also don't roll with the latest and greatest, you stick with LTS, but simultaneously continually pursue an optimised architecture so that upgrades are as easy as they can be. "Anti-corruption" layers and so on. Avoiding vendor-lock-in where possible, etc.
so is react and its becoming the industry standard
I created at app to search all Craigslist cities for remote jobs. Just enter your search phrase. https://www.reddit.com/r/InternetIsBeautiful/comments/bd8kvu/search_all_497_craigslist_cities_for_remote_jobs/?utm_source=share&amp;utm_medium=ios_app
Hang on... I think I was confused by the question, but looking deeper at the code you posted, if the PHP part isn’t being altered after the page is sent to the client, and isn’t reliant on anything in the JavaScript part, there’s nothing wrong with what you did. I pass data from PHP Into JavaScript this way all the time. BUT if the PHP part needs anything that only exists in JavaScript OR relies on data that’s not available until after it is sent to the client, you will need to post back to the server and handle returning a response through ajax.
Okay, thats understandable. Thanks for your time!
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_trannyzon] [Rewrite all &lt;style&gt; and rel=stylesheet and @imports into one large stylesheet?](https://www.reddit.com/r/u_trannyzon/comments/bd9adj/rewrite_all_style_and_relstylesheet_and_imports/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
It isn't always difficult, though. Without micro-frontends, Team A just upgrades React and Team B doesn't need to care because they work with Angular. A supposed benefit of micro-frontends is rapid deployment; a team can just change their slice of the UI and it shouldn't affect other teams negatively impact the user experience. But if teams can no longer regularly update their own dependencies, you lose a lot of that benefit. You've just kicked the problem into the long grass; now every team Say some big update with game-changing features comes out. Something like React Hooks last year. Now every team wants to implement that new feature, but they can't yet, because they have to wait for some arbitrarily determined "Upgrade Day" when everyone gets to update their dependencies all at once. So problems have to be solved "the old way" even though "the new way" makes more sense now. Then Upgrade Day comes and everyone makes those changes and deploys and holy shit, we're not even doing continuous delivery anymore.
good benchmark testing is not a sign of "proper way" to do things
Check out /r/learnJavascript
read react docs https://reactjs org/docs/web-components.html
I’m about to start working on a chat feature for my project with this exact stack so it’ll be nice to use your code as reference
Just don't forget that most of those dependencies are to help developers make better bundle and are not included in the deployed application. Having a ton of them is not a measurement of any kind.
&gt; write your own versions This is one issue I have with this industry. People re-invent the wheel because they think they're smart instead of standing on shoulders of giants. It results in massive amounts of crappy code which hardly anyone understands.
Very cool post. It was cool to see how you did this in js.
It's fine. But you shouldn't unconditionally set up the timed loop. Check whether the timed loop has already been set up or hasn't. If it hasn't, then set up the timed loop. Otherwise, don't set up another. Or ideally, disable/hide the game start button when it's clicked.
Thanks @osoese. It was really fun implementing it in JS 🙂 and pretty cool how addition works under the cover.
What I learned from this article: not to be agnostic.
What’s wrong with react?
The virtual dom that both react and vue use was pretty damn innovative
First time i ever heard about boolean operation, however Bitwise operation...
It's really nice to see that people are willing to take the time to get their "hands dirty" with bitwise operators to investigate how binary-based systems do their thing. I've run into developers who are used to working with higher level abstractions but don't really understand how their code is translated down to the metal (logic gates, transistors, etc.). They're sometimes baffled by low-level concepts like using combinations of XOR and AND gates to perform addition and it seems to stunt their ability to be creative when faced with certain coding challenges ("how can I manipulate single bits when all my language has are math functions?") Understanding the binary make-up of data structures also helps to explain unexpected results like: `0.2 * 0.1 = 0.020000000000000004` And of course there's the ability to create analogous systems using non-traditional approaches. If you can model a logic gate out of something like [hoses and Lego blocks](http://www.blikstein.com/paulo/projects/project_water.html) then you can get *really* creative with your computing. &amp;#x200B; I hope this doesn't come across as elitist. I don't think this material is beyond anyone's grasp and I wish more people would take the time to learn the fundamentals of the increasingly digital world world around them. When digital devices are viewed as semi-magical, instead of fundamentally quite basic, it puts a lot of power into the hands of the relative few who understand them and produces a great imbalance. I'm sure I'm not the first to point this out. Knowledge can truly be power.
That could work. 1file maintaining 1 single source of truth that you can read via JavaScript to replace the hard coded values. https://www.dropbox.com/developers/documentation/javascript#tutorial Another option is to run a basic web service (like Django) that has end point /API/whatever. In Django once you register the model, you can free gui to add additional entries. You can just use sqlite DB in this situation.
&gt; Don't learn TypeScript, learn JavaScript. If you learn TypeScript, you learn JavaScript. Don't see any reason why you couldn't start there.
Thank you for the reply, @monican_agent 🙂. I still haven't found the way to utilize this knowledge 🤔 but as I have gone deeper with JavaScript (with destructuring and logical operations on how JavaScript handles "&amp;&amp;" and "||"), I was able to write succinct code (at the price of readability for those who isn't used to it). This could be helpful in the long run as you pointed out.
lol you added an extra /
Thanks a ton really appreciate it. Do join our discord server to be a part of this project!
So other than compatibility, future forward-ness, framework universality, bundle size and performance, web components have nothing going for them? Got it. Great argument.
try [https://dashboard.paperclip.live/](https://dashboard.paperclip.live/) instead, it will redirect you to your user dashboard
Web Components are a different thing. React encourages a component based approach to UI development, but isn't the same set of JS APIs and templates used for Web Components. You can use both together though.
&gt;. I don't think this material is beyond anyone's grasp and I wish more people would take the time to learn the fundamentals of the increasingly digital world world around them. Thank you for the courage, I read the post and thought this was too advanced for me as I do not have a CS degree, but after reading your comment I feel inspired.
Hi, fellow new coder here, by chance do you have any links to resources where I can learn the fundamentals you’ve mentioned?
You're right. Just realized I wrote the wrong word and came back to see if I had any comments about it.
looks interesting, i think it's good for learning and get-started new bees.
I just want to know what that happy person is doing amongst all those zombies...
May I ask which part was hard to digest? I'd like to hear your thought as this means I wasn't explaining it well enough 🙂 I could update the post according to the feedback to write it easier to digest.
It was very well written, it is my lack of familiarity with concepts like XOR or half adders that made it harder to digest. After reading it again I fully understand the article and really appreciate the post!! Very well done, and I look forward to many more! :)
Thank you, @nowtayneicangetinto. I appreciate the kind words. I will keep it in mind as many new programmers start with JavaScript and I just "assumed" that people should know of it.
Say it again for those in the back: Always learn the fundamentals first.
Rust is the best language to write WebAssembly IMO
Article’s “stitching layer” section is pro or anti stitching layers?
Yes you should! Javascript enables you to do lots of cool stuff like ui interactions and it is a crucial part of web development. (Btw technically HTML isnt a programming language).
Yes you should! Javascript enables you to do lots of cool stuff like ui interactions and it is a crucial part of web development. (Btw technically HTML isnt a programming language).
yeah i know that it is a markup lang
Yes you should. Javascript is quite powerful and can be used for various situations (backend, frontend, mobile, even desktop). Depending on your needs (or motivation), you need to choose suitable framework such as react, vue.js, etc.
Absolutely. It’s no small feat to roll your own version of something. Usually not a very good idea. But I’m glad we have a diverse ecosystem of tools that people can swap out to fit their own needs/preference.
Yes you should! Javascript enables you to do lots of cool stuff like ui interactions and it is a crucial part of web development. (Btw technically HTML isnt a programming language).
&gt;At what point of learning HTML and CSS should I start js
Hi /u/rmacmaster, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
There is no specific point for that, sooner is better. But it is good to know programming fundamental such as conditional, iteration, functions, etc. before diving into javascript.
[removed]
ok, thank you
Look at the other comments, I think you’re looking for an answer that doesn’t exist. But maybe a good landmark will help you. I recommend learning JavaScript when you want to start building things that can’t be made with HTML and css alone. If right now, you’re learning a lot and enjoying the static websites you’re making, keep doing that. If you want to load data from a backend server or something, and display it on the page, then start learning JavaScript. I will say one thing however, in my opinion JavaScript is not the best starting language if you’re looking to become a professional programmer long term. Especially if you’re learning on your own without any formal education or guidance
Well, it's a tradeoff. Using libraries has many advantages as well. Many of our packages are used in testing and tools to generate certain files like schemas, storybook, testing server, and doesn't even make their way to the user.
Right about now.
JavaScript is the most popular front end and becoming a very popular back end language. It's say it is a good choice for a professional programmer nowadays.
Definitely! I work with JavaScript everyday. I don’t think it’s a good STARTING language.
What is a good starting language?
Now that’s a tougher question haha. I started with Java, and it was good at teaching me a lot of basics and giving me a basic and clean programming style. Many consider it to be a little dated now, and a lot of people are starting with Python first, also a good choice. Other good ones are C# and Ruby, but Python is my most confident answer.
That's because your ideas has not well thought of. Go back to drawing tooms and rework it all.
Thanks for the clarification.
Thanks! Alway's good advice that I can never hear enough.
Hi! I'd recommend starting with binary math: [http://www.binarymath.info/](http://www.binarymath.info/) ... and then, keeping in mind that the binary digits 0 and 1 represent off and on states (or no electrical current and flowing electrical current), you can see how electronic components called [logic gates](http://electronics-course.com/logic-gates) you can see how they're combined to perform binary math: [https://www.allaboutcircuits.com/worksheets/binary-math-circuits/](https://www.allaboutcircuits.com/worksheets/binary-math-circuits/) (also check out the link that started this thread above!) &amp;#x200B; Once you feel pretty comfortable working with bits and transforming them using NOT, AND, OR, and XOR, you should have a pretty solid foundation for most modern digital systems (since they almost all use binary data). &amp;#x200B; In JavaScript you can manipulate bits using a variety of language instructions: [https://www.w3schools.com/js/js\_bitwise.asp](https://www.w3schools.com/js/js_bitwise.asp) &amp;#x200B; This should allow you to see the fundamental composition of data--any data--since it's all stored, manipulated, and transmitted as 1s and 0s whether it's a picture, a music file, or a web page, or something else. &amp;#x200B; For example, a combination of 8 bits can represent an [ASCII](https://en.wikipedia.org/wiki/ASCII) character or a number from 0 to 255 or some other information -- it's usually up to the software how it's interpreted. Bytes are also often combined into groups like RGBA -- 4 bytes with 1 for Red intensity, 1 for Green intensity, 1 for Blue intensity, and 1 for Alpha (transparency) -- to represent a single pixel on a display. Sometimes bytes can be "packed"; for example, if we know we're dealing with the standard 26-letter alphabet (both upper and lower case) we only need 52 values which can be represented by 6 bits (the number of possible combinations for N bits is 2 to the power of N, or in this case 2\^6 = 63). Since computers store information as bytes, 6 bits of one byte would be used for one letter and 2 bits would be combined with 4 bits from the next byte for the next letter. After 4 bytes we'd have saved one whole byte, which can really add up in very large files. &amp;#x200B; Because sequences of bits are abstract and can be used to represent nearly anything (numbers, letters, colours, coordinates, etc.), anyone claiming to be able to "read" or "write binary" doesn't really know what they're talking about. Now if they claim to know which ASCII character is represented by any 8-bit combination, that's somewhat impressive :) &amp;#x200B; Finally, there's more than one way to represent the same value. For example, the binary value 11111111 is 255 in our standard decimal number system but can be shortened to FF in [hexadecimal](https://www.electronics-tutorials.ws/binary/bin_3.html) or Base 16 (often written as 0xFF so that we know it's hex). Sometimes Octal is used (this system only uses the digits 0 through 8), but in the end anything other than binary is just a convenience for us humans since hardware can only deal with electrical signals: on or off, current or no current, 1 or 0. &amp;#x200B; Literally *everything* that modern digital devices do at the fundamental level involves just storing, manipulating (via only a handful of logic operations), and moving bits around. &amp;#x200B; Beyond this you could look at digital electronics (transistors, integrated circuits, etc.) to see how this is accomplished on a concrete, physical level. This could involve anything from the study of electricity and electromagnetism, to atomic theory, to photonics, and even chemistry (e.g. when examining the rare earth minerals used in certain components). It's a pretty deep rabbit hole but with circuits now being only a few nanometers wide it's unlikely that you'd get much practical use out of these subjects except to gain an understanding of how digital devices work physically. &amp;#x200B; Hope this is enough to get you started :)
You can do it! I believe that you're having trouble because this post assumes knowledge of a few things like binary math and boolean/logic operations and jumping straight into emulating (via JavaScript) how hardware would do these things, but if you can learn those first (see my longer reply above), this post will make a lot more sense.
The question of when you should start learning language X depends on what project you want to do next. I wanted to create a Rubik's cube teaching application, and I noticed that the THREE.js library is good for that, and doing it in Javascript would make it easy to publish to the internet. For a large part of development, I just had the entire webpage be the THREE.js scene. As I got closer to being ready to publish, I taught myself some basic HTML and CSS so that the teaching instructions could be displayed on the page. Check out [wayofmath.com](https://wayofmath.com) to see what I'm talking about. &amp;#x200B; The point is that teaching yourself a programming language without a goal to work toward, such as a project you are working on, is likely to fail. You need a sufficiently complex problem that requires you to really use the language. If you know that Javascript is the first programming language you want to do, then go ahead and find a project that requires it and have fun making it. By the way, I absolutely recommend this tutorial: [https://www.youtube.com/watch?v=Bv\_5Zv5c-Ts](https://www.youtube.com/watch?v=Bv_5Zv5c-Ts) He shows you from the basics up to more complicated topics how Javascript works under the hood. For example, many JS programmers are a bit confused by the \`this\` keyword. After watching the 3.5 hours, I decided to buy the whole course on Udemy and it was definitely worth it.
Exactly. They'll be in framework churn for another few years then it'll come full circle. They'll learn how to architect web apps properly using Vanilla JS. Then they'll have to rewrite all the crap they've been doing since React came on the scene.
I agree with u/00benallen. Python. Julia is another good choice. Similar syntax to Python, but generally faster in execution. Use Jupyter notebooks and you can play with either of them freely. If you want a more classic IDE, Spyder is a great choice for Python. Spyder is included with Anaconda, and Anaconda also easily interfaces with Jupyter notebooks. So I'm telling you to get Anaconda, and then use the conda package manager to add Jupyter notebooks.
Virtual device modelling / simulation / emulation / circuit design would be some neat applications. It'd probably take a lot of work to build up a whole virtual computer, or virtual "hardware" MP3 player, or whatever, from elementary virtual components like this but it sure would be interesting!
I just had a flashback to my computer architecture course in university
I pointed out iOS because portable iDevice users have no choice - other browsers on that platform are wrappers around the built-in web view so can't behave any differently in that regard. macOS users have the option or running other UAs properly, so you are not completely cutting them off by refusing to hold yourself by for Safari's sake.
&gt; It isn't always difficult, though. Without micro-frontends, Team A just upgrades React and Team B doesn't need to care because they work with Angular. Even with micro-frontends it's possible. Easier, in fact. But it leads to bloat like your OP was concerned with as your site as a whole is now dependent on both React and Angular. When upgrading MFEs this can still happen with multiple versions of something, yes, but you can streamline it somewhat such that minor (a la semver) upgrades mean your site uses the highest minor version that any of your MFEs need (e.g. A needs v2.1, b need v2.3, so your site uses v2.3 only). Major upgrades will need some consideration, namely because of globals (e.g. `React`) which you'll need to scope somehow.
This sounds like [an XY problem](http://xyproblem.info/) to me. If you describe your problem rather than your solution then you might get further.
\&gt; bitwise operations \&gt; down to the metal lol, that's adorable
You still can, depending on the framework you use. But generally ES6 modules are enough.
It would really help if you learned CSS and HTML in parallel. Both arn't that hard to pick up once you get going.
Yes, there are two dashboards, one for users, another for sites.
If it works out of the box, it would be a nice way to speed up TS code. Although if you are really using Wasm for performance (rather than getting a speed bump), using a systems language is the better option.
Dependency injection is something very cool, however it requires modules to keep a strict API backward compatibility, and that has a tendency to lock things out.
You shouldn't, you must.
You don't need this until you use TDD.DI is quite useful in this case.This is the fastest and easiest to to change implementation of anything you use in your project.
[removed]
If you’re learning JavaScript you’re probably messing with the web, in that case learning the basics of HTML/CSS will only benefit you.
I would suggest you start with some basic HTML and CSS. Create a few simple pages. Once you get the hang of it, you can start using little bits of JavaScript on your page, and you will see how it all comes together. For example, you can create a simple page with a title and a paragraph. Then, you can add a button that makes the page change colors when you click on it. Nowadays I feel like people forget you can build webpages without any JavaScript at all, and things become a bit complicated for beginners. That's why I recommend you start only with the basics of HTML &amp; CSS.
As noted in other comments in this thread, my beef is not with the stack itself, and there most certainly are cases where its inherent complexity is warranted -- one of them being cross-platform applications that just happen to use the web stack (Electron et al). Big fan! Honestly! What bothers me though is when things that could just be _web sites_ are built as _web applications_, and while this used to be the unfortunate exception, it has now (catastrophically, IMO) become the norm. Now people seem to agree that it is _normal_ to learn frameworks like React or Redux if you want to do frontend development (and that's just the tip of the iceberg), and that can't be healthy in the long run. As noted (and heavily downvoted) elsewhere, I've already seen too many projects completely fall apart because someone decided that "it's not real web development unless we use the latest Webpack/Babel/React/Redux/Sagas/Ramda/etc." in cases where a simpler approach would have totally sufficed. One of the most popular counter-arguments I keep hearing is "but Netflix/Facebook/Gmail/etc. do it, too", but hey, your blog/company/app probably isn't anything like them. More people should read up on concepts like KISS or premature optimization.
If you intend to work with webpages and make them more dynamic by scripting their visual elements, then you are certainly going to need some HTML and CSS knowledge.
You don't _need_ to, it's just a useful pattern and it can be implemented in all languages, JS included
It's a fallacy that learning to program is about learning a programming language. If you're concerned with learning \*just\* javascript with no html/css that says to me you're far to focused on the language. Of course you should learn html/css as well as they're commonly used together. Furthermore I'd strongly suggest you should learning another language in parallel to give you a different perspective, even if not in the same depth. I'd suggest Python because of the different syntax.
This was my question last year as well when I first got to know about frontend handbook
What exactly do you expect the answer to be if you ask r/javascript??
I have been building web stuff since 1997 or so, so I literally \_am\_ a dinosaur. Some people in this thread would probably be surprised by what kind of stuff I build, though. It's not like I've been avoiding any of the fancy new stuff. As noted elsewhere, my beef is not with the stack itself, but rather the premature application of it to many applications that would have been faster to implement, easier to maintain etc., with a simpler approach. The school of thinking that suggest that you \_need\_ to dive into React, Redux, components etc. in order to do any sort of frontend development, coupled with the fact that companies typically optimize for hiring and not sustainability, is what leads me to pity this part of the industry, as originally stated.
The navigation bar should have hovered over the main page instead of displacing it
True. The best use case for this Imo is when you have an existing codebase in ts.
Let's be honest, this is interesting and all, but the usefulness in JS is nil. If we were talking WASM, perhaps...
Try /r/coffeescript/
Exactly. The whole idea is nonsense.
You should check out [nand2tetris](https://www.nand2tetris.org/)
They are completely distinct. Knowledge of html/css will not help you learn JS in the slightest.
you have to learn the basics, at least
Dependency injection is still useful in JS, so this is hard to answer without any further information... Why did you need them in Java?
Thank you so much for taking the time to write this all out. I’ve gained a whole new perspective and appreciation for what happens on the surface level of code. I’m going to bookmark this comment to study up on this subject. Thanks again for sharing your knowledge, much appreciated.
Object.keys()
You can do it by using Object.keys(obj) https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
Thank you so much!
Thanks man!
Since already answered, I will drop this: When you get to the reverse of this where you are trying to make keys from dynamic data the secret is the brackets around the variable name... \[varname\] ...like that. [https://stackoverflow.com/questions/2462800/how-do-i-create-a-dynamic-key-to-be-added-to-a-javascript-object-variable](https://stackoverflow.com/questions/2462800/how-do-i-create-a-dynamic-key-to-be-added-to-a-javascript-object-variable)
`nameless !== namelist` Look into [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
While its true, as others have been saying, you'll likely want to have some understanding of HTML/CSS because usually JS is used within the context of web development or such technologies, its technically not a requirement. JavaScript may have started on the web inside of browsers, but it can be found all over the place now, and be used in situations where HTML/CSS aren't touched at all. It's uncommon, but they exist. One example: http://johnny-five.io/
I thought one of the issues with doing ts -&gt; wasm was that wasm is not garbage collected. In order to make it work, you would need to ship a garbage collector with your wasm code. Is that a wrong assumption?
Very interesting. I don't know much about drones, but if an outdoor charging pad is available for this model, the automation possibilities give it a lot of potential.
That's cool!
Can someone explain to me the usecases for this? Given Typescript is a super set of JavaScript it supports a lot of the behaviours that make performance optimization difficult. Do you have to write your Typescript in a strict way for this to work?
Thanks, yeah came in handy when I was looping records and needed keys relative to dynamic values... guessing this is where you are headed with whatever you are working on
Guess I'll have to discover more on this.. So new to programming I hope it's not too late 🤔🤔
Me: How old are you? You: I’m.... *interrupts response* Me: Then it’s the perfect time to learn!
Yeah, unless you're manually managing memory there's no need to use wasm. Otherwise you're believing that you can make a better GC than the existing JS engines
What the hell? Use an ORM if it makes sense. Don't use one if it doesn't. Use an ORM and.. (gasp).. raw SQL together in a single app if *that's* what makes sense. The only rule about which tool you should use is that one size does not fit all. If it did, there wouldn't be so many different languages, let alone frameworks for them. It's shocking how little common sense developers seem to have anymore.
Yeah it's never too late. Thanks man!
That was kind of my point too in the post :smile: I don't really know how you were able to interpret it as the opposite.
Thank you for your suggestion. I really like that Django idea. That way, the supervisors can update the hosted employee database on the fly. I'll work on that this week.
Ah, that was a typo lol. It is actually namelist in my code. I will definitely look into Array.filter. Thank you.
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing.
USM can help you make your app very succinctly modular with Vuex. And if your app is complex enough, you may need to use dependency injection.
&gt; Yes, if you only need a flat list of items from one table at a time, by all means, don’t use an ORM! ...my experience is quite the opposite: for simple things, ORMs work fine, they don't bring much to the table, but it's _fine_. But the more complex it gets, the more likely it becomes that the ORM will just get in the way, and I'd rather just use a query builder. Your example of a somewhat-complex query is perfectly readable to me. One we get into queries that involve things like "IF" or "CASE" or outer joins, SQL wins _hard_ as far as I'm concerned. It definitely took me too long to decide if your ORM code is equivalent. And no, I wouldn't go and "define the relationships in a single place" just because "helper functions look the same." Look the same is not the same as be the same. Also, I already defined my relationships in a single place. It's right there in the database schema. This might be, ultimately, subjective, sure. It really hinges on me finding it much easier to read SQL or "plain" query builder code, and even the `.joinEager({ children: true, pets: true })` throws me off, but you kinda present it as objectively "good."
javascript have the worst ORMs compared to other languages. Objection is still pretty good considering how lightweight it is.
I didn't mean to present it as objectively "good". I feel the \`joinEager\` code is simpler and I'm simply sharing my opinions to other people that may agree. The benefits of \`joinEager\` and eager loading in general, are bigger when dealing with larger and deeper relation graphs, like in the next example after that one.
&gt; they don't bring much to the table The utility of an ORM isn't the query abstraction, it's the automatic hydrating of your domain's data models, which is a royal, tedious pain in the ass to do manually. And it's been my experience that apps that are built domain-first rather than data-first, are significantly more robust, reliable, maintainable, and stable. ORMs facilitate this approach. You don't use an ORM to avoid writing SQL, you use an ORM so you can focus on modeling your domain.
Sorry mate, none of this statement makes sense. I think you need to revisit what your notions of dependency injection are...
It requires a strictly typed typescript variation: https://github.com/AssemblyScript/assemblyscript/wiki/Limitations It also requires manual memory management: https://github.com/AssemblyScript/assemblyscript/wiki/Memory-Layout-&amp;-Management
In JavaScript you can just require or import the same module and stub out the methods being used. I recommend using the "sinon" library which has lots of utilities for testing. This is a lot simpler than passing around methods in your code, which imho is hard to follow since JavaScript on its own does not have great ide support
&gt; I didn't mean to present it as objectively "good". &gt; I'm simply sharing my opinions to other people that may agree. ...this is a common theme, to the point I have to comment on it. "An opinion" is a view on what is believed a fact, it's not "a taste." Of course I'm pretty sure that 90% of the time people actually mean "a preference" when they say that, but that doesn't come through once said or written, and can easily encourage groupthink, as people pick up on such cues quite strongly. I think that's partially to blame for the ridiculous amounts of pressure applied to hopeful-but-unproven techniques in programming (and likely other fields as well). Anyway, moving swiftly on from the meta... &gt; I feel the `joinEager` code is simpler Visually, yes (and I don't want to dismiss that — visual complexity can sometimes be exhausting), but it depends on a more complex underlying abstraction. This isn't necessarily bad, but I for one very much prefer the complexity to be fairly obvious — I definitely don't want to go diving inside an ORM. As for "joinEager" there is much granularity to what I might want to fetch, and it's something I'd immediately have to parse — selecting specific columns and not wholesale pull of a table is essential for maintaining schema compatibility windows, for example. I'd also need to understand where "children" and "pets" come from. It's not too much, but it stacks quickly, and as your deeper examples remain much clearer — if longer — _to me_.
Pretty cool, but [real men fly their drones with Scratch (somewhat NSFW)](https://www.youtube.com/watch?v=bZDE6I5B9-E).
&gt;"An opinion" is a view on what is believed a fact, it's not "a taste." Ok, I think you need to factor in english being my second language here...
Ehh, I think it's a confusion shared between languages. Native speakers in Polish do the same thing. People are rarely precise in the distinction between "preference" and "opinion," and it's a bit of my pet peeve once it happens in certain contexts.
You don't need to do it in Java either. You can just use global static classes or just `new MyClass()` anywhere you need it in Java, without doing any dependency injection. However, dependency injection is a very useful pattern for building loosely coupled, modular, testable code. It's not common in JavaScript because JavaScript is dynamically typed (meaning you can't really use auto-resolving dependency injection containers in it), lacks interfaces (so you can't really make a class depend on a contract rather than a concrete implementation), and uses prototypal inheritance for composing behavior together (allowing you to inject your dependencies at a different point in the execution cycle). It's just a different paradigm. Now, TypeScript changes that a bit. TypeScript is statically typed and makes JS feel more like Java and C#, so classic constructor injection is more common. DI containers can use reflection to read a constructor's dependency types, and recursively resolve them for you. Because it has interfaces, you can bind implementations to interfaces in the DI container. This makes automatic construction of complex object graphs dead simple - a must if you want to maintain your sanity while practicing constructor dependency injection. So why is constructor dependency injection useful? 1. Because you can swap out one implementation of a dependency for another, as long as the contract between the two implementations is identical. Makes testing easier since you can provide a simple mock/spy instead of the real thing, and makes code more re-usable in your application. 2. It makes code easier to reason about IMO. You can look at a class and get a better understanding of what it needs to do its job.
I have modelled my domain. In the database schema. In the application, I model the interaction with the data sources. Unless I use the database as a dumb KV storage, or a potentially hostile source as reliable as someone on the internet.
Let's say you want to do matrix transformations for 3d worlds. These are calculated on the CPU. The same multiplication in javascript will be dozens of times slower than if it would be compiled to wasm. &amp;#x200B; The only issue with the current wasm capability is the fact that we cannot talk to wasm function in an easy way. We need to read the binary data from the wasm module and interpret it back into javascript relevant data.
Thanks for links fellow Redditor
Yes ok, so the use case is I need finite performance in specific modules which instead of using C or rust I would use assembly script. Ok that makes sense. I assume in that case I wouldn't compile my entire app in assembly script... Just the parts that count.
Hi /u/grimspawn11, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
majku vam mrtvu nesposobnu jebem u pičku
I'm sure you can find a library that does this. We're using one for AngularJS.
I didn't mean Polish people do this because they don't know the distinction, I mean I DID.
That's my understanding of it. I don't see how it would compile things that have closures or async await.
Your time would be better spent building a project that you can talk about in a job interview, if you're asking how best to spend your time to prepare for the job world. &amp;#x200B; Learning anything usually isn't a waste of time.
JS devs discovering programming basics. That's refreshing.
You should be modeling your domain on the server, with classes and interfaces, where the database is just a way to store your domain objects. None of your business logic should be in the database
&gt; None of your business logic should be in the database This implies your database also shouldn't have any constraints?
[removed]
That. Was. Awesome... subscribe
&gt; You should be modeling You should be not using you should. &gt; with classes Are you from the nineties? &gt; None of your business logic should be in the database There is business logic in your database. You're welcome.
Probably not, given the [limitations](https://github.com/AssemblyScript/assemblyscript/wiki/Limitations).
I 100% agree that portfolio is more useful than any single bit of knowledge. However, I also think that knowing at least the very basics of DOM manipulation is a requirement to be productive in a front-end JS job. I went through a surprising number of results until I found a document that I liked for learning this. https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents But I'd say that if you can do that, then you know enough to keep on with the frameworks. Even if all you use is React at work, knowing this kind of thing will be invaluable in the JS Console to debug things and try things quickly.
Point of clarity: You didn't call a PHP function in Javascript. The Javascript is merely text here and isn't being run by anything at the point that the PHP function is called. It doesn't become actual "Javascript" until it is served to the browser and the browser parses and executes it.
&gt; The same multiplication in javascript will be dozens of times slower I'm doubtful of this claim. WASM doesn't have SIMD support and pure number crunching of typed arrays in JS should compile pretty optimally.
That's a good point, forgot about simd
Hi /u/giovannipuntil, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
&gt; You should not be using you should That's true, I was a little forceful. I probably should have said that I think doing those things leads to better architecture and maintainability. &gt; Are you from the nineties Nope... Plenty of systems are still architected this way. I love JS, and functional style programming really works on the client side... But on the server side? Not so much. How do you implement consistent business logic in a functional way, when objects make so much more sense? OOP isn't this outdated monstrosity, it has its uses; frontend isn't one of them, but modeling a business domain is &gt; There is business logic in your database Please explain to me where? And if there is, why it can't/shouldn't be represented on the server?
Hi /u/idkijustwanttopost, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/british-out, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/zeroxthegrim, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/joboy8457, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/fagnerbrack, this post has been removed because the author doesn't want to participate in reddit: &gt; This page is unavailable when linked to from reddit.com. &gt; Please find a less toxic place to spend your time.
Hi /u/sittinginacafe, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tiredkh66, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/WannabeStephenKing, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Wtf rly? How did you find that message? I can click on the link!
Hi /u/TheBugStops_Here, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle). Please just no. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/philip0908, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Local_Chemistry, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/geanhakux, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Chizz3x_HC, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/CoolAppz, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/NoLayer2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Leanne18, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/brainhack3r, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ADCI_Solutions, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ADCI_Solutions, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I’ve yet to see a valid example of why web components aren’t a “proper way to do things.” Now the argument is starting to turn into “but you have to do string concatenation for HTML” and I don’t see the drawback especially compared to virtual DOM (which isn’t bad, but _is_ a hack.
I just clicked the link from reddit like any other link.
I said nothing about functional style, and to make it even funnier, some of the more critical systems I’ve seen were either in Haskell or Erlang. TBH conflation of JS with “functional programming” or unawareness and the apparent (Or at least claimed) ignorance of what’s involved in a database engine doesn’t look too good in someone’s who’s quite preachy. And no, OOP isn’t necessarily a monstrosity, but the “one only way to achieve robustness” thing is something frequently taught in bad universities back in the 90s. It’s rather bankrupt as an idea now.
 SyntaxError: dynamic module import is not implemented
That doesn't make any sense. I can open it from Chrome on Mac and the Reddit App, why? I manually test all the links I post to make sure they're accessible! Which browser are you using? I tried incognito and it still works...
It can, but you should also represent that in your donation
Chrome.
Are you sure it's not something to your environment? I need to reproduce this so that I can ban the host from my submissions
I just assumed that your objection to modeling your business domain was based on some need for the new hotness that's so prevalent in the JavaScript community, but I assumed wrong. I know that you can represent relations in a database (hell, it's in the name). I know that you can have constraints. I know that database engines can represent (at least partially) business rules. It was more a question about how *you* would model those things and still have consistency in your domain, being able to test your domain logic without the database. I never said that OOP was the "only way to achieve robustness", but it sure does a good job.
&gt; That's true, I was a little forceful. I probably should have said that I think doing those things leads to better architecture and maintainability. Don't be shy. You are right. There's no such thing as "modeling your domain in your database". That's almost an oxymoron.
Project Page (?): https://github.com/masquerade-circus/dragonbinder *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
It seems to only trigger when clicked from the /r/javascript frontpage. I've restored it (temporarily) for you to test.
&gt; I just assumed that your objection to modeling your business domain was based on some need for the new hotness that's so prevalent in the JavaScript community, but I assumed wrong. ...it really makes you seem like your knowledge about programming concepts is extremely outdated. Like, even in Java circles the reliance on OOP concepts is generally limited nowadays. "New hotness" like robust type systems is like late 80s. &gt; It was more a question about how you would model those things and still have consistency in your domain, being able to test your domain logic without the database. The repositories (which _don't_ have to be ORMs, or even similar, ffs) can be tested with mocks, no problem. And it's the database that enforces consistency. I mean, even MySQL (which was "the new hotness" pushing the ideas you write about back around 2 decades ago, trying to justify its limited feature set compared to _everything_) has tools geared towards it nowadays. &gt; I never said that OOP was the "only way to achieve robustness", but it sure does a good job. This is questionable. I'm a moderate in here, I'm going to say robust design with OOP is possible, but personally I just take a few parts of it, and relentlessly bully anyone even _mentioning_ inheritance. And the functional folk seem to have a _way_ better track record than OOP folk.
I get it when clicking the link on firefox.
Especially algorithms compression/decompression. Move this to webassembly and web workers.
Project repo: [https://github.com/masquerade-circus/dragonbinder](https://github.com/masquerade-circus/dragonbinder)
Very interesting. Nice job.
&gt; TLDR: We need to use a #hashtag for private properties because the alternative of using standard property accesses would create unexpected behavior and result in huge performance problems. I don’t understand the unexpected behavior and performance arguments in light of the existence of WASM. JS is a loose, scripting language for doing things in a reasonable, but not particularly fast time with extra care given to development when complexity happens or dependencies are used. If you want very fast, very static code, why not use WASM (or Emscripten for backwards compatibility)?
Source? I've never heard him say something that prioritizes language knowledge over using the language well.
I got that message when clicking the link on FF mobile.
&gt; . However, in most applications you want to work with nested data and a lot of relations and an ORM can be a helpful tool. No, it adds resource costs and ultimately to the time it will take to get your data back from each call. Querying via an ORM (or SQL for that matter) from an outside application is taken as ad-hoc in most RDBMS. If people actually took the time to correctly architect their software solutions, and put database calls in a stored procedure or perhaps actually writing a Data Abstraction Layer/Data API - the RDBMS SQL Engine will cache the execution plan for these stored procedures and other programmable objects, meaning it doesn't have to waste resources redetermining the plan each time it's called for your application. ORMs are there for rapid prototyping. Any long term querying from the database should correctly have a "Separation of Concerns" and live in the database itself. * It's more performant * It's not using a specific toolchain, and therefore will be universal to any new member coming into the team. * It provides a true Separation of Concerns. * If the company or product you've developed and becomes successful, and hires a database team, it allows them actually work on the code and not go rummaging through your app code to fix your shitty SQL.
We do use it. Sometimes it's explicit and obvious. But often it's done in a way that you wouldn't recognize it. If you have a factory that creates car objects in JS, a you pass that function to another function that needs to create cars, you are using dependency injection. &amp;#x200B; `function myCarFactory () {` `return {` `wheels: 'four of them',` `engine 'vroom'` `};` `}` &amp;#x200B; `function needsCars (someCarFactory) {` `// Does some other stuff first...` `newCar = someCarFactory();` `// etc.` `}` `needsCars(myCarFactory);` &amp;#x200B; Compare the above style to the below, which does not use dependency injection: &amp;#x200B; `function needsCars () {` `// Does some other stuff first...` &amp;#x200B; `// The way of getting new cars is hard-coded,` `// and cannot be changed without changing this` `// function.` `newCar = myCarFactory();` &amp;#x200B; `// etc.` `}` &amp;#x200B; I bet you see this all the time in JS. I do. So maybe it's not full blown dependency injection with a container. But it achieves the same goal: decouple objects to the extent that no client code has to be changed simply because an object it depends on needs to be changed to a different one. &amp;#x200B; You should note that as with all patterns, there are pros and cons to using the pattern. More reading here: [https://en.wikipedia.org/wiki/Dependency\_injection](https://en.wikipedia.org/wiki/Dependency_injection)
I still using Sass mainly for selectors nesting. Unfortunately that feature doesn't present yet in CSS
Safari does not provide high enough resolution timers to support benchmarking. Using Chrome on Android... Might rethink how you're doing browser detection here.
The link still works for me, even on the /r/javascript frontpage. It might be a silly question, but do you know how I can check if my browser is sending a referrer or not?
The link works for me in Firefox Quantum and Safari using macOS High Sierra 10.13.6. No message.
Hmm... Reddit creates a link like this: &amp;#x200B; \`\`\` &lt;a ... href="[https://jamie.build/javascripts-new-private-class-fields.html](https://jamie.build/javascripts-new-private-class-fields.html)" rel="noopener noreferrer" target="\_blank"&gt; \`\`\` &amp;#x200B; Note the "noreferrer" attribute. It seems to be supported in the browsers I'm using, what about yours? &amp;#x200B; [https://caniuse.com/#feat=rel-noreferrer](https://caniuse.com/#feat=rel-noreferrer)
You made an error in your Full Adder diagram, C1 output should be 0. It doesn't affect the end result though.
As I said, using Chrome. Mine lacks the `noreferrer` though: &lt;a class="title may-blank loggedin " data-event-action="title" href="https://jamie.build/javascripts-new-private-class-fields.html" tabindex="1" rel="nofollow"&gt;JavaScript's new #private class fields&lt;/a&gt;
Ok that's the issue. Somehow I get "noreferrer", maybe cause it's Apple? Go figure... Anyway, here's the reproducible example: [https://giphy.com/gifs/Jn3YkWtsyz8x2OYiNn](https://giphy.com/gifs/Jn3YkWtsyz8x2OYiNn) I'll avoid this host next time. Thanks.
https://twitter.com/iamdevloper/status/1117739690658897923?s=21
I encourage folks from this subreddit to take this as a Feedback. I know there's a lot of haters around, but something really wrong should have happened for an author to block every traffic from Reddit.
Thank you, @MarkN_LP. You are right. 1 + 0 should have sum of 1 but carry of 0. Nice catch~ (I will update it)
Nothing is stopping you from writing imperative code in C++
The import system in Python is infuriating, trying to run test? Well the imports are all fucked up now. I have no idea why people like the language it feels clunky and super slow, everything is named differently creating a class instance can be indistinguishable with a function call due to the lack of new keyword. And passing self as a parameter in a class method feels awkward.
WASM almost ends up getting compiled to "ideal state" code quicker than JS (which goes through many more type-profiling tiers), so you have less in the way of warmup cost.
Empty page on mobile. But for those wondering... view-source:https://perf.link/routes/home/index.js
it's slowly getting better though. TypeORM is quite good, sequelize still sucks, but hey- in 2 or 3 majors they will be able to get rid of most of the API cruft they accumulated so far I think.
I'll be honest: I've never tried an ORM in Javascript. However, I've been burned by them so much in other languages that when I discovered Knex (https://knexjs.org/) I never left. The library makes the actual DB work as simple and easy as a non-ORM library can, and you can then organize your DB code however you feel like. In my experience it's a much more maintainable way to build a site than wrapping things in abstraction layers with big costs and little payoff.
I think DI's value comes *a lot* from your testing strategy. If you use say Proxyquire, and only test the externals of your modules, there should be zero need for DI (except in very specific non-test cases). But if you want to test the "private methods" of your module (and whether you do or not is a testing philosophy discussion that goes beyond this post) than DI is a super handy pattern for letting you get your mocks in so you can test stuff properly.
this stupid website does not even work.
Too bad nobody is happy using untranspiled vanilla JavaScript. I seriously doubt any of this will work through source maps, and you still have the problem of stepping into your framework/libraries all the time.
I like IOCs for env specific functionalities &lt;3. LogFileWriter for dev, LogDbWriter for prod - stuff like this 😉
pretty cool :)
Hi /u/world_trip_fam, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/keilyn3d, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
ok
Meanwhile, C# is sitting there shaking its head.
Under "4. Performance"... &gt; Any firewall should provide ... You probably meant _framework_.
Objection is actually built on top of Knex. Where I work, we use Knex for the majority of our microservices and Objection for our data heavy microservices (stuff like analytics/reporting). Knex on its own is pretty great too!
Yes, you'll take a not insignificant hit transitioning between JS and WebAssembly contexts, and you'll need to overcome that overhead in order to see a performance gain.