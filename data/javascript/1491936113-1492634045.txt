After a tip I found out i actually needed to set in just in babelrc and not in webpack. Setting the option inw ebpack alone didn't work. Article was updated! You propably could enable modules again by using another config file or environment variables in babelrc, if you need to.
For what it's worth, I've seen some confusion as to what this library actually entails, so here's a bit more detail. Electron applications consist of two types of process: a main process which manages the lifecycle of the application, and several renderer processes, which display webpages which comprise the application's GUI. While it's fairly common to use React and ReactDOM to build an HTML/CSS/JS interface in the renderer process, react-ionize runs in the main process, managing things like window size/position, menu contents, and application-wide events. In other words, this library is for building the "non-browser" parts of an Electron app using React components.
Very useful, thanks
Yeah, I kinda look at it as a smarter linter. It takes a little while to become accustomed to the semantics of typechecking Javascript (whether using TypeScript or Flow), but I've come to realize that both projects provide a considerable number of tools which allow you to specify "just enough" typing that you get the benefits without needing to adapt your code's structure to appease the typechecker. This was huge for me, because without that power, you end up adapting your code to appease the typechecker, in which case you're basically just writing Java.
Hi /u/AlwaysBCoding, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `Jordan Leigh - YouTube`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [Jordan Leigh - YouTube](/search?q=%28and+site%3A%27youtube.com%27+author%3A%27AlwaysBCoding%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new&amp;syntax=cloudsearch&amp;feature=legacy_search)|10|71%
&gt; VS Code is pretty outstanding and cross platform. yeah I'm just not switching editors. I've been running vim for closing in on 15 years. I can't imagine a day when that is not the case. &gt; Regarding the errors that seem obvious... They may seem obvious in a small to even a medium sized application but might not be so obvious in a large application on a large team. This is true, but in my opinion this function is better served through unit testing, which will tend to catch more critical errors and has benefits in projects of all sizes
You'll need a reference dictionary to compare your string to, for starters. From there, I'd start by incrementally reading the characters of your input string to find matching words in your dictionary. In cases where there are multiple potential matches, keep going along your string until you either can't match any more characters or match all of it correctly. Some input strings might have multiple correct solutions, so you should probably indicate this somehow in your results.
A.K.A. homosubmission.
Except, streams should not be promises, which is a fundamental design flaw with fetch IMHO. Seems basically they were too quick to jump on the promisify stuff bandwagon.
try slim.js, AMA
Sorry for late reply. Just checked above jsfiddle. It still didn't work on my end. It's saying "Uncaught SyntaxError: Unexpected token )" in js console.
React-native/redux/redux-thunk/most things in the react ecosystem. The React ecosystem as a whole tends to favor Flow over TS so it generally makes more sense to lean that way for me. Plenty of examples/etc. Although, if anyone finds themselves in the same boat as me with React/TS there are some great open source repos out there to learn from. https://github.com/palantir/ has a couple nice ones.
Seems like more of a StackOverflow question than a reddit one buddy.
Hi /u/esperespresso, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your work/homework for you.
Hey there, this is the developer of selector.js It definitely started off as a side project to use within a few of my own personal projects. Zepto is definitely the defacto jquery alternative, but I built this project in hopes of creating a supremely micro alternative to jquery using some clever programming tricks, and hopefully it will eventually be faster as well. I will build tests soon, I just set up the project on Github yesterday. It definitely needs tests to generate &amp; manipulate thousands of DOM elements, and a way to compare with jQuery &amp; Zepto.
I really like Mithril. I wrote the same Reddit client in Mithril and React for comparison purposes. (react) http://codepen.io/mackness/pen/RGJmXV (mithril) https://codepen.io/mackness/pen/vXAwAX 
Imo this is completely backwards. Unit testing should be about testing the actual logic of the unit. All the effort javascript devs waste writing tests just to confirm that the right type is being passed around is ludicrous. One of the major selling points of a static typing system is that whole class of tests disappears because they are pointless.
Sorry if I'm being unclear, but there is no reason to write tests about type. If it works, it's working. If you have good tests, success is guaranteed. After that, it's down to documentation to provide developers with info on what objects are like 
Probably depends some on your existing tools. Are you using an IDE and/or compilers now?
That would imply same old thing. I think this is autosubmission.
X-Post referenced from [/r/webdev](http://np.reddit.com/r/webdev) by /u/pimpaa [I've made a set of responsive components for Vue.js based on Bulma, hope it's useful for someone!](http://np.reddit.com/r/webdev/comments/64sj0m/ive_made_a_set_of_responsive_components_for_vuejs/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
Thank you for your help, but I forgot to mention that I am not allowed to use the date method :(
Okay. I figured but you never know 
If you use an IDE, the need to run tests constantly drops by quite a bit. That's the entire point.
provided that the &lt;a&gt; elms come after the &lt;ul&gt;, you could do: document.querySelectorAll("#menu li ul ~ a"); EDIT: if not sufficient, you should loop through all the &lt;a&gt; elms and check if they have the same parent &lt;li&gt; that contains a &lt;ul&gt; element. Messy, but should work.
i like it a lot, to the point where i'm writing all my reusable code libraries in typescript. combining it with alexlur's [rollup plugin](https://github.com/alexlur/rollup-plugin-typescript) has made shipping single-file binaries a breeze. i don't have to worry about pulling in the world whenever i want to install my library :)
thank you! Comments and feedback like this, is very useful for seeing what's going on. I'm beginning to understand why TS is getting so much traction. :bow:
Commenting to check it later :-) Great article btw! 
I'm glad you like it. Split screen, keyboard only editing, CLI access, keyboard shortcuts to navigate directories has far too many benefits. Tests auto run in the background. I never have to touch them. They protect a lot more than the superficial A type system is no substitute for tests. http://literateprogrammer.blogspot.com/2014/10/types-dont-substitute-for-tests.html?m=1
Conversely I find typescript immensely helpful on smaller projects, anywhere from 500 to 10000 LOC. Especially ones with tight deadlines. I can very quickly go from prototyping to rewriting and refactoring with ease and confidence.
What's the point of assembly if it just becomes binary. 
sure! [here](https://github.com/zackschuster/fs-utils) is a fork of fs-utils that adds tests and features if you're looking for something meatier to dive through; otherwise you can thumb through [some of my recent ts libs](https://github.com/zackschuster?utf8=%E2%9C%93&amp;tab=repositories&amp;q=NOT%20ng&amp;type=&amp;language=typescript) to pull ideas (fair warning: some of them don't quite work as advertised, so use your own discretion :) ).
Wow, I didn't realize Vi supported asynchronous task runners! /s
nice!
Yeah, I don't see how Flow can catch up either, unless Microsoft decides to do something really stupid (which is always a possibility).
Mithril 0.2 is sooo last year, but Mithril 1.0 is 2017. 
If you are using babel-preset-react to transpile JSX you can use flow out of the box.
Flow's focus seems more narrow, which is good and bad. TS definitely promotes a certain paradigm -- that is C# style object oriented programming. It's very good at doing that, so it's my hope that Flow could stick out by being a little more opinionated and maybe developing a different paradigmatic style, e.g. favoring functional programming. That being said, functional programming is already totally possible in TS, and looking from the issue tracker, it looks like TS is going to receive higher-kinded types -- the "killer feature" of functional programming -- long before Flow does.
Awesome, and thank you.
Not sure about Flow, but for Typescript you can probably just add it to your existing build system. 
You can get this pretty solidly using the DOM methods, but its going to take a couple of steps: 1. Assign this to a reference `document.getElementById("menu").getElementsByTagName("li")` 2. You will need to create a new array. 3. Loop through the node list and push any node that matches `item[x].getElementsByTagName("ul").length &gt; 0` into your recently created array. 4. Loop through the new array and check that each item has an element named *a* in its child nodes. I am think the bloated DOM method way is still exponentially faster than the querySelector or jQuery way. Why would you want to do this though? My first impression when I see so many steps of clueless guessing at a page structure is that you probably don't know what you are doing. It would be faster, more reliable, and make for substantially less code if you knew where you needed to go and simply walked the DOM to get there.
fyi (neo)vim can do all of that with plugins. Not sure why op isn't using them, Vim can be a very powerful IDE. 
What do you mean by header files? Typescript doesn't have them. 
This and the recent Slack article make me feel like TypeScript is VHS and Flowtype is Betamax. What's the next frontier ReasonML vs Purescript?
it's simple and clean 
In TypeScript 2.1, we allowed you to import *anything* without warnings as long as * `noImplicitAny` isn't turned on * You have something of that name in your `node_modules` folder See the section [on this blog post](https://blogs.msdn.microsoft.com/typescript/2016/12/07/announcing-typescript-2-1/) titled "Easier Imports".
They're not needed as of TypeScript 2.1. See the section [on this blog post](https://blogs.msdn.microsoft.com/typescript/2016/12/07/announcing-typescript-2-1/) titled "Easier Imports".
Is there really no way to avoid this? Not by changing your upstream process or anything? For obvious reasons, this isn't a problem which necessarily​ even has a solution. \#susanalbumparty
Man, I still never said there's no testing. Stop saying that.
I think they're still needed... just this makes it easier than it used to be :)
Thanks Tom. So what's the roadmap for using glimmer components in our ember apps :)?
+1 for axios, just started using the library a few months ago. It's solid.
Try https://www.npmjs.com/package/promise-seq
Elm for ui
Both have optional typing, so it doesn't really matter which.
Thanks, that was the problem. I solved thanks you! I've also changed "podcast" into "count" Thanks a lot
Yes, it is true. I've just changed "podcast" into "count". It was a bad naming idea :-)
Thanks a lot: i've solved :-)
TypeScript is just perfect. You get the JavaScript ecosystem with its millions of open source modules, the JavaScript flexibility, the BEST developer experience, a higher level of productivity and the possibility of refactoring even when not enough unit tests are available. Because let's face it not every organization out there has 100% test coverage...
slack is terrible though, just saying. I don't think it is because of typescript however.
Where I work, much of our code is now TypeScript (near about 60%). It's a god-send, and the benefits far outweigh the cons. Microsoft has hit this one out of the park, and that buried CoffeeScript can now rest in peace (or haunt legacy hellholes).
I've always had a bit of frustration with managing state in the main process, so this is really welcoming to see. Managing things with react components and in JSX would go along way to smoothing things. Now if only this works with electron-hot-loader for a completely build-less but still with HMR setup... this would be incredible!
Homepage: https://facebook.github.io/reason/ Reason/React examples: https://github.com/chenglou/reason-react-example
typescript is dippen dots 
I've had a look at ngrx - it seems very interesting. Do you have any simple examples of code setup this way that I could look at? It sounds a lot like what I would like to achieve.
Sometimes I kinda wish it's HD-DVD.
Well for what I discovered lurking through github - large popular applications often use TypeScript underneath to keep things in place. Really, I was shocked discovering that many huge libraries I use has TypeScript sources.
Good. One red flag down.
As an aside, ReasonML is the language that powers Flow. I'm keeping my eye on it - Sean Grove has said he'd like ReasonML's compiler to be similar to Elm's... which would be absolutely awesome.
I am confused. This requires you to use the command line? Could you please provide an example of this on jsfiddle or provide steps how to implement this? I'd rather not use the command line if possible. I would rather the user enter their URL in a textbox and then pressing submit will automatically create a thumbnail image of a specific size that is clickable and will take users to the website. 
The article itself says it's a bit outdated. Is that true?
EJS
This bin needs a pro account
most likely you can use the safari debugger from a connected itunes computer. That said, if it's hard to use a debugger, dont use it to learn. Especially javascript which has excellent tools like the chrome dev tools.
So on their create a template page they show how in their syntax how to handle rendering an array of data. What I would recommend doing is grouping your images into sets of arrays that would appear in the same locations (e.g. maybe something like "topImages, bodyImages, footerImages, etc); then in each of those locations in your template just iterate over the array like they show in the example (here: http://www.embeddedjs.com/getting_started.html) - that way if those images don't exist, it simply doesn't add the HTML to the page.
Thank you!
Yeah, there's a few php shells around it, but best ask on r/phphelp
**Here's a sneak peek of [/r/PHPhelp](https://np.reddit.com/r/PHPhelp) using the [top posts](https://np.reddit.com/r/PHPhelp/top/?sort=top&amp;t=year) of the year!** \#1: [Is it necessary to use a PHP framework?](https://np.reddit.com/r/PHPhelp/comments/51g86f/is_it_necessary_to_use_a_php_framework/) \#2: [Why install Vagrant instead of XAMPP for better development purpose?](https://np.reddit.com/r/PHPhelp/comments/4el14y/why_install_vagrant_instead_of_xampp_for_better/) \#3: [Can someone explain what this php malware does?](https://np.reddit.com/r/PHPhelp/comments/5phn6r/can_someone_explain_what_this_php_malware_does/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
Typescript and async await help a lot. You may also want to take a look at Go, it's a really cool language. 
You can solve JavaScript coding challenges on [Coderbyte](https://coderbyte.com/), and there are also some more quiz-style challenges [here](https://coderbyte.com/course/philosophers-guide-to-coding/quiz/javascript-basics-1:0).
I have a visceral reaction every time I see `class` in js
This feels like such an uneducated comment.
C is a fairly simple language, though. It's not that bad as a first language. Unfortunately, being simple does not mean that it's easy to use.
It does not seem like anything is being transpiled. The reason for this might be that the presets are not used. Maybe use the babel property in your package.json to define the babel configuration. I made the experience that the query parameter is very difficult to use. 
Doesn't seems to work either =(
Good idea since C and JavaScript share the same package manager and execution environment they practically are the same thing. I personally learned Geology first, followed by mining, before learning semiconductor design before finely delving into assembly. 
Seems like you are using webpack v2. Loaders is now called differently, maybe have a look at the migration guide or generally the webpack documentation.
Re: 1, yes, but that's *all* the difference. Re: 2, JS is the most egregious example of horrifying mandatory tooling I can think of, with the possible exception of Makefiles. `tsc` is an extremely simple compiler in both relative and absolute terms.
C is great as a first language as it gives you an excellent foundation to understand how software works. But you can gain that knowledge in the future. Starting off with something very high level and abstract like Typescript is fine as long you're ready to take the red pill and go down the rabbit hole. It's like Java devs that don't even understand how a garbage collector works. You can get by being ignorant of the GC, but you'll never be great.
how is `render()` not exactly the same as changing the dom?
Added rules under module, changed some thingies and still the same issue. Any other ideas? I'm willing to try everything for the glory of IE
Well ... &gt; but none of the things I mentioned are features of an ide imo Split screen? CLI? Keyboard only controls? Auto running tests? I use all that on daily basis. Vi is no longer unique, deal with it. Only thing that stays with it is the non-standard UI ... I didn't like TS either but it sure seems to have benefits in large projects. Actually working on large projects without IDE seems like willingly tying your hands ... Maybe you are working totally alone, but in teams your attitude seems very unhelpful.
&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition. ES6 classes don't mimic prototype inheritance, they mimic classic inheritance, while they're actually syntax sugar about defining an object constructor and prototype. Just a side note. Now... Kyle Simpson's statement either needs to be clarified, or it doesn't connect logically. Using ES6 classes doesn't mean you use inheritance in place of object composition. I use ES6 classes, more specifically TypeScript classes, which are a superset of ES6 classes (and compile to ES6 classes when the target is ES6), but I barely if ever use inheritance. I favor object composition. ES6 removes unnecessary boilerplate in defining a constructor+prototype. Less noise means a more productive programmer: code gets faster to write, and much more importantly - easier to read. And constructor+prototype is still the preferred approach for building most of your objects, and the highest performing approach for most mainstream JS engines, like V8. --- BTW, when discussing these matters, there's a *very high likelihood* that we might be talking past each other because we define the terms we use differently (prototype inheritance, object composition, etc.). So when you quote someone, it's best to provide a link to the source, so we can have the proper context.
Stop with the blanket statements. Like everything else, it has its place 
For a peek into what they're replacing it with, see [How V8 measures real-world performance](https://v8project.blogspot.de/2016/12/how-v8-measures-real-world-performance.html). Looks like they've developed tools for recording and replaying page loads, and they're using those in tandem with profiling tools to see what parts of the JS VM are bottlenecking real-world workloads.
I use classes for things of which I need instances. I don't use it for everything. This isn't Java where everything must be inside some class. I also use FP stuff when it's convenient. Being able to freely mix and match different paradigms is a great advantage.
My impression is that a vocal minority are against them, but that the majority of devs use them. I personally use them. I also haven't heard a satisfying argument against them. Kyle, for example, seems to be against them because they're not like Java classes. But so what? That's true of just about every feature in JavaScript. JavaScript's objects and functions, for example, don't behave like Java's objects and functions either. That's not a reason to avoid them. Others say that inheritance is bad, therefore "extends" is bad, therefore "class" is bad. But 1) class != extends. We can and do use classes without inheritance. And 2) the same people who decry "extends" because it's inheritance will giddily use `Object.create` or `Object.setPrototypeOf` or `Object.assign`. They seem to think inheritance is bad only when it's spelled "extends".
I don't, the repo is private. But I can try to give you a small taste. So I have very large data sets that are handled by an api. It does sorting, filtering, etc on the data itself. I don't do that locally. I ended up creating a simple data table that basically just has events defined for the actions instead of implementing them internally. So if a column header is clicked I just fire the event. What I do handle locally is showing or hiding of individual columns of the data set; basically a columns filter. So the data table itself just receives a model that looks like this: export interface DataTable { selectionMethod: string; selection: any[]; columns: Column[]; columnsId: string; } I'm not going to get too much into the table, but it's pretty simple and looks something like this (I've simplified it some for this example): @Component({ selector: 'data-table', template: ` &lt;table&gt; &lt;thead class="table-header"&gt; &lt;tr class="table-header-row"&gt; &lt;th *ngFor="let column of model.columns" (click)="onHeaderCellClicked($event,column)"&gt; &lt;span&gt;{{column.header}}&lt;/span&gt; &lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody class="table-body"&gt; &lt;tr class="table-body-row" *ngFor="let row of rows; let r=index" (click)="onRowClicked($event,r)"&gt; &lt;td *ngFor="let column of model.columns"&gt; &lt;span&gt;{{getValueByPath(row,column)}}&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; `, changeDetection: ChangeDetectionStrategy.OnPush }) export class TableComponent { @Input() model: DataTable; @Input() rows: any[]; @Output() headerCellClicked = new EventEmitter&lt;Column&gt;(); @Output() selectionChanged = new EventEmitter&lt;any[]&gt;(); private onHeaderCellClicked(e: MouseEvent, column: Column) { this.headerCellClicked.emit(column); } private onRowClicked(e: MouseEvent, r: number) { this.modifySelection(e, r); this.selectionChanged.emit(this.getSelectedData()); } } Now, for reasons that are too complex to get deeply into I decided that I needed to split up the storing of the columns arrays themselves and the rest of the data table models inside my ngrx store. The short version is the columns arrays are useful in other places as well so I didn't want to be retrieving a data table model when all I wanted was the column definitions in other locations. But I still wanted to deliver the entire data table model as one unit to the data table component. So I created a service that takes care of retrieving this data for me but also allows me to hide and show the individual columns when they are filtered in and out by a completely different component. So, again an abridged version, the service looks something like this: @Injectable() export class DataTableService { constructor(private store: Store&lt;AppStoreModel&gt;) { } /** * Get the observable of the data table from the store. */ getDataTable$(id: string) { return this.store.select(getTable(id)); } /** * Get the observable of the entire columns array. */ getColumns$(id:string){ return this.store.select(getAllColumns(id)); } /** * Get the observable of the filtered columns array. */ getFilteredColumns$(id:string){ return this.store.select(getFilteredColumns(id)); } /** * Combine the table and filtered columns into a single new table model. */ getFilteredTable$(tableId: string, columnId: string) { return Observable.combineLatest( this.getDataTable$(tableId), this.getFilteredColumns$(columnId), (table: DataTable, columns: Column[]) =&gt;{ return Object.assign({},table, {columns: columns});; } ); } /** * Filter a column out from the list of columns. */ filterColumn(id: string, column: Column) { this.store.dispatch(columnsActions.column.filterItem(id,column)); } /** * Unfilter a column from the list of columns. */ unfilterColumn(id: string, column: Column) { this.store.dispatch(columnsActions.column.unfilterItem(id,column)); } /** * Set the table sorting to the specified column and set the * 'sort' key in the query parameters to the columns headerkey. * @param column the column to sort on */ sortOnColumn(id:string, column: Column) { this.store.dispatch( tablesActions.table.setTableSort({ id: id, column: column })); } } And now when I want to use a specific implementation of a data table I just tie the service's methods and store slices to the data table component's inputs and outputs: @Component({ template: ` &lt;data-table [model]="dtServ.table$ | async" [rows]="dataServ.data$ | async" (headerCellClicked)="dtServ.sortOnColumn($event)"&gt; &lt;/data-table&gt; `, }) export class ASpecificTableComponent { constructor( private dtServ: DataTableService, private dataServ: DataService) { } ngOnInit() { // initialize the data table service here by // setting it up with the right ids to use // for the store calls. Not really interesting // and too specific to my implementation to // bother showing. } } I know a glossed over a decent amount there. Sorry. As I said, the actual code is closed. But I hope that gives some kind of idea as to what I'm doing.
Are you doing something with pathfinding?
Isn't that object aggregation?
Aggregation and composition are nearly the same thing. The only distinction is whether the whole owns its part. https://en.wikipedia.org/wiki/Object_composition#Aggregation
I am confused as to how to use your code in github. Can you provide steps?
Class was added in es2015 / es6.
Hi /u/SavishSalacious, in the future, if you wish to share a link, please use the "Submit a new link" option. Then, you can add any extra text as a comment. Thank you!
&gt; How do you implement object composition in TypeScript? Remember when I said "there's a very high likelihood that we might be talking past each other because we define the terms we use differently" :-) There are some poor articles/videos in the JS world that describe object composition incorrectly, and unfortunately many fell victim to these bad sources. What /u/MoTTs_/ says about composition is correct, so basically it's about an object having other objects as properties, in a nutshell. The saying "composition over inheritance" talks about *that* kind of composition. Not mixins or any other sort of *grafting* of properties and methods of objects onto other objects (or their prototypes).
&gt; Using ES6 classes doesn't mean you use inheritance in place of object composition. Right. The two are not mutually exclusive.
Are you asking why that happens? JavaScript uses IEEE 754 binary floating point as its number type. That representation can only exactly represent integers in the range [-2^(53), 2^(53)]. The integer in your title is outside of that range, so it cannot be represented exactly, and a nearby value that is representable must be used instead. It has nothing whatsoever to do with `console.log()`. The conversion happens as soon as you type the number in source code. It's the same exact reason that when you type 0.1 in source code you don't get 0.1, but a slightly different value which is nearby, because IEEE754 also cannot represent 0.1 exactly. 
Pathfinding? Oh lordy, you severely overestimate my abilities lol. I was able to get my code working though. Thanks for your input!
I got it working, thank you for pointing me in the right direction!
As best as I could understand it at the time, yes. It would fail to compile the Typescript files because it couldn't find the .d files.
Yes. Write a loop that uses string.indexOf and updates the fromIndex on each iteration. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)
Well you can run the server with node index.js # runs on port 30999 by default and then use it like "localhost:30999/?https://google.com" etc. I host the same server for demo purposes at http://qs.jin.fi Examples: http://qs.jin.fi/?url=https://www.youtube.com/ http://qs.jin.fi/?url=http://google.com http://qs.jin.fi/?url=https://twitter.com/pewdiepie It's just a very simple demo app to give you an idea of what you could do.
Slack really does have some issues that make its "rise to fame" a bit surprising. There was a lot of clever marketing and word of mouth at the start, and Slack was way better than, say HipChat or Jabber (typical business chat systems). While all this was going on, however, the applications suffered massive performance issues, crashes, weird behavior like not signing in on start (this still happens, partly because of the "idle" detection algorithm that they won't fix), file upload issues, lack of on-site server offerings, and various usability issues. If I recall correctly, they even reimplemented the engine behind the applications _twice_ because the web-tech behind it was falling apart. Now, I won't claim to be a tome of knowledge regarding their history, the above are just some problematic issues I recall while using Slack. I still run into different issues from time to time, some of which have been around for a long time. /u/nerf_herd could have articulated better, but that doesn't make his experience or opinion invalid.
&gt; I can't use Bash on Windows Sure you can. Native bash: https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/ Git bash (the best "emulated" Linux env I've used on Windows - there are others): https://git-scm.com/downloads
I guess I should've clarified. I cannot use Bash with my current version of Windows because I am using a university computer that seems to prevent Windows updates.
I solved it. As @Herku said, the presets were not used and I couldn't find why. The issue was that I had an include setting inside the rules object. That include was messing with my configuration (I believe it was conflicting with my resolve modules). So I removed and it started using the presets. Now, the only thing I need to figure out, it's why it was messing with my configuration! Thank you
 &gt; With that logic, why start with JS when you should really start with ~~C Assembly Machine code~~ magnetized needles on a disk platter to truly understand the fundamentals of software engineering? Even better.
That was apart of my plan, but I'm having some issues with looking at an RSS file on another server and iterating it. Apparently privacy is an issue or something (joking). My other thought was to just manually download the rss file and upload it to the webpage so the script can iterate and return the value of a designated string that way. I hope I'm making sense.
I've never run into that while using gulp. I transitioned off of gulp a while ago so I'm not really sure where your issue lies but does gulp have a reference to the node modules directory your using? That's where the d.ts files should be for libraries.
My impression follows along with what I've seen so far...the people who don't use classes are rather vocal about it, but the majority of the people don't really seem to care that much one way or the other. They just do what works for them. I don't use the class keyword and have mandated that no one on any of my projects use it. But this isn't an ES6 thing; I also don't use constructor functions or the new keyword (except as necessary to interface with third-party libraries that require it). Once you 1) accept composition over inheritance, and 2) realize that prototypal "inheritance" is really just composition, it's not too big a deal to do it. It's not meant to be a crusade or anything. I just find that using pure objects, without any of my functions pretending to be something they're not, makes for more straightforward and simpler code. I find that newer programmers have an easier time grasping Object.create because you see everything that's going on, rather than depending on behind-the-scenes prototype chaining and this binding and all that. I like the flexibility that I get from being able to declare my own prototypes. It's more a practical stance than an ideological one. I particularly dislike ES6 classes because they force the use of 'new' where there had always been a choice, but that's probably less of a practical matter and just one that irks instead. Nothing against classes, I absolutely use them in TypeScript, but that's a language where "class" and "type" actually mean something.
"Virtual DOM", but yes. `render` merely returns a tree of descriptive objects - it does not modify the DOM directly itself.
A previous [talk](https://www.youtube.com/watch?v=GivjumRiZ8c) on headless chrome.
Of course, ES6 _is_ conventional javascript. :)
&gt; for a few seconds Eh, downloading 2.3MB on a mobile layout isn't really "doing it right"...
Reads well enough to me.. a) A function called `renderTab` sucks in my opinion. Either make a component or inline this logic.. otherwise you jump around on the page for no benefit. b) having tons of conditional logic anywhere sucks, but at the end of the day.. something somewhere needs to decide what to render. I don't see how this conditional code is worse than a ton of `if else`.. it's just syntax... the logic itself is the hard part to grok. c) it's terse.. what's `T`? The only tough part about this code is knowing what the functions do, but that's the same with any library (lodash..). Once you know what the functions do you should be able to read this quickly enough. edit: also.. `dispatch` is just being threaded through. if the tab content needs to dispatch something maybe they should get dispatch themselves, though not a big deal. double edit: dude should follow the code style of the rest of the project... that being said... maybe his code is better than yours and you guys should learn + compromise.
Ehh until I don't need babel or equivalent to use it on the web, It's pretty unconventional.
Also, re. `if else` being no different from the the functional set up logic wise, I agree but surely it's important that other team members can read the code and work with it without having to read up on any more documentation that's necessary? I mean if you're confident you have developers skilled enough to be able to blaze through this or the time to lend the devs that don't know so they can inform themselves, I can see this being perfectly reasonable. Also, any ideas on performance of this vs. vanilla js? 
Chrome, Firefox, Edge, Safari have all supported it for a while now.
Not all of it, ex. Imports.
Makes it hard to evaluate this when the code is accessing properties outside of the scope of the renderTab function (e.g. this.props, this.state is referring to a parent scope, and cond is a function outside of the scope, etc =&gt; which I assume means this is a function property of a class decorated by React considering the JSX utilized as well). In general, it is a bad practice to wrap functions into un-executed return statements of a react component for performance issues (e.g. it makes it hard for the rendering system to determine if children/etc should be updated without completely re-running the referenced embedded code) and I would bet that is what this piece of code is used for. All that said, always good to write as few of lines as possible as long as it is semantic, but this code in general seems like with a bigger picture provided that a lot of simplifications in the model could be introduced.
&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition. Kyle Simpson likes to generate controversy to drive page views, and has a persistent habit of making up new terms. The combination makes many of his posts entirely useless, and I would recommend not paying too much attention to him on this subject. It would be more accurate to say Simpson strongly argues against using ES6 classes because he has an irrational dislike of the keyword, and argues in favor instead of using traditional inheritance. He does *not* use object composition; he just likes using the word to describe traditional inheritance. I think: 1. He is far too in favour of traditional inheritance 2. He is far too opposed to the `class` keyword 3. That the combination of those two things is really bizarre. &gt; AirBNB's JS styleguide states to always use classes when dealing with inheritance. Yes, absolutely. But favour composition (*real* composition, not what Kyle calls composition) over inheritance, avoid long inheritance chains, and follow SOLID principles.
I'm like 99% certain the performance is negligible though I'm not sure for which method. Maybe this is faster, maybe not. For instance, many lodash functions are faster than native ones. Of course the team's ability is paramount.. but then we're no longer doing an objective code review for code's sake. And sure, you can go totally overboard with fancy code, but this doesn't look like it to me.
All of your assumptions are right. I agree on it being hard to see what scope is accessed, definitely caught me out a couple of times. 
I see. thanks for your input, it's been really informative! 
&gt; So what if I told you that in certain situations, async/await will run synchronously? You keep using that word. I do not think it means what you think it means.
&gt; *Synchronous execution*: Waiting for something to finish before moving on I'd say that if you have three functions taking 1000 ms each and executing all three takes 3000 ms total, that's synchronous execution. Wouldn't you?
Decorators are proposed for javascript. Not sure what stage they are at currently. But you can turn off decorator support in the typescript config. This is no different from multiple constructs that have support in babel but aren't actually in javascript. As for the private thing yeah javascript doesn't actually have private. Which is why the typescript implementation doesn't stop you from changing the field through a string accessor. Because currently it is literally impossible to stop so they don't even try. You should consider the private keyword to being the equivalent of using an _variable inside a js class. Technically anyone can change it, but you shouldn't because it's private. There just is no enforcement at the runtime level. The nice thing about typescript is that the tooling will complain if you try to change a member marked private without a string accessor. You get literally no warning or anything if you change a _privateMember in traditional javascript. So again, typescript is a super set and it does not have the same problems coffeescript has. Every line of javascript is also valid typescript unless you get into proposed features that haven't made it into the standard yet. There is no diverging from javascript. If / when javascript gets private members typescript will change their implementation to follow suit. The same thing happened with modules where typescript had a module implementation before the js one was published. Once the js implementation was published typescript changed their system to match the js one.
Decorators are proposed. Class fields are proposed. [*Lots*](https://github.com/tc39/proposals) of things are proposed. That doesn't make them part of JavaScript. The claim in the article is that TypeScript is just JavaScript + types, and that's demonstrably untrue, as evidenced by the fact that TypeScript includes class fields, which are not a part of JavaScript. Even if you want to claim that proposals *are* part of JavaScript - which they are not - then TypeScript isn't a superset of JavaScript because it doesn't support most of the other proposals.
For personal project I don't care either. I still use babel for those since I care about the latest features like object rest/spread and class variables.
I'd call it sequential. It would be synchronous if they were blocking, but they're not. The async function is, itself, synchronous, at least in the fact that it synchronously returns a promise, but its contents and their completion and the ultimate value resolution of the async function is asynchronous, no matter how you arrange your promises and awaits within. The changes made to the still-asynchronous async function in the post has moved it from being sequential to concurrent, which is usually more desirable assuming none of the tasks have any dependencies in the results of any of the other tasks. The same result could be achieved by returning a promise all of all the requests (not even needing the overhead of the async function in this particular case).
Yes, when I want to use custom objects, I exercise es6 classes. But, I do this knowing that it's just syntactical sugar. And also knowing prototypal inheritance, so that when something breaks or I need to debug, I actually can. There are many appropriate times to embrace syntax sugar. It's ok. Just know how it works under the covers.
&gt; That's a private module variable, not a private class member. It servers the same end function. Modules go hand in hand with ES6 classes. If you are using one and not the other, I would argue you are doing it wrong. &gt; at which point you aren't really writing ES6 classes at all - you're writing verbose ES5 classes ES6 classes are just syntactic sugar for ES5 classes. Not sure what you are trying to say here. The whole argument for ES6 classes and imports is that it's a more simple syntax and doesn't require a bunch of AMD/require/etc boilerplate to make it modular.
&gt; Apparently privacy is an issue or something (joking). Think about webpages could request and read any file via XHR from any domain. XHR is sending cookies and that could leak private data and could trigger account deletions and other bad stuff. --------- **You have to download/proxy the file with your own server/domain to read it by javascript on your page.** Be carefull on that!
imports aren't in es6.
Can't wait to get rid of phantomjs from my integration tests. Shit's buggy as hell.
I'm not confused about what superset means. Rather, the article makes a claim about what *kind* of superset TypeScript is, namely, that it only adds types. I'm pointing out that this is not true. Yes, of course it can compile its non-type syntax additions to JavaScript. So could CoffeeScript. That doesn't mean it doesn't have syntax additions.
I think it's fair to say that classes have never been a part of JS in the conventional sense. However many attempts have been made to shoehorn classes in, with EmberJS being one, and TS being another. Prototypal inheritance has always been awkward, and making JS conventionally class based using PI has been even more awkward and embarrassing. I'm sure TS won't be the last library to push the OOP agenda. Nevertheless the original point was that I see the JS community diverging between OOP and functional. I come from an OOP background but moved toward functional in the past few years. From a personal development perspective it's necessary to be fluent in both. As a senior developer I attempt to teach my less senior coworkers both, because at the end of the day whether we choose OOP or functional, we achieve the same outcome.
&gt; It servers the same end function. Modules go hand in hand with ES6 classes. If you are using one and not the other, I would argue you are doing it wrong. let privateVar = 'This is private.' export default class { myFunction () { return privateVar } mutate(newVal) { privateVar = newVal } } All instances share *privateVar*, which is not useful when encapsulating internal variables in the instance.
OK then technically your assertion that the article is wrong and that typescript isn't literally *only* javascript with types is true. Seems overly nitpicky and counter productive to me but whatever.
throw whatever spec you want at me that doesn't change the fact that the spec isn't complete
k? You said it wasn't in es6, but they are, the browsers just haven't implemented that part of es6 yet. What about that exactly are you arguing against?
I'm using ruby :(
Most of the config utilities I've seen especially nconf apply defaults on top of the config itself whereas Cz applies all `config.set()` changes on top of the defaults. This allows defaults to be set anywhere in the application and at any time and still work as expected.
I never said that his experience or opinion are invalid, nor do I deny that the Slack desktop app has issues. However, the post is about how TypeScript is utilized at Slack to make the development process easier, and has nothing to do with any run time issues. So bringing up the fact that the app is terrible when it has no relevance makes it come off as though he has no idea what he is talking about. I guess I could have put my comment in a more polite way as well, and I will definitely try to keep that in mind when commenting in the future.
I see a purpose for es6 classes, but if you're not using extends, the primary reason is just performance, right? According to [this js perf](https://jsperf.com/obj-create-vs-new/4) (at least in my browser), plain function with new is ~3.5 times faster. However, [this jsperf I just made](https://jsperf.com/object-create-vs-es6-class/1) which uses native classes vs. object.create vs. babel compiled class [using the repl](https://babeljs.io/repl/) shows that they are all essentially the same speed (babel is actually the slowest by a hair, object.create is the fastest by a hair). That's chrome in windows 7, so maybe it's different in other environments, but I don't see that being any faster than object.create if you are relying on babel anyways. Plus I don't really see a large benefit to using classes over plain objects unless you are planning on using `extends`. If anything it seems to be purely stylistic if you are using `class`. I'd love to see more data on performance though, my sample size of 1 isn't great. 
Slowly trying to kill out the Java world for general purpose computing.
This code is not synchronous. It doesn't block the main event loop.
I can't pretend to understand it, but you can do essentially the same thing by doing `createElement` calls in react. Jsx is only there because it's a lot easier to read, but it's not necessary. 
&gt; Kyle Simpson strongly reasons against using ES6 classes as they simply ''mimic'' prototype inheritance, in favor of object composition. OP, you mixed up the terms from the chapter. Your question should read: &gt; Kyle Simpson strongly reasons against using ES6 classes as they simply mimic classical inheritance, in favor of behavior delegation. Kyle is not against "prototype inheritance", he just thinks it needs to be renamed to "behavior delegation" because "inheritance" implies copies of an object when nothing is being copied. Object composition is something else entirely, and he only gives an example of that under the section "parasitic inheritance" in chapter 4. 
Actually that's not how it works in practise and there's a handful of issues open about that. If you set defaults anywhere they're treated as overrides and replace the current config meaning if for example you load a config file and then set defaults they're not treated as default values which most people would expect them to. 
i am going to PM you 
I personally prefer plain objects and methods (which are easy to extend using `Object.create`), but anyone who is adamantly against `new` or `class` is definitely just sitting on a JS high horse. They do the same thing and cleaner code is certainly a perfectly acceptable pursuit.
I really wish they'd stop advocating Metal rather than Vulkan. It feels like NIH
Shadow DOM is something entirely different. Virtual DOM is the name of the game here.
It does even have es5 methods. Super annoying. 
Does that have a karma launcher for Linux?
&gt; I currently work at a company that is 100% functional: they don't allow any classes at all in the code Using classes or not has no bearing whatsoever on whether your code is functional. 
Elm's compiler is quite verbose and friendly and points out suggestions about why your code might not be working. If you follow anything Elm related on twitter is always comments from first time users about how friendly and helpful the compiler's messages are.
Any bets on which version they discontinue this in? They seem to have a bad habit of creating developer/power-user tools and then ditching them later on, or replacing them with a worse thing.
I don't doubt this is true, but could you list some examples? I can't think of any at the moment.
Just saw https://www.npmjs.com/package/react-tippy. It works really good
Does anyone have experience with any Java solution (including Selenium)? 
I don't know, this one is huge, and they have a history of promoting integration test tools. I hope you're wrong, in the friendliest manner ;-)
https://github.com/bokuweb/karma-nightmare That might work.
It's an ES7 feature and only Safari Technology Preview supports it right now: http://kangax.github.io/compat-table/esnext/#test-object_rest_properties No browser supports class properties: http://kangax.github.io/compat-table/esnext/#test-class_properties I don't know what year you're using, but most support nothing from the features I mentioned.
I use Webdriver.io to run GUI tests in my CI, using a Docker image of Selenium+Firefox and Selenium+Chrome. Works pretty well, although it still starts up a headless graphical environment, I think.
That's a convention. Not a private variable. 
Can I enquire as to why you feel "definitely no autotipping"?
I've spent the past few weeks integrating PhantomJS ... then I came to writing download tests :( (no I don't want a half arsed solution)
It does in JS too. Usually. Chances are they're adding private vars in the future, though ([source](https://github.com/tc39/proposal-private-fields)).
We have to support back to iOS 8 and Android 4.3 devices. There is a lot of stuff we just can't do because of that.
Right. There are ways to reduce or prevent layout recalculation during load without preventing the streaming of data onto the page. It just takes a bit of design, and also control over ad place,ent and behavior.
It doesn't really matter what you use. As long as you understand how it works from inside out use what makes more sense for you. Of course ES2015 class is just a syntactic sugar on top of the pattern that exists in language since day one. I understand what is going on when I use so I use it because it is just less typing and a bit easier to read. This subject becomes to be one of those 'tabs vs spaces' with tons of opinions. On the end of the day your code and it's impact to your project matters. Space or tab wont make any change. Class or function constructor wont make any difference either.
I think I'm pretty much agreeing with you, but to clarify for you and bel: The ECMAScript spec contains the definition of how modules declare themselves and how they interact, but it does not defined anything about how systems load a module, which is the most important part for modules to actually work. Modules are not some part of the ECMA spec that browsers haven't implemented. Browsers have implemented the ES6 module syntax and enough basics for them to be testable, but the until the loader spec solidifies, they will be effectively unusable.
Funny how people have finally figured out TypeScript exists. I've been using it for years to successfully scale up to multi-100 kloc js codebases (with multiple teams of devs working in it) without much of a sweat.
The fetch api is polyfilled for you out of the box if you used create-react-app to start your project.
No. There's no standard but the other way to do it is using factories. Here's an [article by Eric Elliot](https://medium.com/javascript-scene/javascript-factory-functions-vs-constructor-functions-vs-classes-2f22ceddf33e) and here's a [talk by Douglas Crockford](https://www.youtube.com/watch?v=PSGEjv3Tqo0#t=1395). Edit: I don't know who has a sore anushole in this sub but there are alternatives to classes. You don't have to use them or read about it but downvotes, really!?
I'm replicating your results, but I think in the second test you shouldn't use console.log() as that's bottlenecking all the tests, and makes them look the same in performance. Additionally the prototype pattern becomes increasingly more efficient the more class properties/methods you have. With a method or two one probably won't see substantial difference in memory and CPU. I use TypeScript, and I compile to ES5 most of the time, which means my final code doesn't contain actual ES6 classes (despite I'm writing ES6 classes), so I can't comment on the specific issue with ES6 class performance, but it's typical that new JS features are less optimized when introduced in a JS VM and they get optimized as they gain mainstream acceptance. Say native generators, async/await and other native features have been historically slower in JS engines than what Babel and other transpilers could produce using ES3/ES5 level features, but this has been resolved in time, and native support either matches or outpaces what Babel could do.
From the title alone... I think it'll give you access to.the DOM tree of a document without opening a browser (in your terminal for instance). So, you could do UI interactions via JS without manual intervention. Should make testing easier I guess 
Automation. Say of tests, but not only. In a nutshell it allows you to easily write "bot" scripts that use a browser the way you would. A browser is a very complicated system, so there's nothing simple that can quite replace it, it's best to use the real thing.
I like the idea, but implementation seems overkill and open to man-in-the-middle attacks. I'm no security expert, but it seems there will be malicious code that simply replaces all the `tipAddress` fields in all package.json files. And with this cli tipping, there's no way of verifying the receiver. Maybe `tipAddress` could simply be a link to any tipping service, not necessarily with bitcoin. So if I want to tip, `npm tip tippable` asks me to open a browser page that I can verify belongs to "tippable". If they accept bitcoin I can use my existing phone wallet to send funds.
My solution has 211 characters: &lt;canvas id="a"width="6"height="3"&gt;&lt;/canvas&gt;&lt;script type="text/javascript"&gt;c=document.getElementById("a");x=c.getContext("2d");x.fillStyle="red";x.fillRect(0,0,6,1);x.fillStyle="blue";x.fillRect(0,2,6,1)&lt;/script&gt; 
Also discussed on HN: https://news.ycombinator.com/item?id=14105489
You can use the default size of the canvas element: 300x150, also, I don't know if this works in all browsers, but the variable 'a' automatically refers to the canvas element with id "a". You can also remove 'type="text/javascript', it's the default.
:-o 
How helpful for others.
159 chars, using some of GGBRW's pointers: &lt;canvas id="a"&gt;&lt;/canvas&gt;&lt;script&gt;['red','blue'].map(function(a,b){c=document.getElementById('a').getContext('2d');c.fillStyle=a;c.fillRect(0,b*2,6,1)})&lt;/script&gt; Or 148, doubt this is valid html but it works: &lt;canvas/&gt;&lt;script&gt;['red','blue'].map(function(a,b){c=document.querySelector('canvas').getContext('2d');c.fillStyle=a;c.fillRect(0,b*2,6,1)})&lt;/script&gt;
Hm, all those downvotes and not a single anwser. No you dont need jquery to manipulate the dom. React does all that for you. You just specify what the HTML is supposed to look like in certain cases and states while react will then do its best to update the Dom in the most efficient way possible. 
Used selenium in various ways standalone and through sauce labs. With Php and node. I think it's fine but it can be a pain to debug problems sometimes. The api can be tricky and may take time to get used to. Looking forward to using the real thing directly. 
It looks like they are thinking about starting a new project instead that would use Chrome as a new runtime called Phantomium. https://groups.google.com/forum/#!topic/phantomjs-dev/S-mEBwuSgKQ Edit: [Phantomium](https://github.com/Vitallium/phantomium) are now on Github
The best argument against using classes IMO is the lack of pros. What are the only things you can do with classes but not factories? Using `instanceOf` (which you shouldn't) or subclassing (which you also shouldn't). Without pros, the cons--using `new`, the tempation to rely on extends/instanceOf--makes it precarious. Similarly, I don't use `!= null` instead of `!== null || !=="undefined"`. There is a small pro, you write a few characters less, but there's a big con, it hides type-checking errors. I realize not everyone subscribes to this philosophy of writing .js but that's my POV at least.
TIL... I kinda assumed the language would use integers for integers and floats everywhere...
&gt; that's out the window ( ͡° ͜ʖ ͡°)
I like the approach though. Couldn't you make this even smaller by replacing the white canvas with a couple &lt;br&gt;?
119 :) ```&lt;canvas id='a'/&gt;&lt;script&gt;['red','blue'].map((a,b)=&gt;{c=a.getContext('2d');c.fillStyle=a;c.fillRect(0,b*4,9,2)});&lt;/script&gt;```
As I said if you really wanted it to be private, you can use a symbol let privateVar = new Symbol() export default class { constructor () { this.[privateVar] = 'bleh' } myFunction () { return this.[privateVar] } mutate(newVal) { this.[privateVar] = newVal } }
its headless 
84 symbols, cheating some more :P &lt;canvas width="6"height="3"style="background:linear-gradient(0deg,blue,white,red)"/&gt;
I was working on a project a couple months ago using PhantomJS... we were concerned that it was unstable and maybe we should use something else. Guess I was right! No offense to the maintainer though, it's obviously an ambitious project.
1: I know that javascript is not java , 2: ofcourse objects are not classes 3: I don't know what you mean by codified but there is lots of books on `design patterns` , qt: wouldn't you call the facade pattern a `codified` pattern ? it was amazingly implemented by jQuery . I do use (map , reduce and filter) I do use pure functions whenever possible .. 
golfed that down to 72 &lt;canvas width=6 height=3 style=background:linear-gradient(red,#fff,blue&gt; (yes, the parenthesis is unmatched)
https://addyosmani.com/resources/essentialjsdesignpatterns/book/
Guy is seriously a legend in software automation testing. I wish him the best and looking forward to Chrome headless!
&gt; Right up until you need private member variables, at which point you either end up writing de-facto ES5 class constructor functions or you resort to hacky workarounds using Symbols. You mean WeakMaps. You can iterate over Symbols via Object.getOwnPropertySymbols. The WeakMaps workaround: https://jsfiddle.net/rzgumjL4/ Well, since that's too much of a mess I recommend to just use wannabe privacy via leading underscores until actual privacy is added. Using TypeScript is also an option. [CC /u/Draders, /u/Laat]
First I'd probably choose | instead of &amp; as my delimiter. | is commonly seen as an 'OR' character and &amp; needs escaping in certain contexts. Second I'd choose additional boundary characters {{ }} to identify my optional word sets in the string - so later I can use spaces as well e.g. That {{boy|man child|girl}} is really {{good|bad}} I'd use a regular expression to tokenize the entire string into parts which can be looped through to build the permutations. Then I'd use some sort of nested loops to iterate over every combination of the tokens in their order. So tokens would be: &gt;[That ] &gt;[boy|girl] &gt;[ is really ] &gt;[good|bad|annoying] &gt;[.] First loop: &gt;[That ] + [boy] &gt;[That ] + [girl] Second loop: &gt;[That boy] + [ is really ] &gt;[That girl] + [ is really ] Third loop: &gt;[That boy is really ] + [good] &gt;[That girl is really ] + [good] &gt;[That boy is really ] + [bad] &gt;[That girl is really ] + [bad] &gt;[That boy is really ] + [annoying] &gt;[That girl is really ] + [annoying] Fourth loop &gt;[That boy is really good] + [.] &gt;[That girl is really good] + [.] &gt;[That boy is really bad] + [.] &gt;[That girl is really bad] + [.] &gt;[That boy is really annoying] + [.] &gt;[That girl is really annoying] [.] Then there's no more tokens left to process and an array of constructed lines with every combination of token in sequence has been collated. The above as a codepen is linked below for your interest and maybe to inspire someone else to point out any better ways as I'd put myself in an 'intermediate' javascript level basket. http://codepen.io/skarn/pen/vmYqGO This is the website I tried out various regular expressions until I found one that seemed to work well. You might notice I used the 'code generator tool' link on this website to get part of the javascript I used in the codepen. https://regex101.com/r/3yCmV8/1 This is a website I use to help me visualise exactly what a regular expression is doing. https://regexper.com/#%7B%7B(%5B%5E%7D%5D%2B)%7D%7D%7C(%5B%5E%7B%5D%2B) 
It was not meant to be a personal attack of any sort, I just wanted to point out that in the JS world much less emphasis is set on design patterns a la gang of four. Absolutely my opinion, but I believe that the current trend is KISS &amp; DRY as much as you can. Sometime, implementing design patterns don't play well with KISS.
thanks , I do know about the book would you consider them all a must know ? 
I'm reading `addy osmani` js design patterns , and I just wanted to pick some of the patterns not them all . Thanks any way , 
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/programmingchallenges] [Sierpinski's triangle challenge (from r\/javascript) and link to Dutch flag challenge](https://np.reddit.com/r/programmingchallenges/comments/655wta/sierpinskis_triangle_challenge_from_rjavascript/) [](#footer)*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))* [](#bot)
117 with JavaScript &lt;canvas onmouseover="t=this.getContext('2d');d=['red','blue'];for(c in d){t.fillStyle=d[c];t.fillRect(0,c*2,6,1)}"/&gt;
I don't know if this is really a valid optimization but it did save a few characters (277). :-P &gt;&lt;canvas id="a"/&gt;&lt;script&gt;s=1024;c=window.a;c.width=s;c.height=s;t=c.getContext("2d");t.f=t.fillRect;z=[];for(i=0;i&lt;s;i++){z[i]=[];for(j=0;j&lt;s;j++){z[i][j]=0}}z[1][1]=1;t.f(1,1,1,1);i=0;while(i&lt;s){i++;for(j=1;j&lt;s;j++){if(z[i-1][j]+z[i][j-1]==1){z[i][j]=1;t.f(i,j,1,1)}}}&lt;/script&gt; Basically wherever I saw a word repeated I tried to assign it to a variable instead so subsequent uses could be shortened. I also refer to the canvas element using window.a (because initially on a web page load elements are loaded to global window variables of the same id.)
For a browser?
As per zobier - I use classes to do this sort of thing. But also, even if setting the animation style properties will work like this, these lines look incorrect as setting same property twice: &gt;interface.style.webkitAnimationName = 'slide_up'; &gt;interface.style.webkitAnimationName = '4s'; 
Looks bogus. Maybe they used some sort of preprocessor which replaced some token with "True". But even then there must have been some silly reason for doing it in this roundabout fashion.
The little bit I've started reading about it says Java devs will like it, so I'm looking forward to trying it out.
You can do this kind of thing via that version of replace which takes a regex and a callback. function foo(_, match) { let words = match.split('|'); return words[words.length * Math.random() | 0]; } console.log('yo, {garry|steve}! how was your {day|last turd}?'.replace(/\{([^\}]+)\}/g, foo)); Logs one of: yo, garry! how was your day? yo, steve! how was your day? yo, garry! how was your last turd? yo, steve! how was your last turd?
&gt; It feels like NIH It's vendor lock-in. It only works on OS X and iOS.
What sold me on TypeScript was that it didn't just add features, it actively solved a problem I'd been experiencing. Once a JavaScript project scales beyond what can fit in your head, JS's initial productivity boost crumbles because you have to constantly double back and make sure your methods/constructors/etc. are correctly used, which properties are optional, etc... A lot of the debugging happens in runtime and god help you if you try to make a breaking change to one of the major classes/apis in your project. It's not unbearable, but the main reason for using JS is because of the productivity it allows. With TS for the cost of taking the time to explicitly define your data you get a C#/Java level of debugging that has clear productivity gains and shifts your debugging from the browser/console to the IDE. And when something doesn't fit the TS model you can just exclude it or only type the wrappers that integrate with the rest of your project. That and async/await is a godsend over promises.
I switched to using Chromium with a headless xvfb a while back. It continues to work splendidly. It will be nice to have it native, though.
recent javascript has added Set and Map objects. A Set can only contain one instance of an object no matter how many times you ask to add the object to the set. And you can check if an object is already in the Set. I created a simple javascript object which references itself in one of its properties. I then iterated over all properties recursively pushing their values into a Set object as it went. If a property's value was already found in the Set then that value is skipped, preventing the recursion. I applied the idea to JSON.stringify using the replace function parameter JSON.stringify accomodates and likewise kept a Set of the values processed so far, and if existing one found, just returned a dummy/placeholder string. If I tried to JSON.stringify the object normally, I'd get a javascript error, but with the Set checking, JSON.stringify completed just fine. I guess to make it properly useful you'd have to return some sort of useful reference string or property 'path' so that JSON.parse could be then extended to reconstruct the true recursive object again. My codepen testing this: http://codepen.io/skarn/pen/GmgRKp
From what I have found out, it's bad practice to expose private API keys in a public setting. https://github.com/FreeCodeCamp/FreeCodeCamp/issues/10740#issuecomment-252591649
I suspect its dynamically generated. But why this way even considering that? 
Probably will do the trick :-) Thanks.
You can use the fetch api, or u can look into axios, very very popular atm
My guess would be because you're setting `vel` to equal `center`, making them the same object (`sub()` performs the operation on the object from which its called then returns that object). Instead you probably need something like this.vel.set(this.center); this.vel.sub(this.loc); Edit: See /u/rotatetranslate's response which is, I think, a better approach 
&gt; because "inheritance" implies copies of an object It doesn't, though. Kyle is treating Java as the one and only possible implementation of inheritance. But other languages, such as Python and Ruby, implement inheritance by delegating down a chain of objects, just like in JavaScript.
I'm 99.6% sure this is dynamically generated by a language that true as a string is "True". In pure js there's no reason to do that shit.
Currently the implementation works by fetching the `package.json` for the specified package from the registry (npmjs.com, usually) and then extracting the `tipAddress` field from there. I'd need to check the implementation details but presumably there are checksums on this transfer and so this should be reasonably secure. There is one exception to this, however, which is if the package has been recently downloaded and is stored in the npm cache. This could easily be modified by malicious code and this would need to be mitigated against. One solution is to require a re-fetch of the `package.json`before tipping.
i think I got the shortest yet. 69 &lt;canvas width=6 height=1 style='box-shadow:0 -1px 0 red,0 1px 0 blue'
I'm seeing a lot of parallels in my code to the logic discord uses. Are you familiar with if? Do you think it uses web sockets in order to handle messages?
This one doesn't work for me, until I put a '&gt;' at the end, making it length 70. Is that just a problem with my browser? edit: it just doesn't work as an html file, but it does work in jsfiddle. That still makes it an invalid solution according to the rules of the challenge provided by op.
Thank you so much!! This is a great start! =) So I can output them randomly now which is good. But now I'm wondering if I can output every single permutation? What I have so far seems to be working decently, but does not print the entire sentence like I want it to. But here is my code: function gen_newput(_, match) { let words = match.split('|'); finaloutput = []; for (i=0; i&lt;words.length; i++) { suboutput = []; suboutput.push(words[words.length * i/words.length | 0]); console.log(suboutput); finaloutput.push(suboutput); console.log(finaloutput); } return finaloutput; }
Quirks mode ahoy! 😜
So there's a few other changes I made that will remove 3 more chars I think... * replace `==1` with `&amp;1` * replace `while(i&lt;s){i++;` with `while(i++&lt;s){`
this one only works for me with an extra &gt; at the end, but it's still the shortest so far with 70 characters. well done! Edit: I was not aware someone already commented almost exactly this
That source code could be a pre-processed source code. i.e. an auto generated code based on a templace/base source code. The template source code may look like this: someGlobalObject.IsSignInPopup = (%%SignInPopup%% == "True"); Where `%%SignInPopup%%` is a defined preprocessor variable name which is specified at source code build phase as part of a project.
Because while that works in jsfiddle etc, it does not work in a plain HTML file, so it doesn't match the challenge criteria: "Make an .html file"
i mean, i feel like all this stuff is a red herring. you don't choose Node.js because it inherently has good performance characteristics; you use it because it fits your workflow by doing things like promoting code re-use through the application. heck, you could even use Node.js as a transitional platform to move code out of the client without sacrificing features while you rewrite it in $otherLanguage (in this instance, we'll say Go). in that context Node.js is enabling greater choice in technology, rather than limiting you to its platform.
This. You can vastly simplify a lot of code by making use of these. If you find yourself making lookup maps all over the place with the key always being the same, you could probably clean it up with a closure. 
who mentioned the GOF book ? 
Not sure but this release opens the path to optimizations since new flags could be added to for example disable media queries checking, disabling certain diff checks that you're not using. Essentially by allowing headless to be first class they're opening the door for people to bring use cases that need to be optimized for performance. Even without optimization it appears faster than Chromium + virtual device server. Read more here: https://groups.google.com/a/chromium.org/forum/#!searchin/headless-dev/performance%7Csort:relevance Also there is some design doc stuff here regarding allowing multiple parallel sessions and the optimizations they are planning: https://docs.google.com/document/d/1XAKvrxtSEoe65vNghSWC5S3kJ--z2Zpt2UWW1Fi8GiM/edit?pref=2&amp;pli=1# This is good because if there are things in core that need to be changed in order for there to be a better headless experience, they'll be tracking that and can make a more compelling case since core changes will have more regressions.
They make do without.
You were right and I was wrong - I asked in the ReasonML's discord channel and they told me it was written in OCaml only. My apologies for spreading misinformation.
yeah it does , I'm currently reading it . 
That sounds ... rough.
 window.callMe = function(message) { console.log("Called from iFrame:", message); } You're only declaring the call me function in a local scope. Once you exit the window load event (generated by JSFiddle) the function doesn't exist anymore.
Right, but I'm trying to have it so when I click a button, it applies the animation to another element. Would I have to do the toggleClass function so that when the class is toggled the animation starts? If that's the case, can you point me to some resources where I can learn to do this? I can sort of understand the logic but would like to see the code to see how it is used. Also, tagging /u/engagetoaster as he provided another insightful comment and could perhaps elaborate on this. P.S - I did make a mistake, should have been duration.
Does anyone know why they decided that the fetch promise shouldn't reject on non-200 responses. It makes no sense to me.
And casperjs works with them both :)
It works in jsfiddle, but as lhorie mentioned before, the challenge was to make a functional .html file, so it doesn't quite count despite being a functional solution in some circumstances.
::eyes fall out of head::
Javascript doesn't have multi-threading. Which package are you talking about? Sockets are one solution. I wonder if you could use a [web worker](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers) also.
I still think that all this effort would have been better spent contributing autofixing rules to ESLint.
[this](http://blog.cleancoder.com/uncle-bob/images/fpvsoo.jpg)
Performing I/O, such as reading from the network or writing to a file, takes time. From the standpoint of the CPU, something that takes 10ms (which is fast in terms of network latency) is an absolute eternity. When you're writing code in the asynchronous style, as in Node.js, you begin an I/O request and then are free to do other work while the I/O is off doing its thing. But that assumes that you actually have enough work to fill in all those gaps while you're waiting for the I/O to finish. In many cases the workload is such that the CPU will just sit idle(*) because it doesn't have enough to do in between waiting for other things to finish. In cases like that, you can't go faster by adding more CPU. Waiting on I/O is the limiting factor. To go faster you'd need to address the I/O situation, such as by using storage with lower latency, or a faster network connection. In terms of Node.js specifically, it means that the JS engine is not the limiting factor. (*) It probably won't be completely idle, its time will be allocated by the kernel's scheduler to work on other processes, i.e. all the other stuff running on the system.
Yes but in these cases you would use the dom ref that react provides exactly for those kind of situations. The point though is to keep that to a minimum. Besides, usually when you're trying to manipulate the dom directly, there is probably a more reacty way to do it. It can however sometime be a challenge to find these querks. 
I watched that talk long time ago , and I come from a relatively strong fp background , what's your point ? 
This is so cool! I've been looking for more projects to do to add to my portfolio (and hopefully get a job...) and will definitely be making use of this.
Seems like you're looking for "Hot Module Replacement" (HMR). Look into how to set it up via a Node server in development. I believe webpack-dev-middleware and webpack-middleware-hmr may be two of the modules you could use. You should be able to find tutorials to guide you step by step. You may also use existing starter kits that already implement numerous config / build features, among which HMR (such as react-boilerplate or react-redux-starter-kit) If you're just looking to automate what you already have, you're looking for so-called "watchers". 
While this may hold for most projects maintained by few people, Vitaly single-handedly offered a top notch solution to [a variety of problems](https://github.com/ariya/phantomjs/#use-cases) in a web dev's life that were simply neglected by major players for many, many years. The fact, that Google is putting heavy resources behind headless is proof of the fact, that his feature catalogue was spot on from the very beginning. Downvotes because a) PhantomJS has been very stable for a couple of years now and used in production on many large company's stack and b) because being right only after a major player steps up after all is not something I would brag about in a comment to a link that sees the maintainer abandoning his OS solution because he literally gets outnumbered. I get you, but it's not a classy move.
In addition to what /u/lewisje says, (square brackets), I typically use reduce for turning arrays into objects: const categoryList = category .split(',') .map(item =&gt; item.trim()) .reduce((memo, item) =&gt; { memo[item] = true return memo }, {})
&gt; because it will not maintain updates Can you clarify what you mean here?
To keep things simple: you need to run this in your browser. Trying to open a JavaScript file directly will not run it in your browser. To make things even simpler: Use `CTRL + SHIFT + I` in your browser on this page (or any) and go to the 'Console' tab. Type your JavaScript code in there. It seems you're very much a beginner so I suggest learning more of the basics and then you'll really figure out what went wrong.
I was going to, but I'm wrong. `a` is indeed a free variable, my mistake.
Will do!
Still popular for 20 years
And then you have to ask why. I don't like pho but I respect the popularity 
&gt; I will answer any question. What is your mothers maiden name?
Create an image instance, add an onload handler, and then set its src to that blob thing. Once it's loaded, you can query its width/height.
Demonstrate please?
It's the same as usual. The only difference is that unusual src.
If you want to precalculate something using variables, but you want to scope it, it makes sense. Of course, you could just name the function too and memoize the solution. Obviously you can avoid them as well. TBH I'll use whatever the team is using, and I don't have a huge preference, but it's good to be aware of the edge cases.
 navigator.registerProtocolHandler('mailto', 'https://inbox.google.com/?mailto=%s', 'Inbox by Google'); This should work 
phantomjs is the only headless browser environment i could get to work with karma for my company's tests. I'm eternally grateful that someone had my back in those moments. 
Just started using this and loving it mainly because it cuts down on pointless ideological discussions about formatting. Just prettier files on commit and it's all done
Wow you are awesome. Thanks for sharing.
 console.log() ;[1, 2, 3].map(x =&gt; x + 1) What kind of maniac would want this and why?
I personally don't find them too bad if written like an if-elif...-else chain e.g. // Obviously this could be written without multiple ternaries // but it demonstrates that they don't *have* to be hard to read function fib(n) { return n === 0 ? 0 : n === 1 ? 1 : fib(n-1) + fib(n-2) } 
Same here. If i do something like this all the time (silly exmaple) prop: val &gt; 0 ? a : b But when it gets more complicated, i am like "naaah, lets throw some function there" prop: getAorB(val)
Looks like you've done the [Levy C Curve](https://en.wikipedia.org/wiki/L%C3%A9vy_C_curve) not the dragon curve, personally I think that curve looks cooler than the Dragon curve.
&lt;3 You're an awesome individual. Thank you for this. I would've probably never gotten around to exploring these lovely APIs without this.
They're entirely different things. Node is a way to build your back-end in Javascript, PhantomJS is a way to render web pages (so the front-end) to images or pdf's without the need for a 'real' browser.
I thought the same thing and then saw Evan You (Vue creator) say that was the rule he was waiting for...I'm so confused!
That kind of defeat their purpose, isn't it?
&gt; Exactly. I'm hoping that eslint folks will continue developing the --fix feature and that it will eventually become more popular than Prettier. Why? Prettier looks like a great tool with a healthy community.
First of all don't ever use setInterval for animations it makes them jitter alot, use requestAnimationFrame instead. A good framework for games is PhaserJS
1. -1 This isn't worded the best, but the best answer is c. The value can be changed, but not the variable (which value the variable refers to). 2. ok 3. ok 4. -1 b. This relates to #2 and how declarations like let are still hoisted despite the fact they can't be used until the declaration 5. ok 6. -1 a. This is one of the primary benefits of arrow functions, that they don't have their own this and instead this refers to the this of the surrounding (non-arrow) function. Same applies to arguments and super (and new.target). 7. ok 8. ok 9. -1 c. Destructuring does what it sounds like: takes things apart. Given an object you can pull out variables and declare them in the local scope. `var [a,b] = [1,2]; // a = 1, b = 2` 10. -1 a. This is another advantage of template literals, multiple lines of text in a string. 11. -1 b. 12. ok 13. -1 a. for..in is what iterates over properties of an object. That has existed for a while now. for..of is whats new and works with iterables (this includes generator returns and arrays). 14. -1 c. The class syntax represents a constructor function and its prototype definitions used to create new instances with the new keyword. 15. -1 a. This should not be confused with the non-ES6 module pattern, which uses a wrapper function. ES6 modules already have a self-contained scope so do not require a wrapping function to provide them with one. 16. -1 c. 17. ok 18. -1. Poorly worded but best answer is b. There is no resolved state, only pending, fulfilled, and rejected. The closest match to resolved is fulfilled. When fulfilled, it means the async operation _has already completed_, and any and all fulfilled callbacks will be called. 19. ok 20. ok, but also a little poorly worded. The "data produced by a generator" _is_ an iterator, you don't use one with it to iterate as the answer seems to imply. 9/20 - almost 50%. Some additional studying may be required :)
But this isn't meant as a replacement, right? 
+1 for Phaser. They know what they're doing.
This is like a cloud-based snippets collection. Why not? There may be other tools to do it, but if you're using Evernote and VS Code, this seems neatly integrated! I think this is NOT meant for actual development or production code, but snippets and similar.
If you're developing it for personal reasons, don't you know which browsers it will be used in?
I won't. That's for sure
It Depends™ on your setup. In the past this was a bad practice—many script files would be slower to download than all those bundled together (especially mobile)—however http2 may do the opposite and make it faster. You'll have to profile your site. I might recommend systemJS over require, but I haven't used it. I just found require to be kinda clunky many years ago and it uses commonJS. A more modern tool that uses ES6 modules might be better. In the end, a lot of people do a combination of these techniques. They bundle together a series of shared libs, and load that separately from a page code so you get the best of both worlds. Webpack makes it very easy to do this with its commonchunks plugin.
Thanks. I learned something. I bundled up a slightly mangled MDN example as a codepen for OP. http://codepen.io/shyndman/pen/dWPeyX?editors=1011
Why is this written like a 7th grade essay?
This is really fantastic work. I've been working on something [similar](https://jmfirth.github.io/typescript-playground/), more generic and TypeScript-oriented based on the Monaco editor (UI is temporary and trash right now). Initially I tried to use browserify-cdn and SystemJS to provide modules but found pkgzip + SystemJS was a more comprehensive solution for module loading inside the live editor frame. What requirements or problems did you run into that has made you roll your own? [1]: https://jmfirth.github.io/typescript-playground/
Hi /u/TheNo1Luka, this post has been removed. Please feel free to repost as a link submission, and then add any extra text as a comment. Thank you.
[removed]
This project will cover the development for the mobile app of Marco Polo. Marco Polo is an app that will connect outdoor enthusiasts to create community, create events and travel together with people from all over the world. App will be developed using react native. I will be using redux as well since its react after all. Backend is developed in Nodejs using Hapijs and mongodb. This is relevant since I will be building endpoints for the app as well.
Further updated: http://ndugger.github.io/youdontneedjquery/
First sentence: &gt; One of the major advantages of JavaScript is that everything is asynchronous. Wat?
🏖
Yeah, it's different. Prettier doesn't check for bad habits/footguns like `no-console`. You can combine eslint and prettier; they have links to projects for that in the prettier readme. 
In Chrome Dev Tools you can force element state: https://i.imgur.com/dpDM4dA.png
If you mean how to console.log a mouseover of an element I would do this: ``` document.getElementById(id).addEventListener('mouseover', function() { console.log('hey'); }); ```
This is a really cool idea! You can do so much more with this concept.
Thank you very much for the info! I'm gonna see if I can get something working for my program sometime in the next day or so.
Number one priority in code is readability. It is amazing (and annoying) that some are still debating this.
IMO which testing framework maybe not sucha big deal. If I were in your shoes I would take a look at the user flow and identify a few points that are absolutely crucial to the business and write a few tests there. However I think this is an effort your company as a whole should be a part of for it to really take off. Maybe start having conversations about the benefits of a tested app (refactor freedom, less broken release, less down time, mo money!) just my two cents. Fwiw we use jasmine 2.0 for our old marionette code and jest for our react with really basic-case selenium automation tests to make sure our user flow chill.
I've overcomplicated it. As suggested in IRC, this can be done using a simple helper function. const nearestPlace = suppress(NotFoundError, await matchVenuePlace(connection, venue.id, places)); 
I've not seen anything come up like suppress, but there has been this recent discussion: https://esdiscuss.org/topic/standardizing-conditional-try-catch
 Uncaught ReferenceError: e is not defined at addProd (Create:191) at HTMLButtonElement.onclick (VM1037 Create:1) addProd @ Create:191 onclick @ VM1037 Create:1 
The rules for semicolons involve a bit of mental overhead: const x = {}; // semicolon if (x) {} // no semicolon function y () {} // no semicolon const z = function () {}; // semicolon class x { let x; // semicolon foo () {} // no semicolon } // no semicolon True, most programmers just internalize these rules and just type things from muscle memory, but they're still there. If you adopt the "no-semicolon" style, all this complexity goes away, except for the *one* corner case which you have just illustrated. Many people think the tradeoff is worth it, especially since the corner case is pretty rare to start with. Besides, people who use the no-semicolon style will probably do something like this anyhow: const items = [1, 2, 3] items.map(x =&gt; x + 1)
All these discussions would be a lot more productive if they were using http://en.arguman.org/. Now it gets off-topic within couple of exchanges with no resolution.
Yeah that's probably a pretty solid indicator of popularity - number of stars on GitHub gives a pretty good sense of that. Phaser is also the biggest sub-forum by far at http://www.html5gamedevs.com/ which is a good indication of it's popularity as well.
CreateJS is a great wrapper for canvas and parts of html5, but it's not a game engine.
Yep. Open up the chrome developer tools, go to the panel, right click the element you want to mark as hovered, and then choose `:hover` from the drop down menu that pops up. Other browsers will have similar functionality, I'm just not sure off the top of my head how it works.
Yeah this was my first thought when I got the we got you page, "fuck you im outta here". This is a gimmick and I am sure it will end up being punishable in some way in the future.
&gt;I'd like to somehow get redux back. Is Redux actually necessary for the app? Redux for the sake of Redux is not a good idea.
Thanks :) I'd love to see what you make with it. Please let me know if you have any feedback or want to see anything added to it!
JavaScript. I'm doing it wrong.
Hi /u/lebunfortunately, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_). Please use the [Showoff Saturday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AShowoff%2BSaturday) posts for these types of submissions.
this[valueKeyArr[i]]=value; Is that what you want ?
If the calculation is it too much to inline, it should live somewhere else. Creating a memo is also a solution to an entirely different problem than scope. Caching is only useful if there are a variety of inputs to the function. 
I agree; it's not a problem in practice! I *am* an oldschool C++ developer, so I've certainly dealt with far more complex syntax than JS could ever dream of. I'm taking about this from more of an aesthetics point of view than an actual brain-overload point of view - it just looks messier.
Made a few improvements of my own: &lt;canvas id="c"/&gt;&lt;script&gt;s=1024;c.width=c.height=s;t=c.getContext("2d");t.f=t.fillRect;z=Array(s).fill().map(x=&gt;Array(s).fill(0));z[1][1]=1;t.f(1,1,1,1);i=0;while(i++&lt;s){for(j=1;j++&lt;s;){if(z[i-1][j]+z[i][j-1]&amp;1){z[i][j]=1;t.f(i,j,1,1)}}}&lt;/script&gt; 245 characters!
&gt; From what I understand, prettier is different and stuff and is like more powerful I gotchu fam. FTFY
I write them like so: condition ? expression1 : expression2 
The api only lets you run this function within the originating domain. So like your original link says, to add Gmail as the handler it has to be run from the console while you are looking at your Gmail inbox. To add Inbox as the handler, it has to be run from the console while you are looking at your Inbox inbox. [Navigator.registerProtocolHandler](https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler) &gt; For security reasons, by default, web sites may only register protocol handlers for themselves — the domain and protocol of the handler must match the current site. However, users may set a preference in Firefox to allow cross website installation, by setting the gecko.handlerService.allowRegisterFromDifferentHost pref to true in about:config.
https://www.reddit.com/r/javascript/comments/53uz23/are_there_any_steam_games_made_with_js/
I just go w/the flow. There's limits to what you can do w/testing and depending how hectic your release cycle is, and the nature of the application, it may not make sense allocation wise. I mean we can say "always write tests", but the bottom line is more important, and like everything engineering, it is all about compromises.
To my knowledge there's nothing "bad" about them. I use them all the time. They might not be very readable to some, but unless those are people you work with don't let it affect how you write your code.
I still get the vibe of google thinking "we appear to be slower in our own benchmark, let's kill it before it gets worst"
It's even mentioned in the article that the current ranking is Edge, Chrome, Firefox. But IMHO the title is misleading, as I understand the main reason is, that the test cases that Octane uses are actually outdated. 
But to load a local file...
Here's an Idle game that has close to 10 million plays on Kongregate: https://swarmsim.github.io https://github.com/swarmsim/swarm &amp;nbsp; I like the notice it gave me when I opened the game: &gt; Welcome back! While you were away for *2 years*, your swarm produced[...]
Testing gives the security that your code does not break unexpectedly if you make a change somewhere in your code base. You will become faster in writing tests once you do it more and more. A golden rule for testing is that every part should be independent and should not rely on other tests. If you find debugging more enjoyable, try writing tests while debugging your code. This way do you not have to repeat yourself once your code is "stable". Try to make writing tests a habit once you have written a couple of functions or created a new API entry point write immediately the tests for it. This way do you not end up with dozens of functions that have no testing. Testing maybe takes some time of your day but in the end is it really worth it. It almost always guarantees that the code that you have written keeps working. 
The logic that you are describing is all based on the premise "exceptions are exceptional". I suggest reading https://softwareengineering.stackexchange.com/questions/184654/ive-been-told-that-exceptions-should-only-be-used-in-exceptional-cases-how-do thread as it summarises my views quite well. Namely: * exceptions were created to ease application logic * the perception that exception throwing should be restricted to "exceptional" cases stems from performance implications * "An exception is when a member fails to complete the task it is supposed to perform as indicated by its name. " So, if I know nothing about the implementation of `getCountryByCountryCode`, I expect that "giving it a country code will give me a country object". Simple as that. Anything is an exception. Why is this important? Take this code as an example: const countryId = await getCountryIdByCode(connection, firstRecord.source.country); const cinemaId = await getCinemaIdByCountryIdAndCinemaNid(connection, countryId, firstRecord.source.nid); const venueId = await getVenueIdByCinemaIdAndVenueNid(connection, cinemaId, firstRecord.venue.nid); const movieId = await getMovieIdByCinemaIdAndMovieName(connection, cinemaId, firstRecord.movie.name); const eventId = await getEventIdByVenueIdAndMovieIdAndDataAndTime(connection, venueId, movieId, firstRecord.time.date, firstRecord.time.time); If either of these functions could return anything but the result that they say they return, I'd need to guard against every such case. For the record, I've been coding in the mindset that you are describing most of my professional life. Your post could have been easily my post 2-3 years ago. Then one day I woke up with "aha" moment and became an advocate of: use exceptions whenever it simplifies the code.
What about something like this? https://jsfiddle.net/rqrx8z6p/
Neat
It is wrapped in $(function{})
Its in a function and its being executed. Edit: Im using 3.1.1
If the method read `getCountryIdsByCountryCode`, I'd agree that returning `[]` is a valid response. When it says `getCountryId...`, well, it is either ID or not ID, and not ID is unexpected.
`if`s do not loop. What do you mean?
^ perfect answer. To add to it, I highly recommend all software engineers learn and periodically brush up on Test Driven Design (TDD). There are lots of great resources out there, this is a favorite of mine: https://medium.com/javascript-scene/5-common-misconceptions-about-tdd-unit-tests-863d5beb3ce9 From my personal experience, there are few times that when I didn't write tests, that I was okay with it. Even when trying to learn a new library or framework, I've found that the best way to learn it is to write tests around it.
It's not, it's just highly in depth. It can be interpreted as being condescending because it's trying explain concepts on a high level (like you would to a newbie or perhaps a manager) while including a high level of technical detail (like what we as Devs prefer). My preference is to have smaller more targeted information too. But lots of academic style text have this cover all feeling to them because well... it caters to a larger audience,: the author is passionate enough to publish an essay on a single topic, he or she wants to be understood by everyone.
I have this extension but i cant make work. Dont have some video tutorial to that?
I've created some JS games and alongside them I created http://github.com/anim8js which can animate dom, easeljs, and pixijs. I think its the most feature rich animation library, and its completely free.
How is the app state managed? Are they passing the state down from the root for the whole app? Or does each piece just have its own internal state and is there no way to actually reload the previous app state bc a local store isn't used? If the answer to these questions is yes...Well redux might be a good fit for that project and a refactor suggestion might be good. If the app is anything more than like 3 pages I would expect a state management system like redux might be beneficial. Im not sure where you are going with the backend question. Are there no docs or descriptions of what the endpoints are? If that's the case I'd suggest as the first step making markdown docs for each endpoint and put them in the repo for reference. Then perhaps go down the testing route next. If they don't have tests already and you do refactoring you are going to have a shit time during regression...
I'm not sure if it's because I'm looking at this on a phone but for effs sake at least format it before posting lol
In my personal application I don't bother to test in the browser. Headless browsers are a pain in the ass and if the application works in other environments then the only thing left to check in the browser is DOM interaction and presentation, which I am fine with checking manually. I do all my automation testing on the command line. I try to make my test cycle execute as fast as possible so that I can run tests as frequently as convenient. I have a validator, diff tool, beautifier, file system simulator, and parser wrapped up in my test build. The largest code sample I run tests against is a 1.7mb JS file and the largest operation in my test cycle is a large directory tree operation. I have this thing set up so that I can run it from the command line when ever I want to manually run it. I also have it configured to run on Travis CI whenever I push a commit or open a pull request.
I don't know anything about php so apologies if this is not what you want but to do it in pure JS - Let's say you have a variable, seconds for the total seconds remaining then you can get the minutes and seconds as follows const minutesRemaining = Math.floor(seconds / 60); const secondsRemaining = seconds % 60; you can then put these into a time display as follows using template strings const timeDisplay = `${minutesRemaining}:${secondsRemaining &lt; 10 ? '0' : ''}${secondsRemaining}`; put that into your countdown function and then call the countdown function every second to update the display
Apache Cordova My Friend. 
You're all over the place. What problem are you trying to solve? You also sound stressed out. Take a day or two away from the keyboard and unwind a bit and come back when mentally fresh.
* Adobe PhoneGap (Build) and Apache Cordova - Probably the closest thing to what you're looking for. They are similar projects, though I prefer PhoneGap build because I don't have a mac and it's got an online build system. * React-Native and Native-Script are cool too. They perform better but don't have the same flexibility as PhoneGap (because PhoneGap wraps a website as an app within a browser, where RN and NS use special HTML syntax to convert HTML into a native application - I think you forfeit CSS for this). Good if you don't want your app to be a web-app as well. I have yet to find an online build system for either, meaning I have yet to find a cost effective means to deploy for iOS from Windows. * You can also just make a Progressive Web App - though they have limited support on Apple as of yet, it is the best solution IMO. What I currently do is PWA + PhoneGap -&gt; hoping that one day, Apple will care about their platform and begin integrating more PWA features (add to homescreen dialog, push notifications)
Not exactly the same but nativescript is pretty awesome.
*Duelyst* is made using Electron.
With React-Native you still have CSS styling... in fact it is recommended to use CSS flexbox for the layout. https://facebook.github.io/react-native/docs/style.html https://facebook.github.io/react-native/docs/flexbox.html
Does React-Native use JSX?
I don't FOR ME tests take away time from feature development. They make me faster. Sometimes. I mean, you take a little time to think about what you need and write the test, then you have a thing that refreshes instantly every time you save and tells you if you're don't or not. I had basically a template for features/issues. It was like 5 checkboxes that said, Write a test for this part of the stack and make it pass, then go on to the next one; One I get to the actually UI, it just works. It keeps you organized and focused too. And keeps your commit history nice. This does take some set up to get the initial skeleton set up. But each new feature is paint by numbers. 
I'm not 100% sure what you're after, but for outputting sound in JS you *can* use Web audio, but it's all a lot simpler if you use Howler.js (https://howlerjs.com/). Even Google, Disney, NASA, and a lot of others are using it. I've used it too, and it makes everything a lot easier.
um. because you've been able to do that the entire time on ios and android, and since 1995 on windows. except without node. it's called an "embedded browser app." it's what native isn't. on ios you'll get safari, on android you'll get chrome, and on windows you can have your choice of ie, edge, firefox through rhino, chrome through electron, chrome through nw, et cetera there's no need or purpose to involving node
Are you not?
So apparently using querySelectorAll attached to a simple querySelector doesn't work? EDIT - ok so querySelectorAll returns an array of selectors it finds...so el[0] returns the first one But if I do el.querySelector("span").innerHTML = "blah"; that works? https://jsfiddle.net/0p19u193/1/
Welcome to software. Your best bet is to link to a small example to your problem on a sharing tool like https://codepen.io or https://jsfiddle.net
I prefer to wrap an app in a console.log(). I heard this is also how to document your code.
If you type console.log(main.querySelectorAll('span'), press f12 to open yout console, and press run on fiddle, you will see: [span] The [] brackets means it returned an array. You can then try main.querySelectorAll('span')[0] to access the first element in the array, and it should read : &lt;span&gt;&lt;/span&gt; Which means you now have the span node that you want. Alternatively, you can just put an id on the specific node that you want to manipulate instead of traversing from the divs like you are doing now.
But why?
It's just js though, so basically the web
&gt; When do you usually start writing tests for a project? When there's something to test. Stack is setup and should be returning pages? test for a get with the right return code and content. &gt;Which leads me to a second question, do you find writing tests increases the time to push out features? It's factored into the development time. &gt;Or does it lessen for you because there's less time debugging? Actually, not even less time debugging. Stuff moves from development -&gt; QA -&gt; production a lot quicker because you don't spend time debugging regressions that make it to production because it wasn't tested in dev, because no-one wrote a test.
Using the arrow function is not always sufficient. Correct me if I'm wrong, but if some other code that uses your callback rebinds the function, the this will be incorrect even with arrow functions.
Hunting after benchmark numbers only gets us so far, at some point it becomes counter-productive. I'm okay with them dropping benchmarks that lead down the wrong path. There are plenty of detailed blog posts about misleading benchmarks, and we know what happens when consumers end up basing their decisions on things like that. [The megapixel race for cameras for example.](https://www.wired.com/2008/08/why-the-megapix/)
VueJS
Can anyone show an example of this? Thanks
&gt; there's no need or purpose to involving node Well, the packages and libraries. But I guess you'd use Browserify for that?
Everytime you want something to always happen, write a test. 
I wrote a top 10 app in the webOS app store (Gemini File Manager) and I still get a little angry every time this topic comes up...
Query param parsing has too many edge cases to be a good beginner level problem imo. I recall there is also some disagreement as to how to handle some of them.
Check out games on the BBC children's channels (CBBC &amp; CBeebies) websites. They're professionally made games, mostly made with PIXI.js or Phaser.
I totally avoid such apps. I like programs like Visual Studio Code, Atom etc but I don't really like how they use resources while several as capable alternatives don't. 
You might be right, but I'm having trouble thinking of a time where you would run into trouble. If I'm going to set the state of my website based on a query param, then I'll be the one setting the guidelines on how the query should be structured. Maybe you could run into a problem if you were making a chrome extension that would work across different sites or something? Curious to hear if you think I'm on the wrong track.
What's Icov?
So dumb question but isn't React Native for mobile only? Is there anything like RN for desktop? I'm sold on not embedding another browser environment into a desktop app, but this seems like a bit apples to oranges comparison. I can see there's a RN desktop fork but it's not clear how well supported it is. Not to mention that it's only for OSX. If it can't publish to multiple desktop environments doesn't it defeat the purpose? I would rather just learn native OSX dev....
Why?
Hi all , thanks for your reply basically my emulator is written in C# , and I want code within the emulator so when a user executes a action audio is played. But for this to be client side so all users can hear, javascript needs to communicate with the client , so i'm asking for a framework which i can implement in to visual studios and the code to output audio thanks Therefore I can't open up a C# file in visual studios and use the HTML5 audio tag
No, it won't be. Technology gets better with time, not worse. My CPU is already good enough to run all of those "Flash for the desktop" apps. It won't suddenly get worse. Also, I highly disagree with the article. Flash was bad because it was proprietary. Electron is based on open technology like CSS, JS, HTML. The only reason Flash existed was because JS wasn't well enough developed at that time and didn't have the right APIs like canvas, &lt;video&gt; and WebGL.
You're fucking blind.
An interesting point. PWAs certainly seem to be designed 'without the need for an app store'. Hopefully Apple will not pose too much of an obstacle to progress.
You can, its intel crosswalk, but its already retired since the webviews on the various platforms are mature enough now.
Hmm wouldn't Google have a conflict of interest as well due to the play store.
It's a code coverage tool. Let's you know which lines in your source files are covered by your tests to help ensure you don't miss anything.
I think this guy basically hates everything. And barks up the wrong tree. Spotify isn't even using Electron
I made a game with under 4K JavaScript (challenge against friends) http://ericjwinter.com/marble-sort
I guess most people are aware that a browser + Node doesn't really make for a lean runtime. However, that's the price they are apparently willing to pay for being able to use those APIs they are familiar with.
Awesome work! Is this on Github or Gitlab?
Radio Hibiki author here. I'm with you. 
[removed]
There is reac-native-desktop and rn-web just I wouldn't use them in production
Thanks! Sounds useful. I was curious because getting test coverage for the stateful chunk of an app is really hard (ie, validation is super easy to test, but the part that checks validation before updating the database is really hard to test.)
As far as I understand compiling Node for a mobile platform is quite difficult due to application sandboxing and differences in platforms. This is why we have the Cordova/PhoneGap solution instead. I could be wrong, of course.
Microsoft just release ReactXP, which is like react native but with almost only shared code https://github.com/Microsoft/reactxp
Because it's a bad idea. Why would you want to force megs and megs and megs of security holes into a mobile device?
Google's primary business is selling ads. It obviously has other business but it's nothing compared to their ad business. So if there are more faster user friendly platforms where they can show ads, including PWA, they are all for it. Meanwhile Apple's primary business is selling hardware and software. So obviously PWA doesn't help with their business. 
Or riot, which is alright.
Thanks!
Thank you
First, I wouldn't use VSCode as an example of good programming, especially when [sitting idle blinking a cursor once was a huge resource hog](https://github.com/Microsoft/vscode/issues/22900). Second, you need to scroll down and look at all of the background processes that are required for an Electron app. This is a fresh installation of VSCode on my Win10 machine: http://imgur.com/a/rYy9B. Notice that is over 157MB just for a blank file open in the editor. Electron is a huge resource hog and no amount of optimization is going to change the fact that each app is also completely running Chromium as its base.
Maybe you're not aware of this but it is possible to use react without using jsx
[Your example is completely wrong](https://www.reddit.com/r/javascript/comments/65h2za/similar_to_githubs_electron_why_cant_we_embed/dgaoqxk/). Electron eats a ton of resources since it's also running a full instance of Chromium.
You are correct, it does use more than ~18mb of RAM. The CPU usage is still around ~0% across all process, though.
Yes, because it's sitting idle with only a blank file open. That is expected behavior of an application, not something to praise, especially given the amount of memory usage for an empty project open.
It requires a lot more typing though.
It's hard to tell in the screenshot, but there are 3 complete *projects* opened. You can only see the file names or take my word for it. 
`querySelectorAll` returns a NodeList -- on most browsers, nodeLists don't have a `.forEach` method, but I've heard that is coming. Regular for loops work or one can turn the nodeList into an array.
Arrow functions will ignore the `this` binding, and always use `this` from the scope it was created. https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#No_binding_of_this
generally, yes (or one of its competitors, like rollup, webpack, or what have you.) i have no idea why you're `-10` downvoted. this was a perfectly reasonable and intelligent thing to say.
oh. sorry, i read that as you being in agreement. nevermind then have a good day
one is a set of libraries that run in the browser and try to make the browser look and feel native the other is a set of native libraries that try to make native development feel like javascript they're not the same thing at all. they're actually really, really different
it's not outrageous. it's actually fairly common.
https://github.com/mlmorg/react-hyperscript https://github.com/ohanhi/hyperscript-helpers :)
FYI: npm doesn't actually stand for "Node Package Manager". It's not an acronym and doesn't stand for anything. [Source](https://twitter.com/npmjs/status/105690425242820608?lang=en)
It uses Chromium Embedded Framework.
You can just use a combination of `@click`, `@blur` and `tabindex="0"`. Here is an explanation and React example. http://stackoverflow.com/a/37491578
Your screenshot doesn't include all of the background processes associated with running VSCode, so it's not a useful measure of anything.
&gt; VS Code team is "using the most reasonable approach to blinking a cursor" No, the most reasonable approach if a blinking cursor was eating up that much CPU is to disable it until a fix is found. Just because an approach is the "most reasonable" does not mean it's fit to be in an application. I'd talk more about the other bugs but I don't have time to sift through the thousands of open issues on GH.
[ReactXP](https://microsoft.github.io/reactxp/blog/) for windows.
I'm not really sure what all the fuss is about when it comes to angular and react. I've used angular and Marionette for years and I still prefer Marionette over angular. I've seen engineers struggle with things in angular due to its poor separation of concerns and all the javascript it integrates into the templates. Writing reusable code in angular is a pain due to the fact that it doesn't have an inheritance model like backbone/marionette. People flock to these frameworks because they are driven by mammoths like google and facebook, and its really starting to kill my enthusiasm as a javascript developer. I mean even google realized how monolithic their framework was and rewrote the whole thing! TBH I've looked into react and it seems pretty good, but I'm still not totally sure what I would get out of react vs using marionette. It just seems to do the opposite of what angular does and embeds templates into javascript...
With phone gap your best bet on frameworks is probably ionic.
Didn't know that, Thank you.
Sorry, I had a knee-jerk reaction. You, are not an asshole.
Not really. CSS and HTML and the DOM are parts of the web tech stack you don't get with RN.
Well done! I am a huge fan of GraphQL. I've built my first API over a year ago and since then never looked back. There is a stigma that GraphQL is complicated. It is not (at all). The complexity kicks in when you start working with the request batching logic (but `DataLoader` makes even that easy). Otherwise, it just removes a lot decision making from the API interface design processes. If you are fan of strict types (TypeScript, Flowtype), GraphQL will feel like a RESTful API with strict types. Everyone should try it. GitHub's API is a good learning material https://developer.github.com/early-access/graphql/
If you have any questions of what I meant don't hesitate to ask, I really need some help but I want to do it mainly myself still
Unaware of any current plans to do that, though I agree it could work well combined with an easy way to make it appear as a desktop app, similar to what Chrome Apps could do. Looking up on the Chromium bug tracker, there is [this](https://bugs.chromium.org/p/chromium/issues/detail?id=707014) for it at a high-level.
oh thanks, seems kind of obvious now
but webOS uses Node, also. So, it's front-end structure is web/javascript, and it's back-end structure is javascript. :-) 
I was thinking about doing the same thing in Go or Ruby. It might be worthwhile to join our efforts?
Ok I was wondering what is the command you need to use to switch screens, in our class we just used scratch which made it easy as you didn't need the actual code. However for this project we are being obligated to use actual JavaScript. I tried to inspect element to find the code they used on the button however it doesn't show up. If not I could accomplish the appearance of switching screens by stacking elements on the same screen and just making the specific one appear with an on event button right?
And for my second issue I don't really want the code I just am wondering if it is a logical solution to make it so the answers the to the questions will be connected to the final screen displaying the personality
This reads like an advertisement.
It does, but I can second his enthusiasm :)
[removed]
Thanks! Solved.
&gt;For the no-semicolon style, the rule is, "never use semicolons, unless you line starts with ( [ or `". If you need to start a line with one of those characters, you can either put a semicolon first (so the line doesn't start with the offending character), or you can split the statement into two using a variable. This is a well-established coding style used by many projects, including NPM itself. There is nothing wrong about giving prettier.js support for a popular coding style. &gt; Unfortunately, I feel like many people see the no-semicolon style and think, "this is stupid, and you are stupid for using it." Well, that's where I disagree. Both styles are perfectly reasonable, both syntactically and visually. I don't It's not my case, I never said stupid and I provided the reasons. they might not look good enough for you but they are for me. I don't use others code in my project so in the end I don't care that much, as long as the js parser isn't updated to force you to write in this style ofc. I've never used something based on its popularity, many people adopting something isn't much a proof that this something is better.
/r/LearnJavascript
Browserify is a node script.
I've never come across an "app" that wouldn't benefit from a state management framework. Any "app" made by more than 1 person or has anything around crud typically benefits from a redux or equivalent "framework". The only "app" that wouldn't benefit is something like a static marketing site but that is not what I consider an app. People seem to ask this "is redux necessary?" question a lot for some reason. While, I agree you don't need redux specifically you do need state management and yes it is necessary.
How much did it produce? 
What does the word "headless" mean in this context?
Either my ancient OS X (10.6.8) is causing a problem, or I am using an editor with Safe Write enabled (mentioned in [issue 659](https://github.com/facebookincubator/create-react-app/issues/659)). I use Sublime Text. Maybe turning off atomic saving would do the trick?
Wow game on the main page of framework looks rad! But hey, there are lots of frameworks for game development and some of them are too with level editors and IDE's. Unity, Superpowers. Why impact?
I added that code (see my original post) but it didn't change anything.
means that this CMS is not tied to frontend, it can be used with anything. example, wordpress is not headless, has a build in CMS with frontend. headless means you can use this CMS with any frontend you want, angular/react/ember/vue/aurelia...
Had to stop watching 5 minutes into because of the typescript ranting. 
Would a switch-case be preferred here? I sometimes write ternary statements that may also work for a switch case, but personally I find this readable: var vertextype = lines[i].substr(0, 2); var vertexdata = (vertextype === 'v ') ? model.v : (vertextype === 'vn') ? model.vn : (vertextype === 'vt') ? model.vt : null; It parses a text file and checks what the next line begins with, and points to the proper object variable to add data to.
So that means it's an "admin panel" cms?
Hey guys, webpackbin.com Why don't all these people (codepen.io projects, codesandbox, webpackbin) connect and make ultimate online editor. Actually sad seeing webpackbin being forgotten over time. It was way ahead of it's time half of a year ago. Marketing problem?
&gt; since IE8 IE8 only knows about CSS2 selectors, though. :last-child and :not won't work, for example. Fortunately, IE8 support is rarely required these days.
Hey N3KIO, this is Michael from GraphCMS. We are soon going to release our pricing table and prices are going to be very fair for the headless space. We will offer a freemium plan that will get you going with small sites and apps. Premium plans with at least 100k API calls and 10 CMS users will start from 29$/month. How does this sound for you? 
Since you have a public API, how do you limit the run time of queries? 
when it's already late
pretty much yes
Well `document.querySelector` and `document.querySelectorAll` should be the way to do it if you don't need much. But if I may suggest you, just step away from having to query/manipulate the dom yourself...that's the new phase javascript is at, and it's possible with either Angular or React.
Does that only work with ES6 syntax?
nice
ahh i was mobile when i saw this post, didn't look much into the site. i assumed this was a self hosted solution, looks like its a PaaS or AaaS like firebase.
Thanks for your help. I was trying some different things and found all I needed to do was change the zIndex of the dot images to "-1" as I added them to the div.
Besides the `export` statement it does not, so just write something like: window.qs = function(selector, scope){ ... }
Could very well be, I was too lazy to to try it out. Although it is a bit of a hack, I am glad your z-index trick works for you.
In this particular case, it's easier and more efficient to set up a simple loading bar using DOM elements. Canvas is more efficient when you're working with a large amount of elements like with a particle effect or real-time game. :D
This. I don't understand where the hate for JSX comes from. 
This is a clone of Graph.cool? Like the site design is almost exactly the same. 
Thank you for your help but I managed to solve this myself function load(timeout, callback) { var interval = setTimeout(function () { chrome.fileSystem.chooseEntry( { type: 'openFile', accepts: [{ mimeTypes: ['image/*'] }] }, function (readOnlyEntry) { console.log(readOnlyEntry); chrome.fileSystem.getDisplayPath( readOnlyEntry, function (Entry) { console.log(Entry); clearTimeout(interval); callback(Entry); }); }); }, timeout ); } It spawns a file prompt that should last as long as `timeout`, then invoking a callback with one parameter, a string containing the full path and file name+extension! It's exactly what I was trying to ask here. I'm so satisfied with this, than you for all your help :)
React Native is React, with a bunch of additional libraries that allow the building block components (`View`, `Text`, etc) to translate into UI elements on the native side.
Exactly this. I don't mean to oversimplify Vue since I really like it, but in a lot of ways it basically is "React without JSX". And hey, with Vue you can also switch to JSX at any time if you decide you're actually okay with it.
Try and explain that to your "marketing" people though. All these things that annoy us as developers aren't necessarily bad for business in general. Retail stores make it complicated to get through the exit, why wouldn't you do the same for online traffic.
Could you preload all the audio clips on your client side and then just issue a command from server to play a specific clip by id or something? 
I appreciate your help. At that link listed above there are some other helpers like : // Add and remove event listeners: function on(target, type, callback, useCapture) { target.addEventListener(type, callback, !!useCapture); } function off(target, type, callback, useCapture) { target.removeEventListener(type, callback, !!useCapture); } Can you provide a simple JS example of that in action? var getID = on('a.clickme','click', function() { return this.getAttribute("id"); }); ? 
AHH. but qs('#foo .bar') would accomplish the same thing as qs('.bar', foo), yes?
What's the strongest reason for doing loadAt('./tmp/groceries.json', 'bakery.bread') over loadAt('./tmp/groceries.json').then(groceries =&gt; groceries.bakery.bread) literally just convenience? Or do you see it more useful for the write operations
This chaper of my book “Speaking JavaScript” is an intro to JavaScript ES5 for programmers (esp. Java programmers): http://speakingjs.com/es5/ch01.html The other chapters should help, too, especially the one on OOP.
thanks for answer, i'm now working with createjs and wanted to learn some new framework but in same time to stay in JS environment. When i "ask" google i saw that it is in good place on table https://html5gameengine.com that is the only reason :)
Well it's not recommended for normal development. I guess it's fine for this purpose. Using CSS to do this is better actually, because even if the content changes, still it'll be applied.
Man why the downvotes. Maybe JS subreddit should not have downvote buttons at all, since this subreddit is too easy to ignite with holywar and opinionated shit.
Read whatever Uncle Bob aka Robert Martin writes on TDD and clean code - you'll never look back ;)
I don't really like the coding style. 
I'm awed. Would love to learn how you did it!
How is the browser accessing the game in the first place? WebSockets? If so, are you trying to stream the audio, or just play an audio clip? If you are streaming, is it necessary? Or can you add a static `/audio` directory (or something)?
Are you concerned explicitly about async/await or generally all ES6+ features? Just to be sure, am I supposed to add Babel for the transpile step and export that instead? I didn't thought async/await would be problematic as Node is heading to v8 anytime soon.
I think I got downvoted for confusing Node with npm. Whatevs. Live and learn.
What about event bubbling/capturing? Maybe try turning those off? I'm not expert just guessing 
This first line creates a variable called App, which contains an function called App, which will be our app. It has a capitalised first letter as an indicator to you, the programmer, that it is expected to be invoked as a constructor, rather than be used as a normal function. var App = function App() { The next line adds a method called init to the App, which is publicly accessible from outside of the App function. this.init = function() { This animals line creates an array that contains the names of five different animals. var animals = ['cats', 'dogs', 'aardvarks', 'hamsters', 'squirrels']; This $list line uses the jQuery library to retrieve an HTML element with an id attribute of "myList". $list will contain a jQuery object that refers to that HTML element. var $list = $('#myList'); The forEach line causes the function to be invoked against each of the items in the animals array. animals.forEach(function(animal) { This next line uses a jQuery method called append, to add the HTML content to the HTML element that was found a few lines ago. Based on these being list items, it's a safe bet that the HTML element is an unordered list. $list.append('&lt;li&gt;' + animal + '&lt;/li&gt;'); Here lies the end of the forEach function. }); Here lies the end of the init function. }; Here lies the end of the App function. }; An app function is created by invoking the App constructor function. var app = new App(); This line initializes the app function, causing the animals to be added to the HTML element. app.init();
I prefer to use immediately invoked function expressions (iife) myself. var app = (function iife() { function initialize() { ... } return { init: initialize }; }()); app.init(); Or if you want to declare and instantiate separately: function App() { function initialize() { ... } return { init: initialize }; }; var app = App(); app.init(); 
So first thing those functions don't have return statements so getID would be set to undefined in your example. You could of course modify the functions to return whatever you needed. Second, "target" appears to expect an actual DOM element, not just a string like you passed in your example; think about it, can you say 'a.clickme'.addEventListener(...)? The answer is yes that is technically valid JS, but the String object does not by default have a method called addEventListener (you would want to modify your example to query the actual DOM node; eg document.querySelector, etc). Otherwise your example looks fine. Now regarding how to use these, it's pretty straightforward, add or remove functionality where applicable (or use removeEventListener when DOM nodes are being cleaned up, etc)
Are you running this on a local server or just plain loading into a browser? 
what ranting? this guy is not criticizing typescript
you can sometimes get away with not need curly braces to encapsulate block code for if statements, so I tried removing a few pairs of braces and found I could get rid of 2 sets and still have the code run. (244). I also thought aliasing Array would save some chars, but it cancelled itself out :-( &lt;canvas id="c"/&gt;&lt;script&gt;s=1024;c.width=s;c.height=s;t=c.getContext("2d");t.f=t.fillRect;z=Array(s).fill().map(x=&gt;Array(s).fill(0));z[1][1]=1;t.f(1,1,1,1);i=0;while(i++&lt;s)for(j=1;j&lt;s;j++)if(z[i-1][j]+z[i][j-1]&amp;1){z[i][j]=1;t.f(i,j,1,1)}&lt;/script&gt; 
Yeah, thanks. That's exactly what I was looking for! 
Hey turkish_gold, could you please elaborate?
Hey suitupalex, localization will come with a slightly more expansive plan end of Q2. We haven't fully decided on the pricing for this plan but it will be somewhere in the mid two figure range. This plan will also come with more generous limits. 
You have a js error on your site. Uncaught TypeError: $ is not a function It means jQuery is not loaded when this code runs.
Because people don't understand the difference between separation of concerns and separation of technologies. 
Why would that be?
Thanks a lot! Will do. 
Not clear on what you mean. I am not linking to a functions.php. I have &lt;script&gt;&lt;/script&gt; in the html.
This part: `&lt;a class="navbar-brand" href="www.meditatedwisdom.com"&gt;&lt;strong&gt;Meditated Wisdom.&lt;/strong&gt;&lt;/a&gt;`
The idea is that the `method` is abstracted in OO design, so the decisions are made elsewhere (in the callee instead of the caller)
That's on the main nav brand. The issue I am having is with the sidebar appearing. I also erased what you said and it did not fixed the problem.
Couldn't find any good imgur clients for node so I made this. Supports all imgur api calls including authentication and uploading. If you have any suggestions or find any bugs, do let me know. Thanks!
I really liked it, but if you are a beginner I think you should try to find another book which explains things slower and with more exercises. I like the books from No Starch Press.
This may be off topic but while your certainly gain some knowledge and skill learning AngularJS, the angular platform was basically rewritten and is moving forward as "Angular" with semantic versioning. It's a different beast than AngularJS, but it's definitely the future. Take your time though. Any learning is generally good. 
I started learning JavaScript using eloquent JavaScript. But I think You Dont know Js is a better option.it has lots off github stars and everybody recommend it.
It allows for the `instanceof` operator to work. I think it is a legacy feature.
Good arguments. I'll have a second look and hopefully shed WordPress
It is a new ES6 syntax called destructuring https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment
Your code is getting there. It works perfectly on "finviz.com" and not so good on many other websites. Can you make the universal javascript code to applies to all websites like on "finviz.com"? It fails to work on "cnbc.com" "marketwatch.com" and breaks many other elements on others. I will be happy to make a donation to your Paypal account for your help once you make a global dark theme userscript that works on all websites. Thank You
Thanks but that CSS code will breaks so many elements on many websites. I already know how to code CSS but not javascript. I use Stylus extension and "Chrome Global Black" userstyle on userstyles.org and it turns all websites dark. However, it also tamper colors within images and videos which I don't want. Therefore, I'm looking for a solution that doesn't do that with javascript. Any help is appreciated.
that line of code doesn't applies to all other elements, only on the body. I need codes that applies to all websites as mentioned in my post. Thanks though.
So I noticed. `instanceof` was only introduced in ES3. Pre-ES, ES1, and ES2 are probably the ones that still need it since there isn't `instanceof` yet.
Ah, I see. I was puzzled since Chrome 43 choke on that syntax. But I noticed that Chromium 59 no longer choke on it.
 var { color: fruitColor, count: fruitCount } = fruit; //is same as: //var fruitColor = fruit.color, fruitCount = fruit.count; console.log(fruitColor, fruitCount); //"yellow" 3 I knew about destructuring, but I didn't know you could rename the variables you took out as well. That's quite useful.
You can do this with CSS or JS. Since the CSS method was already posted, here's the JS way: document.querySelector('selector goes here').innerHTML = 'some new value'; The selector can be obtained by right clicking on the element in the element inspector and clicking `Copy &gt; [CSS] Selector`.
[MPJ got composition wrong](https://www.reddit.com/r/programming/comments/5dxq6i/composition_over_inheritance/da8bplv/), which means you did too. :-/
Your comment will get downvoted because of your needless and unsubstantiated brag, not because of the nature of your advice. 
It's mostly for school anyway. I got 4 years of time, so I would like to learn it all! 
I still think the funnest way is building something. If you can't do backend then pick a public api and build a js client around it. Up to you, just my two cents!
100% agree, I got ahead of myself there.
Hi /u/extremetechlover, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your work/homework for you.
Thanks for pointing it out. A PR making corrections is welcomed :)
Why don't you upload it to npm?
I did, it's under the name '@rmp135/imgur'. I use a namespace so you know it's my package.
A weekend project. Enjoy the Easter. :-)
Yeah...I got that...I guess the joke didn't land. Did you by chance read past the first sentence of the article? 
That's the npm namespace syntax. I'm very surprised I haven't seen it used more. It's slightly more verbose but greatly decreases the chance of installing an unwanted or dangerous module. I believe the GitHub syntax is just 'yarn add rmp135/imgur' without the at sign.
except Constr in the instanceof case needs to be callable. With isPrototypeOf, it just needs an object prototype property ;)
I agree, and you're not the only one. I know what closures are, and I just reread the section on closures: it's so confusing. 
There's a real danger with FP of making your code too "onion-like", where you have to step trough so many layers of abstraction to find exactly what it is you're looking for and is a common mistake people fall into when they first fall in love with FP. I know I fell into that trap.
What about ionic.js? Anyone got experience using it in production?
There you are! That ONE other person that feels the same as me about it! haha
Right? His screen name checks out 
It's funny because ConfuciusBateman's username is very applicable to their comment. ^^*beep* ^^*bop* ^^if ^^you ^^hate ^^me, ^^reply ^^with ^^"stop". ^^If ^^you ^^just ^^got ^^smart, ^^reply ^^with ^^"start".
Then how do other chrome extensions do it? Apps like: * Google drive * Text * Zip extractor * WhatsApp web You can't seriously tell me they get special treatment
The final result will be a chrome extension that operates strictly offline.
&gt; const buffer = crypto.randomBytes(4); &gt; return this._intToFloat(buffer.readInt32BE(0)); Doubles are 8 bytes, though. In the [0-1) interval, there are about 2^62 different values: http://stackoverflow.com/questions/2978930/how-many-double-numbers-are-there-between-0-0-and-1-0
That's true, it is. But there are still companies that will likely stick to LTS releases, and even after 8 is released will stay with node6 for a while. Typically projects do have a `dist` directory that includes transpiled code. The dist directory is published to npm and referenced in the `main` field in package.json
Reading it now and I agree. I have experience with Python and breezed through the language syntax chapters, but I've been taking the browser chapters much more slowly as it's all new to me. The project and canvas chapters didn't interest me at all though so I skipped over most of them. 
http://jstherightway.org/ has a good list of useful resources! 
My books are free to read online, if you want to check them out: http://exploringjs.com/
Gosh, really? I thought I've escaped the transpile-nightmare... Why would one stick to 6 (for a while) when you could have 8? Even numbers are LTS releases, aren't they? ... Well, I'll see what I can do. Btw., how far do I need to transpile down? Is ES6 okay? Maybe even ES7?
Lol bragging about your earnings in a pseudononymous community. 
It's a great book that focusses mostly on object oriented techniques. You will find that some tools in modern javascript use functional programming. This book will not teach you everything, but it's still a great intro to js. 
Yeah, Chrome 43 is very old. Why were you on Chrome 43?
I recommend this [watch and code](https://watchandcode.com/p/practical-javascript) tutorial to build a todo app using vanilla JS (and OOP paradigm). It is taught by Gordon Zhu who, evidently to me, has the right approach to teaching JS. 
Totally agree with this. Ive been doing JavaScript development for about 4yrs and just started this book a couple of weeks ago. It has really helped reshape my approach and understanding on many things. Big and small. I would have been absolutely lost if I started with it though. Some of the exercises would have been brutal as a beginner. 
Oh I'm not bragging, bragging would be telling you that my pinky finger possesses the entirety of your talent and productivity (which would be true). My point of listing my earning power was simply to illustrate to op why not all advice is equal in this subreddit.
Use Backbone. 
http://lmgtfy.com/?iie=1&amp;q=asp.net+vs+node.js
Mocking something up for a demo?
[My personal conspiracy theory] The people who run /r/LearnJavascript funded that book if I remember right. And BTW I personally fon't think its a POS, but I do think that it's pretty horrible to recommend it to a true beginner. I personally tossed the book aside when I saw this, with basically 0 explanation function isOdd(num) { if (num % 2) return true return false } If I remember right, there isn't much discussion about why he doesn't put braces around the if statement, or about 'if the result is a 1, then the one gets coerced to true', just writes the function and moves to the next topic.
**Here's a sneak peek of [/r/learnjavascript](https://np.reddit.com/r/learnjavascript) using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year!** \#1: [Learn Modern JavaScript for Free (topics covered: webpack, nodejs, npm, es5, es6, esnext, &amp; rxjs, typescript)](http://courses.angularclass.com/courses/modern-javascript) | [29 comments](https://np.reddit.com/r/learnjavascript/comments/4vz5y6/learn_modern_javascript_for_free_topics_covered/) \#2: [This pretty accurately describes my feelings on my JS learning journey so far.](http://imgur.com/zKJt5rb) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/5k71cn/this_pretty_accurately_describes_my_feelings_on/) \#3: [Github Repo with 100+ Free resources to learn Full Stack Web Development.](https://np.reddit.com/r/learnjavascript/comments/5zse5u/github_repo_with_100_free_resources_to_learn_full/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/5lveo6/blacklist/)
You have to ask the browser to ask the user to navigate to the file and select it for loading.
absolutely agree that eloquent javascript is a horrible thing to recommend. if you want javascript explained well, https://watchandcode.com is where it's at.
The thing that jumped out to me most is setting myContentsPtr. You could use a series of `else if`or use some math to compute it. .style1, .style2, etc. isn't very descriptive. The color would help or even better, name class based on its function on the page (.questionSpan, .answerSpan) Might be easier to set MyContent as ```` MyContent = ["blajhblahbal", "blaskdfjlasjdfas", "jlaksjdflajsdlfkas"] ```` That would make it easier to add questions or change the order. Oh, and that second for loop, you should do `for (var i=0; i&lt;Quest.length; i++)` that way if you change the size of Quest, it will still work. Okay now here's something new to JavaScript that you might not have covered yet, but I'm going to tell you anyways. Arrays have a new method called `fill` that will fill every entry with the value you want. So you could avoid the for loop and do `Quest.fill(0);` and, if your browser supports it, that should do the trick. [Read the documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill) but notice at the bottom it shows that it is not currently compatible with IE. YMMV, but it's fun to live on the edge. Hope this helps! You're doing great though, it looks a hell of a lot better than my first JavaScript code.
Isn't there already a bunch of if else statements around the myContentsPtr? Sorry if i sound a bit uninformed (because I am) but what do you mean exactly I replaced the for loop with the fill function and it worked well, thanks ! I suppose it'll look like I know what I am doing more now lmao
... all libraries wrap native functionality.
`var Quest = new Array(10); //this sets up an array for all of the answers that are given` There isn't a need to do this. Javascript isn't a lanaguage where you have to declare the size of the array before using it. You can just do this instead. Arrays in javascript are dynamic. `const quest = [];` You could either then use `quest.push('your content');` or `quest[0] = 'your content'`. They are different ways of adding things into your array' Instead of this, you could use the Array.prototype.reduce function for a more functional approach. Check out functional programming in javascript as well when you've moved past the beginner stages. After having learned functional programming, I have skipped using for loops and instead have used methods such as `Array.Prototype.filter, Array.Prototype.map, Array.Prototype.filter` From this: ` for (var i=0; i&lt;10; i++) { myScore=myScore+Quest[i]; } analyzer(myScore); }` To this: `let myScore = Quest.reduce((accumulator, currentValue) =&gt; accumulator + currentValue, 0); analyzer(myScore);`
I didn't say it was hard I said it was cruel.
It's not a good book for beginners at all. There's certainly good content in it but it feels like it was written for experienced developers transitioning into JavaScript. I'm assuming the first edition of the book was actually for good for beginners and then they went off the rails in the second edition.
[JavaScript Allongé](https://leanpub.com/javascriptallongesix) author here: I endorse [rauschma’s](https://www.reddit.com/user/rauschma) books 💯. Read them right away!
I understand that. It's just that I wouldn't want to take on another dependency when the native way of achieving the same solution isn't very difficult or long.
I like the simplicity. Apart from the change mentioned by *inu-no-policeman* about float vs. double I would suggest changing [this method](https://github.com/SkepticalHippo/crypto-random/blob/master/random.js#L20-L22) as well (just moving closing parenthesis): static range(min, max) { return Math.floor(this.value() * (max - min + 1) + min); } I expect this function to always return an integer, but that's not necessarily true if I call it like so: Random.range(1.5, 5) Also as there are no private class methods in javascript ([yet](https://github.com/tc39/proposal-bind-operator)) and all of yours are called statically (e.g.``` _getIntToFloat```) they don't have to be part of the class. They can be regular function definitions in the module. This way they are not exposed and your API shrinks to just the two methods you intend.
Thats scary - you wrote exactly the comment I was going to! :)
ajust go to google and type "udemy coupon codes". There's a coupon for 90% off right now - I just purchased that course for $15. Also, for the You don't know JS book, do you recommend all the books in the series, or just the first free one?
or it looks like you cheated :) you don't need the extra curly braces around the if. You can do else if (myScore &gt; 50) { myContentsPtr = 1; } else if(myScore &gt; 40) {....} 
I guess it's Babel's fault then. At least, it was.
&gt; Effective JavaScript is fantastic Huh... I haven't seen this one before, and I don't see it recommended very often either, but... + author is on ECMAScript committee + consulted with Scott Meyers (probably hence the "Effective" title) + forward by Brandon Eich I think I should check this one out. And it's on Safari Books Online too. :-)
Look up "single responsibility principle". Very easy to maintain if you do it properly. 
All programming is cruel until you understand it. Out of curiosity, where would you point this padwan? 
https://addyosmani.com/resources/essentialjsdesignpatterns/book/
Came here to say this. Its a common misconception I keep hearing.
If you're using node and express [this commonly used cors middleware](https://github.com/expressjs/cors) supports dynamic resolution. While it does look like [stripe supports CORS](https://stripe.com/docs/api#intro), there is [some interesting discussion](https://github.com/stripe/stripe-node/issues/247) about whether or not you should do it from the client side.
Well in GraphQL it's possible to construct queries that return arbitrary amounts of data, using pathologically poor queries. Like query { A { B { A { B { A { B { A { A} } } }} } } Because type A has a reference to B, and B has a reverse reference. A query like the above could return 10^10 items just for a table with 10 items. Do you have any restrictions to prevent queries like that from being sent? This is somewhat important since if you are developing a frontend app for GraphCMS, malicious users (of the app, not developers) could send bad queries as a denial of service measure against the app makers.
I believe is makes sense because functions are everything in javascript. Idiomatic javascript is less imperative and more functional than you would write in say, python or c#. Functions are first class citizens in javascript and there are no traditional classes, only prototypical inheritance. A 'class' in javascript is a function. The industry standard text, Structure and Interpretation of Computer Programs doesn't even cover assignment until halfway through the book. The reason is that you should avoid assignment, in particular, unscoped and/or flag variables and manual loops as much as humanly possible.
Braces were covered in cp 2. &gt;Many JavaScript programmers wrap every single loop or if body in braces. They do this both for the sake of consistency and to avoid having to add or remove braces when changing the number of statements in the body later. In this book, I will write most single-statement bodies without braces, since I value brevity. You are free to go with whichever style you prefer. Type coersion is covered in chapter 1. &gt;When an operator is applied to the “wrong” type of value, JavaScript will quietly convert that value to the type it wants, using a set of rules that often aren’t what you want or expect. This is called type coercion.
You're not alone! This book doesn't have any of the things I'd want from a beginner book. For one, he crowds variable and function namespacing, and names things too tersely, which makes examples hard to follow. The pages break in weird places. The structure of his code relies heavily on callbacks, requiring constant flipping pages to keep oneself acquainted with the code. Even his style choices (omitting curlies for if-conditionals, for example), aren't the most clear/beginner-friendly choices. This book makes itself really hard to follow, even when addressing simple concepts.
The first 3.5 hrs of [Understand the Weird Parts](https://www.youtube.com/watch?v=Bv_5Zv5c-Ts) is free on YouTube. I recommend people watch some of that first, it's definitely a different kind of course, more like watching an interesting lecture than some of the interactivity they may be used to.
It is difficult to say what exactly is wrong without seeing the rest of your code. This function you've posted looks fine, so I'm going to make a wild guess and say that you probably have something fishy going on in your HTML, most probably you have multiple elements with id "subchk". 
I've used Chrome Cordova Apps before, it lets you build apps for Android and iOS in the standard formats (apk for android, haven't used it for iOS) with web technologies. It's based on Apache Cordova, but adds some nice features like a more user-friendly command line and debugging interface https://developer.chrome.com/apps/chrome_apps_on_mobile
That's neat. I had a passing idea for a game where different weapons had different random distributions for damage/to-hit, and abilities could affect the weights. This library would be perfect for that.
I have a problem with pretty much everything I've read, (ch.1 - 3). lol Now, of course, I can only speak for myself and it's only my opinion. From what I've read, you are definitely in the majority in liking it (although I'm glad to see I'm not quite as alone as I thought in disliking it). I'll try to answer your question and point out why I didn't like certain things: 1) the book is definitely written with the *intent* to teach complete newbies to programming. Not newbies to JS. Newbies to *programming*. The reason I say that is because if it weren't, the author would never have written this in ch. 2: &gt;Variables &gt;How does a program keep an internal state? How does it remember things? We have seen how to produce new values from old values, but this does not change the old values, and the new value has to be immediately used or it will dissipate again. To catch and hold values, JavaScript provides a thing called a *variable*. var caught = 5 * 5; "A thing called a variable" is not something you would write if the intended audience had ever touched a programming language. So the book is written for complete beginners. But look at most comments. Even those that *like* it say it's not for beginners. 2) This is a relatively small thing but I just can't help thinking how stupid it is... &gt;After a variable has been defined, its name can be used as an expression. The value of such an expression is the value the variable currently holds. Here’s an example: var ten = 10; console.log(ten * ten); // → 100 Why would you use a variable **name** of *ten* to assign the value '10' to? It could make a newb think that there's some kind of relationship between the value '10' and the variable name. Remember, this is the first time they have even seen the concept of variables. Also, you'd never see this is any program for any reason. But I admit this is bordering nitpicking. 3) Nitpick #2: I think his idea of thinking of variables as tentacles is much more confusing than boxes. Also, this is his entire explanation of "undefined": &gt;When you define a variable without giving it a value, the tentacle has nothing to grasp, so it ends in thin air. If you ask for the value of an empty variable, you’ll get the value undefined. One tiny paragraph. All text. No examples. Again, we need to remember that he is talking to people who have never programmed in their lives. 4) Under "Return Values", he uses this example in ch. 2: console.log(Math.max(2, 4)); Um... the only problem here is that he doesn't even talk about parameters until ch. 3. 5) Braces. Omitting braces is error-prone. Who really codes like this anyway? I know there are some, but isn't it extremely few? Just cuz you can doesn't mean you should, and doing so as an introduction to coding is just negligent. 6) I can't believe how dumb this analogy is: &gt;The most obvious application of functions is defining new vocabulary. Creating new words in regular, human-language prose is usually bad style. But in programming, it is indispensable. 7) Finally, we get to closures. He *just* introduced functions, parameters and "optional" arguments (nevermind that he never actually explained the difference between parameters and arguments) and he's already talking about closures? All of this might not be a big deal if you're a programmer and you just want to learn how to do everything in JS, but once again, we are talking to newbies with this book. The 'simple' idea that functions return values was only recently (and barely) touched on... now he's not only talking about returning entire functions, but also how they maintain access to the local variable afterwards? It's too much, too fast. Also, he never talks about why he is assigning the function and its parameter to a new variable. Oh, and then he's executing the variable! When you already know how all this works, it's easy to follow but for someone new to programming, these are not easy to wrap your head around and take time and a lot of repetition for it all to 'gel'. 8) After the most incomplete and rushed explanation of closures I have ever seen, he goes to recursion. Recursion! lol. Come on. Think back to the first time you saw recursion. The idea of the function calling itself is pretty simple in that it's just really a loop. If he used it to console.log 1 - 10, it might not be so bad, but *THIS*? lol!!! function power(base, exponent) { if (exponent == 0) return 1; else return base * power(base, exponent - 1); } console.log(power(2, 3)); // → 8 This is getting long, so I'll end it here, but essentially, we have a book that was intended for true beginners that is too complicated for beginners but covers topics that intermediates would fall asleep reading. More importantly than the inherent difficulty of the topics themselves, what I hate most about the book is just how bad the explanations are, regardless of who is reading it. I don't find that it sheds light on anything at all. In fact, that's the question I'd love to know the answer to... what does this book explain *well* (better than other sources)? (For those reading this, remember this is just one person's opinion and LOTS of people disagree with me and think it's a great book. You should have a look at it and decide for yourself. It is, after all, free on the net.)
all i know about Fiber is that it's faster and maybe uses some async microtask scheduler/queue. the readme does nothing to clarify how v7 is Fiber-like unless the reader is already deeply knowledgable about Fiber intricacies/api and can readily see the parallels.
wrote a command line todo application with node.js [duty](https://github.com/zombieleet/duty)
I second this. If you have lots of constructor logic, you likely have a big, complex object. Consider breaking your object down and then composing objects to set up your state. The dependency injection pattern can help with this, too. 
I think the book is patchy. There are some good sections and there are some bad ones. It struck me that there is no definitive text or guide to javascript, you have to draw from many sources and have the same concept explained in several different ways before you begin to get a handle on it. Having said that I feel everyone looking to learn Javascript should keep David Flannigan's book handy for reference.
at the es2015 real class keyword. class A { } class B extends A { } no need for a framework when it's part of the language now
See this link for an in depth comparison https://gist.github.com/ilyaigpetrov/f6df3e6f825ae1b5c7e2
I believe what he's doing is running A# on the same graph. Alternatively, the A# search should create a new graph for each additional node in the search (and can use dynamic programming for optimization). This modified A# search should result in the optimal path, accounting for the snake tail following the head. edit: idk how to format on mobile, A# is A*
https://news.ycombinator.com/item?id=14125585
Attended this talk in Cologne on friday, it's indeed very nice.
Choose whatever you enjoy using most. I prefer koa syntax because async await seems so clean to me. But you have to understand express is the most popular and will have the most articles about it. At the same time koa is similar to express with a minified codebase and somewhat altered syntax. 
`react-native` newbie here. Is there anything specific about `react-native` building these apps that would not have been covered already in dozens of `react` articles on the same subject? I've been working with `react-native` just a couple of days (though I've been working with `react` more or less since the day it was made public), and apart from detaching from "divs" and thinking in react-native components there isn't much/ any difference in development challenges. Therefore, if you do do the series, focus on the UI only layer, event handling, etc. Leave out logic altogether and refer to the existing resources for that. Of course, maybe I've been doing everything wrong the past few days. :-)
can exists an AI without strategy?
In my view, HapiJS is the best in terms of architechture. The plugin system is well designed and logical to use. This is probably the main draw of HapiJS. Edit: To elaborate a bit on the plugin system. The problem that Koa solves, compared to express, is the layered nature of the middleware systems. In Koa, middleware can yield execution to another middleware and get control back later. It uses the async system to accomplish this. But this is in actuality a pretty complicated solution to a simple problem, namely that the layered approach has major drawbacks from the start. In comparison, Hapi has a flat plugin-approach and the order of plugins doesn't matter as much (it still matters a little bit). This makes the architechture less prone to errors if you change something. The ecosystem is much smaller than express and koa though. Not that you will have trouble finding what you need, but there are just not many options to pick from. You can pick whatever you prefer, with confidence. All of the frameworks have enough traction that you wont find yourself with an abandoned framework in a couple of years. 
I have heard that HapiJS is the 'enterprise' solution, is that true?
Just as an FYI, the withArgs example in the Stubs section won't work as expected since the withArgs method is not actually properly implemented in Sinon - it will only ever react to the last "inline" spec: var stub = sinon.stub(userService, 'getUser') .withArgs(1).returns(new User(1, 'User1')) .withArgs(2).returns(new User(2, 'User2')); // is exactly the same as var stub = sinon.stub(userService, 'getUser') .withArgs(2).returns(new User(2, 'User2')); See http://nikas.praninskas.com/javascript/2015/07/28/quickie-sinon-withargs-not-working/ for more details.
I would not focus on OOP per say. You have 3 major way of thinking your programs: imperative, OO and FP (functional programming). The best JS programmers are very pragmatic about what they use. And they value simplicity. In that regards the best code bases are a mix of imperative with FP concepts thrown in and a subtle touches of OO. But OO in JS is probably the less efficient and elegant way to solve problems. Pure OO tends to bring its lot of heavy abstractions and bloat.
Demonstration?
&lt;td id="subchk" class="subchk"&gt;&lt;label&gt;&lt;input type="checkbox" onclick="myFunction()" name="subchk" value="subchk" checked&gt;Submission&lt;/td&gt;&lt;/label&gt; &lt;td id="objchk" class="objchk"&gt;&lt;label&gt;&lt;input type="checkbox" onclick="showHide()" name="objchk" value="objchk" checked&gt;Objectives&lt;/td&gt;&lt;/label&gt; &lt;td id="detchk" class="detchk"&gt;&lt;label&gt;&lt;input type="checkbox" onclick="myFunction()" name="detchk" value="detchk" checked&gt;Details&lt;/td&gt;&lt;/label&gt; sorry about that, but here is the html portion. Now i have other elements such as "objchk" and "detchk" that are supposed to take on the effects of "myFunction". The only problem is that whenever I select another element it shows an element that I had previously selected when it is supposed to keep them all hidden. I hope this all makes sense as to what I am trying to accomplish.
How Many Products or scripts you have?
We have customise php scripts you can create project n customize as well in 30 scripts
OK
What rule is that then? You should mock all dependencies that get touched by your test. How else can you test what happens when a dependency fails?
No, you should NOT mock all dependencies that get touched by your test. If you do that, your tests will be tightly coupled to your implementation and you'll end up with brittle tests that make refactoring and changing code to add new features hard. There are some occasions where a mock is necessary. An example is when your dependency makes remote calls or something like that. Another example may be what you just said - when a dependency fails (but that would usually mean it's a dependency that makes some kind of remote call, as most dependencies shouldn't just randomly fail like that). Those are examples where mocks are necessary. But it shouldn't be the standard thing - only do that when you have to. For example, if your method takes in say a DOM element and extracts some text from a DOM node, and under the hood you're using jQuery, your test should not mock out jQuery - in fact, your test shouldn't even know or care that you're using jQuery in that instance.
It says page not found
[JavaScript Allongé](https://leanpub.com/javascriptallongesix) helped me understand how JS could be used in a sane way (which happens to be functional), ending several years of a difficult relationship with the language. Heavily recommended.
I completly agree with you. Mocks should be used only when they are strictly needed. Other case your increase the complexity of the tests more than needed.
&gt;private dependencies shouldn't be mocked. Yeah, this is basically what I meant. It all comes down to context and understanding the value your tests are giving you at the end of the day. I agree with you in that unit tests should ideally only fail if the behaviour of the code changes in such a way that it no longer produces the expected behaviour. And yes, it is about being pragmatic. I always aim for tests that support change, but sometimes that involves making judgement calls based on your current understanding of the problem, the context of the problem domain and just your own experience really.
 I tend to wait until all the environments one might write for support it before suggesting to people that they adopt a particular approach. Can lead to unrealistic expectations and frustration otherwise. I keep thinking of all the good things Backbone brings with it.
Agreed. Mocks are useful to contain scope and simulate failure scenarios, not to reproduce dependencies.
...you mean prototype 
Thanks.
Thanks--appreciate it.
Haven't used Hapi but for a long term project I would use Express in favour of Koa even though I like Koa better. Why? Because it has a larger ecosystem and more developers know it.
There's no solution to your issue, you will always lose if your boss wants a library solution. I'd say that vanilla solutions usually fits when you're the king aboard, or in a job that requires that. It's sad but that's the reality.
I assume you're using WordPress. Find the function.php on your theme folder, search for the wp_enqueue_script() line that your theme using it to load the js file for the toggle menu. By adding the last parameter ($in_footer) to true will load the script at the end of the page (before body, wp_footer)
Agree with this comment. We have unit tests that mock but we have a later build phase that runs integration tests that use the actual dependencies. This often ends up being REST calls and other interactions with the system outside the repository. These tests often do less functionality wise than the unit tests and are more "smoky" because that keeps the maintaince costs of those tests lower
yeah, I find more and more I just have to go with the tide.
If stripe somehow manages it I would be very curious about how. You can use `var scriptsSoFar = document.getElementsByTagName("script"); var srcAttrOfRunningScript = scriptsSoFar[scriptsSoFar.length-1].src;` to get the src tag of the running script and then send it along with the requiest, but a malicious individual could just modify the script and hardcode the value. Why do you need this? What scenario are you preventing?
I swear this guy needs to learn to get to the point, it's super super frustrating to read anything by him. If you're going to make a claim such as: "you're better off running redux for beginners" then you really need to qualify the claim "before" react team members say that people should ignore you. The fact that he goes "oh well now this is a meme / you didn't get where I was going" is really a fault of your own. Redux requires it's own completely different setup, and maybe the beginner doesn't want the overhead of a different library to offset you know... just learning setState. I'd argue learning reducers / actions will be much more than just learning how setState works. Also sorry 99% of the time people aren't setting state 3 times, the subsequent setState's depending on the previous... sorry. Most "newbies" would just add +3 rather than add +1 with setState 3 times.
Uh, all the apps you listed above? But really, [this](https://www.html5rocks.com/en/tutorials/file/dndfiles/) is the first result searching "load file into browser" -- did you not even search? 
Yes please!
Last week I put together a couple of small helpful modules: **debugging** = debug + callsites + derived namespacing https://github.com/busterc/debugging (works in browser and node) and **ious** - use express middleware on socket.io namespaces https://github.com/busterc/ious 
¯\\\_(ツ)\_/¯
Yup they're pretty digestible.
I wish this guy and his antics wouldn't pop up in this sub so often. I really, really wish for that.
This guy again...
I'm a design noob, but I'm in school for HCI and just took a web development class and lab. I'd be happy to help style the site for you, if you don't have time!
Hi /u/Zecty, if you have a specific question and have already attempted to answer it, then we're more than glad to help, but we're not going to do your work/homework for you.
No like, how difficult will it be? Is javascript enough to get it done?
yes
&gt; In this case the referring Object will be "myObject". Let´s assume I dont have this information, all I have is the console telling me, that this points towards an Object. Is there a way to get the exact name(in this case I would be looking for "myObject") of the object where this is pointing to? &gt; Let´s move on to my second question and extend the second code snippet by one line(this.age = "20"): In JS you don't have proper 'classes'. When you create an object (even from an OOP-Class/constructor) you are creating an instance. Since in that example you are trying to get the name of the instance (a variable) which just isn't possible in JS (without hackery &amp; eval()). What you are trying to do is use a OOP-Class which you don't strictly have to do; but its a coding style I like so I continue to use it. In what you are trying to do I think you want: function MyOOP(opts){ this.age=opts.age?opts.age:20; } MyOOP.prototype.giveMeSomeName = function() { console.log(this) }; var myObject = new MyOOP({age:20}); From creating an Object from a Constructor you can check the 'instance of' which is a form of checking inheritance of that constructor object (aka all but primitives will be instance of Object). console.log("Name: ",myObject.constructor.name," instance of MyOOP: ",myObject instanceof MyOOP); That way you can check the 'origin' of that object.
Hapi is the best.. out of all. The plugin system rocks, plus so many plugins, automatic UI generation, swagger, API Models.. basically you just need to plug your business Logic and you are done... in a matter of minutes
that's good.. check es6katas.org may be you can get a hint too. 
100% yes from me.
Yes sure. Up for it
Have you found any good alternatives? Because I agree, but we still use it because there doesn't seem to be much out there that is better
I like a slate a lot, but it's not trivial to implement. I'm using it in an internal app and the amount of formatting logic you have to write (even with the included examples, which are great) is pretty hefty. I think it's a better alternative than draft-js, and tinymce, and basically everything else I've found. Just takes some getting used to. 
It's pretty stable, and it's under active development so it's only getting better. 
What website?
I'm guessing http://www.nike.com/us/en_us/c/nikeid
I was looking for something like this. Thanks!
Have some artificial intelligence, but I can't be called as a bot.
Yes, jasmine / jest: https://jasmine.github.io/2.0/introduction.html#section-Spies https://facebook.github.io/jest/docs/mock-functions.html 
Which ones in particular? I'm a maintainer of sinon and would be happy to help if i can
Not sure off the top of my head, but you could try checking `document.activeElement` in your blur handler and see that element is in your whitelist. 
Ok I've downloaded a bunch of youtube videos on node and I have somewhat of a better idea of what to do now. However, I do keep running into errors. I'll take some screenshots and post them in a little while.
If you are looking for sinon alternatives, there is https://github.com/testdouble/testdouble.js It's a very well written library by a guy, who is an expert in mocking, spying libraries.
&gt;here `this` actually references the function `giveMeSomeName`, not `myObject`. That's just incorrect. `this` refers to the context in which a function is called, not the function itself. var myObject = { myMethod: function() { console.log(this === myObject) // true } }; function myFunc() { return this; } var myOtherObject = { myFuncReference: myFunc }; console.log(myFunc() === window) // true console.log(myOtherObject.myFuncReference() === myOtherObject) // true Your next example will throw a syntax error. var myObject = { var that = this; // This is not valid } That syntax works in closures, and would be used like this: var myObject = { myMethod: function() { var that = this; someAsyncMethod(function callback(result) { that.prop = result; console.log(myObject.prop === result); // true }); } } Though it can be avoided completely using more modern syntax var myObject = { myMethod: function() { someAsyncMethod((result) =&gt; { this.prop = result; console.log(myObject.prop === result); // true }); } } &gt; you need to declare enemy as a global object (window.enemy) or move the functions inside the scope of create: There are very few reasons to put something in the global scope. Moving everything into the create function would be even worse, because now all of your game logic is in a function that's meant to simply add objects to the game world. Instead attach everything to `game` (better the game state object, but since there's only one state being used this is sufficient). function create() { game.cursor = game.input.keyboard.createCursorKeys(); game.tank = game.add.image(200, 75, 'tank'); game.enemy = game.add.image(0, 0, 'tankEnemy'); // OR game.cursor = game.input.keyboard.createCursorKeys(); game.entities = { tank: game.add.image(200, 75, 'tank'), enemy: game.add.image(0, 0, 'tankEnemy') }; } and then your other functions would look like this function update() { var cursor = game.cursor; var tank = game.tank; // or game.entities.tank // ... enemyMovement(); } function enemyMovement() { var enemy = game.enemy; // or game.entities.enemy }
It's still the case - I checked 2.1.0 on plunkr before writing the comment. Furthermore, as mentioned in the post this is a conscious design decision.
Yeah would be really useful :)
That looks pretty handy, and I love your demo setup. Succinct, but descriptive.
Although I knew pretty well how react worked it was confusing to me that you choose to use the new modern (shorter) ways to type the first examples. Understanding the fundamentals and a new way of thinking about coding with React is enough. Adding things like the "new soon to be accepted shorter ways to initialize state" just makes it more daunting to do this by yourself *(now the user needs to make sure to have Babel properly setup)*. I liked the first part but really disliked to see code snippets I understood by just looking at them be converted to new "modern" ways to type simple things. Now I have to think harder about what that new thing really did (convert it to the initial code in my head) making it harder to follow along what else happened as the tempo was pretty high.
... no I don't. the "class" keyword is a reserved keyword in the language now, which is why I said "class keyword". It's syntactic sugar for creating prototypical inheritance, but the keyword in the language is definitively "class" https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes 
I removed the comment to avoid confusion/misinformation. The syntactic errors are from trying to cut and paste too quickly and the rest was from confusing obj properties with `class` properties. 
This is the type of thing I like to see. So often I see "light as a feather at 4kb".
Maybe we're all bots...
Didn't work too well on mobile. Unless I was supposed to make crazy robot noises?
Honestly, I would start with [javascript.info](http://javascript.info/). There's enough content there to keep you busy and the author seems quite smart.
1. Yup, the SSR throughput definitely makes a big impact and is overall a pretty negative thing. 2. That's correct, depending on your situation, you can SSR the first page, and then bootstrap all of your client code to make the rest of the site CSR. On hindsight, I feel that I should have done a better job pointing out #2 and that holistic picture.
I work on the front-end team for NikeiD! The short answer is that we use &lt;canvas&gt; for the image processing, and only the specific portion of the image is changed as the user makes their selections in the experience. Backend rendering would be too slow, so that's why we use the canvas as it allows for much quicker updates.
I don't if this guy is just ignorant or what when he refers to Dan. When the creator of Redux that you learn setState first, there's probably a good reason. 
How would you use jest for api testing? I haven't seen a guide on this use case. 
Unrelated but are you the senocular that used to be all over the actionscript 2 forums back in the day? (I don't remember the specific site). I was posting there when I was like 14 and you always came through with the most well explained answers to anything you were like my hero back then haha. Just had the biggest nostalgia trip seeing that name again
&gt; Most of our pages on walmart.com are using server side rendering (henceforth SSR) with only a few unique exceptions. from the link
* Pick projects and just start building things * You will know what questions to ask when you need to ask them after you start building things * Don't let intimidation of the technology influence your direction of learning * It is ok to fail, so fail often. The more frequently the better. You will learn what works and doesn't work. Just remember if you can iterate 10x faster than the next guy you can 9x more often and still more productive than the guy who never fails, but is 10x slower. * Always remember every developer occasionally feels fear and intimidation. Most developers around you will be cowards. What makes a rockstar is having the most practice and being able to push through the fear and intimidation. Don't let the cowards get in your way or provide weak advise.
Definitely! Would it happen through Reddit?
Declarative programming is the *what* and not the *how*, which is typically expressed as logic hidden behind well named abstractions. This seems to be the more popular option. The opposite approach is called **imperative** which is *how* as directly as possible... no politeness, and no bullshit. Just answer in as few lines as possible. This is not the more popular approach, but this is what I personally prefer.
It isn't *only* the `$` and `$$` quick access. If that is all you want, then absolutely hand-code them into your app and be done. Blissfuljs provides a few other really nice additions that make maintaining apps easier. Like the `$.fetch` API for an XMLHttpRequest. Instead of using the native `fetch` API (which is newer-browsers only and has the pitfall of it can't be cancelled), you use a fetch-inspired API style with promises but without restricting your support to newer browsers only (or having users hit a bug with failed requests not cancelling.) There are other really useful pieces, such as `$.include`. With that you can defer loading of external resources until required for execution. Or just to verify that the resource has been pulled in and executed properly already. This helps in building more defensive apps and trying to handle errors cleanly throughout the process. I'd say take a look at the full API provided and see what you can make use of. Then check the source and try to make out your own minimal build with only the features you want. That is if you're worried about the 3KB total weight when minified and gzipped. If you don't mind that size, then just use the full library if you want some of its other features. Blissfuljs is certainly not "unnecessary" but it also isn't "necessary". It all depends on how you are building your app and what the target audience is. It is however, super lightweight so at least trying it and seeing if the features it provides helps you build better should be simple and without much detriment. And if you decide later to pull it out, converting things back to absolute vanilla or manually writing the few pieces you really want shouldn't be a big problem either.
I personally use [Supertest](https://github.com/visionmedia/supertest) for (local) web API testing, with Jest snapshot assertions on the response bodies. Edit: something like this: import app from ... // Koa app import supertest from 'supertest' const server = supertest(app.callback()) // For Express you just use `app` describe(`GET /api/books/:id`, () =&gt; { // Put some data in the test database, or mock it... it(`should respond with book matching id`, async () =&gt; { const response = await server.get('/api/books/2') .expect(200) .expect('Content-Type', /application\/json/) expect(response.body).toMatchSnapshot() }) ... }) Edit 2: [This talk](https://www.youtube.com/watch?v=HAuXJVI_bUs) has some more info on snapshots and how they work. Edit 3: You will want to change the test environment to `node` instead of the default `jsdom` via command line or configuration when you're not testing frontend.
We do not do this, but it's due to our circumstances. We have teams that own separate pages and these separate pages are their own apps, so each page has a different bundle fundamentally. 
Sure. And there's a hybrid approach where the client makes a request, and an html fragment is rendered server-side and returned to the client for insertion into the page.
You guys killed it. I really like the experience on there. I have family and friends that work at Nike and have been trying to get me down there but I don't want to leave Seattle. I hope you guys decide to open up a Seattle office one day :). 
What advantages does that have?
You don't have to download the entire request payload (including scripts, css, header/footer, other boilerplate, etc.) as well as re-initialization of any js libs.
I'd be interested to see how others handle a more complex app. Everything I've seen so far is either an extremely simple use case or parts have been omitted for the sake of keeping the demo easier to follow. We haven't encountered anything we haven't been able to solve so far, but sometimes I second guess an approach after the fact. Would be nice to compare code.
best of both worlds. You can get all the SEO goods and enough content above the fold to jump-start your application and give a perceived performance boost while your JavaScript is a-parsing and getting ready to render, if needed, below the fold to continue the experience. 
TLDR; The author doesn't like new, more powerful and generic features being available on the web. Then ends with a plug to their library for handling these new features.
I would call it a trade off, not a bad idea. It's generally easier to scale with CSR than with SSR, especially if you're doing something like including user data in that SSR (making it harder to cache or otherwise optimize). Note that very early on, the article states "we put a lot of time and effort in optimizing SSR performance". The caveats repeat that concern of server side performance.
aka [turbolinks](https://github.com/turbolinks/turbolinks)! This may have been a practice before that, but that was the first use I'd heard of. Can get a little tricky with events, but definitely big benefits. youtube.com does this and I quite like it.
https://learnreactnative.design I'm really looking forward to making this. I didn't expect such a stellar response from the community.
I never did any AngularJS development but I've been working with Angular 2 for the last four months and thoroughly enjoy it. It appears to be a pretty massive step forward from AngularJS and while it's not as popular as React it's seen tremendous growth.
I did for three years, yes, at a high school in Seattle. We ran a bit of a different program than the standard TEALS offering though, in that ours was a post-AP project based class. Happy to answer any of your questions. 
Look into [arrow functions](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions). Then you don't have to worry about the object that `this` points to changing within each arrow function. a.forEach((entry) =&gt; { this.addHolder(entry); }); You can also simplify your code with arrow functions: a.forEach(entry =&gt; this.addHolder(entry));
&gt; It seems pretty obvious to me that forcing the client to do your template rendering is bad idea. Especially since moat backends can render templates much faster and can often only rerender on changes. The bottleneck is DOM, so unless your template engine/logic/language is horridly inefficient, it doesn't matter. DOM is rebuilt and re-rendered no matter if the origin is server or client. In fact, it'd be "pretty obvious" that client-side rendering allows much more refined partial updates, compared to server-side reloads.
cells[c][r] should never be the same because it only goes through this function one time. What's inside the cells is that {x: 0, y: 0, color: "#FFFFFF"} I wrote above. The x, y coordinates are just telling my program where to draw the square on the screen (they're measuring pixels). The c and r represent the x, y coordinates of each cell in relation to other cells.
They use cookies. Absolutely disgusting. /s
Most time you look into two very different categories, you discover they are just the two extremes of a spectrum of possible states. So it is with declarative programming. It just means a very high-end abstraction, as void of implementation details as possible. As abstractions always evolve and we keep adding layers, but there are never enough layers... if you have the patience and persistence you can successfully argue that either everything or nothing is declarative.
Can I get off of this merry-go-round, please?
Riot is 9.8kB gzipped.
Exactly. And an important factor that makes CSR vs SSR, as a generalized argument, moot is that it really depends on your usecase. Your bandwidth is going to be eaten up either by client side assets on page load or by handshakes to and from the server in addition to repeated content that is not cached. There are many factors to consider here like how long customers will be on your site, how many different pages they'll access while on your site(rerendering a full page each time is slow and annoying and wasting handshake bytes), how slow their network is (avoiding handshakes is key in India), and many more things. I sped up a page at my last company from 5s+ page loads to 600ms by preventing full page renders. Granted, they weren't doing any SSR at all, but all I did was capture a form post, send it with xmlHttpRequest, capture the response, and update the content of the page. It allowed me to enter timesheet entries without dealing with a full page load after every entry. That small amount of data entry and large amount of CSR on each page load and network requests screamed CSR. We weren't saving on bandwidth or anything with my approach, but the result was immediate and obvious. To me, as a general rule, not utilizing SSR for the first page render to your site(at least ATF content) is as bad a move as not handling rendering primarily on the client after that initial page load. 
Is this any better than mocha? Currently using mocha plus chai for my testing framework. Tried jest when I was learning react. Liked how it only ran tests on new code. What are your thoughts on it?
[Conway's Law](https://en.wikipedia.org/wiki/Conway%27s_law).
&gt; This may have been a practice before that Yep - Drupal(!) was doing this in 2008 and calling it AHAH (asynchronous HTML and HTTP, by analogy to AJAX) years before Rails introduced turbolinks. Drupal's method was (typically) ham-fisted, ass-backwards and fiddly where turbolinks was a general solution and was much more nicely integrated into the framework, but AHAH, PJAX and other techniques were around for a long time before Rails jumped on board.
I can only add that the second example from the article, called "Manual Mocking Solution", is actually very reminiscent of "Property injection", which is actually a dependency injection variant.
bullshit. why would DOM interactivity HAVE to be done by OOP. OOP often complicates things which should stay simple.
Ah yes, I remember "PJAX" now!
Declarative/imperative is completely unrelated to scalability. The scalability of an application goes to its internal organization and the speed with which features can be added or extended without regression. As far as simplicity you could easily argue a bunch of extra code for abstractions and interfaces is the opposite of simplicity that requires additional maintenance beyond the core requirements of the application code.
Yes, you have to use cookies.
It depends, if your first page is user related you cannot just simply cache that.
Don't pretend you won't just get back in line a while later to ride it again!
 This blog post is insane. The number of variables involved makes it impossible to debate. The fact you didn't even explain which protocol you're using or more networking data is sad. Not everyone uses chrome so they are doing the full TCP handshake. It's a simple logic problem. Would opening an app on my computer be faster if it needed to fetch itself from some server everytime I opened it. Or would it be faster if it was on disk and ready to use? Maybe Walmart just doesn't know how to build client-side web apps and apis properly? Also, think about threading. CSR is like a huge thread pool where you can push a lot of logic off on each client. Why waste that benefit and do the same logic X client views. 
How about some full site metrics? Can you judge page loads on an unloaded server?
Seems strange to measure this with the assumption that you will always be able to justify enough server to instantly service every template, that you can ignore client side caching, and how CDNs affect things at larger scale. A vast oversimplification. 
I would hope that SSR is not happening on the server thread. Either using a web worker or a separate service. While an individual render pipeline may be restricted to 2/second, on a 20-core/40-thread Xeon, you should hopefully improve your pages-per-second. Also, just spitballing, but in a server environment were memory availability is generally greater, might it make sense to memoize components?
Tons of free content on the web. I think getting fundamentals down before worrying about touching any framework is a good idea because all the framework does is abstract some code away so it's easy to get used to the tool while not understanding what's happening behind the scenes .
Authentication is fundamentally stateful. Unless a new technology pops up, cookies are still the best way. Storing session data in local storage is incredibly inferior to cookies.
Author forgot to mention the largest benefit of "Server Side Rendering": Not using javascript. 
You might want to re-read. They're using Javascript for all of it.
I was looking for something like this. ty!
Disclaimer: I haven't run your code so I may be wrong here. I think you're getting something a bit tangled here - so first off, while I do see a way as you describe to run karma and mocha together I don't understand why you'd want to. My understanding is mocha is used to test Node.js code and Karma is used to test frontend code so you only need Karma without mocha. Next, in your test you're using `require()` to bring in your code that you're testing but require is a node.js thing it's not a frontend "browser" thing so that may be why your test is not working; in my experience you tell karma what files to load in the config and point it to all the frontend JS code you want to test then you can just access everything as globals inside your test.
Ooooooh. You know, having not solved this for a while now I'm beginning to think you're on the money. Imma go away and have a look at just using Karma to sort this. Thank you for taking the time to reply!
(The creator of D3)
I like Vue 2 a lot, mostly because the learning curve is low compared to Angular (I thought Angular 1 was interesting, but a bit of a shit show). Learning Angular 2 will no doubt help your career in Angular 2 positions. If I were in your position (*"I've been using Angularjs for a couple of years now and really love it."*) I'd go for Angular 2.
I didn't really read or understand the article but we always feel csr rendering is faster between page transitions, I guess mainly because of the network payload to down the html data. I wish there was a way to pre-load server side content, say between page transitions. 
It is a standard html4ish site without SPA design. Shrug. Are sites like walmart.com or amazon.com even ok for a spa design where there is a lot of client side rendering.
as many You're right, it looks like the horrific mess that is the Amazon page when they are doing their huge sales. It's awful. 
SPA design? (googling returns information about spas) 
Single page app
Curious what .net or java has to do with angular 2? Just because of the typescript? 
Just blasting out hundreds of products doesn't seem to be a great idea, unless you're trying to hammer home "we carry everything!" to the point of making a user frustrated by your page. 
Walmart is one of Node's biggest users/sponsors so not terribly surprising 
koa middleware is the traditional middleware. express and i think hapi only have 'beforeware'. middleware that can capture the response as it bubbles back up is how you have composable, self-contained middleware.
Typescript, non standard strict typings basterdization of javascript. BTW angular 4 is out hey. No real point learning the older one now. 
If none of the files have exports, that indicates to me that they're not using modules. Are the files run through a module loader like Webpack or Browserify? If not, then you have to access the files in whichever way they already access each other, without imports/requires.
First off, cool plugin. I used Scala for a few weeks to spec out something with Spark, but it was mostly for fun. It's an interesting language, and I'm interested to see how you've spec'd this out. My only question... I used Scala for a few weeks, and then came back like 6 months later not understanding what I wrote. Do you find that there's a readability problem when using underscore everywhere to denote variable references and shortcuts? When I was writing reduce/unions, I guess the really confusing part was underscores with the combination of operator overloading. params.inputPaths .map(_.toString) .map(sparkContext.sequenceFile[NullWritable, LongWritable](_)) .reduce(_ + _) // This is really .reduce(_.union(_)) .values
Thanks! ~~The plugin would have to become a production dependency for the second proposal.~~ As for checking if it's in scope, I'm not sure how I'd proceed in that case. It might cause more confusion if someone doesn't understand why their partials aren't transpiling. I do think some kind of self-documentation or an introduction to `_` would help. I'm open to suggestions on that front. _edit_: ahh I see, I think you mean during dev you import the placeholder, and that gets removed during compilation. I could see that working actually. Will investigate.
Hmm, interesting, I tend to use `bind` for partial application. function add(a, b) { return a + b } var add1 = add.bind(null, 1) add1(2) // -&gt; 3 
`.bind()` has historically been a little slow although this may have changed and been optimized. It also requires that you set the `this` value of the function, even to `null` as you've shown. This plugin also allows for mixing bound arguments &amp; placeholders in any order, with gaps between and everything. `.bind()` can only dream of that :) function addThreeNumbers (a + b + c) { return a + b + c } const addOneAndTwoOthers = add(_, 1, _) addOneAndTwoOthers(2, 3) // -&gt; 6 That's not to mention the stuff like spread placeholders &amp; lambda parameters and such that this plugin supports.
Hey, I'm using election apps too but sometimes they feel like flash apps - https://josephg.com/blog/electron-is-flash-for-the-desktop/
No, it doesn't count. There is no session, that is the state being referred to. I guess you haven't heard of the myriad alternative's to cookies that are more scalable? Like bearer tokens or JWT? These require no session, and therefore a user isn't tied to a specific server (and by the way, these techniques aren't vulnerable to the security issues​ cookies have, like CSRF).
Well, this article was considered irrelevant lately in this subreddit. No place for hate in our nice community.
Hate is bad. Dissent is good. What's the difference? Hate is about *people*. Dissent is about *decisions*.
Well, since Flow and TypeScript do not know about the semantics of this plugin, using the plugin for partial application will lead to incorrect type inference. For example the expression `lodash.map(_, someFunc)`should have a function type, but Flow/TypeScript will incorrectly conclude that it has an array type. They will also complain that `_` is not defined unless it is declared to be a global variable somewhere. That can be done in Flow in a type definition file or at the top of a module like this: declare var _
I'm going to add this to every element in the internal order management platform. :D
Mocha can also be used to test frontend code, which is why Karma supports it. This is how my team has it set up -- Karma is the test runner, Mocha organizes the tests, Chai for assertions, Sinon for stubbing/mocking, and RequireJS for dependency management. Overall the solution is pretty nice because it's very similar to our server-side unit tests, which also run on Mocha/Chai/Sinon. Less of a cognitive jump when switching from frontend to backend.
No, that's a silly argument. I would advice you look at the features of each framework and decide which one you think is best.
Thank you for expanding on the other answer!
Sarcasm.. right?
[removed]
Ah, got it. Thank you!
I think VSC and to a lesser extent Atom are pleasant to use, but they are high on resources compared to other editors. Slack on the other hand, from what I've used of the Linux desktop version, is better in the browser in just about every conceivable way. There are still ways to go.
Your "seek" function needs to return a boolean to work with array filter. The callback must recive an value (a) and return a Boolean: Array.filter : (a -&gt; Boolean) -&gt; Array a -&gt; Array b See documentation here: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/filter Array (slice, filter, map, reduce...) is pure function: https://en.wikipedia.org/wiki/Pure_function And some other array functions may help you to solve this: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/some https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every 
if you have the angles and points, then all you need to do is determine the line intersection of your ac and bc sides. That will be your c point.
X-Post referenced from [/r/aureliajs](http://np.reddit.com/r/aureliajs) by /u/Davismj [Aurelia Weekly Issue #1](http://np.reddit.com/r/aureliajs/comments/6640cv/aurelia_weekly_issue_1/) ***** ^^I ^^am ^^a ^^bot. ^^I ^^delete ^^my ^^negative ^^comments. ^^[Contact](https://www.reddit.com/message/compose/?to=OriginalPostSearcher) ^^| ^^[Code](https://github.com/papernotes/Reddit-OriginalPostSearcher) ^^| ^^[FAQ](https://github.com/papernotes/Reddit-OriginalPostSearcher#faq)
&gt; dev-clickbait title If you're a dev who's vulnerable to clickbait, memory usage is the least of your problems.
Off the top of my head, Kate. I'd say it's comparable to Atom in terms of features yet consumes about a third of the RAM at idle. JetBrains IDEs are great however they seem to destroy my laptop's battery life so I tend to avoid them, but if you're on a desktop with 16gb RAM there's no issue, like you said.
&gt; Well, this article was considered irrelevant lately in this subreddit Would you care to show where that was? I assume you're talking about the debate in [this thread](https://www.reddit.com/r/webdev/comments/65o8eo/boostnote_note_app_for_programmers/) which was certainly not conclusive.
Not scalability as in run time performance. Scalability as in having a code base that a developer can actually work on without going insane. It's a matter of code organization. As an example I have an app that reuses a group of components and some related services in order to create data tables that can be manipulated in many different ways. The way I did it means you just instantiate an instance of the components you want with the models you define acting as the definitions of how they look and work. Very declarative. If I were to have done that imperatively I would now have 10 different imperatively declared data tables that all have to be maintained and updated manually. But doing it declaratively means I only have to make updates to a very small subsection of the code, usually just 1 file, and the change is immediately implemented on all my tables. So doing it declaratively has allowed my solution to easily scale to the size of our problem. As many data tables as we want can be implemented without very much pain and without considering implementation details for each one. That's what I mean by scalability.
Great post!
Not meant to be an insult fellow redditor, I'm just saying that "dev-clickbait" should not be a thing that exists. If you're (and I use you in the global sense) not capable of reading this article and judging for yourself whether it has value, then something is wrong. Personally, I agree with all of your points (except that Electron is great. I hate it, but that's beside the point). The writer of this article wrote it in a very sensationalistic manner, which is common of devs. But his core points should be clear to anyone who has read the article: - Electron apps have high memory and CPU usage due to each one running a Chromium (and a Node) instance at all times. - Electron apps are very large on the disk because they each have all of Chromium and Node.js packed in along with the actual app code and its dependencies. - Developers shouldn't use Electron. A better alternative might be React Native, but native app development in another language is preferable to Electron. Those points are pretty clear. If you get too caught up in the scandalous headline about Flash to understand those few basic points, then you have bigger things to worry about.
Like they always say, "React is only the view layer." If you're using react-router-redux then you can dispatch actions that change parts and then push the new url. If you're doing your own thing, then you're going to have to keep doing your own thing.
Because Node.js doesn't currently run on mobile platforms. There are efforts to port it though.
As I said before, definitely not conclusive. I'm not sure how people can disagree so vehemently on objectively verifiable things like how much memory a process uses.
Yes, I agree that dev can distinguish between good point and a holywar-starter point. The thing is: everything is good and bad. Did I get problems with Electron based apps? Maybe a year or something ago (Atom). Do I get them now? No. I was shocked to discover Slack and VSCode are Electron based. I thought they were native. They are quick, they do not consume that much memory (comparing JetBrains for example). The best browser experience I'm getting latest years are in Chrome. It's my main browser, I'm dev, I don't get lags, freezes. Dev tools is the shit. I'm not against React Native. I praise possibility to use any frontend framework with power of node at backend. Electron gives it. I don't actually know how Chromes inner parts work, but I hope there will be used some kind of lighter version of it or maybe Electron will event switch to something not that hungry for memory and more transparent for developers. But anyway. The thing is - all the hate Electron having. I mean even memes are raising somewhere about it I bet. It's not bad as you or author of the article says. You can write efficient code and make useful popular applications for people. I'm using Electron based apps. They are fantastic. I mean I wanted to create issue at VSCode repo to say thank you to devs. Maybe someday I will. As about clickbait... Hey, see for yourself: there are many newbies or holywarish devs sitting here and they will read this article. They will get that idea and they will spread hate. And that is utter shit. This thing is basically killing creativity, productivity and good mood. One dev almost built Electron app and then read article. He does not know about insides of Chrome and he switches. And then he stops. Because of dev burnout or lack of time or something. One dev reads an article, comes to CEO and says: it's shit, we'll use React Native. Because sometimes people read articles and change minds based on subjective opinion or the opinion of the crowd (and hey as I said - some people here already laughing when see Electron and forcing their opinions about how shit is it) I mentioned Eric Elliott here in this thread. He creates articles like this. I mean I even imagine him writing "Electron is dead. Long live React Native". This is marketing. And this article is mostly marketing too. React Native. What? So to conclusion: Electron is good, and good apps built with it are good. Some even fantastic. And people should know it. No pitchforks for Electron
I'm also interested in doing this. We also have React SSR to deal with
perhaps this http://numb.viagenie.ca/ You should expect to need a TURN server approx 10% of attempted connections between two users.
Thanks very much for the feedback. I've added a distribution test for the `range()` method, which indeed showed how flawed it was in the first place. There's loads more to improve, but at least I have a kickoff point now. Turns out generating randomness is way more difficult than I had initially anticipated :D
What you're describing is pretty much exactly what I'm looking for. We're already using a Redux integration with RR, as evidenced by pulling `push` and `location` directly from props. What I don't understand is how you can go from a POJO in Redux to a well formed URL suitable for `push`ing into RR. Can you clarify how you do such a transformation?
No, my team members report slack taking 1.2gb of memory. You just lie to yourself it's not a resource hog. I do consider it to package one web app. But Im not happy about it.
How much of that is a video they clicked in the chat window? I'm sitting at 38MB with a few raw images loaded in view.
Big JetBrains fan here as well. I use Ruby Mine for RoR apps and Webstorm for javascript. Both IDE's have great features and it's easy to use.
I disagree with all of that though. That's the actual issue here. Yes, it is bad for devs to form opinions about software they might use without actually trying it. They shouldn't do that, but if they do choose to use something other than Electron I think it's a good decision. On my laptop, which is admittedly somewhat old, Chrome runs fine but Atom and VSCode run like pure shit- I literally can't benchmark memory usage for them because whatever happens when I open Atom cause every other program on my computer to become unresponsive. (I run Arch Linux so the effect is that I can't switch to another application, the screen freezes, and I either wait for something to happen or I force reboot.) That's in addition to the fact that Electron devs chose the AppImage style of packaging for Electron apps- instead of requiring that Chromium and Node be installed in the client's computer (which they pretend is a big deal but people have been packaging installers with their software for years), they put an individual copy of libchromium and Node in each app package. libchromium itself is a crazy idea to compile literally one of the largest software projects in history as a single library. Their own [blog post](https://electron.atom.io/blog/2017/03/03/electron-internals-building-chromium-as-a-library) explains how they've had to continually modify their build process to get around the fact that it takes 6 or more hours to build Chromium, and the number of stripped symbols actually has to be continually increased because building Chromium as a library exceeds the maximum number of symbols you can even have in a DLL file. Electron to me really is just the epitome of using good code to enable bad software design.
i'll give you the pass on vscode... generally its not to bad, but atom and especially especially slack is a beast...i don't understand how something like chat can be so horrible
Some thoughts: It's not responsive, even though it's using the material design framework. There's really no reason to use a framework for a site this simple, but if you insist on using a framework, at least make it responsive ;). Thanks for the timer though, I've been wanting a pomodoro timer that doesn't suck.
So basically we're coming full circle and generating pages on the server side again?
Preach. It's complete garbage. "Hey guys, check out my new macOS app in the app store! It's like notepad, but it's an 800MB download and has no native features and takes up 75% of your RAM."
Hey, thanks for opinion! What software do you use for development?
So I have re-written my [Arctic Events to 0.1.0](https://github.com/AdamKyle/arctic-events/releases/tag/0.1.0) which simplifies the API. The linked blog post asks some really interesting questions at the end I would like some feedback on and some ideas on. Let me know what you think. 
I've written a couple of Electron apps that I never published. I use React and Redux for a lot of things, and if I need to publish a desktop app I use nw.js which I don't like to use, but I will if I have to. That's all just in relation to JavaScript of course, I typically use Python whenever I'm writing games or non-GUI software.
Can I get an ELI5? What is this and what problems does it solve?
Electron extremely greedy. One need only look at: - bundle size - memory usage as a function of time (hint it increases linearly) - cpu usage (can easily peak at 100% in some cases)
Why didn't you publish them?
I'll copy-paste a comment I've made in a couple places: For those who are interested in some of the details of the work that's going on, Lin Clark's recent talk on "A Cartoon Intro to Fiber" at ReactConf 2017 is excellent [0]. There's a number of other existing writeups and resources on how Fiber works [1] as well. The roadmap for 15.5 and 16.0 migration is at [2], and the follow-up issue discussing the plan for the "addons" packages is at [3]. I'll also toss out my usual reminder that I keep a big list of links to high-quality tutorials and articles on React, Redux, and related topics, at https://github.com/markerikson/react-redux-links . Specifically intended to be a great starting point for anyone trying to learn the ecosystem, as well as a solid source of good info on more advanced topics. Finally, the Reactiflux chat channels on Discord are a great place to hang out, ask questions, and learn. The invite link is at https://www.reactiflux.com . [0] https://www.youtube.com/watch?v=ZCuYPiUIONs [1] https://github.com/markerikson/react-redux-links/blob/master/react-implementation.md#react-fiber [2] https://github.com/facebook/react/issues/8854 [3] https://github.com/facebook/react/issues/9207
Instant face palm after reading the title ("another one.. ?"). However, I've read the article and I like the author's approach. The `--offline` flag is a nice addition (I am a big fan of starting to debug issues with `rm -fr ./node_modules &amp;&amp; npm install`). A few things that are left out in the article: * Does it work across all major platforms? (I am not familiar with symlink situation in Windows.) * Does it work with private scopes? (Yes.) * Does it work with native modules? (Yes.) * Does it work with private registries? (Yes.) * Is the API compatible with `npm`? (It appears – yes.) * Does it respect package install scripts? (Yes.) Quick tests on the project that I am working on at the moment: Using cold cache: pnpm install 33.80s user 20.75s system 132% cpu 41.290 total Using hot cache: pnpm install 19.96s user 14.03s system 146% cpu 23.135 total Using npm: npm install 40.05s user 14.40s system 91% cpu 59.375 total Good job!
I don't get the concept of partial application, functions etc. Can you please ELI5 but for dev?
PhpStorm for IDE and good old Sublime as text editor. 
Multiple teammates at my company report high memory usage with slack, up to and even over 1GB in some cases, with no obvious reason.
How is this better than `EventEmitter`?
Good luck with your project! I hope it will be even better than you imagined when you started it.
Which begs the question, can Facebook solve any problem without total rewrites?
Me too as /u/gajus0 thought that but after reading the article and glance look over the codebase and deps it looks and sounds good. I think to move to it, definitely, because yarn crashed my system few times. I'm using Linux for years (ArchLinux rlz) and so don't care if it work for Windows shits :D
People should probably post what OS they are using. IME electron on osx seems to use a lot more resources then windows (or even Linux but I haven't tested that recently) Edit: OS not is
And people say frontend development/ui stuff is easy.
The difference between Atom and Sublime Text or Notepad++ are pretty night and day.
Comparing Atom to PHPStorm is a pretty apples to oranges comparison, imo. PHPStorm does a lot more out of the box than Atom. Both are great, but they have different use cases.
their public api will remain almost entirely backwards compatible. +1 trolling points though
The new React is said to be fully retro-compatible, though. Angular, on the other hand........
They are like "WTF is JavaScript?"
I'm at 1.08gb as of right now. No unread messages.
Thanks, man.
Agree, there is a reason Gmail has an "offline" mode. Let's see your SSR app do that. Obviously it depends on the app and use case but none of that was even talked about. I also love how it was called "theoretical" that means you haven't proven it. Click bait non-sense.
What the h.. are partial applications? Please share your knowledge!
Eli3?
[Direct link to online demo](https://stianj.com/what-are-you-syncing-about/) 
I think it's impossible for anyone to post anything about React anymore and someone not espouse the ostensible virtues of Vue. The thread is about React.
OP isn't looking to solve a real life problem; I guess he experimened with writing a computer science algorithm - https://simple.wikipedia.org/wiki/Cellular_automaton
As stated this was for learning purposes only. See [this post](http://adambalan.com/post/arctic-events) Specifically: &gt;Why Did You Build This? &gt; &gt;I wanted to build some kind of event management/handler in Javascript. I built one in PHP for Ice Cream. &gt; &gt; I was also looking at a coupe of basic game engines in Javascript and while this event management system will eventually have to change to meet the requirements of what I have planned, for now it was a great and still is a great learning experience. Again. learning exercise. Want feedback. Not actual Library. Least...Not yet. One day I hope to be one of those cool kids you see on twitter with tons of stars and followers. 
&gt; a jQuery guy can be productive in a matter of hours you lost me right at this sentence lol
Stop redefining shit! Electron is NOT native. 
and Typescript and React is heaven!
I have been investing a lot of time into learning React and I love how Facebook works so hard on improving it, but I've already had trouble upgrading projects through to v4. I know they say they're making this backwards compatible, but I still imagine there'd be some problems :( edit: wow you guys really are ruthless downvoting me because I got the author of a package wrong........
v4? Are you talking about React Router?
yes, sorry for not being specific.
I definitely love how active development on it is
I am not convinced that one approach ultimately produces more code than the other. I would say that a declarative approach is more likely to yield a higher number of smaller particles opposed to keeping everything in a few giant buckets. &gt; Your above breakdown that function = declarative and imperative = oop I wasn't saying that at all.
Thanks, appreciate ya! Good question... I think partials and pattern matching would pretty much do it for me, along with the more meta-programming type of things that Scala can do.
I did, the main process is hovering around 60mb
On top of /u/n8bit 's ( thanks :) ) answer I'll copy the comment I left elsewhere in the thread... Sure! Partial application is basically when you run a function with only some of the arguments it's expecting so that you can call the resulting function with the rest of the arguments later. It's super useful when you might call a function a bunch of times and most of the arguments are the same every time - so you can partially apply that function to create a new one with those common arguments "bound" and you won't have to supply them every time. If you've ever used `someFunction.bind()` in JS, you've used a rough form of partial application. Did that give you the gist of it?
That's normal. It's the other two helper processes that make up the bulk of resource use, though. 
Easier to learn is subjective. It takes a js dev 1 day to learn 90% of react. The api surface area is tiny. Create react app has existed for a while now, so you don't need to know webpack to use it.
The creator of inferno works for Facebook since the end of last year. My guess is that he had a lot of input in the rewrite.
Ahh that's a cool use of proxies. I agree it's probably not light enough for production usage but I still like it - nice project especially for its time.
I've never used Immutable so I can't say either way. IIRC seamless-immutable allows for using Immutable objects as if they were native JS ones. Not sure if you're able to use that, otherwise I'll defer to others like /u/snuggl who might know a bit more - sounds like it should work if I interpret that response right.
&gt;Alpert stressed that React Fiber will be backward compatible, though as with all major React updates, there will be a few small breaking changes Pick one
Actually, I'm not sure Dominic has had much input on Fiber. Apparently the research and prototyping for this has gone on for a while (possibly all the way back to Jordan Walke). I think Sebastian Markbage is responsible for much of the main implementation. Dan Abramov and Andrew Clark have both worked on a lot of Fiber stuff since they joined the React team as well. From what I've read, Dominic Gannaway's optimization work with Inferno centered more on deep understanding of how JS engines are implemented, and tailoring code patterns to match those implementations. Fiber, on the other hand, is a fundamentally different approach to how the internal reconciliation algorithm is implemented. I suspect Dominic will be able to apply his knowledge to the code paths that make up the Fiber implementation, but that's not the same thing as _how_ Fiber works. edit: And as proof, [this tweet from Dan Abramov](https://twitter.com/dan_abramov/status/854484076790775808): &gt; Not creating, just helping ship it :-) The project is lead by @sebmarkbage and inspired by research from @jordwalke.
Shit that's super low. Mines no where near that! Treasure that shit for life bro. I mean maybe if you have no plugins and opened one file I could kinda see that happening. Still pretty low though. It maybe the gods just blessed your Binaries. Who knows dude. Screenshot that shit and save it for life.
That was it! Thanks so much! :-)
As someone in the midst of learning React right now: (╯°□°）╯︵ ┻━┻
"Flash for the Desktop" is called Adobe AIR.
I've only done simple stuff with Electron, but it looks like optimization can take some hard work. I use Discord and occasionally VS Code (Vim will always be first &lt;3), and they both perform great. Pretty much no CPU usage and around 200mb of RAM each, which is a bit high, but on my setup I'm not too worried about. The problem isn't web technologies on the desktop (nothing else is so easy and fast to develop with), it's the implementation. An analogy from another thread: Electron is like Flash. Was it optimal? No. But it was the only thing that was available and it helped bridge the gap between different platforms. Eventually a more optimal solution (HTML5) came out, and it was quickly adopted, because it was better. This is gonna happen with Electron. Sometime there will be something like it that was made for desktop, instead of a browser's rendering engine. For now, I'm just happy that these apps are available and cross platform. I'm tired, sorry if any of that was garbage.
The title is a bit misleading. React Fiber is a total rewrite of the reconciler, an important but internal implementation detail. The public API is the same as before. Just make sure you don't use `createClass` and the original `PropTypes` as they are being deprecated. `PropTypes` can now be accessed from the `prop-types` package which is an extremely simple fix.
Does it offer any advantage over writing HS directly with the https://www.npmjs.com/package/react-hyperscript package, that needs no babel? 
I updated my package pg-reactive (https://www.npmjs.com/package/pg-reactive), a rxjs 5 interface for PostgreSQL. It managed to insert &gt;1 million rows in a table without noticeable memory use increase and any error.
React is the ice cream cone, React fiber is a new recipe for the cone. most people wont notice the change.
I left Atom for VS Code because of the slowness (and some TypeScript tooling issues). I really hope it can be competitive again. I hope input latency is also on their agenda - which effects how the editor 'feels'.
These are the SSR related items we have open source so far... http://www.electrode.io/docs/above_fold_rendering.html http://www.electrode.io/docs/server_side_render_cache.html http://www.electrode.io/docs/redux_router_engine.html
Keep learning! And try not to worry! This rewrite is mostly about React internals. Not much should change from your perspective, other than some nice things- you'll get better error messages, you'll be able to return arrays or strings from render, etc.
http://isfiberreadyyet.com/
This seems like a good opportunity to shamelessly self-promote my own [blog](http://www.puzzlr.org/). I've been writing roughly a tutorial a week with a focus on version 4 of d3. 
Yes, Github pages routing issue, Fixing it. Thank you for notifying me., You should still be able to see the right content though.
This makes me think about `maven`. It work similarly for dependencies
Yes, it compiles HyperScript syntax into plain React at compile time, rather than interpreting it at runtime.
- selector syntax for HTML tags `'h1#boom.whatever.foo'` - props are optional (doesn't require `null` in place of props when there's no props) I guess that's it
Pasting the codes would be tedious and long. I mean, have you ever run into a situation where you want to use a function, except that you need to add like one or two line in there to meet your needs? Example function build() { var b = document.getElementById("div1"); b.appendChild(c); // var c is in global scope ... // this goes on for like 20 lines with different var of course } Then, you come to a situation where you need to use that function, except you need add another var x = document.getElementById("div100"); b.appendChild(x); Do you 1) code another function with the same code as build() and add in the var x codes? Or 2) do you just not use function at all, copy and paste code from build() and add the var x part to the body of the pasted code? I ran into a situation where I have two buttons that execute the same function, except the second one has to add a feel appendChild and styles, etc. Tried this, and it's not do-able. // some code here build(); var x = document.getElementById("div100"); b.appendChild(x); 
I found this awesome tool http://javascript-obfuscator.org which could be the best javascipt obfuscator out there.
it's javascript,just pass a callback to your function and make it run at the end function youcallback(){ var x = document.getElementById("div100"); b.appendChild(x); } function build(callback){ //original code if(callback)callback() } //run your code build(youcallback)
It's cool. But I would prefer this one http://javascript-obfuscator.org since I haven't been able to de-obfuscate the code generated by that yet, and the domain lock thing is really nice to have.
I use often bind, but I don't get how _ provides something in this case. Can I ask you for example? Thank you!
doh yea.. good point and pretty bad decision by React to not have such common and easy things.
You generally pull out the code that's the same, put it in its own function, and have the other functions call that. function A () { // similar code // different code } function B () { // different code // similar code } becomes function A () { C() // different code } function B () { // different code C() } function C () { // similar code }
Alright everybody, I think I've figured this out: OP's daily driver is a Cray.
You should do "this" but it's too hard for you, so use a library instead. But libraries do "this" so why shouldn't I? Er..uh...um...cause you should! Use React and Angular and jQuery cause they use it and you shouldn't!! But...but...
ES6 modules and the `import` and `export` keywords are the standard. The [specification](http://www.ecma-international.org/ecma-262/6.0/#sec-imports) is written by the ECMA TC39 (technical committee in charge of the language standards). However, it's (in relative terms) recent and since JavaScript didn't support modules prior to it, workarounds were developed. These include CommonJS (NodeJS modules) and AMD (RequireJS modules). On Node, CommonJS is going strong and there's a bit of a conflict regarding the "migration" to the standard, so there you likely don't get to choose. However, if you use JavaScript modules on browsers, you probably have a build step that bundles up your modules with something like Webpack or Browserify (at least until module loading is handled across the all relevant browsers). There you should definitely go for the standard ES6 modules and it's considered best practice.
The tone of the author is a bit offputting, and for all the perf claims, it doesn't appear to handle reordering, which is the biggest technical challenge that vdom frameworks address. There's also a bunch of weird [caveats](https://github.com/WebReflection/hyperHTML#caveats)
Fanboyism is a big problem, and that's for all of the big frameworks
Looks very nice, and great writeup too. Would be nice if there was an effort to bring this into npm. The killer feature of npm for me is that it runs out of the box on Heroku
Yes it does. Windows has symlinks but they require admin permissions. Hence, pnpm uses junctions on Windows, which behaves similarly to symlinks but does not require admin permissions
&gt; Which one do you prefer and why. * Babel is closer to TC39 * has a bigger community * gets important features years faster * next to es6-5, transpilation is a major asset for JS in general * it does one thing and does it well * won't interfere with other tools * if you need types, add Flow &gt; Does Babel's configuration bother you? No. Since `env` is now the [preferred preset](http://babeljs.io/), targeting evergreen or a specific threshold has never been easier. Tuck this away in .babelrc, package.json or inline in your webpack config and that's that: { "presets": ["env"] }
https://en.m.wikipedia.org/wiki/Begging_the_question
It's worth pointing out that React Native's Animated library supports a nice little `useNativeDriver` prop: a boolean that lets you declare your animations in pure JS *and have them run on the native thread automatically*. It's so cool: you get all of the benefits of native animation performance, without any of the implementation overhead. The caveat is that `useNativeDriver`is a little bit buggy - about 50% of the time your animations will break in some way. Usually, preventing React re-renders during animations solves all your issues. But still, it's a very valuable tool that is definitely useful in production. &gt; Each realm by itself is blazingly fast. The performance bottleneck often occurs when we move from one realm to the other. This is such a superb summary. If you've ever watched any of Tal's talks he's always going off about how "the bridge" is public enemy number 1... but it's 100% true.
They've had a minimap since 1.10! :)
Indeed! Perfect explanation :)
Yea, I'd use it if the vim mode was better. Also the eslint is very subpar
thats pretty much what electron does.
[removed]
Babel member here. TypeScript is a language and Babel transpiles your 'next-gen' JavaScript to more compatible one. Babel configuration should be easy using http://babeljs.io/docs/plugins/preset-env/, you basically give your target (Chrome 54), it will add the missing polyfills and outputs the correct code. If you need help I would recommend you joining our Slack: https://slack.babeljs.io/. You can use Flow (https://flow.org/) for static typing.
This will teach you React in an hour: https://egghead.io/courses/react-fundamentals I'd go with Redux next, then React-native. Egghead has lessons for these as well, the Redux ones are made by Dan Abramov himself.
[removed]
But OSX apps in general allocate lots of ram, which is subsequently compressed when those pages arent accessed recently. You cant just look at the number in the activity monitor and take it at face value.
The slack bundle is 64Mb. Atom for my OS, 86Mb. VSCode 63Mb. Wtf are you talking about.
Electron, or the app built on Electron? The apps i use have reasonable bundle sizes (under 100mb). The memory usage it exhibits is misleading as it doesn't appear to close "helpers" after their corresponding window/view/pane is closed -- im assuming they plan to reuse them, and on my Mac most of the memory associated with those helpers is compressed as other apps need the memory. I've not found any Electron apps on my system to dominate my CPU. Of course any app that is doing any real work will spike to 100% from time to time. Electron apps that are idle on my system normally use near 0% cpu and don't spike without interaction. Also, they are all GUI apps with user interaction -- so since im actively interacting with those processes, why would i not want my CPU to give it primary attention? Is it a bit of a hog? Sure. Is it as bad as you're making it out to be? Absolutely not. 
How many channels and how busy, though? Get one or two hundred people on there and dozens of active channels, and use it for weeks at t time, and it really does get big and slow.
Saying JSX is a step backwards is also bewildering. JSX is super easy to learn and gives you the full power of javascript, rather than just a template language.
I can't speak for him, but my wager would be he's never taken the time to learn React ... since his opinions don't make much sense. It's not like we're bashing his beloved Vue. :)
Tried to run `pnpm i` with this repo but got errors: WARN registry.npmjs.org/react-apollo/0.13.3 requires a peer of redux@^2.0.0 || ^3.0.0 but none was installed. WARN registry.npmjs.org/react-markdown-area/0.3.8 requires a peer of react@^0.14.5 but version 15.5.4 was installed. WARN registry.npmjs.org/react-markdown-area/0.3.8 requires a peer of react-dom@^0.14.5 but version 15.5.4 was installed. events.js:160 throw er; // Unhandled 'error' event ^ Error: read ECONNRESET at exports._errnoException (util.js:1022:11) at TLSWrap.onread (net.js:569:26) 
I was semicolons-less for a while and never found it silly in es6/7 react codebases. Once you start doing things like adding legacy decorators it gets nasty. Granted I use semicolons now, but what makes it nasty for you?
brother, sister or toaster! Whomever you are. You are awesome! You have no idea how long I have been working on this. I really do appreciate all the help.
You're welcome :)
Can't you just drawImage the result onto another image to right-click-save it and forget about toDataUrl()?
Published a post in my Vue.js blog about when to use methods, computed properties and watchers. Give it a look! https://www.pointofvue.net/2017/04/19/vue-js-when-to-use-methods-computed-properties-or-watchers/
I was wondering this. I realize that the real risk lies in the fact that the code executes on the client's machine, rather than a server, but I was thinking about how other native apps must use secrets in their code. I didn't think too much about how much of those native apps get cracked. 
The reason you're not getting any response is due to your question being too vague. In web-design you won't get far without trying to do the work yourself. Try out some stuff, show how far you got (upload it to github or similar), and maybe then I can show you what you need to do to "dim the site". You shouldn't expect others to make a fully working example.
It's an internal rewrite. It doesn't affect the API that developers use. 
&gt; debugging = debug + callsites + derived namespacing https://github.com/busterc/debugging (works in browser and node) Can you ELI5 what this is/why I would use it? The readme is unhelpful in describing the project.
react is trendy for now. give it a few years js community is by far most add in existence
Don't start a new line with [, (, or `. Wew, lad. 
very good tutorial, nice job
Thank you. 
Please do some research before posting uninformed comments like this. The public API is almost entirely the same.
Can this sub stop with the weekly rants about semi/non-semis? Everyone should be using a linter. After that, it really doesn't matter which style you use – you will be warned if you're doing something wrong. Let's move on to more important things. ^^Like ^^spaces ^^vs ^^tabs 
Did you try using an object with getters/setters?
I think historically all compilers (C / C++ / Java etc.) have done something out of the box without needing additional presets to be installed. Of course many of these compilers have additionals flags for enabling / disabling things, but prior to Babel I've never encountered a compiler / transpiler that didn't do anything out of the box. Were previous C / C++ compiler designers or the csc / javac folks all wrong?
&gt; If you use flow you will start many lines with a ( because of type casting lol no. Typecasting is rarely needed and I've always used it inside some other expression never around the whole line.
When you say "give your target Chrome 54", what does that mean for the transpiled code? It will work only in Chrome 54, or up to Chrome 54? And what happens if the code is run on Chrome 55?
&gt; Yes of course You mean the previous C / C++ compiler designers or the csc / javac folks all wrong? Babel by itself doesn't output anything. (presets needed) GCC by itself outputs a binary (no preset needed).
Babel does (https://babeljs.io/repl/#?babili=false&amp;evaluate=false&amp;lineWrap=true&amp;presets=&amp;targets=Node-4&amp;browsers=&amp;builtIns=false&amp;debug=false&amp;code=foo%0Abar)
&gt; You mean the previous C / C++ compiler designers or the csc / javac folks all wrong? I meant of course they are right. 
In a practical sense, if you value types over bleeding-edge, not-yet-final ES20XX syntax sugar, Typescript is still currently a better bet than Babel+Flow. It has better editor tooling, massive community, better cross-platform support, far more type definitions and the ability to auto-generate type definitions - which is pretty essential if you want to create &amp; distribute npm modules. I find the TS gitter channel really helpful too.
Awesome tutorial! The only thing I'd simplify is the directory structure. ;) 
As an addenum, one big difference is that Typescript tends to be more conservative when onboarding new features. They'll usually only seriously consider EcmaScript proposal once it's Stage 3 or further unless there's some compelling business or compiler need (ex: Decorators). Babel on the other hand usually tries to cover all active proposals and allow you to choose how "next" you want to go.
as ever: the answer is "better abstraction"
There are no presets enable in my link (see the presets= in the URL). You mean something like this: https://babeljs.io/repl/#?babili=false&amp;evaluate=false&amp;lineWrap=true&amp;presets=&amp;targets=Node-4&amp;browsers=&amp;builtIns=false&amp;debug=false&amp;code=class%20test%7B%7D. You can actually run it in your browser. ES2015 classes are supported in most browsers now.
Such as what? React has been steady for the past 4 or 5 years at this point with hardly any API changes. React-native: almost exactly the same as React except some minor API changes since we're mobile-native now. Other initiatives by Facebook have been steadily improving as well. What have they thrown out to start over again on? If you want to talk about throw it out and start again, Angular is over there. 
I don't believe so, since a canvas isn't an image. It's an SVG-type thing. Which is also why I'm converting my Google Charts thing to an image
TypeScript team member here. TypeScript is a lot of things, granted, but do be aware that you can use TypeScript as "just" an ES-next to ES-now transpiler, "just" a Type Checker ala Flow, or both at the same type (typically what people think of when they think "TypeScript the Language"). On the ES-next to ES-now front, it is worth noting that TypeScript will not adopt new non-type-annotation syntax that is not on the standards track (much to the consternation of those who want bind operator sooner rather than later, for example).
I do a lot of work on TypeScript, so I'm happy to answer specific questions. I can't say which I prefer without knowing more about the project but it's pretty likely I'd say TypeScript given my obvious bias ;)
Exactly. Nothing comes for free. You either pay in time spent building it or using money - which is time indirectly ;) But show some effort - e.g. with a working demo- and we'll might push you in the right direction.
Even though your url doesn't contain any preset, they still get enabled. Click the presets dropdown to confirm. Moreover, once you uncheck them, nothing happens to the code thereafter. (meaning code in is code out, no transpilation happens).
Thanks for the note! 🙏 I'll review IE now &amp; create a GH issue. I wanted to avoid 'polyfill' because: 1. Even if `position: sticky` is supported—stickybit plugin users may want to have the ability to write CSS based on a sticky elements 'stickiness'—which they have with StickyBits, and 2. I didn't want to worry about creating a polyfill by definition so that the code could be lighter and just 'make stuff sticky—in a good way' 😬. 
But with objects you need to add commas between properties.
Is that why? It doesn't work in Chromium either.
 function build(x, y){ var child = document.getElementById(x); y.appendChild(child); }
frankly this is the sentiment that makes folks scoff at the js community. you can actually be really productive with jquery. the right tool for the right job. react is not the tool for every single job. a great tool for the right job, absolutely - but the degree to which kids fanboy out and go religious with every single latest/greatest framework makes everyone look bad. got a hammer, everything is a fuckin nail now!
Performance on my 2015 Core i7 MBP is crap to be honest although most likely related to the Earth rendering and not to Polymer.
http://i.imgur.com/NnoGhN1.gif
React might be best renderer, but I prefer ng due to API
That'll do bot. That'll do.
Death before semi colons 
I have http://tinypic.com/r/2dqo65j/9
When something fails like this, the first thing you should do is check your browser's error/javascript console (part of the browser's debugging tools). That will have information as to what went wrong. In your case, its a reference that's bad, something you expect to exist doesnt, and when something doesn't exist, trying to access a property from it, like `value` will fail with the error shown in the console. Many times, this can indicate a typo, which is in fact your problem, only the typo is in the HTML, not the JavaScript. So what's wrong with your function? Probably nothing ;) Now, can you spot where the HTML went wrong?
I prefer Babel since I work with Node. Babel lets me use the same code both in the server and the browser. Wouldn't like TypeScript in the server, because that would need a compilation step.
I tried Firefox, Edge and Chrome, same result (i.e. my previous screenshot with three presets enabled).
I hate myself right now lol. I found it. I spelled "intereset" instead of "interest" Thanks for the help bud