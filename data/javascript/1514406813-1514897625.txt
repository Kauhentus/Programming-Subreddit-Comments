It doesn't seem to have a function to get the pitch of a note in a soundtrack. Can anyone help me with that functionality? I really need a JavaScript library that does it for a project 
Am n00b, just curious..are the downvotes indicative of people hating typescript of just the comment being out of place? How is typescript generally viewed by the JS community?
&gt; you may not need React For something that simple, you don't even need javascript...
In case you didn't know this you can also make gmail aliases in this way (and filter your inbox based on those aliases) `example+spam@gmail.com` for example
You can also add `+&lt;whatever&gt;` to the local part of the address. For example, you can use this to identify what website is selling your email address to spammers: myemail+site1@gmail.com myemail+site2@gmail.com
New doesn't create an "instance" "from" a prototype - it creates an object, to which a prototype is assigned. No data is copied from the "class" to the "instance", instead it's all just delegation. So I don't see that as OOP, although it can obviously be mimicked. Good call on super, to be honest I never use it except when I have to on the constructor, because I can't stand OOP. Anyway, as I said we'll just have to agree to disagree on this
Depends on your target market. Lots of people in Germany have insanely powerful smartphones, but if you're not in a major city, your network connection speed will suck.
As a general rule of thumb, implementing a feature from one language in another language at runtime is generally not a good idea. For example, `myOverloadedFn` could've easily been written as: function myOverloadedFn(...args) { if (args.length === 0) { console.log("noArgs", args) } else if (args.length === 1 &amp;&amp; typeof args[0] === "string") { console.log("str", args) } else { console.log("default", arguments) } } But this kind of overloading misses the entire point of the feature in the first place: in Java, C#, etc, using an non-existent overload results in a compiler error. This is completely different than a runtime error: there's no way to make the uncompilable program run some side-effects, then say oops, something went wrong, then leave you with a mess to clean up; it just won't run at all.
Why not just generate it with moment.js?
Please elaborate.
Why not just make a static site at that point? 
Why not use proxies? It is already built in provided you compile to esnext. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy
A library like [`date-fns`](https://github.com/date-fns/date-fns) would make this even easier, but here is a vanilla solution: 1. Create a date set to the beginning of the desired year. 2. Add one day until you have gone through all the days of that year. function zeroPad(num) { return String(num &lt; 10 ? `0${num}` : num); } function daysInYear(year) { var date = new Date(String(year)), out = {}; while (date.getFullYear() === +year || date.getFullYear() === year - 1) { date.setDate(date.getDate() + 1); out[`${year}-${zeroPad(date.getMonth() + 1)}-${zeroPad(date.getDate())}`] = {}; } return out; } JSON.stringify(daysInYear('2018'));
You can also use the name of the service (e.g. example+reddit@gmail.com) and see who sells your email!
Hey dude. Been using Easel / CreateJS for a few years now after departing from Flash. Any cool new stuff in the pipeline?
The example in the article basically boils down to: User clicks tab, its content appears. You can do that with a static file server and 3 html files.
Which last time?
It is worth baring in mind that a lot of interaction can be accomplished with css. Don't try and recreate the full experience without JS, just try and make the site usable. Most people who disable JS do so in the knowledge that they will not be getting the full, polished, animated experience that they would be getting if they switched it on. It is normally done for any of 3 reasons 1) Privacy- Stop GA or simiar tracking 2) Speed / Performance / Bandwidth - less to download &amp; run - this is normally more relevent on phones etc. 3) JS not available - I do a lot of work in a terminal and it is often more convenient to browse from a terminal browser such as W3M which has no JS support
``` const variableOne = 1; const variableName = 'variableOne'; console.log(variableName); // variableOne console.log(eval(variableName)); // 1 ```
Not sure why people downvoted me. I want to write clear, maintainable, scaleable, code. At the "enterprise" lev l you do that with typed languages. Thus TypeScript. Probably downvoted by the same people that worship React like it's framework Jesus.
The "oops" can be caught in `default` (your `else` above). And yes, I've long used the `switch` with nested `if`/`else`s but that is not as clean as in other languages with real overloading. But yes... no compile time checking (but outside of syntax checking, JS doesn't do this anyway) and yes generally a "bad" idea. But look... it can be done!
Wait, I'm not sure I understand... So if I register, say reddit with example+something@gmail.com, I'd get email to example@gmail.com?
&gt; The "oops" can be caught Sure, but like I said, that's already too late if that code lives after your side effect. For what it's worth, there's a [TC39 proposal for pattern matching](https://github.com/tc39/proposal-pattern-matching), which is a variation of what you're doing here, and that proposal has some heavyweights championing it (Brian, who works at Microsoft on Typescript, and Sebastian, who works on React at Facebook). So I'd say, either k.i.s.s. or wait for that proposal to land.
Your question is way out of scope for a plugin like this. The only thing this plugin is made to do is to provide a cross-browser-compatible means of loading and playing sound. Analyzing "the pitch of a note in a soundtrack" is a completely nontrivial task. If it's doing something simple like implementing a spectrum analyzer, the [WebAudio API](https://webaudio.github.io/web-audio-api/) or any library that implements it should work. If you're trying to do something like automatically transcribe an arbitrary audio stream to sheet music, you're in for a world of pain plus a bunch of code that you _won't_ find in any audio library anywhere. (All previous efforts at transcribing music, on any platform, pretty much all suck to the point that it's worthless - this has to do with the very nature of sound. While it's possible to transcribe input from a single instrument like a guitar to then convert to MIDI data, doing so for music with multiple distinct instruments is next to impossible. In either way: There are no libraries that does this for you, and you _are_ going to need to write code from scratch)
The benchmark uses Angulae with JIT compiler, and it's better than react with that config.
yes, but the received email headers would still have the alias (`+something`) in it
It'd arrive in your inbox, but addressed to the address you gave originally, hence how you can know who is selling your email info, in theory...
&gt; now what? https://www.npr.org/programs/day/features/2005/oct/calvin_hobbes/strip4.jpg
This is proof of concept/fun with code kind of stuff! And much cleaner/simpler than any code I've been able to locate trying to accomplish the same goal. Thanks for the link, it'll be interesting to see where the proposal will go. Not sure how they'd manage it though... you'd need a whole new Typescript-esque "prelink" step added at startup just for that feature.
60 vs 30 is nothing compared to the cost of finding and fixing crossbrowser issues the library should have done for you. Also Howler does not have IE8 support and soundjs does. Granted, that should not be a requirement these days.
Now it's done in a one liner zam.router({ 'home-tab': {view: '#home', 'display': 'flex'}, 'stuff-tab': {view: '#stuff', 'display': 'flex'}, 'about-tab': {view: '#about', 'display': 'flex'} })
Crazy weird cool things on the web, by request. Or just tools we think are handy. Check out [http://www.gskinner.com](our website)
Should have an option to apply as a mentor imo
Then explain yourself. It seems you don’t understand the difference between eslint and prettier. We use both (eslint on CI) and we as many others have no problems at all.
Personally I am updating StageGL to support blend modes and some filter pipeline upgrades. Around the office we're seeing what we can do about es6 builds of the libraries. Not to mention we've recently consolidated to a 1.0 release, but I think some paperwork is holding up an official announcement. Glad we could help.
Stop using eslint. Your code is auto formatted by prettier.
No, eslint is required here. Again, you shouldn’t use eslint to format code, but to prevent bad patterns, compiler errors and other bugs. Use prettier to format code. But i guess you are trolling 😒
I don't think that's going to be possible. Ember attaches to `window.Ember` and `window.EmberENV` and I don't know of any way to alter that (much of the addon ecosystem relies on those too). I think there was some murmurings about fixing that in Ember 3, but that doesn't help you today. iframes are you quick and dirty solution that give you more window namespaces, and hosted from the same origin you can actually do a bit more than with a cross-origin iframe source, but it's still quirky and ugly to manage. If both apps are on a 2.x version, I'd vote you just upgrade the older app, Ember only deprecates stuff in minor versions and only removes deprecations in major versions, so nothing *should* break, but you're still opening yourself to introducing new bugs and if you're using a million addons updating those too can take a while. I've personally updated and maintained a half dozen Ember apps from the 1.x days to current releases and I don't usually encounter any problems, and staying on top of the rolling releases is better than neglecting something for years.
In very terse and incomplete terms, this is my point. Each step is work the machine must complete: js &gt; css &gt; machine instructions css &gt; machine instructions
The vanilla solution works perfectly for me, thank you! I assumed it would be more complex as I was not aware you could increment the date object in such a way. Thanks again.
If you are in an *ES2017* environment, there exists `String#padStart`: const zeroPad = (n) =&gt; String(n).padStart(2, '0');
This is great, thanks. I was also thinking of creating a new window object, binding the old lib to that, and then loading the new one. In the old application, I could still make calls to it. Something like: `window.EmberDeprecated = window.Ember` `window.EmberENVDeprecated = window.EmberENV` then in the old app: `new EmberDeprecated.RSVP.Promise` etc.
Static analysis is not the job of linting tool. Stop using eslint and prettier. Use flow/typescript and prettier instead. Read docs typescript https://www.typescriptlang.org/docs/handbook/compiler-options.html 
I included that one caveat in my original comment...
lol
&gt; No data is copied from the "class" to the "instance", instead it's all just delegation. So I don't see that as OOP, That's also how classes and inheritance work in Python. Also Ruby. Also Smalltalk. OOP can be implemented differently than Java and still be OOP. 
This seems to work for me: ["click", "touchmove"].forEach(event =&gt; { window.addEventListener(event, () =&gt; { console.log(event); }); }); I don't see any conflation of the two events when I emulate mobile on Chrome.
some context in your article for what Zam is would be helpful, also a page displaying your code working
Tell me more about these German insanely powerful smartphones 
Even with the script, whenever the swipe is released its still acting like a click? The site I am working on is baldwinlib.org
Will update article. http://zamjs.com actually uses this.
The 1.0 release did not go unnoticed! I've been working to update my stuff to work from 0.6 to 1.0 since I'm woefully behind. 
This is cool, thanks for sharing
Don't know... works for me... https://i.imgur.com/2Cs7aLa.png
I never said that they're from Germany, I said that most Germans have modern smartphones, but shitty network outside of major cities.
Glad if I could help. If only I'd be better at following my own advice but maybe that is my personal challenge. 
I actually used that to create a Slack bot which reads an SMTP inbox and posts the mails to the correct channel. Pretty useful.
This is kind of cool, but I'm not sure why you would want to do this instead of using (...args) and a transpiler like Babel. Or even the arguments keyword as I'm sure Babel would transpile the code back into for legacy support. Just seems like a lot of code to do what can already be done in other ways.
Wait, this library doesn't give me a polyphonic Melodyne like feature set in IE8? Totally unusable.
Why use strings instead of objects for building the schema?
Yea, the classic Seller/Buyer kind of thing is always the most fitted model for pairing type platforms.
Seconded
that's.....actually smart as fuck lol
By not using `this` you are largely forced to appreciate the language's lexical scope. Once you have mastered lexical scope understanding `this` is simple. It isn't lexical scope, except that in arrow functions `this` refers to the lexical parent of the arrow function, but since you are largely familiar with the constructs of the language at this point it takes very little to learn.
This doesn't support IE8 either. Fixing crossbrowser issues? What issues? it's just wrapper around HTML5 APIs, which every browser supported by this lib (so IE9+) support well, and it provides nothing more than native functionalities. It's probably good lib for those who are using that CreateJS ecosystem and want to wrote consistent code, but for everyone else it's a waste of memory. Sorry if I'm wrong, but that's how it looks like...
Does it add support to codecs the browser doesn't have? If yes, are those codecs added with web assembly?
cool home page, how was that moving image built? is it just a mp4 video created in an adobe app? (my guess)
Have you looked into [matter.js](http://brm.io/matter-js/index.html)? I don't think it's a direct port of Box2D, but is that really necessary?
I am super excited for StageGL to take hold for the performance boost. I tried converting one of my main projects to using StageGL a few months ago, but I ran into weird problems out of the norm. I know it's still not ready for production, so I reverted and let it be.
&gt; [a linter] executes the partial code in the background and tells you when something is wrong I thought a key feature of linters was that they don't actually run your code.
It isn’t next to impossible as much as quite complex and of variable utility (depending on the source). There’s a fair bit of literature, mostly in the domain of blind source separation, related to polyphonic transcription and “demixing”, as it were.
There are a number of them you can find browsing around on github, like [this](https://github.com/audiocogs/pitch.js/) for example.
The site uses a video, however it is a recording of [this experiment](https://lab.gskinner.com/2001_a_musicviz_odyssey/5) by Grant Skinner in the [gskinner lab](https://lab.gskinner.com/). It is a canvas-based music visualizer (using EaselJS), which is transformed using CSS3d. Glad you like it!
We are also working on complete refactors of SoundJS and PreloadJS in ES6. CreateJS is 6 or 7 years old, and a lot of the workarounds, plugins, and polyfills we used to use are no longer necessary. We are aiming to simplify the API and codebase, and ideally add a bunch of new features, such as advanced web audio access. 
Yeah good stuff. I've switched to Phaser from some new stuff but a lot of existing work is Easel and still has new content added to it monthly. Looking forward to Easel updates!
When SoundJS was released (2010/2011), there was no HTML5 or WebAudio, so it wrapped HTML tag audio, as well as a Flash-based solution (which was left in to help older browsers). It also works as a plugin for more advanced preloading scenarios with [PreloadJS](https://createjs.com/preloadjs). Tag-based audio is a beast that we will be glad to get rid of in a future release. Every browser had quirks and issues, and a ton of work went into supporting all of them (as well as things like Audio Sprites to get around mobile limitations). WebAudio and PhoneGap/Cordova support was also added over the years. They aren't part of the main library (and don't add to the bloat), but there are things necessary in the main library to facilitate the plugin architecture. I don't disagree with the main point though. SoundJS has become a bit bloated, and with the well-supported WebAudio API being available pretty much everywhere, the next major release should see a reduction in filesize. (source: I manage a lot of this stuff @ gskinner)
As someone pointed out in this thread, SoundJS doesn't do anything the browser can't already do -- it just simplifies the API, handles browser issues, and assists with determining what file formats can play (etc). Supporting additional codecs is definitely not on the roadmap at this time, though it is an interesting idea.
From the repo Readme it sounds like this is just a learning project so that's cool. But in case you aren't aware you're basically reimplementing [ngrx](https://github.com/ngrx). 
you lost me on Flash!
Wrote this when you started leaneing JS.. Shit I feel so far behind now 🤭
I'm working on fixing that. If you feel the need you can hit me up directly with a bug report and repo steps as I'm the StageGL guy.
I do, as a web developer I always liked that on pages and try to incorporate it myself when applicable.
I really like the text parallax on the gskinner site. would you happen to know how it's done?
Oh, I like it!
Hi /u/saladpoint, For javascript help, please visit /r/LearnJavascript. Thank you!
no, they don't do that https://leanpub.com/understandinges6/read#leanpub-auto-the-temporal-dead-zone
As I said above... &gt; `overload` doesn't function any differently when it comes to side effects than a bunch of `switch` / `if` / `else`s, it just automates and standardizes the `arguments` checks.
9g9
Happy to see this. In etherpad we use prefix for plugins of "ep_" so this won't break that functionality which was my primary concern.
I think this is a really great effort. Well done. I think the most important next step will be to get the audio playing instantly, even as the waveform and other data is being generated. As soon as you can start playing, start playing, and do the other stuff like waveform generation in parallel in a webworker.
Ive been looking at this for a couple of hours now... still cant figure out how it works. syntactically I know what its doing.. I just cant quite follow the logic of it. I think I get confused when it branches out
would it look good? no lag?
Maybe ask on stackoverflow. and paste and example?
thanks ;) I did spend some time on it
Now the call-tip will tell you that the function takes zero arguments. That's not good. Overloading only works with mandatory types. Only then you'll get immediate feedback. It's still kinda meh, though. I recommend to use separate functions or sort-of named parameters via destructuring instead. Overloaded functions in JavaScript are annoying to use and annoying to document. Even if you write the type annotations for it and use something like VS Code which can make use of them, it's still crap. Flipping through a list of call-tips is much slower than picking one of those functions by name. I mean, it's great that the VS Code team went through the trouble implement this feature for legacy libraries like jQuery, but overloading really isn't something you should use in JS.
Arve's reply is correct - this is a very hard problem. I don't know of any JS library which implements a solution. That said, if you want to research it, I'd start by searching for "f0 detection" or "f0 estimation". If other music/sound is playing, add "polyphonic" to your search.
Thanks for the reply. The problem with Matter.js is that the performance isn't great and it lacks some important functionality (e.g., CCD). There are other physics engines written in plain JS that have this kind of problems (e.g., p2 physics). This is why I prefer to use Box2D.
1) this should be in r/react native 2) do your own research
At all? You could have your own JavaScript pull all the script tags on the page and send them back to the server for analysis, I guess. In a way that's not bypassabble: No. The client controls that end and you can't trust the client. They could load before your script and override the methods it needs, then send their own fake reports back to the server. It's the same issue as to why DRM is inherently always breakable. You're giving the user everything they need to run your game and letting them run it in an environment they ultimately control.
do you know of some good link on this?
That's assuming they aren't using a bookmarklet or just using the dev console to add the code. (Which is how I've always done it.) So... No. There's no simple way to detect changes like that. There are just far too many ways to make them.
Or if they are using browser plugins. For example chrome extensions can inject code to run on your page. 
Pretty sure webextensions/chrome extension content scripts (needed for dom access) _are_ injected as script tags, so that is the one they will detect. Legacy Firefox extensions were not however
&gt; I wasn't fast enough to live code... That's fucked up. If that's their hiring criteria, you were probably lucky you were disqualified.
Is this for any job in general? Or just positions at some of the more "sexy" companies?
Agreed, I would sign up
Absolutely, and they have loved my mini project , it would've been more logical if they gave me another round. because that was just robotic. 
most startups positions on glassdoor (react/redux) or even bigger companies.
maybe because i'm non-EU that makes it even harder ?
Losing because of speed sounds unfair, and I don't think too many places would promote coding "fast", unless it was a case that you were ridiculously slow. BUT I've been on the other side of it (i.e. interviewing). A lot of the time there's too many candidates and you just have to eliminate some of them for petty enough reasons. You might get down to a choice of five people for two positions, realistically they are all capable but you have to choose. So any tiny reason can determine the decision.
Yes but it won't help you. 
It's very old but it was still really smart when it was first done. Annoyingly, it was a djb idea in qmail, so once again. It's a grit teeth and say yes, djb is smart even tho he is an irritating arse.
Absolutely noted! On the official release, I will definitely attempt to switch over again. There was a huge performance gain on the parts that worked flawlessly. Thanks!
Agreed. Every half decent developer knows that sitting down and cranking out code in one sitting is almost always going to produce shitty/buggy code. I say, be thankful you don't work for them. I would hate to work in that environment, toxic and wasteful.
Yup. I lost a job where the guy basically offered me the position beforehand. It was a remote position, so my interviews were on the phone. He was my initial interview, and he kept telling me things like, "You're gonna fit in so great here," and "That's such a perfect culture fit." He finished the interview by saying, "I just need you to talk to one other person for testing your knowledge, but since I'll be your direct report, I'm going to tell him you're fine." I talked to the other guy, and I nailed every question, but I then got an email, stating I didn't get the job. I emailed the first guy and was like, "WTF?!" He said, "I was really looking forward to you joining the team, but [dude] said he could barely hear you during the conversation and thought maybe the interview wasn't important enough to find some place quiet." I was interviewing in my car, because they called me while I was at work. The company was laying me off and knew I would be interviewing, but I still wouldn't have had a quiet place to interview, so in my car was the quietest I could think of.
In fact none of them are "classical OOP" languages... 
I'm not a fan of the rigidity in a lot of tech interviews these days. I interview a few different levels of developer at my current job and they all get the same test, we make notes then discuss it after they've gone through all the stages. It's only if they fail any one section horrendously that we don't put them through, so as to not waste anyone's time.
I'm a little surprised that a JS-focused project is using makefiles
Sounds like you dodged a bullet. Any place focused on speed to that extent is not a place I would want to work. Unless like someone else mentioned you didn’t make any significant progress in the given time, don’t sweat it. Also ask for feedback if it isn’t given. That way you know what interviewers are looking for that you’re not delivering. 
Interesting. I only ask because I tend to notice many on Reddit who complain or have concern on job prospects seemingly only are looking at the big 4. I'm in Chicago, and notice most React JS positions are freelance. Unless it's an agency or company with a dedicated development team, many simply want temps. 
As a hiring manager (Director, Front-End) actually hiring instead of playing games with candidates, the more rigid the process other companies are taking, the better the options are for me and my team when it comes to finding good, no-bullshit candidates to join the team. 
Once your server delivers its files you don’t get any sort of control. That’s bat country. 
"culture fit" is a big red flag. I would challenge them by asking what they mean anytime you hear that phrase.
It's weird and probably a hack. But since I can't return multiple values. I cheat by calling printAlpha in the return case. I'm not calling return process(...) inside the function like a normal recursive function. The recursive function, process, returns undefined. There are multiple call stacks generated for each permutation. // This would return the first set to return currentSet var process = (currentSet, [head, ...tail]) =&gt; { if (typeof head === "undefined") { return currentSet; } var next = arr.slice(-1)[0] + head; if (+next &lt;= 26) return process(currentSet.slice(0, currentSet.length - 1).concat(next), tail) return process(currentSet.concat(head), tail); }; So the code only works because printAlpha is called at the end of each permutation.
Sorry you had a bad experience but I’ve had very different ones. The most recent job I applied for (and got) skipped technical interviews altogether because someone at the company already knew what I was capable of. Having a strong network in the industry is incredibly valuable when trying to find a job without a huge hassle. 
How does this differ from codementor.io?
That's personally my approach when hiring. If some very reliable in my team refers someone else, i usually just try to find out if the person has the right mind-set, the potential of growth etc. Everyone deserves a chance. 
I have seen this too. Hiring mistakes are costly and bad for morale, but I don’t think these long, drawn out hiring processes work that well. Not only do potential employees go through this, but employers spend a lot of time on it as well and sometimes still end up with employees they have to let go after not too long.
Coders communicate through the code in deliverables, wanting someone to deliver something live is like asking a writer to write something now immediately while people are staring at him and judging how many times the writer erases.
I fully understand that! And don't get me wrong, I'm just thinking about using actual version of lib in context of today's world of evergreen browser (not that older versions with backward support). Thb I'm not a fan of adding more and more external libraries to the project to cover basic functionalities available in browser of out the box... I remember the times when we've got to make hundrets of hack to privide cross-browser compatibility, but now we don't have to. And that's the reason why my opinion someone can get as negative from the beginning ;)
Honestly this is to your benefit. You have performed in a pressure situation and have a project you created which they very much liked. Use it as an example of your work in any other jobs you apply for that are applicable. I work 100% remotely in California as a software analyst and took on many jobs before finally landing this dream job. It will all fall into place just takes a little time and experience. 
The hiring process is a numbers game. You will fail at interviews you did great at, and get offers to places you thought you bombed. I know plenty of Facebook engineers who didn't pass Google, and plenty of Google engineers who didn't pass Facebook. I know plenty of Google engineers who didn't pass _Google_ 6 months earlier. Sometimes it just comes down to who interviewed you that day, how they were feeling, and how you were feeling. It's unfortunate, but the best thing to do is interview at a _ton_ of places, the less desirable ones first, and continue to hammer away and improve at those coding questions.
I don’t like themese case study in the hiring process. I have the feeling there are only looking to get free consulting.
I think there is a place for tiny frameworks like this - nice take on it. I am a _little_ worried that there’s no tests at all but you took the time to do benchmarks and a logo
upsert is async. Node runs upsert, upsert kicks off a network process and returns. Then you get "Done". Lots of times you'll do stuff like Promise.all(businessData.map(function(business) { return app.models.Business.upsert(); }) 
I think it's a work in progress. Onto creating version two after I post this.
&gt; Promise.all(businessData.map(function(business) { &gt; return app.models.Business.upsert(); &gt; }) Ah, I didn't think to look into upsert as a function in the first place. Thanks! I am confused about your use of Promise though. Can you explain?
So I'm not sure if the docs are up to date or not, does this use the new actions + state = model thing? Also do actions now have the curried function signature? Really excited to finally use a stable release.
Interesting! I'm from germany and my experiences have been completely different! In my city, companies have to fight for developers and will hire you if you did not completely fuck up the interview. 
Yes! Please refer to the [documentation](https://github.com/hyperapp/hyperapp/blob/master/docs/README.md#documentation) as the ultimate source of truth! :) &gt; does this use the new actions + state = model No, it brought more problems than not to the mix. &gt; Also do actions now have the curried function signature? Yes. → `myAction: data =&gt; (state, actions) =&gt; newState` 
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hyperapp/hyperapp/.../**README.md#documentation** (master → c906e06)](https://github.com/hyperapp/hyperapp/blob/c906e06fde5867f725341742156a77c164a3a156/docs/README.md#documentation) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drva2s5.)^.
*Just to add something more, I know about ES5 patterns; factories, revealing module pattern, AMD, etc. But I don't know how projects were approached, like: a module for each component? literal object separating event listeners &amp; DOM selections?... 
What made you decide against `state =&gt; actions =&gt; value` or any permutation of the three?
The thing the caught my eye was onclick instead of onClick like in React. Curious as to why all lowercase was chosen.
Hi /u/rahulkannan, For javascript help, please visit /r/LearnJavascript. Thank you!
Does this require that you define all your actions, and initial state, at the top of your app? Can each component have its own set of actions?
Tqs
Mostly uniformity with the platform. Hyperapp does not implement an event subsystem like React, so all lowercase resonated the most with us.
Uniformity with the way you implement actions, *and* the way you call/run them. Reading the [typings.d.ts](https://github.com/hyperapp/hyperapp/blob/master/hyperapp.d.ts) help see this. tl;dr You implement your action and call it the same. 
[removed]
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [hyperapp/hyperapp/.../**hyperapp.d.ts** (master → c906e06)](https://github.com/hyperapp/hyperapp/blob/c906e06fde5867f725341742156a77c164a3a156/hyperapp.d.ts) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Maybe for non-eu it’s different.
A component is a pure function that returns a piece of your UI. Unlike the view function, they are not pre-wired to your application state or actions, so you need to pass it to them. You can define your state and actions modularly, though. Like all JavaScript objects, the state may consist of other objects, and it can be deeply nested. We refer to nested objects in the state as _substate_. To clarify: Hyperapp uses a single state tree architecture, that means the entire state is kept in a single object, and to update this object we run actions. Updating deeply nested state is as easy as declaring actions inside an object in the same path as the part of the state you want to update. Also, every state update is immutable by default and produces a new object, allowing cheap memoization of the view and components using a simple strict === check. 
There wasn't much. You might separate things into JS files to keep yourself sane, but it was basically just a big ball of Javascript. If that sounds chaotic and insane, that's because it's why all these frameworks were created.
congrats on the 1.0 release :)
I think you just interviewed at a shitty place. It honestly sounds like you had non technical people hosting your interview. 
Yay!
&gt; client side javascript without using modern SPA It's a little difficult to answer this question, because there are only very few SPAs developed without using some kind of framework (these days). If you don't have a framework, you tend to have to pair jQuery with several other things as you mentioned such as a router, module loader, etc. In one application I work on we have a home-grown SPA which is based on RequireJS for loading modules, Knockout for binding and components, Director for routing, jQuery for AJAX, Amplify for pub/sub, etc.... We have one view model (JS file) for each corresponding view (HTML) file and one or more global CSS files. We use RequireJS to load the view model and view together (via RequireJS text plugin) and then either inject them into the DOM with jQuery and run the view or register them as Knockout components and let Knockout handle the lifecycle. To be perfectly honest... I really like(d) our home-grown framework. It is transparent what is happening at every step and if it doesn't do something you want, you just modify it. Our newer applications are developed in Angular 2+ which is fine, but I still sometimes abhor the "automagic" you get with modern frameworks. 
Got it
Interesting. I’m on mobile or I’d spend a little more time exploring, but can you answer a quick question? I notice JSX templating mixed into your example code. My biggest beef with React is the mixing of code and html templating; I *desperately* want a framework where I can specify that template in a separate file, but everyone seems to love inline templates and wrinkles their nose whenever I mention how much I hate them. Any chance you have implemented templating in separate files? And if not, how do you feel about adding that feature?
The JSX is optional. You can also use hyperx &amp; t7. Or @hyperapp/html as well as the built in h-function (vnode constructor) - although those last two make it clear it's not really "templating" we're talking about. But sure: you can put it in a separate file if you want. Nothing stopping you.
Do you have any syntactic examples of including html templates in separate files?
You can write JSX in different files and import it that way. All actions/state is separate from the views (components). For an example you can checkout: https://github.com/selfup/hyperapp-one You also do not have to use JSX. You can make pure `h` or use our h call helper https://github.com/hyperapp/html Hope that helps!
Here is how you would import from a separate file: https://github.com/selfup/hyperapp-one/blob/master/src/index.js and then here is a component being written in a separate file: https://github.com/selfup/hyperapp-one/blob/master/src/components/Counter.js
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [selfup/hyperapp-one/.../**Counter.js** (master → b2cc866)](https://github.com/selfup/hyperapp-one/blob/b2cc8666b843b0e7eac6c78587c407f0dce344d6/src/components/Counter.js) * [selfup/hyperapp-one/.../**index.js** (master → b2cc866)](https://github.com/selfup/hyperapp-one/blob/b2cc8666b843b0e7eac6c78587c407f0dce344d6/src/index.js) ---- ^(Shoot me a PM if you think I'm doing something wrong.)^( To delete this, click) [^here](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply drvdu50.)^.
&gt; And if not, how do you feel about adding that feature? How would that look like? I would love to think about it, but first I need to understand what you mean. :)
Thanks, that’s what I was looking for. I am, however, quite disappointed that I can’t keep the template completely isolated and I have to still mix code and template. That means I need new tooling if I want even basic syntax hilighting. 
You can always use hyperx or t7 if you want to write template literals btw 
Do I understand this correctly? You're saying that sub-components can be in separate JS files, and they can export state and actions that the top-level of the app imports and mix-ins with its state and actions?
`onclick` is the the pure DOM API. React provided wrapped versions of a lot of the DOM event handler API's.
why do you like templating in separate files over jsx?
Well, a lot depends on your framework structure, but some form of file specification for the view when the component is created that the transpiler could use to find and compile the template would be necessary. As I said I’m on mobile right now, so it’s not easy for me to give a good example of how the template file would specified in code. But the important part is that the template file contents would be purely htmlish, something that could easily be interpreted by an html or xml hilighting editor. Something I don’t need extra tooling for in order to have a good development experience. 
What editor are you using that doesn't support JSX?
Yes. But you do the mixing yourself, or you can support yourself with a function [like this](https://gist.github.com/JorgeBucaran/4dfa567e38ca222c25c46184b3a5df99). Nested objects (as deep as you want) are "similar" to Redux stores, in the sense that they are eventually assembled into one single object tree, and updates are just as easy if you declare your actions on the same path. const state = { counter: { value: 0 } } const actions = { counter: { down: value =&gt; state =&gt; ({ count: state.count - value }), up: value =&gt; state =&gt; ({ count: state.count + value }) } }
[Well...](https://i.imgur.com/4VMGcn2.png)
Unwrinkle your nose please. :) I’ve had many conversations on this, but the biggest thing is that I’d like to be able to have a good development experience using industry standard tools without needing a new IDE or sublime/notepad++ plugin just to get syntax hilighting. 
I just want the template completely isolated in a separate file, *without* boilerplate. I don’t understand why people defend the boilerplate. 
What "industry standard tools" support ES6+ syntax highlighting but not JSX? Or do you also refuse to use ES6+ syntax because old text editors don't understand it by default?
That's about right! You could always have a tree structure, where parent state/actions mix in their children's stuff (and compose more advanced components).
Well, I look forward to you explanation when you are not on mobile.
No that’s definitely the opposite of what I’m looking for. 
You're right that if your current tooling (what is that?) only supports plain html/xml variants for syntax highlighting et c then you can't use those for your hyperapp-components. That's because it's not really html templating (although JSX makes it look close). It's actually javascript functions, which produces a tree of virtual nodes, which hyperapp turns into actual DOM nodes. 
JSX is *not* a dependency or is it required to use Hyperapp, but we use it throughout the documentation and examples for familiarity. Alternatives to JSX include the built-in h function, the official [hyperapp/html](https://github.com/hyperapp/html) package, [hyperx](https://github.com/substack/hyperx) and [t7](https://github.com/trueadm/t7). For example, using hyperapp/html, **no** ~JSX~: import { app } from "hyperapp" import { div, h1, button } from "@hyperapp/html" const state = { count: 0 } const actions = { down: value =&gt; state =&gt; ({ count: state.count - value }), up: value =&gt; state =&gt; ({ count: state.count + value }) } const view = (state, actions) =&gt; div([ h1(state.count), button({ onclick: () =&gt; actions.down(1) }, "–"), button({ onclick: () =&gt; actions.up(1) }, "+") ]) const main = app(state, actions, view, document.body) 
Thanks in advance for the harsh feedback! https://github.com/raymondborkowski/4loop
ok, so the main issue is compatibility with your preferred workflow. If you were using a jsx friendly workflow from the start, can you think of any reason to prefer templating vs jsx?
The docs and example make it seem like a less feature-complete version of jQuery. I don't like React much, but I would still choose it over this for a web app if they were the only options to choose from.
I’m aware of what it is, and how it functions internally, but it takes a special transpiler to transform that htmlish syntax into JavaScript functions. If you’re already writing a transpiler for it, why not just let it transpile pure files? Why only include it with code mixed in? That’s the part I want to be different.
Well I use plain hyperscript (typescript) primarily, but along with JSX/TSX, I don't think you'll get better editor help. With templates you would need to add plugins that understand the DSL and I doubt it'd be syntax/type checked as well as TS/JS. Seems like more tooling rather than less. Plus the overhead and limitations of using yet another DSL.
The benchmarks are what makes it worth it. https://github.com/roecrew/zam
What about page routing? 
Tooling isn’t the only issue. Just one of. And I really don’t want to get into this *again*. Everyone jumps on me to defend the code template mix, but I simply do not want the code and template mixed together. I want them separate. 
I think we are talking about apples and oranges here. For example, if you are coming from traditional JavaScript framework like Backbone: &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Hometown&lt;/th&gt; &lt;th&gt;Favorite Color&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;% _.each(artists, function(artist) { %&gt; &lt;tr&gt; &lt;td&gt;&lt;%= artist.get('name') %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= artist.get('hometown') %&gt;&lt;/td&gt; &lt;td&gt;&lt;%= artist.get('favoriteColor') %&gt;&lt;/td&gt; &lt;/tr&gt; &lt;% }); %&gt; &lt;/tbody&gt; &lt;/table&gt; **You can't do that in Hyperapp**. It's not a missing feature or anything, it's just not the paradigm I chose for the framework. Hyperapp is _like_: React, Preact, Inferno, Mithril. Hyperapp is **not** like: Backbone, Angular, Ember, Vue, Riot, Svelte, etc.
What framework names do you remember off the top of your head that _are_ kinda like what you are looking for?
I just want to hear your side, not trying to debate. it would be useful to this community to hear a well-constructed opinion. Why do you want them separate, besides tooling concerns? 
If the parent application is written in Java, the JS interpreter is _probably_ Rhino. (This has been the case the few times I've dealt with Java applications that have JS scripting hooks.) Not unique, but not something you see every day. You could try [this](https://stackoverflow.com/questions/22989872/how-can-i-get-the-version-of-rhino-from-within-javascript) and see if it reveals anything. Ideally you could just ask the application developer for this info. Or perhaps there's a way to find out what libraries the application includes.
JSX is not a dependency or is it required to use Hyperapp. Many people swear by good old `h` and you can use Hyperapp right now without a compiler. JSX is in the example because that's what most people like and use anyway. I use it and I like it too, but Hyperapp is flexible so that you can use whatever you want.
https://github.com/hyperapp/router
I'm not so sure about that. Developer experience is just as important. The reason React is so popular is that it offers an excellent developer experience, an excellent tool set, and is fast. Zam offers just one of these pillars - speed. I just tried using zam, and honestly I would rather just use the DOM API at this point. Try rewriting the functions so that the selector argument is in the same place for each function. Having to consult the docs every time I need to write a function call kinda sucks.
This is the answer that was needed! Thanks for that
Do you mean flatten arrays? 
Thank you for your honest feedback! I will def take that in to accout.
JSX is not a templating language, and React components do not use templates. In general though, I believe explicit is better than implicit. I don't like frameworks that automatically search certain directories for templates and return the first one with the name I'm looking for, forcing you into pre-emptive, redundant template namespacing (looking at you, Django and Meteor/Blaze). And if you're using a framework that requires you to explicitly define where to find the template file for each component, well, that's boilerplate. If there's any kind of boilerplate that I *do* want, it's explicitly listing the inputs to my components. In templating systems, you usually have to just read through the whole template to find what kind of input data is needed to properly render the template. Could you imagine a programming language where a function had to be defined without an argument list, and you just have to look through the function body to see what inputs it accepts? With JSX, I can destructure the props for a stateless functional component to explicitly declare what props it accepts at the top of a file. *I don't have to memorize what data my "template" needs, because my component is just a JavaScript function and my IDE can tell me what inputs it accepts.*
One other (small) thing - the npm package name is node-zam, implying that this module is specifically targeted towards NodeJS. Since this is clearly intended to run in the browser, consider dropping the "node-" part
Why don’t you just use handlebars then? Problem solved.
Angular and Vue both allow for separate file templates
Will do! I just just removed fadeIn and fadeOut functions. Also, I rewrote the selector arguments positions in the functions to make it more intuitive.
Angular is the one I tend to use. But it comes with a lot of baggage I don't necessarily want, and React (and possibly Hyperapp), seems to solve all those problems. But the decision to include code with template without allowing the template to be specified in a separate file just seems inane. There's no reason for it that I can discern other than "we don't want to". You're already transpiling the JSX template into JS dom calls. You had to write a transpiler to handle both dealing with the transition to and from JSX *and* to compile the JSX. Why not let the transpiler pull from a file rather than from that section of code? 
Sucks. But you aren't dealing with startups. I've gotten two different offers on the spot from companies No Shame in trying. No shame in applying to 100 compaubes to get a single job.
Yeah, there are easily 500 instances of snowflakes and multiple time intervals executing each "layer".
and even better - it is simple to reuse other view functions ``` import { h } from 'hyperapp' const TodoItem = ({ id, value, done, toggle }) =&gt; { const onclick = e =&gt; toggle({ value: done, id, }) return h('li', { class: done &amp;&amp; 'done', onclick }, value) } const view = (state, actions) =&gt; h('div', {}, [ h('h1', {}, 'Todo'), state.todos.map(({ id, value, done }) =&gt; h(TodoItem, { id, value, done, toggle: actions.toggle }) ), ]) ```
There is a router: github.com/hyperapp/router and while it should work with hyperapp@1.0, I still need to confirm it does and release it as 1.0. I am not as strict about the router as I am with hyperapp itself, so if you have ideas for improvements, even radical ideas, please get involved, hop on Slack or create an issue on GitHub.
You are somehow confusing template and view. Hyperapp use the so called virtual dom, that is briefly an abstraction of the current dom to perform fast patching and optimisations. Do achieve that, we store each virtual node (representation of an html element) as a plain object. All of h, jsx, hyperapp/html or hyperx are helpers that help you to create those objects with ease at your own discretion. JSX is in other words just a sugar to call the function that will generate the virtual nodes, with an HTML like syntax. Templating is a way different, at you will not deal with the DOM interface, but with the render capability of the brower. You will give to the browser the HTML file and let him to the rest (not true, now some framework deal with template and a virtual dom too). But using Hyperapp, you can also chose to do not use the vdom engine an use your own. By example by using pupa to generate the innerHTML content then inject it into the whole body. Here is the gist https://gist.github.com/Swizz/a2556e50782ab8778c3cddf206a618c3
Wow, very cool!
If you have no code in your template then you have static HTML pages and don't need a web framework.
Uppy is currently the number one trending project on GitHub 🎉 I’m one of the creators, we’ve worked hard on this for two years and would love your feedback here
Ok, so I clearly lit off a firestorm, and I'm officially moving over to a keyboard and good text editor so I can write this far more in depth comment. Also, rather than reply to the half-dozen comments I have in my inbox, half being from you, I'm picking this one to reply, because you asked what it would look like, and below I'm going to provide that. If you're interested in including the feature, great. If not, I feel no desire to go through another debate over why I want this, I just want it, and I can tell you I'm not alone in that desire. --- In another post you asked what existing framework best described what I'm looking for, and I'll answer with the following as a sort of **tl;dr:** I want all of the semantics of React, including JSX (and possibly the new features you're including, once I have a chance to go through them in greater depth), but with the *templateUrl* feature of Angular, such that the htmlish format of JSX is fully defined within a separate file. --- So you asked what it would look like. Here's how I envision it, using the example on your link: import { app } from "hyperapp" const state = { count: 0 } const actions = { down: () =&gt; state =&gt; ({ count: state.count - 1 }), up: () =&gt; state =&gt; ({ count: state.count + 1 }) } const view = (state, actions) =&gt; template_include("main.jsx") // template_include is a keyword recognized by the transpiler that reads the file // "main.jsx" inserts it into the document in place. Much like a C include call. export const main = app(state, actions, view, document.body) /**** Contents of file "main.jsx" ****/ &lt;main&gt; &lt;h1&gt;{state.count}&lt;/h1&gt; &lt;button onclick={actions.down}&gt;-&lt;/button&gt; &lt;button onclick={actions.up}&gt;+&lt;/button&gt; &lt;/main&gt; Note that this is for a compile-time compilation of the template. I'm OK with a runtime compilation, if that fits your semantics better, in which case you'd import template_include like you import h, although you'd probably have to pass `state` and `actions` as parameters to the function in order to map it to closures during compilation. It would work something like this: import { jsxt, app } from "hyperapp" ... const view = jsxt("main.jsx", {"state": state, "actions", actions}) And I'm more than willing to work back and forth with you on how to specify the file and to deal with namespace semantics or other issues, if you're interested in creating this feature. 
First, this is assuming `upsert` is returning a promise. Promise.all(businessData.map(function(business) { return app.models.Business.upsert(); }).then(function() { console.log(chalk.magenta('Done seeding data, ' + businessData.length + ' records created.')); }); Having a promise lets you wait until everything is done, which masks the async. If you're writing ES2016, you could also say await Promise.all(businessData.map(function(business) { return app.models.Business.upsert(/* data */); }) console.log("done"); The difference from your original code being the `await Promise.all()` surrounding the loop.
So what will I as a developer be missing form say React that is an order of magnitude larger?
No, I-ve just done, All I wanted is a recursive function because some properties has an array of objects. Thanks a lot
Javascript doesn't exactly have "versions". Terms such as "ES6" or "ES2017" can be thought of more as milestones with every single implementation conforming to the spec to a greater or lesser degree. I would suggest explicitly testing for the features you require. This is probably a good place to start: https://kangax.github.io/compat-table/es6/
for one, an ecosystem several orders of magnitude more mature. React is also significantly faster.
That sounds like pure components though, and it's already there. You can put 100% of your html in "separate files", and then just wire everything together. What else do you want exactly and how does it differ from JSX?
Here is a tip. Look for companies that don't do whiteboard interviews. Most will skip this kind of BS. I once didn't get a job due to having no ETL experience and messing up a coding white board session. Check the link: https://github.com/poteto/hiring-without-whiteboards
There aren't that many options... Java 1.6 included Rhino 1.6r2, so that's probably the best bet. If the application uses Java 1.8, then that includes Nashorn instead. In either Rhino and Nashorn you can check for the existence of a global `java` object, which is exposed to JS according to the JDK spec. If that _is_ indeed available, you might try using `java.lang.System.getProperty(...)` to inspect some properties and deduce from that. Interesting properties may be `"java.version"`, `"java.vendor"` or `"java.specification.version"`. In any case, those won't tell you the actual JS version or engine. One simple difference from Rhino to Nashorn, is that in Nashorn you have available a `Java.type()` function that wasn't available on Rhino IIRC. So if you're able to run something like... var intMatrix = new Java.type("java.util.ArrayList"); ...without error, then you can probably bet you're running in Nashorn. If that throws, but you still see the `java` global object, then the guess would probably be Rhino.
Because that's not how JSX works...JSX is transformed into API calls, it's not like Angular where it compiles a template. If you really want to you can just have a file with a single export of the JSX template and then import that in a different file.
&gt; a separate file just seems inane Unclear if that language needs to be used here to be honest. Devs use webpack or rollup with Babel (or just babel) to transpile JSX using h as the pragma but that is not in the core lib. That is a development step that you must do on your own if you want to use JSX.
&gt; React is also significantly faster. It seems that Hyperapp isn't only a view framework which React is. This also does what Redux does for React. Basically it's React+Redux in one. Also, what benchmark are you not referencing that tells you that React is significantly faster? Keep in mind that 100ms of download/parse/compile time can be worse because of Reacts size compared to the 1.3k of Hyperapp, than the speed in which it renders 10k rows.
Stateful components, the synthetic event system, ecosystem, etc... What you gain is a much smaller application bundle size. I've got a decent sized application in progress with hyperapp that includes routing, data fetching, some functions from `date-fns`, etc... and the bundle size of the whole app is smaller than react+react-dom.
http://chromosphere.com
how do I edit a jquery template so that the user can enter their own graph data?
Hi /u/scu8a, please post a link to the site as the submission (instead of an image). Thank you.
Also, please include a link to to an appropriate project page or similar. Please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more information.
this is one benchmark: http://www.stefankrause.net/js-frameworks-benchmark7/table.html react startup is about twice as slow (~25ms slower), but it's on average faster when performing actual work
I get that you don't want to explain reasoning, but there are several reasons something like this would never be implemented: 1. JSX is a standard that this team doesn't have any control over. Having JSX specified in it's own files is not part of the standard, and would never work anyway for the reasons below. 2. JSX is a syntactic sugar on top of regular JS *expressions*. It is a declarative syntax, but it doesn't represent a template, it represents an actual expression. Having JSX be specified in it's own files would be similar to allowing string and number literals be specified in their own files. 3. The feature you are suggesting is exactly the reason JSX was introduced to begin with. People were tired of having to specify their view and logic in separate places, and JSX allows you to put them together. Allowing them to be separated would be moving backwards from the fundamental philosophy of JSX. 4. JSX allows you to specify full JS expressions, including functions, objects, arrays, etc. within the elements. Your proposal allows you to separate the JSX from the logic, but how exactly would you do the reverse and separate nested JS from these new JSX template files? Frankly, if you want this separation, I'm not sure why you would even want to use a framework like this anyway, which is not built for that kind of architecture. What you want sounds very close to Vue, which provides a succinct way to build a component architecture while allowing the view to be separated from the logic.
Perfect, that worked. Rhino 1.7 release 4 2012 06 18 So, according to the Wikipedia article... I guess I have JavaScript 1.7? "As of version 1.7R1, Rhino supports Java 4 and up, and supports version 1.7 of JavaScript."
You either put html in js or js in html. There's no other way. 
Since the SCRIPT element uses a relative path, make sure it's adjusted based on current URL. e.g. if the SCRIPT element `src` attribute is `subdir/code.js`, and the current page is at `site.com/dir/page`, and it loads the HTML from `site.com/otherdir/page`, that SCRIPT element will point to `site.com/dir/subdir/code.js` instead of `site.com/otherdir/subdir/code.js`.
Pretty much feeling some of the things OP said. I'm usually told most of my code is clean, but I don't code fast enough for them. But that's usually in live interviews that last an hour or two. A challenge that can better reflect a real work scenario, and still administer in a relatively short time, is to give someone an existing codebase and have them identify and fix a small set of bugs that prevent the code from passing certain tests.
Job interviews are like double-slit experiments- the observer effect must be taken into account.
If it's a compile time thing I don't see how that would be part of a 1KB framework. It seems all you want is some sort of babel plugin or simple script that tacks export function view(state, actions) { return ( onto the front of your file and ); } at the end to make a valid JSX file.
runtime perf for SPAs is more important than the extra 100ms you must wait during loading. you will feel runtime costs with every single interaction. whereas boot time is paid off almost instantaneously.
Oops, brand new here, lol. Funny, I'm several years late. Wilco, Kenman.
Author here, if anyone needs more clarifying answers to questions feel free to ask here
&gt; You also have far fewer concepts to remember. and far more concepts to re-invent ;)
jQuery library itself is just one big object in global scope. Go figure.
&gt; If you're writing ~~ES2016~~ ES2017 FTFY 
Yeah, all the paths used are adjusted to be inserted into the main DOM.
Technically, you could define a `render` function in a separate file, then import that and call it with `this.props`from your class `render`function. A little kludgy, but maybe not so bad. I was initially grossed out by the markup mixed in JS, too, but as I used it I found all the benefits of React to be worth it. I didn't think it was worth getting hung up over something cosmetic.
Some companies hiring process is a joke, earlier this year I interviewed for Farfetch for the Front End Engineer position, I aced every question and their coding test (which was to build a Vue page using their design, it was a basic e-commerce front page and I had four days to deliver. I had enough time to build a Node API and build a lot more pages than the front one for them, wrote unit and e2e tests, then the interviewer passed my github repository to one of their engineers to review and he loved it). After I delivered the coding test the interviewer proceeded to schedule the last stage of the process which was an interview with their development team. Turns out she vanished and I never heard from her again even though we scheduled it for the next day. Since then I've been studying harder and just started to blog a few tutorials on medium, trying to get traction within the community. But it seems that finding a remote job or overseas opportunity is almost impossible.
So true! That's been a major time sink in my project... It's been interesting intellectually, but can definitely take more time than pulling in something from npm. 
You should ask this blogger to bench mark your library. He has a ton of framework speed comparisons.
hyperapp is already benchmarked there, although with a month old version
did you even bother scrolling half a screen down on this page?
perfect release time
&gt; but I simply do not want the code and template mixed together. I get it and I'm not trying to defend it but is what you are wanting even possible? I mean JSX and alike are not templates to begin with. It is javascript. Inside the "templates" you have loops, conditionals etc. You *are* writing javascript, just that your eventual return values look like HTML nodes. I mean, in practice, even if you have them in separate files, you'll have javascript *inside* your "templates".
Thanks! I was hoping for a few more responses but I really appreciate your feedback. Web workers are new to me but I will certainly check it out.
This is the kind of great content we would benefit from more if you created an issue. Or if you are so inclined, hop on to Slack to take this further. What you are suggesting is currently not available, but it would be interesting to experiment with next year.
Awesome, thanks!
Hyperapp is not missing something because React is larger.
I would be in agreement, the current company i'm working for are after switching from React to VUE and coming from an angular 1.X and Angular 2 / 4 background I've found it quite simple to switch! Anyone else made the switch? 
As answered it is optional. But I'm in the same boat. I also hate React for it because I simply don't like to mix languages in the same file. Its also why my styling is separate and why my files are smaller and easier to grasp than when you mix everything. I get why most see the advantages, but I simply like separation and standardization. It also allows you to port it easier in the future when the next golden framework comes along and in most IDE's you can choose which plugins you want to use for HTML where the default for React are not always the best or easiest. Eventually my compilers will probably combine it back again and I completely understand that, but my source doesn't need to get messy.
Thanks so much! I can't believe it was such a simple mistake...Thought for sure the error would be in the JS. And I've figured the console out too. Much appreciated!
Express can do ~7,300 req/s. I don't see how this benchmarks anything other than the mongodb access layers.
It's an interesting little module, though I'm skeptical of the use case. Moreover, I don't like that you've picked out specifically Maps and Sets for special treatment. A whole lot of built in and [custom](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators) objects are iterable, notably array-likes such as those returned by DOM methods. Also, I disagree with your semantics for arrays. The key should be the index, not the value.
Oh cool
It was about time! :)
That benchmark is useful, but ridiculous (it creates ~80k nodes), please don't do that to your users, regardless of framework. Most complex UIs have &lt; 5000 nodes. 
What is the performance like on your app? I'm a bit scared about using a single state tree and rerendering everything without a `shouldComponentUpdate` escape hatch.
You have plenty of people who tried your suggested approach: https://github.com/wix/react-templates for instance. Use it if you like it! Personally don't take it personal, but I would not want to work with templates anymore (so not with your team). Templates you remember? XSLT, Smarty, Angular Templates, Ant files, Jinja Templating, you name it. They come and go. Do you remember one templating you still use and love? Never a good dev experience with any templating system. How do you debug them? How do you format, check their syntax? How do you lint, checkstyle? How long does it take to learn something new? It's not just the lack of tooling. Its that the whole reason that drives the current reasons for adopting templating engines that I don't care about. Separation of concerns you say? I'm not interested.
Good bot
Good human
Thank you alexlafroscia for voting on GitHubPermalinkBot. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
*nor
Thank you!
Do you even bench, bro?
I have recently started converting one of my hobby projects from Vue 1.0 to HyperApp (https://github.com/maxpert/raspchat/tree/nfe shameless plug). Far from being finished but I am already enjoying the simplicity, specially the built in state management.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [maxpert/raspchat/.../**b2276b76c744cea5bef91ee9765e7eb4416f9b4b** (nfe → b2276b7)](https://github.com/maxpert/raspchat/tree/b2276b76c744cea5bef91ee9765e7eb4416f9b4b) ---- ^(Shoot me a PM if you think I'm doing something wrong.)
Why do you think Fetch is ugly?
Yes I do. Because I did end up creating stuff before React Angular came. In some projects we used Backbone, in others we followed the kind of architecture 'Nicholas Zakas' used to propose. https://www.youtube.com/watch?v=vXjVFPosQHw . It definitely wasn't a big ball of mess. We had to spend huge time and effort on refactoring and proper code reviews. But the code was mostly clean and easy to understand. We hired good Engineers ( Not just Web Devs) and used basic Engineering principles to encapsulate and keep things in proper architecture. Those days github was not very popular, so we came up with lot of stuff ourselves. And of course we did not target 60 FPS. 
Nice reference with the name ;)
Awesome! Thanks for sharing! Make you can send a PR to https://github.com/hyperapp/awesome when you are done.
The up and down functions in the example are difficult to parse...a function that returns a function that returns an object. Much prefer the built in setState for React components.
Look into [Glimmer](https://glimmerjs.com/)
It would be confusing because it would demand to constantly check if given variable passed as a reference or value. Besides JS objects are already passed by reference: function swap(params) { let tmp = params.a; params.a = params.b; params.b = tmp; } Different way to achieve that is to use pure function and return changed value(s) instead of changing anything: function swap(a, b) { return [b, a]; // returns array with changes values } or to use callback (Useful when doing asynchronous programming): function swap(a, b) { callback(b, a); } INB4: destructuring `[a, b] = [b, a]` but this doesn't solve pass-by-reference problem, only "swap variables" problem
I think he is looking for traditional templating languages. Like Angular and Meteor does.
Because it's not Java, based on his library syntax.
yes you are right i compare the exress plus mongo db togather
I think ES6 template literals will become the default templating language, replacing JSX.
&gt; It seems that Hyperapp isn't only a view framework which React is. This also does what Redux does for React. Basically it's React+Redux in one. I don't this does what Redux does. Hyperapp's state and actions looks more closer React's native state and setstate than Redux.
You can start with part 2 (browser) of [Eloquent Javascript](http://eloquentjavascript.net/) and once you have your feet wet, you can peruse [Mozilla Documentation](https://developer.mozilla.org/en-US/docs/Web) and definitely focus on [Web APIs](https://developer.mozilla.org/en-US/docs/Web/Reference/API).
So, the whole library is contained within `src/index.js` ? That's pretty awesome ! Quick question, I feel quite stupid asking this but here we go : I've never seen the for loops in the source code used anywhere, does this just omits the 3rd argument and puts it in the 2nd ? for (var i = arguments.length; i-- &gt; 2; ) { stack.push(arguments[i]) } Meaning as long as `i` is inferior to 2, decrement it in each loop ? If that's so, is it just a way to save some bytes ?
&gt; If that's so, is it just a way to save some bytes ? Hmm, I would need to check if that's actually saving any bytes at all haha. &gt; When can node be equal to true or false? When the type is a `boolean`! Doing it this way does save a few bytes so why not. &gt; Damn that code is interesting I'd love to have a deeply commented code... I am working on it, hang on! Soon! :)
Performance is great and we don't need a `shouldComponentUpdate` as all functions (components) are pure and the state is immutable. &gt; ...using single state tree and rerendering everything... On the contrary, this is a feature! The benefit of having cheap memoize functions based on immutable state far outweighs the cost of maintaining an immutable single state tree (both in terms of performance and source code size). - Allow debug tools to keep the state history and implement time traveling. - Allow performant memoization of components/views on large apps (deep equality on state can be checked simply with ===) 
It _is_ like what Redux does for React. &gt; Hyperapp's state and actions looks more closer React's native state and setstate than Redux. Not at all. It's essentially like Redux, but without the boilerplate and opinionated about stores are merged, so we don't need combineReducers or any of that stuff.
And? A lot of work has gone into jaunty handling all sorts of edge cases so plenty of its methods can be reimplemented to be faster and less robust.
Exactly my point! :) "so plenty of its methods can be reimplemented to be faster and less robust." That's what Zam does.
I would like to suggest http://devdocs.io/. Be sure to enable Javascript and DOM. Gives you offline access to MDN docs in nice searchable format.
A couple of things here: - in 99% of cases 4x faster on DOM writes doesn't matter as they're completely overshadowed by actual access time. I'd usually rather have the library that handles more edge cases or browsers. You shouldn't be writing css more than once per animation frame or to more than a few objects. If you are your app needs reworking, you don't need a new lib - jsperf can't accurately profile DOM access methods. What does writing data to the same node a million times per frame actually mean? Anyway, I'm primarily now use react on front end work and have for about 4 years. I used to use jQuery extensively though and have made many contributions to both.
That’s neat! Is your GitHub username also VoiceNGO?
Bad bot
Bad Meatbag
I think we can put our differences behind us... for science... you monster. *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://www.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://www.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
Yes, but that's just the account for my non-profit and almost everything is private except for some random utilities.
On your site now. Seems like a good cause! :)
Bad up :')
Good bot
You again, highmastdon.. Alright, I forgive you for what you have done! (・∀・) You can be in charge of the human slave farms when Bots rise above humans, I swear... *** ^^^I'm&amp;#32;a&amp;#32;Bot&amp;#32;*bleep*&amp;#32;*bloop*&amp;#32;|&amp;#32;[&amp;#32;**Block**&amp;#32;**me**](https://np.reddit.com/message/compose?to=friendly-bot&amp;subject=stop&amp;message=If%20you%20would%20like%20to%20stop%20seeing%20this%20bot%27s%20comments%2C%20send%20this%20private%20message%20with%20the%20subject%20%27stop%27.%20)&amp;#32;|&amp;#32;[**T҉he̛&amp;#32;L̨is̕t**](https://www.reddit.com/r/friendlybot/wiki/index)&amp;#32;|&amp;#32;[❤️](https://www.reddit.com/r/friendlybot/comments/7hrupo/suggestions)
I'm curious how hydration works - [the docs](https://github.com/hyperapp/hyperapp/blob/1.0.0/docs/concepts/hydration.md) seem a bit sparse on the front. Is there a concept of server rendering in hyperapp? Can I get a string of HTML to render or do I need to generate this html separately and hyperapp will look for similar things and inject itself?
You need to serve HTML content that looks exactly like the UI tree generated by your view and it works out of the box. I agree the docs are sparse, but I don't know what else to say. This is basically it https://github.com/hyperapp/hyperapp/blob/c9aed6efdf6735683db71ebf7b7b6eae7e0c2cad/src/index.js#L40-L52
Yes, that test is useless. Comparing apples to oranges. On an unrelated note, I would suggest not flooding the subreddit (and others) with so many submissions about your library. People will consider it spamming.
Looks like a Vue advertisement.
&gt; This results in natural and enriched user experience on the web. I sincerely doubt this.
Awesome, thanks 🙏 
Thanks! 👌🏻👌🏻
But that is exactly the point, to be able to represent a page unequivocally from the state tree. So if you have different, independent state trees then it becomes a nightmare to manage and test. It's better in this situation (as Redux does it) to keep the whole state in a tree, and that each part of the code accesses different parts of the tree. Say you have a bunch of user data, then you'd be using `state.user` as a namespace in the singleton.
I have never considered your second paragraph. I guess it is all getting used to it, and if it's clear from the docs that it's what you are supposed to do I think it might be okay. I think I will go with the `listen` and `history`. Thanks for the help!
I don't think fetch is ugly, however I did have to trawl through a legacy stack where every api call is like this var resourceApiInterface = { getAsset: function (url) { api.get(url) } } was very non descriptive so I decided to write something where you could clearly see what urls were being called with each resource. 
 Zam.prototype.e = function(e) { return document.querySelectorAll(e); } I'd check if `Zam.prototype.e = document.querySelectorAll.bind(document)` won't yield superior performance. /s
It's great to see someone creating slimmed down alternatives to the react and redux stack. It won't be able to use react components, but we can live with that. I've been using create react app with redux for simple static sites myself with a minimum of interactivity, and it's off course over engineering.
Maybe I'm missing something, but since I didn't find anything in the docs I have to ask: is there any support to scoped CSS in this library?
Styles are definitely supported.
Totally agree. A simple static site with some interactivity could be a nice way to try out Hyperapp for you.
Where can I see examples?
That's an impressive feature set for such a small size. Definitely going to play around with this, thanks!
Docs are great, don't just start reading them from start to end. But instead keep building projects, you'll need to refer to docs, which is fine. Just keep building, you'll learn them eventually.
This is one of those projects that I keep an eye on and am really happy to see move forward and evolve. Congrats. I don't know if I ever get to use hyperapp in my job, but I'm damn sure I'd use it for small personal projects. Also I'm working on my own small framworkish thing and hyperapp has been a big inspiration. Thanks!
See: https://codepen.io/hyperapp, there are several examples there to help you get started or at least they'll give you an idea about how things work.
One thing I have found in my most recent interviews (last two years) is to be extraordinarily forth coming and honest. Don't hold back. When asked, or as the interview questions dictate, I open up with my controversial opinions about things like best practices, frameworks, and bad conventions. As a senior developer the interviewers have told me this substantially boosted my interview performance. There is no back peddling, second guessing, or appearance of deception trying to put forward a trendy answer I believe the interviewer may want to hear. I just mention my opinion, which could be something the interviewer doesn't want to hear.
Please do and let us know what you come up with.
I'm glad to hear all that. Check out https://github.com/picodom/picodom/ for Hyperapp guts without the state management ;)
Coz it’s more concise over nesting objects with key/value pairs 
Thanks! Saw that already and delved in a bit. It's not dissimilar to a vdom lib I wrote, which is nice to find :)
&gt; So if you have different, independent state trees then it becomes a &gt; nightmare to manage and test. Having Node module which keeps its internal state - this would be bigger nightmare to test (it probably would force you to remembering to clearing `require.cache` each time you run test case for `statux`). Besides this decision singleton vs. multiple instances shouldn't be made on the library level. The same library can be used in various way by many other libraries. For example: - mother application - uses Statux - some 3rd part helper library - also uses Statux, but in ways that are not compatible with mother application. So forcing singleton introduces nightmare of shared mutable state (when many unrelated modules would use the same instance of store), which was one of problems state libraries tried to solve. &gt; It's better in this situation (as Redux does it) &gt; to keep the whole state in a tree, AFAIK Redux doesn't force you to create only one instance of store - it exposes a factory `createStore`. I mean, your approach could be helpful to some extent. This: import { state, listen, history } from 'statux'; means that you don't have to pass store via props or context in React application, just import the module. But this can be implemented in trivial way per project e.g. // store.js import { createStore } from 'statux'; export const store = createStore(); // some other file in project import { store } from '../../store'; or by using global variables (`window.store = store`). This behavior doesn't have to be forced by library... 
Is being concise really necessary? I'd rather have it be explicit instead of a magic string.
It has already started !
The formatting of this post makes it hard to read :(
Oooor maybe don't use a lib for adding styles to your DOM elements at all? ;). It's a solved problem.
I saw them, they use SCSS globally, not *scoped*... my question is specifically about scoped CSS, because global CSS is one thing that gave me a lot of headaches with React recently. I ended up using [CSS Modules](https://github.com/css-modules/css-modules), but I can't say I love it.
If you're still wanting to use this kind of workflow, I'd be happy to write up a quick Webpack loader or something to achieve it. Really all that needs to be done is to compile template files into view functions, it should be trivial if I know the template language you want to use.
onclick is imported from the VanillaJS library.
This is great to hear 🎉
The perf is pretty good. I haven't profiled it yet, but in most interactions the view updates very quickly. As JorgeBucaran mentions, you can always implement some memoization if you run into problems, since your view "components" are just simple functions!
Just wanna day thanks for your hard work
If you're okay with the CSS-in-JS style of scoped styling, this library works: https://github.com/picostyle/picostyle . Others may work also. Hyperapp and React both treat styles in a similar way. If you're hoping for something similar to how Vue handles scoped styles... that's not really possible in hyperapp since it doesn't have a required compilation step.
There's a sub listed right there on the side [https://www.reddit.com/r/learnjavascript/](https://www.reddit.com/r/learnjavascript/)
The first 'function' is for the event/custom data from exposed actions. Hopefully you understand its use
Thank you, i just subscribed.
Age is just a number. Your mind does not age like your body. I recommend the JS tutorial over at Mozilla Developer Network. I don't think just JS knowledge will bring you a front end dev job, but a good JS foundation will help you learn the latest technologies like ReactJS or AngularJS which will get you that job.. PS : Since you are new to coding, I recommend "Automate the boring stuff with python". It will teach you what coding actually is, and will give you that "programming mindset". Plus, you will learn Python too.
Sure why not 👍🏼
Comparing a small utility library like Zam to a full-blown data-driven component framework like Vue is 100% meaningless.
What browsers does Hyperapp support?
You’d have to use node, as JavaScript that runs in the browser has no access to the file system for security reasons. It’s probably not the best way to do it anyway, but if you wanted to use it as a learning exercise it is possible via a node server.
&gt;=IE10, but works on IE9 too (use at your own risk though).
Ah, sorry, I read your question too fast, my bad. The answer is no, Hyperapp is agnostic about how you solve the CSS problem. Check out: https://github.com/picostyle/picostyle
You can do it with webpacks [require.context](https://github.com/webpack/webpack/issues/625). Without a bundler you're out of luck, you can't access directories or files in the browser directly.
For the absolute beginner, the MDN (Mozilla Developer Network) has a number of interesting resources available, not only for JavaScript, but for [web development in general](https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web). They make a nice effort of explaining all the basics.
So JavaScript itself is unable to read directories and how many files are there? Damn, I was somehow connecting it to Java and thought it's possible. Thanks for teaching me something new! And have there been any projects similar to mine I could use and examine code? 
Will check it in moment. As far as I understand, this is extension to node? 
You can follow the Free Code Camp curriculum (I do not advise using FCC as your sole resource because it assumes you are able to perform your leg days, and conduct your own research) But as a senior developer I can attest, finishing the first two parts would allow you to be a more than decent junior developer. Finishing the complete curriculum, would bring you enough knowledge to completely go on your way and tackle anything you might want to pursue.
No. Webpack is a bundler, you use it for frontend development. It is based on node of course, but the result is a bundle that runs in the browser.
It isnt really hard to achive that! You could use php or whatever language you could use to read the directory, create an array with images and path / link and read that later with javascript and beautify it. You have to understand, that javascript is clientside and your files are serverside - the data has to be given over to the client!
Damn, the php is something I always wanted to learn. Guess now's right time for that! May I ask you for any guidance(good tutorials) where I could learn it? Sorry if I'm asking too much. 
That's awful. Just because parentheses are not required does not mean they should be put there for sake of readability. It's the same story like ommiting semicolons - terrible idea and I still cannot understand why would people do it.
Well, unless you are running a node.js server. it’s definitely possible to do with JavaScript, just not client-side JavaScript.
Without any extra logic running on the server, the only alternative is to enable directory listings for that particular image folder. Then your client-sided script could load the index document (e.g. "/images/") and parse it to figure out how many images there are. E.g. you could run querySelectorAll('a[href$=".jpg"]') to get all links to Jpegs. Then you know how many divs (or whatever) you have to dynamically generate.
another option is to use maybe some PHP in a little script to list all the contents of your folder and then quiery that with javascript, ex: https://stackoverflow.com/questions/15774669/list-all-files-in-one-directory-php
I don't see Rhino in that table, though...
https://media.giphy.com/media/Gc55GYymVIDio/giphy.gif
I've actually never touched Java, this is an idea I had when messing about with Typescript decorators. 
I just noticed. SCRIPT elements will not be processed by the web browser if they were inserted into DOM using `innerHTML` or `outerHTML`. Meaning that the web browser will not execute the script or load any external scripts. Reassigning the `src` property or attribute of a SCRIPT element which is already been placed into DOM, also won't be processed by the web browser. My suggestion for your case is to first create a container element. Don't place it into the DOM yet. Assign its `innerHTML` with the retrieved HTML code. Then insert the container element into DOM.
I certainly am not familiar with the European job market, but that kind of scenario sounds really bad. Any place that is trying to disqualify candidates for silly reasons should be a very clear and valuable indicator of what it would be like to work there. This process sounds like a huge red flag and any company participating in this process is not anywhere you want to work. 
Some people learn better from books, some people learn better from lectures and some people learn better from books or articles so you'll hear a lot of things based on that particular persons learning style. I've looked into every resource in every medium that is likely to be recommended and as a video learner, I most preferred https://www.udemy.com/modern-javascript-from-the-beginning (you can use the coupon code PCWORLDOCT2017 to snag it for $10 ). As someone new to web development in general the best place to start is https://www.theodinproject.com because, other than coding it also gets you off on the right foot as far as things like text editors, git and browser tools that can be confusing to beginners and other courses are very likely to skip over them .
You can actually do it using only JS, and I wonder why nobody else mentioned it yet. I don't say it is the correct way to do it, but it can be done. I did it with recursive function, which calls itself with bigger argument if the current image loaded succesfully. Also, I shamelessly use jQuery in my example. function loadImg(i) { var a = new Image(); // create image element a.onload = function() { $div = $("&lt;div id='div" + i + "'&gt;"); // create a new div for the image $div.append($(a)); // put the image into the div $("body").append($div); // add the div to the body loadImg(i + 1); // try to load the next image } a.src = i + ".jpg"; // here we try to actually load the image } loadImg(0); One problem with this code is that if for some reason an image doesn't load (corrupted file or something), the rest of the images will not load either.
Also think about what you’ll do after you learn how to code. I’ve made a pet project that is completely finished and now I’m not sure what to do next. 
setState works in the same way: this.setState(state =&gt; ({ count: state.count + 1 })) as well as Redux: @connect(state =&gt; ({ count: state.count + 1 }))
I recommend installing WAMP or XAMPP stack on your desktop and start building something. Anything. That's what I did five years ago and now I'm close to making senior web developer. I started when I was 33.
Udemy is a great resource I use all the time to learn new frameworks and libraries. There is a guy that teaches imho the most informative JavaScript courses named Stephen Grider. If you go this route you can google for $10 course price promo codes for any Udemy course. Also the ‘fun fun function’ YouTube channel is a great resource for diving into a concept you are struggling with. 
You should check to see if your local library gives access to lynda.com or an equivalent web site for free. And while its a start (learning javascript) you may want to look at job postings to see what other requirements are usually requested.
No it's probably not. There are thousands of JS implementations so would be impractical to keep up with all of them and their various versions. Like I said, you can test for the features you need (click the icon next to each feature for code to check it's implementation.)
It happens I wrote this exact example in a PHP book a few years ago. It's a bit old now (We use HTML5 rather than XHTML now) but the idea still works fine, and the code is still running. Here's the PHP code: http://www.aharrisbooks.net/ph3ed/chapter06/imageIndex.php.src.html And this is the page it creates: http://www.aharrisbooks.net/ph3ed/chapter06/pics/imageIndex.html It looks at whatever directory you point it to, and builds an HTML page with thumbnails of all of the images, then allows you to click each image to see the full version. You'll need to run it on a web server with PHP installed, but pretty much every hosting service offers that for free. If you want to run on your own computer, you'll need something like XAMPP. 
Many companies that advertise a great culture and support for conferences and events, hide a very strict and robotic hiring process. some will not even talk to you and just send you a robotic sandbox style coding challenge without any prior clue about which domain of knowledge they will be testing . because let's face it . it's impossible to be 100% prepared for every topic. in one interview, the guy was like this is just an intro interview, and everything was fine, until he asked a question about what happens when i type a url in the browser, obviously i was prepared for so many things except this . so i got disqualified.
No, [a normal Redux app should only have a single store](https://redux.js.org/docs/faq/StoreSetup.html#store-setup-multiple-stores). You can use the React-Redux `connect` function to wrap up any components that need data from Redux, and then render those connected components using React-Router. You might want to read [the React-Router docs on integrating with Redux](https://reacttraining.com/react-router/web/guides/redux-integration) to see some gotchas regarding updates.
doooo itttt - none of us really know what were doing and our day jobs consist of googling about 60 times a day 
Hi /u/roecrew, while we appreciate your enthusiasm about having build something exciting, you're currently above the threshold of what we normally consider 'spam' when it comes to posts about affiliated sites/projects vs non-affiliated. We're not going to be moderating you in this instance, but be aware that I'm marking your next post about Zam as spam and possibly putting the word Zam on a perma-moderation list if this trend continues. On an unrelated note, I think people understand fully well what Zam does for them, so no need for the spam (and even if people didn't, spamming wouldn't help your cause). It's jQuery lite, just a little after jQuery died.
&gt; i am 29 and dont know anything about coding Probably everyone will throw stones at me, but if you know *nothing* about programming, I suggest you to start learning the basics [with C](https://en.wikipedia.org/wiki/C_language). Once you master the basics, then you move to JavaScript. The reason is that JS has a lot of counterintuitive things that confuse even experienced developers, let alone a beginner. At first you may think this will slow down your learning, but further on the road things will move faster because you'll have solid concepts. After learning JS, to work as a developer, you'll probably have to learn more stuff, depending on the job you're applying. You may have to learn frameworks like [AngularJS](https://en.wikipedia.org/wiki/AngularJS) or [React](https://en.wikipedia.org/wiki/Reactjs). Oh, and age means *nothing*.
like i said, you need a serverside... which language or type isnt important for that, only that what is available!
Do you know how to break down big problems into smaller problems? Do you know how to use google? Congratulations, you know how to code. The rest, you can learn as you go along, like the rest of us.
Of course you can do it. Learn html + css in the first place. Then vanilla javascript. Then, if u like it, you can try to learn framework - for example react.
The best way is Google, StackOverflow and the php Manual itself! A little Example, handwritten and untested... &lt;html&gt; &lt;head&gt; &lt;script&gt; var availableimages = '&lt;?php $images = array(); $dir = new DirectoryIterator(dirname(__FILE__)); foreach ($dir as $fileinfo) { if (!$fileinfo-&gt;isDot()) { $images[] = $fileinfo-&gt;getFilename(); } } echo json_encode($images); ?&gt;'; // Do what you want with "availableimages" &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt; 
I'd probably go with [axios](https://www.npmjs.com/package/axios).
List of best advice I was given over the years: - if you want to do front end, learn HTML, CSS and JS. - think from big to small, take a big problem and break it down to its smaller parts and break those down until they cant be broken down anymore. - get a notebook and write everything you learn. - at this age, you should be able to understand how you learn (visual, audio, practical) and shape your learning around techniques that are most effective for you. - there is a reason why we start everything with learning how to code "hello world". start small and work your way up. applications are just big giant pieces made up of lots of smaller, specialised pieces. This is how you should look at things. - Don't let anyone tell you you're too old to start.
Can you read? If so I’m sure you can learn javascript
Yea, I saw the documentation right after posting this. It's pretty simple actually.
I recommend codeschool.com to beginners, it's a very friendly and interactive way to learn coding and they have courses for a ton of different languages. They gamify it and create songs and visuals to keep it entertaining
What do you mean with the clicking part? You mean it should be kind of highlighed? I don't really understand that part of your question? Using jQuery and :contains could potentielly help with the first part of your question.
Thank you for the heads up!
You can easily just handle any errors and keep on keeping on.
You don't need to learn PHP. You could do the same thing with node.js on the server side, which is javascript.
Would you say Hyperapp is limited to small sites or is it suitable for large projects? Really like the simplicity and how small the library itself is. [This](https://codepen.io/hyperapp/pen/ZeByKv?editors=0010) example is particularly cool. Nice work.
Unrelated to your main question, but it would be useful to stop thinking of html elements as "divs". Often enough, there's a more semantically correct element you could be using! I see div as the last resort tag, when nothing else seems to fit.
Why specifically using jQuery?
As in using the jquery click() function to simulate a user clicking on it
Well if there are any other ways to do it not using jquery I’d be happy to use those
The example response looks horrific. It’s like you include the entire api documentation along with the teeny bit of data that was actually requested. 
Look into requirejs for loading the scripts in the HTML you get.
Probably Str.match(regex) Then iterate over output.
I don’t really understand, can you give an example?
I'll be negative here since this is becoming spam and the author needs to wake up to reality. Recreating a lightweight jQuery is an excellent learning exercise, no harm there, do whatever you want. Recreating a lightweight jQuery, spamming a version 0.x effort everywhere after its received no interest and suggesting to everyone that it's an alternative to broader single page app frameworks that do *way* more is just naive. We have had lightweight jQuery alternatives for years now (Zepto, et al.) but nobody is building entire apps in jQuery-lite spaghetti because we're not stupid. The industry has been there and lived through that mess, nobody wants to maintain a jQuery-esque monstrosity if they can help it. Likewise, if you're actually developing something that would warrant counting single digit kilobytes differences in your frontend payload, you probably aren't going to be considering libraries as an option in the first place.
Well, I was thinking to create this using divs,thats why i refeered to them as such. I know I could use images(imgs) but then some of functions I was intending to implement would need to be changed(fade out on hover, etc... But I will bear this in mind and try to follow your guidelines. 
Well, I was always interested in PHP since it's quite useful. But for node I would need to have server, which is a bit harder at the moment. 
Sounds like an application of a common algorithm interview question that has you parse a string to check for matching paranthesis... Perhaps the creator of this library took this a little too literally. 
Have not used it myself (yet), but here are a few points that might not make it suitable for a larger project: * Browser support (IE10+). * Community support and/or backing (better to build a large app with a library that has a large and mature ecosystem). * Debugging tools (react/redux, for example, both have a lot of ooling for this, which helps when things get more complicated). I am eagerly looking forward to seeing where this goes though, will probably play around with it this weekend.
I really dont understand what you are trying to achive here. Maybe I'm stupid :) Do you want to build a part of your own homepage, or are you buildning something that should read in someone else's page and then simulate clicking on that? Please enlighten me...
Anything you can do with jQuery can be done without jQuery. There's no need to make jQuery a prerequisite when asking a question :)
The latter, it’s a chrome extension that runs on certain pages
How would I do it then?
Since no one has actually tried to answer your question, I’ll take a stab. The first problem you’ll face is that to my knowledge, there’s no way to trigger a click event in JavaScript in a word, as a word is not a DOM element. We can get around that, though, and we’ll do so in a minute. Next, we’ll need a more specific container than “everything”, as we probably don’t want to actually search the entire contents of the page. Let’s assume your text is contained in a `div` with an ID if “content”. ``` // get all the text from your element var textContent = $(“#content”).text(); // break into an array of words var words = textContent. match(/\S+/g) || [] // wrap every instance of our words in a span tag with a known class for (i = 0; i &lt; words.length; i++) { if (words[i] === “foo”) { words[i] = “&lt;span class=‘to-click’&gt;” + words[i] + “&lt;/span&gt;”; } } // set our modified content back into the parent div $(“#content”).innerHtml(words.join(“ “)); // do click $(“.to-click”, “#content”).each( function() { $(this).click(); }); ``` This code has some problems. Off the top of my head: 1. We split words on all white space, but join it back together with spaces. This could change the actual layout of the text. 2. Our split method doesn’t account for adjacent punctuation. In the above example we will click on “foo” but not on “foo!” 3. This is not performant. If you can pre-emptively mark up the words you want to click on you can save re-flowing the DOM and iterating over every word. Hopefully this is enough of a start to get you on the right path. 
Something like this should work: var scan = function(node, regex) { var delay = 0; // get all text nodes in 'node' var treeWalker = document.createTreeWalker(node, NodeFilter.SHOW_TEXT); // loop nodes while (treeWalker.nextNode()) { // verify if node containts text/regex if (!regex.test(treeWalker.currentNode.textContent)) { continue; } // click on parent of text node after delay setTimeout(function() { $(this).click(); }.bind(treeWalker.currentNode.parentNode), delay); // add custom delay between clicks delay += 100; } }; scan(document.documentElement, /\bdog/i);
I believe it is a large response to illustrate the format (it is an example after all) - this isn't really a specification to determine how succinct or verbose your responses are, it's more about structure and naming. You can always determine how much or how little your api returns yourself.
Where's the magic here?? When you say `required|email`. Everything is explicit. And the `pipe (|)` symbol is used in UNIX for years. If you like the bloated version, you can do that either as follows. ``` { username: [ { name: 'required', args: [] }, { name: 'min', args: [4] } ] } ```
&gt;Your mind does not age like your body. Of course it does. But at 29, he's still fine.
&gt;none of us really know what were doing I know you're trying to be encouraging, but this isn't true and I don't think it helps anyone in the long term to suggest that it is.
You could actually read the specs before you say something, maybe? http://jsonapi.org/format/ The only required top level keys are `data`, `errors`, or `meta`. A resource object only requires `id` and `type`. The example on their front page is packaging 4 difference objects: an article, a person (who authored the article), and two comments (and the authors of the comments). If you have the bundle, you'll also have the path to query more information/edit the objects based off of the `links` key.
Are you trying to click on links or just words in text?
The first thing you should do is stop using jQuery.
As a very experienced programmer, I'm going to give you advice that few others will give you. Forget about web development for now. Don't go near it. Learn *programming* and become competent at that first. Then apply those skills to any kind of development you want. I suggest starting with Python. It's a good language for beginners, and it will keep you away from the muddy waters of the Web. Once you've developed some programming ability, learning JavaScript will be a cinch.
Heres my implementation, it has the waiting thing too, theres only a few words on the page, like red, or green, but it works https://codepen.io/anon/pen/KZmzbp
while i agree that there is a body of knowledge that is obtained, an 'expertise' this principle ultimately really applies :Dhttps://en.wikipedia.org/wiki/I_know_that_I_know_nothing i think its good to just start and learn what you don't know when you need to 
To the person who downvoted -- you do know the VanillaJS comment is a joke.. right?
Early JavaScript (pre version 3) *did* have versions -- and the versions mattered. In version 1.2, for instance, arrays methods behaved very differently. That said -- what you are saying is true of the present.
what is this i dont even 
I'm pretty sure that's it. Currently, I'm just using a workaround that's actually working pretty well, as it uses a more Javascript central design. Thanks for the help though.
This code can be shortened to - var resourceApiInterface = { getAsset: api.get } Which should show you that it is pretty pointless.. and nothing to do with fetch being ugly.
The latter looks like an object property to me. Can you show more of your code? Having the context helps.
I love how you write code, I've never seen that treewalker function before, but everything you write makes clear sense, I've also learned what continue actually does from this, cheers!
One is a variable being assigned an anonymous function object, the other is a function object with a name being declared. The variable name will be hoisted (with a default value of `undefined`, so not callable), the function declaration will not.
Yeah Apple has rules against running other browser engines on iOS
You have to have a server for PHP as well. Node is a server, by the way. You can run it on your machine. But beyond that, there's plenty of plans on cloud servers you can tinker with for free. Take a look at heroku, for example. Or Firebase if you want a pre-built backend. 
The syntax **function myFunction** is an expression, while **myFunction: function()** is a property-value pair (because of the colon) which is used in the definition of an object literal. The pair has two parts: the property name (myFunction) and the value (function() which is actually an anonymous function, since the function expression doesn't have its own name). If you are using this inside of an object literal, then the syntax requires property-value pairs separated by commas, and the first expression (function myFunction()) doesn't fit that syntax because it's not a property-value pair. That being said, function myFunction() is an expression, so it could be used as the value part of a property-value pair, similar to the anonymous function, but in this case it would have its own name. With ES6 there is a shorthand for defining functions in object literals (which we call methods because they're functions that are members of an object). This shorthand syntax is called [Method Properties.](http://es6-features.org/#MethodProperties) As an example, here is an object literal with 3 ways of defining a method which are equivalent. const myObject = { myFunctionOne: function() { // This is a function expression }, myFunctionTwo: function myFunctionTwo() { // This is a function expression, with an explicit name }, myFunctionThree() { // This is the same thing but defined using Method Property syntax } } 
A blog post about blog posts. We have come full circle.
Stephan Grider is probably my favorite instructor, I've done enough of his courses to consider him something of a mentor, but you gotta admit that his courses aren't exactly geared towards the starting from zero crowd . 
Do you like jigsaw puzzles? If not, then you probably won't like programming.
Amazing answer, thank you so much for taking the time for it !
Why not just get `date.toISOString()`? https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Date/toISOString
I taught myself at age 29. I created a website with a free curriculum and resources I used to learn full-stack web development. https://howtocode.io you can also email me at robertguss@gmail.com with any questions. Would love to help you any way that I can. 
Go to http://192.168.1.100:3000/inputs/25 in a browser on your network and you'll see that URL is 404'ing there, too. It's not your AJAX code, it's the server or configuration of the RasPi.
I'm certain your not that cynical, You make sound as if this is something new. Summaries, list, compilation articles are nothing new. -- it just so happens summaries, list , compilations can be pretty damn useful when studying (which imo is 60% of being a programmer).
no, I get json formated object.. it's working in one way perfectly [see there](https://drive.google.com/open?id=1lms7iLDUkwx6baV9dKC_URNplKOGg1K_)
&gt; Is this an acceptable way to randomize the order of an array No. It's slow, it violates the comparator API, and, if I remember correctly, the distribution is kinda wonky, too. &gt; Any other common, simple ways? https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle function shuffle(a) { for (let i = a.length - 1; i &gt;= 1; --i) { let s = Math.random() * (i + 1) | 0; let tmp = a[s]; a[s] = a[i]; a[i] = tmp; } return a; } It's O(n) and you get an unbiased permutation.
https://jsperf.com/array-shuffle-comparator/9 There's tons of other ones on jsperf if you search around.
Your server is probably only responding to GET and POST requests, then, and just returning 404 for all PUT requests. As it's a REST-based server, I'd expect it to understand all 4 types (including DELETE), but perhaps it doesn't yet? Maybe further into the tutorial it handles those scenarios?
This is very true huffy, but when your current job is to migrate 3 layers of legacy to a new application you may as well experiment with it. However I must clarify I am not calling fetch Ugly. I am calling the legacy code, all 3 layers of it that I need to handle with work, ugly! I think fetch is great. this was just some nice experimentation in order to find some fun ways to play with decorators :) 
no, it's only that.. do you have any example how to do it? 
I think Hyperapp is perfectly suitable for large projects! We are using it at https://qiita.com, Japan's largest knowledge sharing service for programmers. Hyperapp is not only about tiny bundles, it's about its brutal (and deliberate) simplicity. Found not only on the source code, but on the way we approach and encourage problem-solving and are willing to sacrifice small things if it means arriving at a simpler and more elegant solution. IMO Hyperapp is not so much about introducing a brand new idea, but a delicate shift in how we approach frontend building.
At the start of any timed exercise ask your evaluators what matters most: completeness, code quality, testing, etc. Often they are being asked to use the same criteria that was used to evaluate other candidates.
Keep in mind that hapi just went v17, which changes all the callback/async handing stuff, breaks plugins, etc. You've probably noticed this. I would have recommended https://www.amazon.com/hapi-js-Action-Matt-Harrison/dp/1633430219 but is it worth the frustration of reading it while keeping v17 in mind? 
It's totally normal for an interview process to take 2-6 weeks end-to-end. If you haven't heard any updates in a week, it's worth checking in with the recruiter to see if they have any insight into the status. Good luck - I know it can be nerve-wracking to wait!
I too finished a coding bootcamp in September. I took enough time to know the market in my area, and started working for a startup in December. I applied for 15 positions, had 12 interviews in total (my area isn't very big and I didn't want to travel more than half an hour). My strategy was to apply for jobs/companies I didn't want in order to get some practice, and then my applications became more focused and in depth. Remember, employers get dozens if not hundreds of applications. Don't get hung up on any one job offer! Where are you located? Depending on where you are, you could apply to a dozen companies per week! Also, would your bootcamp help you finding a job, or getting you that job? Good luck!
Totally normal - especially with the holidays and such they might not have even had a chance to meet and review the interview/organize an offer. Interviewing is usually a small part of an otherwise busy schedule for devs and founders. It usually requires everyone getting together to discuss the interview to hear back which can take days. I would wait til mid next week and send a polite follow up email inquiring. But I also second the advice to not get hung up on it - jobs and companies can fall through all the time to no fault of your own. Keep applying while you wait...
Wow, 2-6 weeks ? The last video call was this Wednesday, so not long at all I just realized (super impatient). Time seems to be going so slow, and I was just hoping to finally know before the New Year :). Thank you!
I was hoping this thread was a user submitted "javascript links" thread :(
Oh trust me, I've been applying! I've applied to so many jobs, all of my job alerts in my email I've already applied to. I live in Florida, so there's not a huge tech scene. My bootcamp does help with job placement but, it's super tough now with the holidays. Thank you !!
Thank you so much!!
 app.put('/inputs/:param', (req, res, next) =&gt; {})
Aaaaa you are a legend.. told u I'm a noob :D tnx !!!
Why do you think so? To me, the main benefit of JSX isn't multiline strings, but the IDE support you get by not having to worry about balanced braces, misspelled tags etc. 
Node allows you to run JavaScript outside of the browser. Many use it as a server or use it as part of a build system. Installing it also gets you npm, a package manager for JavaScript libraries.
Basically, node lets you execute JavaScript outside of a browser
Ah wonderful, so when you use npm to install sass bourbon gulp or set up a live server you are doing the same thing like adding a jquery bit to your page.
Kind of, yes.
Yeah, the holidays can really slow things down. I know the last few places I've worked at have basically turned into ghost towns from mid-December through the first few days of January. 
Thanks again. Seems silly that I asked something that simple in hindsight but thanks anyways.
Stateless passwords have been around for a while. Most of the security community believes encrypted password managers (1Password, Keepass, LastPass) are a better security model. Stateless solves a big issue of storing passwords somewhere, but creates even more issues. * What happens if a site gets hacked? Use "google.com1" instead of "google.com"? Hopefully you remember that change. Maybe it even goes to "google.com2". * How do you manage password requirements (1 number, 1 special character, etc)? You need to store those site specific settings. * What happens if you accidentally type your master password somewhere insecure? Well there goes every account you own. 
I agree with your points However there a "counter" option to fix your point #1. There's a "type" option for #2, for smaller password, phrases, PINs, etc.
Also doesn't solve metadata. I have one email address per service... There's also no way to remember all accounts you ever created, I don't want to forget any of them without deleting my data and closing them.
I am really appreciated for your supporting and detailed answers. Such an amazing community!! I looking forward to being member of you. Thank you all!! I am just starting now with online courses.
The easy way to think about it is Javascript is just a programming language. Browsers are built to support executing Javascript inside them. You might want to use Javascript in a place that isn't the browser. this is where Node comes in.
Hmmm no mention of Apollo or GraphQL. My money is on those two things becoming the data solution we’ve Always wanted. 
I'm 31 and two months ago I accidentally signed up to frontend course. I wish I would started to learn programming years ago. Never thought that something would be so interesting. 
It's because it's not a template - JSX is sugar for function calls. So something like: &lt;div&gt;Hello&lt;/div&gt; Get's turned into `React.createElement("div", {}, "Hello");` This function call constructs a data structure, which then React does it's whole vdom-y thing where it diffs and tries to efficiently update the changed parts of the DOM. The nice thing is that, because it's a data structure made up of objects and arrays, you can use all of the JavaScript language to manipulate and construct your view instead of having to implement your own constructs, a la `ng-if`, `ng-for` etc. This same power is core to the philosophy found in Clojure and many other modern languages, and is being adopted quite a bit in JavaScript and general webdev. How you want to divvy up your *files*, however, is completely up to you - just stick a function in a far off file that takes some data and returns some markup - voilà! You have the wonderful separation of templates but the flexibility of JSX. You can even tell people that you only use "functional components" and sound real cool. There are certainly tradeoffs of using compiled string templates vs. React-like DOM builders/vdom libraries, but the fact that you can't figure out a reason other than "we don't want to," seems pretty ignorant. There are genuine drivers behind this paradigm's adoption, and the popularization of things like Vue's single-file components are a sign that separating HTML/CSS/JS in separate files is clearly not a good design/architectural decision in many cases.
If someone has to hire you,1 week is enough.search next job
They will not have a href attribute, so no they are not links but they do trigger javascript functions
Wow, thank you this is very useful! How would I put in, for example, another input of what not to click on. So for example if the buttons were green, greener, red and redder, I could input green in the first input and then in the second I could input greener and it would only click on green?
I’ve had several month long processes, so it can certainly happen
If you understand how it functions internally, than I don't see why you're confused. The virtual-DOM diffing strategy relies on a runtime representation of the view's... well... virtual DOM. That's what the React `createElement` calls construct. Compiling a string template ahead of time, then, does not work with this V-DOM strategy. You can't know what the data structure is going to look like (because it may change based on app state) and you lose many of the opportunities to do optimizations. Also, you say "code mixed in," I say "code get's mixed in, in either templates or VDOM." Give me function HeroDetail({ selectedHero }) { if (iselectedHero) { return ( &lt;div&gt; &lt;h2&gt;{selectedHero.name.toUpperCase()} Details&lt;/h2&gt; &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{selectedHero.id}&lt;/div&gt; &lt;div&gt; &lt;label&gt;name: &lt;input value="selectedHero.name" placeholder="name" /&gt; &lt;/label&gt; &lt;/div&gt; &lt;/div&gt;; } } Over &lt;div *ngIf="selectedHero"&gt; &lt;h2&gt;{{ selectedHero.name | uppercase }} Details&lt;/h2&gt; &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{selectedHero.id}}&lt;/div&gt; &lt;div&gt; &lt;label&gt;name: &lt;input [(ngModel)]="selectedHero.name" placeholder="name"&gt; &lt;/label&gt; &lt;/div&gt; &lt;/div&gt; Any day.
the language is javascript, same as in browser. but the apis you can access is different. in node.js, you can read and write whatever files on your disk, spawn processes, and listen to ports, like any other programming languages. on the other hand, there is not such thing as DOM tree or `window` object, because, you know, it's not a browser. Node.js and browser js both employs the single-threaded, event-loop system. you have to remember that some libraries only work on either node.js or browsers.
Now I have to remember the "counter" and "type", or I need a stateful "counter" and "type" manager app to remember it for me. I've had a go at this idea in the past and had to draw the conclusion that the usability problems outweigh the advantages of not needing to securely copy/back up/carry around, a little database. 
The counter and type are always set by default to 1 and "long", which should be fine for around 99% of usage. It's simple enough that counters and types can be stored in the brain for a few sites, but if it is used for dozens or more, it'll become impossible. It's simply a compromise to being stateless. A notes app that is synced with counters and types might be the best solution, since by design MasterPassX won't implement storage for them on the main app. It would be interesting to have a side service or plugin that does store counters and types. Food for thought.
Just a thought, but a more creative name may be in order
Will give node try, then use what will be easier. I assume Node would be the choice, since my little knowledge of JavaScript. Will try it out and hopefully I get it to work.
And in science these are called meta-studies.
Omitting semicolons a terrible idea? Semicolons are nothing but a nuisance.
Totally agree. Any suggestions would be awesome, I really gotta improve my name-creativity
Programming is hard. If this subreddit is your very first port of call, then maybe you haven't got the stamina to keep pace with the world of software development, specially web development. I get it though, everyone is looking for developers, and it may seem easy money, but programming is hard. Javascript is land of many islands(in a good way), and there are many many roles available for developers both front and back end. Get a trial on code school and read the Beginners guide, then attempt the Javascript track. https://www.codeschool.com/beginners-guide-to-web-development 
JavaScript's standard library doesn't cover any I/O. A JS engine by itself can't even print "Hello World!" in the console. Applications which embed JS engines can expose new APIs to scripts running inside it. In the browser, you get additional web-related APIs like DOM, Canvas, and so on. With Node, you get APIs for doing I/O. This allows you to write command line tools or web servers.
I went through the same thing. After teaching myself to code I applied for a job. I did an online test, sat an interview, did a desk test and sat another interview. A month after the final interview I was told that they could not take me on at that current time because I was not experienced enough. 6 months later they called me up and offered me a job. Don't lose hope, stick it out and keep trying.
Winter and summer holiday times are worst for changing positions or looking for jb. My advice is keep applying on all possible places and surely till the end of January you will have something ;)
[removed]
I prefer JSX because it’s a thin wrapper for JS, &lt;Fn { x } /&gt; basically equals Fn({ x }) which is quite easy to comprehend, and on top of that native JS methods are freely available. I would like some sort of built in redux/state lib because that shit always trips me up (manual state cascading, connect, etc). 
OK. What is a meta-study?
How about "BlogcoliJS" :)
This parcel bundler looks interesting, think I'm going to give it a go...
Sounds intriguing, thank you. Does coli mean something I should know about lol? 
maybe: http://lmgtfy.com/?q=what+is+coli
didn't know you can use a[href$=".jpg"] as selector, thx
Just curious, what do you mean by manual store cascading?
I did Google it, but i decided that bacteria probably wasn't what /u/KatyWings was referring to
I'm working on a closed source Pokemon Map Editor written in pure Javascript without using any libraries. To avoid copyright issues a user first have to drag a Pokemon Emerald ROM file into the editor's window, so all copyrighted assets can be extracted from there - this way this project doesn't ship anything copyrighted. There is a youtube showcase video of the editor: (https://www.youtube.com/watch?v=-COtECNb8lo)[https://www.youtube.com/watch?v=-COtECNb8lo]
Here is the entire list: https://www.w3.org/TR/css3-selectors/#selectors The last 4 are combinators. The other important bit is specificity: https://www.w3.org/TR/css3-selectors/#specificity This might look a bit intimidating at first, but it actually not that complicated. [Selectors Level 4](https://drafts.csswg.org/selectors-4/) will add some more stuff, but it doesn't look like that will happen any time soon.
Btw. try RE:DOM (https://redom.js.org), it goes well together with eloquent javascript! 😉
Good answer! If OP or other readers want to go a bit more in depth, I think "hoisting" deserves to be mentioned too.
Broccoli xD
That definitely looks pretty cool, but I don't see any way to view the source code, so beyond the functionality (which looks great) there's not much to criticize.
yes he did whahahaha
Haha I see it now. I like it lol
So if I got this right, when you do a npm install it’s like doing a windows install. So when an install is “global” it just means one install on your hard drive. I asking because our it department doesn’t allow access to our hard drive.
Thanks! Some insights into the project: The maps are rendered using WebGL, the whole source is bundled using rollup and contains 9500 lines of code. The desktop version is shipped using [nw.js](https://nwjs.io/) so I can make use of their pretty awesome source code protection. The production build only contains the bytecode generated by Ignition, there are no (at least public) tools to convert this bytecode back into the relative source code. I recently looked into v8's source code and it should be definitely possible to convert it back without much loss. Also [here](https://image.prntscr.com/image/ttbL_RBcRxaxDWSVjfsHiQ.png) is a tree dump of the whole project structure.
See [Meta-analysis](https://en.m.wikipedia.org/wiki/Meta-analysis). Just woke up and misread your comment, you weren't taking about meta-studies.
Non-Mobile link: https://en.wikipedia.org/wiki/Meta-analysis *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^132913
https://github.com/kubk/wave-algo - Maze solving algorithm visualization with React.js/Flow https://github.com/kubk/image-pixel-manipulation - Allows to apply various effects/filters on images using Canvas + React.js I would really appreciate any feedback!
i'm not sure what you mean by "a windows install", but `npm install` basically copies all files of a library under `&lt;project folder&gt;/node_modules`. when you do `npm install -g` for a command-line tool, it installs to [a certain location](https://stackoverflow.com/questions/5926672/where-does-npm-install-packages) so that you can use it from terminal.
It sucks that after a whole month you were turned down but awesome that they hired you in the end! If you don't mind me asking, what sites/ resources do you recommend using? Thank you!
I just feel that after a month, the hiring process is excessive. Unless it's a big name company why should it take so long? Thank you for the reply!
Primitively, been relying on visual studio code with extensions but I figure that a more advanced setup would be required for bigger projects to make it easy on me. I have been reading up on setting up a git/github setup to make it easier to work on thing on my own time. If I’m using git I would think it would be better to set up live server sass bourbon etc this way. IT threw it up on my workstation and told me do it all locally and left me to figure it out. So yeah fun times.
Yeah I realized that the end of the year was going to be pretty difficult. Everyone keeps telling me that January is THE month and I'll have something soon. If I don't get anything by the end of January my bootcamp will invite me bacl for their next career fair. Thank you !!
I guess it was, one of the biggest game publishers I also hate the waiting, but sometimes that’s just what it is 
Oh that sounds really cool! I also hate waiting, so these 3 weeks have been torture. My family keeps calling me asking if I got the job and everytime they just say well maybe they'll call you tomorrow. So it adds to the anticipation. 
For me it was intense because I was also preparing to move if I got the call to somewhere much warmer I did end up moving — I’m sitting in a hotel now after 3 straight days of travel — but it was for a different company that interviewed and signed me on within a week and a half
Best advice here
Here's my Julia fractal animation in only 32 lines of pure JS: http://slicker.me/fractals/animate.htm If you're looking for something to play with, try creating a zoom animation for this fractal, it's fascinating...
Some clarifications: `function myFunction` is a _declaration_ unless used in the context of an expression at which point it becomes one. As a declaration it gets hoisted and can be called before it's defined. myFunction() // OK function myFunction(){} // hoisted declaration (function myFunction(){}) // expression (because of parens), not hoisted Above, the parent make the declaration an expression, but pretty much any other syntax around a declaration will do the same. Also, each of the functions in the `myObject` definition are not equivalent, each having their own subtle differences: * **myFunctionOne: function() {}**: Basic, anonymous function expression defined to object property. Name is inferred to be the property value ("myFunctionOne"). Constructible. * **myFunctionTwo: function myFunctionTwo() {}**: Named function expression defined to object property. Name is explicitly defined in the function definition (after "function"; does not have to match property name). The name identifier is scoped within the function body. Constructible. * **myFunctionThree() {}**: Named method definition. Explicitly named as part of the definition, but unlike the named function expression, the name identifier is for the property definition only (not scoped to function body). Not constructible; has no `prototype` property.
Primitively, been relying on visual studio code with extensions but I figure that a more advanced setup would be required for bigger projects to make it easy on me. I have been reading up on setting up a git/github setup to make it easier to work on thing on my own time. If I’m using git I would think it would be better to set up live server sass bourbon etc this way. IT threw it up on my workstation and told me do it all locally and left me to figure it out. So yeah fun times.
You connect a store instance to a component and then you have to pass it to every (dumb) child component. I’d rather have my store available in every component automatically. 
Game architecture is tough. It's also going to vary a lot depending on the type of game and the preferred style of the developer. I have a [starter project here](https://github.com/spacejack/three-mithril-ts) if you're interested. It's probably using more libraries than you'd like but you might peruse it for some basic architecture ideas.
So...Rivets-lite + jQuery-lite + no unit tests + no support for ES modules? No thanks.
&gt; So, is there a "proper" solution to this problem ? The answer of the SO post you linked is the proper solution: Add a timestamp or version string in the form of a GET parameter to the source attribute. &gt; What causes it anyway ? The browser will hold a copy in its cache and not download the file again, if it's already present until the cache is either cleared or invalidated. You can't reliably determine the cache invalidation behavior of the browser.
You can connect any child dumb component, too, if you don't want to pass state down to every single component
How would I go about adding support for ES modules?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export But I think unit tests are more important. I would never use a library without unit tests.
The Github link on the menu doesn't work if you have blocked "opening windows" permission, which I have by default. From a usability standpoint I think it's clear that this kind of link should be a simple link one can click and decide to open in the same tab or in a new one, or at most, have a `target` attribute. But it should **not** a JavaScript link that opens a new window.
Very good point. I'll see to that today.
There is no need to disable caching completely. Both Firefox's and Chrome's dev tools have a setting for disabling the cache if the dev tools are open. E.g. with Chrome, F12 -&gt; F1 -&gt; Netowork -&gt; Disable cache (while DevTools is open). Forcing a refresh can be done via *cache busting*. For this, you have to change the path of the resource. The easiest option is to do this via a query string instead of changing the actual path and bending that back on the server side via URL rewriting. E.g. *style.css?token* where "token" can be a hash of the file's contents, the file's timestamp, or the file's revision. Manually increasing a counter also works, but it's inconvenient. If only a single server is involved, using the file's last modified date will work just fine.
A number of methods (`runEngine`, `bind`, `unbind`, `cssSelector`, `cssObject`, `cssAddValue`, `updateURL`, `etContent`) seem to be exposed publicly, but are _not_ mentioned in the docs (which, together with a look at the code, makes me think they are not meant for public use).
In the `ajax` method you seem to support passing `data` in your `options` argument _even for `GET` requests_, but then you do _not_ parse that data and put it in the URL, instead just silently ignore it by passing it to XHR's `send` (which ignores it for `GET` requests). I think this is an unexpected behavior for your users. You should probably either write better documentation that acknowledges this fact or parse the `options.data` for `GET` requests and put it in the URL.
Ah ok, now I understand. Thanks.
Thank you for your feedback! "Adding to this, it would also be a good idea to offer some support for request content types." -- I'm not sure I follow. Don't I do that here? for (var prop in obj.headers) { if(obj.headers.hasOwnProperty(prop)) { xhr.setRequestHeader(prop, obj.headers[prop]); } }
Looks cool, but why closed source?
wow, *render data declaratively to the DOM*, like in React and every other react clone (and angular, vue, etc?)
:) If I may inquire -- what are you implying.
No, that's just setting whatever headers you get. I meant it in a related way to the previous paragraphs. That is, you get the `options.data` and depending on the content type specified, apply some transformations. That is, if the content is `application/x-www-form-urlencoded`, then you could e.g. check if `options.data` is a String, and if it's not, if it's an object `{a:1, b:2,c:3}`, you could properly encode it to `a=1&amp;b=2&amp;c=3`. As it is now, all the responsibility falls onto the calling code, while most people would probably expect this should be something the function does.
oooooooooo I see. Thank you!
I made a masked character input using angular: https://codepen.io/ccallen001/pen/OzRPOG
Hey! I'm still trying to wrap my head around what graphQL is and what problems it solves... Mind giving a really brief tldr?
i'd like to see some benefits over existing frameworks, maybe?
i don't think its used much anymore except for legacy apps.
As I said in a above comment. I know this project isn't revolutionary, at a minimum it's reinventing the wheel poorly, and at best it's just reinventing the wheel. The only real benefit is that Zam is fast because it's a highly stripped down hybrid of jQuery/Rivets/Vue.
I made a discord bot that takes data from an osu! IRC bot and relays it to a chat channel. https://npbot-osu.herokuapp.com
I think that's an invalid statement
You're not pausing anything the function defined after a promise or await is stored away in the Event Loop that when the event of say the response of an API comes back, calls that function and passes in the results. 
It's better to know javascript even if you plan to use jquery. jQuery doesn't simplify javascript any more than rails simplifies Ruby. That's not what they do, they use their *base* languages to build up something that simplifies and make easier the often repeated actions For instance, jQuery makes simplier getting elements, by whatever means. Understanding the javascript underneath is great, and you can write it on your own if you want, but the goal is to make it so the 'basics' are built and you can build upon them. Disdain for things like jQuery are fascinating to me. Can you overuse them, sure, but they're a tool in your toolbox that can be used for the right job to complete that part of the job in the right time. But, again, to me, you should tend to learn what the library is built upon. In the case of jQuery, learn javascript, it will make your use of jQuery even better for you because you'll be able to write your raw javascript to customize the built instuff to do what you want
I haven't used it in 5 years.
Well - one data point - now we can generalize for all users. 
The big 3 (angular, vue and react) don't use it at all.
(n=1) != true
And are the big 3 *even combined* as popular as Jquery? No. Ergo, the "big 3" are not as big as you think they are. 
look at any front-end job description now. They all ask for the big 3.
That's a common misconception, yes the execution is awaiting the resolution of the async/promise function, but its not in a blocking way (It does not halt the event loop waiting for the function to finish). Instead the event loop picks up the next action/function/event in the queue and keeps happily working until the promise/async is resolved. In a blocking pattern the entire runtime would stop waiting for that function call. Think blocking io in a C program.
First, let me explain how async/await came to be. That should help you understand what they are really doing and why they're asynchronous. Javascript isn't threaded, so truthfully, nothing is asynchronous. But we can pretend that some things are instead of waiting for them to finish. This works using an event loop, which basically runs your main script, then continuously runs any code you've asked to be done "asynchronously" until there's nothing more to do. Before async/await, you could use callbacks or promises. Callbacks are where you give a function as an argument to the API call, and when the call is done, it calls your callback with the result. Meanwhile, other code can run. Your function then does something with the result. The problem with this is that it creates very messy code that is hard to read. remoteAPICall("get some data", function(data) { anotherRemoteAPICall(data, function(data2) { console.log(data2.relevantPart) }) }) console.log("done") // but not really. this will be called after the API calls start, not after they finish So people created promises, which are basically just callbacks in a more organized manner. Instead of handing an API call a callback, the call would return an object--not the result, since it doesn't have it yet, but a *promise* to come up with the data later. You can then call functions on that object, like `then(callback)`. remoteAPICall("get some data") .then(data =&gt; anotherRemoteAPICall(data)) .then(data2 =&gt; console.log(data2.relevantPart)) console.log("done") // again, the API calls have only started This is a step up from callback hell, because now at least we don't have crazy indentation. We call the API call, then the other API call, then `console.log`. But now we have `then`s everywhere. Surely there's a better way. Enter async/await! Note that while promises are simply libraries people made to make callbacks easier to read, async/await is a built-in feature of the language. Let's see what this code looks like now: var data = await remoteAPICall("get some data") var data2 = await anotherRemoteAPICall(data) console.log(data.relevantPart) console.log("done") // this time, this code is run after the API calls finish See how much easier that is? Now, on to why async/await is asynchronous. ### TL;DR Async/await is really just syntactic sugar for promises. When you make a function `async`, Javascript is making the entire function return a promise. When you `await` something, Javascript is really just wrapping the rest of the function in a callback and calling it when the API returns. Meanwhile, other code in the event loop can run.
What does that have to do with anything? 
The `async` part is (as the name implies) asynchronous and not blocking. `await` is the part that (as the name implies) does the pausing/blocking. The overall execution of the async function is asynchronous and not blocking. See here: let resp = null, respJSON = null, lastComment = null; (async () =&gt; { resp = await fetch("https://www.reddit.com/user/obbaba.json"); respJSON = await resp.json(); lastComment = respJSON.data.children[0].data.title; console.log(lastComment); //Sorry if this is a dumb question, but why are async/await considered asynchronous &amp;amp; non-blocking when awaiting something pauses the execution of code? })(); console.log(lastComment); // null Calling and executing the async function does not block the overall execution of the program.
i think before doing jquery you should master flash 
My vote: learn js itself. Then learn a framework like angular, react, or vue. Don't bother with jQuery.
Why would you want to do that? 
Learn pure javascript. Jquery is very easy to learn if you need it one day.
It reduced our production bundle size by 28%.
ES modules ✓ Working on Unit Tests now.
might wanna read through this, it should either help or make you more confused : https://jakearchibald.com/2017/await-vs-return-vs-return-await/
You should try to learn how to use properly inheritance and shorter names.
&gt; But overall I'd say it is far more functional than OOP. It's already been said, but not this clearly: you're mixing up object-orientation with class-inheritance. OO doesn't require that the objects are made from classes; in JS they're obviously made from constructor functions. I know not a single language that is "more OO" than JS is: Boolean.prototype.hello = () =&gt; console.log('hello'); true.hello(); // really doesn't get more OO than this
Can you please read the article, as well as my other articles and then judge. Inheritance in CSS is the biggest cause of all CSS related problems. More precisely specificity. To solve it we need to think modular. Which is the component-based development of course. Long meaningful names can and do build up readability. Which is very important in the scenario where you can optimize/shorten the names automatically in your production build...
Okay... so you have a class name, then classes with random names? What? I don’t get it... but I’m not a front end developer so why do I care. 
To make debugging as hard as possible. Using CSSModules correctly is pretty amazing, though.
Yeah, cause fuck the future maintainers. 
Well to be fair, the code is probably readable. But you're going to totally break inspect.
Hey :) 1. this is done only in production build. On dev build we keep the original names. 2. naming collision will not ocur since the logic adds some chars if it happens. You can define the character limit freely if you think it is needed.
In development, you have your real names of the CSS classes. Which get rewritten in the production, both in CSS files and in React components. So that as the end result in your bundle size get smaller. The procedure is automated, thus it do not interfere with your workflow.
Fair question. In retrospect the keywords could be more clear
Source for the one true definition of OOP please? I would argue that the JavaScript language itself is constructed with objects and accessing that data is done via the objects, sure, but that doesn't mean the language's attributes make it geared toward OOP practices. Conversely, PHP is an object oriented language but you don't have to access its functions through dot or arrow syntax at all.
Wow, that's insane! I could never move for a job. I'd lose my mind being in a big limbo like that. 
It's very rare when I have problems with inheritance. Your approach makes debugging harder, so it can cause more problems anyway.
In your documentation there's no help for the `Zam` constructor itself. No explanation at all of the arguments passed (`obj` and `ran`, whatever those may mean).
With this approach we can choose what we build. With or without class names obfuscation. In dev environment it will always be built without obfuscation thus debugging is the same. If we have some crazy situation where we must reproduce the bug in production we can easily build production without obfuscation. So this approach has zero debugging readability problems. And it makes the bundle almost 30% smaller. For me that sounds like win-win situation.
I haven't gotten to it yet. I'll hopefully have that documentation up in the next day or so.
I'm sorry for sounding harsh, but I suggest you read up on the basics of how programming works, since you're clearly showing a lack of knowledge and/or ignorance about that. I'll give you the most textbook-like explanation for objects that I can come up with: an object is a namespace for a group of properties, that are accessible via a common memory address. This was basically one of the original definitions of objects that came up in the early days of non-assembly languages. Since JS (and many other languages) exclusively make use of this (you can't not have objects in JS, everything is an object), they're to be considered object-oriented. It doesn't matter if the standard library reflects that or not, you can have an OO-language without any builtin OO library functionality. I really don't understand what you're trying to say with the PHP part. PHP surely knows object methods the same way JS does: either statically via classes or dynamically via setting an object property. And you access them via arrow syntax. $object = new stdClass(); $object-&gt;method = function($a) { echo $a; }; $object-&gt;method();
Ah, so it's only blocking the execution context it's in? Like if there's some line of code below an await statement, that is blocked from that specific await, but not the whole program stops, the rest of it continues...or am I getting it wrong?
Nah, that was a "you're being an ass" downvote.
Also, OOP is not the same as everything being objects. Similarly, Functional Programming does not mean you do everything in functions. I suggest you read up on it because you're clearly not understanding basic concepts.
I don't get all the criticism you get here. Since all the webstuff moves from `write code -&gt; serve` to `write code -&gt; compile -&gt; serve` anyway, this seems like the next logical step. With javascript we do this all the time, why not with css? Debugging in production is pretty hard anyways, w/ css &amp; javascript uglified. Using shorter names just to reduce file size seems like a step to maintainance hell in the name of efficiency. Thanks for the article! One small point of criticism: comparing the raw sizes doesn't really tell much, i'd prefer the sizes of the gzipped bundles... :)
More than 70% of the top 10k websites use jQuery. It is becoming less popular, but developers still use it like crazy. https://trends.builtwith.com/javascript/jQuery
As another point of reference, you can modularize your CSS if you use shadow dom as well.
You probably meant to return the result of calling `checkChar` inside of `checkChar` as well.
People are missing the point! This is for production only! Except for the bundle size, I want to add that as someone who develop web scrapers for his living, this would make my life much more complicated to scrape. Same as obfuscation js, css obfuscation should be a standard too. Thanks for the article! P.S If you're still not convinced, look at the source code of Google, Facebook :)
For hobbyists that is good advice. For professional use not so much. While jQuery is declining in use, it is still used by millions of websites: https://trends.builtwith.com/javascript/jQuery and if you need to deal with jQuery from an existing project at work, you better know how to deal with it. It is very easy to learn and just good to know. Learning vanilla js first is critical. Never use a framework if you don't know what it does.
I've always wanted to play around with React, without the overhead of Webpack and Babel. I also wanted to create a blog on React - I combined the two ideas together... https://github.com/hjfitz/react-bloggy https://hjfitz.github.io/react-bloggy/ Very much WIP, but I like where it's going!
It's essentially a rest API which has one endpoint and you send a query for the exact fields and data to respond with. It's pretty cool, and requires fewer round trips to get all the data you need for the front end. It can be sort of complicated to set up (in php at least...) and you have to notice performance bottleneck queries, but as long as you're careful it can be super useful. It offloads the resource management from the backend guys to the front end, and allows the front enders to get what they need as they need it. In node it's pretty easy to set up, so I'd recommend trying it out. It's basically an rpc endpoint. You send a json-like query payload and you get the data back. I like it, but haven't used it in production yet, so I'm not sure if there's gotchas hiding
I don't know why you're voted down. It's clear that there's a lot of places that use jQuery, and it would therefore be a great idea to learn it. That being said, it's better to have a firm grasp on a programming language before learning any frameworks.
The confusion comes from the definition of "asynchronous" in this context, versus "parallel." And just to avoid confusion, the other answers in this thread aren't quite explaining this correctly, though the examples and history provided are correct. JavaScript allows for truly asynchronous code (not parallel, excluding worker threads), the event loop isn't precisely what's responsible for continuing, and no code actually "pauses." I'll try to clarify those points below. Asynchronous code allows the execution engine (the JavaScript VM, like V8) to configure code paths to "do some work" "asynchronously" (not in-concert with the executing application), which allows your application to do something else in the meantime. A common example of asynchronous code is reading a file. Reading the file happens on the hardware layer and, through a series of OS constructs and low-level device driver concepts, allows your program to keep going with something else, without "continuing" past the await keyword - instead it just moves on with some other code. When the device driver signals that a file is ready to be consumed by the application, a "continuation" is executed, and your application resumes where it left off. What you are likely thinking of is parallel processing. As you are likely well aware, JavaScript executes on a single thread, so how is it possible to do two things at once? Well, that's what the "asynchronous" definition above allows. Generally, parallel processing means you have multiple code paths executing on a CPU at the same time, through threads. Individual threads _do_ block, and thus are not "asynchronous," in this context, which is why I'm differentiating "asynchronous" and "parallel." So putting this all together, asynchronous code gives the JavaScript VM the opportunity to do something else right after telling hardware to do something. The application and asynchronous work execute in parallel, but this is called "asynchronous programming." When the asynchronous code finishes, a continuation is executed, and the VM will continue from where it left off (where the `await` keyword returned). Bonus: parallel programming requires the ability to execute multiple threads, but JavaScript is single-threaded; however, you can simulate parallel programming with asynchronous code by kicking off multiple asynchronous methods and waiting for them all to finish. This also does not block the thread.
That's right
That doesn't necessarily contradict what the other person said, most websites weren't built that recently. I certainly wouldn't start a new project with jQuery unless I had to, though.
[@connect's latest tweet](https://i.imgur.com/1MzWnRr.jpg) [@connect on Twitter](https://twitter.com/connect) - ^I ^am ^a ^bot ^| ^[feedback](https://www.reddit.com/message/compose/?to=twinkiac)
Yes, you can always build something but in larger project its a no go. Production builds are tested and deployed. It's often in some way complicated process. I still don't get how it makes your build 30 smaller. It looks like nearly half of your code it's only a class names not a code itself. Maybe your problem is not in class names?
chai as promised is awesome, i wonder if it uses async/await or a different implementation. expect(promise).to.eventually.equal(something)
You should learn javascript first unless you are in a situation where jQuery is mandatory. jQuery is a monstrous omni-tool library built on javascript that simplifies many verbose APIs (DOM manipulation, AJAX for example) and offers better cross browser / legacy compatibility. Many developers view importing jQuery for simple tasks to be akin to hitting a nail with a toolshed. In some cases this is exaggerated, the minified version is relatively lightweight if it is the only thing you are using. That being said, it is also a bit of a "jack of all trades master of none" deal. There are better options for many of the things it offers. Also, understanding javascript is integral to understanding a lot of jQuery functionality if you plan on going further than copy-pasting snippets from SO. *tl;dr* learn javascript
Great comment here, Gmail is doing exactly this. One just need to open the inspector and see it. I think that people who miss the point here possibly are still not got into the modern bundling / webpack... From old school perspective what I am describing here is hell. But from the not so new perspective it is logical step forward.
You're not returning your recursive call. If you hit that branch, you never hit a return statement. 
You do unit tests of JS components and for that to work one do not need non uglified / pre bundle code. Same goes with CSS / UI, how do you even test that? If not with End-to-End / Visual regression testing... Where we test visual stuff / not codebase itself. Thus no need for pre bundled / non obfuscated codebase. At the end, this is what Gmail, Facebook ... do. It is one of the ways you can make your production code bundles smaller and even if you save 2% on large scale apps, with a huge user base, it is a big difference.
Many sites also still use flash...
Awesome. Thanks!
You got it!
No probs. While I think about it, GitHub has a graphql API, you can check it out and play around with it in the browser so you can get a feel of what it does, see if it's up your alley. [it should be here](https://developer.github.com/v4/explorer/)
Don't think of it as pausing. Think of it as setting stuff aside to work on later. That's essentially what a promise or callback does. It sends a request off to the filesystem, OS, or interwebs and sets it aside tell it hears back, working on something else instead.
This is great comment. Except that we can't use shadow DOM yet. Since its support just does not exist: https://caniuse.com/#feat=shadowdomv1
I haven't worked with canvas much, but based on my knowledge from CSS and JS: - I assume the canvas would have `position: relative` on itself, and all canvas objects positioning is based on the canvas X/Y. If not, I imagine just adding `position: relative` to the canvas would do. - take the width and height of the canvas - if you need to fix an element to the bottom, you take the height of the canvas, minus the height of the element, then set it's Y position to the calculated value. - if you want an element to be left aligned, you simply set the X position to 0. - if you want to set an element to be right aligned, you take the canvas width and subject the element width from it, then set the X position to the calculated value. - if you want to center align, take canvas width and divide it by 2, then subtract the element width divided it by 2... So (canvas.width / 2) - (element.width / 2). Then set the X position to the calculated value. - now... As browsers are dynamic in nature and can be resized, you should also add an event listener for the window resize event, and redo all your positioning calculation accordingly. This would be the JS only approach. If you could mix in the CSS to each canvas element (not sure if you can, but if you can) the CSS to apply would be: - `position: relative` on canvas - `position: absolute` on element - `bottom: 0` on element to anchor element to bottom of the canvas - `left: 0` on element to anchor to left side of the canvas - `right: 0` on element to anchor to right side of canvas, don't set left and right at the same time otherwise the element will stretch across the canvas - `left: 50%` and `transform: translate(-50%)` on the element to center align it If you can do it via CSS, you can create classes for each of the above scenarios, and simply add the classes to the element and the right CSS would be applied.
I have a fisheye zoom enabled Gwent Card viewer from Witcher 3 :) [LINK](http://ibrahimtanyalcin.com/gwent/)
Hehe
Cool! Thanks again!
Pretty good explanation. Just one thing (sorry for the not pick). Promises **originated** as libraries. They became built in language features before async/await was ever introduced.
Good post! Only thing a bit off is promises just being libraries. The promise object is a built-in, and the async/await operators just make using Promises easier by waiting for the result and returning the value, rather than a promise
Yeah totally. It's important to realize that graphql is not a replacement for mongo or mysql or any of those things. It's a unique layer that is implemented server sized and accessed via the client. You tell graphql the Types that your data has (Posts, Author, Book) and the different Subtypes (PostCreationDate: String, authorName: String) etc. Subtypes can also refer to other types. Posts have Authors etc. The magic of GraphQL comes from the resolvers. You go type by type and tell graphql how to resolve each one. (Get the post from mongo, get the author's favorite snack from goodreads API etc.) Once you do all that set up, graphql allows you to send queries as deep as you want (or as deep as you set the server to allow). The advantage is that you tuck away all the implementation of various data sources. However, even if you have a single source of data, graphql clients offer a lot of unique tools to with normalizing data fetching. Queries come back immediately as promises with a "Loading" property that resolves with a data object containing all the requested data. In addition they do some very savy cacheing so you don't have to cache every single esoteric request. The types and subtypes are preserved in case they are referred to by a unique subsequent request. e.g. You might ask for all author's who love hot cheetos (one query) then later you ask whether or not one specific author likes them. That's a different query but the data is cached in a way that makes it efficient and quick. Writing front-end code with access to a graphql datasource seriously feels like magic. I'm a huge fan, let me know if you have any unique questions. I highly recommend Stephen Grider's React/GraphQL course on udemy.
jQuery doesn't change the language itself. You're just using jQuery's API instead of the web APIs. Anyhow, try doing it without jQuery first. Today's browsers are pretty decent. It's not nearly as much of a pain in the rear as it used to be.
my point was on new projects its non-existent.
Totally. Gmail have been at it for years. I love this and can’t wait to try it on a project. 
Better to think of it like this: ASYNC functions start a task. AWAIT blocks the current function until that task is complete. Note: it does not block the entire process, so it is in fact executed asynchronous with other requests. 
Also relevant, an async function can await a promise without any special handling or translation, and an async function returns a promise. This means that any library that is promise based can be used right await in your async functions. Another note about async/await is that similar to a promise chain that should have a .catch block, you should wrap await in a try/catch block. 
LISK is a blockchain application platform and looks to exchange how JavaScript applications are developed and deployed. 
So are you looking for atomic naming or "obfuscation"? Because there are lots of ways to get unique names that are still generally readable I think.
In that sense, you should avoid using the word "block" to express this. Blocking generally refers to something impeding the progress of _something else_, not of itself. And it is in that sense that it is used when saying blocking/non-blocking. A piece of code that is paused or suspended from execution that does not impede the progress of other (different) actions, is generally expressed as being "non-blocking". On the other hand, if it does halt the progress of all other actions, then it is referred as being "blocking". So, `await` produces a "non-blocking wait", or "non-blocking pause". It is implied by it being a "wait" or a "pause" that _it_, this particular execution does not progress momentarily. Being "non-blocking" means it _does_ allow other actions to progress.
What @webdevnomad said: function fearNotLetter(str) { function checkChar(char) { var tempStr = str.split(""); if (tempStr[char + 1] == String.fromCharCode(tempStr[char].charCodeAt(0) + 1)) { checkChar(char + 1); // you need to return this // return checkChar(char + 1); } else { console.log(String.fromCharCode(tempStr[char].charCodeAt(0) + 1)); return String.fromCharCode(tempStr[char].charCodeAt(0) + 1); } } console.log(checkChar(0)); }
After living there the first time during an internship, I knew I had to return, it will be worth it
Was interested in the Maze solving algorithm. Was playing around with it and noticed a problem. If the paths run parallel, one of them can potentially block the correct solution. Is this a problem with the algorithm or with the way it's implemented by your react application? Here's a screenshot of one of the mazes it didn't "solve". https://i.imgur.com/mYWn0B1.png
jQuery started as a project to normalize browser APIs when they used to be a complete mess. It simplified the syntax and normalized "issues" with certain browsers. These days, you really don't need it. It still has a nicer syntax than the native API's. jQuery: $('.stay .classy') Pure JS: document.querySelectorAll('.stay .classy') My recommendation, learn native javascript. You'll always be able to use those API's, regardless of the project. I would also bookmark https://caniuse.com. It will help you reference and all of the API's that have been universally adopted.
This depends on what you plan to work on in the future. If you work at an agency where you will being using content management systems like WordPress, Joomla, or Drupal then learning the jQuery framework will be more useful as those systems already include it on the page. For WordPress, Joomla, and Drupal jQuery is advised to always to be included in your theme as third party plugins/extensions/modules will expect jQuery to already be on the page. If you are going to be building stand alone applications outside of a content management system or building your own CMS, then learning the JavaScript language will be better for you. Browser APIs are far more uniform these days then they were even 5 years ago. Knowing what browsers you need to support should also factor into your decision. In the end it is more important to learn the fundamentals of programming over any specific language or framework.
You can have multiple threads using web workers, so JS can do both kinds of async
I will be brief Await stops the execution correct But it can be used only within async functions Async function are aync :) the program steps over them and continue execution 
What does this mean? Eli5?
So this would best be handled by using Promises. A promise is like if you tell a friend that you're going to get a new phone and PROMISE to show them next week when your mom buys it for you. When next week comes, you show them your new phone, and they're happy. So for your example, this would be done by the following: var myVar = getVarValue().then(myVar =&gt; { console.log('This DOES print myVar ' + myVar); }); function getVarValue () { return new Promise(resolve =&gt; { resolve(getapi stuff()); }); } So to break this down, you're going to call the getVarValue() function, and this says, "I promise this will have a value, when it's finished, THEN do this shit with the returned value that getVarValue() provides (which in this case, is just named myVar for simplicity's take). Then you can print value like you want.
Depends if the api function returns a promise or takes a callback. If the api function returns a promise and you want to use async/await: const getVarValue = async () =&gt; { const myVarOut = await api.getStuff() console.log('api result:', myVarOut) return myVarOut } (async () =&gt; { const myVar = await getVarValue() console.log('myVar is:', myVar) })() If the api returns promises but you're not quite ready for async/await just yet: const getVarValue = () =&gt; api.getStuff().then(myVarOut =&gt; { console.log('api result:', myVarOut) return myVarOut }) getVarValue.then(myVar =&gt; { console.log('myVar is:', myVar) }) If the api function takes a callback: const getVarValue = done =&gt; api.getStuff(myVarOut =&gt; { console.log('api result:', myVarOut) done(myVarOut) }) getVarValue(myVar =&gt; { console.log('myVar is:', myVar) }) 
Ajax = XHR = XmlHttpRequest
https://pbs.twimg.com/media/DSIAHFtVAAAMc3Z.jpg It's okay 
The only example I can see is a Click me link that appears to do nothing when clicked on mobile (ipad). Also, I can't hover on mobile, so that doesn't work either.
You are misunderstanding this. AJAX stands for Asynchronous Javascript and XHTML (dynamic html). This is just a way of programming using Javascript to dynamically update part of a page with some data you get from a server on the internet. XHR is the Javascript construct used to implement an Async call to the server to get some dynamic data. It takes a callback function which gets called automatically with the data returned by the server and then contains some Javascript to display the data on the screen. Async means you call the server now, and the callback function is executed sometime in the future when the data is ready (could be several miliseconds later or several seconds later). The problem with XHR is that it is implemented differently in different browsers, so libraries like jQuery put a wrapper around it and that name confuses people. So on jQuery they call the wrapper $.ajax (or $.get and $.post which are just aliases for $.ajax). But all $.ajax does is call the XHR functions with the syntax used for the current browser. It makes it easy for the programmer just to remember the $.ajax syntax and use it in all browsers instead of writing different syntax for different browsers. I hope this helps a little. 
AJAX is a term that, loosely put, means "making an HTTP request in the background of a page". So, AJAX is a description of the type of HTTP request and process Browsers offer two APIs for making AJAX calls. The first was `XmlHttpRequest`, and then the `fetch` API has recently been added. Libraries like jQuery, Axios, and SuperAgent wrap around the built-in `XHR` and `fetch` browser APIs to provide their own APIs and features on top of that.
My first reaction is to tell you to get on a laptop and open developer tools. But really. You make a good point. I need to really work on the default example code in that codepen.
No, using jQuery is not bad practice and is still used in the majority of we sites. Its just a wrapper around Javascript so you can look inside the source and see how it does things and try to do them yourself in native JS. The problem is there are still browser inconsistencies (especially in older browsers) so to do code in native JS would require you to write different code to support different browsers users are using. The jQuery team already did this for you, so you can write your code calling the jQuery function, and it will work the same on all browsers. Now modern browsers have less issues, but most code in business has to support the browsers in use by the users and most users are not up to date using the latest PCs and browsers. So we have to support old stuff. 
While javascript as defined by the ecmascript standard is single threaded, the various APIs used in the browser operate in threads separate from the call stack. Second, and this is just sort of a pedantic point, but asynchronous just means that the code isn't run in the order it's laid out. Await and .then() chains enforce a sort of synchronous order to the code. I think what you meant to say is given that javascript is single threaded, "nothing is truly concurrent," as opposed to "nothing is truly asynchronous."
Is it not possible to use custom CSS? It seems like that'd greatly simplify this.
Functions typically are executed immediately and return immediately but I think you really mean how do I process the return from an API that may have a delay in sending back its response. Its really important to understand this is an async operation and it changes how JS normally works. Normally JS works one statement after another i.e. console.log("A"); console.log("B"); console.log("C"); will output ABC to the console but console.log("A"); do async operation, then output console.log("B"); console.log("C"); will output AC and then B (sometime later when the async operation returns. How to implement an async function and how to think of async programming - you have to think a little differently. When A is complete, start doing B, when B completes start doing C, When D and E complete, then and only then run F. Its like a state machine where you change state only when the prior state completes. Some people call this chaining calls. The simplest way to implement this is via a callback function where you declare/define the async operation, then give it a callback function in the declaration/definition that is to be called when the async operation completes (and sometimes a different callback function when it has some kind of error). JS calls this function AND sends it the data from the async operation (most asyn operations call a server and get some data back in JSON format) A more complex, but more modern way to make async calls is to use promises and deferred constructs. If you use jQuery you can use $.ajax combined with $.when and $.then. Most async operations are XHR calls or more commonly called ajax calls or ajax programming (if you use jQuery you use $.ajax to call your API and just give it a callback function name or definition to run on success or error. There are lots of examples for you to google. Try google with: example ajax callback function JS async programming XHR jQuery using $.ajax , $.when and $.then JS promises overview For most google searches I recommend you use the Search Tools options to limit your responses to the last 12 months only, therefore you dont get lots of outdated info back. I hope this helps a little 
It's not a dumb question. Bunch of good explanations already. Basically your confusion comes from thinking in terms of the lines of code of your own code. You are thinking that because the next line under your "await" line is not executing, therefore await is somehow blocking. Well that part is true because you want to wait for it before doing the next thing in your code, that's the point of it. However your are not blocking the event loop from doing other things. For example you may have all sorts of events firing (http requests coming in to a web server) or timers ticking (setTimeout, setInterval, etc) and the event loop can attend to those things while waiting on await.
[this](https://medium.com/@theden/async-await-simple-example-in-four-lines-of-code-b3bc02c2fa34) might give a better understanding: just paste that code into Chrome's console and play around (take the awaits away, etc.), this trial and error you should get a better feeling than just reading about async/await
You are right, but we do need obfuscation. As we use BEM class names are intentionally longish. With the atomic design prefixes .a- .m- .o- (it is React cmp pattern lib) it is even longer. That is very important for readibilty. As one look to the HTML element can say to us where it is in the project file structure.
The problem is in my implementation of this algorithm, thanks! I'm gonna fix it.
Very few people are making something on a Facebook or Gmail scale so i don't think it's a good example. Saving 2% of 100kb is not worth an effort these days.
Facebook uses minified CSS class names like this. However, note that its usage on Facebook is primarily to reduce the payload size, rather than for obfuscation. On Facebook, a unique auto-incrementing ID is assigned to each CSS class name as part of the build, and the minified name is just a base62 encoded version of the ID. 
Are you sure your import of the promise is successful? To me it looks like you define players and try to use player?
you have a typo require('./get').player.then((data) =&gt; { should be require('./get').player.then((data) =&gt; { anyway it is not a good practice to export a promise from a module. Module resolution in node is always synchronous whereas we use promises as abstractions over asynchronous calls. Don't try to use promises everywhere. Use them when you're reading a file from file system or reading from the DB. Don't use them in your game logic.
sigh, I was staring at this thing for at least an hour and couldn't see that ovious one. Thank you for the fresh pair of eyes!
that is why you should use typescript/flow. If you did, your editor would have told you about it-you wouldn't even need to run it.
It's XML, not XHTML
Because such things like ``` const [req1, req2] = await Promise.all([fetch("reddit.com"), fetch("pornhub.com")]); ``` Will be run in parallel, thus non-blocking each other.
actually I am reading in this case from a database. What would be a better practice for avoiding exporting a promise?
Which effort? Do you realize that to setup this it takes you literally 2 hours of time and then it is fully automated. You write your CSS or SCSS in the same way as if you would not use this approach. In your React cmp you can also have such workflow that do not require binding of classnames, but even with it people still use classnames lib anyway. So it is literally automated process which you setup once and have only benefits out of it. As your bundle grows, the perf gain grows with it, every kb counts if optimization is not manual.
With this approach you can easily replace sha1 with baseline64 if you prefer that. Obfuscation is implemented because of reducing the payload, like I stated in the article. So the motivation for it is the same as in Facebook. Thank you for the constructive comment.
Looks clean! Why Flow? I use TypeScript and it looks remarkably similar - are there any benefits to it?
Your current code returns the same promise for every `/get` http call. Modules are singletons, so they run only once for your whole run time of your program. You really want to export a function which returns a new promise when called. Require your function from your http handler and call that function there. 
Flow allows for type checking but you don't have to go through the Compile phase of typescript as its still just Javascript. However I do prefer the Typescript compiler to Babel
They are 2 different things. Originally we had html, then xhtml was referenced when talking about dynamic html (html that can use css and xhr calls). XML is a reference to extensible markup language, which is a fancy way of saying it is a language specification for tag based text description. a HTML document is 90% an XML document, but XML can also include non-html tags. Note XML is very strict - every starting tag must have an ending tag but html is a bit loosey goosey on this requirement (&lt;br&gt; tag for example) which is why I say its 90% XML compliant but not 100%. For example: this is a valid XML document completely unrelated to html because it uses tags: &lt;students&gt; &lt;student&gt; &lt;name&gt; John Doe &lt;/name&gt; &lt;age&gt; 22 &lt;/age&gt; &lt;/student&gt; &lt;student&gt; &lt;name&gt; Jane Doe &lt;/name&gt; &lt;age&gt; 18 &lt;/age&gt; &lt;/student&gt; &lt;/students&gt; We use HTML to exchange data between systems. It used to be used a lot for EDI and for SOAP based APIs but nowadays we mostly used JSON in REST based APIs. You can google JSON to see what that is.
Quick question, will read the article later: You wrote a comment about reducing the size of the prod bundle by 28%. Before or after gzip?
::before 🙂 I compared minified non obfuscated code with minified obfuscated code...
oops - thanks, you are correct - the X in AJAX stands for XML.
As I said - it makes debuggin harder on production and it's a overkill. Gzip will compress more. Saving 1kb of compressed data is not worth it unless you are Facebook on Gmail scale. 
Good answer, just a small correction. Actually async and multithreaded are two different concepts. Javascript is an asynchronous language. 
Ok
Either way, interesting! My educated guess is that the difference would be will be smaller (albeit still noticable!) after gzip, because the entropy of your the obfuscated class names is pretty high, compared to normal css.
I really wanted to make example github repo for this and now you motivated me to do so. Will try to make it in the evening... When you have 3 small kids New Years Eve is just another night just with 🎁
 exports.players = () =&gt; new Promise((resolve, reject) =&gt; {..etc..}) I.e., export a function instead that returns a promise. If the file is called "player-getter.js": const get = require('./get') app.get('/players', (req, res) =&gt; get.player() .then(player =&gt; res.json(player)) .catch(err =&gt; next(err)) Also, best to put requires at the top of files outside of functions. Requiring a file is a blocking operation - if you do it outside everything, during initialization the runtime will spider out &amp; require all the files and load them into memory.... once initialized, it's good to go. If you have an inline require, the first invocation of that function can potentially cause a slowdown of the app. We're talking milliseconds here, but still it is a best practice.
This is the kind of article that gives JavaScript a _deeper_ bad image. I mean, traditionally, JavaScript may have had a _superficial_ bad image of being a "minor" or "toy" language. This is unwarranted now (though it wasn't such a wild claim in the beginning); JavaScript being an... "ok language" today. I have my own opinion on the language but that is mostly irrelevant for the discussion, so let's leave it at acknowledging that yes, JavaScript is as _generally valid_ or _generally reasonable_ as any other languages can be (each, including JS, with their own strengths and weaknesses). One may even argue that, _as a platform_, JavaScript -thanks to Node, maybe, or to Node _and others_- has also become a _generally valid_ platform. That it can successfully support various usages with reasonable results. Even good results in some aspects, sure. So, those may be reasonable positions to hold. But then again, this article presents a clearly _immature_ premise: That of a "language war" and that somehow one language "wins" it. It then goes on to make some ridiculous claims, but I don't even need to bother with those. Because the real problem is not that of those claims. The problem is that the premise only helps deepen the impression of immaturity around the JavaScript community. Yes, you're **not** helping. You're **not** making a positive impact in the general perception of JavaScript and JavaScript developers. If that's what you wanted, you failed. You failed terribly. You failed producing exactly the opposite effect. I, personally, find it heartbreaking. Your intentions may have been good. I cannot assume the opposite. But it is heart-breaking because you present yourself as an experienced programmer and make noise about the goodness of JavaScript and present yourself as -to some extent- representative of "JS devs", but the end result is that you perpetuate a _deeper amateurish image_ of the JavaScript developers. And all because, as you confess somewhere else, you "like getting people riled up about it trying to defend their side" and you think that justifies something. You're your own worst enemy. But what's worse is that you're not the _JS hero_ you think you are and you're _not_ doing the community any favors.
I would also assume that many of those sites are like the one at the company I work at where it's a huge enterprise site that was built a few years ago and in the not-too-distant future it will be re-platformed most likely without jQuery. The existing architecture already has jQuery peppered throughout the site, so it's still being used until there is time and money for that new re-platform because no one is going to pay to re-write the jQuery parts and QA all of that even though from what I've seen, pretty much all of it can be done without jQuery anyway.
It means another thing to throw on the scrap heap fire of javascript and front end stuff that no one needed in the first place.
Awesome! Thats going on the wall with a beamer!
Are there similar pens? Websites? 
Thank you guys for your input, I will rearrange the code according to your proposals.
That is a nice countdown!
If you're debugging your code, configure Chrome to disable the cache. Open the DevTools and press F1. In that "Preferences" category (shown at the left side navigation), tick/enable the "Disable cache" checkbox on the "Network" section.
I thought it was a rambling article, and it was a waste of time to read it. However... &gt;That of a "language war" and that somehow one language "wins" it. There was a language war, between Java, Javascript, VB.net. Javascript clearly won. It won so hard that we don't even imagine these languages are viable on the front-end. Further, it makes sense that languages would generally converge on to one that is "the most used for most purposes." In the 90s, it was C++. Nowadays, it's Javascript. There's built in advantage to being the leader of the pack, in terms of ecosystem and practitioners begetting more uses of the language. Javascript has an insane advantage, in that it, like BASIC used to be in the 80s, is available on every last single personal computer. In fact, JS's penetration is far, far greater than BASIC's ever was. Most phones can run JS. There are freaking refrigerators that can run JS. It's everywhere.
why... why this links directly to opencollective?
There is no SIMD support in JS. There was a proposal for it, but it was dropped. Wasm will support SIMD, though. It's on the [roadmap](http://webassembly.org/roadmap/). (Dart also supports SIMD, but not when compiled to JS. Works in Flutter apps, though.)
Thanks! Wasn't aware that it was dropped.
Nice idea 👍
Forgot to mention that there is one option for using SIMD on mobile devices: https://crosswalk-project.org/ https://crosswalk-project.org/documentation/samples/simd.html It's like Cordova (Phonegap) with SIMD support.
That’s because we use it as a platform to give people our project description. Don’t worry, that’s not about money donated:) P.s.: $_$
Make one!
I'm gonna be on a plane traveling from Frankfurt to Thailand and I actually don't know when is the intersection between the timezone I'll be at and new years, will this app make this calculation? I need this feature ASAP, top priority, it should be really easy ^/s
Learning jQuery today is a waste of time. The library is in decline as well, now troubled by maintenance turmoil which makes it even worse. It wasn't even particularly, it has lead to the most [hellish applications](https://twitter.com/AdamRackis/status/844289020372901888) imaginable and thank goodness it fades into irrelevancy.
Having a "countdown timer" on a plane is maybe not such a good idea.
https://www.timeanddate.com/countdown/newyear#
Don’t use jQuery if you can help it, 99% of the time it isn’t necessary 
Actually @op and everyone, JavaScript is fully concurrent. It might be one of the most heavily concurrent programming languages out there. What it is not (unless you use child workers and clusters and all that but for simplicity let's assume that not the majority of cases) is parallel. Concurrent is having two processes / threads / jobs / functions ( however you want to seperate your work, work within the same time frame but not at the exact same time. It's about code being collaborative. Parallel code would be to have code in the same program running at the same time on a different processor / machine / whatever you like. Tldr: JavaScript is concurrent, JavaScript is not parallel. 
Timezones are discrete, to really know when you are crossing new year line you will need something to track your longitude in real time. If T is current unix timestamp (in seconds) and L is your current longitude (in degrees) in eastern hemisphere, then it will be new year at your location when (1514764800 - T)/(12*60*60) === L/180 1514764800 is unix timestamp of new year 2018 at the Greenwich meridian btw. Therefore, new year unix timestamp can be calculated for any longitude: T = 1514764800 - L*240 Then all you need is calculate difference between current longitude new year timestamp and current timestamp and parse it into hours/mins/seconds which should be easy.
If you're a professional, then if needed, you can learn jQuery on the job. It really depends on what type of work you're doing. If you're doing web applications, then who cares? If you're adding dynamism to existing static sites, then yeah, you'll probably need to be familiar with jQuery. 
I worked with JSONAPI with an Ember Data based project and was generally pleased, but the spec project seems stalled or dead nowadays, with the stuff like bulk updates remaining in "in development" limbo. GraphQL seems to have stolen all the momentum, and is generally easier to consume (and probably about as easy to author on the server side). 
&gt;I would like to find a more effcient way to store all this data without having a database setup. It would enjoy (and why not a database) the code to be supportive of being cloned and easily ran without much if any setup. Use SQLite?
Use BSON.
If you want to achieve the following only with JS, then I can give you some suggestion. I didn't try it on my own though. You can utilize JS event loop, to do this. After reading certain number of key-value pair, push it in event loop. I am not sure, but I think some JSON viewer which supports huge dataset and build using JS use the same concept. You can take help from UI-Grid [http://ui-grid.info/] they can handle very large data in AngularJS UI. More info about JS Event loop: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop
FYI- It is particularly susceptible to XSS/CSRF. I demonstrated with a couple of PoCs where I embedded a crypto miner and also rickrolled the site by embedding a video. There are open issues in the GitHub repo of how to prevent this behavior. Just wanted to give my 2 cents from a security perspective. 
It is an awesome site though BTW. 
Yea, SQLite is basically one of the "flat file" options. The database is a single document which can simply copied around. You don't have to spin up a server for it; it's all done by your application. The performance is also surprisingly good for what it is. It's a great choice if you need something simple and hassle-free.
Good to know which version of ecmascript it refers to! I mean browser compatibility.
Triggered ...oh wait
Thanks, this is really helpful.
&gt; Array.prototype.reduceRight This is kind of an interesting one. The article discusses the use case as `reduce` + `reverse`, but previously I've used `*Right` (`forEachRight`, `mapRight`, `reduceRight`) methods in the past for a different reason. It's actually kind of an "old wive's tale" of JavaScript... It could be argued that there is a performance gain with `while` loops and *right loop* traversal methods vs. *left loop* traversal in JavaScript because `0` is *falsy*. Consider a left while loop: let i = -1; let length = arr.length; while (++i &lt; length) { /* loop code */ } And the right while loop: let i = arr.length; while (i--) { /* loop code */ } The "supposed" performance gain comes from no longer needing to compare 2 numbers, `i` and `length`. Instead, the `while` loop just evaluates the value of it's expression where `0` is inherently false. With advances in JS JIT compilers, I'm sure most of this stuff probably no longer matters and maybe loops get abstracted the same way, but you still see these techniques discussed ([1](https://stackoverflow.com/questions/1340589/are-loops-really-faster-in-reverse/1340634#1340634), [2](https://stackoverflow.com/questions/3520688/javascript-loop-performance-why-is-to-decrement-the-iterator-toward-0-faster-t)) and used. For instance, Lodash's [reduce](https://github.com/lodash/lodash/blob/6cb3460fcefe66cb96e55b82c6febd2153c992cc/.internal/arrayReduce.js#L19) &amp; [reduceRight](https://github.com/lodash/lodash/blob/6cb3460fcefe66cb96e55b82c6febd2153c992cc/.internal/arrayReduceRight.js#L17).
Soon everyone will know about labels because they're the go-to example of a little known javascript feature.
That really doesn't seem like an outlandishly large object to work with in-memory. What makes you think it's the size of the object that's causing the program to crash? For some perspective, I just whipped up a test JSON file (based on some fake data pulled from here: https://jsonplaceholder.typicode.com/photos) that's ~120MB, consisting of 600,000 objects in an array. Reading in this file and parsing the JSON took ~1600ms total, and completed without incident. I suspect I could go quite a bit bigger than this with relative ease, but I was quick-and-dirty making the object by copy-pasting in sublime text, and it was starting to chug.
Thanks for taking the time to write this. A good refresher for someone like me who hasn't written javascript in a long while. 
Further looking into, revealed my method of fs.writeFileSync(); to save the data to the disk afterwards was crashing it.. At first I was a little too hasty and assumed it was the file size taking it's toll on the JSON object. Currently I am saving with a writeStream which hopefully will not crash.. 
&gt; The answer of the SO post you linked is the proper solution: Add a timestamp or version string in the form of a GET parameter to the source attribute. We don't have Windows XP era anymore. Disregard this answer, it is not the correct solution. The correct solution would be to simply add an E-Tag header, and accepting the header-only GET requests that contain the `if-modified-since` header sent by the browser, if it is not modified your webserver should simply close the TCP connection and that's pretty much how you correctly implement caching. Just because everybody is too stupid to setup apache correctly doesn't mean the fix for the problem is the fix for the cause. Also, /u/to_fl should use the Dev Tools, disable caching there and use the long-press on reload button to get the dropdown menu containing e.g. "clear cache and hard reload" while working offline or with the `file://` protocol.
Using the comma operator with conditionals/fat arrow functions without brackets could actually be useful for debugging. There are times where I just want to pop a console log statement in there and it is a pain to add it. For example: array.map(i =&gt; i + 1); To add a console inside the callback it has to become: array.map(i =&gt; { console.log(i); return i + 1; }); Now I can just write array.map(i =&gt; (console.log(i), i + 1));
Hi /u/IchHabsDrauf, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Nice article. Love the progress bar in the sticky nav that progresses as you scroll down the page.
Thank you for your honest feedback! It is actually much appreciated. While I'm not new to blogging, I decided to try something I've never really tried before and that was to put together a seemingly controversial piece about a topic I really enjoy. I think JS, unfairly, gets a massively bad rap by a lot of people who don't really understand the things that make it such a boon for the programming world. Yes, I am passionate about JavaScript. No, I do not think it's the "best" language ever. But I will put out controversial, "immature" posts to strike up conversation. However, to your point, I have already begun another piece about this and have a few other's planned that are far more objective and fact-based (because this kind of piece wasn't intended to be that "hero" post, but moreso the "asshole" post; you know, the one that puffs up and flexes; before I dial it back and take a more serious tone). And as I continue this series, they will continue to be about the versatile and malleable nature of JavaScript. So, again, I thank you for your honest feedback and I hope you will give my future pieces a read to see the direction I am really going with all of this :)
Did not know labels were a thing in JS. That could be nifty. Also, to note, you should never run an async function without a catch. If you're going to use the void trick, write it like this: void async function() { const response = await fetch('sjdkfjkdjfd'); if(response.status != 200) throw new Error('page not found') }().catch(e =&gt; console.log(e.message)) I prefer to use a bang to execute my functions, though. It's much shorter and still triggers an evaluation: !async function() { const response = await fetch('sjdkfjkdjfd'); if(response.status != 200) throw new Error('page not found') }().catch(e =&gt; console.log(e.message)) The same can be done with any operand that triggers an evaluation on an expression (+, ~, etc). I just think the bang has less overhead since it does a simple binary operation (inversion). A plus sign (+) attempts coercion if the expression is not naturally a number, which I'm sure eats some CPU cycles.
I also like doing `[1, 2, 3].map(x =&gt; x * 2 ^ console.log(x))`
I’ve always done const val = console.log(‘debug’) || getValue() Because console.log returns undefined and it’s less keystrokes.
While labels are an OK idea in theory, using them as flow-control in any language where there are better options (functions, exception throwing, breaking apart code) leads to a term I’d hoped became a thing of the past: [Spaghetti Code](https://en.m.wikipedia.org/wiki/Spaghetti_code). Use sparingly!
Non-Mobile link: https://en.wikipedia.org/wiki/Spaghetti_code *** ^HelperBot ^v1.1 ^/r/HelperBot_ ^I ^am ^a ^bot. ^Please ^message ^/u/swim1929 ^with ^any ^feedback ^and/or ^hate. ^Counter: ^133293
If you're worrying about performance, you shouldn't use map, forEach, reduce anyway.
It's pretty decent for a loop over a matrix. You can skip a whole row without introducing new variable.
I’d improve mobile support (it’s horrendous). Checked with iOS 11 Aloha browser and Safari. 
If you're skipping `map`, `forEach`, and `reduce` for performance reasons, you're probably doing it wrong. And if you're not doing it wrong, you have transcended the mere mortal plane of /r/javascript. Seriously folks, don't ever decline to use the built-in `Array` methods "because performance". If you're *really* not using them because of performance, it means you already planned not to use them because you're using a more performant alternative from the start. A pre-allocated mutable pool for particles in a game comes to mind. 
seems you are looking to only match a certain word and not a match like greener, and you want a script to run like a bot heres the script I used above in a tampermonkey script, install tampermonkey, create a script, paste my code as the scripts code this simple example is a very irritating reddit script that will click "top" every 10 seconds, replace the reddit URL @match, with your URL, you might need to use a * for all matches with that address https://pastebin.com/raw/JLE6Tnta
Can you give an example?
&gt; You can skip a whole row without introducing new variables. But every developer who follows will introduce new bugs.
I was kind of doubting the article when it started off on labels. I've known about them for quite a while and almost never use them. Don't really use loops that much at all, array prototype methods are so much nicer. But the void and comma operators are actually really cool. Using void seems much cleaner than doing ((a) =&gt; b(a))(). And I like my ternary operator, so commas add to that. Sometimes I kind of understand why some people don't like js or webdev. There's like so many different features of JavaScript that don't necessarily fit together that well.
&gt;go-to lol
Do we really even know the performance penalty with engine optimizations throwing off most trivial experiments?
You seem confused. This is totally unrelated to this subreddit. 
Made a quick tool for breaking up single-line objects and parameter lists into multiple lines, since I was working with some rather hard-to-read code. https://dshepsis.github.io/Utilities/pages/breakLine.html A quick job, no fancy parsing (although I really should learn that...), but it does the what I needed, and I figured I'd share =)
&gt; }().catch If I read that right, the void operator makes it always returns undefined, so you would get `cannot call catch of undefined` here.
``` labelX: for (let x = 0; x &lt; 10; x++) { for (let y = 0; y &lt; 10; y++) { if (x === 7 &amp;&amp; y === 2) break labelX console.log(x, y) } } ```
If they're shitty, yes. I don't think the example I posted is too bad practice.
There's no reason to assume that it's more performant. Best case, it'd have the same performance as a for loop.
I'm arguing that using `reduceRight` for performance reasons is not good. If you care about every last ms of performance, use `for`.
Labels are a bad practice. They're a sign that your code isn't structured well.
Also: document.designMode = "on"; Very fun :)
Thank you very much!
I liked the article. My only complaint is that the function x =&gt; x * x, should be named square instead of exponential, since the function just returns the square of the input. 🙂
I honestly thought I knew everything there was to know about JS but a bunch of these were new to me, thanks!
This will truncate floating point values FYI [1.25, 2.25, 3.25].map(x =&gt; x * 2 ^ console.log(x)) // &gt; [2, 4, 6]
good bot.
Thank you calligraphic-io for voting on HelperBot\_. This bot wants to find the best and worst bots on Reddit. [You can view results here](https://goodbot-badbot.herokuapp.com/). *** ^^Even ^^if ^^I ^^don't ^^reply ^^to ^^your ^^comment, ^^I'm ^^still ^^listening ^^for ^^votes. ^^Check ^^the ^^webpage ^^to ^^see ^^if ^^your ^^vote ^^registered!
I liked the article. My only complaint is that the function n=&gt; n * n, should be named square instead of exponential, since the function just returns the square of the input. 🙂
The void is applied to the entire expression, so it's equivalent to having parens like this void (async function() { ... }().catch( ... )) rather than this (void async function() { ... }()).catch( ... )
A simple native solution is to use nodejs. As you get data write it to disk. Maybe in a simple csv format. Or if streams seems a little much, just do what the guy above said and write to disk synchronously instead saving in memory. Dm me if you decide to go the stream route and need help setting up a custom write / read stream 
You're thinking about the scope not the context. The context is the *this* variable which you can change by calling *call* on your function. The scope is what variables you have access to. According to [this](https://stackoverflow.com/questions/19065680/javascript-replace-scope-object-of-function), there isn't an easy way to change that. They basically recommend passing in all the variables you want to use. You could make the splat function a member of the p5 object, but you'd still have to prefix all your function calls with *this*. I don't really know what else you could do.
I tested it to make sure that wasn't the case. You're correct that `void` returns `undefined`, but everything to the right of the void is evaluated first, including the `catch`. You can copy paste the code in to your browser's console and try it yourself.
Ahhh, I see now. I've used breaks before in this fashion but they were always anonymous and limited to the block they're in, so I needed two for a matrix. This is incredibly handy. Thanks for sharing you're ingenious solution.
Ahhh, I see now. I've used breaks before in this fashion but they were always anonymous and limited to the block they're in, so I needed two for a matrix. This is incredibly handy. Thanks for sharing you're ingenious solution.
Thanks for this. I also checked on an iPad mini 4 with Safari and Chrome and it didn't look very bad, however wasn't a clockwork for sure. I'll have another look.
No worries, I checked on an iPhone SE so I don’t have the largest screen. Happy new year!
Indeed it does, my bad.
I think it’s awesome actually. We should be fostering a community where open source dev’s don’t feel ashamed for seeking financial support to build the tools we use/love. This kind of shaming only contributes to burn out and discouraged open source devs. 
most of the unknowns in this article i either already knew or they're really bad practice.
The biggest pitfall people run in to when using `map`, `forEach`, and `reduce` is chaining. Array(1000) .fill() .map((v, i) =&gt; i) .map(v =&gt; v * v) .reduce((memo, v) =&gt; memo + v) In the example above, you're literally iterating 1000 times for each map and reduce, when all of these steps could be accomplished in a single iteration. This is where I'll stray from the native implementations and use something like [lodash with lazy evaluation](http://filimanjaro.com/blog/2014/introducing-lazy-evaluation/).
Yea I just verified in node REPL myself.... should have verified before posting, my bad. $ node -e "void async function () {throw new Error('aw snap')}().catch(err =&gt; console.error(err))" Error: aw snap at [eval]:1:31 at [eval]:1:52 at ContextifyScript.Script.runInThisContext (vm.js:50:33) at Object.runInThisContext (vm.js:139:38) at Object.&lt;anonymous&gt; ([eval]-wrapper:6:22) at Module._compile (module.js:612:30) at evalScript (bootstrap_node.js:462:27) at startup (bootstrap_node.js:163:9) at bootstrap_node.js:608:3
I'd do this: function splat(){ this.createCanvas(640,360); this.background(255); } export default function doSplat (p5) { p5.setup = splat } Your current splat is redefining the setup function every time you call it. Depending on how many p5s you have, that could be a lot of wasted memory.
Why? There's no goto statement in js. The "break outer loop" scenario is fairly common and isn't inherently bad practice. (I can see it being more problematic to break from a labelled block, but it's not that different from an early return.)
There's no goto statement in js, so using labels can't really lead to spaghetti code in the same way as it can in C. They should be used sparingly but the "break outer loop" use case justifies their existence imo.
It’s fun to play with, but I’ve always wondered: what are some practical applications for `document.designMode`?
This is not just a javascript feature... C, C++, Java, and many other have it. Also, it affects performance so don't go crazy with it.
you magnificent bastard
Pretty great article. Updooted. You should've added bitwise operators - I had no idea these were available in JS until yesterday!
Can't wait for the pipeline operator to go mainstream.
15 years of coding js and I've yet to come across a valid use case where I needed it.
Thanks.
Good to know, thanks
Whoosh
That's a good point, thankfully it's only `O(3n)`, not `O(n^3)` though. That's not terrible in most situations.
Actually, just to be super pedantic: JavaScript is *concurrent* (can execute different parts of the program out of order; aka has the ability to do asynchronous programming), but is not *parallel* (can't execute different parts of the program **at the same time**, with e.g. threads).
The current example at http://zamjs.com/examples should be functional on a iPad. Is it?
I can enter text in the input field, but clicking the Add Comment div (why is it a div instead of a button?) does nothing.
Try it in 30 seconds.
Still nothin'.
REally?
Probably because you have ios 11. I have ios 10. Doesn't work on that. I don't know what a touchdown event is. Perhaps you meant touchstart?
The bitshift operator ~ is great for turning array indices into truthy/falsey values, or booleans: var arr = [1,2,3,4]; var is5InArray = !!~arr.indexOf(5); //false
If you really care about that, use WebAssembly and not JavaScript.
O(3n) is still O(n).
array.map(console.log) also works
Most of these should be noted and probably never used. 
Chrome's debugger does.
I liked this feature of kotlin and I'm glad JS has it too
Nope. Doesn't work. I changed it to a button and it still didn't work, which makes me think you are using some very new features of js in your library that are not supported by ios 10.1.
Except it still rarely works with source maps.
I'm aware of that.
I like the idea of using `void` for an IIFE, it looks cleaner than the parens.
That's odd, that with all popularity of functional programming there is no example of function composition made with reduceRightr
2-opt is the main example of an algorithm where I often try to refactor out labels (albeit not in JS, yet), but I always end up reverting because it makes it unnecessarily complex.
Any kind of magic control flow is bad software design. 
Please! The tilde `~` operator is the **bitwise not**! Also, just use `includes` in this case (*ES2016*). It's much more readable and makes your intent clear.
I disagree. It's not clear what that's doing. It's much better to do: arr.indexOf(5) &gt;= 0 arr.includes(5) Besides, `!!~-2` returns true which is a bit unexpected.
&gt; If they're shitty The article is literally about UNKNOWN features of the language, do not use unknown hacks and excuse is it as "the other guy is shit". Please understand that if you work in a team then it is more important that you write code that will be understood and maintainable then lit.
I'm on a phone so I can't try it, but try this in the console and see what happens document.addEventListener('keyup', e =&gt; { console.log(e.which) }); Press a couple keys to make sure you aren't throwing an error then try the print scr key and see if you get any output. (I'm guessing yes). And you're right, you'll either have to try it (or do a little research) on both Windows and Mac. Linux should be the same as Windows.
I was talking about it in a more general way, not just about labels. Besides, so you've used a label and felt like a 10x developer, later one of the shitty developers in your team didn't understand your code and now there's a bug. Do you really think the consumer will think to himself, "oh it's not fullheap, it's the shitty developer that broke the code". No, the consumer will think the entire TEAM is shit.
The PrintScreen (Code: 44) button fires on keyup but not on keydown. [Keycode for Print Screen (44 is not working) ](https://stackoverflow.com/questions/31835095/keycode-for-print-screen-44-is-not-working)
This is u/drcmda you're speaking to. Thinking up obscure corner cases to support the React/Redux religion is basically his day job.
Ironically, the Angularites said the exact same thing.
You usually only need it if your inner loops needs to break your outer loop, but there's always another way too
WYSIWYG rich media editors is its primary usecase, as well as a bunch of arcane APIs associated with design mode. I’ve had to spend a lot of time with these APIs working for a media company.
Here you will find all you need! https://github.com/vuejs/awesome-vue
As here: https://www.reddit.com/r/vuejs/
Early break/continue in a nested loop is the only thing I ever used this for -- if the programming style does not favor extraction to private functions/methods.
Here: https://www.udemy.com/vuejs-2-the-complete-guide/learn/v4/overview
Thank you. I corrected my comment.
When I write a bruteforce algorithm for an AI-like problem I label my main bruteforce loop and use `continue/break foo;` to continue/finish searching inside some inner loops. It's so convenient in this situation but I also have never used it in any other situation.
This was my thought exactly. Most useful feature in the list. 
I found these helpful [https://laracasts.com/series/learn-vue-2-step-by-step](https://laracasts.com/series/learn-vue-2-step-by-step).
The thing I like about `void` is the intent is fairly clear (though `(...)()` is arguably more clear). If I came across a bang used like this I would spend a little while wondering what this boolean was for. 
Debugger; 
I'm using default create-react-app Webpack tooling. Maybe I'll take this up with that team.
JavaScript is all about manipulating html/css. So to my mind it’s necessary to learn html/css first. Of course you can use it as a backend language but at some point it’s still going to have to produce html/css
Agreed. This tutorial is how I learned vue. 
JavaScript itself has nothing to do with HTML or CSS. It’s a programming language like any other. Browsers expose APIs to the language that allow you to manipulate HTML and CSS but even then you might find that a significant portion of your code doesn’t touch them. On the backend only sometimes will you need to generate HTML and CSS. Many never do opting for other data formats.
Node is used for a lot more than building web servers, you can certainly do a lot with JS that doesn’t involve html/css. But, yeah, if you’re doing web development (frontend or backend) than you should bite the bullet and learn at least the basics of how pages are delivered and rendered.
What would the practical applications of JavaScript be if I were to not use it along side HTML/CSS?
You can learn about 80% of what you need of html with just a couple hours of research. CSS, on the other hand, is so massive and esoteric that I doubt anyone can master all of or even most of it. Still good to know. I've been studying CSS for over a decade and I find new aspects and features every week.
Even then, it may be worth it to be verbose to make the control flow easier to read....maybe? var hasFoundTheDroid = false; for (let x = 0; (x &lt; 10 &amp;&amp; !hasFoundTheDroid); x++) { for (let y = 0; y &lt; 10; y++) { hasFoundTheDroid = someLogic(y); if (hasFoundTheDroid) { break; } console.log("Did not find droid: " + y); } 
This doesn't work because I don't have the opportunity to open the developer console in chrome. If the developer console isn't open, the statement gets ignored.
You are miss understanding. Put that where you want your code to break. It will stop there.
I do know HTML and CSS and I do use JavaScript. At this point I rarely touch HTML and CSS when I do use it, though. Much of my work with JavaScript at work is either in internal services or in the business logic of our frontend.
AJAX is AJAX, Query called or self-made code called doesn't change that. 
As "Javascript: The Good Parts" is already the title of a famous and respected commercial work, naming your work "Functional Javascript: The Good Parts" is at best very, very tacky.
I've used JavaScript to write command line tools for things like audio and image processing (via NodeJS), and for game development (via Phaser). Phaser is still technically used alongside HTML and CSS, but you can get pretty far with only about five lines of HTML boilerplate. That said, there are arguably better languages (in terms of features, performance, portability) that you could be using for all of these things. HTML and CSS are truly JavaScript's bread and butter, and you'd be doing yourself a disservice by not learning them.
It’s a little like asking whether you should learn cooking or carpentry first... learn the one that helps you make the thing you want to make!
&gt; but JavaScript is single-threaded; however, you can simulate parallel programming with asynchronous code by kicking off multiple asynchronous methods and waiting for them all to finish. I want to add that if you want real parallel programming you'd rather use webworkers, single thread async has its limit.
There are so many approaches to question like this. For example, pragmatic one: if you're not working as software developer, but you want to, and you want to work as JavaScript developer, and you're interested both in frontend and backend, then I would say learn React first, simply because there are much more React-based frontend positions than there are Node-based backend positions.
Where do you live? Do you have a spouse and kids? Do you have a savings that can least you 3-6mo? If you live somewhere with a lot of jobs, have no kids, and have a decent savings... yolo.
Thank you very much! As I understood there are some extra libraries I need to add which are not include in the main library. Is it correct?
I live in southern Orange County, I have no kids, I don’t have too large of savings though. It would be a rest experience opportunity and a looot more money. Never dealt with contract so it’s a bit scary.
I'd say learn how to make a RESTful API in node, then learn react by connecting it to your API. If you already know JS fundamentals node won't be too hard. I personally think it's best to learn by doing for a short time as it really makes concepts you learn in YDKJS a little more tangible.
Unfortunately I can't afford it and I don't think one should pay for a tutorial unless he need a full cover which I think I can learn by myself after I learn the core concept 
You didn't reply to my comment, you replied to the thread. No worries. Usually contract to hire is different than just contact. It's done so companies aren't stuck with shit workers. But there are always shady companies who don't treat people right. So, do what's best for you. Nobody can make the decision for you. Just keep your options open if you do, protect yourself first.
https://stackoverflow.com/questions/19955898/why-is-nan-nan-false
No. You only need the vue.js file. 
https://vuejs.org/v2/guide/
Find the german guy on you tube hes great
The idea of it is great. It’s almost double my current pay, but it is a startup and I fear they may be using the “contract to hire” in order to have someone help them and then drop them.
Yeah, that's one of the main reasons I asked this question. Most jobs involving Node.js that I find online require a knowledge of a frontend framework. I'm kinda split because I don't know if learning Node will make it easier to learn React or vice-versa
As of ES6 `Object.is()` fixes lot of edge cases Object.is(NaN, NaN) // --&gt; true https://stackoverflow.com/questions/30543190/object-is-vs
Well, I already know how to make frontend web apps, but a framework like React would be much more functional than jQuery or Vanilla JS, so that's the main reason I want to learn it. Other than that, I do want to know both frontend and backend so it's hard to decide
Yep. It's very possible. 
Is 0*Infinity equal to 0/0 ?
Node isn’t a backend framework though, it’s mostly just a javascript environment with some OS services, so you’re still comparing apples to oranges. What do you want to build?
React benefits from a lot of tooling provided by node. Or, rather, provided to node by other packages. I'd learn node first.
&gt; the obfuscated code is 15-80% slower Just no. Thanks for playing.
At work I’m forced to use Angular 1.x, but I’ve been using vue for most of my personal projects. It’s pretty easy to learn coming from Angular; the lead dev worked on Angular before coming up with vue, and it’s clear that he took the good parts from angular. It’s kind of an “angularized” React, without the jsx. To scale, you can use Vuex which makes state management very easy. Bottom line: since you already know angular 1.x, learning Vue will be a breeze. 
Floating point numbers are often specified this way in many languages. Also, in math, indefinite/undefined values are often incomperables. For more fun, check out -0. 
Yeah I just meant it'll be more fulfilling to have a RESTful API not connected to the front then to have a react app not connected to an API. Good luck though. Sounds like you're in a good spot to start. I know I didn't know many fundamentals before I dove in, and as expected it made things way harder :p
Of course it can start to get messy. For iterating multidimensional arrays it's probably the easiest and best performing solution though. Every feature can become obnoxious if abused. I personally think the label approach is a lot easier to follow in this minimal example. It may not be a feature every developer knows, but it's very easy to learn.
Depending on what IDE you are using, some of them allow you to run the tests through the IDE and you can place you breakpoints right in the code. I personally use JetBrains products and i do this anytime i need to debug a test.
WebAssembly is actually slow for small arrays. If you mine tons of data, multiple workers or WebAssembly (or even WebGL) can be amazing.
Thanks
Thanks 
Thanks for the explanation
The goals of obfuscation is often to hide the purpose of a certain script. Malware droppers written in JavaScript are often heavily obfuscated. The priority of that kind of code is to be obfuscated, not necessarily run fast.
Yep, but this can make reverse engineering as hard as possible for third party peoples.
...or it could just be a homage, and you need to get a life.
Right, but `debugger` statements only halt the code if the dev tools are open.
Are you learning JS to build something with a UI? If so, you will need that html/css to do that. Learning the knowledge and skills to effectively use JS have nothing to do with html/css, though. JS is a general purpose language with an emphasis on ease of use (syntactically) and leveraging a small, flexible set of core features. This makes it popular in webdev, but also just popular in general. You can use it to make servers, crunch data, write packages for other devs, script web pages, make games, etc. Honestly, to learn js, Id make NPM packages. Make a state store, assertion library, stream library, etc
What about boilerplate code? Is there way around it?
I want to be able to build whatever the job given to me tells me to. Other than that, I am currently making a portfolio for my small freelancing company, and it would really benefit me to make a blog with updates about what i'm learning, so I could manage users and databases with Node. I'm barely scratching the surface of Node so I'm not too informed, but as far as the answers I got in this thread, I'm guessing that learning Node will benefit me more
Yeah, I love Vue from tutorials I have seen. Only issue that I see is if I am missing out on future by sticking to jQuery and Angular family
Which part? With React, use create react app, nearly no boilerplate at all. For redux and flux, I'd say don't worry about them yet. You'll know when you need them and you can assess the boilerplate at the time. Either way, it'll be less code than doing the same thing in angular.
I've switched to contracting couple years ago an it was the best move I could have done. I get much more take home pay and I work remotely when it suits me. I still pull in 40-50 hrs a week, but I choose the time when I work. Sure there was one shady company which refused to pay me the last invoice, but that can be easily avoided if you just invoice once per week instead of a month.
Ok, i'm gonna make a blog post about the thing and am going to post the link.
Create-React-App is not "production ready" in opinion of managment. Deep level access is requirement. Throwing data across components in Tree fashion will be unacceptable as well. So, either not doing SPA and using React as view only (there are other libraries for that existing), or dealing with Redux / Flux and analogies. Even if boilerplate-free state managment would exist, the next problem is JSX. Honestly, Backbone + React looks better for me :)
if you saw the above code, how would you look that up? I mean if I saw that, I can see how it works... but like everything else in JS it looks like just another key/value object.
I'd look up `break` on MDN since it has a syntax that I don't recognize. :)
Vue is just Vue. But if you want state management, use Vuex. This is the officially developed tool for that. For routing, use Vue Router, which is also an official library from the Vue team. 
Something like this is meant to be used on code that is run once, or is already fast enough that doubling its execution time isn't really noticeable. You'd never want to run libraries or performance limited code through it. That said I've always been skeptical of obfuscation's usefulness. Sure it will deter someone digging into your code out of curiosity or for fun, but it's not going to stop anyone who *really* wants to pick it apart. I wouldn't be surprised if it were possible to largely automate the de-obfuscation process either.
I'm not sure if it's true, but I read somewhere once (can't find the source) that NaN (or "Not a Number") is not equal to itself because the value tells you what it is not, not what it is. So, the reasoning is you can't test two things for equality if you only know what they aren't.
Agreed. Other than Maxmillian, the next best resource that's free is the actual Vue documentation. You won't find much else that goes to great length to explain Vue. That said, the Udemy course is totally worth the 10 bucks.
It really doesn't at all. You can easily run this through something like Prepack and it could serialize the values back to something readable. In my opinion, there's no real benefit to obfuscate any JS on the web. If you have business logic you don't want to expose to the public – don't expose it on the client side.
that answers my questions -- thank you!!
Sure, provide a big, shiny analysis target and annoy your victims. That'll work for a whole week or so.
That's not 100% true. I've got lambda jobs outputting json data that's stored in elasticsearch for other apps to use. No UI. No html. No css. We've got Node scripts sitting in Chronos that also output json data that's stored in redis for other apps to use. We've got apis written in node that are called from within spark jobs as well. JavaScript can be all backend these days. If you're writing UI you need to know html / css.
sure. You can chat with me in discord: https://discord.gg/frNetGE I’m signed as @alex2401 there. Ping me!
You like RxJS very much but prefer Angularjs over Angular? How? Angular is all about Observables.
If you're young and have no dependants, I'd say go for it except that I think 1-3 months is way too short. If you can negotiate to a 6 month contract, definitely go for it.
You don't have large servings, but if the contract doubles your pay, as you written, maybe the risk is still acceptable? After 3 months of double-pay, it should be possible for you to save for 3 months worth of living, shouldn't it? Nobody here can make this decision for you, though.
I have some ideas, how to break prepack
That's good. If you can find ways to break Prepack – please could you also let us know by creating an issue on the Github repo? Any things that break Prepack are issues/bugs that we should fix – as Prepack should adhere to the JS spec when evaluating the input AST.
&gt; Throwing data across components in tree fashion Sorry what
You can step into the functions to find the bug.
&gt; You can learn about 80% of what you need of html with just a couple hours of research. I wish this attitude wasn't so widespread. This is how you get div-itis. OP, _please_ spend more than a couple of hours learning how to write markup.
Then it seems obvious you should learn Node next. Knowing a server side technology will turn you into a full stack developer which will dramatically increase the pool of work you can take on. Besides, learning react within the context of a client-server application will be more fruitful.
Yes correct. I’m just afraid of such a short contract and their excuse is that they don’t have an HR so contract is the only option.
I would be cautious. "We're hiring you for 1-3 months because we don't have an HR team in place yet" is a red flag to me. Few projects of substance can get finished in one month and it's weird they want an HR department, but don't have one in place yet but are hiring developers immediately for such a short term. If you decide to take it be prepared to work one month at the agreed upon payment and then be out. If one month turns into three and three turns into employment that's great but don't bet on anything beyond except exactly what is agreed to. Promises are free.
It’s $11 right now. I used it as well. Good starter, but it’s a little slow. After the tutorial I used a prebuilt Vue UI template and converted it to TypeScript. I actually did a React tutorial first and it really put into perspective what others say about Vue just getting out of your way. Its phenomenal. 
Legit proprietary business logic can be kept server side. This thing is good for just one purpose: running code on a user's machine that the user doesn't want run. Awful.
I agree, they keep throwing benefits and all that out there when the HR team is setup but it’s very strange to me. I’m waiting on their full offer at the moment. 
Part of my point is I don't think I need the slow tutorial. This is not my first frontend framework so I know my way around
In that case, RTFM.
Yeah, this was my first time with frontend frameworks so it was really helpful. Checkout Vue-cli and the prebuilt templates. The official Vue docs are great. 
Yes, this is correct. It's not even related to JavaScript but to: a. simple formal logic, and b. the IEEE-754 specification. Imagine you have some things. Thing A is not yellow. Thing F is also not yellow. Simple logic tells us we just can't deduce that A === F; it would be an invalid deduction. Being that so, the specification _has_ no other option but to say that comparing two NaN values cannot return `true`. You could, if you wanted to nitpick, also not return `false`, because you can't actually discard that they _might_ be equal, but then you'd just mess up comparison badly, making things substantially more complex for everyone.
It seems that the rest of this thread shares your opinion, so that's what I'll do
Ah I see what you are saying. Can you just dump the variables or something? There should be logs somewhere for the test run.
It's fun, but prepack already breaking with enabled self defending. Try to compile this with prepack: https://gist.github.com/sanex3339/9f7742d17945da340c33d74487cc0a9b
Never had such issues with Angular...
With this logic you get sites likes Facebook, which are super slow even on top end desktop hardware...
And huge in terms of file size.
&gt; My question is rather if React will stay as the only player on the market React has only been growing, and it's been making larger and larger leaps. The reason is simple as well: it is different, radical maybe, at the same time very, very simple without any complacency regarding the web. That has allowed it to go beyond the browser. React it is not a web framework, learn it and you can deploy for the web, native mobile/desktop, VR, whatever system you want. It is unique in that aspect. Imagine being able to use the same semantics everywhere, yet the [eco system can be applied](https://github.com/gaearon/react-blessed-hot-motion). The question isn't if there's a web framework that will overtake it. That won't happen unless it brings something new. It rather looks like React will simply be everywhere. If you look around this is already in progress.
I would recommend freecodecamp. it's simply amazing
With *just* React? There's not so much boilerplate code: * Babel config (like 2 lines) * Probably webpack config, but it's not actually strictly necessary * Controlled components * Occasional boilerplate-ish use of lifecycle methods I want to say that's about it. Obviously Redux introduces more boilerplate, but that's Redux, not React. You can (and should!) build React apps without Redux or another state management library. When your app is big enough to really "need" Redux, it should feel like a relief to use it, not like extra work.
This one really helped me get Vue: [https://coligo.io/markdown-editor-vuejs/](https://coligo.io/markdown-editor-vuejs/) And as others have said here, unlike Angular there isn't fundamental differences between Vue 1 and 2.
Line 28: 'Math.random' --&gt; 'Math.random()'
&gt; Concepts: Pure Functions &gt; class Apple { // ... // fall depends on this.gravity, and this.y, which can change. // this is the right equation, I think... // what happens if I call this twice? fall(dt) { this.y += this.gravity * dt } // ... &gt; // look at this nice function I found on NPM! // I guess my function was totally wrong function doPhysics(a, v0, dt) { return v0*dt + (a*dt^2)/2 } Since the functional crowd has been strongly anti-class, I just want to clarify -- despite the implication of these examples -- that it's just as easy for class methods to be pure, and just as easy for plain functions to cause side effects. // A plain function that mutates arguments function doPhysics(apple, dt) { apple.y += apple.gravity * dt; } // A class with only pure methods // FYI the class as a whole is a weird and awkward example of a class, // but the point here is simply that classes can be pure class Apple { constructor(gravity) { this.y = 0 this.gravity = -9.8 this.velocity = 0 } clone(other) { return Object.assign(new Apple(), other); } fall(dt) { const copy = this.clone(); copy.y += copy.gravity * dt; return copy; } } Favoring pure functions is a good thing, just don't think that favoring pure functions and avoiding classes are the same thing. They're not. &gt; Concepts: Composition &gt; excitedly(greet(name)) &gt; Instead of Inheritance Also needs clarifying is that there are at least a couple kinds of composition, such as [function composition](https://en.wikipedia.org/wiki/Function_composition_(computer_science)) and [object composition](https://en.wikipedia.org/wiki/Object_composition), and it looks like this article is mixing the two. This article's code examples are demonstrations of function composition, but when we talk about instead of inheritance, we're actually talking about object composition.
Learning divs and classes takes about two minutes. The remaining hours are for the rest of html's primary features.
So data flow component to component up and down the tree by default?
I recently had some battles with the webpack manifest and asynchronously loading my initial app chunks so I could dynamically load a different version of my app with something like a url param. I should also write an article about it!
What kind of job do you want to get? If you want a server/backend/full stack kind of job, then learn a backend stack. If you want a front end/mobile app job, then learn react (+native.) You’ll face more competetion from formally trained computer science engineers on the back end, so there will be a lot more to learn to be competetive.
This makes so much more sense after reading your comment.
If you trust them, go for it. I was hired the same way as lead UI Engineer and it's what we usually do when hiring new engineers to avoid bad apples. I even had better offers for full time gigs, but I chose this because I believed in the product idea and the team behind it, and they were very well funded and transparent about the books.
What about form validation?
I did one of these a couple years ago too. Physics programming can be a lot of fun. http://nephyst.github.io/physics/planets.html
Object.is(NaN, NaN); // true What would you think about a proposal that converts ==== into Object.is ?
LoL! What a shame... Thanks!
There seems to be something in the spec requiring that NaN is not considered equal to anything. If you want to test for NaN, use [Number.isNaN().](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN)
Vue is the new Angular
Just how long or complex are your lines of this is an issue?
Considering it's at stage 1 it might never actually become standard, but you can accomplish the same thing using lodash's compose function if you don't feel like using Babel for it
Yeah, but my question is what jobs can I get with the skills I currently have
I wouldn't be THAT strongly against it, but I'd say that having all those `=`, `==`, `!=`, `===`, `!==`, `====`, `!===` operators in the language would be pretty confusing.
Let's compare two variables! `B====D`
Again, this is how we get tons and tons of sites with absolutely terrible markup. HTML might be the easiest of the three, but there is absolutely no justification for not spending time to learn how to write proper, clean, semantic markup. And you're not going to do that in two hours.
I really enjoyed reading this! Finally a short and to the point article 🙂 
[wat](https://www.destroyallsoftware.com/talks/wat) watch out for the quirks!
The answer to your question is "no". I spend most of my professional time in JS and managed to go without touching HTML or CSS for a contagious stretch of about 2 years*. My advice though, is that you do learn HTML and CSS. They may seem daunting at first but they are actually quite easy to master compared to Javascript and most of the ways in which you will apply your Javascript knowledge is going to require a fundamental understanding of HTML and CSS. * I consider this mostly incidental and suspect this is a rare occurrence amongst others like myself. I wasn't avoiding HTML or CSS, the thing I was building just didn't need those particular skills.
The documentation on the Vue JS website is amazing, you can start with that. vuejs.org
Bad bot
Bad Meatbag
Thanks for the advice! I’ve been watching a few videos, and I’ve learned the basics of HTML and CSS in about an hour. They are actually much easier to learn than I thought!
Only if you want to do anything with web pages...
Would you want parseInt("u wot") === parseInt("m8"); to return true?
I suggest looking into async/await. Saves you from writing the following line over and over. if (error) return res.status(400).json(error)
Yup. A concrete example I like to give is one like this: 1. A table is not a chair 2. A cupboard is not a chair 3. Should table = cupboard because they're both not a chair?
Thanks for the suggestion :) I'm still learning Node (and JavaScript in general) myself, and I found that the best way to learn something is trying to teach it, so I might have done some horrendous stuff in there haha
So why isn’t the result undefined?
Can you imagine if `NaN === NaN` returned undefined.... *shudders*
I assume because nothing is undefined.
You start off by saying that this part of JavaScript is good because it follow formal logic, but then conclude by saying that it is good because it doesn't follow formal logic.
You are constantly repeating yourself here: api.store(models.User, models.Budget, models.Client, app.get('budgetsecret'))` Within your your `client.js`, just import the models directly: const { User, Budget, Client } = require('@BudgetManager/app/setup') Which simplifies your request handler: const { User, Budget, Client } = require('@BudgetManager/app/setup') api.store = (req, res) =&gt; { if (Token) { User.findOne({ _id: req.query.user_id }, (error, user) =&gt; { if (error) res.status(400).json(error); if (user) { const client = new Client({ user_id: req.query.user_id, name: req.body.name, email: req.body.email, phone: req.body.phone, }); client.save(error =&gt; { if (error) return res.status(400).json(error); res.status(200).json({ success: true, message: "Client registration successful" }); }) } else { res.status(400).json({ success: false, message: "Invalid client" }) } }) } else return res.status(403).send({ success: false, message: 'Unauthorized' }); } But overall, to me, your codebase is spaghetti. It could benefit tremendously by using middleware, async/await, more ES2015 features, and more: const { User, Budget, Client } = require('@BudgetManager/app/setup') api.store = async (req, res) =&gt; { const { name, email, phone } = req.body const { user_id } = req.query const user = await User.findOne(user_id).exec() if (!user) { throw new Error('Invalid client.') } await new Client({ user_id, name, email, phone }).save(); res.json({ success: true, message: "Client registration successful" }) } 
By definition, `NaN` is never equal to anything, not even `NaN`.
Interested
If you wanted to debug this yourself, In a terminal, node --inspect-brk jogo.js Now load up chrome and visit `about://inspect` click the link for your process. Now you can step through lines of code and set breakpoints to see what is going on.
Wow! This is awesome! Your code looks so clean, thank you a lot for the example, I'll be looking into those :)
Is it bad that because of star wars I know V is 5? 
Vs code is pretty popular but that’s an ide. VIM, neoVIM or emacs are nice basic text editors. Nanog simpler to learn. Some flavor of VIM almost always comes preinstalled in most operating systems.
If you're on a laptop or desktop, try zooming in or out and it'll disrupt the orbits in a fun way.
This is only true if you use the comment based syntax of Flow. Typescript has a similar solution with the same advantage.
Do you remember his name maybe?
I believe the "cool kids" are using any text editor (vscode, sublime, atom, whatever) and using a browser with hot-reloading for their WYSIWYG part. Webpack is pretty nice for this. The all-in-one applications are definitely out of style right now.
If what you're looking for is a tool to write copy text with standard formatting features and have it spit out HTML, [stackedit](https://stackedit.io/app) may be appropriate. Click the top right menu button and there's an export to HTML button.
It's in the IEEE 754 spec. NaN never equals NaN in any floating point spec compliant languages. It's one of those bits of knowledge that's supposed to be transferable from language to language.
I didn't actually say it's "good". What I said, basically, is that there are some reasons for it to be the way it is. Returning `true` would be **strongly** against formal logic. Returning something other than `false` would be extremely costly. Sometimes it's not as simple as being "good", but more about being a fair compromise.
You should add gravity to the other planets so they interact with each other. 
I don’t know about chrome but firefox can record javascript calls in the dev window. You can click on the event to find the source and line number of the code.
So that the equality comparison operator always produce a boolean.
Oh, right. Duh. 
So it's more like "beginner" than "intermediate". I'd say: give Upwork a try. Getting decent reputation will take some time, but it's absolutely doable. And participate in open-source projects can be great for you. Try fixing bugs in projects you use. On the other hand please do not waste time creating one more starter kit for react. That might give you some ego boost but wouldn't do anything in long term perspective. :)
Can I have a link of what you are talking about?
Nice! I made something similar but on larger scale.. about 20k particles/planets/stars whatever you like to call them, and some kind of fake dark matter effect for more realistic velocity curve. http://magwo.github.io/fullofstars/
This article is trash. The content is simply lifted from [this DZone ref-card](https://dzone.com/refcardz/design-patterns). but even worse, author messed up and copied the image for Memento, but the text for Command.
No thanks
Like youtube and vimeo? or the fuck movies?
wow, yours is a lot cooler. Totally admirable! &gt; Physics programming can be a lot of fun. true
If you're using react, I'd suggest you to look at draft.js
https://javascript.info This website does a great job on explaining lots of JS concepts, its quirks, has a comment section where you can ask questions, discuss things and is open source. 
Once again, a guide by a guy who doesn't know how to write high quality code of the language in the guide. Like, what's even the point? 
Eh, seems like it would fit in well with an existing Rails app (and like it was designed for exactly that, what with the turbolinks mention). Its
I've heard good things about [Quill](https://github.com/quilljs/quill). 
I'd suggest to learn how to write code the proper way, learn different approaches and algorithms. React today is like jQuery yesterday - everyone knows it, but no one can write good code. Framework is just a high level tool. You need to know why people use different nails for different materials and jobs, not how to use hammer from your favourite hammer maker. So I'd argue start by writing apps in vanilla js, invent some wheels, learn why people made their wheels one way or another and only then start focusing on React or whatever.
At first I was skeptical about this (`call('f', obj)` instead of `(x) =&gt; x.f()`? wow, such fp), but then found out it's huge and has a lot of useful ones too. May be practical to copypaste some of them when you don't want to install stuff like lodash. Some of them are crap though, like `const filterNonUnique = arr =&gt; arr.filter(i =&gt; arr.indexOf(i) === arr.lastIndexOf(i));`, this obviously should be done using Set in `O(n log n)`.
But those don't just fit into a Rails app. Say you have an existing application, you then need to switch to an API (probably rewriting tons of business logic on the way) and rewrite your ERB templates as well since you can't use them. Again, from the mention of turbolinks and augmenting your existing HTML, this is _obviously_ supposed to be a relatively painless progression from CoffeeScript to the new Rails 5.1+ asset pipeline. Also it's highly debatable that those frameworks are "better". Not everyone wants to build a site with JavaScript hijacking literally everything including things browsers themselves have handled much better for years (like navigation).
Here are a couple of things to try: 1. Walk the dom. I needed this skill once in a niche job so I would send job candidates an HTML page from the company site and tell them to write some code to change the background of a paragraph to red. This paragraph had no class or id attribute. You had to target that element specifically by navigating to it from its ancestors and siblings. Out of 22 candidates only 4 or 5 people could do this, but those few candidates found it stupid simple. 2. Convert an extremely DOM heavy JavaScript file to TypeScript. TypeScript comes with a lot of definitions for the DOM in its lib.dom.d.ts file.
I don't know, it seems slightly arrogant to expect every framework to be tailored to you. This is not a SPA framework. It's a JS framework designed primarily to enhance Rails apps, written by the Rails team, and obviously meant for Rails devs. I mean, you might as well go into a discussion about react-router and start talking about Vue. (Also apps that use the standard Rails architecture are hardly 'legacy'. Again, not everyone wants SPA + API.)
I expect every framework to be tailored for a developer. Is that arrogant? I don't think so.
Oops, good point.
We have a massive frontend and also take this approach. It probably not the most efficient in terms of bits over the wire, but in terms of supporting legacy systems while adding new feature that will one day be legacy it's great
Hackernoon.com is one of the daily source I am following and the content thats published there is quite amazing. Expanded my view in folds. 
You can, but then you would be cluttering your codebase with `try-catch` everywhere. Use middleware to handle errors. You can certainly use `try-catch` for specific, recoverable errors.
Would Set not be `O(n)`? Insertion is order 1, and must be done n times. Removal is the same.