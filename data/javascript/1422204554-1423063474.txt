&gt; saving image does nothing... Because it's not implemented in this snippet from the full tutorial, see the link in the code.
This is just a scenario. In this scenario, the server should be making the API calls, not the users. So it *is* very achievable to stay within those limits without cheating **if** the calls are made server side. My question is how do you approach the task from a development point of view. What's your backend stack. How do you cache your calls? Do you store server side JSON files (like Base10Propaganda) or put them in a database? Do you set up a cron job for grabbing the latest data routinely? 
d'oh! thanks!... Now after following that link (http://www.attuts.com/webcam-and-video-using-html5-send-video-image-to-server/) It mentions a **jsfiddle WITH the pseudo-saving-function:** http://jsfiddle.net/attuts/svcf41o6/2/
Interesting! I never considered actual JSON files. Do you just timestamp them and clear out the old files once they are redundant?
Ah interesting. I didn't realize such a voting system was included. I've also build a multiplayer engine, it didn't have full decentralization, but it could handle events that were generated in the passed. I took the approach of keeping x number of game states and when an event in the past is received it would take the state at the time of the event, apply the event and simulate all successor states again. The use of command pattern is cool. It trades memory for processing power. You also don't have the problem of events being too old to process, however I'd guess you also put a limit on the age of them as well. I find this interesting. I rarely come across multiplayer libraries, so this is great. More information is greatly appreciated.
&gt; This is just a scenario. In this scenario, the server should be making the API calls, not the users. So it is very achievable to stay within those limits without cheating if the calls are made server side. If you can get the users to make the anonymous api calls via javascript, I'd say this is the most efficient way to get past the limit. &gt; My question is how do you approach the task from a development point of view. I talk with the client/employer/whomever and work within their constraints. I consider [code maintainability](http://www.advogato.org/article/258.html) the highest (unless I will never, ever work with them ever again and my name will not be on it). The next highest is [programming complexity](http://en.wikipedia.org/wiki/Programming_complexity) (unless it's a very tiny program that will not grow any further). Next would be picking the programming language that would be best suited (unless a constraint dictates a specific one/list) and that I am most familiar with. &gt; What's your backend stack? If I have a choice, then the most familiar programming language that isn't completely shit for the job. &gt; How do you cache your calls? I recommend [Redis](http://redis.io/clients), but there are many, many different ways to cache things. &gt; Do you store server side JSON files (like Base10Propaganda) or put them in a database? Depending on how much data is given from each response, I would either cache the entire call or just the specific objects that were found within the response. &gt; Do you set up a cron job for grabbing the latest data routinely? Only if I need to have all of the data and have it being updated regularly. Also if I would need to do calculations or searching through the data, definitely.
Squares are a type of rectangle.
it's funny you say that. the getUserMedia API was actually designed around mobile (think of QR Code scanning etc...) and Opera Mobile 12 [Feb 2012] was to my knowledge the 1st browser to integrate it.
.focus specifically is the *method* that causes an element to gain focus (change the value of document.activeElement)
Overall, you should switch to a new JS framework every 1-3 months (depending on the size of your codebase). Otherwise you are in danger of being left behind. 
Thanks for the replies, I understand now
I for one want to say thank you for creating another JavaScript framework. I agree with everybody else that we have far too many, but that's because all of them have flaws. And not insignificant flaws - they introduce real weaknesses to web apps. I think we need to keep suffering through this ridiculous churn rate until somebody finds the right answer. So thank you for being part of the progress!
jquery can be skipped completely. Better use shims for older browsers. Also I find the Ajax support one of the worst part of jquery.
Hi /u/mkorfmann, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Thank-you. This will help a lot.
No classes, no problem! Just have some criteria to match with (or look for). Again, I'm not completely sure what you actually want. I do not understand your description fully. $("a").each(function(idx, link) { var inner = link.html(); if ( inner.match(/"|'/g) ) { // Has quote-mark ? var markdown = '[' + inner + '](' + link.attr('href') + ')'; // Do something with it } });
*writing
I actually think this line of thinking is great. It is curiosity after all that we encourage when learning!
It's an implementation, so it's dependent on the individual JavaScript engine. The code might be written in JavaScript (some engines implement high level things in JS), or it might be compiled assembler. In V8, array.length is just a property against the object that gets updated by the individual array methods. Here's the implementation of Array.prototype.pop(): // Removes the last element from the array and returns it. See // ECMA-262, section 15.4.4.6. function ArrayPop() { CHECK_OBJECT_COERCIBLE(this, "Array.prototype.pop"); var array = TO_OBJECT_INLINE(this); var n = TO_UINT32(array.length); if (n == 0) { array.length = n; return; } if (%IsObserved(array)) return ObservedArrayPop.call(array, n); n--; var value = array[n]; Delete(array, ToName(n), true); array.length = n; return value; } You can see these implementations at https://github.com/v8/v8/blob/master/src/array.js. Be aware that not all JavaScript engines will necessarily work this way. As for setting the length, I haven't looked into it, but I would guess that these calls ultimately go through Vector's truncate() method, which actually just sets the integer length_, which in turn seems to change the behaviour of iteration. I'm not sure how truncated elements get garbage collected / deallocated. The code for vector (a linked list, or dynamic array) is in [vector.h](https://github.com/v8/v8/blob/52be7ebac1cf6bb1f40e0e120dfe15e9228f7766/src/vector.h). Hope that's some help. 
Well good thing they have a stud investor
Hello again! And sorry for the late answer, but i actually managed to create the game, in a responsible way! I've read a lot of the docs about jQuery, and i actually get a feeling for it now, over JS! Here you can see the finished product, i know there is a few bugs, but haven't gotten the time to fix it before deadline. http://jsfiddle.net/q18gxrs6/ Thanks for the help aswell! ;)
looks a lot better than in the beginning :) As a general tip, try to leave out the comments. They are just confusing in this amount. If you need to comment something, comment the function in the beginning, but not inline. A good read is the book ["Clean Code"](https://www.ufm.edu/images/0/04/Clean_Code.pdf) If you have any questions for other projects, feel free to PM me. I might be able to help :)
Stop using Safari: http://caniuse.com/#feat=stream
Exactly, I know the feeling :) My worry was that this thread would turn into exactly what it has, where people name-check every library they can. 
Lorem is perfect for mockups (other than action text, dates, personal data). What's your needed use?
Everything seems OK here. Sound like a ISP (or a connection) problem to me. Maybe some of the routes are broken. Normally these sites never go down (and rarely have any problems) because they are hosted on a CDN. Maybe unrelated, but have you checked your computer for spyware and/or viruses ? They can certainly mess up things in your browser. --- But, yeah. It has been down before, and will probably again ;) http://www.zdnet.com/article/microsofts-ajax-cdn-tumbles-worldwide/
Cool, this is exactly what I was looking for, thanks! I'll check out the V8 source code. 
Have to be specific about 'similar issues': users are just reporting that websites are not working.
lorem in exnglish, so in my mockups there's no latin on the page...
I read that as "Writin', testin' and publishin' javascript modules"
Are we taking about a single endpoint for the local events API?
Just for the record; A little while ago I resolved this problem. Now the validator returns an array of errors with 'types' (The name of the validator) and looks like this. { "name.last": [ { "type": "length", "value": "world", "args": [ 6 ] } ], } Now it's possible to map the arguments and validator name to a meaningful string in any language. Thanks again for your feedback.
You got the right attitude man
Gah. Sure enough, that was it. Thanks!
what's the issue with having latin on the page?
Yeah, that seems like a poor choice of naming. I'd think composer.js would be a port of Composer or something like that.
The idea behind lorem is that it doesn't distract from what you're actually trying to showcase, that being the design/UX. People have a hard time not immediately focusing on the writing if it's comprehensible. 
Are you hosting that code from a web server? Some browsers disallow XHR from local files.
Yep, it's on a web server, and it seems to come and go. For now, it's gone. :/ Not sure what's triggering it. Looks like sometimes it tries to use a C:\\FILE instead of the location on the server. 
TBH they were released near the same time (it's not like "Composer" was picked years after the PHP project had taken root) and the goals are different enough that I don't think a name change is warranted.
I use a service called JSON generator: http://www.json-generator.com/. I swear by it. It also gives you a CORS enabled endpoint so you can use real ajax in your code to simulate a client/server environment. Just switch the endpoint when you need to pull production data and everything is guaranteed to work, at least, on the frontend that is ;-)
K, so basically there's a 'header' and a 'footer' object. Each object has its own XML because it may, or may not be loaded based on whether the user chooses to see them. Each object could get a "widget" in it. So when the "widget" is spawned, it needs to know IF the header is functional, or IF the footer is, so it can know which XML to load. Which actually, I may have just answered my own question. Perhaps just have the "widgets" phone home to a "global" object that gives them the states of which objects they need to "embed" themselves in?
Try using an absolute path instead of relative to current folder. EcobarRoot or whatever is scungy - that's not really an effing uri. ;-)
Reproduce the code in jsfiddle so we can see whqt you're doing. 
[MDN](https://developer.mozilla.org/en-US/) is a much better alternative to W3. Most of their material covers everything from the super basic to super advanced use cases everything js, CSS, and HTML related. Added benefit that Mozilla is on the W3C standards committee and employs or employed a good portion of the guys who created these technologies.
I put jQuery in the list mainly because it is so widely used. Unless OP gets some crazy job where he never has to touch anyone else's code, he will run into jQuery. Plus it has a pretty low learning curve, which can be helpful when learning a new language. 
Sweet! I was thinking about building one of these without an angular dependency too, maybe I don't have to now 
:)
Thans alot, i do also feel a bit proud of the result! The assignment of the project was to keep the comments this way. I might also start with my exam this week, and i'm looking forward doing it aswell, in jQuery! ;)
You wanted a tldr. 
Give it a go and see if that helps.
I did. You didn't get it. Sorry. You're on your own.
Fair enough 
Mostly as a fun way to learn programming. But the general idea is that you can practice healing for hard bosses for example, for me healing is like a addicting mini-game within the game.
1- no a meteor blob: the entire content of posts within that website, revolutionary isn't it? - HTML5 local DBs are genius, unscrupulous webmasters are not, and it's just the begining of abuses starting. 1.1- "It's 2015, a phone can process what a supercomputer once did." I'm talking about processing demand that's increasing at the same pace, and always manage to find the bottleneck, now you imagine everybody visiting your site will have some sort of galaxy note 10.2.5.18 with 32 gigs of ram? you're wrong, and that's my point here. 2- Virus because bio or code that replicates from host to host is called a virus IRL/IVL, and that's a fair definition 3- Google is " in beta" since this summer, for " evalutaing script-driven content " and what they are evaluating you can't know, everything you know it's they'll support AngularJS, should I say " period "? Yes you could bet on that. So, again, my point stills. Now if your point was " google is the unique SE in the world " you're already lost in space. "resistance is futile, all your base are belong to me " young padawan, see? I don't brag I argument.
Dip your toe in the water before jumping in.
2015 and no mention of generators
The bluebird example is a little strange. Instead of `promisifyAll` the process functions should just be written to work with promises. More typically, promises allow you to start abstracting your code into different methods that "pass the buck" and return promises themselves. e.g. I might have written it like so: app.post('/process-file', function(req, res) { var input = 'input.txt' var output = 'output.txt' doStuff(input, output) .then(data =&gt; { //do something on success }) .catch(err =&gt; { //do something on failure }) }) function doStuff(input, output) { return fs.readFileAsync(input) .then(file =&gt; process(file)) .then(data =&gt; fs.writeFileAsync(output, data)) } function process(file) { return Promise.all([ process1, process2, process3 ]) } 
Most flows can be handled with events as well.
Hi /u/mfocaraccio, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Looking up some docs (I'm new-ish to Node, but not JS Dev) http://nodejs.org/docs/v0.4.11/api/http.html#http.request it seems like if you use the http module and make a web request, there are multiple callbacks, and one is for error. E.g.: http.get(options, function(res) { console.log("Got response: " + res.statusCode); }).on('error', function(e) { //http.get(options.............. }); So if the call fails, then you can try the next server. This is assuming the call fails (a return code other than 2XX) which is different to a success but with bad data (I don't know if you need to think of that scenario)
I don't know why I put an [i] in there haha, it is supposed to be a 1. Thanks for the help
Yeah, I don't think events are really an appropriate structure for managing flow within a single function–of course, it might work if you have one-to-many branches going on a lot, but for a linear flow it seems like it'd be incredibly verbose. 
Ugggg... I can't get over that syntax. They reimplemented Angular directives as a build step that generates React components, and they still force you to wrap everything in quotes. It's so un-idiomorphic! They just made it way harder for any typical React developer to be able to follow and contribute to their code, without an appreciable gain. They thought it was backwards to map over the list before rendering it, but you can easily fix that without all their added complexity: &lt;ul&gt; { this.props.items.map( item =&gt; &lt;li&gt; itemText &lt;/li&gt; ) } &lt;/ul&gt; Separately, if they want to announce a project, cool, but why bury the lede in a largely unrelated shootout?
...now your editor can't offer you any useful completions because you split the implementation of a single component into multiple files.
Things are working today and it was indeed MSFT ajax cdn which now returns correctly: curl 'http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.1.min.js' -H 'Accept: */*' -H 'Referer: http://support2.microsoft.com/kb/2881688' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.91 Safari/537.36' --compressed /*! * jQuery JavaScript Library v1.5.1 * http://jquery.com/ * * Copyright 2011, John Resig * Dual licensed under the MIT or GPL Version 2 licenses. * http://jquery.org/license * * Includes Sizzle.js * http://sizzlejs.com/ * Copyright 2011, The Dojo Foundation * Released under the MIT, BSD, and GPL Licenses. * * Date: Wed Feb 23 13:55:29 2011 -0500 */ (function(a,b){function cg(a){return d.isWindow(a).....
The reason for the quotes is that it lets most IDEs format the HTML better. The curly braces just say if you are in an execution context or not. In the special attributes (rt-) you never need quotes because the execution context is obvious. Anyway, try writing large chunk of html in the way you mentioned below, it becomes a mixed mess of code/control-flow and html. With react templates, they are usually 100% separate, so that the component can focus on logic and the view/template can focus on beautiful html
Highland is extremely awesome but a bit heavy for simple flow control. Use if for bulky or long running stuff.
A recommendation might have been helpful.
We use Meteor for https://respond.ly and love it. For me the number 1 strength is all of the plumbing it provides to get real time updates all the way from one client's browser, into Mongo, and down into every other user's browser. The team behind Meteor has produced some good example apps, a tutorial, and decent docs to help you get up to speed. If you're looking for more resources, the Discover Meteor book is awesome. For us, there's 2 negatives rights now, that have really only come into affect now we have a large 12 month old codebase. We make heavy use of Coffeescript and Stylus, and often when we change a file, the live code reload takes 15 seconds or so. MeteorDG is working on this though, and the most recent versions have already provided some nice improvements. Another negative is that Meteor doesn't provide a way (yet) to lazy-load portions of your code, so the amount of JS and CSS sent down to the client on the first request can be quite large. Have said that, if we were setting out to build another real-time app where we wanted the clients updating as changes take place (and who wouldn't?!), then we'd definitely pick MeteorJS for that project. 
React Templates, eh? Looks like something made by an Angular programmer who wanted to pretend React is Angular.
[Webstorm](https://www.jetbrains.com/webstorm/) is awesome. [Sublime text](http://www.sublimetext.com/) is also great.
The success but bad data scenario is actually the major one I care about. The APIs will return data back but often times the dataset will simply be null.
I don't have a dog in this fight, but the article is very misleading: Their scorecard comes out as React - Draw - Angular 5 - 3 - 1 and their tie breaker was to home-grow a replacement the one thing Angular was better in. So the whole thing feels like a justification for plugging their custom lib. Change the article to "We really wanted to use React but really needed this one thing from Angular" and it would be more accurate, though not such useful linkbait. 
Wix. http://www.gifdivision.com/uploads/4/6/0/3/46032175/101_-_zkbkh.gif
That's... that's not really how you're meant to build your components. If your render method needs to contain a huge deeply nested chunk of HTML with tons of "template logic" in it, you're probably Doing It Wrong (tm). Consider extracting repeating patterns into their own components and have their state just depend on props rather than external variables. Ideally barely any of your components should need render functions verbose enough to justify the use of React Templates (presuming it's justifiable at all).
I think there's been a new JavaScript framework announced every day for the last five days on r/javascript. Glad we have some healthy competition, I guess.
In reality, if you are writing large chunks of view logic into a single render function, you should probably think of ways to split that component up into multiple. In these small components, the presentation is strongly tied to the logic behind the component. This combination is one of the big selling points of react. It just makes sense to combine these. ReactTemplates just separates these but still leaves them strongly tied together, notice all the references to "this" (referring to the logic) in the template. When one changes, the other will most likely change. 
I guess I should clarify my (healthy?) skepticism. How is this any different than Angular? Why would I want to use ES6 and ES7 conventions out-of-the-box when they're not representative of what's running on a production (browser) environment? Why would I use Aurelia for two-way data-binding when I have Angular that performs the task nearly identically (and why do we still care about two-way data binding)? Why are we still stuck with the paradigm of tightly-coupled HTML and JavaScript --- i.e. why is my presentation layer glued to my logic? The W3C decided this model (*onclick="doSomething()"*) should be defunct years ago, and framework developers keep seeming to want to re-inject it into their HTML.
Hi /u/pothibo, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
That would explain the author's die hard stance that string based logic constructs were "better" than **real** JavaScript logic constructs.
To each their own i suppose, i would still write those as intermediate components probably, like maybe a Nav component for the links, for example. For some applications, maybe this doesnt make sense. I would think the use-case that would draw me to ReactTemplates would be working with designers. Im surprised that this isnt mentioned as a strength.
Stop comparing the two.
Now you just need to add Gopher so you can run JS in your Go interpreter and the circle is complete.
Yep. I regularly work on large dynamic forms and stuff like if/else in JSX is so very painful in all but the simplest of cases.
'How is this any different than Angular?` - Angular 1.x approached MVC from a completely different standpoint. It started out with the 'V' piece and added the rest as it was developed. Angular 2 is a ground-up rebuild no with upgrade support for Angular 1.x apps. As opposed Aurelia uses *years* of it's core patterns applied to various frameworks (Caliburn.micro, Durandal.js) and builds a best-practice and future-safe approach while still maintaining an upgrade path for Durandal.js developers as well as Angular developers. It also allows plugging in whatever data-binding engine you prefer, the default does support things such as *onclick.bind="doSomething" but feel free to use Vanilla.js, Handlebars, Knockout, or whatever feels right to you. It's a modular approach, so use what you feel is right.
Are you still using last weeks 5th framework? Move on gramps.
Its underscore on steroids. In general highly recommended as a replacement, but its not a full drop in replacement for everything underscore. Lodash even provides an underscore version with some shims and such
That... is really fucking clever. The _ means exactly what I think it should, and syntactically it just works out.
well played smallSubBot...
TL;DR; In Aurelia, user interface elements are composed of view and view-model pairs. The view is written with HTML and is rendered into the DOM. The view-model is written with JavaScript and provides data and behavior to the view. The templating engine and/or DI are responsible for creating these pairs and enforcing a predictable lifecycle for the process. Once instantiated, Aurelia's powerful databinding links the two pieces together allowing changes in your data to be reflected in the view and vice versa.
I don't get why people insist with templates in react. I understand JSX is not beautiful for someone coming from the (messy) templates world, but this is a thing that needs 5 minutes to be understood and some days to get used to it. Just stop seeing JSX as an HTML dialect: JS is for Javascript. X is for similar to XML. It is semantically the same thing as Javascript.
And I was hoping /u/Uberhipster would send me a unicorn with a saddle made of solid gold. Your problem, at least, is only solved by ignoring laziness. I have to contend with the nonexistence of mythical creatures and the law of gravity.
Need more screenshots
Separation of concerns is far more "beautiful".
Oh, this topic has been discussed quite a bit here (just search for "OO", "OOP", etc.) in various posts. I believe the general consensus is, that one should mostly throw aside what you know about _class-based_ OOP, and instead embrace prototype OOP as the one &amp; only way. Some welcome the new features such as bona-fide classes, but many object to them, on the tenet that they're really nothing but a little syntactic sugar that serves no other purpose than to befuddle the code. With that said, there's still a lot of room for more discussion, which I welcome! But, I have a nitpick with the author, when he says things like: &gt; Javascript doesn't allow Object Orientation in the **traditional** sense. And: &gt; As with **traditional** object oriented programming languages, And (not to mention he needs to proofread his work at least for typos, like "tradtional"): &gt; Until then, just understand that Javascript is attempting to mimic **tradtional** object orientation, And: &gt; In most **traditional** Object-Oriented languages, Is the author unaware, or simply unwilling, to call what he's referring to by its true name, [Class-based programming](https://en.wikipedia.org/wiki/Class-based_programming) (_class-oriented_ would fit as well)? Anyways, not that big of a deal, but when you're writing a technical piece such as this, I think the readers would be better served by using accurate terms.
Neat idea but in practice I don't think *overriding natives* and with a version that bakes in *presentation logic* is a good idea. Okay for a single developer who has control over his entire code base, but would not introduce something like this to a team of developers where it'd probably cause more confusion. Why I see this as problematic/presentation issue: without that raw date data somewhere, how can I update the moment after 60 seconds has elapsed?
Promises and generators go very well together, if you use a suitable runner for the generators. Examples of such runners are `co` and Bluebird's `Promise.coroutine`, but it's a non-standard extension, not specified in Promises A+. So you can't expect that _all_ promise libraries will include such functionality. And btw ES7 will have a native runner - the `await` keyword, which is usable even now with a good transpiler.
Hah, not sure if serious or what... but you do realize that `_` is a ["low dash"](https://en.wikipedia.org/wiki/Underscore), right? The authors merely chose a synonym of the original name "underscore". 
I want to ride on a pony made of diamonds
That sounds like a rough ride. I'd rather sell that shit so I wouldn't personally have to worry about ES6 feature support anymore.
What is the scariest thing someone could do with this? What can someone do with my internal IP address if they had it? If these requests *could* be blocked by browser extensions and/or were visible in the devtools would you be satisfied?
And I do... IF I'm working on projects where I don't need to manage a team, as it would require a ton of overhead explaining where the landmines are.
Ah, thanks for the clarification about moment. 
Complex templates tend to look much cleaner in Angular than React, which has to escape into JS to do any conditions or looping. That's really the main reason. I also like to keep my templates in separate files, since it helps with code organization and separation of concerns, but you can do that easy enough with JSX.
Great point! I'll update the blog to reflect this, and point to the wikipedia for reference.
Thanks for being a good sport about it!
React [separates concerns, not technologies.](https://www.youtube.com/watch?v=x7cQ3mrcKaY)
&gt; Separation of what concerns? How is a template's concern different based on whether you put your logic in string form or inline? From a technical standpoint, it makes no difference. It's more about ensuring that a lazy junior developer doesn't take shortcuts at 5pm on a Friday and create a tight coupling between things that shouldn't be tightly coupled. It doesn't in any way stop you from doing it, but it's a subtle nudge towards avoiding doing so, or mixing business logic into the template proper etc. It seems like a fairly minor detail, but on a team of 8 developers on a long term project that needs to be maintained for years, little things like that make difference. It's not a hard rule - most components are quite small, so it's usually better to keep the corresponding template inline. But larger components that can't logically be broken up are often best split into a separate template file. &gt; Also, JSX is JavaScript, so there's no "escaping" into HTML. You are always in JavaScript. JSX is not Javascript. It's a a very thin XML syntax that compiles to Javascript. If you want to embed some logic, you use an escape character to do so. (I'm relatively new to react so I could be mistaken here - can you provide an example of looping in JSX without escaping?) 
Absolutely, small reusable components are the goal. But sometimes you have a larger amount of template code that is better suited to being in one chunk. In these cases moving to a separate file can make it a bit easier to maintain. See my sibling comment for more clarification on this.
Hey, I want to just tag along with everyone else and say this is awesome, but I actually have no clue what it does. Would someone mind explaining what's happening here?
Ugh it's going to be a bloated library soon. Might as well just merge it with [underscore-contrib](http://documentcloud.github.io/underscore-contrib/)
Ah ok, that makes sense. Thanks for the objective answer.
&gt; I will warn you, I thought that it would be better in the beginning and I found that the JSX format is both easier to understand and easier to pick up for both myself and all the juniors I've taught. Oh I'm absolutely, 100%, definitely on the same side of that argument. I've never understood the appeal of generating HTML by manually building an AST. The gripe with escaping is it can sometimes be quite messy. i.e. Compare &lt;ul&gt; {this.state.people.map(function(person){ return( &lt;li&gt;{person.name}&lt;/li&gt; )}} &lt;/ul&gt; Vs &lt;ul&gt; &lt;li ng:repeat="person in people"&gt; {person.name &lt;/li&gt; &lt;/ul&gt; The latter is a lot cleaner to my eyes, and doesn't really lose anything for doing so. I'm also of the mindset that templates should be limited to simple loop and conditional logic, so don't really feel like I'm losing something by not being able to embed Javascript directly. *Mind you this is very much personal preference*. It's like Vim vs Emacs, or Static vs Dynamic. It's almost a religious discussion with everyone having different opinions. I had this debate plenty of times back in the days of PHP and Perl - some developers preferred to interleave PHP and code, others preferred a dedicated separate templating language. I've always been strongly in the latter camp, and have yet to personally see a compelling reason why I wouldn't want to do it that way, but can acknowledge that others prefer it inline. I should clarify that other than preferring the syntax of the angular templates, I don't think they have any redeeming value compared to React. "It's just a function" is just too compelling a feature that makes working with angular feel very kludgy in comparison. My fantasy-land framework would actually do something similar to the Article - have a dedicated template language that simply compiles down to Javascript, can be called as a function, and updates a virtual-dom. But if I had to pick an existing technology, React with JSX would win hands down compared to Angular. &gt; Comparing the learning curve between React and Angular is no contest. Not contesting this either. I think Angular is actually lot easier to dive into for simple things, but the instant you need to write a directive React soars ahead. &gt; Larger components are almost always separatable into smaller chunks. In fact, I find that the large component is almost always easier to pick up and modify after doing so. If you have an example, I'd be glad to show you how I approach simplifying it At the moment the architecture is broken down into a fairly fine-grained component model, with each component being a small atomic directive. In that sense, the vast majority of our code is already done that way. I can't give specific examples, since it's proprietary code, but there's still a few places where it's simply more manageable to have one larger template with smaller components embedded in it. These could certainly *technically* be broken up, but we made a call that these were easier to manage as a single larger unit. Keep in mind my definition of "large" here is anything more than perhaps a dozen lines of HTML. In our prototype port to react, beyond that size we found it felt more logical to have the template in a separate file. Keep in mind the standalone templates are just a function that renders JSX, so there's no technical difference between having it internal and not. It's simply a matter of code organization. This also falls heavily into the personal preference factor too - as mentioned above, I prefer all HTML to be separate from code. The only reason the majority of components aren't this way is because it's not worth creating a separate file for such a small chunk of template. &gt; I do find it odd that people have more problem putting a bit of JavaScript around their HTML representation, but no problem putting HTML around their JavaScript representation... I think the point is that we're not putting HTML around our Javascript presentation. The two technologies are kept separate and not mixed. The fact that JSX happens to use Javascript for its template logic doesn't change this at all. If you're putting anything more complex than a conditional or a loop, you're probably putting too much Javascript in your template. &gt; Separating 'business logic' can be done, but you do it before you feed your data to React. Build up a data representation that suits your interface and push it into your component, then sit back as it renders. Yep, we're on the same page here. As with others, React definitely encourages this, and I don't think there's any confusion in any framework today about how this should be structured. A very minor gripe with React is that it makes it easier to violate this constraint if you get lazy. But it's not exactly hard to stay disciplined. &gt; Why does that logic need to be in a separate file? Primarily personal preference - I find in a lot of cases it's easier to manage being in separate files. From a technical standpoint being separate has a few benefits. We have both a Desktop and Mobile version of the app, where most components are doing the same thing, just rendered differently. In these cases, we can use the same business logic but simply swap out the template with a compile time flag, which means the mobile application webpage can have a smaller download size. It also makes skinning a tad easier. We can have multiple active skins, maintained by designers with no JS skills, and simply choose which one we want to use at compile time by changing the template import path. &gt; Compare that to finding your directive by scanning your HTML template for either data-my-directive or myDirective or whatever else the junior called it... Then finding the appropriate Directive file associated to it and skimming for the appropriate scope value, ensuring if you need to watch something, etc. In all honesty, I don't see any difference between React and Angular in this regard? Whether I'm using JSX or Angular, in the same file or separate - if there's a call to a component named "Foo", I'm going to be able to find the code behind that component because I have a consistent naming scheme.
Hmm. I wish I could recommend something more up to date, but when I learned it, [CSS: The Definitive Guide: The Definitive Guide](http://www.amazon.com/CSS-Definitive-Guide-ebook/dp/B00457X7L8) was very helpful. If I remember correctly, it was a dry, boring read, but it gave me a good foundation. There may be better books now, but it may also be good to read that for back-to-basics learning. In any case, there are some things you should understand: * What all the types of **position** really mean. I'm surprised when I interview people how many only know about 75% of this. CSS doesn't give you all the tools you really want to position things, but if you understand all of them well, you can usually do what you want. * The **float** property. Know what it really does and know that it isn't the solution to every problem. It can behave in strange and unintuitive ways. * Selector precedence. This is crucial to writing good, compact selectors and not relying on **!important** too much. Knowing this also allows you to separate your selectors into distinct modules instead of having a lot of global classnames. Modularity allows you to refactor safely as the UI design changes. * The difference between **inline**, **block**, and **inline-block** level elements. Again, I'm surprised when I interview people how few understand this. * Separating presentation from markup and using *as little markup as possible*. For example, say you want to make a link appear on a separate line. Too often, I see code like this: . &lt;div class="some-module"&gt; &lt;p&gt; &lt;a href="/foo"&gt;A link&lt;/a&gt; &lt;/p&gt; &lt;/div&gt; It would be better like this: .some-module a { display: block; } ... &lt;div class="some-module"&gt; &lt;a href="/foo"&gt;A link&lt;/a&gt; &lt;/div&gt; The less markup you have the easier it is to debug and easier to deal with when designs change. The first example doesn't seem *too* bad, but when this type of solution pervades a codebase you descend into deeply nested &lt;div&gt; hell. Keep your DOM as flat as possible, but nest when it makes sense -- into discrete modules. If you want, look into methodologies like SMACSS, BEM, and OOCSS, but use them pragmatically. None of them are perfect for every situation, and often their "rules" should be broken under certain circumstances. Too often, when it comes to CSS, developers forget everything they know about writing code. Just as in other code, globals are evil. Make your HTML/CSS modular. Just as in other code, (and even more so) naming things well is important (and hard). And then once you understand how CSS really works, its real limitations become apparent (lack of variables, poor inheritance, there's no good way to separate different concerns into different files in a performant way, etc.). Then the need for preprocessors becomes obvious, and you can judiciously introduce them to fill in the gaps in the language. The bad news: Learning CSS well takes actual effort. Too many developers simply aren't interested in front-end design, so they just say "CSS sucks", then they download Bootstrap and move on. The good news: Learning CSS takes effort but it isn't really *that* hard. The same concepts for designing good software apply to CSS, so once you have the underlying concepts down, you can use your "regular" instincts to determine what is well designed and what is poorly designed CSS. Hope this helps.
Hmm... I really have no problem with the inlined loop. I find it easy to tack on a filter if need be. You could do the loop outside of that construct and simply do: var peopleItems = this.state.people.map(function(person){ return( &lt;li&gt;{person.name}&lt;/li&gt; )}); &lt;ul&gt; {peopleItems} &lt;/ul&gt; If you like. I'm not sure it adds anything right at the moment though. Maybe some form of pagination? var pageStartIndex = (this.state.currentPage - 1) * this.props.itemsPerPage; &lt;ul&gt; { peopleItems.slice(pageStartIndex, pageStartIndex + this.props.itemsPerPage) } &lt;/ul&gt; /shrug. I'd probably do that before putting it in the render though. Edit: I should add... I've done loops with factories that tend to hide some of the "escaping"... You can get away with passing the data objects in an array to a factory that returns React Components like so: var peopleItems = this.state.people.map(React.createFactory(PersonListItem)); Where `PersonListItem` is a more complex Component that receives props for each key in `person` given `people` is an array of objects.
Totally agreed. That is why the tech industry is awesome. If you think your idea is better, you can go build it, and release it to the world. 
Why not [ngReact](http://davidchang.github.io/ngReact/#examples) ?
But you can't compare React Components to templates except in the most basic ways. I can't think of any reason besides giving a designer control over presentation, (which... Let's be honest, they make some horrible markup) to keep that separation. Components deal with presenting that data in a rather compact, encapsulated component. All logic dealing with that view of data is at your fingertips and modifying it doesn't require multiple files (or shouldn't, if you set it up.) Granted, I've seen some ugly implementations of React Components, but I've also seen my fair share of ugly templates (with equally ugly models) so I can't buy the argument that templates make the developer less prone to do bad things.
The guy is an amazing dev IMHO and it sucks to see that he left the angular team. His work on the 2.0 router was super impressive.
&gt; But you can't compare React Components to templates except in the most basic ways JSX is just another templating language. What React does well is unrelated to the syntax of JSX. You could implement another templating language on top and lose absolutely none of the benefits. &gt; I can't think of any reason besides giving a designer control over presentation to keep that separation I'm a developer, not a designer. And I much prefer my HTML to be written in HTML, with as minimal ugliness as possible to implement my presentation logic. Of the two examples I gave in the previous comment - which one looks cleaner? To my eyes, a single `ng:repeat` is far, far cleaner than the JSX version, and doesn't lose any power for being so. &gt; (which... Let's be honest, they make some horrible markup) I hear this a lot - and I'm surprised so many people think this way. I have people on my team who's entire job is to write production quality HTML and CSS. All day every day. They are very, very good at it, and do a far better job than the regular developers. Regardless, even as a developer, when I'm writing HTML I like it to be in HTML with as few abstractions as possible. Somebody telling me that escaping to Javascript is simpler than an inline repeat annotation is like me telling a developer they should escape to XML to use a for-loop in Javascript. I just fundamentally cannot understand why you'd want to do that. &gt; Components deal with presenting that data in a rather compact, encapsulated component. All logic dealing with that view of data is at your fingertips and modifying it doesn't require multiple files (or shouldn't, if you set it up.) The size of components, and the presence of the template in the same file as the business logic has nothing to do with the templating language. A component written using Angular Directives would generally be about the same size as the same React component, and in both cases you can include the template in the same file, or separate. React Components are a much nicer implementation than Angular Directives, but they both aim for roughly the same level of modularity, and allow you to have the template either inside or outside the main source file. &gt; Granted, I've seen some ugly implementations of React Components, but I've also seen my fair share of ugly templates (with equally ugly models) so I can't buy the argument that templates make the developer less prone to do bad things. JSX == Templates. It's not "similar to" or "a replacement for" templates. Using JSX to render my HTML is exactly the same design pattern to using any other language to render my HTML. I could swap between one and the other without significant architectural changes. React does a few novel things with JSX that are different to traditional String or XML based templates. But from the point of view of my application architecture, nothing changes. The only difference is the specific syntax I'm using. 
Seriously man this post +1000. For me when I came over from a language like C#, to me the toughest part was hands down the fact that every developer would handle a problem a completely different way. While simple data structures and algorithms were always a little up to you in languages like C#, JavaScript allowed programmers to basically write the whole program in completely different styles then other programmers, specifically noting in architecture designs To be honest though, some days it frustrating, but others it's liberating really. I feel like I'm in the wild west of coding when using JavaScript
Thanks, I'll read the other part of the discussion :) I've never met a case where having a big component was a good idea. My point, anyway, was that templates are a concept not existing in react. If you insist thinking on templates, you are just missing the point. react is more how data should flow inside your views. Once you spend 10 minutes on JSX, you are open to a much solid architecture, such as with flux.
&gt; Helping enforce purity. It's syntactically more difficult to nest 35 different conditionals and you're forced to actually divide the problem functionally. That's actually the same logic I often use to argue *for* templates.
Released early :) 
After seeing Riot 2 there is no game.
[gitter](https://gitter.im) is awesome for this because it uses your github credentials. I know it's probably fine, but I'm not 100% comfortable giving my e-mail address to a random website on the Internet, especially knowing more user-friendly alternatives exist. #reactjs on freenode is fantastic. Unfortunately, I'm stuck on webchat.freenode.net because our corporate firewall seems to block the ports IRC would normally use.
Because you told it to? There are two mousedown() triggers. They fire in the order they were added to `#a`. The first trigger runs `.slideDown()` makes the hidden element become visible by sliding it into frame. The second trigger runs. `#b` is now visible, so its `if()` condition is met. `#b` is slided up to become hidden again. If you wanted it to happen the other way around, you could swap the order you're adding the events to `#a`.
You might be surprised by how user friendly Slack is. A lot of people love it. If you want to join, you can DM me your email and I'll personally send you an invite. It's also fine if you don't though. 
Both of these are firing, the jQuery animation code is queuing them. ie div#a AND #a are both correctly binding to your div here. if :visible and if :hidden aren't going to help, they are visible. use a single binding and use slideToggle() if thats the behaviour you want (you dont specify what you want to do)
I think its probably due to how the node package manager retrieves lodash from the repo, its "lodash" and not "lo-dash". Changing it to "lodash" formally makes everything easier. 
You can make your own lodash builds with Browserify and/or only include the bits you need. 
You can install "modularized" version which has every function in a separate npm module: https://www.npmjs.com/browse/keyword/lodash-modularized
Thanks. I already have two different Slack accounts for work (one for my team and one for JSers within the company), and I'm generally a fan of it. I just like not having to think about opening yet another account. As long as freenode is where the React core team hangs out, that's probably the one I'll use. I appreciate the invite though. =)
While google is killing it with the gigabit, I feel like they are missing the opportunity to have a $30 100/100 plan for those who want speed but have a budget. It would bring in revenue from people that aren't willing to pay $70 for internet and be more likely to force other providers to compete since it would be the best bang for your buck at a low price.
Uh... wrong thread? 
Use this for Twitter Scraping: https://gist.github.com/nwaomachux/35d1c424966fccd16ae1.
read https://codewords.hackerschool.com/issues/one/an-introduction-to-functional-programming
Honestly I've never used it. 15 years of development...
I really like the name of this method: [`_.kebabCase`](https://lodash.com/docs#kebabCase)
At least credit the original site rather than some stupid tutorial: http://trackingjs.com
No semicolons (and then being recommended to start lines with ; to get around that in one case). And no == null. No thanks :(
Here is browser support if anyone is interested - http://eisenbergeffect.bluespire.com/evergreen-browsers
Aside it's modularized version, you can also have custom builds that you could select down to methods.
It looks like [buttstallion.io](http://buttstallion.io/) is available.
Why does this scare you? My code is neat, fast, extensible and readable
In 2015, yes. There is always exceptions, but I just want to draw a diagram about what other languages exist.
you created an instance of `MyClass` called `obj`. the prototype chain is shared among instances. so calling `obj.x` gets the value that was said on its constructor's (`MyClass`) prototype. The proper way is to do `MyClass.prototype.x = 2;`
Username checks out.
Thanks for sharing such a cool stuff
Most of those rules are either irrelevant or completely contrary to writing larger libraries in a purely functional style.
&gt;Ummlimited FTFY 
So why bother re-inventing Angular templates badly?
Probably should have said 'React.js' instead!
Not seriously using this anywhere, just playing around. It basically constructs an object full of closures who each return objects full of closures. So a function "thunk(a)" would become "{a: function(a){ thunk(a); }}" and a function "thunk(a, b)" would become: { a: function(a){ return { b: function(b){ thunk(a, b); }; }, b: function(b){ return { a: function(a){ thunk(a, b); }; } } 
&gt; [Vivaldi unique is that it’s built on modern Web technologies. We use JavaScript and React to create the user interface — with the help of Node.js, Browserify and a long list of NPM modules. Vivaldi is the web built with the web.](https://vivaldi.com/#Features/4)
I have no idea how I did this. About 80% certain I typed this in a different thread. Oh well. 
Why not contribute to an existing framework in order to fix those flaws?
Not open source either, too bad...
Feels snappier but would like to see benchmarks/more complete comparison especially with regards to CSS and HTML support. Is this based on Blink or a new engine?
They could have shortened #2, 3, and 4 up a lot by saying, "don't try to implement a solution for an NP-Complete problem". That's my problem with these sorts of lists. They don't say what they mean. And I think they are that way because they don't understand what they mean. These features exist for a reason. No, you shouldn't bandy them around willy-nilly, but if you have a type of problem that *requires* an unbounded loop, then you fucking need an unbounded loop. The recommendation here shouldn't be "don't use unbounded loops", it should be "provide a way to cancel out of long processes". Not impressed.
It's cool but it's barely functional, could only detect my face about half the time in a very well lit, relatively feature free room.
Hi /u/positlabs, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Some people invented Rust for making breakthrough browser, and some did browser with JS. When can I write graphics driver with JS?
eval is explicitly required, as the Function function does not close over state.
I like javascripts class-based OOP, but I think in part of the reason for js being based on prototypes is that they do offer more expressive freedom (and yes, more ways to shoot yourself in the foot). You can build a traditional class-based OOP system in a prototypical system, but you can't build a prototype system in a class based system. Most good developers are probably going to use some sort of framework anyway, which might enforce more good architecture practices.
I've used bower, sure. Do you have ssh keys setup? If you do a `git pull` (assuming you use git) from the destination does it ask you for passwords?
This gives out even the my local loop-back IP address that I've set up for testing on [dummy network interfaces](http://google.com/search?q=microsoft+km-test+loopback+adapter)! All 8-9 of my 10.x.x.. series. Very cool. Also, anyone else got the [169.x.... IP address](http://www.howtogeek.com/forum/topic/169-ip-address-1) as one of their *2* public IPs?
Fuck man, this is so concise! Thanks for the read.
Did not recognize my face at all.
Here is a library that uses d3 to detect faces in images, in both html and svg. https://github.com/nicksrandall/d3.facedetection
But what if I really wanted to pass _ to the function? :-)
ES6 can't fix the biggest quirks like ==, but it gives a lot syntactic sugar and other tools which make JS development much nicer experience. For me, only downside of using ES6 now is that I need to transpile, so for bigger apps, my reloads are slower. Also breakpoints don't work as good, because browsers can't properly load sourcemaps(last time I tried).
We've been using it for more than a year now at http://www.okgrow.com/ and have built a number of apps that are now in production. Our experience has been very positive, especially for such a young framework. In my experience people that don't like it fall into two categories: 1) People who haven't fully bought into the idea of fully client-side apps. 2) People who want to pick and choose a very custom stack (maybe because they're looking to modernize an existing app, or because they just value ease of customization over ease of getting started). I'm pretty sure that client-side apps are the future one way or another. Initial load times are always an issue for client-side apps, but the tradeoff is instant response on most other actions thereafter (see Meteor's "latency compensation"). Initial page loads of even traditional pages are slow due to DNS lookups, and large JS payloads (I read recently that 1 MB is average now). Starting up an app on your mobile device is also "slow". And these problems can be mitigated by incremental loading (which is on the Meteor roadmap). There are simple solutions to SEO too. Server-side rendering via the spiderable package right now and more efficient server-side rendering to come. And crawlers are getting smarter (they have to in order to survive... I'm sure that 5 years from now nobody will even think about that). Speaking of client-side apps, I like that you can simply package it as a Cordova app because it's already a client/server architecture. Sure you'll need to do extra work after that, maybe lots, but the groundwork is laid to share most of your code. Regarding flexibility: Meteor is actually architected as a set of independent packages, but a problem is that it's not easy to figure out how to use them on their own. I'm sure that will change (remember Meteor just hit 1.0 a few months ago). Personally I'm kind of in the "convention over configuration" camp, I like having a simple standard starting point, and I know that with maturity the flexibility will come (Rails was exactly the same, and it did change). Large mature apps obviously will deviate from the simple path when the time comes. The best solutions and frameworks don't try to start out solving every possible problem or they solve none well. I think if you're focused on productivity right from the start you'll like it. Another huge productivity benefit that I don't hear talked about much is that **Meteor's architecture allows you to declaratively state what data is published to a client for a particular state of the UI**, and then you mostly just work by querying a local database which is kept up to date in real time. And those queries stay "live", so the UI is updated automatically. Forget the old way of making API calls to the server and manual caching of results (with all the complexity that entails). Woops didn't mean to write an essay, but to the original poster I'd say try it out, and if after a week or two your productivity is high enough to replace the existing app and be further ahead then that answers your question. If not, well you might have picked up a few new ideas anyway. :-)
See the note on this page: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function &gt; Note: Functions created with the Function constructor do not create closures to their creation contexts; they always are created in the global scope. When running them, they will only be able to access their own local variables and global ones, not the ones from the scope in which the Function constructor was called. This is different from using eval with code for a function expression. Keyword: closures. See the Wikipedia entry: http://en.wikipedia.org/wiki/Closure_(computer_programming) &gt; In programming languages, a closure... is a function... together with a referencing environment—a table storing a reference to each of the non-local variables... of that function. A closure—unlike a plain function pointer—enables a function to access those non-local variables even when invoked outside its immediate lexical scope. In my example { a: function(a){ return { b: function(b){ thunk(a, b); }; },... } The second function is able to access the parameter `a` of the first function because it is a *closure*, it "closes over" the state above it. If I had used Object.defineProperty(someStateObject, "b", Function("b", "thunk(a, b)")) here, the function body wouldn't have been able to access the parameter `a` above, because the Function function does not create closures. Regardless, almost all of the arguments against eval (which only apply to data sourced from users) apply to Function as well.
I don't believe in multi-MB frameworks that absolutely must be min'd+Gzip'd anyway.
A well-funded core development team is a great thing. Pick your favourite open source project. Would $12M help them give you more benefit? I think it would. How else can you work on something full-time? Hire your ideal team to help? Support community contributions and support requests? You can debate VC vs corporate sponsorship all day long but needing a day job definitely doesn't help. Corporate sponsors also have more important goals than "open source community", and they have more of them. I think VC money is *less* risky for the project than a corporate owner because a VC's *only* priority is to make money with the project, which at least guarantees that it won't be killed until the cash runs out. There are some good comments on this in the [JavaScript Jabber interview of Steve Newcomb of Famo.us](http://devchat.tv/js-jabber/128-jsj-famo-us-with-steve-newcomb).
It needs more than one benchmark to have any meaning. 
It's growing fast judging by attendance at events, participation in community forums, and number of packages available (which have tripled since October or November). But, unlike Angular, it's more often used for building new apps rather than enhancing the UI of existing ones, so I wouldn't expect it's adoption to be as fast as Angular. Compare it to Rails, which took years to get where it is now.
I'm also a ClojureScript proponent but have to use vanilla JS sometimes for similar reasons. I've started playing around with some ClojureScript inspired patterns for React and Flux here: https://github.com/scttnlsn/syphon I'm very curious to hear about other's experience with immutability/React/Flux.
I agree. Why don't you make one. Or give a suggestion of some more tests that make sense. 
The chrome outlier is most likely due to a deopt / deallocation occurring somewhere, but once the engine senses that it's meant to be run again, it stores the optimization.
Why would you ever directly update the HTML in a knockout function, or angular? Or lookup HTML elements, everytime, in general? :\
&gt; It also allows plugging in whatever data-binding engine you prefer, have you got a link backing up this statement?
Are you referring to when I update the link to show the run time of the previous test? I did that so as to not incorporate the duration update as part of the test run time. Trying to keep things separated.
This thread inspired me: https://gist.github.com/anonymous/2ed18ff81436ad8ba986
I'm not sure what you're referring to, it was up for 13 hours and had 0 comments.
No, this is wrong because it's decidedly an antipattern. Separation of concerns. There's no reason to tightly couple JavaScript and HTML in this way. Events should be added programmatically - all of my core JavaScript logic not related to my presentation layer should be in one location. (Events are not part of the presentation themselves.)
&gt;Worst of all, it doesn't even seem there's even going to be any due dilligence or review of these features. It's nobody's fault but your own if you don't follow the publicly available discussions between fucking Brendan Eich and the other members of TC39. For instance you could see their reasons for postponing array generators until ES7.
I tried to make a performance-oriented version even though it probably shouldn't be used for anything other than fun projects. It doesn't use eval and works even when minified thanks to using a similar approach that /u/qgustavor wrote.
You're getting sick of changes, not Javascript. You look too much into the future (understandably) and it looks confusing (also understandably). ES6 is backwards compatible, so you really don't have to use _any_ of its features for all you care. Yeah, of course, it's bigger than that — you care about what language will become — but imagine you didn't know anything about ES6 right now. Just keep writing your ES3/5 and enjoy the result/process. Everything will just keep working the same. In fact, I'm not planning to use (syntactical parts of) ES6 anytime soon in any of my work. Same with ecosystem. Did all of the projects using Grunt suddenly blow up when Gulp came out? No. If it ain't broke don't fix it. If you're adventurous enough and have time/desire — try out new things. I think it's that simple.
Let's take one example that you brought up: RequireJS. I think you're exactly right, it's not going to be technology that you'll use for the rest of your career. In fact, like you said, you could make a pretty convincing case that it's already old news. But so what? Don't cherish the trivia of a particular framework. Get better at your real talent. Lawyers don't bemoan every new law that gets passed, plumbers didn't get laid-off en masse when PVC pipe was invented. If you're looking for an exciting change of pace, make a native phone app, or learn Go. But for goodness' sake don't look at it as "restarting your career". 
On the TodoMVC benchmarks, Knockout runs 3-4 times faster than Angular and React -- http://matt-esch.github.io/mercury-perf/ . The difference is largely due to the fact that this benchmark simulates 1,000 items added in a single shot, whereas the TodoMVC benchmark simulates a user clicking and adding one item at a time. Angular and React are faster at one-time bulk adds, Knockout at progressive additions. Benchmarks are always suspect, but the TodoMVC scenario seems closer to actual usage to me than this one. edit to add: On Firefox, knockout still comes out on top in the TodoMVC bench, but not by as much, about 40% over Angular and 2.5x over React.
Here is a fixed example. http://jsfiddle.net/s9f1qwuk/2/ The problem was due to creating around a thousand new onClick handlers each render (due to the use of bind).
Of course, there's no need for a cumulative benchmark for the user adding one item at a time for 1,000 items. As long as each item addition is perceived as instant, everything is fine.
... dont think in classes...
Interesting. There are some differences, like having to essentially name two sets of parameters, and also having to add another set of parens at the end to invoke the function.
&gt; I've worked professionally as a front end developer for about two years now. Call us when you get to at least 10 years. A lot of what you've described is your lack of experience with the flow of software development. Some of it is indeed the complete shit-show that is the JS framework market right now. But get a few years under your belt and you'll realize that this is just the same disease in a new place. This was ORMs 5 years ago. This was Microsoft-backed reporting frameworks 10 years ago. It's probably going to be browser-based game frameworks or VR headsets sometime late next year. This shit just keeps going, and you have to learn how to deal with it by not falling victim to it. For example, if you couldn't code your own request routing system in vanilla JS[1], from scratch, no external dependencies, then you're not really all that proficient yet and you will continue to be at the mercy of the fickle market. [1] I'm not saying you have to code everything from scratch, so hold your "don't reinvent the wheel" horses. I'm talking about a lack of ability.
May be a dumb question but -- why wouldn't the server/service you're communicating with already know your IP address?
Too bad. Really want libraries like this to be good!
 Knockout : Adding100Items : Sync: 360.0299999816343 ms Knockout : Adding100Items : Async: 58.56299999868497 ms Knockout : CompletingAllItems : Sync: 54.31300000054762 ms Knockout : CompletingAllItems : Async: 38.2310000131838 ms Knockout : DeletingAllItems : Sync: 360.97700003301725 ms Knockout : DeletingAllItems : Async: 10.574000014457852 ms Knockout : 882.6880000415258 ms Angular : Adding100Items : Sync: 1084.1169999912381 ms Angular : Adding100Items : Async: 267.2090000123717 ms Angular : CompletingAllItems : Sync: 740.587999986019 ms Angular : CompletingAllItems : Async: 214.25299998372793 ms Angular : DeletingAllItems : Sync: 747.0660000108182 ms Angular : DeletingAllItems : Async: 86.44799998728558 ms Angular : 3139.6809999714606 ms React : Adding100Items : Sync: 528.2969999825582 ms React : Adding100Items : Async: 58.43700002878904 ms React : CompletingAllItems : Sync: 608.7939999997616 ms React : CompletingAllItems : Async: 31.715000048279762 ms React : DeletingAllItems : Sync: 601.0419999947771 ms React : DeletingAllItems : Async: 8.766999992076308 ms React : 1837.052000046242 ms Run 2/1 - Total : 5859.421000059228 ms Seems react runs as fast as knockout in the async case.
It's a good question. So yes they would know your external IP address. However they would not know your local. 
A deploy key may be useful here, if you want to give (e.g.) a server read-only access to the repo.
That "raw" DOM isn't so raw. Using a document fragment and appending elements to it is much faster than innerHTML (and is why React is faster despite all the overhead).
Just to pick up on two minor points. I am pretty excited about ES6. I do like the classes syntax (I also like prototypical inheritance), since it makes traditional inheritance a lot cleaner looking, and class-based inheritance is useful sometimes. Fat arrows also will slim down code by getting rid of the "var that = this" pattern. 
I'm guessing you just typoed your post but I've made typos in the wrong place often enough not to double check. &gt; But I have a copy of classie.js in "js/classie.cs" from my index.php directory I assume you mean "js/classie.js" and not "js/classie.cs"?
You guys are able to access https://vivaldi.com/? It's been down for me all day...
It's a one time call to timestamp when the test ends...
http://.../js/classie.js gives back a 404. http://.../classie.js also. Probably, as you're using WordPress, your js files should go in some theme folder with a url similar to http://.../wp-content/themes/practicemandarin/classie.js or http://.../wp-content/plugins/... or something like that. Particularly if you have any .htaccess redirecting stuff.
Assuming you got this sorted? As I'm seeing the file being referenced to the js/classie.js folder. 
Not too familiar with bitcoins or the task at hand, but it looks good. My suggestions: - avoid singletons/global config with modules. e.g. if two modules started mutating your singleton, only one would win. Further; if you end up with multiple versions (i.e. module A depends on v0.x and module B depends on v1.x) you will end up with different instances rather than the expected singleton instance. - you can omit the `.js` extension in your require statements if you like ;) - typically you should start modules at `1.0.0` unless you know they are going to go through a lot of major changes. `0.x` has a special meaning in SemVer and causes lots of frustrations.. - don't forget `npmignore` (or `files` whitelist in package.json) - just a tip.. you may like [nodemon and tape](https://github.com/Jam3/jam3-testing-tools#tape) for testing. basically zero-config, no need for grunt, etc. [more tips](https://github.com/mattdesl/module-best-practices)
Good catch, both of those were design decisions: two sets of parameters is so that the second one can be minified. Additional parenthesis makes invocation explicit and it can be done later on if desired. It also allows for appending additional parameters outside of those explicitly defined.
you have to pass in the variables to the evaluate casper.thenEvaluate(function(email, password) { document.getElementById('email').value = email; document.getElementById('password').value = password; }, { email: email, password: password });
Yeah, I think people often forget about DocumentFragment, but all the frameworks use them for rendering. innerHTML is a lot slower in comparison.
A critical point: is your app starting from scratch, or do you have a legacy (SQL) database in place? If from scratch, Meteor wins, else, Angular.
That's alot of good information. Glad I moved this to the JS subreddit, Thanks for sharing :) 
I wonder if there would be any difference if you used angular's one-time binding: https://docs.angularjs.org/guide/expression#one-time-binding Anytime you have an expression it creates a two-way binding on the scope, which is pretty bad. Better yet, they could've created a directive for it like these guys did: http://blog.scalyr.com/2013/10/angularjs-1200ms-to-35ms/
&gt; Javascript's sin lays only in the syntax Can you elaborate on this point? 
Have you encountered any issues relating to syphon's one-global-state-atom instead of, say, cursors or multiple state atoms?
Actually, it's not the best example headtrackr.js was released a year ago and it does everything better, I think https://github.com/auduno/headtrackr/
Hi /u/carsongross, please read reddit's rules @ http://reddit.com/rules, specifically point #1 of rule #1. Our [guidelines](http://www.reddit.com/r/javascript/wiki/index) also have more information regarding promotion &amp; self-promotion. In short, you should post from a variety of sources, and not just `intercoolerjs.org`. **Consider this your only warning.** Continued posting of only a single source will force us to take action. Thanks for your understanding.
I wouldn't be afraid to have a bash at anything new. I absolutely know what it's like to feel a bit defeated by the volume of stuff flying at us, but it's quite a limiting thing to have on your mind. Keep abreast of everything, but don't feel obliged to dig too deep into anything. Even a vague idea of a technology will be enough to alert you to the importance of digging further into something new when there's a particular problem to solve. Also, it's hard to truly waste time if you're engaged in all this stuff. I spent a ton of time early on with Flash, then Flash disappears and what am I left with? An entry into ECMA stylee for starters, but *so* much general experience that stuck to me while I was trundling along. So have a bash at everything while keeping a good handle on the fundamentals, don't put all of your eggs in one basket, and don't be put off if something dies on you - anything that's no longer useful will ebb away to make room for something else, and what remains you can apply to other things. Always try to get something useful from production jobs, there's a particular kind of motivation that you only get when there's a deadline looming. Christ, I hope that made sense. I suspect it did not. In 'What do I learn next?' you hit upon something I enjoy tremendously (picking up new tools), and to hear someone apprehensive about current trends at two years in was enough to delay my bedtime by an hour. In not entirely unrelated news, [this post](http://www.quora.com/What-do-software-developers-age-30-and-over-know-now-that-they-wish-they-had-known-in-their-20s) appeared on Reddit recently. I thought it was a good read.
I think you need to get rid of &lt;script type="text/javascript"&gt; in your JavaScript file.
Alrighty. I didn't realise it was that bad.
Since ES6's arrow functions I never wrote "bind" or "self" and far less often "function" and "return". I like it. Proxies are like a medicine and effectively immunize against 3rd party API changes. But, partially I agree, a bit of sugar made it into the final.
Nothing is wrong with you. A lot of Javascript developers suffer from NIH syndrome, and so what you see are a lot of libraries coming out that solve one or several people's problems in a convenient way that may be useful to other people. The creation rate hit critical a while ago, and it's become a joke to a) find an unused name in npm (because npm doesn't namespace libs, so everyone has to share the global namespace), and b) find a library that does what you want, in the way you want, that's _actually been battle tested in production_ (and no, a small startup's site is not battle tested). A lot of ES6's features seem misguided to me, too, but there's enough good in there that we can look at it the same way we did "Javascript: The Good Parts" and only use what makes things better. What you need is to learn a new language and find a job there. Go is becoming pretty popular among web devs (and jobs are growing in number faster than experienced devs), Clojure might be fun if you want to learn a Lisp and still do things with browsers (via Clojurescript), D or Rust if you really want to get away from everything, or Java if you want a nice stable job in nearly any city you choose. But whatever you do, if you want to get excited about work again, use a different language professionally!
Okay so, first off, disclaimer: I've not much experience with frameworks like this or Angular. I've been on home-grown in-house frameworks for years in my job, and only delving into these other frameworks in my spare time. Having said that, the second I saw the router code my eyes glossed over completely. Is it just me or does it seem a bit boilerplatey for the sake of it?
my bad, good sir. i thought the other guy i was conversing with via replies here was, in fact, you. so to you: good call on your blog post saying that external scripts are the correct solution. in fact, i'd be surprised if putting my chunk of script with double dashes into an external file and loading it via `src` does the same thing as your test with the code inline in the (x)html. or if you ran it through node.js, or the chrome web tools repl, etc. the xhtml spec is fixing a specific problem with ambiguous embedding between those two languages by hard-coding the value `&lt;![CDATA[`. it is not intrinsic to the JS language, which is what we're here talking about. if you have the inclination to test it out and host it, i'd be interested in learning if i'm wrong. so, at the end of the day, my horribly incorrect syntax was actually the `&lt;script&gt;` tag itself. :/ my bad. thanks for helping me take a trip down memory lane to a time when i was meta-programming JS that targetted crap like ie5 for mac and bleeding edge opera at the same time. moral of the story: externalize your scripts.
I see. Weird that Chrome tries to parse an incorrect date.
Noticed this too, especially post 1.0. I found out it's a known issue in the github listing as of 1.0.2, there is a memory leak or of some sort that causes each dev build to grow progressively larger. I'm sure they are working on it. In the mean time I just manually restart when it gets too slow.
It's up at [agent.nutraspace.com](https://agent.nutraspace.com), but we aren't public yet. Working with Doctors and nutritionists to build our initial content for launch March 1.
Maybe check the "ontouchstart" event instead of "onclick". It is faster on mobile
lodash supports custom builds and provides modularized builds for amd,es6,node, &amp; npm packages per method so you can pick what you want.
I'm adding licenses as requested by users. Apache V2 is now available in 1.0.22. Cheers.
Related https://github.com/lodash/lodash-cli/issues/32.
&gt; Am I the only one who dislike custom text editors ? Yes, I believe so. ;-)
placeholders are customizable: `_.partial.placeholder = 'abc'`.
Benchmarks are a bit pointless unless it is your own application. It is quite possible to make a snappy web app in any of these. The sort of things that cause problem like having thousands of items in a list are usually a sign that you have a problem with the design of the app, not a library problem. With the amount of information a person can reasonably digest on a screen the milliseconds saved by one library vs another aren't going to be a big issue to anyone but library designers. It isn't like these libraries are generally used for games. I would be more worried about ease of using and maintaining apps built with these libraries and the ecosystems that surround them.
yeah, you're the only one. I can understand not wanting to use full IDEs like webstorm, but file navigation and code syntax highlighting are must haves. You're just making your job harder for yourself.
Getting the image is trivial but auto prompting the download is another thing. Browser security prevents me from using an image from sndcn.com on soundcloud.com to prompt the download.
barf
Every time I see one of John Resig's blog entries my mouth drops at just how slick and interesting the script is -- then I look at the date he posted it, and my mouth drops further.
I can force a download but can not change the filename: Cross domain problem :/ var cover = document.querySelector('.listenInfo .image span') .style.backgroundImage .split('url(')[1] .split(')')[0] .replace('t200x200','t500x500') .replace('https','http'), title = document.querySelector('.soundTitle__title') .textContent .trim(), dl = document.createElement('a'); dl.setAttribute('download',title); dl.href = cover; dl.click(); If you use Chrome with ```--disable-web-security``` it will work. **Very insecure!** 
To me the 2 most interesting things right now are: * Native quality game/multimedia in browsers (WebGL, WebAudio, WebRTC) * Isomorphic web apps ES6 and frameworks are just means to an end. What's the end goal? What do you want to *make*? Focus on that, reject anything that isn't production-ready or doesn't meet your minimum spec, and all that noise fades away.
As a front-end developer I can empathise with your concerns. At the moment Javascript is a bit of a wild west for standardisation. It seems everyone including little Billy toiling away at his MacBook after school has an MV* Single Page Application Javascript framework trying to beat out Angular. There are some great changes coming in ES6 like; generators, let and constants, native promises, modules and of course classes. And classes are definitely just a syntactic wrapper around prototype based Javascript we have been writing for years now, it just looks nicer, but I think it will result in cleaner code and make it easier to maintain a modular code-base. I think native classes are a better solution than every new JS framework inventing their own syntax or way to create modular applications. One thing I know for sure, React.js is definitely going to be around for a long time. Its simplistic approach to creating applications coupled with the Flux architecture actually makes for quite enjoyable development and tonnes of people are switching away from Angular to React.js.
DANGER WILL ROBINSON... DANGER....
Thanks!
This is pretty much true of any project that is using gulp/grunt/broccoli etc with Webpack. You simply don't need that shit anymore. Webpack has made our build setup retardedly easy.
you think es6 is bad, wait until es7....observables will blow. your. mind.
That line actually says: standardDeviationAnswer.innerHTML = [soulution].value; So: 1. `solution` yes. `soulution` no. 2. Why the square brackets `[]`?? Take them out. 3. Also, `solution`itself is the answer, not `solution.value`. 4. On line 5, you meant `var standardDeviationAnswer = document.getElementById("standardDeviationAnswer");` 5. You want to get the values of these two: `var sumOfSquares = document.getElementById("sumOfSquares").value;` `var number = document.getElementById("number").value;` and not: var sumOfSquares = document.getElementById("sumOfSquares"); var number = document.getElementById("number"); as you have now. 6. Finally, `document.getElementById("sumOfSquares").value` will still not work, because the id you have in your HTML is `sumOFSquares` not `sumOfSquares`. You need to pay more attention to [what you do](http://codepen.io/anon/pen/yyoJav).
 x |= y; same as x = x | y; 
Just in case – here is more info on the bitwise operators: http://speakingjs.com/es5/ch11.html#bitwise_operators
https://xkcd.com/378/
It's the bit OR operator as others have pointed out, often used as x |= 0 to instantly type convert *x* to a 32-bit integer.
I have cooked up a little example where I experiment with syphon (and will with other React+Flux libraries): https://github.com/Janiczek/flux-syphon-example So far it seems to be very nice. The logging of dispatcher and CLJ state atom are definitely a big win :) And as far as one-state-atom is concerned, I realized only the root component has access to this.data() - and you pass only what's needed to the child components. That's great, actually.
It applies to both. Binding events semantically via your presentation layer is a poorly thought-out implementation. Full stop.
we are using [private bower](https://github.com/Hacklone/private-bower) but not necessarily tied to it. its doing: git ls-remote --tags --heads git://bitbucket.org/company/bower-test.git and that doesn't work because it tries to authenticate, it can't do SSH because of the URL and not bitbucket or git and private-bower requires URLs in that format
var z = prompt('Ok ' + x + ' ' + y + ', now choose your class');
thanks a lot :)
You can still use SSH keys with the git:// urls. Just to be clear, does this document apply to you at all: https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git
Congrats! Really thorough stuff. I like it. Almost too thorough though (that is *not* how my Danish social security number looks). Some ideas for you. * Currying the `is.equal` methods (and others?). I'd love to be able to do something like `_.map(['foo', 'foo', 'bar'], is.equal('foo'));`. Or actually, is there any reason why equal doesn't have the `any` and `all` interface? * I'd like to be able to add my own check. Something like `is.defineNew('foo', /foo/g)` and then `is.foo(...)` to use it. Good stuff though! :)
I have absolutely no misunderstanding about what JSX is or what it does. I think we simply have different definitions of the terminology for "Template". Whether we use the term "Template" or not, it's somewhat irrelevant to what I'm trying to say. JSX serves the same purpose as "Templates" in angular. It represents the layer of your application code that takes a model and turns into HTML. The technology and implementation is completely different - and a lot better - in React compared with Angular. This gives it a lot of flexibility to be used and composed in ways that most other templating systems can't do. But fundamentally JSX in React serves the same purpose as templates in Angular. Previous implementations of this technique that I've used have all been referred to as "templates" without controversy. For the purposes of disambiguation I'm going to use the word "markup" instead. The point is that the syntax of JSX is arbitrary. You could have a completely different syntax compiling down to the same underlying data structure and get the same result. Since there's nothing sacred about the specific syntax of JSX, you aren't in any way tied to it. As an ecosystem we can mix and match and experiment with different ideas. Some users might prefer different syntaxes, other won't. But there's no downside to doing so, so why not? Why is that so controversial? Whether we use syntax A or B, and whether we keep the markup in the same file as the controlling code - it's almost completely stylistic. There's minor technical tradeoffs in both directions, but for the most part it simply comes down to whatever the particular developers prefer. (Again - why is that so controversial?)
I would recommend you use variable names that actually mean something to you. X and Y are good for defining X and Y location, but they don't give you much information about first name and last name or any other type of variable. You might want to start things off a little bit more modularly too. it's always good to keep the data portion of a program from the presentation and manipulation layers. So creating an object that holds the user data and giving it properties for first name last name address etc. Will serve you better down the line. Good luck.
Most of the RegExp checks covers simple cases for now. (time and size concerns) Maybe as you said, I should modularize the checks by their type(type, regexp...) and give more options like: is.socialSecurityNumber(123, 'countryName'); There is a regexp configuration method right now: is.setRegexp(/quack/, 'url'); But it does not set new checks. Noted the is.defineNew() method. All methods are predicate functions. So I planned the whole library to use on flow controls. That's why I didn't use any currying. Thanks for the feedback. Appreciate it.
Personally I'm making the career bet that statically compiled languages are the way to go. On subject that is just another named tech recommendation (Typescript) but what I mean in general is that of the universe of possibilities, I'm narrowing down to where my personal interests are. You should also take a moment to decide what you're interested in an focus. On another note, most of these rapidly moving frameworks are bad for the very reason that they're instable technology. While it is good to see technology progress, it's not good to keep chasing every point upgrade. Pick a tech, use it until its insufficient, contribute back with a bugfix when you encounter one, and make your deadlines. 
Sort of an unfortunate name.
If I made more benchmarks I'd be doing the author's work for him. It's not something I really care about enough to do. I've seen enough benchmarks to know you could rewrite that same benchmark ten different ways and get ten different charts. 
I really like when.js, another Promises/A+ library. It comes with a good API and some very useful utility functions. It's worth a look. 
It means you're being overly clever and not writing code for humans.
This is pretty awesome! Unfortunately, as a coffeescript user, I'm not able to us this since 'is' is a reserved word in coffee :(. Is there a way that I could use the library but change `is` to something like `check_is`? Maybe by passing in a key to the script tag? `&lt;script src="is.js" data-export-name="check_is"&gt;&lt;/script&gt;`
If you use CommonJS or AMD you can name your import whatever you want.
window.is would probably work.
There is an escape hatch method: http://arasatasaygin.github.io/is.js/#setNamespace
Wow! Great feedbacks. I will work on the issues you mentioned. Appreciate it.
There is no "async" or "sync" case. Sync is the amount of time taken within the same thread of execution and async is how long it took within the next thread of execution. Both need to be added together to get the combined time. This is probably easier to explain in code: function benchmark() { run() var syncTime = mesure(); setTimeout(function() { var asyncTime = mesure(); setResult(syncTime + asyncTime); },0); } 
 $('#intro-read-more').on('shown.bs.collapse', function () { $('.read-more').html('Read less &lt;i class="fa fa-angle-double-up"&gt;&lt;/i&gt;'); }).on('hidden.bs.collapse', function () { $('.read-more').html('Read more &lt;i class="fa fa-angle-double-down"&gt;&lt;/i&gt;'); });
Could modify https://github.com/dvv/simple-geoip and make a front-end GEOIP lib... pretty awesome :P
Consider SyncedDB as something similar in scope to Firebase and PouchDB. The readme explains how SyncedDB differs. It is not completely ready yet. But as the example todo application shows it is quite capable already. I'm posting this here because I know that there's a lot of great developers on this subreddit and I'd like to hear your feedback and to see what kind of questions there is for a library like this. I'm exited to share this and hope people will be interested!
Well, as I said earlier, I agree that all benchmarks need to be taken with a grain of salt. They're tools, not answers. For reference, the various TodoMVC benchmarks usually do somewhere around 50 to 200 items, not 1,000 (it was the benchmark in the OP that did 1,000). Sorry if I didn't make that clear. The point of doing so many isn't that it's expected user behavior. It's that you need to repeat the action enough times to make the duration measurable and significant. And the point of doing it from the DOM rather than the framework's API is that it's attempting to replicate a user action, which starts at the DOM of course. (Going even further back, these benchmarks were originally developed to test browser performance, not frameworks, so we're abusing them from the start!) Regarding moving rendering to an async task, you're right that that can produce huge performance improvements. Backbone is actually on the low end here. Some of the frameworks (React, Om, virtual-dom, mithril, etc.) that are designed around async rendering can see improvements greater than 100x. See, as one example, Brian Nolan's article about Om running 800x faster than backbone: http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/ . That's obviously not representative of usual behavior (he says such as well), but it shows how async rendering can have a dramatic effect.
Ah, I didn't realize you could add two functions like that! Thank you!
Could you register it to bower?
&gt; the point of doing it from the DOM rather than the framework's API is that it's attempting to replicate a user action, which starts at the DOM of course. True but doing so in a tight loop is useless. As the frameworks that batch their rendering (async) have a massive advantage over the sync. &gt;Backbone is actually on the low end here. Some of the frameworks (React, Om, virtual-dom, mithril, etc.) that are designed around async rendering can see improvements greater than 100x. &gt; See, as one example, Brian Nolan's article about Om running 800x faster than backbone: http://swannodette.github.io/2013/12/17/the-future-of-javascript-mvcs/ . I'm seeing a 2-4x, where does 800x come from? Either way this just shows my point, Om uses requestAnimationFrame to batch renders, which is similar to _.debounce on the Backbone render method I mentioned earlier. The benchmark on that OM site uses the exact same techniques as the benchmarks you've linked to (simulating dom Events). The only reason Om performs so well compared to Backbone is because the Backbone TodoMVC application assumes that a DOM event to add a new item comes from a user and therefore cannot be performed in a tight loop. Which results in the application updating a bunch of DOM elements that don't need updating as they will get overwritten when the next event gets triggered in the tight loop. Resulting in tons and tons of unnecessary work. Where as OM will just use requestAnimationFrame and wait until the tight loop is completed and only render once. If you add a _.debounce on the Backbone render method or go through the API you will see that Backbone will be just as fast, if not faster, than OM.
thanks
It looks like, while this is very similar, it lacks the built-in regular expressions (like email, CC checking etc) that OP's library has 
The behaviour of `Object.prototype.toString` is defined in the spec: https://es5.github.io/#x15.2.4.2 (&amp; https://es5.github.io/#x8.6.2 for the \[\[Class\]\] internal property)
This is something I would normally leverage css to accomplish. &lt;div class="collapser collapsed"&gt; &lt;span class="show-more"&gt;Show More&lt;/span&gt; &lt;span class="show-less"&gt;Show Less&lt;/span&gt; &lt;/div&gt; .show-more, .collapsed &gt; .show-less { display:none } .show-less, .collapsed &gt; .show-more { display:block } $('.collapse') .on('hidden.bs.collapse', function () { $('.collapser').addClass('collapsed'); }) .on('shown.bs.collapse', function () { $('.collapser').removeClass('collapsed'); }); it's more lines, but separation of concerns is important, and there is likely a class already being added by bootstrap that you could use, meaning no javascript would be necessary. 
I tried http://jsbeautifier.org/ on one of the examples - it's totally readable code :)
Could use a duck-type check. is.duck(x, y)
Hi thanks for the elaboration! Quick follow up. I know we use anonymous functions so that they don't load up in memory unless they are called. Does the function expression behave in the same manner or does it having a name make it more like a declared function? Also do we only use function expressions if we want to call itself, within itself recursively?
Yup, First rule of development: KISS
``` array.push(...array) ```
That's a really nice site. What did you use to make it?
The server you're requesting the data from needs to support JSONP responses for your code to work (the one you linked to doesn't). If the server doesn't handle JSONP requests then there's nothing you can do.
Not to defend their marketing dreck, but one case where I see obfuscation as semi-legit is for a game that you don't want to see scraped and pasted on another site that tries to make money from it via ads. It's still not going to stop anyone who's determined, but might deter someone from simply auto-scraping and uploading.
Gracias! setNamespace is perfect
Very intrigued. Looking forward to hearing more info about this soon.
lol that's like saying assembly took a lot of its features from C -- you literally can't implement something in coffeescript that's not implementable in javascript. And if ES6 took its ideas from CoffeeScript, as soon as its the norm we won't need coffeescript anymore, right? So, let's add another level of abstraction and segregate the community because a small minority can't handle the braces.
Yea, I didn't get as far down as the environment checks. Most are useless and perpetuate the bad practice of designing 'only for ipad' or 'only for mobile' etc.
Yeah, but after the whole Netflix not researching how Express works and then trying to blame Express for their design choices... who cares.
It could check that all the same properties that exist on x, also exist on y. This could be done using a shallow look at the properties names and comparing them. 
I am in the same boat here. No money for the schooling but trying to learn programming and do my best learning actually building something. For me it might be a little easier because before I got decent at JS I was already pretty familiar with Python and Ruby and dabbled in C. So I don't really know a good direction to send you on but I can give you a few resources. [Codecademy](http://www.codecademy.com/) is a good place to play around with JS and learn a bit. [EloquentJS](http://eloquentjavascript.net/1st_edition/contents.html) it is book learning but something you just need to read over. This is especially true going to a true programming language. You gotta get the fundamentals down. [Webhammer JS](http://www.webhammer.com/javascript/index.html) has some good information some of it is older but for you just learning true programming it's not bad stuff to learn [MDN JS Tutorials](https://developer.mozilla.org/en-US/docs/Web/JavaScript) and shameless plug [The Zen Coder](http://codepen.io/tourn171/zen/let-s-do-canvas) because I am starting a blog series on canvas if you want to check it out. 
Forgive me if I'm missing something, but the OPs library seems to have a magnitude more helpful methods for common validations/checks. E.g. creditCard, email, url, startsWith, lowercase, etc. Therefore not **literally** the same thing at all. 126 vs 783 lines of code, is a kind of a big difference. Same name, same basic idea, but entirely different execution.
this. when I see a project or repo that uses Coffeescript I immediately click the x. Next.
Disclaimer, this is a little subjective I think that the worst thing about the syntax, is that it advertises itself like a C-family language, and although is capable of behaving like that, and there always were people who tried to imitated other languages with javascript, and I don't think they should. As long as frontend goes, Javascript's only role is to be the layer between the DOM and the server, and it's absolutely perfect at this role. You can modify properties with a couple of chained function calls, and you can communicate with the server as easy as writing a function. The problem is, that doing this, it looks ugly and it feels shaky, like there's too much going on that you don't have control on, and I blame the C look-alike syntax for this. For example, people missjudge the scope of a variable, and the blame is not on the fact that javascript's var is badly implemented, but because people feel like it should behave like in any C-looking language would. Keep your javascripts simple people. Concerning back-end, as node, I wanna try it in a functional-programming style, for which, the fact that is event-driven means that is way better at doing this than most other languages. And it looks absolutely beautiful doing this. My vision is to handle Http in the simple most intuitive way possible, by chaning actions, and abuse concurency and piping. Cheers
Do you have something you'd like to build? In my experience building a thing while figuring stuff out along the way works pretty well.
from the [HN link](https://news.ycombinator.com/item?id=8961937) above it looks like it works sort of similar to [Appcelerator Titanium](http://www.appcelerator.com/titanium/) 
Very interested in this. Appcelerator/Titanium had a 20mb hello world app, so it would be nice to see viable alternatives that don't trade file size for native UI.
Everything compiles to binary so that [argument is void](https://github.com/paulmillr/es6-shim/). As soon as ES6 is the norm, it becomes a matter of preference of syntax. Abstraction is fine. Your "community" doesn't exist and coffeescript is used by [a very large amount of people](http://adambard.com/blog/top-github-languages-2014/). If you don't understand coffeescript, that's fine, but don't presume it's terrible. I love coffeescript so I'm happy to see ES6/7 doing their own take on the feature set. Except for the indented syntax and other ruby-isms, most of what makes coffeescript great is in the ES6 spec. I will continue to use coffeescript because of browser support and I personally prefer indented syntax for no other reason than I am lazy. If the time comes, I won't hesitate to adopt whatever new methodology makes my life easier. If you want to argue further, take it to /r/coffeescript because I don't really have time to bitch about subjective matters.
Code School is pretty awesome. It *does* cost money, but IIRC there is a 72hour free trial going around right now, and I've seen coupon's online to get a first month for like $7. 
bring me my drink first
&gt; This is wrong. The way the tests are structured the DOM nodes are always there for interaction. I'll take a look. There are a lot of versions of this benchmark floating around, and it's been a while since I looked at it closely. I do recall that when React was first added, running the benchmark resulted in 100 active todos still in place, since the complete and delete steps worked on extant DOM nodes and React hadn't rendered them yet. I know it was made at least "more sync" to pass. I also remember the dispute about vue.js' version and whether the bench was a legitimate way to compare sync and async frameworks: http://vuejs.org/perf/ . In terms of "closing the gap with Om," I was primarily referring to cases like the 800x one. For cases that actually render DOM (rather than just twiddle javascript objects), I'm not surprised Backbone is comparable. Not a lot of overhead. I wouldn't say don't trust benchmarks, but I would say to regard them as exploratory: how does code X in execution environment Y respond to situation Z. That can be very useful knowledge, even if (and sometimes precisely because) a situation is unreal. But we need to understand that the meaning of the results is often complicated.
Uncaught DOMException: Failed to execute 'querySelector' on 'Document': '%23part1' is not a valid selector. this is the thing that comes up when i try to put into the java console on chrome
Is it too soon to get excited? :P 
^this Same goes for things like crosswalk and the like, which bundle a native Web view and js interpreter. I'd be keen to know how light or heavy the per app overhead react native adds.
That seems more like structural typing than duck typing.
Yeah. You need to detect if there's the GET param `callback` and then wrap the response with that value as a function call. e.g. `/json` returns `{ "a": 1 }` `/json?callback=jsonpCallback` returns `jsonpCallback({a:1});`
Hey! Can you share a real world example about how to use and benefit from it? I'm very eager to see if I can use it within my project. Thank you.
why not make every method into a separate standalone module. This will become bloated as hell
Removed since this is more of a marketing spiel than anything.
This guy wrote the same thing THREE years ago https://github.com/Cedriking/is.js
Perhaps try proxying the request from your server
 Uncaught DOMException: Failed to execute 'querySelector' on 'Document': '#23part1' is not a valid selector. still nothing came out
Might be time to learn React, then.
replace every instance of %23 with # (not % with #)
It's not void. "Everything compiles to binary" is such a cop-out and you know it. CoffeeScript is a superset of JavaScript, you will never ever be able to do something in CoffeeScript that's unique to itself and not JavaScript. The community is everyone who writes web/node applications, libraries or plugins. You're so inept to the global spec of the tools you use. Even your link defending coffeescript popularity shows it's just a drop in a huge bucket. Since all CoffeeScript repos are also JavaScript repos, considering their totals CoffeeScript comes right in around 1%
From the 'Regular Expressions Cookbook'. Luhn looks good. Thanks.
&gt; You can also drop it into parts of your webapp without having to build the whole shebang up as React. Such a great aspect of it. Though i have been learning to use react+flux as a SPA framework. It is really quite nice.
Proxying, I assume, involves bouncing the request off of another external server that allows it? Such as Yahoo's?
Another programmer who doesn't know what [IEEE754](http://en.wikipedia.org/wiki/IEEE_floating_point) is. 
Yeah stackoverflow really is one of the best resources for programming questions. When I hit google for a programming question my query typically includes "site:stackoverflow.com"
You are as clueless as the rest of the people downvoting me. Your nitpicking semantics is a troll. Come back when you have a few decades of programming experience. 
The video for this keynote is available here now: https://youtube.com/watch?v=KVZ-P-ZI6W4
How does that article invalidate anything I stated? 
Perfect, thanks!
What makes you believe that?
Which slider plugin is this? There may be some events that the plugin emits that you can bind to, such as an 'on range change' event.
Whatever is inside the code block should be syntactically valid code. Mixing in punctuation from english into JavaScript syntax is not a good idea and will just confuse people.
Yep. :/ Intellisense just really doesn't seem to like to append "new" stuff to an object it's already seen.
I've never really bought into the "don't use the user agent string" thing. Plugins can break it sure, but they can break anything - are there common plugins that are known to break it? It changes frequently, but always with backwards compatibility as the foremost concern, as evidenced by its horrible convolution. And the fact that it can be spoofed I see as a pro: a user who spoofs it wants you to believe they're using a different browser, and won't be surprised if things break.
Sorry, don't follow what you mean. Got a code example? JSFiddle link is in the sidebar.
They told us it in use in the groups app. They didn't say anything about it being used by either Instagram nor the Facebook app.
Comma on the inside of quotes is style, not grammar or language, anyway, and that only applies only to US English. Language is fluid. Don't sweat it. 
Can I get a bower version?
kudos for the sincere answer. you sir gained my respect. 
i like it, can you make it run indefinitely? Also, was this accidental or intentional? just curious
For real 
When will "trying to validate email with regex" stop??
You could massively cut down on the use of divs by spacing out the text in a div to the desired size and putting the icon as the content of a pseudo before or after and fitting it accordingly. edit - crappy example here http://codepen.io/anon/pen/gbxXLP
I don’t think IEEE754 has anything to say about the first WTF in the article, namely that there are two `isNaN` functions with very slightly different semantics.
react-router and react-intl are great 
Sounds exciting.This will probably make applications more compatible easier.
Life is in beta, baby^tm
While true, they told us about the chat and comments system on the facebook app, and I've seen before that they used that on the native app as well. Also, have a look at the instagram app for ipad...it is not 'native', I'm going to assume it is using something similar to react-native...just a hunch...even the wall on the iphone app for insta isn't completely native. They've also been developing this stuff for awhile, sounds to be about ~5 years according to the video from today. 
Because in the first example you're just assigning the arrays to random variables; they're essentially lost. Attaching them to 'this' means that they become properties of the returned object. Your WidgetData function should also return this; by the way.
Referencing [this MDN article](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy) where ` http://store.company.com/dir/page.html` to `http://news.company.com/dir/other.html` results in a failure (*Different host*) I would say that this is not possible by default. However, there is the [Changing origin](https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Changing_origin) chapter that states: &gt; A page may change its own origin with some limitations. A script can set the value of document.domain to a subset of the current domain. If it does so, the shorter domain is used for subsequent origin checks. According to the example, if a script on `http://store.company.com/dir/other.html` executes the following statement document.domain = "company.com"; it then passes the origin check to `http://company.com/dir/page.html`.
Yeah some checks are tricky and does not cover the whole cases. I'll add and remove checks by the directions of the issues.
I use void (function() {})() as my iife, in case it gets concatenated with other iifes with no trailing semicolon, cause I dont use semicolons.
It is exactly the context where I saw it for the first time! Thanks for better detailing this!
SO very confused now. So you're saying that by my saying: WidgetData: function() { type = null; json = []; div = []; }, that "json" and "div" (and even 'type') do NOT belong to the WidgetData object, but rather are random global variables? What kind of code structure shit IS this?
It just never-ending seems like when I finally think I've got my head wrapped around this jack-assed structure of JavaScript, that suddenly NOTHING works at all like it should. Even by implementing your suggestion of adding "this" to everything seems to have ALSO broken everything. I've been programming for 20 years in multiple languages (Java, C#, C++, VB, all flavors of Basic, Python, Delphi, etc.) and I've NEVER seen anything as assed up as JavaScript.
Nice strawman but I was referring to using coffeescript over ES6 as I need to support browsers like IE8/9.
Thats bookmarklet code, so why not turn it into a bookmark. In Chrome add a bookmark, pick a title, and put that code in the URL section. Go to you link, wait for the page to load and then click on that bookmark and the code will run.
So as someone who's just started diving into Angular in an effort to get up to speed with modern front-end dev stuff and hopefully landing a job somewhere, what should I do now? Would it be better to dive into React instead, while I am not attached to any front-end framework yet?
Hi folks, Found a domain name last night which I found too good to slip away. Decided to buy it and set up a Telescope clone. I don't know if there's anything like this site already, but it's basically a Crater/Telescope-like news site for EcmaScript6 (ES6) news and tips. I'm pretty eager to learn more about ES6 myself, but I don't know enough to actively run a blog on the topic, so I thought this would be a good opportunity to learn while extending the community with "just another news site" :). What are your thoughts on this? Is it in any way interesting?
Sure, good suggestion. I'll do that :-)
its this one from the jquery official site http://jqueryui.com/slider/#range if i could lock the pointer onto the handle while it was dragging then mouse up wouldn't be a problem
 &gt; 'truthy' || 'second' 'truthy' &gt; false || 'second' 'second' &gt; 'truthy' &amp;&amp; 'second' 'second' &gt; false &amp;&amp; 'second' false 
Do they use React alone? Or with combination of flux for the MVC capabilities?
I used jQuery and a typer plugin. Rest is good old HTML, CSS, JS You can check the source code on: https://github.com/arasatasaygin/is.js/tree/gh-pages
OP delivered! :-) 
(Clear and re)set a timeout on mousemove?
Note: my code is probably really ugly and messed up so feel free to tell me how to write a way simpler one and more efficient one! Thx ahead of time
AFAIK react doesn't have two way data binding like Angular, but it's wayyy faster working with the DOM, so Angular certainly still has a place different from React. With the current state of web dev though you'll want to focus on how and why frameworks work because you'll likely have to learn a new base tool like these every few years or less. The most important thing is to understand your available toolbox.
From reading, basically Angular is much slower because it updates the live DOM so much which is really expensive, especially with large ng-repeats. React has virtual DOM which makes things really fast and allows you to render server side apparently.
Couple of issues: you clobbered your draw() function by declaring it twice. That's why 'frame 1' isn't being drawn. Also, you're testing for clicks *outside* of the black box. I'll leave that for you to fix. https://www.khanacademy.org/computer-programming/spin-off-of-test-clicker/6302536995438592 EDIT: outside being directly below the black square.
Hey r/javascript! I've spent the last six months working on this UX framework, [Redshift](http://redshiftjs.com). It's designed to help you create animations, input tracking and physics-based movement (plus handing-off between any of the three). It's a little different from your usual animation framework (like GSAP or Velocity) as you write the actual setters and Redshift pumps the numbers out to you. So you can make callbacks that utilise any technology, any framework in a manner completely optimised to your website. Any feedback you have would be great, this is the first time I've showed the wider world so it'll help me mature the framework and iron out any bugs. Thanks, and I hope you enjoy using it! **Edit:** A quick demo, we modified a Chris Coyier CodePen demo to make it draggable in 5 minutes http://codepen.io/anon/pen/YPxaNK 
Thank you guys !
Cheers. I'm thinking of having a go with this and also Meteor as a comparison. I'm sure like many webdevs I have the problem of having to much work to do to get time to learn new stuff...
By the looks of it, this is all being defined on EcoBar ... So, a question, in your head, what should type, json &amp; div be referring to? To explain a little further though... - JS is function scoped. - In most (all?) those languages mentioned, you would be using type, json &amp; div without them being defined. Since you're inside a constructor (new), but have not defined anywhere at that stage. (Unless you think just having them there should define them on the object?) - In JS, it will keep looking for them up the function scope chain, until hitting the root scope - usually the window object in a browser. - If not found, it will define them on the root scope. - By adding this.type, this.json, this.div; you are now defining them on the newly created object instance. - Don't just use this.variableName *everywhere*, only when you're expecting to be working against a usual this object. Expected is usually, when creating a new object, when calling a method on a created object, when an event happen and the this will be the DOM element upon which the even happened (depending on how you have your events setup). - Any function can be called with 'this' being anything you want - though it's best be clear of your intent, and preferably not stray too far from the expected. eg. JS apply function ... apply allow you to call a function while giving it an object to use as this inside the function. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply var anyRandomFunction = function() { ... }; var myObject = new MyObject(); anyRandomFunction.apply(this); And then anyRandomFunction will run, but inside the function this will be myObject. - Having this be changeable is such a fashion is very handy for how JS can manage events. function evtHandler() { this.style.backgroundColor = 'blue'; } document.getElementById('divOne').addEventListener('click', evtHandler); document.getElementById('divTwo').addEventListener('click', evtHandler); Same function of course, but this will refer to the DOM element which the event happened on. Or you could do something crazy like ... (please don't!) evtHandler.apply(document.getElementById('divOne'));
Demos?
@tomo clarified that in the keynote yesterday: &gt; Part of the app is Obj-C and AsyncDisplayKit. Part is React Native. I challenge you to figure out which is which. (paraphrasing from memory)
You lost me pretty early in. &gt; JS is function scoped. As are most languages. A variable created inside of a function (or a loop, for that matter) only exists for as long as that function/loop exists. &gt; In most (all?) those languages mentioned, you would be using type, json &amp; div without them being defined Here's where I'm utterly lost. In all of the languages I've mentioned, you would very explicitly declare/define those variables. This is where I seem to have a disconnect with JavaScript. Explicit declaration is not only unnecessary, but explicit type declaration is even impossible. &gt; In JS, it will keep looking for them up the function scope chain, until hitting the root scope - usually the window object in a browser. How do I stop it from doing that? Is that the purpose of the "this." prefix? To explicitly declare them belonging to that object, and that object only? So here's what I've changed it to: //The "WidgetType" structure is used to pass info to widgets. WidgetType: { type: null, data: [], Data: { div: null, json: null, } }, listOfWidgetsNeeded: [], addToWidgetList: function (strType, json, target) { //Check to see if this widget is already in the list. var currentType = null; for (var intCount = 0; intCount &lt; this.listOfWidgetsNeeded.length; intCount++) { if (this.listOfWidgetsNeeded[intCount].type == strType) { //This "type" exists. currentType = this.listOfWidgetsNeeded[intCount]; } } //If we've gotten this far and "currentType" is still null, it doesn't exist, so create it. if (currentType == null) { currentType = new EcoBar.Widget.WidgetType; currentType.type = strType; //Add it to the list of widgets needed. this.listOfWidgetsNeeded.push(currentType); } //With this widget type, add the data for the new widget. tmpData = new EcoBar.Widget.WidgetType.Data; tmpData.div = target; tmpData.json = json; //Push the data node to the current "type". currentType.data.push(tmpData); //bail. return; }, I'm now getting an "object is not a function" error when attempting the "new" operator. My head is swimming. I really need a code example to show how to fix it to do what I'm trying to do, and WHY I'd need to fix it that way.
I think Ember is the new Knockout. Meteor is the new Angular which is the old React. React is the new Knockout which is the old Angular. Angular is the new Ember. I hope that clears things up.
...and in the next 6 months it will be something else. I pick tools that suit me and not get myself suited up for buzzword tools only to find out that they are SOOO December 2014. I pick what I need from npm and then I glue it together with some quality styling. The joy of being able to just swap out components you don't like is why I don't touch big frameworks with a barge pole.
You should checkout Prototype paired with Scriptaculous. Some say it's the new MooTools, but I beg to differ.
I used facebooks docs on it all. As well as react router. Used the todo example to get started and just kinda figured it out. There's a recent blog post that explains flux pretty well. I'll see if I can find it later
... Thanks yeah that cleared it all up
I'm so bored with all the hype about this or that framework. It almost comes across as evangelical.
There's a lot wrong going on here. You are returning a fiction but calling it like an object. You have .data and .Data for some reason and your .Data is a function? You should re read some JavaScript syntax lessons and start from scratch. Just because the interpreter let's your code pas doesn't mean its doing what you expect. You're using colons for assignment when you want '='. I'm pretty sure you're just making labels inside that data function
React is here to stay. Flux techniques will continue to evolve and improve.
It is way clearer and less mysterious to say `(function(){ /*things*/})()` for anonymous function definition and immediate invocation.
Last I heard that was not the new Angular, but was the new Polymer.
Frameworks are about as effective as self help books anyway. 
Um what's your code showing of exactly? Those statements don't do much 
Functions in Javascript have what amounts to a context object which can be set to anything. For instance, if you take this code var log = console.log; log("Hello World"); you will get an error "TypeError: Illegal Invocation". This error occurs because "this" in this case is set to "log" instead of "console" and the console object requires "this" to be set correctly (I'm not quite sure why, just that it does). If you call it like this log.call(console, "Hello World"); then it will work fine since you are setting "this" to "console". In your case the best way to make a reusable data structure like that would be var WidgetData = function () { // Verify it was called with "new" or do it for them if not if (!(this instanceof WidgetData)) return new WidgetData(); this.type = null; this.json = []; this.div = []; } where every time "new WidgetData()" is called, you create a new instance of the object (because everything in JS is an object including functions) which gets set as "this" within the context of that function call. Setting "this.{property}" is how you refer to properties attached to that new object;
In fairness React seems to work pretty well with plugging your own things in. A lot of it is optional.
To help understand this, you really need to understand that 'this' in Javascript is almost nothing like 'this' in most other languages. In C# for instance, public class Example { private string Data { get; set; } public void SetData(string d) { this.Data = d; } } you know for a fact that 'this' will always equal whatever instance of Example that SetData was called on. In Javascript, that can be the case but it doesn't have to be. When you have code like this var object = { value: "HelloWorld!", fn: function () { console.log(this.value); } } var object2 = { value: "Different Hello World!" }; object.fn(); //outputs "HelloWorld!" object.fn.call(object2); //outputs "Different Hello World!"; When you call 'fn' on 'object' normally, 'this' is automatically set to 'object' by the javascript engine. When you call 'fn' on 'object' using 'call' instead and pass object2 as the 'this' parameter, now when 'fn' accesses 'this.value' it's pulling the value property from object2. 'this' defaults to the window object (the global scope) so if you run this code // create an anonymous function which gets called immediately ( function () { console.log(this); } )(); then you would see the window object being logged. 
Happy I could help, if you've got any more questions feel free to PM me. 
Heh, yeah take Arizona for example... They don't have DST.
Just remember you asked for it. ;)
Lol that's totally fine :) I tend to have lots of down time at work so answering programming questions is a fun way to pass the time. That and it helps someone else learn something cool so its a win-win in my book.
Holy shit, I don't know or use enough JavaScript to appreciate this full framework, but damn that dragging effect is cool.
Probably the worst decision that group has made. I don't expect it to stick. 
Silverlight was almsot custom designed to make displaying video on the internet quick and easy. Its failing was that it wasn't much good for anything else and the ease of use features it had Flash went and added later. Them liking silverlight for what they were doing at the time was perfectly reasonable and sensible. If you want some proof go look at articles comparing the two video players when it first came out, Silverlight was way less code to make it work.
Well, if you're REALLY bored, feel free to go to www.javin-inc.com/ecobar and proceed to tell me everything I'm doing wrong here. :D I'm from an app dev background, and just picked up JavaScript 2 weeks ago, so I'm sure there's a world of structure problems with this code I've been hacking together.
You're a stupid cunt. I'm done helping you. Enjoy your shitty JavasScript that's not even close to right. Also... nobody suggested you do "hours and hours of JavaScript syntax lessons". Maybe learn the fucking basics? But yeah continue being a huge cunt to people helping you out and thinking that you know more about this shit than I do. It's not like I have a degree in this shit or anything, i'm sure You know so much more about whats right and wrong than I do! Who the fuck asks for help with their awful not even close code and then gets mad when someone tells you to start over because it's not even fucking close to right...
I feel trendy that I recognized it as a Telescope site. Anyways, already signed up and submitted a link! Thanks for posting.
Got it. 8-/
The js based frameworks ecosystem is really starting to diversify. Getting hard to play with all the new toys to any level of real depth.
That's kind of what I was trying to say here. A couple of years ago, it was all Angular. React seems to be dominating the conversation now. Next up, it'll be all Ball-Bearings.
So you're just a troll then.
In 'EcoBar.js' ln:243 you could replace // missing a 'var' here fyi unless I missed an earlier declaration intEqualFound = strTemp.indexOf("="); var strParameter = strTemp.substring(0, intEqualFound).toUpperCase(); var strValue = strTemp.substring(intEqualFound + 1).toUpperCase(); with var keyValuePair = strTemp.split("="); if (keyValuePair.length != 2) throw "Invalid Parameter!"; var strParameter = keyValuePair[0].toUpperCase(), strValue = keyValuePair[1].toUpperCase(); Even though it does basically the same thing, it makes it a bit more readable in my opinion plus it makes catching errors a bit easier. In general I'd say its not bad at all especially if you just picked it up recently. I would say that it seems like you would want a structure more like this for your "EcoBar" namespacing; var EcoBar = (function () { // Any variables declared inside this anonymous function are only // visible from within this function so it acts like a 'private' declaration. var useHeader = true, useFooter = true, useClassification = true, cssFile = "default.css", classification = "None"; var parseArguments = function () {}, loadCSS = function () {}, loadSection = function () {}; // etc // anything function you attach to this object will have access to the above variables return { init: function () { parseArguments(); loadCSS(cssFile); if (useFooter) loadSection("EcoBar.Footer.js"); } }; })(); EcoBar.init(); // Works like normal EcoBar.loadSection(); // Throws 'undefined is not a function' The benefit of using that immediately invoked function pattern is that you get more control over who can access what bit of functionality. Only expose what functionality needs to be publicly accessible and you start to make debugging a bit easier. 
It shows what || returns. I had never thought of it as returning anything other than true or false.
Thank you very much! Immediately implemented the split instead of the clunky "intEqualsFound" stuff (that was mostly just me being lazy and not paying attention.) As for the declaration to keep variables/objects private, that was precisely what I was trying to figure out how to do earlier. There are SOME methods I want public, but not most of them. So let me play with that some more! Thanks again!
&gt;that was mostly just me being lazy and not paying attention. Been there, done that lol no judgement here :) &gt;As for the declaration to keep variables/objects private, that was precisely what I was trying to figure out how to do earlier. There are SOME methods I want public, but not most of them. So let me play with that some more! Yep, that should do exactly what you need then. The easiest way to think about variable scope in Javascript is like this. Whenever you see a 'function' keyword, anything within those curly brackets will have access to any variable within those brackets (or it's parent's) regardless of where it's declared sequentially. The actual term is [variable hoisting](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html) and it can be a bit odd until you play around with it for awhile. No problem, good luck with your project!
Oh! No, at least I as the owner won't do any such things, that's not the purpose of the site either. But thanks for the heads up and the kind words! =)
I'm happy I made you feel trendy! Thought I would make something custom with Meteor for this site, but Telescope did the job. Thanks for joining in :-)
Let's hope ES6 will stick around for some time, for the sake of the domain :-D But seriously, I agree with dodeca. 
React + react-router, plus whatever else your app needs on top. e.g. need HTTP requests? superagent or axios (or ${yourFavouriteHere}) depending on whether you want errbacks or promises. React components used as route handlers (and at the top-level of React apps in general) [tend to be more like controller-views](https://groups.google.com/forum/#!msg/reactjs/sB6IPgiXGe4/1os3fnQRAegJ). If you're new to React, you're probably safer working your way up to actually *needing* a Flux implementation, rather than diving in feet-first.
Despite what the website claims, this library is not server-less. [Github](https://github.com/trizko/IceComm) shows that the server does all the socket handling. As far as I can tell, there is no real security in place either. Regardless, this library looks AWESOME for playing around with. Thank you to the creator for implementing this.
Very interesting. It seems that the Facebook Groups app is their test bed for all the cool stuff they're about to drop on everyone. Is GraphQL a different format of data than raw JSON or is it just one abstraction above?
Sort of but not quite, right? Duck typing is based on just a small subset of properties being present, often just one, and in a very specific context (i.e. that your object has a quack function, in the context of being passed to the annoyingDucks() function, for example). That's different to demanding that two objects share all their keys. Or even just requiring that object 1 has all the keys of obj 2. Both of those cases are a lot 'stricter' than the spirit of duck typing, where otherwise *completely different* objects can all be considered ducks, for a specific purpose, as long as they both have .quack(). Your example code though, where you pass in an object literal for comparison (and so could be checking just for quack()), makes sense. I didn't think of doing that - was picturing just comparing two actual in-use variables, which generally wouldn't work for useful duck typing.
Yah. You dont have an astronomical IQ... that's usually the first sign of someone that doesnt have one, directly stating it. If you had an astronomical IQ, you wouldnt be messing with such trivial facets of computing... I also noticed that you believe in things which arent actually based in science and tend to have some small delusion of spiritual grandeur, as well as your delusion of having an "astronomical IQ"
If you concatenate two iifes together without a semicolon, you are going to get two additional invocations instead of two immediately-invoked functions. (function() {})()(function() {})()
I'm not really sure who this is supposed to be making fun of.
awesome... both technically and game-design wise! Kudos!
silverlight is proprietary bullshit and it took some hackers to get it to play on linux. if you stand up for silverlight.....lols
This article got me nice and hard
This was complete shit. It started out moderately amusing and then collapsed under the weight of the writer's lack of imagination, talent, and knowledge.
How does the `that.deletePerson.bind(null, person)` work? Since it's binding null to the `this` in deletePerson(), shouldn't deletePerson() have an error on the first line when you access this.state? 
I would concentrate on this app, and work to iteratively improve it. You have a good, simple base to start with. It might even be worthwhile to fork the project before you start improving it, and leave the original as the 'gold standard' that you can refer back to later on. If I was a teacher and assigning work, I'd probably assign something like the following: 1. Add some documentation, which might include: * API reference * supported environments * known issues &amp; limitations * contributing info 2. Incorporate a "build step" into your app, using either Grunt, Gulp, or any other build tool. At a bare minimum, this build step would: * Run some sort of lint over the code (JSHint, etc.) to catch any errors or bad practices. For instance, it should catch the fact that you're using semi-colons incorrectly -- you have their proper usage swapped: you don't need semi-colons on lines 5, 9, and 13, but you _do_ need a semi-colon on line 26. * Apply some form of minification (Uglify, etc.) to the code. 3. Add unit-testing to the project. This will require: * Adding a unit-testing framework/runner/etc. to your build system. You should probably have it run _after_ the linting and minification. * Writing some tests. This is much more challenging to "do right" than many people think, and there's loads of literature out there on testing so I won't go into that, but don't blow it off as a trivial task; poor tests will just cause a loss of productivity, while good tests will increase your productivity. 4. Incorporate either a major framework (React, Angular, etc.) -or- a collection of libraries that will encourage you to write and think about your app in terms of MVC-ish properties. * You should use this opportunity to explore routers, templating, controllers, etc. * You could also repeat this step with a different framework/set of libs, so that you can more easily compare &amp; contrast what you like and don't like regarding the choices. * You will probably need to revisit some (if not all) of your tests at this point, but that's a great exercise as you will have learned a lot about them at this point. 5. Revisit your tests and documentation, updating as necessary. And then for extra credit: * Add module loading/dependency management (if not already included with your chosen framework/libs). * Add ConDel (continuous delivery) testing to your project using something like Travis. * Publish as a module to NPM and/or Bower. Hope that helps, and feel free to ask any questions about this stuff here, or as a new post should you run into something down-the-road and need some help.
Grow up. 
They are using react as an abstraction layer for native components. While angular/ionic use webviews to simulate native components, react native should be able to behave like appcelerator titanium.
Hi /u/joelhooks, Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just your own content such as `joelhooks.com` and `egghead.io` (egghead.io is included since you most definitely [have a vested interest](https://egghead.io/instructors/joel-hooks) in the site). Thanks for your consideration! domain submitted from|count|% :-|-:|-: [joelhooks.com](/search?q=%28and+site%3A%27joelhooks.com%27+author%3A%27joelhooks%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|19|58% [egghead.io](/search?q=%28and+site%3A%27egghead.io%27+author%3A%27joelhooks%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|13|39%
I'm still a fan of Knockout. It is very simple and provides a lot of power for such a small surface area.
You are fucking horrible at writing Javascript. Just got back to one of the other languages you've been writing for 20 years. you need to stop making new, shitty threads in this subreddit every day.
tl;dr: always use === and !==.
The virtual DOM works like a video buffer. It generates a VDOM for the live DOM. It generates a VDOM from your React code. It then difference those VDOMs and generates a changeset to perform on the DOM. It does this in a batched mode so updating a hundred items on the page will all happen at one time (instead of every time you make a change.) This way you can update the React data as much as you like and React will batch process those changes in the most efficient manner. You don't need to worry if you are changing too much with React. (For the most part... there are ways to tell it to not update.) You just develop the way that you want things to behave and let React deal with the DOM.
Last year there was a lot of obsession around the 2048 game. You could try making your own clone of it.
This may be the dumbest article I've ever read at least a paragraph of.
You generally should avoid attaching event listeners with assignment, as it causes all other predefined event listeners for that type on the object to be overwritten, as well as introducing the difficulty that any event listener applied in that fashion after that assignment will overwrite your function, and it won't get called. Try this, instead: if (window.addEventListener) { window.addEventListener("load", init, false); } else if (window.attachEvent) { window.attachEvent("onload", init); } else{ document.addEventListener("load", init, false); } Where init is the function you defined previously on line 15.
I should also mention it's even more helpful when working on a team. You don't have to make sure everyone on the team knows to run updateNameInHeader() if the name gets updated. Reactor does it for you.
and why haven't they dropped it?
One hairy, old fashioned way to do this is to generate a hidden html form and submit it, using a hidden, uniquely named iframe as the form target so the user isn't taken away from the current page.
Awesome.
You should make this a blog like CSS Tricks
Having worked as a JS developer for a year now I totally agree except for the first few steps because it was similar to other languages I knew.
You could host a proxy server to post to on your own server that connects to your destination server as a client and send your posts that way. Ugly, but it would work.
IIRC, that is correct. Read it somewhere online, and heard the same
thanks all!
would you mind elaborating? Here is the code I am trying to work out: var sidea = prompt("Enter the Length of Side A") var sideb = prompt("Enter the Length of Side B") var sidec = prompt("Enter the Length of Side C") var s = (sidea + sideb + sidec) var ss = (s/2) alert(ss)
I am not sure, what's hb height base and height? Then it's a = ( hb b ) / 2
Thanks for the precision.
Hi /u/Croaky, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `robots.thoughtbot.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [robots.thoughtbot.com](/search?q=%28and+site%3A%27robots.thoughtbot.com%27+author%3A%27Croaky%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|113|90%
Don't worry about is being difficult .. if you're two weeks into JS and do a good job getting your head around this stuff now, then you're already off to a flying start. Most languages (all the other one's I've used anyway) are block scoped. For example, you write a loop (standard for loop), and you end up with a block that get re-run for each iteration. In other languages, any variables made inside the block are scoped to that block. In JS, any variables you make inside the block are hoisted to the top of the function in which the for loop resides. In other languages, the function itself makes a block, so you get scoping from that. But in JS with it's function scoping you don't get scoping for loops. [more info](http://www.adequatelygood.com/JavaScript-Scoping-and-Hoisting.html) Onto declaration - explicit declaration may be unnecessary, BUT, the variable IS ending up somewhere. It is ending up on the global scope, on the window object if you're working in a browser. Yes, type declaration isn't a thing (though, be aware JS variables do have a type!), but variables should definitely be declared in the place/scope in which you want to use them, and where they make sense. The problem with your 'class' (for lack of a better way of putting it in old school JS - ES6 in a year or two will have native classes), is that your not declaring them on your new object instance. Also, I would suggest not mixing static object declaration with function prototype declaration. When you do something like, var obj = { ... }; You are immediately making an object and assigning it to obj. When you have a function, and call it using new, you are making a new object instance each time you call the function using new. When doing a new fn() call, JS will do the following. - Make an object in memory. - Call your function with this bound to this new object. - -- your function run and changes object, eg. this.newVar = 0; - At end of function running, assign the object to the variable on the left side of the equals , as always! As a quick code review too, in your example above. WidgetType = declared object. WidgetType.Data = declared object. WidgetType.Data.div = null. -- On that one object. WidgetType.Data.json = null. -- On that one object. In your code below, you then try calling new on WidgetType.Data - but like the error says, it is not a function. In your code below/above, you have WidgetType: function(strType) { type: strType; data: []; this.Data = function(div, json) { div: div; json: json; }; }, In this, you say function() { .. }. But then you have code which looks like an object declaration. JS is probably getting confused here. Will go through some other stuff when I get home. ;-)
Registered.
My advice is to never fall to dogma. Instead, always know what you're doing and what it means.
 In principle, I agree. And if you are starting fresh from scratch there is no reason not to. If, however, you're using other people's libraries, plugins etc on an existing codebase, there are no guarantees that everyone along that chain has been practising... So when you get to that line of code where you would need to test a condition for varX, knowing that it is *supposed* to be `true`, there is no way of determining if it would be `null, 1, 0, "1", "0", undefined, void` or `NaN`. So you could write `if(varX === true)` but somewhere, someone (could even be you unintentionally because the JIT compiler won't complain) is not returning on a function so out comes `undefined` instead of `false`. That is the flexibility that dynamic typing affords. And you need to cater for that condition. Are you meant to debate that with yourself when you write *every* conditional? There simply isn't time to consider all that for every possible case. So you just cant-beat-join-them the code into `if(varX)` and move on with your life. Unless it is in the same closure where I can see with my very own eyes the lines above state `var varX = (expression) ? true : false;` then I will write `if(varX === true)`. Otherwise why give yourself a headache over an ethos that is not enforced by the language?
That's a really good explanation!
Flash is proprietary, too. Adobe doesn't stand by Flash anymore either. Technologies change.
What does it mean to inline a function? 
No. (FF 35.0.1)
now if someone could give us access to that sweet github repo...
When will people stop writing about this? Coercion really isn't hard to understand. What /u/g3bj45hg34857 said
Always!
When do you work with variables that can be both `null` and `undefined`? I always avoid such situations because I find it to be bad and confusing design. If I'm using a variable that can be `null`, `undefined` or have a proper value I always initialize it to `null` or a value. Thus I eliminate the `undefined` possibility and I will only be dealing with one "no value" indicator. Only if I'm using a variable that can only either have a value or be undefined I use `undefined` and tests for that.
I really love knockout and I like the first impression of your framework. But first of all: for 5 minutes I didn't find any download-button on your home page. I think a more visible link to github would really help. Second I would like to see a example with asynchronous data-fetching. I feel like there is now intended way of doing it. Anyway keep doing what you doing and I'm waiting for version 1.0!
I think modern Javascript parsers try to be as flexible as possible. Let's say that, if multi-platform support is your target, you should stick to the standard :)
Basically, "loose typing is bad!". Right.
He did say that, years ago, so this is also old news that everyone should be doing.
When providing an "options" hash parameter to a function, the caller could leave out an option or explicitly set it to null (or worse, explicitly set it to undefined).
oh do they? or the market destroys them and they have to
relevant video https://www.youtube.com/watch?v=9sc8Pyc51uU&amp;index=5&amp;list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr
He's right but feel free to learn the hard way.
These tests might be giving false results. The CSS injection might just be measuring how long it takes JS to register the change and the rendering happens after the fact, whereas the DOM changes cause a block until the rendering has been done. I don't know if this is what is happening but it would explain such an enormous discrepancy.
 if( !myVar ) ... //truthy not - true on false, undefined, null, "", or 0 (boolean conversion) if( myVar ) ... //truthy true - true on true, 1, "string", {} var booleanMyVar = !!myVar; //boolean conversion of truthy value if( !!myVar === true ) ... //boolean conversion in use (ugly and confusing method) if( booleanMyVar ) ... //better method if( !!myVar ) ... //another decent method if( myVar === value ) ... //variable must equal value, and not any other if( myVar !== value ) ... //variable must not equal value, but anything else is fine. If you stick to these patterns then you don't have to write huge if statements that catch null and undefined, for instance. The key is to know what data you have, and what is possible for that data, and develop you code around all possibilities. Don't just develop for the happy path, expect the unhappy path too.
Yes, which is why it's great to see that syntax bring adopted by ES6.
I have never fully understood the concern surrounding == vs. === I think of JavaScript as a domain specific UI programming language (Yes, I know it is now being used outside of the original design but if that is good or bad is another discussion.) So let's say you get a value from an input field like so: var numberOfItems = document.querySelector('input').value; What is the type at this point? It's not explicit yet so it's assumed to be a string. Whether or not it is meant to be something else later on, we'll need to validate first but if you want to do something like: if (numberOfItems == 1) { Then there is absolutely no reason why this comparison would not work 100% of the time. This is why I believe that JavaScript was designed with duck typing and default lenient comparisons - because it focused on handling raw user input.
I never know what I'm doing.
Test is missing other ways to manipulate CSS. Should add case for: element.style.cssText
Added 2 extra test cases, it seems still ineffective
And if you use this pattern, there will be, without fail, cases where you handle user input incorrectly. It's a bad habit and makes for hard to understand code. Fast, good, cheap applies here.
I have no wildcards in MY list of dependencies. What broke was another dependency having &gt;= prefixing their version numbers (or one of its dependencies doing the same).
&gt; and a JIT that is even just a little smart should be able to inline that function I don't know if it does, but a smart JIT should also be able to optimize a `== null` comparison without additional help.
I agree. The == operator is very important in languages like JS. To dismiss it completely is foolish; even more so if you need to lean on Doug Crockford to justify that decision. (Remember: If anything has ever caused him to make a mistake, he considers it 'bad'. You'll find that that's why so many people use alternatives to JSLint.) Just learn how it works and you'll have no problems. I haven't been burned by == in 10 years. I don't expect that to change.
Hi /u/naturaily, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just `naturaily.com`. Thanks for your consideration! domain submitted from|count|% :-|-:|-: [naturaily.com](/search?q=%28and+site%3A%27naturaily.com%27+author%3A%27naturaily%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|14|67%
There are too many problems being solved, each with a wide array of opinions about how to solve those problems, for there ever to be a single, "best" framework. This is about like saying, _"We have C, C++, C#, Go, etc., can't we just put them all together and make one compiled language to rule them all?"_ Will never happen.
Nothing is rendering in your fiddle, it looks like some errors are preventing it from running: Uncaught ReferenceError: crossmain is not defined You'll need to post a working example before we can help you.
Nice, now make an online SpeedCrunch (http://speedcrunch.org/)! Also, I really don't see the point of having buttons on a desktop calculator. Don't know why every calculator has them (you can hide those in SpeedCrunch). I have a keyboard, I can just type. Why would I use my mouse to click on those buttons?
Removed, this is not a JavaScript issue as far as I can tell. You might try /r/Chrome, /r/Chrome_Extensions, or /r/Bookmarklets.
Can you make an example where a different object is subscribed to the Player? Let's say Player_B is subscribed to Player_A.
Hi, not exactly sure I understand. Was it removed because it's a paid product? Thanks, Nico
When When When?
What I really would like to see are some easy way to make simple transitions in conclusion with ajax requests. I'm inspired by Google's Material Design. I don't like the colors and the flatness that much, but the philosophy to be very responsiv is something I want to add to my project. Currently I'm using the $route "handler" binding to add some classes manually with jquery. Maybe I can use your mixins to reduce some redundants. Anyway, thank you for your response! I'm looking forward to your big version 1.0. 
So in the video they mentioned last night, but also coming weeks, how is it going to be in reality?
the particular package has 9 dependencies, all with their own wildcards. so instead of working I should be bothering 10+ projects to change their dependency version numbers? Version numbers that are even correct for npm but not correct for shrinkwrapping?
Open article. "vein egos". Close article.
https://github.com/hemanth/coffeescript-equivalents-in-es6 came 15days before the article.
That is good advice, in general. Unless the experience the heuristic is based on looks dodgy, I guess. I openly declare, without blushing, that I do tend to dismiss many of Crockford's heuristics as dogma. And I do so mainly because of two reasons. One is that his stated experience *seems to me* that of someone who has learned to belittle others from not trusting their abilities. The other is that he himself presents them as dogma, and thus many people see them as such. But, of course, my "advice" was phrased as an absolute only to follow the form presented, not because I particularly like absolutes, so you have an advantage on me there ;)
It looks like only grunt-template-jasmine-istanbul and grunt-contrib-jasmine are abusing semver ranges. Where are the 10+ projects that need PRs?
Hmm not sure I follow. They depend on projects that are not abusing semver, so no need for 10+ PRs. 
I agree. I like Douglas Crockford but this post is a Crock-full-of-shit. I remember when I Crockford's JSLint on my scripts years ago and felt bad about myself. Years later, I gained a more well rounded understanding of JavaScript and I can avoid the common pitfalls out of habit. Play with JS enough and you'll figure out a way to write scripts comfortably without being paranoid about truthiness and other JS quirks.
I find frameworks are good when you are working in a team. At least then everyone will be starting on the same page. i.e. terminology, coding standards, and "what goes where" has been decided for you. For solo work they can be a bit of a pain though - like fitting a square peg in a round hole.
How is this advice? You're basically saying "always know everything"
You guys focused only on the second part of the question, but whats with bad things in other JS frameworks? I think that is more important question to address.
I just love this commic :)
I didn't know that you could set and get from localStorage using properties (but it does seem to work in Chrome). Wouldn't it be better to use the getItem() setItem() functions? https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API
A lot of money :/
I never understood this, it seems very short sighted to me, there are plenty of legit uses for ==.
Wait, is the ticket cost €1275 + VAT?!
Droid Ultra in the integrated browser in Bacon Reader.
Sorry, I removed the post before I saw your comments providing more information, so I reinstated it. Carry on!
Thanks!
Correction btw, Droid Turbo - my last phone was the Ultra
There's no ES4, but ES3. It's an old book, but it is a good one. If you want something more up to date, I'd suggest you read [Eloquent](http://eloquentjavascript.net/), and it is free.
Yeah, apparently ECMAScript 4 was abandoned. [Wikipedia](http://en.m.wikipedia.org/wiki/ECMAScript). Try ECMAScript 3 or 5.
I am using store.js. only complaint so far is that it doesn't automatically parse dates into date objects.
I literally logged in to give this post a downvote, and this reply an upvote.
None of those concepts you mentioned are changed in Javascript ES6. If you like the book, I would keep pushing through without fear that it's outdated. Because frankly, it isn't.
Variable Scope. In most other C'sh languages variable scope is part of the braces {}. JavaScript handles scoping in functions, and ignores braces. Note: JavaScript is not really a C'sh language, it is a wolf in C'sh clothing. Maybe wolf is too strong a term...goat in sheep clothing? So, to make sure variables don't escape onto window, you use a anon module around everything. (function(){ /* code goes here */ }());
You are learning JavaScript the right way. Seriously. After you grasp the fundamentals of the book, Mozilla Developer Network is all you need. There are so many inconsistencies and bugs within the JavaScript API that understanding the fundamental concept is required, if you want to understand why things work the way they are.
I definitely had an idea for providing for opt-in classes to be added automatically on a page-view/outlet change. This combined with some css and a set of stock/default (as well as extendable) transitions should be possible. I'll make a note of it...I think a lot of people may find benefit from that. Once again thanks for the feedback...I have some intro videos coming soon...lots more on the way...
So did I lol. https://github.com/tsgautier/node-majic
This is pretty smooth! A few suggestions: * An option to make the cards easier to read; I have to hold my phone at the "I'm nerding out on something" distance right now. Maybe just a bold font would be enough? * Fullscreen API on mobile (if possible), though that's more of a polishing touch than anything. Also, what's your thoughts on pixi.js, now that you've implemented it? While I'm sure you wouldn't have published if you weren't happy with the results, was there anything about it you found lacking, or that took longer than expected? Or did the opposite happen?
Thanks! Good to hear that I haven't learned anything the wrong way haha. Yeah, I'm sure learning about function scope, object oriented JS, and closures aren't outdated because frankly, that's what makes JavaScript, JavaScript.
Same here. I jumped from backend to frontend AngularJS development. Tons of holes in my knowledge though. I feel like I'm not a real JS developer because I haven't gone through what JS developers have gone through together as an industry for the past decade+.
How about a synchronous script injecting a style tag via `document.write`?
An equivalent .lockfile like bundler in ruby has would solve some of this.
Yeah. It really did feel like Angular was here to stay... :( I think it's safe to say that nothing is here to stay. We can only pick up different lessons from each frameworks and move on to the next. We learned from Ember/Angular that we don't want an all encompassing framework. We want to make small UI components now.
Closures are a beauty and a beast haha
* Great feedback on the hardness of reading the cards, I will work on solving this. * I will look into Fullscreen for Mobile, pretty sure they don't support it. However try adding it to your Homescreen :) Pixi.js is pretty great. I did however do some pretty nasty hacking to the core engine to port over my own handling of retina displays. I also ported over my own preloader as I found it much easier to use. Biggest annoyance was that I had to write a custom implementation of cacheAsBitmap as Pixi.js currently seems to have a bug on Firefox if you try to cache containers (Rendering looks strange) Beoynd that, I have been quite happy with Pixi.js. 
Hi /u/laserman321, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I just tested it, it even works without.
Highly recommend Eloquent!
It never hurts to know what a language was like in the past. By starting with an earlier version and moving up to the current state of the language, you will have a bit more of an understanding as to why things may change in the future. Also, legacy code has been a problem since Ada Lovelace wrote her second algorithm, so there's that too.
11th line - if you were to change the order to later(); outerFunction(); You would get an error that later() is not a function. If you were to have something like function makeGreeter(greeting) { return function greet(name) { console.log(greeting + ' ' + name); } } var sayHello = makeGreeter('hello'); sayHello('bob'); // says 'Hello bob greet('bob'); // throws error greet is undefined Similar idea to your example, but a little more practical to show how it's working. 
no, the concepts especially are GOLDEN and the more you understand the better off you will be as a JS dev. Everything is an object. functions are first class lexial scoping prototypal inheritance. Most of the additions in ES5 and 6 are syntactically awesome but are all based on these concepts.
Or [1, 2, 3].map(function addOne(x){ return ++x; }); and it's not so anonymous - which can help with stack traces, but doesn't do much for readability for something that small. 
JS is a very conservative language. For the most part, code written today would work just fine on a browser from 10 years ago. The web browser APIs are the main thing that changes, and those don't make a difference to understanding JS as a language. First-class functions, how objects work, and closures are all very fundamental concepts in JS. Those aren't gonna change a bit. "Secrets of the Javascript Ninja" is a solid book to start with, although I find the whole ninja theme pretty silly. Resig knows what he's talking about.
Could you provide a list of all the keycodes you exclude?
Here's an additional nuance that a lot of people miss. Let's look at [appendix A.5 of the spec](https://es5.github.io/#A.5): FunctionDeclaration :See clause 13 function Identifier ( [FormalParameterList] ) { FunctionBody } FunctionExpression :See clause 13 function [Identifier] ( [FormalParameterList] ) { FunctionBody } and let's look also at [section 11.1.6, "The Grouping Operator"](https://es5.github.io/#x11.1.6) (more colloquially known as freakin parentheses): The production PrimaryExpression : ( Expression ) is evaluated as follows: Return the result of evaluating Expression. This may be of type Reference. Now let's put two and two together. Suppose your code looks like this: foo(); bar(); function foo() {} function bar() {} This runs as expected because the *FunctionDeclaration*s are *declared* and *hoisted* like you would expect. **However** what if your code looks like this, which could happen if they're in separate modules and then concatenated in your grunt task for example: foo(); bar(); (function foo() {}); (function bar() {}); What happened? The *PrimaryExpression* rule says that the things inside parentheses are *Expressions*, so our functions are parsed as *FunctionExpression*, not as *FunctionDeclaration*. This is an important distinction because *FunctionDeclaration* is hoisted but *FunctionExpression* are not.
&gt; Resig knows what he's talking about. Biggest understatement ever. Resig is crazy smart, very passionate, and has some of the best credentials a JS dev could ask for. He's in the NYC area, so I get the joy of hearing him speak at the occasional meetup, it's quite nice (his passion for art is quite notable).
Do you mean track down while debugging, or at other points?
"I am currently reading "Secrets of the JavaScript Ninja" by John Resig." Stop immediately. You couldn't have possibly picked a worse book. 
As a long time c.j.s. reader, I can say with absolute certainty, that Resig is terrifyingly incompetent. I'm absolutely stunned that this community could recommend "Secrets of the JavaScript Ninja". If you've read it, you know that it's a book for burning.
What's the advantage of doing it that way?
ok, I'll believe you, but could you provide some rational?
No, I am not new to anon stuff, having done Java, Python, perl,... But, to be sure, I have never been a fan of inner classes, either and for much the same reasons. Of which the most paramount (aside from typographic considerations, that can be important) is seeing code where 50+ lines of callback code are dumped smack in the middle of the main line of action, mixing contexts and disrupting the code flow. (Again, it's not the one liner I mind) Now, to me, that has less to do with functions as first citizens than with prevalent style and perhaps author laziness , while clashing horribly with principles of code organization, structure etc. I have seen examples where hundreds LOCs where crammed in anons only to incite the reader - much later - to sensibly disembowel the horror in three separate files. Too bad that, at that point, most of the readership was probably busy copy pasting the monster all over the ' net.
&gt;page.render('image.png'); Take a screenshot of the page. [Here's a link](http://phantomjs.org/screen-capture.html) to the relevant doc. Make sure that you are logging the browser's console. So if the page is not loading properly due to Javascript errors, they would be printed to the console. [Here is the relevant doc] (http://phantomjs.org/api/webpage/handler/on-console-message.html) I hope that helped set you on the right track, I also recommend that you take a look at [CasperJS](http://casperjs.org/) as you get more comfortable with Phantom. 
He's still learning the basics. Take a look at this: http://ejohn.org/apps/learn/#76 Remove your palm from your face. It only gets worse... Google groups has an archive of comp.lang.javascript Search for "Resig" and take a look for yourself. You can get a nice snapshot of Resig's (painful) growth as a JS developer there. Fair warning: c.l.j. is a cesspit. However, there are some crazy smart people there who take the time needed to make sure that what they post is factually correct. Some of them are real jerks (like David Mark) but they're not often wrong. Resig has taken more than his share of lumps, mostly for sticking to his beliefs in the face of direct evidence to the contrary. For example, it took a solid year to convince him that browser detection was a bad idea. Resig has since forbidden his followers from reading that newsgroup. I can't blame him. If I were him, I wouldn't want people who admired me to read those posts either.
I'd say at all times. It's very frustrating to continuously detangle indirection like in my above example.
/u/Gelus's is how I like to think about it too. Also, http://int3.github.io/metajs/ might help.
That is pretty cool. Can it save and load code? ( i'm on a phone. Couldn't really tell )
Functions are first-class values in JS, so the name is wherever you store the value. In "var x = 3" the name is x. 3 does not have a name. Same thing. Anonymous functions have many uses. You can use them to pass a "block" to a function, so that a function can act like a loop or other control structure (e.g. one that closes a stream for you in a finally block, or temporarily sets a variable and sets it back). You can use them to pass lazily-evaluated values. Register event handlers. Basically they replace one-method interfaces in Java. Runnables, Comparators, etc. Sort comparators are a great example. What's really happening is that "sort" has parameterized behavior, and takes a function (a method with no "this") as an argument. Because Java lacks functions, you get a whole ton of extra baggage.
I won't deny that there are many bad JS styles and fads. For example, Node advocates for callbacks over threads, leading to tons of callback spaghetti code.
Yum!
If You are in international keyboard mode, you will have a second key stroke to pressed every time you pressed ' " ^ or `. You will surely count it as two keystrokes instead of one.
Which obscure parts? Is there a sample?
This really needs a table of contents. $3 isn't a lot of money, but nobody is going to just buy something without knowing what's in it. 
I have, out of pure curiosity and for the good of others: * 0.1. Self Invoking Functions * 0.2. Floats Operations Imprecision * 0.3. Hoisting and Conditionals * 0.4. Checking Properties * 0.5. Closure and Objects * 0.6. Conditionals and Functions * 0.7. Delete * 0.8. Detect Internet Explorer * 0.9. Don't judge a book by its cover * 0.10. Encapsulate collection * 0.11. Even or Odd * 0.12. Exit nested loop * 0.13. #1 Fooling around boolean * 0.14. #2 Fooling around boolean * 0.15. Ghost Array * 0.16. Input Search * 0.17. Invaluable * 0.18. JSON * 0.19. Nested Scopes * 0.20. Now you see me... * 0.21. Frozen * 0.22. Point * 0.23. Running Man * 0.24. Scope * 0.25. Spartacus * 0.26. Terminator * 0.27. Timers * 0.28. Undefined Values in Arrays * 0.29. Array Map and ParseInt * 0.30. Variable Scope That said, the headings are not as informative as you'd expect.
Upvote for truth, I went to buy, but didn't because of no paypal (my credit card is in a different currency and I get a fee for buying in $, so I use Paypal for that).
I don't find myself writing anonymous functions very often and mainly because they are not easily testable. The only cases where I'll write an anonymous function are wrapping a block of code in a self-executing function. The argument can be made that anonymous function can be "tested" based on spying on other methods that are called within the anonymous function. But for me I prefer simplicity and testability so I don't see anonymous functions as being more simple than a named function reference. I find anonymous functions lazy in most cases.
Even given the fact that this is Europe, I doubt the fees are 699€ 
let greet = "Hello"; let name = "Jon"; concatenation -&gt; greet + " " + name + "!" // Hello Jon! interpolation -&gt; '`${greet} ${name}!`' // Hello Jon! interpolation for dict: A message (spoken or written) that is introduced or inserted; "with the help of his friend's interpolations his story was eventually told"; "with many insertions in the margins" 
I guess this is a nice "challenge" question, but I hope nobody would ever do this in real-world code...
Right, I understand the syntax. I am asking about the benefit of doing so. 
I haven't used it but you could check out Atom Shell by github. It's a bit newer so may not be as mature as you would like. https://github.com/atom/atom-shell One that I have used is deskshell, it allowed packaging into Windows executables, but it was still fairly heavy when I was using it and the packaged app was at least 80mb (source and assets less than 2mb) http://deskshell.org/
keyboard input?
Syntax is one major benefit. Other benefits are in multiline strings, templates, jsx et.al
In your example: `greet+" "+name+"!"` = 20 characters `'${greet} ${name}!'` = 19 characters Is one byte really worth that much? Or is this just another feature for people coming from other languages with interpolation? I understand the benefit of multiline strings, but templates can also be done with concatenation. I'm not as familiar with JSX.
Full stack? If so, meteor is awesome but not sure how well it will scale. 
ah, missed that. looks like PHP storm needs their linter fixed ;P.. 
For some reason, π x 5 returns 15.7079... but 5 x π returns 0.
Basically reduce takes a series of things and "reduces" it to a single value. [More info](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce). A few examples of using it: - summing a list of numbers - getting the max or min of a list of numbers - concatenating a series of arrays into a single flat array - reducing an array of items [into an object](https://github.com/mattdesl/functional-recipes/blob/37f7f62ecf2cddd1aa11e4921746d04c9754b1c6/frequency-2.js#L20-L23)
Briefly, I would use [event delegation](http://robertnyman.com/2008/05/04/event-delegation-with-javascript/) instead of adding an event listener on each button (lines 28-29 and lines 39-40 in main.js). I would also avoid relying on `innerHTML` (line 43 in main.js) to test which button has been pressed. You could, for example, use a class name or an id instead. From my point of view, it is a good practice not to use `innerHTML` at all in a JS code, mainly for security reasons.
is it sort of like recursion?
You can always name those anon functions if you want them in the debugger: fs.readFile('foo.txt', function onFooLoad(err, data) { // do something to the file's contents }); 
Thanks,fixed it now.
Still looks exactly the same for me
You can just do cntrl+s though. 
Hi /u/amischol, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
I'm pretty sure he started writing the book in 2008 when jQuery was already popular. I think it's safe to say the author of jQuery knew JavaScript at that point. What kinds of errors are in the book? I haven't read it, I'm asking sincerely.
When you say "with no joy", what exactly is happening? If your problem is that `.large-logo` fades out as soon as you scroll, then you may be missing `{` braces `}` in your `if`: if (offset &gt; triggerPoint) { $('.logo')... $('.large-logo')... }
&gt; but is not worth paying for It's $3. People gittip for more than that.
Good explanation, but with the advent of Node and Node-webkit.. it would be more encompassing to say when the program executes instead of when the page loads.
It does full screen if you add a bookmark to the home page (on iOS)
This is an amazing mobile experience. Feels like a true app. What tools are used? 
Awesome! This is exactly the sort of thing I was looking for. Thanks.
Hey dude, I just wanted to say this looks really nice! I'm still pretty new to js, but I hope to be able to make something like this someday. One very minor suggestion I do have though is using the HTML entity `&amp;times;` instead of putting an `X` for the multiplication sign in order to make it look more uniform. Once again, great job man! 
Thank you for the kind words bro.The mistake I did was reading so many tutorials about the language without implementing anything on my own. If I had started practicing 2 months when I had started to learn js, I would have had fewer bugs and more understanding of it.So don't wait up till you know it all, implement something right away.
I like this :)
Haxe? http://haxe.org/
Have you checked out [Thrust?](https://github.com/breach/thrust) 
- Issue with floating points additions - No events normalization with keycode and composing keys (like ê) - Object used as Hash object - Addition operation is rarely commutative - The Date object in general. - Live collection instead of array - Window.getSelection can only select text offset if the node is a textnode And the list goes on..
That's a good question, and the answer depends. If you're talking about how it works, then no, it's nothing like recursion. Recursion simply means that you're explicitly calling yourself, that's it. Using `reduce` requires an `input` array (whereas recursion does not), and does not require you to call yourself (though you will get called `input.length` times). Yet, if you're talking about the problem domain, then yes, yes they are sort of alike; `reduce` is a specialized form of iteration, whereas recursion is often used to implement specialized forms of iteration. Any problem that can be solved with `reduce`, could also be solved with recursion. Each of the examples above could be accomplished with recursion -- though that's not advised, since the specialized `reduce` requires less code and will perform better.
This is great stuff! I especially enjoyed the use of Web Workers for sorting the double linked list. It's unfortunate about the serialization when transferring an object to a worker. I wish they could find a way to freeze the object in the main thread while worker had control of it and then unfreeze the object when the worker closed.
My takeaway from this article: "Javascript is doomed because, just like sweet potatoes, I personally don't like it."
This article pointed out what I was having trouble with yesterday when I was trying out flux. There are no solid examples of asynchronous actions. Every freaking sample app and tutorial I came across did not do anything with the server.
When I've implemented the alghorithm I've had the impression that the worker are not thread but actors so if you want a change you need to ask it to the actor that own the data structure. This has let me to avoid to think about concurrency but when a worker has sorted his part of the array send a message for be terminated. It's a very clear logic but it's quite difficult at the moment to be implemented because you must remember that the message clone the object and this is a problem for lists because it cause some inefficiencies! :(
See the extra examples we provided :)
Parsing enough JSON to have a visible effect on the UI thread is a pretty rare use case no? Still why don't you come up with something and maybe it will catch on
The problem is that you can't just come up with something and release it to the world. JavaScript is single threaded (with the exception of web workers), so you would need the browser to implement an asynchronous JSON API. To do this, you would need to influence the next version of JS.
Because parsing json is entirely cpu bound.
Remember though: reading is good, practice is better! I personally learn most efficiently when I'm actively working on a project. 
I feel like the best way to explain might be to see how they are written. It is very simple and you may comprehend it immediately: http://jsfiddle.net/qapcqjry/
This. I don't believe most people have a grasp on how exactly the event loop works and why certain operations are async in the first place. You can't just wave a magic wand and make something work asynchronously (in javascript). 
Right, but what do I do in those situations?
&gt; with the exception of web workers Isn't that just the answer then if you did need async json parsing?
No, because objects need to be serialized before being sent to/from different contexts.
You could use things like `setTimeout(fn, 0)`, right? That ensures your code is pulled outside the main call stack. That's as far as I can imagine one creating an async function.
I thought the problem was the transfer but it didn't occur to me that conversion to an ArrayBuffer would be just as intensive. Doh!
Hi /u/jerodsanto, it looks like you're new to /r/javascript, welcome! Thanks for the submissions, but please make sure you read our [guidelines](http://www.reddit.com/r/javascript/wiki/index). In short, you should post from a variety of sources, and not just your own content such as `jerodsanto.net` and `thechangelog.com` (thechangelog.com is included since you most definitely [have a vested interest](http://thechangelog.com/author/jerodsanto/) in the site). Thanks for your consideration! domain submitted from|count|% :-|-:|-: [thechangelog.com](/search?q=%28and+site%3A%27thechangelog.com%27+author%3A%27jerodsanto%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|3|60% [blog.jerodsanto.net](/search?q=%28and+site%3A%27blog.jerodsanto.net%27+author%3A%27jerodsanto%27+is_self%3A0+%29&amp;restrict_sr=off&amp;sort=new)|2|40%
Thrust is being basically rewritten to be based on Atom shell[[1]](https://github.com/breach/breach_core/issues/90#issuecomment-71907332), so it probably makes more sense to go with that for now.
Every async operation is made up of small blocking operations, at some granularity. It's just a question of what the granularity is. You can make a non-blocking, async JSON parse using a streaming JSON parser and web workers. Don't post the whole object, let it get copied in chunks, release the main event loop after every chunk. It'll have tons of overhead but it could work.
that's true but IMHO this adds unnecessary boilerplate and it should be handled by the library itself
Let's see if Facebook addresses this issue with Relay.
Depends what you mean by "mature" for IndexedDB. Safari has ridiculous bugs. IE is missing some features (compound and multikey indexes) and MS doesn't have any plans to implement them. The situation with quotas and what happens when you exceed it is pretty messy. And even in browsers with good IndexedDB support, their implementations are still glitchy if you really hammer them (a long running transaction on a large database is always an adventure). That's not to say you can't use IndexedDB. [I use and abuse it plenty.](http://basketball-gm.com/) But unless your application is very simple, it will cause you headaches.
Well making it asynchronous would allow browsers to process it off the main thread. So while an async API in itself won't necessarily help, it might help browser optimise better. However since most likely a lot of objects would need to be created that might not be feasible.
Or better yet, use the utf-8 character: ×
Mind expanding upon why the others are useless? Here's a list of [data structures](https://github.com/bebraw/jswiki/wiki/Data-structures). I've used [jscols](https://code.google.com/p/jscols/) with great success.
Sweet potatoes :)
The function to enter a number seems to have some extra stuff in it. (Passing the index to the function and returning the function.) It could be written more concisely as this: numbers[i].addEventListener('click', function () { output.value += this.innerHTML; console.log(this.innerHTML); }, false); This also applies to the operations click event function. 
Not entirely sure about this option. If I were to use QT, I may as well use *just* QT, and I have a dislike for the mess that C++ tends to become :P Besides, QT + QTWebKit comes out at around the same deployment size as Atom-Shell, IIRC.
Use Mozilla XULRunner https://developer.mozilla.org/en-US/docs/Mozilla/Projects/XULRunner
Neat. One suggestion: I didn't see a license listed, which means that nobody could actually use your code in a project.
Thanks for the notification! I've added it just now! ;)
Oh so is the problem that the web worker would parse the JSON fine but then stringify it to send it back to the main thread, reversing the whole process?
Simple little calc to examine - doesn't obey any kind of actual math rules! http://jsfiddle.net/gL8u2fgd/6/
Essentially. Objects cannot be shared across contexts because of concurrency issues.
That's true.
A fine exercise, and I absolutely love your documentation. (We could all learn a lot from you there!) Though I'll caution you against thinking in terms of classes when working in JavaScript.
Allowing async JSON parsing would be an easy route to paralleling some of the tasks. It makes sense in some cases to offload a large task like this to a different process or thread that does not block the UI. While web workers seem like an answer to how this could be done, having a standard method that would efficiently parse (or stringify) in a separate threat would be a feature I would probably find effective.
This would be fairly simple to do, but afaik you can't do it with just Javascript. You'll need a database (sql) and will have to write to it using php. 
Isn't the very first example wrong? ES6 fat arrow works like Coffee fat arrow. ES6 has no equivalent to Coffee's skinny arrow other than a full function declaration.
The two libraries I myself have used are [immutable.js](http://facebook.github.io/immutable-js/docs/#/) and [collections.js](http://www.collectionsjs.com). What does your library offer that they don't? Serious question. For example they seem to already have persistent data structures down, and their map data structures are tree-backed.
Javascript on it's own can't send emails. You'll either have to find a 3rd party API to do, or you'll need to use some sort of backend (PHP, Django, RoR etc....)
They already have a database if they are using sharepoint. Could just connect to that database and create one table with a flag record for each department.
I'm playing with node WebKit now and it seems to work well. Size concerns are valid, however, download size for user is only 30mb zipped
I disagree with the logic behind the closing statements of the article. The author states that React is often used with Flux, which is not well documented. Therefore, React is not a sensible choice for developing standard web applications. Prior to making that statement, the author says that React is performant and can work with many different frameworks. So isn't the fact that Flux is not well documented kind of moot? 
You just make it take longer... setTimeout doesn't create another thread, it just puts the call in another queue that is periodically checked for occurances. Edit: I feel this need expanding. You can think of intervals and timeouts in JavaScript as a secondary stack. If you add a timeout, JS places that call in a queue and will wait for a free moment to pull off an item to process. If you setTimeout your parse method, all you do is delay execution. When the VM has a spare second, it will pull off the request at that time and process it. It still runs in the same process and will tie up the interface for the same period of time. It just does it later.
Yes i figured that out, i should have avoided complexities in the first place by not using unique id for every operation because some operations need only one numbers and some require two.
Thank you man, this is so neat compared to the return function.Can you tell me when is it appropriate to return a function ?
have you done any performance tests? I'd worry that the copy offsets any possible performance benefits.
If all you want to to keep form locking the UI, an easy solution is to just treat it like an animation. Do just a little bit at a time until the entire operation is complete. Depending on the type of sort, this should be trivial. It will slow down your sort a good bit, but I suspect that the trade-off will be worth it most of the time. I did exactly that for an intro class I was teaching, though I also included an actual animation. (The whole point was to let students see each step in the sort as it happened.) You'll probably want to complete more of the sort on each "frame" than a single operation like I did.
What a strange company you work at. Anywho: you can use SharePoint's hilariously bad js api for updating a list within a particular site: https://msdn.microsoft.com/en-us/library/office/hh185011%28v=office.14%29.aspx
I thought we established in [the other thread](http://www.reddit.com/r/javascript/comments/2uc7gv/its_2015_why_the_hell_is_jsonparse_synchronous/co7c5cl?context=10000) that data sent from a web worker is serialized to JSON and thus parsing JSON outside the main thread is completely useless?
It hasn't been officially released so no, no-one is using it. 
yes I understand the theory, but have you one any tests to show that the performance characteristics are what you assume?
I'd say serializing is questionably useful. I suspect parsing can be useful (in other words, transferring a string is faster than parsing it). Hopefully someone does a benchmark soon :)
Congratulation on 1.0. We're using https://github.com/twitter/twemoji that does the same without apple emoji images.
The message passing uses the structured clone algorithm, which I would hope is faster because it's just moving memory around instead of serializing everything to a string and then deserializing on the other side. Not sure though.
&gt; structured clone algorithm interesting, never heard of it. just read about it. it still appears that it serialises objects into strings. it's advantage appears to be that it can serialise more complex objects. It may or may not actually be a little faster at doing this, but if instead of JSON.parse in your main thread, you do: 1. pass string to worker 2. parse string into object inside worker 3. serialise object into JSON string inside worker, send to main thread 4. parse JSON string from web worker into object. I don't see how that can cause less blocking on the main thread. (unless the original document requires significant computation as part of the parsing). 
Bro... I love you!! Thank you so much man. Our teacher didn't explain this at all and I tried for 3 hours :/ Do you know a good site to learn JS?
What do you use for Routing?
hey, don't worry about it. I once spent quite some time writing a library for offloading http api requests to a web worker to save tying up the GUI thread ... fortunately, I discovered my misunderstanding before posting the code to /r/javascript :p &gt;worth while if you do the network fetch and initial parse in the web worker as SCA overhead would be halved (only going one direction). yeah, it would be halved, but you still have to "JSON.parse" the string returned from the web worker so unless web workers start sharing memory with the main thread, you're never going avoid that. 
That was the method I was thinking as well. 
Thanks! I'll look into that. I tried your code, but now not even the values change on the page :/ The thing is, I have to use this program called Webstorm for all my assignments, if I put my code in JSfiddle, it's works perfectly. But it doesn't in Webstorm:/
Very underwhelming outcome, the CSS animation could use some polish.
Where is the evidence that OP assumed it was faster?
I have no idea... I just tried what you said and it doesn't work :/
The spreadsheets don't seem to be available? Is it a requirement to load this data from the spreadsheet? Could you just create a JSON array somewhere with the information? Also, your JSON format will not work... { title: {name:url, name:url}, title2: {name:url, name:url, name:url}, title: {name:url} } You can't have multiple keys of the same name (title, title and name,name,name). You would need to wrap these in an array with objects if you want to have a key. {titles:[ { title: [{name:url}, {name:url}]}, { title2: [{name:url}, {name:url}, {name:url}]}, { title: [{name:url}]} ]}
You're actually right, however unconstructive your style is. We'll get that sorted. 
He must have lost his fedora again. Btw, I will definitely use this. Working on a MEAN project and that was my next to-do.
Thanks for the feedback! The key here is the fact that all emails are template based. So you first go to our dashboard, and build your email templates. In the template you can specify the content and the email addresses, all can be filled with parameters from JS calls. For instance, a support email template will have the owner email, hard-coded, and the message will be a parameter filled by the client side. On the other hand, for link sharing you can receive the friends' email and the link details from the client side, but most of the text is in the template. There will also be optional built-in captcha and We'll implement rate control by IP, use cookies, and do some analysis of the request parameters to prevent abuse. Does that make sense? 
Thanks! Great to hear. 
Good link however in that first example where they are comparing Backone view to a react component is a little ridiculous. Does anyone actually do that with Backone? We always render the view. 
Cocoonjs is free to use and allows cross platform HTML5 CSS JS development and can do Windows, Mac and Linux. https://www.ludei.com/cocoonjs/
Yeah, this seems like using JavaScript for JavaScript's sake. Not everything is better done through the client. I wonder if these sorts of tools encourage front end developers to stop learning about other technologies.
IE8 supports localstorage and its sister API, sessionstorage, just fine. IE7 can be shimmed using clientstorage binary behaviours. It's a weird technology from the IE5.5 days.
&gt; Also, I haven't come across a really elegant ORM yet (I was thinking about writing one, but idk...) I would really recommend not trying to reinvent hibernate et. al, unless you're happy with this becoming a fairly substantial project all of its own. I would suggest looking at persistence.is instead.
Thanks for the feedback first of all! To our perspective, there are many simple use cases like support, share, etc., which every product needs even though they're probably not part of the its core. In these cases you might prefer to use a simple tool like EmailJS instead of spending time on coding this. Also, many developers use various cloud based back-ends and only work on client code, so this product is useful for them as well. Lastly, we hope that the clean templates we offer with the service are also worth while for a developer. What do you think? 
What if you use transferable objects?
I think this is a great idea and definitely fills a need. I just finished a simple website for a client, and they wanted a "Contact Us" form. I built the whole thing completely static with Jekyll, and hosted on S3. But of course I needed to set up a server just for this form. I will definitely look at using your service now. Will this remain a free service, or are you thinking of charging? If so what will the pricing look like? Good idea adding captcha as well, that's a requirement for me. 
I pointed that out in case one thinks parsing JSON will take too long. Throwing it out of the main call stack avoids spending too much time waiting for it. 
Thanks. Fixed!
I have little experience pricing things. But thinking about it, this might be difficult to monetize. You're definitely targeting a smaller audience with this. As soon as a project gets big enough/complicated enough to require a backend, this wouldn't be to hard to build out yourself. This sort of thing just isn't difficult to build out yourself, especially since your service already requires Mandrill, SendGrid, etc. So, IF you are going to try to monetize this, you might not even want a free tier. You'll definitely be targeting early prototypes, or simple site like the one I described above. Any other project that would move up to needing to send a higher volume of mail would also probably need their own backend. So maybe a 30 day free trial type thing, and then like $2-5 per month. Then charge a bit more for higher volumes. Just my 2 cents worth of brainstorming. There might be other strategies I haven't thought of.
This might be very helpful to me considering I have a few static sites on Github Pages. Right now, I just use send grid but my api key is just out there in the open... I try to hide it and obfuscate but there's only so much that can be done...
You should check out [scriptular]( http://scriptular.com) - it's a tool for quick writing and testing JS regexp in the browser.
Thanks. Appreciate the feedback!
OP/author here. On the earthquake demo? This is using [THREE.Raycaster](http://threejs.org/docs/#Reference/Core/Raycaster) to capture events. I'd like to come back to this topic and show how you can dial-in event capture in THREE.js (and also add touch support). Hopefully, do some posts/demos on this in the near future.
This seems useful enough to me. Just a little curious why you haven't included any build process into your repo, though. I can see you included built files, but it would be nice to be able to configure which structures get built out and included in the output to save some file size for front-end use. A Browserify build process would be pretty attractive, but anything would be nice to allow a bit of configuration. Do you have any plans for this kind of thing at all?
Thanks, I really appreciate the input on the pricing - it's a good perspective. I personally think that even as a project grows, some things are easier to handle with a ready made service that specializes in them. We also plan to add server side API in the future, so that even if some mails need to be sent from your server (password reset for example), you can still save data, use templates easily, and hopefully save time with the service. 
There's also a demo at http://jphpsf.github.io/setImmediate-shim-demo/ - rather handily for me, as the demo implements something that I myself am having to do for a current work project - implement a non-blocking client-side quicksort.
Thanks for replying. Yes earth quake demo. I think you could add a bigger bounding box around those sticks. Will make it more usable 
NodeJS is definitely a good solution for using Javascript, but it's still server side solution. You can technically access Mandrill or MailChimp APIs from the client side as well (directly, or via one of the wrapper libraries you mentioned), but in such case you expose your private keys for anyone to grab, which is not such a good idea.
Yes of course. As soon as possible I'll provide a build process in order to choose the data structures you want for your purpose.
I think provided it's secure and isn't easy to abuse (from my at-a-glance reading, you have some sort of authentication, which is something)... it's probably going to fill a need somewhere. Keep at it!
What makes us different is the focus on templates - you will create your templates via our dashboard, and a call from the client side will be something like EmailJS.send(template_name,params); We will send out the actual emails with your email service (SendGrid, Mandrill, MailGun, etc') but your keys will be kept on our server. This will make us pretty useless to spammers. Regarding using EmailJS from your back-end - you will definitely be able to do that as well, to allow you to manage all your email templates in one place.
Hey yesman, the keys are kept on our server. Take a look at my other comment - http://www.reddit.com/r/javascript/comments/2uel8f/were_releasing_a_tool_to_send_emails_using_only/co7ulye
Not really. It is just syntax sugar that utilizes the existing prototype structure of JS. It is nothing you can't do in JS already.
Oh the horror of having to write a loop: var my_array = []; for(var i = 0; i &lt; 10; i++) my_array.push(0); In ES6, you can write: var my_array = new Array(10).fill(0); (BTW, in Python you should be using [`collections.Counter`](https://docs.python.org/3/library/collections.html#collections.Counter) for such things.) 
Since npm 2.0 you can use it exactly as you would with `bundle exec` : http://4waisenkinder.de/blog/2014/10/18/npm-2-dot-0-and-the-much-better-star-npm-run-star-command/
On mobile right now but I think you can do my_array = [].fill.call({length: 10}, 0)
Thank you for check it. The spreadsheets it's available, the json format I have described its an example. I read the json from spreadsheet and try to build an object/dictionary, with 3 keys and the value of each key, its another object/dictionary. The fact, Its when I finnish to read the spreadsheet json and build this object/dictionary, If I check it on console, It have the entire data I wanted to get from spreadsheet. But when I go to use it to create the html, when I try to read the objects/dictionary of the each first three keys of the object, sometimes that FOR...IN never run on chrome, but other times its run on firefox and its build the entire html correct. This is why I dont understand what happen, and on javascript console didnt show any error that could stoped the javascript. Also the code is in the head tag, Maybe I should move this piece where the nav tag are? Thank You.
I see, so I just have to add "scripts" section in my `package.json` to contain, say, `"gulp": "gulp"`. Nice.
Hi, thanks for the comment, that's something we're planning to do in a future version :)
Eh, some people think that a class based architecture should not be in a prototype based language and that people should actually utilize the features in it before injecting classes. We transformed all of our user controls at work to JS classes with great success. So I don't fully understand the hate either.
If you're using *nix/BSD, you don't need any of that since mail is built in and works far more simply than this.
I don't think you understood yesman_85's question. How does the js client authenticate to *your* service to send emails? How are those auth credentials secured when all the code is pushed down to the browser?
Well, sending emails from server side usually is quite simple. But that means you need a server, a server side code that sends the email, some way to manage the templates (unless those are hard coded) and at the end, there is a good chance your emails will end up in spam folder, because your server is not whitelisted like, let's say, sendgrid. So sure, it's an easy alternative, but I feel at least for some people, using EmailJS would be easier.
Keep fucking that chicken!
This is interesting! I'm building a serverless web app with Angular and firebase, but need a way to invite people via email. This may be exactly the kind of solution I need. Definitely gonna check it out. Also, how does this compare to a service like Zapier? It seems they offer the same 'client to remote api' service, but are not limited to just email.
Th... this one goes to eleven.
Lodash has so many useful methods, is hard not to use once you start.
Hey runvnc! We're not trying to implement SMTP via JavaScript, which you seem to be referring to. Simply put, EmailJS is an email proxy server, with a JavaScript SDK, that allows you to connect your email provider (like SendGrid) and send template based emails. Sorry if something felt dishonest to you - that was not our intention, and we'll be happy to clear up the confusion.
&gt; fortunately, I discovered my misunderstanding before posting the code to /r/javascript :p Implemented this for fun and thought it was interesting to share, wasn't sure it was useful for anything :P
Well, it seems like a fair few people agree with you - your web host is currently reporting an 'over quota' warning, which must mean that a lot of people are interested. I suppose Firebase does set up something of precedent. And it's not unheard of for companies to set up their own webservices that are spoken to directly by the client. My organization is actually looking at such a scheme for performing searches on the website, with a public-facing REST API for an elastic search node. This approach is not unpopular; I'm not knocking the service you provide. It looks great, and I hope it's successful. Nevertheless, I am a bit disappointed by what seems like a broader trend for front end developers to resist learning about new technologies. It does feel as though if it isn't JS, we're scared of it, or believe it must be less expressive or something. This is something I'm unhappy about, because I think good programmers should be open minded and willing to have a go with tech they're a bit less comfortable with.
Hmm, this is actually quite an interesting use-case, given how common static sites have been recently. If I have Disqus comments, S3 hosting and email.js mail services, I could create a small business site without any need to setup a PHP/SQL backend. That's certainly attractive.
That's the only way I can think of to make this worthwhile - do the network request in the worker and stream results to the main thread. More total CPU overhead but spread out over many small tasks. I also wonder whether you would get any benefits from packing the string into an ArrayBuffer and transfer it rather than clone it.
I feel like this is just a re-invention of [CQRS](http://martinfowler.com/bliki/CQRS.html)
Thanks for the heads up! We increased the quota, should be up now! I don't think the number of people who know server side technologies is getting lower, on the contrary. But I do feel that as the technology and programming becomes commodity, the community is growing, and some parts of it are more interested in server side, while some are more interested in client side. So I wouldn't expect everyone to be interested in all aspects of programming :)
This shim doesn't resolve this glaring bug: https://github.com/YuzuJS/setImmediate/issues/35 These shims are forks to resolve it: https://github.com/calvinmetcalf/immediate https://www.npmjs.com/package/setimmediate2
As I said, email is built in to any *nix/BSD system whether service side or desktop side. At least it is on my FreeBSD system and I regularly email others. Yes, there is a problem if I send from the desktop and their email system tries to verify a DNS name but I don't do general email from there for that reason and I'm always logged in to my server. But that's not a problem with setting up email, which is easy. It's other people's setups that are that issue.
Friends sure, no worries :), you did have a point there..
Thanks revicon, let me try again, and please let me know if I'm not addressing the right issue. The keys are kept secured on the server side, and are never exposed via the Javascript SDK. If you're asking about abuse - I talked about it in other comments, but in a nutshell, the fact that we only allow sending emails based on predefined templates makes it unusable for spam, and our rate limiting and optional CAPTCHA protection will help protect from random abuse. Hope this helps! Please let me know if you have further questions!
Any Too Long, Didnt watch. Planning to watch it soon but can anybody explain me the crux of the whole presentation? Thanks.
&gt; var my_array = new Array(10).map(x =&gt; 0); Sadly that won't work, but you can have something like: var myArray = Array.apply(null, Array(10)).map(x =&gt; 0)
[**@Vjeux**](https://twitter.com/Vjeux/) &gt; [2014-05-19 16:39:57 UTC](https://twitter.com/Vjeux/status/468430871117066240) &gt; @gregyoung flux was indeed very inspired by cqrs :) ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
You are right! Perhaps I should have actually bothered to try it out before I wrote it...
With or without event sourcing? ;) 
Just a note... `new Array(5)` isn't actually an array of `undefined` elements. It's an array of 5 [holes](http://www.2ality.com/2012/06/dense-arrays.html).
Pete Hunt talks about Flux on the front-end and the process (and gotchas) of achieving the same architecture on the back-end; then briefly about how the two can be tied together.
Great. Looking forward to it. :)
Though judging by the down votes the folks in /r/JavaScript didn't think so... :)
Thanks! Will definitely watch it tomorrow.
Hi, I can second this. If someone already has a back end server, they have very little incentive to use your solution. Your real market is likely be static sites, where the backend simply serves a file directory. The popularity of commenting solutions such as disqus can give you an idea of how large your market share can grow to from something like this. All in all, this is great, and good luck with launch! Oh, and another thought: You are simply forwarding requests to a "real" email provider such as sendgrid. I understand that this is your MVP, so that's the most expedient approach to take. However, if you also become the "real" email service as well, you would be able to charge for this service. When you do so, I think you should have a free tier which simply gives you access to the API, and the user needs to use a 3rd party such as sendgrid. But for the paid tier, you offer an all in one solution. That'd be what I'd pay money for.
This approach of composing stores into a DAG feels a like FRP as well. I've used the latter instead of Flux and it works wonderfully.
Are you relying on any other libraries in your main js? Make sure to include a link to those scripts in your test.html as well. Also, make sure to create a new instance of any objects you're trying to test in your test.js so that their methods are available. 
You have the id set to the same thing on multiple elements. When it looks for the value it finds the first element with an id of tip and finds its value.
The line `var tip = Number(document.getElementById('tip').value);` will only select the first element with the id "tip", so that's why it will always select the first radio button. You need to select all the radio buttons by their name using `document.getElementsByName()` and then iterate through them to check which radio button is checked. Replace the line `var tip = Number(document.getElementById('tip').value);` with the following: var tipRadioButtons = document.getElementsByName('tip'); for (var i = 0; i &lt; tipRadioButtons.length; i++) { if (tipRadioButtons[i].checked) { break; } } var tip = Number(tipRadioButtons[i].value);
Yeah, I'm using .innerHTML in the codepen.io that is posted. Unfortimately I need a way of doing this without any API's. I'm learning JS to re-write the very little big of code on my website in the most minimalist way possible. I was using classie.js (functions to add/remove classes etc). I have everything working on my site. But I'm trying to move the onclick event outside the html, and get rid of the classie.js API.
Thank you so much! I can't believe I didn't catch that. That did the trick.
You can do so without being a rude asshat, that's all.
Okay, DOM level 2 then: http://jsfiddle.net/2vp322px/
Thanks for the heads up! Fixing it ASAP
It's definitely on the to do list :)
I love the language and the way JavaScript *thinks* about some topics, e.g. prototypes. This is one of the reasons I am not really happy with the *classes stuff* in ES6. However, the framework situtation drives me crazy. Dozens of frameworks and libraries for the same task (e.g. ember, Angular, Backbone+Marionette, ... / jQuery, zepto / underscore, lodash, score-under, ramda ). I mean, take a look at the [bunch of Promises/A+ implementations](https://promisesaplus.com/implementations). It is really hard to get started with the topic if you have no idea about the differences. We really do not want to re-invent the wheel every time, but it seems to me that a lot of developers forget how to write vanilla JavaScript.
Use a template engine and be done with it.
How can I access, say, the setInterval I put on $('#a')?
I created a [JSBin](http://jsbin.com/vosic/1/edit?js,console) (because of the console and other stuff) for you with your code and my additions. Your original function now stores the interval ID in an array using the [.data()](http://api.jquery.com/data/) function form jQuery. This data is not reflected in the DOM and thus by default not accessible. The idea is quite simple: you first check if the array exists already or create it if not and you then add the ID to it. Next, I added a function that gives you either an empty array or an array with the collected interval IDs if you call it on a node. So, if you need to access `i`, you simply could store it using `.data()`.
Thanks for the feedback! Zapier is actually a pretty cool service - I guess you could hack a lot of other services also by using Zapier. Can't say how well an email hack would work, but talking about Emalijs, I think we'll be focusing just on this specific use case, adding features like easy templates, dashboard management, captcha and more to give a full service for this need. 
Thanks! Interesting solution to use the data-attribute like that. I'm not sure whet ever JavaScript is actually trying to make this scope stuff harder than it has to be or am I just too confused still to understand it.
I often use loops for things like that. If the pattern were reoccur much then a function such as filles_array(length, filled_with) would do the job better by making the code more concise and clearer.
Indeed, the scope topic is a bit tricky if you are not used to the way JavaScript thinks about it. If you are really interested in how it works, I can recommend the book [You Don't Know JS: Scope &amp; Closures](http://shop.oreilly.com/product/0636920026327.do) that explains all the things you have to know in detail.
Yeah, unfortunately I don't know any other word to name that kind of interfaces without such associations. "Live Programming" doesn't fit, I suppose, when, for example, it's about producing sound.
Thank you Knotix, I am actually using it now :) // Is it already available through node?
Because their process to implement is: 1) WYSWYG Admin UI (emailjs.com) 2) Copypasta script ref they supply 3) Copypasta send email code they supply with exact instructions which bits to change. Their process targets novices with only JS knowledge and/or only front end code access. People with rudimentary understanding who are smart enough to figure out where to paste in the code for online CMS systems like shopify, wordpress etc. It's an interesting business idea. More and more things like this will pop up over the next few years. It will be interesting to see how viable and/or sustainable this business model is. 
The question that you are trying to ask (I think) is "How do I run JavaScript after the html is loaded" Plug that into the Google, and see what you find. This is too trivial to tell you; you will find the answer on your own in a couple of minutes. 
Feature Request. A 'Trie' data structure which will be very useful in implementing simple searches
If you're searching by ID, yes - they're assumed to be unique. But class names and tag names are certainly NOT unique. It's common to need to search through subtrees to get at the right elements.
I forgot to mention, that my preferred method is using JSON schema validation, e.g. https://github.com/zaggino/z-schema. I am looking to see if there are people who do it too.
I have not tried this yet, but in building similar tools I've always been concerned about memory management - it's really easy to accumulate a *lot* of leftover data with something like this and that can kill SPAs. Is there a builtin way to invalidate the cache or be aware of how many objects are in the hoard collection to purge some of it? (In the examples I just see the throwing an error and giving up.)
I use [functional polymorphism](https://github.com/metabench/jsgui/blob/master/js/core/jsgui-lang-essentials.js#L1435) from the [jsgui library](https://github.com/metabench/jsgui).
&gt; I almost had brain damage while trying to understand how this is supposed to work... &gt; ...Now it’s time to make our type system looks like that. ಠ_ಠ
That error is actually simulating localStorage's QuotaExceeeded error. I'ts actually telling Hoard "hey, the cache is full", and Hoard will respond with a user-defined cache invalidation strategy (though the default is to clear the entire cache).
Disclosure: self-submission.
You can get a better idea of what it's doing by looking at the list of functions at the bottom.
Awesome. Thanks!
Where are the birds and the caw caw sounds?
 * if you're using a version control system you have absolutely no reason to do it. * it pollutes the whole file, makes it much harder to grasp and understand the rest of the code. * It's a code smell. If you have pieces of code you need to have in the file but not actually run it, it usually means you have some deeper problems in your workflow or in you code structure. 
Does the project even warrant something like Angular?
Running the code through a comment stripper would make it more readable. I'd like to have the code viewable in that format. However, git does not solve all my commenting needs. Some of the comments are for JSDoc, I'd prefer them to be elsewhere but referencing points in the file and visible in my IDE, so yes there are deeper problems in my workflow (and most other developers I presume), these would be great things to solve. I've found that when replacing code, I can comment out the old version, and try the new version. Then after a while I'll be satisfied with the new version and remove the commented out old version.
Yes - I guess so. It will be a SinglePageApplication.
I didn't mean the comments themselves, but the commented out pieces of actual code. &gt; I can comment out the old version, and try the new version. Then after a while I'll be satisfied with the new version and remove the commented out old version. What if you have two features you decided to comment out? which parts of the commented out code related to which? It can get really messy. On the other you could remove the code altogether and commit it with a descriptive message. If you ever need it, it will be there, easy to find and reason about. 
The commented out code would be left above / below its replacement, possibly having the same function name. It's really not that confusing. Committing etc is more time consuming than copy, paste, [asterisk]/, /[asterisk], delete.
Committing would not keep the comment / description pointed to a specific location in the file either.
https://github.com/metabench/jsgui/blob/master/js/core/jsgui-lang-essentials.js#L713 https://github.com/metabench/jsgui/blob/master/js/core/jsgui-lang-essentials.js#L1252 https://github.com/metabench/jsgui/blob/master/js/core/jsgui-lang-essentials.js#L1363 What are this? Why are they there? I have absolutely no idea from looking at them. Maybe you can magically keep track of this random zombies, but the rest of the world reading this will be absolutely confused. It's an open source project, not a random "do_stuff.py.bak.1" file. 
[TypeScript](http://www.typescriptlang.org/) What you are describing are exactly the problems which type systems in general, and TypeScript in particular, are designed to solve. I say quit floundering about with your never-up-to-date JSDoc types, and manual parameter checks which only work at runtime, and just do it properly and use TypeScript. Other advantages over a half-assed approach are: checks before the application runs, checks that your type annotations in the code are consistent (i.e. confidence that they describe the actual code), and now your IDE can provide good code completion suggestions and help you track down the flow of execution between functions (i.e. the "who the hell is calling my function" problem). TypeScript itself will also throw in a bunch of ES6 support which compiles down to ES5. Sweet! 
Go for it... what's the worst that'll happen?
Yes! Definitely a lot going on in the post. Makes one go a bit deeper when calling certain kinds of functions, rather than just taking them for granted. I like the usage of es6 fat arrows. Certainly something I'm looking forward to using more and more. As a super noob Haskell student, it reminds me a bit of that syntax.
I'm happy my message about commented out code went through (: I might assist in the subject after checking the code-base a bit better.
Tight coupling ftw! Not saying I've never had html strings declared in js. I have many times because keeping things loosely coupled is sometimes *really hard*. IMO the best compromise is a light weight template library. Take your pick, there are tons of them. I think even underscore js has a bare bones one. EDIT: props to OP/author for the library though. Cool tool and anyone who actually makes stuff for the community is awesome in my book. Every tool has the potential to fill a need so maybe this one could have some solid use cases. Off the top of my head you could at least use this to clean up some legacy code you are unable to refactor.
&gt; "CoffeeScript, Jasmin, SproutCore, Prototype, Spine.js etc. - All of these tools come in JavaScript from Ruby community. Now the JavaScript community actively keen to develop server version running on JS V8, for example Node.js. This is not the best endeavor, my opinion is that JavaScript'u place in the browser to the server code has Ruby, Python." Sigh.
I'll pitch in here, having built something pretty complete with it. I used angular and socket.io. Good * The webpage responded instantly to changes, which would be both caused by the user, and externally * Once loaded, page changes were instant * The site might work on ie8 (not tested, but both frameworks support ie8) Bad * The initial load is really bad, and there is nothing I can do about it other than rewriting * I don't care what search engines claim, they do NOT properly work with single page applications * JS is a 100% requirement: something my newer projects don't need to say * There are definitely shortcomings in the templating engine All that come to mind ATM. I may add more comments later. However, I want to stress how bad the performance is. The initial page load can take over 2 seconds after fetching all the JS, which most has to be loaded before the page. This is enough to deter a large proportion of users today, and will bee even worse 5 years down the line. (Fwiw, a user will lose focus on their task if a page takes more than 1 second to load). This performance also hugely affects SEO, as does the fact it's a single page application. While I have only scratched upon the surface at the moment, React is my bet on the next best JS MVC.
Thanks, but that type of search will only return how to use window.onload etc.. The problem here is with the CMS because the DOM does not exist at all when the script tries to run.\ The solution was to simply link the JS file (or put the &lt;script&gt;) in the last loading part of the CMS just before the closing &lt;/body&gt; tag. Simple enough solution I guess. I just began to go through js tutorials etc.. so I thought there must be a way to accomplish this with the code in the head (where every "learn javascript" tutorial/book says it belongs (in the beginning at least). But no, can't do it in this type of application.
Yes, this. "Marketing reasons" is not a good enough reason not to do this.
It could be very useful I admit. If you could, add an issue writing the request so I will remembre to add it. ;)
CMS??
Thanks!
What are your apps btw? Would love to see!
Meteor can be a bit slow sometimes I agree. You can always use React with it (or whatever your choice may be) to speed things up.
Content management system. Something similar to joomla, wordpress, drupal, etc.. The document is written in parts via php. So perhaps the CMS assembles it by putting the header.php on first, then some other stuff, and finally footer.php etc..
&gt; I want to stress how bad the performance is. I don't know if it'll make a difference for you (or if you're not doing this), but have you looked into one-time data binding? If you have any values that are set during the first digest and never need to be updated on the view, those would be good candidates for refactoring.
I was confused initially, then realized you probably meant "crowd" simulation. :) 
There's even marketing reasons **to** do it! lol What sounds more attractive? Having your videos hosted (for free) by one of the (if not **the**) most reliable video services in the world, which happens to be owned by the biggest and best search engine provider. They even provide fairly easy to use baselines for building a custom video player. You get SEO benefits, programming benefits, and infrastructure benefits. -**OR**- Hosting them yourself. Building your own video player. Doing SEO. Maintaining the infrastructure.
I know what a CMS is, but I read your post as 'adding a script tag to the CMS' which didn't make any sense. I misunderstood. 
thanks I forgot the "d" ! 
would be nice if you could choose between different regex implementations such as python/vim/sed/etc
I'm impressed, but [I don't think you should use regular expressions on email addresses](http://programmers.stackexchange.com/questions/78353/how-far-should-one-take-e-mail-address-validation). This is why we can't have IPV6, or other nice things. That said, if someone used this "customer/department=shipping@example.com" as their email address, I would probably ban them from my app on principle.
Yes and you aren't supposed to put Q-Tips up your ear either.
right? I am glad to see it finally happening.
This is an awesome blog post! Thank you!
Question may be better suited for /r/webdev or /r/forhire. What kind of mapping do you require? Just geolocation? Or geodata overlay? 
I'm a freelancer so feel free to send a PM over.
I would greatly appreciate it if you did a similar analysis on some of the methods for my own library - as this was great. https://github.com/DylanPiercey/Prove-It
I just added 6to5 to my build pipeline. I can't wait to start implementing these ideas into new code I write.
I'm so glad this was posted - I literally just inherited a codebase with a couple of massive (6-10 line D:) regexes that I've been staring at all day. My sincere thanks.
Why not? 
This is Daniel Schafer and Jing Chen introducing GraphQL and Relay, Facebook's React-friendly story for fetching and syncing data. GraphQL lets components declare their data needs by describing the shape of what they want with a JSON-like language. The advantages include automatic granular view re-rendering, reduced boilerplate for getting nested views their props, and simple pagination/query validation/optimistic updates, among other things. Facebook plans on open sourcing some code when it's ready, and says they've been using these patterns for over 2 years. Edit: Didn't see this was posted a few days ago. http://www.reddit.com/r/javascript/comments/2u3piv/what_is_relay_reactjsconf/
Not tested at all with contenteditable, but I have done some textarea text manipulation using current selection start and end with `selectionStart` and `selectionEnd`. Those will give you the character positions of selected text, which you could copy, and reinsert as a workaround.
To my understanding, emails cannot be properly validated by regex.
I just found this very relevant comment in a /r/jokes post: http://reddit.com/r/Jokes/comments/2ujfg3/i_hate_being_bipolar_its_great/co9a0vs
Hi sunyatasattva - do you have any examples? I am typically struggling with javascript tasks using leaflet.js and google map api etc. Chris
Hi /u/aaxyz, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Is there something wrong with the syntax in the examples. I can't get any of it to work with node --harmony. Thanks. How can I try these examples?
Yep, sent a PM.
This one weird trick makes your brain furious!
Node --harmony only supports a few es6 features, and destructuring and arrow-functions are not among them. Try running it in Firefox or in the traceur or 6to5 repls. 
Awesome Parallax Effects Tutorial
Caching checks is nice idea, looking forward to your implementation. Concerning the `?debug=true` parameter, having debug output in production is absolutely not possible here and thus not an option for us. However, your point concering this is very good, I will take that into consideration for my next private project.
Sorry, I meant initial load performance. I didn't have any performance issues past the initial load.
There is no yellow. Does not feel like home.
[**@_chenglou**](https://twitter.com/_chenglou/) &gt; [2015-01-29 07:24:00 UTC](https://twitter.com/_chenglou/status/560699868641886208) &gt; "React is the V" just like my iPhone is just a phone. \#reactjsconf ---- ^This ^message ^was ^created ^by ^a ^bot [^[Contact ^creator]](http://www.reddit.com/message/compose/?to=jasie3k&amp;amp;subject=TweetsInCommentsBot)[^[Source ^code]](https://github.com/janpetryk/reddit-bot) 
thats true; and thats because it is not an official JS page. I decided to leave the yellow to the JavaScript language (the core thing)
&gt; This is not meant to replace your templating engine. This is meant to help with times templating engines, or html is not available, like in a browserify ui component. Sounds like an interesting solution where you'd have restrictions on what you can use and need to provide some very simple HTML content. 
Only if they include comments, because comments can be nested (ugh, what a sick idea!). Canonical (minimal) email addresses, with the comments removed, *can* be validated with a regex.
How does an email address contain comments? I must not be smart, I'm not understanding the idea here. 
How does this validate an email? Not instantaneously, at least. Requires the user to step out of the experience, check email and use the consumable, returning at a different vector (unless you're a mad man and make them type the code in the original entry point). 
Now, any chance to MAKE a regex through the nodes? It would be incredible to use a simpler interface.
You can choose between JS/Python/PCRE at https://www.debuggex.com/
Var createObj = function(a){ Return Object.create({a : a }); }
Pretty neat stuff. I would love to see if someone could take the ember &amp; angular examples in the first one to improve them.
y00B&amp;8 ,#-3y-%VbKtRR3~%0f7rK.~c)Tp-]E#wqc -18A&gt;6a).OCKG(Qu2^niJM.769,qq[R%tB%G~nWtzAr4Lw,$aGJ,ECDUT3Dqf43$.8(TRn4szrHrzUGt1sA1Xfu1D1~0Dki&amp;D@lkBukJ6yc&gt;DOIQtv&lt;b dsI~98RLf-s&amp;WqGTdnU,^#dhO@e@iq(w:wyFy[Uk1BTF&amp;c%;E5
I am sure we are talking about two different levels of validation. Regex "validation" to make sure it's a sane email address. And then, the validation you mention is to make sure the user actually owns it. 
I recently started using Mailgun's Email Validation instead of complex regexs. LOVE it! https://documentation.mailgun.com/api-email-validation.html
Unless the domain has a catchall, then good luck. 
You rarely need to have a function return a function. It looks like the original code you borrowed from was doing that because it wanted to include the unique index number for each element. This works, but I usually find there is a better way to accomplish the same thing. For example, using *this* to access properties of the triggered event to get the data you need as opposed to passing the data at the time of attachment. 
The validation I mention does both of what you mention.
You either have to have the entire list of items in memory client-side, OR you have to implement your filters and paging on the server-side.
I need his vimrc
&gt; Posting a large JavaScript object to the main thread from a Web Worker is a blocking operation, just like JSON.parse. Have you tried using Servo? It has strong type and memory safety guarantees from being in Rust-lang, which means its JS engine should be able to properly dispatch asynchronous string parsings necessary to async your JSON. If that isn't enough, you can probably write a plugin that uses Rust channels so the threads can work the async out. I mean, really, when you're scaling, you just want to get things like that out of the way and scale.
This is damn good!
How is this "pure js" if its using CSS too?
I'd use angular for stuff like this. look up tnNgGrid -- http://moonstorm.github.io/trNgGrid/release/#/Common .. There's other angular solutions too but I've found trNgGrid the simplest and most hassle free. But remember, if you don't paginate server side, angular will run heavy beyond reasonable loads.. 
From the readme (emphasis mine): &gt;It using CSS3 and pure js **which don't depend on any other libraries.** Maybe they could use a better word than "pure". Vanilla?
You should definitely be using a model to sort/filter your data on the back end and then just display the modified data result set on the front end.
What are the problems with Ember that you know of?
https://twitter.com/ryanflorence/status/557917484628455425 &gt; macvim + janus pretty much, then vim-base16 for some great colorschemes.
If the domain has a catchall then all emails to said domain are valid.
Interesting listening. So they have a company (Durandal, Inc., providing products) backing this with full-time folks (biz people, developers, ux folks). "Not just some dude coding this at night." So what's the revenue model here, eventual pay framework/components?
You're being pedantic. Email confirmation also validates the email. Email validation does not necessarily confirm the email.
yeah, sounds great... except that you have lost me. Any page or js code that explains how to do this? I am rather new to js.
How would I do either?
Looks good, but I am not using tables...
Kind of offtopic, but does anyone know how he's resizes his windows like that. Edit: Might be [zooom](http://coderage-software.com/zooom/). Unless anyone knows any free alternative that does the same thing.
You just had to read the first comment on the video. It's called [Spectacle](http://spectacleapp.com/).
/r/gis
Don't be a smart ass. That comment didn't exist when I asked. Edit: Also that looks like it just adds windows type shortcuts of bouncing windows around the screen, I see no option to fluidly drag resize windows from any part of the window like he was. It *might* be [zooom](http://coderage-software.com/zooom/) based on some further searching and finally hitting on the right keywords.
Some samples code would be very helpful. I haven't got it all tied together yet.
&gt; it might help browser optimise better Optimise *what* better?
Thanks bro
https://github.com/ryanflorence/reactconf-2015-HYPE
Sorry, my title is a little f-ed up (meant to type Javascript, not HTML). I was thinking of adding server-side Javascript within the HTML to handle the logic
Is it a back-end of front-end gig? Or a mix of both? I'm a front-end guy myself. I think everyone's pretty used to using jQuery at this point, so I personally wouldn't ask anything too in depth about the dom. Maybe something about how to get all the siblings of an element with pure js just to see if they know how. I'd be impressed with someone who could implement even a basic sorting algorithm in JS. Might be worth learning and mentioning at the end if it seems (even tangentially) relevant to the conversation. You get extra points if they don't believe you or want to see proof that you know how and you show them right there.
maybe try to review http://www.reddit.com/r/programming/comments/2uchpp/javascript_data_structures/ so you've got some of the jargon ready. but best advise is relax. don't ever get combative. expose how you solve problems and be conversational. tech interviews are supposed to be about tech but it's always more than that. i've hired people that were honest telling me they knew nothing about a topic but were dying to learn. 
Just use cookies? fe sends login info -&gt; be api reponds with 200 OK and sets a cookie -&gt; fe sends cookie on any subsequent api request -&gt; be validates cookie and authenticates user
No .csv? C'mon...
Javascript embedded in HTML will not run client side because HTML (and any code 'embedded' in it) gets executed in the browser. Your options are: 1. Use a JavaScript plug-in on the client side. 2. Use a library on the server in a language of your choice. 3. Write your own JavaScript to run client side. 4. Use a web service from somewhere like livedocx.com If you are interested in doing it on the client side, then JavaScript is your only option. Have you looked at any specific libraries yet?
M'progress
Considering the initial commit was ~4 hours ago, I am sure that they are planning on adding more functionality. I don't think that they should have posted it so prematurely but not my call.
http://jwt.io/ http://tools.ietf.org/html/draft-ietf-oauth-json-web-token
Sorts are good for sure. Also linked lists are good, I've had that come up a couple of times.
Make sure you know the box model. That's our goto bullshit test for javascript jobs.
Come on dude(ette) do *you* enjoy bug reports with such distinct lack of information about the device you're on, what browser, what extensions, if js is disabled, etc, etc etc? I'm on mobile and there is content and it's got a pretty snazzy mobile layout (the little hamburger icon even rolls up to a cancel button *smoothly* every time in chrome for android on my older android phone which is sort of a feat for most sites). Tbh I didn't even really look at what all is on there but this isn't much of a *community* if we just give people shit because something they sacrificed their time to make to help bring us together isn't functioning perfectly. Surely you can provide more constructive criticism than LAWL BRO YOUR SITE SUX! 1!1!11!
Alogorithms: know the diff between depth first and breadth first tree traversal. They are very similar. How do they differ?
Wtf is the box model?
I've looked at jsPDF which seems like a decent bet, but it requires linking to the .js file, and Wix doesn't allow and server-side access whatsoever
On the topic of native DOM at a place that doesn't use jQuery, I would be happy if someone talked about how sizzle can largely be replace with querySelectorAll for anything better than IE7. Then I would hope you could talk about the differences between a live and non-live NodeList. Even though they probably (hopefully, or run?) have well established non-jQuery ways of dealing with DOM events (specifically delegation) and AJAX, I would brush up on the native addEventListener and XMLHttpRequest
If sorting does come up, don't forget to mention that Array has it's own sort method and will be more performant for pretty much every task.
It's supposed to generate a certificate from a few supplied fields, kind of like this http://www.certificatemagic.com/personalize.php?design=11 The challenge is that Wix doesn't allow any access to server side code whatsoever. A rep from Wix said specifically the best it can do is give you an HTML 'box' I wonder with all the BS I'd have to go through to get this to work if it may be more feasible to create a webapp with google app engine since I'm familiar with it and Python far more than with Javascript, then either embed/link to it in the Wix site?
https://developer.mozilla.org/en-US/docs/Web/CSS/box_model
Good 10,000 foot explanation. For the 1,000 foot explanation, I'd add that by "cookie" you'd want a session cookie, or at least to set an expire on a normal cookie and update it whenever a user is active. Also, within that cookie will be a temporary hash of some sort linked to that user and session only. 
Thirty seconds was not enough to figure out what this is about, bailed....
&gt; poops out the results This is the complicated bit. 
The box model is what you learn for positioning elements on the page. If you ever want to know how to make things align left, right, centered, etc. How to wrap text around an image. How to get two things side-by side. How to make things other than text flexible/responsive then you need to know the box model. If you use the css properties: display, position, left, right, top, bottom, border, margin, padding, box-sizing, float, clear, flex, etc. then you have used the box model. If you find it difficult to position things exactly then you need more box model.
I'm beginning to like the concept of flux because it is more of a concept than it is a framework or library and I think that its principals need to become more of a priority during the initial design/architecture stages than "what framework should I use" does. This is especially true if you're coming into it with the idea in mind that you'd like to be able to swap out libraries or modules as you've described. Focusing on creating a solid data model as well as a consistent, predictable data flow architecture should be the focus, and should help decouple you from the framework you're using.
Async work can be executed off the main thread, but that's the reason the Web Crpto API is all async.
I used jsPDF before, you CAN generate a pdf from client side (within browser) and then download it. However the way jsPDF works is all non text pretty much have to be drawn. So this can be tedious...
Intern and contractor jobs can be an hour or two, depending on the level. FTE positions generally have 3+ rounds, an hour each.
The end result is that the specific details of technical questions don't matter - some interviewers make up their questions in the room. Whether it's about the box model, z-indexing, svg, or something else, interviews are generally less about what you know *right now* and more about who you are, how you think, and how valuable you might be. We get a lot of dud candidates who are nuts with terminology (whipping out Big O notation and cyclomatic complexity faster than you can finish a question), but have no clue what they're doing, and won't have any clue for a long time. Maybe you got past the written questions, but I don't know how long it took you, what avenues you went down when working on it, or what you didn't know. When I interview, i look for; * People who are passionate, who actually get lost in a question and excited about where it might go. I ask "long-tail" questions that a candidate can run with, and design something all their own. If the candidate sweats and just tries to get something together to gauge my reaction, it means they're probably not going to be rockstars. If you get a question like that, then step back for a second and think about the kind of system *you* want to work on, and show it to them. * Details. Be detailed. When they ask you a question, don't be afraid to start big and drill down. If they ask you "how do you get the largest of N integers?", you give your answer - then some possible pitfalls and strengths of that answer. By listing off details about your answer, you show that you know what you're talking about, can communicate well, and also give the interviewer lead-ins for followup questions. Why that approach, and not a different one? In what cases would you use that approach? etc. But be sure to make those *optional* lead-ins, open up room for them to ask the questions, but don't go down a rabbit-hole without stopping for air. * Testing. Don't be fooled by being interviewed for front-end, it's just as important to test frontends as any other code. How would you write tests for that code you just wrote on the whiteboard? What would you look for? How long are you willing to spend on writing tests? Is there a framework that might make this better? Even if testing isn't in your description, mentioning it shows that you're thinking long-term. * Readability. Code is read more often than it's written, and keeping code in little functions that are well-named and easy to find will make it easier for my team to read and grok your code. This is especially important if you're junior - don't get caught in callback hell or some wall-o-code. Break things out, show me you can make maintainable code. If a candidate types up 100 lines into a single function and doesn't even think of how this would look in a real codebase, they're getting a 'no'. * Something out of their depth. I purposefully ask what they would do to accomplish XYZ goal that I'm certain they won't know. How do you work through new problems? What do you look for? Are you willing to reach for third-party libraries, or do you talk for an hour about the innards of a Backbone clone? How do you find new information? What aspect of the problem concerns you the most? Do you give up, or list out things that you want to try, and avenues for tackling the problem? Note that this is just general stuff, it's not in any particular order, and probably won't all come up in a short interview like that. Also, you're working in JS. Don't worry so hard about traditional data structures, or how to balance a B-tree, or any of that undergrad crap. Understand function prototypes, associative arrays, first-class functions, and don't get caught up in terminology.
Support, most likely, at least IIRC
This seems to be the answer! How would this interact with something like passport and using 3rd party services Facebook / Twitter / etc?
A big thing for me is knowing what you don't know. When I'm interviewing, I'm looking for someone who will find the right way to do something and not just throw a hack together. The answers are already out there, you just got to look them up. To summarize, be confident in what you know, but be honest too about things you you could learn more about.
So there's still hopes of a doggy conversion.
thank(you)
Hour an a half? You've got it easy. Bay area interviews can easily take 6+ hours. But seriously, good luck! For dom, might be good to know about the new html5 elements. Also suggest knowing about box model as others have said, event bubbling, xmlhttprequest, prototypal vs classical inheritance. 
It's definitely ok to not know stuff. No one knows everything. There's always the possibility that you just don't know what you need to land a particular job, but "I don't know, but I'd be willing to learn" is *always* a better answer than pretending to know something you don't.
I prefer movies { "Home Alone":{ "Buzz, your girlfriend": "woof", "smash": true, "required": true } }
I'm not sure what kind of app you will run on app engine? You would somehow have to tie whats on the wix page back to app engine. I never used wix before, but from my search you can't use any 3rd party library. so jsPDF won't work for you.
Oh, okay. Sorry for that.
this is very good advice
Don't forget websockets / long-poll HTTP requests.
UI --user/pass--&gt; Auth Service : check user/pass, generate random sessionId, store sessionId + username in session database, set sessionId as cookie UI --sessionId(cookie)--&gt; Other Service : check session db for session, cache response, make user info available for application code That's the most common way of handling session integration of multiple service projects that are all within one group, i.e. your major application made up of many smaller services. You probably don't want to do SSO style solutions (OAuth, SAML, etc) for your own applications, those are mostly intended for third party integrations, and they have pretty hefty performance costs. The golden rule for security with browsers / services is "never trust anything from the browser." If the person controlling the browser could *possibly* guess or provide fake data, you can't trust it. That's why the session Id must be significantly random, so that a valid one can't be guessed, and why it must be validated on every request, you can't just let the browser tell you who it is, you have to validate it. 
As someone just breaking into Javascript what position are you being interviewed for? If this is a Jr position I will cry
Your gulp task to5ify should return browserify()... or create a promise and resolve it if the browserify function is asynchronous, otherwise you'll get a race condition in anything that might depend on your to5ify task in the future. Currently your code isn't complex enough to depend on it, but it's good practice to always return the promise in gulp since everything is asynchronous. 
The JS part. https://github.com/h5bp/Front-end-Developer-Interview-Questions
Reflects way way better on a candidate than rambling on, being non-committal, or guessing and being flat-out wrong. **edit** had a candidate offer to do a cartwheel when he didn't know the answer once. He... did not get the job
I've been looking for a good jpeg to json converter for years. Does this do the trick?
I use that sometimes too, but there's a slightly shorter version: {}.toString.call(obj).slice(8,-1).toLowerCase()
Sure, PRs welcome. My dog always tries to pull too!
out of curiosity, why is a CSS question your bullshit test for a JS job?
Speak out the process too! Well I don't know, but I'd look into the X and then maybe Y, from that I think I'd fix problem Z.
Op, do you have a degree in cs ?
Because JS is mostly frontend and nearly always needs to interact with CSS elements on the page. I can't imagine he'll **only** be writing JS and nothing else.
Hi, I started learning Javascript to write interpreters for [esoteric languages](http://esolangs.org/wiki/Main_Page), nothing flashy. But I still want to ask: am I being a huge idiot for not using any framework(s)? I mean, I see video with a titles like "STOP USING NATIVE CODE," and I don't even use jquery. What do you think? Thanks for taking the time to make this thread.
I have one question for you to ask regarding older browsers - Do you support IE8? Yes? Goodbye.
http://www.pluralsight.com/courses/creating-apps-angular-node-token-authentication https://github.com/sahat/satellizer
This is like KineticJS
Exactly. "This project began as a GitHub fork of KineticJS" as KineticJS is no longer maintained.
This is only a personal opinion, but the future seems brighter for React.
Thanks for the explanation! What happens when you `var result = [x, y] = 'pants';`? Does that throw an exception? How would implicit predicates work in the context of function arguments anyway?
Any idea how this compares to [Fabricjs](http://fabricjs.com/)? 
I'll have a look at the tinyMce events, see if I can build this into it when I get a spare hour or two
&gt;docs(readme): include Javascript for seo Good joke.
Lost it at "made with lukewarm sentiments"
You can do the same thing with npm link.
Yeah, i might have simplified that...
Anamorphic javascript: verbose javascript that ends up being of average size over the wire because of minification and compression.
without a precise context, hard to tell: website, webapp, mobile, ... My suggestion would be to take a simple one (like Backbone or Vue), experiment with it, so you can realize if you should stay with it or try another one.
Do you know any good resources on event bubbling? I'll google it, but would just like to know if there are any 'standard' resources like MDN that explain it the best way. 
This would be a different approach than using JWT, correct?
Isn't this solved by using require.js config already?
I wouldn't advise jumping from CJS to RequireJS just because require.config lets you define paths in one place--although that is one of the better things about it.
What i plan to do is make an app on Google app engine turn embed it in an i frame on wix
I will! — what's the problem exactly ?
Isn't the lack thereof what this post is trying to solve? 
Anthropomorphic Javascript: Code you refer to as "Bob"
I would actually use a basedir... using node_modules is quite confusing. My favourite setup would be: * client * components * myComponent1.js * mixins * myMixin.js * myOtherMixin.js * services Then I would set the basedir to the client-folder, and if I need a mixin from within my component I would use `require('mixins/myMixin')`. On the other hand, if a mixin depends on another mixin I would use `require('./myOtherMixin')`. The setup is similar to yours, but it does not use the node_modules folder which makes more sens to me (I think). And yes, Browserify allows setting a basedir (`opts.basedir`)
You're going to have to create a minimalistic jsFiddle of this, for other people to weigh in and report what their browsers do.