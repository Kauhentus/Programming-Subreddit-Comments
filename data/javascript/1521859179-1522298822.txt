It’s a recursive function of industry analysis!
This means a lot to me. Thank you. 
[oh you...](https://tenor.com/OVqs.gif) 
Tell me about it. That's why I switched to assembly.
I am seriously curious - what compelled you to comment here? There are SO MANY OF THEM ALREADY. Is this saying anything new? Is it saying something old in a newer, more-interesting way? No - it's just like a rearranged madlib of every other comment.
Because some people like to write and there aren't rules as to what they can write about..
If you invite everyone then someone's gonna shit on the carpet.
[This is](http://2ality.com/2016/02/js-fatigue-fatigue.html) [already a thing](https://medium.freecodecamp.org/javascript-fatigue-fatigue-66ffb619f6ce)
It's right in the [merge implementation](https://github.com/rtfeldman/seamless-immutable/blob/281c344ad4694d4190fbe27d954d5a69887335bf/src/seamless-immutable.js#L374): seamless-immutable tries to save space intelligently when it's working with objects. It identifies properties that haven't changed and it avoids cloning those. But it falls totally flat when working with arrays. Unlike immer and Immutable.js, it doesn't back arrays with a trie or linked list.
I would advise you to stay off of StackOverflow and read [the documentation](https://api.jquery.com/category/ajax/). 
And when you need to take a break read this: https://wiki.theory.org/index.php/YourLanguageSucks#JavaScript_sucks_because
Crazy enough this does help them later in their careers. I've seen someone blog about trying to grasp the difference between const and let (or some equally trivial concept) and then they announce they have been hired by EXCITING_NEW_STARTUP months later. It's all a game now for those willing to play.
Tell me about it, that's why I switched to manually flipping bits with a magnetized needle and a steady hand. 
They're probably suffering from Javascript-induced stockholm syndrome.
Thanks for this heads up
I use wkhtml2pdf.exe.
Hmm a lot of ES6 is just sugar for ES5 syntax so if you're confident with ES5 it should be quite easy for you :D I would recommend reading Eloquent JavaScript then especially the functional programming section because a lot of ES6 ideas are rooted in functional programming (although JavaScript actually has always been, it wasn't obvious until ES6)
I never used Jquery and I been using Javascript for nearly 5 years. Glad it's dying, fuck that garbage library.
Using inline event handlers is bad practice and results in poorly factored, hard-to-manage code. Seriously consider attaching your events with JavaScript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener Separate presentation from content: keep all the HTML in the HTML, and the Javascript in the .js, as much as possible. Unless you do that, you'll find script-writing to be incredibly painful.
Lol i was going to say.. this only makes since if you’re finally leaving ember 
&gt; It looks like they are storing the original xhr object and then setting it to itself in the function before returning it. Notice they're *calling* the original xhr function, and storing its result in a global before returning it. Basically they're extracting the raw [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) by monkey patching jQuery's `ajaxSettings.xhr` function. From there the global can be referenced in the success callback. Doing it that way won't work if you make multiple requests at once (you'll clobber the globally stored xhr object). Instead, maybe do something like this: $.ajax({ type: "GET", url: 'http://example.com', beforeSend: (jqXHR, settings) =&gt; { // Store a reference to the original xhr function const oXHR = settings.xhr; // Monkey patch the xhr function, but instead of using a global we attach // the raw XMLHttpRequest to this request's jqXHR instance settings.xhr = () =&gt; { return jqXHR.raw = oXHR(); }; }, success: (data, status, jqXHR) =&gt; { // Now we can access the raw request at `jqXHR.raw` console.log(jqXHR.raw.responseURL); } });
Stephen Grider and Andrew Mead are very good! Tyler is also great from what I saw on his youtube channel!
I wasn't able to find a formal definition of "structural sharing" either. When I read "structural sharing," I think of persistent data structures--structures that retain their entire history when modified, and that create &gt;If you use your definition, when modifying an item in an array, should I expect the reference to the containing array to have changed? If so, how did you clone the items in said array? If not, arrays are mutable. The reference to the containing array wouldn't change, but neither would the items in the array be cloned. An example (from [Understanding Clojure's Persistent Data Structures](https://hypirion.com/musings/understanding-persistent-vector-pt-1)): const brown = [0, 1, 2, 3, 4, 5, 6, 7, 8] const blue = update(brown, 5, 'beef') // blue = [0, 1, 2, 3, 4, 'beef', 6, 7, 8] [what this looks like in memory](https://i.imgur.com/7aeLLQW.png) In this image, `brown` has 9 elements. It's stored as a tree with 12 nodes. 5 nodes contain the actual data and 7 are used for bookkeeping. When the 5th item in `brown` is set to `'beef'`, 5 new nodes are created. One contains the new data, and 4 point the way. Most of the data and wayfinding nodes from brown are reused. The reference to `brown` never changed. A bunch (up to `log(brown.length)`) of references and wayfinding nodes were added when `blue` was created, but only the `[4, 5]` node was cloned.
Thanks for that man, I'm still totally new to all of this anf I just needed a step by step explanation so that I could get an idea of what was going on in this code. Some people on here are just angry at the world and feel really insecure about themselves. They feel safe in their own little bubble trash talking on here and know there won't be any consequences, unlike the real word. Thanks again man
Can I interest you in an article about how it's ok if you don't have side projects?
In the last lines, try to replace `redValue` with `red.value` and so on
You can check the fiddle for the highlighted red in the HTML and CSS - it indicates that something is invalid and should be fixed. `for` loops fail to clearly signal the intention of your code, and as such should be avoided whenever possible (prefer higher-order functions, such as .map, .reduce, .filter, ...). See also: https://www.quora.com/Can-we-say-that-the-for-loop-will-be-the-new-goto-%E2%80%9D-given-the-increasing-popularity-of-functional-programming/answer/Tikhon-Jelvis?share=1&amp;srid=3SJB and https://gist.github.com/robotlolita/7643014 Unless you're *specifically* inserting/getting HTML markup, it's better to use `.textContent` rather than `.innerHTML`. Precise variable naming is important. If you name a variable `redValue`, you may be tempted to use it later when you're trying to get the value of a `#red` element - but `redValue` isn't the value of the element, it's actually an `&lt;output&gt;` element. You should select the `#red` input slider and get its value instead: function setColor() { result.textContent = 'rgb(' + red.value + ',' + green.value + ',' + blue.value +')'; }
Well, seamless-immutable doesn’t modify the original references. As long as you keep an original reference to previous iteration of the root object reference, you can always see past iterations. So it fits your definition of structural sharing. The only difference it seems between your structures and seamless-immutable is that in yours, arrays are backed by a tree, rather than an array. This has advantages in some copy operations, but costs in the form of reducing the accessibility: non-native arrays cannot be used by helper libraries designed to work with normal js arrays. And since, depending on js engine, a js array isn’t even a native array, but could be a sparse array, hash map, or some other structure behind the scenes, I doubt their shallow cloning is as expensive as you suspect. It could be worth testing, but if pure performance over all other factors was needed, then perfectly controlled, bug free, in-place mutating structures would be fastest. Better yet, implement your code in C, and compile it to webassembly or emscripten instead. For me, the repeatability, structural sharing, and reference equality in seamless-immutable while maintaining standard js data structures is well worth even significant redundant copy operations for lists. Unless you know of a way to back lists with none arrays without effecting the public api or increasing the memory footprint significantly? Perhaps one of the newer features of ES6 could provide a way to hide a different backing for lists?
Something happened to it in between encoding and decoding?
I will write a detailed post with the prep material in a couple of weeks.
Thanks for your answer u/ccb621. It seems that, in terms of speed, potentially, there is a marginal gain. Maybe the big win from server-side to client-side is a simpler coding routine by sharing libraries and so on. As you well mention, at this stage, the search engine and tools crawlers are not "smart" enough to parse and interpret correctly the code. I am not sure the changing methodologies is worth to run the risk of not being indexed (or at a slower rate). 
"Why we chose WhineJS for our new startup"
Thank you very much. This is very helpful. I believe this will work well.
[Recursion?](http://www.reddit.com/r/javascript/comments/86895h/-/dw3kj1l)
The fuck is wrong with you?
function setColor() { result.innerHTML = 'rgb(' + redValue + ',' + greenValue + ',' + blueValue +')'; } Instead of `redValue` use `redValue.value` since `redValue` is just HTMLElement
+1 Your approach is much better than leaking too many different states through all the layers.
Sometimes people just want to vocalise their internal meanderings and possibly get a discussion from it which in itself is therapeutic. No need to put a negative spin on what is clearly innocent. 
I suggest u do something basic but not too easy, anything u don't know how to do u just google. Worked for me with python. Don't forget to make sense of what u copy and paste cause that's the only way ur gonna learn anything 
The 3 stands for 3 complete rewrites from scratch. People don't give Polymer enough credit for finding new ways to flip flop or bet on dead-ends. Angular's only managed to throw their unsuspecting user base into one full rewrite of everything they ever made. 
Webhooks are only server to server. An event is sent as an HTTP request and there's no way to send an HTTP request to a browser client.
You still “serve” HTML, it’s just rendered via JS. Many JavaScript view libraries (including react) can be rendered on the server... that’s a big benefit of writing views in JS and not a backend specific language like PHP If your site can render on both server and client, you can send render initial request on server so it works like a typical site but after that it acts like an SPA and renders on client. Best of both worlds
[crocks](https://github.com/evilsoft/crocks) is a fantastic library for working with Algebraic Data Types. It has become my go-to library to use Maybe, Either, State, IO, Async, and so on. It has many useful utility functions too. It's functional programming bliss! Lots of thorough documentation and examples. The author is a true gentleman and a scholar, he is active on the [gitter chat](https://gitter.im/crocksjs/crocks) and does live code sessions on his [YouTube channel](https://www.youtube.com/user/TheEvilSoft). 
Try @media print { .some-block { page-break-inside: avoid; } } to avoid block cut when it's printed
Wow, this looks so wrong. Why play the monkey and do clever twisted things when there is a simple native solution ? To be fair, the SO guy did suggest it. You can use the load even to make it look even less "scary" var xhr = new XMLHttpRequest(); xhr.open('HEAD', "http://example.com/redirect"); xhr.onload = function () { console.log(xhr.responseURL); }; xhr.send(); You can of course totally make a function out of this, or run it in a closure / use the let keyword inside a block, if you don't want to pollute the global scope
Do you mean the language Processing? If so, you should learn it! That’s how I got into programming. To answer your question, yes you can use Processing in JS. There is (or at least, there used to be) a JS version of Processing.js which you can use to build whatever your heart desires. My first “app” was a little game to control a group of objects that flocked together. If you use JS it’s be easy to build something like that as a website for anyone to use. How you add the library to your project will vary depending on how you structure your project and what tools you like to use, so read through any Processing.js documentation you find to learn how to add it to your project. Also, you don’t need to use Processing. It’s just a library that offers certain tools, but it’s a nice way to start visualizing various programming concepts like objects, classes, iterables, etc. Oh, and once you’re comfortable with the basics, check out The Nature of Code. Wonderful free textbook that uses Processing to explore a plethora of interesting topics. Have fun!
Webpack v4 but using deprecated es2015 preset? Should probably fit that with preset-env...
This is the attitude that is a main source of the problem - the belief that all tools are somehow equal. This isn't true. There are most definitely *good* tools and *bad* tools and the difference between them has nothing to do with how trendy they are.
This is tiny, but I love it so much. A lot of people don't realize that with EMCAScript 2017, you can do this to iterate over the values in objects of key:value pairs as if they were arrays: Object.values(myObj).forEach(value =&gt; ...); Just a little thing I want more developers to know about. (Don't forget to transpile for older browsers!)
I work on [TensorBoard](https://github.com/tensorflow/tensorboard) which visualizes machine learning. It's ~10 web apps made by ~20 devs with ~100 contributors all packed in a [2mb](https://pypi.python.org/pypi/tensorboard) pip package with a CLI web server that works offline. We use [VanillaJS](http://vanilla-js.com/), TypeScript, and only depend on a [couple JS things](https://github.com/tensorflow/tensorboard/blob/master/third_party/js.bzl) which we hermetically define to work forever. We integrate with [rules_closure](https://github.com/bazelbuild/rules_closure/) which is an ivory tower VanillaJS toolchain designed by Google during the ecmascript4 days. We depend on [Polymer](https://github.com/tensorflow/tensorboard/blob/master/third_party/polymer.bzl) because it's the only framework, to my knowledge, that invested itself down the long hard road of [standardizing](https://www.webcomponents.org/) its ideas with W3C. Anyone can make a framework, but building it with the consent and involvement of web browsers is hard.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [tensorflow/tensorboard/.../**polymer.bzl** (master → 70aece3)](https://github.com/tensorflow/tensorboard/blob/70aece3b60800d872cf60cb0f4ab9a5dc1f94ed7/third_party/polymer.bzl) * [tensorflow/tensorboard/.../**js.bzl** (master → 70aece3)](https://github.com/tensorflow/tensorboard/blob/70aece3b60800d872cf60cb0f4ab9a5dc1f94ed7/third_party/js.bzl) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dw7ktyc.)
I'll trade you one Vue vs. React comparison piece for two 'you don't need a build process just use makefikes' articles!
IMO CSS Grid and ShadowDOM are two enormous ones. CSS Grid you can use now in production. In terms of UI/UX I'm going to say UI animations should get more subtle and faster, or just go away completely.
Thanks bro xD
Fixed! Thanks for pointing it out, totally missed it :)
I never heard of the Shadow DOM. Thanks for sharing.
What about Hot-loading? I always love being able to see my code changes as and when they happen.
Yep! Specifically I mean native HTML components. Basically HTML has the ability to do stuff like custom scoped components like in Vue or Angular.
**[webgif](https://github.com/anishkny/webgif)** - *Easily generate animated GIFs from websites*
That's a fair characterization. I'm pretty eager to sacrifice normal JavaScript collection semantics if I can get anything valuable out of it.
Nice job. [Here's my base Webpack set-up](https://github.com/mrkipling/site-template-webpack), in case you're interested for reference / comparison. I list all of the technologies that I use by default in the README, but basically it's a setup for Wepack with React, hot module replacement, and all of the obvious things like ES6/7+ transpilation, eslint (with Airbnb rules), Stylelint, SASS, PostCSS with autoprefixer, etc. There are also a few other things that are less obvious but that I still use for most projects, such React CSS modules (local per-module SASS instead of global), and a [Hygen](http://www.hygen.io/) config for generating components.
As far as I know there is a Processing.js and there is also P5js. I honestly don't know the difference.
Sounds pretty good! I will take a look ! :)
I love Processing but haven't found a good use case for it so far. When I do simple web apps I go for React, when I need custom data visualizations I go for D3, and for games something like Phaser/Pixi. I suppose it's still very good for its initial purpose: a tool for generative art that is accessible to non programmers.
I would write a simple helper to that took a string and replaced all non numbers with empty string. &lt;span&gt; {#numOnly date} &lt;/span&gt; registerHelper(‘numOnly’, function (string) { return string.replace(/^[0-9]/g, ‘’) } This will remove decimals and commas too, anything that isn’t 0-9.
I also have [one that I use for basic static sites that uses Gulp](https://github.com/mrkipling/site-template-static). Sometimes I prefer a task runner if I'm creating something that isn't as JS-focussed, especially if I'm working on a legacy project (although I greatly prefer Webpack wherever it is appropriate to use it). Oh and that reminds me, I have [another one that I use for Phonegap projects](https://github.com/mrkipling/phonegap-template). I used my Webpack project as a base; removed things that are not necessary; added some useful things such as a material design UI framework; and wrote a bunch of useful (but simple) scripts to build and sign APKs. It really helps - now if I want to create an Android app using Phonegap I can just jump right in and focus on building it, not spending half a day setting everything up. I guess I have a lot of template projects set up :)
I love you
&gt; So what are the options for modern web/js application in terms of UI Hella broad question... maybe [you should start here](https://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks). &gt; and what would they be like in the future? Judging by what happened to competing technologies in the past: 1. There's intense competition of technologies doing very similar things. 2. Then, one technology is gradually more adopted (for various reasons), and dominates the market. 3. Other technologies are still there, but used only by hardcore fans or in very specific situations. 4. Eventually the technology becomes the default "way to go", and it seems that everyone uses it now. Learning resources can be found in abundance, and everything you need can be found. 5. A new, breakthrough techology appears, changes everything radically. Then similar copies are created. Go to 1. It seems that we are at step 2, with React.
Agree on faster animations but they shouldn’t go away. A subtle animation is a great way to demonstrate state change so that the user actually notices etc. 
My students will appreciate this. :)
Yes please. ʕᵔᴥᵔʔ
I totally agree. I just think they should ONLY be used for some real purpose. Not just for aesthetics.
Yeah that is a valid purpose. But things often get animations where they aren't really necessary.
Agreed. An application should convey changes in state effectively, showing where and why the state changes. Removing animations all together is throwing the baby out with the bathwater. Showing state change over time is preferable to showing it instantaneous, because it increases the users perception of visual salience and provides a way for the user to understand the context. When the users understand the changes in state they better understand the use of an application as well. Animations just needs to be balanced with the users experience of time, so it does not feel ineffective.
I work on more ClojureScript projects than vanilla JavaScript ones. The built-in ClojureScript collection functions cover most of the cases where I'd normally reach for Ramda or Lodash. Coming into an established JavaScript project, I would strongly consider seamless-immutable. You've made a good case.
I wish you'd have posted this one month ago. +1
Same! Would love to hear pro's tips
Better later than never ! 🤗
https://github.com/b-m-f/webpack-boilerplates Different branches for different Tech:) Web-assembly, React, TypeScript.
I used the length to help remember. `push` is longer than `pop` because it adds `pop` is shorter than `push` because it removes `unshift` is longer than `shift` because it adds `shift` is shorter than `unshift` because it removes Not as fun as dropping the "f" tho :(
It all depends on what your move does. Once you know how to move, then you can write a function that does the opposite of the move and call that with your button.
[removed]
Okay so could you help me? Because i can't find any understandable source (for me that is)
Because Google owns a browser.
Guys... I have to tell you something. I started using VSCode after I read this post and now I can't stop! I used it for a 4-5h test run and now when I start atom.io it just feels slow....
This will confuse me, since you don't shit from the head, you shit from the back. But Array.shit() comes from the head.
Thanks for the detailed explanation! I really appreciate it. I did notice that the xhr function was being called but I didn't understand what the purpose of that was since no arguments were being passed to it. 
If you have specific questions, I can help answer them. But I'm not sure what you're doing or how you're doing it right now. I don't have much to go on.
I love you too, which is why I shared.
I suppose you can start with looking for some stuff from Roy Osherove, including his book on unit testing. I've also found one video(haven't watched it though): https://www.youtube.com/watch?v=dJUVNFxrK_4
Hahaha my exact thought
What about puppeteer? https://github.com/GoogleChrome/puppeteer Its basically headless chrome - regarding page breaks: what if you simulate pages in the front end with divs and send them to puppeteer? That way pdf &amp; preview will most likely look the same - though of course you can‘t be 100% sure if it’s done front end.
Thank you very much for taking the time to answer my question sir, but if I may ask, can Xampp serve my content?
Sometimes, where it makes sense. But your concerns are real ones. It's definitely harder to see what's going on sometimes. I try not to overdo them, or include some manual versions with the generated ones to show what the generated versions are doing just at greater depth. But sometimes you just need these kinds of tests to get decent coverage when dealing with variable input.
Great blog post. Joi is quite nice indeed. A friend of mine has been working on a similar library that is somewhat inspired by Joi but has a bunch of unique and really cool features. One of the features is 100% TypeScript support. If the validation is successful the validated data will have accurate types based on the schema. You can check out the library [here](https://github.com/Jomik/cerberus). 
Shared component apis are already here, and they are shareable even across the web. Web components simply mask a naked dom, nothing more. You'd pull 5 elements and end up with 5 frameworks underneath, while the elements themselves don't have any level ground, can't communicate or respond to one another, not to mention other critical things like SSR. Seeing how it hasn't gained even a fraction of actual attention over years despite Google blowing a fortune into it, it's probably a dead spec as well. 
https://www.youtube.com/watch?v=Eu35xM76kKY&amp;list=PL0zVEGEvSaeF_zoW9o66wa_UCNE3a7BEr
Were you able to make any progress with this? As was mentioned, the way you're writing all your code into the onclick attribute of the buttons is not correct. That being said, I see some typos like leaving out the c in onclick and capitalizing an I in an if statement. I would encourage you to take an intro to web development course from somewhere like Udemy or Treehouse. At the very least, use examples from MDN like this to see how you should structure your code: https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick MDN is a more thorough and trustworthy resource than W3 Schools, but in this case the latter has a super simple example of what you're trying to do https://www.w3schools.com/tags/ev_onclick.asp
Interesting.
Can I ask.. Why do you "greatly prefer Webpack"? What benefit do you feel it offers? The only benefit I've ever really noticed is the ability for using single file Vue components. (and maybe hot module reloading but honestly I've never used it nor do I care to and besides Gulp had something similar anyway) I only ask because I see all of this love for Webpack just because it's the "in thing" but for simple web development what does it actually offer that a task runner doesn't?
Could you put it to work here? https://jsfiddle.net/v2yo9qzk/3/ I'm having a hard time understanding, thanks for all the help in advance
I can but I won't. There was 3 minutes between when I posted my suggestion and when you replied so it doesn't look to me like you even tried. I'm willing to help teach but not to do the work for you.
Possibly: * ES5 – this TOC: http://speakingjs.com/es5/ * ES6 – this TOC: http://exploringjs.com/es6/
Just imagine the array is Donald Drumpf. All that comes out of its mouth is a bunch of shit. 
It's not really one killer benefit, but rather lots of small ones. Hot module reloading is a huge benefit and should be understated. The fact that it builds a dependency graph so that you don't end up with unused files is also really useful. It also has a great community around it - when 90% of React developers are using Webpack it makes sense to use it for React yourself, for the plugins / support if nothing else. To be honest, long too long ago I was of the same mindset as you; Gulp worked fine for my needs, so why would I bother with Webpack just because it's "in" at the moment? Then I tried it one weekend for a personal project, and everything fell into place. If you don't have much experience with Webpack then I'd recommend doing what I did and just trying it out some time for fun. You have nothing to lose but potentially a lot to gain.
I couldn't agree more with you on this. There are lots of bad tools out there and it is the responsibility of the programmer to know the difference. I have interviewed too many people that only know a framework but couldn't code their way out of a paper bag with straight JavaScript and that to me is sad. I use the tools that help me do my job better and if they aren't necessary, I don't. It's the same issue I've had with the Mac vs PC attitude forever. Use the tool that is right and stop using it because of it's status.
[removed]
Signed up for it. Thanks for the tip!
Kind of a cheesy joke tbh, but I auto-upvote anything anti-Trump so you got mine.
Why is this NSFW? 
Because shit? I see no other reason.
Any idea why? 
Unit testing with data? Absolutely. There are several cases where it makes sense, and I usually find myself writing up a bunch of separated test data that can be slapped into a dynamic generator/runner. Yes. &gt;Less readable Only if you write it badly. Supply enough information in the form of clean code, proper variable names, and a spiffy reporter. &gt;Flawed test Well, that's the case with anything, really. Think through what can be executed in a batch, what kind of data is being varied, and aim for simplicity. "Data classes", JSON files, or just an object file will do for data. The runner/dynamic generator can then take the data and generate or just run them dynamically. Test case names + parameters usually are enough to identify the culprit, meaningful error messages go a long way to supplement the potential shortcomings. 
Oooo, purdy. Useful for more complex objects.
So your going to stick with jquery for the foreseeable future?
I think we need more information to properly answer this question. Are you running a Node server? Are you *already* tracking reader engagement? *How* do you want to measure it? Time spent on the blog post, or actually scrolling to the end of it, etc. You need to reword your question. Nevertheless, I doubt there’s a single NPM solution for this but I’m not sure
I remember when I used to get excited about Medium posts
&gt; Unshift? Lift that whole stack of plates with both hands, and kick that bottom plate out with vigor. But unshift adds, so you’d be carefully sliding a plate under. 
Thx for reply, made me realize how vague I was being. I have found a package: https://www.npmjs.com/package/engagement I just found it, so haven't examined its methods, but it looks configurable, so I'm hopeful. I am making a MERN stack app. When I imagine how it will work, it can be as simple measuring literal reading time. So, I can take the average word/minute reading time, take words/line, line's/page, and calculate some range of scroll rates that can tell me people are actually reading, not just loading up a page and leaving to get their coffee. I have literally zero clue how to implement this, so actually the source code of these solutions is probably their biggest value to me. My app is in its baby stages, about 1 week away from implementing a user engagement measurement in dev mode.
Just use json schema
\&gt; If you eat food, you crap out your butt, right? Yeah Alright, now keep with me here, it gets a little complicated If you eat food and crap out your butt, Then maybe if you stuck food in your butt You could crap out your mouth. \[South Park Season 06 Episode 08 \- Red Hot Catholic Love\]\([https://en.wikipedia.org/wiki/Red\_Hot\_Catholic\_Love](https://en.wikipedia.org/wiki/Red_Hot_Catholic_Love)\)
This worked perfectly. Thank you 
I encourage you to read/watch what you can from “uncle” Bob Martin to understand the long term benefits or to consider the “philosophical” aspects of it. https://blog.cleancoder.com
Thank you. This worked perfectly! 
Perfect fix. Thanks! 
You don't need to memorize APIs if that's what you mean. We all look things up on mdn and employers understand that. You're better off learning how the language really works. I'd recommend reading about the event loop, closures, promises and similar. That's what'll get you a job.
If you think that's really the case, then maybe you work with a bunch of puritans. 
In my workplace its not uncommon to hear "fuck your mother" being directed toward a computer. 
I want task A to be on the queue until a certain date. Can i set an expiration date? It would be a very nice feature imo.
does it support promises yet?
I definitely like and recommend your books, but you should identify yourself as the author.
Why wouldn’t anybody want that enabled?
One way might be to see how static properties are desugared from classes. ``` class Greeter { static testing = 1; greeting: string; constructor(message: string) { this.greeting = message; } greet() { return "Hello, " + this.greeting; } } ``` ``` var Greeter = /** @class */ (function () { function Greeter(message) { this.greeting = message; } Greeter.prototype.greet = function () { return "Hello, " + this.greeting; }; Greeter.testing = 1; return Greeter; }()); ``` So you are on the right track. You need to instantiate the object first before you can edit the prototype. However, you can use an IIFE to avoid defining the wrapper class.
You can just use a separate variable. var counter = 1; function F() { this.f = counter++; console.log("F", this.f) } new F() new F() And skip the weird G wrapper. 
If you just want to keep some small state between function calls, I would use [closure](https://en.wikipedia.org/wiki/Closure_(computer_programming\)): var F = (function() { var f = 0; return function() { f = f + 1; console.log("F", f); }; })(); F(); //&gt; "F" 1 F(); //&gt; "F" 2
Hi Marsman! As stated in the docs (https://webpack.js.org/guides/hot-module-replacement/#gotchas) it has some gotchas that aren't that obvious to less experienced developers 😅
&gt; mini-css-extract-plugin Hi Unknownz! Very welcomed feedback! I'll investigate the mentioned items. The second item quickly looking at it looks like you're right Cheers :)
You can do it by modifying the constructor: function F() { this.constructor.f = (this.constructor.f || 0) + 1; this.getF = function() { return this.constructor.f; } } var f1 = new F(); f1.getF(); // 1 var f2 = new F(); f1.getF(); // 2 f2.getF(); // 2
I worked as an operational manager for a Courier company. After 15 years at the company I decided that I wanted to do something more interesting. I did a number of online courses and made a couple of websites to use as portfolio projects along with some other side projects which I put on github. I now work as a javascript developer on a software project for a large telecommunications company. I think the most important thing to demonstrate is that you are always learning and seeking out new knowledge; the industry moves so fast that this is an extremely important trait for employers to look for in potential new developers.
No problem! I'm glad you got some help. Everyone was a beginner at some point and some people lose sight of that once they get going a little bit. Keep pushing to get better!
I'm trying to get some stuff up on github also to get some kind of portfolio going. Thanks for telling your story! Makes me feel like I might have a chance to change my career! 
I agree. Self learning is just so much more fulfilling and I'm certain that 5 hrs of self learning something you enjoy is worth more than the 7 years I did at university doing something I didn't enjoy, but now I just feel like I'm stuck with my choice. I've been self learning Java (Android) even have a game released at play store, Node, C# and PHP.. And I'm sure I remember more of that self learning than all the time at uni. Thanks for sharing! 
LOL I wish people would explain why this is bad and what I should be doing instead. 
I just remembered that adding methods have a 'u' and removing doesnt
I just finished building a few dozen forms with Joi, and this would have been a godsend. Let the refactor begin.
Or get the [best of both worlds](https://github.com/tlivings/enjoi).
Wes Bos's JavaScript30 is what you should do: https://javascript30.com Free course where you build 30 fun mini-projects with vanilla JS. Try to figure out how to build them on your own first, and if you hit a wall then his solutions are right there. Each project has some different concepts involved. Much better than a todo app or whatever. 
My first computer was an Amiga 500, I don’t actually remember getting it because I was so young. But basically I’ve just been kind of obsessed with and amazed by computers my whole life. I studied design because I love the arts, and eventually found myself in the realm of front end dev because as a designer at a dev shop, I just couldn’t really not be interested.
Good point! I usually do and forgot this time.
And here I was expecting to see Javascript porn...
I have recently started learning about JS testing, I found that the first thing is to write testable code in order to write unit test for it. In my opinion, design patterns like MVC will let us to write testable code. I have written an article about it http://softauthor.com/mvc-javascript-tutorial-using-es6-class-part-1/ There are two types of tests I use the most, which are 1. Unit Test (UI independent code mostly your Model code if you use MVC) 2. Integration Test This will simulate user interaction, mostly for view of your MVC I recently found the tool which makes the testing fun is cypress.io Hope it helps!
Your forLoop is displayConcerts looks weird. I would also suggest trying to simplify your code by using Promises rather than callbacks.
The main thing was my interest, which made me not to give up until today. :) Lynda.com helped me a lot in the initial stage. After that mainly Google. I learnt a lot at the work place by collaborating with the seniors. Building my own projects on the side for friends for low price or free. A lot of time trail and error! 
What do you mean by “shared component apis”? Can you give an example?
Maybe not modern yet, but future: webassembly will allow full-feature frameworks that are not based on HTML/CSS/JavaScript.
Currently, it doesn’t look like static typing is going to be part of the language proper anytime soon. But I don’t think it has to be. TypeScript and Flow are two elegant ways of bringing static typing to JavaScript. And they are doing just fine.
And easy way to make this bug obvious is to add the following line to the beginning of the complete text file or as the first line of `F()` (it switches on strict mode): "use strict"; Then the function call `F()` sets `this` to `undefined` (and not `window`).
Possible solution: function F(_this) { _this.f = (_this.f || 0) + 1; console.log("F", _this.f); } function G() { F(this); } var G = function() { return F() } new G(); new G(); But the best solution depends on what you actually want to achieve.
*pop() and poop()*? *push() and... ew... "pull()"*.
nice article. another is having a function which returns you can object, without having to use `new`.
Possible solution: const singleton = { f: 0, }; function G() { singleton.f++; console.log("G", singleton.f); return singleton; } console.log(new G() === singleton); // G 1 // true console.log(new G() === singleton); // G 2 // true 
You can do X with 1 framework and the same X can be done with another framework just ask easily is all I am saying. c-r-a exists yes and as mentioned in the previous comment – its another for doing what the article suggests, not taking anything away from c-r-a at all. Dont think NextJS guys are catering to anyone in particular, c-r-a and NextJS are both open source projects with a good community of people, which one you select is totally upon you. As for advanced features line - you are ultimately writing React, NextJS doesnt ask you to write anything else. Components, component state / props and data flow / management, its the same principles using a different setup. If a beginner cannot continue to learn the React using the steps on the blog post – you should give me pointers on how to improve my writing skills :)
Glad you liked it, I just started blogging. Hoping to improve my writing skills. And yes function car(wheels) { return { wheels: wheels } } Is also a very common way to create multiple objects of the same type.
I dropped out of chemistry grad school and a friend got me a temporary position regression testing for a release at the company he worked for. The software was a web app and part of my testing involved installing it on a variety of server platforms and configurations. I hadn't ever done any work before with Windows Server, IIS, SQL, or Active Directory but was able to figure it quickly and with minimal intervention, so they hired me full time and started throwing more tasks at me including their IT and build automation tasks. I worked there for several years and continued into build and release management at other companies. Because of my desire to build tools to automate things further and make my job easier, I moved on from simple scripting to building applications. Through online research, trial and error, and some instruction from coworkers, I was able to learn object oriented programming and many other programming skills so I could build complex tools on my own. I now work remotely as a developer and really enjoy my career. It really helped initially knowing someone to get a foot into the software world, but since my first job I have been able to secure positions both with and without connections at the companies through my previous work experience.
This has actually been considered in the tc39 before, but it was pretty much just abandoned. I think it comes down to three things: 1. JavaScript is not strongly typed. I don't think optional types could impose useful guarantees to have any positive impact on the runtime without introducing breaking changes to the language. 2. We have TypeScript/Flow for tooling benefits. 3. WebAssembly is typed, and has been developed for raw performance. WebAssembly is likely to play a much bigger role on the web in the future. For now, you can [compile TypesScript to WebAssembly](https://github.com/01alchemist/TurboScript) to gain an advantage by using types in your code. However, do keep in mind that WebAssembly does not have access to the DOM, among other things.
Hi Sam! Very good observation! It's actually SCSS. Would you like to see support for sass files? I can arrange this as a kickstart configuration.
I once punched my monitor at work out of frustration, and it broke. It was old so they didn't care much. Pretty soon after we all went out for lunch.
type `node` in terminal and experiment with it there if you forgot
I built a (very) simple node [LOC counter](https://www.npmjs.com/package/js-loc) for fun ^̮^ - feedback super appreciated since I’d love to make it more useful with some React/Redux|Mobx focused analyses and stats!
Even if that would be possible, it would be really bad idea to let some random bots browsing your hard drive and steal data. And no it's not possible.
fetch isn't nearly as flexible as axios.
depending on the workplace a lot of us yanks are prudes, fancy ourselves "good Christians" and otherwise delight in upholding a bunch of made-up bs rules... makes the weak feel more powerful 
your workplace sucks then... you do what you gotta do to feed your family, but think of looking for somewhere less stuckup... as long as you're not swearing AT people, rules like that just show your workplace has its priorities all out of whack... what other usless or even obstructionist bs rules are they holding over you... you wear a uniform to your non-customer-interaction deskjob too? I just wish more people demanded better of their employers
Good starting point would be understanding [Testing Pyramid](https://martinfowler.com/bliki/TestPyramid.html) which helped me having a clear picture of the whole testing purpose and why so many different aspects of it. It’s also important to stay away from having a 100% file coverage as a goal since it doesn’t necessary include a 100% feature coverage (I’ve seen way to many “useless” tests). As an example: If you are building a UI search feature you can start by asking yourself about a simple user flow and then running those cases against your created function: * Would user click on a search box or press a tab button? *you can test (simulate) both events and check that the focus is on search input* * What would happen if the user inputs value that exists? *maybe it appears in a dropdown, so instead testing that the dropdown element exists you can simple test if the result appeared on a page and just test your search function with a valid/invalid inputs against a sample array of results, and test dropdown separately etc. - make it simple if you can =)* This might be very broad answer, but once you know “what” do you wanna tests you can easily find in &lt;NAME_ANY_JS_TESTING_FRAMEWORK&gt; documentation how to simulate and write expectations. gl &amp; hf (~_^)
If you are to argue this more formally you will need some much better examples. First, JavaScript does not differentiate between integers or floating point numbers, all numbers have the same type. It makes it seem like you have little idea of what you’re proposing and how the language works when your examples use `int` as the type. Next, your `AddNumbers` function is not clearly wrong. Apart from the name, concatenating strings with `+` is completely normal. Your examples also rely on strict typing far more often than necessary. With the exception of `AddNumbers` the issues can be inferred without needing explicit types. In fact, both TypeScript and Flow encourage relying on inferrance. The disadvantages of strict types are also not insignificant. It takes a considerable amount of work specifying complex types and handling complaints from the type system that you can otherwise prove are not possible. In my experience in types languages as well as with TypeScript, it is rare that this finagalling has actually helped me to design an algorithm or data structure. Finally, I am highly skeptical of claims that types reduce bugs. It has been rare, in my experience, to track a bug down to something a type would have prevented. It does happen but more often than not the bug is an issue with logic or an unforeseen interaction rather than misunderstanding a variable’s type. That said, I would not mind if the type annotation syntax that TypeScript and Flow use were added to the language. It seems well accepted and useful. But, I encourage you to get to know the language and work with an untyped system to better understand the pros and cons and where it is really useful.
Well, you should use event listeners and extract JS into an external file. Having said that keep doing what you're doing the way you're doing and gradually your code will become cleaner and better because as your code grows you will start looking for ways to better manage it, that's how you learn
These days I'm working on something similar. Try Puppeteer https://www.npmjs.com/package/puppeteer. I tried experimenting with different libraries but found that they mess up with the styling of page. Puppeteer does not modify styling of page. So whatever appears on your html, same will appear on your pdf. 
React.js Fundamentals and Advanced Live Lessons videos by Charles Crawford. I found it the best and shortest way to learn React. Simple and clear explanations. Was able to access for free through my local library https://www.safaribooksonline.com/library/view/reactjs-fundamentals-and/9780134688671/
It would be interesting to work out a detailed set of reasons one might use either. I find Joi's DSL more concise and convenient. And note that Joi is technically more powerful in that it supports conditional validation rules evaluated at runtime, though many projects will not need that. The main benefit to json schema I can think of is that your validations can be published/shared for consumption by clients other than your own javascript, such as api consumers or non-js backends etc.
It's a synchronous validation, but for convenience the validation result object has a `then()` method if you want to treat it like a promise for code style reasons. It's not actually returning a real promise nor should it, since the work is being done synchronously.
I have also gotten tons of value out of Joi in my project and would highly recommend using it to validate an application's data structures, whether they are internal or external. You will catch many bugs over time this way and crisply document design at the same time. Its just a great tool all around. Or use json schema as others have suggested, as a matter of preference. Solves the same problem.
If you are automotive in the Detroit area, the transition should be pretty easy for you. Go to user groups, talk to recruiters, there is an excellent community to help you.
Thank you, puppeteer seems like the right choice! 
I recommend you binge watch this beautiful developer - https://www.youtube.com/results?search_query=fun+fun+function+testing Plenty of examples with various diagrams plus live code-along examples.
WORTH READING IT..
There's only one way to really learn development and that is to just hack on projects and keep at it. Formal CS degrees will teach you fundamentals of algorithms and theory, but will not teach you the on-the-ground knowledge you need to do something productive like build a web application. Many developers don't have CS degrees or other formal education because it's usually really not essential (unless you are working on certain types of problems where it is essential, but, you don't need a CS degree to work your way up to a senior level web developer). The trade is something you fundamentally teach yourself by cobbling together information from books, tutorials, blogs, documentation, and above all else, a personal passion for building stuff and doing it ceaselessly for years on end. Go for it!
Practice and interest needed to become successful in any career.
Right, I even got it backwards explaining it. 
Cool. Glad this turned out a positive experience.
yes - dwitter has cool JS snippets in 140 characters https://www.dwitter.net/
The real link is always in the comments!
how the hell do they do that? trial and error? or do they somehow convert/minify some math formulas?
Absolutely! :), I was recently working on a project that required this functionality myself and wrote this class (minus some cleanup and refactoring). Decided to strip it out and release it separately. Glad to see other can benefit from it as well :)
1. Get a working model 2. Simplify 3. Find weird quirks to your solutions on stack overflow
I find your reply very useful. Firstly, I am aware that JavaScript only has one number type, which are always double precision floating point numbers if I recall correctly, but wouldn't it be useful to be able to force a variable to only be an integer sometimes? Next, I know the `AddNumbers` function is not wrong. What I meant is that it doesn't do what I would have expected if I didn't know that the variables were `strings` (I do though). It is wrong in the sense that what it does does not match its name. Perhaps if I rewrote the example this way: const num1 = document.getElementById('num1'); const num2 = document.getElementById('num2'); const sum = AddNumbers(num1.value, num2.value); // Does the wrong thing, i.e. not what I wanted. function AddNumbers(num1, num2) { return num1 + num2; } I guess I could rewrite the function this way? function AddNumbers(num1, num2) { num1 = Number(num1); num2 = Number(num2); return num1 + num2; } I feel that having an error in cases like this would be more helpful than getting the wrong output. Am I missing something in this regard? &gt;Finally, I am highly skeptical of claims that types reduce bugs. It has been rare, in my experience, to track a bug down to something a type would have prevented. It does happen but more often than not the bug is an issue with logic or an unforeseen interaction rather than misunderstanding a variable’s type. Then perhaps this issues only occurs for non-experienced programmers then, because the root of a lot of logical errors seems to be based on types, as well as other forms of logical error. At least for the people around me; this might be a localised problem in my environment then. I agree that it would be useful to have some of the functionality of TypeScript and Flow natively supported in JavaScript. And thanks for the suggestions. I know a bit about JavaScript and I have worked with and have been learning with an untyped system, as well as a typed system. My opinion is that something similar to TypeScript in JS would be useful.
:-)
Has any big company adopted Vue yet? Can you give me TLDR of benefits over Angular and React?
Oof. That’s a tough one. I’ve been using Three for a while, but can’t think of any tutorials like that. There’s not a ton of Three tutorials out there anyway. Really, the best way to see how to do something is to delve into the source for each example. Hopefully that page you linked hasn’t obfuscated their JS, so you can look at that too. 
&gt; Has any big company adopted Vue yet? As far as I know, GitLab and Alibaba. No huge backers so far. &gt; Can you give me a TLDR of benefits over Angular and React? I see it as a React with Angular templates. Vue fans will say it's easier, but fans of any framework will say their framework is the easiest. It's more a personal choice I guess. Make a project with it and see how you like, when compared to others.
And these are just the good parts.
Could you ELI5 this?
Yes, sometimes types can be helpful but they aren’t the only way to achieve the effect. Whether or not to use them is about deciding whether their pros outweigh their cons. Types are not a panacea and they do have cons. The original post doesn’t acknowledge that.
The issue is that my data is running through external scripts i have no power to change 
sure, vs code's lacking in .sass formatters atm. 
can you elaborate on "capturing emails"? or link to that blog or readme?
lol why was big companies in quotes? 
how do you over fit with "top much training data"?
Is it using Webpack 4?
That's coming in 3.x from what I hear
Vue is marketed as easier, but I’ve seen a bunch of Vue to React switches with people surprised of how similarly easy they both are. 
Oh I see what you mean.
I think this pretty much exemplifies why Vue didn’t turn out the way it was hyped up, half of the things you said aren’t true, the other half are actually disadvantages. The thing is, most of us have experience in React *and* OOP/MVC templating, I sincerely doubt you have spent more than 5 minutes on the former, if any. There’s about no surprise otherwise to [how the market is unfolding](http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core) because people are tired of the complexity and limitations of the latter, what you see there visually depicted is the end of the templating paradigm.
Wouldn't your first point equally apply to TypeScript, since types are optional there, too (it being a strict superset of JS)?
&gt;&gt; Vue didn’t turn out the way it was hyped up, half of the things you said aren’t true, the other half are actually disadvantages You really need to back these statements up with something.
Well, worst case, you can check out https://stackoverflow.com/questions/tagged/promise and see if you can solve the interesting ones before looking at the solution.
Been through this. Claims get refuted, then start the personal attacks. I'd rather say, if someone makes a claim, then back it up. "Why" is Vue simpler? Objectively you're confronted with an api that is hundredfold the size of Reacts, an entire new syntax, dependency injection and so on. Why does it "separate concern", do you even know what that means? And so on. The npm link i posted is evidence enough that there is something fishy about propping Vue up to be something it probably isn't.
/u/FurryFingers That's what i just said, like a clockwork, it has to get personal. 
I saw this post right after yours, not sure if you've seen it? https://www.reddit.com/r/webdev/comments/86vc09/i_got_a_mechanical_engineering_degree_and_hated/?utm_source=reddit-android Good luck for the future!
Hi again Sam ! By capturing emails I mean a page where people can just fill their mail and subscribe for something ! For example a mailing list or a wait list. If you use something like MailChimp, there's no need for a server side component :). I do not have an article of this but I could perhaps make one with this starter kit 🤔. Cheers !
Haha. Wow. Thanks! 
Separate concerns: in our case here and to keep it to only one concept, template and component. In React, they merge the two via bastardizing the template via JSX. Learn Angular. Learn more about React. Use Angular on something substantial. If you can’t even get past the concept of DI, let alone its value, you have no business talking about front end on 2018. Once you do, then come back and be open to learning something you don’t know. 
☺
You are mixing up the presentational layer with business logic. In Vue you have a presentational layer as well, or else you'd be stuck on dead html. The only difference is that you write code with html string extensions. It's explained here: https://reactjs.org/docs/introducing-jsx.html#why-jsx
Everything in frontend is a game changer. Anybody remember when it was css?
If those calls are separate I'd add spinner for each element. Personally I love Facebook approach so instead of normal spinner you can display some gray representation of graph/post/comment and just animate it a bit 
I think that’s the point. Both gitlab and alibaba are fairly sizable companies. However, I don’t think a framework should be used purely because X company uses it. Different frameworks exist because they meet different needs. If your needs are similar to these companies, then maybe it’s a proven tool because they’re using it. But it could also have been because the IT lead thought it was cool and adopted it, giving the dev team of the future a headache trying to continue down that solution while desperately asking to rewrite it in the right tool. 
Feature-wise it is very similar to React, however the ecosystem includes first-party routing and state management, which makes everything really easy to set up. Also the documentation is great. All of this reduces the mental overhead for creating apps which makes it ideal for smaller sized teams or side projects. 
Css was definitely a game changer... I remember!
I think a global onLoad is a bad idea except in very simple situations. If your site gets to be complex at all, there will almost certainly be a time when you don't want that loading graphic to show. More complex designs will probably also only want that loader to show in certain parts of the design, and not cover the entire design. In the end, it's a cute trick, but I'd much rather anyone on my team show and remove that loader in each specific circumstance. To that end, we have a function that takes a parent element and an ID as a parameter, and it centers the loader in that element. Another function takes that ID and removes the loader from the DOM.
So to recap: They lied to you during your initial consult. Do you really need to go beyond that? Expect to get screwed around constantly by them. We hired an external team for our Cordova App after getting the Android version working in-house. They just needed to implement the tiny bit of Java code in Swift instead. Most of the app was JS and working perfectly. They spent 4 months claiming they had things working but saying the Android code didn't work for them. In the end, when we demanded what they had, they had nothing that I couldn't do in a day's time. In short, don't let contract developers screw you around. Keep a tight watch on them, and the first time they screw you around should be the last. For you, that has already happened before you paid them, so you dodged a bullet.
TBH, vue-cli 3 feels similar to parcel. I only had to change like 2 or 3 settings in the minimal config files and everything works.
This new extensions should be on the list too: https://marketplace.visualstudio.com/items?itemName=sburg.vscode-javascript-booster works much better than the refactoring one which is there.
https://github.com/jquense/yup supports async validation
No, you shouldn't use a framework just because other companies use it, but I think he was asking is it ready for production use, and as good as react in the wild, and I'd say most definitely! It's my preference over react simply because I prefer the template style of being html over jsx.
This is u/drcmda. React-Redux propaganda any time, all the time. It doesn't matter what argument you throw at him, he'll always find some obscure corner case where his favourite tech stack offers some tenuous benefit. Fanboys will be fanboys.
Didn't fb change their license recently to make it less of an issue for react? -- I definitely agree that it's funner to work w/ Vue than react, but I don't think the TOS/Licensing thing is an issue anymore iirc. Not that FB is that trustworthy a company so they could change it back at any moment, who knows.
[removed]
No discussion of JS, just someone spamming about their probject
Have a look at Typescript, even if it serves the same purpose, nowadays you can do anything in Javascript. And Typescript will help you write more robust code (if you use strict checks). Rather than learning a new language, have you thought instead to use Javascript in different environments? Node APIs, small scripts, Electron apps, etc. 
It depends what your user seeks.. If he intends to see the full content of page you can go for full page loader.. but it will cost more waiting time for all the to complete... You can use onajaxcomplete globally... Else in my view I prefer showing loader for seperate divs... Which is a good approach.. Aap each of your ajax calls are independent.. and have seperate usage.. I have done the same for my web app.. 
Please do correct me if I am wrong, but I believe what /u/karottenreibe is saying is that your first point would also apply to TypeScript. TypeScript is a superset of JS, which means everything in JS must be in TypeScript. You say that optional types may not impose useful guarantees in JS, but that is essentially what TypeScript is doing. I think TypeScript is actually imposing useful guarantees to have a positive impact on the runtime without introducing breaking changes to the language. Anyways, just my two cents.
Yes but it is still missing a lot that Parcel has. I forget what specifically, but I read an article comparing Webpack 4 and Parcel and Parcel still destroys Webpack.
Shift moves the front pointer along one. Unshift moves it back one.
How is the integration with Typescript? I tried Vue+TS in Visual Studio Code last year, and it was pretty neat, but not perfect, especially in single file components (missing auto-completion, imports not always done automatically...).
That makes sense! And yeah, I am definitely going to have one of my coworkers who is a huge Typescript evangelist take me under his wing.
Ah, I see. What I ment by runtime was the browser's compiler/interpreter. For the typings to be useful for the compiler, it would have to be able to trust the types completely (and throw errors whenever the types don't match), which would be a very significant change, but perhaps technically not breaking seeing as it's opt-in, as you say. I'm not familiar with how optional typing works in other languages, perhaps there is some benefit for the runtime anyway. I'm mostly just guessing.
Okay, I really need to spend more time in the comment section of this subreddit. Two amazing answers in less than an hour. But you're 100% correct. I didn't tell you what my needs are and I guess I'm new enough in my journey to not really know. I'll check back in when I know more :P
Coca-Cola uses WordPress! WP is a game changer! 
Pepperidge farm remembers too https://goo.gl/images/j4z2UX
They can't change the code that's already licensed under a more permissive license to something less permissive, nor could they change to a less permissive license for future work and commit it into the more-permissively licensed code base.
About a year ago I started looking for a frontend framework(or library which you prefer) first I tried react. At the time there were some weird breaking changes wehere if I follow an article that was a few months old my code wouldn't work with the newest version of React. Plus React as a framework was just in general less intuitive. Sometimes I'd be writing code that I felt was unnecessary (mostly cause it was hard to understand) with the way that Vue is written it was easier for me (a frontend noon) to pick up and just start jamming stuff owning. As I started to learn more it was a breeze to expand on. Vuex is super easier to pick up whereas Redux is a giant pain. Idk what the answer is for everyone but Vue was indeed far easier for me to pick up. Also not a huge fan of JSX..
/r/iamverysmart
We've been through this a thousand times before, but I'll present the ur-counter-argument for anyone interested: if API size is your definition of simplicity, why don't we all write our apps in WebAssembly? (etc)
You can use render methods and JSX with Vue if you wanted...not sure why but I hear sometimes people prefer it.
That's what I meant, thanks for elaborating :-)
Link or it never happened 
How did you add `ffmpeg` to your `$PATH`?
Vue's astroturfing and hype campaigns really rub me the wrong way. The CLI tools is basically just a standalone Yeoman generator. Not really a game-changer as there's literally been a generic framework for this kind of thing since 2013. There's also ridiculous stuff like: * "Plugin architecture with no vendor lock-in" Followed by * Put your `webpack` configuration in `vue.config.js` Like they couldn't even last 2 paragraphs before walking back their marketing hype.
The Typescript support was greatly improved in 2.5. You are still at the mercy of an libs you use but the core support is there. Vuelidate doesn't have official typings for example.
I did make a Trello clone couple months ago, if anyone is bored I'd love a code review. https://github.com/wesharehoodies/simple-trello
You can write html with vue files
Damn, I was looking for a starter kit for dogs.
Just so you know: this website is not affiliated with us, the core team. And you will probably find clickbaity articles about every framework on Reddit / the web, so I don't see how this is a Vue-spcific problem.
&gt; you're confronted with an api that is hundredfold the size of Reacts You're high on bad spooge
Nice thanks for the clarifications
npm intellisense - I'm not sure if it's from another extension (eslint ?!) or just vscode but you already get this functionality without npm intellisense. p.s. using vscode insiders build
Great sounding... thing? ... So what exactly is Vue? By the pictures and description I thought it was going to be a new way of making CLI menus with fancy ascii art. ;) 
I would also suggest: Git Lens, JSON Tools
I'm solely on board with React but Vue is probably easier at first glance and in practice for newer developers. I think the first reason is that Vue docs push the UMD like jQuery whereas React there's a huge black box element to what's happening with create-react-app. React development is very poor without create-react-app or a similarly advanced build system. This is because the library effectively requires JSX and certain polyfilled ES6+ features. Those are two extra things to learn at minimum - many new developers will be confused at the prevalent use of spread, bind, quirks of arrows, destructuring, etc Another reason is that React just really isn't meant to be used alone. Facebook has Flux. State management without Redux generally ranges from confusing at best to completely incomprehensible at worst. React is really intended to split view components down and take advantage of stateless components. This is important because it really cleans the equivalent of presentational directives like v-if or v-for. Making a single component that isn't a composition of smaller components can still look fairly clean in Vue much like Angular whereas with react the component presentation/view layer (render) will be very gross looking without it.
Good suggestions, thank you. I will update the tutorial when I get a chance. I'm hesitating about the way how you handle the 'loop' function to execute it the first time, because it makes a harder to read for a beginner - maybe it is worth an extra line of code? But the const, color and filling the fire[] with zeros is definitely an improvement. Initially I thought about letting the user change the width and height, that's why they're variables, but you all are right that in this version they should be constants.
...or maybe don't try to explain an Array(List) as though it's a Stack? The methods are named just fine.
Thanks for the precision. Still curious to know how Vue will respond to what seems like a major improvement in the React world.
Thanks! I'll check those out and add them to the list when I've had enough time to play around with them!
This is really well done. Simple and clear examples. Thanks for sharing
Thanks for this, as someone who has stayed on API/backend work until very recently, this is right on time.
All of my favorites!
No problem! Glad you like it!
That’s the whole point of this extension...
When you store the comments, you’re gonna have to store a time stamp along with the comment that was made. That way, you know how to sort them. You can use JavaScript’s sort method to sort the comments once you construct them. arr.sort((a,b) =&gt; { return a.timestamp - b.timestamp });
Environment configuration aside, which is a Webpack thing, I’ve never found React dev to be “poor” at all. There is a certain level of ease with utilizing directives, but like JSX, it’s something new to learn. Also, following clean code rules, any code will look great. As a UI dev, having clean HTML and SCSS/CSS is just as important as clean JS components and containers. Directives don’t help with that. It’s all a matter of perspective. Personally, I find building html in JSX kinda fun and the ES6+ polyfills are what they are. No library or framework has all the spec features. The rest of the conclusions you stated are pretty subjective and I generally don’t agree. But I will state Flux is separated to promote flexibility. You don’t have to use Flux. You don’t have use Redux. 
Change ReplyToCommentID to parentId and it will help give you a better understanding of how the data should be laid out. You should have a table of replies(comments are essentially replies) each with or without a parentId. Now depending on where you want the performance overhead to occur you should tie the replies of replies to their parents in a "replies" array in MySQL(Most efficient server side), NodeJS, or on your JS front end(Not recommended for larger data sets). Now, I'd recommend modifying your MySQL query to handle this but I'll give an example of how to do it in JS. This may not be the most efficient method but it should work as long as the order of the returned array is guaranteed. This assumes the reply data structure has a 'parentId' and 'id' value. let nestedReplies = replies.reverse().reduce((result,reply) =&gt; { if (!reply.replies) { reply.replies = replies.filter(r =&gt; r.parentId == reply.id); } if (reply.parentId == null) { result.push(reply); } return result; },[]).reverse(); See it in action here: [JSFiddle](https://jsfiddle.net/stemsmit/z1codqm2/6/) * We reverse the result array such that we can pick up the most nested values first. * We apply a reducer function to condense our array to to top level replies only. the *if (reply.parentId == null)* determines if it should be on the top level or not. * We filter through the single level replies array and pull all of those replies that have a matching parentId to the current reply into a replies array off of the reply data structure. * We reverse the end result such that the array order is preserved but the result is now a fully nested reply structure. This may not be the most efficient method but it should work. In your UI you will need to separate out a reply component and maybe even abstract it into a reply list then utilize recursion to render everything out.
TypescriptHero https://marketplace.visualstudio.com/items?itemName=rbbit.typescript-hero
As far as different styles of programming/knowledge, I'd say a simple scripting language like python or ruby, and then a lower level strongly typed static language like C++. Not extremely likely to be useful in the same project, but good to know for a more thorough knowledge of different styles of programming.
&gt; Environment configuration aside, which is a Webpack thing I'm a React guy and I don't like Vue but.... To be fair, that's a misrepresentation. If you're using React in 2018 in production, you're "most likely" using Webpack. To say "oh it's a webpack thing" is sort of missing the point and likely why there are a lot of Vue people in the first place. There's a reason create-react-app exists, and for any type of complexity you encounter you usually have to eject, and be met with a bunch of wizard like custom yarn scripts someone wrote.
&gt; And you will probably find click-baity articles about every framework on Reddit / the web, so I don't see how this is a Vue-spceific problem. You make a decent point but it's ignoring something: I think there's a level of mystique Vue has, and I don't think it's proponents do a good enough job of distilling the "why". I don't often see too many click bait-y titles of decent React stuff in this or the reactjs subreddit, for instance, and usually if there are, it's called out immediately.
React. Less batteries included, more employable, works better with Typescript &amp; JSX, and also less surface api to learn (vue has it's own ways for mapping inside a template, etc).
Ruby
Thank you for reading! 😃
Ha! Love it! Now we just need a script to go with it that can playback ST3 files. ;) 
&gt; PHP is available in just about every cheap hosting which is exactly the reason to avoid it. PHP work is mostly cheap ecommerce stuff.
I was about 12 and we had Internet (it was about 1998 or 1999 and I was the only kid in school who had Internet). I started saving websites to disk and editing them locally to see what happens. A while later my dad got me a domain and 5MB web space. My mom had huge phone bills. I changed the design all the time and put skateboard pics of my brother online. Then I built a real local skateboard portal with news, pics, videos, forums with the help of my dad' colleagues. I learned vbScript and SQL and spent 99% of my free time creating content, filming and photographing local skateboarders and putting it online. It was quite successful. I gave the whole thing up when I was about 16 due to lack of time and interest. I also didn't like vbScript anymore. I do have formal education in software engineering but the 5MB web space was hot it started.
[RelativePath](https://github.com/jakob101/RelativePath)
You can take it this way, of if you are curious you might actually find it cool to see what it's look like. Did you even a link that I pasted ? No It is just a side project I started earlier this year to play around with service workers and server side rendering with ReactJs. If I had never put my hands on a Progressive Web App project I would have never imagine that the user experience could actually be so cool. Thought it might be interesting to share. 
Geocities had a plain text HTML editor. The rest is history.
That Rainbow Brackets one is awesome! Thanks! Also, I want to throw in another vote for Git Lens and Javascript Booster
Is the element definitely a class property and not an id? If so, use document.getElementById().innerHTML Hope it helps :)
Show the code or we won't know.
I had to turn it off because it kept grabbing my repo's `index.lock` at inconvenient times, have you encountered this?
Ok i pasted a link to the picture
document.getElementsByClassName() return an array so you need to change your code to document.getElementsByClassName('insert-your-classname-here')[0].innerHTML = 'HI';
 `innerHTML` is property of a DOM node and `getElementsByClassName` returns a collection of nodes. You need to grab the node by it's index if you're using `getElementsByClassName` or `getElementsByTagName`, I.e. `getElementsByClassName('some-class')[0].innerHTML`
Thanks it worked!!!
Thank you it works!!!!
Yes. But why?
Now you just a need a Medium article to go along with it
He just needs a Medium article to go along with it 
Check out import cost too, for if you are using npm packets and stuff (since you like data and statistics). Also, SVG Viewer, it does what it's name implies.
I think this is a particularly elegant way to solve this problem. The top level function reads very close to plain English: “A prime number is two, or is greater than two, odd, and has no odd divisors”. const isPrime = n =&gt; isTwo(n) || isGtTwo(n) &amp;&amp; isOdd(n) &amp;&amp; hasNoOddDivs(n)
Sounds pretty easy in theory, the only difficulty would be formatting/highlighting. Use Greasemonkey, select all text nodes on the document. When string is found, select the parent node, and use .replace to replace occurrences of the desired string with `&lt;span class=".my-userscript-highlight"&gt;`string`&lt;/span&gt;` or something like that. (additionally add CSS for your `.my-userscript-highlight` class for highlighting)
The getElementsBy* methods return HTMLCollections, which can be difficult to work with. Consider using querySelectorAll instead, which returns a static NodeList - unlike an HTMLCollection, it can be iterated over directly, it won't change while it's being iterated over, and it's much more flexible.
No, it does not return an array, it returns an HTMLCollection, which is quite different.
It was mentioned (earlier)[https://www.reddit.com/r/learnjavascript/comments/86epz7/a_database_of_javascript_resources_curated_by/?utm_source=reddit-android] in this sub.
A social network is a completely different thing from a software framework.
I never said they were named badly. Just that the explanation was easier to understand in physical terms. 
The technical explanation aside... This is how I *explained* it to absolute neophytes. 
Why not something like `const isPrime = n =&gt; hasNoDivs(n)`? Treating `2` as some special number that first gets checked extra and then explicitely omitted in `hasNoOddDivs` seems pretty artificial. It's probably twice as fast as it is here, but in the moment speed becomes important, you'd use something else entirely, probably? Like a sieve of Eratosthenes or something...
How would that work with ‘isPrime(-2)’? It would return as prime, which isn’t true. And no, this is clearly not meant to be efficient. A sieve would solve this in fractions of time.
I use vscode for 5-6 different languages and frameworks. Ruby, elixir, plain JS, angular 2 and TS, HTML5, Slim, Blade, PHP, Flutte(Dart) Is there a way for me to somehow create extension profiles? Right now whenever I start a new project I have to disable everything I don't need for that workspace. 
1) make an account and look at the unanswered posts on stackoverflow.com that are related to javascript 2) hope that the post is a beginner's level issue 3) research the topics 4) try, fail, try again, etc. umtil it works 5) answer the question 6) profit? --OR-- 1) use x10hosting.com or github.com and make a site 2) think of cool utilities or just fun things to use and attempt to make them 3) profit? --note that the above references WEB JAVASCRIPT-- also khanacademy.org/cs is good too
https://ayunami2000.github.io/video2audioJS/
Hi /u/yrenaudin, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Holy shit that looks amazing. Thanks!
Same here.
They may not have gotten around to makeing one yet... or they are still trying to compress it down to 1kb ;-)
Can someone point to a open source code base where they are justing standard js or no Reactjs, Angluar, Emberjs etc. 
You can use const for arrays since the reference in memory doesn’t change when you change the arrays items
English: "JavaScript, you are a wonderful language"
Looks like the pattern is called [skeleton screens](https://www.sitepoint.com/how-to-speed-up-your-ux-with-skeleton-screens/) - at least according to this article.
post-mortems: 1. http://romancortes.com/v2/nefertiti-1kb.html 2. https://codepen.io/y0natan/pen/MVvxBM?editors=0010 3. http://jsriffs.blogspot.co.il/2018/03/making-of-cyber-auroras.html
Array.from or [...HTMLCollection] to convert to Array
Can't seem to find the link to the js refactor extension. 
If you have the `id`s in an array, then you'd do something like this: idArray.forEach((id) =&gt; { document.getElementById('id').addEventListener('click', (e) =&gt; { // do something with the clicked element or an ancestor? use e.target }); }); If you were using a `for` loop and `var`, that would be a problem, since `var` gets hoisted and has function scope rather than block scope.
I tried Wallaby.js and it tells me the following when executing: &gt;No valid wallaby.js license found, it started in trial mode. If you would like to purchase a license, please visit our website. If you have already purchased the license, please activate it.
This is dope, did you use a js framework? 
Sorry, my use of the term ID was horrible and confusing. Reddit username &lt;a&gt; tags have a unique ID in a class prefixed by "id-t2_". There's no element ID. Each username has a unique class. For this solution I think I'd require an array for every single unique username on the page. That seems really inefficient. I'm not familiar with forEach. I'll check it out when I get home and see if there's a way to implement it.
hi not familiar with forEach
Vue is one the "big 3" javascript frameworks, along with React and Angular
Use a selector string instead, then: document.querySelectorAll('a[class^="author"]')
Visual Basic or Dreamweaver are preferred for this task.
Love this! I was seriously just a few minutes ago looking for an extension to improve my test execution. I’ll try out Wallaby tomorrow. A few others in there I want to check out, too. It’d be great if each blurb linked to the Github repo of the project.
Big 3? I'm assuming you mean big three that have similar functionality in relation to Angular. Big three general javascript frameworks for me was Angular, Electron, and Ionic. I knew React was sometimes used over Angular, but have never heard of Vue. I just googled Angular vs React vs Vue and didn't find anything older than a year in the initial results. News to me. 
Bad bot
When I was reading through a few weeks ago webpack 4 was brought up in an issue but was shelved for 3.0 since it was so damn new, which I think we can all appreciate.
querySelectorAll takes a plain string https://developer.mozilla.org/en-US/docs/Web/API/DOMString , not a regex. But yes, that's the general idea.
So just to make sure I'm clear (on my phone so I can't test these now) I need to do the forEach on all a elements I can find, then do an if for the regex to find the right elements, then I can apply a unique onclick to each one within the forEach after the if?
This is possibly a little advanced, but you want to consider 'event bubbling' for this ( https://javascript.info/bubbling-and-capturing ) tl;dr; : You essentially attach a single click event handler to a parent element, and then test the `event.target` to see if it's one of the reddit username links. Super efficient, better memory overhead and no need for any 'for' loops.
Use document.querySelector('.my-class-name')
Definitely a little advanced, but it sounds like exactly what I need. I'll toy around with it tomorrow and see if I can hit it hard enough with a hammer to make it work. Thanks!
I recommend avoiding `for` loops as much as you can in Javascript. Loops fail to clearly signal the intention of your code, and as such should be avoided whenever possible (prefer higher-order functions, such as .map, .reduce, .filter, ...). See also: https://www.quora.com/Can-we-say-that-the-for-loop-will-be-the-new-goto-%E2%80%9D-given-the-increasing-popularity-of-functional-programming/answer/Tikhon-Jelvis?share=1&amp;srid=3SJB and https://gist.github.com/robotlolita/7643014
Gotta get them views :P Every star has a Z coordinate that is randomly generated, which is used to set it's size and movement speed (bigger Z means smaller and slower).
Pepperidge farm remembers
I love CSS-Grid, it makes responsive designs soooo much easier to layout :D
Feel free to reach out if you get stuck
Instead of using the Prettier extension for VSCode, I’ve had a better experience with the ESLint plugin: https://prettier.io/docs/en/eslint.html
Thanks for the advice. I'll look it over in the morning. 
That’s so great! Can you think of any cool features to add?
Definitely , goal is to get a job as a front end engineer one day! Thanks again good sir!
I don't see a start button. I see a "LETS GOOO" button, but it does not disappear after a reset. Also, `prompt()` is very user unfriendly, you might consider another method. Also, using inline event handlers is bad practice and results in poorly factored, hard-to-manage code. Seriously consider attaching your events with JavaScript, instead, eg: https://developer.mozilla.org/en/DOM/element.addEventListener
Very cool. Love the compactness. I played around a little. It would be a little ‘realer’ if the distribution of stars was biased to the background. https://codepen.io/anon/pen/mxBMBG
You know what VS Code needs to focus on? Their poorly designed sidebar tree. 
Could you explain the 'bias' here? I see that you are multiplying the random number by the absolute value of the difference between two random numbers, I'm just not following the reasoning behind it and why it looks so much better. I agree it looks much more 'realistic'.
[try](javascript30.com) 
thanks a ton. At first glance it looks like it teaches vanilla javascript and ways to do cool stuff with only vanilla Javascript(which is gold tbh). Although, any insight on framework implementation level stuff?
Radi is absolute shit. The fact that poorly designed framework made the rounds online pretty much induced an aneurism in me. 
[Level Up Tuts and heck their youtube](https://www.leveluptutorials.com/tutorials) [author of js30](http://wesbos.com/) Much is free some is paid. All very worth it. If you become a real “expert” and take a deep dive on vanilla js, no framework will be hard for you to pick up.
Does it work everywhere though?
Make sure you post it if you come up with something neat.
Awesome man, Thanks! That `import firebase from 'firebase'` really had me stuck, so use to the old way.
Just took a look at wesbos. woah these are some really cool stuff. thanks a ton. i'd even go ahead and do that 30 day challenge. looks really amazing.
You want speed? You want ease of use? Want functional code? Elixir. It’s glorious. 
Yes his stuff is top notch. They have a podcast which is amazing. Which libraries in particular are you interested in? Like React or Node?
You should learn the amazing Vanilla JavaScript [framework](http://vanilla-js.com/)! It’s the best thing getting around! Once you understand Vanilla then you can do anything. Even React uses the Vanilla framework. 
im in job hunt so mostly React for now. but I'd be glad to go Fullstack.
Maplestory private server development and Minecraft development. I'm probably younger than most of the commenters here, but I owe my current life to these two games that consumed my childhood. My old game server portfolio pieces probably landed me my first interview + internship last year.
I think you entire site needs to be optimized brethren.
macOS 10.13.2
Things I love about grid that tables couldn't do: * not have pointless row elements * have HTML order and layout order be different (great for responsive and screen readers) * also no pointless row elements * elements can be laid out solely in CSS without touching HTML * fewer pointless elements, such as rows
Disconnect size from the other variables. There should be able to be a slow moving distant large star, just like a small fast moving close one. They’d just be more rare.
I graduated from a physical subject, then I become a engineer that work with switches and routers. After half a year, I found out that I was not interested in what I was doing. Then I learned web develop myself, by reading lots of books, and building lots of demos. The hardest thing was when I got my first job, my boss gave me two offer -- to be his assistant or become a front-end developer. The offer for assistant is twice better than the developer, it was really a hard choice. But right here I am happy with becoming a developer, which has brought me a lot of fun and freedom. I hope you can make your own choice that would bring you happiness.
Ignoring the fact that your article has nothing to do with Javascript, I think you're misinterpreting what these 2 completely different things are for. It is true, way back in the day, grandpa used to use &lt;table&gt; tags as a means of establishing a layout for the front-end, and it is common to hear the quip "omg, tables? What's next? A 56k modem?". However, considering the use of any tag in HTML should always boil down to semantics. Need to display a matrix of relational data to the user? Use &lt;table&gt;. Physical location of your business? Use &lt;address&gt;. Etc... The tags define the content. Don't get me wrong ~ the comparison is interesting as to how similar they've become. I'm just really confused who the target audience could be. If it's beginners, it's sending the wrong idea that these 2 are interchangeable. 
First result when I searched “big 3 JavaScript frameworks”: https://javascriptreport.com/the-ultimate-guide-to-javascript-frameworks/ Electron and ionic are well known too, but more niche (ionic 3 is mostly for mobile app development still and uses angular, for example (although the future versions are allowing other frameworks and have stenciljs support)).
I am basically on the same path as you. I am doing js &lt;-&gt; React back and forth and then go back to html and CSS to get as advanced as possible and then back to js and then back to react. I also found taking a break and studying python and general programming helps me a lot. I have spoken to at least 6-7 recruiters and they are listing their ads for React but most concerned with vanilla js. Vanilla is what their testing and quizzing on and what they want to see in reality. Are you interested in more resources?
This seems to be more about table layout. You can create a &lt;div&gt; and give it `display: table`, nest divs with `display: table-row`in there and other divs with `display: table-cell` in there. Then you use table layout without semantics. In a world where we need to support pre-flexbox browsers, this is useful because table layouts can be used to make elements take all available space without wrapping others, or vertical centering.
yes! sure! every resource matters. Even I feel the same. Once u master Vanilla Javascript, then learning a framework is just a matter of learning how components are structured and data flow works in that framework. Even in my country, recruiters does have an eye for developers who is comfortable with Vannilla Js because they want ppl who can quickly write couple workarounds/modules when something they want is not in the framework or they have custom needs. I think thats where a javascript developer can excel. Just knowing Angular or react will get u a job but won't help u survive in a long run because React might eventually be replaced by another framework in 5 years, With the speed of the evolution of js in the past 5 years, anything is possible.
If you want to achieve smooth 60fps animation you could animate transform instead of left since it's more performant. &gt; Changing left alters the geometry of the element. That means that it may affect the position or size of other elements on the page, both of which require the browser to perform layout operations. &gt; Once those layout operations have completed any damaged pixels will need to be painted and the page must then be composited together. &gt;https://csstriggers.com/left
Their use is optional
To begin with, one big load (for that matter, one big ANYTHING, generally,) is a bad idea. So yes, keeping it separate will speed-up the page. The best way to handle this is Promises. [well, IE doesn't support Promise, but there are promise implementation libraries for IE, even jQuery provides one which is good too, though letting IE RIP and using something new is the best way, IMHO. Anyways.] But with Promise, you can get all 6 promises immediately, and can even group them and wait on the groups separately, for example Resp-1 AND 2 may be needed for one info being rendered, so you can wait on them together separately, and it will succeed with both results or fail. For jQuery, it goes something like var prom1 = $.ajax(...); //req 1 var prom2 = $.ajax(...); //req 2 ... var prom6 = $.ajax(...); //req 6 //You reach here synchronously. //Any of the responses might not have arrived yet. //In that case, all are "Pending promises" //And you then rely on those promissed responses! $.when(prom1, prom2) .then(function(resp1, resp2){...}) .fail(function(err1, err2){...}) .always(function(){...}); $.when(prom3) .then(..... //You got the idea ;) 
API seems very unintuitive, docs are not good, benefits of said framework are explained poorly.
Yes.. We should mention not having pointless rows too.
Thanks for your time. I agree, I will prioritize on the docs, then. It's quiet in it's infancy, so the docs looks like the first thing to do if I want people to understand what it does. (y)
Hey again! I checked it out! I'll create another blog post with all the extensions that I missed and add this one to it! thanks Capaj!
Yeah I know. It could use an update. Did you checkout the vscode-icons though? It made the experience alot smoother for me.
That's great! Thanks for the tip! I'll make sure to add Github repo links for my next post! (I'm making another one with all the extensions I've been tipped about in this thread). Thanks for reading!
Yep, you need a license. Although you can run it in trial too. The only thing I've noticed is that it keeps being turned off after a while and you'll need to restart it. (use CTRL+P and then search for Wallaby : Start) 
Yep! I'm adding both of them to my "update" post as soon as I've used them for a while! So far both of them looks amazing!
Wow!! I just checked that short .gif out! I'm definitly going to get import cost! Thanks alot!
cool! I'll check it out! thanks!
Thanks for the tip! I'm getting myself a lynd.com account!
Thanks for shraing!
Language extensions are very likely lazy loaded so I am finding it hard to believe that a flutter extension would impair Javascript file performance. I'd suggest creating an issue with some reproducible steps. 
I'm not even in the US. But I think it'd be possible for me to go for a bootcamp if it's just 1 or 2 months long. How long are they? got any more information, (links) about them?
Thanks for sharing!
Second person that talks about coding bootcamp! got any tips on a good one?
Sadly I'm not in the Detroit area. Thanks for the tip about joining users groups though! I found multiple meetups in the area where I live that I'm now going to join!
I remember sitting behind my father when he was doing some Pascal programming for his studies! Thanks for sharing!
I remember my internet back in 1998 and 1999, I was only allowed to use it for 1h per day due to the cost of using the "phone modems". I wish I started out that early too! Thanks for sharing!
Congrats on your internship and thanks for sharing!
Maybe consider a different title? I expected yet another js fatigue post but it's actually the opposite.
&gt; As far as I know, GitLab and Alibaba, if you consider them "big companies". Alibaba has 50000 employees, I think they're big.. 
This, so much this. I learned VueX+vue-router in like an hour. Whereas routing/state management in React can be a shitfest to learn and set up(Yes, MobX is nice, but it is not particularly easy to set up). In terms of productivity -- Vue just felt *nice*. No hurdles. 
Not safely no, but, it seems to have fewer cross-browser quirks than using flexbox, so if you're only supporting modern browsers it's a good choice. For example, if you're already using flexbox, you can pretty much start using CSS grid and be fine. A couple of examples off the top of my head - Safari &lt;10 doesn't support it, so you might run into some older ios mobile issues. And some older Macbooks can't update Chome after like v45 so it breaks on that too.
For more information, you may attend this free webinar, 'The Future of API Testing - Trends and How to Propel Your Testing' Presented by: QASource Time &amp; Date: Tuesday, March 27, 2018 at 11:30 AM PST Registration link: https://info.qasource.com/signup/the-future-is-api-testing
Fuck off, Chris Davies
Indeed. With React it feels to me you have to be a full-time web developer in order to really take advantage of everything it has to offer (along with a steeper learning curve). With Vue, it doesn't feel that way. Could be totally wrong though.
There is no tests ?? You should fix 404 pages error. https://bhave-abhay.github.io/QkApp/demo/doc/ - 404 And, agree with @nickgcattaneo : benefits of said framework are explained poorly The style of the homepage is clear. I like it. And I &lt;3 your logo !! Cheers !
I don't really agree. React is simple to use. It's all the setup/configuration of Redux+react-router that kills me, whereas this just comes out of the box with Vue. The learning curve of the core framework itself is the same imo. 
If you want to do something like in reddit you could create a `comment object`. So you would map an array of all comments (that are not a reply) comments.map(comment =&gt; { content : comment, replies : [] }); Next what we see is that every comment has unique ID. So using `Map` you can easily edit every one of them. const mapped = new Map(); comments.forEach(comment =&gt; { mapped.set(comment.id, comment); const replId = comment.replyToComment; if (replId) { const parent = mapped.get(replId); parent.replies.push(comment); mapped.set(replId, parent); } });
Yeah, I don't get this trend of titling posts to make them sound like the opposite of what they actually are. I ended up agreeing with the article, but I wouldn't even have opened it if I hadn't looked at the comments first.
Great articles, cheers for sharing!
It shouldn't need to. People on older browsers can have a degraded experience. 
I'd recommend watching the youtube channel Fun Fun Function. Some of the videos introduce concepts that you might want to look into, like functional programming, generators, etc... [link](https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q/videos)
I don't entirely know what you are asking exactly. But the website you link to just does this: function openBunch() { var bunch = document.getElementById('links').getElementsByTagName('a'); var i; var l; for (i=0; l = bunch[i]; i++) { open(l.href); } } Or essentially: open(url); Many times. So: open("https://google.com"); open(https://reddit.com"); etc.
Thanks. What I want to do: in Google Sheets, I want to add an URL containing multiple links to a cell. At this date a cell can only contain one URL, this is why I would like to build a tool link linkckbun.ch in Google Apps Script. 1) Where did you find this code ? I do not find it on the website. 2) What is the programming language of this snippet? 3) Linkbun.ch gives you a webpage, a single URL, where all links are gathered into one. You have to click on a button in this new single URL webpage to open all the links you entered at once. I would like to skip this part (having to open a webpage and click on a button to open all the links I entered).
Certainly shows who reads the articles and who will go on long-winded tirades based on just the title. =P
What I find is formatting/beautifying completely breaks unless I disable all the irrelevant plugins. 
&gt; Physical location of your business? Use &lt;address&gt;. Etc... The tags define the content. Not to detract from your point but you do not use `address&gt;` for that: https://html.spec.whatwg.org/dev/sections.html#the-address-element &gt;The address element must not be used to represent arbitrary addresses (e.g. postal addresses), unless those addresses are in fact the relevant contact information. (The p element is the appropriate element for marking up postal addresses in general.)
I have more links but need to compile them for you but this guy [flavio](https://flaviocopes.com/dom/) has the best articles. Follow him on Twitter he is no joke. He has a course which I intend to do but haven’t yet...
Thats nice. Is there a mailing list I can sign up to when the site goes live? Or just hit me up in reddit when it goes live 🤗
Whether you like it or not PHP is behind many websites. Wordpress alone is running 30% of the websites. And the fact that you can get something on the backend running very easily and cheaply with PHP is a pro. 
Eric Elliott - https://ericelliottjs.com/ has a course if you are willing to pay. He will take you from where you are to expert level. Again it is paid. If you want to get a feel for his level of knowledge check out a few of his articles on Medium - https://medium.com/@_ericelliott 
Some sort of bug with npm's statistics, I imagine. 
Just took a look. His content is solid. But unfortunately I can't afford $500 at the moment 😟. I'm from India and that comes around 35k INR which is really costly. But I'll surely keep him in my mind and will get it when I can afford.
These guys are cool. Thanks for the share.
npm released a new package page design which changes how the package stats are provided - this site might have been scraping the old format.
Does not look like a bug. 2 consecutive week reduction and other downloads like react seem all good
I have my own YouTube channel too. It is mostly aimed at beginner to intermediate level but there may be something valuable for you there. https://www.youtube.com/channel/UCTBGXCJHORQjivtgtMsmkAQ
Lol! You need [this mug](https://society6.com/product/im-an-engineer-im-good-at-math_mug?coupon=HELLOSPRING&amp;utm_source=google&amp;utm_medium=cpc&amp;utm_campaign=1027&amp;c_kid=3353246p3027199&amp;gclid=EAIaIQobChMIqZG0pe2J2gIVT7bACh0LewuqEAQYASABEgKwnvD_BwE#27=199) ;P
Nice channel and u've got a dope voice. 😁
The relevant standards will not prescribe how a square root is approximated* so it may be done differently in each JS engine. For a list of ways to find a value for a square root see https://en.wikipedia.org/wiki/Methods_of_computing_square_roots [*] the square roots of numbers that are not perfect squares like 1, 4, 16, 25, ... are irrational so can only be approximated not definitively calculated. See https://en.wikipedia.org/wiki/Square_root#Principal_square_roots_of_the_positive_integers for more information.
:P 
r/learnprogramming or r/learnmath
It doesn't look like that's the problem: https://www.npmjs.com/package/@angular/cli
Hey Guys, You might have seen this "developer-roadmap" shared in this subreddit at the beginning of this year. There was still a lot of room for improvement, so I started updating it this weekend. I am still working on improving the Backend and DevOps ones but the frontend one is ready. To give you an idea about the updates, I have written a [detailed article on medium](https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c). Here is the summary of what has been updated - Updated some suggestions here and there - Added details on how to follow – more beginner friendly - Added tips to practice and get better - Removed the "obsolete" parts Have a look at the [article on medium](https://medium.com/tech-tajawal/modern-frontend-developer-in-2018-4c2072fa2b9c) if it may help anyone :) Thanks.
Can you give a concrete example? As in: I am using this command to format this file (filetype, how does it break, what are you using to format and/or beautify). I have no issues formatting Haskell, Javascript and CSS. 
I would add a mention of prettier, CSS Modules and would indicate that CCS frameworks are optional.
To stay in web development realm, I'd suggest *backend stuff*, which will depend on what industry you want to target. Java and C# are the first ones that pop into my mind, but there are many more.
I would just note that the little trick the author uses would work equally well in C++ or another language that allows operator overloading.
All the best! Happy Coding!
I was expecting it to be doing something evil with `Object.defineProperty`
I found a mistake. On SSR Nuxt.js points to Angular, I guessing it should say Vue. 
You know. That is a good idea. I gotta set up a little landing page this weekend. Thanks. I will hit you up- maybe you can be the Number 1 on the list ;)
Fuck off with this garbage. Medium has gone to shit. 
Fixed, thanks.
Alright. At first I wanted to be snarky, but then I wrote this instead: https://pastebin.com/RfztkWdv The language is JavaScript, and that's the language that all major browsers support. All "code" in browsers is written in JavaScript. The link I've sent you is an entire HTML file that contains everything you need. I added comments as to what the code does so that you can look around and experiment. You can literally copy the code into an empty text file, save that text file as multipleURLs.html and then open that file with your browser, you will instantly see what the code does.
This is a pointless read. The frontend community needs to stop writing Medium articles *just because*. This one in particular says nothing substantial. 
"Game Changer". It's something you're going to use ONCE to bootstrap the project, and that's it. And may be useful for some "hello world" tutorial, but any project complex enough will need tweaking that this tool will not provide.
I would also add a section for web accessibility, and another section for authentication and security. 
Git is essential. It really should be marked as mandatory yes.
Double hyper links.
Quick question about package managers. Does it make sense to use more than a few packages and always be keeping them up to date? Why not just add a package to your site and leave it? Wouldn’t updating multiple packages to a new version increase your risk of issues / bugs with each deployment?
I just tried your solution, it worked perfectly. Because I have never really used reduce before, it took me a bit to understand what it was actually doing. Thank you very much for writing this, this answer is by far the best out of all the other answers I got.
I was taking a playful jab at the web site advertising, hence the wink. What's up with the -5 upvotes? Shouldn't it be -5 down vote's? ;) *winking*
Sure, but do you need to always be current? Wouldn’t be better to update all your packages once per year. Then do a build with no other changes, QA that release and deploy? Seems like that would be much less risk, and a lot easier then always updating.
&gt; Sorry that this comes off as a grammar nazi It didn't :) Fixed. thanks
Thank you so much for this, I saved this and will come handy in the near future!
FrontEndMasters has buncha good content on this. Its around 35 to 40 a month I think. Also check out Kyle Simpson's book series called You Dont Know JS. Its up on his GitHub for free. This is the best resource imo.
No, it's not feasible to be current in the JS world. Things move too quickly. Automate and delegate. Finish a project and move because if you're maintaining -- it will look to management that everyone else is learning new skills and you're still messing with inline php. 
That's a philosophy that some people (sometimes implicitly) entertain. However, the trend appears to be to move to a "release early, release often" strategy (see: continuous integration/delivery and devops). The idea is that when you do a lot of small changes continuously, you will run into potential problems early and are able to fix them while they are still small. Updates can and do have side effects that may be difficult to track down, and if you batch a lot of them together, it can be far more work to find the source of problems. Also, it's going to be more work to do in a single go, which makes you more prone to postponing. (Obviously you will always have to keep an eye on pressing security concerns, and being able to fix them quickly is an advantage as well.) To provide a real-world example from my work: [dependencies.io](https://www.dependencies.io/) regularly and automatically clones my repository, checks which dependencies are out-of-date, and submits separate pull requests for every dependency that needs updating (usually no more than three, and most of the times fewer). Each of those pull requests than automatically runs a CI pipeline that builds the code with the new dependencies, runs the tests, deploys it to a separate environment, and starts a browser that performs a few actions on that environment as if a user were controlling it. Keeping the project up-to-date is then usually a simple click to accept the pull request, sometimes after a manual check of the environment if I suspect the update to have some risk of breaking. And rarely, but still a few times a year, something will have broken that I can then address on short notice, and it's still relatively clear what will then have broken it. As you can see, the risk of something breaking _and_ making it into the mainline code is relatively low, and it's still low effort to keep things up-to-date. It's pretty sweet. (The project is open source, so if you want to see this in action, see [this pull request](https://gitlab.com/Flockademic/Flockademic/merge_requests/664) from last week.) That said: it's dependency management is a notoriously difficult problem and there are different schools of thought, so unfortunately there's no quick and definite answer to your quick question :)
To be fair, any valid HTML is also a valid Vue template, and the little bits of Vue-specific template features are learnable in a couple hours – about the same amount of time it would take to research any tricky JSX quirks like conditional rendering, bound function scope, etc.
We've automated most of the maintenance, that allows you to move quickly with the ecosystem :)
Take a look at coursereport.com They break down every successful bootcamp. I personally went the the iron yard and loved it. Unfortunately, they gave to much control of their company to an investment firm and lost everything, which is said because i had nothing but great things to say about my time there and the staff. I would just make sure you’re going to a bootcamp that cares about today’s technology and modern languages and frameworks. You don’t want to learn something that’s losing interest in the industry. Being a frontend dev can get overwhelming with all the javascript frameworks out there but if your bootcamp offeres React, Vue, or Angular you’ll have no problem finding a job after if you work hard enough for it. If you’re perusing backend i would make sure they offer languages like node.js, python, or java. Go would be amazing but i doubt many bootcamps are offering that. (I know this is subjective but i am just seeing where the current industry is at) I would also make sure the bootcamp offers great job support. My campus had a fantastic director that made sure we all had gigs lined up after and in 4 months i was able to make a seamless career change. Check the reviews on course report and make sure grads had the same experience. Lastly, i would not recommend a full stack coding bootcamp. You cannot master frontend or backend development if you’re doing intensive training within a 3-6 month time frame. Being a full stack dev is cool and all but that’s something I’d wait to pursue after you’ve become mediocre at one or the other. You need to have an understanding of both but a good bootcamp will have that covered. 
Context, and ref improvements aren't really an area Vue needs to work on.
Electron and Ionic are not JavaScript frameworks, they just wrap JavaScript into a hybrid native app. 
Was also posted here on reddit https://www.reddit.com/r/javascript/comments/7r0i00/can_a_1_a_2_a3_ever_evaluate_to_true/
I'll check coursereport.com out right away. That's great! I like working with NodeJS that's where I'm the most comfortable right now so I guess it's backend bootcamp for me! And really, thank you so much for taking the time to write this summary! I wish I could more than +1 karma this comment!
Yeah, I’ve tried it but it still doesn’t change the horrendous styling of it. See issue [#519](https://github.com/Microsoft/vscode/issues/519) which has turned into a plea for the maintainers to pull their fingers out of their ass and do something about this shitty UI addition. I simply no longer use VS Code because of it. I can’t look at that sidebar. I just can’t handle how utterly despicable it is. I still use Atom, which is an unpopular choice, but at least I’ve got complete control of my editor. 
I used Atom most of the time before, now it's just VS Code. Since this was a pretty popular post I'm gonna make another one with Atom extensions (plugins) probably be out sometime next week, so look out for that one! :)
I am a .net full stack dev. Our main application was started 15 years ago. I don’t move quickly on the front end. Too much change. We have moved to GIT for source control and adopted TypeScript. But for the web we use KendoUI, JQuery and Twitter Bootstrap, no other libraries. Our team of six full stack devs evaluated Angular 2 but hated the complexity. We loved TypeScript though. It’s good for me to learn what the web developers are up to. Thanks for the information. Nice article too. It’s a balancing act trying to keep up with the ecosystem especially for full stack devs who may only spend 20% of their time on client side development. We also have to keep updating legacy code in web forms, server side MVC and webAPI too... 
All they see is that for some reason you are working with old projects and everyone else is moving forward.
Management does not know what client side framework is used. Newer isn’t always better. Some new SPA applications remind of Flash applications back in the day.
Hi /u/Billyxd100, For javascript help, please visit /r/LearnJavascript. Thank you!
Okay, so now you aren't furthering your self-development. Automate and delegate.
Lol. Please, I reached the top already, I am already at architect level and I make bank. Of course I keep learning. I switched from TFS to GIT and switched to TypeScript. But when you are a full stack coder and client side is only 20% of your work, you have to reduce complexity and keep it simple. Can’t jump on every hot new framework when your application has to last forever. Do you know how many front end frameworks have come and gone since I started coding... 
None of those are jsx specific. They are just plain javascript, so if someone doesn't know that stuff, they need to learn it anyways. There's nothing to learn except what jsx is (sugar for function calls), how to pass javascript values in (curly braces), and use className instead of class.
I think it's a pretty safe rule to assume anyone who posts a medium article on a programming subreddit is probably the author. 
No problem! Thanks for reading!
&gt; architect level Alright bud. 
Management that pushes for rapid adoption over stability is doomed to fail. I think it would take brain damage to push "learning new skills" over using stable, proven tech, especially when it's as prolific as PHP.
Architects have to make the decisions that will get an actual working product out the door. Not the newest memes to show off to their soy sipping buds at the next hackathon.
I'm not saying anything about that. I'm just saying don't get stuck maintaining your jQuery and php app.
Repost.........
Gullible, impetulant babies, they are.
It is still driving men mad, same as it has been since 2 came out.
Too many frameworks not enough actual work!
This is helpful. Thanks, OP.
Yeah, this becomes so useful when you want to take a complex object and remap it to another object: Object.entries(myObj).reduce( (otherObj, [key, value]) =&gt; { const { author, content } = value; otherObj[author] = { id: key, content }; return otherObj; }, {}); You've taken a classic NoSQL JSON structure where the key is the post ID and turned it around so it can now be queried by author id.
I'm not ripping on either. I just shared a strategy for continuous career growth and you're offended. Laravel is excellent.
There are only three that matter: http://www.npmtrends.com/angular-vs-react-vs-vue-vs-@angular/core-vs-polymer-cli-vs-svelte-vs-lit-html-vs-ember-source And of those three, two are essentially the same internally. The rest either fulfil a niche or are derivatives, often with shared semantics or even the ability to swap components. Isn't this what you want when you say "too much"? Otherwise i don't understand the sentiment.
Nothing can be mastered in a few hours, except maybe tic tac toe
Why stop at frameworks? Why are there so many tools in general? Because devs get sick of making stupid websites, and start making tools, then write blogs about it, and are like 'I am god-dev, I bequeath unto you this revolutionary new tool that will eliminate all the pain.', and everyone is like OMG! and are too dumb to realize it doesn't really help, cause they never really build anything.
Trevor's axiom anyone?
As a semi-beginner, thank you! I've been stuck at which libraries I should be prioritizing and haven't even thought ahead of that. Lots of new stuff for me to try.
Learn all of that, then realise the majority of companies all use their own choice of shit. C# ASP and the original Angular. Get rekt.
I disagree with a lot of choices in the chart, including even mentioning Angular... Or using_bem__with_css *shudder* However the order and flow of the chart is great, and the graphics are clear and their is enough rationalization to appease any beginner, so thank you for this great resource! :)
Too many unneccessary derivatives.
i don't dispute what you mentioned, but setting up for React and working with React are two different things in my book. Many arguments are against React for this and don't think it should.
You want a server side yang to JavaScripts client side ying. I would say PHP.
But Node?
Legend! Sorry about the rant on your submission. Didn’t mean to deter from subject type. Looking forward to your next post. 
Great roadmap! The flow is pretty much what I recommend to people when they ask me how to get started. Thoughts: * I would emphasize jQuery much more as a part of basic Javascript. It synergizes with all the other bullet points you have at that stage and it's hard to consider tech used by 73% of all websites (1) as optional. It would be a disservice to any JS dev to not know it. * I would move 16 and 17 waaay up the list. CSS frameworks are infinitely easier to pick up than JS. * I think PWAs should be included in step 12 for people who are pursuing a mobile focus. The underlying frameworks are the same and the subsequent steps aren't going to change. Ionic, React Native, Electron, Polymer, etc. 1: https://w3techs.com/technologies/details/js-jquery/all/all
I'm one who learned how to config Webpack well before create-react-app came about. Had to. I also work at a large company where we have we have dedicated backend managers who set up the configuration separately from UI/UX/JS devs. I'm not saying the configuration isn't complicated or annoying (its both actually), I've spent days getting things to work in a way that I can have a project boilerplate for most of my projects (and I prefer that over create-react-app). But again, once you get it, you get it. I'm only hoping that the arguments for either library are kept to the library specifically. And in that respect, I don't find React dev "poor" compared to Vue.js. I can agree with your last point. Though I have the years, I've been slow to adopt many of the advancements in JS before Angular and React came onto the scene. I found that (again Webpack aside), React was relatively easy to pick up.
Sure, basically, the class takes enqueues a bunch of function calls and then calls them one by one based on priority that is 100% determined by the developer. When a task is enqueued a promise is returned that will resolve once the task has been run which makes using the class extremely natural as you dont ever have to interface with the queue except for the initial call to `.schedule`. Does this help at all? 
If a != a because there are some non-printable whitespace characters appended to the variable names
Sure, Node. That would work also, in basically the same way. It's just my opinion, but if you want to be like an 85/15 ratio of frontend/backend, LAMP is just way too utilitarian to thumb your nose at. Server side JavaScript code and the APIs are so different from the browser, I would almost argue against the idea of trying to use JavaScript on the server. Node kinda looks like pig Latin to me.
Would be interested in Modern Backend Developer in 2018 :D,good stuff tho.
animation frames run at around 60 fps (when possible) which gives about a 17 ms delay between frames. The delays you set on your objects are 5 ms, which means for any one frame, you're going to process about 3 objects. This is why you're seeing clumps like that. If you want something more precise, you'll need to calculate distance based on time per object rather than animation frame.
I'm happy with any comments and feedback I get about my posts! So no problem! 
Based on some incredibly helpful examples from https://thebookofshaders.com/
I don't think I've learned enough yet either. Hence the Reddit post stating how much I've learned and requesting next steps.
I don't really know. Mostly I'd like to get a job, so I'd like to understand JS more.
This looks awesome. Thanks!
&gt; I can make any app in react or angular or even get my hands dirty with vanilla javascript. I feel you should write a little more humbly. 
Previous post: https://www.reddit.com/r/javascript/comments/85hvbh/lookaheads_and_lookbehinds_in_javascript_regular/
Using ES6 features in examples but seems to skip over arrow functions entirely.
LAMP? Is that [this thing](https://s24255.pcdn.co/wp-content/uploads/2017/05/lamp_stack.jpg)?
[You Dont Know JS](https://github.com/getify/You-Dont-Know-JS) Is a really great guide for understanding **this** as well as alot of other js concepts. Highly recommended. 
Some of the most popular websites in the world, like Yahoo, Wikipedia and Wordpress.com use PHP, so what you say is not valid. https://en.wikipedia.org/wiki/Programming_languages_used_in_most_popular_websites
Yes.
I would add Selenium to the list. It is useful for unit- and integrationtests of the UI aswell. E.g.: Imagine an input form that should convert all text inputs to upper-case. It has an attached event handler: cvtToLower(input:string). - Test the event handler the traditional way. - Use Selenium to make sure the converted test actually ends up in the correct input. Thats basically an integration test of the markup and UI code (i.e. are the ids set correctly?). Integrating Selenium in a unittest runner(like mocha), still allows mocking and makes the test run fast (compared to the typical end-to-end use case of selenium). Granted, this is a very basic example and not worth the effort, but having perfectly tested code and still ending up fixing a malfunctioning UI is something people are spending way too much time on. 
Right but that’s sort of self-evident based on the size and purpose of React. Is it easier to build an app in React than with Angular/Vue/Ember? Not really.Is it easier to learn React by itself in isolation? Sure but that’s only because it covers a small fraction of what a framework like Angular does since React is more a library than framework. If you can get by using React alone and not get deep into webpack config and using endless other libraries, I’m sure it’s easy enough. For larger applications though you will need a lot more than React, create-react-app probably won’t suit your needs, and you’ll have to grab libraries piecemeal. It’s not necessarily a better approach, just a different one. 
Obligitory [beware](https://www.reddit.com/r/javascript/comments/6q2lk0/why_composition_is_harder_with_classes/dku34cl/)^1 [referencing](https://www.reddit.com/r/javascript/comments/5c5lkq/what_eric_elliot_wants_to_say_can_somebody/d9u6tv3/)^2 or [learning](https://www.reddit.com/r/javascript/comments/837t82/who_are_some_of_your_favorite_speakers_educators/dvh0br6/)^3 from Eric Elliott. cc /u/Ragzzy-R
I watched this video about a month ago, and it helped with these concepts more than any content I had ever read/watched. Would recommend
 Np - I did and they just look like basic implementations with bootstrap wrapped around it. Not to hate, just being honest! I can’t tell easily what the purpose of the framework is - I would focus on getting that hammered out and apparent first and foremost. Good luck!
To be honest I never know that constructors work like that. But I guess a guy who is selling a course at $500 should. I didn't understand much about the 1st reference but the second one made me clear that its not worth taking up his course. Nevertheless any suggestions from u for courses, guides?
Thank you for this. proved helpful
Arrow functions don't keep track of this - they don't have their own "this" context or property. Hence they continue to use the context of what ever scope it is they are executed within. Since they have no "this" means you can't bind to it's "this" property (or w/e it's called) as it doesn't have one to bind to in the first place!
Something very similar appeared on HN the other day: https://github.com/claudiodangelis/qr-filetransfer (HN ref so you can see the extra discussion about it: https://news.ycombinator.com/item?id=16647977)
The second one would be true for any given language though
Try to build some of the freecodecamp.com challenge apps. Take some Udemy courses where they teach you to build a project. Build the project, then add to it or modify it into a somewhat different project of your own.
But JSX is still new territory for a lot of people and there can be a lot of initial confusion mixing HTML with plain JavaScript. Sometimes templates are easier to grok for some people because the additional API seems more like sensible HTML features, and there's no mental shift between righting HTML and writing JS. At the end of the day, it differs from person to person, but I think it's silly when someone claims groking JSX is absolutely easier.
It's just that it can become harder to update the larger the gulf become between you and latest. And you need to update eventually, else you're on unsupported software. So regular updates just become a way to pay off technical debt.
Shoot, this looks cool! And right when I start working on https://GitHub.com/Dazzboard/dazzboard ... Is this only intended to be used within another project? Dazzboard was based on https://github.com/Jarvis which has similar but fewer features. The webpack integration is way simple, may be worth looking into as an improvement. 
Okay thanks
I cut my teeth on my boss' custom Web Forms + jQuery preferences: he thinks that stuff is as good as it will ever get. I was about 1.5 years into my career when I started to suspect that there might be better ways. jQuery gets pretty nasty when the business logic is sufficiently complex. That's the working definition of spaghetti code, if you ask me. Then 2 years ago we all sub-contracted out to a firm using .NET MVC, Web API, and Angular, and it has been (mostly) amazing. The Angular stuff, in particular, just felt so much better, so much cleaner, so much easier to reason about. I hope to never go back to day-to-day jQuery again...
For a new project, webApi + Angular would be fine. But we have to maintain the old stuff too...
In pseudo-code, the above would look something like: &lt;div id="parent"&gt; &lt;button data-id="1234"&gt; &lt;/button&gt; &lt;button data-id="4321"&gt; &lt;/button&gt; &lt;/div&gt; being our markup const container = document.getElementById('parent') container.addEventListener('click', event =&gt; { const { target } = event // now you have the specific element that was clicked // either `button.data-id=1234` or `button.data-id=4321` // as the value `target` }) being our script.
Bummer that Ember isn't mentioned anywhere - it's a fantastic way to get started with web-apps and covers the majority of the "focus areas" with minimal setup and configuration. As an alternative to most front-end boilerplates and interminable Webpack configuration work, it's really nice. Plenty of large tech company employers as well. I'm not saying it's perfect, or that it doesn't have warts, or that it's the most popular framework - I just think it's a great resource for web beginners.
https://jsfiddle.net/p7mapqp6/5/
https://en.wikipedia.org/wiki/Software_versioning
I agree, but it's problematic to always separate out developers without any experience from the rest of the herd. Most developers ought to have more than 5 years experience, and thus have been at least once exposed to a static and dynamic typed language. But if your only experience is bootcamp, you will struggle here... And struggle in a lot of other places people simply take things for granted. I don't say this to look down on people, but I remember in my first 5 years I was full of energy but utterly ignorant to many things.
&gt; es, QA that release and deploy? Seems like that would be much less risk, and a lot easier then always updating. True. There probably is no correct path for every scenario. Some site probably put a premium on staying current while others put a premium on stability.
I see what you're getting at, but I disagree. A framework is simply a set of structures to build with. In cases of Electron and Ionic, they've just matured into a more complete SDK, but they are still frameworks. 
 What is the worst nowdays? Surely SourceSafe is no longer relevant. 
&gt;I don't say this to look down on people, but I remember in my first 5 years I was full of energy but utterly ignorant to many things. I agree completely. You don't even know what you don't know in the beginning. I have been working as a developer professionally since 2000. I am still getting better. 
Thanks, When you say Promise vs utility, do you mean why use the native promise functionality versus a library like Bluebird or Promisify?
I've played around with WebGL before, but usually just fell back on Three.js for 3D stuff. After watching a bunch of the [SketchPunk Labs series](https://www.youtube.com/channel/UCSnyjB_8iVxi2ZAfn_1L6tA) it was easier to see how to make a bigger webgl system. My favourite parts of this experiment are the ambient occlusion (the shadows on the cubes) and that it's all in JavaScript native modules: no build system required ;)
The most widely used example out there I know of is [redux-saga](https://redux-saga.js.org/docs/basics/UsingSagaHelpers.html). 
I'm having some trouble getting the IDs now after switching from for loops to forEach, but I think once I do event bubbling will solve my click capture problem. Take the following two functions: function getUserID(element) { var classes = element.classList; Array.from(classes).forEach(function(i) { if (/^id-t2_[a-z0-9]+$/.test(i)) { console.log(i + "from function") return i; } }); } // Process usernames that are part of the reddit style. function redactUsernames() { var x = document.getElementsByClassName("author"); // Get all elements with class "author". Array.from(x).forEach(function(i) { if (i.classList.contains("admin")) { // Skip admins return } //var userID = getUserID(i); console.log(getUserID(i)); var userName = i.innerHTML.toLowerCase() // Usernames must be converted to lowercase for consistency of hashes with username mentions that use incorrect case. var color = "#" + intToRGB(hashCode(userName)); // Get color from username string. i.style.setProperty("transition", "all 0.15s ease") i.style.setProperty("color", "rgba(0, 0, 0, 0)", "important") // Make username transparent. i.style.setProperty("background-color", color, "important") // Add color from hash to background. if ((i.classList.contains("submitter") || hasSomeParentTheClass(i, "top-matter")) &amp;&amp; !(i.classList.contains("moderator") || i.classList.contains("admin"))) { // Add additional styling to the OP's username. OP.push(userName); // If user is OP, add username to OP array so we can make styling consistent for username mentions. i.style.setProperty("box-shadow", "inset 0 0 0 2px #0055DF", "important") i.style.setProperty("border-radius", "3px", "important") i.style.setProperty("outline", "1px solid black", "important") // Add a black barrier between the outline to make it more distinct when colors clash. i.style.setProperty("outline-offset", "-3px", "important") } if ((i.classList.contains("moderator")) &amp;&amp; !(i.classList.contains("admin"))) { // Add additional styling to the OP's username. mods.push(userName); i.style.setProperty("box-shadow", "inset 0 0 0 2px #228822", "important") i.style.setProperty("border-radius", "3px", "important") i.style.setProperty("outline", "1px solid black", "important") // Add a black barrier between the outline to make it more distinct when colors clash. i.style.setProperty("outline-offset", "-3px", "important") } i.setAttribute("redacted",""); // Mark elements as having been modified by the script. }); } redactUsernames is using getUserID to get the ID of a user from the unique class. Inside the getUserID function `console.log(i + "from function")` is outputting all of the correct classes to the console. However, when I try to use this function to set a variable within the redactUsernames function, it's coming up undefined. [This is the console output](https://i.imgur.com/PhyvWwA.png). Line 53 is `console.log` within the getUserID function. Line 68 is console.log in the redactUsernames function after running getUserID. What am I doing wrong where the child function is getting the data I want but not returning it to the parent function that ran it?
Nice! Good luck with Dazzboard, seems great! It's intended to be run from within one of your projects I thought about making it part of webpack but this means a lot of developers (not using webpack) won't be able to use Webdash
FTP with no source control and no backups? lol
This would be great. im an angular developer and would love to have a more complete understanding of the backend world in this format.
It's been a while too since I've used anything else. The last time it was Perforce, which I know has gotten better than its old incarnation, but IMHO it's not necessary and clunky. Before that I used TFS on a couple of projects, Subversion was so much nicer in comparison.
Do you know how to access an object property, enumerate object properties, combine strings, etc.?
Generators can abstract away asynchrony. For example: // here we write some logic as a generator, notice there's no async in sight function* doSomeStuff() { const users = yield listUsers() const names = yield getNames(users) console.log(names) } // now here's some async logic function listUsers() { return () =&gt; fetch('/api/users') } // here's some other logic function getNames() { return users =&gt; users.map(u =&gt; u.name) } // and a puny library that will act as a runtime for our generator async function drive(gen) { let it = gen() let done, val while (true) { const {value: fn, done} = it.next(val) if (done) break val = await fn(val) } } // run it drive(doSomeStuff) Notice how the business logic (fetching users, getting their names and logging them) is not explicitly asynchronous. One interesting property of that is that we can inject test logic when testing. For example, let's say I'm writing a test and I want to mock out the `fetch` call: const it = doSomeStuff() const listUsersFn = it.next() // got the function `() =&gt; fetch('/api/users')` but didn't call it const getNamesFn = it.next() // got the function `users =&gt; users.map(u =&gt; u.name)` getNamesFn([{name: 'Bob'}]) The test is synchronous, and therefore, fast.
This will save you some time. Learn the basic programming concepts and syntax and then start building things. Even if its just recreating somthing that already exists. 
Is there any alternative services to dependencies.io?
Interesting. When I was learning ES6, one of the advantages of arrow functions over standard functions is that they keep track of this. But I was also unable to use `this.functionName =&gt; {blah}` because the variable assigned to the arrow function wasn’t a constructor. Don’t know if that’s something different. So I’m going I assume that’s because arrow functions have no this and disregard what I learnt about them, because now it makes no sense. 
You need to make an XHR request https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest the javascript is pretty simple. document.getElementById('price_usd').innerText = data.name.price_usd; document.getElementById('rank').innerText = data.name.rank;
If the mouse gets to the edge of the screen then you can't turn anymore. You should look into adding pointer lock support: https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API
Hmm, it does have pointer lock! You just have to click once to activate it... I tested it in Chrome and Firefox: what browser/platform are you on? Thanks!
It shows blank page :(
I mentioned async rendering not refs le context. 
That's a great point. My perspective is as a js developer, so my first thought is "it's just javascript." I could see people coming from an html/css first background having a different perspective.
It varies by location but I think PHP is the most in demand web dev skill. Front end only frameworks are good, but Java, PHP and ASP.Net are the most popular job skills I would think.
No database stuff?
Oh, I see :) I'm running on Chrome. Perhaps make it so that the mouse doesn't move the camera unless the pointer is locked? Maybe have a menu screen like Minecraft does with various settings? Regardless, pretty impressive project!
Sorry you're wrong. I know my Czech job IT job market very well. Best paid jobs are Java devs, then Javascript, then dotNet. I get it that there are many big companies all over the world using it. In my area there used to be Solarwinds, but any development on PHP backend has been frozen ever since they got acquired by Oracle.
Yea pretty much, just giving examples of what features were introduced in ES6 vs why or why not to use them. In general the `process` and standard modules that come packaged with node are what make a good node developer, knowing the JS syntax and features that happen to be parallel to web client development are sort of just secondary/base skillsets.
Around here, there are plenty of PHP jobs but also a ton of Java and Python. There are also a handful of Go and Node jobs. Ultimately though, there are more frontend jobs than backend.
So, arrow functions do have a `this` reference. They do not have their **own** `this` however. The difference between the 2 is in how `this` gets bound to the function. The `this` binding in a normal function is determined by the functions call site (where/who is calling it). However arrow functions `this` gets determined by where it is **defined**. Take the following 2 examples. function normalThis() { console.log(this.a, this.b); } const this1 = { a: 1, b: 2, normalThis: normalThis }; this1.normalThis(); // 1 2 In theis example, `this` refers to the object that "owns" the function at call time. So `normalThis` is being called in the context of `this1`. Note: technically there is no "ownership". I am just using that word to explain the concept. this.a = `foo`; this.b = `bar`; const arrowThis = () =&gt; { console.log(this.a, this.b); // foo bar }; const this2 = { a: 1, b: 2, arrowThis: arrowThis }; this2.arrowThis(); In the `arrowThis()` function. `this` gets bound at function definition. So it gets reference to `this` through its lexical scope. One more thing to note, because arrow functions don't actually have their own `this`. They cannot be used as constructors.
Can a normal function containing arrow functions be a constructor? I don’t know why I’m asking this... 
Tim Ermilov on YouTube. The best live coding I've ever seen!
&gt; Nevertheless any suggestions from u for courses, guides? I typically recommend MDN [Guide](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide) and [Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference), [Rauschmayer's books](http://exploringjs.com/), and [Eloquent JavaScript](https://eloquentjavascript.net/). But if you could be more specific about what parts of Radi.js you saw but didn't understand, I might be able to give more targeted recommendations.
I never said anything about the Czech IT job market, or any job market, so how can I be wrong? It is one thing to maybe say that "there are less jobs for PHP" or "PHP jobs do not pay as well as jobs for language X" and a whole another thing to claim that PHP is good mostly for little ecommerce sites.
I hope it more worth as a time than I learn Redux from zero today.
Sure can! Those arrow functions (as long as they are **defined** in the constructor function) will then be lexically scoped inside of that constructor function. So they will use that as their `this`. const arrowFunction = () =&gt; { console.log(`this from externally defined arrow function:`, this.foo); } function normal() { this.foo = `foo`; this.getFoo = () =&gt; { console.log(`this from internally defined arrow function:`, this.foo); } this.wontGetFoo = arrowFunction; }; let obj = new normal(); obj.getFoo(); // foo obj.wontGetFoo(); // undefined I would recommend taking a look at the [MDN Docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions) for arrow functions. Also, Kyle Simpson has a book in his series called [This &amp; Object Prototypes](https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes) that does a pretty good job at explaining a lot of this stuff. The whole series is honestly pretty good so wouldn't hurt to go through them.
I started using Cypress lately for end-to-end tests, and while I haven't mastered it yet, I can say that it feels like a huge improvement over Protractor. Test code is far simpler, and you get to generally avoid arbitrary timeouts while waiting for requests or DOM elements to load. The test code reads more like a concise description of what you're exercising. I'll be interested to see if it gains popularity.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**this%20%26%20object%20prototypes** (master → 6f51ed6)](https://github.com/getify/You-Dont-Know-JS/tree/6f51ed6746300f51bc6c930c080b8a7426b7629b/this%20%26%20object%20prototypes) ---- 
Have no idea why this one was downvoted. :-/
Thank you! Will check this out. 
This is wrong. An arrow functions `this` gets bound on function definition...not execution. A normal function`s `this` gets bound at the call site (where it gets executed). Constructor functions are different since using `new` creates a new object and essentially sets `this` to reference that object. Also, arrow functions DO have a `this` reference. The difference is that they don't define it themselves, instead it just gets a reference to the `this` that closes over the arrow function at definition (through lexical scoping).
You're assigning 28 to test_age. To compare you need to use == or ===
You can use utility methods like [lodash's get](https://lodash.com/docs/#get), or [optional chaining](https://github.com/tc39/proposal-optional-chaining) for which there is a [babel plugin](https://www.npmjs.com/package/babel-plugin-transform-optional-chaining).
thanks!
Yeah nothing in web development can be mastered in a few hours. Maybe you can get the hang of it but you'll still get caught up on trickier stuff and will need to google constantly.
&gt; CSS framework - pick bootstrap Fuckin' lol
What you want is to assign the text content of the element with the Id of 'a3' to a variable: var d = document.getElementById('a3').textContent; 
Thank you for your input. I am going to study your suggestion and try to implement it.
Posting screenshots is not good because people can't interact with it - consider posting somewhere like on JSFiddle instead in the future.
I actually posted in Webdev as well, and they suggested to create a second variable for the answer, and to plug that in everywhere else which worked great. See here: https://www.reddit.com/r/webdev/comments/87c4oy/help_with_some_simple_javascript_trying_to_pull/?st=JF8SL6UC&amp;sh=6e9f7c05
https://github.com/kamranahmedse/developer-roadmap
Oh, you wanted the previous answer as well - then yes, you need to grab it as well. Either take it directly from the element on a new calculation per /u/DarleneWilhoit or store it in your own variable (during the previous calculation - probably better).
* What do you see in your dev tools? * What version of node are you using? `node -v` Please open a new issue on Github https://github.com/jadjoubran/webdash/issues/new It's probably a simple fix
Yeah I thought of that, and did the best I could here. Was not aware of JSFiddle, but I'll check that out in the future! Thanks for your feedback and the new to me sub. 
Hey! That worked. Thank you kindly for your help. I am forever in your debt on the internets.
Remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster. We don't know Java, and if you're trying to apply your Java knowledge to JavaScript, it probably won't work.
As an aside, I'd strongly suggest using a compiled Regex, as it is going to be slammed...
Thanks for the encouragement!
Generators by themselves are useful for representing streams and producing lazy sequences. The recent introduction of support in JavaScript for asynchronous iterators (the ability to make an async function that is also a generator) opens the door for a lot more real-world use cases that weren't really possible before. I imagine that you will see a lot more usage of generators once this feature becomes widely available. For example, in the upcoming Node 10 release, every readable stream will confirm with the asyncIterable protocol, which will make it possible to consume them with a simple for-await-of loop. I recently wrote a blog post that shows how to stream the values yielded by a generator to the client via server-sent events: http://seg.phault.net/blog/2018/03/async-iterators-cancellation/ I think this is a pretty cool example of generator usage in Node 10.
To extract the text of an element, use `element.textContent`. `sentenceArray.push(item.textContent);`
lol loops in javascript after coming from Python are becoming the bane of my existence. Thanks a lot. Going to attempt implementing this after a few more beers so I'm ready to pull my hair out when the next issue pops up.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kamranahmedse/developer-roadmap/.../**frontend.md** (master → 4df5198)](https://github.com/kamranahmedse/developer-roadmap/blob/4df519845f8fef73f91274e91ca483a1d137c141/frontend.md) ---- 
Being so preoccupied with whether or not I could, I didn't stop to think if I should create a [starfield with a virtual dom](https://flems.io/#0=N4IgZglgNgpgziAXAbVAOwIYFsZJAOgAsAXLKEAGhAGMB7NYmBvEAXwvW10QICsEqdBk2J4hcYgAIA6gEkAIgBUAEpIC8kgGwAGbQB004qcoCisgOLLF6rboNHJAORMBBAEo3t+AIz36EyQAxdxtvfUN-KQBlAAUTE3kbABZ8cINYKTQAVywo4gwAJzhQgFZwjMkJQuKNZABdAwMwLMNiCHpJPMKACgBKSWADSUkCmGIsgrQBoeHJAA9EIJCAKklugFkMYkJ8Aow0ABNaLD7JVbklVQBaGQUVSQB6SQAmXooZ4YBPReCPVY2tjs9odjqdVqYLFZJDcIZZrE9Xu8prMAF6LTbbXb7I4nfqrX6SADUTlcbhmrAMFLQBgeTzcMGon2osEq+QKkgwYEY7IgUgA5rR4JJaFkpLQwJIAG4QGAAdyaLWobQ6ozgYy6BW6cH6g2RcHwcxsAMxwJxYNul2hFvuCLxSzJevwnyNGKB2NBdthUJhZjhjxedt+M31KJsQbQVIVrXaUwgaF5Grgp11wyqRRsaDlkhcBT2n262VybO1MzAtHZ3QqEE8AG5JNWADySQuJuuEwkQHUfVnVZAQOo2DV9cmUxoRNABDWBGVQA42FNSmWyxanNQAPkkJwA5PghPk4zAClukbNN90d2nIDBZ8fu6ni-gsBgAA7dLVsij1-rru+zbf4NNj2mZFT1PWkAGsYG+esT1A08JE+WBFgXODT2IYE4DLAosEWAADdD9jgKAthgABmA5ugAEmANMDX9WiUVYZ85goajaOdJ4GKYljtGY3pcN-VCiUkXDKmoDBYCo4BvHotl8EY-jYKE4ZaGfDBqF5aDXUfONum8T8ZJubTn1oWV30KeT-V+AztF6XpBNmKkhNYeyQNmVzTw8yRXMjeN42IRNh2pNAsEfEUGG6I5qByER8AAI1oA5Pk-KcZwOVz0jGSRn1GSVrA0eQSPwNBTKCqMlRjSQoFoVTkxmBwpAKoqSrMryHAORrOjiBIzjWKQbhymA8v6J4wjsZEKjgUtyzWKta3rSQmxbYs2w7Ls3JqHsij7BoNssq4NA67sIAlLVLKbZwQgAHyuyRtIwOKk31Q1OPk-oNwuG0XkkG67sBfAHqep16LeyQNy9eEA2AuDVXVNktS84YnMkZHQtGA49lamZBrymxiBmUYAEcsngYgXHjJ9lTQQI9hwSsaufHyxyJkmJHJiBKZjGmuHp1TXLYDgQEwHA8F3OABBoehGGYHgSDIT8EqS6HZkIGAID5EhFjGgBSGtR2CxXnRQzdCj5ONFm0PW3LUg4DjjPkLat084vU8C+QKcKDiuOhqoKRYAGJniDq3fN3KWMAPdkFxMuBeRjRZAdoKBRRgJ3JBd6g3Y9lovZ98sA90S2ZlgLlHZmYhVLL5FZQgDrCEWHReLmNPVfVzXbCbtPaElQ8wGq5dJEIWuDiYEOxwAtkr1nZXhhjuP6ATx6k5TtPhhL4hFlI3RmNXyQK+fTft+b7sa7rhuj931uNY3jud-1gwJ8KGfstoWOqcXuBl8YXf18WK4AA475uX3n-QBx83Kn22FrTQQDTxX3bt4GB4Dnau3dp7K4HMMB8hgIsCYUBIpbAwIgTB2CHjPjQHyGsLs1SaCSBQCAAA1AAQgAeTcLKbQABpcwAoXB8JcI4KIABVQgJghF8n4Uw-hfCACKABhFwMj+FyO8ISXgYBCbSK3lAEwMiGEyNoCiJI0g3CyGkAAdnkEolwJgSiEiSEIrA3gICfECEwuRz4XBCPMEwgAUmAEoTCHhyN8Q8Wg0hAFyMJLQRQ5gsBuEJtocC6xfFxSiITRQURfEAC0WGKAABrPGkFkWUQioBQGkJKXxMjnhgAAJo+IUbIKIJg0CyFlCYdWdTNDtPMHI3RdSkjeF4CUGRQiYh8LAI4AAMiiT4cw4DPHWC4CA5g0BoCiAUBh+x8n5MJoEQIpF8jPm2VEagaBwKOECOYKAcVPgQAeIQaZUAGHSHArwPk3hOEMMJidTQjhNAvM4QUfJ4FlCOAgCiOpcBCacJiDIpKURtDZKYXMQgsoUXZPAlAOpQi4CaHMJoNwcAohRFlNM6QIT8mEigGgfJjJtkuE+YQRwfI+TaCYSYSUygIAyMlPIGIKJvCygcW4eM+SIAsLQHIsAvjZS+PedkGUSRZDEFIjEKAWBFBJAKHI2QaBCAk2yd4EotBCQMM0NQbJ1rngPFlEwz4BwSgxCSGgAoEAMDZIkZI3xbghElBMAUcCvi2V8jUGoXoY80BsDqFQKAcZwIIBQJwEWPAsC8kIO68gVA8F4BIMQZ8cBEC0haM+N2YcsAPHTdsLNAABbwPh8CaCrRmrN+B+CUBAMQT4z5uAgA7awOorAgA)
Note that you can take a hybrid approach. Use server-side rendering for relatively static content that *must* be seen by crawlers. Use client-side rendering for various components that need some level of interactivity/dynamism.
Can we collectively make a plan so this stuff doesn't get bought by Adobe or similar? This is one of those amazing projects that will get bought by someone and get destroyed...
TBF if you are playing against someone else who has mastered it, neither one of you will ever win. 
thanks :)
"Front End"
Since 1988. Still getting better. 
Awesome.
Hey thanks, I'll try that out!
The `ref` property is an extremely arbitrary (and obviously incorrect) feature to utilize for component initialization logic. I don't disagree with the article, I guess, but why would anyone actually attempt this?
I wish I had seen this a year ago. I sat down a couple weeks ago to write a broad roadmap/guide similar to this for a few friends, and this is nearly identical to the order I wish I would have learned front end
What I'm actually doing is response.write( ... ); My end goal is preserving formatting on the output of the command.
Regexes in JS are not passed as strings. If you wrap them in quotes, they simply become strings. The forward-slash is the actual delimiter. So use `/\\s/g` instead of `"/\\s/g"`
Like the title says, and despite the name, this library appears to be just a wrapper for the LocalStorage API. I'd like to know what arguments there are for not just using the [localStorage API](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) (directly or through a wrapper). Whenever I've needed client persistence, I've always used Mozilla's [`localForage library`](https://github.com/localForage/localForage), which has a very similar interface to `localStorage` but works seamlessly with IndexedDB, WebSQL and localStorage, deals with JSON directly and always returns promises. I moved to it because it basically worked on every platform perfectly back to IE8, and it saved my butt when (Mobile) Safari switched without much warning to IndexedDB. At this point is there even a reason not to use `localStorage` as is (or via libraries like this that just wrap localStorage?) Are there still platforms where it is a problem?
I wrote a post about tips on how to use -- require when performing mocha tests to reduce boilerplate in the testfiles. Any comments?
There are quite a few - [Greenkeeper](https://greenkeeper.io/), [Gemnasium](https://gemnasium.com/) are two I can think of off the top of my head. As GitHub, GitLab and the likes integrate this functionality, some of them are bound to disappear though.
https://user-images.githubusercontent.com/14143193/37072956-1e40fe60-2218-11e8-8c00-575c68822615.png RIP NPM
Yes. I feel that I need to explain the purpose in docs better, and should create a few more "Demo" demos rather than mixed samples.. Thanks :)
You may be comparing a scoped package vs a non-scoped package (i.e. @angular/core vs react). This has been an issue for a very long time. https://github.com/npm/registry/issues/59
They also have discounts for students if you send them an email 
Myself and my team use recompose to deal with this issue.
Yeah it's easy to feel stupid, when I do, I usually think about what knowledge I've gained the past 6 months. It's usually quite a bit. 
What's a better alternative?
With regex, I always prefer to explicitly define them; `let myString = 'Hello, World' console.log(myString); const MyRegex = new RegExp(/Hello/, "g"); myString = myString.replace(MyRegex, "Hi"); console.log(myString);` This allows reusage if needs be and makes intention very clear. You could shorten it as follows if you prefer `myString = myString.replace(new RegExp(/Hello/, "g"), "Hi");`
If you use stricter linting (like airbnb) the eslint plugin will do all that for you on save.
I agree. There's also an issue of finding developers who understand your stack. The more shit you pile on, the harder it is to find a developer. The older I get, the simpler I try to code and architect.
okay then which browser &amp; version are you using? And what error message do you see in your browser dev tools? You can open an issue here https://github.com/jadjoubran/www-webdash or let me know on reddit thanks!
Don't hope for any decent career progression related to programming then 
ES6: use [Object.assign](https://stackoverflow.com/questions/728360/how-do-i-correctly-clone-a-javascript-object/30042948#30042948)
What's your use-case? I would use by default a good third party tool already imported into my project like lodash to avoid spending a minute on these implementations unless I have good reasons to limit dependencies.
Pretty subjective, since it wouldn't be that difficult to adapt to various technologies when needed.
I'd recommend using framework such as Express, Koa, Restify. It depends on what you are trying to build. Is it full page or just and API?
&gt; Higher order function is a function, that RETURNS another function. Is this the same as closure ? [this](https://stackoverflow.com/questions/2728278/what-is-a-practical-use-for-a-closure-in-javascript) Stackoverflow answers mentioned that closure as something that a function which returns another function .. So are both the same ?
A way I find helpful, is to keep practicing and just keep building stuff, something simple like a todo list webapp. Along the way you will encounter bugs and issues which when you fix will teach you a lesson on how to avoid it next time. A to-do list app is a good example because you will cover, some sort of caching to store the list like localStorage, eventListners, add dynamic content, various states of elements on the page, and possibly responsive design. You could also challenge yourself to make at least 1 app a day, it could be anything, tic tac toe, lottery number generator etc. Hope this helps.
I posted an answer on SO for you, but ping me here if you need more help (i waste much more time on this website!) I've done a LOT of work with getUserMedia (most of my dayjob involves it), so i've learned that it's not very reliable, and can be a bear to work with, especially when you start using other people's hardware.
Try hard and good luck, man :D Financial impact is no longer a problem for me. And you will get there too.
This free course is a hidden gem: https://watchandcode.com/p/practical-javascript
The most common approach is using [Express](https://expressjs.com/), a micro framework similar to Ruby's [Sinatra](http://sinatrarb.com/). However, there are other frameworks such as [Koa](http://koajs.com/), [hapi](https://hapijs.com/), [Loopback](https://loopback.io/), and many more. The key thing about all of those frameworks is that at their core, they are Express. So if you master Express, you've essentially mastered all the other frameworks out there since they just wrap/abstract Express. Typically you'd find some module on [npm](https://www.npmjs.com/) and use it for auth, templating, etc. But nothing is stopping you from writing your own.
It seems that your comment contains 1 or more links that are hard to tap for mobile users. I will extend those so they're easier for our sausage fingers to click! [Here is link number 1](http://koajs.com/) - Previous text "Koa" [Here is link number 2](https://www.npmjs.com/) - Previous text "npm" ---- ^Please ^PM ^/u/eganwall ^with ^issues ^or ^feedback! ^| ^[Delete](https://reddit.com/message/compose/?to=FatFingerHelperBot&amp;subject=delete&amp;message=delete%20ID_HERE) 
Hali and koa are not based on express. Only loopback is, of the ones you mentioned. 
you could look into a package like cheerio that makes scraping/parsing a web page easy.
I think we're trying to say the same things as I also agree with what you said (which means I'm not entirely sure what the partially wrong part is).Although the end result is the same in that you won't bind this to an arrow function :)
Fixed.
Anthony Alicea is awesome, his Angular one is equally good. Wish he'd make some more content
const b = { ...a }
Well that's my new favourite thing :) 
It flips if-else's, and converts literals to strings (not the other way around).
Wow, impressive speed. Yes that is indeed what I thought. But after looking at the code I wasn't able to find what it exactly records, i found it places a cookie, and detects which browser the user uses, but I found nothing which looked like an IP, so I guess it doesn't record that?
You are awesome, thank you!
Also [Ramda.path](http://ramdajs.com/docs/#path)
I bought some of his courses, and I am not a big fan. Can recommend Stephen Grider, for anyone who feels the same.
I did something similar in canvas a while back: https://codepen.io/DerBaumeister/full/XZYNxB/
&gt;but I found nothing which looked like an IP That would be in the http referrer that loads intercept.js
&gt; WebGL2 experiment Complains about native modules :(
I see, that makes sense I guess. Are there really front end developers that never touch a database though?
I like how the intention of Tony's videos is emphasizing a total guts-level understanding, as well as the clarity and pace of his voice-overs. That said, I just watched the course preview for "Node JS: Advanced Concepts" by Stephen Grider and it seemed like it'd be a good investment. Thanks for the tip
no tests?
No yet. 
You need to have after the get I'd of the 'hello' .value
Or x.value
You forgot to `send()` the first request.
Hi /u/Ajay66malik, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/72h2Hs7uwb2h1y, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/everek123, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/TheIncorrigible1, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/Kobbi100, For javascript help, please visit /r/LearnJavascript. Thank you!
When you use `getElementById()`, the return value is an element object which can be from any HTML object. For an inputbox element, the value inputted is stored in the element object's `value` property.
What's the point of this sub if the js community is going to be redirected and fractured into hundreds of other subreddits? It was a question that was not really explained by the documentation and not intuitive in the slightest.
Ah that's great! I like lists! Maybe they can share their list with me, I am at Walmart but I lost my shopping list.. 
The best method is the method you write that best fits your situation. There will often be cases that can't be satisfied with JSON conversions alone (though that will work for simple object structures). This includes, but not necessarily limited to: objects with functions you want cloned, non-enumerable values you want cloned, references to objects like DOM elements which you might want either cloned or maintain references to, or objects with circular references. Depending on the structure you're dealing with, you'll want to make sure you have a cloning solution in place that properly handles that data. Note that splice/slice/concat for arrays and spread/assign for objects each make shallow clones.
You are right, the code displayed there matches exactly the code I presented! I found out, this beacon (the inserted piece of js code) tracks the following: - Last Offered this Survey (days ago) - Number of Site Visits - Page(s) Visited by User - Time on Page (seconds) - Time on Site (seconds) - Browser - Device - it places a cookie - and it does some extra stuff which I can't figure out.. so as far as I understand it hides in the source code and collects data without actively showing the survey.
The sub is to discuss javascript in general, not javascript 101 or javascript help -- unless it is a somewhat advanced/nuanced question, and this one isn't. See [this thread](https://www.reddit.com/r/javascript/comments/6waspe/do_we_need_a_javascripthelp_subreddit/) for why we send these types of posts to /r/LearnJavascript. Besides, you got your question answered, what more do you want?
Only thing that bothers me is your single capitalized App.sass file.
Yea, I didn't do a good job of explaining what I was trying to point out. I just didn't want newer devs to think that where the function actually gets called/executed determined its `this` binding. It gets determined only once, when the function is defined, and gets the this variable of the enclosing context. I wasn't disagreeing with your post at all, though I did a bad job at explaining that.
Thank you for posting it anyway! And thanks to /u/jgthms for making this! You are both awesome (;
That is exactly the issue at work. We already have to know C#, Webforms, SQL, MVC, JQuery, KendoUI, SSRS, Twitter BootStrap, WCF, C#, TypeScript, HTML, CSS, Razor, LINQ, EF, Web Services, JavaScript, .Net Framework etc... Can really ask the developers to be proficient in Angular as well? 
Not saying there is one, just that it's ironically funny that the flowchart showing progress / decisions is just like no really though pick this one I've used materialize before and I like it but it's not on the same level
`arr.splice()` is definitely _not_ what you want. Neither is `slice()`. `splice()` mutates the existing array, while `slice()` makes a _shallow_copy of the array (a new array with the same contents by reference as the original).
I'm amazed at how many people spell "standard" as "standart". "Standart" isn't a word. https://www.definitions.net/definition/standart
News and discussion of JS. Essentially, it's not to be a replacement for StackOverflow; but I've observed, the types of questions that SO commonly closes (for being 'too subjective', 'unanswerable' etc.) usually _are_ a good fit here.
When i put x.value I get instead of the result [object HTML InputElement] displayed 
that's odd, anything showing up in the console?
Right. It is determined from the parent context each time it gets executed. I was trying to point out that it doesn't matter about the actual function's execution/call-site. Was trying to clarify what executed meant in the original reply. After re-reading my comment though it is pretty obvious that I did an awful job at clarifying that.
Gotcha. Thank you for the explanation (and link)
Yes, it should be in separate folder. I just tested styles loading
that's your adblocker blocking fb and google analytics tracker, is it showing the two white dashed boxes and the "get color" icon?
It is now. odd.....
Start with the project, then fetch the right tools. In regards to some thoughts around node. * No ASYNC requirement - probably don't want to use nodejs * Wish to recruit lots of "cost effective" developers to work on the project - again, probably don't want to use nodejs * HTTP micro service acting as glue between lots of heavy IO systems (database, file system, http requests, etc) - Node could be a good fit alongside using a HTTP framework like Express. * Artificial Intelligence app with lots of CPU crunching - Wouldn't personally recommend node, go would be faster and more for integrated systems should you extend it to bots etc (also compiled and cross platform with a small footprint), C would be good but possibly the best choice would be python (which is gaining more popularity amongst AI/Machine Learning). * Large scale project with several people developing it - May want to consider TypeScript. It will make the team development all that more friendly in the long run. * Usual SaaS product i.e. database, oauth login, http (rest, spa, etc) would mean you end up with JS both server side and client side (and potential mobile as well with reactnative/ionic/PWAs etc). Node would also be good due to the non blocking nature. This would likely use Express (or similar) where you then pick all the extra modules you wish to include as development progresses. Ideal for NodeJS :) 
It's unusable with adbockers, the console keeps generating error messages.
I would say the best is to keep your current version up to date, and plan full version releases when you have the time for whatever migration. So far with angular since v2, it's not taken me more than 10 minutes to update a current version, and maybe 30m-1hr to upgrade to the next version.
I normally use console.log(JSON.stringify(jsonObject, undefined,2); That has always worked out for me, but I guess I never applied it to huge objects. Was this what you were asking for?
hmm. I'm using ublock and chrome's normal "block popups" and it worked for me.
I doubt I'll be creating the next Amazon with this tutorial, but it helped me better understand some of the terminology and concepts of js since I'm a total greenhorn. Thanks for this. 
Yeah Ive worked on some code that already was using cheerio. Ill have to look into it more.
Ehhh not really, here's a [pastebin](https://pastebin.com/z3ayEsm5) of one of the objects. I just woke up today and realized I hated this, it's so messy. I have been down this path before and it just make it harder to find what you are looking for. I am going in the path of creating factories to generate some of the sub objects just to remove some of the clutter. Maybe I need to involve some sort of pre-processing?
I use ghostery, uBlock origin and Privacy badger, not sure which kills it.
Vue too!
Well, Front End development never includes database work as there is no client side databases, however its possible that some front end devs can also work on the back end. I could see wordpress devs being like this. Also, people who know javascript are finding they can take their skills to the backend now with node.js
?
txt = 32 text(txt, 20, 20); if (x &gt; 420) { txt = txt / 2; } 
It is REALLY confusing that this is called CookieDB, does client side storage, browser cookies can be used for storage, and have nothing to do with this library. 
&gt; I am just saying that for me as a developer, it is far more lucrative to learn other languages because they are used by many big corporations in my area who pay much better than small shops. If you read their response, they did say for **them** it is more lucrative in **their area**
I'm consistently impressed with the work on CodeSandbox, very cool!
Basically, how do I change what is in the message portion of the text function. I thought what I have before would work. Excluding var x = 50; or so, why doesn't it work?
Hahaha, there are no plans to sell CodeSandbox. This is like a baby.
Yeah but I don't want the txt variable to be seen as a string, or you know what I mean, why can't I do what I put?
the author is not a native english speaker. not saying that makes it more correct, but personally i'm only annoyed when native speakers don't bother to learn their own native language. i think it's pretty understandable that everyone else will make mistakes.
The solution was found here... https://www.reddit.com/r/learnjavascript/comments/87besi/needing_help_with_a_web_page_with_a_complex_set/
You should choose the best tool for the job. Your using React doesn't really "support" Facebook in any material way. As for the recent news, folks shouldn't be surprised that a "free" platform to which they give personal details sells that information for a profit.
&gt; Yeah but I don't want the txt variable to be seen as a string, or you know what I mean You're supposed to pass a string to text().
1) Start VSCode in a new Project 2) Open a JS file 3) write test.blue().red().green(yellow) This becomes test .blue() .red() .green(yellow); 4) CTRL+Z 5) Disable react-beautify 6) CTRL+SHIFT+I (no change) In this specific case, my guess is that react-beautify assumes all js files should follow react formatting conventions. There are other silly examples like this, primarily centered around cases where the file extension doesn't necessarily imply a single choice of framework. It would be nice if I could put all my angular plugins in one group, all my react plugins in another group, and then toggle them on or off depending on the project. 
If you haven't used vue, may be a good time to give it a go. I haven't played with it for a year or two, so I'm interested to see what has changed. But at the end of the day use what you need for the project you are working on. If it's a personal project or just for your own education, no excuse needed to do what you want.
You're overreacting. If Facebook drops it, or it becomes a really big problem to have them control it, it'll be forked. Use it if you like it.
I have seen articles that shows how we can achieve redux-saga using async/await, so I'm not sure.
asyncIterators are pretty interesting indeed. It's a mix of async + generators I think
Thanks! that's what I'm thinking as well.
Thanks for the article, I just spun up a create-react-app, threw in redux, and the built file came to a cool 147KB (375KB uncompressed) just for the frameworks/boilerplate :(. Sapper/Inferno weren't even on my radar.
Yeah, but is there a way to do what I want? Ok, well I know there is, but how do I do that?
That's probably your dev environment with all the dev dependencies. What do you get when you do a **npm run build** which should give you a **/dist** folder. 
JS fundamentals are kind of quirky.. You can take the course JavaScript: Understanding the Weird Parts (https://www.udemy.com/understand-javascript/learn/v4/overview) so you understand better how te language work..
"dependencies": { "react": "^16.2.0", "react-dom": "^16.2.0", "react-redux": "^5.0.7", "redux": "^3.7.2", "redux-thunk": "^2.2.0" }, "devDependencies": { "flow-bin": "^0.68.0", "husky": "^0.14.3", "lint-staged": "^7.0.0", "node-sass-chokidar": "^1.2.2", "npm-run-all": "^4.1.2", "prettier": "^1.11.1", "react-scripts": "1.1.1" }, $ ll build/static/js ... 147253 Mar 27 13:51 main.ec4d15d1.js Granted that's without gzipping, probably ~45KB ish delivered to the browser.
I wish they would change that horrible blue 
I'm using just ghostery and it worked fine. Funny ad blockers would block alerts you triggered yourself.
You won’t be supporting Facebook other than their React team being able to say they have one more user. It’s open source and it’s a really solid piece of software. Also yeah you’re overreacting a bit, especially if it’s down to the recent news. I’m pretty sure everyone who cared to listen knew exactly what Facebook app’s were for and what they are capable of. Suddenly everyone is surprised when Facebook is used to harvest data, it’s kinda silly. CA obviously up to no good but Facebook are a neutral party as far as I’m concerned.
No. Air is more of a replacement to Adobe Flash.
Once had to use ClearCase with ClearQuest CMS at a government job, that was pretty terrible.
Nah
No but the color GitHub uses (#2b7489) would look nicer: https://i.imgur.com/ZRDKSzl.png -&gt; https://i.imgur.com/hHyLjbl.png
Well no, the Animate is exact replacement for Flash. If we want to be precise here 
You should use Vue over React because Vue is much easier to learn and reason about.
A quick Google revealed this: https://github.com/MrRio/jsPDF You have to worry about scaling backend services. Frontend you just have to worry about client machines being performant enough. There's also bandwidth usage / costs from your servers if you generate PDFs in the server side. Obviously without knowing all of the details it's impossible to say where the correct place is to generate the PDF. But doing it on the front seems to be a reasonable, and quite possibly preferable, solution. 
Ember *has* been using TypeScript...
yes i did and thanks. i just wanted to make clear why i'm asking this question.
I agree, I hate our website's skyline.
Oh thanks good idea
But the behavior you're describing are the standard beautify formatting rules. Prettier would probably do the same. That is the expected behavior and it is not related to any framework. If you don't like the way beautify formats your code you could look into the settings it offers. As far as I gather from your description everything is working the way it should. 
Processing is Java (99% positive) and p5 is JavaScript obviously 
Interesting read for sure. Minor thing I noticed though is that the fat arrows in all the examples are showing as “=&amp;gt;” 
It wasn’t written for JS development of apps, it was written for Flash/ActionScript development of apps. Only later was HTML/JS support added. Because of its Flash baggage (and performance issues) it never really made a huge impact. The main difference between Electron and Air is with their packages. Electron apps contain a Chromium browser, Air apps need the Air runtime installed on the system. I’d rather not install dependencies like Air to use apps, but that’s me.
Processing and p5 are both DSL's that optimize for teaching and rapid graphical prototyping. Processing is built on top of Java and has its own IDE. p5 is built in JS and uses HTML 5 &amp; canvas for rendering; p5 has an alpha web editor up at https://alpha.editor.p5js.org/, but otherwise you're mostly on your own for a dev environment. Processing and p5 have similar APIs and philosophies. p5's vision of JS is highly object-oriented in a Java-ish way, and many of the guides and books in p5 and Processing are super similar. You didn't ask, but there's a related difference between Processing.js and p5.js. Processing.js is a way of taking a program from Processing and putting it on the web; it more or less transpiles from Processing to JS. p5 is native JS from the ground up. I teach with p5 semi-regularly. Happy to answer other questions.
https://en.wikipedia.org/wiki/Law_of_triviality
This is the second video of the last San Francisco react Meetup. We already posted one here: https://www.youtube.com/watch?v=NQta2urK3zk.
Slides available here: https://www.slideshare.net/vincentdesmares/road-to-react
Yes, since they're two different things, they can be combined. `const` prevents reassignment of the variable (doesn't affect the object at all) and `freeze` prevents changes in the properties of the object (doesn't affect the variable at all).
For those who liked the video. Here is another talk from the same meetup: https://www.youtube.com/watch?v=l5K01MAi2Ek
I use TypeScript daily, but i fail to see where i can use these features in practice. Can someone give some practical examples of the use, which does not include `Dog extends Animal`
It's not for typical daily usage; if you've ever had to write a complex declaration file for TypeScript describing its runtime behavior, you might start to see where it comes in handy. [The original pull request has some details here](https://github.com/Microsoft/TypeScript/pull/21316/)
One idea I've seen: https://github.com/Microsoft/TypeScript/issues/22375 What is going on there is forcing an argument to be possibly(but not definitely) undefined. Another more complex case I saw is in the io-ts library(which is a great library full of crazy stuff you can do with TypeScript): https://github.com/gcanti/io-ts/issues/140 https://github.com/gcanti/io-ts/blob/optional/src/index.ts#L525
`const` is for *anything* with a value - objects or primitives. `const` implies that the variable can't be reassigned, but it doesn't imply anything about whether the variable's *data* can be mutated or not.
This is great! Thank you! Gonna share it with my friends :)
This guy JavaScripts! I came to say that using axios you can do a promise all.....but this guys answer is better. 
The biggest driving force of the increasing complexity of the type system is the fact that they are beholden to existing JavaScript code and patterns. More specifically, in the case of TypeScript and Flow, both of these projects' raison d'être is to have a type system that describes and fortifies JavaScript as a language. JavaScript comes first. So for a project like TypeScript, the question was never "should we allow someone to write a function that takes an object whose values are nullary functions and returns an object with the same keys mapping to the result of calling each of those functions" but rather "what can we do to describe a function that someone already wrote that does that complex thing". This is how we end up with mapped types, conditional types, and conditional type inference.
Noone should learn JavaScript or any language in 14 minutes. 
Preact! So tiny. It rules 
Wrap your mongodb.connect in a function with arg being the url and callback for result. Export that function. 
The forEach method may work if the actions you want are completely independent. But if not, you can use map to convert the array of urls to promises and then Promise.all to wait for all of them: const urls = [url1, url2]; const jsonPromises = urls .map((url) =&gt; fetch(url).then((response) =&gt; response.json())); Promise.all(jsonPromises).then(([json1, json2]) =&gt; { // Handle json data });
This is correct. 
&gt; folks shouldn't be surprised that a "free" platform to which they give personal details sells that information for a profit Don’t let elitism creep in. Most “folks” don’t know the stuff we do. They don’t know how these kinds of things work. Anyone here, yeah, they should. But folks in general...this is their awakening. 
Put it in a div with overflow: scroll. 
As someone who started working as a fullstack webdev 2,5 years ago and never used jQuery single time, I'd say the only reason you might need jQuery in 2018 is if you are previous generation developer who has been using jQuery for years when it was best (and only) option available, and too lazy to learn new frameworks that make development **and** maintenance so much easier and faster. Since you are asking this question, it's probably not your case, so you should of course be able to recognize jQuery when you see it and look up something in the docs, but other than that, don't bother. That's, of course, just my opinion from personal experience.
You're a best, keep it up!
Sadly most of the article is copy and pasted from https://www.robinwieruch.de/machine-learning-javascript-web-developers It's almost 80% copied and sadly it's the second article this week which simply copied the content from another article "If you are coming from web development background, you might know how difficult it can be to make the leap over to another domain such as machine learning. which comes with its own constraints. Not only the whole domain with its algorithms is different, but also its programming languages suited for machine learning paired with mathematical concepts from linear algebra, calculus, and statistics." The comparison between Python and JavaScript... And: "But the JavaScript ecosystem also offers a rich set of libraries suited for most of the tasks too. Because most of them are not only used in machine learning, the JavaScript ecosystem developed a couple of sophisticated solutions beforehand" "JavaScript isn’t so much behind other programming languages when it comes to the toolset. But for sure, the sky is the limit. There are endless of improvements which could be made or libraries which are needed. That’s just another opportunity for open source developers to implement the necessary tools around it." "JavaScript is evolving and thus its capabilities of applying machine learning with it. Even though it may be only the bridge for you to learn about machine learning in the first place.I hope there will be more libraries coming in JavaScript for machine learning making it more accessible to web development and to the end users. Afterward, learn a more suited programming language for it. But then you have only to learn the programming language without worrying too much about the machine learning part anymore. Even though learning machine learning is an ongoing process and you will always learn something new in this fast-paced domain. But it’s exciting because it has so many facets."
You get node to work on your website because node is the server which is hosting your website. The thing that makes node.js different than traditional servers, like apache, is that it uses javascript in the backend which can communicate with the frontend (javascript/php, etc..). 
Okay, I have one file with node in it. The rest of my files are html, css, and js. I just use VS code's life server to see what everything looks like. but the live server doesn't work with the node file so I can't see how it all looks together. For node, I need to go to the terminal and type in node app.js or whatever to get it on the localhost. Do I have to buy a URL to see how node works on my site? 
**Nope**
Thanks for your input. I’ve been working on personal projects using react and react native and see jQuery come up often for job requirements. I don’t feel like learning jQuery not out of laziness but because I rather learn other things.
"OCAD University - Login" I doubt anyone can see your page.
I'll look into it, though performance is not really an issue currently. As it's currently written, on a page that hits the top-level comment limit on reddit it's still nearly instant. Might look a little different on something like an ARM chip but I'll worry about squeezing out performance when I rewrite it to not look so horrible. Turns out I didn't even need the user IDs from the classes. The event bubbling worked perfectly for setting events on the event.target that only effect that element and I just re-used to username search regex to find duplicate users since using the IDs would have meant I would have had to somehow add the IDs to username mentions as well. Thanks for all the help! Only need to figure out how to add a context menu option to an extension and this thing is feature-complete.
Why not? It's not like it took much longer to create it. 
Thank, I use in app browser on my iPhone SE. The home page shows blank. Then I switched to desktop and looks cool. ;)
node is for server side scripting, not websites. Like PHP. Node can serve websites, like a web server. You cannot run node code in a browser. You can run javascript in a browser, but you would use node for handling things that the front-end js can't. Like sending an email when someone submits a form from the UI.
No, that sort of thing is too low-level for Javascript. It *would* be easy enough to make an object that retains a memory of sorts of every previous value of its attributes, though.
If you have to ask...
Remember, Java is to JavaScript as Pain is to Painting, or Ham is to Hamster. We don't know Java, and if you're trying to apply your Java knowledge to JavaScript, it probably won't work.
Jesus, dude... 
Upwork.com And I think there is no enough time to do it anyway
you'll need to export the function, then call the function in server.js I would also look into promises. They're a lot easier to deal with than callbacks. // app/settings.js module.exports = { getCustomers: function(callback) { var MongoClient = require('mongodb').MongoClient; var url = "mongodb://127.0.0.1:27017/test"; MongoClient.connect(url, function(err, db) { if (err) throw err; var dbo = db.db("mydb"); dbo.collection("customers").find({}).toArray(function(err, result) { if (err) throw err; db.close(); callback(result); }); }); } }; // server.js var db = require('./app/settings'); db.getCustomers(function(results) { console.log("customers", results); });
I made a stripe form. That is something that enables people to buy my product. I made it with node. I can see my form when I go to git bash and type in node app.js, then go to localhost. I have a bigger website with a bunch of pictures and text, about page, contact page, purchase page, etc. I want to put a button on my purchase page that opens my node stripe code on beside the paypal button. I use the llive server to open all my code but I use the terminal to open the stripe node code. How can I see it all together? Thanks. 
There's [this](https://github.com/twitter/twemoji). Chrome will use the emojis that are native to your OS. If you want to see what emojies your OS supports you can go [here](https://unicode.org/emoji/charts/full-emoji-list.html)
Your Stripe form is just a plain old HTML form. It can be edited and viewed just like any other bit of HTML with CSS and browser JS, and will look just fine in VS Code's live preview. The Node application is just a little thing that listens for HTTP requests, does something with them, and then returns a response (which might be HTML, might be JSON, might be other data). If you share your code on GitHub or Dropbox I can take a look, but the setup is likely that it listens for requests on two endpoints: one for the homepage which sends the HTML to show the form, and then one for form submissions that talks to the Stripe API. You can incorporate that form just fine into your other static HTML files, and it will display, but if the Node application isn't running it won't submit.
Except not really. Some people think Vue is easier to learn and reason about.
That's a ferris wheel tho
It's a nice service. For many beginners, any language seems overwhelming. It's nice to get some of the basics in a very short time. 
ah.. that is good to know. thanks!
I'm consistently impressed by how high-quality and thoughtful the React docs are. 
I don't have a problem with doing this on FE, I just thought that it's much easier to make it on BE with Java. But with I will try to create PDF with this jsPDF.
Joke API! I made an API that fetches a random joke using Azure functions and javascript. Check it out [here](https://github.com/alexweininger/joke-api). It would be perfect for anyone who wants to tinker around with http requests, getting json, and displaying it on a webpage. Thanks! mac
Automatically organizing imports built into the compiler sounds nice
Angular Ivy will be an insanity, it will allow to accomplish crazy stuff, and we don't even know all of the features yet.
Yes and you shouldn't use any framework that's being used by profitable companies since they are all part of capitalism which is controlled by the banks and the banks are the cause of the latest economical crash that resultet in millions of people losing their homes... You don't want to loose your home do you? wtf kinda logic is this?
Supporting facebook by using react is kinda of a long shot. However they will benifit from it (very very little) since the more people that uses react the better it will be since it's open source which will lead to them bulding better stuff and it will be easier for them to hire people that already have the knowledge about react etc. So in the long run sure they benifit from it but it is very minimal. I wouldn't go so far to not use react but if you really find it to be a big problem I have heard good things about Vue so why not use Vue?
Aww, sh*t! I didn't check the size. I'm planning to add more cheatsheets and that's for sure something I'm going to have to solve. Thanks for noticing it! I'll see what I can do!
There's a reason why websites with immense amounts of content [reddit, facebook, twitter, 4chan] are served via multiple pages. It's not just efficient to serve that much on an SPA platform. Yes, you can make a lot of pages run interactively like an SPA -- but making something like a forum purely single page is inviting headaches and suicidal tendencies.
Well, this continues the unfortunate trend to widen the gap between the React team and actual developers. Previously, they broke context, despite this "experimental" feature becoming a major part of React ecosystem, component lifecycle and overall architecture. Next, they introduced the "new" context API, that didn't cover use\-cases of the "old" context API. Namely, we use context to pass some props from a greater scope to very removed descendants without passing it through each level manually, making a clusterfuck of props on every intermediate component along the way or obscuring those props as some kind of "needThisLaterProps" object. I can, of course, go into detail, why we need such behavior, but the point is, that it worked as expected and was useful, made life easier for developers and provided greater maintainability to the project. New API doesn't allow that, because you have to manipulate components, creating a provider in the "greater context" component and somehow passing consumer to "very removed descendants" components. You also loose any ability to read from context in lifecycle hooks, however, some people figured workarounds, if you really want to. But that does not matter anymore, as they are now removing many lifecycle hooks, forcing you to use [stage 3 features](https://github.com/tc39/proposal-class-fields) or arguably bad practices. For example, it is believed within our team, that you should never put things in local state, if they do not cause a render. Things that are used in render, or lifecycle hooks, but are not the cause of it, should be stored in class variables. Those things are often saturated within WillReceiveProps and WillMount. Now, you cannot do that. OP article itself recommends to store intermediate values in state now. Presumably, because we get to use a static method now, that only outputs to state. It looks like React team is tightening React's API, removing variety in favor of their vision. What baffles me, is that the argument for it being safe to remove something that major is, from what I've seen, "[There aren't many Github projects that use that](https://github.com/facebook/react/pull/8631#issuecomment-268911292)" \(paraphrasing\). But how many non\-Github and non\-OS projects use versatility of React 15 and cannot move to React 16, despite all other nice features it brings, because React team started to paint in broad strokes?
meteor does this not sure of a framework made for it, any framework can do that, its just like using &lt;frames&gt; in html; you use a container div and write two functions to hide show sub-containers
You can’t have it both ways. Either you stay lean and relevant while making some breaking changes, or you support a huge variety of edge cases and become a bloated, directionless library as we have seen countless times.
I'd stay away from Adobe Air as much as Microsoft Silverlight and, generally, Flash these days.
And at least they follow semantic versioning so that it's obvious when backwards-incompatible changes will be introduced. *And* they've gone to the trouble of creating compat libraries to allow teams to start migration ahead of the major release. That's a lot better than many other large projects out there IMO! 
Yep, this guy is just butthurt because he thinks he knows better than the react team. If you insist on doing things your way, the current version of react will always be available for you to use...
I may be butthurt, but that is only because they started changing major things in a way, that limits their functions for no other reason but "we had an inherit problem internally that only we knew about, and when we decided to rewrite the thing completely, we couldn't figure out how to support all use\-cases, so instead we will support only a bunch and explain it with Github usage stats as if it represents anything real". That behaviour would be OK, major version or not, if React was not already production ready for years. That behaviour forces people to either use older versions \(and good luck finding modules that still support them in a year or two\), or do architectural rewrites on every major release. There are a lot of deprecations in just one major version. The sum of them makes it impossible for some projects to migrate with or without carefully crafted migration libraries and published recipes. Because changes are not just API incompatible, as is expected with major releases, but are functionality incompatible. Makes your project, that relies on React, forever outdated, if you don't have manpower to rethink it's structure and implementation details. And this is just because React team decided, based on Github search, that some things are OK to be dropped, even if migration is impossible afterwards. I don't imply that I know better than them. I only share my thought on how they affect people with their changes.
&gt; u just copy/pa I could do this, and it is what I have currently. Having it in settings.js give me much better organizing I most admit..
&gt; require Hi thanks for your reply this looks like what I need . Thank you its much appreciated
\&gt; They literally stated in the docs that the context API was experimental Yeah, that's their go\-to excuse, but that ignores the reality. And reality is, that context, as it was, worked well for people and even libraries to use. Flux libraries, no less! You cannot be that dismissive with your community, just because "I told you so"! And the point is, that the new API does not solve the same problems that the old one did. I gave an example. Because of that mess of the new API, we cannot migrate to it, and there is no other solution other then to reimplement the old context ourselves to even have those abilities that were given before. How is that good? \&gt; Nothing about the new API requires class properties. Are we on alternative facts now? Their first recipe on how to set the initial state is to use class fields stage 3 proposal. And they only suggest doing it that way, because otherwise they would have to propose implementing a constructor. And that is indeed a code smell and a bad practice to implement a constructor in subclass just to set initial state. \&gt; That's a ton of whining for such trivial things I think I can whine a little about the state of React, developing and supporting a React project for almost 3 years. Previous updates brought QoL improvements, React 16 makes it impossible to upgrade to it, because it has less functionality within it's core mechanisms, experimental and not. \&gt; keep complaining that you need to adapt I wish I could adapt, but React team forces a full rewrite of our project just to keep updated. Neither me, nor my team, nor my firm are ready to do full rewrites every time a group of guys at Facebook decide to drop support for something crucial, they deemed not worth trying to keep.
great work anyway, taught me that spread operators can do object merge :-)
Check this [out.](https://electronjs.org/) Or if you want to create a web page, I highly recommend this [one.](https://vuejs.org/)
Thank you very much for your suggestion.
Thank you. I'll have a look to this.
 // New variable names when spreading const { make : newMakeName, model : newModelName } = volvo; newMakeName; // Volvo newModelName; // XC90 I didn't know about renaming var on object spreading. Thanks!
Where's the update on async rendering?!
Full rewrite for us as well. Been coding an app for over a year and we use those lifecycle methods everywhere. RN is bleeding edge though and it was always a possibility.
Good CheatSheet Social icons always chasing the bottom of the page are annoying 
No problem! thanks for reading!
Yeah, it's great for working with React-Redux! Thanks for reading!
You can't with built in Promises. Apparently it's possible with bluebird's Promise.coroutine, but I have never used it myself.
Hmmm. Imagine an Electron-lite built on this instead of V8. 
I don’t know any that fit your needs exactly but I would seriously consider building your own that is tailored to your requirements. If your knowledge of webpack isn’t great, you can easily get up and running in under an hour, the docs and community are pretty good.
Gemnasium has been acquired by gitlab, and the later is now proposing a lot of similar features with the security products. 
Thanks for the feedback! I'll look into it! 
I fucking hate React.
My half assed assumption is these changes are only to make React and Redux more "cohesive". If you don't use Redux.. I don't see the issue with the lifecycle methods. We don't use redux and we use stateful components way more than stateless. 
Well, it's a bit more than they sold the info.
We use it Discourse for our community--I highly recommend and love it. I've seen more and more communities jump ship over to Discourse lately too!
Wouldn't you have to rip V8 out of Chromium and shove this in its place? Sounds like a very monumental and annoying task.
404
If I don't HAVE to upgrade and the feature is antipattern, whats the point? Just fucking remove it or note that it is antipattern on the documentation. None of these half measures.
What is it!? Cant find it on google
You just casually tossed in “feature is an anti pattern” without an explanation. Also nice cheesy ending line, really drives your point home 
Thanks for making this! FYI, the last header says “That’s is!”
Search your demo for "stardart". That isn't a word.
Nice.. you can't argue the point so personal attacks it is.
Do it
thanks man, missed that! updated now!
It would be slow as shit, wouldn't it? V8's heavy but it's really really fast.
lol, can you at least explain how how this is an anti-pattern? Or is it just something that your not used to seeing or doing so you are all fired up?
Thanks for the reply. I tried the following, which did add the scroll bars, but it also shrunk the images being displayed. I think I have to adjust the css, just not sure where. &lt;div class="container" id="container" style="height:200; width:200; overflow-y:scroll"&gt; &lt;div id="instafeed" class="column" style="height:200; width:200;"&gt;&lt;/div&gt; &lt;/div&gt;
Yeah, annoys me too! Everyone wants to use NodeJS for it, then write synchronous code that "looks" async (using promises, callbacks, pub/sub, etc) then use sync methods elsewhere because the actual async flow does weird things! Why of why!?!
Does anyone have an example of how redux can't already be type safe?
If you want to build, i suggest you to use (RollupJS)[https://rollupjs.org/guide/en]. It is very efficient. To test, I suggest you the classic stack : - (Mocha)[https://mochajs.org/] - (SinonJs)[http://sinonjs.org/] - (jsDom)[https://github.com/jsdom/jsdom] (DOM env for node = test purpose) 
VERY NICE
args for BE : - share the created file - use of the CPU of the server in place of client's CPU As an illustration, replace the 'create PDF' part by 'compute Math operations'. Cheers 🍻
Except they're wrong.
Or you could go the constructive, bottom-up approach and build a minimal browser/server environment *around* this instead
Yeah but I mean, if you're so opposed to learning/using other languages that you'd actually use this (as opposed to, say, micropython) on an embedded project, you might as well Besides, there are benchmarks (though I admit I haven't done more than glance at them). It might not be so bad performance wise
&gt; is there a way to do what I want? I do not know what you want. You aren't very good at asking technical questions.
Are there any programming languages that behave this way?
do you mean default ability to host a websocket server with node? I thoughr Javascript does not have the ability to host or even listen without first connecting to a WS server?
Flex framework was fucking awesome! Best UI building tools i have faced yet and actionscript is a neat in between java and javascript thing that support types and interfaces. But its dead, dead, dead !! Learn Electron or some form of react native desktop thing. Like React XP or react-native-windows. I'll be a lot better. 
But for a lot of apps (which are basically web pages in a container), a framework built around this could be a decent alternative to a binary with all of Node and Chromium
Hi! A React team member here. Let me try to address this. &gt;Previously, they broke context, despite this "experimental" feature becoming a major part of React ecosystem, component lifecycle and overall architecture. I’m not quite sure what you mean, but the legacy context API still works and will continue to work throughout *at least* this major release. We have 50,000 components at Facebook so any breaking change hits us harder than the vast majority of other companies using React. And we can't tell our product teams to rewrite their components either. So we are fully committed to gradual migration paths. The new context API solves [one of the most confusing issues affecting all context-reliant libraries](https://github.com/facebook/react/issues/2517). You can see how much discussion there is on it, and how many different issues in different libraries link to it. We aren't taking something away from those libraries—we are giving them an API that *actually works* and is officially supported. I understand the frustration caused by this feature existing in a half-working under-designed state for a long time, but we are working to make this right, and I don’t see what other path we could take. The existing API is fundamentally broken and there is no way to “fix” it without changing it. But again, this change is gradual and opt-in. &gt;New API doesn't allow that, because you have to manipulate components, creating a provider in the "greater context" component and somehow passing consumer to "very removed descendants" components I’m struggling to understand what you mean. Perhaps it would be more productive if you filed an issue and offered some code examples? As far as I’m aware the new context API covers all use cases that the old API did, and more. What you’re writing seems like a misunderstanding to me, but I can’t say for sure without seeing the code. Thanks! &gt;But that does not matter anymore, as they are now removing many lifecycle hooks, forcing you to use stage 3 features Nobody is forcing you to use experimental features. The blog states we used public fields in it for brevity but you can write the exact same code in constructor (which, as you probably know, public fields desugar to). &gt;Now, you cannot do that. OP article itself recommends to store intermediate values in state now. We realize this aspect of `getDerivedStateFromProps` can be inconvenient in some cases. But it lets React better utilize the memory in the future (by not holding onto the whole object with previous props) and avoids the need for you to check `prevProps` for being `null` every time (because it would be `null` on the first render). There are pros and cons of both approaches, but we picked one we think would be better for our users in long term. We’re humans and we can make mistakes too, but for now we decided on this approach after much consideration and discussion. &gt;It looks like React team is tightening React's API, removing variety in favor of their vision. I recently did a talk about [our vision for the future of React](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html) with live demos of those features. I don’t know if you’ve seen it but I heard a lot of positive feedback indicating these are exactly the kinds of problems that React developers are facing every day and that they hope to see a solution to. So yes, we’re making some changes to achieve that vision, but we believe it will be worth it. I hope that my talk will convince you too in this. &gt;the argument for it being safe to remove something that major is, from what I've seen, "There aren't many Github projects that use that" (paraphrasing). I’m sorry it came across as careless but we also did an internal review, and out of 50,000 components at Facebook one or two used that feature. The feature was broken (context updates don’t propagate correctly) and it was explicitly marked as a major change in React 16. For the past six months since it came out, you are the first person to bring it up so this speaks to `nextContext` argument not getting used widely in practice. Overall, I’m really sorry you’re having a negative experience. I hope that my arguments somewhat explain the context behind these decisions but I understand if you choose to disagree. 
You are welcome to file an issue. This will be a more productive way to discuss specific issues. Thank you!
No please. There was atleast one thread before, and we don't need to steal this from other languages, either. Just... no. 
incredibly simplistic and short sighted nagging. they have a solid long term vision and are making nice improvements consistent with that vision. progress takes change. they can't sprinkle pixie dust on it. they know everything you have said. the reason they are doing what they are doing is not because they aren't smart enough to understand. it's because they are seeing 100 steps ahead of you.
There is no need for a “full rewrite”. As stated in the blog post: &gt;We maintain over 50,000 React components at Facebook, and we don’t plan to rewrite them all immediately. We understand that migrations take time. We will take the gradual migration path along with everyone in the React community. We will release a codemod that adds `UNSAFE_` prefix automatically. Your components can keep using those methods. Even in React 17, they will keep working as stated in the blog post: &gt;17.0: [...] Only the new “UNSAFE_” lifecycle names will work from this point forward. We want to highlight patterns that will become problematic with asynchronous rendering, and it’s best if you avoid them in the new code you write, but there is no rush to change the existing code. You will be able to opt out of asynchronous rendering in the future if your code isn’t ready to it.
One more: Assignment to existing variables - easy with array, harder with an object: let a, b; ({a, b} = {a: 1, b: 2});
How do you measure something that changes in both space and time, i.e. which runtime you use right now (space), and which version of the runtime (time)?
That's neat. I remember a situation where I needed this, but I wasn't aware of it.
Hi, thank you so much ! The Google Script Editor says that there is a syntax error on line 22 var lines = urls.value.split("\n"); I tried to modify this line but it always says Syntax Error... JS tutorials do not help me much about this one.
I actually have no idea what Google Script Editor is, so on that part you're on your own unfortunately. :)
I always have to google it new, mostly because together with Flow type annotations it does not work. which is a Flow bug, but the red lines in the IDE confuse me because I'm used to adding types to everything.
I think this is a long ways away from having a DOM. It seems more like an alternative to something like Lua.
Not doing that strange interval thingy and instead reacting to events fired from the source when something needs to be changed is faster.
Well the variables are independent I am more concerned of how do browsers implement and handle multiple intervals and if there is any difference in performance
Thanks for info very much appreciated. 
The DOM, while ubiquitous, is not exactly necessary for building apps/rendering UIs.
Hi 👋 article author here. /u/gaearon has already responded to most of the concerns you raise below, but I wanted to &gt; forcing you to use stage 3 features or arguably bad practices. The examples use class properties because they're a little more succinct, and allowed me to better highlight the differences between before and after examples. [At the top of the Examples section](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#examples), there is a note: &gt; For brevity, the examples below are written using the experimental class properties transform, but the same migration strategies apply without it. Sorry if this didn't stand out enough! If you don't want to use a transform, you could replace an example like this: class ExampleComponent extends React.Component { state = { currentColor: this.props.defaultColor, palette: 'rgb', }; } With this: class ExampleComponent extends React.Component { constructor(props) { super(props); this.state = { currentColor: this.props.defaultColor, palette: 'rgb', }; } } They will work the same! 🙂
Hi 👋 article author here. /u/gaearon has already responded to most of the concerns you raise below, but I wanted to &gt; forcing you to use stage 3 features or arguably bad practices. The examples use class properties because they're a little more succinct, and allowed me to better highlight the differences between before and after examples. [At the top of the Examples section](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html#examples), there is a note: &gt; For brevity, the examples below are written using the experimental class properties transform, but the same migration strategies apply without it. Sorry if this didn't stand out enough! If you don't want to use a transform, you could replace an example like this: class ExampleComponent extends React.Component { state = { currentColor: this.props.defaultColor, palette: 'rgb', }; } With this: class ExampleComponent extends React.Component { constructor(props) { super(props); this.state = { currentColor: this.props.defaultColor, palette: 'rgb', }; } } They will work the same! 🙂
Of course not, but the whole premise of Electron is to leverage web skillsets for desktop apps, otherwise you would've used Qt or whatever. If you want a drop-in replacement engine for Electron, presumably you would want at least some level of feature parity with it, right?
I think the "passing consumer" complaint is saying that while the old context API was simply a shared namespace (like declaring `contextTypes.store` anywhere in the nested tree), the new API requires that the nested component have access to the specific instance of `Context.Consumer` that matches the parent. That _does_ sort of bring up a chicken/egg question of how the nested component gets access to the `Context.Consumer` instance in the first place.
1 Interval should be faster, both seem atrocious but I wont judge without looking at the code Something like this right? http://jsben.ch/XXSO9
The old API was implicitly global. With the new API, you can either import it from several components (you can even have an npm package that just exports `React.createContext()` and use it across your app) or you can literally put it on a global like `window`. Sure, it’s “bad”, but your existing context was just as “global” from the programming perspective. With the new API, you have to be intentional and explicit about that.
I pointed out some specific example here: https://news.ycombinator.com/item?id=16697038 The problem isn’t “anti-patterns”, it’s just that these patterns won’t work well with asynchronous rendering (and often already cause memory leaks and race conditions).
We can’t remove something thousands of components rely on. So the change has to be gradual. I expanded on the reasons here, I hope you find them helpful. https://news.ycombinator.com/item?id=16697100
Hard to tell what the issue is just from this; but I would first start with putting units on your inline styling (e.g. 200px, not just 200).
Be sure to post your findings, in chart form, to [r/dataisbeautiful](https://reddit.com/r/dataisbeautiful) for tons of free karma.
Will do! I'm aiming to get the results published twoards the end of April
Good points raised about async +1
I can't help but think something is fundamentally wrong in your code simply by the question your asking and that your concern is in relation to speed not design :/
What kind of variables?
Use #1. 50ms is fine 
Hello, and thanks for responding. Somewhere in these comments I mentioned that I find implementing a constructor function in this case a bad practice. We prefer to use WillMount for initialization of private stuff and initial state. For state, it provides common interface \(this.setState\) with other parts of life cycle. And for everything else it allows us not to worry about passing arguments to super and whatnot; developers had no need to remember to call super. Also, babel sometimes broke on super, when one of it's transformations created statements before the super line, so there was that as well. In the end, it just made code cleaner, writing it easier, chance to break it lower, and didn't involve either stage 3 features \(which we would use if we could\) or poking around in constructor.
@snoopysdad I hope you don't mind a follow up question . Ive tried to use this in my routes.js to pas this var to my matches.ejs like so but I must have something wrong: app.get('/profile', isLoggedIn, function(req, res) { res.render('pages/matches.ejs', { result: db.getCustomers(results) }); }); Do you see what im missing here ? 
It's a tradeoff. You're sacrificing speed for low memory. But on a lot of desktop computers, that's not a good tradeoff to make, because memory is plentiful and slow speeds are noticeable. If you're making a desktop app, then node/v8 is almost certainly the better choice.
Interesting. I had no idea that copying images with an alt attribute copies the alt attribute. Does that work across all browsers?
I think I understand your _preference_ for will-mount, but I disagree that using the constructor is "bad practice". Class-based React components often use the constructor to e.g. initialize state, bind callbacks (like event handlers) to the current instance, etc. Until class properties are supported natively, these are legitimate uses. &gt; babel sometimes broke on super, when one of it's transformations created statements before the super line I've never seen or heard or heard of this. I assume it's an edge case, and not really prevalent enough to impact API decisions for another framework. :)
I think that’s the proposal? Unclear
There is indeed "space". Are you running it in node? Through Babel? Native in a browser? Something else? Which version? The answer will be different based on how you answer those questions. There is no single algorithm. It's either transpiled, directly interpreted, or compiled in some way so it all depends. If you benchmark it, it only applies to your specific situation and build pattern, and probably even the way you set up your tests since different implementations will take different shortcuts at pretty much every step of the process. Just because you don't like / understand an answer doesn't mean it's not contributing
And you can leverage web _skillsets_ (as in, JS and CSS skills) without making everything the web. See React Native, for instance. I'm not looking for a drop-in replacement for Electron, I think Electron's a terrible idea in quite a few ways (but that's my opinion, and not really the point). Maybe Electron-alike is a better phrase than Electron-lite. I was actually envisioning a more complete solution for building desktop apps than Electron (e.g. with a built-in or supported JS framework that either calls/creates native widgets (the React Native, wxWidgets approach) or is backed by its own rendering stack (the Qt, Flutter approach)).
Hello. You say, that &gt;the legacy context API still works and will continue to work throughout *at least* this major release And in the other reply, you mention &gt;I hope this change wasn't your blocker to React 16 migration Not this change in particular, no. But while I was researching this issue and other changes to React 16, it became my understanding, that the old context API is now less stable and more prone to breakage. I'm sorry, but I cannot pinpoint you to what exactly made me think that. Anyway, it was obvious, that your team did not care for the old context anymore. We still had hopes, that it won't affect us much, but didn't get to testing before the new API rolled out. And as it is a way forward, we had to consider moving to it, which became impossible for us due to it's limitations and cumbersome implementation. /[u/acemarke](/user/acemarke) is right in interpreting my meaning. Previously, you set something in parent to consume it later in a distant child. Now you either have to pass around `Context.Consumer`, which is exactly what we were trying to avoid using context, or have to describe context in a shared file, which adds more code that does not do more things. In reality, it does less, as you cannot read from this context in lifecycle hooks without some nasty workarounds with HOC and nesting. This makes contexts harder to use, limits their usefulness and requires a big rewrite if you used it extensively \(for example, our global Flux objects is passed through the context\). Again, my one and only use\-case for context is to pass props through many layers to distant children and consume them on demand, and ignore them if I don't need them in other children. New API allows it in an inconvinient way. &gt;We have 50,000 components at Facebook You also have a **bunch** of employees and first\-hand understanding of how to do React and Flux. We had to learn as we go, and still have a big part of our project that is in legacy state. We can't rely on automated migration either, for this and other reasons. When you say that we can keep using methods with unsafe prefix, you are right. But that only increases our technical debt. We still have to go throw each component and migrate it at some point, postponing it does nothing. And between all these changes migration to React 16 turns into a full rewrite. &gt;We realize this aspect of getDerivedStateFromProps can be inconvenient in some cases. But it lets React better utilize the memory in the future But how does it help React when instead of using a class variable \(e.g. `this._myData`\) I have to store it in state? Isn't state supposed to have only things that cause a new render? Isn't state supposed to be as plain as possible so it's easier to determine a need to rerender? We made a rule to set only, let's say, render consitions in state, and everything else — outside, in class variables. This makes a very plain and simple state, enough to make render happen and track changes, but not overloaded by some ancillary data used in render. New static method throughs all this separation into a window. &gt; our usage becomes representative of the larger codebases I'll be honest, I didn't inspect the whole Facebook for usages of React, neither do I have access to any private pages, obviously. What I did see, was widget\-like approach to creating pages with React, where interactive React components saturated otherwise content pages. Our system is based entirely on React. Each page is wholly contained within one React component \(except for portals\). I feel like our approach is not as common as yours. It does not allow us to go stateless, for example, and it means that our React tree is huge, hence why we need context to skip a few levels when passing props. &gt;I recently did a talk I'll check it out, thanks! &gt;Overall, I’m really sorry you’re having a negative experience. I hope that my arguments somewhat explain the context behind these decisions but I understand if you choose to disagree. I thank you for your time. You and your teammate made me hopeful, honestly. I really like React, and I prefer it over Vue, our other rendering framework in use. \(Though Vue has a nice separation between props and events\) It's just that those changes attack our codebase very aggressively. And while your intentions to make faster and safer framework are beyond reasonable, I personally feel left out with my decisions about my code. Because I didn't produce that bad code you are trying to prevent, and yet got punished anyway.
Node already exposes low-level networking stuff which allows Websocket support to be built, such as the popular [ws library](https://github.com/websockets/ws). The proposal is about adding websocket implementation code into Node.js's core libraries.
&gt; I've never seen or heard or heard of this. I think it was for some obscure IE problem, that IE9 and beyond had. Common case, really, but not important anymore. &gt; but I disagree that using the constructor is "bad practice" And yet it is not recommended to do a lot of inheritance between component classes, or at least it's been frowned upon for some time after they were introduced. HOCs are proposed instead.
Why are we calling this object spreading? That's not what it's called. It's destructuring assignment. Literally not the same thing at all.
How is Micropython different from this approach?
Lol, I thought the login was the page. Whoops!
It uses images (i.e. [this](https://github.com/twitter/twemoji/blob/gh-pages/72x72/1f600.png)) for the emojis. The alt is the fallback option in case the image doesn't load. The fallback uses whatever emoji the browser is using, so if the browser doesn't support the emoji then the fallback will just load a square. &gt; Does that work across all browsers? It will work across all browsers because it just loads an image. 
Idk was pretty much instant for me.
Ah I see what you mean. Yeah, that's definitely an underserved gap right now.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [twitter/twemoji/.../**1f600.png** (gh-pages → 5d9e3dc)](https://github.com/twitter/twemoji/blob/5d9e3dcfae4e8d96cf91d6440a861d713c525fcf/72x72/1f600.png) ---- 
I've added more agressie caching and also reduced the size of the images. Hope it helps. Still looking into reducing the scripts size. 
I've reduced the size slightly by optimizing the images and added more agressie caching. Still pretty big size though. Going to look into the scripts now. 
Cool, thanks! Definitely will add this one to the list after some playing around with it! 
New in react 16.3 all a passed up components also get sent to fb servers
I realize how it works, I was just surprised you could copy-paste those images without some JS magic being involved. I had no idea the alt attribute worked like this.
Use of the constructor is kind of orthogonal to inheritance. (You're still extending `React.Component` even if you don't define your own explicit constructor.) I think that preferring compositional patterns like HOCs over inheritance is something the entire React team would agree with you on.
Beautifully done, thanks.
Nice article with simple examples. Some comments: In 2.3.1, `[a-z]*` would also match the end of T**he**. In 2.3.3, there's no need to wrap T, `T?he` is the same as `[T]?he`. In 2.5 the example could be better, as `[cgp]ar` is faster than `(c|g|p)ar`. () usually contain groups of characters, e.g. `(com|org|nu)`. For single characters [] is faster. In 4.1, 4.2 (and others following) the link for testing displays a different regexp (`[T|t]` instead of `(T|t)`). In 5.2, unnecessary () unless you want the `at` group match. Same in 5.3 &amp; 6.
Yeah this argument people are using that people shouldn't be surprised doesn't make any sense. Do people's grandparents deserve to be taken advantage of by fake IRS or fake Microsoft calls because they aren't savvy?
The comma breaks your link.
&gt; You're sacrificing speed for low memory Do you actually have anything backing this up? By which I mean, any performance metrics for JerryScript that show that V8 is so much better (on similar hardware) that it's *almost certainly* a better choice to go with a larger executable and far larger memory footprint for applications that aren't doing anything computationally intensive
Steven Grider does excellent series on Udemy. So does Anthony Alicea and Maximilian Schwarzmüller.
&gt; I was researching this issue and other changes to React 16, it became my understanding, that the old context API is now less stable and more prone to breakage. This is not the case. Aside from the `nextContext` argument change, there were no known changes to the context API semantics in React 16. &gt;Anyway, it was obvious, that your team did not care for the old context anymore. I’m afraid this is also a misrepresentation of what we said or did. We cared a great deal about supporting old context in React 16 and went to great lengths to keep it working the same way even though we changed the internal implementation. (If you’re curious, Sophie wrote a post about how we did this: https://code.facebook.com/posts/1716776591680069/react-16-a-look-inside-an-api-compatible-rewrite-of-our-frontend-ui-library/.) Just like you, we heavily use context in our products, and if it broke, it would be a big issue for many teams at Facebook. &gt;but didn't get to testing before the new API rolled out The new context API is *not* rolled out yet (it’s new to React 16.3), and it was *not* in the React 16 release you are referring to. React 16 supports the existing context API. React 16.3 will support both new and old context API. If you have concerns about the new API or some use cases it doesn’t support, we’d love to discuss that on our issue tracker. &gt;or have to describe context in a shared file, which adds more code that does not do more things I’m struggling to understand why adding a single line to a shared file is a problem. To give you context into _why_ it works this way: previously we encountered a different problem. Different teams would use the same names for context variables, and that produced clashes. This is also a problem in the open source world where conflicts are inevitable. Making context declarations explicit (and then imported as necessary) is a one-line fix to a problem that existed for a long time. I hope you can see it’s not just there to make your life harder. But again, feel free to put the context on a global if that seems easier. The old context effectively worked like a global so it wouldn’t be worse than the architecture you relied on. I understand that coming from the old API, it *feels* like more work. But I hope you can also see that the existing design wasn’t a very good one, and using a single string namespace across the whole tree is bound to create problems as the app grows. You’re lucky if you haven’t run into them yet. &gt;New API allows it in an inconvinient way. Do I understand correctly that the only inconvenience is creating a file where you add a single line, and then importing that value when you want to use context? &gt;We can't rely on automated migration either, for this and other reasons. This is vague so it’s hard for me to suggest anything. What is preventing you from running an automated script on your source files? &gt;Isn't state supposed to be as plain as possible so it's easier to determine a need to rerender? [...] New static method throughs all this separation into a window. The `getDerivedStateFromProps` hook runs just before rendering so in a way it _is_ used in render. Again, I see your point very well (we’ve discussed this for weeks), but our recommendations are also evolving as we work on a library. This is one of the cases where we decided to adjust our recommendations for a relatively uncommon use case. If you use `componentWillReceiveProps` very often this may indicate you’re unnecessary relying on syncing state instead of lifting it up. But it’s hard to say without seeing some code examples. &gt;Our system is based entirely on React. Each page is wholly contained within one React component (except for portals). I feel like our approach is not as common as yours. We have many full-page React applications that aren’t part of the main product, but are heavily used by Sales/Legal/Ads etc. Even the public-facing Ads Manager is fully built with React. So we’re exposed to the issues large enterprise-grade single-page apps face too. &gt;It does not allow us to go stateless, for example, and it means that our React tree is huge, hence why we need context to skip a few levels when passing props. We also heavily use component state and context. The recommendation to “use stateless components eveywhere” was never coming from the React team. &gt;I personally feel left out with my decisions about my code. Because I didn't produce that bad code you are trying to prevent, and yet got punished anyway. I understand change is frustrating. We did our best to minimize it, and provide a gradual migration strategy. I still believe that if we could do it at Facebook (without effort from product developers) by running a few automated scripts, so can you. It would be great if we never had to make changes that disrupt our users. But as somebody said “if you don’t like change, you’ll like irrelevance even less”. React always faces a lot of competition, both inside and outside of Facebook. We think the next wave of UI libraries will utilize asynchronous rendering and compilation, and in order for React to stay relevant, we need to prepare our users for that shift. Getting to keep most of your code and slowly migrating to change a few unsafe methods to better patterns seems better than rewriting an app because another library captured that niche.
That’s better. I assume you ran the scripts through something like Uglify? 
And if your functions are curried, things get even better: const result = foo('foo', bar(1,2,3, baz('option', 'option2', 1))) const result = 1 |&gt; baz('option', 'option2') |&gt; bar(1,2,3) |&gt; foo('foo')
promises did not come until es6, right?
If you want a jsperf comparison running it in a browser after it's been transpiled by Babel, then Google it: https://jsperf.com/object-spread-vs-assignment It's not that hard. The environment and tools will yield different results. That's how JavaScript works.
Great! I haven't fixed the scripts yet just the image and caching of the pages. I will see what I can do about 'minimizing' the JS, not sure how I'm gonna do it using wordpress and all.
Have you ever considered using something else other than Wordpress?
&gt; That's how JavaScript works. Thanks, the question was directed at OP..I'm sure you will be able to teach me so much about javascript that I don't already know lmao come on man, do you know who you are talking to?
I'm thinking about rolling my own basic blog some day when I've got some spare time to code it. You got any other tips? 
Even going down to machine code I don't see how could that be possible outside stack frames. Heap is overwritten on updates.
Now that is also something I’ve been meaning to do to. Minimise JS, CSS, and consider a CDN for images. But also take into consideration the mobile users and their data, they’ll be mad if they have to download huge images. 
Ahh my bad. I've been humbled
Maybe your point is that OP's logic is flawed, but the use of Vue by Chinese developers has a lot to do with the fact that Vue's documentation has long been available in Chinese, not because it's being maintained by a Chinese person or organization, which is a bit different than when people choose React or Angular *because* it is maintained by a big company. I don't think OP's logic makes much sense either, but I do see a difference in saying "I don't want to use this product because it is being made by a bad company" VS "I don't want to use this product because bad companies use this product".
Interesting. Maybe it's just my browser (Mobile Safari)
Variable or plain js object - no. You can implement such things using Proxy https://developers.google.com/web/updates/2016/02/es2015-proxies
&gt; Are we on alternative facts now? Their first recipe on how to set the initial state is to use class fields stage 3 proposal. They simply used class properties for brevity within the article. New features DO NOT require them, which is what your first post was suggesting. &gt; And that is indeed a code smell and a bad practice to implement a constructor in subclass just to set initial state. Which is what `getDerivedStateFromProps` is trying to solve. You should no longer need to set state in the constructor (or with class properties). &gt; React 16 makes it impossible to upgrade to it. What exactly about it? We've migrated entire codebases to 16 without much effort. Just some bug fixes here and there. &gt; I wish I could adapt, but React team forces a full rewrite of our project just to keep updated. Neither me, nor my team, nor my firm are ready to do full rewrites every time a group of guys at Facebook decide to drop support for something crucial. But they don't require a full rewrite. Yes it's new APIs, but the old APIs are still going to be around for a while, and even longer using polyfills. Just leave old code with the old implementation until it's refactored/replaced/whatever. No need to update legacy code to newer APIs. We have React 14 style approaches in our codebase, which still work just fine. Sure we want to upgrade them, but it's really not necessary if it still works fine.
The whole debate is silly, both frameworks have a lot in common, and they both have strengths and weaknesses. Vue wasn't created to be a React-competitor and try to dominate the market (Evan You has said this explicitly many times), it was created to be a nice framework to use (which I think is true of all of the frameworks).
Im dense today. Please expand on what you mean.
https://github.com/angular/angular/issues/21706#issuecomment-374966121
Yeah that thing is sketch. I'll edit it to be safe, thanks for the heads up!
Some built in functions can use spreads as well. arr = [6,5,4,7,6,8,9,2,1] console.log( Math.min(...arr) ) //1
If you want to conditionally define a constant variable you can't define the variable outside of an if statement and set it inside so that you may use it in the rest of your function. If you define a constant variable inside an if block you can't use it outside of the if block. Using a ternary operator to assign a constant variable retains the original scope. Using array destructruring allows you to set multiple variables with the same conditional. Keep it DRY
&gt; There is a significant amount of time dedicated on using File Explorer. &gt; Despite every programmer is using Microsoft Internet Explorer (Microsoft Edge is not yet widely adopted), 80% of the participants also use Google Chrome and dedicate more time on it than on Internet Explorer. This isn't an "interesting finding" so much as a "here are the biases in the participants of this study". Many developers I know spend much more time in a terminal than they ever spend in File Explorer.
No problem. I also checked and it works for me now too.
Hi /u/AllthingsLighter, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/elyofive5, For javascript help, please visit /r/LearnJavascript. Thank you!
&gt; They don’t know how these kinds of things work. Then isn't it their responsibility to read the terms of service and understand how the platforms they are one work? I am all for more transparency but I don't want to limit the onus of the user of the internet to be the judge on if something is truthful or "good". I don't see how that is elitism.
Nice! It took forever and will be forever before we can use this, but I'm excited, nonetheless.
I don't have anything against pipeline operator, but to answer your question: the reason for avoiding is the same for avoiding anything in stage 1, i.e. it's not anywhere close to being guaranteed to land in the actual ecmascript spec. In the specific case of pipeline operator, the proposal was first proposed in Nov 2015 and it's still at stage 1 after nearly 3 years. Compare to [numeric separators](https://github.com/tc39/proposal-numeric-separator), which was proposed in apr 2017 and is currently at stage 3. Now, you may not care about having your language variant to be fully backed by a spec, and this is a decision that e.g. React people make all the time wrt JSX, but if you're going to make that decision be aware of the monumental amount of effort that was put into making tooling work for JSX and that this same level of commitment from the OSS community is not nearly as likely to also happen for other random stage 1 features. So, for example, it's possible that you might run into some issue w/ flow or eslint or some other static analysis tool or some source map bug or some VSCode wrong warning or who knows what, and you'd be on your own to figure it out, whereas using standard JS would likely not pose a problem (this is known as the "happy path")
Innnnnteresting... How about this? let obj = Object.freeze({ x: 10, //these becomes your 'const' vars y:12 }) if(1){ console.log(obj.y) //12 }
Same, plus I'm on some middle of nowhere internet.
That seems like more of a workaround than an ideal solution. But it's readable and that's all that matters 
Most of the people doing AIR are active in the "[Starling](https://forum.starling-framework.org/)" forum, as it's the most widely used Stage3D framework. You'll see it is actually quite an active community. Adobe has said it's still very invested in AIR, and they roll out updates pretty often. 
The vast majority of developers still run Windows as the vast majority of development is still for Windows Desktops and to lesser extent Window Servers.
I would argue that the vast majority of development is for web applications which are OS agnostic.
Does this include support for web workers ? Support for promises isn't necessary though I would need to modify the execution path slightly to add support for this in hamsters.js..support for workers would be great
Javascript provides the websocket support. Javascript can connect to and use the entire websocket API and presumably Node is limited to the same, neither of which can or ever will be able to host WS servers. So by adding it to Node's core libraries what would you be doing other than wrapping the default WS JS implementation for no reason?
Fair enough, considering that Chrome has almost 60% of the browser market share now. Windows still holds the market share for desktop installations, but desktop applications are becoming extinct for sure.
I've never seen object freeze before so I'm going to have to look into it more but ya seriously as long as it works and is readable most of the time you're good 
Excuse my ignorance, but doesn't the ws library that the guy you responded to linked, implement WS server functionality? Or am I being a nimwit?
R.pipe(baz, bar, foo)(1)
Ah sorry this was actually intended for sNor who I believe was saying the 16.3 implementation was an anti pattern!
Are you talking about the emojis in the alt attribute? Those are just regular UTF characters. There's nothing different between a 😀 and an 'a' besides how they look
Are you talking about just using JavaScript or with the aid of another tool?
You can always nest your ternary expressions inside each other, I seem to see this in C code a fair a mount: let value = 'c'; const [ first, second, third ] = (value == 'a') ? [1,2,3] : (value == 'b') ? [4,5,6] : (value == 'c') ? [7,8,9] : [10,11,12] ; console.log(first, second, third); // 7, 8, 9
yup, we use ramda at work.
Nicely spotted, looks like you're correct: https://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects
The Websocket API is for web browsers, it's not a native part of JavaScript.
Why do people feel strongly about this 1 way or another? Doesn't adding it just remove the necessary steps of "npm install ws" or something and that's it?
I don’t believe Websocket should live within Node core. It’s perfectly apt in userland code and isn’t used in a large enough ratio of node projects to warrant inclusion. 
Javascript in the browser has WebSockets. Not in Node, which runs on the server. 
There appear to be a number of people in this thread that are confusing a single page application with having a single route. I'd argue that a SPA would be a great way to build forum type functionality. It would also be interesting to implement it as a PWA. You'd be somewhat on the bleeding edge of mobile technology, and unable to serve Apple users in the short term, but you'd be positioned to have an app that could be used in offline mode and sending push notifications with relatively minimal overhead.
SEO has improved a good bit with SPAs. Google in particular is pretty good about scraping data from them.
Thanks, I appreciate you bringing out the concerns here too! It’s just a bit hard to find them here, and usually it’s nice to be able to address them before blog posts and releases.
Angular might be overkill but the CLI really makes that pretty irrelevant. Having it generate my HTML, SASS, TS, and test files and update a module makes it insanely simple. 
Yes.
&gt; Javascript can connect to and use the entire websocket API and presumably Node is limited to the same, neither of which can or ever will be able to host WS servers Huh? If node was limited by browser functionality then how do you think `fs` etc is implemented? No, no, no. There are host bindings and such.
Jest all day for unit and even integration testing for both server and client testing. For backend testing I'm frequently swapping between Jest and Mocha/Chai/Sinon and my tests are much quicker to write in Jest with less code and fewer surprises. Cucumber I'm not a fan of due to the amount of setup it takes to write test. I feel like you're writing a testing framework in order to write tests. I've been using CodeceptJS lately for integration/ete testing and much prefer it due to it being mostly backend agnostic and simple to use.
Got a citation for that? 
Of course it does sucker
http://gs.statcounter.com/os-market-share/desktop/worldwide/#monthly-201712-201712-bar Windows is still king of the desktop with 82.56% of the market share.
The vast majority of development is for windows desktop and to a lesser extent windows server is not the same claim as OS market share. 
You are kidding right. You do realize that if 82% of the market share is still Windows desktop, then most development is still occurring for the leader of the desktop market share........ Well, after web development that is. I have capitulated that web development is the new king of the market.
The file comes from a POST request to that same URL. Read on [sending form data](https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data) The body of the post request will also include file_type, field, and contracts.
It's very doable to write an object wrapper where you can, say, console.log(myThing.name); // Ryan console.log(myThing.history[name][1]); // Jim
I don't get it, what are you expecting people to click on there? (also note that "Asingment" is misspelled everywhere)
&gt;and they told you they'll receive a big investment round in 2 months, and they need you a lot because they have a lot of work to do and it's a great opportunity for you etc, Not hard at all if they are looking for that next big investment and have a shit ton of work that needs to be done, then they are fucking broke. Startups are a crap shoot. They are always going to be risky to join. If you like that sort of thing, then bounce around and find one that takes off. If you want job security, then don't go to work for a startup.
No, I’m referring to libraries not included in the Node core as userland. 
Pretty strange way to put it. Userland / userspace generally refers to code that runs on top of an OS kernel. 
lol, that's true! I don't want to risk that I just want to work freelancing for them to make an extra money
Yes you are correct!
1 - Ask to chat with some of the engineers. This can be done under the pretext of getting to know the team, and you can get a good idea of work/life balance, etc. If it's an early stage startup, by talking about what they're working on (and assuming they explained what the company is all about), it should be somewhat easy to tell whether the work is calculated progress (i.e. does it make sense), aimless churn (i.e. no idea how it ties into monetization) or desperation daze (too busy with looming deadlines to question the big picture). 2 - Ask what's their current runway. If they said there's a round coming, from who? What does revenue look like, revenue growth rate, etc. Ask about number of employees and past rounds. Basically, it should be clear with a back-of-napkin calculation that they have more than enough budget and/or growth velocity to afford to pay you for 2 years. A simple way to roughly estimate is `estimatedRunway = moneyRaisedToDate / (numEmployees*averageSalary)`. If they have &lt;1yr runway, there's a very high chance it's a sinking ship, or at best, that it won't grow enough to multiply the value of the equity to make it worth the risk. 3 - Ask what type of equity they are offering. Stock options are something you might not be able to afford to exercise if the company does in fact go big. Also, think for yourself whether you would see this company ever going public at any valuation (i.e. how unicorn-ish is it, is it too niche, what do competitors look like in terms of the stock market, etc). The less likely you think it is that the company will ever IPO, the less you should pay attention to equity talk and the harder you should negotiate for higher cash compensation.
I mean we are just now finding out that the major VPN networks are leaking ip’s so what are we supposed to do? Our perceptions of things are constantly changing as we learn more and more. The internet itself is still new. These business models are even newer. 
AMAZING analysis, thanks a lot for this insight!!!
When I checked a few months ago they were significantly slower, but I'm fairly sure it's just because most engines haven't spent a fraction of the time optimizing ES compilation. It could have changed recently, I know both v8 and SpiderMonkey have made great strides in speeding up a lot of the lower hanging fruit with the newer ES features. For now I tend to avoid spread and rest in hot functions but use it liberally everywhere else. 
How much is the performance drawback? Is there a measure or statistics about it? Or is it as smooth as raw CSS? 
They're not totally wrong. But definitely way overestimating. Data collection through Javascript is only like 0.001% of the performance hit on a website. For real. It's like a single Javascript object sent on events.
Like everyone is saying, this is a general problem of state management which has been around for a while. You should read up on the history of React/Flux/Redux and best practices (https://redux.js.org/faq/code-structure) also look into stuff like immutablejs. People usually employ Observables (aka "reactive") and/or single source of truth with unidirectional data flow. For example, people use RxJs and Redux together and separately. Observables/EventEmitter-based approaches can get tricky to debug/test/reason about. Even within these approaches there are lots of different patterns which have different tradeoffs, so what is the "right way", if there is such a thing, depends on the application. 
hell yes. this looks great, will definitely use this for something soon.