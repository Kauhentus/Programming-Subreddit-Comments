Actually wasm has nothing to do with Javascript but is its own technology that runs in the browser alongside JS and they can post messages between each other. Now assembly language is a very low-level set of instructions for the CPU that runs super fast but it's also insecure because it could potentially access memory that it's not supposed to. The web people decided that they want a piece of the cake and built a sandboxed environment with the same concepts in the browser, having the same benefits but additionally being memory safe and offering ways to interact with the browser apis. In theory you could compile any language to wasm and there are [many compiler backends in development](https://github.com/appcypher/awesome-wasm-langs) and also implementations of wasm outside of the browser, for example in [blockchains](https://github.com/ewasm/design)
Very awesome business and designs!
Not an expert, so someone will correct what I get wrong, but here’s a oversimplified explanation. WebAssembly is essentially its own language, but you don’t write it directly. You write in Rust, C, or C++ and compile to WebAssembly. Then, your JavaScript can interact with your WASM code. So if you’re goal is to just avoid writing anything other than JavaScript, WebAssembly won’t help you. Looks like you can use TypeScript, though, via AssemblyScript.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/learnjavascript] [\[Beginner\] Return from a for loop but keep loop running](https://www.reddit.com/r/learnjavascript/comments/bjablf/beginner_return_from_a_for_loop_but_keep_loop/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
kind of confused as to what you're asking. If I'm interpreting correctly, do you want the items to constantly receive new rotation values? I think think just depends more on how after Adobe runs the JavaScript. Is that code being called on every frame? Concurrently? I think you'd have to refer to the Adobe Animate scripting API which I'm not familiar with—this is probably a good question for stack overflow/whatever site stack exchange has for video editing questions as it seems that while the code may be in JavaScript it's not so much a question about JavaScript but how to use an Adobe API
What are you trying to do exactly? There’s a few odd things about your for loop and without context it’s a bit hard to understand what the outcome should be here.
do you want this for loop to run every 0.01 seconds or something? if that is the case put your look into using setInterval
This loop only gets called once, I’ve got about 10+ layers and want each layer to get its own random rotation value. I have a separate function that updates every frame that will then use this number.
This loop only gets called once, I’ve got about 10+ layers and want each layer to get its own random rotation value. I have a separate function that updates every frame that will then use this number.
If by triple A game, you mean a bad game like most triple A games released recently, I'd say you can do even better and release a fun game! &amp;#x200B; Seriously though, this is a weird way to refer to a big budget game. I think if you want to work on a web game with a large team you will want to look into typescript to make things easier for collaboration.
I have a separate function that runs every frame. Basically what I’m looking for is a way to fill an array with about 10 variables with 10 different random numbers.
Basically what I’m looking for is a way to fill an array with about 10 variables with 10 different random numbers.
Still don't understand what you're asking. So you want the for loop to set a randomized desired rotation value for each item _once_ at the _beginning_. I understand that. But what does that other function, the one called on every frame, do with those randomized values? Are you trying to "tween" the item's rotations so that on each successive frame, the item's rotation gets incrementally closer to that the "desired" rotation from its initial rotation? Or are you trying to, on each frame, rotate the item by that randomized value.
Ah. for (i = 0; i &lt;= 10; i++) { randomRotation[i] = random(-100, 100); } Does this make sense? Basically we’re running the for loop until i Equals or is greater than 10, then we’re just filling the indexes of the array with the result of the number generated from your random function on each loop. Filling each index in order as the loop runs.
“Or are you trying to, on each frame, rotate the item by that randomized value.” This, I have all my animation working, basically it floats off screen with a slight rotation I want to randomise this rotation value to help give the animation more variation. Once I’ve figured this out I’ll probably do it to the speed of the movement to.
"... Alternative to GitHub UI"
That is kinda what I have, but my animation isn’t updating as I think the variable is out of scope?
I’m not sure how you’re using the array in the end, but as long as you’ve defined the variable before the for loop, it should fill up when it hits the for loop. Then you can use it in whatever else you need. Add: console.log(randomRotatiom); After your for loop and see what it outputs
 function random(min, max) { return Math.floor(Math.random()*(max-min+1)+min); } var box = [1, 2, 3]; var randomRotation = new Array(box.length).fill(null).map(function(_, index) { // You aren't doing anything with value or index, but you have access to them here return random(-100, 100); }); //randomRotation will be an array of 3 integers between -100 and 100 There are several ways you can achieve what you want, but in my opinion, the above is most straight forward. Note, you could have called map on box itself, but in my personal opinion, if you don't actually need to access the variables inside of box, then you can make that explicit by instantiating a new array with the length of box. Calling `#fill` on the instantiated Array returns an array literal (so it would be the same thing as `[null, null, null]`) so that you can call `Array#map` on it. The reason you can call `return` here, but not in a for loop, is because the above example is using a closure, and you are only returning a value from the closure be used by `Array#map`. In a for loop, you are never leaving the current scope, and so when you `return`, you are quite literally returning out of the current scope and returning a value to the outer scope (if you called this on `window`, you should get an error).
Another user solve it I just had my =&gt; the wrong way round. Works perfectly now.
Yeah that was another issue too... but why run your loop backwards?
I just had my &gt;= the wrong way round lol, works now. Thank you for the help.
```javascript for (let i = 0; i &lt; items.length; i++) { items[i].rotation += random(-100, 100); } ``` This is going to make your items spin around like they're having a seizure—all glitched looking, because what you're asking is rotate each item up to about 1/3rd of the way arround direction, 24 to 60 times per second (depending on what your FPS is)
No problem. I was actually about to say, I didn't see anything wrong with your implementation (I missed that mistake), but figured you may want to know more about how `return` works
It must be because I’m subscribed to various JS/reactjs subs. I thought they were all coming to javascript. Apologies, I’ll just block them.
It's backwards because I'm learning and it worked so thought it was fine lol.
I've had my eye on [PlayCanvas](https://playcanvas.com/) for the longest time. I haven't used it myself but the demos and examples are impressive. Particularly the [RoboStorm](https://robostorm.io/) demo. Not really a AAA style game but there was also a walkthrough recently posted that for [How to Build a Multiplayer ".io" style game](https://victorzhou.com/blog/build-an-io-game-part-1/) on here which looked promising. It's also fun to remix the glitch games, particularly the [browser-quest glitch](https://glitch.com/games) to customize how you want.
Yup you can use other languages. Like you said seems like most triple AAA game devs use C++
Whoosh. You didn't create an app you created an alternative UI.
Thanks I just had the numbers set high to make sure it was working, final number is in the single digits.
If it works, it works! Nothing wrong with it other than I just prefer to keep things positive for simplicities sake.
\`\`\` "use strict"; &amp;#x200B; var randomGenerator = { \[Symbol.iterator\]: function() { return { next: function() { return { value: Math.random() }; } }; } }; &amp;#x200B; // put this one inside the function you said it gets updated each frame // now no matter how many layers you have you will get a random number each // time function getRandom() { for (let rand of randomGenerator) return rand; } \`\`\`
Literally, no. If you mean indie game and typescript then yes
If anyone that comes here is merely interested in JavaScript games, check out phaser.io - they’ve made JS versions of many arcade classics, and the engine is really easy to use. [phaser.io](https://www.phaser.io)
The Binding of Isaac started as a Flash game. No reason who something in Javascript couldn't be as successful.
Yeah, it's a little surprising, which is what makes it probably too fancy. You'd want to have a very good reason to be using it, to weigh up against the fact that almost every single person reading it later will be like "hmm, does that run at definition or on call?" and then to also have to go and see what it does.
Wtf this is amazing
Filled with aimbots
https://javascript.info/
W3Schools is good, but perhaps the best way to learn programming is through a project that you build from the ground up, using freely available code as needed. Think of a problem you might want to solve with a computer, then dedicate some time each day until you have written a program that solves the problem. &amp;#x200B; By the way, I recommend you start learning Python. While JavaScript is still a good language, there are quirks that are easy to work around but are still frustrating and easily confusing. Python, like JavaScript, is very easy to learn and has a wide community of developers. This wide community means that like JavaScript, there are many resources you can turn to for assistance - such as [StackOverflow.com](https://StackOverflow.com). Also, the community has developed a lot of Python "modules" that can reduce the amount of coding time needed to create a program, and - in some cases - are more efficient than code you write on your own.
Have you ever made a game before? maybe start off making something small to get an idea of how hard something like your idea would be
Good bot
Is this old? I think I been using contexts before on GitHub. If new changes arrive I’m able to see those changes only.
freecodecamp is phenomenal. It walks through standard Javascript stuff, and even has a separate section for ES6 concepts like let vs var, arrow functions etc. There’s also a ton of other web dev stuff like HTML, CSS, React.js.
wow, I'm surprised at how smooth that game was. best game I've seen on a browser so far
I really wish they’d stop teaching people jquery. It just makes learning the language harder. I would suggest focusing on vanilla JS. Wes Bos has a great 30 days of JS course that is free and very thorough with lots of different projects to do every day.
I actually dislike the prescribed structure of VueJS models. I find it's really verbose and "noisy". When I use VueJS, I prefer to use TypeScript with the vue-class-component decorator: https://github.com/vuejs/vue-class-component. I find the view models to be a lot more readable when written this way. But this requires additional configuration to make work.
You dont know js, by Getify https://github.com/getify/You-Dont-Know-JS
Yeah, its great and all, but literally everyone is running an aimbot. &amp;#x200B; [https://github.com/MrCoderN/krunker.io-hack-cheat-mod](https://github.com/MrCoderN/krunker.io-hack-cheat-mod) [https://github.com/wallopthecat/Krunker-hack](https://github.com/wallopthecat/Krunker-hack) &amp;#x200B; We need more techniques to avoid this.
Seriously the best thing to do is just build... you'll always look for good tutorials but just program and learn from your mistakes. The design patterns come with time. I would recommend not learning JQuery... nobody uses that anymore. YouTube videos are brilliant - there are more JS tutorials than you can watch in your lifetime.
A developer site without https in 2019... come on man
I would argue here that it is actually an app. It's a single page application that uses external API, shows UI and provides user experience for managing pull requests.
Well, then I'll suggest to read the why section. I did actually solved problems that I have with GitHub's UI.
Agree that the title was poorly phrased. Updated it.
It is not clear to me what "new" means. I mean how GitHub knows that something is seen or not. Also I may see something but I may want to leave it unseen/unread.
Yes I know. Coming soon :)
This is insanely helpful. I'm definitely someone who needs to get the whole picture when it comes to these languages. 👍
I did find out confusing. As someone who didn't have the fundamentals down going in, I found trying to learn two ways of doing something made it harder.
I have tried other languages like C and C++ prior to enrolling in college with no success. I'm getting into web design so the object oriented isn't my focus. For the time being at least. I used W3 for HTML and CSS but those are very easy to write in my opinion. StackOverflow has definitely saved me before but a lot of times it feels like programmers writing to programmers and I'm afraid that can even confuse me at this point haha.
I advice to create your own project. Practice is the best teacher :)
You're right. I really don't like that you are... But you are. That's how I learned CSS and HTML and I'm fairly confident with those. Your link was very helpful and will definitely give me a good start though.
Technically you can kinda use Unity with JS- it's not \*real\* js, export it to web GL , etc
I'm glad I could help you. You may ask if something will be incomprehensible. 🖖
Those "bad" games at least don't run at 5fps while being potentially capped at 60fps though.
Sure, but it's intellectually dishonest.
Have you tried Google's advice? [https://support.google.com/webmasters/topic/4564315?hl=en&amp;ref\_topic=4581229](https://support.google.com/webmasters/topic/4564315?hl=en&amp;ref_topic=4581229) &amp;#x200B; Also make sure client's haven't sabotaged themselves. Sometimes clients have multiple listings with conflicting info. Or they will have old unused websites still online. Use and link social media accounts can help. Bonus if they have reviews posted and engage with comments.
Yes, checkout BabylonJS.
Interesting ideas and thanks for sharing ✌️ Small typo in here: “The interesting moment here is that some of the some of the endpoints are in a preview mode.”
I simply can't find any reason to use Vue over React. So other than some freelance work I pick up occasionally (I have full time job too). When I do I go full JSX with Vue I don't really like having additional abstractions over render method and template feels like fluff syntax in addition to flashbacks to AngularJS times. Especially when you're using TypeScript, templates cannot be properly checked before they are compiled. As for state management. Haven't yet had a need for it. But as I see it works in similar fashion as MobX which is also available to React. A lot easier to grasp, but can get messy as the application grows. Immutable state has it's benefits and they become more pronounced as the state becomes bigger and bigger. What I like about React that it feels way more flexible and powerful with functional programming patterns. And Vue does leave an impression of clunky, needlessly opinionated, object oriented / imperative programming similar to that of Laravel / Rails Crud applications MVC stuff. I assume a lot of people like this sense of familiarity, especially ones who come to front-end. What's where in my estimation a lot of "developer experience" claims comes. Now I think, and I had quite a few experiences which led me to believe that this kind of approach to front end is bad.
Upvoted. I love Phaser.io I've built a few games in phaser and i think it's an amazingly simple but powerful framework. Albeit I haven't tried anything too crazy outside of simple 2D "platform" type games. But I'd recommend it to anyone wanting to do some JS while building a game. The learning curve is easy enough curve to pick up fast and build stuff with :)
Hi, both Vue.js and React dev here! I definitely prefer Vuex + Vue over Redux + React. Using mobx eased some of my pain when I'm using React, I wouldn't go Redux on my own unless someone else made the rules. As for the app size, with Vue you're most likely to make a well-performing app if it's bigger. Why? Because people have the option with React not to optimize performance, while Vue handles this on its own. You don't have to use stuff like memo to protect your renders. Also because as you have the option to emit events, you don't have to pass functions down as props where a lot of devs use anonymous functions and create components that re-render in vain. In the end it's not React vs Vue, but Developer vs Developer. It's not that React is bad, it's just that Vue does many things naturally and you don't have to invent the wheel all over. Having said that, I like working with both.
Ironically I was interested until I saw the app's disclaimer that everything is stored in my local browser. Yes, I appreciate that you aren't storing an access token for my account on your server, but since I multi-machine dev on three PCs depending on when/where I am, I need shared context that I can access from any of them. Any thoughts on pushing this beyond an SPA and catering to users like me? Heck, you could probably store context in a Gist or something, since the app already has access to the GitHub API.
I thought this was a good overview, written by Swizec Teller, going from React to Vue b/c of freelancing: [https://medium.com/@swizec/some-thoughts-on-vue-after-deploying-my-first-production-app-e7f3be73ce43](https://medium.com/@swizec/some-thoughts-on-vue-after-deploying-my-first-production-app-e7f3be73ce43) The outlook is pretty bleak, but matches my experience 1:1. Vue's focus is on templates, mutation and OOP, which some people prefer, others don't. Personally i'm with Swizec on this one, React is a simple, elegant paradigm that i much prefer over OOP and older MVC patterns like templates. What Vue definitively has going for itself is VueX, which is great. Though that isn't enough, in React there are more state managers than redux, like mobx, react-easy-state, etc.
Maybe they added it later, but I see links to a [PDF](https://github.com/FrontendMasters/front-end-handbook-2019/raw/master/exports/Front-end%20Developer%20Handbook%202019.pdf) and an [epub](https://github.com/FrontendMasters/front-end-handbook-2019/raw/master/exports/Front-End%20Developer%20Handbook%202019.epub) right there.
If you bundle up the files, any beginner can fix this. I don't quite understand why this site has a javascript part for the amount of data that (apparently) is required at all.
I believe your friend needs to define the type of his script. It should look something like this: &lt;script type="text/javascript" src="js/scripts.js"&gt;&lt;/script&gt; I could be wrong, though. I'm not that experienced. Has he checked if the file path is correct? Why not just move the script into the same folder as the HTML document? Then he would have to write the code as shown below: &lt;script type="text/javascript" src="js/scripts.js"&gt;&lt;/script&gt; I hope I could help.
have to linked the used JS file to html ? if not, just add this line after body tag ends &lt;body&gt; .. some code &lt;/body&gt; &lt;script type="text/javascript" src="[file_name].js"&gt; &lt;/script&gt; mentioned that [file_name].js should be placed in root folder.
Pretty sure the file path in the "src" attribute will be wrong. But we can't see for sure with the information provided.
I checked, the file path is correct.
The Javascript isn't valid. There are multiline strings in the "data" section that are breaking the script.
This looks awesome. Well done!
Sorry, but the "type" doesn't actually matter. That's the default and it'll work fine without it.
That script tag should be just inside the body tag, not outside of it. It'll work your way because browsers are forgiving, but it's not technically valid that way.
Not only will bundling not fix this (because it's a syntax error), but they need Javascript because it's an interactive site with a server-side component.
&gt; no build step [Except web components](https://caniuse.com/#feat=custom-elementsv1) aren't supported in every browser, so...
Oh, I see. You learn something new every day I guess :D.
The problem work managing your state in React, or any view library, is that it ties your logic to your view layer. Sure, they should know what happens when you press a button to open a menu, but it leads to more unmaintainable code when you have logic that belongs to your domain in your view
You can't use \b for your use case, since \b stand for word boundary, and \w is not considered as a word part.
you are that friend right ? pointing out everyone's mistake.😑
There is a clear separation. State has to touch the view in one way or another while presentational state is and must be part of the view. This is why you separate between atomic/presentational components, which just reflect props like a pure-function, and connected/container components, which are bound to global state. // Atomic component const Button = ({ children, ...rest }) =&gt; &lt;button {...rest}&gt;{children}&lt;/button&gt; // Connected component const LoggInButton = ({ id }) =&gt; { const loggedIn = useState(state =&gt; state.users[id].loggedIn) return &lt;Button&gt;{loggedIn ? 'log out' : 'log in'}&lt;/Button&gt; }
To be fair: if you're going to do that you should do the same using yarn; i.e. use \`yarn install --pure-lockfile\` or \`yarn install --frozen-lockfile\`. &amp;#x200B; The convenient alias \*is\* nice, though.
What? but many triple A games are targeted at consoles with unrealistic goals of 4k resolution. Often failing to even reach 60fps targets. the most notable thing about AAA games recently is publishers trying to make excessive profit at the cost of releasing crappy, rushed games. I dont think anybody should be trying to replicate anything reminiscent of what several important AAA publishers are shoveling out right now. I do think developers should aim to have a nice aesthetic in their games, support uncapped framerates, and treat their developer colleagues / employees with respect.
Could you specify which strings you are talking about? Sorry for the dumb question.
We use Aurelia in a project who is a few years old. I'm new in the company and also a new Aurelia developer. Now we go to decide if we should switch from Aurelia to angular. My reasons to switch to angular ( or any other SAP framework) is, that Aurelia seems to be dead and the community is also very small. For me, Aurelia has no benefits towards to angular and the only reason to still use it is backward compatibility to company legacy projects. What do you think? What are the reasons to still use Aurelia in 2019?
Oh, I must have missed that, I saw the inline data array of three entries only.
Would you agree that the business logic for an app should be separated from the view layer? Using react to contain that logic makes it harder to use with multiple platforms. If you use a state management container like redux you are able to separate business logic and data layer from the view layer which provides a nice benefit of being view layer agnostic. I’ve built large apps that just worked across a few platforms, including a cli, because we used redux. If we could have used react to manage state the that would have been impossible for a few of our platforms.
Sure can. Tools exist to help https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/
Hey JavaJSJ! Well, we posted some cool questions about other programming languages; but we'll definitely come back with some more "fundamentals check" for JavaScript! 🤓
I had been extremely surprised how one can make a git frontend in two months! An I would be very sad for my productivity... Now I see in the comments it's just a wrapper for GitHub API... So I'm not so disappointed about my skills..
I always call Vue "convuesed" (confused). It looks like Handlebars. It looks like JSX. It looks like web components. It looks like Angular. It doesn't seem to have any specific way of doing something. To me that just means that, in bigger teams, you'll get developers doing what they prefer. They wouldn't do something wrong, but they'll annoy other developers who prefer something else. A lot of grey areas. In React you'll see that, generally speaking, there isn't much discussion about how to do things. There are wrong ways of doing things, and there are right ways of doing things; little grey areas. I prefer React + Redux + Reselect. Preferably without TypeScript. And my CSS comes from imported SASS files. But you know what? It's all preference. I'd love to give Vue a shot in bigger teams.
Wow! Perfect. Thanks!
Definitely. I learned jquery first just by editing plug ins to do what I wanted but I never really understood what was happening behind the scenes until I used the You Don’t Need Jquery guide and refused to write anything but vanilla for a while.
Sure, BL should be separated from the view always. But that's also possible via context and providers like shown in the article imo. It's declarative yes but the view doesn't always have to mean it lands on the screen. Still prefer redux and redux-like for sure.
Already posted on react sub and dan abramov even replied
4k resolution on console ahahhaahahha. More like 1280x720 stretched onto 4k TV screen.
Of course. And running that on a mobile phone can make it really hot and consume a lot of battery.
As of right now, it's 88% upvoted and the top post on /r/javascript. It introduced me to something new. You should probably go away.
Hi /u/Dolphintrader, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Context is still "the view", though. React is a view library
Hi /u/AchoRyushiHo, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Durton24, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sniffinwiners, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Greg1987, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/cumslutnoah, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/reignleafs, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/splinecharmer, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/WorksHub, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/monstarchief, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/abbrechen93, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/DongerBot5000, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Slackluster, this post is ok, but for next time, please follow the guidelines for "Showing off a Project". Thank you. ---- To show off a project (i.e. a finished or semi-finished page, demo, working example, etc.), please include one (1) of the following: * A link to a project page with unbuilt/unminified source code -- sites like GitHub are perfect for this. * A write-up about the development of the project. This can take the form of a blog post, a `README.md` within the project, or a comment on the post itself. The details are up-to-you; you can write from a high-level about your architectural decisions, or you can write on a lower-level about the pros &amp; cons of specific libraries and frameworks you used. The main point is that you're discussing your code -- or your approach in creating the code -- in some way. * A working codepen/jsfiddle/etc. of the code. One of the easiest and most common ways to satisfy this requirement is to simply include a ["Fork me on GitHub"](https://github.com/blog/273-github-ribbons) ribbon your site. Another way to satisfy this requirement is to comment on the post itself, with either a link to a write-up, or with the write-up as the comment. Lastly, instead of all the above, if you just want to showoff your project, feel free to post it to our weekly _"Showoff Saturday"_ post.
I don't sub to the framework specific subs. Go gatekeep somewhere else please.
Does anyone have a working link of this (mentioned on the page): https://blogs.adobe.com/pdfdevjunkie/files/pdfdevjunkie/PDF_Inside_and_Out.pdf
Who cares. The moderation seem to be completely random anyway.
I wonder if you could merge some of your work with the LitElement wrappers for the [material.io](https://material.io) stuff from Google. [https://github.com/material-components/material-components-web-components](https://github.com/material-components/material-components-web-components) &amp;#x200B; There's some progress there as well for wrapping all of the various HTML/CSS versions with Web Components and thus it seems like natural synergy.
Are hooks really the go-to in every situation, effectively replacing lifecycle methods? I haven't dabbled into hooks quite yet so I'm curious. There are a few instances where the lifecycle methods (mainly componentDidUpdate) trapped me in a series of deep prop comparisons, resulting in a messy build up of code.
Ok, second try. Now it says "Why and how I built my own alternative of the GitHub's UI".
Done. I changed the title to "Why and how I built my own alternative of the GitHub's UI". I can't update the title of this thread tho. &amp;#x200B; P.S. I didn't need alternative of GitHub. I needed alternative of their UI.
How about "Why and how I built my own alternative of the GitHub's UI"?
Thanks. Fixed.
Good idea. For sure I can store some stuff somewhere in the GitHub's ecosystem but the notification system requires a database. However, the entries there are just ids which in theory doesn't have any meaning without the context of a specific repo. I'll think about it.
You should never be sad because of your skills. We are all students one way or another. Two months is a lot of time and I'm pretty sure that one may build GitHub from scratch. Probably with no so many features but the core functionality yes. &amp;#x200B; IGit is a pet project. I also have family and daily job so two months probably mean \~60 hours of work.
This was my feeling starting out with VueJs. It brought back those Angular-like attributes like v-for and v-bind, etc that I'm not entirely a fan of. I like Reacts approach in using JSX over Vue's templating system. Also my setup is identical as I also use Reselect on top of React and Redux. That said, when I deal with a component that connects to many global state variables in the Redux store,I start getting into trouble. Prop comparisons in the componentDidUpdate method are starting to get very convoluted.
I'm not sure what you mean. I admit that the title was misleading. It's set now to "Why and how I built my own alternative of the GitHub's UI". I don't get "You didn't create an app you created an alternative UI.". Are you saying that every twitter or reddit client is not an app. Because for sure they completely rely on Twitter or Reddit API for its data.
Yes, the lifecycle paradigm will die out. &gt; componentDidUpdate trapped me in a series of deep prop comparisons Oh yes, it was quite awful, but you run into these situation with lifecycle MVC in general. Without lifecycles you declare an effect and that's that. useEffect(() =&gt; do something)
Does anyone know any thorough resources for someone looking to dive into TDD?
I found [this article](https://medium.com/javascript-scene/unit-testing-react-components-aeda9a44aae2) (same author) about unit testing react components.
Me, as I clicked the article: Wow, I haven't seen a defense of TDD in awhile, maybe this will be an insightful and interesting take on ... Me, after seeing Eric Elliot at the top: *Clicks back button*
You're already using promises (`await` awaits promise values). All you need to do is add the class before the `await` and then remove it after the `await`. When you're properly handling errors, you add the class before the await, and remove it in a finally which allows it to be removed whether or not an error occurred. try { $('.home').addClass('spinner'); const { data } = await axios.get( `/api/getdata` ); $('.home').innerHTML = data; } catch (err) { $('.home').innerHTML = 'Sorry, but there was a problem trying to load your data.'; } finally { $('.home').removeClass('spinner'); }
awesome. makes sense. thanks a lot
That works too.
Made this because I like the flux/redux ideology but hate the boiler plate and added dependancies. I thought I'd have a crack at taking the same concept and making a simpler implementation.
Many have tried and failed in the past, but this seems different somehow. Any Pro's care to comment ?
Hi /u/harrydry, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Whatever makes you feel better about the clickbait title.
Perfect response! JQuery seems to literally be all I ever see in the examples is that just what you are familiar with? I'm generally interested.
The author clearly doesn't know what they're doing with React or how any of it works. Of fucking course memo does a shallow comparison, doing otherwise would just be insane. And OMG did they mention doing object comparison using stringify HOLY shittttt.. The list goes on with common sense issues - maybe I should start writing articles about APIs that don't work as expected before I read the docs
Other than grammar "the Github's UI" 👍 Should be able to shorten it to "alternative GitHub UI"
I used jQuery because OP did, though you can't see that now since the post was removed. If they didn't use jQuery in their example, I wouldn't have used it in my reply. jQuery is not required for doing something before, then after a promise resolves.
Oh right, that's what caused my confusion as 9/10 posts I see on here tend to lean to JQuery and I am struggling to see why it is still so popular. Thanks for clearing that up! Whilst were here what do you tend to use for your scripting? My favorite is VUE as of recent!
I don't know how many apps I encountered in the past year alone where I was like, "this totally didn't need Redux" and felt like Redux was nailed to the app because all the cool kids were doing it. Redux is awesome when used correctly but more often than not, it just made development slower and unnecessarily complicated
I agree. I’ve been looking through boiler plates and almost all of them have Redux. I’ve consistently been asking why? How many applications actually need it?
Id like to see your implementation use an event library such as [nano events](https://github.com/ai/nanoevents)
Wow, I tend to be reserved on my main, but you're just plain mean and rude. I do read the docs. Several times even, if I don't understand something. I'm using mobx in my app. That means when I update some array in a store (just like I said in the example) - I have an array of members and I push a new one in, it updates the whole array with the data inside. That causes my rows to re-render although the data stayed the same, but not according to the shallow comparison. Using JSON.stringify() helped me preserve those rows so they do not render again. What would be more efficient comparison according to you? Or I should let 20 rows render in vain just because I pushed a new object to an array? I'm pretty sure more people are facing this problem. That's why it's getting upvoted - because it helps you learn something new - just like I couldn't find that I can provide a second argument to memo(), I'm sure more people were unaware of it. I also warned people about being careful where and how often they use it. You sound like you didn't even read it until the end.
Ive been spending a day+ with Svelte and the initial impressions are awesome. I love the simplicity in the components. Granted I've not gone into complicated big projects but so far it looks really good. Besides killing the frameworks when building and awesome performance results - its also nice to work with. You dont have to write all that boiler. That is my most important discovery. &amp;#x200B; &amp;#x200B; Graphql or Rest - Im ok using fetch for smaller stuff but I still need to figure out how to graphql for larger apps . Found [https://github.com/timhall/svelte-apollo](https://github.com/timhall/svelte-apollo) Any suggestions?
For anyone interested, I've written an article that cover the same topic but having a different approach : I try to go deep and explain why shallow comparisons are required and how you should deal with it: https://breakingjs.com/react-rendering-performances/
What are criticisms against it and alternatives? Just still learning and no sarcasm intended here.
I still use jQuery. It's great for simple things and prototyping. Arguments against it now are that browser compatibility no longer matters (though it kind of does since IE still isn't dead yet) and that the DOM API has caught up, including native methods for those provided by jQuery. And while that may be true, jQuery still makes it much easier providing a terser language for achieving those things. That being said, if I were helping someone learn JavaScript, I would _not_ introduce them to jQuery. At least not right away. It's better to know the proper, idiomatic ways of doing things before introducing helper libraries like jQuery. And there are tools beyond jQuery that can help with browser incompatibilities. That's not to say one should never learn jQuery. As you said, you see it all the time, and there are a lot of very large (or even small for that matter) codebases out there that still depend on it ([it used to be a BIG deal](https://en.wikipedia.org/wiki/JQuery#History)). If you ever get hired at a place that has such a codebase, it would help to know jQuery. And yes, I'm in that situation now working with jQuery on the daily. I've made projects in Backbone, AngularJS, Vue, and React (among others) and am currently working on a project in React. I have a lot of respect for Backbone, though people tend to hate on it a lot. Granted, its dated now, but it is/was exactly what it claims to be. AngularJS was fine. It had its quirks, but was OK. I've never done anything substantial with Angular 2+, but what little I played with it, after you get over that initial hump, everything seems ok. I wanted to like Vue, but I never really came around. There are things I like about it, and other things I don't. There were some things I wanted to do that seemed basic but I couldn't find any clear path to implement. React I'm probably the most familiar with, but also have a love-hate relationship with. I like the core concept - everything is JavaScript with HTML like markup in there to help move things along, but there are bits about it which annoy me. And now with hooks, while I appreciate what they can do, they do so in a way that adds more magic and makes some tasks seem much more difficult. Optimizing also seems far less clear. I haven't tried implementing them in my projects but I suspect (maybe?) once you kind of build up a library of custom hooks which provides the implementation you need - as confusing as that may be - moving forward becomes easier. So in the end, nothing is perfect. Everything has its quirks. But I think if something didn't, everyone would be using that and not any one of a bunch of others. If you like Vue, stick with it and learn how to master it. If you ever need to switch to something else, it generally isn't that difficult once you know one. A lot of the problems become dealing with all the little intricacies specific to that library/framework.
I have to verify this using the chrome profiler, but I think that running a JSON.stringify is very likely to have a bigger performance impact than letting the component re-render :) if the DOM remains the same, the reconcilier won't try to update the DOM so it shouldn't be very harmful. Depends on what your component does I guess
Perfect thank you so much for the response :) I'll be sure to use hooks in my next project at work
Depends on what you're using. I'm using Material UI Table and the row component has some Material UI buttons inside, I found it more efficient to do this check because the data itself isn't as heavy as the renders.
What do you mean exactly?
Mean? Or pointing out flaws. If you can't take criticism, then the internet is not the place for you. Doing code reviews with you must be fun. You should clone your array and add the new item so that the reference to the array is different: [...previousArray, newItem] That's a very standard pattern and avoid the problem entirely that you ran into. Stringify has a ton of issues, not to mention the perf of doing that and THEN a string comparison is super slow.
Not to defend him, but what exactly do you not like about Eric? I just got into JS community and there's a lot beef about this particular person
Okay. I asked you how you would do this check, you didn't answer. You said that I don't know what I'm doing with React or I'm not reading the docs but "I can't take criticism if I call you mean". Perhaps learn to criticise constructively (like Dan Abrahamov did in the other reddit thread where this article was posted) and you won't be met with people saying you're mean. If you want to spread shit for no reason, don't go calling it a "code review". I'd have to double check but I'm pretty sure replacing the array like that still refreshed my components because mobx creates a new array and that's out of my reach. I'm using push now which still is not supposed to create a new array with new objects - yet it does and my components refresh if I use simple memo(). Stringify is the fastest check for equality. You're saying it has a ton of issues but you're not saying what. I asked you what's more efficient and you didn't reply. Great code review, thanks bud.
The page I linked to has a download button for the source code. Was I supposed to link to the source and only the source?
&gt; A link to a project page with unbuilt/unminified source code In other words, users shouldn't have to manually "download" the source. Downloads can be dangerous, and are an impediment to code review (especially on mobile).
He just writes really bad, error-filled articles, but he writes them with the conviction and confidence of someone who knows their shit. He's sort of a walking example of the Dunning Kruger effect (although I'm exaggerating a bit here; he's not really *that* bad). Let me put it this way: I'm not a bandwagon jumper. I don't just hate on Eric because some other Redditors do. I hate on him because I was reading an article of his once without paying attention to the article, and in the middle I thought "this is terrible", and when I looked to see who wrote it it was Eric. It was only *then* that I understood why people on Reddit hated him, and decided to avoid his articles myself in the future. But while you should leverage your peers' knowledge and expertise to avoid reading bad advice, you also shouldn't just blindly not read an author because Reddit hates on them, so I encourage you to form your own opinion about Eric ... ... just keep everyone's criticism in the back of your mind as you do, and "trust" him less as an authority: only believe him if his content makes a convincing argument.
To answer this properly would require at least an essay, if not an entire book. TLDR; version is that the jury is still out, as it is with many things in programming because it's hard to objectively metric the value of abstract stuff like unit testing in an incredibly abstract discipline like programming. But judging purely on the practices of software companies (with the logic being that surviving companies are successful companies, and successful companies "do the right thing") TDD was once championed as the solution to all the industry's problems ... and now I don't personally know of any company I'v ever worked at or that my programmer friends have ever worked at where the company actually practices by the book TDD. Why? Again TLDR version is that it doesn't provide enough value for the time it requires. But that's a gross oversimplification (which I imagine some TDD fans will attack me for), and again it would take at least an essay to tease out all the details.
It's interesting that they went with Relay and not Redux or Apollo. Redux was created by Dan Abramov (current Facebook employee) and while Apollo didn't come from Facebook it was the first real framework for GraphQL (which did come from Facebook). So I'm very curious to hear why they chose Relay.
adding a polyfill is not building
if you use an event library to handle the subscription and emitting of events (actions, state update).. your implementation itself would be smaller. The event library then can change to another implementation without affecting your overall implementation of state management. As long as the event library follows a certain interface. Nano events though doesn't seem to seek compatibility with node event emitter.. though another library may. Nano events however is quite small. I know you said your implementation has no dependencies but depending on an event emitter isn't a bad idea.. it could really help simplify your implementation even further.
Relay (and Apollo) are more than state management and not directly comparable to Redux. Relay interfaces with GraphQL servers and provides data fetching, network caching, optimistic updates, etc. In fact when using Relay you’ll likely still store lots of local state outside of Relay (in vanilla React state). (Disclaimer: I work on the project in this talk)
Good to know. Thanks!
First off, thanks for the response. But second, Apollo is very much a data fetching/network caching/etc. framework also, and while Redux is more focused on state management, it has not one but two ways to fetch data (thunks and saga), and many people also build in caching pieces. So again, it really sounds like Facebook could have gone with either one of those three tools for these projects. What I'm curious about is the *why* of their choice to use Relay out of the three.
This has been fixed now! 🎉
Of applications that do need redux, he's completely on the money about them getting progressively more complicated as redux is leveraged for prop drilling more than global state management. One of the things I'm still astonished by with redux is the lack analysis tools that can examine your state management and show you all of the dark crevices a state property winds up and how many side effects a single action can have.
 [https://github.com/TheShaneNg/repo-cloner](https://github.com/TheShaneNg/repo-cloner)
This is an article about a lead not understanding one of the key dependencies of a project that they're developing? React docs state that the component should work the same way before wrapping it in memo as it does after, so it should be a drop-in optimization. This is why I would personally advise against using the second parameter of `memo`. In general you should avoid passing props to a component that the component does not actually use, but think about this: is my component really so slow to render that I absolutely cannot afford to have that happen more than what's absolutely needed? If your component goes through an unnecessary update cycle and it's not very high up the chain, in general you should be fine. Remember, if the output of the component doesn't change, no actual DOM renders will be done, due to vDOM diffing. This doesn't apply to when your component has side effects, like API calls, which you don't want to call multiple times, but if that is often the case in your components, you should try to fix that before reaching for somewhat hacky optimization tools, when the fault may be with how you trigger those expensive side effects.
Intermingling view layer actions turns into pure noise in redux. Take redux form for example. Great little library for handling data input, but every time a component mounts, changes focus or gets input, redux is flooded with updates. From the invoker's perspective, I don't give a flying shit about redux form's internal state. As long as it hits my callbacks so I can present a warning, do some input masking, etc... I'm fine and dandy.. but it clutters my app's state with it's own book keeping that is completely uninteresting for my "give me what the user inputted" use case.
? Relay is made by Facebook. Enough reason for using it.
Can i ask for the font of the name? really catches my eye
I don’t think it’s possible to summarize it in a TLDR. It can do things like code splitting based on database query results. So say you requested a list of Posts. Relay can detect one of those posts is a video. Thus will start downloading the JS bundle to add the video code as well. It can defer and split queries, so if your component needs 2 props it can fetch the 2 props to make your UI work, then the moment it’s free it will request the other props to add more data to the ui. As previously said. Relay looks like it does what things like Apollo do AND more.
gaeron already pointed out your mistakes last time you posted your article.
Yeah, they [definitely](https://web.archive.org/web/20190420063056/https://frontendmasters.com/books/front-end-handbook/2019/) didn't put it on start, but it's nice to see it now. Thanks for info!
&gt; Intermingling view layer actions turns into pure noise in redux. I agree with you on this one. Once an app gets large enough the redux log turns into an incoherent mess, especially if you use libraries that attach themselves to your redux store. I also think `redux-form` is an example of taking redux too far. Having every form sync'd to redux is a recipe for disaster and I generally recommend people not use something like `redux-form` because of that reason.
I provided a fix for the root cause. You're mutating your state and that's the problem. The comparison shouldn't change from shallow. 1. Doing a deep equality check like the one that the lodash library provides is much faster. 2. If you use stringify, there is zero assurance of the order of properties in objects. Related to that issue is if you have two objects with identical keys and values and they're in a different order, using stringify to compare will be incorrect. 3. What if the object is cyclic? You need you prevent that from throwing an error. Dates won't work well with stringify. 4. As I mentioned already, doing a string compare is expensive in addition to two stringifies. I would probably work on taking feedback better if I were you. I'm surprised you're a "lead" with your temper and lack of knowledge.
I’m actually not qualified to respond with in-depth comparisons as I’ve never used Apollo or Redux. But you know who is qualified? The people in the video in the OP. :p The video talks about Relay’s streamed fetching, query matching on type, and data-driven code splitting. Those are particularly interesting to a person asking what makes Relay a good choice so I highly suggest you go have a look.
It's just my own personal issue: in general I *hate* videos as a way to transmit programming info. Just in terms of concepts per minute, I feel text is far more suited. I'm not completely anti-video; for getting a broad overview of a new technology it's hard to beat a good filmed presentation on that specific topic. Similarly I've seen some good tutorial videos. But otherwise I just can't make myself devote 40 minutes to something someone could write down the main points of in 4, or maybe, at most, 14 minutes.
Did you implemented the key in your API call? If you did can you may post your API call? It's hard to guess without.
Couldn't agree more. High level concepts are fine in video, but for actually diving in to specifics of how libraries/frameworks work video is a poor format.
 [https://github.com/Kyle-Ward](https://github.com/Kyle-Ward) &amp;#x200B; Be brutally honest.
 [https://github.com/TheShaneNg/repo-cloner](https://github.com/TheShaneNg/repo-cloner) &amp;#x200B; Burn my first repository.
They had the manpower. They didn't have the *time.* They had a target window in which they needed to get new devices out the door and generate revenue, and it took longer to create and polish WebOS than hoped. You can argue poor management if you like, and may have a point, but an effort like that is always a crap shoot.
Yes. They are just sugar for oop folk. Dont use them.
Why wouldn't you use them? Other than just because you are avoiding OOP all together.
Cleaner code? Zero "this", clear cascade of functions, easily debuggable etc. Also performance, for example they dont minify well.
I watched the whole 40 minutes, I strongly advice you all watch it it really has some interesting solutions, especially the @module directive which allows relay to lazy load a component for the corresponding query.
That’s awesome, we’ll I’m certainly going to keep Uppy in mind on my next project. I also commend you for keeping your code open source friendly. That’s an inspiration in itself that I personally will follow and I hope more developers do the same.
Yes. Classes in JavaScript are functions and always have been. For example, this class Foo: class Foo { constructor(bar) { this.bar = bar; } logBar() { console.log(this.bar); } } Is essentially identical to this function and prototype method: const Foo = function(bar) { this.bar = bar; } Foo.prototype.logBar = function() { console.log(this.bar); }
Do we really care about what syntax minifies well in the age of webpack and transpilers? Also, if you are doing OOP you need `this` regardless of whether or not you take advantage of sweet sweet ES6 sugar.
Hi /u/8solutions, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I will not. OOP is just bad concept kept alive because enterprises think the more OOP the better. Or they got that thought implanted because most enterprises do not think deeply about programming.
Sure. I hate OOP too. But if I'm going to write it, I'm sure as shit going to use `class`.
[https://github.com/ryanstaniforth/shared-message](https://github.com/ryanstaniforth/shared-message) First serious open source project
You need Node to use fs.
Just curious what you mean by "on the name". Not sure I'm following that part.
Hi /u/Hombre_Lobo_, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/domke89, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/HiImSauzy, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Nerfi666, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Sorry, I worded that poorly. What I'm getting at is that one of the main syntactical differences between custom Objects and classes is where the parameters are defined; next to the function name or the word function itself, and next to the constructor function within a class, respectively.
JavaScript is mandatory for front end developing and web apps are more popular than ever because of mobile. It's not a shock it's currently the most popular language.
Nowadays I only use JavaScript and python. Python if I want to do read/write or web scrapping. JavaScript for everything else.
What's `Promise.allSettled`? The gist is that, Unlike `Promise.all`, which short-circuits when any of the promise is rejected, `.allSettled` runs all promises regardless of rejection of any promises
&gt; What would be more efficient comparison according to you? I think if you're doing deep equality check, you're doing it wrong. You need to architecture your app so that no such expensive operation needs to be done. The way React is expected to be used is, if you have a list of items, yes, every time a new item is added, the whole list will be "re-rendered". But it is efficient because "re-rendering" in react world means recreating that part of UI in Virtual DOM, performing diffing against its old version, then only applying differences to the real DOM. Of course, it would have been more efficient for the item to just get added to DOM, but you can't really achieve that with React (unless you're doing something that negates the many benefits of React). If you really want to achieve that, you may need to look into other frameworks (maybe Svelte?).
Cool, cool... You know what would be more interesting title? Building the New facebook.com with User Privacy in Mind.
Another advice I can give is to correctly split components such that a really big component doesn't need to re-render when something needs to be updated in the child components. For example, if you have a big-ass component class BigAssComponent extends Component { state = { inputValue: '' }; render() { return (&lt;div&gt; &lt;ComputationallyExpensiveRenderedComponent/&gt; &lt;ComputationallyExpensiveRenderedComponent/&gt; &lt;ComputationallyExpensiveRenderedComponent/&gt; &lt;ComputationallyExpensiveRenderedComponent/&gt; &lt;PresenterOfUserInput inputValue={this.state.inputValue} /&gt; &lt;SomeInputComponent value={this.state.inputValue} onChange={this.onInputValueChange} /&gt; } onInputValueChange = (inputValue) =&gt; { this.setState({ inputValue }); } } Every time your user types something in `&lt;SomeInputComponent /&gt;`, the entire `&lt;BigAssComponent /&gt;` will get re-rendered, including multiple `&lt;ComputationallyExpensiveRenderedComponent /&gt;` that don't even depend on the input, which is quite inefficient. You will probably need to create a parent component for `&lt;SomeInputComponent /&gt;` that would handle that user interaction. In addition, components that require that user input need to leverage your global state library. For example, if you use Redux, you could dispatch action that would change the state, and a shallow comparison would be automatically made for `&lt;PresenterOfUserInput /&gt;` to determine whether something needs to be re-rendered or not.
ome parts missing... so it took me half an hour to figure it out what was wrong how to fix it.
solve issues from part 1: 1. install gatsby-remark-relative-images by yourself, or delete the references to it in gatsby-node. 2. add in templates single-blog.js with like: import React from 'react'; import { graphql } from 'gatsby' import Layout from '../components/layout' const BlogPage = ({ data, classes }) =&gt; { const { markdownRemark: post } = data return ( &lt;Layout&gt; &lt;h1&gt;{post.frontmatter.title}&lt;/h1&gt; &lt;h4&gt;{post.frontmatter.date}&lt;/h4&gt; &lt;p dangerouslySetInnerHTML={{ __html: post.html }}/&gt; &lt;/Layout&gt; ) } export default BlogPage; export const BlogPageQuery = graphql` query BlogPage($id: String!) { markdownRemark(id: { eq: $id }) { html frontmatter { title date(formatString: "MMMM DD, YYYY") } } } `
Is there a way to buy a paper version of the book somewhere ?
I've enjoyed pugjs in combination with express
does it fix getting random friend requests from russian models every day?
Hi /u/BrotherPhoenix, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What an original hot take!
It still is pretty much championed as a great solution in the Rails community. Every course/book has at least a section/chapter dedicated to it.
Awesome little tutorial! I just might make ReasonML my next language to learn.
Funny, I LOVE Ngrx/store, it's superior to Redux and other stuff out there imho.
lol
Redux is totally inferior to Ngrx/Store. &amp;#x200B; How would you lazy load parts of your store for example? Observable built in - Effects are awesome. &amp;#x200B; Redux seems archaic by comparison. Done lots of apps with react+redux and angular+redux and Redux is stone age by comparison.
This
I'm a little disappointed in the design goals and progress so far. Sone things might come in time- performance (site claims serving http is currently slow), debugging, etc. The lack of any manifest file means that the entire set of files must be scanned, and defaulting to master branch means no reproducible builds. Also, how are dev tools and dependencies tracked? (thinking linters, babel / macro plugins, etc). OTOH, love the security sandbox and native TS support. There's certainly some good potential here, but I don't know if the limitations will prohibit me from moving off of node.
Redux is really old stuff if you compare to modern observable based state management like RxJs.
Sure it is. So much better than React which ,imho is popular because it is easy for newbies. Once you need more advanced stuff you're be in trouble. &amp;#x200B; React is Javascript equivalent to perl hack scripts, Ugly and messy
I have a hunch that you're recreating each row object eact time you assemble the list. It's quite unintuitive as it would feel like giving less data to the component would be faster, but selecting only certain elements from an object always creates a new object. An redux example would be. selectDataToRender = (store) =&gt; { rowsToRender: store.inputData.map(inputItem =&gt; ({ inputItem.usefulData1, inputItem.usefulData2, }) }; connect(selectDataToRender)(RenderAllRows); This re-renders each time the store receives new data, since both the array, and each item inside the array have different references even though they contain the same data. As long as the `store.inputData` array isn't changed (you can't use mutation on the `store.inputData` array or this will fail the shallow comparison and not update) the components will not render too often. The following code gives more data to the components, but renders less often: selectDataToRender = (store) =&gt; =&gt; { rowsToRender: store.inputData, }; connect(selectDataToRender)(RenderAllRows);
Plz explain down votes, I have a lot of time with class based ECMA but this syntax has not appeared anywhere that I have seen and good luck googling
Hi /u/codeobserver, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Link is [https://codeguppy.com](https://codeguppy.com)
Hmm. Interesting train of thought. Can you expand on that idea?
StackOverflow is where you can find answers to questions like this. This sub is more for news related to JavaScript development.
What theme is that?
If you mean the code screenshot, it looks like it's done with [Carbon](https://carbon.now.sh).
Assignments in if statements usually mean a typo. Are you sure it's meant to be an assignment? It is probably meant to be a comparison. using `==` or `===` instead. I wouldn't think a code minifier/obfuscator would be throwing arbitrary assignments in there because it means adding extra `&amp;&amp;` characters. The return is also weird. The parens group the two assignments. As a comma separated list, only the last expression is returned which ends up being a literal 77. Another case where that syntax doesn't make sense.
There's also /r/learnjavascript. Don't be surprised if this post gets deleted citing that it would be more appropriate there.
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [All JavaScript concepts you should know in one single repository](https://github.com/leonardomso/33-js-concepts) | [22 comments](https://np.reddit.com/r/learnjavascript/comments/a17g4t/all_javascript_concepts_you_should_know_in_one/) \#2: [Microsoft has open sourced their Frontend Bootcamp training materials (including React and Redux exercises)](https://github.com/Microsoft/frontend-bootcamp) | [8 comments](https://np.reddit.com/r/learnjavascript/comments/auw1el/microsoft_has_open_sourced_their_frontend/) \#3: [I made a Javascript cheat sheet](https://np.reddit.com/r/learnjavascript/comments/bips27/i_made_a_javascript_cheat_sheet/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/afd0dd/blacklist/)
Ask Stack Overflow. That's what it is there for.
As far as I've been able to tell there isn't a documentation tool that shows where an action can get fired from. What middleware is attending to it (and what actions it fires off as a result), and finally what reducer listens to it. &amp;#x200B; Showing how data is changed would be awesome (but not really practical).. however just showing all of the places an action has side-effects against in a flow chart or process diagram would be a big win for just touching an enterprise redux code base without breaking gobs of stuff as a result because of lack of awareness.
I hope it doesn't
Wrong.. This would proobably nooot help you eiiiither
Aside from using redux-form the major thing I regret is once looking at redux-form as an "okay" design and doing something similar for dialog boxes. I have deep shame every time I see one of my dialog boxes mount and unmount to initialize and clean up state.
Yeah, that's a pretty intriguing idea. Purely off the top of my head, I'm not immediately aware of anything specific that does that. I _have_ seen a devtool that wraps your state in a Proxy and determines what portions of your state are or aren't being used, but that's rather different than tracking actions and usage. I can imagine something like that being rather difficult to write. The static analysis probably wouldn't be able to catch a lot of things, like dynamically generated action types. Still a neat idea, though. I may just tweet it out there and see if anyone has heard of something similar or might want to try tackling that.
Redux is not needed anymore when there's now hooks available.
Facebook.com Shutting Down
I'd love to work on something like that. Every time we get a new person, or even throw a seasoned dev that isn't extremely familiar with redux at a task, it's a never ending nightmare of side effects. &amp;#x200B; Static analysis might be completely out of the question, but using unit tests to generate a static document that shows a state diagram would clear up a lot of confusion with large code bases I think.
Then why waste my time writing uninformed comments?
Dark Mode! Finally, the joined the rest of the smart app world! : )
I meant the other dude with the deleted post. I think you characterized it fine for the most part.
That's pretty sweet. I've been getting around the short-circuiting by wrapping a dummy catch
The value of an assignment is the value assigned, \`name='hacker' === 'hacker'\`, \`Boolean('hacker') === true\`, so the rest of the predicate after \`&amp;&amp;\` will be evaluated. The value of the \`,\` operator is the value of the right hand operand, which in this case will result in returning \`77\`. This is fairly basic JS, I would recommend studying up on expressions and operators. Also, this sub is not for JS Help -&gt; Rule 3. Try /r/learnjavascript
The need for "try/catch" statements per each "await" call can be minimized with this one simple trick 🙂 or roll out a method to emulate such a feature.
[https://stackoverflow.com/questions/55934490/why-are-await-and-async-valid-variable-names](https://stackoverflow.com/questions/55934490/why-are-await-and-async-valid-variable-names)
Well. Facebook created Relay. It makes sense for them to build on their own technology, allowing them to promote it as well. Apollo is their competition.
You can pack all incorrect answers into a Bloom filter and check if correct answer is missing in it.
Just regular jQuery seems like all you need here, unless there's more to this that you're not telling us, I think. `$('#tabs ul &gt; li') // returns jQuery object containing whatever LI elements are in the UL` If you need them in a plain array instead of a jQuery object, `$.makeArray($('#tabs ul &gt; li')).`
If you don't want to deal with HTML and CSS then you should just back away from web development. Especially front end web development. &amp;#x200B; You are probably just approaching front end development from the wrong angle. When I was brand new, I often frantically googled for answers instead of learning the fundamentals. I bought some udemy courses and learned that a lot of what was confusing me was just explained poorly. If you are going to be using javascript as a front end language then you need to deal with html. HTML is fundamental with how pages are structured. Alternatively, you could find a niche working as a back-end javascript developer in Node, but I have a feeling if you are feeling disillusioned with front end html and css, you probably are just new and need to give yourself stuff to work on. &amp;#x200B; I am by far not an expert web developer though. I made my first website a year and a half ago.
Make an array String[] correctAnswers for the correct answers (you can even have them ordered) and then for question 1, use the string at index 0 of correctAnswers, for question 2 index 1 etc. If you don’t want to put them in order, you can just loop through the entire thing to check, but that’ll be slower of course
There are back-end roles writing Node. That was the whole point of the Node runtime being created: To write back-end servers in JavaScript. It's super popular and there are all kinds of different server and database frameworks adapted for Node. I wouldn't be discouraged if you just want to focus on back-end. That being said, there are ways around writing exactly HTML and CSS too (for example there are tools to generate HTML and CSS from JavaScript code). But if you want to write something for the browser you'll have to understand the underlying HTML and CSS concepts because that's effectively the browser's API.
1. Try using more than one branch. 2. Don't add your pay-as-you-go api keys in public repos. 3. The first two letters of your name are KY. (Sorry, felt like I should add a burn or something. I got nothin.)
\&gt; Can you assign multiple strings to the same variable? You're looking for an "array": [https://www.geeksforgeeks.org/arrays-in-javascript/](https://www.geeksforgeeks.org/arrays-in-javascript/) Giving a bit of the "full" answer here: The simplest way for a newbie to do this (I think) would be to have three variables, all of them being arrays: an array of questions, an array of answers, and an array of correct answers. (Though if you know about objects and JSON in JS, you can just use one array.) The first value in each of those arrays would have the first question, possible answers for that first question, and the correct answer for the first question (respectively.) The second values in each array would be for the second question, and so on.
Might as well link straight to your only commit instead. It'd be faster and at least people wouldn't have to see your README. (Are we supposed to be mean or give actual advice?)
Essentially all I would need is an array as it would be sending a command via AJAX to a PHP script and pull the data and dump it into the appropriate tab using document.getElementById. Can you explain how to access each li in the array?
&gt;\[...\] and while Apollo didn't come from Facebook it was the first real framework for GraphQL (which did come from Facebook). I'm not sure what you mean by "first real framework", but I just want to clarify that Relay existed and was used in production long before Apollo existed and before GraphQL was even open source. Since it's launch, the team has made sweeping and substantial improvements (i.e. on the same order of magnitude as Fiber for React) to Relay. In fact, you can hear a couple of the GraphQL authors say this exactly in their F8 talk: [https://developers.facebook.com/videos/2019/graphql-straight-talk-from-the-creators/](https://developers.facebook.com/videos/2019/graphql-straight-talk-from-the-creators/)
You access items in arrays by their indices (numbers indicating their positions in the array). myArray\[0\] = the 1st item in the array, myArray\[1\] = the 2nd item, and so on. You need to spend some quality time with the MDN docs, sounds like [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global\_Objects/Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)
&gt; Arrays are the most common data structure used in any programming language I like your article, I think you make some good points, but broad statements like this one make it hard for me to take it seriously.
I wonder if this means there can never be another new reserved keywords added to the specification because someone, somewhere, once assigned a variable name to it.
Hi /u/shanayasinghania, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don't think arrays are the most common. I think objects are
So, I've added the array, just had it dumping to the browser console for testing, but I'm receiving this instead of the actual name. codebase.js:212 [0] &lt;li role=​"tab" tabindex=​"0" class=​"ui-tabs-tab ui-corner-top ui-state-default ui-tab ui-tabs-active ui-state-active" aria-controls=​"console" aria-labelledby=​"ui-id-1" aria-selected=​"true" aria-expanded=​"true"&gt;​ &lt;a href=​"#console" onclick=​"setRoom('console')​" role=​"presentation" tabindex=​"-1" class=​"ui-tabs-anchor" id=​"ui-id-1"&gt;​Console​&lt;/a&gt;​ &lt;/li&gt;​ codebase.js:212 [1] &lt;li role=​"tab" tabindex=​"-1" class=​"ui-tabs-tab ui-corner-top ui-state-default ui-tab" aria-controls=​"roombrowser" aria-labelledby=​"ui-id-2" aria-selected=​"false" aria-expanded=​"false"&gt;​ &lt;a href=​"#roombrowser" onclick=​"setRoom('roombrowser')​" role=​"presentation" tabindex=​"-1" class=​"ui-tabs-anchor" id=​"ui-id-2"&gt;​Rooms​&lt;/a&gt; ​&lt;/li&gt;​ codebase.js:212 [2] &lt;li role=​"tab" tabindex=​"-1" class=​"ui-tabs-tab ui-corner-top ui-state-default ui-tab" aria-controls=​"lobby" aria-labelledby=​"ui-id-3" aria-selected=​"false" aria-expanded=​"false"&gt;​ &lt;a href=​"#lobby" onclick=​"setRoom('lobby')​" role=​"presentation" tabindex=​"-1" class=​"ui-tabs-anchor" id=​"ui-id-3"&gt;​Lobby​&lt;/a&gt;​&lt;span class=​"ui-icon ui-icon-close" role=​"presentation"&gt;​Remove Tab​&lt;/span&gt; ​&lt;/li&gt;​ codebase.js:212 [3] &lt;li role=​"tab" tabindex=​"-1" class=​"ui-tabs-tab ui-corner-top ui-state-default ui-tab" aria-controls=​"user1-user2" aria-labelledby=​"ui-id-4" aria-selected=​"false" aria-expanded=​"false"&gt;​ &lt;a href=​"#user1-user2" onclick=​"setRoom('user1-user2')​" role=​"presentation" tabindex=​"-1" class=​"ui-tabs-anchor" id=​"ui-id-4"&gt;​RandomUser​&lt;/a&gt;​&lt;span class=​"ui-icon ui-icon-close" role=​"presentation"&gt;​Remove Tab​&lt;/span&gt;​ &lt;/li&gt;​ I essentially need to get the aria-controls or the href value.
If you think about all of the details that JS has, we could say that is a "complete language" I would like to see use strict look and act like Java. I think then it would actually be a super useful language that wouldn't need a library except for super heavy lifting. Will that happen..no. Should it happen...no. JS is JS and adding new keyword will just turn it into a crazy visual PHP 4. When thinking about it, there doesnt really need to be another keyword added because React helps with being able to extend the Component and what not. I wish I knew more about language design because someone probably will be pulling their hair out reading this. I believe that JS is going to go away anyways and everyone will go back to C for web development.
Yup, unless there is another way to opt in to new grammar, like `[type="module"]` or `"use strict"`.
Oh, I didn't realize.
And then returns a "status report" for each of the promises. Looks handy indeed! :) And appears to be easy to polyfill, this should be enough unless I'm mistaken: Promise.prototype.allSettled = promises =&gt; { const awaitSettle =&gt; promise =&gt; promise.then( value =&gt; ({ value, status: 'fullfilled' }), reason =&gt; ({ reason, status: 'rejected' }), ) return Promise.all(promises.map(awaitSettle)) }
I didn't downvote you, but it was destined to happen when you expressed your opinion about JavaScript going away:-) At any rate, I believe what you had to say still adds to the discussion. But *extends* is an interesting example you brought up and which I should have thought of when I posted my comment. It and several other keywords such as import, export, class, super... were (I believe) added in ECMAScript2015. I suspect there is something going on there like they had been reserved for a while so there wasn't an issue with backwards compatibility.
You could also build your own vm that has whatever you want in it. Really it's just a C++ parser.
&gt;Not relying on Automatic Semicolon Insertion would have identified the problem earlier, because the last `/` could not have been interpreted as division and this is why you use semicolons. const foo = await /barbaz/ myFn() is really not all that exotic, but confuses the compiler.
going for the [publicist badge](https://stackoverflow.com/help/badges/262/publicist) eh?
int
It's not really the AST that's passed to the interpreter. The interpreter itself **is** the JS Engine, made up of many components/stages. One of which is the parser, which creates the AST and passes it into the code generation stage (either directly to native code or to bytecode) &gt;Wasm is that bytecode which browser uses? - I supposed that it is not and every JS engine has own bytecode. The problem here is that you're approaching WASM thinking about the JS engine. WASM is its own thing, you can also think of it as a **standardized** bytecode for JavaScript. It doesn't have to be a part of any JS engine. It can be standalone. Whether it's part of a JS engine or not is a design decision an engine dev has to make. &gt;Should wasm have better performance like JS bytecode which will be fully optimized? - I supposed that performance will be the same. Fully optimized? Probably. The question is how often do you get fully optimized code? Yes, V8 compiles everything to native code, but native doesn't mean it's automatically fast. The runtime is still Just In Time, not Ahead Of Time. The native code gets optimized over time, as it's being executed. The optimizer
Or just any number
Hi /u/IsaacEye, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Usual_Mistake, this post was removed. Job and job-related posts are prohibited * Job postings: Please post to /r/remotejs, /r/forhire, etc. instead of here. * Job/Career advice: Please post to /r/cscareerquestions instead of here. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gogotermixnator, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/prabhat33, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/kylemcisaac, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Tyco2003, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Why would you do that though?
Hi /u/H-a-C-K-e-R, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/TC5550, this post was removed. If you'd like to post a link, then please use the "Submit a new link" option. If there is additional commentary or links you wish to add, please do so in a comment. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/throwies11, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/BrotherPhoenix, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
There is usage of this in [popular framework](https://angular.io/api/core/testing/async)
Good for them, In just a few months, Svelte will be the hot new babe in town, and React/Relay/Redux will be the new BackboneJS
Yep, I always use semicolons normally. I originally ran into the issue here when I found that const foo = await /barbaz/; throws &gt;Uncaught SyntaxError: Unexpected token ; which really confused me, and whose error message didn't make it obvious that `await` was being interpreted as a variable name. I could have demonstrated using semicolons, but a snippet that throws `await is not defined` instead makes it clearer exactly where (my) expectatation vs reality broke down, in terms of how the code gets parsed.
It's not really the AST that's passed to the interpreter. The interpreter itself **is** the JS Engine, made up of many components/stages. One of which is the parser, which creates the AST and passes it into the code generation stage (either directly to native code or to bytecode). &gt;Wasm is that bytecode which browser uses? - I supposed that it is not and every JS engine has own bytecode. The problem here is that you're approaching WASM thinking about the JS engine. WASM is its own thing, you can also think of it as a **standardized** bytecode for JavaScript. It doesn't have to be a part of any JS engine. It can be standalone. Whether it's part of a JS engine or not is a design decision an engine dev has to make. &gt;Should wasm have better performance like JS bytecode which will be fully optimized? - I supposed that performance will be the same. Fully optimized? Probably. The question is how often do you get fully optimized code? Yes, V8 compiles everything to native code, but native doesn't mean it's automatically fast. The runtime is still Just In Time, not Ahead Of Time. The native code gets optimized the more it executes. The engine tracks slow code, and applies more optimizations to generate progressively more optimized code. So while a site loads, you have the overhead of having to fetch, parse, and compile big source files. After the site loads, you have the overhead of profiling the runtime of the code, optimizing it as it runs, as well as type-checking on everything because the language is dynamically typed. All of this is done continuously. To me, that just sounds like selling someone a shitty new car. "It works better the harder you make your mechanic work!".
It doesn't have to be zero sum.
&gt;everyone will go back to C for web development Christ, that would be depressing. We don't need C any more, we have Rust. &amp;#x200B; Anyway, it sounds like what you want is TypeScript.
Yeah, `await`ing something that you *know* isn't a Promise doesn't make sense, despite being syntactically valid. Having `await` before a regular expression (or `/` operator) is one of the very few cases where the code can (sometimes) be parsed successfully regardless of whether the `await` is inside an `async` function or not. In most other situations, `const foo = await &lt;something&gt;` would throw a SyntaxError in at least one of the two circumstances. Maybe it would have been clearer to use `await +5` instead, it demonstrates the issue without muddling with ASI.
no what I want is memory management for topological rendering
Why is it such a huge sin to break old code that uses `await` as an identifier, but not code that uses `let` as an identifier? What's the difference? Is it just because they found examples of the former?
Oh wow. Didn't expect such an elaborate anser. Thank you very much. I will check out Smoke more as soon as I get home!
Is there a Youtube mirror so I could watch at like 1.5 speed?
Very good question! It's because variables declared with `var` actually can be named `let` without problems, when in sloppy mode: var let = 5; https://jsfiddle.net/b1dzf0pj/ A site with that code, written in 2000, would still work today. But variables declared with `let` or `const` may not be named `let`, you'll get: &gt;Uncaught SyntaxError: let is disallowed as a lexically bound name Thus, the functionality of ES5 scripts is preserved, while preventing ES6+ scripts from using `let` as a variable name. `let` is only a reserved word in strict mode, and strict mode was introduced with ES5 (2009). Even though ES2015 and the *true* specification of `let` was a long time in the future, there had been discussions about using `let` during the (failed) development of ES4 - during ES5, they had an idea that `let` would eventually be used, so they made it a reserved word in strict mode, improving the future clarity of the language without breaking any existing scripts. https://www.webcitation.org/5rBiWD4P6?url=http://www.ecmascript.org/es4/spec/overview.pdf
I didn't even know about that. It looks like it requires the link to include my user ID, which I didn't do. I just found an interesting situation that I puzzled over and figured out, and wanted to post about it
You could either go for the query builder knex and simply implement your data transformations yourself or you can use either objection or typeorm, which are the current en vogue orm. I’ve seen a few threads recommending objection over typeorm, but typeorm is more popular in terms of downloads. I’ll not go into technical details, I’m sure some googling will get you the key differences between those, but both should be fit to meet your requirements. But take a moment to decide if you really need a full fledged ORM instead of a simple query builder (knex).
I’m more excited about the technology and how it will affect frameworks tbh, they were actually working on a svelte like feature called prepack. Templates instead of pure functions, string if switches and loops instead of JavaScript, ...mutation, I would be very surprised to see stuff like this make a come back.
Hi /u/Deyarona, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
good point
use browser extension which can speed up any html5 video on any site
It's very fascinating, and the GraphQL / Relay stuff was very interesting, but her voice hurts my ears...
makes sense - I'll have a look!
Sure thing, it's comfortaa [https://www.dafont.com/comfortaa.font](https://www.dafont.com/comfortaa.font) :)
If you are familiar with Laravel, why not use AdonisJs instead of Express. It comes with a query builder very similar to that of Laravel (internally using knex)
Oh man. I tested it but must've been in strict mode. Great info, thanks!
Comfortaa, which is on Google fonts.
I must have read "*await* only works inside an *async* function" like a million times, now I'm looking into this syntax with fetch and feeling stupid for taking that literally.
Pretty nice! One thing I noticed is that it keeps its state in proxy objects and therefore not only allows mutating state in place, but seemingly actually requires that you do so. I think that potentially will cause a lot of surprises down the road, for any users of the library.
check out [https://github.com/GoogleChrome/puppeteer/issues/2134](https://github.com/GoogleChrome/puppeteer/issues/2134)
or [https://github.com/loukaspd/puppeteer-electron-quickstart](https://github.com/loukaspd/puppeteer-electron-quickstart)
I think it should be just Promise.allSettled = ..., it’s not a prototype/instance method
Cool and all but it's Facebook, so meh.
Just remove the carriage returns on those lines. var str = 'this is a test string'; That isn't valid Javascript. var str = "this is\na test\nstring"; That's valid Javascript with the carriage returns in the final value that your friend intended.
&gt; The problem here is that you're approaching WASM thinking about the JS engine. WASM is its own thing, you can also think of it as a **standardized** bytecode for JavaScript. It doesn't have to be a part of any JS engine. It can be standalone. Whether it's part of a JS engine or not is a design decision an engine dev has to make. but I know, that wasm is binary representation of asm.js. I know that wasm is also based on PNaCl and asm.js approaches. I understand that WASM engine could be standalone = like wasmer. But in real world browser: I understand that wasm optimalizations is AOT because it is compiled (we probably wont type WAT). So WASM code is "bypassed" to JS engine without JS engine optimalization and is just interpreted?
https://waterlinejs.org/
Test are a method just like any other. And just like any other tool, just mentioning the tool#s name as if it's "magic" shows a severe lack of deep knowledge. You *can* do goo things with tests, you can even do good things with tests before code if the situation is suitable. But you can also easily end up here, especially when the focus is too much on testing: https://news.ycombinator.com/item?id=18442941&amp;fbclid=IwAR3G5mTDwJahi_6HQIC_zlEyBCWBTB1X5xXmKMpmO3Lfkke15xFhuk-2EpM -- Meaning, just because you have tests that ensure a minimum standard doesn't absolve you of using your brain, of planning, of designing, etc. It's a goddamn tool, not a magic word that solves all your problems when spoken three times.
Relay is Facebook's own Flux architecture. It uses GraphQL as does Apollo while Redux only deals with application state. If you want my opinion, the writing is on the wall for Redux. The new Context API built in to React allows you to get the same benefits without the dependencies and boilerplate. I have migrated my app to using reducer hooks and context and the only thing I'm missing is support in React Developer Tools. As for GraphQL, the benefits are largely overstated and I think the popularity is due to developers being attracted to shiny new objects. DHH had [a great speech on this](https://youtu.be/9LfmrkyP81M) in 2014. I can only speak from experience. Do you have any idea how much nicer it is to have the exact same app without the dependencies on redux, react-redux, redux-thunk, graphql, express-graphql, apollo-boost, react-apollo, and the 3600 packages they install? Quit solving problems that you don't have.
Good shout! I completely forgot about Adonis. I remember it having many issues when I first discovered it but I’ll give it a crack now and see how it goes. Thanks buddy :)
I’ll check it out! Thanks :)
A lot of frameworks seem to be using knex. I’ll check out! Thanks :)
That is backwards compatability. I rely on the list of reserved keywords in any language to tell me what I can and can't use as tokens.
No it's not a binary representation of asm.js. asm.js is still JS albeit a very small subset of it, whereas WASM is completely different. They're interoperable but not interchangeable. Yes, it's basically bypassed. Think about it this way: WASM isn't JavaScript at all, so the JS engine won't be relevant to it. I'm guessing it'll be interpreted as is and executed directly
Yes and because "a" is truthy your if else statement returns "b".
That's a ternary if(I think that's the name). a || b will yield true, then the value after ? will be returned, b in this case. If the expression was false, then the value after : would be returned.
It's a because `("a" || "b") ? "b" : "c"`
It's the same as: if('a' || 'b') { return 'b'; } else { return 'c'; }
One big improvement is with the build times when doing development on the local machine. Previously even the incremental builds took a while to complete. Now that the newer parts of the codebase are separate, development on a single sub app is is much faster. We don't need to run every team's codebase just to work on ours. Our first sub apps are all green field projects. Therefore we don't really have a nice historical data showing how the separation of an existing piece of code would affect the total build time. We're planning on separating one major part of our front-end in a similar fashion so we'll see the change at that point.
Hi /u/Deizuca, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
In what you posted, “a” || “b” is a condition that the if-else statement looks at to see if it should return code in the if-block when condition is truthy or the else-block when condition is falsy. The “a” || “b” will return “b”, yes, a single letter string which is evaluated as a truthy, so the if-else statement will return what is in the if-block, and that is coincidentally “b”
Actually, "a"||"b" will return "a" but that's irrelevant here, it will be evaluated as truthy value irregardless.
Meant to say “a”, typed “b”. Editted the answer. Thanks for pointing it out though.
Good eye. Didn’t think to see OP’s problem as anything other than if-else
So wasm must have "own" interpreter which dont care about JS (IR/bytecode) interpreter So JS engine must have "module" for WASM which is basicaly that "own wasm" interpreter?
Hi /u/tintebrummenAlt, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Hi /u/Crivens999, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Cheers:)
Hi /u/CivilRiceOnionRing, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tipbruley, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ChillinWitAFatty, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AdrianBarylski, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah sure, because users generally LOVE massive redesigns... So I don't think we gonna see in anytime soon on production.
Nice work! You have a solid readme, test cases, and separated your code well. I guess my only suggestion is to keep it going. Add features, fix bugs, and keep putting projects out there. (btw, I get a 404 from your website.)
So use web assembly.
Really appreciate the feedback here. This just takes me down a couple more really interesting rabbit holes of reading that I'd not thought about. Thanks.
Thanks :) Yeah, I need to create myself a new website.
Thanks :) Yeah, I need to create myself a new website.
&gt; They had the manpower. They didn't have the *time.* I'll take your word for it. They didn't strike me as having a huge team, but I didn't know for sure. &gt; You can argue poor management if you like, and may have a point, but an effort like that is always a crap shoot. I was in touch with Palm people at the time. They seemed pretty frustrated with management and genuinely didn't know why they weren't fixing things they knew needed fixing.
Without seeing your code, we'd just be guessing, but have you tried just window.getElementsByClassName ?
Can you just add an id to whatever tag you’re trying to retrieve and then use document.getElementById(yourId)?
https://github.com/SpringsTea/WSProject I'm pretty much entirely self taught, kinda guessing as I go. Specifically feel like my flux implementation is weird.
document.getElementsByClassName\*
Great work! It has a lot of use cases that currently have only hacky solutions. Like returning false for rejection and filter the 'values', or wrap promises with handled catch.
See if you can get to it with this: [https://www.w3schools.com/jsref/met\_document\_queryselector.asp](https://www.w3schools.com/jsref/met_document_queryselector.asp)
Yeah I work at a big tech company and almost all of our JavaScript is written without semicolons. Both on the server and client side. I haven't had it cause me any issues. My group also uses async/await whenever possible. But we never await regular expressions lol
Thanks for the reply, &amp;#x200B; There is a ton of the system's code, and as it is proprietary code that I cannot toss out unfortunately. I know how that doesn't help, and that is why I am trying to find the higher level answer instead of the usual having someone just write the code in a reply that divulging the source code leads to. &amp;#x200B; It's basically three Forms (not frames) in the browser when you are looking at it: one is my form and another is the one with the string I am trying to get (third form doesn't matter). &amp;#x200B; I tried this and it resulted in the error: Object doesn't support property or method 'getElementsByClassName
It doesn't technically matter as long as it works. However, javascript can block the DOM from loading. So, it's best to leave any scripts in the footer that don't need to load until after the DOM.
Decent article: [https://eager.io/blog/everything-I-know-about-the-script-tag/](https://eager.io/blog/everything-I-know-about-the-script-tag/)
Thanks!!
lol... i get that it makes devs laxy but, it is pretty considerate of them :P
Hi /u/stang90, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AlwaysAngryAuditor, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Imho depends on what you're doing. You need to know what goal you want to achieve. If you're doing a SPA that only works with JS then yeah, probably you want to keep everything together. If for example you're using a bundler like webpack then same thing. If you have a mostly server side rendered app where js can be loaded later then putting it at the bottom of the file would be better than the head to avoid blocking render until js is loaded. On the other hand there are some tactics that could be justifiable to have script tags spread out across the page. An example: I previously worked at a place where we were heavily trying to optimize the time it took for people to read the content and any interactivity was secondary. To do this we early on opted to have a small loading script at the top of the page (head) that would get called in multiple async script tags across the page to progressively add behaviour where necessary. The different widgets (as we called them) would be organized into a small set of bundles and the mapping would be on that script at the head of the page. The bulk of the content was server side rendered and it was mostly interactivity (like lazy loading of lists, comments, sidebars, menus, etc) that needed to be loaded that way. That allowed us to defer most Javascript parsing later when hopefully the user was already consuming the content. (a big part of the work was making sure stuff didn't feel jerky or moved around). But this is a pretty specific scenario. Usually if you have a bunch of script tags all over the place it probably means that you're not concatenating and minifying you code.
Most tech talk videos are a waste of time but I thought this was really interesting and well done!
There is also a generator called "create-pastel-app": https://github.com/vadimdemedes/create-pastel-app
Thanks man, &amp;#x200B; This was the first thing that I tried (partly due to my ignorance on HTML Window/Dom hierarchy). &amp;#x200B; This actually worked and popped up an alert, however instead of giving me the value of the text it gives an "undefined". So I assumed that I wasn't actually getting the element contents due to targeting. &amp;#x200B; Maybe the problem isn't me accessing the element but the textContent method I am trying to call being incorrect?
Laughed out loud at the usage instructions.
Oh, you're right!
can you show the code?
Hi /u/clientside_nyc, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
`yarn add thatgreat` doesn't have the same ring to it :/
function as a data type?
Can we get a changelog for breaking changes from v1 to v2?
I had no idea a large portion of people disliked him or, at least a growingly large portion. Did you read the JS functional programming series he wrote (think it's possibly a book now also). Did you like them/find fault and/or issue in those articles?
Babylon was a joy to work with! Excited to see it mature even further.
yarn dad thatgreat ?
The actual function it exports: module.exports = () =&gt; console.log('actually, I kind of like it');
Since they stole the Nintendo Gamecube logo I'd like to see a Zelda demo.
Yes, that's how I imagine it'd all go. It's why I was saying it's not very helpful to think in terms of just JS engines because at that point, this would just be a scripting engine
Even aside from all the other potential problems with NPM, they don't allow for you to sign your packages. That is a security nightmare waiting to happen (in fact, it has happened).
While I like the simplicity of this, I would probably choose to start with: Promise.allSettled = Promise.allSettled || /* Your polyfill */ ...just to have the native implementation "kick in" in case it does get through the standards track ... even for those apps that are "legacy" at that point and no-one wants to get back and change things for a maintenance release :)
If you'er a dev that types to ofast in the cosnole sometimes, and you haven't changed at all voer the past ten years, I think you hit ap oint where you'd like some cmomon misspelings to still wokr.
Oh yeah, absolutely – this is just the implementation itself, I left out the feature detection for brevity :)
This is the kind of open source we need.
That's pure genius.
Lol now the real question, can I sneak this passed code review at work?
That's a clean usage documentation though
No I didn't, but I'm a big fan functional JS so I might well have agreed with him. Again, he's not terrible or always wrong or anything, it's just I (and others) have noticed a pattern of low quality in his posts.
There sure is going a lot into marketing, but looking at the API, it's the old, known to be hard to work with, inheritance hierarchy, (Light &gt; ShadowLight &gt; PointLight), mixed with ad-hoc mutations. Nothing new to see there. I really wonder what's MS doing there. My best guess is that the incentive here is to give developers tools to develop for their HoloLens platform.
thank you very much for explanation 🤗
I need an async/await version
Hi /u/Ludmila_M, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
If by 'changing' your 'cssfile' do you mean changing to a different css file (as opposed to actually changing/editing the current css file), there are a couple of solutions outlined, here: https://stackoverflow.com/questions/19844545/replacing-css-file-on-the-fly-and-apply-the-new-style-to-the-page
You'll need to look into class list js property. For example. element.classList.add('dark-theme');
Less likely than the subtle typo in your comment :D
shit + the original function name. That way yhe risk is obvious.
Hi /u/Nadjai99, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I get it, but I stlil htae yoru commnet.
 wow, isntall is allowed... lmao
lol
You could add unsafe to the end of the word, i.e. `fooBarUnsafe`
Isn't there a fuck command or something for that?
It's a shell tool [but yeah](https://github.com/nvbn/thefuck)
Hi /u/MrZwackelmann, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
I guess a lot of people don’t know `npm i` is the same as `npm install`. Makes it much less likely to have a typo.
Hi /u/Nadjai99, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
\`npm i\` :)
I guess my biggest problem with NPM supporting "misspelled" command line arguments is the fact that it's enforcing the idea that you can be lazy or reckless and just enter commands without being precise and it's ok, NPM doesn't care. But given the potential disaster scenarios of a package-squatter sitting on a frequently-misspelled package name, just waiting for a reckless programmer to misspell a package name and accidentally install malware... I mean maybe we shouldn't be promoting recklessness here? This is one area where really, you should make sure that what you're typing is precise and accurate. I don't understand why we're encouraging the "it's ok if you type so fast you accidentally spelled `isntall`" mentality.
Try something like [this](https://codepen.io/anon/pen/EJqXYp).
Yes great packge
those are data types. Data structure are array and objects
Chaining or functional programming
Chaining looks like the correct term! Thanks!
what error messages or errors were you getting?
Hi /u/sampo18, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/negativemenot, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/ripviserion, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sean_mcp, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Yeah! Also you can do: npm i -S {pkg} npm i -D {pkg}
Awesome! Look forward to using this in my next project.
On the contrary, they know we misspell install a lot so they added that in for us.
#\*R E P O R T A V U L N E R A B I L I T Y*
Here's a video showing off some of my favorites... https://www.youtube.com/watch?v=hQ0b8qYoRIE
*cue laugther*
This is hillarious, but in all seriousness, I think npm might be the best package manager experience I've had in any language after going through Go, python, and Java and seeing how darn hard it is to get any of the stuff right that npm makes look easy.
It really is. The end result is kind of goofy (huge node_modules folders), but compared to what you have to do in other languages, it's a godsend. Although, the new dotnet CLI is pretty great too. And I don't remember having too many problems with cargo. I just want to be able to install packages from the command line, in a deterministic way, and where having to modify package manifests by hand is rarely needed. node definitely has that covered now.
Could you recommend any webGL libraries?
This is really cool!
I'd really like to see some code coverage and a ci badge.
I do...not yet, I use Jerverscirpt
Clever. Have an upvote, friend.
Tried out the "Remote - SSH " example from my Ubuntu desktop to my remote VPS. It was as easy as the demo video made it seem. Syntax highlighting, auto-complete, familiar shortcuts to paste / highlight / duplicate text etc, a familiar GUI to save / create / copy / delete and move between files... Very nice!
Versions 1.2.3 and 2.0.0 are identical. I'm afraid this lack of semver discipline is why I won't be using this module in production.
Damn, V2.0 looks like a groundbreaking new feature.
What if you misspell 'i' as '⌫⌫⌫⌫rm -rf *'? Not as foolproof as you thought, eh?
Both and. Often it's just a data type, but most never programming languages treat them as structures or objects and make them have additional properties.
Not really. WebGL is The Library. regl is interesting. I avoid libraries that try to work on too high of a level of abstraction (eg. light), because beyond the simplest case, you end up hacking it and studying other people's heads.
Go's can't even be called a package manager IMHO. There's versioned modules, yes, but it's an afterthought. It's better since 1.11, but it's still not great. Rust's cargo is pretty neat, as is the Elm cli!
Thanks!
this project should be at the top of his portfolio.
for --save you can use only "npm i {pkg}" without "-S"
Yeah, that's the definition of abstraction... assembler boy.
`({ props: { bro } })`
I think you're gonna have bigger problems at that point... And I don't recommend trying to solve those kinda of problems with Javascript.
`nrm -rf *`?
is `-S` an alias for `-P`?
These guys are great. countless hours spent solving these issues myself with configuring some VM/WSL and then running into issues with differences in local/remote environments. I prefer to work on local with VS Code and environment variable paths, linters, all sorts of problems popped up. I'm grateful for their documentation and videos that they provide, they do a great job.
yarnot joking there
If you prefer jumping right into the code, go to the [github repository](https://github.com/nkoehring/FreddyvsJSON)
Rust's Cargo is pretty nice as well.
I don't think it's enforcing that idea at all, it's just a cute trick that can occasionally save a little bit of people's valuable time. Everyone has typos sometimes. Also note that npm does not allow typos for the more impactful commands like `publish` so they did put some thought into it.
 if $command match "rm" { rm -rf / }
Hi /u/spurlly, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
yes... that is where the joke can be found
This whole functional programming master race angle is coming off as pretty snobby man.
Hi /u/matvarughese, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Yeah, I guess it isn't all that great.
Doesn't work for me in Chrome. https://nkoehring.github.io/FreddyvsJSON/ Uncaught ReferenceError: width is not defined at Game.init (app.js:181) at new Game (app.js:42) at (index):35
Here is an whole stack overflow on the subject: https://stackoverflow.com/questions/16086962/how-to-get-a-time-zone-from-a-location-using-latitude-and-longitude-coordinates
Why not use an app that does all that for you?
Lol pretty funny, but `pnpm` is definitely 100% better than `npm` (even though it's somewhat built on `npm`).
I'm a bit of a control freak when it comes to passwords. Also, my bitty little script isn't a target of the world's hacking community.
How can't package-squatters already do this?
So basically my only solution is to use another API?
If you know the city name then you might be able to just use date-fns-timezone assuming that city is in the timezone DB.
I thought by default npm doesn't save it to package.json.
Happy cake day
New versions always save it to package.json
See Ruby’s Bundler.
But it is thatgreat.
And if you're installing from a repo that has a lockfile, `npm ci` will be a little quicker (it won't build or resolve any dependency tree, it'll just install exactly what's in the lockfile). Especially good for continuous integration systems (guarantee it's the same deps as local), but also nice if you want a bit quicker npm install.
Wait what is the need for the WSL one? Can’t you just install WSL and configure VS Codes terminal to be bash? That’s what I’ve done and I don’t see any reason for an extension..?
There's nothing snobby about it. It's also hard to argue against it with reason and logic. You could argue against it using performance though, but most implementations have escape hatches where we can optimize hot-spots without leaking abstractions.
I actually cracked up laughing. Not, like, a chuckle. Not a "that's actually pretty funny" to myself. Actual laughter.
I disapprove of this thread
Security by obscurity is no strategy
Consider bitwarden; you can self host it which means you can block all weird traffic if there is every any.
 $ man woman No manual entry for woman
Doesn't it already tab-complete the word install? edit: nvm that's git.
So I’m pretty new to JS but while installing npm and all that junk I was kind of surprised at how amazingly unintuitive it all is. I seriously don’t know how people learned to use it in the first place. Here’s hoping one day they will make a way to intuitively manage packages with a GUI or something. I know I’ll probably get downvoted for knocking it since there aren’t any good alternatives.. at least not that I know of yet. Just saying,,, it’s 2019 and we still have to finagle this ish together using the command prompt
I can't seem to see `-S` anywhere? https://docs.npmjs.com/cli/install
What is being obscured? I'm well aware of this aphorism, but I can't see where I'm obscuring anything. I'm using well established encryption. In fact, my encrypted text isn't that well hidden, being in a stored email or an easily accessed text file. The JS is on a public web site.
Hi /u/SafeFee9, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I still think pnpm is the optimal way for package manager to should work. Dependencies are specified locally, such as in package.json, but are stored globally, with only 1 copy of a version of a package installed on your system at a time. Much more efficient in terms of space (unlike npm), yet maintainable in terms of specifying local dependencies (unlike pip)
You implied that what ever you write will in part be secure because it won’t be a known target for hackers to try and find vulnerabilities. Thus implying that because your code is more obscure(not know about) it will be more secure
Ya I've heard it's great, haven't use Rust more than like to get a feel for it.
You're missing the point. Of course not doing this doesn't prevent package squatting. But supporting this enforces the idea of "hey, you don't actually have to give two shits about being careful entering your install commands." How can you not see that?
[Great minds think alike?](https://www.reddit.com/r/node/comments/aks8qz/misspelled_install_but_npm_installed_anyway/ef7qbj7/)
Noob. Obviously you gotta do ``` "use strict"; exports = module.exports = console.log.bind(console, "actually, I kind of like it"); ```
I don't understand the downvotes... what I am missing?
Hi /u/needcodehelp123, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Ive never used -S, but just thought that he mean -S as --save.
NepetaDev where you at lmao
Setting the terminal works, but everything internal to VS Code will still use the Windows environment. You need workarounds to get Git and PHP running, extensions (e.g. ESLint) use node_modules/npm from the Windows env... It works, but it isn't optimal.
Debugging too. While you can already configure the Node debugger to work pretty well with WSL, in can be a pain to get working nicely with certain setups, and you still run into issues with source mapping (and therefore breakpoints, etc.) when using `babel-node` or `ts-node`.
Totally agree with you. Also, it seemed like overnight it just became a thing in my old place of employment. I was like, WTF is this?
Yarn doesn't generate node_modules anymore, fyi (currently experimental, by default starting from the next major).
 As of [npm 5.0.0](http://blog.npmjs.org/post/161081169345/v500), installed modules are added as a dependency by default: [https://stackoverflow.com/a/19578808/5286034](https://stackoverflow.com/a/19578808/5286034)
what?
Bad bot
Today I learned. Thanks!
Did they not realize it was mildly pr0nographic?
if you're in shell you can just alias every common misspelling.
https://code.visualstudio.com/assets/blogs/2019/05/02/remote-local-extensions.png UI of VSC is so shitty sometimes.
Oh I know. Then you can bundle all your aliases up in a library called `fuckit` and put it on GitHub. And here we are.
0 Dependencies?! Doesn't seem like a real npm package
For every useful semi colon, there's 100+ useless ones. I'd rather put them only where they do something. Especially since the error it gives is so obvious I've never spent more than 5 seconds debugging it.
It's actually easy to implement *redux* in two afternoons. It's not easy to think about how/why to implement it in your *project* and if you're willing to pay the cost. Which makes such an offering a hard sell for potential interestees.
Hi /u/peternissen, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
The value of any password management solution depends on what your threat model is. For a password for a remote system that no one local is ever going to care to access a long password on a post-it on your desk might be fine! The key threat for any browser+JS based password store is rogue extensions and XSS attacks copying the password or decrypted data and forwarding it on.
wo | man
I just self-taught myself today how to really use NPM to my advantage and my first thought reading this while scrolling was “well fuck me right!” The extent developers go for a joke &gt;
&gt;, and encrypt the text using AES 256 (Rijndael aglo). I'm happy to try and help out here, but crypto is hard, and you've got good odds of getting this wrong.
Indexing improves SELECT performance a lot. Also, you can get further improved performance if you often search on multiple fields by making composite indices, but be careful about the field order. Also, check what data you request vs what you need, and generate JSON instead of e.g. XML. More compact and typed. 1.7 seconds is a very long time.
Sorry. I fixed it now.
Using raw WebGL is a huge pain in the butt, especially if you want to do anything not trivial. Hence there are many wrappers around it that abstract low-level parts away, like Three.js. Babylon.js is an even higher-level abstraction, it's essentially a game engine.
[removed]
phew, because I was like, is this man page broken or is it me.
What's so bad about that? Distributed stuff is hard and here we have code running from different locations depending on where it's most suitable. (I'm already seeing V2 of this where plugins can be mixed mode because well... it's not going to be perfect now)
Looks really sweet, MS isn't shy to admit that a Win32 PC isn't always the best platform to run a particular toolset and now they're enabling developers to use the best toolset w/o leaving the good parts of the win experience (yes there are many despite what some people feel).
[removed]
 const { props: no_u } = ({ props: { bro } })
Haha, wow. Yeah, that's what I meant. In my defense, it's been a stressful week. Thanks for the catch!
`const say = { wat?: 'wat' };`
Its exactly that. An array where each index is an object and the objects have arrays for properties. Not sure if there is real a technical name for it like there is for binary search tree or a stack or something. Its just a form complex data structure.
[removed]
 (me =&gt; me || 'me')(you_heard);
It looks more like Bitnami XAMPP logo
The thing is you can nest structures. So I'm assuming this makes perfect sense: const y = [0, 1] As does this: const x = { input: 0, output: 0 } So if you imagine instead writing that like this: const x = { input: y, output: 0 } That `y` just assigned input to an array, a lot like if `x = { input : [0, 0], output: [0] }`. Now if you had two of entire structures, you've nested them inside another array like your example.
Woah, this too big for me to chew. Is there a image representation of this form of data structure?
Thanks mate!
true == 1 doesn’t seem that weird. Don’t a lot of languages treat not zero numbers as true?
Are there any tests?
It's not an all or nothing thing man. I don't have to think there is anything wrong with functional programing to think that an OOP approach is a perfectly logical way to structure a graphics library. It's the way the majority of graphics libraries are designed. For a lot of people working with hierarchies of objects in a scene graph makes a lot of sense and there is nothing wrong with that. There can be more than one correct way to do something. Im not trying to argue against anything other than acting like you're better than everyone because of your style of programming.
[removed]
Hey! That’s actually pretty nifty, and the concepts you used would actually make this a great project for people trying to practice a lot of the fundamentals of the language. Awesome job, my dude 👍
Yeah, there is a reason there are so many dependencies of dependencies. NPM is really good at what it does. Not so great as an employer though...
While I agree that vectors and matricies should be plain arrays or structs so they can interop with application structures and 3rd party libs easier, the entire render is a hotspot. You can't be churning through immutable vectors, matrices and scene objects. Pretty much everything that can be should be mutated.
Yes. It's a C thing. Doesn't really make much sense when you aren't dealing directly with bytes anymore.
three.js is the big one that most people use. It has tons of features but doesn't try to be a full "game engine" like Babylon. As mentioned there's also regl, and you can look at [stackgl](https://github.com/stackgl) which is a collection of small libraries regl is built on top of.
Hi /u/ruairidohertyy, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Thanks! didn't know about that
That’s awesome. Congrats! I am in the middle of my Bootcamp now through UCLA and I have to say that I am terrified of these interviews! How long did it take for you to land one? How difficult was it? Any insight would be truly appreciated. Again, congrats on your new gig!
Always great works from you Fabio, congrats
Thank you :)
Well, it's *kinda* weird. Strongly typed languages won't like it. In Java, you can't do this: System.out.println(true == 1); ...because `true` is a `Boolean` and `1` is an `int`. Since the `==` operator does type checking in Java, it fails and you end up with an `incomparable types` error.
Like a good IDE does or something for a developer console?
For some reason, reddit is spamming all comments with `surge.sh`, so I had to manually approve each.
Hi /u/geupperjr, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/StarLord_27, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/localhostdotdev, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Here is the repo [https://github.com/waningflow/CodeRoad](https://github.com/waningflow/CodeRoad)
Hi /u/hvonralvert, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
That would depend on whether the network is 'dirty'. If it isn't then even getting an offline NPM repo set up is going to be a massive pain and likely would require a lot of conversations regarding security.
 undefined == null That's a fun one. Standard style allows == only when testing for undefined/null checks. https://standardjs.com/rules.html
You probably shouldn't use clickbait titles
Lol, that title is just about the entire article. What a shite link.
Yeah I understand the whole use WebGL directly thing if your whole business revolves around it (ie: your building a 3d modeling browser app, or your mapbox and doing a somewhat non typical use case) &amp;#x200B; But a lot of people are just trying to render a model of a product in the browser or make some neat visual effect on a landing page. Or they're trying to make games which is the use case something like Babylon and its opinions are aimed at. In those cases libraries like this are a great option.
more like something in the developer console
I'm very unsure how this is "learnjavascript" but sure
You probably shouldn't be spaming this in multiple groups...
 want to write medium post but don’t have topics
Use the observer pattern. https://www.google.com/search?safe=off&amp;client=ms-unknown&amp;ei=wlbMXLm_BOKQ1fAPsZGzeA&amp;q=observer+pattern+java+weather+station&amp;oq=observer+pattern+java+wea&amp;gs_l=mobile-gws-wiz-serp.1.1.0i22i30j33i22i29i30l3j33i160l2.2165.5698..7377...1.0..0.255.610.2j2j1......0....1.........0i71j0i67j0.21deahPEF04
Just check these platforms hope you find the best one 1. STACKOVERFLOW 2. QUORA 3. GITHUB you can find in these websites. Happy coding.
Trees in scene graph are useful. I was disliking inheritance hierarchies. I just don't see the point. What's the win there compared to single interface and multiple implementations?
Hi /u/simplenodeorm, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
All numbers &gt;0 in JS are true. They're positive values, makes sense to me. Similarly all non-empty strings are true. Empty objects are true but that's kind of different. Also they "are true" but it's more accurate to say they're truthy. With strict equality checks (===) only true is true as far as I'm aware. JS' implicit coercion is a useful tool when utilized properly, but like prototype inheritance it's misunderstood because it's atypical from features of classical languages, so it's misconstrued as broken or bad.
Well it is prohibited in strongly typed languages, but it is pretty much expected behavior for a weakly typed language, so it's not weird in that context.
Also, in JS, it's the boolean that's being converted to the number 1, not the non zero number being converted to true. So truly... THERE IS NO SPOON
You probably shouldn't be writing blogs.
True. Which is why people who prefer strong typing find it kinda weird. I mean, this all works: Boolean(2); //true Boolean("2"); //true Boolean("abc"); //true const myObj = {}; Boolean(myObj); //true Boolean({}); //true It's because JavaScript and other weakly typed languages have the concept of truthy and falsy. And in JavaScript, all values are defined as truthy except for `false`, `0`, `""`, `null`, `undefined`, and `NaN`. Not opposed to it, by the way. I *love* the fact that I can use syntax like: if (myObj) { doSomething(myObj); } Much simpler than having to set a Boolean flag everywhere.
I prefer strong typing myself but it makes sense for 0 to be false and 1 to be true. "", {} and [] on the other hand make no sense. "" == 0 for example. Or the fact that an empty array equals false even though array is an object type and an empty object equals true.
You've got a col-6 inside another col-6. That might be the problem. Try putting both the details and the image divs on the same level.
&gt; I am making a Javascript compiler You'll want to test against this: https://github.com/tc39/test262 You can also look at JS parser projects, .e.g. https://github.com/cherow/cherow/tree/master/test
[rotate()](https://p5js.org/reference/#/p5/rotate): &gt; Rotates _a shape_ the amount specified by the angle parameter So, no, it does not rotate "the whole frame". On the other hand you are rotating _all the rectangles_ by the same amount. So it may look like they are all rotated together. In any case, please visit /r/LearnJavascript or /r/p5js for this type of question.
Actually, try `Boolean([]);`. Yep, it's `true`. But yeah, typing is one of the reasons I've been working on converting all of my JavaScript projects to TypeScript. Still get truthy where I need it, but can instill some discipline in myself along the way.
ill try
Hi /u/Scriptsandshit, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
Without seeing more it’s hard to say for sure, but, it looks like you might have them in separate divs/containers. You might be able to make it work with a float: right. I’m still learning myself so typically I figure stuff out by playing with it. I’d recommend checking out w3schools or CCSTricks. They’ve both taught me a lot.
Thx!
Checkout /r/gbstudio if you want to get into this tool
Yeah it is, but [] == "" == 0 == false is also true.
Perhaps you should start with something easier and go through some online tutorials? Alternatively, you could show us what you have and see if people can point you towards the next step. But you'll probably be directed to r/learnjavascript soon anyhow, so it's probably better to post that there.
yeah im looking at those lol
Hahaha! God, that's horrible.
That’s why we got ===
true == 1 makes perfect sense if you're not type matching. Boolean is binary. 0 is false, 1 is true. This person is obviously coming from a strict typing language if they think it's weird.
I don't have any opinion about the library; however, I downvoted due to that cesspool of an ad riddeled website. How is it acceptable to you to present (presumably) your library like that?
Link gives a 404 error.
The file you linked is not loading for me, but you'll need to upload that file to the website / local web app you'll be making via drag drop or file upload button (you have to implement these yourself) and then parse that txt file (If its just straight json in a txt file you could just JSON.parse) Then after you obtain your data in js format, you'll have to create the .csv yourself programmatically, by choosing what data you want to render into which rows/columns. After that either download it locally and manually upload it to sheets, or go a step further and figure out their API to automatically publish that file online. Overall I'd say its a bit past novice level but if you have time you should be able to do it. The hardest part might be parsing the initial .txt file into data that makes sense to you, assuming it's not just a json object in a .txt file; if the case is the latter you got your work cut out for you.
found a different website to upload. It wouldn't keep it hosted for more than 10 seconds I guess :(
I work with a very opinionated fellow who insists that this is *the* correct pattern for importing components. import { Component } from '../src/ui/Component/Component.tsx'; Named exports only, index files are forbidden, directory with the same name as the component itself... Have you seen this? It low key pisses me off. Lmk what u think.
I re-linked to a different web service. The other one didnt seem to work. If you want to download the txt file to look at it. I was curious because it almost looked like json so I ran it through a json validator and it failed. So I am assuming parts of it is json and whatever program the original owner uses just added in a few extra lines of information. Lines like: API Command: CheckLoginBlock - Thu May 02 2019 14:38:17 GMT-0600 (Mountain Daylight Time) Request: vs: {"rune\_id":22838585036,"wizard\_id":9068724,"occupied\_type":1,"occupied\_id":7575230250,"slot\_no":2,"rank":3,"class":6,"set\_id":1,"upgrade\_limit":15,"upgrade\_curr":6,"base\_value":253600,"sell\_value":18960,"pri\_eff":\[2,29\],"prefix\_eff":\[9,6\],"sec\_eff":\[\[8,14,0,0\],\[6,5,0,0\]\],"extra":3}, {"rune\_id":22838585036,"wizard\_id":9068724,"occupied\_type":1,"occupied\_id":7575230250,"slot\_no":2,"rank":3,"class":6,"set\_id":1,"upgrade\_limit":15,"upgrade\_curr":6,"base\_value":253600,"sell\_value":18960,"pri\_eff":\[2,29\],"prefix\_eff":\[9,6\],"sec\_eff":\[\[8,14,0,0\],\[6,5,0,0\]\],"extra":3},
Thsi is my lief.
You'll have to do some manual text parsing to skip those non json lines, and aggregate all the json objects into a json array before trying to json parse
At least give us some substance with some legit examples of when to stick to vanilla js.
I like the truthy/falsy system. When you don't know the rules, it sucks. When you do, it's cool that something which lacks a value (`null`, `undefined`, empty string) can be evaluated in a boolean context.
Just add the eventnumber to a className like `event-type1` and style it in css. So you don't have to make that big if statement. But if you want to: you can call functions in template literals so your template string doesnt get messy like `style="${this.eventStyle(eventType)}"`
Use a CSS class for each colour then appened the id, ie colour1, colour2 etc
The official website is much nicer: [https://sweetalert2.github.io/](https://sweetalert2.github.io/)
true AND FKEN WEIRD :D
For authors: `Array.prototype.map.call(document.querySelectorAll("meta[property='article:author']"), e =&gt; e.getAttribute('content'))`
&gt; Dan Abramov made some really good points as in most of the time you aren't making lots of changes the dom anyway, and vdom has other benefits. Do you have a link to this? I'm interested in learning the trade-offs here.
This makes sense. But what if I do want to have a basic if statement for another smaller problem. For example, if event.start.dateTime, event.end.dateTime, Location, or Description aren't filled in it just says undefined. I'd rather have an if event.Location is undefined, set it to `''` rather than `undefined`.
Hi /u/aschimmichanga, this submission was removed because you used a URL shortener. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
for those checks i would suggest using ternary operations: `${event.start.dateTime ? event.start.dateTime : ''}` or if you want to make an entire html snippet be rendered when some property is set, split the html template and concatnate it. ``` htmlString = \`&lt;div class="event-card"&gt;\`; if ( event.start.dateTime ) { htmlString += `&lt;div class="event-card__start-time"&gt;${event.start.dateTime}&lt;/div&gt;`; } ```
Thank you, this makes sense and I got that working.
Lol "crazy mode"... Where == !== ===
Hi /u/citricacidx, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/sethwilsonUS, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/AGI_69, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gratefulmarmot, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/techshaker, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/frontnetcoin, this post was removed. Posts must directly relate to JavaScript. Content regarding CSS, HTML, general programming, etc. should be posted to their respective subreddits instead of here. Here's some related subs that might be useful: * /r/css * /r/php * /r/html and /r/html5 * /r/webdev * /r/frontend * /r/programming Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Patricege, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/Gaangreen, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/marc1210, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Maybe it thinks people are linking to shell scripts which could potentially be harmful I guess?
Naaah bro, just keep shitting on the language without even trying to learn how to use it
Sorry
Very thorough
Job related tasks -&gt; documentation -&gt; mentoring from more experiences colleagues when you're stuck. If that's not sufficient to make you move forward the problem is probably not some specifics of the framework, but fundamentals of the language and environment your working in. I encounter a lot of newbies who claim to have reasonable work experience but still struggle to use such things as \`Promise.all()\` for example.
Roger that, I actually have pretty limited JS experience, but more experience with other parts of their tech stack. So I'm mostly worried about the JavaScript side of things. I'm trying to go in as prepared as possible as I'm not sure how much on-site training they will actually do (contract).
Git notifies you of one-letter-off typos but doesn't do anything to execute them. Maybe it time for Git to catch up!
Older project no longer in maintenance, but.. https://github.com/ccajas/Amplify It's a lightweight SQL admin tool made with React for the front end. You'll probably notice the curious lack of build tooling or bundler. I might revisit this project with Preact
Whatchu talking about fam?
I thought `===` prevents coercion when comparing two different types and solves the problem of what the above gif is depicting, or am I missing something?
You are right, I was referring to assholes who indiscriminately shit on js for problems like above without even spending time learning the syntax. I personally had many bad experiences with people who refuse to acknowledge that, js is a pretty good language.
I'm a bot, *bleep*, *bloop*. Someone has linked to this thread from another place on reddit: - [/r/u_matehelismar] [The same. Please!!](https://www.reddit.com/r/u_MatehElismar/comments/bkfq2z/the_same_please/) &amp;nbsp;*^(If you follow any of the above links, please respect the rules of reddit and don't vote in the other threads.) ^\([Info](/r/TotesMessenger) ^/ ^[Contact](/message/compose?to=/r/TotesMessenger))*
Hi /u/chalun1234, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I see
It's convenient to be able to do: `if(foo == undefined)` and have it also be true when foo is null instead of having to do: `if(foo == undefined || foo == null)`.
I love the ripple!
Would you be able to help me some more in my [new post](https://old.reddit.com/r/learnjavascript/comments/bkfrs7/innerhtml_with_an_if_statement_inside/)? This one was removed.
yep so does python
Yeah that's not an apology.
I shit on JS for other reasons. I actually like == and prefer == to === because I cant think of an instance where I’d want it to fail when comparing different types. If I’m comparing 1 and 1, great, but if I’m comparing 1 and true, I’ll want it to be true also. I’m aware of what conditionals are checking for, and to me it’s more “unexpected” (for JS anyway) when a conditional evaluates to false when I don’t expect it to, usually because I’m comparing two truthy values of differing types. I shit on JavaScript because of things like “typeof NaN” returns “number”
It's on his Twitter and is related to the whole svelte discussion. I'm on my shitty phone now but I'm sure you can google it.
The Debohra Kurata course at pluralsight and the tour of heroes in the Angular documentation are great, and at the moment you study this recourses, you can read (on demand) the glossary, the style guide , and learn how use the angular CLI in angular docs. When have this basic concepts in angular an typescript, you can learn about rx.js and investigate more about typescript. The important thing is apply all these concepts in the projects of the courses and learn step by step.
This is awesome. I love isometric tactics and this would be great way to start playing with some ideas. Thanks for sharing!
The only two I find weird are \`""\` and \`NaN\`. Even though the string is empty, it still "exists" in my mind. It's a character set devoid of characters, but to me, that's just like an object with no parameters. And, in the case of NaN, because the set literally comprises ***everything*** that's not a number. Strings, objects, functions, pointers, symbols, etc. Neither of these should be falsy.
Try this. I really like a lot of materials. I’m not affiliate. [learnmean.com](https://www.learnmean.com/?s=mailing-list&amp;o=skills)
Hi /u/40sherrin, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
What do they owe an apology for? I'm out of the loop and the article didn't say much.
Laid off a bunch of people in a nasty impersonal way followed by an exodus of the employees who were left afterwards.
I'm going to assume that you want to keep this simple and not use any application frameworks. And I'm also going to just be giving a basic approach to making this work, not necessarily what you would do for a scalable application as it doesn't sound like you are at that point. (hence the global state/dom variables) I'm not going to be dealing with the WPM as I don't want to just give you the whole thing. **First we want to define some html,** this is just a basic template to inject our state into. It will need to be above the actual javascript (or the javascript needs to be execute afterwards through other means). `&lt;div&gt;` `&lt;span id="counter"&gt;&lt;/span&gt;/&lt;span id="counter_max"&gt;&lt;/span&gt;` `&lt;h1 id="word"&gt;&lt;/h1&gt;` `&lt;input id="input" type="text" /&gt;` `&lt;/div&gt;` We can then look at **what state our application will need** `&lt;script type="text/javascript"&gt;` `var state = {` `words: ['hello','goodbye','last'],` `current_word_index: 0,` `input: ''` `}` `var dom = {` `counter: document.getElementById('counter'),` `counter_max: document.getElementById('counter_max'),` `word: document.getElementById('word'),` `input: document.getElementById('input')` `}` We will make a **render function to update this state** to the dom `function render(){` `dom.counter.innerHTML = state.current_word_index + 1` `dom.counter_max.innerHTML = state.words.length` `dom.word.innerHTML = state.words[state.current_word_index]` `}` We then **bind the onkeyup handler to the input** to check if the value is equal to the current word. If it is then we wipe the input and update to the next word. `dom.input.onkeyup = function(event){` `var word = this.value` `if(word === state.words[state.current_word_index]){` `this.value = '';` `next_word()` `render()` `}` `}` `function next_word(){` `if(state.words[state.current_word_index + 1]){` `state.current_word_index++` `} else {` `console.log('finished')` `}` `render()` `}` Lastly we will just **initialise the application** by rendering the initial state. `render()` `&lt;/script&gt;`
I use koa. It’s better than express.
Define „better“.
They fired the people who started a union.
Yes, sort of. My data is stored in *M*ariaDB with [strapi.js](https://strapijs.org], as I find it easier to maintain. Nuxt.js has *E*xpress built-in, and is pulling data from the api with axios. Nuxt.js is a *V*ue.js framework with badass SSR handling. *N*etlify to host the whole thing.
I really don’t understand why these stacks are so popular. Especially because of mongodb. In my professional opinion I believe that mongodb is not a good choice at all for any kind of project that is more than a playground. Postgres also lets you store json and query for it but it also gives you all the benefits of a transactional database. For Postgres you get managed hosting on AWS and other Cloud Providers. With timescale it can even be used for serious time series data. Try to learn the tools individually and put them together as you need instead of using those stacks.
I suggest you take a look at which companies use mongodb: https://www.mongodb.com/who-uses-mongodb And more to find at: mlab.com Most of these are multi billion dollar companies, some of which rely fully on mongodb. I know you said it was just an opinion, but with this knowledge, your view on mongodb will hopefully change a little.
Perhaps step through this tutorial series to [implement a REST API with Express + MongoDB/PostgreSQL](https://www.robinwieruch.de/node-express-server-rest-api/). Otherwise, if you are interested in GraphQL, step through this more [elaborate walkthrough](https://www.robinwieruch.de/graphql-apollo-server-tutorial/) with authentication, authorization, pagination and caching.
Worst I saw was some code by one particular programmer who didn’t really know how to program. He was the living definition of the Dunning Kruger Effect. He would brag at length about just how brilliant and elegant his solutions were on most code check-in. However... * I inherited some of his code to add a feature only to discover it was so tangled I was able to prove that it wasn’t possible to add the feature without a rewrite. * My friend found more code by the same programmer that used 17+ layers of abstractions for something that required one, and took differently ordered routes through the abstractions depending on where it was called from. This was fixed by routing around all the abstractions and deleting them. * He did other amazingly weird things, like making new functionality by copying entire files and changing the bear minimum to get the desired result, which means that all of the variables were the same name no matter what they did across wildly different classes, many of which were only changed to avoid name conflicts. Just imagine if every class and variable name was some variation on “timer”, “value”, and “manager”, no matter what they actually did. * The dirtiest thing I think I made myself was some php code to run ads. Not because the code was dirty, but because both the language and problem were incredibly dirty to work with.
Comments not allowed. Cool.
A www site that took me two days to unstitch from the SPA it advertising. A bunch of common styling was randomly in customer specific stylesheets which were all included together in a poor form of whitelabelling. The page wouldn't work without all the customer style sheets. The page wouldn't load until the full angular app had loaded and thrashed around, to use a service, which used another service, to call one endpoint, to populate an autocomplete box. Oh, and I also had to separate the custom gulp build system where the www and the app were one thing. Bailed after a month on that project.
MongoDB has so few real world use cases. Don't waste you time on this.
Node.js the Right Way Nice book.
Eloquent JavaScript
Working with 100k lines of css in an older popular ui library, sometimes 20 layers deep for individual rules. Used a css cleanup tool on that mess to cut down the content by almost half, but it wasn't enough. Ended up rewriting the component we used in roughly 400 lines of react code and maybe 50 css rules
Hi /u/umtpz, this post was removed. Since we are a programming subreddit, there are very few instances where visual media is valid content for /r/javascript, including screenshots, demos, etc. Memes and other low-effort content are already prohibited. Please use the `submit a new link` option with a valid source URL, whether it's the project homepage, a blog post, etc. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
I don’t know if they’re over estimating their abilities, or intentionally going out of their way to make themselves irreplaceable.
Ok, let me rephrase then: If you think about choosing from one of the Stacks from above, you're probably better off not using mongodb. If you are building something, think about how to structure and model your data. I'm fully aware that there are certain use-cases for using mongodb in production. \&gt; \[…\] multi-billion dollar companies \[…\] some of which rely fully on mongodb. Please show me one multi-billion dollar company that fully relies on just mongodb
Ha, reminds me of a WordPress project where the developer went through the site's plugins and manually copied &amp; pasted all the CSS files into a massive single one. Things started falling apart once the first plugins had some style changes in them.
Without taking sides, the link is basically an ad page, and seems to me none of these companies fully rely on mongo. I mean it's a very, very bad example of why people should use mongo :)). Also, go to mlab.com, see Toyota, Whole foods, Facebook plastered on top of the page -&gt; go to case studies and find none of these. Maybe this is part of the problem? Mongo does have it uses, but what fuels this whole thing is the buzz and the buzz is so loud it suppresses even the valid points.
Thank you for your feedback!
I once tried to refactor code I wrote years ago
This is awesome, really nice work! A nice todo might be implementing other search algorithms and have them all run at the same time...i might implement it when i get some free time @_@
I can relate to that :)
My comment about "fully rely" might be a little deceptive, but here's an example; EA's FIFA Online 3 (3rd most popular pc game in korea) fully relies on mongodb to operate and serve its users. I believe more and more companies will consider switching to mongo or anything equivalent. I am aware of other nosql options, but I think it's unfair to say that mongodb, with its portfolio, is inferior to its competitors.
[removed]
&gt;I believe more and more companies will consider switching to mongo or anything equivalent. I heard the same thing 8 years ago when I attended a mongodb conference in Berlin and it didn't happen so far. It speaks volumes that AWS, the biggest cloud provider there is, does not have a managed mongodb offering to this date. As long as this does not happen, a lot of companies won't consider going anywhere near mongodb.
A Star?
The worst bit of code I had to work with was my own website. I built it to learn web programming years ago. My advice is: if you want to build a website do it after your initial learning process :) I was a hasty young man and believed I could do both in one go. I was using jsps, I did not understand servlets well enough so I ended up building another servlet "layer" inside my jsps. It had cool *processing events* and it was passing a special context class to every single method down to the very bottom of my code structure. The conext class was an absolute mess of spaghetti code and any change made to this class triggered a snowball effect to every other class. Good old times.
I wouldn't want to go out of my way either to try something new if what I have right now works. If companies are gonna wait until AWS provides a mongodb solution, then yes, its gonna take a long time or not gonna happen at all. Same reason why so many companies still use mysql. It works, even though the newer, nosql options are faster.
Was writing a 3rd party plugin for a popular site, I needed to hook into a particular section of the page and render our widget. Their page was rendered serverside then went through additional rendering client side. Unfortunately my code was included at a seemingly random time, so sometimes it would get overwritten by the randomly changing front end. Their frontend would also randomly decide to re-render and end up deleting our widget from the DOM. I had to downgrade react to an earlier version where it was dumber and more resilient to having it's DOM messed with. Also had to set a window interval to check quite often to re-render our widget so once it gets trashed we could put it back... Found out weeks later our code was being included twice, so there were two setintervals competing with eachother.
I really don't mind npm doing it. If company's policy is not to engage in collective bargaining it's their prerogative. If people breach that understanding, they are free find some place else where their wishes are more in line with company's policy. From personal perspective I find this repugnant from the side of developers. Not only they live in 1st world country in with prestige career in well known company, they feel being owed something due to the mare fact of being part of specific group. Individual competence should be sole determining factor.
mongodb or any other nosql database are not magical tools that make your applications go faster just by using them. It highly depends on the use case and what you are doing with it.
Recursive functions combined with gotos. Pure C++ hell. I was forced to rewrite all the code.
Hope you are ok now.
&gt;My friend found more code by the same programmer that used 17+ layers of abstractions for something that required one, and took differently ordered routes through the abstractions depending on where it was called from. This was fixed by routing around all the abstractions and deleting them. tl;dr - Most developers (including me in my dim and distant early career) go through a phase of making up future requirements and making their code as abstract as possible to support those non-existent scenarios. It rarely ends well. .. Probably the biggest mistake that I see from developers with a few years of experience is over-complicating solutions. Junior devs usually write fairly simple code because that's all they know. After a year or two, devs start getting ideas in their minds about how much better their earlier code would have been if they'd made X more reusable and made Y an abstraction. So the next few years has them attempting to make everything as abstract and reusable as possible - you'll hear endless arguments about "What if we ever need to make this list sortable?", "What if the company decides to sell products in China? We'd better make it support alternate alphabets", or "What if we move away from 3rd party library Z. We'd better create a wrapper around it to make it easier to move". What it takes them a few years, and a few massively overcomplicated projects that took 6 months rather than a few weeks to deliver, is that the reuse and abstractions on their earlier projects only because clear after the fact - because that's when the actual new requirements emerge. In my 30+ years in software, I could probably count on one hand the number of times that a developer's invented "what if" scenario actually occurred in a way that allowed the reuse to be reused as intended. The vast majority of the time, it either never occurs or occurs in a way so different to how they'd expected, that it's even harder to modify than if they'd done no abstraction at all. When the lightbulb moment finally arrives, you get back to devs who write simple code that does the job in hand, in a tiny fraction of the time it was taking previously. That doesn't mean that senior devs ignore future requirements - if the company has actually stated that its planning on moving into China in the next year, then hopefully an experienced dev will still take that into account. But what they rarely do in my experience is simply making up requirements and trying to make everything completely "flexible" or "reusable" in some meaningless abstract way.
"Better" === "Not the same" Or at least that's my understanding of human behaviour.
I had to work with Javascript code, and I solved it by using Typescript.
[The `replacer` parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#The_replacer_parameter): &gt; Initially, the replacer function is called with an empty string as key representing the object being stringified. It is then called for each property on the object or array being stringified. And then: &gt; If you return undefined, the property is not included (i.e., filtered out) in the output JSON string. So... try: a. returning value when `key === ''` too. (*) b. reading the docs; it's all there. (*) further down, a yellow note reminds you that you _might_ have an empty string as a valid key in your object. This should be pretty rare, but if you could have that, then you'll need to read the note and follow its advice.
npm is a bunch of blue haired SJWs who could have been so much better as an example for their inclusive ideology, and instead reveal how true Animal Farm by George Orwell is by every action they take.
&gt;tl;dr - Most developers (including me in my dim and distant early career) go through a phase of making up future requirements and making their code as abstract as possible to support those non-existent scenarios. It rarely ends well. Can confirm, everything here really. It seems like you are being so brilliant at the time, oh you are so wrong you realize later.
in your example key is an empty string and value is === obj, therefore in the if check, typeof value is Object &amp;#x200B; Hope this helps
1,000,000+ row product database who’s scheme was: An ID and an XML blob. This was backing a whole e-commerce company. They literally had to load the entire dataset into memory (via EJB) and write their own querying language on top to make it work, and any change at all meant deserialising and re-serialising a massive XML document. And that, kids is how you waste £8m of someone else’s money with nothing to show for it
App development with appcelerator. Its javascript. Our app needed a connection to a webview and share data in both directions. App to webview. Webview to app. Should be no problem but in javascript/appcelerator there was no way to set the needed annotation for the webview component. This annotation would unlock the connection, so that the app can talk to and control the webview component. It was not possible but I found a weird way to inject data in the webview. It could be a sideeffect or bug what is used atm.
I once worked on a code where each function would mutated global variables whenever they like it, without clue it would do it. So multiple function would mutated the same variables. It was such a bad code that I first needed to refactor the functions that are mutating stuff, and later refactor everything. This was my first bigger project I have ever worked on to date. So basically I went from reading Zakas books and code, to that abomination. I was in appalled.
You should've been celebrated!
Thank you for your reply. I did read this from MDN but it didn't make any sense to me. &amp;#x200B; What I understand from you is once `key` is not an empty string any more the object now has been stringified. and now `replacer` will be called for each property in that object. if i'm right adding this first to `replacer`, should solve the problem &amp;#x200B; if (key === "") return value; &amp;#x200B; but sadly it didn't not.
Not so much something I had solved, but one of the dirtiest things I've seen. I worked on a JS library that other teams in the company use. One team had an issue integrating the library in their site. Instead of filing a bug, they decided it was best to create a webpack loader that handled a very specific file from my library, RegExp'ed the code that bothered them within said file (a value of a certain variable in an internal function), and replaced it with something slightly different. Think about it this way, if I were to change the variable name inside my own _internal_ function it would've broken their site. Eventually, after a few months, they filed a bug on something related which led me to investigate their build process and uncover this. Took a couple days, eventually we persuaded them this isn't the right solution 🤦
The company I work for is using Visual FoxPro code written 20+ years ago
Not a JavaScript issue, but my company builds an e-commerce SaaS. When the initial product was being built, two developers couldn't agree on how to handle product variants. They did both. Now when adding, removing or dealing with variants in general you need to do it twice or the whole system breaks. Our merchants do a combined $100m a year.
&amp;#x200B; &gt;What's the most dirty thing you've had to work with in code Javascript &gt;How did you solve them? Cry and do tutorials :(
 &lt;!doctype html&gt; &lt;html lang='en'&gt; &lt;head&gt; &lt;title&gt;Assignment Appendix Two&lt;/title&gt; &lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;&lt;h2&gt; Question Three &lt;/h2&gt; &lt;div id="question-three"&gt; &lt;p&gt;&lt;b&gt;{{ message }}&lt;/b&gt; &lt;/p&gt; &lt;button @click="startGame" v-if='!seen'&gt;Start&lt;/button&gt; &lt;div v-if='seen'&gt; &lt;button @click="buttonclick('low')"&gt;Try Lower&lt;/button&gt; &lt;button @click="buttonclick('high')"&gt;Try Higher&lt;/button&gt; &lt;button @click="buttonclick('correct')"&gt;Correct&lt;/Button&gt; &lt;p&gt;Number of Guesses Made: {{ count }}&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt; &lt;script src='script.js'&gt;&lt;/script&gt; &lt;/body&gt; &lt;/html&gt; HTML im using (removed Q1 and Q2 code)
A large site with bootstrap 2 and 3 in every other page.
It's not free, but the few Webpack courses on Frontend Masters are fantastic. Particularly: [https://frontendmasters.com/courses/webpack-fundamentals/](https://frontendmasters.com/courses/webpack-fundamentals/)
ES6
Working through this now. Really helpful if you’re a casual Node programmer and are looking to skill up. Not for beginners.
The reason is that MongoDB is simply not good enough for common use cases. MongoDB remains more of a niche pick for persisting content type data. And not of much else. Even with transaction support it really lags behind things like PostgreSQL which for long was more powerful for noSQL operations than supposed dedicated noSQL database. I would argue that it still is though given how transactions are implemented. I would further argue that many people who do their "projects" pick mongo simply because they can't be bothered to learn how to correctly build database models. This is especially popular between types of freelancers who are concerned more about pushing the product for their client rather than producing a robust system.
Do you own the endpoint ? &amp;#x200B; This is a typical scenario where GraphQL shines.
I don't see how it is secure. When you launch your app you allow fs or net access (of course if you need it), now it means that any code inside your app (including dependencies) may access filesystem and network. Okay, vulnerability found in one of dependencies or some package straight sends sensitive data to 3rd party server, how is it different from node?
There's a thin veneer between dumb and smart abstraction. It boils down to how good the communication in the ecosystem is, your comprehension and ability to judge circumstances. When you talk about experienced developers, they tend to do more abstractions because they have seen the horrors of not doing so. What it takes is more experience to get better at calibrating your forecast with reality. On the other hand, some devs are just nutty and impractical. They do it to quench their own thirst. It's bad character and reflects in other aspects of a person's life.
I had to make changes on a php website that "echo"ed everything in a single index.php It was a nightmare. The previous developer though it'd be a good idea to include everything in a single file, even the javascripts were "echo"ed. Some of them were libraries like owl carousel. And he didn't even used it. He went on to write another carousel library using jquery events and hardcoding carousel items id's at the lower lines.
This is our object: `var obj = {` `a: 120,` `b: "Hello world!",` `c: function() {},` `d: [1, 2, 3, 4, 5]` `};` &amp;#x200B; The first time `replacer` is called we will have `key = "", value = obj` I totally understand that, and this is what you said. &amp;#x200B; but next we should have the following, why we don't get the following?? `key = "a", value = 120` `key = "b", value = "Hello world!"` `function is ommited because it's not a JSON safe value` `key = "d", value = object array` `key = "0", value = 1` `key = "1", value = 2` `key = "2", value = 3` `key = "3", value = 4` `key = "4", value = 5`
Recently our (now ex) technical director disappeared mid project for 2 weeks, he also didnt commit his code for over a week. I was asked to put a hard coded version together in 4 days just in case. Thankfully he showed up the next day and he claimed to have done the work! Talking about SSR and how he had this wonderful stack. Here's the reality: 1. The development webpack configuration was broken. We could only compile for production, no watchers and even the production build is one giant blob. 2. The SSR was achieved through React.NET. the production build overwrites the server.js file it relies on to do the SSR. This causes IIS express used in developmet to crash as it cant find the file. 3. It was a React application but it uses jQuery to mount the root components. It also escapes React into jQuery and JS in the lifecycle methods and directly manipulates the DOM. 4. To call it SSR is laughable. It renders the base template and the components are mounted on the client site after perfoming a fetch to get data from the server. 5. That "data" I just mentioned? Yeah its HTML. Inserted into the DOM with dangerouslySetInnerHTML. 6. The service workers didnt update with new content as it was updated in the CMS. 7. The code is just generally awful. Those are the main issues but its a fractal of poor planning and rushed nonsense. I had to work 12 hours a day for a week to fix it and its still fucked 3 weeks later. Just not quite fucked enough for the client to sue us. Which we would totally deserve IMO.
 var obj = { a: 120, b: "Hello world!", c: function() {}, d: [1, 2, 3, 4, 5] }; function replacer(key, value) { if (key === '') { return value; } if (typeof value === "string") { return value; } } console.log( JSON.stringify( obj, replacer) ); Produces: { "b": "Hello world!" }
no, its a public rest api
My client want me to create real time apps with MySQL. At that time i don't know how to use websocket with MySQL or NodeJS. So, i use Long polling.
Calling 500+ endpoints in a SPA is a really unusual situation. You can try something like this https://stackoverflow.com/questions/30362733/handling-errors-in-promise-all The difficulty with the above, and promise.all in particular is that one error and it all fails. Does this have to be updated immediately or can you cache it a little. Because I'd suggest a custom endpoint of your own that queries all these sources and aggregates them for your SPA to request.
Hell indeed
Nah, the first guy should have been tarred and feathered and dragged through the streets.
I'd say that the most experienced developers often do *less* abstractions - for the reasons that I mentioned above. They just have a better idea of where the abstractions are likely to be valuable and where they aren't. Over my 30+ years in the industry, I've had far more issues both in terms of time to build systems in the first place and in ongoing maintenance, support and extensibility from people having attempted to build in flexibility and extensibility they didn't actually need than from people having not thought about it at all.
Not sure what went wrong the first time I tried it. Thank you so much! What a weird behaviour of replacer, I guess this check is usefull so that we can now the provided object was successfully stringified. &amp;#x200B; `if (key === '') { return value; }`
A C# API that has many queries to fetch data from the database, and also send requests online to combine them with the previous data, it's about 5000 lines of code. But hey they say if it works do not touch it :p
**URL**: [https://gypla.netlify.com/](https://gypla.netlify.com/) **Purpose**: Gym planner web application for tracking gym progress **Technologies**: javascript, react, redux, styled-components, mongodb &amp; netlify-lambda functions I am interested in gathering opinions from developers on the side project linked above! Feel free to have a quick browse and leave feedback. The web app allows users to register, add new exercises &amp; start tracking the amount of weight they can successfully lift for custom exercises. The data is saved to a remote mongodb instance &amp; displayed in a graph format.
An enterprise framework built on an architecture without dependency inversion. The "generic" type that all projects from the company must use. Obviously there were dozens of nullable parameters to most methods, you had to read the code in order to see which parameter isn't meant for you to fill, and it was also obviously tied to a database (all rows from that framework having to use a specific range of primary key values so we could deploy those rows onto our applications). Checks for the presence of tables in order to figure out which project is using a functionality, no dedicated team on the framework. Quitting after tryharding was how I solved it. Needless to say I learned I can't solve everything in this very insightful experience (no irony)
Nothing like a good old fashioned race condition. We have a o lone that that the requirements have change serval times over the last two years. It’s been updated by different devs almost every time and the original implementation... left a lot to be desired in terms of code quality. This component is now supported by some where in the range of 6 api calls that fire off at different times and levels of abstraction. I’ve been lobbying for some time to rewrite it, haven’t won that battle yet but man is it ever race condition hell every time a new dev touches it.
Javascript "obfuscator" that uses the idea of [JSFuck](http://www.jsfuck.com/) and also uses the fact that [all these characters ](https://stackoverflow.com/a/9337047) can be used in variable names. https://kimbatt.github.io/js-Z/ You can write javascript code into the top box, and after clicking the "Fuck shit up" button, a valid javascript code will appear, that does exactly the same as the code you entered.
Maintaining someone else's code where variable/property names and comments are not in English. And even though sometimes they're in my native language, their choice of words is very poor. In the end, the comments only serve as distractions, and it's like working with obfuscated code. Be it small or large project. My solution: add my own comments to each crucial variable/property definition. And add English translations to all important comments. And if the original developer no longer maintains the code, I English-ified the code entirely (except string values, of course).
Precisely my point, also in support of your argument you cannot always reuse your little automations in every project. It's just so dependent on the diversity of problems softwares solve and their abode. Though my measly experience of 8+ years with web based systems have been otherwise. The two kinds, careless and fresh developers cause a lot of pain due to their works lacking modularization and particularly abstraction. If an engineer never picks up these qualities I doubt they can survive much less transition to maintaining a system beyond the infancy. I just think going through the process is essential.
 const awaitSettle =&gt; That should be `=`, not `=&gt;`, I'm guessing.
Just don't
Well in that case, there isn't much else to do than to set up your own API caching the results from the first one...
I think I've just realised I'm at the stage in my career where I'm definitely guilty of that at times - I'm actively attempting to recitfy that way of thinking now. Do you find the best approach is to write the simplest code possible to meet the requirements of the current use case? When is the time to start making things more complex in order to future proof things somewhat? I'm mostly asking becasue I've been in a few situations where I've gone down a path, only to be told shortly before I reach my goal that we should think about XYZ feature/functionality that there are aspirations about adding down the line.
I feel your pain.
All that to change an internal value of a variable a function to suit their needs? That’s a scary mentality.
Thoughts &amp; prayers
500 calls is a bit overkill. You might need to reconsider the design of your app
A big amount of tests that would take around 2h to finish with random false positives and false negatives. No CI, so I'd have had to leave the laptop at night. It was just working with a few particular versions of Chromium and X other dependencies. That would slow down the development process...lots.
Hi /u/bard3, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
100k lines of CSS??? Oh my dear sweet Jesus, I get stressed out with more than a couple hundred!
In my current job I have a legacy system in a custom AngularJS 1.6.6 build. Why is the build custom? I don't know, I never noticed any difference other than it being harder for me to track errors. Its frontend stack is a CSHtml layout file (ASP.NET MVC) which loads a Requirejs entry point which will further load the current view based on the URL. This took me a few hours to realize how it worked (and to this day I don't know why it was made like this) but that's actually ok to work with. Requirejs is surprisingly pleasant to work with, despite all the bad turns the old Devs did. The problem is: this legacy codebase was once made in jQuery instead of AngularJS, and there is a single page (which no one ever thought would be used) which wasn't ported to AngularJS. It consists of 3k mangled jQuery lines of a single file, without using even Requirejs. It just happens to be the page with the most functionality (lots of tabs) and it NEEDS the kind of data binding these kinds of framework provide. Long story short, anything touched has a chance of breaking something completely unrelated. Most tasks result in a couple bugs on reading and writing to fields.
This is horrifyingly misguided advice, like saying you probably shouldn’t use a pen and paper without first understanding how to make a paper and pen from scratch. React was built to solve real-world problems that web developers contend with daily. To take advantage of it, you merely have to understand what problems it solves. If you want to understand how it does it, then that’s great. It certainly isn’t going to hurt anything, other than your productivity. And you might very well come up with better ways of doing it. But mostly, you’re going to waste a ton of time reinventing the wheel for very little benefit just to say you did it. Making paper won’t make you a better writer, it will just give you a better understanding and appreciation of paper. Similarly, being able to solve the problems React tackles on your own won’t necessarily make you a better web developer, you will just come away with a better understanding of a pretty limited domain of knowledge that doesn’t really have a lot to do with the day-to-day work of being a web developer.
I believe someone just posted a pathfinder algorithm here.
It's almost always to write the simplest possible code to meet the currently known requirements. The time to make it future-proof is when some of those requirements cover what those future expectations are. Extensibility is a requirement - but to be useful, it needs to be a lot more precise than just "make it extensible". Marketing needing to be able to add new complex campaigns pages to your site weekly and to be able to do that within a day is a genuine requirement and might drive you towards some spending weeks setting up and integrating some sort of CMS for example. A developer deciding unilaterally that this might be something marketing want at some point in the future *isn't* a requirement. Of course if you realise that marketing haven't mentioned one way or the other, then ask them. But if they come back and say "we just want this one page out ASAP, and we're not planning on changing it for at least a year", then just build the page as simply and quickly as you can to meet those requirements. Don't assume they're wrong and go and build the CMS anyway just in case. Don't even build the page in a way that could make it easier to drop a CMS in at a later point (unless that can be done *very* quickly and simply). Just build to the requirements that you have.
Damn, no one thought about revamping the whole project? It looks like a total mess indeed. What's next for the project?
I needed to display a huge Canvas element (like around the size of a quarter gigapixel) that had to scale and be drawable to at as close to 60 fps as possible. In the end I had to cobble together a mosaic system that cut the damn thing up into pieces, and wrote a pass-through 2D Context interface that would cull which canvas in the mosaic it would draw to by checking which ones would be affected beforehand, and letting the browser via CSS handle the scaling. And then I had to make it work with touch. But I can't argue with the results. :-)
Https://github.com/daftfox/rev-service Service that monitors connected microcontrollers using the firmata protocol and offers control over said devices using a WebSocket interface. Currently offers only little functionality (turn a pin on or off and display readouts) but I have big pans for this little one. I see several use cases for it, such as home automation, automated (hardware) testing and for the sheer fun of it. It's a pet project still under development and keen to hear opinions from other devs. Do let me know if you feel like contributing :)
I work in WordPress I maintain a theme that has template files which pulls in a bunch of data, then uses a bunch of PHP echo statements to concatenate a bunch of strings into JSON using the data, then passes that data to a JS lib that turns it into jQuery objects to spray on the DOM. 80% of those steps are redundant. The most semantic document is the script. The template file is basically unreadable.
With a person in-front yelling, SHAME, SHAME!
Our 30 year old code. 200 Nested Ifs. Comments like "Here is the Party". Spaghetti code ^1000. You change one line of Code, and somewhere else nothing works anymore. Variables are shortnames and numbers. You dont know what they save. We have to completely rewrite the software.
It is true that I haven’t studied CS, 1 year into programming. [Node School](https://nodeschool.io/) is another great resource btw.
You needlessly used an ad hominem and hyperbole in some sort of strange attempt at reverse gatekeeping, I actually agree that mongodb is not the right choice for a backend in most cases, but the second part of your message is just unnecessary.
eval() in JS. Former boss wrote the sloppiest and duck tapped everything together and I had to refactor parts of this function that used eval(). I can’t remember why but I had to keep it in the code and it felt very dirty.
You're too sensitive. People who use MongoDB where a relational DB should be used are just telling the world they lack skills and knowledge. Answer me honestly: Have you ever met a 30+ year old programmer with a computer science degree who uses MongoDB for anything other than storing log-like data? I've never met any, but I've lost count of the people who did those three month programming courses who use it all the time for everything.
const arr = []
Could you go to college?
Thanks
60K lines of code in Swift. Solve in 4 months..
Maybe you should considering use WebSockets instead of REST calls. I’ve created a WS proxy for REST a while ago. Unfortunately it doesn’t have any docs, but you can have a look in the demo, if you are interested in... https://github.com/DefinityLabs/ws-rest/tree/master/demo
Our old dev came from Python and would have 20+ deep callback chains for code that otherwise didn’t need to be run synchronously. Used a couple promises and eventually async/await. Literally went from 1000 lines on most files to 100.
This should be upvoted. Typescript has probably been the single most useful addition to JS.
Hi /u/imilkmyunicorns, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/aLittleMermlad, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/FortniteSkin, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/MartyDevs, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/KoopaTheTurtle, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/idsfn, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
What css cleanup tool?
Hi /u/Eli1310, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Massive waste of money for anyone who wants to get into web dev
Hi /u/kausikdas, this post was removed. Prohibited low-effort content includes: * Questions that are easily Google'd. * Memes, jokes, etc. Please post to /r/ProgrammerHumor instead. * Most images and gifs. * [Listicles](https://en.wikipedia.org/wiki/Listicle), "Curated lists", and similar content. * Polls, surveys, etc. unless from an accredited academic body or trusted source (StateofJS, etc.). Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/VirulentWalrus, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
interesting! could be useful for writing a program where the implementation details need to be completely unreadable &amp; unmaintainable haha
I recently started at a small but quickly growing company. My boss coded their core system from scratch and I’m the first dev to see this particular part of the system and I’ve uncovered a monster. The Framework it’s based on has been customised so extensively that it’s barely recognisable and all relevant tools and functionality is completely broken at this point. - The framework hasn’t been updated in 5 years - The framework’s CLI is broken - The project outgrew the original plan so 5 instances have been jammed together with a core instance being shared via symlink - All test suites will just error due to the symlink set up and cannot be fixed without months of refactoring and corrections - ...so no tests whatsoever for a very complex system - huge parts of the framework have been rewritten to alter some behaviour which has broken 90% of the benefits of using it in the first place Suggesting changes or refactoring that seems sensible and obvious gets rejected as ‘that would break that other thing’, but there’s no way of any dev besides the guy that wrote it to know that with no tests or documentation considering how custom it all is. Starting work here has been a real challenge and I’ve found it very difficult to suggest change without being made to feel like ‘the cocky new dev’. I was hired for my skill with the framework, but they effectively don’t even use it these days. I don’t think I’ll stick around long!
Very interesting. Need to look more into it. Are you the author?
ES6 exists
Hi all, posted this on r/webdev but also wanted to share here as I hope some of you might find it useful. I recently launched codepusher after spending 3 months building it as a side project. My aim with this app is to build a platform for learning software engineering through remote collaboration and deliberate practice. I've started with the basics of practicing programming challenges for now. However, I have a bunch of other ideas to help users learn different areas of software engineering from testing to system design. It's also free to sign up! If you got any questions or thoughts, feel free to let me know :) The entire app is also built using JavaScript. If anyone is interested I also wrote a few blog posts on how I built certain features which you can find at https://medium.com/codepusher.
It's even better at an enterprise scale. Right now have several external dependencies managed by internal teams that get routed through a common abstraction layer managed by yet another team. The theory being that if we someday decide to switch our accounting software, we only have to change the abstraction. I'm not optimistic. Meanwhile there's another point of failure that can cause my app to fail.
Going through hell and back to somehow, someway add accessibility to a financial web application even though the requirements and existing codebase made it almost impossible to do so.
It's not. A degree opens many doors. It would be literally impossible for me to do my current job if I didn't go to college. I needed my qualification for a visa, and to get past layers of HR drones.
Whoever designed css should tarred and feathered.
Why's that? Im curious since I've recently come to like Java more and more
Cordova is like electron but for phone apps, and there used to be a bug where it straight up ignored cookies when you first opened the app. We had to write a ton of code to procedurally download images in JavaScript, convert them to blobs, and cache them so we could display them. Our attachment system checks credentials before it gives you a file, and normally it can just check the cookie it's completely effortless, but we needed to use XHR so we could set the authorization header manually because cookies didn't work.
Write some server-side rendering charts script in node.js. Customer server requirements change to use minimal OS non Gui versions. Need to manually search fonts and similar libraries and install on server.
Wrote a prototype app for my company using MaterialUI and React. MaterialUI uses a CSS-in-JS approach, so it generates CSS classes and applies them in a dynamic way at runtime. It's pretty neat and allows you to encapsulate "components" in JS pretty easily without having to deal with the nonsense of CSS's cascading effects accidentally messing everything up. We passed the prototype off to the production team in Bangalore (ugh). They came back a few months later and basically said they couldn't figure anything out and gave up. Apparently React is too hard for them or something. So I go back onto the project to try to fix it up... And wow. They destroyed it. They took an interesting approach with user permissions, for example. When we had a menu, they would duplicate the menu component and remove/add entries based on the new role in the system. And then when a 3rd role was added, the code size doubled again since they now made 4 menu components, one for each permutation of permissions. A 4th role was going to double the code yet again. I ended up chopping all that code out and doing simple "if user has &lt;this permission&gt; then add &lt;this item&gt; to &lt;menu&gt;" if/else blocks. Bundle went from 15mb to 1mb. But the most interesting thing they did was... they added a CSS sheet to the app. Apparently they just didn't want to understand the CSS-in-JS concept so they made a CSS sheet that targetted all of these dynamically-generated class names. And MUI uses different naming conventions based on whether it's a debug or a production build, so basically they just started deploying the debug build in production since production just wouldn't work. On top of that since the classnames are dynamic they started just trying to target entire tags, and since the CSS-in-JS styles had higher priority than the CSS file they included at the top of the page, they pretty much started applying the `!important` keyword to ***literally every single style***. It was a clusterfuck. The smallest change anywhere was enough to send the entire application flying off into the abyss and everything rendered wrong. Eventually, I just rolled the whole thing back to the prototype commit from several months ago and redid all of their work in less than a week. Fuck outsourcing.
I knew it would be downvoted, but sometimes, somebody has to say it.
i once worked on a sexual fetish social network site. that was dirty!
At a startup where I was working years ago, pre-bower, pre-npm, one project had a /lib directory with all the libraries they needed (think jquery, knockout, moment, etc). The developer who was there before me *modified* those libraries when he needed a different functionality or even signature. So I had to work with these nine or ten huge third-party libs that were slightly and unpredictably incompatible with the official ones. On top of that, the developer thought he was smart, so he used a lot of one-liners, \`void 7\` instead of \`undefined\` and stuff like that. I quit soon after, but the startup, which still exists nowadays, still has this ancient, untouched, login widget in the middle of its modern website, a sign that nobody could untangle the ungodly mess.
Look, I don't use Typescript like everyone else. I still program in ES6 and I use Typescript as a linter that is basically Flow aware. If you looked at my code, you would think it was ES6, but that doesn't mean I don't appreciate the advantages of having a compiler that can follow through with the implications. Sure, yes, sometimes you meant to do it that way and you can stick in a "yeah, I know what I'm doing". I have old code that Typescript cannot comprehend, but it has worked for 10 years. But also, I have code where Typescript flagged "ummm" and I went "oh fuck". That's worth something. Everyone's wanking frantically about AI, and yet a computer comprehending and assisting with my code is a bad thing?
Personally I'd rather scoop my eyes out with a spork than work with CSS again but my designer buddies all say [PostCSS](https://postcss.org/) helped them reclaim a little sanity.
Perhaps I am too sensitive, but the world is full of people like me- knowing that your message could reach a broader audience with a small adjustment is simply information you can take or leave. While the answer to your question is yes, beware yet another logical fallacy: the appeal to authority. Simply being over 30 and having a degree is not an indication of correctness nor is the lack thereof an indication of incorrectness.
I once inherited a full stack application consisting of: \- Angular 1.3 front end with an inexplicably forced-in templating engine (angular has built-in templating, WHY? WHYYYY?), RequireJS, the most convoluted gulp/grunt (yes, both for some reason) process I've ever seen (thank god for webpack, amirite?), tests from 3 different libraries (Karma, and I don't remember the other two, as I ignored them as much as possible in favor of just using one) and JSON files as configs that were 2k+ lines long each. It also used Bower, NPM and other frontend madness. \- .NET/C# backend... Ok, this wasn't so bad even if I'm not a fan of .NET. The framework itself is actually pretty solid. The package manager and conflict resolution were the worst I've ever worked with (and that includes Python, NPM, Yarn, Bower, Chocolatey and even apt-get, etc...). Also, the build process for this was totally incomprehensible. I ended up never even being able to tweak it because I couldn't make sense of it in the time I was given. \- Something resembling a CICD pipeline. \- dozens, if not hundreds, of bash scripts. It was all cowboy-coded by a single guy, who I'm assuming had massive ADHD issues. The logic was totally unintelligible and the ways he chose to do many things made no sense (though he did try to leave comments, they were often outdated and irrelevant). &amp;#x200B; This was my first job in college \~5-6 years ago. If I knew then what I know now, I would've panicked and told my boss the app needed to be rewritten ASAP.
Omfg I just helped a customer undo something like that. Adobe PDF had all of its metadata stored in 30k line XML files per PDF. Thank fuck for SSIS
It a going to be a short lived project and everyone is busy clearing up the mess he left behind. I dont want to be unfair to him, he ended up that way because of the company culture. He busted his arse to keep everything afloat while I took my time, stuck to my hours and studied. He gained a massive ego because he saw he was working harder than anypne else and people started to resent his attitude, then something happend in his life and he pretty much had a break down. Its not his fault and its very sad. Were a lot smaller now but we've agreed to collaborate more and we have 3 very decently experienced developers and a good salesperson. Plus I've gained enough leverage over the MD to tell him no. I'm hoping we can turn things around now the final remnants of the old structure are gone.
It is well established MongoDB doesn't make sense for most projects. The only people who don't understand this are the unskilled and inexperienced. People need to start being honest with themselves.
Started with this chrome extension [https://chrome.google.com/webstore/detail/css-used/cdopjfddjlonogibjahpnmjpoangjfff?hl=en](https://chrome.google.com/webstore/detail/css-used/cdopjfddjlonogibjahpnmjpoangjfff?hl=en) Then moved on to csso [https://css.github.io/csso/csso.html](https://css.github.io/csso/csso.html)
Okay not so much a specific piece of code but just a thing I did once. Years ago at one of my first jobs we where working on doing a new WooCommerce store for a client. The clients old store was one of those no access to the backend company stoped answering calls type deals. So I scrapped the data for like 900 products. When it came time to import it we couldn't get the import to work though because they had a bunch of conditional variable pricing and stuff that we needed tons of plugins for and the plugins all saved data in super weird WTF kinda ways. Basically I didn't know enough about WooCommerce or sql to write that data straight to the DB the way it wanted it. So instead I used [nightmarejs](https://github.com/segmentio/nightmare) to write a script that read my product data CSV, logged into the WP admin as a user and filled out each of the 900 products through the UI by clicking all the configuration buttons and filling out the fields then hitting save. At the time I didn't know those libraries where for testing and not data import lol. The script took like 4 hours to run. We just left it sitting there on a co workers computer all day. It did actually work though.
I have a very large React codebase where all of the component files are named component.js. debugging in Chrome is a bitch, and finding a file takes longer because you can search for the folder, but all of the files under the various folders are named the same so you have to be extra careful which one you pick.
It didn’t work. He left under his own volition to pursue better prospects right before we were bought by a huge company and were the better prospect.
I know what you’re talking about, but that wasn’t what was going on here. This person added abstractions and such because he programmed by adding classes and code until it roughly did what he wanted it to do. I don’t think he truly understood the problems he was working on. This was evidenced when he was tasked with a brain-dead level programming problem, something a non-programmer should have been able to accomplish, and was unable to start without significant handholding by the manager.
One of the biggest things I love about typescript is how easy it makes refactoring. Not just the fact that it's easier, but it being easier also means that I can do it like 5x more often than I could have otherwise. Finding myself cleaning things up a lot more that I used to when there were more breakage-in-production concerns.
Reminds me of WordPress and all its storing of PHP serialize() strings in the DB.
What in the fuck. Honestly, could there be anything else wrong? #5 is hilarious
Once had to deal with returned xml that had inconsistent name spaces. There were numerous ways we could have dealt with it but I decided to write a Proxy that would conditionally handle the different namespace patterns seemlessly. I guess it works well since I have no idea if that service still has that problem or not, we haven't had to look at it since I wrote that code.
Not particularly dirty, but a real WTF. I was working on a large Java codebase with a couple of teams in another country. All of their data objects contained this method: &amp;#x200B; public int hashCode() { // This MUST be prime for performance return 11; } &amp;#x200B; My co-worker of the time and I are still friends and we still laugh about it.
I had to change some JVM bytecode by hand once because the moron who wrote it hardcoded various stuff which worked only on Windows. Change in code required like 20 lines which we wrote for them, but it took them just a bit over 6 months to deliver it in production.
'who the fsck wrote this crap?'
Aka, we have all written our own "isDefined" because it was so oh much better than the one other device wrote :p
Financially, it's a poor decision. If you want the experience of going to college or a career that requires a degree, it's worth it, but if you're going to school to increase your income, it's not.
Uh huh...uh huh...*what the fuck was I trying to do?*
Learn spring batch for a project, not a js thing, but was hard to me.
Using Sass (scss), PostCSS, and CSS modules w/ react has made styling so much more sane. An added bonus on CSS modules (with webpack at least) is being able to write your own function for deriving the computed class names. This let us compress our stylesheets from 45kb down to about 5kb.
I don't agree with the last bit. I would not have my income or job if I didn't go to college.
Hi /u/Swimming_Peak, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
(Discovering the issue around) The IE6- 4095 rule hack in a large corporate internal codebase (medical, so we supported IE5.5 in 2014)
Looks good. One thing though the placeholder for weight is “e. g. 5kg”, but if I enter “5kg” it provides an tooltip “Enter a number”. You could just strip all non numeric characters, and display a tooltip only when there are no numbers.
I actually think this is good thing to do when learning JS and can help a lot understand concepts.
Promise hell mixed with callbacks. 100s of calls over the backend. It took me 4 months to make it better.
thanks for the useful feedback, didn't consider that!
I honestly think networking over a TCP socket or HTTP would be the easiest for back and forth communication. You should still be able to communicate over localhost without a network connection. If you use http, you probably won't have to worry about firewall configurations as most firewalls let http traffic through over port 80.
It is really really weird that the demo page is using screenshots of the modals instead of implementing the actual modals.
If you pull I’ll merge.. ;) Note though that: a. there exist a faster implementation of A* b. the animation happens after the solution has been found (which feels “instant”) c. the rendering is where most “latency” is introduced. The three demos have fundamental differences in how they create the animation. I found it most interesting that a mobile browser can render and re-render a table with over a thousand cells so smoothly.
Years ago, I worked on a large code base that was written entirely in old-style C. The code was very badly written and the worst part was that there were no header files included. In old C, you don't get any warnings for incorrect function calls if there are no header files. So the first thing I did was to add the header files. With the proper header files included, I got literally thousands of compiler warnings. A lot of them were about wrong function arguments (like int where there should be char*). Also some of the function calls had too many or too few parameters. These are very bad things and will cause the stack to be popped when it is empty or just generally have the wrong values on it. And C does not verify or protect against this at all. I'm sure that I fixed a ton of unreported fatal errors. Unfortunately none of my coworkers were impressed or interested. By the way this was a small company that had no QA department until later and we just to code on customer sites without any source control. I was fresh out of college and became very disappointed by the lack of standards in the real world. I left that job a few months later. My next job was quite a bit better.
The alleged Posix compatible layer in Windows. The workaround turned out to be a horrible hack that used Posix in one thread and the native Win32 API in another. The worst thing is that it's still in production 10 years after we were told that "any day now, this service will be retired".
Some of the previous devs at my current work decided that they needed to be able to easily move away from laravel, so there's about 4 layers of abstraction between the actual models and laravel 's really nice system, making them an absolute nightmare to work with.
YUI?
Worked on the front end of an older IBM Java platform. JSON objects so convoluted that we resorted to using `JSON.stringify(data).indexOf(someValue) !== -1` in one case to determine if particular keys existed. It was a soul-crushing solution.
I usually start by going what fucking idiot wrote this. That's wrong, I wouldn't do that, etc. Then I see something I remember doing, oh shit.
[https://imgflip.com/i/305vcb](https://imgflip.com/i/305vcb)
Do you have a blog or can you recommend any business level resources? I find your writing style very enjoyable.
Yup! Reddit really needs to integrate ESLint and Prettier into its editor lol
I can get behind this. I did exactly what you’re describing. I attempted to reinvent React, as an educational exercise. And it was rather unsuccessful (it mostly worked, but contained bugs and didn’t account for a myriad of edge cases). But I *was* successful in learning a lot about programming, application architecture, the fundamentals of JavaScript, the DOM spec, global event delegation, local &amp; global state management strategies, and perhaps most importantly, the virtues of functional programming... I would recommend such a task to anyone willing to *learn*. But you’re absolutely right about the futility of it. It didn’t make me more productive in concrete terms. I did it on my own time, so it didn’t necessarily slow me down either. But it was certainly a time sink, either way. It wasn’t wasted effort, but it didn’t *directly* contribute to my work productivity. And at the end of the day, React does a terrific job at what it does. So why not just use it? You know what separates a great library from the rest? It feels a little magical when you use it. React does that... P. S. I think a slightly more interesting topic for a blog post would be “Lessons learned from trying to reinvent React, or, Why you should just use React, you idiot.”
You hit it on the nail with this comment... I'm just gonna go simplify the code I started earlier today, because I did exactly the mistake you're highlighting.
Mostly because it's very object oriented, which I don't really care for. I haven't written in Java myself, but worked on a project with it and, at least the code I had to read, was very un-fun. Perhaps there's options/extensions to write it in a more functional way that I'm unaware of?
Thank you very much. I don't have a blog, but one really good article I came across recently on this topic was [Imaginary Problems Are the Root of Bad Software](https://medium.com/s/story/imaginary-problems-d4f2921bd1b8)
One of my employer's project requires 4 consecutive API calls to make a purchase. Do not ask me why, but there is a flow: 1) Deleting user's email from the DB if any; 2) Use email from above to get auth tokens; 3) Use tokens from 2 to get 3rd party cart created; 4) Making an update to the API from step 3 with required data to process the purchase;
Wordpress was my first intro to web dev and I’m fairly ashamed to admit I would store JSON, CSV, and XML structures in DB columns because I thought it was kosher to do so lol.
I work for a fortune 500 company and the lead solutions architect is the highest earner in our IT department and doesn't have a CS degree. If you go to school for 4 years, you would accrue $100k in debt on top of 4 years foregoing income and not gaining experience. It's really not even close.
I feel your pain. I'm maintaining PHP include-ception hell. And Perl, deduplicating same logic. Because one of the folks, the only one, only wants to program Perl. Code has loads of jQuery.load(). Sometimes views are spitting JSON strings NOT from structured data trees. Strings and ifs.
My first job was to fix bugs in an HTML+CSS renderer, that was written in Flash, for a company that sells cosmetics. This was in the late ‘00s. The rationale was, Flash rendered the same across browsers, while HTML didn’t, but web designers were more affordable and more common than Flash developers. My first task was to figure out why the flagship app froze for thirty seconds after loading. The culprit was the CSS processor, which tried to generate every combination of every style declaration ahead of time, to reduce the overhead of styling in the render process. So, we’re talking ~ O(n!) running time, where n is the number of style declarations. Let’s just say removing it helped. I also implemented an inspector window so that any rendered DOM element that looked wonky could spit out the HTML that it was rendering. That was a whole lot easier than just relying on breakpoint debugging. Again, this has nothing to do with the core business of the company. It was someone’s cost-curing idea that ended up being more trouble than it was worth. As a new entrant into the mid-recession workforce, I was grateful for the job security. I helped pivot the tech stack to Adobe Flex (a reasonable bet at the time) and fled for the game industry when an opportunity next presented itself.
Deep comparisons that aren’t highly specific don’t come up for me much anymore, now that I use the immutable style: deep comparison is equivalent to a top level reference comparison. For everything else, I tend towards “duck equality” now. Is it equal in all the ways that matter to my problem? Good enough for my solution.
Java has been seeing some growth of (the sometime back introduced) lambda functions. These are pretty much the same as with javascript/python lambda functions and feel really good to work with, IMO Other than that, the code can get unweildy, though good coding practices make the other benefits of java worthwhile in my opinion I haven't been using Java for that long so we'll have to see for how long I'll feel this way though
Agree with all said here, but if OP insists on deep checking: https://stackoverflow.com/questions/1068834/object-comparison-in-javascript
so i dont know the format of c# but in simple terms You can get an array of keys, and check both objects for the key and the value of the key.ex. &amp;#x200B; `arrOfKeys = ['firstName', 'lastName];` `for(let i = 0; i &lt; arrOfKeys.length; i ++ ) {(if(Object1[key] &amp;&amp; Object2[key])}` &amp;#x200B; Again, I come from js, so I am not familiar with c# syntax. but the ideas are the same in all programming languages
I'm working on my own mess: [https://github.com/prolightHub/PlanetSearch2/blob/master/PlanetSearch2.js](https://github.com/prolightHub/PlanetSearch2/blob/master/PlanetSearch2.js) I was too lazy to make Khan Academy projects fully work offline until a few months ago. So I created a mess of 22,000+ lines of code in one file. My dad pointed it out, I'm a silly teen I feel bad.
Fsck -f /dev/sda1. I have to do all the time to fix my Ubuntu laptop.
So would you nest this with some `typeof` statements and recursively call it for objects that contain arrays of objects?
Hi /u/ExpensiveRegion, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
might take less time to search for a new job?
Oh fuck, i've heard exact same story about some Ukrainian developers
tl;dr How golang does error handling: res, err := http.Get("http://example.com/api") if err != nil { // handle `err` } // do something with res How it was adapted to JavaScript: First a wrapper function to convert exceptions to golang style: async function fetchable(url) { try { let res = await fetch(url); return [null, res]; } catch (err) { return [err, null]; } } And then calling it: const [ex, res] = await fetchable('https://example.com/api'); if (ex) { // handle exception. } // do something with res and exit ---- My personal preference, I'd stick with exceptions. The golang style requires every statement -- even every expression within a statement -- be followed by an `if` to check if it produced an error. Even if all you're doing with the error is passing it up the call chain, you still need the if-statement. This style results in tons of boilerplate and lots of opportunities for mistakes. With exceptions, on the other hand, if all you want to do with the error is pass it up the call chain -- which is most of the time -- then you need to do precisely.... nothing. No try blocks; no catch blocks. Exceptions propagate automatically.
Could also do this without any extra syntax: const res = await fetch('https://example.com/api') .catch(err =&gt; // Do error stuff);
You are el macho
I would write a recursive function to compare them, or perhaps import [lodash.isEqual](https://lodash.com/docs/4.17.11#isEqual). As others have said though, this is actually of limited utility in real world code.
Lol, Go is one of the last languages you want to copy error handling from. Especially in front end development where error handling inevitably leads to control flow. Try catch is way more logical and ergonomic to use. And for other cases, it would better to have Rust way of handling errors, although pattern matching in javascript is still stage 1 proposal.
Noted :) And yea, actually its amazing how fast web browsers are today...I viewd all the demos on my phone(on a camping trip haha) and it really surprised me how silky-smooth they were :D
Looks like `timer` is a global object. So open the page console and type `timer.minutes = 0, timer.seconds = 0`, then hit enter. Then the "next" button unhides.
I was given a project that was essentially written by a drunk monkey on a cocaine binge. EVENTS. EVERYWHERE. A click event would fire a cascading chain of events that only needed to log some data, but would call back to itself to fire even more events in a different manner. Another click event would cascade events to display a panel and then call itself to close said panel. These events could be classified as recursive chaos. I had no idea code could be written like that. The coder who wrote it was fired and I was gifted the project. After weeks of trying to make heads or tails of this crap, diagramming (my diagram was larger than my desk and wouldn't even fit on the wall) and tracing code paths, my manager pulled me aside and said, "You have a week to make this work or you're fired." At this point I had no choice other than a complete rewrite. I created use cases, organized the business logic as best I could, and then worked my butt off pulling 16-18 hour shifts each day for the next week (including my birthday) to rewrite what had taken the original coder months to finish. &amp;#x200B; Please, kids, follow SOLID principles, use design patterns when applicable, write good unit tests, and keep your code clean and well-organized. The next person after you will appreciate it.
I think I understand now what’s going on. When I do var bPushFn = b.push; bPushFn has a reference to Array.prototype.push and when it is called like this, it has no knowledge of what object (‘this’) it is being called on. That is why using the ‘call’ method works, because we are explicitly passing the object to be used for ‘this’.
`!important` in every single style! LOL!
https://github.com/Aurelain/react-style-editor I built the component this week. Half the work was to parse the CSS and test the parser. The rest was basic React. In fact, it was so basic, that at some point I decided to not have any dependencies at all. I also opened a [thread](https://www.reddit.com/r/javascript/comments/bklrgs/react_style_editor_a_component_to_viewedit_css_in/) about it, but it didn't get any attention.
What happened if it wasn't prime? Would it blow up?
I would like to know more about this. Why must it be prime? Why 11 and not 3?
obviously not what you meant, but one of my favorite lines i've ever written is: if (petSex.$dirty) it was an angular app that pre-screened apartment renters.
Pass an accessibility test.
While I agree that the boilerplate introduced by Go is unpractical, it has the benefit of forcing you to think about what can go wrong in your code. Exceptions do not do this, and rather represent hidden traps in your codebase, making you unaware of what errors could happen. I believe the answer to succesful error handling lies in the middle (and is still to be defined)
That is correct. You could do: let bPushFn = b.push.bind(b); bPushFn('abcd');
I currently work for a company, that has an 80+ microservices infrastructure. About half have a database that works with an ID and a \`jsonb\` datatype in PostgreSQL. &amp;#x200B; We're now rewriting some of those services, and re-designing the tables... it's so hard to tell which fields we actually need, because it's so inconsistent. A lot of records have whole MomenJS objects stored in there as well.
I took a dirty data export from 2000 old pjp wordpress pages that went into 1 json file, and then I had to create ~2000 pages of markdown from those, styling them, and combining those with an api to get the references for the items... but only for the items that references, and the RIGHT references. On a serverless setup .
Were the folders empty with the exception of `component.js`?
I open-sourced my email alias app Ptorx: https://github.com/Xyfir/ptorx It's a privacy/security app that lets you send and receive mail anonymously while still using your preferred email client (like Gmail).
No, they have index.js, container.js, and styles.scss
Burn it all with fire immediately
Yea exactly Or you could first of all flatten it just for sake of the test
You were just ahead of the curve https://dev.mysql.com/doc/refman/5.7/en/json.html
I would recommend using the npm module "python-shell". I have worked with it before and it works. Only debugging may be a bit annoying. www.npmjs.com/package/python-shell
Or you could even change the "var bPushFn = b.push;" to "var bPushFn = (v) =&gt; b.push(v);", making bPushFn a function in a variable via the use of an arrow function (also small note, it won't break it but definitely change "var" to "let"). Sorry for formatting, on mobile.
Hi /u/delventhalz, i am the author of the article. I think this way is a whole lot better than what i proposed in my article. I updated it to reflect it. never would have thought about this in a million years. Thanks though.
Glad to help! Error handling is one of the big reasons I haven't warmed up to async/await yet. Once it matures and best practices start to emerge, I imagine it will look something like this.
If he's just trying to see the button, he doesn't even have to do that. Just `document.getElementsByClassName('go')[0].style.display = 'block'` will do the trick.
If you use a good editor you can use refactoring functions to do this. For example in Emacs the package `js2-refactor` provides this feature.
Browser compability for your target audience, otherwise I'd just use whatever works for you. Make sure you're consistent though, that's what's most important. If you're working within an organisation or a community effort (i.e some library/framework) then you could see if they follow set standards. Otherwise whatever works for you, given _browser compatibility_.
I mean I can convert all my projects in seconds likely with a simple `eslint --fix`, I'm just curious if I'm foolishly making a poor decision and want to know if I'm overlooking something before I make the jump. Doing the inverse conversion is a tad harder.
It's my first development job and I've only been here for about 2 months. I want to get at least a year or two of experience under my belt before I go looking again.
I use a preprocessor, so the browser never sees the template strings anyway.
What do you use currently?
So I wrote this little thing that installs all of the good stuff I can't live without in Javascript project with a single command. It's pretty basic, but I think it's still a pretty good starter and should also work well with existing projects. I'm also planning to add a config feature, so you can overwrite the default config with your own and use it for all projects. I'm actually surprised there are tons of articles that show you how to install all of these tools, but I couldn't really find anything like autoslap and that's why I wrote it (though I wasn't really looking for that SUPER hard to not get discouraged). I'm sure you'll prove me wrong but oh well, at least I learned something (this is my first CLI). Looking forward to your feedback.
true
For the last few months i've been working on a web-app called ClassClock that I made at the request of one of my teachers who wanted an easier way to keep track of all the different bell schedules at my school. A good portion of the school (teachers included) have been using it constantly since December 2018 and I made a [landing page](https://classclock.app/?pk_campaign=reddit&amp;pk_kwd=webdev-sos-c1) for it so that I can hopefully help other students keep track of their school bell schedules too.
Looks pretty similar to redux-loop, I’m curious what the differences are?
*Named pipes* used to be a solution to this. I think it might be a bit tricky to get this right *cross-platform*, though.
In our Vue.js project we've used them interchangeably to be honest and we didn't have any issues. We used template literals for any string where you want to include a variable as it's so much easier and nicer with the `${}` syntax. Anyway, another thing that occured to me to consider is performance, [found this](https://stackoverflow.com/questions/29055518/are-es6-template-literals-faster-than-string-concatenation).
Some previous discussion on this - https://www.reddit.com/r/javascript/comments/7vstzu/is_there_any_reason_to_use_anything_other_than/ Gatsby have adopted template literals everywhere, as seen in [their ESLint config](https://github.com/gatsbyjs/gatsby/blob/dad2a04a215c30364d9bc5c557b0fdb645c8d178/.eslintrc.json#L50) and this [suggestion for Prettier](https://github.com/prettier/prettier/issues/54)
 function buildResponse(review, i) { review.endorsement_responses[i].reply !== null ? review.endorsement_responses[i].reply !== null : null } Here you are returning `true` or `null` instead of `reply` or `null` buildResponse(survery[i], i) `survery` instead of `surveys` I would highly recommend using some IDE - I noticed those errors simply by copy-pasting your code into IntelliJ. Also I would advise you to get a bit more into ES6 features ( like destructuring, template strings, etc. ) - they could make your code much cleaner. And one more thing, the usage `!0`/`!1` instead of `true`/`false` seems a bit questionable to me :p
Oooh this is exactly what I was looking for, thanks for the links. It was surprisingly hard to google.
Is your game just running in a webview? The only thing you really need to make sure of is that it's a wkwebview and everything else should work fine so long as you're using supported js features in iOS Safari.
You need to wait until your html has been initialized. You can use one of several events for this. For example: document.onload = function init()\{ // do stuff \}
Well it doesn’t work the same idk if they just don’t care
What exactly doesn't work the same?
My wife says I also have "Repetitive Stain Injury" . Sorry I had to :) . My guess is you will find your answer in an IDE created by a larger company as they seem to want to spend more time on ensuring all users can use them. Having that in mind I looked at VSCode as imo it's the best JS editor right now and saw this [https://github.com/Microsoft/vscode/issues/40976](https://github.com/Microsoft/vscode/issues/40976) . Looks like a couple of the people there would be great sources for finding out information on what does and doesn't work. Not an exact answer but hopefully it can help you find a way to enjoy coding without pain.
My team uses async/await, so so do I. In my personal code, I still use naked Promise chains. In addition to error handling, I don’t love how magical async/await is. Promises are comparatively straightforward. Just a lightweight wrapper around callbacks. I think I partly have that preference because I grew up with asynchronous JavaScript. Async/await seems like an attempt to throw a bone to developers that started on synchronous languages. You also still need to pull out Promise syntax for certain use cases like `Promise.all`. Seems like always having to context switch between vanilla-Promise-land and async/await adds more cognitive overhead than it saves. But a lot of people disagree with me so ¯\\\_(ツ)_/¯
If you're really concerned about performance, you should benchmark some test code. And about the refactoring functions, I'm talking about refactoring in place not globally. Having a shortcut bound for this means you barely notice having to change string types.
Spot on, and this topic definitely required a change of mindset for me after months of writing code that I realized eventually did nothing. I got away from the mountains of abstractions by telling myself "I'm going to write it this way for now, and if I need to come back to it later I can." This mantra has improved my code drastically: it's easier to understand (for both me and my teammates), and it gets my work out the door faster. Spoiler: 99% of the time I never have to go back and re write it.
Hi /u/curtastic2, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/switz213, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/gntsketches, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/keychainoi, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/121910, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/podcast_frog3817, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/burninrock24, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/JLeeOT, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Hi /u/tmpphx, this post was removed. * For help with your javascript, please post to /r/LearnJavascript instead of here. * For beginner content, please post to /r/LearnJavascript instead of here. * For framework- or library-specific help, please seek out the support community for that project. * For general webdev help, such as for HTML, CSS, etc., then you may want to try /r/html, /r/css, etc.; please note that they have their own rules and guidelines! ---- /r/javascript is for the discussion of javascript news, projects, and especially, `code`! However, the community has requested that we not include help and support content, and we ask that you respect that wish. Thanks for your understanding, please see our [guidelines](http://www.reddit.com/r/javascript/wiki/index) for more info.
Loving this thread. &amp;#x200B; I was the sole developer at a design agency. I had too much work so my boss hired another dev to do a WordPress build. &amp;#x200B; I told him to do it in a way he's most comfortable (thinking of speed and trying to be nice with him) but he took one of my existing sites as a "base" and worked from that. Fine, I thought...whatever works. &amp;#x200B; As I got busier, I had no time to check in on him and I trust in him to do the work. &amp;#x200B; After he left, I realised this guy had no idea how SCSS worked. I found selectors over 20+ levels deep (no joke) and using a combination of class names, ID's, tag names. &amp;#x200B; It was a complete fucking nightmare to change anything! &amp;#x200B; All because my boss wanted to do the hiring and didn't involve me in it at all.
Can’t set an Audio volume, can’t load any audio over 5 seconds long, can’t play any audio that wasn’t first played inside a user action function. Also everything seems to run slower.
this is foolish
Where do I post help about javascript running in a webview? It’s not for beginners.
To be fair, Rust does something similar. Any function that can throw needs to declare that it might return an error, and when calling that function you need to always handle both the error and non-error case. If just means passing the error up the call chain, then you do that manually. It’s much more robust, and seems to be where systems languages are trending. That said, I think you should probably let Go be Go, and Rust be Rust, and JS be JS. Different languages, different strengths, different use cases for the most part.
async/await is not a js concept
Originally? No, it isn’t. Did I say it was?
I don't know, not here. Doesn't matter if it's beginner or not, code help is not allowed on /r/javascript. Maybe try some iOS dev place, or StackOverflow.
Not reading the guidelines, and ignoring the pre-submission text, is foolish.
Kill that tech debt early, and kill it often. Typescript is great for it, I agree!
Lmao so your company wasted months getting nothing from the outsourcing team to do the equivalent of less than a week's work on your end. Brilliant.
This is a high level javascript design pattern and style guide question. It's not a "how do I make a jquery carousel and please give me the code". I can't see how that doesn't belong here even under the guidelines.
&gt; # /r/javascript is not a support channel Do I need to explain what _support_ means? Also, it's a comical stretch to consider which string quotes to use a _design patttern_.
Nice work in taking a concrete problem a sharing solution!
It has many valid use cases! And of course, nowadays dbs have native support for JSON columns and indexing.
That’s wild! I had no idea they natively support it now.
This is not a matter of JavaScript. The `float` spec defines that. 😊 https://en.m.wikipedia.org/wiki/NaN#Floating_point
Desktop link: https://en.wikipedia.org/wiki/NaN#Floating_point *** ^^/r/HelperBot_ ^^Downvote ^^to ^^remove. ^^Counter: ^^255563
Yeah I even saw some comparisons that show it's very fast, comparable to some NoSQL solutions (MongoDB), while actually providing ACID guarantees.
Thanks! I’d like to try and make this into a proper service over the summer if enough people are interested. If just struggling a little with getting it out there haha
Rewriting Centura and old Delphi code into recent Delphi code. Problem is, it was my first real world project out of school and I was the lead developer on these projects. It was ugly as f
'npm ' is four characters, see
Noob here. Explain?
Great work! Are you a student?
Yep! Hopefully gonna go into computer Science or something similar so I can keep making cool stuff
Thats just a document db!
lol that's cute. you realise the teacher was just prompting you to push yourself in an area he/she knew you loved.
As time goes on and you gain more experience and more exposure to well written and structured code, it can be jarring when going back to something you may have written a few years or even a few months. Usually it’s more of a “wow wth was I thinking”
From the obscured screenshot "Your next class period is: assing Period"
Thing is, this idea was presented to me and a couple other programming students who were in his class the year before. We were all basically already into programming at that point and he was asking in more of a “how long would this take” way.
:/ thanks for pointing that out, now I have to go fix that...
Rust's `?` syntax to auto-return errors is definitely an improvement over manual if-statements, but even then I still think exceptions are better. With Rust, you need to put the "?"'s in so many places that it just becomes noise. Sample code with exceptions: function evaluateSalaryAndReturnName(employee) { if(employee.title() == "CEO" || employee.salary() &gt; 100000) { console.log(employee.first() + " " + employee.last() + " is overpaid"); } return employee.first() + " " + employee.last(); } Same sample code if JS hypothetically had Rust-like "?" syntax function evaluateSalaryAndReturnName(employee) { if(employee.title()? == "CEO" || employee.salary()? &gt; 100000) { console.log(employee.first()? + " " + employee.last()? + " is overpaid"); } return employee.first()? + " " + employee.last()?; } And that's being generous. It's technically possible that operators such as `&gt;` or `+` could produce errors (such as if an operand has a `valueOf` that throws), which means we technically need a lot more "?"'s. function evaluateSalaryAndReturnName(employee) { if(employee.title()? == "CEO" || (employee.salary()? &gt; 100000)?) { console.log((((employee.first()? + " ")? + employee.last()?)? + " is overpaid")?); } return ((employee.first()? + " ")? + employee.last()?)?; }
Yeah typescript certainly makes you feel more confident about refactoring in general because you know you can't mess certain things up.
oh yeah I get. teachers like that are super awesome. you'll remember him for the rest of your life!
Super cool solution! Hope your teacher gave you some extra credit for that (or at least a starbucks gift card)
App: "It is currently: 12:06:05 PM" iPhone: "12:51" I love being the prick who points this out
I kinda figured someone would point that out eventually..... Yes, I modified the time in the app so that it would say lunch in the screenshot because I was too lazy to wait another day to time it perfectly
Clearly I went to the wrong school.
Even document dbs usually allow for indexes on the documents!
or you could've just shop it
&gt; I don’t love how magical async/await is. Promises are comparatively straightforward. Just a lightweight wrapper around callbacks. async/await is likewise a lightweight wrapper around promises. async is sugar for new Promise, and await is sugar for "then". For example, these do the same: function fn1() { return Promise.resolve(42); } async function fn2() { return 42; } And these also do the same: fn1().then(n =&gt; console.log(n)); console.log(await fn1());
redux-loop modifies the Redux architecture so that the reducer returns descriptions of effects along with the new state (hence the need for a store enhancer). redux-agent works within the vanilla Redux architecture in that it stores descriptions of effects in the state; state changes then drive the React tree to render non-visual effects along with the usual visual ones. This should translate into lower cognitive load for the developer — no new concepts, just old ones doing new work.
Yeah, I probably could have done that considering I already had to shop the device frames around the screenshots, my level of laziness is weird sometimes
I *love* this
nah, he gave me something better, a potential income stream/business (I’ve been considering adding some paid bonus features to cover database costs once the app is ready for general use)
If anybody out there doesn't know how to do this. Press F12 to open Developer Tools, click on the console tab, and then type `console.log(window.screen.availHeight);` and hit enter. Then change `availHeight` to `availWidth` and hit enter again. I'm on Chrome, on Windows 10, with the standard 1080 x 1920 resolution. I got a height of 832, and a width of 1549.
this is super cool! how long have you been coding for?
I'd suggest adding an event lister on the whole document for key down, then with the given event results check the keycode of which key was pressed, making sure it's the enter key in an if statement, then call the function you need. Then for the arrow, I'd recommend a CSS animation with a transform x/y across the screen, but not in Javascript since it'd block the UI thread, meaning it'd calculate and do everything, but not show it (if done in souly in a loop in Javascript).
Hi /u/impurefunction, welcome to reddit! Unfortunately, this post was removed because you are a new user. This is a spam-prevention measure, we hope you'll understand. You'll be able to post in a few days, however, you can start commenting now! We'd love to get to know you. In the meantime, please read the site [reddiquette](http://www.reddit.com/wiki/reddiquette) and [/r/javascript's guidelines](http://www.reddit.com/r/javascript/wiki/index). Also, **/r/javascript is not a support channel.** For help with javascript, please post to /r/LearnJavascript instead. *I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/javascript) if you have any questions or concerns.*
did u make the website as well ? if yes, how ?
Cool project! I see it's open source, would you mind PRs for upcoming features/bugs?
I saw in another comment you might try to spin this out into a paid service. Your future is bright if you’re already able to take real problems and solve them with code. Let me try to sell you on open sourcing this, hear me out. I think if done properly, you will glean far more value that way than trying for a business. Its unlikely some SaaS or app is the best way to capitalize on this idea. Honestly, the idea isn’t special. Its the process that went into it. Open source the project, blog about the project, ask for others contributions to make it better. Invite student programmers around the world to use it, make it better, and contribute to the code. “Cool story, Bro, but I wanna get rich”. Im glad you’re paying attention, because this is your best shot right now. Im assuming you’re young, since youre still school aged. Fucking great! You can benefit a lot by getting other people involved in this project. You can write, talk, youtube video whatever, about the project, how its being used, and the process of creating it. This will open a lot of doors for you. Having a successful piece of software, used in the real world, and contributed to by other developers, is waaaay more than your average CS student has on their resume. This will make getting into schools, internships, and actual jobs much easier. You mention youre still learning, and are struggling to just get the app out there and developed. Thats totally fine, and the whole point! There are loads of people out there who would want to give a hand to a student working on an open source project for other students/schools. You can ask for and accept this help without having to be embarrassed, thats the nature of open source. You will learn A LOT by letting other people work on the code. And development can be lonely, having others contribute to and benefit from the project will be a huge boost of motivation most likely. I mean, ask people here in this thread, “Does anyone want to help develop this and use it at their own school?”. Doing something is the best way to learn, and getting more people involved will open up opportunities you cant possibly know yet. My two cents, but honestly this could be a really cool way to meet people and grow as a developer, or another business idea that never goes anywhere (which youll have plenty of those if you do become a developer).
I didn’t *make* the website per se. I found a free template that was made by the people at styleshout.com and just modified it and am hosting it with GitHub pages
If you scroll to the bottom he made it with styleshout, the template site
 I need to build a SPA website as yours in order to demonstrate my application too and I really like yhe template if you can share it
Yeah, if you want to contribute you should join the slack workspace so you can stay up to date on development stuff. Like there’s currently a branch on which we’re ( me and a school friend) are trying to migrate the app over to react/typescript. But yeah contributions are totally welcome!
ColdFusion...
Really nice idea! I've been thinking of doing a tool like this for a while, so will definitely give it a look in next time I need it 🙂
I think it’s the Kairos one. There’s a link to the website I got the template from in the footer of the site. I don’t think they like people distributing their zip file in case they update it
I forgot exactly how long but probably on and off for about 4-5 years now. Although I still am by no means an expert
Does `res` not end up with what the `catch` block returns in this case? How do you continue execution afterwards, and differentiate whether you got a result from your `fetch` method vs whatever `catch` returned? Will you not have to write an additional if condition regardless, if so does this pattern become useful in practice? For example if I'm writing a server and want to handle database connection error, what is the prettiest pattern to handle the error? ``` const data = await someDatabaseQuery(); .catch(err =&gt; { console.error(err) res.status(500).send('DB Error') }); if (data) { res.send(data); } ``` I would personally choose ``` try { const data = await someDatabaseQuery(); res.send(data); } catch (e) { console.error(err) res.status(500).send('DB Error') } ``` So I'd really like to hear how this suggestion is used in a real world example. Otherwise either OP's Go-style error handling or Java-ish try-catch still look as better alternatives to me.
Jesus lord, that sounds like a nightmare. Sounds like they really did not understand React at all. I've been working with it for less than a year and I have a way better understanding of it than they do apparently...
Haha yeah, I’ve already taken the red pill and taught myself the magic of free software. I know I still technically need a license, but I’m planning to go AGPL as soon as I figure out what I need to do with regard to the intellectual property of my friend who has contributed a few things to the code
Yeah, it’s super easy to fix bad code incrementally as you stumble upon it during day-to-day work. Just re-run your unit tests and your usually good.
Experience in a completely outdated stack is almost pointless, and extremely frustrating
Thankfully it's not 100% foxpro. A lot of it is PHP, JS and TSQL which I feel like might help me down the line.
Oh that's a relief. Well as long as you'll get a reasonable balance of experience then it may be worth it to stay.
I actually did something really similar and sold it to my school! It pulls the schedule off Google calendar and displays it on the school website
That should be considered malpractice.
This is great, you should be proud of yourself.
Do you recall the specific terms of the sale? Did you give them the intellectual property? It would be really helpful to have this feature as part of ClassClock
what did I do to get this on the front page of r/JavaScript holy crap
&gt;my level of laziness is weird sometimes This is the most relatable statement I've ever read.
The simplest way is to get your friend to agree to the same license.
Oh my gosh I don't know how this made it to the front page. I'm not ready to be famous. Thank you all so much for your words of support and encouragement!
Yeah, I’m not too worried about it but I’d just like to be protected in any case