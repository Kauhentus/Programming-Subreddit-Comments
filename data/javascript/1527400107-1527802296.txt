1) I chose JS because I want to be a web developer 2)console.log('hello world') is far easier to grasp than public static void main(String[] args) { System.out.println("Hello World!"); } 3) I personally prefer things to be more opinionated to easier grasp best practices 4) React currently has libraries for native,native + web and VR, I'd imagine that Native + web + electron can't be too far away, Javascript is trying to grow and advance while web assembly is an attempt to back track or work backwards, ultimately giving new flaws to otherwise good languages for less than efficient use cases.
Great feature indeed. Much awaited one !
well the problem is they take shortcuts like code duplication, badly naming variables, badly structured files and modules, no tests as they write, etc so that the last 5% takes twice as long as the 100% would take if they did it correctly i in the first place. They're basically giving me code that would take me less time to write from scratch than to fix.
why not use Proxy to redirect getting the secret field to the WeakMap, can still use the non\-proxied object if you want without the secret fields ```js obj = {a:1} handler = { get:(target,name){ if(isSecretField(name){ return weakmap.get(name); } else { return target[name]; } )} } proxied = new Proxy(obj, handler) obj.secret // undefined proxied.secret // stuff obj.a // 1 proxied.a // 1 ```
Aurelia sounds interesting.....
My father was a javascript/typescript import refactorer and his father was, too. Now I refactor javascript/typescript imports and plan to buy a house and send my kids to school on it
You heard wrong. I even believe minifier transform pretty much all conditions into ternary.
&gt;call a function only if both onmousedown and onmouse move have you tried ondrag event? [https://developer.mozilla.org/en\-US/docs/Web/Events/dragstart](https://developer.mozilla.org/en-US/docs/Web/Events/dragstart)
Groucho Marx: Doctor! Doctor! Every time I do this, I get a terrible pain! What should I do? "Don't do that" 
You got it wrong. JavaScript chose us. 
OK, so took a quick look at UPWORK.com.... Someone wants: We have been using quickbook to keep track of donations, expenses, reimbursements, bank reconciliation. and it's very complicated. We need a web application / mobile app that allows users with different roles and permissions to enter information (e.g. donation amount, file reimbursement requests, view reports, etc. ) So, they want General Ledger, Accounts receivable, Bank Rec, and an overall security system, all in web development. Budget: $200. Result: You get what you pay for. Don't cry for me Argentina. 
1. Because it was necessary to manipulate things in the browser, it's not my first choice however. 2. Auto optimization via JIT compile / V8 engine for "hot" code and it's ridiculously flexible in that, to a degree, it enables you to choose a programming style (to reflect a paradigm). 3. It's getting overused, for example most electron apps are an evil that don't need to exist. 4. It already is a thing, but it's not a replacement for JS.
Maybe something like this? class Child { constructor() { this.parent = null; } kill() { if (this.parent) { this.parent.removeChild(this); } } } class Container { constructor() { this.children = new Set(); } addChild(child) { if (child.parent) { child.parent.removeChild(child); } this.children.add(child); child.parent = this; } removeChild(child) { this.children.delete(child); child.parent = null; } } const container = new Container(); const child = new Child(); container.addChild(child);
Yes, you can use [the resolve.modules setting](https://webpack.js.org/configuration/resolve/#resolve-modules). They even give your scenario as an example: modules: [path.resolve(__dirname, "src"), "node_modules"] If you don't use a src-folder, just use __dirname directly. Alternatively, you could add the project root as an alias. That way, it is explicitly different from your modules.
`xxx`. I'll rename it if you want. The last example would be... function callMe(callback) { // ... let resolve = function() { /* whatever */ }; callback(resolve); } callMe(function(resolve) { resolve(); }); 
immutability is beautiful 
Check out https://getmesh.io - free and open source with REST and GraphQL API. Setup: docker run -p 8080:8080 gentics/mesh-demo:0.21.0
You're not totally wrong, no, but you are _a bit_ wrong in one detail: The goal is not running `someFunction` _per se_. The goal is having a system where each part has control of the things they run, but _also_ has a way of telling the other part that they are done doing their part. Let me expand on this just a little. We have code that does taskA, and there is a small part in taskA which consists in calling some asynchronous operation, say a XHR, reading a file from disk or something like that. That operation is asynchronous. So this breaks taskA in two parts: taskABefore, and taskAAfter, one is the part before the asynchronous operation and the other the rest of the task after that operation. With a simple callback, what you'd do is something like: function taskA() { taskABefore(); asynchronousOperation(taskAAfter); } And there is a subtle nuisance here. While you still control the execution of taskABefore, you no longer have control of the execution of taskAAfter. So, what you do is introduce "something" between you and asynchronousOperation... If this is starting to make some sense, you **might** -or might not- find useful [this ELI5 explanation on promises](http://www.tinselcity.net/reddit/promesas) I wrote for this subreddit a couple of years ago. Be warned that it **is** redious and slow. If not, well, I don't know what more to tell you, sorry.
Sure, `resolve` "does something". It is a function, it does its thing. But that is unrelated to all this callback passing around.
Sorry but you sound really douchy... if you know just a tiny bit about software, you would know that estimates are almost always wrong. Just from reading your post it feels like you create a very bad environment for people who work for you. Lastly. if you end up in bad situation and bad relations with everyone you work with it's probably you that are the problem. 
They fail the delivery times because they don't know how to do what they assured me they knew how to. Not because they badly estimate times. What causes wrong estimates are unexpected problems. The projects I hire out for are simple and don't have unexpected problems. Especially since if they have a problem they can just ask me and I'll tell them how to do it.
No, they fixed this
Then fix your hiring process.
Wasn't that a feature in webstorm from like the beginning?
Strapi Contentful free plan Netlify CMS
Strapi is awesome 
or vue!
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
I havent used shopify but just look at the documentation: https://help.shopify.com/api/custom-storefronts/storefront-api/getting-started#authentication
I don't know why but playing around with stuff like this helps me see what's going on. new Promise(function(butt, booger) { butt('Cleaned The Room'); }).then((m)=&gt;{console.log(m);}) 
I think this article forgets to mention the main reason Apple is so “hostile” against web apps which is security. Like them or hate them, but Apple understands that day to day users will click on anything and download apps on their phones with little to no regard to the origin of those app and what can they do to your system. If they allowed unverified web apps to get location info, pictures, etc out of your phone. Then it would be easy to have iPhones giving out all the user info because the user clicked on the wrong link. Same thing for background playing. Which can be a way to sucker you into joining a botnet or have your resources mining crypto currency for somebody else’s benefit. The apple App Store is a service that provides not only a catalog for your apps, but a screening process to make sure apps do what they intended to do without horrific bugs or hidden gotchas The main reason people buy apple stuff is that they just work, when something in your phone says it will do x then it will do x or at least give it a genuine try. The average non technical user can go to the Apple store and download any app knowing that some expert have done some background check and ensured that the app is honest. Something google and Microsoft both ignores with many examples of subsequent user harm. If you don’t like that about Apple then you are welcome to never ever use their stuff. But in any case a $99 fee and verification you are a legitimate business aren’t really that huge of a hurdle 
That seems very similar to having namespaced absolute imports for different parts of the app. The central resolver in this case is Webpack.
What if a file moves within an aliased folder? Black hole?
Sure, and now VSCode has it. 
Well, it _is_ a not-so-simple matter and it does require some effort the first time.
This days, you can make pretty much anything using JS. Wether that is a website, a mobile or desktop app, or a backend server, or VR, etc. And yes it could be argued that there are better tools for the job for many of those things above, but JS will get you up and going very quickly with just one language. Also it's really fun to write JS, especially if you write in ES6. ES5 is kind of wonky but you get used to it.
This should be pretty easy to test, have you tried benchmarking this on an array of size 100 vs size 10000?
If you want to write frontend you don't really have a choice. Even all the "compiles to JS" languages require a bit of underlying knowledge.
Hey, great idea! Imma test that!
React native and electron is how Discord is made. It saved them tons of money.
&gt;Essentially: promise says "please wait while I compute". &amp;nbsp; Isn't it more sort of: *"Please continue what you were doing whilst I compute - it may take some time."*
Yes. Still, VS Code is not an IDE, but it's getting the features of one over time.
Then wait until the element actually exists, before accessing it. Because chances are that the element is dynamically created after the page has finished loading.
Hmmm, yeah I suppose so. I'm sorry, was super tired when I wrote this. ^^ I was thinking of when you pass in a predicate function to complete the logic you desire when the promise can resolve the data. I suppose I forget to mention how it interacts within the scope the promise function is actually called within. Think I'll edit my answer in case it helps others.
I think it's iterating over the array, it does hang a little when I run my code ``` let arr = new Array(10000000).fill('') console.log('finishing the array') arr = [...arr, 'shark in the dark'] console.log(arr.includes('shark in the dark')) ```
It does hang for a bit, so I think it is iterating. but then again, the array I am using is really big I don't know if it's just my computer
Thanks for rubber ducking with me 
I'm looking for something in the similar space for a project of mine. My first thought was using wordpress as a headless cms, the front-end of the website and the mobile apps will communicate with it with its new rest api. But I really don't wanna use php. I also don't wanna use plain js, I'm looking at typescript and dart for now. So I can use react/angular as my front-end but for cms capabilities WordPress is overkill with all its bells and whistles. My second thought was at strapi looking at its documentation and site it looks pretty solid and keystonejs is good too but keystonejs is more like js version of WordPress. Any thoughts? 
This is why people use Linux/Mac.
Ah I see, so basically the container acts as a wrapper for the innumerable, if I understand correctly. Still, other references outside that container would persist, keeping the object active.
Huh, that is not what I thought I wanted, but solves the problem quite neatly. Now I feel a bit daft. :D Thank you!!!
You'll have to track the event. e.g. When `mousedown` occurs, have a `mousebuttonheld` variable set to `true`, so that when `mousemove` event occurs, you'll know whether the mouse button is currently being held or not. Of course, you'll have to listen to the `mouseup` event, so that you can clear the `mousebuttonheld` variable. Make sure the `mousebuttonheld` variable is within the scope of the `mousemove` listener.
Use performance.now and compare results between small and big. It also makes sense for it to be a iterative lookup. If it was constant time it would need to store a LUT right? That would make the array twice the size than needed.
Yeah, I suppose you could set it to an empty object first and have a function in every container that will remove the empty objects. One implementation may be that each object emits a custom event of your naming and have each container attempt to delete it when the event fires.
That makes sense. I'll have to try performance.now later. It's already 3am
Microbenchmarking with optimizing compilers like V8's is not easy; recognizing constants, invariants or dead code takes knowing the internals of the compiler, otherwise you won't know what you're measuring. The best bet for optimizing performance is using the profiler.
**Updates over the email thread** **ME**👇🏼 &gt;Dear manager, &gt; &gt;Not sure what exactly you want behind getting a documentation for "what i know so far over frontend". &gt; &gt;If you meant to have a documentation over our whole CMS stack, the scope requested is much bigger and will take a lot more time also I committed not to submit poor deliverables. This will take no less than a month! &gt; &gt;We can discuss this as what was requested from me is a documentation on both iOS and frontend and continue to help the team with their requests. &gt; &gt;As you know I have already submitted my resignation and I am doing this to help and no other reason. &gt; &gt;Regards **Manager reply** 👇🏼 &gt;Writing your knowledge of front end doesn't need a month. &gt; &gt;By end of today, show coworker what you have written so far to follow up with you as you go.
Good javascript courses.
Not a course, but this Github repo and series of 6 books "You don't know javascript" is great resource. I consult these books very often. https://github.com/getify/You-Dont-Know-JS
This actually happened to me twice.
&gt; array push is faster than rest/spread operators Well yeah, of course in most circumstances. Array.push will probably just use allocated spare space to extend the existing array, whereas the spread operator allocates an entirely new array and copies values into it one by one.
VSCode is killing it. The only editor I use now.
Edit your post to include information about what your library does. Ideally, this stuff should go in the title but it's too late now.
Agreed, there won't be any more changes to the design, actually the idea was to make it look similar and not exactly the same. Thanks your comment
awesome!
Thanks, just fixed the issue with big numbers by converting them into scientific notation. The idea here is not to use any library or external dependency for mathematic operations, but thank you for your advise 
That sounds like quite a complex data model and like most things you will probably find it depends. A lot of depends on business things like future requirements, how much change you anticipate in the initial data model and things leaving that as well. Mongodb is great at allowing you to change your data structure so to start with keep it as simple as possible. Have one big object for this. Get it implemented and start using it asap. Time to get an initial thing working in most tech this is so important. Once you have done that you will probably realise the API call to fetch this data is a bit slow especially when users get lots of "tasks". You would have several choices speed this up and you will have several options to do this.
yes, exactly.
Not true and not worth it 
It should and does indeed matter to a client whether work is outsourced \- for a variety of reasons: Off the top of my head: * Non\-disclosure agreements * Legal Compliance * Costs \(why pay you when they can go to the 3rd\-party cheaper labor themselves?\) etc... * How much of your billable hours are you actually working on the project? Would they be happy knowing that? * Legal Jurisdiction \- If the sub contractors are in a foreign country there may be little or no action possible against them if they steal/re\-use/sell code or create attacks based on code they may have seen or worked on. * Trust \- they may have verified your work, history and your credentials \- but are they content with that of your sub\-contractors? * IP / Privileged information If you tell them you sub\-contract and they're cool with that \- that's actually pretty great! Everybody wins. However if you're not telling them \- I'm sure that in most cases they'd be really pissed if they found out. 
I'm all for scaling up slowly and appreciate that people would need to pull in extra help to get things across the line. However it appears OP is regularly getting himself into issues with this. Re: subcontracting \- see my reply to obscureentrepodcast below. I think its definitely necessary to disclose.
Too bad it's not still there with Flow.
The code team has been closely watching the developers!
Thanks for all your answers! I planed to record the talk but well...unexpected things happened and I didn't get the chance. However, I'll try and do it again so I can share it with you 😉
I would market the idea a little bit and see if any other developers were interested in working on it. It seems like employers would see a collaborative project as a demonstration that you can handle both sides of a PR and work with other people.
You can set resolve aliases for pseudo absolute paths.
If you put it in your portfolio, they're going to want to see the code. If you want to finish it, it needs to be less brittle. Either way, you *need* to clean up the code. But yeah, if you've got an impressive side-project, you should put it in your portfolio.
Push is faster by definition. It's amortized constant time, while rest\-spread are O\(n\)
I think it doesn’t have a choice but to iterate. For a binary search the Array must be sorted, but JS arrays don’t require ordering. There’d have to be a flag set when you invoke sort() then unset on any change the array. Such a flag wouldn’t be set if you simply initialized the array with the elements in order, not needing a sort() Hash lookups have a small amount of memory overhead, would JS implementors do that by default in JavaScript’s only list structure? I wouldn’t think so. Though it’s not impossible. It’d be interesting to go get the actual source of includes from V8, Chakra (Edge), SpiderMonkey (Firefox) and Nitro (Safari) 
I wanted to start using flow cuz ts was super intimidating but I'm a huge Google fanboy so I bit the bullet and learned. It's actually not that hard and I'm using the Google style guide and it's like pair programming. It'll yell at you for all sorts of bad practices
www.javascript.info Covers a lot of stuff and in a good manner. It’s updated as well. Has little challenges at the end of every section as well. It’s what I used and it’s been good
&gt;ES6 Object Destructuring put into practice. Good point, thanks for the feedback. I modified the title and I will be more careful in the future as well. :\-\) This was my first blog post in English.
Totally and completely disagree... * Your outsources can sign non-disclosure agreements, I have mine do it all the time * What sort of legal compliance? I'm not aware of any laws that dictate that a client must be aware of every third party that you hire. * Costs - of course it'd be cheaper if they went to the 3rd party themselves. The client uses you though because you understand this stuff and can communicate with the 3rd party properly. * Legal jurisdiction - People stealing your stuff is possible whether you've used an outsourcer or not. * Trust - they don't need to trust my sub-contractors, they need to trust me. Just like if I were an ad agency, they'd never meet my employees, they'd only meet the account manager assigned to their account. Clients do not need to trust anybody except you/their account manager. * IP / Privileged information is covered in the non-disclosure agreements Just about every business in existence uses third party contractors without informing their clients. 
&gt; However it appears OP is regularly getting himself into issues with this. Sure but it also appears OP doesn't really know how to effectively hire people. If OP could hire outsourcers effectively he wouldn't be running into this issue regularly. See my reply to your other comment on subcontracting, I disagree about it being necessary to disclose.
First of all, if you think that it would take you a month to write proper documentation, than that is what you think. It is not your manager's role to give estimations for your work. If he/she thinks they can find someone else that give the same quality of work for less time, they are welcome to fire you and hire them. Second, It sounds like your direct manager has some personal problem with you or just a terrible attitude. Which is weird because if they asked you to stay longer, they must like/need you. It sounds weird and doesn't make a lot of sense. Do you have a personal embroilment with your direct manager? Or is it strictly professional? Is the attitude you are getting from upper-level management also so hostile and untrusting? If so, I recommend you shorten your notice period to the minimum you are required by contract/law and leave them ASAP. I am all for not burning bridges and leaving workplaces in a friendly manner. But it has to be mutual and not one-sided. If upper management is more friendly supportive, I suggest you write/talk to your manager's manager. I'd write something like this: &gt; Hello. Since my resignation you have asked me to extend my notice period so you can be better prepared for the transition. I have responded positively and it is my absolute intention to make this transition as smooth as possible for the company. However, since I have resigned I am feeling that &lt;manager&gt; has taken steps and acted in ways that make the time I have left at &lt;company&gt; not only very unenjoyable, but also less productive. &lt;manager&gt;'s actions are hindering my efforts for a smooth transition. While I still wish to help and provide you with the extra notice time, I feel that it may be a waste of everybody's time if &lt;manager&gt; is hurting my efforts. 
Before everything, you'll need an understanding of the ins and outs of JavaScript, and also Node. For both, I recommend [JavaScript: Understanding the Weird Parts](https://www.udemy.com/understand-javascript) and [Learn and Understand NodeJS](https://www.udemy.com/understand-nodejs). From there, you'll need to understand the newer JS syntax introduced after the ES6 version, [ES6 Javascript: The Complete Developer's Guide](https://www.udemy.com/javascript-es6-tutorial) covers that. Once you have a solid base on JavaScript, you can tackle one of the big front\-end frameworks. There's this amazing course [React JS, Angular &amp; Vue JS \- Quickstart &amp; Comparison](https://www.udemy.com/angular-reactjs-vuejs-quickstart-comparison) that explains why those frameworks where made, and goes over each one explaining their basics, so you can make an informed decision to which one you want to learn more about. Those where all courses I've taken my self and I've learned invaluable information with them, information I would not have if I simply followed a blog post step\-by\-step instructions.
This is a great course because it's fun and you get to see results immediately. It doesn't teach you a ton, but it does keep you excited about JS and introduces you to a lot of cool stuff you might not know JS can do.
If you are willing, try CrxOop, and take a look at the ANNUL function (http://eyeandtea.com/crxoop/v2/ch03/06/08). However, this is only available for CrxOop classes (Classical OOP), not CrxOop structures (Prototype Based Inheritance). You could then do: crx_registerClass('myClass', { "PUBLIC VIRTUAL FUNCTION kill": function() { this.annul(); /*VIRTUALLY ANY FURTHER ACCESS HERE to 'this' WILL LEAD TO A FATAL ERROR. CHECK YOUR CONSOLE.*/ } }); var t = crx_new('myClass'); t.kill(); /*VIRTUALLY ANY FURTHER ACCESS HERE to 'this' WILL LEAD TO A FATAL ERROR. CHECK YOUR CONSOLE.*/ If you have any questions, I am willing to help.
Honestly, the MDN is awesome for learning about things. If you just decide to make a simple browser game, say tic tac toe, and then keep adding features, you'd learn a ton just by having to look up on MDN on how to do it: Work in console, then browser, then all device screens, add social share buttons, sound effects, add support for multiple input types, add graphical effects, oauth, online multiplayer, win/loss percentage, add AI, support old browsers ... Building things is often better than doing a course, I've found.
If the array had an associated hash table of its elements it could implement `includes` using it to get an O(1) amortized cost. Worst case would still be O(n). I don’t believe any implementation does this and I don’t think it would make sense to keep this extra bookkeeping around for general usage, though.
In Soviet Russia, JS choose You!
Colt Steele's web developer bootcamp on Udemy search for it and discount on Google to get it for 10 or so dollars. He really gets in and shows you how to make stuff and use tools and find stuff out for yourself and covers a lot of material. Can't recommend it enough for a beginner.
"serverless"
Since you're contributing to an existing library, I think the best choice is to be consistent with the rest of the library. I quickly glaced at fast-check and saw a `fc.integer(min: number, max: number)` method so use the `fc.array(arb: Gen, min: number|null, max: number|null)` to stay consistent.
These books are great. They cover every aspect of JS in detail and it's a deep dive every JS programmer should take at least once, and hopefully revisit relevant sections as needed. With that said, you finish a basic JS course before you try to tackle these books. They are very technical and cover subtle points you should be aware of, but will might not encounter often in the wild. Once you finish a basic course, head to these immediately and you'll see why you'll go back to these books again and again. Want to know every aspect of prototype based inheritance, or how `this` works, or closures, etc.? These books are the only ones you'll need.
MDN is another great resource. Some of their tutorials are good too. But I would use it just as a resource. A basic course that has a curriculum and will guide you is probably going to be better for most people than trying to learn pieces here and there.
Actually I am the owner of the library, the issue I am facing today is that specifying an array with a min constraint only is not feasible. The signatures I allow on arrays are: - array(arb) - - no constraints - array(arb, max) - - max constraints only - array(arb, min, max) - - min and max The number|null alternative, was my first choice for that reason. It keeps being compliant with existing signatures while providing somehow more clarity. I was wondering if the second notation would not be a bit more JavaScript. 
You'd better use hash table in the first place.
PostgreSQL 
Are we still doing this? I think we all know by now that serverless doesn't actually mean serverless
https://watchandcode.com/p/practical-javascript Try this free course first, it gives you a good understanding of the basics then you can build on top of it. This course was also recommended by hack reactor before you get into their prep camp. 
Gonna second the Mosh Hamedani courses. I discovered him when someone posted his intro to nodejs course here and I bought a year sub to his courses for like $75 bucks. His accent is perfect to engage my attention without droning on, and he doesn’t get lost in tangents, he keeps right to the point at hand.
Oh for fuck's sake not this shit again
It’s the equivalent of saying “the cloud is just someone else’s computer” — we all know it, but some pedant has to point it out. This person is saying there’s clearly a server involved but they seemingly don’t accept the naming of the abstraction as “serverless.”
This exactly!!! Too many times I see peers doing this big deep dive into learning before doing. Not to say pre learning is bad. But for example you shouldn't need to read an entire react book before doing anything with react. Just know enough to get something done and produced. Learn more to optimize or solve problems.
Wow, awesome! I am wondering, can I skip NodeJS if I'm only interested in front end? Also, how well do I need to know JS before moving to ES6 and than the frameworks? Because I've already completed a few Udemy courses on JS, but I dont have a lot real world experience with it.
I don't know about the "impressive" part, just showing that you CAN make a game in React. Doesn't mean you should, apparently. But yeah, obviously I would clean up whatever's done up to this point.
I'm doing coding challenges and I was going to use a hash instead but then I said to myself "hurr hurr... Imma just chain ALL the methods to this array like it's all good. Because that's easier and prettier and more readable than writing a for loop and a hash. And it's super late so who gives a flying eff" or something like that
&gt; However, JavaScript is not an OOP language *sigh*
EloquentJavascript.net comes with practice exercises in-browser. The simplicity of it makes it a joy to go through.
I recommend the second one. It's nicer when you're providing a maximum but no minimum and it makes reading the code easier for new developers as it documents what the arguments are for. 
The first time I wrote my little test, I used the spread, jus cuz I'm so used to it, and because I was being a bit of an idiot.
In your draw function, try changing both your for loop to be for(var i = 0...) and see what happens 
Computers that serve data are servers. P2P or otherwise
Did you try to convert it into real time messaging chat? Is it even possible with server less engine?
http://javascriptissexy.com/how-to-learn-javascript-properly/
Take your set interval createEnnemis() and remove it from your loops and just slap it on global
Thanks dude
The point is that all of this should be unnecessary for a PWA. The only reason he is even messing with the app store is because Apple intentionally gimps open web standards support. &gt;The main reason people buy apple stuff is that they just work Except web pages, web pages Apple apparently can't handle.
I wish people would stop recommending that course, most of the material is several years outdated and it's not like there aren't better teachers with more current material.
Jsbin/Jsfiddle your code, let's take a look.
added
What exactly is this?
So it's serverless because the server was written by someone else?
Good point. Thank you 
i am deeply allergic to redux, so i'm sorry, but i don't consider trying vanilla react with no data layer. [i believe that your code will radically simplify](https://github.com/StoneCypher/todo_redux_to_not).
sweet gonna check it out, any opinion about my code? is it messy or okay?
"Serverless computing is a cloud-computing execution model in which the cloud provider dynamically manages the allocation of machine resources. Pricing is based on the actual amount of resources consumed by an application, rather than on pre-purchased units of capacity. It is a form of utility computing." It's not that hard.
It is possible with tailored solutions like firebase with lambdas it can be done with db and update checking by interval. Not efficient, yes, but possible
Your coding responsibility is “server-less”. From your perspective it’s serverless. From the perspective of the actual stack it indeed has a server. I think people who think it’s not serverless are being pedantic. 
This makes any regular clouds with autoscaling serverless too. Not like his comment adds that much of value, but can't justify the amount of downwotes casted on it. Or is it some local subreddit holy war?
Just got this! Thanks for posting :)
Just updated with a new jsfiddle. I didn't really want to use for loops, as I prefer using array methods such as map, reduce, filter. In this case, I used for loops. Also wanted to create the function that took how many teams you wanted, and the list of players to split, then return an object with those players split into teams. Definitely room for improvement. For example, when splitting 10 players by 2 teams, you get 2 teams of 5 players. But splitting 10 players by 3 teams, you get 3 teams of 3 players, with 1 player being left out. Have to make some dinner now but might return to it after :)
oh but there will never be the case of 3 teams because its 5v5 shooter!
Okay, great! In that case, can ignore that completely :)
I couldn’t believe it when they added classes, but not public and private keywords. We had them in AS3 ffs. 
Thank you for the input, but crxoop is not possible. 
I was starting to write up an answer, but in doing some research for it, I came across a StackOverflow question that has a lot of really good discussion on it, including the pros and cons of different techniques. I think it might be useful for you to take a look at: (https://stackoverflow.com/questions/23740548/how-to-pass-variables-and-data-from-php-to-javascript)[https://stackoverflow.com/questions/23740548/how-to-pass-variables-and-data-from-php-to-javascript]
The problem with this is that I will be able to quantify how much time I spend watching YouTube, and that would be depressing :/
Absolute paths aren't very useful when code is shared between different environments
&gt; i cant just scroll github and hope to find something cool Wait why not? I've come across interesting projects through GitHub, Reddit, and Hacker News.
I love how everyone is sick of this "acshually " shit :)). 
Even after calling sort in the array, it's going to be sorted based on the supplied comparison function, so it would need the same comparison function in order to implement a binary search. It might be possible for an engine to optimise it for arrays that contain only primitive values and were sorted based on the default string comparison. But that is probably not the typical case and probably not worth optimising for.
Classes are just syntactic sugar for already existing mechanics.. Private keywords weren't added because there were no existing ways to make them
Nah, it would be easy. Public vars would be in the returned object, private wouldn’t. 
Solved it by doing the following: Added a var frameCount = 0 In the global function, frameCount++ The function that decides whether enemies spawn or no: if(frameCount % 80 === 0){ennemisArray.push(new Ennemis(canvas.width,Math.random()*canvas.height, 15, 50));} This way, a new enemy spawns every 80 frames
https://youtu.be/IJPa8ZUoztc 
Would love help on https://github.com/commitizen/cz-cli
- Work on something you are interested in - use modules that help you with what you are working on - find out they are not working es expected - fix that and make a pull request. - congrats you are contributing to an open source project. 
Probably the latter. I'm a bit out of the loop, too.
But is it?
This article from a year ago should be updated to include: **[ESnext Private Instance Methods and Accessors](https://github.com/tc39/proposal-private-methods)** *(Currently in Stage 3 of [TC39 Proposals](https://github.com/tc39/proposals))* 
Is there a course/teacher you would personally reccomend who is more up to date? What do you like about the coarse and what do you like about the teaching style of its instructor?
Thank God the script isn't for time spent on Reddit.
Javascript IS a OO language. 
Is this a risk you're willing to take?
Those answered confirmed my fears. Using full stack JS is becoming more and more appealing by the day.
"Wireless" internet. 
Here's some links to get you started: https://www.firsttimersonly.com/ https://opensource.guide/how-to-contribute/#finding-a-project-to-contribute-to https://www.codetriage.com/ https://github.com/MunGell/awesome-for-beginners https://openhatch.org/search/?q=&amp;language=JavaScript
Why do you think that?
But it is no longer serverless? Or do you mean lambda will push into MQTT and some other service connected to the same MQTT will transmit this to client over WS?
I heard that's common practice to name "private" variables with _. So if you are working with code from someone else and you see something like _someVariable, you shouldn't access it from outside.
There is simply no matching MS when it comes to dev tools. VsCode is fantastic. It seems you don't hear about Sublime/Atom anymore and for good reason, they are just editors. In what areas is WebStorm better than VsCode?
I think we should universally be recommending Brad Schiff's Web Design for Beginners course, he uses the same level of hand holding as Colt, but uses more modern practices. I also think Jonas Schmedtmann's Build Responsive Real World Websites with HTML5 and CSS3 course is great, but I could see some people being turned away by his accent, despite him being a good teacher and having constant DIY challenges throughout his courses.
No, the main reason Apple is hostile against web apps is that they cut into Apple's revenue and allow developers to build multi-platform apps more easily.
Tbh it just needs a better name than “serverless”
Hi /u/lovleyjr123, For javascript help, please visit /r/LearnJavascript. Thank you!
Everyone knows this. Doesn't mean serverless isn't a thing. You know it means not having to manually provision and manage servers, which is a huge benefit.
All very true, but the habit courses don't teach you, yet is absolutely vital, is breaking a story down into manageable pieces. Programmers usually aren't told "here's how to install bcrypt", they're told users need to log in to the site. I often find it more teachable to give a beginner a vague but simple task to complete, and ask them to break it down into small chunks, before getting started. That's the double bonus of TDD: on top of knowing new work hasn't broken old work, programmers are forced to take things in chewable pieces.
You should consider spending some time to learn more about the basic data structures. I’d expect any Junior Dev to be able to easily create all the basics (array, map, set, linked list, btree) and lookup / search methods fairly trivially. 
Serverless ? How does that work ? Using pigeons ? That’s a totally dumb name for the concept ...
It doesn't have to do with using full-stack JS or not; you'd have the same issue with a node/express server. But anyway it's definitely easier to separate everything and communicate via a rest API. In cases where I still need the server to write some data into the page I put it in meta tags, something like: &lt;meta name="myApp/someVar" content="{{someVar}}" /&gt; Then pull it out of there with JS. Better IMO than writing JS globals into the page.
How do you write tests without knowing JS? It's a chicken and egg problem. I like to introduce students to TDD early, but you can't write tests without first learning the language you'll write the tests in.
Nope, not kidding. No idea why people believe this. Waiting for some sort of rationale.
Most efficient way I can think to do it: shuffle the array (Google the term “Fisher-Yates shuffle”), and then split it in two. var players = [‘player_one’, ‘player_two’, /* ... */]; var half_way_point = Math.floor(players.length / 2); var shuffled_players = shuffle(players); // implement the `shuffle` function yourself var teams = [ shuffled_players.slice(0, half_way_point), shuffled_players.slice(half_way_point) ]; If you know the number of players will always be 10, you can remove the `half_way_point` and replace it with `5`.
It's an industry standard term. Serverless means you're providing a solution which does not require setup, maintenance, or tear down of servers.
Please make yourself familiar with modern concepts, as serverless is one of the most important paradigm changes atm. 
Serverless just means your app isn't sitting around waiting for connections. When someone makes a request to a function it just runs the function and sends the output and stops. This way its not wasting server time when its not being used.
Nah, its because serverless is an established term used to describe this kind of autoscaling "upload just your code" ecosystem. Because you don't have to actually touch any regular server architecture or SSH into any instances. But then you get people like old mate here trying to be clever by saying "akchually!", duh everyone knows this is still sitting on a server somewhere, just like I know my "automatic" car doesn't drive itself, no need to point it out at the mention of the word. 
What I have been doing is Jason encoding the data from the server and injecting it as a (safe) string into a script tag that has a non-JavaScript type attribute. That way it is data that can be parsed out of the don, but won’t be parsed or executed by the js engine.
That thumbnail
How would I have the same issue with Node? I do not know much about Node but if you look at the 3rd solution on the first answer, that would not be a problem in JS. Since you’re using the same language, you could easily set the variable, right? You use a REST API for *everything*? So you would make a request on load and then initialize the module for the page after success? How would you know which Id to use?
You Don't Know JS and Eloquent Javascript. Best is a bit subjective, but that's what I use.
The easiest pickings are writing better documentation for npm packages that add types to already existing libraries.
Definitely true. I have to admit I was first taught, after learning very basic Ruby, by pairing with someone who wrote tests for me in Capybara. But if the test suite is already set up, understanding how to add to it is pretty trivial. You usually just copy paste and if you're using chai assertions, it's basically English.
Uhhhh, there is totally a proposal for it, stage 3
I mean, it's a nice looking color scheme and all, but how exactly can colour schemes be optimized for specific development types?
JavaScript &amp; jQuery by John Duckett https://m.barnesandnoble.com/p/javascript-jquery-jon-duckett/1124331536/2679810064243
This confirms what I’ve long suspected - that _years of experience_ is massively overvalued by tech recruiters
Check out the Drive Service in Google Apps Script - https://developers.google.com/apps-script/reference/drive/ It looks like the “FileIterator” data type might have some methods that can help with this?
I've been working with it for a while now and would definitely appreciate some more clarification about what you mean. Programming paradigms are how you choose to write code and how languages best fit that paradigm. I don't know anything which implies JavaScript is more suited for OOP than FP.
The language is certainly constructed so that the inherent properties and methods are found on objects. That doesn't mean that it is best suited to be used in an OOP style. People thinking OOP is "everything is an object" is just as incorrect as thinking FP is "everything is a function". There is much more to both paradigms than this.
I am about halfway through, I am not "coder". I think I like freecodecamp better. Mainly because this doesn't simulate programming to me. The lack of typing and keyboard is not teaching indenting or case sensitivity, coding isn't going to have the multiple choice answers for you at the bottom. 
Down to the project level, not the filesystem level. It's configurable with webpack if you have isomorphic parts of your code base.
Yeah, I think what you mention here is the biggest pitfall in that it doesn't really teach applicable skills. I mean there isn't anything inherently wrong with that but marketing the experience as a learning experience is wrong in that case.
[Eloquent Javascript \(the 3rd edition is available online free, the book comes out later this year\)](https://eloquentjavascript.net/)
Can you give an example about what's much more to OOP than methods and properties on objects?
Depends on your experience. Do you have prior experience or are you a complete beginner?
It's about how YOU use those things, not how the language is constructed. JavaScript's methods and properties are all accessed through their objects and prototypal inheritance, sure, but how you use them determines the paradigm. If you don't create classes or use inheritance but instead compose pure functions, use currying, etc. then that is FP, regardless of whether you accessed those methods via JavaScript's window object.
Also: &gt; JavaScript's C-like syntax, including curly braces and the clunky for statement, makes it appear to be an ordinary procedural language. This is misleading because JavaScript has more in common with functional languages like Lisp or Scheme than with C or Java. It has arrays instead of lists and objects instead of property lists. Functions are first class. It has closures. You get lambdas without having to balance all those parens. - Douglas Crockford
You can write functional or procedural or OO or whatever code in any number of languages, yes. (Although JS isn't particularly appropriate for FP compared to languages actually designed for scuh.) But this isn't about how you choose to write code, it's about the language, and Javascript is fundamentally object oriented. In JS there are only 6 primitive types; everything else is an object, and even the primitives are automatically boxed, so e.g., `"foo".toUpperCase()` is valid JS. If I had to pick a single feature that makes JS distinctive compared to other similar languages, I'd quite likely pick the fact that it has prototypal inheritance which (again) is fundamentally related to objects. If you're writing functional code in JS, you're writing code that manipulates objects using other objects (even your *functions* are objects!), because that's just how JS works, because it is an OO language. Or to quote Wikipedia: &gt; JavaScript is almost entirely object-based. I can't really be any clearer here. :)
At work, our main project uses GraphQL and fetches content from Contentful, but at build time, so it'll statically render that content, maybe that's similar to what the OP wants. Although, then you lose the power of a CMS which is not having to deploy to reflect content changes :shrug:
I can speak from my experience using it. I'd say I'm not a beginner, but very close to it. I've taken a couple fundamentals courses at my local community college, but that's it. I found it to be engaging and fun. There are two "courses," if you can really call them that. Programming Fundamentals and Animations. The fundamentals section was review However Animations was all new content. Animations deals with the d3 library and SVG graphics. I do agree that the way you type isn't similar to using a full physical keyboard. Inputting full function names with a single tap is a very different experience. However, I found that method to be a good way of narrowing my focus on exactly the concept being taught. I spent less time typing and more problem solving. It also made learning less overwhelming, which is a big deal to someone with anxiety issues. Overall I am very pleased with the app. I think it's worth a playthrough for beginners. 
I really can't stand when people say they really can't be any clearer. You're quoting Wikipedia which is edited by anyone who wants to edit it. What's your take on Douglas Crockford saying it is more of a functional language? https://www.reddit.com/r/javascript/comments/8mijn8/_/dzonex9
Also, please realize that you're basically arguing that OOP is about "when everything is an object" which is just as incorrect as when people think FP is just "everything is a function". It is not. It is about how you use the language.
It's kinda terrible from what I've seen so far. I'm plowing through it and it's like so many other "hey you can code too" programs where they just throw basic structure at you and ask you to memorize it..... I think to some people who can code that is all there is to it. But it doesn't mean you can troubleshoot your own code, read anyone else's, deal with frustration / impostor syndrome, put the pieces together creatively, read someone else's code, look up new information....
Total newbie here but it's really triggering me that they have some preset functions that you just use without even seeing the rest of the code and shit happens. Gonna stick to google. 
Which was my point.
Is performance important? Do GC hiccups need to be avoided? The object literal allocation is a performance hit. Why not remove the second signature and allow people to pass `undefined` as the second argument? This allows specifying a min without max or vice versa.
I would like to start from basics.
You’re welcome. I hope your discord bot is a success.
Lol /r/lolangular
To help your understanding of node, you can think of it much like you would PHP. It's running on the server and has no direct knowledge of what's going on in the browser without communicaiton, just as with PHP. The main advantage to fullstack JS is mainly that you're working in the same language across both the server and therefore have one less language to learn and keep in your head while you're coding. There is some ability to reuse code, although this usually have to be carefully planned to be effective. Genrally in the fullstack javascript world we do dynamically load data from a REST API (or some other server) upon page load. I can see why this might seem counterproductive at first, but it does have a few advantages: 1) It allows you to get something in front of your user faster, especially if there is a lot of data being loaded. You can send your JS &amp; HTML and get the interface rendered with placeholders/spinners in the places where data will be placed, then replace them once you receive the data. Even though this may technically take a slight bit longer, the first paint to the screen is going to happen sooner and make it feel overall snappier to the user. 2) Caching. If the main layout of the page is going to be static but there is new data that's going to be loaded, rendering it server side will require the entire page to be sent every time whereas dynamically loading the content will allow the HTML &amp; Javascript to be cached, so after the the first time a user visits, the page itself will be pulled almost instantly and you now only need to fetch the dynamic content, which is going to be much faster. 3) Separation of concerns. Separating your view logic from your data helps in general to make your code cleaner and more organized. In many circumstances (although it's not something I'm used to doing personally), the HTML and Javascript will be served from one place while the data is being served from another. This is how something like facebook or google work. They have servers that are just dedicated to quickly geting the markup and images to you and then there are a separate set of database servers that are set up solely for that purpose. This makes it easier to build out multiple interfaces if you need to. For example, if you're building an iOS app to access your service, a php file injecting javascript as it renders isn't going to be very useful to you. If you have a REST api, however, you can use that same database server for both your website and your iOS app without changing any code on the database end. That's not to say that there aren't drawbacks to this approach. For example, if you're going to be supporting users in developing economies, network latency is often significant, even when total bandwidth is decent, which can make it painfully slow to deal with multiple network requests. Also, if you want the dynamic data to be indexed in search engines, SEO becomes more difficult to deal with. 
 &gt; I'm an adult, but I've never done much coding beyond HTML, and certainly nothing with Javascript. "coding" "html" hmmmmm
You can use the `.filter()` function: const filteredArr = myArr.filter(item =&gt; !item.includes('/') &amp;&amp; !item.includes('{') &amp;&amp; !item.includes('}'))
&gt; It is about how you use the language. This is like arguing that a Porche 911 isn't a fast car, because if you drive it slowly, it's actually a slow car, and it's not about the design of the car, it's about how you drive it, and anyhow, you think a Porche 911 is more fun to drive slowly than quickly, so therefore a Porche 911 is *actually* a slow car. That's not how logic works. A Porche 911 is a fast car. JS is an OOP language. Even if you write some very non-OOP code with JS.
I've always enjoyed the opinionatedness of angular and it came more naturally to me than react. I totally see why enterprises choose angular. I'm super excited to learn angular 6 now that I've learned typescriot and ivy looks dope 
JS also has inherent language features which also make it very FP, such as functions as first-class citizens. Anyone can pick and choose features of languages that are more OOP or FP or anything else. Is PHP a functional language because I can create higher order functions? No. Real OOP is harder to do in JS than FP is, so it is, in my opinion, close to a functional language. It is, however, fairly subjective since it is less defined as either than languages like Haskell or Java.
First off, he's not even agreeing with you here; he's saying that JS is more functional than *procedural*, but we're discussing how OO it is. &gt; JavaScript has more in common with functional languages like Lisp [...] than with C C isn't an OOP language, quoting someone talking about how JS isn't like C doesn't really support an argument that JS isn't OOP. More to the point, Crockford says a lot of things. Some are correct, even insightful. Other's are dumb. This one is significantly closer to the latter category than the former, and has been thoroughly debunked many times (eg, [here](http://journal.stuffwithstuff.com/2013/07/18/javascript-isnt-scheme/)). (Since that was written, JS has gained slightly better scoping, but it didn't have it when Crockford made his comments, so I think the criticism is still fair.) It's great that JS has closures, but come on, PHP has closures. If that's where you want to set the bar, you're not really being very selective. JS *is* better at FP than languages which are extremely bad at FP, and *marginally* more like a lisp than a language that isn't like a lisp at all. And? Being charitable, Crockford's argument can be interpreted as "it's better than C!". I suppose it is. But I don't agree that he's making the argument you're making, and to the extent he is, he's clearly wrong.
IndexOf is about 20 times faster than includes, although probably best to test with your actual data. http://jsbench.github.io/#a4612afd0cd26e911ee8. Another way is to do the check before adding the item to the array in the first place
Depends on how picky you want to be but each includes function linearly steps through each string three times to find the character. You could loop through the string once and generate an object and then check that object for your last two characters 
No, you wouldn’t. JavaScript executes either on the client or on the server but not both. You may share code between them but execution context isn’t shared and so the value of `personIdFromDb` has to be passed to the client somehow in order to get that line. How would you do it? Well, now you’re right back to the SO question.
You don’t need to for the chat, but yes a lambda can push to MQTT. IoT can execute a lambda on incoming messages too and I think push to a message queue or SNS topic directly. AppSync is much more suitable for chat than IoT and does most of the heavy lifting for you
other than syntactic differences what are the underlying differences between filter and forEach that makes filter a more efficient option? 
That's another thing I was planning on asking. With the way my code is structured, is each item in the array 'scanned' once and then checked against all of my rejected characters, or is it scanned 3 different times and checked against each rejected character in each instance? From your answer it seems like the latter?
There’s no reason to learn jQuery in 2018. If you’re not already working on legacy code that uses it, there’s no reason to even consider it.
&gt; It's about how YOU use those things, not how the language is constructed. You're conflating two different things: A style you choose to write in and a style the language supports. We can write in any style even if the language doesn't support it. We could write in an OO style in C, for example, even if it wouldn't be easy. Whereas when we say a language supports a style, we mean there's features and syntax to make it easier to write in that style. C doesn't support OO because it hasn't added features to make that style easier. JavaScript, on the other hand, _has_ added features and syntax to make the OO style easier, such as objects, inheritance, overriding, and polymorphism. Keep in mind also that a language can support multiple styles. It can have features and syntax that make FP easier while also having features and syntax that make OO easier. 
I always try to use Ajax first. You can build web apps with plain HTML (no server pages) this way.
It you're new to programming, it is better if you either pick Java or Python as a starting point. JavaScript is lenient on mistakes and you want to avoid bad habits as much as possible. 
I agree with this 100%. I take issue with calling JS object-oriented. I think the best assessment of it is "it's complicated and can be either OO or F".
&gt; Transitioning between Angular 1 and 2+ was a pain. I'm going to out on a limb here and say it still is a pain. 
What about regex? Instead of all the includes() you can check with /[\/{}]/.test(item)
I ran a benchmark: https://jsperf.com/hdfsdfgsdf/1 forEach is slightly faster, but not by much.
[removed]
That really starts getting beyond my scope of knowledge. I'm still fairly new in the field and most of what I've been working on are internal web apps for corporate clients, so SEO isn't something I've had to worry about. Because of that I haven't yet taken the time to learn much about it. 
Thanks for the thorough response!
That’s understandable. I can certainly see how it would become a problem though. I’m more interested in applications anyways so I’m hoping I don’t ever have to deal with it in large capacities. SEO is not fun or interesting.
\&gt; and it works in all browsers \(you may use function based constructor in order to support older browsers\). ...
Good idea 
There is - but like the others said, just because you are using JS on both sides doesn't make any magic happen. It would look something like this (express.js using EJS templates) // router file app.get('/person', (req, res) =&gt; { res.status(200).render('views/person', { personId: personFromDb } // then in your template &lt;div&gt;My person is &lt;%= personId %&gt;&lt;/div&gt;
Those two are great. 
I don’t know any books, but Memrise is ok for JS
I know the concept. I know how it works. It’s a dumb and confusing term ... 
Did a 2 years education in web programming frontend/backend that I just finished. We learned jQuery at the start. Very easy to understand and grasp, and gave me a good concept on how to manipulate the DOM and how you can do this with JS. No... You don't need jQuery to do this, but it makes the step much lower and easier to take IMO. We didn't use jQuery much more then 1 term and haven't really used it again. But I know what it is if I ever stumble upon it. So for me this was a nice experience!
Not a chance. The most useful things in jQuery now have native APIs, and for any heavy lifting on the front end you'd be better off with some more robust, like React. There's *zero* reason to learn jQuery if you're starting out today. Literally the only use it has, if you're not working on a legacy code base, is that it Cheerio lifts nearly its entire API from jQuery. And Cheerio is occasionally useful.
For each is actually generally faster. For the set of data you described I have to wonder why you're concerned about efficiency? Either option should be sufficient, are you experiencing performance issues? Whatever your reasons you may also get better performance using `.match()` arr.filter((elm) =&gt; elm.match(\/|{|})); Again if performance really is an issue use `for/forEach`, but try using `match()` instead of 3 `include()`s
 The includes() method determines whether an array includes a certain element, returning true or false as appropriate. It uses the sameValueZero algorithm to determine whether the given element is found. var array1 = [1, 2, 3]; console.log(array1.includes(2)); // expected output: true var pets = ['cat', 'dog', 'bat']; console.log(pets.includes('cat')); // expected output: true console.log(pets.includes('at')); // expected output: false
The proper way is to use window object. And use the syntax like this: var window.iAmGlobal = "some val"; //Global variable declaration with window. //Any place in other part of code function doSomething() { alert(window.iAmGlobal); //I am accessible here too !! //OR alert(iAmGlobal); //I am accessible here too !! } By defining globals this way, you will make JavaScript more robust and reliable. Important points: Define global variables with window keyword in form of “window.VAR_NAME” You can access the variable with “window.VAR_NAME” or directly “VAR_NAME” Do not use other variables with same name otherwise it may cause unwanted results
To be clear, I've never used or asked for a portfolio to get or hire for a job, but I have had to and asked people to describe my/their previous work experience. For front-end work, you should be able to speak to how to build pretty high level interfaces. Basics include: Having built static pages that conform to web standards with HTML &amp; CSS. Experience using some sort of JS DOM selection &amp; manipulation; jQuery, Zepto, or even better, vanilla JS qualify. Can speak to what they do when they don't know what to do (query Google &amp; Stackoverflow, look to docs, and failing those avenues, ASK FOR HELP). Intermediate experience would include: Use of CSS preprocessors. Strong opinions on markup conventions (flex box, cross browser implementations, HTML5 elements,...). Working knowledge of AJAX (you should be able to whiteboard the pseudocode for an AJAX request with success &amp; error handling (with a library or without, up to you)). Expert level to me would include: Ability to speak to lesser known aspects of JS (context, closures, pretty much any of the main points from The Good Parts). Experts also likely have experience with one or more of the big MV* libraries or frameworks like Backbone, Angular, Ember, React/Flux. Have strong opinions about the above libraries &amp; frameworks. Have experience writing both functional &amp; unit tests. I have less experience on the backend, so take this with a big dose of salt, but I'd be looking for the following qualities. For a beginner: Has scaffolded an Express app and built out some simple routes &amp; views. Understands node's module system. How to handle retrieving POST data from requests in Express. Intermediates have likely: Handled setup and/or proxying of a RESTful API through an Express app. Written unit tests. Searched for and implemented existing solutions to problems using NPM. Can explain ways to debug node beyond dropping logs everywhere. Experts in node,... totally guessing here, but: Can speak to architectural considerations of an app. Can speak to using cluster Can speak to using node's event loop Can speak to using avoiding callback hell Can speak to using a bunch of stuff I've never tried or heard of... At any level, the most important quality is ability to communicate with others in a team environment,... without that quality, even experts are useless at best, and dangerous at worst.
https://www.codetriage.com/
If you have a look at https://github.com/larsbs/vimterial_dark/tree/master/colors/syntax I paid special attention to the syntax highlighting of languages used mainly in web technologies. That doesn't mean C or Java is not gonna look nice, it's just that I didn't fine tuned it for it.
I’m surprised nobody mentioned the bible of JS: “JavaScript - The definitive guide” (the one with the rhyno on the cover). Indeed, it’s for ES5 but you need to understand how JS works “under the hood” to become a good dev. Also, “JS - The good parta” (the one with a butterfly on the cover) is another great book.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [larsbs/vimterial_dark/.../**syntax** (master → 8e0afcc)](https://github.com/larsbs/vimterial_dark/tree/8e0afcc9119a5808891d77d2efd087f4ba085f8b/colors/syntax) ---- 
For the moment this kind of performance is not important. I don't think I should consider the extra allocation as an issue for the moment. Concerning the second signature, removing it would be a breaking change in the api. I prefer not breaking existing APIs for the moment. What I have done so far was introducing a placeholder that basically does what you suggest with undefined but with a real value. 
That's righ - you pass a value of the reference, that is then copied.
Good bot
This sub needs to ban all medium posts. 
Some of these guys are really insufferable, to the detriment of the product they're working on. 
Why ?
Give my app a try [https://play.google.com/store/apps/details?id=gamesmint.com.jsone](https://play.google.com/store/apps/details?id=gamesmint.com.jsone)
Please create a fiddle and post its link. I'll gladly take a look. 
Awesome. I always need more practice with connecting APIs.. especially with React.
I can second 'You don't know Javascript' series. It's awesome! 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Other implementations of JSX will have their own plugins, and none of those have to (nor do) follow the React model of createElement. It could be seen as unfair to try to enforce a default behavior based on React's approach. Besides, if you want just createElement (or anything else) instead of React.createElement for those calls, you can do so with the current React plugin using the pragma option: https://www.npmjs.com/package/babel-plugin-transform-react-jsx#usage
Try vast majority are trash. 
I know about the options. I am talking about it as this post is about the default.
Where is the key for the third level?
https://javascript.info/ It is free online and you can buy the ebook if you want.
Needlessly clickbaity title. It's more of a 'gotcha' then a 'lie'....
I understand your objection and to a certain point I agree with you. I do think JSX is seen as "a React thing" and I think that they (React) do take advantage of this (either intentionally or unintentionally; I don't have information to pass judgement on that point). On the other hand, I have a different perspective. I don't really _care for JSX_. I understand why some people like it, but I don't. Given that, I see your proposal as something that would actually make JSX more "standard" or, better expressed, more _prevalent_. You see it as a _disconnection from React_, but it can easily be seen as an _upgrade to JSX status_, giving it a more prominent position. And I wouldn't particularly like that. Not that I care _a lot_ about it, but I wouldn't _like_ it either. ---- In any case, what would your approach mean? JSX, in itself, is [just a specification](https://github.com/facebook/jsx). It is the various implementations you might argue about. And, well, that's easy, you could just create your own implementation. I mean, I understand the itch of seeing `transform-react-jsx` but then again, you could easily fork the plugin, create `transform-notreact-jsx` and fly. I can hardly see how you could force in any way that a particular implementation do _your_ thing or anyone's, instead of what they _want_ to do. Is Babel favouring React? Sure it is. Do I like it? Not a bit. But then again, it is their decision to do so. Hey, you could try to convince _them_ and you might be successful, but... why try to convince me?
You are exaggerating it
I think this is more a problem with TS. Both Babel and Buble support plugins and making a generic JSX plugin without a namespace is easy. The thing with JSX is that it's [still evolving](https://github.com/facebook/jsx/issues/65), for instance the addition of fragments recently, and perhaps do-expressions in the future. If countless of libs would depend on a fixed spec, nothing could ever move forward. Maybe some time it would be good to wrap JSX up so it can finally become *the* standard it ought to be, but perhaps it's too early - especially since JSX is currently exploring obscure platforms native and otherwise, it could still pick up things that are needed.
While JS definitely has features that allow writing FP-like code efficiently, it lacks some features that more stricter FP languages allow for, like more static optimisation. Those are implementable in JS too, but are probably a lot more difficult. I'd rather assess as "JS is dynamic and extensible enough that it supports writing any mixture of both OOP and FP code"
According to Google
&gt; Serverless just means your app isn't sitting around waiting for connections. by that definition, PHP would be Serverless. If that's what it is, the term is stupid...
If `forEach` is faster, it will never be faster by much. In my own tests (which I have [adapted here for this question](https://gist.github.com/scriptfoundry/3eb2bf10bc02982a310854b4c53bbd9a) -- results are in milliseconds), `filter` is pretty much consistently faster on current browsers while `forEach` is consistently faster on node, but the timeframe differences are so tiny that they are almost meaningless. Plus the difference will wander quite a bit depending on the size of the array, what you are doing in your callback, number of iterations in the test, and so on. Overall though, unless your code's sole purpose is array filtering, there's no compelling reason to choose one over another. They are both incredibly fast. Also, I found that recently, regex has stopped being faster in a lot of cases. This came as a huge disappointment because they were such a fast tool you could fall back on. If a browser supports `String.prototype.contains`, it is pretty much always faster than an equivalent regex. Regexes still have their uses for sure (large text streams or complex patterns), but for quick-and-dirty tests, they aren't as good as they used to be. 
Fair, thats how it works in Node.js context where its always running otherwise. Of course their are still servers involved, you just pay less for them. Its just a buzzword like "cloud"
That’s both surprising and disappointing.
Array.map(); var result= await Promise all(); result.sort() is my goto
 &gt;I've run into issues trying to do the routing with uriAnchor. I tried using the HTML5 history mechanism, but it seems that `history.pushState` does not trigger an event. What do you mean by 'does not trigger an event'? 
Bit late to the party but I wanted to share my first npm library: [stringy numbers](https://www.npmjs.com/package/stringy_numbers) You will never understand how much headache this induced. Hope someone somewhere gets some benefit out of it.
I like it 
* Afaik, your example function with only a do block would return nothing, you'd still need to return the result of the do expression * I don't think first class monad support is ever going to be a thing in JavaScript, they don't really fit in with it's design... at least in my opinion 
It is 10000% worth learning how routing works before reaching out for a library. Routing for a SPA is essentially 3 steps 1) Intercepting all link clicks within your SPA and using `preventDefault` so they don't create a full page-reload, and using `history.pushState` or `history.replaceState` so you still change the url appropriately 2) listening in on any changes outside link clicks, in particular `popstate` which is an event fired when the user hits the "back" or "forward" action on browsers 3) Calling a handler function after any occurrence of #1 or #2 and firing a particular function based on what the new url in your SPA is Here's a small gist explaining in better detail https://gist.github.com/abradley2/1baa9102969e052f14a02b621fa57b53
I'm not sure how this is supposed to allow for chaining monads? The proposal is very light, with only an 'if' example. How would you see that working?
With the example I was trying to point out that most functions would have the do keyword. I wasn't focusing on the functions guts at all. My bad, I wasn't explicit enough. Sorry.
I thought the 99 usd was per year for Apple? With Android it's not 25 usd per app as you seem to be indicating. That is a one time fee for access to publishing apps to play store.
Answering a): `function` and `do` don't do very well together. `do` is aimed at arrow functions, stuff like: // very nice! const f = (a, b) =&gt; do { const x = 10 * a + 2 ** b; log(x); Math.cos(x) - 1; }; do exprs also replace IIFEs: // old and ugly const result = (() =&gt; { const im = foo * bar - f(); return im + 3; })(); // new and expressive const result = do { const im = foo * bar - f(); im + 3; }; Regarding b): I don't see any extra indentation happening here in none of my examples.
Hey there. First you need to know the route \- where is the information stored? However, logins/registers always need redirects, because the cookie is correctly set then. You can use fetch. Example: document.querySelector('.button').addEventListener('click', async () =&gt; { let post = await fetch('https://jsonplaceholder.typicode.com/posts/1') document.body.innerHTML = await post.text() }) See [https://codepen.io/MartinMuzatko/pen/mKbBzq](https://codepen.io/MartinMuzatko/pen/mKbBzq)
Lol rhino and butterfly
It may be interesting to see when te first watched video is recorded, I just checked my data and the first recorded watched video is in 2015, which is not really my first watched youtube video
*simple*...... 
*simple*...... 
The bulk of your concerns revolve around the assumption that we replace the majority of function calls with do expressions. Why do you assume that? I'm not familiar with the use of do expressions in fp, but I assume you use them selectively, not in every place you could. Superficially, I'd expect them to be useful when you have one or two lined that rely on a lot of context...places where making a function call would involve passing many parameters and harm rather than help readability. That's (likely incorrect) assumption on my part. What evidence do you have for your fears? Features that are easy to misuse are one thing, but here a person would have to put forth MORE effort to do as you fear. What am I missing?
Again, not that I think there will be first class support for this any time soon, if ever. But the do notation of haskell and purescript are really slick. It would be something like: // Im inside a do block, so I know I'm a monad. // In this case, a Maybe monad. const someFunc = n =&gt; do { const someA = Maybe.of(42) // I assign 42 to someA // Im inside a do block so i will take the final expression and put // it inside my monad (Maybe in this case). someA + someB // I add (n + 42) } Sorry if this is more confusing then anything else.
Because, applied functions are basically expressions, not statements. Of course, in javascript you will find statements inside a function, but the function itself when applied is always an expression (the function itself is an expression as well, since javascript has first class support for functions, which means you can treat them like variables and pass them around.) I'm not that concerned, to be honest, it's just that the first impression I get is that I will basically exchange return for do in every function and that I will have to indent 2 extra spaces when it comes to if then else's. I'm still unsure how it is going to affect switch statements.
https://twitter.com/jaffathecake/status/999610181452533760?s=19
Because JS evaluate expression from left to right -&gt; x += await 2 -&gt; x = 0 + await 2 -&gt; x = 2 
That's weird, maybe check if you selected the right account (YouTube channel as well) when downloading your data because I was manually able to check my first ever watched video on my account (which was deleted).
x is 0 when you call test()
Thanks, got it! TL;DW: `x += await 2` is `x = x + await 2` and as /u/snail_34 explained the first operand is evaluated before the `await`.
I think I had set my watch history to not be recorded before 2015 &gt;This activity was saved to your Google Account because the following settings were on: Youtube Watch History. You can control these settings here. 
&gt; browser does not fire a "popstate" event when one calls "pushState" But that's how it's supposed to work.
I don't see the link.
"Simple..." You'll just need: Node.js; Express; React; Cachimo Cleaner; Water; Glue; Nuclear Stone; Some paper. Now you're ready to make your *simple* application!
The actual weather application itself is simple". The process is not. This was a tutorial with the purpose of teaching. It's over-engineered purposely for the sake of practicing. 
Hm, let me put it that way: You use `var` or `let` if you *need* mutability (= a mutable variable) because you know the value will change over time. If you use an `if` statement to initialize a variable you *have to* use `var` or `let`. By doing so you sacrifice immutability only because the initialization is a little more complex. But there's still no need for actual mutability of the variable in most cases. That's how I think about that and that's why it feels "dirty" or like a "hack" to me.
test(undefined, b);
An order to learn things in. Some mix of easiest to hardest and most relevant/useful to least. 
I wish there was a tutorial that goes the other way.. just get me to some weather data simple.and fast! It seems like you spend the rest of your coding days refactoring bloat and removing unnecessary dependencies anyhow. Why teach it up when we all have to tear it back down
You can make a curried function ``` const foo = (b) =&gt; (a) =&gt; test(a,b);``` Then just make a function that has the default const bar = foo(defaultVal); bar(x); 
In that case the object literal makes sense to me. Alternatively, you could make `min` the third argument. But whatever matches the style of the project's other APIs is probably best.
It sounds like it's not necessarily about the weather data but rather over-engineered purposely for the sake of practicing.
Over engineered, yet you hard-coded the api key in your server source in a public repo. You should set that up in an environment variable and use a .env file for local development.
Thanks dude! :)
How would it be much simpler? Express is pretty lightweight and React is a pretty standard framework for an SPA. A lot cleaner than some vanilla/jQuery dom manipulation spaghetti.
I literally didn't know about this project until today so like... Thank you for that. 😃 Does anyone know if it has any integrations with VSCode where I could add IDE integration to that terminal?
The async/await does nothing here. This is let x = 0; x += 2; console.log(x); 
This looks really cool. Awesome!
`const data = await fetch('https://api.weatherdata.com/today')` There you go
Many devs have daily contributions in private repos and all you can see is that they contrubited. You can't see the code. And expecting someone to work outside of their daily worktime is unfair. Still seeing someone who has for the last year nearly daily contributions can tell a lot even if you don't see the code.
I stand corrected. Either way I don’t consider this a huge sum given the Grand context of making apps 
Faster yes, but not necessarily more powerful. C++ is more powerful largely because of its metaprogramming system with macros.
Oh, I'm sorry; I re-read your original comment, and now I realize you were saying this _wasn't_ possible (I thought you were saying it was). This stinks; I'd really love to have monad chaining in js (async/await was just a little taste). I feel like if this gets in it would set monads back. Of course, we might be able to steal `for`/ `yield` from scala
You're right about the difference (I always get the names reverse) but that's actually kinda my point. Angular is much better then Angular JS, but many of the Google projects are so large that (at least when I left about 1.5 years ago) everything was still on the original and the were no plans to migrate. That may have changed with the internal push for an odd hybrid of Polymer and Angular I saw before I left, but generally Google is slow to adopt FE *client side* technologies. You're very right about their hybrid FE/BE UIs (like the SERP jslayout system I mentioned), but I'd say those aren't super common outside of the core products just because of the amount of support infra needed.
The link is broken, the whole github page was replaced with a Hello World :/
Const {rowData, colData, subData} = options Const rows = await Promise.all( rowdata.map( async row =&gt; { return await Promise.all( colData.map( async column =&gt; { return await Promise.all( subData.map( async subCol =&gt; { return await getDataAsync(row.id, col.id, subCol.type) You can nest that all you want too. I use this for building custom Excel exports of data. Also, writing code on your phone into Reddit totally sucks.
I don’t know much about JavaScript, I mostly work with Objective-C, but it looks like it could be used to control a piece of hardware.
Andrew Mead's Udemy course for Node and React both have sections about testing, I know jest is used for the React course and it's likely what's used for the Node course. Stephan Grider's Udemy course on MongoDB sets up a DB/API and spends several hours going into testing with Mocha. David Kats has 2 Udemy courses about using Jest to test React. The best course that I've found to teach the basics of testing was the paid subscription to watchandcode.com, it uses simpletest.js to test vanilla.js .
Thank you for bringing this to light!
Thanks, going to look into this. Althought we're using Jest for this project will probably look into other testing framework for the next one.
Thanks! I actually wrote this library back in 2011 and decided to rewrite it for the modern ages :\)
I would be willing to jump in as a maintainer if some other people were interested as well, I don't think I have enough time to be a solo maintainer.
Oh man, I wish I had this information a few years ago... I had to work with HTML for emails as an intern and it was *not* fun, especially when the guy who came before me used so many tables. 
Maybe, but if you can make exactly what you need in 20 minutes with jQuery spaghetti, it's kinda hard to justify spending 1-2 hours(?) building that nice clean stack.
My two cents: JSX _is_ very much a React thing. When its spec evolves, it's to solely in order to suit React (case in point, new fragment syntax for React 16, even though other vdoms such as Mithril had that feature for ages). There have been other discussions before about making JSX more of a standard thing, but those have not really gone anywhere because fundamentally, JSX as a syntax with no underlying implementation doesn't really gel with the spirit of Ecmascript. Even more fundamentally than that, JSX isn't even that proper of an abstraction. You may have heard of Svelte or Angular Ivy. Going forward, React and friends are gonna have a seriously tough time competing with the performance profile of these solutions that fully abstract over the template at compile-time precisely because JSX is such a naked "abstraction". If you're relying on JSX, you are React-like, whether you like it or not. There are other abstractions and underlying algorithms being used by React competitors. For many, JSX doesn't even make sense as an abstraction (though that isn't stopping some people from trying to shoehorn it). Disclaimer: I'm the author of Mithril.js (a framework that uses idiomatically uses hyperscript, but can also be used in a React-like fashion via JSX) 
Ooo, this is timely! I'm starting to get some confidence with React and Express separately, but I'm not quite sure how to make them work together. I'll have a look at it later today.
If you're not testing React, there's no point in using Jest imo. It just makes your life harder with config and gotchas that you don't really need. I would suggest mocha as a test runner, as it's blazing fast and lightweight, and you can pair it up with a good assertion library to give you more expressive power when writing your tests (see [Mocha - Assertions](https://mochajs.org/#assertions)). It also supports async out of the box, which is most likely something you'll need at some point. If you're looking into integration testing (e.g. automatic clicking around simulating user interactions), I've had good experiences with NightwatchJS. On the same topic, I've heard great things about [Puppeteer](https://github.com/GoogleChrome/puppeteer), which takes away the somewhat painful part of configurating your integration test suite and also exposes a nice testing API. Hope that helps, and good luck!
YouTube
Yep that... Isn’t python
I wrote a jsperf to back up what I was saying before I posted but your tests look 1000 times better. Thanks for your commitment to accuracy :D
Seems like it's not an freecodecamp type of app, more as codecademy v2. 
Oh man. You read my mind haha
Knex is fantastic. For super simple projects, I have also used BookshelfJS \(which is built on Knex\) as well: [http://bookshelfjs.org/](http://bookshelfjs.org/)
What are the gotchas?
Sounds like you your tests are dependent on each other, ie. the order that they run is important, which is a big no-no in testing. There are different kinds of tests so knowing which ones you are running/writing is important. long story short, you want to "Registration &gt; Login &gt; Create Product &gt; Create List" you're doing an integration or end-to-end test, which means the whole test should be inside own test, not split up into a bunch of `it`s because the one thing about jest is that it runs tests in parallel for speed! Which means your tests need to be self contained, they should start and end in the same state, which means each the order doesnt matter because tests always, always, always (very important) have the same starting state/point. Since you're a junior I would highly recommend doing some research on TDD (test driven development) to skill up on a crucial aspect of software development
You can try —runInBand to get the all of the tests to run in serial. Jest by default will run suites in parallel but each suite runs its tests sequentially. My guess you have some kind of setup/teardown issue which is probably unrelated to jest. 
You're right. HTML is programming.
I'd disagree with this: I've found Jest simpler to set up than Mocha+etc because it bundles together several things: test runner, assertion lib and code coverage. It also has a CLI option to run all tests which have been affected since the last git commit, which I find helpful.
 &gt; As far as I know there is no way in Jest to force one test to wait for another The `runInBand` CLI option will do this 
This code has different scopes and async execution meaning that it will give you a x=1 on the first console.log(x) hence the test function (which is asynchronous) has yet to complete. And since the function test has it own scope when it is invoked x inside the function will actually be 0, up until the x+=2, and therefor it gives x=2 (and not x=3 as expected). 
Annoying configs, auto mocks, and others stuff I found annoying but can't report on top of my head. Remember, mine are suggestions. If you want to use jest, suit yourself, I simply don't think it's the right tool for the job. Apparently, that bothers some jest fans that are downvoting, but who cares really 
Thanks for sharing your open source project, but it looks like you haven't specified a license. &gt; When you make a creative work (which includes code), the work is under exclusive copyright by default. Unless you include a license that specifies otherwise, nobody else can use, copy, distribute, or modify your work without being at risk of take-downs, shake-downs, or litigation. Once the work has other contributors (each a copyright holder), “nobody” starts including you. [choosealicense.com](https://choosealicense.com/) is a great resource to learn about open source software licensing. 
Exactly why the airbnb styleguide is so against using `+=` in the first place.
My favorite learning tool is a (good) book with examples that force you to write things out and figure problems out yourself. I’d suggest O’Reilly if you’re so-inclined. Source: programmer since ~1994. 
Thank you! Im definately going to check that out!
You probably meant ***DEFINITELY*** -not *definately* --------------------------------------- ^^^Beep *^^boop. ^^^I ^^^am ^^a* ^^bot ^^whose ^^^mission ^^is ^^to ^^^correct ^^your ^^^spelling. ^^This ^^^action ^^was ^^^performed ^^automatically. ^^Contact ^^^me ^^^if ^^I ^^^made ^^^A ^^mistake ^^or ^^^just ^^downvote ^^^^^^please ^^^^^don't
Tried different ports still the same error.
Thanks! Will definitely go check that out!
Defiantly a good bot. 
I like jest and I use it every day. Which is why I 100% agree with you about jest and mocks... bizarre is accurate
&gt; I don't really care for JSX. I understand why some people like it, but I don't. +1 I can't wait for the cool-aid effect to wear off. It does seem the JS community is happy to make similar if not the exact same mistakes as other communities have before them. Once more and more experienced devs come into the JS world things will improve (and are now). I commend Dan Abramov for pointing this out in at least one of his talks. I've always wondered if React + JSX looks exactly like PHP because of Facebooks history.
Not quite. The async function uses the x variable from the calling scope because it lacks the var keyword needed to create a block scoped variable of the same name.
If you're just starting out, Turbo360 is a pretty good place to go. Their tutorials give you alot of hands on experience, and plenty of oppertunity to tweak and change the code they teach you to fit your own needs. You could check out their simple snapchat clone tutorial first it gets into react and redux along with Javascript. https://www.turbo360.co/tutorial/simple-snapchat-clone
Well for me it was writing a lot of html and checking support for all the styling. There is a lot of weird stuff going on in different clients, e.g. when you use a div, some css properties won't work. It feels like a fucked up jenga game. Also it saved me a lot of time. I didn't have to read all those articles: https://stackoverflow.com/questions/2229822/best-practices-considerations-when-writing-html-emails/21437734#21437734
I learned how to spell definitely now
You could also check out Turbo360. Alot of their tutorials are focused on either creating simple clones of or working with already established sites like faecbooke or snapchat, which is really helpful for anoyone trying to break into freelance work or startups. You can find a list of their tutorials here https://www.turbo360.co/tutorials?track=road%20to%20startups
No problem man, good luck!!
This is a fantastic video. If the full course wasn't £3500, I might consider getting it haha
You should x\-post this to /r/emaildev!
I would always recommend Treehouse. They have really good in depth courses and workshops, and you can code along with all the projects in their built in their built in workspace. I studied with them for 8 months (doing my own projects in the side) and got an actual web development bawed on what I'd learned. 100% recommended, well worth the relatively small subscription fee. They do have a premium option (and even a super premium degree style option now as well I think) but I just had the basic one and it was brilliant. 
One nice thing about heat over mocha and chai is that the tests are run asynchronously so it’s much faster since it could be running a bunch of tests simultaneously. But what a couple of people said is correct. Do not right the tests where one test tests something and the next test tests something else which relies on the result of the first test. Also: remember this is a unit test. You test a small part of the api (a class for example). Not the whole api itself. 
In theory could behave differently across different interpreters. IMO, bad test. Don't use this prove your worth. There are so many "JS gotchyas" you just learn overtime that you wouldn't normally do. It's a heavy abuse of language. Right away I knew it had to do with `+=` but was not sure what would happen. IMO coming to terms you don't know what would happen and researching it is the best answer :) You'd be hired in my book.
Great idea, thanks! Didn't event know this subreddit exists :D
react app that will stream your movies, music, tv shows https://github.com/ridhwaans/homehost
1. i starts at 0 2. Add a "ha" 3. At the end of the loop, check if i is less than num 4a. If it is, increment i by 1 and go to step 1 4b. If not, stop loop and return the ha variable, which is a string containing the number of Ha's equal to num
Random question \-\- I build emails that need to be XML. \(It's for Salesforce.\) Is that possible in MJML?
highly recommend in the readme putting what MERN stands for. i had to click a few random links before it became clear
Or any other language. r/JavaScript is about.... 🥁🥁🥁🥁🥁 JavaScript. 
[I am the dancing mouse!](https://www.youtube.com/watch?v=g9Cgum7S5R4)
You start with "var ha = ''" so it's empty but ready for strings to be attached to it. Then if 0 is passed in, you don't get a "ha". You check in the loop if "i &lt; num" as num is the passed in variable, 3, and i is the iteration your on so if we are currently on iteration 3, which is no longer less then variable num, stop processing the for loop.
Thanks a bunch!
On the command line. Example: - open chrome - open dev tools with console (cmd + shift i) - create an audio context var ctx = new AudioContext() - make an oscillator var osx = ctx.createOscillator() - create a mousemove handler that changes the oscillator's frequency value window.onmousemove = e =&gt; osc.frequency.value = e.clientX - hook up the oscillator to your speakers osc.connect(ctx.destintation) - start it up osc.start() - move your mouse around to play weird theremin music Anyways... I learned 90% of what I know by immediately implementing a minimal version of whatever I'm learning in the browser / node console.
Thanks for all the help!
Understood! Thanks
Thanks a bunch!
What's he doing here? const [subscriptionID, subscriptionPlanID] = getCustomerSubscriptions(customerID) const getCustomerSubscriptions = async (customerID) =&gt; { const subscriptions = await stripe.subscriptions.list(customerID) if (subscriptions.data.length === 0) { throw new Error('Customer does not have any subscriptions') } const subscriptionID = subscriptions.data[0].id const subscriptionPlanID = subscriptions.data[0].items.data[0].plan.id return [subscriptionID, subscriptionPlanID] } I would expect this function to return an array with a signature like this [5, 159]. But he assigns it to an array of two hitherto undefined variables. Say the method does return [5, 159], would subscriptionID === 5 and subscriptionPlanID === 159? And would these variables be accessible in the same block as such (like they would if I'd state const subscriptionID = 5)?
 `return { ...state }` in react threw a stack trace message explicitly suggesting to use stage 2 
Yes, he’s using [Array Destructuring](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment) 
If it builds, it's good.
Thank you! This definitely seems easier than doing something like return { subscriptionID: 5, subscriptionPlanID: 159 } Which I've been doing previously.
Simpler still if you're one of those people who goes without jsx. 
https://bost.ocks.org/mike/bar/
Well, although I only have such a short amount of time with my project. I do see why using a Javascript framework is helpful, the code is shorter and it seems like the animations are smoother too. I'm pretty much done with my project, I'm just missing one step to showing my understanding of the work. But I do like the use of frameworks at this point, I'm definitely going to use vue.js then transition to using react.js and maybe angular.js.
It’s a stupid acronym anyway. Express implies Node, so the N is redundant. 
Ah, thanks, I didn't know about that. It doesn't look like the order can be specified though? I assume it's just in filesystem order or something.
To answer your edit, this is a roadmap which gives you a possible way where to start and where to go next. https://github.com/kamranahmedse/developer-roadmap/blob/master/readme.md
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [kamranahmedse/developer-roadmap/.../**readme.md** (master → 84e7409)](https://github.com/kamranahmedse/developer-roadmap/blob/84e74096b73a72dfd8554b2c810a05aea7653950/readme.md) ---- 
The function tells x what to do so it’s probably a button/interactive telling and BTW I am very wrong I am only 12 and I am only fluent in HTML and CSS and a little java.
Start with some incredibly simple stuff. Make yourself a calculator function, a stopwatch, a Fahrenheit-celsius converter, a function to Make All First Letters Uppercase, etc. Then perhaps make some of these into classes with methods if you want to do some ES6 stuff. You really just want to practice by making a bunch of simple little programs to start. They don't have to be super exciting, but these kinds of programs will help bake the syntax into your memory and soon enough you will very rarely have to think much about syntax.
If your tests are non-deterministic (sometimes fail, sometimes pass) you're gonna have a bad time. You have something that is asynchronous or creating side effects in your tests. Read your testing frameworks docs for the execution order of tests and how to set up/tear down your tests correctly. Dont write any more tests until you sort these things out.
That’s probably an out of date message.
To me, this seems like a pointless exercise. The author takes a short script that has its functionality broken up into sections with clear comments, and breaks the sections into into multiple short functions. There are a number of problems: - the functions will never be re-used - the script now requires lots of jumping around to truly understand what's happening - the new functions are not designed for unit testing, which is a typical goal when refactoring (the author keeps running the same functional tests while increasing the number of lines of code) I think the goal of teaching refactoring is good, but this is an example of over-refactoring.
Cool! I've been looking at building something like this too. Is it open source? Do you have a public API that can be accessed?
Thanks. It's not os yet, but I plan to open source it in the future . I didn't think about an API, I might add it in the future also. 
[removed]
 Exactly why the airbnb styleguide is so against using += in the first place. Are you sure? They seem [http://airbnb.io/javascript/#variables\-\-unary\-increment\-decrement](http://airbnb.io/javascript/#variables--unary-increment-decrement) `++` and sugest using `+=` instead.
Huh you're right - guess I was confused by the no ++ rule. 
This is... an interesting kind of repost. [Your coworker may well have gotten it from here.](https://www.reddit.com/r/javascript/comments/8ls34w/js_quiz_async_function_execution_order/)
I use javascript and a bit of typescript professionally, I like to mess around in Unity in my free time. When I'm working with projects that are in typescript I feel like I get the best of both worlds. If I'm comparing C# against vanilla javascript it depends on the size of the component. For smallish components I prefer JS for the flexibility and speed of dev. As components start to get bigger in size I prefer the strong typing of C# mostly because the compiler saves you so much time when refactoring.
For the love of Codd, please stop suggesting MongoDB for newbie.
As an email programmer, I thank you.
https://simonsmith.io/destructuring-objects-as-function-parameters-in-es6/ Destructuring will allow you to not care about order or what parameters are not passed in. 
I mean, you’re not wrong, but you didn’t explain the answer. The variable still gets modified twice.
Go to the right. There's two platforms you need to jump across. \(It's above the laser pointer.\)
Yes it's great to know that, thanks
Okay, seems need some investigation to grab the concept, thanks for the hint \(y\).
agreed. and very inefficient with vscode. For £3500 i expect something better
Til express is a hack
My team was mostly .Net devs that went to Node+Typescript on the back-end. There are some Microsoft folks on the TC-39 so I'm pretty sure that's why some language features feel the same. Party of me misses C# (and VS+R#) but I love how malleable JS is compared to C#, even with Typescript. Need an object? Curly bracket your way to glory. Need a mock? Here, have another random object. It's pretty great. FWIW, Webstorm is still my IDE of choice as it feels closest to VS+R# (can't imagine why) but I'm excited about how far VSCode is coming along and look forward to the day when it's "close enough" to switch.
The only way that worked for me... just keep on typing. Write that function... write it again ... write it so it does something new... keep typing away. It sounds silly but it really helps. It is super easy to look up at a board or video and go "oh yeah" 
I only use c# for UNITY development, slick hate it...... not as cool as C++/C
Can you elaborate on this? 
15 year .Net developer here. Been doing JS full stack dev for the past year and love it!!! The new language features are pulling from some of the best of C#... exciting times to be in for sure!!!
Hmm, I find C# 100x more productive and pleasurable to use than C++ with its template horrors and verbosity. Even the performance difference isn't there for most types of programs.
BigNumber.js ?
&gt; Things like the standard pattern for Dispose/IDisposable/Finalize. Destructors are a thing in Node.js C++ add-ons, but in pure JS, the expectation is to rely on the GC or use TypedArray as malloc. &gt; I miss propert getter/setter from C# IMO, the reason they are not used is two fold. In MV* architecture, it competes with event-based pub/sub alternative, which is more common in JS. The other reason is, in recent years, JS world has been very conscious about side-effects, and `a.b.c = x.y.z` would allow for a lot of side-effect, way more than functional/event-based alternatives
You can destructure objects as well a la: const { suscriptionID, subscriptionPlanID } = getCustomerSubscriptions(customerID) I think this is more semantic than an array return and destructure as there is no necessity for order in this situation. 
There has been many articles written on this, so I'll just pick one at random: [Why you should never use MongoDB](http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/).
Yeah it’s just a rule for clarity no?
A couple pointers I can offer: Get a good text editor that’ll fill the other side of the brackets/parentheses for you, and that highlights/underlines pairs of them. Learning JS after Ruby, my biggest thing was remembering brackets. Run/test your programs after small changes to catch errors easier. Don’t copy/paste - type out all of it!! Also, when it comes to ES6, do it. It’s not a requirement for front-end frameworks but should be something you’re using as much as you can. Wes Bos has great ES6 tutorials - would highly recommend.
Where/how did you find it? Google‘s code may make sense with server-side rendering.
Pray. PRAY. For the love of god, pray. But really though, all that matters is interest. So if you're interested, start playing with frameworks, and then back to vanilla JS, and then back to frameworks. Rinse and repeat. So long as you keep going, I don't see a downside.
I looked into Jest spies when I started using it and found that it uses Jasmine under the covers. I've had experience with Jasmine and understood that it is really good at cleaning up after each test so that the next one starts with 0 calls. `jest.fn()` however does not (or didn't in previous versions), so testing the call count would be flaky in subsequent tests unless you were careful with resetting the call count. Most of my tests use Jasmine functions for spies, but Jest for import mocks.
I don't think AirBnB has added any rule about `await`-related syntax yet, but we can easily create one ourselves. The problematic behavior comes from using a composite assignment operator (ie assignment with some other operator, like +=, **=, &amp;=, etc). So we create a simple rule: Avoid mixing a composite assignment operator while using the `await` keyword in the assignment. The syntax `x = x + await y` can be perfectly valid, but in case it's not actually what you want then this syntax still helps making the potential problem a lot more obvious. I which case your alternative syntax would become a two-liner `z = await y; x = x + z`.
Yeah that is one of the gotchas. Calls on mocks dont get reset by defauly unless you put a clearMocks config option. It is confusing because there is also resetMocks which actually reverts to the _real_ module import... but why would anyone want calls on mocks to persist between tests?? You're doing it wrong!
&gt;In theory could behave differently across different interpreters. How exactly would you have a JS interpreter providing different behavior here, while still conforming to official ECMAScript standards? Also, this is not a 'JS gotcha'. This behavior is the result of JS execution being in-order execution, just like (almost) all programming languages. I'm not an expert on engines/interpreters and such, but I'd say that for JS this execution order is standardised in the ECMAScript standard, which is why I don't see how a legitimate JS interpreter can differ here. Using a different execution order would screw up all of JS ever.
Thank you!!
Definitely gonna try that haha 
I've been writing C# for 5+ years and I also love JavaScript, especially the new, post ES6, features. However, I think that it's more suitable to compare C# with TypeScript, not JavaScript. What's amazing about TypeScript is its fast-moving, experimental nature - new features are being introduced so fast! C# has to be more conservative about it because of its corporate history. Still much better than Java, though ;) Interestingly, JavaScript's lack of type system makes it more convenient for functional programming than C#. For example, it's really a pain to create a generic `curry` or `compose` function in C#, while it's trivial in JavaScript.
I agree with the rationale behind your points, it's a slightly contrived example because the starting code wasn't too bad to start with, but I still think there's some good value from watching this. Especially for the target audience. He emphasizes the importance of tests when refactoring, cleans up variable names, and ultimately makes the code more maintainable. &gt; the functions will never be re-used You don't know that, neither does he, nor do I. But if I had to maintain a related script and needed a `getAllPaidCharges` method and found one ready for me to use I'd be happy about it. &gt;the script now requires lots of jumping around to **truly understand what's happening** I'd argue that splitting those chunks out make the main function easier to digest because the implementation details are truncated so you can easily follow the business logic. I'm also happy agreeing that this may be a preference, but my next point is objective. It ensures there's **no side effects**. The base code wasn't bad enough to show what taking these basic steps can often clear up. When you find yourself looking at a 100 line loop that branches off into possibly thousands of lines of code, those 5 line functions are instrumental in refactoring that code. &gt;the new functions are not designed for unit testing Why not? They are more unit test friendly than the original master function. &gt; (the author keeps running the same functional tests while increasing the number of lines of code) I would give the benefit of the doubt that it was a matter of keeping the video (somewhat) short and to the point. Also if he started adding unit tests it may deteriorate the point he made about having tests when refactoring, because to a newcomer it may appear that you can just replace a functional test for a unit test and possibly break functionality. I'm not saying the refactored code is now _perfect_, no code is. It could benefit from dependency injection, and like you mentioned unit tests. It's definitely more maintainable than it was at the start, and that was the point of the video. I also wouldn't pay £3500 for this though. _Clean Code_ will cover all this and more with detail for ~$30.
Thoughts on Rider as a replacement for VS+R#?
Can you use code blocks to that the code is readable?
After asking around on SO and at work, I've found the answers I needed: * You do not need to worry about the bit order in `Number(n).toString(2)` and when doing bitwise operations in regards to the machine's handling of endianness. * `DataView` isn't necessary here. * To get a bit value without using `Number(n).toString(2)`: const getBit = (num, pos) =&gt; num &gt;&gt; pos &amp; 1
Check out CSX.codesmith.io. I was in the second spot as you until I started actually solving real challenges and coming up with my own solutions. 
Stop pushing your hater shit here.
Happy Cake Day! ^You ^can ^participate ^in ^r/HappyCakeDayClub ^for ^24 ^hours!
It's been a few years now, but I was quite impressed that Javascript was one of the best, but less known language's, back when even jQuery wasn't a thing. I always thought "Uhhmm.. Javascript.." and the only JS I used was silly `onclick="alert();` within HTML elements. When I took the time to actually learn it and try to understand it.. I completely lost the interest in coding something in jQuery and began loving vanilla Javascript. It's so powerful and if you understand it, it suddenly becomes one of the most beautiful languages out there. Personally I always was fascinated from C#, I always like it. I didn't do much, just basic stuff combined with the UI designer that took away things like "new Textbox()" and property setting for me (just found the file where it was declared and all properties was set.. I was curious and liked the concept). Back then I wasn't familiar with namespaces so I couldn't code at my full potential or understand why several things happened. I would love having some time to look what I am missing in C# :) I remember that a mate allowed us to participate in a tile based game and damn.. he coded like a full game all of his own and I was understanding like nothing :D There are so many things that require a basic guide like folder structures etc. or best practices.
You're right. This was mostly just a learning exercise for me. 
I've used all 3 languages, and well, here's how it goes for me... C#, Unity only, for messing around, don't really care about standalone windows applications, all I need can be done in simple python scripts, that also work on any platform in 99% cases. C++ Used in school, dropped it right after, I just don't like it. C, learned at home personally, just for no reason, I like it a lot, it's simplicity is what's best about it for me, I'm building my own game engine in it. This has nothing to do with it, but some people said that making games is a lot harder without OOP, yeah, we'll see how it will be a lot harder with structs... So far, hardest part was still matrix math (I only use GLFW and GLEW) for rendering pipeline, and everything else is pretty straightforward...
I think if you use Create React App ES6 is pretty much the only thing you need to know do dive into React
This question is more appropriate in /r/LearnJavascript
This question is probably better posted at /r/LearnJavascript ...but your problem is: Since you called the arguments `word` and `url`: function (word, url) { ...then, inside that function you will need to reference them as `word` and `url`, not as `whatever.word` or `whatever.url`. But, I insist, please take this type of question to /r/LearnJavascript. That subreddit exists precisely for this.
You may find more help at /r/LearnJavascript or /r/LearnProgramming
you might find this useful: http://rxmarbles.com/
This is really great. Very useful visualisation 
I'm not sure if the author has read "Clean Code" by Robert Martin, who coined the term, but the article is a mishmash of actual clean code recommendations, some JS best practices that do not really have to do anything with writing clean code (but are recommendable nevertheless) and some things that are just plain bad advice... Recommending "Use === instead of ==" (which I totally support) and then later on Advertising "Shorthand for if"...? Kind of contradicts itself, doesn't it? Also, I don't think that using the "shorthand for if" is clean code... You're hiding potential issues when doing comparisons like this (e.g. you're expecting a value or NULL, but for some reason you get undefined and won't notice it). It is important to know the differences between named function expressions and arrow functions: the "this" reference, hoisting and the way the show up in the stack trace (e.g. the shorthand example of "Implicit return shorthand" would just show up as "anonymous"). Just using arrow functions for the sake of brevity without knowing the consequences is not clean code … you should know when to use what. While we're at the point of giving "recommendations that have nothing to do with clean code", also be aware that modifying the DOM in a loop like in example 7 is not best practice for performance reasons (it leads to a repaint for every iteration and those repaints are expensive). "Comment your code" also Kind of misses the point... Clean Code states that, ideally, your code should be document itself - regardless of whether its business logic or not. Comments are often a sign, that your code is not self-explanatory. And the given example contains code, that is exactly that: not self-explanatory: hash = ((hash &lt;&lt; 5) - hash) + char; hash &amp;= hash; 
BASIC on a ZX81. We had no storage system for the computer, so it was empty every time I turned it on, and I had to type in the source code each time I wanted to play a game.
The fairly adequate guide to FP is actually really adequate, so don't let the name fool you. Google it and get reading. 
RXJS is a Functional Reactive libraries. So at start, most of the things you will need to know is how Reactive works. The greatest resource I found on the subject is : The introduction to Reactive Programming you've been missing - by Andre Staltz (https://gist.github.com/staltz/868e7e9bc2a7b8c1f754) If you are looking for a functional glosary I recommand you : Functional Programming Jargon - by Hemanth HM (https://gist.github.com/staltz/868e7e9bc2a7b8c1f754#file-introrx-md) And for a gentle introduction to functional programing : So You Want to be a Functional Programmer - by Charles Scalfani (https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536)
What do you mean by "concepts" exactly? I am sorry for being a noob here.
Sarah Mei? The one who went on a ridiculous inquisition against Richard M. Stallman on Twitter because of some imagined abstract grievances in the past or some jokes or whatever? Yeah, excuse me if I don't take that source very seriously.
https://m.youtube.com/watch?v=1ObaiI30500
You can use mailchimp editor also. By the way the article was informative. Thanks
I haven't done it, so take this with a grain of salt. But after some searching, it seems like people either test the href value (for non-javascript anchors) or expect a certain function to be called, like: https://medium.com/wehkamp-techblog/unit-testing-your-react-application-with-jest-and-enzyme-81c5545cee45 it('should handle the click event', () =&gt; { window.alert = jest.fn(); const output = shallow( &lt;Link title="mockTitle" url="mockUrl" /&gt; ); output.simulate('click'); expect(window.alert).toHaveBeenCalledWith('clicked'); });
Seriously it is time to avoid Clean Code. Used to be more valuable that it is now (back in C++ and early Java and C# days). Languages, paradigms and practices have continued to improve. I would say 30% is valuable nowadays but can be found all over the internet as common sense principles, 30% is open for discussion as recommended practices and 30% is just outdated BS. The Uncle Bob is super opinionated in his writings and I would recommend XP from Kent Beck as a durable book to get started. Also these days who can decently support a man that has come out as misogynistic, insulting young devs, alternative ideas (like FP) or criticized the notion of diversity in our industry.
I have one here : [https://lakston.github.io/d3\-barchart\-USAGDP/](https://lakston.github.io/d3-barchart-USAGDP/) and the code is available here : [https://github.com/Lakston/d3\-barchart\-USAGDP](https://github.com/Lakston/d3-barchart-USAGDP)
This approach does work but it only actually test's pure JS. My problem is that I am testing flat HTML and as we all know, there is a lot that could intercept/block an anchor click from propagating or even being clicked - I can happily test the href of the anchor but cannot seem to test that click it will produce the intended navigation. And even then, it's not a perfect test because you might have an element positioned over the link which such a test would not discover. It's a funny old world when its easier to test 'advanced' code than it is the bare basics. I think I will have to just accept that I can only reliably test the href on the page and assume the rest. If I could only get a hold of the true document/window objects, testing the location.href would be quite trivial and I really, really did think it would be super simple in a header-less 'browser' environment.
The play\(\) method needs it because it needs to wait on the spritesheet to be loaded. I was thinking about rewriting that part with a Promise so that chaining will also be an option
Few things to note what I would do differently. * He returns an array ```[subscriptionID, subscriptionPlanID]``` from getCustomerSubscriptions. A object destructuring syntax is identical except for ```{}``` instead of ```[]``` and it will retain the context of the values for debugging and autocomplete. * Not using the tools that he has. He could've checked the linter or standard JS errors/warnings at the bottom status bar and gone over those first. * Renaming variables in a gung-ho way where he changes the variable declaration and then checks out where occurrences or errors appear. VSCode has a really effective way of renaming with just moving the cursor over and pressing F2. Another way would be to select "Find all References" from the context menu to find the use cases first. Manually doing this will likely fail if the variable name is shadowed. * Unnecessary comments. If your code is unclear of **what** happens then you need to make the code more clear and descriptive. If your code is not on clear **why** it does something, then a comment is needed. ```x += 1; // Increment x by one.``` is code duplication. When you change something slightly even if functionality remains the same and the old tests pass, the comment is out of date and needs updating. Further, automatic refactoring (like rename) doesn't touch comments which might result in comments being outdated. * determineTotalPaid has completely unnecessary wrapping conditional ```if (paidCharges.data.length &gt; 0) { ..... } else { totalPaid = 0 }```. Only change needed to do is to set 0 as starting value for ```reduce```'s accumulator. Whole function can be replaced with ```(paidCharges) =&gt; paidCharges.data.reduce((total, paidCharge) =&gt; total + paidCharge, 0)``` * The variable names inside above function's map and reduce are not descriptive, my example has descriptive names. * determineTotalDue has magic numbers of ```Instalments``` and ```Parttime```declared inside a the function, not outside it, so re-usability of that function is 0. ```Parttime``` is also a very badly named variable that is both ambiguous **and** inconsistently named. Finally **The cream of the crop**, the real WTF of both the code and video is following snippet: if (subscriptionPrices[subscriptionPlanID]) { totalDue = Number(subscriptionPrices[subscriptionPlanID]) } else { totalDue = Number(subscriptionPlanID.split('_')[0]) } Hands up, if **anyone** expected before that ```121300_foobar_baz``` would be a valid subscriptionPlanID that had it's own special case. **Worst of all, this behaviour is left completely undocumented**. The only piece of code that requires an explanation of **why** is this done is left a mystery while tons of 0-value comments remain.
You've already been given a handful of very good resources, both on RxJS and on general FP. I'll just add a recommendation on a less-well-known _book_ which is nonetheless quite good: Luis Atencio's [Functional Programming in JavaScript](https://www.manning.com/books/functional-programming-in-javascript). He also has a book on RxJS, [RxJS in Action](https://www.manning.com/books/rxjs-in-action), which I haven't read so I can't really comment. (I don't have any part on this, but coincidentally, the author just [twitted this eariler](https://twitter.com/luijar/status/1001222460212211712).) Note: I know some people prefer books while others don't. I don't know about you or suggest one way or the other, but _if_ you like learning with a book, that one is nice.
Yes, that's correct for both of the examples in #4. It's not a very good article all in all.
Not the OP but I can expand on that sentiment. If you refactor in C# using visual studio to say take a common piece of code and move it into a reusable class, VS will help you find all the places using the same code and let you know how many places reference your new code. If one of those instances was slightly different and you apply it as if it were the same but the type is wrong put it returns the with type, VS will warm you before you ever attempt to run the code. You can also rename classes or methods/properties really easily and tell it to rename all the parts using it too. It makes editing another person's code or just seeing what their code does extremely easy. If I don't know where something is defined VS can show me the file it is in. There are more things too, those are the main ones I think of though.
Actually names are very descriptive. You just need to get used to it. They are very similar to other functional combinators of other libraries and languages, so this knowledge is very useful. The main thing to remember is why there are 3 or more different flatMap's — concatMap, switchMap, mergeMap.
Just skimming the article, the very first example shows using `alert()`, which is not a good practice because it blocks the page, so it shouldn't even be used for demonstration. Point 4 refers to equality operators as assignment operators, which would be sloppy by itself, but the "shorthand" alternative it suggests, namely, checking for 'truthiness', isn't even semantically equivalent. Values like empty strings and `0` are falsy, but might be valid input, for example. Point 7 shows using a `for` loop with arrays, but the actual modern approach would be either using a `for-of` loop, or, better yet, the transformation methods like `map`, depending on the use case. Point 8 advises to "reduce globals", but modern JS should not not assign anything to global scope at all but instead use modules; it should also not use `var` like in the examples, because `var` can be implicitly global. Point 10 (passing strings to `setTimeout`) is not something anyone does. Might as well advise against using `document.write()`. Overall, the article feels like a mishmash; it includes unimportant or questionable practices, but omits something as important as using modules.
Isn't JSX really just an old patch to mitigate the problem of a slow DOM in old browsers on slow devises, and as so, fundamentally getting phased out? This feels in denial of that.
How is MERN better than BERNARD? The article did not cover this.
There are always marble diagrams in docs, use [reactivex.io](https://reactivex.io) and [https://rxjs\-dev.firebaseapp.com/](https://rxjs-dev.firebaseapp.com/)
ah nice, I had something like this in the back of my mind... I read about the issue in "JavaScript Patterns", but that book predates ES2015 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
Understand how things work. For example learn how loops, if statements, functions, callback functions, arrays, variables and things like that work. How exactly you write a for loop in an language isn't very important, as long as you understand how they work. You can just google the syntax. 
I think you left out some information. Jest does provide a DOM (jsdom, to be exact), but from you first snippet it looked like an e2e test, then at the end we see that you’re using React and React Router… it’s a bit hard to pin down your stack. TestUtils should allow you to simulate a click event, then perhaps you make assertions on window.location.href, depending on your setup which you didn’t show. But yes, testing routing can be very tricky and flaky. With more information we may be of better help. 😉
I program in both and actually use vscode for my js sections. It is better than anything I have used previously but still not quite there yet. In most js if I highlight a function or variable it still doesn't seem to know much about it. If that variable originates in another file it often can't tell me where unless I do a search in the left bar. I still need to do more manual intervention for things that I get automatically in VS with C#.
 function createMenu({ title, body, buttonText, cancellable }) { // ... } createMenu({ title: 'Foo', body: 'Bar', buttonText: 'Baz', cancellable: true }); I don't think that you are really gaining anything of value here. If you are going to be using the object multiple times elsewhere, yes, by all means, use an object, but if you are just trading a simple argument array of length 4 for a 'complex' argument array of length 1 and a structural dependency of length 4, you haven't really gained anything. The first one is simple and straightforward. You need to know 4 values. In the second, you need to know those same 4 values, and the structural relationship of those values. This is why I do not like ...spread to pass props in react components as you are now dependent upon structure as well as value, and also possibly polluting the namespace with extraneous variables.
It depends on what your hobbies are, what the problem is, etc etc... Building embedded systems, it is conducive to your work to write in something C++/C (robotics, ARM chips, etc). Critical systems use frameworks like MISRA C, and ARM systems use it. I personally love the control you get in C, and since c++ is just one layer of abstraction above c (in my mind at least), c++ is the best of both worlds in my mind. C# isn’t bad, and is a dialect of c so there’s nothing negative about it. It’s like choosing either a sword, a mace, or nunchucks, they all will get the job done differently... Also, if you play around in the decentralization space, when studying the implementations of these protocols such as bitcoin and Ethereum, their virtual machines are WRITTEN in c++, at least for ethereum’s main implementation, and definitely for BTC. EOS as well. The creators of these world changing ideas CHOSE c++ for a reason! Bjarne Strausup **spelling**, talks very well about the vision behind c++, and why it is so prominent in the computer science world, from education (like you said), and the real world. I suggest watching https://m.youtube.com/watch?v=86xWVb4XIyE It’s good We all know, the write tool for the job is more more important than loving any language, but it is a bad mindset to think of certain programming languages as just “better” than others. The right tool for the solutions needed is the way to think about it .... even though my comment kinda said c++ is better lol... you get my thoughts tho 😎
2.1 recommendation sucks. yyyymmmd embeds information about the format of the date in the variable name. I don't know if currentDate is a date object, string representation, or unix time integer.
Spend some more time configuring your vsc. They've added new built-in features you might not know about and there are some very useful extensions. Visual Studio is still going to be better at it(especially out of the box), but you can get damn close to it.
3.3 - arrow function is not really shorthand of function. It's also a function without own this. 
The biggest niceness for me comes from the strong typing. With typescript you can definitely accomplish it in vscode or even sublime, but with vanilla JS I don't think any IDE is going to be able to understand your codebase as well as it could with strong typing.
Hi /u/tomastrajan, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index) (specifically, _Posting: Showing off a Project_).
Hi /u/sillybillysocks, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/sillybillysocks, this post was removed. Please see our rules, and do know that 'Java' !== 'JavaScript'.
Hi /u/jason60812, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/maciejmatu, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
The partially informed leading the gullible, pretty much business as usual.
I've almost exclusively used JavaScript's Fetch API. If you're grabbing from an external API, use that. If you're getting data from within your project, you can use require/import. I've always found XHR to be long winded.
Hello! I guess this could be classified as misunderstanding because the article contains link to GitHub where the project IS open sourced. The section looks like this... &gt; Before I forget, Medium Enhanced Stats is also fully open sourced on the GitHub so feel free to check it out. There is virtually no documentation available yet but I will definitely add more in the future to enable community driven efforts! Could this be un-deleted?
Isn't example 3.1, as written, pointless? I am trying to get used to using destructuring, but that example feels confusing, because why would you bother in that specific case? The code is just longer that way, without any benefit. Feels contradictory.
Yeah I am discovering that, we are using 'puppeteer', I am trying to figure out how to use that effectively. In particular the 'evaluate' function which gives me access to the document object.
Also the Medium Enhanced Stats Chrome extension is [fully open sourced on the GitHub](https://github.com/tomastrajan/medium-enhanced-stats)!
1. Use fetch if your client's browsers support it; 2. Use [Axios](https://github.com/axios/axios) if you want things thought out for you; 3. Import JSON if you have it as a static file in your project. If you use fetch you also need to transform the response to json: fetch('http://example.com/movies.json') .then(res =&gt; res.json()) .then(myJson =&gt; console.log(myJson)); See: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
Java is not the same programming language as JavaScript. Please refer to /r/java.
Can you post some images as examples? 
Or just encode your images as progressive JPEGs. That's what they're made for.
+1, can’t check it out as a mobile user until I leave the office. 
Yup, sorry about that. I looked but missed it.
Indeed. In addition to this, why would you model data with something as 'common' as a name where it could be a duplicate but for a different entity? Even in document based DB's, it's still advantageous to have a guid for reasons such as this. Sure, an RDBMS can do it (it's built around that in a sense) but modelling their data in this way was as you say, their fault. As they say, a bad workman always blames his tools.
Okay thanks! your example is the way I'm currently using
Thank you for taking time to re-evaluate! 😊
I am not OP, but I run a similar website for over 5 years now and the answer is simple - people usualy want to reach their loved content everywhere, on every platform they are on at the time and they don't want to search for feeds theirselves.
You can grab all the words with a pattern matcher but you're going to have to loop again anyway to strip out undesired characters, such as that comma on the second match, so you could write something like ``` str.split(' ').filter((word) =&gt; isTag(word)).map((tag) =&gt; clean tag(tag)) ``` Where isTag would basically check starts with # and cleanTag would remove any undesired punctuation etc.
React Fiber sounds like an incredible piece of engineering but it solves problems I've never had at the cost of increased complexity. There's nothing in this article to convince me otherwise.
`var content = ' I love #cats but also #dogs, I love all animals ';` `var tags = content .match(/#\w+/g);` `var updatedTags = tags.map(function(el) {` `return el.replace('#', '');` `});` `console.log('FOUND TAGS', updatedTags);`
Nice, I forgot you can chain function that way. 
Careful about 0 matches (version A). Safer: const matches = (s.match(/#\w+/g) || []).map(s =&gt; s.slice(1));
Your code works for me just fine using both a command line nodeJS repl and a modern browser debug console. It might help someone help you to diagnose the issue if you pasted the result of your code, and gave more details about the execution environment. 
Try .slice(0,1)
I have used them you can see code part is pink.
Hi ugwe, thanks you for your answer. I didn't know the existence of learnjavascript subreddit. I take note of your precision. Thank you.
There are comparison images if you follow the link - https://github.com/technopagan/sqip Note: GH makes you click to view the full Readme.
const items = \["#one", "#two"\]; const itemsWithoutFirstChar = items.map\(item =\&gt; item.slice\(1\)\); console.log\(itemsWithoutFirstChar // \["one", "two"\]
He means... Things where each line, like these, is indented by 4 spaces, they show like this. It's not pink, but just uses a monospaced font. It's easier to read code like this. Not only because it's not pink, but because the space between lines is better and because the whole block gets a common continuous background. On the other hand, you used `backticks` which, when put around something, make it `monospaced and pink with a grey background`. `If you just put backticks on every line` `yes, it does make it monospaced` `but it also makes it pink, with a weird background and a bad line spacing`
`const result = ["#one", "#two"].reduce(function(acc, current) {` `const [first, ...other] = [...current];` `acc = [...acc, other.join('')];` `return acc;` `},[]);`
Try using forEach and one of the string methods (slice(0))
This subreddit is for posts and discussions about JavaScript. 
 Okay I understand, great like that I guess ? thanks.
I add that I thought the scope of my arguments will flow toward the callbacked function. I will get an eye on the scopes properties in javascript. 
If you’re trying to create placeholder images for SVGs or PNGs, this OP has and other image loader webpack things are a good move. 
Maybe more specifically, it's about news or discussions of JavaScript.
Much better :)
 var arr = [ "#one", "#two", "#three" ]; var newArr = arr.map(x =&gt; x.slice(1)); console.log(newArr); // "one", "two", "three" [Try it here](https://jsfiddle.net/2od46b4g/)
Its like a tabloid for trending, buzzword technology, and a place to post links to your Hackernoon blog post so you get hits.
&gt;JavaScript's lack of type system makes it more convenient for functional programming No, it doesn't really have anything to do with the lack of a type system. It has to do with functions being 1st class objects.
Looks good to me. What err did you get?
Interesting thread. I've been considering switching to node/js for my back end recently. It's a fight between .NET Core and node. I like my familiarity with C# (been doing it since beta 2, circa 2001) and seems like Core is really making big strides in functionality and performance. I am getting tired of Windows and Visual Studio. Since 2015 VS has really gotten terrible with performance and resource usage. VSCode is a joy and not having to run Windows is the favorite part of my day. I'm just really struggling w/ a full transition to node, probably mostly mental. Love type safety, love some of the ORM tools (ya, I still use linq to sql for smallish projects). Curious to know if others are in this boat right now.
Hey! Please check out our website if you want to become a web developer! \(NYC\) [https://www.laguardia.edu/techhire\-opencode/](https://www.laguardia.edu/techhire-opencode/)
Hey, thanks for plugging my article! :D
I actually don't think code is self explanatory, especially when it's something remotely technical, such as the implementation of an algorithm. I definitely appreciate a little narrative explanation for anything remotely complex.
Nice! How did you format your code?
TypeScript has first\-class functions too, but unfortunately you can't have type\-safe composition or currying in it, which means that it's worse than JS for doing FP.
Wait what
Below is I think a complete way to do it with hopefully enough comments so you can tell what is going on :) var origArray = [{ ID:1, Red:2, Blue: 5, Green:9 }, { ID:2, Red:6, Blue:9, Green:2 } ]; var returningArray = []; //first we need to loop over all array items for (var i = 0; i &lt; origArray.length; i++) { //accessing the properties of your array objects by using JS built-in Object class //we now need to loop over all the properties for (var j = 0; j &lt; Object.keys(origArray[i]).length; j++){ //we need ID everytime and know it'll be there so we don't need it for the loop //using i we get the array index and the object, with j we get the objects properties as string if (!Object.keys(origArray[i])[j] !== "ID") { //need to create our new object //using i to get the object reference out of the array //then use .map to get values out of old object into the new object var newArray = origArray[i].map(function (singleObject){ //think of this as a foreach loop, however we're only concentrating on I but could be done for the entire array //we're inside a new scope so you can start creating variables just for this segment var nObject = {}; //and we can access all of the properies of our original object nObject.ID = singleObject.ID; //like before we attempt to get the string from our possible properties using the j index nObject.Categories = Object.keys(singleObject)[j]; //using j to now retrieve the property values nObject.Count = singleObject[j]; return nObject; }); //notice how the below .map functions look almost identical, I've used the first //var newArray = origArray[i].map(function (singleObject){}); //var newObject = origArray[i].map(singleObject =&gt; {}); returningArray = returningArray.concat(newArray); } } } return returningArray;
If your computer is broken, then you need tech support, in which case you might try posting in /r/techsupport. As for your interest in learning Java... you've posted in the **javascript** subreddit. "Java" is one language, and despite having a similar name, "javascript" is a completely different language. So, if you'd like help with java, you'll need to look elsewhere (though you might start in /r/java).
I meant JavaScript lol
You might want to stop posting the same question. I guess the link you're trying to post is this one: http://csdgn.org/article/scrollbar and that you're trying to put both a link and a text in your post. This second thing is not possible. You _either_ post text _or_ post a link. If you post text, you can put the link (or whatever) in your text, of course. So... Why do they say that is important? Because if your content is, say, 100px tall, and your viewport area is 100px tall, then you don't need any scroll. If content is 120px and viewport is 100px, then you'll need to scroll 120-100=20px, not 120px. I don't think this precise point is _so_ important in itself, but probably it is important in the context of everything the article is explaining. Nothing more.
Thanks so much man
&gt; do four spaces [...] anymore??? If you are using the new reddit redesign, you should be aware that there are now two modes: markdown and fancy-pants editor.
For your specific array this will also work: (since we're apparently throwing anything that sticks at this) `matches.join('').split('#');` 
You need to change the props or the state. That means you'll need some kind of hook into the parent component of `Father` to somehow change the props of `Father`, which you're not using, so this whole thing doesn't really make sense. It seems extremely clear to me that the code you've posted is not representative of what you're actually developing for a number of reasons. For example, what is `renderFather` *supposed* to be? Right now, it looks kind of like a React component in that it takes props, but it doesn't return JSX and you're never actually passing it props. Typically you'll want some kind of state change to occur in a stateful component higher up, which might be the i18next React provider. This is also the wrong subreddit. Try /r/reactjs
Well, Minecraft is written in Java. Either way, if you're a beginner, you should seek out the help of /r/LearnJavascript. Even though we offer help on /r/javascript, it's reserved for advanced topics. Thanks for your understanding.
I don't believe you. You're saying "when I click that button" but you're not showing any code with `onClick`. `renderFather` isn't even specified correctly, as you're using parentheses instead of curly braces, so I'm pretty sure this isn't even remotely valid JSX. You're showing code that is extremely simplified, which is okay, but you've simplified out the important parts. I don't even know which component you're trying to re-render -- `Father` or `Kid`? If you're trying to rerender `Father`, you need to pass down something that will eventually change the props `Father` receives. If you're trying to rerender `Kid`, I don't believe you can easily do this because `Father` should be a stateful component. An example of code sort of like what you're doing that would rerender `Kid` would be: class Father extends Component { constructor(props) { super(props); this.state = { render: 0 }; } render() { console.log('Father rerenders'); return ( &lt;Kid onRenderRequest={() =&gt; { this.setState(({ render }) =&gt; ({ render: render + 1 })); }} someProp={this.state.render} /&gt; ); } } When `Kid` internally calls `onRenderRequest` (whether through a click handler or anything else), `Father`'s state will change, causing it to rerender, so "Father rerenders" will print to the console. `Kid` will ordinarily *not* rerender (I believe) if you didn't pass `someProp` to it, because no props have changed and the virtual DOM will recognize it as the same component. However, by passing `someProp` and changing it on this action, `Kid` will rerender.
two primary options \- I'll assume bestTime here is a promise and not the value 1. bestTime.then\(\(actualBestTime\) =\&gt; {...}\) 2. let bestTime = await sumOfSeconds\(...\); //this forces your Time.find cb\(err, data\) to be async //normal res.render
What I meant is that it's easy to implement `compose` that takes arbitrary number of functions in JavaScript while it's impossible in C# - and that's because in JS you don't need to worry about types.
Just close that tab.. And no, you dont want books either. There are some such as You Dont Know Javascript, Clean Code etc, but they are there when you already have experience. Go to Udemy instead. Get a $10 course and start learning. If you have no CS education background, I presume in 1 year you will land a nice job.
Here is the Fiddle: https://jsfiddle.net/SpookyDoot/zr63srwh/
Here is the Fiddle: [https://jsfiddle.net/SpookyDoot/zr63srwh/](https://jsfiddle.net/SpookyDoot/zr63srwh/)
Don't use w3schools. There are much better resources available. CodeCademy, FreeCodeCamp, or Egghead.io are all much better for learning the basics. After you learn the basics, if you want to deep dive into JS I suggest Eloquent Javascript and You Don't Know JS. Both books are free online, but sell hard copies on Amazon.
[MDN](https://developer.mozilla.org/nl/) is so much better. Made by the developers of the top browsers, good tutorials, great references, on many Web subjects. [Their Javascript coverage](https://developer.mozilla.org/nl/docs/Web/JavaScript).
markdown programmer
As a learner I found w3schools really helpful .... **to reference**, less so to learn form directly.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [getify/You-Dont-Know-JS/.../**ch5.md** (master → f0d591b)](https://github.com/getify/You-Dont-Know-JS/blob/f0d591b6502c080b92e18fc470432af8144db610/scope%20%26%20closures/ch5.md) ---- 
Hi sktipwr, Real sorry, but I don't understand this comment.
Since this is the place i also show my rebuild of the Apple MacOs/iOs Calculator App here : [https://github.com/KaiHotz/React\-Calculator\-App](https://github.com/KaiHotz/React-Calculator-App)
&gt; Be proud of your work even if only one person uses it 
Ahhh gotchya! Yup that definitely can apply in Reddit terms as well haha.
Stream link? Would love to follow/sub on TWITCH.
Hey there! https://twitch.tv/pixelogicdev :) Thanks so much for the support! Much appreciated &lt;3
Yeah i know, however i am still not sure how to do it :(
Dude, this is awesome. I think twitch streaming live code is the future. You inspire me to do the same. Thanks for sharing your inspiration, and I will pay it forward. :)
Uh... but how does one reproduce the behaviour that you mention? There are a bunch of coloured boxes and when you click the green one a counter increments. I can't seem to find anything else to work on.
Great innitiative! Did you have to cut features to deliver the full project in time? Also, do people watch coding streams? 
First you need to create a [trie](https://en.wikipedia.org/wiki/Trie). Then, simply walk it, gathering up all the words that start with `#`.
It does seem to work as expected: https://jsfiddle.net/zr63srwh/1/ Two groups of two pictures. Click one, fancybox opens, put mouse over, arrow appears to move to next pic in the group.
a to-do list. you'd be surprised how simple it looks at first but how scalable and complex it can become (undo history, pagination, team-based/multiuser, tags, categories, offline sync, commenting, subtasks...). also, you have dozens of examples in many frameworks at todomvc.com
For an actual project \(not just messing around\), why not use babel\-node for the heck of it? Even if you just get the es6 modules out of it. Seems silly to use require when it's probably going to be outdated once modules are natively supported.
How come when I run it in Chrome, it doesnt? Here is the code: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/fancybox/jquery.fancybox.pack.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="/fancybox/jquery.fancybox.css" type="text/css" media="screen" /&gt; &lt;script&gt; $(document).ready(function() { $("a.fancybox").fancybox() }); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;a class="fancybox" rel="gallery1" href="http://farm8.staticflickr.com/7308/15783866983_27160395b9_b.jpg" title="Rodeo Dusk (_JonathanMitchellPhotography_)"&gt; &lt;img src="http://farm8.staticflickr.com/7308/15783866983_27160395b9_m.jpg" alt="" /&gt; &lt;/a&gt; &lt;a class="fancybox" rel="gallery1" href="http://farm9.staticflickr.com/8665/15613375844_99dc1e5dc0_b.jpg" title="Frondaisons (Valentin le luron)"&gt; &lt;img src="http://farm9.staticflickr.com/8665/15613375844_99dc1e5dc0_m.jpg" alt="" /&gt; &lt;/a&gt; &lt;hr /&gt; &lt;a class="fancybox" rel="gallery2" href="http://farm4.staticflickr.com/3857/14395875498_c43e5c4415_b.jpg" title="Chedder Gorge with goats looking (Si Photography)"&gt; &lt;img src="http://farm4.staticflickr.com/3857/14395875498_c43e5c4415_m.jpg" alt="" /&gt; &lt;/a&gt; &lt;a class="fancybox" rel="gallery2" href="http://farm8.staticflickr.com/7475/15723733583_b4a7b52459_b.jpg" title="Pudacuo (OsvinC)"&gt; &lt;img src="http://farm8.staticflickr.com/7475/15723733583_b4a7b52459_m.jpg" alt="" /&gt; &lt;/a&gt; &lt;hr /&gt; &lt;/body&gt; &lt;/html&gt;
Have you looked in the browser's console? It usually gives useful information.
I’ve tried everything. I’m lost af rn 
SOLVED: [HERE \(used jQuery\)](https://pastebin.com/ejJF0pQ7)
Wait, sorry, I was looking at the wrong thing. It says: [https://i.imgur.com/LJQjHHF.png](https://i.imgur.com/LJQjHHF.png)
[Back in 2005 I wrote 30 apps in 30 days](https://visualstudiomagazine.com/Blogs/Desmond-File/2006/11/Developer-selfimprovement--or-selfflagellation.aspx?m=1). Day 1 app? [An app to live stream](https://github.com/thesoftwarejedi/JediAppADay/tree/master/Source/01.ScreenBroadcaster ) because software to do that for free didn’t exist. That said, good job! I hope it was as rewarding as my efforts were so long ago!
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [thesoftwarejedi/JediAppADay/.../**01.ScreenBroadcaster** (master → f613aed)](https://github.com/thesoftwarejedi/JediAppADay/tree/f613aedc937dd15532a57fa6a922a1234987c669/Source/01.ScreenBroadcaster) ---- [^delete](https://www.reddit.com/message/compose/?to=GitHubPermalinkBot&amp;subject=deletion&amp;message=Delete reply dzsd583.)
I hope I didn’t come off as an ass there... driving... Really, I learned so much that month and met so many people. It changed my life. :)
Did you download the fancybox files? Put them in the correct folder? Put all the code in a server? It seems like it is not loading the fancybox library. You could try to either load it from an external source (as in the fiddle: `src="https://cdnjs.cloudflare.com/ajax/libs/fancybox/1.3.4/jquery.fancybox-1.3.4.pack.min.js"` and `href="https://cdnjs.cloudflare.com/ajax/libs/fancybox/1.3.4/jquery.fancybox-1.3.4.css"` instead of just `src="/fancybox..."` and `href="/fancybox..."`) or you could put a relative path such as: `src="./fancybox/...` and `href="./fancybox/...` (notice the **.** dot before the slash).
Haha no no not at all! Your feedback was pertinent to this post for sure! I am going down that path now. You should start streaming programming on Twitch. We need more people on their programming or doing Creative things. Would be more than happy to help you get started if this interests you!
Ha. I’ve done both twitch and livecoding (pre ico). Not much time for it anymore. 
OMG that was the problem. Bless your heart, I was ready to scream.
Ahh got it got it. Thanks for stopping by and saying hey :) I really appreciate it!
Well, it's a bit hard to see, but I guess the cyan box is "upgrades", right? It seems like the problem is here: if (GUIScreen == "upgrades") { GUIobjects = []; objects.push(multiplierBG) GUIobjects.push(multiplierBG) } else if (objects.indexOf(multiplierBG) &gt;= 0) { objects.splice(objects.indexOf(multiplierBG),1) } You're running this in your `animate` function. So, on each frame of the animation, you're first (in the _`if` part_) pushing `multiplierBG` into `objects` (about a hundred times) and then (in the _`else` part_) you're removing one such copy on each frame. So, until all of the copies are gone (about 2 seconds), you will still see one of the small squares. Ultimately the problem is that you've mixed _creation/activation_ of an object with the general animation/drawing loop. These should be separate things. Creation/activation should be done _on the occurrence of an event_ and animation/drawing should only concern itself with... well, drawing.
Btw, next time, this type of question is more appropriate in /r/LearnJavascript or /r/webdev
Here's a sneak peek of /r/learnjavascript using the [top posts](https://np.reddit.com/r/learnjavascript/top/?sort=top&amp;t=year) of the year! \#1: [If you're looking to learn javascript, a professor at my college made a really cool free to use online textbooks that includes: exercises, clickable links, and lots of example files.](http://profsamscott.com/javascript/) | [4 comments](https://np.reddit.com/r/learnjavascript/comments/7xd7x0/if_youre_looking_to_learn_javascript_a_professor/) \#2: [To everyone currently enrolled at a college: don't forget to get your Github student developer pack. It contains a free domain name, digital ocean credit and much more.](https://education.github.com/pack) | [13 comments](https://np.reddit.com/r/learnjavascript/comments/8b81be/to_everyone_currently_enrolled_at_a_college_dont/) \#3: [Algorithms and data structures implemented on JavaScript with explanations, examples and links to related YouTube learning videos](https://github.com/trekhleb/javascript-algorithms) | [6 comments](https://np.reddit.com/r/learnjavascript/comments/8l09o2/algorithms_and_data_structures_implemented_on/) ---- ^^I'm ^^a ^^bot, ^^beep ^^boop ^^| ^^Downvote ^^to ^^remove ^^| [^^Contact ^^me](https://www.reddit.com/message/compose/?to=sneakpeekbot) ^^| [^^Info](https://np.reddit.com/r/sneakpeekbot/) ^^| [^^Opt-out](https://np.reddit.com/r/sneakpeekbot/comments/7o7jnj/blacklist/)
Hey VIM_GT_EMACS (Love the username btw haha) For sure. Its all about taking the passion outside of your work place. As long as you love what you are doing and having fun, thats all that matters! Super awesome to see you do stuff outside of work with your coworkers. When I was in college I use to have "Hack-Weekends" with my buddies. It was honestly some of the bests time of my life. He ended up creating a super successful site called mood.gg &amp; and I finished and launched my first iPhone app ever, Cycles - Daily Habit Creator (getcyclesapp.com) Great things can happen for sure :) Thanks for stopping by and I appreciate you say hey!
Not a big difference in day-to-day usage but require has different runtime behaviour than import. Even with babel-node, import doesn't behave according to spec. 
You'd probably want to make a factory function to create sprites and add the methods you want to them before returning back to the caller. An example of theirs shows something similar (though an override) where a method is added directly to a sprite instance: http://p5play.molleindustria.org/examples/index.html?fileName=sprite9.js
Two-dimensional sounds way too abstract for something as simple as a plain grid, which css can do easily. Bring your styles and you're set. If you're looking for ready-made components i recommend antd, for instance a combination of [table](https://ant.design/components/table/) and [checkbox](https://ant.design/components/checkbox/). As for js-grid and jquery, ... if you can avoid jquery, i would stay the away from it.
Fun alternative: Go into /r/LearnJavascript. Read through the help requests. See how many questions you could answer confidently and how many problems/bugs you could help solve. Bonus points if you actually answer and help some people. As a "skill check" it might be fun.
That makes a lot of sense! I'll try it out.
W3schools is a nice place to begin if you are like me learning coding on the fly without having the ability to dedicate a large block of time to learning. I think their tiny lesson format works well for someone starting from scratch. It is certainly only the beginning of JavaScript or any of the topics they cover. Just like the first 5% of each topic. 
Interesting...not sure exactly what you mean but I'll look into it
So... trying to cheat?
I started streaming my app development. What made you choose twitch over YouTube?
Thanks for sharing this experience dude! It's awesome
Really?! Link your live stream! I would love to check it out :) I tried Youtube for a while. I didn't like the feel of the community compared to Twitch. Not that it was bad, it just wasn't for me!
Thanks for coming by and taking the time to read my post! Glad you found it enjoyable and I appreciate you saying hey :)
Will do RemindMe! 1 month “look into Twitch”
lol holy shit i had no idea there was such a thing
you force it to completed by completing the lesson :P
Got this bookmarked to watch in the morning. Looking forward to it 😀 I started doing a similar thing and it’s a really interesting way to work. Whether it’s helped anyone or not, it’s certainly made me be more deliberate in my coding and has helped me improve. I’d recommend trying this to anyone else reading this. 
Oh... thanks!
So I could do the same thing with a method that doesn't exist that doesn't exist and that would create a new method? So instead of draw I could say jump and that would be a totally new method? And as far as properties go I can just do something along the lines of boat.health = 100; and that will create that new property that can be referenced anywhere else that has access to that object?
You have a node_modules folder in a server directory. I think it doesn't belong there.
Holy moly! Good looking out, Humberd. Thanks for that :) Idk how I missed that as I even wrote in the setup instructions to do a npm install haha. Thanks for saying hey and for the feedback!
How do we what the stream?
I wish this project (and others) had a simple screenshot and basic explanation of what it is. I don't know what you mean by alerts. Is that referring to an accepted standard or an abstract concept? Is this proprietary to some particular technologies? Maybe Twitch in this case?
A forEach function, usually attached to an iterable (like an array), is one where the argument to it is another function. The other function is then called on each element in the iterable. Ex: cont array = [1, 2, 3, 4, 5]; let sum = 0; const func = function( elem ) { sum = sum + elem; }; array.forEach( func ); console.log( sum ); // outputs '15' (which is 1 + 2 + 3 + 4 + 5) More frequently, forEach is called with an "anonymous inner function" or as your question calls it, a "nameless function". Ex: array.forEach( ( elem ) =&gt; { sum = sum + elem; } ); I don't know what you mean by 
It sounds like if you want to re-render a stateless component based on changes to a child, then it's not actually a stateless component!
Hey! You can checkout my schedule @ https://Twitch.tv/pixelogicdev Thanks for the interest :)
Hi! This is good feedback and I agree it is much better if that info is provided! If you go to the repository (linked a few times in the post) there is a much more in depth explanation of what the application actually does and how it functions technically. Even how to contribute to it and get it up and running locally! You can also visit https://simplealerts.stream where it gives a screenshot and more description of the application (that is the actual live application) Thanks again for the feedback! 
Thank you! I’ll follow and check out
Nice read, going to check out the code as well. Thanks for sharing! 
What issue you are facing? I would suggest that instead of assigning id to the body, you create a div right after the body tag: `div id="particles-js"&gt;&lt;/div&gt; ` and tweak it using css if you run into any overlapping issues. 
The issue is that particle effect is happening beneath the footer, which is strange. I could tweak the CSS a bit to see if that helps. Thanks!
Sounds really cool! Bookmarked to check on of these days, I have learned how to play a lot of games through streaming, so watching programming streams is something that is probably a really good thing for me :) Nice initiative, would love to grow a community of coding streamers :) 
Set a break point in your code and step through it. Only way I can think of properties not showing up is if those properties are "undefined". For example if realPlayers.slice\(\).splice\(realPlayers.indexOf\(item\), 1\); returns undefined then data.otherPlayers will not show as prop on the object.
I guess particles-js creates a canvas inside the specified div and uses that to render particles. When you specify id to to the body, it tries to create that canvas inside body which is included after the content of body and so after the footer. Use a div immediately in body and use `z-index` to make sure that it stays in the back. Good luck. Cheers! 
Agreed. I was wondering the same thing as I was replying to your post. But... have you set up break point and stepped through your code?
 Agreed. I was wondering the same thing as I was replying to your post. But... have you set up break point and stepped through your code? 
I code professionally using C# on the backend with modern JS \(ES6\+\) on the front\-end. I definitely think JavaScript has taken many of its new features from C# and other modern languages. Personally, I think both languages are very expressive as both are continuously making language improvements and throwing in some good syntactic sugar. I think the fat arrow syntax is something that makes me feel good about writing JS as it feels very natural to writing LINQ in C#. VS code is amazing for React and JS in general while you cannot really escape VS for C#.
Update, I've solved the issue. Turns out at some point earlier in my code i had converted the integer representing role to a string, so i was comparing a string to an integer in the switch block. This caused it to go to the default path, which doesnt apply any properties other than role to the data object before sending it to the client. I'm kind of embarrassed i couldnt figure that one out myself, but thanks for your help. The break point suggestion is what really helped me discover the cause of the issue. 
Thanks for enabling vods. Do you have all of the vods? I only see like maybe 9 days out of 28.
JS only has explicit return when there's no "block body" function foo() { return 1 } // block const foo = () =&gt; { return 1 } // block const foo = () =&gt; 1 // no block
Hey thanks so much. I truly appreciate that !
Hiya! Glad you found the post enjoyable. Thanks for saying hi and enjoy the code! Thanks again for stopping by :)
[removed]
Hi! Thanks for the bookmark and the comment! Yes live programming is highly enjoyable to watch and I think the community on Twitch is pretty fantastic in the Creative community! Come join us programming! Would love to have more people :) Thanks again!
No problem at all! I am slowly but surely uploading all of the SimpleAlert videos to YouTube. I am on day 17 I believe. You can head over to: https://www.youtube.com/playlist?list=PL_fXgW9VVKrwLTvrvY7TDh-gTMniJuYNA To see the current playlist (updated almost daily) Thanks so much again!
Thanks for the author provide this code. But I don't think there is any value to put it in real production. Because it is hard to understand. It is not 30 seconds of code. If you always write code like this, I can guarantee your colleague will kill you.
Right, I wasn't trying to optimize anything at all. Just threw in another variant of the top off my head.
Haven't tried it myself but if you're already in bed with Jetbrains with R# it might be worth a shot.
Does anyone have a real world example of what this solves? What are people doing in the DOM that requires this kind of speed and control? Big react fan, but I don't get this. I've written stock tickers in knockout (remember those days). I've made Ajax data tables in vanilla js that displayed, filtered and updated 1000's of rows. DOM speed has never been the issue. I get that this is *cool*. But why would I ever actually use it? Honest question.
Try to use feather js or koi js note still base on node js 
Agreed. I think they will keep converging even more.
learn react. 
Es6 allows you to return without the return keyword; use parentheses if returning an object. HOWEVER: YOU WIL STILL need to open up curly brackets and use the return keyword if you want to modify the input in some way before returning. One line returns look very nice, especially in classes though. 
What is your twitch Name? 
You can find the stream at https://m.twitch.tv/pixelogicdev
Gwan dude! Great work!
&gt; I passed the results into variables without ever using return. Depending on what you mean with this, you may be doing things wrong. Could you write a little example (a couple of lines) of how you do this?
It would probably be more helpful -especially for problem 1-, if you showed your code. But anyway... &gt; I have no idea what it means for scripts to perform asynchronously Have you tried to read something on the matter? I mean, there are numerous resources on the matter and asking for yet another explanation to be written seems wasteful. So it would help if you first read about it, tried to understand it and _then_ came back and asked specific questions on particular doubts you had.
I thought Angular 5 was all about RxJS and observables. Why do you use promises? Disclaimer: I've never used Angular 5 so I'm just asking out of curiosity.
\+1 to Digitalogy\[dot\]co, I love it. 
As OP already stated, it enables great async control of your rendering. This enables us to reason about and code really complicated apps that feel very responsive and are really efficient. Real\-time behaviour with nice fallbacks will become a lot more common. This especially benefits apps that have, for example, 2 async sources of updates. For example, a map you can pan and has to load other parts with markers on them that get updated via a websocket \(like an RTS game of sorts\). Clearly, when you pan the viewport you do a higher priority action and can ignore other renders caused by the moving markers that may now be out of view. Also markers that move by a larger amount may take a higher priority than the ones that don't. React Fiber gives you enough control to be able to handle that. It's not just cool, it's fast. React apps need to be optimized too.
essentially just a hash map.
Every js framework is having their own pros and cons. You can choose any one of the framework and proceed but be ready to switch, we have to be in a situation to grasp things quickly and able to work on any framework. We don't know what is the new framework is going to come tomorrow. Typescript is one thing you can't skip. In order to get ability to work on any framework - you have to get more understanding of core JavaScript
God yeah the videos are amazing too. Really polarizing with the voices but I'm in the camp who thought it was the best thing ever. 
What UI library a product uses says nothing about anything important. Using Knockout tells me the product was started in ~2011-2013 and the company has a higher-than-average chance of using Microsoft tech elsewhere in their stack. My best learning experience in my career was working for a team of brilliant developers working on a dead-end product with no market share, in a dead-end tech stack (C++/COM), with a long-since-dead fad of p2p. If your goal is to pad your resume with buzzwords like React, don't go work there. If you have other, higher priority goals and this company can fill them, go for it. You can always learn more modern tech in your spare time if you decide to change jobs and want resume filler. There are a ton of things in modern libraries like React that are hard to appreciate without an understand of last gen UI libraries like Knockout, such as [React Async](https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html). Lastly, Knockout is an awesome library made by a brilliant developer that got a lot right (computeds with implicit dependencies, solid two-way data binding, amazing dedication to backwards compatibility with older browsers, etc). It also gets some things wrong (shallow learning curve means people under use computeds, don't understand mvvm and just have fat views and no models, it doesn't mix as well with static typing like typescript/flow, confusing and hard-to-debug templating, etc). Knockout is definitely up to the task of building great UI (with smart developers behind the wheel).
All things well eventually get old. Being a good developer doesn't depend on what framework you use. You could certainly only work for companies that only use the newest things. Nothing wrong with it. On the flip side, working on a legacy product will definitely give you good experience you may be lacking as a juniorish dev. I would say don't put so much emphasis on the tech stack. It's much more important to find a good team/company that you enjoy working with/for and a place where you can grow technically/career wise. 
Thanks a lot for your answer. They start new projects all the time - always in knockout, re-using the core, it’s not only one project. I’m on my phone currently, I’ll read your answer more through once I’m at home. Thanks.
You're a high demand and high offer person, but you're also a junior? And you describe yourself as an advanced vuejs developer, and unsure about knockout. I would recommend the first thing you do is get some perspective-- you seem pretty keen on looking down on frameworks that are not the latest hotness. That kind of attitude will not benefit you. A valid reason: you don't want to work in knockout because you think it will be an opportunity cost in your career when you could be learning a more popular framework, thus have better job opportunities in the future. An invalid reason: you don't want to work in knockout because you think the work is repetitive. Any company that develops a single product is going to have repetitive work over time. Additionally, doing lots of smaller but very different projects might be more interesting in the short term, but they might not make you "advance to a better level". Working on a single product gives you an opportunity to develop a lot of depth of knowledge since you aren't context switching between different project requirements . Personally, I dont know much about knockout. To me peppering code with jQuery selectors does seem like a code smell in th context of modern front end development. That said, if you're a junior developer working in a non-vue/react/angular frameqork is not below you. You're always going to learn a lot on the job. 
Hey helpinghat! Thanks for saying hey :) You are correct about Angular 5 and its close relation to observables. I was talking about using promises in Node.js though! For things like database calls and such. Thanks for saying hi :)
I appreciate you &lt;3
Hi! Feel free to head over to https://www.twitch.tv/pixelogicdev Thanks so much for the interest!
It sounds to me like he is mutating a variable that is in scope of function call. So something like: var x = 0; function z() { 
Just googled hashmaps. I can't really see how to use it for my problem. I am sorry for being a noob, i still can't seem to be able to properly come up with, and implement solutions.
Yes, that's what I was suspecting too.
Yeah. The factory function is what would allow you to do it to all sprites. This is a function that you would use instead of createSprite to create your sprites. It might look something like function createJumpingSprite (x, y, width, height) { var sprite = createSprite(x, y, width, height); sprite.health = 100; sprite.jump = function () { // ... jump code } return sprite; } var boat = createJumpingSprite(100, 200, 300, 400); Ok, maybe a boat wouldn't jump, but you get the idea. ;) 
Well i'm trying to learn. this is the only test I found online that i could practice with. Do I need to cheat? No. It's basically a PowerPoint presentation. I'm just curious if and how could it be done.
I take it you also think hungarian notation is good practice?
You can also have a look at Karma: https://karma-runner.github.io/2.0/index.html This is just for testing Javascript itself though, but in real-world browser and device scenarios.
I'm glad you took the initiative and I'm proud of you. Hope to see what you have in store for the remaining 337 days of the year :3 
I'd reccomend using xamp and php. Very easy set up and easy for beginners. That's how i got into backend development during uni.
Does it bother anyone else that everything is called an “app” now a days? Other than that, congrats OP, I hope this leads to a bright future for you :)
here is your answer What is AngularJS? Well, AngularJS is a popular JavaScript Frontend Framework for creating web application which was released by Google in the year 2010. It became quite popular because of its rich features and built-in functionality to create reactive and responsive web apps. Problems with AngularJS Then, around year 2012–14 frameworks like ember.js and react.js (developed by Facebook) popped in with a better benchmark results and performance, highlighting the AngularJS drawbacks to the developer community. Inception of the new Angular (Version 2) Now, the angular team decided to create a new framework instead of upgrading AngularJS by incorporating all their hard learned lessons from AngularJS. Hence, Angular 2 was released in Sept’ 2016 which is a complete re-write of AngularJS. Confusion because of names and versions Now, the team decided to go ahead with the same name except the ‘JS’ part. So, the new angular is called as just angular and follows a semantic version approach for versioning. According to it, a new major version of angular will be released in every six months (upgraded version, not a rewrite i.e. Angular version 2/4/5 are all same and should be referred as ‘angular’ only). The current version is 5. Adoption and Worldwide Response Since the new angular is a complete re-write, it demands you to re-write your old AngularJS application from scratch using the new Angular (in case you want to update your app as per the current angular). This is a huge challenge for the companies. Also, the new angular has a bit steep learning curve (PS, if follow proper structure, its not that hard as people say). Besides these, angular is quite good in terms of performance and provides you an end-to-end solution, from testing to hybrid-mobile-apps to animations. Also, the entire angular app development process is suitable for large teams and large projects. Features of New Angular: Backward Compatibility: So, application written using Angular 2 will be compatible with Angular 4 as well. 2. TypeScript: The version of TypeScript is upgraded from 1.8 to 2.1. This will improve the speed of ngc (angular compiler) and you will get better type checking throughout your application. 3. In-Built Compiler: Angular 4 comes with the inbuilt compiler to report the template errors right in the IDE. Google emphasizes improvements in tooling as well as reduced code generation. 4. Reduction of Code: They have made changes to AOT generated code such that you will find reduction in the size of the generated code for the components by around 60% in most of the cases. 5. Animation Package: They have segregated animation package from @angular/core as a separate and dedication package. Therefore, if you don’t use animations, this extra code will not end up in your production bundles. 6. Improved *ngIf and *ngFor: if/else style syntax has been introduced where you can assign local variables such as when unrolling an observable. 7. Flat ES Modules: Modules are shipped as flattened version that helps in tree-shaking and reduce the size of generated bundles. It also speeds up the building process, transpilation and loading in the browser in certain scenarios.
You do know that here is Angular version 6, right?
Hmm should i get windows Me or windows xp?
yes 
I prefer to call myself junior, because I accept that there are always many things to learn. With this kind of mentality, perhaps I'll never feel like a senior, though I have been a Vue.JS developer full-time for the past 8 months and I've also created a few (bigger) projects in Vue.JS in my free time. In terms of Vue, I wouldn't call myself a junior. In terms of JavaScript, I would.
I know everything will get old, that's why I'd like to work in a company that always picks up the new stuff when developing new projects. I wouldn't mind learning a bit about knockout (I coded a test assignment for this job in it), but I can't imagine doing it full-time for months. I can imagine working on a knockout project for a month, perhaps, but that's not what this job offers.
&gt;I would recommend the first thing you do is get some perspective-- you seem pretty keen on looking down on frameworks that are not the latest hotness. That kind of attitude will not benefit you. Especially this, software is way different from products that you can touch. It's way better to wait a year or two and see what others have done with it, can never know what buggy shithole you'll get into when it's just out there since last week.
Huh. I've never not used curly brackes for a function.
Full of errors and typos. There are better places to learn this stuff. 
&gt; always picks up the new stuff when developing new projects I really think web devs as a profession need to re-learn the value of a reliable stack. If I worked at a company that was constantly changing our workflow to keep up with the insanity that is new web dev technology I’d fucking quit.
Let and const were in IE 11! That's not really next gen JS... 
burn
Wow. What awesome words :) thank for being proud! Yesss let’s see what happens! I’m excited to see what else comes out of this. Thanks for the support friend
Don't do it knockout is awful I'm a big fan of two way data binding and don't understand the big craze of one way data flow of react. It's not fast I don't care what any one says and its horrible for forms. That said working with knockout will make you appreciate one way data binding and make you feel like ripping your hair out when you get a deeply nested bug. It does however get observables right and make you ask why any one would bother writing all the boiler plate that is redux and rxjs. 
I think it’s how you described an app! In my mind apps don’t have to be super complex systems. It can just be a tool that has one function, but to each their own. I appreciate that and thanks for saying hi!
I agree with you, I did mean something that's new and widely used in the software world (perhaps like Vue.JS - it's not a week old, but I'd still call it new), not straight out of the hot pot. 
Why is everybody treating it here like if everything were black and white? There are (relatively) new frameworks that are widely used and reliable. It also doesn't mean that you have to switch to new technology every month.
I think if you want to be humble about your position, just say you're a developer. There's nothing wrong with being a junior, mid-level, senior, or anything, but those terms do mean something, and if you're just using a term that suits your feelings rather than your skillset, that's just going to cause confusion.
I understand that, that's why I wrote that I want to learn more frameworks and keep advancing. I do realize Vue.JS won't be there forever and I also realize that I need to expand my knowledge to understand the Front-end JavaScript world.
Well you said you wanted a company that *always* picks up the latest tech when starting a new project, and my point is that isn’t always such a desireable thing.
I have been an ember and angular developer for about five years. Current company had a knockout app that needed maintenance, so I stepped up. There are real differences between them, but it's all just code - if you ever want to be a real senior developer, you must prove that you can add value to a company, not get hung up on frameworks. Learning different frameworks helps you learn JavaScript, which is the core of what we do. I can guarantee that the company you are considering will be open to using new frameworks, but only if the endeavor is presented to them as a cost-benefit analysis with clear benefits, and by a person who is an expert in both solutions. I am currently rebuilding parts of the legacy knockout app I maintain in hip frameworks, but with a much clearer knowledge of why and how - and adding more value to the company. TL;DR; It's code, don't get hung up on frameworks if you want to progress in your career.
Hi /u/vivek-modi-94, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/HagridTheSoviet, For javascript help, please visit /r/LearnJavascript. Thank you!
The joys of SPA. Never fails to seem like ice skating up hill :) You don't really need to use # anymore. Since you can now modify the history within the browsers (changing the URL without actually navigating to it). All your URLs will still need to load the same "root" file as the user would see when going to the homepage. But the app with then load the correct models, views, etc to load the correct content that matches the URL. Of course, you could also render the starting point on the sever side and just send that (after which it then acts like an SPA for the user). This is also how you can make a SPA search engine friendly (although I know you didn't ask that). To know what should be navigable and what shouldn't. Just pretend it's a page to page site. Would you show a new page when showing a confirm dialog? Of course not, so don't give it a route! Would you show a new page when adding a user via a dialog? You would likely show a new page when adding a user (the fact it's in a dialog is irrelevant when working out of it route it or not) so in this case, yes, give it a route. As for how... well... that's part of the fun in SPA state management. What framework are you learning? Or are you trying to role your own for the sake of education?
Thanks. That helps clarify the issue.
Hi, thanks really interesting stuff for someone having more of a Django/Python scraping background. I find the title a bit misleading, I assumed Shopify to be a third tool, actually did a "GitHub Shopify" Google search :\-\). Something like "Web Scraping Shopify data with Puppeteer and NodeJS" might be a bit clearer.
Second thought: think this will be especially nice in mobile context, e.g. being in the underground or something and every time have a look at 2\-3 examples, since this is so lightly consumable.
For actual projects, I like to keep things as simple and reliable as possible. Why complicate a project unnecessarily? Typing `require()` isn't difficult, the way it works is pretty convenient, and it's officially supported by Node.
There must be an npm module for this.
chart.js and particles.js are both great, but they are not components, any interaction is going to cause you trouble. Vanilla js is such an odd concept, considering that React is but javascript. It is a pattern basically. And if you wanted to write applications in "vanilla js", you would essentially create a React clone, and that is what you see when you pull up "vanilla" todo-mvc examples or look into how bigger "vanilla" apps are structured. They are React implementations that cannot scale and lack an eco-system. Loading up React even for the smallest site at most costs you 30kb, and the smallest you can compress it to is around 4kb. Small price to pay for declarative components and an eco system, code re-usue, ease of developing/debugging and all the other benefits. And since the eco system is so big, there's basically everything, for instance [react-particles-js](https://github.com/Wufe/react-particles-js), [react-chartjs](https://github.com/reactjs/react-chartjs). Both as self-contained components without the need to delve into the dom, as it should be.
Have you looked into performance testing with `tracing`? It seems this is glossed over, and the actual content of the tracing object doesn't seem to be well documented. I'd be very interested in seeing how to monitor runtime performance - say, click a dropdown, it animates out, then analyse the data showing frame length and other metrics etc.
It's not a bad deal, but know that you'll be giving up a lot to take this job. I've been in development situations where you're stuck on an older stack, and it's not really the best thing. You'll feel stuck and you'll feel as though you're stagnating because you're not being challenged technically in your job (and the longer you're there, the more you'll feel as though moving laterally is a distant dream). Take the job if you're committed to learning outside of the job environment and you think that you can maintain your skills. This may be harder than it seems. Alternatively - and this is the better thing - search for areas of improvement within the job itself and the tech stack, and make those your wheelhouse. A few ideas: 1. Perhaps their frontend unit testing story is nonexistent. Could you spearhead a proposal to make it better, and then execute on that? 2. Perhaps there's a build system, but it's not automated well. Are there improvements to be made to the build/release cycle? 3. You said that the codebase is ES5. Could newer codebases bump to ES6/7 (or Typescript, if they're into that, either way)? Depending on how you approach your position, there are a lot of things that you can do to stand out in your position, help your team, and grow as a software engineer (not just a web dev). If you think that you can do this, and if you think that your team might be on board with moving forward in this way, definitely give it a shot. Addendum - if you've met the people on your team and they seem nice but very rooted in their ways, you might have an uphill battle. Final thing - if this is the best job offer you have, just take it. Keep looking at job offers for six months after you've been working there, and if you don't like your situation, start interviewing at other places.
one thing I've seen done in languages like this was with ruby. I saw this where a method could define a namespace instead of using a global namespace to search through data, and so the third parameter was either used or the 4th null. Basically, the idea is this: 1. first thing after a method is called, you check if the last parameter is undefined/null depending on the language. I believe its undefined in JS. 2. set the parameter variables properly. (set parameter 2 to be the value in parameter 1 when parameter 2 was undefined). 3. set the improperly used parameter to undefined as if it were never sent in anything. In practice, this is how it might look: function _twoParams(a, b) { if(b =="undefined") { b = a; a = undefined; } // Rest of your code }
&gt; HOWEVER: YOU WIL STILL need to open up curly brackets and use the return keyword if you want to modify the input in some way before returning. Or you could use the comma operator and open up to the hate of anyone reading your code x)
Curious, do you feel that Vuejs got observables &amp; two-way binding right like Knockout and did Vue avoid the boilerplate of redux/rxjs in your opinion? 
The problem is I don't know how you'd use this in a way that's different than taking a trace in devtools normally. AFAIK all this does is create the dump that you can then look at. I guess you could automate taking these traces, but there's still no way to automate reviewing them. I'll take a look and see if there is anything about this that's useful. Maybe the trace objects it outputs are praseable, maybe you could look at specific timings you know to look for after a build.
thanks 
I wouldn't do it. In my area, search for jobs with key words "angular" or "react" and you'll get tons of hit. Search for knockout and there might not be a single job listed. Two years down the road you'll be more experienced in knockout than anything else\-\-probably not a good thing for your next job hunt.
Well, too bad it's down right now. Sucks, because I was in a mood to draw as well.
&gt; In ES7 you can skip the constructor function call and directly devrieve the properties within the class. No you can't. Class fields are a stage 3 feature^1, meaning it is not officially released in _any_ version of javascript^2. I feel like I'm beating a dead horse here... and I hate to be snarky... but if y'all are going to write articles about javascript, maybe learn what features are actually in the language first? There are literally two features in ES7 -- Array.prototype.includes and the exponentiation Operator. ^1 https://github.com/tc39/proposal-class-fields ^2 http://2ality.com/2016/01/ecmascript-2016.html, http://2ality.com/2016/02/ecmascript-2017.html, http://2ality.com/2017/02/ecmascript-2018.html 
The first thing that comes to mind is checking that you're getting 60fps from an animation. If your JS is too heavy then you can overrun your frame budget. Is this data available?
I use puppeteer with mocha for testing and it is an amazing library! So so much help in the long run, saves a ton of time on manual testing
If I remember correctly this was basically what I saw as part of the safe yaml Ruby library. Seemed neat to me that they were able to use it that way
I don't get what it does.
⠀ ⠀ ⠀ 🤠 🇰🇪🇰🇪🇰🇪 🇰🇪 🇰🇪 🇰🇪 👇 🇰🇪🇰🇪 👇 🇰🇪 🇰🇪 🇰🇪 🇰🇪 👢 👢 howdy. i'm the sheriff of kenya flag
[removed]
Today with my spare time i developed a JavaScript helper for viewport based CSS animations. Here's the github link if you think it could be useful https://github.com/anacoelhovicente/peekaboo
They didn’t want to rewrite some ES5 projects because they don’t wanna use babel and they require IE 6 support...
Really nice. I just wish that the select and table component where virtual. I've had to make my own selects and tables with virtual rows in ant.design. Great amount of components. I'm just not so sure about the form schema. I really like how rcform works. 
I genuinely hadn’t heard of some of those. 
React uses a virtual DOM, but other frameworks, like Angular, for example, don't, so attributing the difficulty in using an external library in a framework to the virtual DOM is confusing.
I figured. Just wanted any excuse to showcase my brilliance ;)
If I know Rambda, why learn Underscore? and then learn collect.js? There is a lot of overlap in this list.
Without your code, it's hard to say exactly how, but as an outline: - Wrap your scraping code in a function that takes a number as the parameter and uses it in the url. - call that function in a for loop - modify your json writing so that you build the list of data in memory, and write it to json at the end let results = [0, 1, 2, 3].map(num =&gt; scrapePage(num)); let output = JSON.stringify(results);
Some of the descriptions provided offer little to no insight into why "I need to know" about this library in \&lt;insert year\&gt;. Let alone, why I would ever "need to use" the library.
node.js is just a javascript engine, it can "hide" or "show" whatever you want. If you'd like, you can use something like `express` or `koa` to write a webserver in node.js, and have a url exposed, say `http://example.com/hiddenService?a=1&amp;b=2` which will return 3. Of course, if someone visits the url they can access your "hidden" service, but you can add some sort of authorization later.
More like utilities not to learn in 2018. Underscore/lodash was replaced by ES6/7. Moment isn't modular and can be replaced by date-fns
Hey man, really great video. Thank you for making it!
Honestly surprised date-fns isnt on this list. Personally I'm much more fond of the functional approach, compared to moment. https://github.com/date-fns/date-fns
One who uses lodash for for loop cannot call him/her self a programmer. What's the idea of programming if not trying to solve something yourself?! It makes one too lazy so when he/she has to figure some alghorithm out, won't be able because he/she was too lazy to train his/hers brain on simple stuff. Is it just me or anyone else thinks the same way?
It generates an emoji cowboy with a body of a randomly selected emoji along with a statement in the format of "howdy. i'm the sheriff of &lt;random emoji name&gt;"
Make a Codepen (or similar) account and tinker away making stuff and using [MDN docs](https://developer.mozilla.org/bm/docs/Web/JavaScript), Stack Overflow, etc for reference. You can read an endless array of textbooks, but there's no substitute for hands-on experience.
There's a difference between avoiding learning about how to code an algorithm and avoiding reinventing the wheel. If you're utilizing your time re-solving long-solved problems, then you're doing it wrong, imo.
And then you get to reinvent grouping, deep comparisons, deep cloning, currying, debouncing, throttling, sampling, shuffling...
An npm module for a simple `if`? Reminds me the "left-pad" gate...
Codecadamy
Moment was fine back when we were all CDNing everything, but building it into a bundle is much nicer with date\-fns. Personally I try to get by with vanilla as much as possible, using \`Intl\`, though that certainly has its limits.
This article has weak supporting arguments, and doesn't give any examples as to why these libraries fit well with emerging software trends in 2018. You'd do better searching github based on star\-rating than reading this. 
Which udemy course for js do you suggest?
Hi /u/jayymehta, For javascript help, please visit /r/LearnJavascript. Thank you!
Thanks!
React works just fine with dependency\-free libs \-\- it's the main reason the `ref` callbacks exist. I've been with React from the start \(5 years now\), and in the earliest days a lot of my components were simple wrappers. There weren't a lot of other React-specific libs out there, and I'd still want to take advantage of code I was already running (and styling), so this sort of thing was common: var DatePicker = React.createClass({ componentWillMount: function() { var _this = this; jQuery(this.myRel).datePicker({ onSelect: function(dateText) { _this.setState({ date: new Date(dateText) }); }) }); }, So I was really just making a `DatePicker` class that was little more than wrapping some React around the jQueryUI datepicker. It's perfectly fine to use libs that attach to the DOM directly, or even overlook React-implementations of those libs if you find they don't do a good enough job at what you need them for. I used to find the react-google-maps lib didn't do nearly enough, so for a couple years I simply rendered my gmaps into a React component while I waited for the React lib to improve (which it has -- I love how it renders map markers now). I've found it's the case with a lot of d3 stuff and chart.js too. Anything webgl I find I frequently simply attach to a ref -- we've only recently seen a React component come out for unity that's useful for more than trivial examples. I think any component that _needs_ your virtual DOM needs a React component. Anything that is simply using it as a convenient/consistent way to pass along props is a "nice to have", and depending on the lib might not even be that useful at all.
I’ll be checking this out!
Make something for yourself using a popular stack, like MERN. A large community ensures that you will be able to find answers to questions that arise along the way.
IMO this list is most useful for discovering possibly useful functionality you've been handwriting. Other than that, find the right lib for the right job..
For those looking for a better way to debug (vs jumping back and forth between code + browser), I run a project called [browserless.io](https://github.com/joelgriffith/browserless) that has a pretty snazzy [debugger here](https://chrome.browserless.io/). It's probably saved me _hours_ of time looking at docs, inspecting in a separate browser, and so forth.
sounds like you are familiar with backend development with using ORM and express. React and Angular are great but a solid backend knowledge will take you further. **I would recommend getting a little deeper:** - Do you know how deployment works ? can you deploy and integrate what you've build ? can you administer things on AWS or GCP or heroku even ? - CI / CD ? automation &amp; configuration ? any ideas what these things are ? - Can you setup ssl ? or evaluate areas for security hardening ? - What about unit, integration test ? 
My process is usually the reverse — twice in the last few months I've manually written custom `debounce` implementations before realizing it and replacing with `lodash.debounce`. I like to keep my code readable and my concerns separated, and often I feel that library implementations are superior due to being better tested and used im the wild.
Oh look, another spammer posting to r/javascript. and for some reason, r/js is the only sub to ever upvote it.
Hi /u/JoniSar, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
This week on Buzzfeed!
I think the premise is the need to know of not need to know how to use them. I found chancejs to be pretty neat with the features, similar with lazy and collectjs. I'm usually against introducing lodash to any project due to usual incompetence with developers using it and heavily relying on bad practices.
There isn't really an "easy" way, and "easy" would depend a lot on your previous knowledge, aptitude, curiosity, etc. It will also depend greatly on your area of interest; if you're looking to learn "full stack" JavaScript (frontend and backend), that's obviously going to take more time than more focused use cases. I'd recommend you take a look at Colt Steele's Udemy course [Web Developer Bootcamp](https://www.udemy.com/the-web-developer-bootcamp/). It's maybe a little dated now, and you'll (hopefully) outgrow the presented stack pretty quickly, but it's a pretty comprehensive starting point if you know no JavaScript at all, or have programmed in other languages, and maybe know a little JavaScript, but want to get up to speed on full-stack JS.
Just by reading it sounds like you already know the answer to your question.
If statements will work fine, and it is a great beginner project IMO. I know you want to find the 'right way' to do it, but there are probably 100 ways that will all give you the result you want. When you go back to look at your project a year from now, you'll either laugh or cry. But you'll know that solving actual problems was the important part - not 'doing it the right way'
So there's no finalized formula? That would be where I would start. Seems like you might need to take an integral or sum the geometric sequence. Knowing excel should not be the limiting factor in whether or not you can get a formula to plug numbers into. At the very least get an example from start to finish using dummy data.
I'll be sure to check it out, thanks!
vue
I recently scrapped a weeks worth of work when it dawned on me that I didn't need to roll my own event management system from scratch, I can just inherit Node's EventEmitter class and override a couple of methods. The ability to reuse code (and write reusable code) is one of the most powerful tools in any programmers belt. There's no shame in using a tried-and-true implementation of a particular algorithm!
Hey, really cool! I am working in a side project but in some famous web page I am getting a "shadow ban" any idea how to avoid it? Or any package to handle the ip proxy stuff?
Any help is better than no help at all. Thanks for your comment! But yeah, definitely need a finalized formula.
I think you're overthinking it a bit. Consider this: do you even *want* this in your router? As a user, if you take these steps, what would you *expect* to happen? 1. Visits the home page 2. Clicks on the "orders" button 3. Clicks on order "123" to view details 4. Clicks on order "456" to view details 5. Clicks on order "789" to view details 6. Clicks the "Back" button in the browser I'd expect to be taken back to the home page, not to remain on the orders page with the details for order "456" displayed. So, I'd have the router handling `/`, `/orders` (or `/{user}/orders` or whatever), etc. I'd keep the display properties (like which order is selected) in the local state for the orders page. When a user clicks on an order, change an `activeOrder` property to the order id (or toggle a `selected` property on that order if you want multiple details visible at once or whatever) and use that to determine if you need to draw the details for an order. If you want to have the selected details persist between sessions, you could store that state in localStorage or in user account details on your server. You might consider a centralized state manager like [Redux](https://redux.js.org/), if you need to access this state outside of the order list itself. 
One plus of the Generator approach is that it can be applied generically for _all_ monads, whereas `async`/`await` only works for promises.
How are you hosting your app? GitHub pages?
While this is technically correct, it comes with some caveats. IE10 and IE11 both incorrectly default to DNT='1' depending on the operating system. It was incorrect in the sense that Roy Fielding (yes, that guy) ultimately decided to completely ignore the setting. https://www.cnet.com/news/apache-web-software-overrides-ie10-do-not-track-setting/
shameless plug \- I also have a video on scraping using raw requests. [https://www.youtube.com/watch?v=7pDYzUpPBsA](https://www.youtube.com/watch?v=7pDYzUpPBsA)
Very informative, I'm going to be generating invoices with this. Thanks for your work! :)
I've been looking for link and I just can't find it anywhere. Is this conference actually happening? There is no simple way to join the conference. Everything website and product hunt page is just to get email address. I can't find anything on google search with twitch byteconf keywords as well. Should I wait for email? 
Hey there! I highly appreciate your kind words. It’s super humbling to see that this has inspired you. YOU GOT THIS. I think one of the best things someone told (as I am a terrible over thinker) was, “stop planning and just start doing”. Really helped me kick it into gear. So I pass along that message to you :) If you need help getting started feel free to come over to my stream/discord/twitter whatever. I would be more than happy to help. (Https://Twitch.tv/pixelogicdev has all this info :)) Thanks for saying hi!
I love when language developers forget their audience and start talking about random nouns and verbs as if we are aware of their conceptual loads
I think there's and ebb and flow of zeit heist towards catch-all modularity and monolithic purpose built machines
It is not hosted yet as I haven't even started working on it yet! But no I don't plan to host it on github pages.
People stealing your stuff is always possible \- very true. However Restitution is either unlikely or impossible if the the work was stolen by sub\-contractors in different countries/continents. IP/Privileged Info \- Sharing anything with a 3rd party where not explicitly stated who they are \(e.g \- naming said subcontractors\) would likely violate your NDA with your client. Other points \- well met. Personally I disagree, but I can understand your points and why companies would be okay with that. The culture is different where I am \(IE\) \- nearly everything is done by the people you directly hire and sub\-contracting out without making \*explicitly\* clear who/what/why is rare and very frowned upon. 
Why this versus Selenium?
Hi /u/ilyasm97, For javascript help, please visit /r/LearnJavascript. Thank you!
Hi /u/wtrshddr, For javascript help, please visit /r/LearnJavascript. Thank you!
Focus on the basics of the backend not specific libraries. Learn how the HTTP protocol works, implement basic rest services using pure Node.js (no fancy libraries). Once you have a strong grasp of the underlying concepts then you will be able to pickup and use any library you want in a very short amount of time. This is way more important than being an expert in one particular library...
the easiest way to learn JS is to be paid by someone to write JS 8 hours a day. under these conditions it is inevitable that at leaat some improvement will occur. practice becomes automatic when the only other option is not making rent. I write this only partially as a joke. this is how most people improve at developing in general. 8 to 10 hours a day, 5 to 6 days a week.
So then just create a standard postgres db server api like this then? http://mherman.org/blog/2015/02/12/postgresql-and-nodejs/
Do you mean a static site generator like Jekyll?
No, thats not what I meant. I'm trying to push you towards learning about the HTTP protocol in general and the nature of the request/response cycle in Node.js. If you only focus on understanding a library, or following a tutorial you never really going to get good at this. Implement a basic rest service (ignore the database side for now) in pure Node.js, do not install any packages. Obviously for a production project you can use libraries like express, koa, or etc but those are for convenience. Libraries like that make a lot more sense when you understand what they are doing under the hood.
Don’t forget incredibly insecure. 
Are you using jquery?
Nope! Vanilla flavored only
If you know it's always n levels deep, you could do something ugly like "parentNode.children[0].children[0]..etc." If you just want to get the deepest element of that parent, you could do something like: let parentNode, currentNode = document.getElementsByClassName('1')[0] while (currentNode.children.length) { currentNode = currentNode.children[0] } console.log(currentNode) 
Nope! You don't need to give your email if you don't want to –– just remember to stop by https://twitch.tv/byteconf on August 30-31 &lt;3
Awesome, thanks! 
If there's something unique on the selected element to go off of, you could query it selected.querySelector('#selected &gt; div &gt; div &gt; div')
?
I like this solution better.. or even if you already have the parentNode object, you could just do: let myNode = parentNode.querySelector('div &gt; div &gt; div') // (or maybe 4 divs?)
&gt; ...Puppeteer is bundled with Chromium--not Chrome--and so by default, it ...... **(However, it is possible to force Puppeteer to use a separately-installed version Chrome instead of Chromium via the executablePath option to puppeteer.launch**... [https://github.com/GoogleChrome/puppeteer](https://github.com/GoogleChrome/puppeteer)
The problem is that the first div can match on the parentNode or any of its descendants. So you could match on some other nested tree instead of what you're after if you're not targeting the parentNode directly. https://jsfiddle.net/qLp6nj7g/
True, but in this case at least he did specify that each div had just a single child. But I agree it's something to be aware of
I’d learn the AWS stack, with your React/Redux app served from S3. This stack is quite popular, especially with larger companies, and is very diverse so you’ll be exposed to a host of technologies that apply to pretty much any other stack: - Static server (S3) - Runtime/container (EC2 and Lambda) - NoSQL (DynamoDB) - RDBMS (Amazon RDS) - Search (Elasticsearch) - Cache/message bus (Elasticache)
Vue.js! Definitely, you should try it.. So damm simple and very small footprint 
I have this page bookmarked from sometime last year, when I hoped ShadowDOM was the answer to all the problems we had with style encapsulation of embedded apps. Sadly, after a couple of days testing it was clear that around 12% of our target user base would still suffer style bleed, even with [polyfills](https://www.webcomponents.org/polyfills). All the iPhones and iPads I tested ( Safari ) at the time failed my simple test. TL;DR Encapsulation across all platforms is hard.
What do you mean scrape an extension?
Thanks for the great. You should redo your old video on making an API by AJAX calls using puppeteer/cheerio.
Act confident it always help. If you confidently present what you know and the things you have done then you would have put your best foot forward. At the end of the day it is an internship. You are there to learn stuff you don't know. Just practice presenting your projects and the questions and you should do fine. As long as you go in wanting to learn and being confident you will probably do fine.
Good idea. I want to show how to build throttled APIs in production as well. 
You'd need a couple things: 1) An understanding of exactly how those pieces are done; it could be an `img` tag, or it could be some other element with `background-image` css property, or it could be an SVG image (composed of special XML elements). Which one will impact how you do the replacing. 2) You need an extension like greasemonkey which lets you write your own Javascript "mini-extensions", or else you'd need to click a bookmarklet everytime you want to replace things.
I've used both, and my only gripe right now with Puppeteer is video support. If you have a website with a video player, it's content will only show as a black screen, and it won't actually play, thereby preventing the player from rendering UI/controls. Selenium is superior in that regard.
But you're still wrong because there are plenty of strongly typed functional languages. It has nothing to do with the lack of a type system.
Stop worrying. They will teach you everything you need to know - show up tomorrow and be somebody they want to work with. Just be somebody that YOU would want to work with. Be on time, be relaxed, be interested and admit when you are in over your head. Be someone they want to work with.
I bet you could do this with css, just using a stylish extension. 
Sounds like Stimulus might be right up your alley. https://stimulusjs.org/ Big name behind it, small and simple API, use your existing markup. 
thanks for providing such amazing quality content for the cost of nothing
You might want to revisit that. I'm able to get video to play in my tests. Example screenshot https://cl.ly/0D1e0J040G35. It played in headless and non headless mode.
&gt;starting to get frustrated with Sequelize Come on the documentation where the examples change all the time is AWESOME!* ^^*oh ^^gawd ^^no ^^it ^^isn't...
interesting, can you elaborate? More pain in the ass than any other similar project?
Sequelize is frustrating as fuck when you first start. It's much simpler to just use a library like node\-postgres which let's you write simple SQL. Learn postgres with node and express, and then learn AWS, and then learn serverless postgres with AWS RDS \+ Lambda \+ API Gateway &amp; S3. This will set you apart from the many people who are learning MERN. Though eventually you should learn Mongo/Mongoose, too.
Pretty cool initiative, but who is funding this? 
Great use case for testing!
Just straight YouTube.com. I didn’t try with a native html5 player though I know YT uses the &lt;video element. 
Ah! I've been using HTML5. This gives me a good route of discovery then, ty
Unless you share your js and template code here, it is difficult to comprehend your problem.
Holy crap, thanks man you just saved me a lot of time.
Your question is essentially asking what skills one should attain for the best most valuable career. However, nobody knows this for certain, and nobody can guarantee that it won't change out from under you. Instead, develop skills in the fundamentals, and then branch out from there. If you can reason from first principles you will be able to learn new tools and technologies faster. If you try to learn angular or react before you are solid in HTML, js and css, you will have a bad time. Everyone knows you need to learn html, js, css, and git. But not everyone realizes right away how important it is to learn http and a little bit about TCP/IP. Or how useful it can be to learn some scripting language like python, node, or powershell to make you more productive. You don't have to switch over to a dvorak keyboard layout and hammer away in emacs to be highly productive, but knowing how to trace all the bits from a browser request to a web page load will let you begin to see the matrix.
I assume they're hosting on AWS. So as long as what they charge covers their costs, it will balance out. It's similar to Heroku in that way. 
If you're looking for actual, magical two-way data-binding, Mithril doesn't have it. It is easy to wire up however: let email = '' const MyForm = { view: () =&gt; &lt;form&gt; &lt;input type="email" value={email} oninput={m.withAttr('value', value =&gt; {email = value})} /&gt; // ... &lt;/form&gt; } And yeah, you can use Babel and JSX if you really want to, or there are HTML-to-hyperscript utilities.
If you give us the link to the online game, it would be much easier to be specific.
Yeah, I saw that. The numbers just don't seem to add up. They don't seem to be going after big fish to recoup costs, just a bunch of low budget hobby projects.
Thanks for sharing your experience. At my last job interview (Vue.JS) they asked me to rate my JavaScript level on the scale of 1 to 5. I said 2.5, they looked at me confused. They said that's not enough - Yet I've found about 10 JS-related bugs on their website and I let them know at the interview. I guess I should've rated myself 5 (based on THEIR scale) and then they'd be happy. Didn't wanna go there anyway, just thought I'd share my 2 cents about labels. I agree with everything. I'm trying to learn something new every day.
I do, just seeking validation that my decision is not that terrible. Instead it seems people misunderstood what I meant by saying I want a company that works with new stuff and then I'm getting irrelevant replies.
Sure -- looks like their [documentation](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#running-puppeteer-in-docker) has been updated since the last time I tried. I basically had to put together a subset of that example Dockerfile in order to make it work inside my node.js test runtime, since we're running our tests inside a container inside docker-compose. [This](https://github.com/GoogleChrome/puppeteer/blob/master/docs/troubleshooting.md#chrome-headless-fails-due-to-sandbox-issues) was relevant, too.
[Permanent](https://help.github.com/articles/getting-permanent-links-to-files/#press-y-to-permalink-to-a-file-in-a-specific-commit) GitHub links: * [GoogleChrome/puppeteer/.../**troubleshooting.md#running-puppeteer-in-docker** (master → 1c2adf6)](https://github.com/GoogleChrome/puppeteer/blob/1c2adf61e971577a6bc96621fcb78ee88a9a9ff8/docs/troubleshooting.md#running-puppeteer-in-docker) * [GoogleChrome/puppeteer/.../**troubleshooting.md#chrome-headless-fails-due-to-sandbox-issues** (master → 1c2adf6)](https://github.com/GoogleChrome/puppeteer/blob/1c2adf61e971577a6bc96621fcb78ee88a9a9ff8/docs/troubleshooting.md#chrome-headless-fails-due-to-sandbox-issues) ---- 
Can you give a few more lines around the “then” part? 
 function InitscrapePsa() { return new Promise((resolve, reject) =&gt; { let results = []; var id = od; var fullID = id.toPrecision(8).split('.').reverse().join(''); var url = site.concat(fullID.toString()); osmosis .get(url) .find('.table&gt;tr:eq(0)') .set({'CertNum': 'td[2]'}) .find('.table&gt;tr:eq(1)') .set({'Rev': 'td[2]'}) .find('.table&gt;tr:eq(2)') .set({'Year': 'td[2]'}) .find('.table&gt;tr:eq(3)') .set({'Brand': 'td[2]'}) .find('.table&gt;tr:eq(4)') .set({'Sport': 'td[2]'}) .find('.table&gt;tr:eq(5)') .set({'Number': 'td[2]'}) .find('.table&gt;tr:eq(6)') .set({'Player': 'td[2]'}) .find('.table&gt;tr:eq(7)') .set({'Variety': 'td[2]'}) .find('.table&gt;tr:eq(8)') .set({'Grade': 'td[2]'}) .data(item =&gt; results.push(item)) .done(() =&gt; resolve(results)) od++; console.log(od); })}; 
If you live in a major city, the easiest way to start learning technologies is to just start going to meet\-ups and conferences. My kosher list of technologies to learn that will make you attractive anywhere is: Front\-end \(React, Redux\) served via S3 \+ Cloud\-front Backend \(Express, Node, SQL / noSQL\) on EC2, RDS, DynamoDB, or serverless \(AWS lambda\) Deployment: Docker, Kubernetes, circleCI My current side\-project's stack is React hosted on Route53, Cloud\-front, S3 with a monolithic Serverless backend \(Claudia, Serverless, AWS Lambda\) that uses a MySQL database on RDS. And I use circleCI for continuous deployment. Very scaleable. Very umph. Tech stacks to avoid: Perl, anything to do with PHP, don't even go near Java TM, and above all stay as far away as you can from Oracle TM.
This is not how you ask for help.
&gt; .data(item =&gt; results.push(item)) Put a console.log here to see what "results" and "item" look like &gt; .data(item =&gt; { &gt; console.log(results, item); &gt; results.push(item); &gt; }); &gt; 
Interesting. I know they are just accessable as files on the computer once you have it installed.
Yea I know that too. But this extension app, in particular, does a lot of low-level shit like scanning for MDNS servers in your network. 
If I had to guess what's happening, it's because you're using a log stream instead of a normal file stream. Log streams append to the end of the file (rather than overwrite the whole file), so when you run your code, you see that it appends the result array (with one item in it) to the data.json file. You can test this by counting the lines in data.json, running the code, and then counting again (you can expect one more line) // place this up top const fs = require('fs'); // replace the logStream line with this InitscrapePsa(od).then(data =&gt; fs.writeFileSync( 'data.json', JSON.stringify(data) ) ) Here are some simple examples, in addition to the one herehttps://stackoverflow.com/questions/42179037/writing-json-object-to-a-json-file-with-fs-writefilesync/42179082
You can use css for that i guess and also it is possible with jsx 
I would have suggested preact, but thig is youll need to convert html into jsx so nah, becasue of that use vue
That is absolutely beautiful, thank you.
Both chart.js and particule use a simple &lt;canvas /&gt; why would they care about DOM performance?
Try this! "use strict"; const osmosis = require('osmosis'); const siteBase = 'https://www.psacard.com/cert/'; const leftpad = require('leftpad'); const fs = require('fs'); var od = 6616697; /** * Returns a row of certification data from PSAcard.com * @param {number|string} certificationId */ function scrapeByCertificationId(certificationId) { return new Promise((resolve, reject) =&gt; { // although leftpad is the punchline for lots of javascript jokes, it's still pretty handyn let paddedId = leftpad(certificationId, 8); var url = `${siteBase}${paddedId}`; console.log("scraping", url); osmosis .get(url) .find(".table") .set({ "CertNum": "tr:eq(0) td[2]", "Rev": "tr:eq(1) td[2]", "Year": "tr:eq(2) td[2]", "Brand": "tr:eq(3) td[2]", "Sport": "tr:eq(4) td[2]", "Number": "tr:eq(5) td[2]", "Player": "tr:eq(6) td[2]", "Variety": "tr:eq(7) td[2]", "Grade": "tr:eq(8) td[2]" }) .data(item =&gt; resolve(item)) }) }; let promises = []; for (m = 0; m &lt; 2; m++) { promises.push(scrapeByCertificationId(od)); od++; } Promise .all(promises) // uncomment this to see the results in your console //.then(results =&gt; console.log(results) ); // uncomment this to write results to file .then(results =&gt; fs.writeFileSync("data.json", JSON.stringify(results))); 
Learning agnostic CS principles is more important imo.
the data file is blank, here's the log https://www.psacard.com/cert/ 6616697 https://www.psacard.com/cert/ 6616698 [Finished in 0.893s]
Hm, not sure why it used a blank space for you. I edited my code above. This is the relevant part: let paddedId = leftpad(certificationId, 8, "0"); Also, pay attention to the end. 
it made me declare var m; thank you so much, this is great.
I do. It’s one of the best!
I'm not saying that I would actually take a look at it, but... I think people might be much more willing to do so if you actually had that test page all set up and running somewhere and the _leak_ could be seen working without having to download and set up the project locally. (And, since the problem is a (suspected) memory leak, _don't_ put this on JSFiddle/CodePen/Plunker/etc)
good idea! I added a direct viewing link to rawgit https://cdn.rawgit.com/muggy8/proxymity/master/tests/memory-test.html
Looks good, added it to my channels. I'll try listening to this when Welcome to Night Vale isn't weird enough.
It's a great podcast and Wes Bos is a great instructor
I usually listen to this podcast on my commute to and from work.
This question is very much a “depends!” At the end of the day it’s the principles that are important. That said, I’ve been very interested in the GRAND stack. https://github.com/grand-stack/grand-stack-movies-workshop Graph databases and APIs built on GraphQL are amazingly flexible in how you observe and manipulate data. 
As I said I can't really take a look at it today, but, from a quick glance... I'd say that doing this `this.app.items = []` on your Proxy object isn't a good idea. I mean, when you do that, a new proxy is created and the previous one doesn't seem to be freed/destroyed. Sadly, even if you change that so that it doesn't create a new one, it doesn't look like the nodes and listeners are being destroyed, so it _may_ be that there are some dangling references there. Also, Vivaldi's dev tools seem to crash while trying to inspect memory allocations so I can't see much more, sorry.
The stack isn't important - it's about the underlying skills &amp; concepts. Learn how to learn problems, how to manage databases &amp; data, how to manage security &amp; performance, and how to architect an application at the high-level, don't focus on the precise details of some specific toolset. The specific framework etc you use is not the important thing. If you've got a deep understanding of the core principles, switching to another will not be a problem at all.
This x1000. I have no doubt that it will do some awesome things in compute heavy applications, but the rumors of javascript's inevitable demise are just neckbeard circle jerk material. 
I do! I’m waiting until I have some free time *at* my computer to listen to the next one so I can tool up my editor (episode VS Code Round 2)
Ooo, that’s neat
You jest.. [oh shit](https://www.npmjs.com/package/if)
Dont know what you exactly want,but the easiest way I would so it: You need to just render the elements to pure html. You could do it with outerHTML. 
I'm surprised WebAssembly discussion is even allowed in /r/javascript, given how it's going to affect JavaScript's popularity in the long run.
No it just outputs html. You need to save it then somehow. But you cannot save dom elements, as those are instantiated objects which you cannot serialize or deserialize (easily). The only good way is to render a.pure html string. 
okay, the issue i'm having is finding a way to save. i have this form builder i created where users can select form elements to build a form dynamically, and after the form is built, they can saved and share the links with users
Well normally you would save the state how the user built the form. Maybe in just an array or some more complex json. Than you would push it to your server, save it in a database and assign it some unique Id. The user would then share a link which does contain the unique id. When some other user clicks the link he comes to you Website and you know the id. So fetch the json or data whatever from you database and rebuild the form the same way the initial user built it. 
That's the issue, there is no database, that's why i'm looking for a way to generate and save the content in a file with javascript
So you are only in a browser or node or electron or what? 
a browser
It's such a great podcast. Joy to listen. Can anyone recommend more like this?
Demo: https://codesandbox.io/s/j2l71rrxw Repo: https://github.com/theKashey/react-nyan-stroller Adds a NyanCat as a scrollbars (as seen in Atom), to the page, or any scrollable node within it. 🌈🙀
I've seen a way on how to do this just one handler and it's a pretty neat way the problem is the rendering speed... the browser crashes at just 700k and no I'm not e dev in charge of this project I'm seeing if it's even possible I'll just need to use a different approach to solve this one...
Codesandbox loads way faster thant codepen and it just makes me happy \o/
You can always hit crtl s in the browser it will save the contents into a file. Or look into this http://cwestblog.com/2014/10/21/javascript-creating-a-downloadable-file-in-the-browser/
Hey, We self fund. We have paid plans to earn money if you look at the pricing page. The free sandbox for OS is limited to 50 MB RAM. We constantly monitor our servers and make sure to maintain limited loads.
1. WTF 2. Woah, that's neat 3. Kinda like Org Mode? 4. Also related: that McIlroy vs Knuth story and Knuth's approach. This is really interesting.
You actually can't run WASM without JavaScript. WASM sits on top of JavaScript and requires JS to bind it to your browser. This is unlikely to change. I have a more detailed explanation here: https://www.stevethedev.com/blog/programming/taking-look-at-web-assembly The gist is that it's just a performance-focused complement to JavaScript.
Thanks. I think I got the wrong impression about browser-side routing. I thought that all events should be routed (as they usually are in a REST server). Now I understand better that only those things that would intuitively be displayed in a new page in a multi-page application should be routed. Other events can (and should) be handled "locally".
If anybody is interested in contributing new questions you can do so on Github: [https://github.com/fejes713/30\-seconds\-of\-interviews](https://github.com/fejes713/30-seconds-of-interviews)
*"Because it's the project Reddit deserves, but not the one it needs right now. So we'll import it. Because he can take it."*
well the motivation is simple: 1. markdown for readability (compare to npm scripts) 2. simplicity (compare to gulp) 3. it's just interesting to make such a tool and the implementable is pretty simple too, it uses markdown-it to parse the markdown string and extract useful information. 
That's fair. Perhaps a more accurate way for me to portray it is that WASM is carving out a niche near, but not completely eclipsing JavaScript. It sits somewhere between JavaScript and Java. You get the memory control of C, the portability of Java, and the light weight of JavaScript. On the other hand, you lose the rapid development of JavaScript, the performance of C, and the nice toasty feeling of being near a computer running Java. Its isn't intruducing anything that would obsolesce JavaScript any more than it's intruducing anything to obsolesce C or Java.
1. `transition` should be on `.box` not on `.shadow`. In your example, once you remove the `.shadow` classname, there is no way for box to know it needs to transition.
Nice, that worked. Thank you! In general, how does the transition in .box know that i need to transition .shadow? Do you know any good detailed tutorial for this transitions? So i can learn more?
Yup, that's a great way to describe it. I'd say "Rust" and not "C" but I'm biased ;)
I use Ember and React, but I use the former a lot more. 
oh you are the guy who posted about why you still use vim! no wonder so familiar
Using plain `JSON.stringify()` to generate they key is not a good idea: the keys are not stable because the order of property iteration is not sorted in JavaScript. For example `{a:1, b:2}` could become `{"a":1, "b":2}` or `{"b":2, "a":1}` depending on how the object was created or manipulated.
Good luck! I think this is awesome. I really hope you're really successful.
Good point! It's definitely not meant to replace the `Map` object, only to show how a basic hash table works 
Looks like you forgot to handle collisions :\-\)
Chose to exclude, not forgot! I'm only going for the most basic hash table implementation.
https://codepen.io/pen
In case anyone would like to contribute new questions, you can do so on Github: [https://github.com/fejes713/30\-seconds\-of\-interviews](https://github.com/fejes713/30-seconds-of-interviews)
[https://jsfiddle.net](https://jsfiddle.net)
So, this poll will only tell us what the lurkers on /r/javascript are using. lol
Just my two cents. A lot of the instability comes from the fact that the development process is still maturing. Think about it, in the early 2000s we had HTML, CSS, and some basic JavaScript. We were stuck creating these giant files with spaghetti code because a lot of best practices from desktop development (such as separation of concerns or component based UI building) weren't possible. And for JavaScript, most of our time was spent manually manipulating the DOM. In the last decade this has radically changed, starting with frameworks like Angular and evolving to the React and Vue paradigm we see today. The process of web development is being rapidly improved. Once we reach a level of maturity there, things will slow down.
Sometimes people have asked here in this subreddit. The response may vary, though, mostly depending on how large/small and interesting the thing is. There's also /r/codereview but activity is... low.
Thx!
There also aren't any limits. So it's a completely worthless poll :)
what about this takes 30 seconds?
https://repl.it/site/languages/javascript
This
I'm working on a relational DB on top of LevelDB, called NextLevlDB. The main way it does this is to ensure each record has got a unique key within the KVS, with a \`key\_prefix\` \(\`kp\`\) The server makes use of a model, which is written in such a way as it can be used in other places, such as the client. [https://github.com/metabench/nextleveldb\-server](https://github.com/metabench/nextleveldb-server) [https://github.com/metabench/nextleveldb\-model](https://github.com/metabench/nextleveldb-model) [https://github.com/metabench/nextleveldb\-client](https://github.com/metabench/nextleveldb-client) The server also itself makes use of the client in order to connect to other servers. Unfortunately it lacks a getting started guide, but try this if you are interested \` git clone [https://github.com/metabench/nextleveldb\-server](https://github.com/metabench/nextleveldb-server) cd nextleveldb\-server npm install node nextleveldb\-server Worth noting that it creates its databases within the user directory.
Can some one help please?
The landing page looks pretty professional to me on Desktop. 
Hi /u/techie_ninja, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/unicornprogrammer, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
This project is part for **30brand.** The same team that did [30 seconds of code](https://30secondsofcode.org/) and [30 seconds of CSS](https://atomiks.github.io/30-seconds-of-css/) did this as well. Our goal is to make content easily accessible to everyone. Our content may not be fully understandable in that period of that but most of the answers could be read in under 30 seconds. We wanted to keep answers short and straight to the point and if users wan't to learn more about mentioned topic they can visit our [README](https://github.com/fejes713/30-seconds-of-interviews) where they can visit links that further describe the topic.
Hi /u/mcfc_as, this post was removed. Please see our [posting guidelines](http://www.reddit.com/r/javascript/wiki/index).
Hi /u/Jay087, For javascript help, please visit /r/LearnJavascript. Thank you!
https://codereview.stackexchange.com/
Redux complicates things in terms of cognitive overhead and boilerplate. Redux simplifies things in terms of coordinating state management among many components.
You can try in our [WTF Wednesday](https://www.reddit.com/r/javascript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AWTF%2BWednesday) series, and/or at [codereview.stackexchange.com](https://codereview.stackexchange.com/).
Guys this is hilarious, I don’t think it was meant as a serious question. Did you open the poll? 
Why is a post in r/syriancivilwar redirecting to this one? Weird!
I'm pretty sure event delegation or virtualizing the canvas would be better solutions, but just to be pedantic. Webassembly would not help in this case due to browser incompatitbily &gt; Internet explorer is your only usable browser...
I don't think it's considered bad practice. I think, however, when you get used to standard JavaScript patterns and architecture, you will find less and less usecases for OOP. In terms of whether MDN is enough to learn JavaScript in-depth, no. I don't think any one resource is going to really teach you everything you need to know. I think MDN is a fantastic resource, and it will teach you a lot about both syntax and language behavior, but you will learn best by actually making things, going on Reddit, going on StackOverflow, etc. as well as, yes, going on MDN for reference.
I'd say that heavily OOP in Java fashion is bad for the most part. You should be using FP patterns, though OO can be useful when needed. Basically, the exact opposite of Java 8+ which is heavily OO and uses FP patterns where it makes sense. The reason mostly being that OOP in JS is kind of a hack, since the language itself is not inheritanly OO, even if we do have some ES6 sugar that makes it easier to do. Before the ES6 sugar, everyone kind of invented their own ways of going about OOP. A lot of times it just ended up being a convoluted mess, even if you did try to follow some common design patterns. 
hash table of the last market price indexed by stock symbol.
thank you. looking for contributors. too much work for one person
Hi /u/for-asking-stuffs, For javascript help, please visit /r/LearnJavascript. Thank you!
You may be interested in my [suggested resources for learning Redux](http://blog.isquaredsoftware.com/2017/12/blogged-answers-learn-redux/), and my [React/Redux links list](https://github.com/markerikson/react-redux-links).
A helpful reading. Thanks!
OOP is having a bit of a rennaissance in Javascript with the ES6 classes. Finally a standard way of declaring classes instead of a thousand homebrew solutions. The parts that are good about OOP work reasonably well in Javascript, the parts that are bad about OOP (deep inheritance chains) are as bad as they are in Java and maybe even a bit more awkward. JavaScript code used to put more emphasis to FP practices, but Java 8 has caught up a lot there for most practical purposes. 
I haven't used rxjs, but from the looks of it the functions you are talking about are actually methods. When a function is a not a method and relies on it's data passed as an argument any attempt to type composition will break down when you reach generic types. For example the code `range(1, 200).pipe(filter(x =&gt; x % 2 === 1), map(x =&gt; x + x))` Cannot be written as `const something = pipe(filter(x =&gt; x % 2 === 1), map(x =&gt; x + x))` Because then the pipe function can't evaluate the type of the filter function since it needs a concrete type but it's generic instead, the type will actually resolve to {} Also question is really funny considering I have not only used TypeScript, but I've also contributed to the compiler itself :\)
That use-case (probably!) doesn't encounter the collision case, as like you said, it's indexed by stock symbol. You're overwriting the value (last market price) associated with each stock symbol. The collision use-case would be if two separate stock symbols hashed to the same bucket
So you've made a basic bloom filter then?
I was just replying to “in which cases are non collision hash tables useable” The answer is “plenty of cases!” 
Really cool, except that 
[removed]
I really like luxon which is by thee moment team
Here here! I hate paywall sites that discuss open-source projects. 
Honestly it's not about "use case" - there would be no reason not to use a `Map` if you wanted a non string hashtable. My intentions were: 1. Write a really implemention-lite hash table 2. Show someone who might never have even bumped into the idea of a hash table how it works *in essence*.
As a lover of markdown and easy to use build tools I'm definitely checking this out. Thanks!
Try the [Filesystem API](https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API).
Nope, JavaScript in the browser has no api for the filesystem
Well, I guess in the end I couldn't help myself. [Here's a conflict resolving HashTable](https://gist.github.com/francisrstokes/82cdcb29c79cc9ef6eac50597cfd2c19#file-conflictresolvinghashtable-js). 
I disagree with this notion. I am admittedly a Medium member, but only because I want to support the experiment of rewarding the content creator for the value they provide me, and not their ability to attract advertisers \(i.e. clickbait\). I understand the desire to have content on this subreddit be accessible to all, but if all subreddits had this rule we are locking ourselves into the clickbait and advertisement dependent approach to content creation. I think that would be a shame.
I agree with you that the best content is when the authors want to share something they are knowledgable and passionate about. Having a financial incentive would enable more people like this to create content \(i.e. people that don't have the time/money required to write something of value\) . My argument is more about keeping that option alive. On reddit, we already have the ability to upvote/downvote content we like. We can downvote content that is behind a paywall if we want. Blocking all of this content just removes this option.
I listen to this podcast as soon as an episode comes out. It's one of the best. At the same time I've felt this is more for JavaScript newcomers.
It'd be great if there was a policy where articles behind a paywall weren't allowed then we wouldn't have to downvote them.
Someone tell me how to feel
At work, AngularJS, Angular, React,Backbone and ExtJS. Learning off the job: Hapi, D3js and ASMjs
Unrelated, but why is there such a fuss about medium.com? All I can see there is clickbait articles or stealthly promoting author's products.
Boy howdy, is this is really poorly built. I can basically click an option and then run an interval that continually clicks it. 
I'm not sure what you are talking about but first, you can just use type inference: const obs$ = range(1, 200).pipe( filter(x =&gt; x % 2 === 1), map(x =&gt; x + x)); And it will correctly infer obs$ to be of type Observable&lt;number&gt;. Further, if you want to provide the type explicitly for some reason const obs$: Observable&lt;number&gt; = range(1, 200).pipe( filter(x =&gt; x % 2 === 1), map(x =&gt; x + x)); Works just fine. Because the generics are passed down. It doesn't resolve to {}, it correctly infers to Observable&lt;number&gt; *and* works if you explicitly mark it as such or not. 
Can js 
This is a really great resource. Though, I don't like the question about the event loop *for Node.js*. The event loop doesn't exclusively belong to Node.js, it's also for Web APIs like `setTimeout`, etc. I'm too lazy to open an issue / don't want it to appear on my github timeline.
Don't take risk. Give her ample time. You don't want her trying things in night.
Thanks!
Now I stand here waiting 
I’ve found this oddly motivating as a person who’s learning web development as a hobby. It opened my eyes of the things I don’t understand yet. 
Didn't know some of the junior ones, but did know most of the intermediate ones. I don't know where that places me, lol :D
I just want to say thanks for compiling these. Stumbled across these links in another comment you made here a few weeks back, and they really helped me in wrapping my head around Redux.
https://imgur.com/gallery/AdiBPrO
Good questions. The division is pretty goofy though - i.e. explaining what "this" is should be something any junior with a little bit of experience can do. Or CSS BEM, that's pretty arbitrary to include at all imo, especially at the junior level. Idk, maybe ditch the skill divisions?
&gt; Brave with BAT token Please explain
I don't really know what recently changed at youtube, so I can't really respond to your point. I can say that it sounds more like an issue with youtube's search/recommendation algorithms than anything else.
Too bad about Medium. I love how clean and simple it is to write articles using that platform.
Regex by the looks of things. 
hey, I like helping people unfortunately and I'm pretty good with js maybe I can help your face, jackwita@gmail.com 
Thanks. If you have enough time to casually sit down and write some article that nobody even cares about anyway, you already have enough money. Or you should get out from your moms basement and get a job, I guess...
Communism on it's own is not a bad idea either.
[https://www.basicattentiontoken.org/](https://www.basicattentiontoken.org/)
If downvoting autodeleted posts nobody wants to see then it wouldn't be a problem. But it doesn't.
The worst I've seen is \_premium\_ articles which are official reposts from official sites like The Atlantic. I think [Medium.com](https://Medium.com) decided to make it premium but no\-one checked to make sure that it's actually \_premium\_.
Usually I'll put my hands on an object as the first step. Hopefully that works for you too.
For now. Long term you absolutely will be able to run it without JS, and people will start compiling lots of languages to WASM to avoid using JS. 
These are the games I have been looking at: [https://en.boardgamearena.com/#!gamelist](https://en.boardgamearena.com/#!gamelist) These are simple PHP/HTML/JavaScript games. But I don't know specifically how the images arrive in the client. Probably either CSS or \&lt;img\&gt; tag, but it may depend on the specific game. To actually see it in action, though, I'd probably have to start playing with someone. 
Time to move to github pages and publish there
That's a huge help \- thanks. It probably depends on the individual game, as far as how the images are sent to the client. I don't \*think\* anyone is using SVG. I'll have a look next time I play \- they have a few solo games that might help in developing this. And the greasemonkey tip is great. Clicking on the bookmarklet \*could\* work too, since they are mainly turn\-based games. Here's the site, in case you are interested: [https://en.boardgamearena.com/#!gamelist](https://en.boardgamearena.com/#!gamelist)
Maybe. Outside of the browser, there are already better solutions. Inside of the browser, if WASM can't break out of having its memory defined and containerized within JavaScript, then it won't. Even if it becomes a completely standalone tech, it's not going to *replace* JavaScript... it's just going to allow people who don't like JavaScript to code on the web. I think you're forgetting a few important facts, though: 1. WASM doesn't natively support garbage collection, and this seems to make some developers uncomfortable. 2. Node.js is still growing, despite already having access to all of the languages WASM supports. WASM and JS fill adjacent roles, but WASM is heavily focused on performance at a significant cost to development time. That makes it useful for computationally heavy websites \(e.g. 3D graphics, enormous data sets\), but an aggressively terrible choice for most web\-based JavaScript tasks. If performance were the only consideration then tech like Node.js wouldn't exist and we would all be writing assembly.
I voted Trump
Great, glad those have helped!
We're not outright banning the platform, unless they go 100% membership-based. As far as I can tell, the membership thing is opt-in on a per-author basis currently.
"degraded"? It was always so...
Interesting, thanks for putting it together &gt; As with last year’s survey, many users say that Node.js has had a positive impact on their business — chiefly through increased developer productivity and satisfaction. There is obvious bias there in that if I think node was a steaming pile of horseshite I wouldn't fill in a survey about it, in fact I would probably not even see it...
It's pretty capitalistic to defend paywalls. What side are you trying to be on this issue? lol
Syntax highlighting though.
we don't need a two tiered system, where some people get access to resources because they can afford it and others dont because they can't. especially when I regularly see users on this sub who arent working as developer yet and are just trying to learn. if people want to create awesome content behind a paywall, they are free to do so. those of us that want to find and can afford it will buy it. but I think keeping paywall protected content off a sub as general as this one makes sense if the goal is to have it be as open and accessible to anyone as possible.
On that note, it would be awesome if the jsdoc support got a little bit of love. I'm having to work on a javascript project, and really wishing I could do some slightly more advanced typing things (like subclassing types (/** `@typedef {Human} Coder */`), extending builtin types or having some way to reference out-of-module types without importing them) that typescript can totally do, but that aren't exposed through the jsdoc bits (yet?) 
What I like about it is that it broke the expectation that everyone's blog has to be either heavily customised and flashy or be really obviously tied to the host's template. I mainly do backend and data analysis, with a little bit of frontend, and I *really* can't be bothered to dive into jekyll and theming and so on to host on github pages, but also I feel like I'll get judged hard for using an off-the-rack theme. And I don't trust my own hardware/ sysadmin skills to run my own ghost instance.
&gt; I'm not sure what you are talking about Seems like you haven't used function composition in the context of a functional language. Function composition is NOT a method on a object. Because pipe is a method in your example, it always knows what data it's going to be working on \(in your case the numbers from 1 to 200\). The power of function composition is to write compositions and then applying them to any data that type checks. Here's an example: const incAndShow = pipe(x =&gt; x + 1, x =&gt; x.toString()) const appliedToNumber = incAndShow(1) const appliedToRxJS = incAndShow(range(1, 200)) Here you can see that I am using `incAndShow` on both a regular number and a rxjs stream because pipe is just a function, not a method. Unfortunately the pipe function in my example cannot be typed in TypeScript.
Oh god, more blockchain... 
We are happy to hear this! Good luck with your journey. If you ever encounter a problem, we are here to help!
Point taken. We will work on this very soon. I will count this as contribution. Thanks :\)
We are still a bit struggling with sorting which question goes to which category but we will hopefully fix this soon. Good job for intermediate ones, there're going to be more of them soon!
Grow up.
Most efficient? Idk. But you can try this: * empty array * give each card a value (make sure each pair has the same value) * when card is clicked, add to empty array * if array = 2, run compare if card values equal each other 
what about hackernoon?
That's a great point. Thanks for sharing. You're right that discussions would be a lot more fruitful for free articles than thoes behind a paywall. However, reddit is more than just a place to discuss content. It's also a place to discover content. The majority of authors are being paid for their work, either through advertisements or employment. If the content is good, we should be free to share it regardless of how the author chooses to monetize it. 
It's a blog that pays authors. Tech people love publishing to it, because they get paid to rant. The fact that it pays attracts click bait, but that doesn't innately stop talented people with things worth hearing from publishing.
_[Please pay $1 to unlock this comment.]_
There's plenty of free content. No one should have to pay to find out if you were worth the investment. If someone really is as talented author as they claim, they can use a donation link. The entire reddit platform is based around being free. No one visits reddit because they want a shopping e-zine.
I find it decreases the cognitive load because you always have one source of truth and one standard way of interacting with that source of truth. It looks like a bit more to write up\-front, but once you've tracked a couple mutation bugs down a component hierarchy, it begins to look very nice indeed.
[Medium Articles](https://sananab.ca/posts/43)
[Here](https://github.com/CharlesStover/shopping-list)'s a shopping list app I made with React for my father. [Live demo](https://charlesstover.github.io/shopping-list/) using Github Pages. It's one of my first attempts to transition into the open source world, as I always used to keep my code uglified or back end until very recently.
Are they also paywalling?
WASM will absolutely break out of any JS containerization in the long run. If it becomes a standalone tech it absolutely will replace JavaScript in a lot of ways. Sure JavaScript won't get removed completely from browsers for legacy reasons, but few informed people will choose to use it. 1. Doesn't really matter since it's a compile target, so it's no worse than ASM which everyone relies on all the time. 2. That's a bad argument, JS on the backend only exists and is only still used because of JS on the frontend. More code reuse and less learning required. If JS's frontend popularity dropped so would it's backend popularity. It seems like you don't understand that WASM is a compile target, WASM does not cost developer time, besides the initial creation and maintenance of the compiler from your language of choice to WASM. It's actually quite funny that you trot out the "we'd all be using ASM" line, because we ARE, we do all use ASM for everything under the covers (well machine code but whatever), even for non-performance-sensitive tasks. Just like in the long run we will all be using WASM in the browser, just via a compiler. Like seriously this confuses me greatly, does no one on this subreddit get that WASM is a compile target and almost no one will write it directly? It will be a great thing to use for all kinds of web tasks assuming you have a compiler from your language of choice, and I know Haskell, Rust, C, Java, C# and C++ all either have working WASM compilers or are currently developing one. 
We haven't documented them fully, but our JS inference and JSDoc support has had a *ton* of work poured into TypeScript 2.9. This includes understanding new constructs and fixing a general class of issues. A lot of this was luckily driven by Webpack's migration to use TypeScript's `--checkJs` mode which is powered by JSDoc annotations. &gt; having some way to reference out-of-module types without importing them This is actually possible using TypeScript's new `import()` types! ```/** * @typedef {import("./thing").SomeType} SomeType */ /** * @param asd {SomeType} */ export function foo(param) { // ... } ```
Fair point. I agree that it's up to the author/platform to build a bit of trust with the reader that the content will be worth paying for up front. That is something that they will have to work on. For that reason, there will always be free content. What I don't like is good content being blocked because of how the author chooses to monetize it. 
Can you compare this with React Router? Why might someone prefer one or the other?